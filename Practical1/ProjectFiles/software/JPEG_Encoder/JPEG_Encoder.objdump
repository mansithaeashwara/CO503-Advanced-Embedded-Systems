
JPEG_Encoder.elf:     file format elf32-littlenios2
JPEG_Encoder.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00041428 memsz 0x00041428 flags r-x
    LOAD off    0x00042448 vaddr 0x00041448 paddr 0x00042f50 align 2**12
         filesz 0x00001b08 memsz 0x00001b08 flags rw-
    LOAD off    0x00044a58 vaddr 0x00044a58 paddr 0x00044a58 align 2**12
         filesz 0x00000000 memsz 0x04000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003e9dc  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000028b4  0003eb94  0003eb94  0003fb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b08  00041448  00042f50  00042448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          040006d5  00044a58  00044a58  00044a58  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00043f50  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001920  00000000  00000000  00043f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0006ee72  00000000  00000000  00045898  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013002  00000000  00000000  000b470a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001a74c  00000000  00000000  000c770c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00004780  00000000  00000000  000e1e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000833f  00000000  00000000  000e65d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001d927  00000000  00000000  000ee917  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0010c240  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0010c250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00113abb  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00113abe  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00113ac1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00113ac2  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00113ac3  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00113ac7  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00113acb  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00113acf  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00113ad8  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00113ae1  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00113aea  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003f  00000000  00000000  00113aed  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00050094  00000000  00000000  00113b2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0003eb94 l    d  .rodata	00000000 .rodata
00041448 l    d  .rwdata	00000000 .rwdata
00044a58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../JPEG_Encoder_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bmp_extract.c
00000000 l    df *ABS*	00000000 jpeg_encoding.c
00000000 l    df *ABS*	00000000 cdjpeg.c
00000000 l    df *ABS*	00000000 jaricom.c
00000000 l    df *ABS*	00000000 jcapimin.c
00000000 l    df *ABS*	00000000 jcapistd.c
00000000 l    df *ABS*	00000000 jcarith.c
00001670 l     F .text	000000b0 emit_byte
00001720 l     F .text	00000334 finish_pass
00001a54 l     F .text	00000300 arith_encode
00001d54 l     F .text	0000019c emit_restart
00001ef0 l     F .text	00000474 encode_mcu_DC_first
00002364 l     F .text	000004d4 encode_mcu_AC_first
00002838 l     F .text	00000134 encode_mcu_DC_refine
0000296c l     F .text	00000494 encode_mcu_AC_refine
00002e00 l     F .text	000007e8 encode_mcu
000035e8 l     F .text	000003a8 start_pass
00000000 l    df *ABS*	00000000 jccoefct.c
00003a68 l     F .text	000000a0 start_iMCU_row
00003b08 l     F .text	00000154 start_pass_coef
00003c5c l     F .text	00000434 compress_data
00004090 l     F .text	00000420 compress_first_pass
000044b0 l     F .text	00000308 compress_output
00000000 l    df *ABS*	00000000 jccolor.c
00004988 l     F .text	000001d4 rgb_ycc_start
00004b5c l     F .text	00000270 rgb_ycc_convert
00004dcc l     F .text	00000168 rgb_gray_convert
00004f34 l     F .text	000002bc cmyk_ycck_convert
000051f0 l     F .text	000000d8 grayscale_convert
000052c8 l     F .text	0000010c null_convert
000053d4 l     F .text	00000020 null_method
00000000 l    df *ABS*	00000000 jcdctmgr.c
00005978 l     F .text	000001cc forward_DCT
00005b44 l     F .text	000001a8 forward_DCT_float
00005cec l     F .text	000006c8 start_pass_fdctmgr
0003ee30 l     O .rodata	00000080 aanscales.4176
0003eeb0 l     O .rodata	00000040 aanscalefactor.4184
00000000 l    df *ABS*	00000000 jchuff.c
00006470 l     F .text	00000438 jpeg_make_c_derived_tbl
000068a8 l     F .text	00000084 dump_buffer_s
0000692c l     F .text	000000ac dump_buffer_e
000069d8 l     F .text	000001a0 emit_bits_s
00006b78 l     F .text	00000194 emit_bits_e
00006d0c l     F .text	0000005c flush_bits_s
00006d68 l     F .text	00000048 flush_bits_e
00006db0 l     F .text	000000e4 emit_dc_symbol
00006e94 l     F .text	000000e4 emit_ac_symbol
00006f78 l     F .text	00000088 emit_buffered_bits
00007000 l     F .text	00000108 emit_eobrun
00007108 l     F .text	00000138 emit_restart_s
00007240 l     F .text	00000140 emit_restart_e
00007380 l     F .text	00000298 encode_mcu_DC_first
00007618 l     F .text	000002e4 encode_mcu_AC_first
000078fc l     F .text	0000019c encode_mcu_DC_refine
00007a98 l     F .text	000003c0 encode_mcu_AC_refine
00007e58 l     F .text	00000334 encode_one_block
0000818c l     F .text	000002d8 encode_mcu_huff
00008464 l     F .text	00000190 finish_pass_huff
000085f4 l     F .text	000001f0 htest_one_block
000087e4 l     F .text	000001e4 encode_mcu_gather
000089c8 l     F .text	000006c4 jpeg_gen_optimal_table
0000908c l     F .text	00000224 finish_pass_gather
000092b0 l     F .text	00000458 start_pass_huff
00000000 l    df *ABS*	00000000 jcinit.c
00000000 l    df *ABS*	00000000 jcmainct.c
00009950 l     F .text	000000b8 start_pass_main
00009a08 l     F .text	00000178 process_data_simple_main
00000000 l    df *ABS*	00000000 jcmarker.c
00009cfc l     F .text	000000b0 emit_byte
00009dac l     F .text	00000048 emit_marker
00009df4 l     F .text	00000058 emit_2bytes
00009e4c l     F .text	000001f8 emit_dqt
0000a044 l     F .text	000001e0 emit_dht
0000a224 l     F .text	00000290 emit_dac
0000a4b4 l     F .text	00000054 emit_dri
0000a508 l     F .text	00000188 emit_sof
0000a690 l     F .text	00000170 emit_sos
0000a800 l     F .text	00000090 emit_pseudo_sos
0000a890 l     F .text	0000010c emit_jfif_app0
0000a99c l     F .text	000000ec emit_adobe_app14
0000aa88 l     F .text	00000084 write_marker_header
0000ab0c l     F .text	00000038 write_marker_byte
0000ab44 l     F .text	00000078 write_file_header
0000abbc l     F .text	00000220 write_frame_header
0000addc l     F .text	0000011c write_scan_header
0000aef8 l     F .text	00000034 write_file_trailer
0000af2c l     F .text	0000011c write_tables_only
00000000 l    df *ABS*	00000000 jcmaster.c
0000b16c l     F .text	00000098 jpeg_calc_trans_dimensions
0000b204 l     F .text	00000738 initial_setup
0000b93c l     F .text	0000077c validate_script
0000c0b8 l     F .text	0000017c reduce_script
0000c234 l     F .text	00000248 select_scan_parameters
0000c47c l     F .text	0000040c per_scan_setup
0000c888 l     F .text	000002f4 prepare_for_pass
0000cb7c l     F .text	0000005c pass_startup
0000cbd8 l     F .text	000000f8 finish_pass_master
00000000 l    df *ABS*	00000000 jcomapi.c
00000000 l    df *ABS*	00000000 jcparam.c
0003eef0 l     O .rodata	00000100 std_luminance_quant_tbl
0003eff0 l     O .rodata	00000100 std_chrominance_quant_tbl
0000d3bc l     F .text	00000114 add_huff_table
0000d4d0 l     F .text	000000b8 std_huff_tables
0003f0f0 l     O .rodata	00000011 bits_dc_luminance.3790
0003f101 l     O .rodata	0000000c val_dc_luminance.3791
0003f10d l     O .rodata	00000011 bits_ac_luminance.3794
0003f11e l     O .rodata	000000a2 val_ac_luminance.3795
0003f1c0 l     O .rodata	00000011 bits_dc_chrominance.3792
0003f1d1 l     O .rodata	0000000c val_dc_chrominance.3793
0003f1dd l     O .rodata	00000011 bits_ac_chrominance.3796
0003f1ee l     O .rodata	000000a2 val_ac_chrominance.3797
0000df88 l     F .text	00000084 fill_a_scan
0000e00c l     F .text	000000a4 fill_scans
0000e0b0 l     F .text	000000f8 fill_dc_scans
00000000 l    df *ABS*	00000000 jcprepct.c
0000e550 l     F .text	0000009c start_pass_prep
0000e5ec l     F .text	0000007c expand_bottom_edge
0000e668 l     F .text	00000360 pre_process_data
0000e9c8 l     F .text	00000380 pre_process_context
0000ed48 l     F .text	00000264 create_context_buffer
00000000 l    df *ABS*	00000000 jcsample.c
0000f164 l     F .text	00000020 start_pass_downsample
0000f184 l     F .text	000000b8 expand_right_edge
0000f23c l     F .text	00000130 sep_downsample
0000f36c l     F .text	00000258 int_downsample
0000f5c4 l     F .text	000000b0 fullsize_downsample
0000f674 l     F .text	0000013c h2v1_downsample
0000f7b0 l     F .text	00000194 h2v2_downsample
0000f944 l     F .text	00000598 h2v2_smooth_downsample
0000fedc l     F .text	00000358 fullsize_smooth_downsample
00000000 l    df *ABS*	00000000 jctrans.c
00010b88 l     F .text	00000098 transencode_master_selection
00011158 l     F .text	000000fc transencode_coef_controller
00010c20 l     F .text	000000a0 start_iMCU_row
00010cc0 l     F .text	00000078 start_pass_coef
00010d38 l     F .text	00000420 compress_output
00000000 l    df *ABS*	00000000 jdatadst.c
00011254 l     F .text	00000074 init_destination
000112c8 l     F .text	00000020 init_mem_destination
000112e8 l     F .text	000000a4 empty_output_buffer
0001138c l     F .text	00000118 empty_mem_output_buffer
000114a4 l     F .text	000000ec term_destination
00011590 l     F .text	00000060 term_mem_destination
00000000 l    df *ABS*	00000000 jerror.c
0001184c l     F .text	00000038 error_exit
00011884 l     F .text	00000064 output_message
000118e8 l     F .text	000000a4 emit_message
0001198c l     F .text	00000204 format_message
00011b90 l     F .text	00000038 reset_error_mgr
00000000 l    df *ABS*	00000000 jfdctflt.c
00000000 l    df *ABS*	00000000 jfdctfst.c
00000000 l    df *ABS*	00000000 jfdctint.c
00000000 l    df *ABS*	00000000 jidctflt.c
00000000 l    df *ABS*	00000000 jidctfst.c
00000000 l    df *ABS*	00000000 jidctint.c
00000000 l    df *ABS*	00000000 jmemansi.c
00025028 l     F .text	000000c0 read_backing_store
000250e8 l     F .text	000000c0 write_backing_store
000251a8 l     F .text	0000003c close_backing_store
00000000 l    df *ABS*	00000000 jmemmgr.c
000252e8 l     F .text	00000060 out_of_memory
00042eb4 l     O .rwdata	00000008 first_pool_slop
00042ebc l     O .rwdata	00000008 extra_pool_slop
00025348 l     F .text	000002d8 alloc_small
00025620 l     F .text	00000178 alloc_large
00025798 l     F .text	00000178 alloc_sarray
00025910 l     F .text	00000188 alloc_barray
00025a98 l     F .text	000000f8 request_virt_sarray
00025b90 l     F .text	000000f8 request_virt_barray
00025c88 l     F .text	00000444 realize_virt_arrays
000260cc l     F .text	000001dc do_sarray_io
000262a8 l     F .text	000001e0 do_barray_io
00026488 l     F .text	000002e8 access_virt_sarray
00026770 l     F .text	000002ec access_virt_barray
00026a5c l     F .text	0000029c free_pool
00026cf8 l     F .text	0000007c self_destruct
00000000 l    df *ABS*	00000000 jquant1.c
000407b8 l     O .rodata	00000100 base_dither_matrix
00027030 l     F .text	00000240 select_ncolors
000408b8 l     O .rodata	0000000c RGB_order.3775
00027270 l     F .text	00000064 output_value
000272d4 l     F .text	00000060 largest_input_value
00027334 l     F .text	00000284 create_colormap
000275b8 l     F .text	00000278 create_colorindex
00027830 l     F .text	0000013c make_odither_array
0002796c l     F .text	0000011c create_odither_tables
00027a88 l     F .text	00000144 color_quantize
00027bcc l     F .text	00000164 color_quantize3
00027d30 l     F .text	000001f4 quantize_ord_dither
00027f24 l     F .text	0000023c quantize3_ord_dither
00028160 l     F .text	0000034c quantize_fs_dither
000284ac l     F .text	000000a8 alloc_fs_workspace
00028554 l     F .text	000001e0 start_pass_1_quant
00028734 l     F .text	00000020 finish_pass_1_quant
00028754 l     F .text	0000004c new_color_map_1_quant
00000000 l    df *ABS*	00000000 jquant2.c
000288e4 l     F .text	0000013c prescan_quantize
00028a20 l     F .text	0000007c find_biggest_color_pop
00028a9c l     F .text	00000074 find_biggest_volume
00028b10 l     F .text	00000758 update_box
00029268 l     F .text	00000240 median_cut
000294a8 l     F .text	00000298 compute_color
00029740 l     F .text	00000140 select_colors
00029880 l     F .text	00000568 find_nearby_colors
00029de8 l     F .text	000002b4 find_best_colors
0002a09c l     F .text	000001e4 fill_inverse_cmap
0002a280 l     F .text	00000190 pass2_no_dither
0002a410 l     F .text	00000528 pass2_fs_dither
0002a938 l     F .text	000001b0 init_error_limit
0002aae8 l     F .text	00000064 finish_pass1
0002ab4c l     F .text	00000020 finish_pass2
0002ab6c l     F .text	0000024c start_pass_2_quant
0002adb8 l     F .text	00000038 new_color_map_2_quant
00000000 l    df *ABS*	00000000 jutils.c
00000000 l    df *ABS*	00000000 jpeg_encoder.c
00044a58 l     O .bss	00000001 count
00000000 l    df *ABS*	00000000 fp-bit.c
0002b4a0 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002c024 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
0004100d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002cca8 l     F .text	00000008 __fp_lock
0002ccb0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getenv.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 impure.c
00041448 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0002ee74 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rewind.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
0002f25c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tmpfile.c
00000000 l    df *ABS*	00000000 tmpnam.c
0002f980 l     F .text	000000e0 worker
00000000 l    df *ABS*	00000000 vfprintf.c
0002fc20 l     F .text	00000034 __sprint_r
000411fe l     O .rodata	00000010 blanks.3515
0004120e l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vfscanf.c
00041226 l     O .rodata	00000022 basefix.3427
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00033660 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 environ.c
00044a6c l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fdopen.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00041268 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000413b0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 remove.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtod.c
00041c5c l     O .rwdata	00000014 fpi.2015
000413cc l     O .rodata	00000028 tinytens
00041c70 l     O .rwdata	00000014 fpinan.2051
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 unlinkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00039974 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0003b318 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0003bc8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0003bda8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0003be50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0003bf70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0003c064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0003c1e4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0003c2d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0003c4ac l     F .text	00000050 alt_get_errno
0003c4fc l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0003c744 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00042ef8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_unlink.c
0003c9b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0003ca40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0003cb80 l     F .text	00000038 alt_dev_reg
00041e2c l     O .rwdata	00001060 jtag_uart
00042e8c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0003ce78 l     F .text	00000204 altera_avalon_jtag_uart_irq
0003d07c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003d6b8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00042f38 l     O .rwdata	00000004 hcinfo.2311
00042f2c l     O .rwdata	00000004 hcinfo.2324
00042f20 l     O .rwdata	00000004 hcinfo.2333
00042f14 l     O .rwdata	00000004 hcinfo.2346
00042f08 l     O .rwdata	00000004 hcinfo.2359
00042efc l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003df38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003e6c0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
00040b08 g     O .rodata	000000d0 jpeg_natural_order6
00036934 g     F .text	00000074 _mprec_log10
000106f0 g     F .text	00000498 jpeg_copy_critical_parameters
00036a24 g     F .text	00000084 __any_on
00035508 g     F .text	00000064 _isatty_r
00044abc g     O .bss	00000034 g_input_file_header
00041298 g     O .rodata	00000028 __mprec_tinytens
0003c3f4 g     F .text	00000078 alt_main
0002f5d4 g     F .text	00000094 strcpy
0002c8c4 g     F .text	00000044 __ashldi3
0002eddc g     F .text	00000084 _puts_r
04044bf0 g     O .bss	00000100 alt_irq
0001a16c g     F .text	00000e30 jpeg_idct_13x13
00035680 g     F .text	0000006c _lseek_r
00042f50 g       *ABS*	00000000 __flash_rwdata_start
0000efac g     F .text	000001b8 jinit_c_prep_controller
00034f8c g     F .text	00000098 __sflags
0002f970 g     F .text	00000010 tmpfile
0003b720 g     F .text	0000005c __eqdf2
0002461c g     F .text	000004bc jpeg_idct_3x6
04044e80 g       *ABS*	00000000 __alt_heap_start
00037284 g     F .text	00000068 _kill_r
0002eda0 g     F .text	0000003c printf
0002f434 g     F .text	0000005c __sseek
0002cd4c g     F .text	0000010c __sinit
000355a4 g     F .text	0000009c _setlocale_r
0002ccc4 g     F .text	00000078 __sfmoreglue
00039828 g     F .text	0000001c ungetc
0003c48c g     F .text	00000020 __malloc_unlock
0000d1f0 g     F .text	00000080 jpeg_default_qtables
0003d7b4 g     F .text	0000016c alt_hostfs_open
000372f0 g     F .text	00001548 _strtod_r
00024f10 g     F .text	00000034 jpeg_get_small
000133f0 g     F .text	00000c74 jpeg_idct_float
0000d874 g     F .text	00000714 jpeg_set_colorspace
0000d2e4 g     F .text	00000084 jpeg_quality_scaling
00023598 g     F .text	000007e4 jpeg_idct_5x10
000358cc g     F .text	0000018c memmove
0000e1a8 g     F .text	000003a8 jpeg_simple_progression
0002cd3c g     F .text	00000010 _cleanup
00035a58 g     F .text	000000a8 _Balloc
0002b96c g     F .text	000000a4 __fixsfsi
00012540 g     F .text	000006a0 jpeg_fdct_ifast
00040bd8 g     O .rodata	000000a4 jpeg_natural_order5
0003b7d8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00017510 g     F .text	000000b4 jpeg_idct_1x1
00000000 g     F .entry	0000000c __reset
0002e044 g     F .text	0000002c getenv
00000020 g       *ABS*	00000000 __flash_exceptions_start
00014b58 g     F .text	00000c44 jpeg_idct_islow
0002dc4c g     F .text	00000068 _fstat_r
00044a5c g     O .bss	00000004 errno
000331e8 g     F .text	00000024 __svfscanf
00003990 g     F .text	000000d8 jinit_arith_encoder
00018954 g     F .text	00000c68 jpeg_idct_11x11
0002c52c g     F .text	0000002c __make_fp
00044a80 g     O .bss	00000004 alt_argv
0004aeb4 g       *ABS*	00000000 _gp
0002b6e0 g     F .text	00000058 __subsf3
0003bf50 g     F .text	00000020 getpid
0001bd1c g     F .text	00000e10 jpeg_idct_15x15
00021544 g     F .text	00000ca4 jpeg_idct_8x16
00041cac g     O .rwdata	00000180 alt_fd_list
0001ea44 g     F .text	00000b20 jpeg_idct_14x7
0000d270 g     F .text	00000074 jpeg_set_linear_quality
0003dafc g     F .text	000000b8 alt_hostfs_seek
0003e0e0 g     F .text	00000090 alt_find_dev
0002eaec g     F .text	00000140 memcpy
0003a28c g     F .text	0000028c __hexnan
0001db74 g     F .text	00000ed0 jpeg_idct_16x8
00001124 g     F .text	00000044 jpeg_write_m_byte
0002ccb8 g     F .text	0000000c _cleanup_r
0002b0cc g     F .text	00000058 jround_up
0003b958 g     F .text	000000d4 __floatsidf
0003e284 g     F .text	00000084 alt_fs_reg
0003e7a0 g     F .text	00000078 alt_io_redirect
0003b8a0 g     F .text	0000005c __ltdf2
0003eb94 g       *ABS*	00000000 __DTOR_END__
0000d588 g     F .text	000001fc jpeg_set_defaults
0002ee60 g     F .text	00000014 puts
00035750 g     F .text	00000040 mbrtowc
0002fa60 g     F .text	00000098 _tmpnam_r
00023d7c g     F .text	000008a0 jpeg_idct_4x8
0003319c g     F .text	0000004c _vfscanf_r
00036890 g     F .text	000000a4 __ratio
00040c7c g     O .rodata	00000080 jpeg_natural_order4
0003d27c g     F .text	00000218 altera_avalon_jtag_uart_read
000252a0 g     F .text	00000028 jpeg_mem_init
0002e340 g     F .text	00000014 malloc
0002ed74 g     F .text	0000002c _printf_r
00037140 g     F .text	00000014 remove
0002b084 g     F .text	00000048 jdiv_round_up
0002c144 g     F .text	00000008 __udivsi3
0003bfc0 g     F .text	000000a4 isatty
0003556c g     F .text	00000038 iswspace
000412e8 g     O .rodata	000000c8 __mprec_tens
00035640 g     F .text	0000000c __locale_charset
0003a518 g     F .text	00000084 __fixunsdfsi
00044a68 g     O .bss	00000004 __malloc_top_pad
000372ec g     F .text	00000004 _getpid_r
00022cc4 g     F .text	000008d4 jpeg_idct_6x12
0002113c g     F .text	000002e4 jpeg_idct_4x2
000391e4 g     F .text	00000024 strtoul
00042edc g     O .rwdata	00000004 __mb_cur_max
0003564c g     F .text	0000000c _localeconv_r
00039208 g     F .text	00000394 _strtoull_r
00035e88 g     F .text	0000003c __i2b
00035024 g     F .text	000004e4 __sfvwrite_r
0002f0c8 g     F .text	00000064 _sbrk_r
0001af9c g     F .text	00000d80 jpeg_idct_14x14
0003d98c g     F .text	000000b8 alt_hostfs_read
000251e4 g     F .text	000000bc jpeg_open_backing_store
00016fa4 g     F .text	00000334 jpeg_idct_3x3
00036aa8 g     F .text	0000006c _read_r
00041c50 g     O .rwdata	0000000c __lc_ctype
00042ef0 g     O .rwdata	00000004 alt_max_fd
0002c77c g     F .text	00000104 __unpack_d
0002c940 g     F .text	0000013c _fclose_r
0002cc78 g     F .text	00000030 fflush
00044a64 g     O .bss	00000004 __malloc_max_sbrked_mem
0003b66c g     F .text	00000054 __adddf3
00036604 g     F .text	00000148 __b2d
000053f4 g     F .text	00000584 jinit_color_converter
0003abec g     F .text	00000628 __umoddi3
0003c320 g     F .text	000000d4 lseek
00042ec8 g     O .rwdata	00000004 _global_impure_ptr
0000cf28 g     F .text	00000058 jpeg_destroy
0003ec68 g     O .rodata	000001c8 jpeg_aritab
00036b14 g     F .text	000005fc _realloc_r
04044e80 g       *ABS*	00000000 __bss_end
0003e5d0 g     F .text	000000f0 alt_iic_isr_register
0002b124 g     F .text	000000d0 jcopy_sample_rows
0003e8b0 g     F .text	00000104 alt_tick
04044af0 g     O .bss	00000100 __hexdig
0002b34c g     F .text	00000154 convert_picture
0003a59c g     F .text	00000650 __udivdi3
000412c0 g     O .rodata	00000028 __mprec_bigtens
00035c6c g     F .text	00000104 __s2b
00016018 g     F .text	00000608 jpeg_idct_6x6
0002bf08 g     F .text	0000011c __floatunsidf
000363a4 g     F .text	00000058 __mcmp
0000cfd4 g     F .text	00000054 jpeg_alloc_huff_table
00042ec4 g     O .rwdata	00000004 __ctype_ptr
0002cf64 g     F .text	00000018 __fp_lock_all
0003e584 g     F .text	0000004c alt_ic_irq_enabled
00009b80 g     F .text	0000017c jinit_c_main_controller
0003e818 g     F .text	00000098 alt_alarm_stop
00038bec g     F .text	00000024 strtol
00044a88 g     O .bss	00000004 alt_irq_active
0003d920 g     F .text	0000006c alt_hostfs_close
000000ec g     F .exceptions	000000cc alt_irq_handler
00041c84 g     O .rwdata	00000028 alt_dev_null
000405a0 g     O .rodata	00000200 jpeg_std_message_table
0002c464 g     F .text	000000c8 __unpack_f
00000f48 g     F .text	0000011c jpeg_write_marker
00024ad8 g     F .text	00000310 jpeg_idct_2x4
0003df1c g     F .text	0000001c alt_dcache_flush_all
00035d70 g     F .text	00000068 __hi0bits
0003ba2c g     F .text	000000d4 __fixdfsi
0001cb2c g     F .text	00001048 jpeg_idct_16x16
00038838 g     F .text	0000001c strtod
0002adf0 g     F .text	00000294 jinit_2pass_quantizer
00042f50 g       *ABS*	00000000 __ram_rwdata_end
00039844 g     F .text	00000064 _unlink_r
00042ee8 g     O .rwdata	00000008 alt_dev_list
0003ca90 g     F .text	000000f0 write
00009708 g     F .text	00000144 jinit_huff_encoder
0002f07c g     F .text	00000038 _rewind_r
0003b268 g     F .text	0000005c __gtsf2
00042ed8 g     O .rwdata	00000004 environ
00041448 g       *ABS*	00000000 __ram_rodata_end
0003bea0 g     F .text	000000b0 fstat
0002d108 g     F .text	00000024 fprintf
0002c880 g     F .text	00000044 __lshrdi3
0003c0b4 g     F .text	00000130 kill
0003b8fc g     F .text	0000005c __ledf2
00011c88 g     F .text	000008b8 jpeg_fdct_float
0002f498 g     F .text	00000098 strcat
0003611c g     F .text	0000012c __pow5mult
00044a78 g     O .bss	00000004 __nlocale_changed
0002c14c g     F .text	00000008 __umodsi3
0002f16c g     F .text	0000002c _scanf_r
00011bc8 g     F .text	000000c0 jpeg_std_error
04044e80 g       *ABS*	00000000 end
0002c338 g     F .text	0000012c __pack_f
000408c4 g     O .rodata	00000140 jpeg_natural_order
0002dc28 g     F .text	00000024 fseek
000252c8 g     F .text	00000020 jpeg_mem_term
00000938 g     F .text	00000034 read_stdin
0003cdb8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000195bc g     F .text	00000bb0 jpeg_idct_12x12
0003eb94 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0003d72c g     F .text	00000088 alt_avalon_timer_sc_init
0002c28c g     F .text	000000ac __clzsi2
0003d494 g     F .text	00000224 altera_avalon_jtag_uart_write
0002f8a8 g     F .text	000000c8 _tmpfile_r
0002cf54 g     F .text	00000004 __sfp_lock_acquire
000357d4 g     F .text	000000f8 memchr
0002fc54 g     F .text	00001e7c ___vfprintf_internal_r
0002f198 g     F .text	00000058 _sprintf_r
0002d4e4 g     F .text	000002d0 _free_r
00016620 g     F .text	00000564 jpeg_idct_5x5
0000b048 g     F .text	000000cc jinit_marker_writer
00012be0 g     F .text	00000810 jpeg_fdct_islow
0003345c g     F .text	000001a0 __call_exitprocs
000014c0 g     F .text	000001b0 jpeg_write_raw_data
000287a0 g     F .text	00000144 jinit_1pass_quantizer
00026d74 g     F .text	000002bc jinit_memory_mgr
00044a74 g     O .bss	00000004 __mlocale_changed
00042ed0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00044a8c g     O .bss	00000004 _alt_tick_rate
00038c10 g     F .text	00000330 _strtoll_r
00036248 g     F .text	0000015c __lshift
00044a90 g     O .bss	00000004 _alt_nticks
0003c794 g     F .text	000000f4 read
00014064 g     F .text	00000af4 jpeg_idct_ifast
0003cbec g     F .text	00000068 alt_sys_init
0002b8c8 g     F .text	000000a4 __floatsisf
0002ed08 g     F .text	0000006c _open_r
00017f0c g     F .text	00000a48 jpeg_idct_10x10
0003ea64 g     F .text	00000130 __register_exitproc
00024fe8 g     F .text	00000040 jpeg_mem_available
0002f6f4 g     F .text	000000fc strncmp
0002b23c g     F .text	0000003c jzero_far
00035ec4 g     F .text	00000258 __multiply
0003d120 g     F .text	00000068 altera_avalon_jtag_uart_close
0002c154 g     F .text	00000028 __mulsi3
00041448 g       *ABS*	00000000 __ram_rwdata_start
0003eb94 g       *ABS*	00000000 __ram_rodata_start
0002f7f0 g     F .text	000000b8 strncpy
0003ca08 g     F .text	00000038 unlink
00044a94 g     O .bss	00000028 __malloc_current_mallinfo
0003b214 g     F .text	00000054 __eqsf2
0003674c g     F .text	00000144 __d2b
0003cc54 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00038f40 g     F .text	000002a4 _strtoul_r
00034eb8 g     F .text	000000b8 _fdopen_r
0003e308 g     F .text	000000d4 alt_get_fd
000172d8 g     F .text	00000238 jpeg_idct_2x2
0003bbbc g     F .text	000000d0 __fpcmp_parts_d
000335fc g     F .text	00000064 _close_r
000001f4 g     F .text	00000144 bmp_extract_header
0003e9e8 g     F .text	0000007c memcmp
0003cd14 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04044e80 g       *ABS*	00000000 __alt_stack_base
0003cd64 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002df38 g     F .text	000000b0 _fwrite_r
00034f70 g     F .text	0000001c fdopen
0002f264 g     F .text	0000007c sscanf
00000c40 g     F .text	00000104 jpeg_suppress_tables
000332e8 g     F .text	00000174 __swsetup_r
0002bcf4 g     F .text	000001b4 __divdf3
0002ce58 g     F .text	000000fc __sfp
000369a8 g     F .text	0000007c __copybits
00041848 g     O .rwdata	00000408 __malloc_av_
0002cf60 g     F .text	00000004 __sinit_lock_release
0002ba10 g     F .text	000002e4 __muldf3
0002f358 g     F .text	00000054 __sread
00040de8 g     O .rodata	00000010 __thenan_sf
0002d368 g     F .text	00000040 fread
0003e170 g     F .text	00000114 alt_find_file
00000c10 g     F .text	00000030 jpeg_abort_compress
0003df88 g     F .text	000000a0 alt_dev_llist_insert
0003c46c g     F .text	00000020 __malloc_lock
0002d0e0 g     F .text	00000028 _fprintf_r
0003c908 g     F .text	000000b0 sbrk
0002ca90 g     F .text	000001e8 _fflush_r
000398a8 g     F .text	000000cc _calloc_r
0002d0c4 g     F .text	0000001c fopen
00044a58 g       *ABS*	00000000 __bss_start
0002ec2c g     F .text	000000dc memset
0002b278 g     F .text	000000d4 main
0000d028 g     F .text	000001c8 jpeg_add_quant_table
0000ce80 g     F .text	000000a8 jpeg_abort
00044a84 g     O .bss	00000004 alt_envp
00044a60 g     O .bss	00000004 __malloc_max_total_mem
0003ccb4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002ddc4 g     F .text	00000014 ftell
0003b2c4 g     F .text	00000054 __ltsf2
0002d12c g     F .text	0000023c _fread_r
0002f490 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00001230 g     F .text	000000fc jpeg_start_compress
0002ca7c g     F .text	00000014 fclose
0000cf80 g     F .text	00000054 jpeg_alloc_quant_table
00038974 g     F .text	00000278 _strtol_r
0002bea8 g     F .text	00000060 __truncdfsf2
0002e070 g     F .text	0000010c _findenv_r
00000be0 g     F .text	00000030 jpeg_destroy_compress
04044cf0 g     O .bss	00000190 _atexit0
0003389c g     F .text	0000161c _dtoa_r
0002e368 g     F .text	00000784 _malloc_r
00001168 g     F .text	000000c8 jpeg_write_tables
0000d784 g     F .text	000000f0 jpeg_default_colorspace
00042ef4 g     O .rwdata	00000004 alt_errno
00024f7c g     F .text	00000034 jpeg_get_large
0003959c g     F .text	000000f0 __submore
0001f564 g     F .text	000008ec jpeg_idct_12x6
0003bdf4 g     F .text	00000020 __env_unlock
0002e028 g     F .text	0000001c _findenv
0002ddd8 g     F .text	000000a8 _fwalk
00000338 g     F .text	000001c4 bmp_rearrange_comps
0002fc0c g     F .text	00000014 tmpnam
00035790 g     F .text	00000044 _mbtowc_r
0002c098 g     F .text	00000050 __divsi3
00040df8 g     O .rodata	00000014 __thenan_df
0002d3a8 g     F .text	0000013c _malloc_trim_r
0003eb94 g       *ABS*	00000000 __CTOR_END__
0002b738 g     F .text	00000190 __mulsf3
0002f530 g     F .text	000000a4 strcmp
000009a0 g     F .text	00000240 jpeg_CreateCompress
0003eb94 g       *ABS*	00000000 __flash_rodata_start
0003eb94 g       *ABS*	00000000 __DTOR_LIST__
0003b77c g     F .text	0000005c __nedf2
0003cbb8 g     F .text	00000034 alt_irq_init
0003c888 g     F .text	00000080 alt_release_fd
0002f1f0 g     F .text	0000006c sprintf
00040e0c g     O .rodata	00000100 __clz_tab
00044a70 g     O .bss	00000004 _PathLocale
00038854 g     F .text	00000120 strtof
0003e9d4 g     F .text	00000014 atexit
00024fb0 g     F .text	00000038 jpeg_free_large
0003327c g     F .text	0000006c _write_r
00040cfc g     O .rodata	00000064 jpeg_natural_order3
00035658 g     F .text	0000001c setlocale
0002f12c g     F .text	00000040 scanf
00011694 g     F .text	000001b8 jpeg_mem_dest
000063b4 g     F .text	000000bc jinit_forward_dct
0003727c g     F .text	00000008 nanf
00042ecc g     O .rwdata	00000004 _impure_ptr
00044a7c g     O .bss	00000004 alt_argc
000356ec g     F .text	00000064 _mbrtowc_r
0003e084 g     F .text	0000005c _do_dtors
0002d7b4 g     F .text	00000474 _fseek_r
000221e8 g     F .text	00000adc jpeg_idct_7x14
0002ee90 g     F .text	000001ec __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
000365a4 g     F .text	00000060 __ulp
00037154 g     F .text	00000038 __isinfd
0002cf7c g     F .text	00000018 __fp_unlock_all
0000984c g     F .text	00000104 jinit_compress_master
0000b114 g     F .text	00000058 jpeg_calc_jpeg_dimensions
0000080c g     F .text	0000012c keymatch
00020cbc g     F .text	00000480 jpeg_idct_6x3
00042ee0 g     O .rwdata	00000008 alt_fs_list
0001579c g     F .text	0000087c jpeg_idct_7x7
00040a04 g     O .rodata	00000104 jpeg_natural_order7
0003da44 g     F .text	000000b8 alt_hostfs_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00035674 g     F .text	0000000c localeconv
00000d44 g     F .text	00000204 jpeg_finish_compress
00024de8 g     F .text	00000128 jpeg_idct_1x2
00044af0 g     O .bss	04000000 g_file_buffer
0003e3f8 g     F .text	00000050 alt_ic_isr_register
0002faf8 g     F .text	000000f8 _tempnam_r
0002dfe8 g     F .text	00000040 fwrite
00039a84 g     F .text	00000090 __hexdig_init
0002f2e0 g     F .text	00000078 _sscanf_r
00042f50 g       *ABS*	00000000 _edata
00020618 g     F .text	000006a4 jpeg_idct_8x4
04044e80 g       *ABS*	00000000 _end
00021420 g     F .text	00000124 jpeg_idct_2x1
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0003320c g     F .text	00000070 vfscanf
0003d188 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002f0b4 g     F .text	00000014 rewind
0003e4e4 g     F .text	000000a0 alt_ic_irq_disable
0002f3ac g     F .text	00000088 __swrite
00042ed4 g     O .rwdata	00000004 __malloc_trim_threshold
0003e9b4 g     F .text	00000020 altera_nios2_qsys_irq_init
00016b84 g     F .text	00000420 jpeg_idct_4x4
0002c908 g     F .text	00000038 exit
0002de80 g     F .text	000000b8 _fwalk_reent
00001064 g     F .text	000000c0 jpeg_write_m_header
000363fc g     F .text	000001a8 __mdiff
0002c0e8 g     F .text	0000005c __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0002cf58 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000068c g     F .text	00000180 jpeg_encode
00010234 g     F .text	000003f4 jinit_downsampler
000371b8 g     F .text	000000c4 __sccl
00040f0c g     O .rodata	00000101 _ctype_
0000d368 g     F .text	00000054 jpeg_set_quality
000115f0 g     F .text	000000a4 jpeg_stdio_dest
0003bb00 g     F .text	000000bc __fpcmp_parts_f
0002cf94 g     F .text	00000130 _fopen_r
0003718c g     F .text	0000002c __isnand
0003be14 g     F .text	0000003c _exit
0003dddc g     F .text	00000140 alt_alarm_start
0002c17c g     F .text	00000110 __muldi3
0002fbf0 g     F .text	0000001c tempnam
0002e198 g     F .text	000001a8 __smakebuf_r
0002f668 g     F .text	0000008c strlen
0003c5ec g     F .text	00000158 open
0000132c g     F .text	00000194 jpeg_write_scanlines
0003b83c g     F .text	00000064 __gedf2
00037110 g     F .text	00000030 _remove_r
00039b14 g     F .text	00000778 __gethex
000004fc g     F .text	00000190 bmp_extract
0002b1f4 g     F .text	00000048 jcopy_block_row
0002dcb4 g     F .text	00000110 _ftell_r
00010628 g     F .text	000000c8 jpeg_write_coefficients
0003e3dc g     F .text	0000001c alt_icache_flush_all
00042f44 g     O .rwdata	00000004 alt_priority_mask
0003e448 g     F .text	0000009c alt_ic_irq_enable
00024f44 g     F .text	00000038 jpeg_free_small
00031ad0 g     F .text	00000024 __vfprintf_internal
0003bdd4 g     F .text	00000020 __env_lock
0000096c g     F .text	00000034 write_stdout
0000ccd0 g     F .text	000001b0 jinit_c_master_control
0003b6c0 g     F .text	00000060 __subdf3
00035dd8 g     F .text	000000b0 __lo0bits
00031af4 g     F .text	000016a8 __svfscanf_r
00042f48 g     O .rwdata	00000008 alt_alarm_list
0003968c g     F .text	0000019c _ungetc_r
0003e028 g     F .text	0000005c _do_ctors
000047b8 g     F .text	000001d0 jinit_c_coef_controller
0003bcdc g     F .text	000000cc close
0002b694 g     F .text	0000004c __addsf3
0001fe50 g     F .text	000007c8 jpeg_idct_10x5
00040d60 g     O .rodata	00000050 jpeg_natural_order2
0003c250 g     F .text	00000080 alt_load
0002c558 g     F .text	00000224 __pack_d
000175c4 g     F .text	00000948 jpeg_idct_9x9
0002e354 g     F .text	00000014 free
0002cf5c g     F .text	00000004 __sinit_lock_acquire
00035b28 g     F .text	00000144 __multadd
00035b00 g     F .text	00000028 _Bfree
0002e17c g     F .text	0000001c _getenv_r
0003dbb4 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c10134 	movhi	r3,1028
 130:	18d2fc04 	addi	r3,r3,19440
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01010134 	movhi	r4,1028
 148:	2112fc04 	addi	r4,r4,19440
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c0:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
     1c4:	d6abad14 	ori	gp,gp,44724
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
     1cc:	10929614 	ori	r2,r2,19032

    movhi r3, %hi(__bss_end)
     1d0:	00c10134 	movhi	r3,1028
    ori r3, r3, %lo(__bss_end)
     1d4:	18d3a014 	ori	r3,r3,20096

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	003c2500 	call	3c250 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	003c3f40 	call	3c3f4 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <bmp_extract_header>:
#include "bmp_extract.h"

int8_t g_file_buffer[67108864];	// Create and Enormous buffer to avoid dynamic memory allocation
Bmp_header g_input_file_header;

int bmp_extract_header(Bmp_data *pic_data) {
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	dc000215 	stw	r16,8(sp)
     204:	df000204 	addi	fp,sp,8
     208:	e13fff15 	stw	r4,-4(fp)
	int i;

	if (pic_data->buffer[0] == 'B' && pic_data->buffer[1] == 'M') {
     20c:	e0bfff17 	ldw	r2,-4(fp)
     210:	10800117 	ldw	r2,4(r2)
     214:	10800003 	ldbu	r2,0(r2)
     218:	10803fcc 	andi	r2,r2,255
     21c:	1080201c 	xori	r2,r2,128
     220:	10bfe004 	addi	r2,r2,-128
     224:	10801098 	cmpnei	r2,r2,66
     228:	10003c1e 	bne	r2,zero,31c <bmp_extract_header+0x128>
     22c:	e0bfff17 	ldw	r2,-4(fp)
     230:	10800117 	ldw	r2,4(r2)
     234:	10800044 	addi	r2,r2,1
     238:	10800003 	ldbu	r2,0(r2)
     23c:	10803fcc 	andi	r2,r2,255
     240:	1080201c 	xori	r2,r2,128
     244:	10bfe004 	addi	r2,r2,-128
     248:	10801358 	cmpnei	r2,r2,77
     24c:	1000331e 	bne	r2,zero,31c <bmp_extract_header+0x128>
		for (i = 0; i < 52; i++) {
     250:	e03ffe15 	stw	zero,-8(fp)
     254:	00000e06 	br	290 <bmp_extract_header+0x9c>
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
     258:	e0bfff17 	ldw	r2,-4(fp)
     25c:	11000017 	ldw	r4,0(r2)
     260:	e0bfff17 	ldw	r2,-4(fp)
     264:	10c00117 	ldw	r3,4(r2)
     268:	e0bffe17 	ldw	r2,-8(fp)
     26c:	10800084 	addi	r2,r2,2
     270:	1885883a 	add	r2,r3,r2
     274:	10c00003 	ldbu	r3,0(r2)
     278:	e0bffe17 	ldw	r2,-8(fp)
     27c:	2085883a 	add	r2,r4,r2
     280:	10c00005 	stb	r3,0(r2)

int bmp_extract_header(Bmp_data *pic_data) {
	int i;

	if (pic_data->buffer[0] == 'B' && pic_data->buffer[1] == 'M') {
		for (i = 0; i < 52; i++) {
     284:	e0bffe17 	ldw	r2,-8(fp)
     288:	10800044 	addi	r2,r2,1
     28c:	e0bffe15 	stw	r2,-8(fp)
     290:	e0bffe17 	ldw	r2,-8(fp)
     294:	10800d10 	cmplti	r2,r2,52
     298:	103fef1e 	bne	r2,zero,258 <bmp_extract_header+0x64>
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
		}

		// Calculate the effective size of the data field
		pic_data->header->BMPDataSize = pic_data->header->BMPHeight * pic_data->header->BMPWidth
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	14000017 	ldw	r16,0(r2)
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	10800017 	ldw	r2,0(r2)
     2ac:	10c00517 	ldw	r3,20(r2)
     2b0:	e0bfff17 	ldw	r2,-4(fp)
     2b4:	10800017 	ldw	r2,0(r2)
     2b8:	10800417 	ldw	r2,16(r2)
     2bc:	1809883a 	mov	r4,r3
     2c0:	100b883a 	mov	r5,r2
     2c4:	002c1540 	call	2c154 <__mulsi3>
     2c8:	1007883a 	mov	r3,r2
				* (pic_data->header->BMPBitsPerPixel / 8);
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	10800017 	ldw	r2,0(r2)
     2d4:	1080068b 	ldhu	r2,26(r2)
     2d8:	10bfffcc 	andi	r2,r2,65535
     2dc:	1004d0fa 	srli	r2,r2,3
     2e0:	10bfffcc 	andi	r2,r2,65535
     2e4:	1809883a 	mov	r4,r3
     2e8:	100b883a 	mov	r5,r2
     2ec:	002c1540 	call	2c154 <__mulsi3>
		for (i = 0; i < 52; i++) {
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
		}

		// Calculate the effective size of the data field
		pic_data->header->BMPDataSize = pic_data->header->BMPHeight * pic_data->header->BMPWidth
     2f0:	80800815 	stw	r2,32(r16)
				* (pic_data->header->BMPBitsPerPixel / 8);

		pic_data->bitmap = &pic_data->buffer[pic_data->header->BMPDataOffset];
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10c00117 	ldw	r3,4(r2)
     2fc:	e0bfff17 	ldw	r2,-4(fp)
     300:	10800017 	ldw	r2,0(r2)
     304:	10800217 	ldw	r2,8(r2)
     308:	1887883a 	add	r3,r3,r2
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	10c00215 	stw	r3,8(r2)
		return 1;
     314:	00800044 	movi	r2,1
     318:	00000106 	br	320 <bmp_extract_header+0x12c>
	}
	return 0;
     31c:	0005883a 	mov	r2,zero
}
     320:	e037883a 	mov	sp,fp
     324:	dfc00217 	ldw	ra,8(sp)
     328:	df000117 	ldw	fp,4(sp)
     32c:	dc000017 	ldw	r16,0(sp)
     330:	dec00304 	addi	sp,sp,12
     334:	f800283a 	ret

00000338 <bmp_rearrange_comps>:

void bmp_rearrange_comps(Bmp_data *pic_data) {
     338:	defff704 	addi	sp,sp,-36
     33c:	dfc00815 	stw	ra,32(sp)
     340:	df000715 	stw	fp,28(sp)
     344:	dc000615 	stw	r16,24(sp)
     348:	df000604 	addi	fp,sp,24
     34c:	e13fff15 	stw	r4,-4(fp)
	int row, column;
	int8_t r, g, b, *row_ptr, *dest;

	// <*dest> starts from the top left of the image and moves downwards.
	// <*row_ptr> starts from the bottom left of the image and moves upwards.
	dest = pic_data->bitmap;
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	10800217 	ldw	r2,8(r2)
     358:	e0bffc15 	stw	r2,-16(fp)

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	10800017 	ldw	r2,0(r2)
     364:	10800517 	ldw	r2,20(r2)
     368:	10bfffc4 	addi	r2,r2,-1
     36c:	e0bffa15 	stw	r2,-24(fp)
     370:	00005606 	br	4cc <bmp_rearrange_comps+0x194>
		// We loop until <*dest> and <*row_ptr> meet in the middle of the image.

		row_ptr = &(pic_data->bitmap[row * pic_data->header->BMPWidth * 3]);
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	14000217 	ldw	r16,8(r2)
     37c:	e0bfff17 	ldw	r2,-4(fp)
     380:	10800017 	ldw	r2,0(r2)
     384:	10c00417 	ldw	r3,16(r2)
     388:	e0bffa17 	ldw	r2,-24(fp)
     38c:	1809883a 	mov	r4,r3
     390:	100b883a 	mov	r5,r2
     394:	002c1540 	call	2c154 <__mulsi3>
     398:	1007883a 	mov	r3,r2
     39c:	1805883a 	mov	r2,r3
     3a0:	1085883a 	add	r2,r2,r2
     3a4:	10c5883a 	add	r2,r2,r3
     3a8:	8085883a 	add	r2,r16,r2
     3ac:	e0bffd15 	stw	r2,-12(fp)
		for (column = 0; column < pic_data->header->BMPWidth * 3; column += 3) {
     3b0:	e03ffb15 	stw	zero,-20(fp)
     3b4:	00003a06 	br	4a0 <bmp_rearrange_comps+0x168>
			// Not only do we move data from <*dest> to <*row_ptr> and vice-versa,
			// we also need to reshuffle RGB components.
			r = dest[2];
     3b8:	e0bffc17 	ldw	r2,-16(fp)
     3bc:	10800083 	ldbu	r2,2(r2)
     3c0:	e0bffe05 	stb	r2,-8(fp)
			g = dest[1];
     3c4:	e0bffc17 	ldw	r2,-16(fp)
     3c8:	10800043 	ldbu	r2,1(r2)
     3cc:	e0bffe45 	stb	r2,-7(fp)
			b = dest[0];
     3d0:	e0bffc17 	ldw	r2,-16(fp)
     3d4:	10800003 	ldbu	r2,0(r2)
     3d8:	e0bffe85 	stb	r2,-6(fp)

			*dest++ = row_ptr[column + 2];
     3dc:	e0bffb17 	ldw	r2,-20(fp)
     3e0:	10800084 	addi	r2,r2,2
     3e4:	e0fffd17 	ldw	r3,-12(fp)
     3e8:	1885883a 	add	r2,r3,r2
     3ec:	10c00003 	ldbu	r3,0(r2)
     3f0:	e0bffc17 	ldw	r2,-16(fp)
     3f4:	10c00005 	stb	r3,0(r2)
     3f8:	e0bffc17 	ldw	r2,-16(fp)
     3fc:	10800044 	addi	r2,r2,1
     400:	e0bffc15 	stw	r2,-16(fp)
			*dest++ = row_ptr[column + 1];
     404:	e0bffb17 	ldw	r2,-20(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0fffd17 	ldw	r3,-12(fp)
     410:	1885883a 	add	r2,r3,r2
     414:	10c00003 	ldbu	r3,0(r2)
     418:	e0bffc17 	ldw	r2,-16(fp)
     41c:	10c00005 	stb	r3,0(r2)
     420:	e0bffc17 	ldw	r2,-16(fp)
     424:	10800044 	addi	r2,r2,1
     428:	e0bffc15 	stw	r2,-16(fp)
			*dest++ = row_ptr[column];
     42c:	e0bffb17 	ldw	r2,-20(fp)
     430:	e0fffd17 	ldw	r3,-12(fp)
     434:	1885883a 	add	r2,r3,r2
     438:	10c00003 	ldbu	r3,0(r2)
     43c:	e0bffc17 	ldw	r2,-16(fp)
     440:	10c00005 	stb	r3,0(r2)
     444:	e0bffc17 	ldw	r2,-16(fp)
     448:	10800044 	addi	r2,r2,1
     44c:	e0bffc15 	stw	r2,-16(fp)

			row_ptr[column] = r;
     450:	e0bffb17 	ldw	r2,-20(fp)
     454:	e0fffd17 	ldw	r3,-12(fp)
     458:	1885883a 	add	r2,r3,r2
     45c:	e0fffe03 	ldbu	r3,-8(fp)
     460:	10c00005 	stb	r3,0(r2)
			row_ptr[column + 1] = g;
     464:	e0bffb17 	ldw	r2,-20(fp)
     468:	10800044 	addi	r2,r2,1
     46c:	e0fffd17 	ldw	r3,-12(fp)
     470:	1885883a 	add	r2,r3,r2
     474:	e0fffe43 	ldbu	r3,-7(fp)
     478:	10c00005 	stb	r3,0(r2)
			row_ptr[column + 2] = b;
     47c:	e0bffb17 	ldw	r2,-20(fp)
     480:	10800084 	addi	r2,r2,2
     484:	e0fffd17 	ldw	r3,-12(fp)
     488:	1885883a 	add	r2,r3,r2
     48c:	e0fffe83 	ldbu	r3,-6(fp)
     490:	10c00005 	stb	r3,0(r2)

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
		// We loop until <*dest> and <*row_ptr> meet in the middle of the image.

		row_ptr = &(pic_data->bitmap[row * pic_data->header->BMPWidth * 3]);
		for (column = 0; column < pic_data->header->BMPWidth * 3; column += 3) {
     494:	e0bffb17 	ldw	r2,-20(fp)
     498:	108000c4 	addi	r2,r2,3
     49c:	e0bffb15 	stw	r2,-20(fp)
     4a0:	e13ffb17 	ldw	r4,-20(fp)
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	10800017 	ldw	r2,0(r2)
     4ac:	10c00417 	ldw	r3,16(r2)
     4b0:	1805883a 	mov	r2,r3
     4b4:	1085883a 	add	r2,r2,r2
     4b8:	10c5883a 	add	r2,r2,r3
     4bc:	20bfbe36 	bltu	r4,r2,3b8 <bmp_rearrange_comps+0x80>

	// <*dest> starts from the top left of the image and moves downwards.
	// <*row_ptr> starts from the bottom left of the image and moves upwards.
	dest = pic_data->bitmap;

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
     4c0:	e0bffa17 	ldw	r2,-24(fp)
     4c4:	10bfffc4 	addi	r2,r2,-1
     4c8:	e0bffa15 	stw	r2,-24(fp)
     4cc:	e0fffa17 	ldw	r3,-24(fp)
     4d0:	e0bfff17 	ldw	r2,-4(fp)
     4d4:	10800017 	ldw	r2,0(r2)
     4d8:	10800517 	ldw	r2,20(r2)
     4dc:	1004d07a 	srli	r2,r2,1
     4e0:	18bfa42e 	bgeu	r3,r2,374 <bmp_rearrange_comps+0x3c>
			row_ptr[column] = r;
			row_ptr[column + 1] = g;
			row_ptr[column + 2] = b;
		}
	}
}
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00217 	ldw	ra,8(sp)
     4ec:	df000117 	ldw	fp,4(sp)
     4f0:	dc000017 	ldw	r16,0(sp)
     4f4:	dec00304 	addi	sp,sp,12
     4f8:	f800283a 	ret

000004fc <bmp_extract>:

int bmp_extract(char *file_name, Bmp_data *pic_data) {
     4fc:	defff904 	addi	sp,sp,-28
     500:	dfc00615 	stw	ra,24(sp)
     504:	df000515 	stw	fp,20(sp)
     508:	df000504 	addi	fp,sp,20
     50c:	e13ffe15 	stw	r4,-8(fp)
     510:	e17fff15 	stw	r5,-4(fp)
	FILE *bmp_file = NULL;
     514:	e03ffb15 	stw	zero,-20(fp)
	int bmp_file_size, bytes_read;

	bmp_file = fopen(file_name, "rb");
     518:	e13ffe17 	ldw	r4,-8(fp)
     51c:	01400134 	movhi	r5,4
     520:	297ae504 	addi	r5,r5,-5228
     524:	002d0c40 	call	2d0c4 <fopen>
     528:	e0bffb15 	stw	r2,-20(fp)
	if(bmp_file == NULL) {
     52c:	e0bffb17 	ldw	r2,-20(fp)
     530:	1000061e 	bne	r2,zero,54c <bmp_extract+0x50>
		printf("Error opening the file %s\n", file_name);
     534:	01000134 	movhi	r4,4
     538:	213ae604 	addi	r4,r4,-5224
     53c:	e17ffe17 	ldw	r5,-8(fp)
     540:	002eda00 	call	2eda0 <printf>
		return 1;
     544:	00800044 	movi	r2,1
     548:	00004b06 	br	678 <bmp_extract+0x17c>
	}

	// Get the size of the file
	fseek(bmp_file, 0, SEEK_END);
     54c:	e13ffb17 	ldw	r4,-20(fp)
     550:	000b883a 	mov	r5,zero
     554:	01800084 	movi	r6,2
     558:	002dc280 	call	2dc28 <fseek>
	bmp_file_size = ftell(bmp_file);
     55c:	e13ffb17 	ldw	r4,-20(fp)
     560:	002ddc40 	call	2ddc4 <ftell>
     564:	e0bffc15 	stw	r2,-16(fp)
	rewind(bmp_file);
     568:	e13ffb17 	ldw	r4,-20(fp)
     56c:	002f0b40 	call	2f0b4 <rewind>

	pic_data->buffer = g_file_buffer;		// (int8_t *)malloc(bmp_file_size);
     570:	e0bfff17 	ldw	r2,-4(fp)
     574:	00c00134 	movhi	r3,4
     578:	18d2bc04 	addi	r3,r3,19184
     57c:	10c00115 	stw	r3,4(r2)

	// Read the whole file into the buffer
	bytes_read = fread((void *)pic_data->buffer, sizeof(int8_t), bmp_file_size, bmp_file);
     580:	e0bfff17 	ldw	r2,-4(fp)
     584:	10c00117 	ldw	r3,4(r2)
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	1809883a 	mov	r4,r3
     590:	01400044 	movi	r5,1
     594:	100d883a 	mov	r6,r2
     598:	e1fffb17 	ldw	r7,-20(fp)
     59c:	002d3680 	call	2d368 <fread>
     5a0:	e0bffd15 	stw	r2,-12(fp)

	fclose(bmp_file);
     5a4:	e13ffb17 	ldw	r4,-20(fp)
     5a8:	002ca7c0 	call	2ca7c <fclose>

	if(bytes_read != bmp_file_size)
     5ac:	e0fffd17 	ldw	r3,-12(fp)
     5b0:	e0bffc17 	ldw	r2,-16(fp)
     5b4:	18800526 	beq	r3,r2,5cc <bmp_extract+0xd0>
	{
		printf("Error occurred while reading the file\n\n");
     5b8:	01000134 	movhi	r4,4
     5bc:	213aed04 	addi	r4,r4,-5196
     5c0:	002ee600 	call	2ee60 <puts>
		return 2;
     5c4:	00800084 	movi	r2,2
     5c8:	00002b06 	br	678 <bmp_extract+0x17c>
	}

	pic_data->header = &g_input_file_header;	// (Bmp_header *)malloc(sizeof(Bmp_header));
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	00c00134 	movhi	r3,4
     5d4:	18d2af04 	addi	r3,r3,19132
     5d8:	10c00015 	stw	r3,0(r2)

	bmp_extract_header(pic_data);
     5dc:	e13fff17 	ldw	r4,-4(fp)
     5e0:	00001f40 	call	1f4 <bmp_extract_header>
	bmp_rearrange_comps(pic_data);
     5e4:	e13fff17 	ldw	r4,-4(fp)
     5e8:	00003380 	call	338 <bmp_rearrange_comps>

	printf("Size of the file: %d\n", (int)pic_data->header->BMPFileSize);
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800017 	ldw	r2,0(r2)
     5f4:	10800017 	ldw	r2,0(r2)
     5f8:	01000134 	movhi	r4,4
     5fc:	213af704 	addi	r4,r4,-5156
     600:	100b883a 	mov	r5,r2
     604:	002eda00 	call	2eda0 <printf>
	printf("Size of the height: %d\n", (int)pic_data->header->BMPHeight);
     608:	e0bfff17 	ldw	r2,-4(fp)
     60c:	10800017 	ldw	r2,0(r2)
     610:	10800517 	ldw	r2,20(r2)
     614:	01000134 	movhi	r4,4
     618:	213afd04 	addi	r4,r4,-5132
     61c:	100b883a 	mov	r5,r2
     620:	002eda00 	call	2eda0 <printf>
	printf("Size of the width: %d\n", (int)pic_data->header->BMPWidth);
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	10800017 	ldw	r2,0(r2)
     62c:	10800417 	ldw	r2,16(r2)
     630:	01000134 	movhi	r4,4
     634:	213b0304 	addi	r4,r4,-5108
     638:	100b883a 	mov	r5,r2
     63c:	002eda00 	call	2eda0 <printf>
	printf("Size of the offset: %d\n", (int)pic_data->header->BMPDataOffset);
     640:	e0bfff17 	ldw	r2,-4(fp)
     644:	10800017 	ldw	r2,0(r2)
     648:	10800217 	ldw	r2,8(r2)
     64c:	01000134 	movhi	r4,4
     650:	213b0904 	addi	r4,r4,-5084
     654:	100b883a 	mov	r5,r2
     658:	002eda00 	call	2eda0 <printf>
	printf("Data pointer: 0x%08x\n\n", (unsigned int)pic_data->bitmap);
     65c:	e0bfff17 	ldw	r2,-4(fp)
     660:	10800217 	ldw	r2,8(r2)
     664:	01000134 	movhi	r4,4
     668:	213b0f04 	addi	r4,r4,-5060
     66c:	100b883a 	mov	r5,r2
     670:	002eda00 	call	2eda0 <printf>

	return 0;
     674:	0005883a 	mov	r2,zero
}
     678:	e037883a 	mov	sp,fp
     67c:	dfc00117 	ldw	ra,4(sp)
     680:	df000017 	ldw	fp,0(sp)
     684:	dec00204 	addi	sp,sp,8
     688:	f800283a 	ret

0000068c <jpeg_encode>:

#include "jpeg_encoding.h"


int jpeg_encode(char *destFilename, int8_t *rawData, int image_height, int image_width, int quality)
{
     68c:	deff6f04 	addi	sp,sp,-580
     690:	dfc09015 	stw	ra,576(sp)
     694:	df008f15 	stw	fp,572(sp)
     698:	df008f04 	addi	fp,sp,572
     69c:	e13ffc15 	stw	r4,-16(fp)
     6a0:	e17ffd15 	stw	r5,-12(fp)
     6a4:	e1bffe15 	stw	r6,-8(fp)
     6a8:	e1ffff15 	stw	r7,-4(fp)
	/* We have to set up the error handler first, in case the initialization
	* step fails.  (Unlikely, but it could happen if you are out of memory.)
	* This routine fills in the contents of struct jerr, and returns jerr's
	* address which we place into the link field in cinfo.
	*/
	cinfo.err = jpeg_std_error(&jerr);
     6ac:	e0bfda04 	addi	r2,fp,-152
     6b0:	1009883a 	mov	r4,r2
     6b4:	0011bc80 	call	11bc8 <jpeg_std_error>
     6b8:	e0bf7315 	stw	r2,-564(fp)
	/* Now we can initialize the JPEG compression object. */
	jpeg_create_compress(&cinfo);
     6bc:	e0bf7304 	addi	r2,fp,-564
     6c0:	1009883a 	mov	r4,r2
     6c4:	01401404 	movi	r5,80
     6c8:	01806704 	movi	r6,412
     6cc:	00009a00 	call	9a0 <jpeg_CreateCompress>
	/* Here we use the library-supplied code to send compressed data to a
	* stdio stream.  You can also write your own code to do something else.
	* VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
	* requires it in order to write binary files.
	*/
	if ((outfile = fopen(destFilename, "w")) == NULL) {
     6d0:	e13ffc17 	ldw	r4,-16(fp)
     6d4:	01400134 	movhi	r5,4
     6d8:	297b1504 	addi	r5,r5,-5036
     6dc:	002d0c40 	call	2d0c4 <fopen>
     6e0:	e0bf7115 	stw	r2,-572(fp)
     6e4:	e0bf7117 	ldw	r2,-572(fp)
     6e8:	10000b1e 	bne	r2,zero,718 <jpeg_encode+0x8c>
		fprintf(stderr, "can't open %s\n", destFilename);
     6ec:	00800134 	movhi	r2,4
     6f0:	108bb304 	addi	r2,r2,11980
     6f4:	10800017 	ldw	r2,0(r2)
     6f8:	10800317 	ldw	r2,12(r2)
     6fc:	1009883a 	mov	r4,r2
     700:	01400134 	movhi	r5,4
     704:	297b1604 	addi	r5,r5,-5032
     708:	e1bffc17 	ldw	r6,-16(fp)
     70c:	002d1080 	call	2d108 <fprintf>
		exit(1);
     710:	01000044 	movi	r4,1
     714:	002c9080 	call	2c908 <exit>
	}
	jpeg_stdio_dest(&cinfo, outfile);
     718:	e0bf7304 	addi	r2,fp,-564
     71c:	1009883a 	mov	r4,r2
     720:	e17f7117 	ldw	r5,-572(fp)
     724:	00115f00 	call	115f0 <jpeg_stdio_dest>
	/* Step 3: set parameters for compression */

	/* First we supply a description of the input image.
	* Four fields of the cinfo struct must be filled in:
	*/
	cinfo.image_width = image_width; 	/* image width and height, in pixels */
     728:	e0bfff17 	ldw	r2,-4(fp)
     72c:	e0bf7a15 	stw	r2,-536(fp)
	cinfo.image_height = image_height;
     730:	e0bffe17 	ldw	r2,-8(fp)
     734:	e0bf7b15 	stw	r2,-532(fp)
	cinfo.input_components = 3;		/* # of color components per pixel */
     738:	008000c4 	movi	r2,3
     73c:	e0bf7c15 	stw	r2,-528(fp)
	cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
     740:	00800084 	movi	r2,2
     744:	e0bf7d15 	stw	r2,-524(fp)
	/* Now use the library's routine to set default compression parameters.
	* (You must set at least cinfo.in_color_space before calling this,
	* since the defaults depend on the source color space.)
	*/
	jpeg_set_defaults(&cinfo);
     748:	e0bf7304 	addi	r2,fp,-564
     74c:	1009883a 	mov	r4,r2
     750:	000d5880 	call	d588 <jpeg_set_defaults>
	/* Now you can set any non-default parameters you wish to.
	* Here we just illustrate the use of quality (quantization table) scaling:
	*/
	jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);
     754:	e0bf7304 	addi	r2,fp,-564
     758:	1009883a 	mov	r4,r2
     75c:	e1400217 	ldw	r5,8(fp)
     760:	01800044 	movi	r6,1
     764:	000d3680 	call	d368 <jpeg_set_quality>
	/* Step 4: Start compressor */

	/* TRUE ensures that we will write a complete interchange-JPEG file.
	* Pass TRUE unless you are very sure of what you're doing.
	*/
	jpeg_start_compress(&cinfo, TRUE);
     768:	e0bf7304 	addi	r2,fp,-564
     76c:	1009883a 	mov	r4,r2
     770:	01400044 	movi	r5,1
     774:	00012300 	call	1230 <jpeg_start_compress>
	/* Here we use the library's state variable cinfo.next_scanline as the
	* loop counter, so that we don't have to keep track ourselves.
	* To keep things simple, we pass one scanline per call; you can pass
	* more if you wish, though.
	*/
	row_stride = image_width * 3;	/* JSAMPLEs per row in image_buffer */
     778:	e0ffff17 	ldw	r3,-4(fp)
     77c:	1805883a 	mov	r2,r3
     780:	1085883a 	add	r2,r2,r2
     784:	10c5883a 	add	r2,r2,r3
     788:	e0bf7215 	stw	r2,-568(fp)

	while (cinfo.next_scanline < cinfo.image_height) {
     78c:	00000e06 	br	7c8 <jpeg_encode+0x13c>
		/* jpeg_write_scanlines expects an array of pointers to scanlines.
		* Here the array is only one element long, but you could pass
		* more than one scanline at a time if that's more convenient.
		*/
		row_pointer[0] = (JSAMPLE *)&rawData[cinfo.next_scanline * row_stride];
     790:	e0ffaf17 	ldw	r3,-324(fp)
     794:	e0bf7217 	ldw	r2,-568(fp)
     798:	1809883a 	mov	r4,r3
     79c:	100b883a 	mov	r5,r2
     7a0:	002c1540 	call	2c154 <__mulsi3>
     7a4:	e0fffd17 	ldw	r3,-12(fp)
     7a8:	1885883a 	add	r2,r3,r2
     7ac:	e0bffb15 	stw	r2,-20(fp)
		(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
     7b0:	e0ff7304 	addi	r3,fp,-564
     7b4:	e0bffb04 	addi	r2,fp,-20
     7b8:	1809883a 	mov	r4,r3
     7bc:	100b883a 	mov	r5,r2
     7c0:	01800044 	movi	r6,1
     7c4:	000132c0 	call	132c <jpeg_write_scanlines>
	* To keep things simple, we pass one scanline per call; you can pass
	* more if you wish, though.
	*/
	row_stride = image_width * 3;	/* JSAMPLEs per row in image_buffer */

	while (cinfo.next_scanline < cinfo.image_height) {
     7c8:	e0ffaf17 	ldw	r3,-324(fp)
     7cc:	e0bf7b17 	ldw	r2,-532(fp)
     7d0:	18bfef36 	bltu	r3,r2,790 <jpeg_encode+0x104>
		(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
	}

	/* Step 6: Finish compression */

	jpeg_finish_compress(&cinfo);
     7d4:	e0bf7304 	addi	r2,fp,-564
     7d8:	1009883a 	mov	r4,r2
     7dc:	0000d440 	call	d44 <jpeg_finish_compress>
	/* After finish_compress, we can close the output file. */
	fclose(outfile);
     7e0:	e13f7117 	ldw	r4,-572(fp)
     7e4:	002ca7c0 	call	2ca7c <fclose>

	/* Step 7: release JPEG compression object */

	/* This is an important step since it will release a good deal of memory. */
	jpeg_destroy_compress(&cinfo);
     7e8:	e0bf7304 	addi	r2,fp,-564
     7ec:	1009883a 	mov	r4,r2
     7f0:	0000be00 	call	be0 <jpeg_destroy_compress>

	/* And we're done! */
	return 0;
     7f4:	0005883a 	mov	r2,zero
}
     7f8:	e037883a 	mov	sp,fp
     7fc:	dfc00117 	ldw	ra,4(sp)
     800:	df000017 	ldw	fp,0(sp)
     804:	dec00204 	addi	sp,sp,8
     808:	f800283a 	ret

0000080c <keymatch>:
* minchars is length of minimum legal abbreviation.
*/

GLOBAL(boolean)
	keymatch (char * arg, const char * keyword, int minchars)
{
     80c:	defff804 	addi	sp,sp,-32
     810:	df000715 	stw	fp,28(sp)
     814:	dc800615 	stw	r18,24(sp)
     818:	dc400515 	stw	r17,20(sp)
     81c:	dc000415 	stw	r16,16(sp)
     820:	df000404 	addi	fp,sp,16
     824:	e13ffd15 	stw	r4,-12(fp)
     828:	e17ffe15 	stw	r5,-8(fp)
     82c:	e1bfff15 	stw	r6,-4(fp)
	register int ca, ck;
	register int nmatched = 0;
     830:	0023883a 	mov	r17,zero

	while ((ca = *arg++) != '\0') {
     834:	00002906 	br	8dc <keymatch+0xd0>
		if ((ck = *keyword++) == '\0')
     838:	e0bffe17 	ldw	r2,-8(fp)
     83c:	10800003 	ldbu	r2,0(r2)
     840:	14803fcc 	andi	r18,r2,255
     844:	9480201c 	xori	r18,r18,128
     848:	94bfe004 	addi	r18,r18,-128
     84c:	9005003a 	cmpeq	r2,r18,zero
     850:	e0fffe17 	ldw	r3,-8(fp)
     854:	18c00044 	addi	r3,r3,1
     858:	e0fffe15 	stw	r3,-8(fp)
     85c:	10803fcc 	andi	r2,r2,255
     860:	10000226 	beq	r2,zero,86c <keymatch+0x60>
			return FALSE;		/* arg longer than keyword, no good */
     864:	0005883a 	mov	r2,zero
     868:	00002c06 	br	91c <keymatch+0x110>
		if (isupper(ca))		/* force arg to lcase (assume ck is already) */
     86c:	00800134 	movhi	r2,4
     870:	108bb104 	addi	r2,r2,11972
     874:	10c00017 	ldw	r3,0(r2)
     878:	8005883a 	mov	r2,r16
     87c:	1885883a 	add	r2,r3,r2
     880:	10800003 	ldbu	r2,0(r2)
     884:	10803fcc 	andi	r2,r2,255
     888:	1080004c 	andi	r2,r2,1
     88c:	10000f26 	beq	r2,zero,8cc <keymatch+0xc0>
			ca = tolower(ca);
     890:	e43ffc15 	stw	r16,-16(fp)
     894:	00800134 	movhi	r2,4
     898:	108bb104 	addi	r2,r2,11972
     89c:	10c00017 	ldw	r3,0(r2)
     8a0:	e0bffc17 	ldw	r2,-16(fp)
     8a4:	1885883a 	add	r2,r3,r2
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10803fcc 	andi	r2,r2,255
     8b0:	1080004c 	andi	r2,r2,1
     8b4:	10000326 	beq	r2,zero,8c4 <keymatch+0xb8>
     8b8:	e0bffc17 	ldw	r2,-16(fp)
     8bc:	10800804 	addi	r2,r2,32
     8c0:	00000106 	br	8c8 <keymatch+0xbc>
     8c4:	e0bffc17 	ldw	r2,-16(fp)
     8c8:	1021883a 	mov	r16,r2
		if (ca != ck)
     8cc:	84800226 	beq	r16,r18,8d8 <keymatch+0xcc>
			return FALSE;		/* no good */
     8d0:	0005883a 	mov	r2,zero
     8d4:	00001106 	br	91c <keymatch+0x110>
		nmatched++;			/* count matched characters */
     8d8:	8c400044 	addi	r17,r17,1
	keymatch (char * arg, const char * keyword, int minchars)
{
	register int ca, ck;
	register int nmatched = 0;

	while ((ca = *arg++) != '\0') {
     8dc:	e0bffd17 	ldw	r2,-12(fp)
     8e0:	10800003 	ldbu	r2,0(r2)
     8e4:	14003fcc 	andi	r16,r2,255
     8e8:	8400201c 	xori	r16,r16,128
     8ec:	843fe004 	addi	r16,r16,-128
     8f0:	8004c03a 	cmpne	r2,r16,zero
     8f4:	e0fffd17 	ldw	r3,-12(fp)
     8f8:	18c00044 	addi	r3,r3,1
     8fc:	e0fffd15 	stw	r3,-12(fp)
     900:	10803fcc 	andi	r2,r2,255
     904:	103fcc1e 	bne	r2,zero,838 <keymatch+0x2c>
		if (ca != ck)
			return FALSE;		/* no good */
		nmatched++;			/* count matched characters */
	}
	/* reached end of argument; fail if it's too short for unique abbrev */
	if (nmatched < minchars)
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	8880020e 	bge	r17,r2,918 <keymatch+0x10c>
		return FALSE;
     910:	0005883a 	mov	r2,zero
     914:	00000106 	br	91c <keymatch+0x110>
	return TRUE;			/* A-OK */
     918:	00800044 	movi	r2,1
}
     91c:	e037883a 	mov	sp,fp
     920:	df000317 	ldw	fp,12(sp)
     924:	dc800217 	ldw	r18,8(sp)
     928:	dc400117 	ldw	r17,4(sp)
     92c:	dc000017 	ldw	r16,0(sp)
     930:	dec00404 	addi	sp,sp,16
     934:	f800283a 	ret

00000938 <read_stdin>:
* Non-Unix systems often require some hacking to get out of text mode.
*/

GLOBAL(FILE *)
	read_stdin (void)
{
     938:	defffe04 	addi	sp,sp,-8
     93c:	df000115 	stw	fp,4(sp)
     940:	df000104 	addi	fp,sp,4
	FILE * input_file = stdin;
     944:	00800134 	movhi	r2,4
     948:	108bb304 	addi	r2,r2,11980
     94c:	10800017 	ldw	r2,0(r2)
     950:	10800117 	ldw	r2,4(r2)
     954:	e0bfff15 	stw	r2,-4(fp)
	if ((input_file = fdopen(fileno(stdin), READ_BINARY)) == NULL) {
		fprintf(stderr, "Cannot reopen stdin\n");
		exit(EXIT_FAILURE);
	}
#endif
	return input_file;
     958:	e0bfff17 	ldw	r2,-4(fp)
}
     95c:	e037883a 	mov	sp,fp
     960:	df000017 	ldw	fp,0(sp)
     964:	dec00104 	addi	sp,sp,4
     968:	f800283a 	ret

0000096c <write_stdout>:


GLOBAL(FILE *)
	write_stdout (void)
{
     96c:	defffe04 	addi	sp,sp,-8
     970:	df000115 	stw	fp,4(sp)
     974:	df000104 	addi	fp,sp,4
	FILE * output_file = stdout;
     978:	00800134 	movhi	r2,4
     97c:	108bb304 	addi	r2,r2,11980
     980:	10800017 	ldw	r2,0(r2)
     984:	10800217 	ldw	r2,8(r2)
     988:	e0bfff15 	stw	r2,-4(fp)
	if ((output_file = fdopen(fileno(stdout), WRITE_BINARY)) == NULL) {
		fprintf(stderr, "Cannot reopen stdout\n");
		exit(EXIT_FAILURE);
	}
#endif
	return output_file;
     98c:	e0bfff17 	ldw	r2,-4(fp)
}
     990:	e037883a 	mov	sp,fp
     994:	df000017 	ldw	fp,0(sp)
     998:	dec00104 	addi	sp,sp,4
     99c:	f800283a 	ret

000009a0 <jpeg_CreateCompress>:
* The error manager must already be set up (in case memory manager fails).
*/

GLOBAL(void)
	jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
{
     9a0:	defff804 	addi	sp,sp,-32
     9a4:	dfc00715 	stw	ra,28(sp)
     9a8:	df000615 	stw	fp,24(sp)
     9ac:	df000604 	addi	fp,sp,24
     9b0:	e13ffd15 	stw	r4,-12(fp)
     9b4:	e17ffe15 	stw	r5,-8(fp)
     9b8:	e1bfff15 	stw	r6,-4(fp)
	int i;

	/* Guard against version mismatches between library and caller. */
	cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
     9bc:	e0bffd17 	ldw	r2,-12(fp)
     9c0:	10000115 	stw	zero,4(r2)
	if (version != JPEG_LIB_VERSION)
     9c4:	e0bffe17 	ldw	r2,-8(fp)
     9c8:	10801420 	cmpeqi	r2,r2,80
     9cc:	1000111e 	bne	r2,zero,a14 <jpeg_CreateCompress+0x74>
		ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
     9d0:	e0bffd17 	ldw	r2,-12(fp)
     9d4:	10800017 	ldw	r2,0(r2)
     9d8:	00c00344 	movi	r3,13
     9dc:	10c00515 	stw	r3,20(r2)
     9e0:	e0bffd17 	ldw	r2,-12(fp)
     9e4:	10800017 	ldw	r2,0(r2)
     9e8:	00c01404 	movi	r3,80
     9ec:	10c00615 	stw	r3,24(r2)
     9f0:	e0bffd17 	ldw	r2,-12(fp)
     9f4:	10800017 	ldw	r2,0(r2)
     9f8:	e0fffe17 	ldw	r3,-8(fp)
     9fc:	10c00715 	stw	r3,28(r2)
     a00:	e0bffd17 	ldw	r2,-12(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	10800017 	ldw	r2,0(r2)
     a0c:	e13ffd17 	ldw	r4,-12(fp)
     a10:	103ee83a 	callr	r2
	if (structsize != SIZEOF(struct jpeg_compress_struct))
     a14:	e0bfff17 	ldw	r2,-4(fp)
     a18:	10806720 	cmpeqi	r2,r2,412
     a1c:	1000111e 	bne	r2,zero,a64 <jpeg_CreateCompress+0xc4>
		ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
     a20:	e0bffd17 	ldw	r2,-12(fp)
     a24:	10800017 	ldw	r2,0(r2)
     a28:	00c00584 	movi	r3,22
     a2c:	10c00515 	stw	r3,20(r2)
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	10800017 	ldw	r2,0(r2)
     a38:	00c06704 	movi	r3,412
     a3c:	10c00615 	stw	r3,24(r2)
     a40:	e0bffd17 	ldw	r2,-12(fp)
     a44:	10800017 	ldw	r2,0(r2)
     a48:	e0ffff17 	ldw	r3,-4(fp)
     a4c:	10c00715 	stw	r3,28(r2)
     a50:	e0bffd17 	ldw	r2,-12(fp)
     a54:	10800017 	ldw	r2,0(r2)
     a58:	10800017 	ldw	r2,0(r2)
     a5c:	e13ffd17 	ldw	r4,-12(fp)
     a60:	103ee83a 	callr	r2
	* client_data, so we have to save and restore those fields.
	* Note: if application hasn't set client_data, tools like Purify may
	* complain here.
	*/
	{
		struct jpeg_error_mgr * err = cinfo->err;
     a64:	e0bffd17 	ldw	r2,-12(fp)
     a68:	10800017 	ldw	r2,0(r2)
     a6c:	e0bffb15 	stw	r2,-20(fp)
		void * client_data = cinfo->client_data; /* ignore Purify complaint here */
     a70:	e0bffd17 	ldw	r2,-12(fp)
     a74:	10800317 	ldw	r2,12(r2)
     a78:	e0bffc15 	stw	r2,-16(fp)
		MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
     a7c:	e13ffd17 	ldw	r4,-12(fp)
     a80:	000b883a 	mov	r5,zero
     a84:	01806704 	movi	r6,412
     a88:	002ec2c0 	call	2ec2c <memset>
		cinfo->err = err;
     a8c:	e0bffd17 	ldw	r2,-12(fp)
     a90:	e0fffb17 	ldw	r3,-20(fp)
     a94:	10c00015 	stw	r3,0(r2)
		cinfo->client_data = client_data;
     a98:	e0bffd17 	ldw	r2,-12(fp)
     a9c:	e0fffc17 	ldw	r3,-16(fp)
     aa0:	10c00315 	stw	r3,12(r2)
	}
	cinfo->is_decompressor = FALSE;
     aa4:	e0bffd17 	ldw	r2,-12(fp)
     aa8:	10000405 	stb	zero,16(r2)

	/* Initialize a memory manager instance for this object */
	jinit_memory_mgr((j_common_ptr) cinfo);
     aac:	e13ffd17 	ldw	r4,-12(fp)
     ab0:	0026d740 	call	26d74 <jinit_memory_mgr>

	/* Zero out pointers to permanent structures. */
	cinfo->progress = NULL;
     ab4:	e0bffd17 	ldw	r2,-12(fp)
     ab8:	10000215 	stw	zero,8(r2)
	cinfo->dest = NULL;
     abc:	e0bffd17 	ldw	r2,-12(fp)
     ac0:	10000615 	stw	zero,24(r2)

	cinfo->comp_info = NULL;
     ac4:	e0bffd17 	ldw	r2,-12(fp)
     ac8:	10001415 	stw	zero,80(r2)

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
     acc:	e03ffa15 	stw	zero,-24(fp)
     ad0:	00001206 	br	b1c <jpeg_CreateCompress+0x17c>
		cinfo->quant_tbl_ptrs[i] = NULL;
     ad4:	e0fffd17 	ldw	r3,-12(fp)
     ad8:	e0bffa17 	ldw	r2,-24(fp)
     adc:	10800544 	addi	r2,r2,21
     ae0:	1085883a 	add	r2,r2,r2
     ae4:	1085883a 	add	r2,r2,r2
     ae8:	1885883a 	add	r2,r3,r2
     aec:	10000015 	stw	zero,0(r2)
		cinfo->q_scale_factor[i] = 100;
     af0:	e0fffd17 	ldw	r3,-12(fp)
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800644 	addi	r2,r2,25
     afc:	1085883a 	add	r2,r2,r2
     b00:	1085883a 	add	r2,r2,r2
     b04:	1885883a 	add	r2,r3,r2
     b08:	00c01904 	movi	r3,100
     b0c:	10c00015 	stw	r3,0(r2)
	cinfo->progress = NULL;
	cinfo->dest = NULL;

	cinfo->comp_info = NULL;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
     b10:	e0bffa17 	ldw	r2,-24(fp)
     b14:	10800044 	addi	r2,r2,1
     b18:	e0bffa15 	stw	r2,-24(fp)
     b1c:	e0bffa17 	ldw	r2,-24(fp)
     b20:	10800110 	cmplti	r2,r2,4
     b24:	103feb1e 	bne	r2,zero,ad4 <jpeg_CreateCompress+0x134>
		cinfo->quant_tbl_ptrs[i] = NULL;
		cinfo->q_scale_factor[i] = 100;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
     b28:	e03ffa15 	stw	zero,-24(fp)
     b2c:	00001106 	br	b74 <jpeg_CreateCompress+0x1d4>
		cinfo->dc_huff_tbl_ptrs[i] = NULL;
     b30:	e0fffd17 	ldw	r3,-12(fp)
     b34:	e0bffa17 	ldw	r2,-24(fp)
     b38:	10800744 	addi	r2,r2,29
     b3c:	1085883a 	add	r2,r2,r2
     b40:	1085883a 	add	r2,r2,r2
     b44:	1885883a 	add	r2,r3,r2
     b48:	10000015 	stw	zero,0(r2)
		cinfo->ac_huff_tbl_ptrs[i] = NULL;
     b4c:	e0fffd17 	ldw	r3,-12(fp)
     b50:	e0bffa17 	ldw	r2,-24(fp)
     b54:	10800844 	addi	r2,r2,33
     b58:	1085883a 	add	r2,r2,r2
     b5c:	1085883a 	add	r2,r2,r2
     b60:	1885883a 	add	r2,r3,r2
     b64:	10000015 	stw	zero,0(r2)
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
		cinfo->quant_tbl_ptrs[i] = NULL;
		cinfo->q_scale_factor[i] = 100;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
     b68:	e0bffa17 	ldw	r2,-24(fp)
     b6c:	10800044 	addi	r2,r2,1
     b70:	e0bffa15 	stw	r2,-24(fp)
     b74:	e0bffa17 	ldw	r2,-24(fp)
     b78:	10800110 	cmplti	r2,r2,4
     b7c:	103fec1e 	bne	r2,zero,b30 <jpeg_CreateCompress+0x190>
		cinfo->dc_huff_tbl_ptrs[i] = NULL;
		cinfo->ac_huff_tbl_ptrs[i] = NULL;
	}

	/* Must do it here for emit_dqt in case jpeg_write_tables is used */
	cinfo->block_size = DCTSIZE;
     b80:	e0bffd17 	ldw	r2,-12(fp)
     b84:	00c00204 	movi	r3,8
     b88:	10c05915 	stw	r3,356(r2)
	cinfo->natural_order = jpeg_natural_order;
     b8c:	e0bffd17 	ldw	r2,-12(fp)
     b90:	00c00134 	movhi	r3,4
     b94:	18c23104 	addi	r3,r3,2244
     b98:	10c05a15 	stw	r3,360(r2)
	cinfo->lim_Se = DCTSIZE2-1;
     b9c:	e0bffd17 	ldw	r2,-12(fp)
     ba0:	00c00fc4 	movi	r3,63
     ba4:	10c05b15 	stw	r3,364(r2)

	cinfo->script_space = NULL;
     ba8:	e0bffd17 	ldw	r2,-12(fp)
     bac:	10006515 	stw	zero,404(r2)

	cinfo->input_gamma = 1.0;	/* in case application forgets */
     bb0:	e0bffd17 	ldw	r2,-12(fp)
     bb4:	10000b15 	stw	zero,44(r2)
     bb8:	00cffc34 	movhi	r3,16368
     bbc:	10c00c15 	stw	r3,48(r2)

	/* OK, I'm ready */
	cinfo->global_state = CSTATE_START;
     bc0:	e0bffd17 	ldw	r2,-12(fp)
     bc4:	00c01904 	movi	r3,100
     bc8:	10c00515 	stw	r3,20(r2)
}
     bcc:	e037883a 	mov	sp,fp
     bd0:	dfc00117 	ldw	ra,4(sp)
     bd4:	df000017 	ldw	fp,0(sp)
     bd8:	dec00204 	addi	sp,sp,8
     bdc:	f800283a 	ret

00000be0 <jpeg_destroy_compress>:
* Destruction of a JPEG compression object
*/

GLOBAL(void)
	jpeg_destroy_compress (j_compress_ptr cinfo)
{
     be0:	defffd04 	addi	sp,sp,-12
     be4:	dfc00215 	stw	ra,8(sp)
     be8:	df000115 	stw	fp,4(sp)
     bec:	df000104 	addi	fp,sp,4
     bf0:	e13fff15 	stw	r4,-4(fp)
	jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
     bf4:	e13fff17 	ldw	r4,-4(fp)
     bf8:	000cf280 	call	cf28 <jpeg_destroy>
}
     bfc:	e037883a 	mov	sp,fp
     c00:	dfc00117 	ldw	ra,4(sp)
     c04:	df000017 	ldw	fp,0(sp)
     c08:	dec00204 	addi	sp,sp,8
     c0c:	f800283a 	ret

00000c10 <jpeg_abort_compress>:
* but don't destroy the object itself.
*/

GLOBAL(void)
	jpeg_abort_compress (j_compress_ptr cinfo)
{
     c10:	defffd04 	addi	sp,sp,-12
     c14:	dfc00215 	stw	ra,8(sp)
     c18:	df000115 	stw	fp,4(sp)
     c1c:	df000104 	addi	fp,sp,4
     c20:	e13fff15 	stw	r4,-4(fp)
	jpeg_abort((j_common_ptr) cinfo); /* use common routine */
     c24:	e13fff17 	ldw	r4,-4(fp)
     c28:	000ce800 	call	ce80 <jpeg_abort>
}
     c2c:	e037883a 	mov	sp,fp
     c30:	dfc00117 	ldw	ra,4(sp)
     c34:	df000017 	ldw	fp,0(sp)
     c38:	dec00204 	addi	sp,sp,8
     c3c:	f800283a 	ret

00000c40 <jpeg_suppress_tables>:
* jcparam.o would be linked whether the application used it or not.
*/

GLOBAL(void)
	jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
     c40:	defffa04 	addi	sp,sp,-24
     c44:	df000515 	stw	fp,20(sp)
     c48:	df000504 	addi	fp,sp,20
     c4c:	e13ffe15 	stw	r4,-8(fp)
     c50:	2805883a 	mov	r2,r5
     c54:	e0bfff05 	stb	r2,-4(fp)
	int i;
	JQUANT_TBL * qtbl;
	JHUFF_TBL * htbl;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
     c58:	e03ffb15 	stw	zero,-20(fp)
     c5c:	00001006 	br	ca0 <jpeg_suppress_tables+0x60>
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
     c60:	e0fffe17 	ldw	r3,-8(fp)
     c64:	e0bffb17 	ldw	r2,-20(fp)
     c68:	10800544 	addi	r2,r2,21
     c6c:	1085883a 	add	r2,r2,r2
     c70:	1085883a 	add	r2,r2,r2
     c74:	1885883a 	add	r2,r3,r2
     c78:	10800017 	ldw	r2,0(r2)
     c7c:	e0bffc15 	stw	r2,-16(fp)
     c80:	e0bffc17 	ldw	r2,-16(fp)
     c84:	10000326 	beq	r2,zero,c94 <jpeg_suppress_tables+0x54>
			qtbl->sent_table = suppress;
     c88:	e0bffc17 	ldw	r2,-16(fp)
     c8c:	e0ffff03 	ldbu	r3,-4(fp)
     c90:	10c02005 	stb	r3,128(r2)
{
	int i;
	JQUANT_TBL * qtbl;
	JHUFF_TBL * htbl;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
     c94:	e0bffb17 	ldw	r2,-20(fp)
     c98:	10800044 	addi	r2,r2,1
     c9c:	e0bffb15 	stw	r2,-20(fp)
     ca0:	e0bffb17 	ldw	r2,-20(fp)
     ca4:	10800110 	cmplti	r2,r2,4
     ca8:	103fed1e 	bne	r2,zero,c60 <jpeg_suppress_tables+0x20>
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
			qtbl->sent_table = suppress;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
     cac:	e03ffb15 	stw	zero,-20(fp)
     cb0:	00001d06 	br	d28 <jpeg_suppress_tables+0xe8>
		if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
     cb4:	e0fffe17 	ldw	r3,-8(fp)
     cb8:	e0bffb17 	ldw	r2,-20(fp)
     cbc:	10800744 	addi	r2,r2,29
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	1085883a 	add	r2,r2,r2
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	10800017 	ldw	r2,0(r2)
     cd0:	e0bffd15 	stw	r2,-12(fp)
     cd4:	e0bffd17 	ldw	r2,-12(fp)
     cd8:	10000326 	beq	r2,zero,ce8 <jpeg_suppress_tables+0xa8>
			htbl->sent_table = suppress;
     cdc:	e0bffd17 	ldw	r2,-12(fp)
     ce0:	e0ffff03 	ldbu	r3,-4(fp)
     ce4:	10c04445 	stb	r3,273(r2)
		if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
     ce8:	e0fffe17 	ldw	r3,-8(fp)
     cec:	e0bffb17 	ldw	r2,-20(fp)
     cf0:	10800844 	addi	r2,r2,33
     cf4:	1085883a 	add	r2,r2,r2
     cf8:	1085883a 	add	r2,r2,r2
     cfc:	1885883a 	add	r2,r3,r2
     d00:	10800017 	ldw	r2,0(r2)
     d04:	e0bffd15 	stw	r2,-12(fp)
     d08:	e0bffd17 	ldw	r2,-12(fp)
     d0c:	10000326 	beq	r2,zero,d1c <jpeg_suppress_tables+0xdc>
			htbl->sent_table = suppress;
     d10:	e0bffd17 	ldw	r2,-12(fp)
     d14:	e0ffff03 	ldbu	r3,-4(fp)
     d18:	10c04445 	stb	r3,273(r2)
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
			qtbl->sent_table = suppress;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
     d1c:	e0bffb17 	ldw	r2,-20(fp)
     d20:	10800044 	addi	r2,r2,1
     d24:	e0bffb15 	stw	r2,-20(fp)
     d28:	e0bffb17 	ldw	r2,-20(fp)
     d2c:	10800110 	cmplti	r2,r2,4
     d30:	103fe01e 	bne	r2,zero,cb4 <jpeg_suppress_tables+0x74>
		if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
			htbl->sent_table = suppress;
		if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
			htbl->sent_table = suppress;
	}
}
     d34:	e037883a 	mov	sp,fp
     d38:	df000017 	ldw	fp,0(sp)
     d3c:	dec00104 	addi	sp,sp,4
     d40:	f800283a 	ret

00000d44 <jpeg_finish_compress>:
* work including most of the actual output.
*/

GLOBAL(void)
	jpeg_finish_compress (j_compress_ptr cinfo)
{
     d44:	defffc04 	addi	sp,sp,-16
     d48:	dfc00315 	stw	ra,12(sp)
     d4c:	df000215 	stw	fp,8(sp)
     d50:	df000204 	addi	fp,sp,8
     d54:	e13fff15 	stw	r4,-4(fp)
	JDIMENSION iMCU_row;

	if (cinfo->global_state == CSTATE_SCANNING ||
     d58:	e0bfff17 	ldw	r2,-4(fp)
     d5c:	10800517 	ldw	r2,20(r2)
     d60:	10801960 	cmpeqi	r2,r2,101
     d64:	1000041e 	bne	r2,zero,d78 <jpeg_finish_compress+0x34>
		cinfo->global_state == CSTATE_RAW_OK) {
     d68:	e0bfff17 	ldw	r2,-4(fp)
     d6c:	10800517 	ldw	r2,20(r2)
GLOBAL(void)
	jpeg_finish_compress (j_compress_ptr cinfo)
{
	JDIMENSION iMCU_row;

	if (cinfo->global_state == CSTATE_SCANNING ||
     d70:	10801998 	cmpnei	r2,r2,102
     d74:	1000141e 	bne	r2,zero,dc8 <jpeg_finish_compress+0x84>
		cinfo->global_state == CSTATE_RAW_OK) {
			/* Terminate first pass */
			if (cinfo->next_scanline < cinfo->image_height)
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	10c03c17 	ldw	r3,240(r2)
     d80:	e0bfff17 	ldw	r2,-4(fp)
     d84:	10800817 	ldw	r2,32(r2)
     d88:	1880092e 	bgeu	r3,r2,db0 <jpeg_finish_compress+0x6c>
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
     d8c:	e0bfff17 	ldw	r2,-4(fp)
     d90:	10800017 	ldw	r2,0(r2)
     d94:	00c01144 	movi	r3,69
     d98:	10c00515 	stw	r3,20(r2)
     d9c:	e0bfff17 	ldw	r2,-4(fp)
     da0:	10800017 	ldw	r2,0(r2)
     da4:	10800017 	ldw	r2,0(r2)
     da8:	e13fff17 	ldw	r4,-4(fp)
     dac:	103ee83a 	callr	r2
			(*cinfo->master->finish_pass) (cinfo);
     db0:	e0bfff17 	ldw	r2,-4(fp)
     db4:	10805c17 	ldw	r2,368(r2)
     db8:	10800217 	ldw	r2,8(r2)
     dbc:	e13fff17 	ldw	r4,-4(fp)
     dc0:	103ee83a 	callr	r2
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
     dc4:	00004906 	br	eec <jpeg_finish_compress+0x1a8>
		cinfo->global_state == CSTATE_RAW_OK) {
			/* Terminate first pass */
			if (cinfo->next_scanline < cinfo->image_height)
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
			(*cinfo->master->finish_pass) (cinfo);
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
     dc8:	e0bfff17 	ldw	r2,-4(fp)
     dcc:	10800517 	ldw	r2,20(r2)
     dd0:	108019e0 	cmpeqi	r2,r2,103
     dd4:	1000451e 	bne	r2,zero,eec <jpeg_finish_compress+0x1a8>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
     dd8:	e0bfff17 	ldw	r2,-4(fp)
     ddc:	10800017 	ldw	r2,0(r2)
     de0:	00c00544 	movi	r3,21
     de4:	10c00515 	stw	r3,20(r2)
     de8:	e0bfff17 	ldw	r2,-4(fp)
     dec:	10800017 	ldw	r2,0(r2)
     df0:	e0ffff17 	ldw	r3,-4(fp)
     df4:	18c00517 	ldw	r3,20(r3)
     df8:	10c00615 	stw	r3,24(r2)
     dfc:	e0bfff17 	ldw	r2,-4(fp)
     e00:	10800017 	ldw	r2,0(r2)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	e13fff17 	ldw	r4,-4(fp)
     e0c:	103ee83a 	callr	r2
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
     e10:	00003606 	br	eec <jpeg_finish_compress+0x1a8>
		(*cinfo->master->prepare_for_pass) (cinfo);
     e14:	e0bfff17 	ldw	r2,-4(fp)
     e18:	10805c17 	ldw	r2,368(r2)
     e1c:	10800017 	ldw	r2,0(r2)
     e20:	e13fff17 	ldw	r4,-4(fp)
     e24:	103ee83a 	callr	r2
		for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
     e28:	e03ffe15 	stw	zero,-8(fp)
     e2c:	00002506 	br	ec4 <jpeg_finish_compress+0x180>
			if (cinfo->progress != NULL) {
     e30:	e0bfff17 	ldw	r2,-4(fp)
     e34:	10800217 	ldw	r2,8(r2)
     e38:	10000e26 	beq	r2,zero,e74 <jpeg_finish_compress+0x130>
				cinfo->progress->pass_counter = (long) iMCU_row;
     e3c:	e0bfff17 	ldw	r2,-4(fp)
     e40:	10800217 	ldw	r2,8(r2)
     e44:	e0fffe17 	ldw	r3,-8(fp)
     e48:	10c00115 	stw	r3,4(r2)
				cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
     e4c:	e0bfff17 	ldw	r2,-4(fp)
     e50:	10800217 	ldw	r2,8(r2)
     e54:	e0ffff17 	ldw	r3,-4(fp)
     e58:	18c04217 	ldw	r3,264(r3)
     e5c:	10c00215 	stw	r3,8(r2)
				(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
     e60:	e0bfff17 	ldw	r2,-4(fp)
     e64:	10800217 	ldw	r2,8(r2)
     e68:	10800017 	ldw	r2,0(r2)
     e6c:	e13fff17 	ldw	r4,-4(fp)
     e70:	103ee83a 	callr	r2
			}
			/* We bypass the main controller and invoke coef controller directly;
			* all work is being done from the coefficient buffer.
			*/
			if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
     e74:	e0bfff17 	ldw	r2,-4(fp)
     e78:	10805f17 	ldw	r2,380(r2)
     e7c:	10800117 	ldw	r2,4(r2)
     e80:	e13fff17 	ldw	r4,-4(fp)
     e84:	000b883a 	mov	r5,zero
     e88:	103ee83a 	callr	r2
     e8c:	10803fcc 	andi	r2,r2,255
     e90:	1000091e 	bne	r2,zero,eb8 <jpeg_finish_compress+0x174>
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
     e94:	e0bfff17 	ldw	r2,-4(fp)
     e98:	10800017 	ldw	r2,0(r2)
     e9c:	00c00644 	movi	r3,25
     ea0:	10c00515 	stw	r3,20(r2)
     ea4:	e0bfff17 	ldw	r2,-4(fp)
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	10800017 	ldw	r2,0(r2)
     eb0:	e13fff17 	ldw	r4,-4(fp)
     eb4:	103ee83a 	callr	r2
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
		(*cinfo->master->prepare_for_pass) (cinfo);
		for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	10800044 	addi	r2,r2,1
     ec0:	e0bffe15 	stw	r2,-8(fp)
     ec4:	e0bfff17 	ldw	r2,-4(fp)
     ec8:	10804217 	ldw	r2,264(r2)
     ecc:	e0fffe17 	ldw	r3,-8(fp)
     ed0:	18bfd736 	bltu	r3,r2,e30 <jpeg_finish_compress+0xec>
			* all work is being done from the coefficient buffer.
			*/
			if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
		}
		(*cinfo->master->finish_pass) (cinfo);
     ed4:	e0bfff17 	ldw	r2,-4(fp)
     ed8:	10805c17 	ldw	r2,368(r2)
     edc:	10800217 	ldw	r2,8(r2)
     ee0:	e13fff17 	ldw	r4,-4(fp)
     ee4:	103ee83a 	callr	r2
     ee8:	00000106 	br	ef0 <jpeg_finish_compress+0x1ac>
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
			(*cinfo->master->finish_pass) (cinfo);
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
     eec:	0001883a 	nop
     ef0:	e0bfff17 	ldw	r2,-4(fp)
     ef4:	10805c17 	ldw	r2,368(r2)
     ef8:	10800343 	ldbu	r2,13(r2)
     efc:	10803fcc 	andi	r2,r2,255
     f00:	103fc426 	beq	r2,zero,e14 <jpeg_finish_compress+0xd0>
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
		}
		(*cinfo->master->finish_pass) (cinfo);
	}
	/* Write EOI, do final cleanup */
	(*cinfo->marker->write_file_trailer) (cinfo);
     f04:	e0bfff17 	ldw	r2,-4(fp)
     f08:	10806017 	ldw	r2,384(r2)
     f0c:	10800317 	ldw	r2,12(r2)
     f10:	e13fff17 	ldw	r4,-4(fp)
     f14:	103ee83a 	callr	r2
	(*cinfo->dest->term_destination) (cinfo);
     f18:	e0bfff17 	ldw	r2,-4(fp)
     f1c:	10800617 	ldw	r2,24(r2)
     f20:	10800417 	ldw	r2,16(r2)
     f24:	e13fff17 	ldw	r4,-4(fp)
     f28:	103ee83a 	callr	r2
	/* We can use jpeg_abort to release memory and reset global_state */
	jpeg_abort((j_common_ptr) cinfo);
     f2c:	e13fff17 	ldw	r4,-4(fp)
     f30:	000ce800 	call	ce80 <jpeg_abort>
}
     f34:	e037883a 	mov	sp,fp
     f38:	dfc00117 	ldw	ra,4(sp)
     f3c:	df000017 	ldw	fp,0(sp)
     f40:	dec00204 	addi	sp,sp,8
     f44:	f800283a 	ret

00000f48 <jpeg_write_marker>:
*/

GLOBAL(void)
	jpeg_write_marker (j_compress_ptr cinfo, int marker,
	const JOCTET *dataptr, unsigned int datalen)
{
     f48:	defff904 	addi	sp,sp,-28
     f4c:	dfc00615 	stw	ra,24(sp)
     f50:	df000515 	stw	fp,20(sp)
     f54:	df000504 	addi	fp,sp,20
     f58:	e13ffc15 	stw	r4,-16(fp)
     f5c:	e17ffd15 	stw	r5,-12(fp)
     f60:	e1bffe15 	stw	r6,-8(fp)
     f64:	e1ffff15 	stw	r7,-4(fp)
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
     f68:	e0bffc17 	ldw	r2,-16(fp)
     f6c:	10803c17 	ldw	r2,240(r2)
     f70:	10000c1e 	bne	r2,zero,fa4 <jpeg_write_marker+0x5c>
		(cinfo->global_state != CSTATE_SCANNING &&
     f74:	e0bffc17 	ldw	r2,-16(fp)
     f78:	10800517 	ldw	r2,20(r2)
	jpeg_write_marker (j_compress_ptr cinfo, int marker,
	const JOCTET *dataptr, unsigned int datalen)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
     f7c:	10801960 	cmpeqi	r2,r2,101
     f80:	1000161e 	bne	r2,zero,fdc <jpeg_write_marker+0x94>
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
     f84:	e0bffc17 	ldw	r2,-16(fp)
     f88:	10800517 	ldw	r2,20(r2)
	const JOCTET *dataptr, unsigned int datalen)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
     f8c:	108019a0 	cmpeqi	r2,r2,102
     f90:	1000121e 	bne	r2,zero,fdc <jpeg_write_marker+0x94>
		cinfo->global_state != CSTATE_RAW_OK &&
		cinfo->global_state != CSTATE_WRCOEFS))
     f94:	e0bffc17 	ldw	r2,-16(fp)
     f98:	10800517 	ldw	r2,20(r2)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
     f9c:	108019e0 	cmpeqi	r2,r2,103
     fa0:	10000e1e 	bne	r2,zero,fdc <jpeg_write_marker+0x94>
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
     fa4:	e0bffc17 	ldw	r2,-16(fp)
     fa8:	10800017 	ldw	r2,0(r2)
     fac:	00c00544 	movi	r3,21
     fb0:	10c00515 	stw	r3,20(r2)
     fb4:	e0bffc17 	ldw	r2,-16(fp)
     fb8:	10800017 	ldw	r2,0(r2)
     fbc:	e0fffc17 	ldw	r3,-16(fp)
     fc0:	18c00517 	ldw	r3,20(r3)
     fc4:	10c00615 	stw	r3,24(r2)
     fc8:	e0bffc17 	ldw	r2,-16(fp)
     fcc:	10800017 	ldw	r2,0(r2)
     fd0:	10800017 	ldw	r2,0(r2)
     fd4:	e13ffc17 	ldw	r4,-16(fp)
     fd8:	103ee83a 	callr	r2

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
     fdc:	e0bffc17 	ldw	r2,-16(fp)
     fe0:	10806017 	ldw	r2,384(r2)
     fe4:	10800517 	ldw	r2,20(r2)
     fe8:	e13ffc17 	ldw	r4,-16(fp)
     fec:	e17ffd17 	ldw	r5,-12(fp)
     ff0:	e1bfff17 	ldw	r6,-4(fp)
     ff4:	103ee83a 	callr	r2
	write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
     ff8:	e0bffc17 	ldw	r2,-16(fp)
     ffc:	10806017 	ldw	r2,384(r2)
    1000:	10800617 	ldw	r2,24(r2)
    1004:	e0bffb15 	stw	r2,-20(fp)
	while (datalen--) {
    1008:	00000a06 	br	1034 <jpeg_write_marker+0xec>
		(*write_marker_byte) (cinfo, *dataptr);
    100c:	e0bffe17 	ldw	r2,-8(fp)
    1010:	10800003 	ldbu	r2,0(r2)
    1014:	10803fcc 	andi	r2,r2,255
    1018:	e0fffb17 	ldw	r3,-20(fp)
    101c:	e13ffc17 	ldw	r4,-16(fp)
    1020:	100b883a 	mov	r5,r2
    1024:	183ee83a 	callr	r3
		dataptr++;
    1028:	e0bffe17 	ldw	r2,-8(fp)
    102c:	10800044 	addi	r2,r2,1
    1030:	e0bffe15 	stw	r2,-8(fp)
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
	write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
	while (datalen--) {
    1034:	e0bfff17 	ldw	r2,-4(fp)
    1038:	1004c03a 	cmpne	r2,r2,zero
    103c:	e0ffff17 	ldw	r3,-4(fp)
    1040:	18ffffc4 	addi	r3,r3,-1
    1044:	e0ffff15 	stw	r3,-4(fp)
    1048:	10803fcc 	andi	r2,r2,255
    104c:	103fef1e 	bne	r2,zero,100c <jpeg_write_marker+0xc4>
		(*write_marker_byte) (cinfo, *dataptr);
		dataptr++;
	}
}
    1050:	e037883a 	mov	sp,fp
    1054:	dfc00117 	ldw	ra,4(sp)
    1058:	df000017 	ldw	fp,0(sp)
    105c:	dec00204 	addi	sp,sp,8
    1060:	f800283a 	ret

00001064 <jpeg_write_m_header>:

/* Same, but piecemeal. */

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
    1064:	defffb04 	addi	sp,sp,-20
    1068:	dfc00415 	stw	ra,16(sp)
    106c:	df000315 	stw	fp,12(sp)
    1070:	df000304 	addi	fp,sp,12
    1074:	e13ffd15 	stw	r4,-12(fp)
    1078:	e17ffe15 	stw	r5,-8(fp)
    107c:	e1bfff15 	stw	r6,-4(fp)
	if (cinfo->next_scanline != 0 ||
    1080:	e0bffd17 	ldw	r2,-12(fp)
    1084:	10803c17 	ldw	r2,240(r2)
    1088:	10000c1e 	bne	r2,zero,10bc <jpeg_write_m_header+0x58>
		(cinfo->global_state != CSTATE_SCANNING &&
    108c:	e0bffd17 	ldw	r2,-12(fp)
    1090:	10800517 	ldw	r2,20(r2)
/* Same, but piecemeal. */

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
    1094:	10801960 	cmpeqi	r2,r2,101
    1098:	1000161e 	bne	r2,zero,10f4 <jpeg_write_m_header+0x90>
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	10800517 	ldw	r2,20(r2)

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
    10a4:	108019a0 	cmpeqi	r2,r2,102
    10a8:	1000121e 	bne	r2,zero,10f4 <jpeg_write_m_header+0x90>
		cinfo->global_state != CSTATE_RAW_OK &&
		cinfo->global_state != CSTATE_WRCOEFS))
    10ac:	e0bffd17 	ldw	r2,-12(fp)
    10b0:	10800517 	ldw	r2,20(r2)
GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
    10b4:	108019e0 	cmpeqi	r2,r2,103
    10b8:	10000e1e 	bne	r2,zero,10f4 <jpeg_write_m_header+0x90>
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    10bc:	e0bffd17 	ldw	r2,-12(fp)
    10c0:	10800017 	ldw	r2,0(r2)
    10c4:	00c00544 	movi	r3,21
    10c8:	10c00515 	stw	r3,20(r2)
    10cc:	e0bffd17 	ldw	r2,-12(fp)
    10d0:	10800017 	ldw	r2,0(r2)
    10d4:	e0fffd17 	ldw	r3,-12(fp)
    10d8:	18c00517 	ldw	r3,20(r3)
    10dc:	10c00615 	stw	r3,24(r2)
    10e0:	e0bffd17 	ldw	r2,-12(fp)
    10e4:	10800017 	ldw	r2,0(r2)
    10e8:	10800017 	ldw	r2,0(r2)
    10ec:	e13ffd17 	ldw	r4,-12(fp)
    10f0:	103ee83a 	callr	r2

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
    10f4:	e0bffd17 	ldw	r2,-12(fp)
    10f8:	10806017 	ldw	r2,384(r2)
    10fc:	10800517 	ldw	r2,20(r2)
    1100:	e13ffd17 	ldw	r4,-12(fp)
    1104:	e17ffe17 	ldw	r5,-8(fp)
    1108:	e1bfff17 	ldw	r6,-4(fp)
    110c:	103ee83a 	callr	r2
}
    1110:	e037883a 	mov	sp,fp
    1114:	dfc00117 	ldw	ra,4(sp)
    1118:	df000017 	ldw	fp,0(sp)
    111c:	dec00204 	addi	sp,sp,8
    1120:	f800283a 	ret

00001124 <jpeg_write_m_byte>:

GLOBAL(void)
	jpeg_write_m_byte (j_compress_ptr cinfo, int val)
{
    1124:	defffc04 	addi	sp,sp,-16
    1128:	dfc00315 	stw	ra,12(sp)
    112c:	df000215 	stw	fp,8(sp)
    1130:	df000204 	addi	fp,sp,8
    1134:	e13ffe15 	stw	r4,-8(fp)
    1138:	e17fff15 	stw	r5,-4(fp)
	(*cinfo->marker->write_marker_byte) (cinfo, val);
    113c:	e0bffe17 	ldw	r2,-8(fp)
    1140:	10806017 	ldw	r2,384(r2)
    1144:	10800617 	ldw	r2,24(r2)
    1148:	e13ffe17 	ldw	r4,-8(fp)
    114c:	e17fff17 	ldw	r5,-4(fp)
    1150:	103ee83a 	callr	r2
}
    1154:	e037883a 	mov	sp,fp
    1158:	dfc00117 	ldw	ra,4(sp)
    115c:	df000017 	ldw	fp,0(sp)
    1160:	dec00204 	addi	sp,sp,8
    1164:	f800283a 	ret

00001168 <jpeg_write_tables>:
* will not re-emit the tables unless it is passed write_all_tables=TRUE.
*/

GLOBAL(void)
	jpeg_write_tables (j_compress_ptr cinfo)
{
    1168:	defffd04 	addi	sp,sp,-12
    116c:	dfc00215 	stw	ra,8(sp)
    1170:	df000115 	stw	fp,4(sp)
    1174:	df000104 	addi	fp,sp,4
    1178:	e13fff15 	stw	r4,-4(fp)
	if (cinfo->global_state != CSTATE_START)
    117c:	e0bfff17 	ldw	r2,-4(fp)
    1180:	10800517 	ldw	r2,20(r2)
    1184:	10801920 	cmpeqi	r2,r2,100
    1188:	10000e1e 	bne	r2,zero,11c4 <jpeg_write_tables+0x5c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    118c:	e0bfff17 	ldw	r2,-4(fp)
    1190:	10800017 	ldw	r2,0(r2)
    1194:	00c00544 	movi	r3,21
    1198:	10c00515 	stw	r3,20(r2)
    119c:	e0bfff17 	ldw	r2,-4(fp)
    11a0:	10800017 	ldw	r2,0(r2)
    11a4:	e0ffff17 	ldw	r3,-4(fp)
    11a8:	18c00517 	ldw	r3,20(r3)
    11ac:	10c00615 	stw	r3,24(r2)
    11b0:	e0bfff17 	ldw	r2,-4(fp)
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	10800017 	ldw	r2,0(r2)
    11bc:	e13fff17 	ldw	r4,-4(fp)
    11c0:	103ee83a 	callr	r2

	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
    11c4:	e0bfff17 	ldw	r2,-4(fp)
    11c8:	10800017 	ldw	r2,0(r2)
    11cc:	10800417 	ldw	r2,16(r2)
    11d0:	e13fff17 	ldw	r4,-4(fp)
    11d4:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
    11d8:	e0bfff17 	ldw	r2,-4(fp)
    11dc:	10800617 	ldw	r2,24(r2)
    11e0:	10800217 	ldw	r2,8(r2)
    11e4:	e13fff17 	ldw	r4,-4(fp)
    11e8:	103ee83a 	callr	r2
	/* Initialize the marker writer ... bit of a crock to do it here. */
	jinit_marker_writer(cinfo);
    11ec:	e13fff17 	ldw	r4,-4(fp)
    11f0:	000b0480 	call	b048 <jinit_marker_writer>
	/* Write them tables! */
	(*cinfo->marker->write_tables_only) (cinfo);
    11f4:	e0bfff17 	ldw	r2,-4(fp)
    11f8:	10806017 	ldw	r2,384(r2)
    11fc:	10800417 	ldw	r2,16(r2)
    1200:	e13fff17 	ldw	r4,-4(fp)
    1204:	103ee83a 	callr	r2
	/* And clean up. */
	(*cinfo->dest->term_destination) (cinfo);
    1208:	e0bfff17 	ldw	r2,-4(fp)
    120c:	10800617 	ldw	r2,24(r2)
    1210:	10800417 	ldw	r2,16(r2)
    1214:	e13fff17 	ldw	r4,-4(fp)
    1218:	103ee83a 	callr	r2
	* compression cycle or otherwise resetting the JPEG object.  However, that
	* seems less bad than unexpectedly freeing memory in the normal case.
	* An app that prefers the old behavior can call jpeg_abort for itself after
	* each call to jpeg_write_tables().
	*/
}
    121c:	e037883a 	mov	sp,fp
    1220:	dfc00117 	ldw	ra,4(sp)
    1224:	df000017 	ldw	fp,0(sp)
    1228:	dec00204 	addi	sp,sp,8
    122c:	f800283a 	ret

00001230 <jpeg_start_compress>:
* wrong thing.
*/

GLOBAL(void)
	jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
    1230:	defffc04 	addi	sp,sp,-16
    1234:	dfc00315 	stw	ra,12(sp)
    1238:	df000215 	stw	fp,8(sp)
    123c:	df000204 	addi	fp,sp,8
    1240:	e13ffe15 	stw	r4,-8(fp)
    1244:	2805883a 	mov	r2,r5
    1248:	e0bfff05 	stb	r2,-4(fp)
	if (cinfo->global_state != CSTATE_START)
    124c:	e0bffe17 	ldw	r2,-8(fp)
    1250:	10800517 	ldw	r2,20(r2)
    1254:	10801920 	cmpeqi	r2,r2,100
    1258:	10000e1e 	bne	r2,zero,1294 <jpeg_start_compress+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	10800017 	ldw	r2,0(r2)
    1264:	00c00544 	movi	r3,21
    1268:	10c00515 	stw	r3,20(r2)
    126c:	e0bffe17 	ldw	r2,-8(fp)
    1270:	10800017 	ldw	r2,0(r2)
    1274:	e0fffe17 	ldw	r3,-8(fp)
    1278:	18c00517 	ldw	r3,20(r3)
    127c:	10c00615 	stw	r3,24(r2)
    1280:	e0bffe17 	ldw	r2,-8(fp)
    1284:	10800017 	ldw	r2,0(r2)
    1288:	10800017 	ldw	r2,0(r2)
    128c:	e13ffe17 	ldw	r4,-8(fp)
    1290:	103ee83a 	callr	r2

	if (write_all_tables)
    1294:	e0bfff03 	ldbu	r2,-4(fp)
    1298:	10000326 	beq	r2,zero,12a8 <jpeg_start_compress+0x78>
		jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
    129c:	e13ffe17 	ldw	r4,-8(fp)
    12a0:	000b883a 	mov	r5,zero
    12a4:	0000c400 	call	c40 <jpeg_suppress_tables>

	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
    12a8:	e0bffe17 	ldw	r2,-8(fp)
    12ac:	10800017 	ldw	r2,0(r2)
    12b0:	10800417 	ldw	r2,16(r2)
    12b4:	e13ffe17 	ldw	r4,-8(fp)
    12b8:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
    12bc:	e0bffe17 	ldw	r2,-8(fp)
    12c0:	10800617 	ldw	r2,24(r2)
    12c4:	10800217 	ldw	r2,8(r2)
    12c8:	e13ffe17 	ldw	r4,-8(fp)
    12cc:	103ee83a 	callr	r2
	/* Perform master selection of active modules */
	jinit_compress_master(cinfo);
    12d0:	e13ffe17 	ldw	r4,-8(fp)
    12d4:	000984c0 	call	984c <jinit_compress_master>
	/* Set up for the first pass */
	(*cinfo->master->prepare_for_pass) (cinfo);
    12d8:	e0bffe17 	ldw	r2,-8(fp)
    12dc:	10805c17 	ldw	r2,368(r2)
    12e0:	10800017 	ldw	r2,0(r2)
    12e4:	e13ffe17 	ldw	r4,-8(fp)
    12e8:	103ee83a 	callr	r2
	/* Ready for application to drive first pass through jpeg_write_scanlines
	* or jpeg_write_raw_data.
	*/
	cinfo->next_scanline = 0;
    12ec:	e0bffe17 	ldw	r2,-8(fp)
    12f0:	10003c15 	stw	zero,240(r2)
	cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10803303 	ldbu	r2,204(r2)
    12fc:	10803fcc 	andi	r2,r2,255
    1300:	10000226 	beq	r2,zero,130c <jpeg_start_compress+0xdc>
    1304:	00801984 	movi	r2,102
    1308:	00000106 	br	1310 <jpeg_start_compress+0xe0>
    130c:	00801944 	movi	r2,101
    1310:	e0fffe17 	ldw	r3,-8(fp)
    1314:	18800515 	stw	r2,20(r3)
}
    1318:	e037883a 	mov	sp,fp
    131c:	dfc00117 	ldw	ra,4(sp)
    1320:	df000017 	ldw	fp,0(sp)
    1324:	dec00204 	addi	sp,sp,8
    1328:	f800283a 	ret

0000132c <jpeg_write_scanlines>:
*/

GLOBAL(JDIMENSION)
	jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
	JDIMENSION num_lines)
{
    132c:	defff904 	addi	sp,sp,-28
    1330:	dfc00615 	stw	ra,24(sp)
    1334:	df000515 	stw	fp,20(sp)
    1338:	df000504 	addi	fp,sp,20
    133c:	e13ffd15 	stw	r4,-12(fp)
    1340:	e17ffe15 	stw	r5,-8(fp)
    1344:	e1bfff15 	stw	r6,-4(fp)
	JDIMENSION row_ctr, rows_left;

	if (cinfo->global_state != CSTATE_SCANNING)
    1348:	e0bffd17 	ldw	r2,-12(fp)
    134c:	10800517 	ldw	r2,20(r2)
    1350:	10801960 	cmpeqi	r2,r2,101
    1354:	10000e1e 	bne	r2,zero,1390 <jpeg_write_scanlines+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    1358:	e0bffd17 	ldw	r2,-12(fp)
    135c:	10800017 	ldw	r2,0(r2)
    1360:	00c00544 	movi	r3,21
    1364:	10c00515 	stw	r3,20(r2)
    1368:	e0bffd17 	ldw	r2,-12(fp)
    136c:	10800017 	ldw	r2,0(r2)
    1370:	e0fffd17 	ldw	r3,-12(fp)
    1374:	18c00517 	ldw	r3,20(r3)
    1378:	10c00615 	stw	r3,24(r2)
    137c:	e0bffd17 	ldw	r2,-12(fp)
    1380:	10800017 	ldw	r2,0(r2)
    1384:	10800017 	ldw	r2,0(r2)
    1388:	e13ffd17 	ldw	r4,-12(fp)
    138c:	103ee83a 	callr	r2
	if (cinfo->next_scanline >= cinfo->image_height)
    1390:	e0bffd17 	ldw	r2,-12(fp)
    1394:	10c03c17 	ldw	r3,240(r2)
    1398:	e0bffd17 	ldw	r2,-12(fp)
    139c:	10800817 	ldw	r2,32(r2)
    13a0:	18800a36 	bltu	r3,r2,13cc <jpeg_write_scanlines+0xa0>
		WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    13a4:	e0bffd17 	ldw	r2,-12(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	00c01f84 	movi	r3,126
    13b0:	10c00515 	stw	r3,20(r2)
    13b4:	e0bffd17 	ldw	r2,-12(fp)
    13b8:	10800017 	ldw	r2,0(r2)
    13bc:	10800117 	ldw	r2,4(r2)
    13c0:	e13ffd17 	ldw	r4,-12(fp)
    13c4:	017fffc4 	movi	r5,-1
    13c8:	103ee83a 	callr	r2

	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL) {
    13cc:	e0bffd17 	ldw	r2,-12(fp)
    13d0:	10800217 	ldw	r2,8(r2)
    13d4:	10000f26 	beq	r2,zero,1414 <jpeg_write_scanlines+0xe8>
		cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    13d8:	e0bffd17 	ldw	r2,-12(fp)
    13dc:	10800217 	ldw	r2,8(r2)
    13e0:	e0fffd17 	ldw	r3,-12(fp)
    13e4:	18c03c17 	ldw	r3,240(r3)
    13e8:	10c00115 	stw	r3,4(r2)
		cinfo->progress->pass_limit = (long) cinfo->image_height;
    13ec:	e0bffd17 	ldw	r2,-12(fp)
    13f0:	10800217 	ldw	r2,8(r2)
    13f4:	e0fffd17 	ldw	r3,-12(fp)
    13f8:	18c00817 	ldw	r3,32(r3)
    13fc:	10c00215 	stw	r3,8(r2)
		(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    1400:	e0bffd17 	ldw	r2,-12(fp)
    1404:	10800217 	ldw	r2,8(r2)
    1408:	10800017 	ldw	r2,0(r2)
    140c:	e13ffd17 	ldw	r4,-12(fp)
    1410:	103ee83a 	callr	r2
	/* Give master control module another chance if this is first call to
	* jpeg_write_scanlines.  This lets output of the frame/scan headers be
	* delayed so that application can write COM, etc, markers between
	* jpeg_start_compress and jpeg_write_scanlines.
	*/
	if (cinfo->master->call_pass_startup)
    1414:	e0bffd17 	ldw	r2,-12(fp)
    1418:	10805c17 	ldw	r2,368(r2)
    141c:	10800303 	ldbu	r2,12(r2)
    1420:	10803fcc 	andi	r2,r2,255
    1424:	10000526 	beq	r2,zero,143c <jpeg_write_scanlines+0x110>
		(*cinfo->master->pass_startup) (cinfo);
    1428:	e0bffd17 	ldw	r2,-12(fp)
    142c:	10805c17 	ldw	r2,368(r2)
    1430:	10800117 	ldw	r2,4(r2)
    1434:	e13ffd17 	ldw	r4,-12(fp)
    1438:	103ee83a 	callr	r2

	/* Ignore any extra scanlines at bottom of image. */
	rows_left = cinfo->image_height - cinfo->next_scanline;
    143c:	e0bffd17 	ldw	r2,-12(fp)
    1440:	10c00817 	ldw	r3,32(r2)
    1444:	e0bffd17 	ldw	r2,-12(fp)
    1448:	10803c17 	ldw	r2,240(r2)
    144c:	1885c83a 	sub	r2,r3,r2
    1450:	e0bffb15 	stw	r2,-20(fp)
	if (num_lines > rows_left)
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	e0fffb17 	ldw	r3,-20(fp)
    145c:	1880022e 	bgeu	r3,r2,1468 <jpeg_write_scanlines+0x13c>
		num_lines = rows_left;
    1460:	e0bffb17 	ldw	r2,-20(fp)
    1464:	e0bfff15 	stw	r2,-4(fp)

	row_ctr = 0;
    1468:	e03ffc15 	stw	zero,-16(fp)
	(*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
    146c:	e0bffd17 	ldw	r2,-12(fp)
    1470:	10805d17 	ldw	r2,372(r2)
    1474:	10c00117 	ldw	r3,4(r2)
    1478:	e0bffc04 	addi	r2,fp,-16
    147c:	e13ffd17 	ldw	r4,-12(fp)
    1480:	e17ffe17 	ldw	r5,-8(fp)
    1484:	100d883a 	mov	r6,r2
    1488:	e1ffff17 	ldw	r7,-4(fp)
    148c:	183ee83a 	callr	r3
	cinfo->next_scanline += row_ctr;
    1490:	e0bffd17 	ldw	r2,-12(fp)
    1494:	10c03c17 	ldw	r3,240(r2)
    1498:	e0bffc17 	ldw	r2,-16(fp)
    149c:	1887883a 	add	r3,r3,r2
    14a0:	e0bffd17 	ldw	r2,-12(fp)
    14a4:	10c03c15 	stw	r3,240(r2)
	return row_ctr;
    14a8:	e0bffc17 	ldw	r2,-16(fp)
}
    14ac:	e037883a 	mov	sp,fp
    14b0:	dfc00117 	ldw	ra,4(sp)
    14b4:	df000017 	ldw	fp,0(sp)
    14b8:	dec00204 	addi	sp,sp,8
    14bc:	f800283a 	ret

000014c0 <jpeg_write_raw_data>:
*/

GLOBAL(JDIMENSION)
	jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
	JDIMENSION num_lines)
{
    14c0:	defffa04 	addi	sp,sp,-24
    14c4:	dfc00515 	stw	ra,20(sp)
    14c8:	df000415 	stw	fp,16(sp)
    14cc:	df000404 	addi	fp,sp,16
    14d0:	e13ffd15 	stw	r4,-12(fp)
    14d4:	e17ffe15 	stw	r5,-8(fp)
    14d8:	e1bfff15 	stw	r6,-4(fp)
	JDIMENSION lines_per_iMCU_row;

	if (cinfo->global_state != CSTATE_RAW_OK)
    14dc:	e0bffd17 	ldw	r2,-12(fp)
    14e0:	10800517 	ldw	r2,20(r2)
    14e4:	108019a0 	cmpeqi	r2,r2,102
    14e8:	10000e1e 	bne	r2,zero,1524 <jpeg_write_raw_data+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    14ec:	e0bffd17 	ldw	r2,-12(fp)
    14f0:	10800017 	ldw	r2,0(r2)
    14f4:	00c00544 	movi	r3,21
    14f8:	10c00515 	stw	r3,20(r2)
    14fc:	e0bffd17 	ldw	r2,-12(fp)
    1500:	10800017 	ldw	r2,0(r2)
    1504:	e0fffd17 	ldw	r3,-12(fp)
    1508:	18c00517 	ldw	r3,20(r3)
    150c:	10c00615 	stw	r3,24(r2)
    1510:	e0bffd17 	ldw	r2,-12(fp)
    1514:	10800017 	ldw	r2,0(r2)
    1518:	10800017 	ldw	r2,0(r2)
    151c:	e13ffd17 	ldw	r4,-12(fp)
    1520:	103ee83a 	callr	r2
	if (cinfo->next_scanline >= cinfo->image_height) {
    1524:	e0bffd17 	ldw	r2,-12(fp)
    1528:	10c03c17 	ldw	r3,240(r2)
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	10800817 	ldw	r2,32(r2)
    1534:	18800c36 	bltu	r3,r2,1568 <jpeg_write_raw_data+0xa8>
		WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    1538:	e0bffd17 	ldw	r2,-12(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	00c01f84 	movi	r3,126
    1544:	10c00515 	stw	r3,20(r2)
    1548:	e0bffd17 	ldw	r2,-12(fp)
    154c:	10800017 	ldw	r2,0(r2)
    1550:	10800117 	ldw	r2,4(r2)
    1554:	e13ffd17 	ldw	r4,-12(fp)
    1558:	017fffc4 	movi	r5,-1
    155c:	103ee83a 	callr	r2
		return 0;
    1560:	0005883a 	mov	r2,zero
    1564:	00003d06 	br	165c <jpeg_write_raw_data+0x19c>
	}

	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL) {
    1568:	e0bffd17 	ldw	r2,-12(fp)
    156c:	10800217 	ldw	r2,8(r2)
    1570:	10000f26 	beq	r2,zero,15b0 <jpeg_write_raw_data+0xf0>
		cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    1574:	e0bffd17 	ldw	r2,-12(fp)
    1578:	10800217 	ldw	r2,8(r2)
    157c:	e0fffd17 	ldw	r3,-12(fp)
    1580:	18c03c17 	ldw	r3,240(r3)
    1584:	10c00115 	stw	r3,4(r2)
		cinfo->progress->pass_limit = (long) cinfo->image_height;
    1588:	e0bffd17 	ldw	r2,-12(fp)
    158c:	10800217 	ldw	r2,8(r2)
    1590:	e0fffd17 	ldw	r3,-12(fp)
    1594:	18c00817 	ldw	r3,32(r3)
    1598:	10c00215 	stw	r3,8(r2)
		(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10800217 	ldw	r2,8(r2)
    15a4:	10800017 	ldw	r2,0(r2)
    15a8:	e13ffd17 	ldw	r4,-12(fp)
    15ac:	103ee83a 	callr	r2
	/* Give master control module another chance if this is first call to
	* jpeg_write_raw_data.  This lets output of the frame/scan headers be
	* delayed so that application can write COM, etc, markers between
	* jpeg_start_compress and jpeg_write_raw_data.
	*/
	if (cinfo->master->call_pass_startup)
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	10805c17 	ldw	r2,368(r2)
    15b8:	10800303 	ldbu	r2,12(r2)
    15bc:	10803fcc 	andi	r2,r2,255
    15c0:	10000526 	beq	r2,zero,15d8 <jpeg_write_raw_data+0x118>
		(*cinfo->master->pass_startup) (cinfo);
    15c4:	e0bffd17 	ldw	r2,-12(fp)
    15c8:	10805c17 	ldw	r2,368(r2)
    15cc:	10800117 	ldw	r2,4(r2)
    15d0:	e13ffd17 	ldw	r4,-12(fp)
    15d4:	103ee83a 	callr	r2

	/* Verify that at least one iMCU row has been passed. */
	lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
    15d8:	e0bffd17 	ldw	r2,-12(fp)
    15dc:	10803f17 	ldw	r2,252(r2)
    15e0:	100490fa 	slli	r2,r2,3
    15e4:	e0bffc15 	stw	r2,-16(fp)
	if (num_lines < lines_per_iMCU_row)
    15e8:	e0ffff17 	ldw	r3,-4(fp)
    15ec:	e0bffc17 	ldw	r2,-16(fp)
    15f0:	1880092e 	bgeu	r3,r2,1618 <jpeg_write_raw_data+0x158>
		ERREXIT(cinfo, JERR_BUFFER_SIZE);
    15f4:	e0bffd17 	ldw	r2,-12(fp)
    15f8:	10800017 	ldw	r2,0(r2)
    15fc:	00c00604 	movi	r3,24
    1600:	10c00515 	stw	r3,20(r2)
    1604:	e0bffd17 	ldw	r2,-12(fp)
    1608:	10800017 	ldw	r2,0(r2)
    160c:	10800017 	ldw	r2,0(r2)
    1610:	e13ffd17 	ldw	r4,-12(fp)
    1614:	103ee83a 	callr	r2

	/* Directly compress the row. */
	if (! (*cinfo->coef->compress_data) (cinfo, data)) {
    1618:	e0bffd17 	ldw	r2,-12(fp)
    161c:	10805f17 	ldw	r2,380(r2)
    1620:	10800117 	ldw	r2,4(r2)
    1624:	e13ffd17 	ldw	r4,-12(fp)
    1628:	e17ffe17 	ldw	r5,-8(fp)
    162c:	103ee83a 	callr	r2
    1630:	10803fcc 	andi	r2,r2,255
    1634:	1000021e 	bne	r2,zero,1640 <jpeg_write_raw_data+0x180>
		/* If compressor did not consume the whole row, suspend processing. */
		return 0;
    1638:	0005883a 	mov	r2,zero
    163c:	00000706 	br	165c <jpeg_write_raw_data+0x19c>
	}

	/* OK, we processed one iMCU row. */
	cinfo->next_scanline += lines_per_iMCU_row;
    1640:	e0bffd17 	ldw	r2,-12(fp)
    1644:	10c03c17 	ldw	r3,240(r2)
    1648:	e0bffc17 	ldw	r2,-16(fp)
    164c:	1887883a 	add	r3,r3,r2
    1650:	e0bffd17 	ldw	r2,-12(fp)
    1654:	10c03c15 	stw	r3,240(r2)
	return lines_per_iMCU_row;
    1658:	e0bffc17 	ldw	r2,-16(fp)
}
    165c:	e037883a 	mov	sp,fp
    1660:	dfc00117 	ldw	ra,4(sp)
    1664:	df000017 	ldw	fp,0(sp)
    1668:	dec00204 	addi	sp,sp,8
    166c:	f800283a 	ret

00001670 <emit_byte>:


LOCAL(void)
	emit_byte (int val, j_compress_ptr cinfo)
	/* Write next output byte; we do not support suspension in this module. */
{
    1670:	defffb04 	addi	sp,sp,-20
    1674:	dfc00415 	stw	ra,16(sp)
    1678:	df000315 	stw	fp,12(sp)
    167c:	df000304 	addi	fp,sp,12
    1680:	e13ffe15 	stw	r4,-8(fp)
    1684:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_destination_mgr * dest = cinfo->dest;
    1688:	e0bfff17 	ldw	r2,-4(fp)
    168c:	10800617 	ldw	r2,24(r2)
    1690:	e0bffd15 	stw	r2,-12(fp)

	*dest->next_output_byte++ = (JOCTET) val;
    1694:	e0bffd17 	ldw	r2,-12(fp)
    1698:	10800017 	ldw	r2,0(r2)
    169c:	e0fffe17 	ldw	r3,-8(fp)
    16a0:	10c00005 	stb	r3,0(r2)
    16a4:	10c00044 	addi	r3,r2,1
    16a8:	e0bffd17 	ldw	r2,-12(fp)
    16ac:	10c00015 	stw	r3,0(r2)
	if (--dest->free_in_buffer == 0)
    16b0:	e0bffd17 	ldw	r2,-12(fp)
    16b4:	10800117 	ldw	r2,4(r2)
    16b8:	10ffffc4 	addi	r3,r2,-1
    16bc:	e0bffd17 	ldw	r2,-12(fp)
    16c0:	10c00115 	stw	r3,4(r2)
    16c4:	e0bffd17 	ldw	r2,-12(fp)
    16c8:	10800117 	ldw	r2,4(r2)
    16cc:	10000f1e 	bne	r2,zero,170c <emit_byte+0x9c>
		if (! (*dest->empty_output_buffer) (cinfo))
    16d0:	e0bffd17 	ldw	r2,-12(fp)
    16d4:	10800317 	ldw	r2,12(r2)
    16d8:	e13fff17 	ldw	r4,-4(fp)
    16dc:	103ee83a 	callr	r2
    16e0:	10803fcc 	andi	r2,r2,255
    16e4:	1000091e 	bne	r2,zero,170c <emit_byte+0x9c>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	10800017 	ldw	r2,0(r2)
    16f0:	00c00644 	movi	r3,25
    16f4:	10c00515 	stw	r3,20(r2)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
    16fc:	10800017 	ldw	r2,0(r2)
    1700:	10800017 	ldw	r2,0(r2)
    1704:	e13fff17 	ldw	r4,-4(fp)
    1708:	103ee83a 	callr	r2
}
    170c:	e037883a 	mov	sp,fp
    1710:	dfc00117 	ldw	ra,4(sp)
    1714:	df000017 	ldw	fp,0(sp)
    1718:	dec00204 	addi	sp,sp,8
    171c:	f800283a 	ret

00001720 <finish_pass>:
* Finish up at the end of an arithmetic-compressed scan.
*/

METHODDEF(void)
	finish_pass (j_compress_ptr cinfo)
{
    1720:	defffb04 	addi	sp,sp,-20
    1724:	dfc00415 	stw	ra,16(sp)
    1728:	df000315 	stw	fp,12(sp)
    172c:	df000304 	addi	fp,sp,12
    1730:	e13fff15 	stw	r4,-4(fp)
	arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
    1734:	e0bfff17 	ldw	r2,-4(fp)
    1738:	10806417 	ldw	r2,400(r2)
    173c:	e0bffd15 	stw	r2,-12(fp)

	/* Section D.1.8: Termination of encoding */

	/* Find the e->c in the coding interval with the largest
	* number of trailing zero bits */
	if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
    1740:	e0bffd17 	ldw	r2,-12(fp)
    1744:	10800417 	ldw	r2,16(r2)
    1748:	10ffffc4 	addi	r3,r2,-1
    174c:	e0bffd17 	ldw	r2,-12(fp)
    1750:	10800317 	ldw	r2,12(r2)
    1754:	1885883a 	add	r2,r3,r2
    1758:	10bfffec 	andhi	r2,r2,65535
    175c:	e0bffe15 	stw	r2,-8(fp)
    1760:	e0bffd17 	ldw	r2,-12(fp)
    1764:	10800317 	ldw	r2,12(r2)
    1768:	e0fffe17 	ldw	r3,-8(fp)
    176c:	1880060e 	bge	r3,r2,1788 <finish_pass+0x68>
		e->c = temp + 0x8000L;
    1770:	e0fffe17 	ldw	r3,-8(fp)
    1774:	00a00014 	movui	r2,32768
    1778:	1887883a 	add	r3,r3,r2
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10c00315 	stw	r3,12(r2)
    1784:	00000306 	br	1794 <finish_pass+0x74>
	else
		e->c = temp;
    1788:	e0bffd17 	ldw	r2,-12(fp)
    178c:	e0fffe17 	ldw	r3,-8(fp)
    1790:	10c00315 	stw	r3,12(r2)
	/* Send remaining bytes to output */
	e->c <<= e->ct;
    1794:	e0bffd17 	ldw	r2,-12(fp)
    1798:	10c00317 	ldw	r3,12(r2)
    179c:	e0bffd17 	ldw	r2,-12(fp)
    17a0:	10800717 	ldw	r2,28(r2)
    17a4:	1886983a 	sll	r3,r3,r2
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	10c00315 	stw	r3,12(r2)
	if (e->c & 0xF8000000L) {
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10800317 	ldw	r2,12(r2)
    17b8:	10be002c 	andhi	r2,r2,63488
    17bc:	10002826 	beq	r2,zero,1860 <finish_pass+0x140>
		/* One final overflow has to be handled */
		if (e->buffer >= 0) {
    17c0:	e0bffd17 	ldw	r2,-12(fp)
    17c4:	10800817 	ldw	r2,32(r2)
    17c8:	10001b16 	blt	r2,zero,1838 <finish_pass+0x118>
			if (e->zc)
    17cc:	e0bffd17 	ldw	r2,-12(fp)
    17d0:	10800617 	ldw	r2,24(r2)
    17d4:	10000b26 	beq	r2,zero,1804 <finish_pass+0xe4>
				do emit_byte(0x00, cinfo);
    17d8:	0009883a 	mov	r4,zero
    17dc:	e17fff17 	ldw	r5,-4(fp)
    17e0:	00016700 	call	1670 <emit_byte>
			while (--e->zc);
    17e4:	e0bffd17 	ldw	r2,-12(fp)
    17e8:	10800617 	ldw	r2,24(r2)
    17ec:	10ffffc4 	addi	r3,r2,-1
    17f0:	e0bffd17 	ldw	r2,-12(fp)
    17f4:	10c00615 	stw	r3,24(r2)
    17f8:	e0bffd17 	ldw	r2,-12(fp)
    17fc:	10800617 	ldw	r2,24(r2)
    1800:	103ff51e 	bne	r2,zero,17d8 <finish_pass+0xb8>
			emit_byte(e->buffer + 1, cinfo);
    1804:	e0bffd17 	ldw	r2,-12(fp)
    1808:	10800817 	ldw	r2,32(r2)
    180c:	10800044 	addi	r2,r2,1
    1810:	1009883a 	mov	r4,r2
    1814:	e17fff17 	ldw	r5,-4(fp)
    1818:	00016700 	call	1670 <emit_byte>
			if (e->buffer + 1 == 0xFF)
    181c:	e0bffd17 	ldw	r2,-12(fp)
    1820:	10800817 	ldw	r2,32(r2)
    1824:	10803f98 	cmpnei	r2,r2,254
    1828:	1000031e 	bne	r2,zero,1838 <finish_pass+0x118>
				emit_byte(0x00, cinfo);
    182c:	0009883a 	mov	r4,zero
    1830:	e17fff17 	ldw	r5,-4(fp)
    1834:	00016700 	call	1670 <emit_byte>
		}
		e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
    1838:	e0bffd17 	ldw	r2,-12(fp)
    183c:	10c00617 	ldw	r3,24(r2)
    1840:	e0bffd17 	ldw	r2,-12(fp)
    1844:	10800517 	ldw	r2,20(r2)
    1848:	1887883a 	add	r3,r3,r2
    184c:	e0bffd17 	ldw	r2,-12(fp)
    1850:	10c00615 	stw	r3,24(r2)
		e->sc = 0;
    1854:	e0bffd17 	ldw	r2,-12(fp)
    1858:	10000515 	stw	zero,20(r2)
    185c:	00003e06 	br	1958 <finish_pass+0x238>
	} else {
		if (e->buffer == 0)
    1860:	e0bffd17 	ldw	r2,-12(fp)
    1864:	10800817 	ldw	r2,32(r2)
    1868:	1000061e 	bne	r2,zero,1884 <finish_pass+0x164>
			++e->zc;
    186c:	e0bffd17 	ldw	r2,-12(fp)
    1870:	10800617 	ldw	r2,24(r2)
    1874:	10c00044 	addi	r3,r2,1
    1878:	e0bffd17 	ldw	r2,-12(fp)
    187c:	10c00615 	stw	r3,24(r2)
    1880:	00001606 	br	18dc <finish_pass+0x1bc>
		else if (e->buffer >= 0) {
    1884:	e0bffd17 	ldw	r2,-12(fp)
    1888:	10800817 	ldw	r2,32(r2)
    188c:	10001316 	blt	r2,zero,18dc <finish_pass+0x1bc>
			if (e->zc)
    1890:	e0bffd17 	ldw	r2,-12(fp)
    1894:	10800617 	ldw	r2,24(r2)
    1898:	10000b26 	beq	r2,zero,18c8 <finish_pass+0x1a8>
				do emit_byte(0x00, cinfo);
    189c:	0009883a 	mov	r4,zero
    18a0:	e17fff17 	ldw	r5,-4(fp)
    18a4:	00016700 	call	1670 <emit_byte>
			while (--e->zc);
    18a8:	e0bffd17 	ldw	r2,-12(fp)
    18ac:	10800617 	ldw	r2,24(r2)
    18b0:	10ffffc4 	addi	r3,r2,-1
    18b4:	e0bffd17 	ldw	r2,-12(fp)
    18b8:	10c00615 	stw	r3,24(r2)
    18bc:	e0bffd17 	ldw	r2,-12(fp)
    18c0:	10800617 	ldw	r2,24(r2)
    18c4:	103ff51e 	bne	r2,zero,189c <finish_pass+0x17c>
			emit_byte(e->buffer, cinfo);
    18c8:	e0bffd17 	ldw	r2,-12(fp)
    18cc:	10800817 	ldw	r2,32(r2)
    18d0:	1009883a 	mov	r4,r2
    18d4:	e17fff17 	ldw	r5,-4(fp)
    18d8:	00016700 	call	1670 <emit_byte>
		}
		if (e->sc) {
    18dc:	e0bffd17 	ldw	r2,-12(fp)
    18e0:	10800517 	ldw	r2,20(r2)
    18e4:	10001c26 	beq	r2,zero,1958 <finish_pass+0x238>
			if (e->zc)
    18e8:	e0bffd17 	ldw	r2,-12(fp)
    18ec:	10800617 	ldw	r2,24(r2)
    18f0:	10000b26 	beq	r2,zero,1920 <finish_pass+0x200>
				do emit_byte(0x00, cinfo);
    18f4:	0009883a 	mov	r4,zero
    18f8:	e17fff17 	ldw	r5,-4(fp)
    18fc:	00016700 	call	1670 <emit_byte>
			while (--e->zc);
    1900:	e0bffd17 	ldw	r2,-12(fp)
    1904:	10800617 	ldw	r2,24(r2)
    1908:	10ffffc4 	addi	r3,r2,-1
    190c:	e0bffd17 	ldw	r2,-12(fp)
    1910:	10c00615 	stw	r3,24(r2)
    1914:	e0bffd17 	ldw	r2,-12(fp)
    1918:	10800617 	ldw	r2,24(r2)
    191c:	103ff51e 	bne	r2,zero,18f4 <finish_pass+0x1d4>
			do {
				emit_byte(0xFF, cinfo);
    1920:	01003fc4 	movi	r4,255
    1924:	e17fff17 	ldw	r5,-4(fp)
    1928:	00016700 	call	1670 <emit_byte>
				emit_byte(0x00, cinfo);
    192c:	0009883a 	mov	r4,zero
    1930:	e17fff17 	ldw	r5,-4(fp)
    1934:	00016700 	call	1670 <emit_byte>
			} while (--e->sc);
    1938:	e0bffd17 	ldw	r2,-12(fp)
    193c:	10800517 	ldw	r2,20(r2)
    1940:	10ffffc4 	addi	r3,r2,-1
    1944:	e0bffd17 	ldw	r2,-12(fp)
    1948:	10c00515 	stw	r3,20(r2)
    194c:	e0bffd17 	ldw	r2,-12(fp)
    1950:	10800517 	ldw	r2,20(r2)
    1954:	103ff21e 	bne	r2,zero,1920 <finish_pass+0x200>
		}
	}
	/* Output final bytes only if they are not 0x00 */
	if (e->c & 0x7FFF800L) {
    1958:	e0bffd17 	ldw	r2,-12(fp)
    195c:	10c00317 	ldw	r3,12(r2)
    1960:	00820034 	movhi	r2,2048
    1964:	10be0004 	addi	r2,r2,-2048
    1968:	1884703a 	and	r2,r3,r2
    196c:	10003426 	beq	r2,zero,1a40 <finish_pass+0x320>
		if (e->zc)  /* output final pending zero bytes */
    1970:	e0bffd17 	ldw	r2,-12(fp)
    1974:	10800617 	ldw	r2,24(r2)
    1978:	10000b26 	beq	r2,zero,19a8 <finish_pass+0x288>
			do emit_byte(0x00, cinfo);
    197c:	0009883a 	mov	r4,zero
    1980:	e17fff17 	ldw	r5,-4(fp)
    1984:	00016700 	call	1670 <emit_byte>
		while (--e->zc);
    1988:	e0bffd17 	ldw	r2,-12(fp)
    198c:	10800617 	ldw	r2,24(r2)
    1990:	10ffffc4 	addi	r3,r2,-1
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	10c00615 	stw	r3,24(r2)
    199c:	e0bffd17 	ldw	r2,-12(fp)
    19a0:	10800617 	ldw	r2,24(r2)
    19a4:	103ff51e 	bne	r2,zero,197c <finish_pass+0x25c>
		emit_byte((e->c >> 19) & 0xFF, cinfo);
    19a8:	e0bffd17 	ldw	r2,-12(fp)
    19ac:	10800317 	ldw	r2,12(r2)
    19b0:	1005d4fa 	srai	r2,r2,19
    19b4:	10803fcc 	andi	r2,r2,255
    19b8:	1009883a 	mov	r4,r2
    19bc:	e17fff17 	ldw	r5,-4(fp)
    19c0:	00016700 	call	1670 <emit_byte>
		if (((e->c >> 19) & 0xFF) == 0xFF)
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	10800317 	ldw	r2,12(r2)
    19cc:	1005d4fa 	srai	r2,r2,19
    19d0:	10803fcc 	andi	r2,r2,255
    19d4:	10803fd8 	cmpnei	r2,r2,255
    19d8:	1000031e 	bne	r2,zero,19e8 <finish_pass+0x2c8>
			emit_byte(0x00, cinfo);
    19dc:	0009883a 	mov	r4,zero
    19e0:	e17fff17 	ldw	r5,-4(fp)
    19e4:	00016700 	call	1670 <emit_byte>
		if (e->c & 0x7F800L) {
    19e8:	e0bffd17 	ldw	r2,-12(fp)
    19ec:	10c00317 	ldw	r3,12(r2)
    19f0:	00800234 	movhi	r2,8
    19f4:	10be0004 	addi	r2,r2,-2048
    19f8:	1884703a 	and	r2,r3,r2
    19fc:	10001026 	beq	r2,zero,1a40 <finish_pass+0x320>
			emit_byte((e->c >> 11) & 0xFF, cinfo);
    1a00:	e0bffd17 	ldw	r2,-12(fp)
    1a04:	10800317 	ldw	r2,12(r2)
    1a08:	1005d2fa 	srai	r2,r2,11
    1a0c:	10803fcc 	andi	r2,r2,255
    1a10:	1009883a 	mov	r4,r2
    1a14:	e17fff17 	ldw	r5,-4(fp)
    1a18:	00016700 	call	1670 <emit_byte>
			if (((e->c >> 11) & 0xFF) == 0xFF)
    1a1c:	e0bffd17 	ldw	r2,-12(fp)
    1a20:	10800317 	ldw	r2,12(r2)
    1a24:	1005d2fa 	srai	r2,r2,11
    1a28:	10803fcc 	andi	r2,r2,255
    1a2c:	10803fd8 	cmpnei	r2,r2,255
    1a30:	1000031e 	bne	r2,zero,1a40 <finish_pass+0x320>
				emit_byte(0x00, cinfo);
    1a34:	0009883a 	mov	r4,zero
    1a38:	e17fff17 	ldw	r5,-4(fp)
    1a3c:	00016700 	call	1670 <emit_byte>
		}
	}
}
    1a40:	e037883a 	mov	sp,fp
    1a44:	dfc00117 	ldw	ra,4(sp)
    1a48:	df000017 	ldw	fp,0(sp)
    1a4c:	dec00204 	addi	sp,sp,8
    1a50:	f800283a 	ret

00001a54 <arith_encode>:
* derived from Markus Kuhn's JBIG implementation.
*/

LOCAL(void)
	arith_encode (j_compress_ptr cinfo, unsigned char *st, int val) 
{
    1a54:	defff604 	addi	sp,sp,-40
    1a58:	dfc00915 	stw	ra,36(sp)
    1a5c:	df000815 	stw	fp,32(sp)
    1a60:	dd000715 	stw	r20,28(sp)
    1a64:	dcc00615 	stw	r19,24(sp)
    1a68:	dc800515 	stw	r18,20(sp)
    1a6c:	dc400415 	stw	r17,16(sp)
    1a70:	dc000315 	stw	r16,12(sp)
    1a74:	df000304 	addi	fp,sp,12
    1a78:	e13ffd15 	stw	r4,-12(fp)
    1a7c:	e17ffe15 	stw	r5,-8(fp)
    1a80:	e1bfff15 	stw	r6,-4(fp)
	register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
    1a84:	e0bffd17 	ldw	r2,-12(fp)
    1a88:	14006417 	ldw	r16,400(r2)
	register int sv;

	/* Fetch values from our compact representation of Table D.2:
	* Qe values and probability estimation state machine
	*/
	sv = *st;
    1a8c:	e0bffe17 	ldw	r2,-8(fp)
    1a90:	10800003 	ldbu	r2,0(r2)
    1a94:	14803fcc 	andi	r18,r2,255
	qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
    1a98:	90801fcc 	andi	r2,r18,127
    1a9c:	00c00134 	movhi	r3,4
    1aa0:	18fb1a04 	addi	r3,r3,-5016
    1aa4:	1085883a 	add	r2,r2,r2
    1aa8:	1085883a 	add	r2,r2,r2
    1aac:	1885883a 	add	r2,r3,r2
    1ab0:	14400017 	ldw	r17,0(r2)
	nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
    1ab4:	8829883a 	mov	r20,r17
    1ab8:	8823d23a 	srai	r17,r17,8
	nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
    1abc:	8827883a 	mov	r19,r17
    1ac0:	8823d23a 	srai	r17,r17,8

	/* Encode & estimation procedures per sections D.1.4 & D.1.5 */
	e->a -= qe;
    1ac4:	80800417 	ldw	r2,16(r16)
    1ac8:	1445c83a 	sub	r2,r2,r17
    1acc:	80800415 	stw	r2,16(r16)
	if (val != (sv >> 7)) {
    1ad0:	9007d1fa 	srai	r3,r18,7
    1ad4:	e0bfff17 	ldw	r2,-4(fp)
    1ad8:	18801126 	beq	r3,r2,1b20 <arith_encode+0xcc>
		/* Encode the less probable symbol */
		if (e->a >= qe) {
    1adc:	80800417 	ldw	r2,16(r16)
    1ae0:	14400516 	blt	r2,r17,1af8 <arith_encode+0xa4>
			/* If the interval size (qe) for the less probable symbol (LPS)
			* is larger than the interval size for the MPS, then exchange
			* the two symbols for coding efficiency, otherwise code the LPS
			* as usual: */
			e->c += e->a;
    1ae4:	80c00317 	ldw	r3,12(r16)
    1ae8:	80800417 	ldw	r2,16(r16)
    1aec:	1885883a 	add	r2,r3,r2
    1af0:	80800315 	stw	r2,12(r16)
			e->a = qe;
    1af4:	84400415 	stw	r17,16(r16)
		}
		*st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
    1af8:	9007883a 	mov	r3,r18
    1afc:	00bfe004 	movi	r2,-128
    1b00:	1884703a 	and	r2,r3,r2
    1b04:	1007883a 	mov	r3,r2
    1b08:	a005883a 	mov	r2,r20
    1b0c:	1884f03a 	xor	r2,r3,r2
    1b10:	1007883a 	mov	r3,r2
    1b14:	e0bffe17 	ldw	r2,-8(fp)
    1b18:	10c00005 	stb	r3,0(r2)
    1b1c:	00001306 	br	1b6c <arith_encode+0x118>
	} else {
		/* Encode the more probable symbol */
		if (e->a >= 0x8000L)
    1b20:	80800417 	ldw	r2,16(r16)
    1b24:	00dfffc4 	movi	r3,32767
    1b28:	18807f16 	blt	r3,r2,1d28 <arith_encode+0x2d4>
			return;  /* A >= 0x8000 -> ready, no renormalization required */
		if (e->a < qe) {
    1b2c:	80800417 	ldw	r2,16(r16)
    1b30:	1440050e 	bge	r2,r17,1b48 <arith_encode+0xf4>
			/* If the interval size (qe) for the less probable symbol (LPS)
			* is larger than the interval size for the MPS, then exchange
			* the two symbols for coding efficiency: */
			e->c += e->a;
    1b34:	80c00317 	ldw	r3,12(r16)
    1b38:	80800417 	ldw	r2,16(r16)
    1b3c:	1885883a 	add	r2,r3,r2
    1b40:	80800315 	stw	r2,12(r16)
			e->a = qe;
    1b44:	84400415 	stw	r17,16(r16)
		}
		*st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    1b48:	9007883a 	mov	r3,r18
    1b4c:	00bfe004 	movi	r2,-128
    1b50:	1884703a 	and	r2,r3,r2
    1b54:	1007883a 	mov	r3,r2
    1b58:	9805883a 	mov	r2,r19
    1b5c:	1884f03a 	xor	r2,r3,r2
    1b60:	1007883a 	mov	r3,r2
    1b64:	e0bffe17 	ldw	r2,-8(fp)
    1b68:	10c00005 	stb	r3,0(r2)
	}

	/* Renormalization & data output per section D.1.6 */
	do {
		e->a <<= 1;
    1b6c:	80800417 	ldw	r2,16(r16)
    1b70:	1085883a 	add	r2,r2,r2
    1b74:	80800415 	stw	r2,16(r16)
		e->c <<= 1;
    1b78:	80800317 	ldw	r2,12(r16)
    1b7c:	1085883a 	add	r2,r2,r2
    1b80:	80800315 	stw	r2,12(r16)
		if (--e->ct == 0) {
    1b84:	80800717 	ldw	r2,28(r16)
    1b88:	10bfffc4 	addi	r2,r2,-1
    1b8c:	80800715 	stw	r2,28(r16)
    1b90:	80800717 	ldw	r2,28(r16)
    1b94:	1000601e 	bne	r2,zero,1d18 <arith_encode+0x2c4>
			/* Another byte is ready for output */
			temp = e->c >> 19;
    1b98:	80800317 	ldw	r2,12(r16)
    1b9c:	1023d4fa 	srai	r17,r2,19
			if (temp > 0xFF) {
    1ba0:	88804010 	cmplti	r2,r17,256
    1ba4:	10001f1e 	bne	r2,zero,1c24 <arith_encode+0x1d0>
				/* Handle overflow over all stacked 0xFF bytes */
				if (e->buffer >= 0) {
    1ba8:	80800817 	ldw	r2,32(r16)
    1bac:	10001516 	blt	r2,zero,1c04 <arith_encode+0x1b0>
					if (e->zc)
    1bb0:	80800617 	ldw	r2,24(r16)
    1bb4:	10000826 	beq	r2,zero,1bd8 <arith_encode+0x184>
						do emit_byte(0x00, cinfo);
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	e17ffd17 	ldw	r5,-12(fp)
    1bc0:	00016700 	call	1670 <emit_byte>
					while (--e->zc);
    1bc4:	80800617 	ldw	r2,24(r16)
    1bc8:	10bfffc4 	addi	r2,r2,-1
    1bcc:	80800615 	stw	r2,24(r16)
    1bd0:	80800617 	ldw	r2,24(r16)
    1bd4:	103ff81e 	bne	r2,zero,1bb8 <arith_encode+0x164>
					emit_byte(e->buffer + 1, cinfo);
    1bd8:	80800817 	ldw	r2,32(r16)
    1bdc:	10800044 	addi	r2,r2,1
    1be0:	1009883a 	mov	r4,r2
    1be4:	e17ffd17 	ldw	r5,-12(fp)
    1be8:	00016700 	call	1670 <emit_byte>
					if (e->buffer + 1 == 0xFF)
    1bec:	80800817 	ldw	r2,32(r16)
    1bf0:	10803f98 	cmpnei	r2,r2,254
    1bf4:	1000031e 	bne	r2,zero,1c04 <arith_encode+0x1b0>
						emit_byte(0x00, cinfo);
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	e17ffd17 	ldw	r5,-12(fp)
    1c00:	00016700 	call	1670 <emit_byte>
				}
				e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
    1c04:	80c00617 	ldw	r3,24(r16)
    1c08:	80800517 	ldw	r2,20(r16)
    1c0c:	1885883a 	add	r2,r3,r2
    1c10:	80800615 	stw	r2,24(r16)
				e->sc = 0;
    1c14:	80000515 	stw	zero,20(r16)
				/* Note: The 3 spacer bits in the C register guarantee
				* that the new buffer byte can't be 0xFF here
				* (see page 160 in the P&M JPEG book). */
				e->buffer = temp & 0xFF;  /* new output byte, might overflow later */
    1c18:	88803fcc 	andi	r2,r17,255
    1c1c:	80800815 	stw	r2,32(r16)
    1c20:	00003506 	br	1cf8 <arith_encode+0x2a4>
			} else if (temp == 0xFF) {
    1c24:	88803fd8 	cmpnei	r2,r17,255
    1c28:	1000041e 	bne	r2,zero,1c3c <arith_encode+0x1e8>
				++e->sc;  /* stack 0xFF byte (which might overflow later) */
    1c2c:	80800517 	ldw	r2,20(r16)
    1c30:	10800044 	addi	r2,r2,1
    1c34:	80800515 	stw	r2,20(r16)
    1c38:	00002f06 	br	1cf8 <arith_encode+0x2a4>
			} else {
				/* Output all stacked 0xFF bytes, they will not overflow any more */
				if (e->buffer == 0)
    1c3c:	80800817 	ldw	r2,32(r16)
    1c40:	1000041e 	bne	r2,zero,1c54 <arith_encode+0x200>
					++e->zc;
    1c44:	80800617 	ldw	r2,24(r16)
    1c48:	10800044 	addi	r2,r2,1
    1c4c:	80800615 	stw	r2,24(r16)
    1c50:	00001006 	br	1c94 <arith_encode+0x240>
				else if (e->buffer >= 0) {
    1c54:	80800817 	ldw	r2,32(r16)
    1c58:	10000e16 	blt	r2,zero,1c94 <arith_encode+0x240>
					if (e->zc)
    1c5c:	80800617 	ldw	r2,24(r16)
    1c60:	10000826 	beq	r2,zero,1c84 <arith_encode+0x230>
						do emit_byte(0x00, cinfo);
    1c64:	0009883a 	mov	r4,zero
    1c68:	e17ffd17 	ldw	r5,-12(fp)
    1c6c:	00016700 	call	1670 <emit_byte>
					while (--e->zc);
    1c70:	80800617 	ldw	r2,24(r16)
    1c74:	10bfffc4 	addi	r2,r2,-1
    1c78:	80800615 	stw	r2,24(r16)
    1c7c:	80800617 	ldw	r2,24(r16)
    1c80:	103ff81e 	bne	r2,zero,1c64 <arith_encode+0x210>
					emit_byte(e->buffer, cinfo);
    1c84:	80800817 	ldw	r2,32(r16)
    1c88:	1009883a 	mov	r4,r2
    1c8c:	e17ffd17 	ldw	r5,-12(fp)
    1c90:	00016700 	call	1670 <emit_byte>
				}
				if (e->sc) {
    1c94:	80800517 	ldw	r2,20(r16)
    1c98:	10001526 	beq	r2,zero,1cf0 <arith_encode+0x29c>
					if (e->zc)
    1c9c:	80800617 	ldw	r2,24(r16)
    1ca0:	10000826 	beq	r2,zero,1cc4 <arith_encode+0x270>
						do emit_byte(0x00, cinfo);
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	e17ffd17 	ldw	r5,-12(fp)
    1cac:	00016700 	call	1670 <emit_byte>
					while (--e->zc);
    1cb0:	80800617 	ldw	r2,24(r16)
    1cb4:	10bfffc4 	addi	r2,r2,-1
    1cb8:	80800615 	stw	r2,24(r16)
    1cbc:	80800617 	ldw	r2,24(r16)
    1cc0:	103ff81e 	bne	r2,zero,1ca4 <arith_encode+0x250>
					do {
						emit_byte(0xFF, cinfo);
    1cc4:	01003fc4 	movi	r4,255
    1cc8:	e17ffd17 	ldw	r5,-12(fp)
    1ccc:	00016700 	call	1670 <emit_byte>
						emit_byte(0x00, cinfo);
    1cd0:	0009883a 	mov	r4,zero
    1cd4:	e17ffd17 	ldw	r5,-12(fp)
    1cd8:	00016700 	call	1670 <emit_byte>
					} while (--e->sc);
    1cdc:	80800517 	ldw	r2,20(r16)
    1ce0:	10bfffc4 	addi	r2,r2,-1
    1ce4:	80800515 	stw	r2,20(r16)
    1ce8:	80800517 	ldw	r2,20(r16)
    1cec:	103ff51e 	bne	r2,zero,1cc4 <arith_encode+0x270>
				}
				e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
    1cf0:	88803fcc 	andi	r2,r17,255
    1cf4:	80800815 	stw	r2,32(r16)
			}
			e->c &= 0x7FFFFL;
    1cf8:	80c00317 	ldw	r3,12(r16)
    1cfc:	00800234 	movhi	r2,8
    1d00:	10bfffc4 	addi	r2,r2,-1
    1d04:	1884703a 	and	r2,r3,r2
    1d08:	80800315 	stw	r2,12(r16)
			e->ct += 8;
    1d0c:	80800717 	ldw	r2,28(r16)
    1d10:	10800204 	addi	r2,r2,8
    1d14:	80800715 	stw	r2,28(r16)
		}
	} while (e->a < 0x8000L);
    1d18:	80800417 	ldw	r2,16(r16)
    1d1c:	00dfffc4 	movi	r3,32767
    1d20:	18bf920e 	bge	r3,r2,1b6c <arith_encode+0x118>
    1d24:	00000106 	br	1d2c <arith_encode+0x2d8>
		}
		*st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
	} else {
		/* Encode the more probable symbol */
		if (e->a >= 0x8000L)
			return;  /* A >= 0x8000 -> ready, no renormalization required */
    1d28:	0001883a 	nop
			}
			e->c &= 0x7FFFFL;
			e->ct += 8;
		}
	} while (e->a < 0x8000L);
}
    1d2c:	e037883a 	mov	sp,fp
    1d30:	dfc00617 	ldw	ra,24(sp)
    1d34:	df000517 	ldw	fp,20(sp)
    1d38:	dd000417 	ldw	r20,16(sp)
    1d3c:	dcc00317 	ldw	r19,12(sp)
    1d40:	dc800217 	ldw	r18,8(sp)
    1d44:	dc400117 	ldw	r17,4(sp)
    1d48:	dc000017 	ldw	r16,0(sp)
    1d4c:	dec00704 	addi	sp,sp,28
    1d50:	f800283a 	ret

00001d54 <emit_restart>:
* Emit a restart marker & resynchronize predictions.
*/

LOCAL(void)
	emit_restart (j_compress_ptr cinfo, int restart_num)
{
    1d54:	defff904 	addi	sp,sp,-28
    1d58:	dfc00615 	stw	ra,24(sp)
    1d5c:	df000515 	stw	fp,20(sp)
    1d60:	df000504 	addi	fp,sp,20
    1d64:	e13ffe15 	stw	r4,-8(fp)
    1d68:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    1d6c:	e0bffe17 	ldw	r2,-8(fp)
    1d70:	10806417 	ldw	r2,400(r2)
    1d74:	e0bffc15 	stw	r2,-16(fp)
	int ci;
	jpeg_component_info * compptr;

	finish_pass(cinfo);
    1d78:	e13ffe17 	ldw	r4,-8(fp)
    1d7c:	00017200 	call	1720 <finish_pass>

	emit_byte(0xFF, cinfo);
    1d80:	01003fc4 	movi	r4,255
    1d84:	e17ffe17 	ldw	r5,-8(fp)
    1d88:	00016700 	call	1670 <emit_byte>
	emit_byte(JPEG_RST0 + restart_num, cinfo);
    1d8c:	e0bfff17 	ldw	r2,-4(fp)
    1d90:	10803404 	addi	r2,r2,208
    1d94:	1009883a 	mov	r4,r2
    1d98:	e17ffe17 	ldw	r5,-8(fp)
    1d9c:	00016700 	call	1670 <emit_byte>

	/* Re-initialize statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    1da0:	e03ffb15 	stw	zero,-20(fp)
    1da4:	00003a06 	br	1e90 <emit_restart+0x13c>
		compptr = cinfo->cur_comp_info[ci];
    1da8:	e0fffe17 	ldw	r3,-8(fp)
    1dac:	e0bffb17 	ldw	r2,-20(fp)
    1db0:	10801104 	addi	r2,r2,68
    1db4:	1085883a 	add	r2,r2,r2
    1db8:	1085883a 	add	r2,r2,r2
    1dbc:	1885883a 	add	r2,r3,r2
    1dc0:	10800017 	ldw	r2,0(r2)
    1dc4:	e0bffd15 	stw	r2,-12(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
    1dc8:	e0bffe17 	ldw	r2,-8(fp)
    1dcc:	10805517 	ldw	r2,340(r2)
    1dd0:	10001d1e 	bne	r2,zero,1e48 <emit_restart+0xf4>
    1dd4:	e0bffe17 	ldw	r2,-8(fp)
    1dd8:	10805717 	ldw	r2,348(r2)
    1ddc:	10001a1e 	bne	r2,zero,1e48 <emit_restart+0xf4>
			MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
    1de0:	e0bffd17 	ldw	r2,-12(fp)
    1de4:	10800517 	ldw	r2,20(r2)
    1de8:	e0fffc17 	ldw	r3,-16(fp)
    1dec:	108004c4 	addi	r2,r2,19
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	1085883a 	add	r2,r2,r2
    1df8:	1885883a 	add	r2,r3,r2
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	1009883a 	mov	r4,r2
    1e04:	000b883a 	mov	r5,zero
    1e08:	01801004 	movi	r6,64
    1e0c:	002ec2c0 	call	2ec2c <memset>
			/* Reset DC predictions to 0 */
			entropy->last_dc_val[ci] = 0;
    1e10:	e0fffc17 	ldw	r3,-16(fp)
    1e14:	e0bffb17 	ldw	r2,-20(fp)
    1e18:	10800244 	addi	r2,r2,9
    1e1c:	1085883a 	add	r2,r2,r2
    1e20:	1085883a 	add	r2,r2,r2
    1e24:	1885883a 	add	r2,r3,r2
    1e28:	10000015 	stw	zero,0(r2)
			entropy->dc_context[ci] = 0;
    1e2c:	e0fffc17 	ldw	r3,-16(fp)
    1e30:	e0bffb17 	ldw	r2,-20(fp)
    1e34:	10800344 	addi	r2,r2,13
    1e38:	1085883a 	add	r2,r2,r2
    1e3c:	1085883a 	add	r2,r2,r2
    1e40:	1885883a 	add	r2,r3,r2
    1e44:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
    1e48:	e0bffe17 	ldw	r2,-8(fp)
    1e4c:	10805617 	ldw	r2,344(r2)
    1e50:	10000c26 	beq	r2,zero,1e84 <emit_restart+0x130>
			MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	10800617 	ldw	r2,24(r2)
    1e5c:	e0fffc17 	ldw	r3,-16(fp)
    1e60:	108008c4 	addi	r2,r2,35
    1e64:	1085883a 	add	r2,r2,r2
    1e68:	1085883a 	add	r2,r2,r2
    1e6c:	1885883a 	add	r2,r3,r2
    1e70:	10800017 	ldw	r2,0(r2)
    1e74:	1009883a 	mov	r4,r2
    1e78:	000b883a 	mov	r5,zero
    1e7c:	01804004 	movi	r6,256
    1e80:	002ec2c0 	call	2ec2c <memset>

	emit_byte(0xFF, cinfo);
	emit_byte(JPEG_RST0 + restart_num, cinfo);

	/* Re-initialize statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    1e84:	e0bffb17 	ldw	r2,-20(fp)
    1e88:	10800044 	addi	r2,r2,1
    1e8c:	e0bffb15 	stw	r2,-20(fp)
    1e90:	e0bffe17 	ldw	r2,-8(fp)
    1e94:	10804317 	ldw	r2,268(r2)
    1e98:	e0fffb17 	ldw	r3,-20(fp)
    1e9c:	18bfc216 	blt	r3,r2,1da8 <emit_restart+0x54>
			MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
		}
	}

	/* Reset arithmetic encoding variables */
	entropy->c = 0;
    1ea0:	e0bffc17 	ldw	r2,-16(fp)
    1ea4:	10000315 	stw	zero,12(r2)
	entropy->a = 0x10000L;
    1ea8:	e0bffc17 	ldw	r2,-16(fp)
    1eac:	00c00074 	movhi	r3,1
    1eb0:	10c00415 	stw	r3,16(r2)
	entropy->sc = 0;
    1eb4:	e0bffc17 	ldw	r2,-16(fp)
    1eb8:	10000515 	stw	zero,20(r2)
	entropy->zc = 0;
    1ebc:	e0bffc17 	ldw	r2,-16(fp)
    1ec0:	10000615 	stw	zero,24(r2)
	entropy->ct = 11;
    1ec4:	e0bffc17 	ldw	r2,-16(fp)
    1ec8:	00c002c4 	movi	r3,11
    1ecc:	10c00715 	stw	r3,28(r2)
	entropy->buffer = -1;  /* empty */
    1ed0:	e0bffc17 	ldw	r2,-16(fp)
    1ed4:	00ffffc4 	movi	r3,-1
    1ed8:	10c00815 	stw	r3,32(r2)
}
    1edc:	e037883a 	mov	sp,fp
    1ee0:	dfc00117 	ldw	ra,4(sp)
    1ee4:	df000017 	ldw	fp,0(sp)
    1ee8:	dec00204 	addi	sp,sp,8
    1eec:	f800283a 	ret

00001ef0 <encode_mcu_DC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    1ef0:	defff304 	addi	sp,sp,-52
    1ef4:	dfc00c15 	stw	ra,48(sp)
    1ef8:	df000b15 	stw	fp,44(sp)
    1efc:	df000b04 	addi	fp,sp,44
    1f00:	e13ffe15 	stw	r4,-8(fp)
    1f04:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10806417 	ldw	r2,400(r2)
    1f10:	e0bffa15 	stw	r2,-24(fp)
	int blkn, ci, tbl;
	int v, v2, m;
	ISHIFT_TEMPS

		/* Emit restart marker if needed */
		if (cinfo->restart_interval) {
    1f14:	e0bffe17 	ldw	r2,-8(fp)
    1f18:	10803717 	ldw	r2,220(r2)
    1f1c:	10001b26 	beq	r2,zero,1f8c <encode_mcu_DC_first+0x9c>
			if (entropy->restarts_to_go == 0) {
    1f20:	e0bffa17 	ldw	r2,-24(fp)
    1f24:	10801117 	ldw	r2,68(r2)
    1f28:	1000131e 	bne	r2,zero,1f78 <encode_mcu_DC_first+0x88>
				emit_restart(cinfo, entropy->next_restart_num);
    1f2c:	e0bffa17 	ldw	r2,-24(fp)
    1f30:	10801217 	ldw	r2,72(r2)
    1f34:	e13ffe17 	ldw	r4,-8(fp)
    1f38:	100b883a 	mov	r5,r2
    1f3c:	0001d540 	call	1d54 <emit_restart>
				entropy->restarts_to_go = cinfo->restart_interval;
    1f40:	e0bffe17 	ldw	r2,-8(fp)
    1f44:	10c03717 	ldw	r3,220(r2)
    1f48:	e0bffa17 	ldw	r2,-24(fp)
    1f4c:	10c01115 	stw	r3,68(r2)
				entropy->next_restart_num++;
    1f50:	e0bffa17 	ldw	r2,-24(fp)
    1f54:	10801217 	ldw	r2,72(r2)
    1f58:	10c00044 	addi	r3,r2,1
    1f5c:	e0bffa17 	ldw	r2,-24(fp)
    1f60:	10c01215 	stw	r3,72(r2)
				entropy->next_restart_num &= 7;
    1f64:	e0bffa17 	ldw	r2,-24(fp)
    1f68:	10801217 	ldw	r2,72(r2)
    1f6c:	10c001cc 	andi	r3,r2,7
    1f70:	e0bffa17 	ldw	r2,-24(fp)
    1f74:	10c01215 	stw	r3,72(r2)
			}
			entropy->restarts_to_go--;
    1f78:	e0bffa17 	ldw	r2,-24(fp)
    1f7c:	10801117 	ldw	r2,68(r2)
    1f80:	10ffffc4 	addi	r3,r2,-1
    1f84:	e0bffa17 	ldw	r2,-24(fp)
    1f88:	10c01115 	stw	r3,68(r2)
		}

		/* Encode the MCU data blocks */
		for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    1f8c:	e03ff615 	stw	zero,-40(fp)
    1f90:	0000ea06 	br	233c <encode_mcu_DC_first+0x44c>
			block = MCU_data[blkn];
    1f94:	e0bff617 	ldw	r2,-40(fp)
    1f98:	1085883a 	add	r2,r2,r2
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	e0ffff17 	ldw	r3,-4(fp)
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	e0bffb15 	stw	r2,-20(fp)
			ci = cinfo->MCU_membership[blkn];
    1fb0:	e0fffe17 	ldw	r3,-8(fp)
    1fb4:	e0bff617 	ldw	r2,-40(fp)
    1fb8:	108012c4 	addi	r2,r2,75
    1fbc:	1085883a 	add	r2,r2,r2
    1fc0:	1085883a 	add	r2,r2,r2
    1fc4:	1885883a 	add	r2,r3,r2
    1fc8:	10800017 	ldw	r2,0(r2)
    1fcc:	e0bffc15 	stw	r2,-16(fp)
			tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
    1fd0:	e0fffe17 	ldw	r3,-8(fp)
    1fd4:	e0bffc17 	ldw	r2,-16(fp)
    1fd8:	10801104 	addi	r2,r2,68
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1885883a 	add	r2,r3,r2
    1fe8:	10800017 	ldw	r2,0(r2)
    1fec:	10800517 	ldw	r2,20(r2)
    1ff0:	e0bffd15 	stw	r2,-12(fp)

			/* Compute the DC value after the required point transform by Al.
			* This is simply an arithmetic right shift.
			*/
			m = IRIGHT_SHIFT((int) ((*block)[0]), cinfo->Al);
    1ff4:	e0bffb17 	ldw	r2,-20(fp)
    1ff8:	1080000b 	ldhu	r2,0(r2)
    1ffc:	10ffffcc 	andi	r3,r2,65535
    2000:	18e0001c 	xori	r3,r3,32768
    2004:	18e00004 	addi	r3,r3,-32768
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	10805817 	ldw	r2,352(r2)
    2010:	1885d83a 	sra	r2,r3,r2
    2014:	e0bff915 	stw	r2,-28(fp)

			/* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

			/* Table F.4: Point to statistics bin S0 for DC coefficient coding */
			st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
    2018:	e0fffa17 	ldw	r3,-24(fp)
    201c:	e0bffd17 	ldw	r2,-12(fp)
    2020:	108004c4 	addi	r2,r2,19
    2024:	1085883a 	add	r2,r2,r2
    2028:	1085883a 	add	r2,r2,r2
    202c:	1885883a 	add	r2,r3,r2
    2030:	10c00017 	ldw	r3,0(r2)
    2034:	e13ffa17 	ldw	r4,-24(fp)
    2038:	e0bffc17 	ldw	r2,-16(fp)
    203c:	10800344 	addi	r2,r2,13
    2040:	1085883a 	add	r2,r2,r2
    2044:	1085883a 	add	r2,r2,r2
    2048:	2085883a 	add	r2,r4,r2
    204c:	10800017 	ldw	r2,0(r2)
    2050:	1885883a 	add	r2,r3,r2
    2054:	e0bff515 	stw	r2,-44(fp)

			/* Figure F.4: Encode_DC_DIFF */
			if ((v = m - entropy->last_dc_val[ci]) == 0) {
    2058:	e0fffa17 	ldw	r3,-24(fp)
    205c:	e0bffc17 	ldw	r2,-16(fp)
    2060:	10800244 	addi	r2,r2,9
    2064:	1085883a 	add	r2,r2,r2
    2068:	1085883a 	add	r2,r2,r2
    206c:	1885883a 	add	r2,r3,r2
    2070:	10800017 	ldw	r2,0(r2)
    2074:	e0fff917 	ldw	r3,-28(fp)
    2078:	1885c83a 	sub	r2,r3,r2
    207c:	e0bff715 	stw	r2,-36(fp)
    2080:	e0bff717 	ldw	r2,-36(fp)
    2084:	10000c1e 	bne	r2,zero,20b8 <encode_mcu_DC_first+0x1c8>
				arith_encode(cinfo, st, 0);
    2088:	e13ffe17 	ldw	r4,-8(fp)
    208c:	e17ff517 	ldw	r5,-44(fp)
    2090:	000d883a 	mov	r6,zero
    2094:	0001a540 	call	1a54 <arith_encode>
				entropy->dc_context[ci] = 0;	/* zero diff category */
    2098:	e0fffa17 	ldw	r3,-24(fp)
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	10800344 	addi	r2,r2,13
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	1085883a 	add	r2,r2,r2
    20ac:	1885883a 	add	r2,r3,r2
    20b0:	10000015 	stw	zero,0(r2)
    20b4:	00009e06 	br	2330 <encode_mcu_DC_first+0x440>
			} else {
				entropy->last_dc_val[ci] = m;
    20b8:	e0fffa17 	ldw	r3,-24(fp)
    20bc:	e0bffc17 	ldw	r2,-16(fp)
    20c0:	10800244 	addi	r2,r2,9
    20c4:	1085883a 	add	r2,r2,r2
    20c8:	1085883a 	add	r2,r2,r2
    20cc:	1885883a 	add	r2,r3,r2
    20d0:	e0fff917 	ldw	r3,-28(fp)
    20d4:	10c00015 	stw	r3,0(r2)
				arith_encode(cinfo, st, 1);
    20d8:	e13ffe17 	ldw	r4,-8(fp)
    20dc:	e17ff517 	ldw	r5,-44(fp)
    20e0:	01800044 	movi	r6,1
    20e4:	0001a540 	call	1a54 <arith_encode>
				/* Figure F.6: Encoding nonzero value v */
				/* Figure F.7: Encoding the sign of v */
				if (v > 0) {
    20e8:	e0bff717 	ldw	r2,-36(fp)
    20ec:	0080120e 	bge	zero,r2,2138 <encode_mcu_DC_first+0x248>
					arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
    20f0:	e0bff517 	ldw	r2,-44(fp)
    20f4:	10800044 	addi	r2,r2,1
    20f8:	e13ffe17 	ldw	r4,-8(fp)
    20fc:	100b883a 	mov	r5,r2
    2100:	000d883a 	mov	r6,zero
    2104:	0001a540 	call	1a54 <arith_encode>
					st += 2;			/* Table F.4: SP = S0 + 2 */
    2108:	e0bff517 	ldw	r2,-44(fp)
    210c:	10800084 	addi	r2,r2,2
    2110:	e0bff515 	stw	r2,-44(fp)
					entropy->dc_context[ci] = 4;	/* small positive diff category */
    2114:	e0fffa17 	ldw	r3,-24(fp)
    2118:	e0bffc17 	ldw	r2,-16(fp)
    211c:	10800344 	addi	r2,r2,13
    2120:	1085883a 	add	r2,r2,r2
    2124:	1085883a 	add	r2,r2,r2
    2128:	1885883a 	add	r2,r3,r2
    212c:	00c00104 	movi	r3,4
    2130:	10c00015 	stw	r3,0(r2)
    2134:	00001406 	br	2188 <encode_mcu_DC_first+0x298>
				} else {
					v = -v;
    2138:	e0bff717 	ldw	r2,-36(fp)
    213c:	0085c83a 	sub	r2,zero,r2
    2140:	e0bff715 	stw	r2,-36(fp)
					arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
    2144:	e0bff517 	ldw	r2,-44(fp)
    2148:	10800044 	addi	r2,r2,1
    214c:	e13ffe17 	ldw	r4,-8(fp)
    2150:	100b883a 	mov	r5,r2
    2154:	01800044 	movi	r6,1
    2158:	0001a540 	call	1a54 <arith_encode>
					st += 3;			/* Table F.4: SN = S0 + 3 */
    215c:	e0bff517 	ldw	r2,-44(fp)
    2160:	108000c4 	addi	r2,r2,3
    2164:	e0bff515 	stw	r2,-44(fp)
					entropy->dc_context[ci] = 8;	/* small negative diff category */
    2168:	e0fffa17 	ldw	r3,-24(fp)
    216c:	e0bffc17 	ldw	r2,-16(fp)
    2170:	10800344 	addi	r2,r2,13
    2174:	1085883a 	add	r2,r2,r2
    2178:	1085883a 	add	r2,r2,r2
    217c:	1885883a 	add	r2,r3,r2
    2180:	00c00204 	movi	r3,8
    2184:	10c00015 	stw	r3,0(r2)
				}
				/* Figure F.8: Encoding the magnitude category of v */
				m = 0;
    2188:	e03ff915 	stw	zero,-28(fp)
				if (v -= 1) {
    218c:	e0bff717 	ldw	r2,-36(fp)
    2190:	10bfffc4 	addi	r2,r2,-1
    2194:	e0bff715 	stw	r2,-36(fp)
    2198:	e0bff717 	ldw	r2,-36(fp)
    219c:	10002126 	beq	r2,zero,2224 <encode_mcu_DC_first+0x334>
					arith_encode(cinfo, st, 1);
    21a0:	e13ffe17 	ldw	r4,-8(fp)
    21a4:	e17ff517 	ldw	r5,-44(fp)
    21a8:	01800044 	movi	r6,1
    21ac:	0001a540 	call	1a54 <arith_encode>
					m = 1;
    21b0:	00800044 	movi	r2,1
    21b4:	e0bff915 	stw	r2,-28(fp)
					v2 = v;
    21b8:	e0bff717 	ldw	r2,-36(fp)
    21bc:	e0bff815 	stw	r2,-32(fp)
					st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
    21c0:	e0fffa17 	ldw	r3,-24(fp)
    21c4:	e0bffd17 	ldw	r2,-12(fp)
    21c8:	108004c4 	addi	r2,r2,19
    21cc:	1085883a 	add	r2,r2,r2
    21d0:	1085883a 	add	r2,r2,r2
    21d4:	1885883a 	add	r2,r3,r2
    21d8:	10800017 	ldw	r2,0(r2)
    21dc:	10800504 	addi	r2,r2,20
    21e0:	e0bff515 	stw	r2,-44(fp)
					while (v2 >>= 1) {
    21e4:	00000a06 	br	2210 <encode_mcu_DC_first+0x320>
						arith_encode(cinfo, st, 1);
    21e8:	e13ffe17 	ldw	r4,-8(fp)
    21ec:	e17ff517 	ldw	r5,-44(fp)
    21f0:	01800044 	movi	r6,1
    21f4:	0001a540 	call	1a54 <arith_encode>
						m <<= 1;
    21f8:	e0bff917 	ldw	r2,-28(fp)
    21fc:	1085883a 	add	r2,r2,r2
    2200:	e0bff915 	stw	r2,-28(fp)
						st += 1;
    2204:	e0bff517 	ldw	r2,-44(fp)
    2208:	10800044 	addi	r2,r2,1
    220c:	e0bff515 	stw	r2,-44(fp)
				if (v -= 1) {
					arith_encode(cinfo, st, 1);
					m = 1;
					v2 = v;
					st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
					while (v2 >>= 1) {
    2210:	e0bff817 	ldw	r2,-32(fp)
    2214:	1005d07a 	srai	r2,r2,1
    2218:	e0bff815 	stw	r2,-32(fp)
    221c:	e0bff817 	ldw	r2,-32(fp)
    2220:	103ff11e 	bne	r2,zero,21e8 <encode_mcu_DC_first+0x2f8>
						arith_encode(cinfo, st, 1);
						m <<= 1;
						st += 1;
					}
				}
				arith_encode(cinfo, st, 0);
    2224:	e13ffe17 	ldw	r4,-8(fp)
    2228:	e17ff517 	ldw	r5,-44(fp)
    222c:	000d883a 	mov	r6,zero
    2230:	0001a540 	call	1a54 <arith_encode>
				/* Section F.1.4.4.1.2: Establish dc_context conditioning category */
				if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
    2234:	e0fffe17 	ldw	r3,-8(fp)
    2238:	e0bffd17 	ldw	r2,-12(fp)
    223c:	1885883a 	add	r2,r3,r2
    2240:	10802504 	addi	r2,r2,148
    2244:	10800003 	ldbu	r2,0(r2)
    2248:	10803fcc 	andi	r2,r2,255
    224c:	00c00044 	movi	r3,1
    2250:	1884983a 	sll	r2,r3,r2
    2254:	1005d07a 	srai	r2,r2,1
    2258:	e0fff917 	ldw	r3,-28(fp)
    225c:	1880080e 	bge	r3,r2,2280 <encode_mcu_DC_first+0x390>
					entropy->dc_context[ci] = 0;	/* zero diff category */
    2260:	e0fffa17 	ldw	r3,-24(fp)
    2264:	e0bffc17 	ldw	r2,-16(fp)
    2268:	10800344 	addi	r2,r2,13
    226c:	1085883a 	add	r2,r2,r2
    2270:	1085883a 	add	r2,r2,r2
    2274:	1885883a 	add	r2,r3,r2
    2278:	10000015 	stw	zero,0(r2)
    227c:	00001a06 	br	22e8 <encode_mcu_DC_first+0x3f8>
				else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
    2280:	e0fffe17 	ldw	r3,-8(fp)
    2284:	e0bffd17 	ldw	r2,-12(fp)
    2288:	1885883a 	add	r2,r3,r2
    228c:	10802904 	addi	r2,r2,164
    2290:	10800003 	ldbu	r2,0(r2)
    2294:	10803fcc 	andi	r2,r2,255
    2298:	00c00044 	movi	r3,1
    229c:	1884983a 	sll	r2,r3,r2
    22a0:	1007d07a 	srai	r3,r2,1
    22a4:	e0bff917 	ldw	r2,-28(fp)
    22a8:	18800f0e 	bge	r3,r2,22e8 <encode_mcu_DC_first+0x3f8>
					entropy->dc_context[ci] += 8;	/* large diff category */
    22ac:	e0fffa17 	ldw	r3,-24(fp)
    22b0:	e0bffc17 	ldw	r2,-16(fp)
    22b4:	10800344 	addi	r2,r2,13
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1085883a 	add	r2,r2,r2
    22c0:	1885883a 	add	r2,r3,r2
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10c00204 	addi	r3,r2,8
    22cc:	e13ffa17 	ldw	r4,-24(fp)
    22d0:	e0bffc17 	ldw	r2,-16(fp)
    22d4:	10800344 	addi	r2,r2,13
    22d8:	1085883a 	add	r2,r2,r2
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	2085883a 	add	r2,r4,r2
    22e4:	10c00015 	stw	r3,0(r2)
				/* Figure F.9: Encoding the magnitude bit pattern of v */
				st += 14;
    22e8:	e0bff517 	ldw	r2,-44(fp)
    22ec:	10800384 	addi	r2,r2,14
    22f0:	e0bff515 	stw	r2,-44(fp)
				while (m >>= 1)
    22f4:	00000906 	br	231c <encode_mcu_DC_first+0x42c>
					arith_encode(cinfo, st, (m & v) ? 1 : 0);
    22f8:	e0fff917 	ldw	r3,-28(fp)
    22fc:	e0bff717 	ldw	r2,-36(fp)
    2300:	1884703a 	and	r2,r3,r2
    2304:	1004c03a 	cmpne	r2,r2,zero
    2308:	10803fcc 	andi	r2,r2,255
    230c:	e13ffe17 	ldw	r4,-8(fp)
    2310:	e17ff517 	ldw	r5,-44(fp)
    2314:	100d883a 	mov	r6,r2
    2318:	0001a540 	call	1a54 <arith_encode>
					entropy->dc_context[ci] = 0;	/* zero diff category */
				else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
					entropy->dc_context[ci] += 8;	/* large diff category */
				/* Figure F.9: Encoding the magnitude bit pattern of v */
				st += 14;
				while (m >>= 1)
    231c:	e0bff917 	ldw	r2,-28(fp)
    2320:	1005d07a 	srai	r2,r2,1
    2324:	e0bff915 	stw	r2,-28(fp)
    2328:	e0bff917 	ldw	r2,-28(fp)
    232c:	103ff21e 	bne	r2,zero,22f8 <encode_mcu_DC_first+0x408>
			}
			entropy->restarts_to_go--;
		}

		/* Encode the MCU data blocks */
		for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    2330:	e0bff617 	ldw	r2,-40(fp)
    2334:	10800044 	addi	r2,r2,1
    2338:	e0bff615 	stw	r2,-40(fp)
    233c:	e0bffe17 	ldw	r2,-8(fp)
    2340:	10804a17 	ldw	r2,296(r2)
    2344:	e0fff617 	ldw	r3,-40(fp)
    2348:	18bf1216 	blt	r3,r2,1f94 <encode_mcu_DC_first+0xa4>
				while (m >>= 1)
					arith_encode(cinfo, st, (m & v) ? 1 : 0);
			}
		}

		return TRUE;
    234c:	00800044 	movi	r2,1
}
    2350:	e037883a 	mov	sp,fp
    2354:	dfc00117 	ldw	ra,4(sp)
    2358:	df000017 	ldw	fp,0(sp)
    235c:	dec00204 	addi	sp,sp,8
    2360:	f800283a 	ret

00002364 <encode_mcu_AC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    2364:	defff204 	addi	sp,sp,-56
    2368:	dfc00d15 	stw	ra,52(sp)
    236c:	df000c15 	stw	fp,48(sp)
    2370:	df000c04 	addi	fp,sp,48
    2374:	e13ffe15 	stw	r4,-8(fp)
    2378:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    237c:	e0bffe17 	ldw	r2,-8(fp)
    2380:	10806417 	ldw	r2,400(r2)
    2384:	e0bffa15 	stw	r2,-24(fp)
	int tbl, k, ke;
	int v, v2, m;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
    2388:	e0bffe17 	ldw	r2,-8(fp)
    238c:	10803717 	ldw	r2,220(r2)
    2390:	10001b26 	beq	r2,zero,2400 <encode_mcu_AC_first+0x9c>
		if (entropy->restarts_to_go == 0) {
    2394:	e0bffa17 	ldw	r2,-24(fp)
    2398:	10801117 	ldw	r2,68(r2)
    239c:	1000131e 	bne	r2,zero,23ec <encode_mcu_AC_first+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
    23a0:	e0bffa17 	ldw	r2,-24(fp)
    23a4:	10801217 	ldw	r2,72(r2)
    23a8:	e13ffe17 	ldw	r4,-8(fp)
    23ac:	100b883a 	mov	r5,r2
    23b0:	0001d540 	call	1d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
    23b4:	e0bffe17 	ldw	r2,-8(fp)
    23b8:	10c03717 	ldw	r3,220(r2)
    23bc:	e0bffa17 	ldw	r2,-24(fp)
    23c0:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
    23c4:	e0bffa17 	ldw	r2,-24(fp)
    23c8:	10801217 	ldw	r2,72(r2)
    23cc:	10c00044 	addi	r3,r2,1
    23d0:	e0bffa17 	ldw	r2,-24(fp)
    23d4:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
    23d8:	e0bffa17 	ldw	r2,-24(fp)
    23dc:	10801217 	ldw	r2,72(r2)
    23e0:	10c001cc 	andi	r3,r2,7
    23e4:	e0bffa17 	ldw	r2,-24(fp)
    23e8:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
    23ec:	e0bffa17 	ldw	r2,-24(fp)
    23f0:	10801117 	ldw	r2,68(r2)
    23f4:	10ffffc4 	addi	r3,r2,-1
    23f8:	e0bffa17 	ldw	r2,-24(fp)
    23fc:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
    2400:	e0bffe17 	ldw	r2,-8(fp)
    2404:	10805a17 	ldw	r2,360(r2)
    2408:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
    240c:	e0bfff17 	ldw	r2,-4(fp)
    2410:	10800017 	ldw	r2,0(r2)
    2414:	e0bffc15 	stw	r2,-16(fp)
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
    2418:	e0bffe17 	ldw	r2,-8(fp)
    241c:	10804417 	ldw	r2,272(r2)
    2420:	10800617 	ldw	r2,24(r2)
    2424:	e0bffd15 	stw	r2,-12(fp)

	/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
    2428:	e0bffe17 	ldw	r2,-8(fp)
    242c:	10805617 	ldw	r2,344(r2)
    2430:	e0bff615 	stw	r2,-40(fp)
    2434:	00002506 	br	24cc <encode_mcu_AC_first+0x168>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
    2438:	e0bff617 	ldw	r2,-40(fp)
    243c:	1085883a 	add	r2,r2,r2
    2440:	1085883a 	add	r2,r2,r2
    2444:	e0fffb17 	ldw	r3,-20(fp)
    2448:	1885883a 	add	r2,r3,r2
    244c:	10800017 	ldw	r2,0(r2)
    2450:	e0fffc17 	ldw	r3,-16(fp)
    2454:	1085883a 	add	r2,r2,r2
    2458:	1885883a 	add	r2,r3,r2
    245c:	1080000b 	ldhu	r2,0(r2)
    2460:	10bfffcc 	andi	r2,r2,65535
    2464:	10a0001c 	xori	r2,r2,32768
    2468:	10a00004 	addi	r2,r2,-32768
    246c:	e0bff715 	stw	r2,-36(fp)
    2470:	e0bff717 	ldw	r2,-36(fp)
    2474:	10000816 	blt	r2,zero,2498 <encode_mcu_AC_first+0x134>
			if (v >>= cinfo->Al) break;
    2478:	e0bffe17 	ldw	r2,-8(fp)
    247c:	10805817 	ldw	r2,352(r2)
    2480:	e0fff717 	ldw	r3,-36(fp)
    2484:	1885d83a 	sra	r2,r3,r2
    2488:	e0bff715 	stw	r2,-36(fp)
    248c:	e0bff717 	ldw	r2,-36(fp)
    2490:	10000b26 	beq	r2,zero,24c0 <encode_mcu_AC_first+0x15c>
    2494:	00001106 	br	24dc <encode_mcu_AC_first+0x178>
		} else {
			v = -v;
    2498:	e0bff717 	ldw	r2,-36(fp)
    249c:	0085c83a 	sub	r2,zero,r2
    24a0:	e0bff715 	stw	r2,-36(fp)
			if (v >>= cinfo->Al) break;
    24a4:	e0bffe17 	ldw	r2,-8(fp)
    24a8:	10805817 	ldw	r2,352(r2)
    24ac:	e0fff717 	ldw	r3,-36(fp)
    24b0:	1885d83a 	sra	r2,r3,r2
    24b4:	e0bff715 	stw	r2,-36(fp)
    24b8:	e0bff717 	ldw	r2,-36(fp)
    24bc:	1000061e 	bne	r2,zero,24d8 <encode_mcu_AC_first+0x174>
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;

	/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
    24c0:	e0bff617 	ldw	r2,-40(fp)
    24c4:	10bfffc4 	addi	r2,r2,-1
    24c8:	e0bff615 	stw	r2,-40(fp)
    24cc:	e0bff617 	ldw	r2,-40(fp)
    24d0:	00bfd916 	blt	zero,r2,2438 <encode_mcu_AC_first+0xd4>
    24d4:	00000106 	br	24dc <encode_mcu_AC_first+0x178>
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
			if (v >>= cinfo->Al) break;
		} else {
			v = -v;
			if (v >>= cinfo->Al) break;
    24d8:	0001883a 	nop
		}

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = cinfo->Ss; k <= ke; k++) {
    24dc:	e0bffe17 	ldw	r2,-8(fp)
    24e0:	10805517 	ldw	r2,340(r2)
    24e4:	e0bff515 	stw	r2,-44(fp)
    24e8:	0000b406 	br	27bc <encode_mcu_AC_first+0x458>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
    24ec:	e0fffa17 	ldw	r3,-24(fp)
    24f0:	e0bffd17 	ldw	r2,-12(fp)
    24f4:	108008c4 	addi	r2,r2,35
    24f8:	1085883a 	add	r2,r2,r2
    24fc:	1085883a 	add	r2,r2,r2
    2500:	1885883a 	add	r2,r3,r2
    2504:	11000017 	ldw	r4,0(r2)
    2508:	e0bff517 	ldw	r2,-44(fp)
    250c:	10ffffc4 	addi	r3,r2,-1
    2510:	1805883a 	mov	r2,r3
    2514:	1085883a 	add	r2,r2,r2
    2518:	10c5883a 	add	r2,r2,r3
    251c:	2085883a 	add	r2,r4,r2
    2520:	e0bff415 	stw	r2,-48(fp)
			arith_encode(cinfo, st, 0);		/* EOB decision */
    2524:	e13ffe17 	ldw	r4,-8(fp)
    2528:	e17ff417 	ldw	r5,-48(fp)
    252c:	000d883a 	mov	r6,zero
    2530:	0001a540 	call	1a54 <arith_encode>
			for (;;) {
				if ((v = (*block)[natural_order[k]]) >= 0) {
    2534:	e0bff517 	ldw	r2,-44(fp)
    2538:	1085883a 	add	r2,r2,r2
    253c:	1085883a 	add	r2,r2,r2
    2540:	e0fffb17 	ldw	r3,-20(fp)
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	e0fffc17 	ldw	r3,-16(fp)
    2550:	1085883a 	add	r2,r2,r2
    2554:	1885883a 	add	r2,r3,r2
    2558:	1080000b 	ldhu	r2,0(r2)
    255c:	10bfffcc 	andi	r2,r2,65535
    2560:	10a0001c 	xori	r2,r2,32768
    2564:	10a00004 	addi	r2,r2,-32768
    2568:	e0bff715 	stw	r2,-36(fp)
    256c:	e0bff717 	ldw	r2,-36(fp)
    2570:	10001416 	blt	r2,zero,25c4 <encode_mcu_AC_first+0x260>
					if (v >>= cinfo->Al) {
    2574:	e0bffe17 	ldw	r2,-8(fp)
    2578:	10805817 	ldw	r2,352(r2)
    257c:	e0fff717 	ldw	r3,-36(fp)
    2580:	1885d83a 	sra	r2,r3,r2
    2584:	e0bff715 	stw	r2,-36(fp)
    2588:	e0bff717 	ldw	r2,-36(fp)
    258c:	10002426 	beq	r2,zero,2620 <encode_mcu_AC_first+0x2bc>
						arith_encode(cinfo, st + 1, 1);
    2590:	e0bff417 	ldw	r2,-48(fp)
    2594:	10800044 	addi	r2,r2,1
    2598:	e13ffe17 	ldw	r4,-8(fp)
    259c:	100b883a 	mov	r5,r2
    25a0:	01800044 	movi	r6,1
    25a4:	0001a540 	call	1a54 <arith_encode>
						arith_encode(cinfo, entropy->fixed_bin, 0);
    25a8:	e0bffa17 	ldw	r2,-24(fp)
    25ac:	10803304 	addi	r2,r2,204
    25b0:	e13ffe17 	ldw	r4,-8(fp)
    25b4:	100b883a 	mov	r5,r2
    25b8:	000d883a 	mov	r6,zero
    25bc:	0001a540 	call	1a54 <arith_encode>
						break;
    25c0:	00002406 	br	2654 <encode_mcu_AC_first+0x2f0>
					}
				} else {
					v = -v;
    25c4:	e0bff717 	ldw	r2,-36(fp)
    25c8:	0085c83a 	sub	r2,zero,r2
    25cc:	e0bff715 	stw	r2,-36(fp)
					if (v >>= cinfo->Al) {
    25d0:	e0bffe17 	ldw	r2,-8(fp)
    25d4:	10805817 	ldw	r2,352(r2)
    25d8:	e0fff717 	ldw	r3,-36(fp)
    25dc:	1885d83a 	sra	r2,r3,r2
    25e0:	e0bff715 	stw	r2,-36(fp)
    25e4:	e0bff717 	ldw	r2,-36(fp)
    25e8:	10000d26 	beq	r2,zero,2620 <encode_mcu_AC_first+0x2bc>
						arith_encode(cinfo, st + 1, 1);
    25ec:	e0bff417 	ldw	r2,-48(fp)
    25f0:	10800044 	addi	r2,r2,1
    25f4:	e13ffe17 	ldw	r4,-8(fp)
    25f8:	100b883a 	mov	r5,r2
    25fc:	01800044 	movi	r6,1
    2600:	0001a540 	call	1a54 <arith_encode>
						arith_encode(cinfo, entropy->fixed_bin, 1);
    2604:	e0bffa17 	ldw	r2,-24(fp)
    2608:	10803304 	addi	r2,r2,204
    260c:	e13ffe17 	ldw	r4,-8(fp)
    2610:	100b883a 	mov	r5,r2
    2614:	01800044 	movi	r6,1
    2618:	0001a540 	call	1a54 <arith_encode>
						break;
    261c:	00000d06 	br	2654 <encode_mcu_AC_first+0x2f0>
					}
				}
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
    2620:	e0bff417 	ldw	r2,-48(fp)
    2624:	10800044 	addi	r2,r2,1
    2628:	e13ffe17 	ldw	r4,-8(fp)
    262c:	100b883a 	mov	r5,r2
    2630:	000d883a 	mov	r6,zero
    2634:	0001a540 	call	1a54 <arith_encode>
    2638:	e0bff417 	ldw	r2,-48(fp)
    263c:	108000c4 	addi	r2,r2,3
    2640:	e0bff415 	stw	r2,-48(fp)
    2644:	e0bff517 	ldw	r2,-44(fp)
    2648:	10800044 	addi	r2,r2,1
    264c:	e0bff515 	stw	r2,-44(fp)
			}
    2650:	003fb806 	br	2534 <encode_mcu_AC_first+0x1d0>
			st += 2;
    2654:	e0bff417 	ldw	r2,-48(fp)
    2658:	10800084 	addi	r2,r2,2
    265c:	e0bff415 	stw	r2,-48(fp)
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
    2660:	e03ff915 	stw	zero,-28(fp)
			if (v -= 1) {
    2664:	e0bff717 	ldw	r2,-36(fp)
    2668:	10bfffc4 	addi	r2,r2,-1
    266c:	e0bff715 	stw	r2,-36(fp)
    2670:	e0bff717 	ldw	r2,-36(fp)
    2674:	10003826 	beq	r2,zero,2758 <encode_mcu_AC_first+0x3f4>
				arith_encode(cinfo, st, 1);
    2678:	e13ffe17 	ldw	r4,-8(fp)
    267c:	e17ff417 	ldw	r5,-48(fp)
    2680:	01800044 	movi	r6,1
    2684:	0001a540 	call	1a54 <arith_encode>
				m = 1;
    2688:	00800044 	movi	r2,1
    268c:	e0bff915 	stw	r2,-28(fp)
				v2 = v;
    2690:	e0bff717 	ldw	r2,-36(fp)
    2694:	e0bff815 	stw	r2,-32(fp)
				if (v2 >>= 1) {
    2698:	e0bff817 	ldw	r2,-32(fp)
    269c:	1005d07a 	srai	r2,r2,1
    26a0:	e0bff815 	stw	r2,-32(fp)
    26a4:	e0bff817 	ldw	r2,-32(fp)
    26a8:	10002b26 	beq	r2,zero,2758 <encode_mcu_AC_first+0x3f4>
					arith_encode(cinfo, st, 1);
    26ac:	e13ffe17 	ldw	r4,-8(fp)
    26b0:	e17ff417 	ldw	r5,-48(fp)
    26b4:	01800044 	movi	r6,1
    26b8:	0001a540 	call	1a54 <arith_encode>
					m <<= 1;
    26bc:	e0bff917 	ldw	r2,-28(fp)
    26c0:	1085883a 	add	r2,r2,r2
    26c4:	e0bff915 	stw	r2,-28(fp)
					st = entropy->ac_stats[tbl] +
    26c8:	e0fffa17 	ldw	r3,-24(fp)
    26cc:	e0bffd17 	ldw	r2,-12(fp)
    26d0:	108008c4 	addi	r2,r2,35
    26d4:	1085883a 	add	r2,r2,r2
    26d8:	1085883a 	add	r2,r2,r2
    26dc:	1885883a 	add	r2,r3,r2
    26e0:	10c00017 	ldw	r3,0(r2)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
    26e4:	e13ffe17 	ldw	r4,-8(fp)
    26e8:	e0bffd17 	ldw	r2,-12(fp)
    26ec:	2085883a 	add	r2,r4,r2
    26f0:	10802d04 	addi	r2,r2,180
    26f4:	10800003 	ldbu	r2,0(r2)
    26f8:	11003fcc 	andi	r4,r2,255
				m = 1;
				v2 = v;
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
    26fc:	e0bff517 	ldw	r2,-44(fp)
    2700:	20800216 	blt	r4,r2,270c <encode_mcu_AC_first+0x3a8>
    2704:	00802f44 	movi	r2,189
    2708:	00000106 	br	2710 <encode_mcu_AC_first+0x3ac>
    270c:	00803644 	movi	r2,217
    2710:	1885883a 	add	r2,r3,r2
    2714:	e0bff415 	stw	r2,-48(fp)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
    2718:	00000a06 	br	2744 <encode_mcu_AC_first+0x3e0>
						arith_encode(cinfo, st, 1);
    271c:	e13ffe17 	ldw	r4,-8(fp)
    2720:	e17ff417 	ldw	r5,-48(fp)
    2724:	01800044 	movi	r6,1
    2728:	0001a540 	call	1a54 <arith_encode>
						m <<= 1;
    272c:	e0bff917 	ldw	r2,-28(fp)
    2730:	1085883a 	add	r2,r2,r2
    2734:	e0bff915 	stw	r2,-28(fp)
						st += 1;
    2738:	e0bff417 	ldw	r2,-48(fp)
    273c:	10800044 	addi	r2,r2,1
    2740:	e0bff415 	stw	r2,-48(fp)
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
    2744:	e0bff817 	ldw	r2,-32(fp)
    2748:	1005d07a 	srai	r2,r2,1
    274c:	e0bff815 	stw	r2,-32(fp)
    2750:	e0bff817 	ldw	r2,-32(fp)
    2754:	103ff11e 	bne	r2,zero,271c <encode_mcu_AC_first+0x3b8>
						m <<= 1;
						st += 1;
					}
				}
			}
			arith_encode(cinfo, st, 0);
    2758:	e13ffe17 	ldw	r4,-8(fp)
    275c:	e17ff417 	ldw	r5,-48(fp)
    2760:	000d883a 	mov	r6,zero
    2764:	0001a540 	call	1a54 <arith_encode>
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
    2768:	e0bff417 	ldw	r2,-48(fp)
    276c:	10800384 	addi	r2,r2,14
    2770:	e0bff415 	stw	r2,-48(fp)
			while (m >>= 1)
    2774:	00000906 	br	279c <encode_mcu_AC_first+0x438>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
    2778:	e0fff917 	ldw	r3,-28(fp)
    277c:	e0bff717 	ldw	r2,-36(fp)
    2780:	1884703a 	and	r2,r3,r2
    2784:	1004c03a 	cmpne	r2,r2,zero
    2788:	10803fcc 	andi	r2,r2,255
    278c:	e13ffe17 	ldw	r4,-8(fp)
    2790:	e17ff417 	ldw	r5,-48(fp)
    2794:	100d883a 	mov	r6,r2
    2798:	0001a540 	call	1a54 <arith_encode>
				}
			}
			arith_encode(cinfo, st, 0);
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
    279c:	e0bff917 	ldw	r2,-28(fp)
    27a0:	1005d07a 	srai	r2,r2,1
    27a4:	e0bff915 	stw	r2,-28(fp)
    27a8:	e0bff917 	ldw	r2,-28(fp)
    27ac:	103ff21e 	bne	r2,zero,2778 <encode_mcu_AC_first+0x414>
			v = -v;
			if (v >>= cinfo->Al) break;
		}

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = cinfo->Ss; k <= ke; k++) {
    27b0:	e0bff517 	ldw	r2,-44(fp)
    27b4:	10800044 	addi	r2,r2,1
    27b8:	e0bff515 	stw	r2,-44(fp)
    27bc:	e0bff517 	ldw	r2,-44(fp)
    27c0:	e0fff617 	ldw	r3,-40(fp)
    27c4:	18bf490e 	bge	r3,r2,24ec <encode_mcu_AC_first+0x188>
			st += 14;
			while (m >>= 1)
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}
		/* Encode EOB decision only if k <= cinfo->Se */
		if (k <= cinfo->Se) {
    27c8:	e0bffe17 	ldw	r2,-8(fp)
    27cc:	10c05617 	ldw	r3,344(r2)
    27d0:	e0bff517 	ldw	r2,-44(fp)
    27d4:	18801216 	blt	r3,r2,2820 <encode_mcu_AC_first+0x4bc>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
    27d8:	e0fffa17 	ldw	r3,-24(fp)
    27dc:	e0bffd17 	ldw	r2,-12(fp)
    27e0:	108008c4 	addi	r2,r2,35
    27e4:	1085883a 	add	r2,r2,r2
    27e8:	1085883a 	add	r2,r2,r2
    27ec:	1885883a 	add	r2,r3,r2
    27f0:	11000017 	ldw	r4,0(r2)
    27f4:	e0bff517 	ldw	r2,-44(fp)
    27f8:	10ffffc4 	addi	r3,r2,-1
    27fc:	1805883a 	mov	r2,r3
    2800:	1085883a 	add	r2,r2,r2
    2804:	10c5883a 	add	r2,r2,r3
    2808:	2085883a 	add	r2,r4,r2
    280c:	e0bff415 	stw	r2,-48(fp)
			arith_encode(cinfo, st, 1);
    2810:	e13ffe17 	ldw	r4,-8(fp)
    2814:	e17ff417 	ldw	r5,-48(fp)
    2818:	01800044 	movi	r6,1
    281c:	0001a540 	call	1a54 <arith_encode>
		}

		return TRUE;
    2820:	00800044 	movi	r2,1
}
    2824:	e037883a 	mov	sp,fp
    2828:	dfc00117 	ldw	ra,4(sp)
    282c:	df000017 	ldw	fp,0(sp)
    2830:	dec00204 	addi	sp,sp,8
    2834:	f800283a 	ret

00002838 <encode_mcu_DC_refine>:
* MCU encoding for DC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    2838:	defff804 	addi	sp,sp,-32
    283c:	dfc00715 	stw	ra,28(sp)
    2840:	df000615 	stw	fp,24(sp)
    2844:	df000604 	addi	fp,sp,24
    2848:	e13ffe15 	stw	r4,-8(fp)
    284c:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    2850:	e0bffe17 	ldw	r2,-8(fp)
    2854:	10806417 	ldw	r2,400(r2)
    2858:	e0bffb15 	stw	r2,-20(fp)
	unsigned char *st;
	int Al, blkn;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
    285c:	e0bffe17 	ldw	r2,-8(fp)
    2860:	10803717 	ldw	r2,220(r2)
    2864:	10001b26 	beq	r2,zero,28d4 <encode_mcu_DC_refine+0x9c>
		if (entropy->restarts_to_go == 0) {
    2868:	e0bffb17 	ldw	r2,-20(fp)
    286c:	10801117 	ldw	r2,68(r2)
    2870:	1000131e 	bne	r2,zero,28c0 <encode_mcu_DC_refine+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
    2874:	e0bffb17 	ldw	r2,-20(fp)
    2878:	10801217 	ldw	r2,72(r2)
    287c:	e13ffe17 	ldw	r4,-8(fp)
    2880:	100b883a 	mov	r5,r2
    2884:	0001d540 	call	1d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
    2888:	e0bffe17 	ldw	r2,-8(fp)
    288c:	10c03717 	ldw	r3,220(r2)
    2890:	e0bffb17 	ldw	r2,-20(fp)
    2894:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
    2898:	e0bffb17 	ldw	r2,-20(fp)
    289c:	10801217 	ldw	r2,72(r2)
    28a0:	10c00044 	addi	r3,r2,1
    28a4:	e0bffb17 	ldw	r2,-20(fp)
    28a8:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
    28ac:	e0bffb17 	ldw	r2,-20(fp)
    28b0:	10801217 	ldw	r2,72(r2)
    28b4:	10c001cc 	andi	r3,r2,7
    28b8:	e0bffb17 	ldw	r2,-20(fp)
    28bc:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
    28c0:	e0bffb17 	ldw	r2,-20(fp)
    28c4:	10801117 	ldw	r2,68(r2)
    28c8:	10ffffc4 	addi	r3,r2,-1
    28cc:	e0bffb17 	ldw	r2,-20(fp)
    28d0:	10c01115 	stw	r3,68(r2)
	}

	st = entropy->fixed_bin;	/* use fixed probability estimation */
    28d4:	e0bffb17 	ldw	r2,-20(fp)
    28d8:	10803304 	addi	r2,r2,204
    28dc:	e0bffc15 	stw	r2,-16(fp)
	Al = cinfo->Al;
    28e0:	e0bffe17 	ldw	r2,-8(fp)
    28e4:	10805817 	ldw	r2,352(r2)
    28e8:	e0bffd15 	stw	r2,-12(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    28ec:	e03ffa15 	stw	zero,-24(fp)
    28f0:	00001406 	br	2944 <encode_mcu_DC_refine+0x10c>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
    28f4:	e0bffa17 	ldw	r2,-24(fp)
    28f8:	1085883a 	add	r2,r2,r2
    28fc:	1085883a 	add	r2,r2,r2
    2900:	e0ffff17 	ldw	r3,-4(fp)
    2904:	1885883a 	add	r2,r3,r2
    2908:	10800017 	ldw	r2,0(r2)
    290c:	1080000b 	ldhu	r2,0(r2)
    2910:	10ffffcc 	andi	r3,r2,65535
    2914:	18e0001c 	xori	r3,r3,32768
    2918:	18e00004 	addi	r3,r3,-32768
    291c:	e0bffd17 	ldw	r2,-12(fp)
    2920:	1885d83a 	sra	r2,r3,r2
    2924:	1080004c 	andi	r2,r2,1
    2928:	e13ffe17 	ldw	r4,-8(fp)
    292c:	e17ffc17 	ldw	r5,-16(fp)
    2930:	100d883a 	mov	r6,r2
    2934:	0001a540 	call	1a54 <arith_encode>

	st = entropy->fixed_bin;	/* use fixed probability estimation */
	Al = cinfo->Al;

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    2938:	e0bffa17 	ldw	r2,-24(fp)
    293c:	10800044 	addi	r2,r2,1
    2940:	e0bffa15 	stw	r2,-24(fp)
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	10804a17 	ldw	r2,296(r2)
    294c:	e0fffa17 	ldw	r3,-24(fp)
    2950:	18bfe816 	blt	r3,r2,28f4 <encode_mcu_DC_refine+0xbc>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
	}

	return TRUE;
    2954:	00800044 	movi	r2,1
}
    2958:	e037883a 	mov	sp,fp
    295c:	dfc00117 	ldw	ra,4(sp)
    2960:	df000017 	ldw	fp,0(sp)
    2964:	dec00204 	addi	sp,sp,8
    2968:	f800283a 	ret

0000296c <encode_mcu_AC_refine>:
* MCU encoding for AC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    296c:	defff304 	addi	sp,sp,-52
    2970:	dfc00c15 	stw	ra,48(sp)
    2974:	df000b15 	stw	fp,44(sp)
    2978:	df000b04 	addi	fp,sp,44
    297c:	e13ffe15 	stw	r4,-8(fp)
    2980:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    2984:	e0bffe17 	ldw	r2,-8(fp)
    2988:	10806417 	ldw	r2,400(r2)
    298c:	e0bff915 	stw	r2,-28(fp)
	int tbl, k, ke, kex;
	int v;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
    2990:	e0bffe17 	ldw	r2,-8(fp)
    2994:	10803717 	ldw	r2,220(r2)
    2998:	10001b26 	beq	r2,zero,2a08 <encode_mcu_AC_refine+0x9c>
		if (entropy->restarts_to_go == 0) {
    299c:	e0bff917 	ldw	r2,-28(fp)
    29a0:	10801117 	ldw	r2,68(r2)
    29a4:	1000131e 	bne	r2,zero,29f4 <encode_mcu_AC_refine+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
    29a8:	e0bff917 	ldw	r2,-28(fp)
    29ac:	10801217 	ldw	r2,72(r2)
    29b0:	e13ffe17 	ldw	r4,-8(fp)
    29b4:	100b883a 	mov	r5,r2
    29b8:	0001d540 	call	1d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
    29bc:	e0bffe17 	ldw	r2,-8(fp)
    29c0:	10c03717 	ldw	r3,220(r2)
    29c4:	e0bff917 	ldw	r2,-28(fp)
    29c8:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
    29cc:	e0bff917 	ldw	r2,-28(fp)
    29d0:	10801217 	ldw	r2,72(r2)
    29d4:	10c00044 	addi	r3,r2,1
    29d8:	e0bff917 	ldw	r2,-28(fp)
    29dc:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
    29e0:	e0bff917 	ldw	r2,-28(fp)
    29e4:	10801217 	ldw	r2,72(r2)
    29e8:	10c001cc 	andi	r3,r2,7
    29ec:	e0bff917 	ldw	r2,-28(fp)
    29f0:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
    29f4:	e0bff917 	ldw	r2,-28(fp)
    29f8:	10801117 	ldw	r2,68(r2)
    29fc:	10ffffc4 	addi	r3,r2,-1
    2a00:	e0bff917 	ldw	r2,-28(fp)
    2a04:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
    2a08:	e0bffe17 	ldw	r2,-8(fp)
    2a0c:	10805a17 	ldw	r2,360(r2)
    2a10:	e0bffa15 	stw	r2,-24(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
    2a14:	e0bfff17 	ldw	r2,-4(fp)
    2a18:	10800017 	ldw	r2,0(r2)
    2a1c:	e0bffb15 	stw	r2,-20(fp)
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
    2a20:	e0bffe17 	ldw	r2,-8(fp)
    2a24:	10804417 	ldw	r2,272(r2)
    2a28:	10800617 	ldw	r2,24(r2)
    2a2c:	e0bffc15 	stw	r2,-16(fp)

	/* Section G.1.3.3: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
    2a30:	e0bffe17 	ldw	r2,-8(fp)
    2a34:	10805617 	ldw	r2,344(r2)
    2a38:	e0bff715 	stw	r2,-36(fp)
    2a3c:	00002506 	br	2ad4 <encode_mcu_AC_refine+0x168>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
    2a40:	e0bff717 	ldw	r2,-36(fp)
    2a44:	1085883a 	add	r2,r2,r2
    2a48:	1085883a 	add	r2,r2,r2
    2a4c:	e0fffa17 	ldw	r3,-24(fp)
    2a50:	1885883a 	add	r2,r3,r2
    2a54:	10800017 	ldw	r2,0(r2)
    2a58:	e0fffb17 	ldw	r3,-20(fp)
    2a5c:	1085883a 	add	r2,r2,r2
    2a60:	1885883a 	add	r2,r3,r2
    2a64:	1080000b 	ldhu	r2,0(r2)
    2a68:	10bfffcc 	andi	r2,r2,65535
    2a6c:	10a0001c 	xori	r2,r2,32768
    2a70:	10a00004 	addi	r2,r2,-32768
    2a74:	e0bffd15 	stw	r2,-12(fp)
    2a78:	e0bffd17 	ldw	r2,-12(fp)
    2a7c:	10000816 	blt	r2,zero,2aa0 <encode_mcu_AC_refine+0x134>
			if (v >>= cinfo->Al) break;
    2a80:	e0bffe17 	ldw	r2,-8(fp)
    2a84:	10805817 	ldw	r2,352(r2)
    2a88:	e0fffd17 	ldw	r3,-12(fp)
    2a8c:	1885d83a 	sra	r2,r3,r2
    2a90:	e0bffd15 	stw	r2,-12(fp)
    2a94:	e0bffd17 	ldw	r2,-12(fp)
    2a98:	10000b26 	beq	r2,zero,2ac8 <encode_mcu_AC_refine+0x15c>
    2a9c:	00001106 	br	2ae4 <encode_mcu_AC_refine+0x178>
		} else {
			v = -v;
    2aa0:	e0bffd17 	ldw	r2,-12(fp)
    2aa4:	0085c83a 	sub	r2,zero,r2
    2aa8:	e0bffd15 	stw	r2,-12(fp)
			if (v >>= cinfo->Al) break;
    2aac:	e0bffe17 	ldw	r2,-8(fp)
    2ab0:	10805817 	ldw	r2,352(r2)
    2ab4:	e0fffd17 	ldw	r3,-12(fp)
    2ab8:	1885d83a 	sra	r2,r3,r2
    2abc:	e0bffd15 	stw	r2,-12(fp)
    2ac0:	e0bffd17 	ldw	r2,-12(fp)
    2ac4:	1000061e 	bne	r2,zero,2ae0 <encode_mcu_AC_refine+0x174>
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;

	/* Section G.1.3.3: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
    2ac8:	e0bff717 	ldw	r2,-36(fp)
    2acc:	10bfffc4 	addi	r2,r2,-1
    2ad0:	e0bff715 	stw	r2,-36(fp)
    2ad4:	e0bff717 	ldw	r2,-36(fp)
    2ad8:	00bfd916 	blt	zero,r2,2a40 <encode_mcu_AC_refine+0xd4>
    2adc:	00000106 	br	2ae4 <encode_mcu_AC_refine+0x178>
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
			if (v >>= cinfo->Al) break;
		} else {
			v = -v;
			if (v >>= cinfo->Al) break;
    2ae0:	0001883a 	nop
		}

		/* Establish EOBx (previous stage end-of-block) index */
		for (kex = ke; kex > 0; kex--)
    2ae4:	e0bff717 	ldw	r2,-36(fp)
    2ae8:	e0bff815 	stw	r2,-32(fp)
    2aec:	00002506 	br	2b84 <encode_mcu_AC_refine+0x218>
			if ((v = (*block)[natural_order[kex]]) >= 0) {
    2af0:	e0bff817 	ldw	r2,-32(fp)
    2af4:	1085883a 	add	r2,r2,r2
    2af8:	1085883a 	add	r2,r2,r2
    2afc:	e0fffa17 	ldw	r3,-24(fp)
    2b00:	1885883a 	add	r2,r3,r2
    2b04:	10800017 	ldw	r2,0(r2)
    2b08:	e0fffb17 	ldw	r3,-20(fp)
    2b0c:	1085883a 	add	r2,r2,r2
    2b10:	1885883a 	add	r2,r3,r2
    2b14:	1080000b 	ldhu	r2,0(r2)
    2b18:	10bfffcc 	andi	r2,r2,65535
    2b1c:	10a0001c 	xori	r2,r2,32768
    2b20:	10a00004 	addi	r2,r2,-32768
    2b24:	e0bffd15 	stw	r2,-12(fp)
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	10000816 	blt	r2,zero,2b50 <encode_mcu_AC_refine+0x1e4>
				if (v >>= cinfo->Ah) break;
    2b30:	e0bffe17 	ldw	r2,-8(fp)
    2b34:	10805717 	ldw	r2,348(r2)
    2b38:	e0fffd17 	ldw	r3,-12(fp)
    2b3c:	1885d83a 	sra	r2,r3,r2
    2b40:	e0bffd15 	stw	r2,-12(fp)
    2b44:	e0bffd17 	ldw	r2,-12(fp)
    2b48:	10000b26 	beq	r2,zero,2b78 <encode_mcu_AC_refine+0x20c>
    2b4c:	00001106 	br	2b94 <encode_mcu_AC_refine+0x228>
			} else {
				v = -v;
    2b50:	e0bffd17 	ldw	r2,-12(fp)
    2b54:	0085c83a 	sub	r2,zero,r2
    2b58:	e0bffd15 	stw	r2,-12(fp)
				if (v >>= cinfo->Ah) break;
    2b5c:	e0bffe17 	ldw	r2,-8(fp)
    2b60:	10805717 	ldw	r2,348(r2)
    2b64:	e0fffd17 	ldw	r3,-12(fp)
    2b68:	1885d83a 	sra	r2,r3,r2
    2b6c:	e0bffd15 	stw	r2,-12(fp)
    2b70:	e0bffd17 	ldw	r2,-12(fp)
    2b74:	1000061e 	bne	r2,zero,2b90 <encode_mcu_AC_refine+0x224>
			v = -v;
			if (v >>= cinfo->Al) break;
		}

		/* Establish EOBx (previous stage end-of-block) index */
		for (kex = ke; kex > 0; kex--)
    2b78:	e0bff817 	ldw	r2,-32(fp)
    2b7c:	10bfffc4 	addi	r2,r2,-1
    2b80:	e0bff815 	stw	r2,-32(fp)
    2b84:	e0bff817 	ldw	r2,-32(fp)
    2b88:	00bfd916 	blt	zero,r2,2af0 <encode_mcu_AC_refine+0x184>
    2b8c:	00000106 	br	2b94 <encode_mcu_AC_refine+0x228>
			if ((v = (*block)[natural_order[kex]]) >= 0) {
				if (v >>= cinfo->Ah) break;
			} else {
				v = -v;
				if (v >>= cinfo->Ah) break;
    2b90:	0001883a 	nop
			}

			/* Figure G.10: Encode_AC_Coefficients_SA */
			for (k = cinfo->Ss; k <= ke; k++) {
    2b94:	e0bffe17 	ldw	r2,-8(fp)
    2b98:	10805517 	ldw	r2,340(r2)
    2b9c:	e0bff615 	stw	r2,-40(fp)
    2ba0:	00007806 	br	2d84 <encode_mcu_AC_refine+0x418>
				st = entropy->ac_stats[tbl] + 3 * (k - 1);
    2ba4:	e0fff917 	ldw	r3,-28(fp)
    2ba8:	e0bffc17 	ldw	r2,-16(fp)
    2bac:	108008c4 	addi	r2,r2,35
    2bb0:	1085883a 	add	r2,r2,r2
    2bb4:	1085883a 	add	r2,r2,r2
    2bb8:	1885883a 	add	r2,r3,r2
    2bbc:	11000017 	ldw	r4,0(r2)
    2bc0:	e0bff617 	ldw	r2,-40(fp)
    2bc4:	10ffffc4 	addi	r3,r2,-1
    2bc8:	1805883a 	mov	r2,r3
    2bcc:	1085883a 	add	r2,r2,r2
    2bd0:	10c5883a 	add	r2,r2,r3
    2bd4:	2085883a 	add	r2,r4,r2
    2bd8:	e0bff515 	stw	r2,-44(fp)
				if (k > kex)
    2bdc:	e0bff617 	ldw	r2,-40(fp)
    2be0:	e0fff817 	ldw	r3,-32(fp)
    2be4:	1880040e 	bge	r3,r2,2bf8 <encode_mcu_AC_refine+0x28c>
					arith_encode(cinfo, st, 0);	/* EOB decision */
    2be8:	e13ffe17 	ldw	r4,-8(fp)
    2bec:	e17ff517 	ldw	r5,-44(fp)
    2bf0:	000d883a 	mov	r6,zero
    2bf4:	0001a540 	call	1a54 <arith_encode>
				for (;;) {
					if ((v = (*block)[natural_order[k]]) >= 0) {
    2bf8:	e0bff617 	ldw	r2,-40(fp)
    2bfc:	1085883a 	add	r2,r2,r2
    2c00:	1085883a 	add	r2,r2,r2
    2c04:	e0fffa17 	ldw	r3,-24(fp)
    2c08:	1885883a 	add	r2,r3,r2
    2c0c:	10800017 	ldw	r2,0(r2)
    2c10:	e0fffb17 	ldw	r3,-20(fp)
    2c14:	1085883a 	add	r2,r2,r2
    2c18:	1885883a 	add	r2,r3,r2
    2c1c:	1080000b 	ldhu	r2,0(r2)
    2c20:	10bfffcc 	andi	r2,r2,65535
    2c24:	10a0001c 	xori	r2,r2,32768
    2c28:	10a00004 	addi	r2,r2,-32768
    2c2c:	e0bffd15 	stw	r2,-12(fp)
    2c30:	e0bffd17 	ldw	r2,-12(fp)
    2c34:	10002016 	blt	r2,zero,2cb8 <encode_mcu_AC_refine+0x34c>
						if (v >>= cinfo->Al) {
    2c38:	e0bffe17 	ldw	r2,-8(fp)
    2c3c:	10805817 	ldw	r2,352(r2)
    2c40:	e0fffd17 	ldw	r3,-12(fp)
    2c44:	1885d83a 	sra	r2,r3,r2
    2c48:	e0bffd15 	stw	r2,-12(fp)
    2c4c:	e0bffd17 	ldw	r2,-12(fp)
    2c50:	10003c26 	beq	r2,zero,2d44 <encode_mcu_AC_refine+0x3d8>
							if (v >> 1)			/* previously nonzero coef */
    2c54:	e0bffd17 	ldw	r2,-12(fp)
    2c58:	1005d07a 	srai	r2,r2,1
    2c5c:	10000926 	beq	r2,zero,2c84 <encode_mcu_AC_refine+0x318>
								arith_encode(cinfo, st + 2, (v & 1));
    2c60:	e0bff517 	ldw	r2,-44(fp)
    2c64:	10c00084 	addi	r3,r2,2
    2c68:	e0bffd17 	ldw	r2,-12(fp)
    2c6c:	1080004c 	andi	r2,r2,1
    2c70:	e13ffe17 	ldw	r4,-8(fp)
    2c74:	180b883a 	mov	r5,r3
    2c78:	100d883a 	mov	r6,r2
    2c7c:	0001a540 	call	1a54 <arith_encode>
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
								arith_encode(cinfo, entropy->fixed_bin, 0);
							}
							break;
    2c80:	00003d06 	br	2d78 <encode_mcu_AC_refine+0x40c>
					if ((v = (*block)[natural_order[k]]) >= 0) {
						if (v >>= cinfo->Al) {
							if (v >> 1)			/* previously nonzero coef */
								arith_encode(cinfo, st + 2, (v & 1));
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
    2c84:	e0bff517 	ldw	r2,-44(fp)
    2c88:	10800044 	addi	r2,r2,1
    2c8c:	e13ffe17 	ldw	r4,-8(fp)
    2c90:	100b883a 	mov	r5,r2
    2c94:	01800044 	movi	r6,1
    2c98:	0001a540 	call	1a54 <arith_encode>
								arith_encode(cinfo, entropy->fixed_bin, 0);
    2c9c:	e0bff917 	ldw	r2,-28(fp)
    2ca0:	10803304 	addi	r2,r2,204
    2ca4:	e13ffe17 	ldw	r4,-8(fp)
    2ca8:	100b883a 	mov	r5,r2
    2cac:	000d883a 	mov	r6,zero
    2cb0:	0001a540 	call	1a54 <arith_encode>
							}
							break;
    2cb4:	00003006 	br	2d78 <encode_mcu_AC_refine+0x40c>
						}
					} else {
						v = -v;
    2cb8:	e0bffd17 	ldw	r2,-12(fp)
    2cbc:	0085c83a 	sub	r2,zero,r2
    2cc0:	e0bffd15 	stw	r2,-12(fp)
						if (v >>= cinfo->Al) {
    2cc4:	e0bffe17 	ldw	r2,-8(fp)
    2cc8:	10805817 	ldw	r2,352(r2)
    2ccc:	e0fffd17 	ldw	r3,-12(fp)
    2cd0:	1885d83a 	sra	r2,r3,r2
    2cd4:	e0bffd15 	stw	r2,-12(fp)
    2cd8:	e0bffd17 	ldw	r2,-12(fp)
    2cdc:	10001926 	beq	r2,zero,2d44 <encode_mcu_AC_refine+0x3d8>
							if (v >> 1)			/* previously nonzero coef */
    2ce0:	e0bffd17 	ldw	r2,-12(fp)
    2ce4:	1005d07a 	srai	r2,r2,1
    2ce8:	10000926 	beq	r2,zero,2d10 <encode_mcu_AC_refine+0x3a4>
								arith_encode(cinfo, st + 2, (v & 1));
    2cec:	e0bff517 	ldw	r2,-44(fp)
    2cf0:	10c00084 	addi	r3,r2,2
    2cf4:	e0bffd17 	ldw	r2,-12(fp)
    2cf8:	1080004c 	andi	r2,r2,1
    2cfc:	e13ffe17 	ldw	r4,-8(fp)
    2d00:	180b883a 	mov	r5,r3
    2d04:	100d883a 	mov	r6,r2
    2d08:	0001a540 	call	1a54 <arith_encode>
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
								arith_encode(cinfo, entropy->fixed_bin, 1);
							}
							break;
    2d0c:	00001a06 	br	2d78 <encode_mcu_AC_refine+0x40c>
						v = -v;
						if (v >>= cinfo->Al) {
							if (v >> 1)			/* previously nonzero coef */
								arith_encode(cinfo, st + 2, (v & 1));
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
    2d10:	e0bff517 	ldw	r2,-44(fp)
    2d14:	10800044 	addi	r2,r2,1
    2d18:	e13ffe17 	ldw	r4,-8(fp)
    2d1c:	100b883a 	mov	r5,r2
    2d20:	01800044 	movi	r6,1
    2d24:	0001a540 	call	1a54 <arith_encode>
								arith_encode(cinfo, entropy->fixed_bin, 1);
    2d28:	e0bff917 	ldw	r2,-28(fp)
    2d2c:	10803304 	addi	r2,r2,204
    2d30:	e13ffe17 	ldw	r4,-8(fp)
    2d34:	100b883a 	mov	r5,r2
    2d38:	01800044 	movi	r6,1
    2d3c:	0001a540 	call	1a54 <arith_encode>
							}
							break;
    2d40:	00000d06 	br	2d78 <encode_mcu_AC_refine+0x40c>
						}
					}
					arith_encode(cinfo, st + 1, 0); st += 3; k++;
    2d44:	e0bff517 	ldw	r2,-44(fp)
    2d48:	10800044 	addi	r2,r2,1
    2d4c:	e13ffe17 	ldw	r4,-8(fp)
    2d50:	100b883a 	mov	r5,r2
    2d54:	000d883a 	mov	r6,zero
    2d58:	0001a540 	call	1a54 <arith_encode>
    2d5c:	e0bff517 	ldw	r2,-44(fp)
    2d60:	108000c4 	addi	r2,r2,3
    2d64:	e0bff515 	stw	r2,-44(fp)
    2d68:	e0bff617 	ldw	r2,-40(fp)
    2d6c:	10800044 	addi	r2,r2,1
    2d70:	e0bff615 	stw	r2,-40(fp)
				}
    2d74:	003fa006 	br	2bf8 <encode_mcu_AC_refine+0x28c>
				v = -v;
				if (v >>= cinfo->Ah) break;
			}

			/* Figure G.10: Encode_AC_Coefficients_SA */
			for (k = cinfo->Ss; k <= ke; k++) {
    2d78:	e0bff617 	ldw	r2,-40(fp)
    2d7c:	10800044 	addi	r2,r2,1
    2d80:	e0bff615 	stw	r2,-40(fp)
    2d84:	e0bff617 	ldw	r2,-40(fp)
    2d88:	e0fff717 	ldw	r3,-36(fp)
    2d8c:	18bf850e 	bge	r3,r2,2ba4 <encode_mcu_AC_refine+0x238>
					}
					arith_encode(cinfo, st + 1, 0); st += 3; k++;
				}
			}
			/* Encode EOB decision only if k <= cinfo->Se */
			if (k <= cinfo->Se) {
    2d90:	e0bffe17 	ldw	r2,-8(fp)
    2d94:	10c05617 	ldw	r3,344(r2)
    2d98:	e0bff617 	ldw	r2,-40(fp)
    2d9c:	18801216 	blt	r3,r2,2de8 <encode_mcu_AC_refine+0x47c>
				st = entropy->ac_stats[tbl] + 3 * (k - 1);
    2da0:	e0fff917 	ldw	r3,-28(fp)
    2da4:	e0bffc17 	ldw	r2,-16(fp)
    2da8:	108008c4 	addi	r2,r2,35
    2dac:	1085883a 	add	r2,r2,r2
    2db0:	1085883a 	add	r2,r2,r2
    2db4:	1885883a 	add	r2,r3,r2
    2db8:	11000017 	ldw	r4,0(r2)
    2dbc:	e0bff617 	ldw	r2,-40(fp)
    2dc0:	10ffffc4 	addi	r3,r2,-1
    2dc4:	1805883a 	mov	r2,r3
    2dc8:	1085883a 	add	r2,r2,r2
    2dcc:	10c5883a 	add	r2,r2,r3
    2dd0:	2085883a 	add	r2,r4,r2
    2dd4:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, st, 1);
    2dd8:	e13ffe17 	ldw	r4,-8(fp)
    2ddc:	e17ff517 	ldw	r5,-44(fp)
    2de0:	01800044 	movi	r6,1
    2de4:	0001a540 	call	1a54 <arith_encode>
			}

			return TRUE;
    2de8:	00800044 	movi	r2,1
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <encode_mcu>:
* Encode and output one MCU's worth of arithmetic-compressed coefficients.
*/

METHODDEF(boolean)
	encode_mcu (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    2e00:	deffef04 	addi	sp,sp,-68
    2e04:	dfc01015 	stw	ra,64(sp)
    2e08:	df000f15 	stw	fp,60(sp)
    2e0c:	df000f04 	addi	fp,sp,60
    2e10:	e13ffe15 	stw	r4,-8(fp)
    2e14:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    2e18:	e0bffe17 	ldw	r2,-8(fp)
    2e1c:	10806417 	ldw	r2,400(r2)
    2e20:	e0bff815 	stw	r2,-32(fp)
	int blkn, ci, tbl, k, ke;
	int v, v2, m;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
    2e24:	e0bffe17 	ldw	r2,-8(fp)
    2e28:	10803717 	ldw	r2,220(r2)
    2e2c:	10001b26 	beq	r2,zero,2e9c <encode_mcu+0x9c>
		if (entropy->restarts_to_go == 0) {
    2e30:	e0bff817 	ldw	r2,-32(fp)
    2e34:	10801117 	ldw	r2,68(r2)
    2e38:	1000131e 	bne	r2,zero,2e88 <encode_mcu+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
    2e3c:	e0bff817 	ldw	r2,-32(fp)
    2e40:	10801217 	ldw	r2,72(r2)
    2e44:	e13ffe17 	ldw	r4,-8(fp)
    2e48:	100b883a 	mov	r5,r2
    2e4c:	0001d540 	call	1d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
    2e50:	e0bffe17 	ldw	r2,-8(fp)
    2e54:	10c03717 	ldw	r3,220(r2)
    2e58:	e0bff817 	ldw	r2,-32(fp)
    2e5c:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
    2e60:	e0bff817 	ldw	r2,-32(fp)
    2e64:	10801217 	ldw	r2,72(r2)
    2e68:	10c00044 	addi	r3,r2,1
    2e6c:	e0bff817 	ldw	r2,-32(fp)
    2e70:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
    2e74:	e0bff817 	ldw	r2,-32(fp)
    2e78:	10801217 	ldw	r2,72(r2)
    2e7c:	10c001cc 	andi	r3,r2,7
    2e80:	e0bff817 	ldw	r2,-32(fp)
    2e84:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
    2e88:	e0bff817 	ldw	r2,-32(fp)
    2e8c:	10801117 	ldw	r2,68(r2)
    2e90:	10ffffc4 	addi	r3,r2,-1
    2e94:	e0bff817 	ldw	r2,-32(fp)
    2e98:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
    2e9c:	e0bffe17 	ldw	r2,-8(fp)
    2ea0:	10805a17 	ldw	r2,360(r2)
    2ea4:	e0bff915 	stw	r2,-28(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    2ea8:	e03ff215 	stw	zero,-56(fp)
    2eac:	0001c406 	br	35c0 <encode_mcu+0x7c0>
		block = MCU_data[blkn];
    2eb0:	e0bff217 	ldw	r2,-56(fp)
    2eb4:	1085883a 	add	r2,r2,r2
    2eb8:	1085883a 	add	r2,r2,r2
    2ebc:	e0ffff17 	ldw	r3,-4(fp)
    2ec0:	1885883a 	add	r2,r3,r2
    2ec4:	10800017 	ldw	r2,0(r2)
    2ec8:	e0bffa15 	stw	r2,-24(fp)
		ci = cinfo->MCU_membership[blkn];
    2ecc:	e0fffe17 	ldw	r3,-8(fp)
    2ed0:	e0bff217 	ldw	r2,-56(fp)
    2ed4:	108012c4 	addi	r2,r2,75
    2ed8:	1085883a 	add	r2,r2,r2
    2edc:	1085883a 	add	r2,r2,r2
    2ee0:	1885883a 	add	r2,r3,r2
    2ee4:	10800017 	ldw	r2,0(r2)
    2ee8:	e0bffb15 	stw	r2,-20(fp)
		compptr = cinfo->cur_comp_info[ci];
    2eec:	e0fffe17 	ldw	r3,-8(fp)
    2ef0:	e0bffb17 	ldw	r2,-20(fp)
    2ef4:	10801104 	addi	r2,r2,68
    2ef8:	1085883a 	add	r2,r2,r2
    2efc:	1085883a 	add	r2,r2,r2
    2f00:	1885883a 	add	r2,r3,r2
    2f04:	10800017 	ldw	r2,0(r2)
    2f08:	e0bffc15 	stw	r2,-16(fp)

		/* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

		tbl = compptr->dc_tbl_no;
    2f0c:	e0bffc17 	ldw	r2,-16(fp)
    2f10:	10800517 	ldw	r2,20(r2)
    2f14:	e0bffd15 	stw	r2,-12(fp)

		/* Table F.4: Point to statistics bin S0 for DC coefficient coding */
		st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
    2f18:	e0fff817 	ldw	r3,-32(fp)
    2f1c:	e0bffd17 	ldw	r2,-12(fp)
    2f20:	108004c4 	addi	r2,r2,19
    2f24:	1085883a 	add	r2,r2,r2
    2f28:	1085883a 	add	r2,r2,r2
    2f2c:	1885883a 	add	r2,r3,r2
    2f30:	10c00017 	ldw	r3,0(r2)
    2f34:	e13ff817 	ldw	r4,-32(fp)
    2f38:	e0bffb17 	ldw	r2,-20(fp)
    2f3c:	10800344 	addi	r2,r2,13
    2f40:	1085883a 	add	r2,r2,r2
    2f44:	1085883a 	add	r2,r2,r2
    2f48:	2085883a 	add	r2,r4,r2
    2f4c:	10800017 	ldw	r2,0(r2)
    2f50:	1885883a 	add	r2,r3,r2
    2f54:	e0bff115 	stw	r2,-60(fp)

		/* Figure F.4: Encode_DC_DIFF */
		if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0) {
    2f58:	e0bffa17 	ldw	r2,-24(fp)
    2f5c:	1080000b 	ldhu	r2,0(r2)
    2f60:	10ffffcc 	andi	r3,r2,65535
    2f64:	18e0001c 	xori	r3,r3,32768
    2f68:	18e00004 	addi	r3,r3,-32768
    2f6c:	e13ff817 	ldw	r4,-32(fp)
    2f70:	e0bffb17 	ldw	r2,-20(fp)
    2f74:	10800244 	addi	r2,r2,9
    2f78:	1085883a 	add	r2,r2,r2
    2f7c:	1085883a 	add	r2,r2,r2
    2f80:	2085883a 	add	r2,r4,r2
    2f84:	10800017 	ldw	r2,0(r2)
    2f88:	1885c83a 	sub	r2,r3,r2
    2f8c:	e0bff515 	stw	r2,-44(fp)
    2f90:	e0bff517 	ldw	r2,-44(fp)
    2f94:	10000c1e 	bne	r2,zero,2fc8 <encode_mcu+0x1c8>
			arith_encode(cinfo, st, 0);
    2f98:	e13ffe17 	ldw	r4,-8(fp)
    2f9c:	e17ff117 	ldw	r5,-60(fp)
    2fa0:	000d883a 	mov	r6,zero
    2fa4:	0001a540 	call	1a54 <arith_encode>
			entropy->dc_context[ci] = 0;	/* zero diff category */
    2fa8:	e0fff817 	ldw	r3,-32(fp)
    2fac:	e0bffb17 	ldw	r2,-20(fp)
    2fb0:	10800344 	addi	r2,r2,13
    2fb4:	1085883a 	add	r2,r2,r2
    2fb8:	1085883a 	add	r2,r2,r2
    2fbc:	1885883a 	add	r2,r3,r2
    2fc0:	10000015 	stw	zero,0(r2)
    2fc4:	0000a206 	br	3250 <encode_mcu+0x450>
		} else {
			entropy->last_dc_val[ci] = (*block)[0];
    2fc8:	e0bffa17 	ldw	r2,-24(fp)
    2fcc:	1080000b 	ldhu	r2,0(r2)
    2fd0:	10ffffcc 	andi	r3,r2,65535
    2fd4:	18e0001c 	xori	r3,r3,32768
    2fd8:	18e00004 	addi	r3,r3,-32768
    2fdc:	e13ff817 	ldw	r4,-32(fp)
    2fe0:	e0bffb17 	ldw	r2,-20(fp)
    2fe4:	10800244 	addi	r2,r2,9
    2fe8:	1085883a 	add	r2,r2,r2
    2fec:	1085883a 	add	r2,r2,r2
    2ff0:	2085883a 	add	r2,r4,r2
    2ff4:	10c00015 	stw	r3,0(r2)
			arith_encode(cinfo, st, 1);
    2ff8:	e13ffe17 	ldw	r4,-8(fp)
    2ffc:	e17ff117 	ldw	r5,-60(fp)
    3000:	01800044 	movi	r6,1
    3004:	0001a540 	call	1a54 <arith_encode>
			/* Figure F.6: Encoding nonzero value v */
			/* Figure F.7: Encoding the sign of v */
			if (v > 0) {
    3008:	e0bff517 	ldw	r2,-44(fp)
    300c:	0080120e 	bge	zero,r2,3058 <encode_mcu+0x258>
				arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
    3010:	e0bff117 	ldw	r2,-60(fp)
    3014:	10800044 	addi	r2,r2,1
    3018:	e13ffe17 	ldw	r4,-8(fp)
    301c:	100b883a 	mov	r5,r2
    3020:	000d883a 	mov	r6,zero
    3024:	0001a540 	call	1a54 <arith_encode>
				st += 2;			/* Table F.4: SP = S0 + 2 */
    3028:	e0bff117 	ldw	r2,-60(fp)
    302c:	10800084 	addi	r2,r2,2
    3030:	e0bff115 	stw	r2,-60(fp)
				entropy->dc_context[ci] = 4;	/* small positive diff category */
    3034:	e0fff817 	ldw	r3,-32(fp)
    3038:	e0bffb17 	ldw	r2,-20(fp)
    303c:	10800344 	addi	r2,r2,13
    3040:	1085883a 	add	r2,r2,r2
    3044:	1085883a 	add	r2,r2,r2
    3048:	1885883a 	add	r2,r3,r2
    304c:	00c00104 	movi	r3,4
    3050:	10c00015 	stw	r3,0(r2)
    3054:	00001406 	br	30a8 <encode_mcu+0x2a8>
			} else {
				v = -v;
    3058:	e0bff517 	ldw	r2,-44(fp)
    305c:	0085c83a 	sub	r2,zero,r2
    3060:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
    3064:	e0bff117 	ldw	r2,-60(fp)
    3068:	10800044 	addi	r2,r2,1
    306c:	e13ffe17 	ldw	r4,-8(fp)
    3070:	100b883a 	mov	r5,r2
    3074:	01800044 	movi	r6,1
    3078:	0001a540 	call	1a54 <arith_encode>
				st += 3;			/* Table F.4: SN = S0 + 3 */
    307c:	e0bff117 	ldw	r2,-60(fp)
    3080:	108000c4 	addi	r2,r2,3
    3084:	e0bff115 	stw	r2,-60(fp)
				entropy->dc_context[ci] = 8;	/* small negative diff category */
    3088:	e0fff817 	ldw	r3,-32(fp)
    308c:	e0bffb17 	ldw	r2,-20(fp)
    3090:	10800344 	addi	r2,r2,13
    3094:	1085883a 	add	r2,r2,r2
    3098:	1085883a 	add	r2,r2,r2
    309c:	1885883a 	add	r2,r3,r2
    30a0:	00c00204 	movi	r3,8
    30a4:	10c00015 	stw	r3,0(r2)
			}
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
    30a8:	e03ff715 	stw	zero,-36(fp)
			if (v -= 1) {
    30ac:	e0bff517 	ldw	r2,-44(fp)
    30b0:	10bfffc4 	addi	r2,r2,-1
    30b4:	e0bff515 	stw	r2,-44(fp)
    30b8:	e0bff517 	ldw	r2,-44(fp)
    30bc:	10002126 	beq	r2,zero,3144 <encode_mcu+0x344>
				arith_encode(cinfo, st, 1);
    30c0:	e13ffe17 	ldw	r4,-8(fp)
    30c4:	e17ff117 	ldw	r5,-60(fp)
    30c8:	01800044 	movi	r6,1
    30cc:	0001a540 	call	1a54 <arith_encode>
				m = 1;
    30d0:	00800044 	movi	r2,1
    30d4:	e0bff715 	stw	r2,-36(fp)
				v2 = v;
    30d8:	e0bff517 	ldw	r2,-44(fp)
    30dc:	e0bff615 	stw	r2,-40(fp)
				st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
    30e0:	e0fff817 	ldw	r3,-32(fp)
    30e4:	e0bffd17 	ldw	r2,-12(fp)
    30e8:	108004c4 	addi	r2,r2,19
    30ec:	1085883a 	add	r2,r2,r2
    30f0:	1085883a 	add	r2,r2,r2
    30f4:	1885883a 	add	r2,r3,r2
    30f8:	10800017 	ldw	r2,0(r2)
    30fc:	10800504 	addi	r2,r2,20
    3100:	e0bff115 	stw	r2,-60(fp)
				while (v2 >>= 1) {
    3104:	00000a06 	br	3130 <encode_mcu+0x330>
					arith_encode(cinfo, st, 1);
    3108:	e13ffe17 	ldw	r4,-8(fp)
    310c:	e17ff117 	ldw	r5,-60(fp)
    3110:	01800044 	movi	r6,1
    3114:	0001a540 	call	1a54 <arith_encode>
					m <<= 1;
    3118:	e0bff717 	ldw	r2,-36(fp)
    311c:	1085883a 	add	r2,r2,r2
    3120:	e0bff715 	stw	r2,-36(fp)
					st += 1;
    3124:	e0bff117 	ldw	r2,-60(fp)
    3128:	10800044 	addi	r2,r2,1
    312c:	e0bff115 	stw	r2,-60(fp)
			if (v -= 1) {
				arith_encode(cinfo, st, 1);
				m = 1;
				v2 = v;
				st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
				while (v2 >>= 1) {
    3130:	e0bff617 	ldw	r2,-40(fp)
    3134:	1005d07a 	srai	r2,r2,1
    3138:	e0bff615 	stw	r2,-40(fp)
    313c:	e0bff617 	ldw	r2,-40(fp)
    3140:	103ff11e 	bne	r2,zero,3108 <encode_mcu+0x308>
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st += 1;
				}
			}
			arith_encode(cinfo, st, 0);
    3144:	e13ffe17 	ldw	r4,-8(fp)
    3148:	e17ff117 	ldw	r5,-60(fp)
    314c:	000d883a 	mov	r6,zero
    3150:	0001a540 	call	1a54 <arith_encode>
			/* Section F.1.4.4.1.2: Establish dc_context conditioning category */
			if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
    3154:	e0fffe17 	ldw	r3,-8(fp)
    3158:	e0bffd17 	ldw	r2,-12(fp)
    315c:	1885883a 	add	r2,r3,r2
    3160:	10802504 	addi	r2,r2,148
    3164:	10800003 	ldbu	r2,0(r2)
    3168:	10803fcc 	andi	r2,r2,255
    316c:	00c00044 	movi	r3,1
    3170:	1884983a 	sll	r2,r3,r2
    3174:	1005d07a 	srai	r2,r2,1
    3178:	e0fff717 	ldw	r3,-36(fp)
    317c:	1880080e 	bge	r3,r2,31a0 <encode_mcu+0x3a0>
				entropy->dc_context[ci] = 0;	/* zero diff category */
    3180:	e0fff817 	ldw	r3,-32(fp)
    3184:	e0bffb17 	ldw	r2,-20(fp)
    3188:	10800344 	addi	r2,r2,13
    318c:	1085883a 	add	r2,r2,r2
    3190:	1085883a 	add	r2,r2,r2
    3194:	1885883a 	add	r2,r3,r2
    3198:	10000015 	stw	zero,0(r2)
    319c:	00001a06 	br	3208 <encode_mcu+0x408>
			else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
    31a0:	e0fffe17 	ldw	r3,-8(fp)
    31a4:	e0bffd17 	ldw	r2,-12(fp)
    31a8:	1885883a 	add	r2,r3,r2
    31ac:	10802904 	addi	r2,r2,164
    31b0:	10800003 	ldbu	r2,0(r2)
    31b4:	10803fcc 	andi	r2,r2,255
    31b8:	00c00044 	movi	r3,1
    31bc:	1884983a 	sll	r2,r3,r2
    31c0:	1007d07a 	srai	r3,r2,1
    31c4:	e0bff717 	ldw	r2,-36(fp)
    31c8:	18800f0e 	bge	r3,r2,3208 <encode_mcu+0x408>
				entropy->dc_context[ci] += 8;	/* large diff category */
    31cc:	e0fff817 	ldw	r3,-32(fp)
    31d0:	e0bffb17 	ldw	r2,-20(fp)
    31d4:	10800344 	addi	r2,r2,13
    31d8:	1085883a 	add	r2,r2,r2
    31dc:	1085883a 	add	r2,r2,r2
    31e0:	1885883a 	add	r2,r3,r2
    31e4:	10800017 	ldw	r2,0(r2)
    31e8:	10c00204 	addi	r3,r2,8
    31ec:	e13ff817 	ldw	r4,-32(fp)
    31f0:	e0bffb17 	ldw	r2,-20(fp)
    31f4:	10800344 	addi	r2,r2,13
    31f8:	1085883a 	add	r2,r2,r2
    31fc:	1085883a 	add	r2,r2,r2
    3200:	2085883a 	add	r2,r4,r2
    3204:	10c00015 	stw	r3,0(r2)
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
    3208:	e0bff117 	ldw	r2,-60(fp)
    320c:	10800384 	addi	r2,r2,14
    3210:	e0bff115 	stw	r2,-60(fp)
			while (m >>= 1)
    3214:	00000906 	br	323c <encode_mcu+0x43c>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
    3218:	e0fff717 	ldw	r3,-36(fp)
    321c:	e0bff517 	ldw	r2,-44(fp)
    3220:	1884703a 	and	r2,r3,r2
    3224:	1004c03a 	cmpne	r2,r2,zero
    3228:	10803fcc 	andi	r2,r2,255
    322c:	e13ffe17 	ldw	r4,-8(fp)
    3230:	e17ff117 	ldw	r5,-60(fp)
    3234:	100d883a 	mov	r6,r2
    3238:	0001a540 	call	1a54 <arith_encode>
				entropy->dc_context[ci] = 0;	/* zero diff category */
			else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
				entropy->dc_context[ci] += 8;	/* large diff category */
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
    323c:	e0bff717 	ldw	r2,-36(fp)
    3240:	1005d07a 	srai	r2,r2,1
    3244:	e0bff715 	stw	r2,-36(fp)
    3248:	e0bff717 	ldw	r2,-36(fp)
    324c:	103ff21e 	bne	r2,zero,3218 <encode_mcu+0x418>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}

		/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

		tbl = compptr->ac_tbl_no;
    3250:	e0bffc17 	ldw	r2,-16(fp)
    3254:	10800617 	ldw	r2,24(r2)
    3258:	e0bffd15 	stw	r2,-12(fp)

		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
    325c:	e0bffe17 	ldw	r2,-8(fp)
    3260:	10805b17 	ldw	r2,364(r2)
    3264:	e0bff415 	stw	r2,-48(fp)
    3268:	00001106 	br	32b0 <encode_mcu+0x4b0>
			if ((*block)[natural_order[ke]]) break;
    326c:	e0bff417 	ldw	r2,-48(fp)
    3270:	1085883a 	add	r2,r2,r2
    3274:	1085883a 	add	r2,r2,r2
    3278:	e0fff917 	ldw	r3,-28(fp)
    327c:	1885883a 	add	r2,r3,r2
    3280:	10800017 	ldw	r2,0(r2)
    3284:	e0fffa17 	ldw	r3,-24(fp)
    3288:	1085883a 	add	r2,r2,r2
    328c:	1885883a 	add	r2,r3,r2
    3290:	1080000b 	ldhu	r2,0(r2)
    3294:	10bfffcc 	andi	r2,r2,65535
    3298:	10a0001c 	xori	r2,r2,32768
    329c:	10a00004 	addi	r2,r2,-32768
    32a0:	1000061e 	bne	r2,zero,32bc <encode_mcu+0x4bc>
		/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

		tbl = compptr->ac_tbl_no;

		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
    32a4:	e0bff417 	ldw	r2,-48(fp)
    32a8:	10bfffc4 	addi	r2,r2,-1
    32ac:	e0bff415 	stw	r2,-48(fp)
    32b0:	e0bff417 	ldw	r2,-48(fp)
    32b4:	00bfed16 	blt	zero,r2,326c <encode_mcu+0x46c>
    32b8:	00000106 	br	32c0 <encode_mcu+0x4c0>
			if ((*block)[natural_order[ke]]) break;
    32bc:	0001883a 	nop

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
    32c0:	00800044 	movi	r2,1
    32c4:	e0bff315 	stw	r2,-52(fp)
    32c8:	0000a106 	br	3550 <encode_mcu+0x750>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
    32cc:	e0fff817 	ldw	r3,-32(fp)
    32d0:	e0bffd17 	ldw	r2,-12(fp)
    32d4:	108008c4 	addi	r2,r2,35
    32d8:	1085883a 	add	r2,r2,r2
    32dc:	1085883a 	add	r2,r2,r2
    32e0:	1885883a 	add	r2,r3,r2
    32e4:	11000017 	ldw	r4,0(r2)
    32e8:	e0bff317 	ldw	r2,-52(fp)
    32ec:	10ffffc4 	addi	r3,r2,-1
    32f0:	1805883a 	mov	r2,r3
    32f4:	1085883a 	add	r2,r2,r2
    32f8:	10c5883a 	add	r2,r2,r3
    32fc:	2085883a 	add	r2,r4,r2
    3300:	e0bff115 	stw	r2,-60(fp)
			arith_encode(cinfo, st, 0);	/* EOB decision */
    3304:	e13ffe17 	ldw	r4,-8(fp)
    3308:	e17ff117 	ldw	r5,-60(fp)
    330c:	000d883a 	mov	r6,zero
    3310:	0001a540 	call	1a54 <arith_encode>
			while ((v = (*block)[natural_order[k]]) == 0) {
    3314:	00000c06 	br	3348 <encode_mcu+0x548>
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
    3318:	e0bff117 	ldw	r2,-60(fp)
    331c:	10800044 	addi	r2,r2,1
    3320:	e13ffe17 	ldw	r4,-8(fp)
    3324:	100b883a 	mov	r5,r2
    3328:	000d883a 	mov	r6,zero
    332c:	0001a540 	call	1a54 <arith_encode>
    3330:	e0bff117 	ldw	r2,-60(fp)
    3334:	108000c4 	addi	r2,r2,3
    3338:	e0bff115 	stw	r2,-60(fp)
    333c:	e0bff317 	ldw	r2,-52(fp)
    3340:	10800044 	addi	r2,r2,1
    3344:	e0bff315 	stw	r2,-52(fp)

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
			arith_encode(cinfo, st, 0);	/* EOB decision */
			while ((v = (*block)[natural_order[k]]) == 0) {
    3348:	e0bff317 	ldw	r2,-52(fp)
    334c:	1085883a 	add	r2,r2,r2
    3350:	1085883a 	add	r2,r2,r2
    3354:	e0fff917 	ldw	r3,-28(fp)
    3358:	1885883a 	add	r2,r3,r2
    335c:	10800017 	ldw	r2,0(r2)
    3360:	e0fffa17 	ldw	r3,-24(fp)
    3364:	1085883a 	add	r2,r2,r2
    3368:	1885883a 	add	r2,r3,r2
    336c:	1080000b 	ldhu	r2,0(r2)
    3370:	10bfffcc 	andi	r2,r2,65535
    3374:	10a0001c 	xori	r2,r2,32768
    3378:	10a00004 	addi	r2,r2,-32768
    337c:	e0bff515 	stw	r2,-44(fp)
    3380:	e0bff517 	ldw	r2,-44(fp)
    3384:	103fe426 	beq	r2,zero,3318 <encode_mcu+0x518>
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
			}
			arith_encode(cinfo, st + 1, 1);
    3388:	e0bff117 	ldw	r2,-60(fp)
    338c:	10800044 	addi	r2,r2,1
    3390:	e13ffe17 	ldw	r4,-8(fp)
    3394:	100b883a 	mov	r5,r2
    3398:	01800044 	movi	r6,1
    339c:	0001a540 	call	1a54 <arith_encode>
			/* Figure F.6: Encoding nonzero value v */
			/* Figure F.7: Encoding the sign of v */
			if (v > 0) {
    33a0:	e0bff517 	ldw	r2,-44(fp)
    33a4:	0080070e 	bge	zero,r2,33c4 <encode_mcu+0x5c4>
				arith_encode(cinfo, entropy->fixed_bin, 0);
    33a8:	e0bff817 	ldw	r2,-32(fp)
    33ac:	10803304 	addi	r2,r2,204
    33b0:	e13ffe17 	ldw	r4,-8(fp)
    33b4:	100b883a 	mov	r5,r2
    33b8:	000d883a 	mov	r6,zero
    33bc:	0001a540 	call	1a54 <arith_encode>
    33c0:	00000906 	br	33e8 <encode_mcu+0x5e8>
			} else {
				v = -v;
    33c4:	e0bff517 	ldw	r2,-44(fp)
    33c8:	0085c83a 	sub	r2,zero,r2
    33cc:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, entropy->fixed_bin, 1);
    33d0:	e0bff817 	ldw	r2,-32(fp)
    33d4:	10803304 	addi	r2,r2,204
    33d8:	e13ffe17 	ldw	r4,-8(fp)
    33dc:	100b883a 	mov	r5,r2
    33e0:	01800044 	movi	r6,1
    33e4:	0001a540 	call	1a54 <arith_encode>
			}
			st += 2;
    33e8:	e0bff117 	ldw	r2,-60(fp)
    33ec:	10800084 	addi	r2,r2,2
    33f0:	e0bff115 	stw	r2,-60(fp)
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
    33f4:	e03ff715 	stw	zero,-36(fp)
			if (v -= 1) {
    33f8:	e0bff517 	ldw	r2,-44(fp)
    33fc:	10bfffc4 	addi	r2,r2,-1
    3400:	e0bff515 	stw	r2,-44(fp)
    3404:	e0bff517 	ldw	r2,-44(fp)
    3408:	10003826 	beq	r2,zero,34ec <encode_mcu+0x6ec>
				arith_encode(cinfo, st, 1);
    340c:	e13ffe17 	ldw	r4,-8(fp)
    3410:	e17ff117 	ldw	r5,-60(fp)
    3414:	01800044 	movi	r6,1
    3418:	0001a540 	call	1a54 <arith_encode>
				m = 1;
    341c:	00800044 	movi	r2,1
    3420:	e0bff715 	stw	r2,-36(fp)
				v2 = v;
    3424:	e0bff517 	ldw	r2,-44(fp)
    3428:	e0bff615 	stw	r2,-40(fp)
				if (v2 >>= 1) {
    342c:	e0bff617 	ldw	r2,-40(fp)
    3430:	1005d07a 	srai	r2,r2,1
    3434:	e0bff615 	stw	r2,-40(fp)
    3438:	e0bff617 	ldw	r2,-40(fp)
    343c:	10002b26 	beq	r2,zero,34ec <encode_mcu+0x6ec>
					arith_encode(cinfo, st, 1);
    3440:	e13ffe17 	ldw	r4,-8(fp)
    3444:	e17ff117 	ldw	r5,-60(fp)
    3448:	01800044 	movi	r6,1
    344c:	0001a540 	call	1a54 <arith_encode>
					m <<= 1;
    3450:	e0bff717 	ldw	r2,-36(fp)
    3454:	1085883a 	add	r2,r2,r2
    3458:	e0bff715 	stw	r2,-36(fp)
					st = entropy->ac_stats[tbl] +
    345c:	e0fff817 	ldw	r3,-32(fp)
    3460:	e0bffd17 	ldw	r2,-12(fp)
    3464:	108008c4 	addi	r2,r2,35
    3468:	1085883a 	add	r2,r2,r2
    346c:	1085883a 	add	r2,r2,r2
    3470:	1885883a 	add	r2,r3,r2
    3474:	10c00017 	ldw	r3,0(r2)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
    3478:	e13ffe17 	ldw	r4,-8(fp)
    347c:	e0bffd17 	ldw	r2,-12(fp)
    3480:	2085883a 	add	r2,r4,r2
    3484:	10802d04 	addi	r2,r2,180
    3488:	10800003 	ldbu	r2,0(r2)
    348c:	11003fcc 	andi	r4,r2,255
				m = 1;
				v2 = v;
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
    3490:	e0bff317 	ldw	r2,-52(fp)
    3494:	20800216 	blt	r4,r2,34a0 <encode_mcu+0x6a0>
    3498:	00802f44 	movi	r2,189
    349c:	00000106 	br	34a4 <encode_mcu+0x6a4>
    34a0:	00803644 	movi	r2,217
    34a4:	1885883a 	add	r2,r3,r2
    34a8:	e0bff115 	stw	r2,-60(fp)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
    34ac:	00000a06 	br	34d8 <encode_mcu+0x6d8>
						arith_encode(cinfo, st, 1);
    34b0:	e13ffe17 	ldw	r4,-8(fp)
    34b4:	e17ff117 	ldw	r5,-60(fp)
    34b8:	01800044 	movi	r6,1
    34bc:	0001a540 	call	1a54 <arith_encode>
						m <<= 1;
    34c0:	e0bff717 	ldw	r2,-36(fp)
    34c4:	1085883a 	add	r2,r2,r2
    34c8:	e0bff715 	stw	r2,-36(fp)
						st += 1;
    34cc:	e0bff117 	ldw	r2,-60(fp)
    34d0:	10800044 	addi	r2,r2,1
    34d4:	e0bff115 	stw	r2,-60(fp)
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
    34d8:	e0bff617 	ldw	r2,-40(fp)
    34dc:	1005d07a 	srai	r2,r2,1
    34e0:	e0bff615 	stw	r2,-40(fp)
    34e4:	e0bff617 	ldw	r2,-40(fp)
    34e8:	103ff11e 	bne	r2,zero,34b0 <encode_mcu+0x6b0>
						m <<= 1;
						st += 1;
					}
				}
			}
			arith_encode(cinfo, st, 0);
    34ec:	e13ffe17 	ldw	r4,-8(fp)
    34f0:	e17ff117 	ldw	r5,-60(fp)
    34f4:	000d883a 	mov	r6,zero
    34f8:	0001a540 	call	1a54 <arith_encode>
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
    34fc:	e0bff117 	ldw	r2,-60(fp)
    3500:	10800384 	addi	r2,r2,14
    3504:	e0bff115 	stw	r2,-60(fp)
			while (m >>= 1)
    3508:	00000906 	br	3530 <encode_mcu+0x730>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
    350c:	e0fff717 	ldw	r3,-36(fp)
    3510:	e0bff517 	ldw	r2,-44(fp)
    3514:	1884703a 	and	r2,r3,r2
    3518:	1004c03a 	cmpne	r2,r2,zero
    351c:	10803fcc 	andi	r2,r2,255
    3520:	e13ffe17 	ldw	r4,-8(fp)
    3524:	e17ff117 	ldw	r5,-60(fp)
    3528:	100d883a 	mov	r6,r2
    352c:	0001a540 	call	1a54 <arith_encode>
				}
			}
			arith_encode(cinfo, st, 0);
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
    3530:	e0bff717 	ldw	r2,-36(fp)
    3534:	1005d07a 	srai	r2,r2,1
    3538:	e0bff715 	stw	r2,-36(fp)
    353c:	e0bff717 	ldw	r2,-36(fp)
    3540:	103ff21e 	bne	r2,zero,350c <encode_mcu+0x70c>
		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
			if ((*block)[natural_order[ke]]) break;

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
    3544:	e0bff317 	ldw	r2,-52(fp)
    3548:	10800044 	addi	r2,r2,1
    354c:	e0bff315 	stw	r2,-52(fp)
    3550:	e0bff317 	ldw	r2,-52(fp)
    3554:	e0fff417 	ldw	r3,-48(fp)
    3558:	18bf5c0e 	bge	r3,r2,32cc <encode_mcu+0x4cc>
			st += 14;
			while (m >>= 1)
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}
		/* Encode EOB decision only if k <= cinfo->lim_Se */
		if (k <= cinfo->lim_Se) {
    355c:	e0bffe17 	ldw	r2,-8(fp)
    3560:	10c05b17 	ldw	r3,364(r2)
    3564:	e0bff317 	ldw	r2,-52(fp)
    3568:	18801216 	blt	r3,r2,35b4 <encode_mcu+0x7b4>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
    356c:	e0fff817 	ldw	r3,-32(fp)
    3570:	e0bffd17 	ldw	r2,-12(fp)
    3574:	108008c4 	addi	r2,r2,35
    3578:	1085883a 	add	r2,r2,r2
    357c:	1085883a 	add	r2,r2,r2
    3580:	1885883a 	add	r2,r3,r2
    3584:	11000017 	ldw	r4,0(r2)
    3588:	e0bff317 	ldw	r2,-52(fp)
    358c:	10ffffc4 	addi	r3,r2,-1
    3590:	1805883a 	mov	r2,r3
    3594:	1085883a 	add	r2,r2,r2
    3598:	10c5883a 	add	r2,r2,r3
    359c:	2085883a 	add	r2,r4,r2
    35a0:	e0bff115 	stw	r2,-60(fp)
			arith_encode(cinfo, st, 1);
    35a4:	e13ffe17 	ldw	r4,-8(fp)
    35a8:	e17ff117 	ldw	r5,-60(fp)
    35ac:	01800044 	movi	r6,1
    35b0:	0001a540 	call	1a54 <arith_encode>
	}

	natural_order = cinfo->natural_order;

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    35b4:	e0bff217 	ldw	r2,-56(fp)
    35b8:	10800044 	addi	r2,r2,1
    35bc:	e0bff215 	stw	r2,-56(fp)
    35c0:	e0bffe17 	ldw	r2,-8(fp)
    35c4:	10804a17 	ldw	r2,296(r2)
    35c8:	e0fff217 	ldw	r3,-56(fp)
    35cc:	18be3816 	blt	r3,r2,2eb0 <encode_mcu+0xb0>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
			arith_encode(cinfo, st, 1);
		}
	}

	return TRUE;
    35d0:	00800044 	movi	r2,1
}
    35d4:	e037883a 	mov	sp,fp
    35d8:	dfc00117 	ldw	ra,4(sp)
    35dc:	df000017 	ldw	fp,0(sp)
    35e0:	dec00204 	addi	sp,sp,8
    35e4:	f800283a 	ret

000035e8 <start_pass>:
* Initialize for an arithmetic-compressed scan.
*/

METHODDEF(void)
	start_pass (j_compress_ptr cinfo, boolean gather_statistics)
{
    35e8:	defff804 	addi	sp,sp,-32
    35ec:	dfc00715 	stw	ra,28(sp)
    35f0:	df000615 	stw	fp,24(sp)
    35f4:	df000604 	addi	fp,sp,24
    35f8:	e13ffe15 	stw	r4,-8(fp)
    35fc:	2805883a 	mov	r2,r5
    3600:	e0bfff05 	stb	r2,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
    3604:	e0bffe17 	ldw	r2,-8(fp)
    3608:	10806417 	ldw	r2,400(r2)
    360c:	e0bffb15 	stw	r2,-20(fp)
	int ci, tbl;
	jpeg_component_info * compptr;

	if (gather_statistics)
    3610:	e0bfff03 	ldbu	r2,-4(fp)
    3614:	10000926 	beq	r2,zero,363c <start_pass+0x54>
		/* Make sure to avoid that in the master control logic!
		* We are fully adaptive here and need no extra
		* statistics gathering pass!
		*/
		ERREXIT(cinfo, JERR_NOT_COMPILED);
    3618:	e0bffe17 	ldw	r2,-8(fp)
    361c:	10800017 	ldw	r2,0(r2)
    3620:	00c00c44 	movi	r3,49
    3624:	10c00515 	stw	r3,20(r2)
    3628:	e0bffe17 	ldw	r2,-8(fp)
    362c:	10800017 	ldw	r2,0(r2)
    3630:	10800017 	ldw	r2,0(r2)
    3634:	e13ffe17 	ldw	r4,-8(fp)
    3638:	103ee83a 	callr	r2

	/* We assume jcmaster.c already validated the progressive scan parameters. */

	/* Select execution routines */
	if (cinfo->progressive_mode) {
    363c:	e0bffe17 	ldw	r2,-8(fp)
    3640:	10803d03 	ldbu	r2,244(r2)
    3644:	10803fcc 	andi	r2,r2,255
    3648:	10001d26 	beq	r2,zero,36c0 <start_pass+0xd8>
		if (cinfo->Ah == 0) {
    364c:	e0bffe17 	ldw	r2,-8(fp)
    3650:	10805717 	ldw	r2,348(r2)
    3654:	10000d1e 	bne	r2,zero,368c <start_pass+0xa4>
			if (cinfo->Ss == 0)
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	10805517 	ldw	r2,340(r2)
    3660:	1000051e 	bne	r2,zero,3678 <start_pass+0x90>
				entropy->pub.encode_mcu = encode_mcu_DC_first;
    3664:	e0bffb17 	ldw	r2,-20(fp)
    3668:	00c00034 	movhi	r3,0
    366c:	18c7bc04 	addi	r3,r3,7920
    3670:	10c00115 	stw	r3,4(r2)
    3674:	00001606 	br	36d0 <start_pass+0xe8>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_first;
    3678:	e0bffb17 	ldw	r2,-20(fp)
    367c:	00c00034 	movhi	r3,0
    3680:	18c8d904 	addi	r3,r3,9060
    3684:	10c00115 	stw	r3,4(r2)
    3688:	00001106 	br	36d0 <start_pass+0xe8>
		} else {
			if (cinfo->Ss == 0)
    368c:	e0bffe17 	ldw	r2,-8(fp)
    3690:	10805517 	ldw	r2,340(r2)
    3694:	1000051e 	bne	r2,zero,36ac <start_pass+0xc4>
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
    3698:	e0bffb17 	ldw	r2,-20(fp)
    369c:	00c00034 	movhi	r3,0
    36a0:	18ca0e04 	addi	r3,r3,10296
    36a4:	10c00115 	stw	r3,4(r2)
    36a8:	00000906 	br	36d0 <start_pass+0xe8>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
    36ac:	e0bffb17 	ldw	r2,-20(fp)
    36b0:	00c00034 	movhi	r3,0
    36b4:	18ca5b04 	addi	r3,r3,10604
    36b8:	10c00115 	stw	r3,4(r2)
    36bc:	00000406 	br	36d0 <start_pass+0xe8>
		}
	} else
		entropy->pub.encode_mcu = encode_mcu;
    36c0:	e0bffb17 	ldw	r2,-20(fp)
    36c4:	00c00034 	movhi	r3,0
    36c8:	18cb8004 	addi	r3,r3,11776
    36cc:	10c00115 	stw	r3,4(r2)

	/* Allocate & initialize requested statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    36d0:	e03ffa15 	stw	zero,-24(fp)
    36d4:	00009006 	br	3918 <start_pass+0x330>
		compptr = cinfo->cur_comp_info[ci];
    36d8:	e0fffe17 	ldw	r3,-8(fp)
    36dc:	e0bffa17 	ldw	r2,-24(fp)
    36e0:	10801104 	addi	r2,r2,68
    36e4:	1085883a 	add	r2,r2,r2
    36e8:	1085883a 	add	r2,r2,r2
    36ec:	1885883a 	add	r2,r3,r2
    36f0:	10800017 	ldw	r2,0(r2)
    36f4:	e0bffc15 	stw	r2,-16(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
    36f8:	e0bffe17 	ldw	r2,-8(fp)
    36fc:	10805517 	ldw	r2,340(r2)
    3700:	1000481e 	bne	r2,zero,3824 <start_pass+0x23c>
    3704:	e0bffe17 	ldw	r2,-8(fp)
    3708:	10805717 	ldw	r2,348(r2)
    370c:	1000451e 	bne	r2,zero,3824 <start_pass+0x23c>
			tbl = compptr->dc_tbl_no;
    3710:	e0bffc17 	ldw	r2,-16(fp)
    3714:	10800517 	ldw	r2,20(r2)
    3718:	e0bffd15 	stw	r2,-12(fp)
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
    371c:	e0bffd17 	ldw	r2,-12(fp)
    3720:	10000316 	blt	r2,zero,3730 <start_pass+0x148>
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10800410 	cmplti	r2,r2,16
    372c:	10000d1e 	bne	r2,zero,3764 <start_pass+0x17c>
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
    3730:	e0bffe17 	ldw	r2,-8(fp)
    3734:	10800017 	ldw	r2,0(r2)
    3738:	00c00c84 	movi	r3,50
    373c:	10c00515 	stw	r3,20(r2)
    3740:	e0bffe17 	ldw	r2,-8(fp)
    3744:	10800017 	ldw	r2,0(r2)
    3748:	e0fffd17 	ldw	r3,-12(fp)
    374c:	10c00615 	stw	r3,24(r2)
    3750:	e0bffe17 	ldw	r2,-8(fp)
    3754:	10800017 	ldw	r2,0(r2)
    3758:	10800017 	ldw	r2,0(r2)
    375c:	e13ffe17 	ldw	r4,-8(fp)
    3760:	103ee83a 	callr	r2
			if (entropy->dc_stats[tbl] == NULL)
    3764:	e0fffb17 	ldw	r3,-20(fp)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	108004c4 	addi	r2,r2,19
    3770:	1085883a 	add	r2,r2,r2
    3774:	1085883a 	add	r2,r2,r2
    3778:	1885883a 	add	r2,r3,r2
    377c:	10800017 	ldw	r2,0(r2)
    3780:	10000f1e 	bne	r2,zero,37c0 <start_pass+0x1d8>
				entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
    3784:	e0bffe17 	ldw	r2,-8(fp)
    3788:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
    378c:	10800017 	ldw	r2,0(r2)
    3790:	e13ffe17 	ldw	r4,-8(fp)
    3794:	01400044 	movi	r5,1
    3798:	01801004 	movi	r6,64
    379c:	103ee83a 	callr	r2
    37a0:	1007883a 	mov	r3,r2
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
			tbl = compptr->dc_tbl_no;
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
			if (entropy->dc_stats[tbl] == NULL)
				entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
    37a4:	e13ffb17 	ldw	r4,-20(fp)
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	108004c4 	addi	r2,r2,19
    37b0:	1085883a 	add	r2,r2,r2
    37b4:	1085883a 	add	r2,r2,r2
    37b8:	2085883a 	add	r2,r4,r2
    37bc:	10c00015 	stw	r3,0(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
			MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
    37c0:	e0fffb17 	ldw	r3,-20(fp)
    37c4:	e0bffd17 	ldw	r2,-12(fp)
    37c8:	108004c4 	addi	r2,r2,19
    37cc:	1085883a 	add	r2,r2,r2
    37d0:	1085883a 	add	r2,r2,r2
    37d4:	1885883a 	add	r2,r3,r2
    37d8:	10800017 	ldw	r2,0(r2)
    37dc:	1009883a 	mov	r4,r2
    37e0:	000b883a 	mov	r5,zero
    37e4:	01801004 	movi	r6,64
    37e8:	002ec2c0 	call	2ec2c <memset>
			/* Initialize DC predictions to 0 */
			entropy->last_dc_val[ci] = 0;
    37ec:	e0fffb17 	ldw	r3,-20(fp)
    37f0:	e0bffa17 	ldw	r2,-24(fp)
    37f4:	10800244 	addi	r2,r2,9
    37f8:	1085883a 	add	r2,r2,r2
    37fc:	1085883a 	add	r2,r2,r2
    3800:	1885883a 	add	r2,r3,r2
    3804:	10000015 	stw	zero,0(r2)
			entropy->dc_context[ci] = 0;
    3808:	e0fffb17 	ldw	r3,-20(fp)
    380c:	e0bffa17 	ldw	r2,-24(fp)
    3810:	10800344 	addi	r2,r2,13
    3814:	1085883a 	add	r2,r2,r2
    3818:	1085883a 	add	r2,r2,r2
    381c:	1885883a 	add	r2,r3,r2
    3820:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
    3824:	e0bffe17 	ldw	r2,-8(fp)
    3828:	10805617 	ldw	r2,344(r2)
    382c:	10003726 	beq	r2,zero,390c <start_pass+0x324>
			tbl = compptr->ac_tbl_no;
    3830:	e0bffc17 	ldw	r2,-16(fp)
    3834:	10800617 	ldw	r2,24(r2)
    3838:	e0bffd15 	stw	r2,-12(fp)
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
    383c:	e0bffd17 	ldw	r2,-12(fp)
    3840:	10000316 	blt	r2,zero,3850 <start_pass+0x268>
    3844:	e0bffd17 	ldw	r2,-12(fp)
    3848:	10800410 	cmplti	r2,r2,16
    384c:	10000d1e 	bne	r2,zero,3884 <start_pass+0x29c>
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
    3850:	e0bffe17 	ldw	r2,-8(fp)
    3854:	10800017 	ldw	r2,0(r2)
    3858:	00c00c84 	movi	r3,50
    385c:	10c00515 	stw	r3,20(r2)
    3860:	e0bffe17 	ldw	r2,-8(fp)
    3864:	10800017 	ldw	r2,0(r2)
    3868:	e0fffd17 	ldw	r3,-12(fp)
    386c:	10c00615 	stw	r3,24(r2)
    3870:	e0bffe17 	ldw	r2,-8(fp)
    3874:	10800017 	ldw	r2,0(r2)
    3878:	10800017 	ldw	r2,0(r2)
    387c:	e13ffe17 	ldw	r4,-8(fp)
    3880:	103ee83a 	callr	r2
			if (entropy->ac_stats[tbl] == NULL)
    3884:	e0fffb17 	ldw	r3,-20(fp)
    3888:	e0bffd17 	ldw	r2,-12(fp)
    388c:	108008c4 	addi	r2,r2,35
    3890:	1085883a 	add	r2,r2,r2
    3894:	1085883a 	add	r2,r2,r2
    3898:	1885883a 	add	r2,r3,r2
    389c:	10800017 	ldw	r2,0(r2)
    38a0:	10000f1e 	bne	r2,zero,38e0 <start_pass+0x2f8>
				entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
    38a4:	e0bffe17 	ldw	r2,-8(fp)
    38a8:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
    38ac:	10800017 	ldw	r2,0(r2)
    38b0:	e13ffe17 	ldw	r4,-8(fp)
    38b4:	01400044 	movi	r5,1
    38b8:	01804004 	movi	r6,256
    38bc:	103ee83a 	callr	r2
    38c0:	1007883a 	mov	r3,r2
		if (cinfo->Se) {
			tbl = compptr->ac_tbl_no;
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
			if (entropy->ac_stats[tbl] == NULL)
				entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
    38c4:	e13ffb17 	ldw	r4,-20(fp)
    38c8:	e0bffd17 	ldw	r2,-12(fp)
    38cc:	108008c4 	addi	r2,r2,35
    38d0:	1085883a 	add	r2,r2,r2
    38d4:	1085883a 	add	r2,r2,r2
    38d8:	2085883a 	add	r2,r4,r2
    38dc:	10c00015 	stw	r3,0(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
			MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
    38e0:	e0fffb17 	ldw	r3,-20(fp)
    38e4:	e0bffd17 	ldw	r2,-12(fp)
    38e8:	108008c4 	addi	r2,r2,35
    38ec:	1085883a 	add	r2,r2,r2
    38f0:	1085883a 	add	r2,r2,r2
    38f4:	1885883a 	add	r2,r3,r2
    38f8:	10800017 	ldw	r2,0(r2)
    38fc:	1009883a 	mov	r4,r2
    3900:	000b883a 	mov	r5,zero
    3904:	01804004 	movi	r6,256
    3908:	002ec2c0 	call	2ec2c <memset>
		}
	} else
		entropy->pub.encode_mcu = encode_mcu;

	/* Allocate & initialize requested statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    390c:	e0bffa17 	ldw	r2,-24(fp)
    3910:	10800044 	addi	r2,r2,1
    3914:	e0bffa15 	stw	r2,-24(fp)
    3918:	e0bffe17 	ldw	r2,-8(fp)
    391c:	10804317 	ldw	r2,268(r2)
    3920:	e0fffa17 	ldw	r3,-24(fp)
    3924:	18bf6c16 	blt	r3,r2,36d8 <start_pass+0xf0>
#endif
		}
	}

	/* Initialize arithmetic encoding variables */
	entropy->c = 0;
    3928:	e0bffb17 	ldw	r2,-20(fp)
    392c:	10000315 	stw	zero,12(r2)
	entropy->a = 0x10000L;
    3930:	e0bffb17 	ldw	r2,-20(fp)
    3934:	00c00074 	movhi	r3,1
    3938:	10c00415 	stw	r3,16(r2)
	entropy->sc = 0;
    393c:	e0bffb17 	ldw	r2,-20(fp)
    3940:	10000515 	stw	zero,20(r2)
	entropy->zc = 0;
    3944:	e0bffb17 	ldw	r2,-20(fp)
    3948:	10000615 	stw	zero,24(r2)
	entropy->ct = 11;
    394c:	e0bffb17 	ldw	r2,-20(fp)
    3950:	00c002c4 	movi	r3,11
    3954:	10c00715 	stw	r3,28(r2)
	entropy->buffer = -1;  /* empty */
    3958:	e0bffb17 	ldw	r2,-20(fp)
    395c:	00ffffc4 	movi	r3,-1
    3960:	10c00815 	stw	r3,32(r2)

	/* Initialize restart stuff */
	entropy->restarts_to_go = cinfo->restart_interval;
    3964:	e0bffe17 	ldw	r2,-8(fp)
    3968:	10c03717 	ldw	r3,220(r2)
    396c:	e0bffb17 	ldw	r2,-20(fp)
    3970:	10c01115 	stw	r3,68(r2)
	entropy->next_restart_num = 0;
    3974:	e0bffb17 	ldw	r2,-20(fp)
    3978:	10001215 	stw	zero,72(r2)
}
    397c:	e037883a 	mov	sp,fp
    3980:	dfc00117 	ldw	ra,4(sp)
    3984:	df000017 	ldw	fp,0(sp)
    3988:	dec00204 	addi	sp,sp,8
    398c:	f800283a 	ret

00003990 <jinit_arith_encoder>:
* Module initialization routine for arithmetic entropy encoding.
*/

GLOBAL(void)
	jinit_arith_encoder (j_compress_ptr cinfo)
{
    3990:	defffb04 	addi	sp,sp,-20
    3994:	dfc00415 	stw	ra,16(sp)
    3998:	df000315 	stw	fp,12(sp)
    399c:	df000304 	addi	fp,sp,12
    39a0:	e13fff15 	stw	r4,-4(fp)
	arith_entropy_ptr entropy;
	int i;

	entropy = (arith_entropy_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    39a4:	e0bfff17 	ldw	r2,-4(fp)
    39a8:	10800117 	ldw	r2,4(r2)
    39ac:	10800017 	ldw	r2,0(r2)
	jinit_arith_encoder (j_compress_ptr cinfo)
{
	arith_entropy_ptr entropy;
	int i;

	entropy = (arith_entropy_ptr)
    39b0:	e13fff17 	ldw	r4,-4(fp)
    39b4:	01400044 	movi	r5,1
    39b8:	01803404 	movi	r6,208
    39bc:	103ee83a 	callr	r2
    39c0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(arith_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
    39c4:	e0bfff17 	ldw	r2,-4(fp)
    39c8:	e0fffe17 	ldw	r3,-8(fp)
    39cc:	10c06415 	stw	r3,400(r2)
	entropy->pub.start_pass = start_pass;
    39d0:	e0bffe17 	ldw	r2,-8(fp)
    39d4:	00c00034 	movhi	r3,0
    39d8:	18cd7a04 	addi	r3,r3,13800
    39dc:	10c00015 	stw	r3,0(r2)
	entropy->pub.finish_pass = finish_pass;
    39e0:	e0bffe17 	ldw	r2,-8(fp)
    39e4:	00c00034 	movhi	r3,0
    39e8:	18c5c804 	addi	r3,r3,5920
    39ec:	10c00215 	stw	r3,8(r2)

	/* Mark tables unallocated */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
    39f0:	e03ffd15 	stw	zero,-12(fp)
    39f4:	00001106 	br	3a3c <jinit_arith_encoder+0xac>
		entropy->dc_stats[i] = NULL;
    39f8:	e0fffe17 	ldw	r3,-8(fp)
    39fc:	e0bffd17 	ldw	r2,-12(fp)
    3a00:	108004c4 	addi	r2,r2,19
    3a04:	1085883a 	add	r2,r2,r2
    3a08:	1085883a 	add	r2,r2,r2
    3a0c:	1885883a 	add	r2,r3,r2
    3a10:	10000015 	stw	zero,0(r2)
		entropy->ac_stats[i] = NULL;
    3a14:	e0fffe17 	ldw	r3,-8(fp)
    3a18:	e0bffd17 	ldw	r2,-12(fp)
    3a1c:	108008c4 	addi	r2,r2,35
    3a20:	1085883a 	add	r2,r2,r2
    3a24:	1085883a 	add	r2,r2,r2
    3a28:	1885883a 	add	r2,r3,r2
    3a2c:	10000015 	stw	zero,0(r2)
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
	entropy->pub.start_pass = start_pass;
	entropy->pub.finish_pass = finish_pass;

	/* Mark tables unallocated */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
    3a30:	e0bffd17 	ldw	r2,-12(fp)
    3a34:	10800044 	addi	r2,r2,1
    3a38:	e0bffd15 	stw	r2,-12(fp)
    3a3c:	e0bffd17 	ldw	r2,-12(fp)
    3a40:	10800410 	cmplti	r2,r2,16
    3a44:	103fec1e 	bne	r2,zero,39f8 <jinit_arith_encoder+0x68>
		entropy->dc_stats[i] = NULL;
		entropy->ac_stats[i] = NULL;
	}

	/* Initialize index for fixed probability estimation */
	entropy->fixed_bin[0] = 113;
    3a48:	e0bffe17 	ldw	r2,-8(fp)
    3a4c:	00c01c44 	movi	r3,113
    3a50:	10c03305 	stb	r3,204(r2)
}
    3a54:	e037883a 	mov	sp,fp
    3a58:	dfc00117 	ldw	ra,4(sp)
    3a5c:	df000017 	ldw	fp,0(sp)
    3a60:	dec00204 	addi	sp,sp,8
    3a64:	f800283a 	ret

00003a68 <start_iMCU_row>:


LOCAL(void)
	start_iMCU_row (j_compress_ptr cinfo)
	/* Reset within-iMCU-row counters for a new row */
{
    3a68:	defffd04 	addi	sp,sp,-12
    3a6c:	df000215 	stw	fp,8(sp)
    3a70:	df000204 	addi	fp,sp,8
    3a74:	e13fff15 	stw	r4,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
    3a78:	e0bfff17 	ldw	r2,-4(fp)
    3a7c:	10805f17 	ldw	r2,380(r2)
    3a80:	e0bffe15 	stw	r2,-8(fp)

	/* In an interleaved scan, an MCU row is the same as an iMCU row.
	* In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
	* But at the bottom of the image, process only what's left.
	*/
	if (cinfo->comps_in_scan > 1) {
    3a84:	e0bfff17 	ldw	r2,-4(fp)
    3a88:	10804317 	ldw	r2,268(r2)
    3a8c:	10800090 	cmplti	r2,r2,2
    3a90:	1000041e 	bne	r2,zero,3aa4 <start_iMCU_row+0x3c>
		coef->MCU_rows_per_iMCU_row = 1;
    3a94:	e0bffe17 	ldw	r2,-8(fp)
    3a98:	00c00044 	movi	r3,1
    3a9c:	10c00515 	stw	r3,20(r2)
    3aa0:	00001106 	br	3ae8 <start_iMCU_row+0x80>
	} else {
		if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
    3aa4:	e0bffe17 	ldw	r2,-8(fp)
    3aa8:	10c00217 	ldw	r3,8(r2)
    3aac:	e0bfff17 	ldw	r2,-4(fp)
    3ab0:	10804217 	ldw	r2,264(r2)
    3ab4:	10bfffc4 	addi	r2,r2,-1
    3ab8:	1880062e 	bgeu	r3,r2,3ad4 <start_iMCU_row+0x6c>
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    3abc:	e0bfff17 	ldw	r2,-4(fp)
    3ac0:	10804417 	ldw	r2,272(r2)
    3ac4:	10c00317 	ldw	r3,12(r2)
    3ac8:	e0bffe17 	ldw	r2,-8(fp)
    3acc:	10c00515 	stw	r3,20(r2)
    3ad0:	00000506 	br	3ae8 <start_iMCU_row+0x80>
		else
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
    3ad4:	e0bfff17 	ldw	r2,-4(fp)
    3ad8:	10804417 	ldw	r2,272(r2)
    3adc:	10c01317 	ldw	r3,76(r2)
    3ae0:	e0bffe17 	ldw	r2,-8(fp)
    3ae4:	10c00515 	stw	r3,20(r2)
	}

	coef->mcu_ctr = 0;
    3ae8:	e0bffe17 	ldw	r2,-8(fp)
    3aec:	10000315 	stw	zero,12(r2)
	coef->MCU_vert_offset = 0;
    3af0:	e0bffe17 	ldw	r2,-8(fp)
    3af4:	10000415 	stw	zero,16(r2)
}
    3af8:	e037883a 	mov	sp,fp
    3afc:	df000017 	ldw	fp,0(sp)
    3b00:	dec00104 	addi	sp,sp,4
    3b04:	f800283a 	ret

00003b08 <start_pass_coef>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
    3b08:	defffb04 	addi	sp,sp,-20
    3b0c:	dfc00415 	stw	ra,16(sp)
    3b10:	df000315 	stw	fp,12(sp)
    3b14:	df000304 	addi	fp,sp,12
    3b18:	e13ffe15 	stw	r4,-8(fp)
    3b1c:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10805f17 	ldw	r2,380(r2)
    3b28:	e0bffd15 	stw	r2,-12(fp)

	coef->iMCU_row_num = 0;
    3b2c:	e0bffd17 	ldw	r2,-12(fp)
    3b30:	10000215 	stw	zero,8(r2)
	start_iMCU_row(cinfo);
    3b34:	e13ffe17 	ldw	r4,-8(fp)
    3b38:	0003a680 	call	3a68 <start_iMCU_row>

	switch (pass_mode) {
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	10c000a0 	cmpeqi	r3,r2,2
    3b44:	1800251e 	bne	r3,zero,3bdc <start_pass_coef+0xd4>
    3b48:	10c000e0 	cmpeqi	r3,r2,3
    3b4c:	1800121e 	bne	r3,zero,3b98 <start_pass_coef+0x90>
    3b50:	1000331e 	bne	r2,zero,3c20 <start_pass_coef+0x118>
	case JBUF_PASS_THRU:
		if (coef->whole_image[0] != NULL)
    3b54:	e0bffd17 	ldw	r2,-12(fp)
    3b58:	10801017 	ldw	r2,64(r2)
    3b5c:	10000926 	beq	r2,zero,3b84 <start_pass_coef+0x7c>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    3b60:	e0bffe17 	ldw	r2,-8(fp)
    3b64:	10800017 	ldw	r2,0(r2)
    3b68:	00c000c4 	movi	r3,3
    3b6c:	10c00515 	stw	r3,20(r2)
    3b70:	e0bffe17 	ldw	r2,-8(fp)
    3b74:	10800017 	ldw	r2,0(r2)
    3b78:	10800017 	ldw	r2,0(r2)
    3b7c:	e13ffe17 	ldw	r4,-8(fp)
    3b80:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_data;
    3b84:	e0bffd17 	ldw	r2,-12(fp)
    3b88:	00c00034 	movhi	r3,0
    3b8c:	18cf1704 	addi	r3,r3,15452
    3b90:	10c00115 	stw	r3,4(r2)
		break;
    3b94:	00002c06 	br	3c48 <start_pass_coef+0x140>
#ifdef FULL_COEF_BUFFER_SUPPORTED
	case JBUF_SAVE_AND_PASS:
		if (coef->whole_image[0] == NULL)
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	10801017 	ldw	r2,64(r2)
    3ba0:	1000091e 	bne	r2,zero,3bc8 <start_pass_coef+0xc0>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    3ba4:	e0bffe17 	ldw	r2,-8(fp)
    3ba8:	10800017 	ldw	r2,0(r2)
    3bac:	00c000c4 	movi	r3,3
    3bb0:	10c00515 	stw	r3,20(r2)
    3bb4:	e0bffe17 	ldw	r2,-8(fp)
    3bb8:	10800017 	ldw	r2,0(r2)
    3bbc:	10800017 	ldw	r2,0(r2)
    3bc0:	e13ffe17 	ldw	r4,-8(fp)
    3bc4:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_first_pass;
    3bc8:	e0bffd17 	ldw	r2,-12(fp)
    3bcc:	00c00034 	movhi	r3,0
    3bd0:	18d02404 	addi	r3,r3,16528
    3bd4:	10c00115 	stw	r3,4(r2)
		break;
    3bd8:	00001b06 	br	3c48 <start_pass_coef+0x140>
	case JBUF_CRANK_DEST:
		if (coef->whole_image[0] == NULL)
    3bdc:	e0bffd17 	ldw	r2,-12(fp)
    3be0:	10801017 	ldw	r2,64(r2)
    3be4:	1000091e 	bne	r2,zero,3c0c <start_pass_coef+0x104>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    3be8:	e0bffe17 	ldw	r2,-8(fp)
    3bec:	10800017 	ldw	r2,0(r2)
    3bf0:	00c000c4 	movi	r3,3
    3bf4:	10c00515 	stw	r3,20(r2)
    3bf8:	e0bffe17 	ldw	r2,-8(fp)
    3bfc:	10800017 	ldw	r2,0(r2)
    3c00:	10800017 	ldw	r2,0(r2)
    3c04:	e13ffe17 	ldw	r4,-8(fp)
    3c08:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_output;
    3c0c:	e0bffd17 	ldw	r2,-12(fp)
    3c10:	00c00034 	movhi	r3,0
    3c14:	18d12c04 	addi	r3,r3,17584
    3c18:	10c00115 	stw	r3,4(r2)
		break;
    3c1c:	00000a06 	br	3c48 <start_pass_coef+0x140>
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    3c20:	e0bffe17 	ldw	r2,-8(fp)
    3c24:	10800017 	ldw	r2,0(r2)
    3c28:	00c000c4 	movi	r3,3
    3c2c:	10c00515 	stw	r3,20(r2)
    3c30:	e0bffe17 	ldw	r2,-8(fp)
    3c34:	10800017 	ldw	r2,0(r2)
    3c38:	10800017 	ldw	r2,0(r2)
    3c3c:	e13ffe17 	ldw	r4,-8(fp)
    3c40:	103ee83a 	callr	r2
		break;
    3c44:	0001883a 	nop
	}
}
    3c48:	e037883a 	mov	sp,fp
    3c4c:	dfc00117 	ldw	ra,4(sp)
    3c50:	df000017 	ldw	fp,0(sp)
    3c54:	dec00204 	addi	sp,sp,8
    3c58:	f800283a 	ret

00003c5c <compress_data>:
* which we index according to the component's SOF position.
*/

METHODDEF(boolean)
	compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
    3c5c:	deffeb04 	addi	sp,sp,-84
    3c60:	dfc01415 	stw	ra,80(sp)
    3c64:	df001315 	stw	fp,76(sp)
    3c68:	df001304 	addi	fp,sp,76
    3c6c:	e13ffe15 	stw	r4,-8(fp)
    3c70:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
    3c74:	e0bffe17 	ldw	r2,-8(fp)
    3c78:	10805f17 	ldw	r2,380(r2)
    3c7c:	e0bff715 	stw	r2,-36(fp)
	JDIMENSION MCU_col_num;	/* index of current MCU within row */
	JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
    3c80:	e0bffe17 	ldw	r2,-8(fp)
    3c84:	10804817 	ldw	r2,288(r2)
    3c88:	10bfffc4 	addi	r2,r2,-1
    3c8c:	e0bff815 	stw	r2,-32(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
    3c90:	e0bffe17 	ldw	r2,-8(fp)
    3c94:	10804217 	ldw	r2,264(r2)
    3c98:	10bfffc4 	addi	r2,r2,-1
    3c9c:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION ypos, xpos;
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
    3ca0:	e0bff717 	ldw	r2,-36(fp)
    3ca4:	10800417 	ldw	r2,16(r2)
    3ca8:	e0bff515 	stw	r2,-44(fp)
    3cac:	0000e706 	br	404c <compress_data+0x3f0>
		for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col; MCU_col_num++) {
    3cb0:	e0bff717 	ldw	r2,-36(fp)
    3cb4:	10800317 	ldw	r2,12(r2)
    3cb8:	e0bff015 	stw	r2,-64(fp)
    3cbc:	0000db06 	br	402c <compress_data+0x3d0>
			* specially.  The data in them does not matter for image reconstruction,
			* so we fill them with values that will encode to the smallest amount of
			* data, viz: all zeroes in the AC entries, DC entries equal to previous
			* block's DC value.  (Thanks to Thomas Kinsman for this idea.)
			*/
			blkn = 0;
    3cc0:	e03ff115 	stw	zero,-60(fp)
			for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    3cc4:	e03ff315 	stw	zero,-52(fp)
    3cc8:	0000bf06 	br	3fc8 <compress_data+0x36c>
				compptr = cinfo->cur_comp_info[ci];
    3ccc:	e0fffe17 	ldw	r3,-8(fp)
    3cd0:	e0bff317 	ldw	r2,-52(fp)
    3cd4:	10801104 	addi	r2,r2,68
    3cd8:	1085883a 	add	r2,r2,r2
    3cdc:	1085883a 	add	r2,r2,r2
    3ce0:	1885883a 	add	r2,r3,r2
    3ce4:	10800017 	ldw	r2,0(r2)
    3ce8:	e0bffa15 	stw	r2,-24(fp)
				forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
    3cec:	e0bffe17 	ldw	r2,-8(fp)
    3cf0:	10c06317 	ldw	r3,396(r2)
    3cf4:	e0bffa17 	ldw	r2,-24(fp)
    3cf8:	10800117 	ldw	r2,4(r2)
    3cfc:	10800044 	addi	r2,r2,1
    3d00:	1085883a 	add	r2,r2,r2
    3d04:	1085883a 	add	r2,r2,r2
    3d08:	1885883a 	add	r2,r3,r2
    3d0c:	10800017 	ldw	r2,0(r2)
    3d10:	e0bffb15 	stw	r2,-20(fp)
				blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width : compptr->last_col_width;
    3d14:	e0fff017 	ldw	r3,-64(fp)
    3d18:	e0bff817 	ldw	r2,-32(fp)
    3d1c:	1880032e 	bgeu	r3,r2,3d2c <compress_data+0xd0>
    3d20:	e0bffa17 	ldw	r2,-24(fp)
    3d24:	10800e17 	ldw	r2,56(r2)
    3d28:	00000206 	br	3d34 <compress_data+0xd8>
    3d2c:	e0bffa17 	ldw	r2,-24(fp)
    3d30:	10801217 	ldw	r2,72(r2)
    3d34:	e0bffc15 	stw	r2,-16(fp)
				xpos = MCU_col_num * compptr->MCU_sample_width;
    3d38:	e0bffa17 	ldw	r2,-24(fp)
    3d3c:	10801117 	ldw	r2,68(r2)
    3d40:	1009883a 	mov	r4,r2
    3d44:	e17ff017 	ldw	r5,-64(fp)
    3d48:	002c1540 	call	2c154 <__mulsi3>
    3d4c:	e0bffd15 	stw	r2,-12(fp)
				ypos = yoffset * compptr->DCT_v_scaled_size;
    3d50:	e0bffa17 	ldw	r2,-24(fp)
    3d54:	10800a17 	ldw	r2,40(r2)
    3d58:	1009883a 	mov	r4,r2
    3d5c:	e17ff517 	ldw	r5,-44(fp)
    3d60:	002c1540 	call	2c154 <__mulsi3>
    3d64:	e0bff615 	stw	r2,-40(fp)
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
    3d68:	e03ff415 	stw	zero,-48(fp)
    3d6c:	00008f06 	br	3fac <compress_data+0x350>
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
    3d70:	e0bff717 	ldw	r2,-36(fp)
    3d74:	10c00217 	ldw	r3,8(r2)
    3d78:	e0bff917 	ldw	r2,-28(fp)
    3d7c:	18800636 	bltu	r3,r2,3d98 <compress_data+0x13c>
    3d80:	e0fff517 	ldw	r3,-44(fp)
    3d84:	e0bff417 	ldw	r2,-48(fp)
    3d88:	1887883a 	add	r3,r3,r2
    3d8c:	e0bffa17 	ldw	r2,-24(fp)
    3d90:	10801317 	ldw	r2,76(r2)
    3d94:	18804f0e 	bge	r3,r2,3ed4 <compress_data+0x278>
						(*forward_DCT) (cinfo, compptr,
							input_buf[compptr->component_index],
    3d98:	e0bffa17 	ldw	r2,-24(fp)
    3d9c:	10800117 	ldw	r2,4(r2)
    3da0:	1085883a 	add	r2,r2,r2
    3da4:	1085883a 	add	r2,r2,r2
    3da8:	e0ffff17 	ldw	r3,-4(fp)
    3dac:	1885883a 	add	r2,r3,r2
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
    3db0:	10c00017 	ldw	r3,0(r2)
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
    3db4:	e13ff717 	ldw	r4,-36(fp)
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
    3db8:	e0bff117 	ldw	r2,-60(fp)
    3dbc:	10800184 	addi	r2,r2,6
    3dc0:	1085883a 	add	r2,r2,r2
    3dc4:	1085883a 	add	r2,r2,r2
    3dc8:	2085883a 	add	r2,r4,r2
    3dcc:	10800017 	ldw	r2,0(r2)
    3dd0:	e13ffc17 	ldw	r4,-16(fp)
    3dd4:	e17ff617 	ldw	r5,-40(fp)
    3dd8:	d9400015 	stw	r5,0(sp)
    3ddc:	e17ffd17 	ldw	r5,-12(fp)
    3de0:	d9400115 	stw	r5,4(sp)
    3de4:	d9000215 	stw	r4,8(sp)
    3de8:	e23ffb17 	ldw	r8,-20(fp)
    3dec:	e13ffe17 	ldw	r4,-8(fp)
    3df0:	e17ffa17 	ldw	r5,-24(fp)
    3df4:	180d883a 	mov	r6,r3
    3df8:	100f883a 	mov	r7,r2
    3dfc:	403ee83a 	callr	r8
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
    3e00:	e0bffa17 	ldw	r2,-24(fp)
    3e04:	10800e17 	ldw	r2,56(r2)
    3e08:	e0fffc17 	ldw	r3,-16(fp)
    3e0c:	18805a0e 	bge	r3,r2,3f78 <compress_data+0x31c>
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
    3e10:	e0fff117 	ldw	r3,-60(fp)
    3e14:	e0bffc17 	ldw	r2,-16(fp)
    3e18:	1885883a 	add	r2,r3,r2
    3e1c:	e0fff717 	ldw	r3,-36(fp)
    3e20:	10800184 	addi	r2,r2,6
    3e24:	1085883a 	add	r2,r2,r2
    3e28:	1085883a 	add	r2,r2,r2
    3e2c:	1885883a 	add	r2,r3,r2
    3e30:	10c00017 	ldw	r3,0(r2)
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
    3e34:	e0bffa17 	ldw	r2,-24(fp)
    3e38:	11000e17 	ldw	r4,56(r2)
    3e3c:	e0bffc17 	ldw	r2,-16(fp)
    3e40:	2085c83a 	sub	r2,r4,r2
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
    3e44:	100491fa 	slli	r2,r2,7
    3e48:	1809883a 	mov	r4,r3
    3e4c:	100b883a 	mov	r5,r2
    3e50:	002b23c0 	call	2b23c <jzero_far>
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
							for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
    3e54:	e0bffc17 	ldw	r2,-16(fp)
    3e58:	e0bff215 	stw	r2,-56(fp)
    3e5c:	00001806 	br	3ec0 <compress_data+0x264>
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
    3e60:	e0fff117 	ldw	r3,-60(fp)
    3e64:	e0bff217 	ldw	r2,-56(fp)
    3e68:	1885883a 	add	r2,r3,r2
    3e6c:	e0fff717 	ldw	r3,-36(fp)
    3e70:	10800184 	addi	r2,r2,6
    3e74:	1085883a 	add	r2,r2,r2
    3e78:	1085883a 	add	r2,r2,r2
    3e7c:	1885883a 	add	r2,r3,r2
    3e80:	10c00017 	ldw	r3,0(r2)
    3e84:	e13ff117 	ldw	r4,-60(fp)
    3e88:	e0bff217 	ldw	r2,-56(fp)
    3e8c:	2085883a 	add	r2,r4,r2
    3e90:	10bfffc4 	addi	r2,r2,-1
    3e94:	e13ff717 	ldw	r4,-36(fp)
    3e98:	10800184 	addi	r2,r2,6
    3e9c:	1085883a 	add	r2,r2,r2
    3ea0:	1085883a 	add	r2,r2,r2
    3ea4:	2085883a 	add	r2,r4,r2
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	1080000b 	ldhu	r2,0(r2)
    3eb0:	1880000d 	sth	r2,0(r3)
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
							for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
    3eb4:	e0bff217 	ldw	r2,-56(fp)
    3eb8:	10800044 	addi	r2,r2,1
    3ebc:	e0bff215 	stw	r2,-56(fp)
    3ec0:	e0bffa17 	ldw	r2,-24(fp)
    3ec4:	10800e17 	ldw	r2,56(r2)
    3ec8:	e0fff217 	ldw	r3,-56(fp)
    3ecc:	18bfe416 	blt	r3,r2,3e60 <compress_data+0x204>
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
    3ed0:	00002906 	br	3f78 <compress_data+0x31c>
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
							}
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
    3ed4:	e0fff717 	ldw	r3,-36(fp)
    3ed8:	e0bff117 	ldw	r2,-60(fp)
    3edc:	10800184 	addi	r2,r2,6
    3ee0:	1085883a 	add	r2,r2,r2
    3ee4:	1085883a 	add	r2,r2,r2
    3ee8:	1885883a 	add	r2,r3,r2
    3eec:	10c00017 	ldw	r3,0(r2)
							compptr->MCU_width * SIZEOF(JBLOCK));
    3ef0:	e0bffa17 	ldw	r2,-24(fp)
    3ef4:	10800e17 	ldw	r2,56(r2)
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
							}
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
    3ef8:	100491fa 	slli	r2,r2,7
    3efc:	1809883a 	mov	r4,r3
    3f00:	100b883a 	mov	r5,r2
    3f04:	002b23c0 	call	2b23c <jzero_far>
							compptr->MCU_width * SIZEOF(JBLOCK));
						for (bi = 0; bi < compptr->MCU_width; bi++) {
    3f08:	e03ff215 	stw	zero,-56(fp)
    3f0c:	00001606 	br	3f68 <compress_data+0x30c>
							coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
    3f10:	e0fff117 	ldw	r3,-60(fp)
    3f14:	e0bff217 	ldw	r2,-56(fp)
    3f18:	1885883a 	add	r2,r3,r2
    3f1c:	e0fff717 	ldw	r3,-36(fp)
    3f20:	10800184 	addi	r2,r2,6
    3f24:	1085883a 	add	r2,r2,r2
    3f28:	1085883a 	add	r2,r2,r2
    3f2c:	1885883a 	add	r2,r3,r2
    3f30:	10c00017 	ldw	r3,0(r2)
    3f34:	e0bff117 	ldw	r2,-60(fp)
    3f38:	10bfffc4 	addi	r2,r2,-1
    3f3c:	e13ff717 	ldw	r4,-36(fp)
    3f40:	10800184 	addi	r2,r2,6
    3f44:	1085883a 	add	r2,r2,r2
    3f48:	1085883a 	add	r2,r2,r2
    3f4c:	2085883a 	add	r2,r4,r2
    3f50:	10800017 	ldw	r2,0(r2)
    3f54:	1080000b 	ldhu	r2,0(r2)
    3f58:	1880000d 	sth	r2,0(r3)
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
							compptr->MCU_width * SIZEOF(JBLOCK));
						for (bi = 0; bi < compptr->MCU_width; bi++) {
    3f5c:	e0bff217 	ldw	r2,-56(fp)
    3f60:	10800044 	addi	r2,r2,1
    3f64:	e0bff215 	stw	r2,-56(fp)
    3f68:	e0bffa17 	ldw	r2,-24(fp)
    3f6c:	10800e17 	ldw	r2,56(r2)
    3f70:	e0fff217 	ldw	r3,-56(fp)
    3f74:	18bfe616 	blt	r3,r2,3f10 <compress_data+0x2b4>
							coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
						}
					}
					blkn += compptr->MCU_width;
    3f78:	e0bffa17 	ldw	r2,-24(fp)
    3f7c:	10800e17 	ldw	r2,56(r2)
    3f80:	e0fff117 	ldw	r3,-60(fp)
    3f84:	1885883a 	add	r2,r3,r2
    3f88:	e0bff115 	stw	r2,-60(fp)
					ypos += compptr->DCT_v_scaled_size;
    3f8c:	e0bffa17 	ldw	r2,-24(fp)
    3f90:	10800a17 	ldw	r2,40(r2)
    3f94:	e0fff617 	ldw	r3,-40(fp)
    3f98:	1885883a 	add	r2,r3,r2
    3f9c:	e0bff615 	stw	r2,-40(fp)
				forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
				blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width : compptr->last_col_width;
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
    3fa0:	e0bff417 	ldw	r2,-48(fp)
    3fa4:	10800044 	addi	r2,r2,1
    3fa8:	e0bff415 	stw	r2,-48(fp)
    3fac:	e0bffa17 	ldw	r2,-24(fp)
    3fb0:	10800f17 	ldw	r2,60(r2)
    3fb4:	e0fff417 	ldw	r3,-48(fp)
    3fb8:	18bf6d16 	blt	r3,r2,3d70 <compress_data+0x114>
			* so we fill them with values that will encode to the smallest amount of
			* data, viz: all zeroes in the AC entries, DC entries equal to previous
			* block's DC value.  (Thanks to Thomas Kinsman for this idea.)
			*/
			blkn = 0;
			for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    3fbc:	e0bff317 	ldw	r2,-52(fp)
    3fc0:	10800044 	addi	r2,r2,1
    3fc4:	e0bff315 	stw	r2,-52(fp)
    3fc8:	e0bffe17 	ldw	r2,-8(fp)
    3fcc:	10804317 	ldw	r2,268(r2)
    3fd0:	e0fff317 	ldw	r3,-52(fp)
    3fd4:	18bf3d16 	blt	r3,r2,3ccc <compress_data+0x70>
				}
			}
			/* Try to write the MCU.  In event of a suspension failure, we will
			* re-DCT the MCU on restart (a bit inefficient, could be fixed...)
			*/
			if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
    3fd8:	e0bffe17 	ldw	r2,-8(fp)
    3fdc:	10806417 	ldw	r2,400(r2)
    3fe0:	10c00117 	ldw	r3,4(r2)
    3fe4:	e0bff717 	ldw	r2,-36(fp)
    3fe8:	10800604 	addi	r2,r2,24
    3fec:	e13ffe17 	ldw	r4,-8(fp)
    3ff0:	100b883a 	mov	r5,r2
    3ff4:	183ee83a 	callr	r3
    3ff8:	10803fcc 	andi	r2,r2,255
    3ffc:	1000081e 	bne	r2,zero,4020 <compress_data+0x3c4>
				/* Suspension forced; update state counters and exit */
				coef->MCU_vert_offset = yoffset;
    4000:	e0bff717 	ldw	r2,-36(fp)
    4004:	e0fff517 	ldw	r3,-44(fp)
    4008:	10c00415 	stw	r3,16(r2)
				coef->mcu_ctr = MCU_col_num;
    400c:	e0bff717 	ldw	r2,-36(fp)
    4010:	e0fff017 	ldw	r3,-64(fp)
    4014:	10c00315 	stw	r3,12(r2)
				return FALSE;
    4018:	0005883a 	mov	r2,zero
    401c:	00001706 	br	407c <compress_data+0x420>
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
		for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col; MCU_col_num++) {
    4020:	e0bff017 	ldw	r2,-64(fp)
    4024:	10800044 	addi	r2,r2,1
    4028:	e0bff015 	stw	r2,-64(fp)
    402c:	e0bff017 	ldw	r2,-64(fp)
    4030:	e0fff817 	ldw	r3,-32(fp)
    4034:	18bf222e 	bgeu	r3,r2,3cc0 <compress_data+0x64>
				coef->mcu_ctr = MCU_col_num;
				return FALSE;
			}
		}
		/* Completed an MCU row, but perhaps not an iMCU row */
		coef->mcu_ctr = 0;
    4038:	e0bff717 	ldw	r2,-36(fp)
    403c:	10000315 	stw	zero,12(r2)
	JDIMENSION ypos, xpos;
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
    4040:	e0bff517 	ldw	r2,-44(fp)
    4044:	10800044 	addi	r2,r2,1
    4048:	e0bff515 	stw	r2,-44(fp)
    404c:	e0bff717 	ldw	r2,-36(fp)
    4050:	10800517 	ldw	r2,20(r2)
    4054:	e0fff517 	ldw	r3,-44(fp)
    4058:	18bf1516 	blt	r3,r2,3cb0 <compress_data+0x54>
		}
		/* Completed an MCU row, but perhaps not an iMCU row */
		coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
    405c:	e0bff717 	ldw	r2,-36(fp)
    4060:	10800217 	ldw	r2,8(r2)
    4064:	10c00044 	addi	r3,r2,1
    4068:	e0bff717 	ldw	r2,-36(fp)
    406c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
    4070:	e13ffe17 	ldw	r4,-8(fp)
    4074:	0003a680 	call	3a68 <start_iMCU_row>
	return TRUE;
    4078:	00800044 	movi	r2,1
}
    407c:	e037883a 	mov	sp,fp
    4080:	dfc00117 	ldw	ra,4(sp)
    4084:	df000017 	ldw	fp,0(sp)
    4088:	dec00204 	addi	sp,sp,8
    408c:	f800283a 	ret

00004090 <compress_first_pass>:
* at the scan-dependent variables (MCU dimensions, etc).
*/

METHODDEF(boolean)
	compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
    4090:	deffe604 	addi	sp,sp,-104
    4094:	dfc01915 	stw	ra,100(sp)
    4098:	df001815 	stw	fp,96(sp)
    409c:	dc401715 	stw	r17,92(sp)
    40a0:	dc001615 	stw	r16,88(sp)
    40a4:	df001604 	addi	fp,sp,88
    40a8:	e13ffe15 	stw	r4,-8(fp)
    40ac:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10805f17 	ldw	r2,380(r2)
    40b8:	e0bff615 	stw	r2,-40(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
    40bc:	e0bffe17 	ldw	r2,-8(fp)
    40c0:	10804217 	ldw	r2,264(r2)
    40c4:	10bfffc4 	addi	r2,r2,-1
    40c8:	e0bff715 	stw	r2,-36(fp)
	jpeg_component_info *compptr;
	JBLOCKARRAY buffer;
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
    40cc:	e03fef15 	stw	zero,-68(fp)
    40d0:	e0bffe17 	ldw	r2,-8(fp)
    40d4:	10801417 	ldw	r2,80(r2)
    40d8:	e0bff315 	stw	r2,-52(fp)
    40dc:	0000e606 	br	4478 <compress_first_pass+0x3e8>
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
    40e0:	e0bffe17 	ldw	r2,-8(fp)
    40e4:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[ci],
    40e8:	14400817 	ldw	r17,32(r2)
    40ec:	e0fff617 	ldw	r3,-40(fp)
    40f0:	e0bfef17 	ldw	r2,-68(fp)
    40f4:	10800404 	addi	r2,r2,16
    40f8:	1085883a 	add	r2,r2,r2
    40fc:	1085883a 	add	r2,r2,r2
    4100:	1885883a 	add	r2,r3,r2
    4104:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
    4108:	e0bff617 	ldw	r2,-40(fp)
    410c:	10c00217 	ldw	r3,8(r2)
    4110:	e0bff317 	ldw	r2,-52(fp)
    4114:	10800317 	ldw	r2,12(r2)
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[ci],
    4118:	1809883a 	mov	r4,r3
    411c:	100b883a 	mov	r5,r2
    4120:	002c1540 	call	2c154 <__mulsi3>
    4124:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, TRUE);
    4128:	e0bff317 	ldw	r2,-52(fp)
    412c:	10800317 	ldw	r2,12(r2)
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
    4130:	01000044 	movi	r4,1
    4134:	d9000015 	stw	r4,0(sp)
    4138:	e13ffe17 	ldw	r4,-8(fp)
    413c:	800b883a 	mov	r5,r16
    4140:	180d883a 	mov	r6,r3
    4144:	100f883a 	mov	r7,r2
    4148:	883ee83a 	callr	r17
    414c:	e0bff815 	stw	r2,-32(fp)
			((j_common_ptr) cinfo, coef->whole_image[ci],
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, TRUE);
		/* Count non-dummy DCT block rows in this iMCU row. */
		if (coef->iMCU_row_num < last_iMCU_row)
    4150:	e0bff617 	ldw	r2,-40(fp)
    4154:	10c00217 	ldw	r3,8(r2)
    4158:	e0bff717 	ldw	r2,-36(fp)
    415c:	1880042e 	bgeu	r3,r2,4170 <compress_first_pass+0xe0>
			block_rows = compptr->v_samp_factor;
    4160:	e0bff317 	ldw	r2,-52(fp)
    4164:	10800317 	ldw	r2,12(r2)
    4168:	e0bff115 	stw	r2,-60(fp)
    416c:	00000d06 	br	41a4 <compress_first_pass+0x114>
		else {
			/* NB: can't use last_row_height here, since may not be set! */
			block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    4170:	e0bff317 	ldw	r2,-52(fp)
    4174:	10c00817 	ldw	r3,32(r2)
    4178:	e0bff317 	ldw	r2,-52(fp)
    417c:	10800317 	ldw	r2,12(r2)
    4180:	1809883a 	mov	r4,r3
    4184:	100b883a 	mov	r5,r2
    4188:	002c14c0 	call	2c14c <__umodsi3>
    418c:	e0bff115 	stw	r2,-60(fp)
			if (block_rows == 0) block_rows = compptr->v_samp_factor;
    4190:	e0bff117 	ldw	r2,-60(fp)
    4194:	1000031e 	bne	r2,zero,41a4 <compress_first_pass+0x114>
    4198:	e0bff317 	ldw	r2,-52(fp)
    419c:	10800317 	ldw	r2,12(r2)
    41a0:	e0bff115 	stw	r2,-60(fp)
		}
		blocks_across = compptr->width_in_blocks;
    41a4:	e0bff317 	ldw	r2,-52(fp)
    41a8:	10800717 	ldw	r2,28(r2)
    41ac:	e0bff915 	stw	r2,-28(fp)
		h_samp_factor = compptr->h_samp_factor;
    41b0:	e0bff317 	ldw	r2,-52(fp)
    41b4:	10800217 	ldw	r2,8(r2)
    41b8:	e0bffa15 	stw	r2,-24(fp)
		/* Count number of dummy blocks to be added at the right margin. */
		ndummy = (int) (blocks_across % h_samp_factor);
    41bc:	e0bffa17 	ldw	r2,-24(fp)
    41c0:	e0fff917 	ldw	r3,-28(fp)
    41c4:	1809883a 	mov	r4,r3
    41c8:	100b883a 	mov	r5,r2
    41cc:	002c14c0 	call	2c14c <__umodsi3>
    41d0:	e0bff215 	stw	r2,-56(fp)
		if (ndummy > 0)
    41d4:	e0bff217 	ldw	r2,-56(fp)
    41d8:	0080040e 	bge	zero,r2,41ec <compress_first_pass+0x15c>
			ndummy = h_samp_factor - ndummy;
    41dc:	e0fffa17 	ldw	r3,-24(fp)
    41e0:	e0bff217 	ldw	r2,-56(fp)
    41e4:	1885c83a 	sub	r2,r3,r2
    41e8:	e0bff215 	stw	r2,-56(fp)
		forward_DCT = cinfo->fdct->forward_DCT[ci];
    41ec:	e0bffe17 	ldw	r2,-8(fp)
    41f0:	10c06317 	ldw	r3,396(r2)
    41f4:	e0bfef17 	ldw	r2,-68(fp)
    41f8:	10800044 	addi	r2,r2,1
    41fc:	1085883a 	add	r2,r2,r2
    4200:	1085883a 	add	r2,r2,r2
    4204:	1885883a 	add	r2,r3,r2
    4208:	10800017 	ldw	r2,0(r2)
    420c:	e0bffb15 	stw	r2,-20(fp)
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
    4210:	e03ff015 	stw	zero,-64(fp)
    4214:	00003d06 	br	430c <compress_first_pass+0x27c>
			thisblockrow = buffer[block_row];
    4218:	e0bff017 	ldw	r2,-64(fp)
    421c:	1085883a 	add	r2,r2,r2
    4220:	1085883a 	add	r2,r2,r2
    4224:	e0fff817 	ldw	r3,-32(fp)
    4228:	1885883a 	add	r2,r3,r2
    422c:	10800017 	ldw	r2,0(r2)
    4230:	e0bff415 	stw	r2,-48(fp)
			(*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
    4234:	e0bfef17 	ldw	r2,-68(fp)
    4238:	1085883a 	add	r2,r2,r2
    423c:	1085883a 	add	r2,r2,r2
    4240:	e0ffff17 	ldw	r3,-4(fp)
    4244:	1885883a 	add	r2,r3,r2
    4248:	14000017 	ldw	r16,0(r2)
				(JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
    424c:	e0bff317 	ldw	r2,-52(fp)
    4250:	10800a17 	ldw	r2,40(r2)
    4254:	1009883a 	mov	r4,r2
    4258:	e17ff017 	ldw	r5,-64(fp)
    425c:	002c1540 	call	2c154 <__mulsi3>
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
			thisblockrow = buffer[block_row];
			(*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
    4260:	d8800015 	stw	r2,0(sp)
    4264:	d8000115 	stw	zero,4(sp)
    4268:	e0bff917 	ldw	r2,-28(fp)
    426c:	d8800215 	stw	r2,8(sp)
    4270:	e0bffb17 	ldw	r2,-20(fp)
    4274:	e13ffe17 	ldw	r4,-8(fp)
    4278:	e17ff317 	ldw	r5,-52(fp)
    427c:	800d883a 	mov	r6,r16
    4280:	e1fff417 	ldw	r7,-48(fp)
    4284:	103ee83a 	callr	r2
				(JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
				(JDIMENSION) 0, blocks_across);
			if (ndummy > 0) {
    4288:	e0bff217 	ldw	r2,-56(fp)
    428c:	00801c0e 	bge	zero,r2,4300 <compress_first_pass+0x270>
				/* Create dummy blocks at the right edge of the image. */
				thisblockrow += blocks_across; /* => first dummy block */
    4290:	e0bff917 	ldw	r2,-28(fp)
    4294:	100491fa 	slli	r2,r2,7
    4298:	e0fff417 	ldw	r3,-48(fp)
    429c:	1885883a 	add	r2,r3,r2
    42a0:	e0bff415 	stw	r2,-48(fp)
				jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
    42a4:	e0bff217 	ldw	r2,-56(fp)
    42a8:	100491fa 	slli	r2,r2,7
    42ac:	e13ff417 	ldw	r4,-48(fp)
    42b0:	100b883a 	mov	r5,r2
    42b4:	002b23c0 	call	2b23c <jzero_far>
				lastDC = thisblockrow[-1][0];
    42b8:	e0bff417 	ldw	r2,-48(fp)
    42bc:	10bfe004 	addi	r2,r2,-128
    42c0:	1080000b 	ldhu	r2,0(r2)
    42c4:	e0bffc0d 	sth	r2,-16(fp)
				for (bi = 0; bi < ndummy; bi++) {
    42c8:	e03fee15 	stw	zero,-72(fp)
    42cc:	00000906 	br	42f4 <compress_first_pass+0x264>
					thisblockrow[bi][0] = lastDC;
    42d0:	e0bfee17 	ldw	r2,-72(fp)
    42d4:	100491fa 	slli	r2,r2,7
    42d8:	e0fff417 	ldw	r3,-48(fp)
    42dc:	1885883a 	add	r2,r3,r2
    42e0:	e0fffc0b 	ldhu	r3,-16(fp)
    42e4:	10c0000d 	sth	r3,0(r2)
			if (ndummy > 0) {
				/* Create dummy blocks at the right edge of the image. */
				thisblockrow += blocks_across; /* => first dummy block */
				jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
				lastDC = thisblockrow[-1][0];
				for (bi = 0; bi < ndummy; bi++) {
    42e8:	e0bfee17 	ldw	r2,-72(fp)
    42ec:	10800044 	addi	r2,r2,1
    42f0:	e0bfee15 	stw	r2,-72(fp)
    42f4:	e0ffee17 	ldw	r3,-72(fp)
    42f8:	e0bff217 	ldw	r2,-56(fp)
    42fc:	18bff416 	blt	r3,r2,42d0 <compress_first_pass+0x240>
			ndummy = h_samp_factor - ndummy;
		forward_DCT = cinfo->fdct->forward_DCT[ci];
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
    4300:	e0bff017 	ldw	r2,-64(fp)
    4304:	10800044 	addi	r2,r2,1
    4308:	e0bff015 	stw	r2,-64(fp)
    430c:	e0fff017 	ldw	r3,-64(fp)
    4310:	e0bff117 	ldw	r2,-60(fp)
    4314:	18bfc016 	blt	r3,r2,4218 <compress_first_pass+0x188>
		/* If at end of image, create dummy block rows as needed.
		* The tricky part here is that within each MCU, we want the DC values
		* of the dummy blocks to match the last real block's DC value.
		* This squeezes a few more bytes out of the resulting file...
		*/
		if (coef->iMCU_row_num == last_iMCU_row) {
    4318:	e0bff617 	ldw	r2,-40(fp)
    431c:	10c00217 	ldw	r3,8(r2)
    4320:	e0bff717 	ldw	r2,-36(fp)
    4324:	18804e1e 	bne	r3,r2,4460 <compress_first_pass+0x3d0>
			blocks_across += ndummy;	/* include lower right corner */
    4328:	e0bff217 	ldw	r2,-56(fp)
    432c:	e0fff917 	ldw	r3,-28(fp)
    4330:	1885883a 	add	r2,r3,r2
    4334:	e0bff915 	stw	r2,-28(fp)
			MCUs_across = blocks_across / h_samp_factor;
    4338:	e0bffa17 	ldw	r2,-24(fp)
    433c:	e13ff917 	ldw	r4,-28(fp)
    4340:	100b883a 	mov	r5,r2
    4344:	002c1440 	call	2c144 <__udivsi3>
    4348:	e0bffd15 	stw	r2,-12(fp)
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
    434c:	e0bff117 	ldw	r2,-60(fp)
    4350:	e0bff015 	stw	r2,-64(fp)
    4354:	00003e06 	br	4450 <compress_first_pass+0x3c0>
				thisblockrow = buffer[block_row];
    4358:	e0bff017 	ldw	r2,-64(fp)
    435c:	1085883a 	add	r2,r2,r2
    4360:	1085883a 	add	r2,r2,r2
    4364:	e0fff817 	ldw	r3,-32(fp)
    4368:	1885883a 	add	r2,r3,r2
    436c:	10800017 	ldw	r2,0(r2)
    4370:	e0bff415 	stw	r2,-48(fp)
				lastblockrow = buffer[block_row-1];
    4374:	e0bff017 	ldw	r2,-64(fp)
    4378:	10bfffc4 	addi	r2,r2,-1
    437c:	1085883a 	add	r2,r2,r2
    4380:	1085883a 	add	r2,r2,r2
    4384:	e0fff817 	ldw	r3,-32(fp)
    4388:	1885883a 	add	r2,r3,r2
    438c:	10800017 	ldw	r2,0(r2)
    4390:	e0bff515 	stw	r2,-44(fp)
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
    4394:	e0bff917 	ldw	r2,-28(fp)
    4398:	100491fa 	slli	r2,r2,7
    439c:	e13ff417 	ldw	r4,-48(fp)
    43a0:	100b883a 	mov	r5,r2
    43a4:	002b23c0 	call	2b23c <jzero_far>
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
    43a8:	e03fed15 	stw	zero,-76(fp)
    43ac:	00002206 	br	4438 <compress_first_pass+0x3a8>
					lastDC = lastblockrow[h_samp_factor-1][0];
    43b0:	e0bffa17 	ldw	r2,-24(fp)
    43b4:	10bfffc4 	addi	r2,r2,-1
    43b8:	100491fa 	slli	r2,r2,7
    43bc:	e0fff517 	ldw	r3,-44(fp)
    43c0:	1885883a 	add	r2,r3,r2
    43c4:	1080000b 	ldhu	r2,0(r2)
    43c8:	e0bffc0d 	sth	r2,-16(fp)
					for (bi = 0; bi < h_samp_factor; bi++) {
    43cc:	e03fee15 	stw	zero,-72(fp)
    43d0:	00000906 	br	43f8 <compress_first_pass+0x368>
						thisblockrow[bi][0] = lastDC;
    43d4:	e0bfee17 	ldw	r2,-72(fp)
    43d8:	100491fa 	slli	r2,r2,7
    43dc:	e0fff417 	ldw	r3,-48(fp)
    43e0:	1885883a 	add	r2,r3,r2
    43e4:	e0fffc0b 	ldhu	r3,-16(fp)
    43e8:	10c0000d 	sth	r3,0(r2)
				thisblockrow = buffer[block_row];
				lastblockrow = buffer[block_row-1];
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
					lastDC = lastblockrow[h_samp_factor-1][0];
					for (bi = 0; bi < h_samp_factor; bi++) {
    43ec:	e0bfee17 	ldw	r2,-72(fp)
    43f0:	10800044 	addi	r2,r2,1
    43f4:	e0bfee15 	stw	r2,-72(fp)
    43f8:	e0ffee17 	ldw	r3,-72(fp)
    43fc:	e0bffa17 	ldw	r2,-24(fp)
    4400:	18bff416 	blt	r3,r2,43d4 <compress_first_pass+0x344>
						thisblockrow[bi][0] = lastDC;
					}
					thisblockrow += h_samp_factor; /* advance to next MCU in row */
    4404:	e0bffa17 	ldw	r2,-24(fp)
    4408:	100491fa 	slli	r2,r2,7
    440c:	e0fff417 	ldw	r3,-48(fp)
    4410:	1885883a 	add	r2,r3,r2
    4414:	e0bff415 	stw	r2,-48(fp)
					lastblockrow += h_samp_factor;
    4418:	e0bffa17 	ldw	r2,-24(fp)
    441c:	100491fa 	slli	r2,r2,7
    4420:	e0fff517 	ldw	r3,-44(fp)
    4424:	1885883a 	add	r2,r3,r2
    4428:	e0bff515 	stw	r2,-44(fp)
			MCUs_across = blocks_across / h_samp_factor;
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
				thisblockrow = buffer[block_row];
				lastblockrow = buffer[block_row-1];
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
    442c:	e0bfed17 	ldw	r2,-76(fp)
    4430:	10800044 	addi	r2,r2,1
    4434:	e0bfed15 	stw	r2,-76(fp)
    4438:	e0ffed17 	ldw	r3,-76(fp)
    443c:	e0bffd17 	ldw	r2,-12(fp)
    4440:	18bfdb36 	bltu	r3,r2,43b0 <compress_first_pass+0x320>
		* This squeezes a few more bytes out of the resulting file...
		*/
		if (coef->iMCU_row_num == last_iMCU_row) {
			blocks_across += ndummy;	/* include lower right corner */
			MCUs_across = blocks_across / h_samp_factor;
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
    4444:	e0bff017 	ldw	r2,-64(fp)
    4448:	10800044 	addi	r2,r2,1
    444c:	e0bff015 	stw	r2,-64(fp)
    4450:	e0bff317 	ldw	r2,-52(fp)
    4454:	10800317 	ldw	r2,12(r2)
    4458:	e0fff017 	ldw	r3,-64(fp)
    445c:	18bfbe16 	blt	r3,r2,4358 <compress_first_pass+0x2c8>
	jpeg_component_info *compptr;
	JBLOCKARRAY buffer;
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
    4460:	e0bfef17 	ldw	r2,-68(fp)
    4464:	10800044 	addi	r2,r2,1
    4468:	e0bfef15 	stw	r2,-68(fp)
    446c:	e0bff317 	ldw	r2,-52(fp)
    4470:	10801604 	addi	r2,r2,88
    4474:	e0bff315 	stw	r2,-52(fp)
    4478:	e0bffe17 	ldw	r2,-8(fp)
    447c:	10801217 	ldw	r2,72(r2)
    4480:	e0ffef17 	ldw	r3,-68(fp)
    4484:	18bf1616 	blt	r3,r2,40e0 <compress_first_pass+0x50>
	/* NB: compress_output will increment iMCU_row_num if successful.
	* A suspension return will result in redoing all the work above next time.
	*/

	/* Emit data to the entropy encoder, sharing code with subsequent passes */
	return compress_output(cinfo, input_buf);
    4488:	e13ffe17 	ldw	r4,-8(fp)
    448c:	e17fff17 	ldw	r5,-4(fp)
    4490:	00044b00 	call	44b0 <compress_output>
}
    4494:	e037883a 	mov	sp,fp
    4498:	dfc00317 	ldw	ra,12(sp)
    449c:	df000217 	ldw	fp,8(sp)
    44a0:	dc400117 	ldw	r17,4(sp)
    44a4:	dc000017 	ldw	r16,0(sp)
    44a8:	dec00404 	addi	sp,sp,16
    44ac:	f800283a 	ret

000044b0 <compress_output>:
* NB: input_buf is ignored; it is likely to be a NULL pointer.
*/

METHODDEF(boolean)
	compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
    44b0:	deffeb04 	addi	sp,sp,-84
    44b4:	dfc01415 	stw	ra,80(sp)
    44b8:	df001315 	stw	fp,76(sp)
    44bc:	dc401215 	stw	r17,72(sp)
    44c0:	dc001115 	stw	r16,68(sp)
    44c4:	df001104 	addi	fp,sp,68
    44c8:	e13ffe15 	stw	r4,-8(fp)
    44cc:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
    44d0:	e0bffe17 	ldw	r2,-8(fp)
    44d4:	10805f17 	ldw	r2,380(r2)
    44d8:	e0bff715 	stw	r2,-36(fp)

	/* Align the virtual buffers for the components used in this scan.
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    44dc:	e03ff215 	stw	zero,-56(fp)
    44e0:	00002e06 	br	459c <compress_output+0xec>
		compptr = cinfo->cur_comp_info[ci];
    44e4:	e0fffe17 	ldw	r3,-8(fp)
    44e8:	e0bff217 	ldw	r2,-56(fp)
    44ec:	10801104 	addi	r2,r2,68
    44f0:	1085883a 	add	r2,r2,r2
    44f4:	1085883a 	add	r2,r2,r2
    44f8:	1885883a 	add	r2,r3,r2
    44fc:	10800017 	ldw	r2,0(r2)
    4500:	e0bff815 	stw	r2,-32(fp)
		buffer[ci] = (*cinfo->mem->access_virt_barray)
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
    450c:	14400817 	ldw	r17,32(r2)
    4510:	e0bff817 	ldw	r2,-32(fp)
    4514:	10800117 	ldw	r2,4(r2)
    4518:	e0fff717 	ldw	r3,-36(fp)
    451c:	10800404 	addi	r2,r2,16
    4520:	1085883a 	add	r2,r2,r2
    4524:	1085883a 	add	r2,r2,r2
    4528:	1885883a 	add	r2,r3,r2
    452c:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
    4530:	e0bff717 	ldw	r2,-36(fp)
    4534:	10c00217 	ldw	r3,8(r2)
    4538:	e0bff817 	ldw	r2,-32(fp)
    453c:	10800317 	ldw	r2,12(r2)
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
    4540:	1809883a 	mov	r4,r3
    4544:	100b883a 	mov	r5,r2
    4548:	002c1540 	call	2c154 <__mulsi3>
    454c:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
    4550:	e0bff817 	ldw	r2,-32(fp)
    4554:	10800317 	ldw	r2,12(r2)
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
    4558:	d8000015 	stw	zero,0(sp)
    455c:	e13ffe17 	ldw	r4,-8(fp)
    4560:	800b883a 	mov	r5,r16
    4564:	180d883a 	mov	r6,r3
    4568:	100f883a 	mov	r7,r2
    456c:	883ee83a 	callr	r17
    4570:	1007883a 	mov	r3,r2
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
    4574:	e0bff217 	ldw	r2,-56(fp)
    4578:	1085883a 	add	r2,r2,r2
    457c:	1085883a 	add	r2,r2,r2
    4580:	e13ff004 	addi	r4,fp,-64
    4584:	2085883a 	add	r2,r4,r2
    4588:	10800a04 	addi	r2,r2,40
    458c:	10c00015 	stw	r3,0(r2)

	/* Align the virtual buffers for the components used in this scan.
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    4590:	e0bff217 	ldw	r2,-56(fp)
    4594:	10800044 	addi	r2,r2,1
    4598:	e0bff215 	stw	r2,-56(fp)
    459c:	e0bffe17 	ldw	r2,-8(fp)
    45a0:	10804317 	ldw	r2,268(r2)
    45a4:	e0fff217 	ldw	r3,-56(fp)
    45a8:	18bfce16 	blt	r3,r2,44e4 <compress_output+0x34>
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
    45ac:	e0bff717 	ldw	r2,-36(fp)
    45b0:	10800417 	ldw	r2,16(r2)
    45b4:	e0bff515 	stw	r2,-44(fp)
    45b8:	00006c06 	br	476c <compress_output+0x2bc>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
    45bc:	e0bff717 	ldw	r2,-36(fp)
    45c0:	10800317 	ldw	r2,12(r2)
    45c4:	e0bff015 	stw	r2,-64(fp)
    45c8:	00005f06 	br	4748 <compress_output+0x298>
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
    45cc:	e03ff115 	stw	zero,-60(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    45d0:	e03ff215 	stw	zero,-56(fp)
    45d4:	00004306 	br	46e4 <compress_output+0x234>
						compptr = cinfo->cur_comp_info[ci];
    45d8:	e0fffe17 	ldw	r3,-8(fp)
    45dc:	e0bff217 	ldw	r2,-56(fp)
    45e0:	10801104 	addi	r2,r2,68
    45e4:	1085883a 	add	r2,r2,r2
    45e8:	1085883a 	add	r2,r2,r2
    45ec:	1885883a 	add	r2,r3,r2
    45f0:	10800017 	ldw	r2,0(r2)
    45f4:	e0bff815 	stw	r2,-32(fp)
						start_col = MCU_col_num * compptr->MCU_width;
    45f8:	e0bff817 	ldw	r2,-32(fp)
    45fc:	10800e17 	ldw	r2,56(r2)
    4600:	1009883a 	mov	r4,r2
    4604:	e17ff017 	ldw	r5,-64(fp)
    4608:	002c1540 	call	2c154 <__mulsi3>
    460c:	e0bff915 	stw	r2,-28(fp)
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
    4610:	e03ff415 	stw	zero,-48(fp)
    4614:	00002c06 	br	46c8 <compress_output+0x218>
							buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
    4618:	e0bff217 	ldw	r2,-56(fp)
    461c:	1085883a 	add	r2,r2,r2
    4620:	1085883a 	add	r2,r2,r2
    4624:	e0fff004 	addi	r3,fp,-64
    4628:	1885883a 	add	r2,r3,r2
    462c:	10800a04 	addi	r2,r2,40
    4630:	10c00017 	ldw	r3,0(r2)
    4634:	e13ff417 	ldw	r4,-48(fp)
    4638:	e0bff517 	ldw	r2,-44(fp)
    463c:	2085883a 	add	r2,r4,r2
    4640:	1085883a 	add	r2,r2,r2
    4644:	1085883a 	add	r2,r2,r2
    4648:	1885883a 	add	r2,r3,r2
    464c:	10c00017 	ldw	r3,0(r2)
    4650:	e0bff917 	ldw	r2,-28(fp)
    4654:	100491fa 	slli	r2,r2,7
    4658:	1885883a 	add	r2,r3,r2
    465c:	e0bff615 	stw	r2,-40(fp)
							for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
    4660:	e03ff315 	stw	zero,-52(fp)
    4664:	00001106 	br	46ac <compress_output+0x1fc>
								coef->MCU_buffer[blkn++] = buffer_ptr++;
    4668:	e0fff717 	ldw	r3,-36(fp)
    466c:	e0bff117 	ldw	r2,-60(fp)
    4670:	10800184 	addi	r2,r2,6
    4674:	1085883a 	add	r2,r2,r2
    4678:	1085883a 	add	r2,r2,r2
    467c:	1885883a 	add	r2,r3,r2
    4680:	e0fff617 	ldw	r3,-40(fp)
    4684:	10c00015 	stw	r3,0(r2)
    4688:	e0bff117 	ldw	r2,-60(fp)
    468c:	10800044 	addi	r2,r2,1
    4690:	e0bff115 	stw	r2,-60(fp)
    4694:	e0bff617 	ldw	r2,-40(fp)
    4698:	10802004 	addi	r2,r2,128
    469c:	e0bff615 	stw	r2,-40(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
							for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
    46a0:	e0bff317 	ldw	r2,-52(fp)
    46a4:	10800044 	addi	r2,r2,1
    46a8:	e0bff315 	stw	r2,-52(fp)
    46ac:	e0bff817 	ldw	r2,-32(fp)
    46b0:	10800e17 	ldw	r2,56(r2)
    46b4:	e0fff317 	ldw	r3,-52(fp)
    46b8:	18bfeb16 	blt	r3,r2,4668 <compress_output+0x1b8>
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
    46bc:	e0bff417 	ldw	r2,-48(fp)
    46c0:	10800044 	addi	r2,r2,1
    46c4:	e0bff415 	stw	r2,-48(fp)
    46c8:	e0bff817 	ldw	r2,-32(fp)
    46cc:	10800f17 	ldw	r2,60(r2)
    46d0:	e0fff417 	ldw	r3,-48(fp)
    46d4:	18bfd016 	blt	r3,r2,4618 <compress_output+0x168>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    46d8:	e0bff217 	ldw	r2,-56(fp)
    46dc:	10800044 	addi	r2,r2,1
    46e0:	e0bff215 	stw	r2,-56(fp)
    46e4:	e0bffe17 	ldw	r2,-8(fp)
    46e8:	10804317 	ldw	r2,268(r2)
    46ec:	e0fff217 	ldw	r3,-56(fp)
    46f0:	18bfb916 	blt	r3,r2,45d8 <compress_output+0x128>
								coef->MCU_buffer[blkn++] = buffer_ptr++;
							}
						}
					}
					/* Try to write the MCU. */
					if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
    46f4:	e0bffe17 	ldw	r2,-8(fp)
    46f8:	10806417 	ldw	r2,400(r2)
    46fc:	10c00117 	ldw	r3,4(r2)
    4700:	e0bff717 	ldw	r2,-36(fp)
    4704:	10800604 	addi	r2,r2,24
    4708:	e13ffe17 	ldw	r4,-8(fp)
    470c:	100b883a 	mov	r5,r2
    4710:	183ee83a 	callr	r3
    4714:	10803fcc 	andi	r2,r2,255
    4718:	1000081e 	bne	r2,zero,473c <compress_output+0x28c>
						/* Suspension forced; update state counters and exit */
						coef->MCU_vert_offset = yoffset;
    471c:	e0bff717 	ldw	r2,-36(fp)
    4720:	e0fff517 	ldw	r3,-44(fp)
    4724:	10c00415 	stw	r3,16(r2)
						coef->mcu_ctr = MCU_col_num;
    4728:	e0bff717 	ldw	r2,-36(fp)
    472c:	e0fff017 	ldw	r3,-64(fp)
    4730:	10c00315 	stw	r3,12(r2)
						return FALSE;
    4734:	0005883a 	mov	r2,zero
    4738:	00001806 	br	479c <compress_output+0x2ec>

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
    473c:	e0bff017 	ldw	r2,-64(fp)
    4740:	10800044 	addi	r2,r2,1
    4744:	e0bff015 	stw	r2,-64(fp)
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
    4748:	e0bffe17 	ldw	r2,-8(fp)
    474c:	10804817 	ldw	r2,288(r2)
    4750:	e0fff017 	ldw	r3,-64(fp)
    4754:	18bf9d36 	bltu	r3,r2,45cc <compress_output+0x11c>
						coef->mcu_ctr = MCU_col_num;
						return FALSE;
					}
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
    4758:	e0bff717 	ldw	r2,-36(fp)
    475c:	10000315 	stw	zero,12(r2)
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
    4760:	e0bff517 	ldw	r2,-44(fp)
    4764:	10800044 	addi	r2,r2,1
    4768:	e0bff515 	stw	r2,-44(fp)
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
    476c:	e0bff717 	ldw	r2,-36(fp)
    4770:	10800517 	ldw	r2,20(r2)
    4774:	e0fff517 	ldw	r3,-44(fp)
    4778:	18bf9016 	blt	r3,r2,45bc <compress_output+0x10c>
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
    477c:	e0bff717 	ldw	r2,-36(fp)
    4780:	10800217 	ldw	r2,8(r2)
    4784:	10c00044 	addi	r3,r2,1
    4788:	e0bff717 	ldw	r2,-36(fp)
    478c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
    4790:	e13ffe17 	ldw	r4,-8(fp)
    4794:	0003a680 	call	3a68 <start_iMCU_row>
	return TRUE;
    4798:	00800044 	movi	r2,1
}
    479c:	e037883a 	mov	sp,fp
    47a0:	dfc00317 	ldw	ra,12(sp)
    47a4:	df000217 	ldw	fp,8(sp)
    47a8:	dc400117 	ldw	r17,4(sp)
    47ac:	dc000017 	ldw	r16,0(sp)
    47b0:	dec00404 	addi	sp,sp,16
    47b4:	f800283a 	ret

000047b8 <jinit_c_coef_controller>:
* Initialize coefficient buffer controller.
*/

GLOBAL(void)
	jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
    47b8:	defff304 	addi	sp,sp,-52
    47bc:	dfc00c15 	stw	ra,48(sp)
    47c0:	df000b15 	stw	fp,44(sp)
    47c4:	dc400a15 	stw	r17,40(sp)
    47c8:	dc000915 	stw	r16,36(sp)
    47cc:	df000904 	addi	fp,sp,36
    47d0:	e13ffe15 	stw	r4,-8(fp)
    47d4:	2805883a 	mov	r2,r5
    47d8:	e0bfff05 	stb	r2,-4(fp)
	my_coef_ptr coef;

	coef = (my_coef_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    47dc:	e0bffe17 	ldw	r2,-8(fp)
    47e0:	10800117 	ldw	r2,4(r2)
    47e4:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
	my_coef_ptr coef;

	coef = (my_coef_ptr)
    47e8:	e13ffe17 	ldw	r4,-8(fp)
    47ec:	01400044 	movi	r5,1
    47f0:	01801a04 	movi	r6,104
    47f4:	103ee83a 	callr	r2
    47f8:	e0bffc15 	stw	r2,-16(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_coef_controller));
	cinfo->coef = (struct jpeg_c_coef_controller *) coef;
    47fc:	e0bffe17 	ldw	r2,-8(fp)
    4800:	e0fffc17 	ldw	r3,-16(fp)
    4804:	10c05f15 	stw	r3,380(r2)
	coef->pub.start_pass = start_pass_coef;
    4808:	e0bffc17 	ldw	r2,-16(fp)
    480c:	00c00034 	movhi	r3,0
    4810:	18cec204 	addi	r3,r3,15112
    4814:	10c00015 	stw	r3,0(r2)

	/* Create the coefficient buffer. */
	if (need_full_buffer) {
    4818:	e0bfff03 	ldbu	r2,-4(fp)
    481c:	10003626 	beq	r2,zero,48f8 <jinit_c_coef_controller+0x140>
		/* Allocate a full-image virtual array for each component, */
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    4820:	e03ff915 	stw	zero,-28(fp)
    4824:	e0bffe17 	ldw	r2,-8(fp)
    4828:	10801417 	ldw	r2,80(r2)
    482c:	e0bffa15 	stw	r2,-24(fp)
    4830:	00002c06 	br	48e4 <jinit_c_coef_controller+0x12c>
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
    4834:	e0bffe17 	ldw	r2,-8(fp)
    4838:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
    483c:	14400517 	ldw	r17,20(r2)
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
    4840:	e0bffa17 	ldw	r2,-24(fp)
    4844:	10800717 	ldw	r2,28(r2)
    4848:	1007883a 	mov	r3,r2
					(long) compptr->h_samp_factor),
    484c:	e0bffa17 	ldw	r2,-24(fp)
    4850:	10800217 	ldw	r2,8(r2)

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
    4854:	1809883a 	mov	r4,r3
    4858:	100b883a 	mov	r5,r2
    485c:	002b0cc0 	call	2b0cc <jround_up>
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
    4860:	1021883a 	mov	r16,r2
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
    4864:	e0bffa17 	ldw	r2,-24(fp)
    4868:	10800817 	ldw	r2,32(r2)
    486c:	1007883a 	mov	r3,r2
					(long) compptr->v_samp_factor),
    4870:	e0bffa17 	ldw	r2,-24(fp)
    4874:	10800317 	ldw	r2,12(r2)
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
    4878:	1809883a 	mov	r4,r3
    487c:	100b883a 	mov	r5,r2
    4880:	002b0cc0 	call	2b0cc <jround_up>
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
    4884:	1007883a 	mov	r3,r2
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
					(long) compptr->v_samp_factor),
					(JDIMENSION) compptr->v_samp_factor);
    4888:	e0bffa17 	ldw	r2,-24(fp)
    488c:	10800317 	ldw	r2,12(r2)
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
    4890:	d8c00015 	stw	r3,0(sp)
    4894:	d8800115 	stw	r2,4(sp)
    4898:	e13ffe17 	ldw	r4,-8(fp)
    489c:	01400044 	movi	r5,1
    48a0:	000d883a 	mov	r6,zero
    48a4:	800f883a 	mov	r7,r16
    48a8:	883ee83a 	callr	r17
    48ac:	1007883a 	mov	r3,r2
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
    48b0:	e13ffc17 	ldw	r4,-16(fp)
    48b4:	e0bff917 	ldw	r2,-28(fp)
    48b8:	10800404 	addi	r2,r2,16
    48bc:	1085883a 	add	r2,r2,r2
    48c0:	1085883a 	add	r2,r2,r2
    48c4:	2085883a 	add	r2,r4,r2
    48c8:	10c00015 	stw	r3,0(r2)
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
    48cc:	e0bff917 	ldw	r2,-28(fp)
    48d0:	10800044 	addi	r2,r2,1
    48d4:	e0bff915 	stw	r2,-28(fp)
    48d8:	e0bffa17 	ldw	r2,-24(fp)
    48dc:	10801604 	addi	r2,r2,88
    48e0:	e0bffa15 	stw	r2,-24(fp)
		/* Allocate a full-image virtual array for each component, */
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    48e4:	e0bffe17 	ldw	r2,-8(fp)
    48e8:	10801217 	ldw	r2,72(r2)
    48ec:	e0fff917 	ldw	r3,-28(fp)
    48f0:	18bfd016 	blt	r3,r2,4834 <jinit_c_coef_controller+0x7c>
    48f4:	00001d06 	br	496c <jinit_c_coef_controller+0x1b4>
		/* We only need a single-MCU buffer. */
		JBLOCKROW buffer;
		int i;

		buffer = (JBLOCKROW)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    48f8:	e0bffe17 	ldw	r2,-8(fp)
    48fc:	10800117 	ldw	r2,4(r2)
    4900:	10800117 	ldw	r2,4(r2)
	} else {
		/* We only need a single-MCU buffer. */
		JBLOCKROW buffer;
		int i;

		buffer = (JBLOCKROW)
    4904:	e13ffe17 	ldw	r4,-8(fp)
    4908:	01400044 	movi	r5,1
    490c:	01814004 	movi	r6,1280
    4910:	103ee83a 	callr	r2
    4914:	e0bffd15 	stw	r2,-12(fp)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
			C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
		for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
    4918:	e03ffb15 	stw	zero,-20(fp)
    491c:	00000e06 	br	4958 <jinit_c_coef_controller+0x1a0>
			coef->MCU_buffer[i] = buffer + i;
    4920:	e0bffb17 	ldw	r2,-20(fp)
    4924:	100491fa 	slli	r2,r2,7
    4928:	e0fffd17 	ldw	r3,-12(fp)
    492c:	1887883a 	add	r3,r3,r2
    4930:	e13ffc17 	ldw	r4,-16(fp)
    4934:	e0bffb17 	ldw	r2,-20(fp)
    4938:	10800184 	addi	r2,r2,6
    493c:	1085883a 	add	r2,r2,r2
    4940:	1085883a 	add	r2,r2,r2
    4944:	2085883a 	add	r2,r4,r2
    4948:	10c00015 	stw	r3,0(r2)
		int i;

		buffer = (JBLOCKROW)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
			C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
		for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
    494c:	e0bffb17 	ldw	r2,-20(fp)
    4950:	10800044 	addi	r2,r2,1
    4954:	e0bffb15 	stw	r2,-20(fp)
    4958:	e0bffb17 	ldw	r2,-20(fp)
    495c:	10800290 	cmplti	r2,r2,10
    4960:	103fef1e 	bne	r2,zero,4920 <jinit_c_coef_controller+0x168>
			coef->MCU_buffer[i] = buffer + i;
		}
		coef->whole_image[0] = NULL; /* flag for no virtual arrays */
    4964:	e0bffc17 	ldw	r2,-16(fp)
    4968:	10001015 	stw	zero,64(r2)
	}
}
    496c:	e037883a 	mov	sp,fp
    4970:	dfc00317 	ldw	ra,12(sp)
    4974:	df000217 	ldw	fp,8(sp)
    4978:	dc400117 	ldw	r17,4(sp)
    497c:	dc000017 	ldw	r16,0(sp)
    4980:	dec00404 	addi	sp,sp,16
    4984:	f800283a 	ret

00004988 <rgb_ycc_start>:
* Initialize for RGB->YCC colorspace conversion.
*/

METHODDEF(void)
	rgb_ycc_start (j_compress_ptr cinfo)
{
    4988:	defff904 	addi	sp,sp,-28
    498c:	dfc00615 	stw	ra,24(sp)
    4990:	df000515 	stw	fp,20(sp)
    4994:	dc000415 	stw	r16,16(sp)
    4998:	df000404 	addi	fp,sp,16
    499c:	e13fff15 	stw	r4,-4(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	10806117 	ldw	r2,388(r2)
    49a8:	e0bffd15 	stw	r2,-12(fp)
	INT32 * rgb_ycc_tab;
	INT32 i;

	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    49ac:	e0bfff17 	ldw	r2,-4(fp)
    49b0:	10800117 	ldw	r2,4(r2)
    49b4:	10800017 	ldw	r2,0(r2)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
	INT32 * rgb_ycc_tab;
	INT32 i;

	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
    49b8:	e13fff17 	ldw	r4,-4(fp)
    49bc:	01400044 	movi	r5,1
    49c0:	01880004 	movi	r6,8192
    49c4:	103ee83a 	callr	r2
    49c8:	e0bffe15 	stw	r2,-8(fp)
    49cc:	e0bffd17 	ldw	r2,-12(fp)
    49d0:	e0fffe17 	ldw	r3,-8(fp)
    49d4:	10c00215 	stw	r3,8(r2)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(TABLE_SIZE * SIZEOF(INT32)));

	for (i = 0; i <= MAXJSAMPLE; i++) {
    49d8:	e03ffc15 	stw	zero,-16(fp)
    49dc:	00005606 	br	4b38 <rgb_ycc_start+0x1b0>
		rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
    49e0:	e0bffc17 	ldw	r2,-16(fp)
    49e4:	1085883a 	add	r2,r2,r2
    49e8:	1085883a 	add	r2,r2,r2
    49ec:	e0fffe17 	ldw	r3,-8(fp)
    49f0:	18a1883a 	add	r16,r3,r2
    49f4:	e13ffc17 	ldw	r4,-16(fp)
    49f8:	015322c4 	movi	r5,19595
    49fc:	002c1540 	call	2c154 <__mulsi3>
    4a00:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
    4a04:	e0bffc17 	ldw	r2,-16(fp)
    4a08:	10804004 	addi	r2,r2,256
    4a0c:	1085883a 	add	r2,r2,r2
    4a10:	1085883a 	add	r2,r2,r2
    4a14:	e0fffe17 	ldw	r3,-8(fp)
    4a18:	18a1883a 	add	r16,r3,r2
    4a1c:	e13ffc17 	ldw	r4,-16(fp)
    4a20:	01659194 	movui	r5,38470
    4a24:	002c1540 	call	2c154 <__mulsi3>
    4a28:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
    4a2c:	e0bffc17 	ldw	r2,-16(fp)
    4a30:	10808004 	addi	r2,r2,512
    4a34:	1085883a 	add	r2,r2,r2
    4a38:	1085883a 	add	r2,r2,r2
    4a3c:	e0fffe17 	ldw	r3,-8(fp)
    4a40:	18a1883a 	add	r16,r3,r2
    4a44:	e13ffc17 	ldw	r4,-16(fp)
    4a48:	01474bc4 	movi	r5,7471
    4a4c:	002c1540 	call	2c154 <__mulsi3>
    4a50:	1007883a 	mov	r3,r2
    4a54:	00a00014 	movui	r2,32768
    4a58:	1885883a 	add	r2,r3,r2
    4a5c:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
    4a60:	e0bffc17 	ldw	r2,-16(fp)
    4a64:	1080c004 	addi	r2,r2,768
    4a68:	1085883a 	add	r2,r2,r2
    4a6c:	1085883a 	add	r2,r2,r2
    4a70:	e0fffe17 	ldw	r3,-8(fp)
    4a74:	18a1883a 	add	r16,r3,r2
    4a78:	e13ffc17 	ldw	r4,-16(fp)
    4a7c:	01753344 	movi	r5,-11059
    4a80:	002c1540 	call	2c154 <__mulsi3>
    4a84:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
    4a88:	e0bffc17 	ldw	r2,-16(fp)
    4a8c:	10810004 	addi	r2,r2,1024
    4a90:	1085883a 	add	r2,r2,r2
    4a94:	1085883a 	add	r2,r2,r2
    4a98:	e0fffe17 	ldw	r3,-8(fp)
    4a9c:	18a1883a 	add	r16,r3,r2
    4aa0:	e13ffc17 	ldw	r4,-16(fp)
    4aa4:	016accc4 	movi	r5,-21709
    4aa8:	002c1540 	call	2c154 <__mulsi3>
    4aac:	80800015 	stw	r2,0(r16)
		/* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
		* This ensures that the maximum output will round to MAXJSAMPLE
		* not MAXJSAMPLE+1, and thus that we don't have to range-limit.
		*/
		rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
    4ab0:	e0bffc17 	ldw	r2,-16(fp)
    4ab4:	10814004 	addi	r2,r2,1280
    4ab8:	1085883a 	add	r2,r2,r2
    4abc:	1085883a 	add	r2,r2,r2
    4ac0:	e0fffe17 	ldw	r3,-8(fp)
    4ac4:	1885883a 	add	r2,r3,r2
    4ac8:	e0fffc17 	ldw	r3,-16(fp)
    4acc:	18c04044 	addi	r3,r3,257
    4ad0:	180693fa 	slli	r3,r3,15
    4ad4:	18ffffc4 	addi	r3,r3,-1
    4ad8:	10c00015 	stw	r3,0(r2)
		/*  B=>Cb and R=>Cr tables are the same
		rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
		*/
		rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
    4adc:	e0bffc17 	ldw	r2,-16(fp)
    4ae0:	10818004 	addi	r2,r2,1536
    4ae4:	1085883a 	add	r2,r2,r2
    4ae8:	1085883a 	add	r2,r2,r2
    4aec:	e0fffe17 	ldw	r3,-8(fp)
    4af0:	18a1883a 	add	r16,r3,r2
    4af4:	e13ffc17 	ldw	r4,-16(fp)
    4af8:	01653444 	movi	r5,-27439
    4afc:	002c1540 	call	2c154 <__mulsi3>
    4b00:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
    4b04:	e0bffc17 	ldw	r2,-16(fp)
    4b08:	1081c004 	addi	r2,r2,1792
    4b0c:	1085883a 	add	r2,r2,r2
    4b10:	1085883a 	add	r2,r2,r2
    4b14:	e0fffe17 	ldw	r3,-8(fp)
    4b18:	18a1883a 	add	r16,r3,r2
    4b1c:	e13ffc17 	ldw	r4,-16(fp)
    4b20:	017acbc4 	movi	r5,-5329
    4b24:	002c1540 	call	2c154 <__mulsi3>
    4b28:	80800015 	stw	r2,0(r16)
	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(TABLE_SIZE * SIZEOF(INT32)));

	for (i = 0; i <= MAXJSAMPLE; i++) {
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
    4b30:	10800044 	addi	r2,r2,1
    4b34:	e0bffc15 	stw	r2,-16(fp)
    4b38:	e0bffc17 	ldw	r2,-16(fp)
    4b3c:	10804010 	cmplti	r2,r2,256
    4b40:	103fa71e 	bne	r2,zero,49e0 <rgb_ycc_start+0x58>
		rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
		*/
		rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
		rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
	}
}
    4b44:	e037883a 	mov	sp,fp
    4b48:	dfc00217 	ldw	ra,8(sp)
    4b4c:	df000117 	ldw	fp,4(sp)
    4b50:	dc000017 	ldw	r16,0(sp)
    4b54:	dec00304 	addi	sp,sp,12
    4b58:	f800283a 	ret

00004b5c <rgb_ycc_convert>:

METHODDEF(void)
	rgb_ycc_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
    4b5c:	defff004 	addi	sp,sp,-64
    4b60:	df000f15 	stw	fp,60(sp)
    4b64:	ddc00e15 	stw	r23,56(sp)
    4b68:	dd800d15 	stw	r22,52(sp)
    4b6c:	dd400c15 	stw	r21,48(sp)
    4b70:	dd000b15 	stw	r20,44(sp)
    4b74:	dcc00a15 	stw	r19,40(sp)
    4b78:	dc800915 	stw	r18,36(sp)
    4b7c:	dc400815 	stw	r17,32(sp)
    4b80:	dc000715 	stw	r16,28(sp)
    4b84:	df000704 	addi	fp,sp,28
    4b88:	e13ffb15 	stw	r4,-20(fp)
    4b8c:	e17ffc15 	stw	r5,-16(fp)
    4b90:	e1bffd15 	stw	r6,-12(fp)
    4b94:	e1fffe15 	stw	r7,-8(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
    4b98:	e0bffb17 	ldw	r2,-20(fp)
    4b9c:	10806117 	ldw	r2,388(r2)
    4ba0:	e0bff915 	stw	r2,-28(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
    4ba4:	e0bff917 	ldw	r2,-28(fp)
    4ba8:	14000217 	ldw	r16,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
    4bac:	e0bffb17 	ldw	r2,-20(fp)
    4bb0:	10800717 	ldw	r2,28(r2)
    4bb4:	e0bffa15 	stw	r2,-24(fp)

	while (--num_rows >= 0) {
    4bb8:	00007306 	br	4d88 <rgb_ycc_convert+0x22c>
		inptr = *input_buf++;
    4bbc:	e0bffc17 	ldw	r2,-16(fp)
    4bc0:	14800017 	ldw	r18,0(r2)
    4bc4:	e0bffc17 	ldw	r2,-16(fp)
    4bc8:	10800104 	addi	r2,r2,4
    4bcc:	e0bffc15 	stw	r2,-16(fp)
		outptr0 = output_buf[0][output_row];
    4bd0:	e0bffd17 	ldw	r2,-12(fp)
    4bd4:	10c00017 	ldw	r3,0(r2)
    4bd8:	e0bffe17 	ldw	r2,-8(fp)
    4bdc:	1085883a 	add	r2,r2,r2
    4be0:	1085883a 	add	r2,r2,r2
    4be4:	1885883a 	add	r2,r3,r2
    4be8:	15800017 	ldw	r22,0(r2)
		outptr1 = output_buf[1][output_row];
    4bec:	e0bffd17 	ldw	r2,-12(fp)
    4bf0:	10800104 	addi	r2,r2,4
    4bf4:	10c00017 	ldw	r3,0(r2)
    4bf8:	e0bffe17 	ldw	r2,-8(fp)
    4bfc:	1085883a 	add	r2,r2,r2
    4c00:	1085883a 	add	r2,r2,r2
    4c04:	1885883a 	add	r2,r3,r2
    4c08:	15c00017 	ldw	r23,0(r2)
		outptr2 = output_buf[2][output_row];
    4c0c:	e0bffd17 	ldw	r2,-12(fp)
    4c10:	10800204 	addi	r2,r2,8
    4c14:	10c00017 	ldw	r3,0(r2)
    4c18:	e0bffe17 	ldw	r2,-8(fp)
    4c1c:	1085883a 	add	r2,r2,r2
    4c20:	1085883a 	add	r2,r2,r2
    4c24:	1885883a 	add	r2,r3,r2
    4c28:	10800017 	ldw	r2,0(r2)
    4c2c:	e0bfff15 	stw	r2,-4(fp)
		output_row++;
    4c30:	e0bffe17 	ldw	r2,-8(fp)
    4c34:	10800044 	addi	r2,r2,1
    4c38:	e0bffe15 	stw	r2,-8(fp)
		for (col = 0; col < num_cols; col++) {
    4c3c:	0023883a 	mov	r17,zero
    4c40:	00004f06 	br	4d80 <rgb_ycc_convert+0x224>
			r = GETJSAMPLE(inptr[RGB_RED]);
    4c44:	90800003 	ldbu	r2,0(r18)
    4c48:	15403fcc 	andi	r21,r2,255
			g = GETJSAMPLE(inptr[RGB_GREEN]);
    4c4c:	90800044 	addi	r2,r18,1
    4c50:	10800003 	ldbu	r2,0(r2)
    4c54:	15003fcc 	andi	r20,r2,255
			b = GETJSAMPLE(inptr[RGB_BLUE]);
    4c58:	90800084 	addi	r2,r18,2
    4c5c:	10800003 	ldbu	r2,0(r2)
    4c60:	14c03fcc 	andi	r19,r2,255
			inptr += RGB_PIXELSIZE;
    4c64:	948000c4 	addi	r18,r18,3
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
    4c68:	b447883a 	add	r3,r22,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
    4c6c:	a805883a 	mov	r2,r21
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1085883a 	add	r2,r2,r2
    4c78:	8085883a 	add	r2,r16,r2
    4c7c:	11000017 	ldw	r4,0(r2)
    4c80:	a005883a 	mov	r2,r20
    4c84:	10804004 	addi	r2,r2,256
    4c88:	1085883a 	add	r2,r2,r2
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	8085883a 	add	r2,r16,r2
    4c94:	10800017 	ldw	r2,0(r2)
    4c98:	2089883a 	add	r4,r4,r2
    4c9c:	9805883a 	mov	r2,r19
    4ca0:	10808004 	addi	r2,r2,512
    4ca4:	1085883a 	add	r2,r2,r2
    4ca8:	1085883a 	add	r2,r2,r2
    4cac:	8085883a 	add	r2,r16,r2
    4cb0:	10800017 	ldw	r2,0(r2)
    4cb4:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    4cb8:	1005d43a 	srai	r2,r2,16
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
    4cbc:	18800005 	stb	r2,0(r3)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
    4cc0:	bc47883a 	add	r3,r23,r17
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
    4cc4:	a805883a 	mov	r2,r21
    4cc8:	1080c004 	addi	r2,r2,768
    4ccc:	1085883a 	add	r2,r2,r2
    4cd0:	1085883a 	add	r2,r2,r2
    4cd4:	8085883a 	add	r2,r16,r2
    4cd8:	11000017 	ldw	r4,0(r2)
    4cdc:	a005883a 	mov	r2,r20
    4ce0:	10810004 	addi	r2,r2,1024
    4ce4:	1085883a 	add	r2,r2,r2
    4ce8:	1085883a 	add	r2,r2,r2
    4cec:	8085883a 	add	r2,r16,r2
    4cf0:	10800017 	ldw	r2,0(r2)
    4cf4:	2089883a 	add	r4,r4,r2
    4cf8:	9805883a 	mov	r2,r19
    4cfc:	10814004 	addi	r2,r2,1280
    4d00:	1085883a 	add	r2,r2,r2
    4d04:	1085883a 	add	r2,r2,r2
    4d08:	8085883a 	add	r2,r16,r2
    4d0c:	10800017 	ldw	r2,0(r2)
    4d10:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    4d14:	1005d43a 	srai	r2,r2,16
			/* Y */
			outptr0[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
    4d18:	18800005 	stb	r2,0(r3)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	1447883a 	add	r3,r2,r17
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
    4d24:	a805883a 	mov	r2,r21
    4d28:	10814004 	addi	r2,r2,1280
    4d2c:	1085883a 	add	r2,r2,r2
    4d30:	1085883a 	add	r2,r2,r2
    4d34:	8085883a 	add	r2,r16,r2
    4d38:	11000017 	ldw	r4,0(r2)
    4d3c:	a005883a 	mov	r2,r20
    4d40:	10818004 	addi	r2,r2,1536
    4d44:	1085883a 	add	r2,r2,r2
    4d48:	1085883a 	add	r2,r2,r2
    4d4c:	8085883a 	add	r2,r16,r2
    4d50:	10800017 	ldw	r2,0(r2)
    4d54:	2089883a 	add	r4,r4,r2
    4d58:	9805883a 	mov	r2,r19
    4d5c:	1081c004 	addi	r2,r2,1792
    4d60:	1085883a 	add	r2,r2,r2
    4d64:	1085883a 	add	r2,r2,r2
    4d68:	8085883a 	add	r2,r16,r2
    4d6c:	10800017 	ldw	r2,0(r2)
    4d70:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    4d74:	1005d43a 	srai	r2,r2,16
			/* Cb */
			outptr1[col] = (JSAMPLE)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
    4d78:	18800005 	stb	r2,0(r3)
		inptr = *input_buf++;
		outptr0 = output_buf[0][output_row];
		outptr1 = output_buf[1][output_row];
		outptr2 = output_buf[2][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
    4d7c:	8c400044 	addi	r17,r17,1
    4d80:	e0bffa17 	ldw	r2,-24(fp)
    4d84:	88bfaf36 	bltu	r17,r2,4c44 <rgb_ycc_convert+0xe8>
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
    4d88:	e0800917 	ldw	r2,36(fp)
    4d8c:	10bfffc4 	addi	r2,r2,-1
    4d90:	e0800915 	stw	r2,36(fp)
    4d94:	e0800917 	ldw	r2,36(fp)
    4d98:	103f880e 	bge	r2,zero,4bbc <rgb_ycc_convert+0x60>
			outptr2[col] = (JSAMPLE)
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
				>> SCALEBITS);
		}
	}
}
    4d9c:	e037883a 	mov	sp,fp
    4da0:	df000817 	ldw	fp,32(sp)
    4da4:	ddc00717 	ldw	r23,28(sp)
    4da8:	dd800617 	ldw	r22,24(sp)
    4dac:	dd400517 	ldw	r21,20(sp)
    4db0:	dd000417 	ldw	r20,16(sp)
    4db4:	dcc00317 	ldw	r19,12(sp)
    4db8:	dc800217 	ldw	r18,8(sp)
    4dbc:	dc400117 	ldw	r17,4(sp)
    4dc0:	dc000017 	ldw	r16,0(sp)
    4dc4:	dec00904 	addi	sp,sp,36
    4dc8:	f800283a 	ret

00004dcc <rgb_gray_convert>:

METHODDEF(void)
	rgb_gray_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
    4dcc:	defff204 	addi	sp,sp,-56
    4dd0:	df000d15 	stw	fp,52(sp)
    4dd4:	dd800c15 	stw	r22,48(sp)
    4dd8:	dd400b15 	stw	r21,44(sp)
    4ddc:	dd000a15 	stw	r20,40(sp)
    4de0:	dcc00915 	stw	r19,36(sp)
    4de4:	dc800815 	stw	r18,32(sp)
    4de8:	dc400715 	stw	r17,28(sp)
    4dec:	dc000615 	stw	r16,24(sp)
    4df0:	df000604 	addi	fp,sp,24
    4df4:	e13ffc15 	stw	r4,-16(fp)
    4df8:	e17ffd15 	stw	r5,-12(fp)
    4dfc:	e1bffe15 	stw	r6,-8(fp)
    4e00:	e1ffff15 	stw	r7,-4(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
    4e04:	e0bffc17 	ldw	r2,-16(fp)
    4e08:	10806117 	ldw	r2,388(r2)
    4e0c:	e0bffa15 	stw	r2,-24(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
    4e10:	e0bffa17 	ldw	r2,-24(fp)
    4e14:	14800217 	ldw	r18,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
    4e18:	e0bffc17 	ldw	r2,-16(fp)
    4e1c:	10800717 	ldw	r2,28(r2)
    4e20:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
    4e24:	00003306 	br	4ef4 <rgb_gray_convert+0x128>
		inptr = *input_buf++;
    4e28:	e0bffd17 	ldw	r2,-12(fp)
    4e2c:	14000017 	ldw	r16,0(r2)
    4e30:	e0bffd17 	ldw	r2,-12(fp)
    4e34:	10800104 	addi	r2,r2,4
    4e38:	e0bffd15 	stw	r2,-12(fp)
		outptr = output_buf[0][output_row];
    4e3c:	e0bffe17 	ldw	r2,-8(fp)
    4e40:	10c00017 	ldw	r3,0(r2)
    4e44:	e0bfff17 	ldw	r2,-4(fp)
    4e48:	1085883a 	add	r2,r2,r2
    4e4c:	1085883a 	add	r2,r2,r2
    4e50:	1885883a 	add	r2,r3,r2
    4e54:	14c00017 	ldw	r19,0(r2)
		output_row++;
    4e58:	e0bfff17 	ldw	r2,-4(fp)
    4e5c:	10800044 	addi	r2,r2,1
    4e60:	e0bfff15 	stw	r2,-4(fp)
		for (col = 0; col < num_cols; col++) {
    4e64:	0023883a 	mov	r17,zero
    4e68:	00002006 	br	4eec <rgb_gray_convert+0x120>
			r = GETJSAMPLE(inptr[RGB_RED]);
    4e6c:	80800003 	ldbu	r2,0(r16)
    4e70:	15803fcc 	andi	r22,r2,255
			g = GETJSAMPLE(inptr[RGB_GREEN]);
    4e74:	80800044 	addi	r2,r16,1
    4e78:	10800003 	ldbu	r2,0(r2)
    4e7c:	15403fcc 	andi	r21,r2,255
			b = GETJSAMPLE(inptr[RGB_BLUE]);
    4e80:	80800084 	addi	r2,r16,2
    4e84:	10800003 	ldbu	r2,0(r2)
    4e88:	15003fcc 	andi	r20,r2,255
			inptr += RGB_PIXELSIZE;
    4e8c:	840000c4 	addi	r16,r16,3
			/* Y */
			outptr[col] = (JSAMPLE)
    4e90:	9c47883a 	add	r3,r19,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
    4e94:	b005883a 	mov	r2,r22
    4e98:	1085883a 	add	r2,r2,r2
    4e9c:	1085883a 	add	r2,r2,r2
    4ea0:	9085883a 	add	r2,r18,r2
    4ea4:	11000017 	ldw	r4,0(r2)
    4ea8:	a805883a 	mov	r2,r21
    4eac:	10804004 	addi	r2,r2,256
    4eb0:	1085883a 	add	r2,r2,r2
    4eb4:	1085883a 	add	r2,r2,r2
    4eb8:	9085883a 	add	r2,r18,r2
    4ebc:	10800017 	ldw	r2,0(r2)
    4ec0:	2089883a 	add	r4,r4,r2
    4ec4:	a005883a 	mov	r2,r20
    4ec8:	10808004 	addi	r2,r2,512
    4ecc:	1085883a 	add	r2,r2,r2
    4ed0:	1085883a 	add	r2,r2,r2
    4ed4:	9085883a 	add	r2,r18,r2
    4ed8:	10800017 	ldw	r2,0(r2)
    4edc:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    4ee0:	1005d43a 	srai	r2,r2,16
			r = GETJSAMPLE(inptr[RGB_RED]);
			g = GETJSAMPLE(inptr[RGB_GREEN]);
			b = GETJSAMPLE(inptr[RGB_BLUE]);
			inptr += RGB_PIXELSIZE;
			/* Y */
			outptr[col] = (JSAMPLE)
    4ee4:	18800005 	stb	r2,0(r3)

	while (--num_rows >= 0) {
		inptr = *input_buf++;
		outptr = output_buf[0][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
    4ee8:	8c400044 	addi	r17,r17,1
    4eec:	e0bffb17 	ldw	r2,-20(fp)
    4ef0:	88bfde36 	bltu	r17,r2,4e6c <rgb_gray_convert+0xa0>
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
    4ef4:	e0800817 	ldw	r2,32(fp)
    4ef8:	10bfffc4 	addi	r2,r2,-1
    4efc:	e0800815 	stw	r2,32(fp)
    4f00:	e0800817 	ldw	r2,32(fp)
    4f04:	103fc80e 	bge	r2,zero,4e28 <rgb_gray_convert+0x5c>
			outptr[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
		}
	}
}
    4f08:	e037883a 	mov	sp,fp
    4f0c:	df000717 	ldw	fp,28(sp)
    4f10:	dd800617 	ldw	r22,24(sp)
    4f14:	dd400517 	ldw	r21,20(sp)
    4f18:	dd000417 	ldw	r20,16(sp)
    4f1c:	dcc00317 	ldw	r19,12(sp)
    4f20:	dc800217 	ldw	r18,8(sp)
    4f24:	dc400117 	ldw	r17,4(sp)
    4f28:	dc000017 	ldw	r16,0(sp)
    4f2c:	dec00804 	addi	sp,sp,32
    4f30:	f800283a 	ret

00004f34 <cmyk_ycck_convert>:

METHODDEF(void)
	cmyk_ycck_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
    4f34:	deffef04 	addi	sp,sp,-68
    4f38:	df001015 	stw	fp,64(sp)
    4f3c:	ddc00f15 	stw	r23,60(sp)
    4f40:	dd800e15 	stw	r22,56(sp)
    4f44:	dd400d15 	stw	r21,52(sp)
    4f48:	dd000c15 	stw	r20,48(sp)
    4f4c:	dcc00b15 	stw	r19,44(sp)
    4f50:	dc800a15 	stw	r18,40(sp)
    4f54:	dc400915 	stw	r17,36(sp)
    4f58:	dc000815 	stw	r16,32(sp)
    4f5c:	df000804 	addi	fp,sp,32
    4f60:	e13ffa15 	stw	r4,-24(fp)
    4f64:	e17ffb15 	stw	r5,-20(fp)
    4f68:	e1bffc15 	stw	r6,-16(fp)
    4f6c:	e1fffd15 	stw	r7,-12(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
    4f70:	e0bffa17 	ldw	r2,-24(fp)
    4f74:	10806117 	ldw	r2,388(r2)
    4f78:	e0bff815 	stw	r2,-32(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
    4f7c:	e0bff817 	ldw	r2,-32(fp)
    4f80:	14000217 	ldw	r16,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2, outptr3;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
    4f84:	e0bffa17 	ldw	r2,-24(fp)
    4f88:	10800717 	ldw	r2,28(r2)
    4f8c:	e0bff915 	stw	r2,-28(fp)

	while (--num_rows >= 0) {
    4f90:	00008606 	br	51ac <cmyk_ycck_convert+0x278>
		inptr = *input_buf++;
    4f94:	e0bffb17 	ldw	r2,-20(fp)
    4f98:	14800017 	ldw	r18,0(r2)
    4f9c:	e0bffb17 	ldw	r2,-20(fp)
    4fa0:	10800104 	addi	r2,r2,4
    4fa4:	e0bffb15 	stw	r2,-20(fp)
		outptr0 = output_buf[0][output_row];
    4fa8:	e0bffc17 	ldw	r2,-16(fp)
    4fac:	10c00017 	ldw	r3,0(r2)
    4fb0:	e0bffd17 	ldw	r2,-12(fp)
    4fb4:	1085883a 	add	r2,r2,r2
    4fb8:	1085883a 	add	r2,r2,r2
    4fbc:	1885883a 	add	r2,r3,r2
    4fc0:	15800017 	ldw	r22,0(r2)
		outptr1 = output_buf[1][output_row];
    4fc4:	e0bffc17 	ldw	r2,-16(fp)
    4fc8:	10800104 	addi	r2,r2,4
    4fcc:	10c00017 	ldw	r3,0(r2)
    4fd0:	e0bffd17 	ldw	r2,-12(fp)
    4fd4:	1085883a 	add	r2,r2,r2
    4fd8:	1085883a 	add	r2,r2,r2
    4fdc:	1885883a 	add	r2,r3,r2
    4fe0:	15c00017 	ldw	r23,0(r2)
		outptr2 = output_buf[2][output_row];
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10800204 	addi	r2,r2,8
    4fec:	10c00017 	ldw	r3,0(r2)
    4ff0:	e0bffd17 	ldw	r2,-12(fp)
    4ff4:	1085883a 	add	r2,r2,r2
    4ff8:	1085883a 	add	r2,r2,r2
    4ffc:	1885883a 	add	r2,r3,r2
    5000:	10800017 	ldw	r2,0(r2)
    5004:	e0bffe15 	stw	r2,-8(fp)
		outptr3 = output_buf[3][output_row];
    5008:	e0bffc17 	ldw	r2,-16(fp)
    500c:	10800304 	addi	r2,r2,12
    5010:	10c00017 	ldw	r3,0(r2)
    5014:	e0bffd17 	ldw	r2,-12(fp)
    5018:	1085883a 	add	r2,r2,r2
    501c:	1085883a 	add	r2,r2,r2
    5020:	1885883a 	add	r2,r3,r2
    5024:	10800017 	ldw	r2,0(r2)
    5028:	e0bfff15 	stw	r2,-4(fp)
		output_row++;
    502c:	e0bffd17 	ldw	r2,-12(fp)
    5030:	10800044 	addi	r2,r2,1
    5034:	e0bffd15 	stw	r2,-12(fp)
		for (col = 0; col < num_cols; col++) {
    5038:	0023883a 	mov	r17,zero
    503c:	00005906 	br	51a4 <cmyk_ycck_convert+0x270>
			r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
    5040:	90800003 	ldbu	r2,0(r18)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	00c03fc4 	movi	r3,255
    504c:	18abc83a 	sub	r21,r3,r2
			g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
    5050:	90800044 	addi	r2,r18,1
    5054:	10800003 	ldbu	r2,0(r2)
    5058:	10803fcc 	andi	r2,r2,255
    505c:	00c03fc4 	movi	r3,255
    5060:	18a9c83a 	sub	r20,r3,r2
			b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
    5064:	90800084 	addi	r2,r18,2
    5068:	10800003 	ldbu	r2,0(r2)
    506c:	10803fcc 	andi	r2,r2,255
    5070:	00c03fc4 	movi	r3,255
    5074:	18a7c83a 	sub	r19,r3,r2
			/* K passes through as-is */
			outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
    5078:	e0ffff17 	ldw	r3,-4(fp)
    507c:	1c45883a 	add	r2,r3,r17
    5080:	90c000c3 	ldbu	r3,3(r18)
    5084:	10c00005 	stb	r3,0(r2)
			inptr += 4;
    5088:	94800104 	addi	r18,r18,4
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
    508c:	b447883a 	add	r3,r22,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
    5090:	a805883a 	mov	r2,r21
    5094:	1085883a 	add	r2,r2,r2
    5098:	1085883a 	add	r2,r2,r2
    509c:	8085883a 	add	r2,r16,r2
    50a0:	11000017 	ldw	r4,0(r2)
    50a4:	a005883a 	mov	r2,r20
    50a8:	10804004 	addi	r2,r2,256
    50ac:	1085883a 	add	r2,r2,r2
    50b0:	1085883a 	add	r2,r2,r2
    50b4:	8085883a 	add	r2,r16,r2
    50b8:	10800017 	ldw	r2,0(r2)
    50bc:	2089883a 	add	r4,r4,r2
    50c0:	9805883a 	mov	r2,r19
    50c4:	10808004 	addi	r2,r2,512
    50c8:	1085883a 	add	r2,r2,r2
    50cc:	1085883a 	add	r2,r2,r2
    50d0:	8085883a 	add	r2,r16,r2
    50d4:	10800017 	ldw	r2,0(r2)
    50d8:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    50dc:	1005d43a 	srai	r2,r2,16
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
    50e0:	18800005 	stb	r2,0(r3)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
    50e4:	bc47883a 	add	r3,r23,r17
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
    50e8:	a805883a 	mov	r2,r21
    50ec:	1080c004 	addi	r2,r2,768
    50f0:	1085883a 	add	r2,r2,r2
    50f4:	1085883a 	add	r2,r2,r2
    50f8:	8085883a 	add	r2,r16,r2
    50fc:	11000017 	ldw	r4,0(r2)
    5100:	a005883a 	mov	r2,r20
    5104:	10810004 	addi	r2,r2,1024
    5108:	1085883a 	add	r2,r2,r2
    510c:	1085883a 	add	r2,r2,r2
    5110:	8085883a 	add	r2,r16,r2
    5114:	10800017 	ldw	r2,0(r2)
    5118:	2089883a 	add	r4,r4,r2
    511c:	9805883a 	mov	r2,r19
    5120:	10814004 	addi	r2,r2,1280
    5124:	1085883a 	add	r2,r2,r2
    5128:	1085883a 	add	r2,r2,r2
    512c:	8085883a 	add	r2,r16,r2
    5130:	10800017 	ldw	r2,0(r2)
    5134:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    5138:	1005d43a 	srai	r2,r2,16
			/* Y */
			outptr0[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
    513c:	18800005 	stb	r2,0(r3)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
    5140:	e0bffe17 	ldw	r2,-8(fp)
    5144:	1447883a 	add	r3,r2,r17
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
    5148:	a805883a 	mov	r2,r21
    514c:	10814004 	addi	r2,r2,1280
    5150:	1085883a 	add	r2,r2,r2
    5154:	1085883a 	add	r2,r2,r2
    5158:	8085883a 	add	r2,r16,r2
    515c:	11000017 	ldw	r4,0(r2)
    5160:	a005883a 	mov	r2,r20
    5164:	10818004 	addi	r2,r2,1536
    5168:	1085883a 	add	r2,r2,r2
    516c:	1085883a 	add	r2,r2,r2
    5170:	8085883a 	add	r2,r16,r2
    5174:	10800017 	ldw	r2,0(r2)
    5178:	2089883a 	add	r4,r4,r2
    517c:	9805883a 	mov	r2,r19
    5180:	1081c004 	addi	r2,r2,1792
    5184:	1085883a 	add	r2,r2,r2
    5188:	1085883a 	add	r2,r2,r2
    518c:	8085883a 	add	r2,r16,r2
    5190:	10800017 	ldw	r2,0(r2)
    5194:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
    5198:	1005d43a 	srai	r2,r2,16
			/* Cb */
			outptr1[col] = (JSAMPLE)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
    519c:	18800005 	stb	r2,0(r3)
		outptr0 = output_buf[0][output_row];
		outptr1 = output_buf[1][output_row];
		outptr2 = output_buf[2][output_row];
		outptr3 = output_buf[3][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
    51a0:	8c400044 	addi	r17,r17,1
    51a4:	e0bff917 	ldw	r2,-28(fp)
    51a8:	88bfa536 	bltu	r17,r2,5040 <cmyk_ycck_convert+0x10c>
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2, outptr3;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
    51ac:	e0800917 	ldw	r2,36(fp)
    51b0:	10bfffc4 	addi	r2,r2,-1
    51b4:	e0800915 	stw	r2,36(fp)
    51b8:	e0800917 	ldw	r2,36(fp)
    51bc:	103f750e 	bge	r2,zero,4f94 <cmyk_ycck_convert+0x60>
			outptr2[col] = (JSAMPLE)
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
				>> SCALEBITS);
		}
	}
}
    51c0:	e037883a 	mov	sp,fp
    51c4:	df000817 	ldw	fp,32(sp)
    51c8:	ddc00717 	ldw	r23,28(sp)
    51cc:	dd800617 	ldw	r22,24(sp)
    51d0:	dd400517 	ldw	r21,20(sp)
    51d4:	dd000417 	ldw	r20,16(sp)
    51d8:	dcc00317 	ldw	r19,12(sp)
    51dc:	dc800217 	ldw	r18,8(sp)
    51e0:	dc400117 	ldw	r17,4(sp)
    51e4:	dc000017 	ldw	r16,0(sp)
    51e8:	dec00904 	addi	sp,sp,36
    51ec:	f800283a 	ret

000051f0 <grayscale_convert>:

METHODDEF(void)
	grayscale_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
    51f0:	defff604 	addi	sp,sp,-40
    51f4:	df000915 	stw	fp,36(sp)
    51f8:	dc800815 	stw	r18,32(sp)
    51fc:	dc400715 	stw	r17,28(sp)
    5200:	dc000615 	stw	r16,24(sp)
    5204:	df000604 	addi	fp,sp,24
    5208:	e13ffc15 	stw	r4,-16(fp)
    520c:	e17ffd15 	stw	r5,-12(fp)
    5210:	e1bffe15 	stw	r6,-8(fp)
    5214:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
    5218:	e0bffc17 	ldw	r2,-16(fp)
    521c:	10800717 	ldw	r2,28(r2)
    5220:	e0bffa15 	stw	r2,-24(fp)
	int instride = cinfo->input_components;
    5224:	e0bffc17 	ldw	r2,-16(fp)
    5228:	10800917 	ldw	r2,36(r2)
    522c:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
    5230:	00001906 	br	5298 <grayscale_convert+0xa8>
		inptr = *input_buf++;
    5234:	e0bffd17 	ldw	r2,-12(fp)
    5238:	14400017 	ldw	r17,0(r2)
    523c:	e0bffd17 	ldw	r2,-12(fp)
    5240:	10800104 	addi	r2,r2,4
    5244:	e0bffd15 	stw	r2,-12(fp)
		outptr = output_buf[0][output_row];
    5248:	e0bffe17 	ldw	r2,-8(fp)
    524c:	10c00017 	ldw	r3,0(r2)
    5250:	e0bfff17 	ldw	r2,-4(fp)
    5254:	1085883a 	add	r2,r2,r2
    5258:	1085883a 	add	r2,r2,r2
    525c:	1885883a 	add	r2,r3,r2
    5260:	14800017 	ldw	r18,0(r2)
		output_row++;
    5264:	e0bfff17 	ldw	r2,-4(fp)
    5268:	10800044 	addi	r2,r2,1
    526c:	e0bfff15 	stw	r2,-4(fp)
		for (col = 0; col < num_cols; col++) {
    5270:	0021883a 	mov	r16,zero
    5274:	00000606 	br	5290 <grayscale_convert+0xa0>
			outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
    5278:	9405883a 	add	r2,r18,r16
    527c:	88c00003 	ldbu	r3,0(r17)
    5280:	10c00005 	stb	r3,0(r2)
			inptr += instride;
    5284:	e0bffb17 	ldw	r2,-20(fp)
    5288:	88a3883a 	add	r17,r17,r2

	while (--num_rows >= 0) {
		inptr = *input_buf++;
		outptr = output_buf[0][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
    528c:	84000044 	addi	r16,r16,1
    5290:	e0bffa17 	ldw	r2,-24(fp)
    5294:	80bff836 	bltu	r16,r2,5278 <grayscale_convert+0x88>
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
	int instride = cinfo->input_components;

	while (--num_rows >= 0) {
    5298:	e0800417 	ldw	r2,16(fp)
    529c:	10bfffc4 	addi	r2,r2,-1
    52a0:	e0800415 	stw	r2,16(fp)
    52a4:	e0800417 	ldw	r2,16(fp)
    52a8:	103fe20e 	bge	r2,zero,5234 <grayscale_convert+0x44>
		for (col = 0; col < num_cols; col++) {
			outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
			inptr += instride;
		}
	}
}
    52ac:	e037883a 	mov	sp,fp
    52b0:	df000317 	ldw	fp,12(sp)
    52b4:	dc800217 	ldw	r18,8(sp)
    52b8:	dc400117 	ldw	r17,4(sp)
    52bc:	dc000017 	ldw	r16,0(sp)
    52c0:	dec00404 	addi	sp,sp,16
    52c4:	f800283a 	ret

000052c8 <null_convert>:

METHODDEF(void)
	null_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
    52c8:	defff504 	addi	sp,sp,-44
    52cc:	df000a15 	stw	fp,40(sp)
    52d0:	dcc00915 	stw	r19,36(sp)
    52d4:	dc800815 	stw	r18,32(sp)
    52d8:	dc400715 	stw	r17,28(sp)
    52dc:	dc000615 	stw	r16,24(sp)
    52e0:	df000604 	addi	fp,sp,24
    52e4:	e13ffc15 	stw	r4,-16(fp)
    52e8:	e17ffd15 	stw	r5,-12(fp)
    52ec:	e1bffe15 	stw	r6,-8(fp)
    52f0:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	register int ci;
	int nc = cinfo->num_components;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10801217 	ldw	r2,72(r2)
    52fc:	e0bffa15 	stw	r2,-24(fp)
	JDIMENSION num_cols = cinfo->image_width;
    5300:	e0bffc17 	ldw	r2,-16(fp)
    5304:	10800717 	ldw	r2,28(r2)
    5308:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
    530c:	00002406 	br	53a0 <null_convert+0xd8>
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
    5310:	0021883a 	mov	r16,zero
    5314:	00001a06 	br	5380 <null_convert+0xb8>
			inptr = *input_buf;
    5318:	e0bffd17 	ldw	r2,-12(fp)
    531c:	14800017 	ldw	r18,0(r2)
			outptr = output_buf[ci][output_row];
    5320:	8005883a 	mov	r2,r16
    5324:	1085883a 	add	r2,r2,r2
    5328:	1085883a 	add	r2,r2,r2
    532c:	e0fffe17 	ldw	r3,-8(fp)
    5330:	1885883a 	add	r2,r3,r2
    5334:	10c00017 	ldw	r3,0(r2)
    5338:	e0bfff17 	ldw	r2,-4(fp)
    533c:	1085883a 	add	r2,r2,r2
    5340:	1085883a 	add	r2,r2,r2
    5344:	1885883a 	add	r2,r3,r2
    5348:	14c00017 	ldw	r19,0(r2)
			for (col = 0; col < num_cols; col++) {
    534c:	0023883a 	mov	r17,zero
    5350:	00000806 	br	5374 <null_convert+0xac>
				outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
    5354:	9c45883a 	add	r2,r19,r17
    5358:	8007883a 	mov	r3,r16
    535c:	90c7883a 	add	r3,r18,r3
    5360:	18c00003 	ldbu	r3,0(r3)
    5364:	10c00005 	stb	r3,0(r2)
				inptr += nc;
    5368:	e0bffa17 	ldw	r2,-24(fp)
    536c:	90a5883a 	add	r18,r18,r2
	while (--num_rows >= 0) {
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
			inptr = *input_buf;
			outptr = output_buf[ci][output_row];
			for (col = 0; col < num_cols; col++) {
    5370:	8c400044 	addi	r17,r17,1
    5374:	e0bffb17 	ldw	r2,-20(fp)
    5378:	88bff636 	bltu	r17,r2,5354 <null_convert+0x8c>
	int nc = cinfo->num_components;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
    537c:	84000044 	addi	r16,r16,1
    5380:	e0bffa17 	ldw	r2,-24(fp)
    5384:	80bfe416 	blt	r16,r2,5318 <null_convert+0x50>
			for (col = 0; col < num_cols; col++) {
				outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
				inptr += nc;
			}
		}
		input_buf++;
    5388:	e0bffd17 	ldw	r2,-12(fp)
    538c:	10800104 	addi	r2,r2,4
    5390:	e0bffd15 	stw	r2,-12(fp)
		output_row++;
    5394:	e0bfff17 	ldw	r2,-4(fp)
    5398:	10800044 	addi	r2,r2,1
    539c:	e0bfff15 	stw	r2,-4(fp)
	register JDIMENSION col;
	register int ci;
	int nc = cinfo->num_components;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
    53a0:	e0800517 	ldw	r2,20(fp)
    53a4:	10bfffc4 	addi	r2,r2,-1
    53a8:	e0800515 	stw	r2,20(fp)
    53ac:	e0800517 	ldw	r2,20(fp)
    53b0:	103fd70e 	bge	r2,zero,5310 <null_convert+0x48>
			}
		}
		input_buf++;
		output_row++;
	}
}
    53b4:	e037883a 	mov	sp,fp
    53b8:	df000417 	ldw	fp,16(sp)
    53bc:	dcc00317 	ldw	r19,12(sp)
    53c0:	dc800217 	ldw	r18,8(sp)
    53c4:	dc400117 	ldw	r17,4(sp)
    53c8:	dc000017 	ldw	r16,0(sp)
    53cc:	dec00504 	addi	sp,sp,20
    53d0:	f800283a 	ret

000053d4 <null_method>:
* Empty method for start_pass.
*/

METHODDEF(void)
	null_method (j_compress_ptr cinfo)
{
    53d4:	defffe04 	addi	sp,sp,-8
    53d8:	df000115 	stw	fp,4(sp)
    53dc:	df000104 	addi	fp,sp,4
    53e0:	e13fff15 	stw	r4,-4(fp)
	/* no work needed */
}
    53e4:	e037883a 	mov	sp,fp
    53e8:	df000017 	ldw	fp,0(sp)
    53ec:	dec00104 	addi	sp,sp,4
    53f0:	f800283a 	ret

000053f4 <jinit_color_converter>:
* Module initialization routine for input colorspace conversion.
*/

GLOBAL(void)
	jinit_color_converter (j_compress_ptr cinfo)
{
    53f4:	defffc04 	addi	sp,sp,-16
    53f8:	dfc00315 	stw	ra,12(sp)
    53fc:	df000215 	stw	fp,8(sp)
    5400:	df000204 	addi	fp,sp,8
    5404:	e13fff15 	stw	r4,-4(fp)
	my_cconvert_ptr cconvert;

	cconvert = (my_cconvert_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    5408:	e0bfff17 	ldw	r2,-4(fp)
    540c:	10800117 	ldw	r2,4(r2)
    5410:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_color_converter (j_compress_ptr cinfo)
{
	my_cconvert_ptr cconvert;

	cconvert = (my_cconvert_ptr)
    5414:	e13fff17 	ldw	r4,-4(fp)
    5418:	01400044 	movi	r5,1
    541c:	01800304 	movi	r6,12
    5420:	103ee83a 	callr	r2
    5424:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_color_converter));
	cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
    5428:	e0bfff17 	ldw	r2,-4(fp)
    542c:	e0fffe17 	ldw	r3,-8(fp)
    5430:	10c06115 	stw	r3,388(r2)
	/* set start_pass to null method until we find out differently */
	cconvert->pub.start_pass = null_method;
    5434:	e0bffe17 	ldw	r2,-8(fp)
    5438:	00c00034 	movhi	r3,0
    543c:	18d4f504 	addi	r3,r3,21460
    5440:	10c00015 	stw	r3,0(r2)

	/* Make sure input_components agrees with in_color_space */
	switch (cinfo->in_color_space) {
    5444:	e0bfff17 	ldw	r2,-4(fp)
    5448:	10800a17 	ldw	r2,40(r2)
    544c:	10c001a8 	cmpgeui	r3,r2,6
    5450:	1800371e 	bne	r3,zero,5530 <jinit_color_converter+0x13c>
    5454:	1085883a 	add	r2,r2,r2
    5458:	1087883a 	add	r3,r2,r2
    545c:	00800034 	movhi	r2,0
    5460:	10951c04 	addi	r2,r2,21616
    5464:	1885883a 	add	r2,r3,r2
    5468:	10800017 	ldw	r2,0(r2)
    546c:	1000683a 	jmp	r2
    5470:	00005530 	cmpltui	zero,zero,340
    5474:	00005488 	cmpgei	zero,zero,338
    5478:	000054c0 	call	54c <bmp_extract+0x50>
    547c:	000054c0 	call	54c <bmp_extract+0x50>
    5480:	000054f8 	rdprs	zero,zero,339
    5484:	000054f8 	rdprs	zero,zero,339
	case JCS_GRAYSCALE:
		if (cinfo->input_components != 1)
    5488:	e0bfff17 	ldw	r2,-4(fp)
    548c:	10800917 	ldw	r2,36(r2)
    5490:	10800060 	cmpeqi	r2,r2,1
    5494:	1000331e 	bne	r2,zero,5564 <jinit_color_converter+0x170>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    5498:	e0bfff17 	ldw	r2,-4(fp)
    549c:	10800017 	ldw	r2,0(r2)
    54a0:	00c00284 	movi	r3,10
    54a4:	10c00515 	stw	r3,20(r2)
    54a8:	e0bfff17 	ldw	r2,-4(fp)
    54ac:	10800017 	ldw	r2,0(r2)
    54b0:	10800017 	ldw	r2,0(r2)
    54b4:	e13fff17 	ldw	r4,-4(fp)
    54b8:	103ee83a 	callr	r2
		break;
    54bc:	00002906 	br	5564 <jinit_color_converter+0x170>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
#endif /* else share code with YCbCr */

	case JCS_YCbCr:
		if (cinfo->input_components != 3)
    54c0:	e0bfff17 	ldw	r2,-4(fp)
    54c4:	10800917 	ldw	r2,36(r2)
    54c8:	108000e0 	cmpeqi	r2,r2,3
    54cc:	1000271e 	bne	r2,zero,556c <jinit_color_converter+0x178>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    54d0:	e0bfff17 	ldw	r2,-4(fp)
    54d4:	10800017 	ldw	r2,0(r2)
    54d8:	00c00284 	movi	r3,10
    54dc:	10c00515 	stw	r3,20(r2)
    54e0:	e0bfff17 	ldw	r2,-4(fp)
    54e4:	10800017 	ldw	r2,0(r2)
    54e8:	10800017 	ldw	r2,0(r2)
    54ec:	e13fff17 	ldw	r4,-4(fp)
    54f0:	103ee83a 	callr	r2
		break;
    54f4:	00001d06 	br	556c <jinit_color_converter+0x178>

	case JCS_CMYK:
	case JCS_YCCK:
		if (cinfo->input_components != 4)
    54f8:	e0bfff17 	ldw	r2,-4(fp)
    54fc:	10800917 	ldw	r2,36(r2)
    5500:	10800120 	cmpeqi	r2,r2,4
    5504:	10001b1e 	bne	r2,zero,5574 <jinit_color_converter+0x180>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    5508:	e0bfff17 	ldw	r2,-4(fp)
    550c:	10800017 	ldw	r2,0(r2)
    5510:	00c00284 	movi	r3,10
    5514:	10c00515 	stw	r3,20(r2)
    5518:	e0bfff17 	ldw	r2,-4(fp)
    551c:	10800017 	ldw	r2,0(r2)
    5520:	10800017 	ldw	r2,0(r2)
    5524:	e13fff17 	ldw	r4,-4(fp)
    5528:	103ee83a 	callr	r2
		break;
    552c:	00001106 	br	5574 <jinit_color_converter+0x180>

	default:			/* JCS_UNKNOWN can be anything */
		if (cinfo->input_components < 1)
    5530:	e0bfff17 	ldw	r2,-4(fp)
    5534:	10800917 	ldw	r2,36(r2)
    5538:	00801016 	blt	zero,r2,557c <jinit_color_converter+0x188>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    553c:	e0bfff17 	ldw	r2,-4(fp)
    5540:	10800017 	ldw	r2,0(r2)
    5544:	00c00284 	movi	r3,10
    5548:	10c00515 	stw	r3,20(r2)
    554c:	e0bfff17 	ldw	r2,-4(fp)
    5550:	10800017 	ldw	r2,0(r2)
    5554:	10800017 	ldw	r2,0(r2)
    5558:	e13fff17 	ldw	r4,-4(fp)
    555c:	103ee83a 	callr	r2
		break;
    5560:	00000606 	br	557c <jinit_color_converter+0x188>
	/* Make sure input_components agrees with in_color_space */
	switch (cinfo->in_color_space) {
	case JCS_GRAYSCALE:
		if (cinfo->input_components != 1)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
    5564:	0001883a 	nop
    5568:	00000506 	br	5580 <jinit_color_converter+0x18c>
#endif /* else share code with YCbCr */

	case JCS_YCbCr:
		if (cinfo->input_components != 3)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
    556c:	0001883a 	nop
    5570:	00000306 	br	5580 <jinit_color_converter+0x18c>

	case JCS_CMYK:
	case JCS_YCCK:
		if (cinfo->input_components != 4)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
    5574:	0001883a 	nop
    5578:	00000106 	br	5580 <jinit_color_converter+0x18c>

	default:			/* JCS_UNKNOWN can be anything */
		if (cinfo->input_components < 1)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
    557c:	0001883a 	nop
	}

	/* Check num_components, set conversion method based on requested space */
	switch (cinfo->jpeg_color_space) {
    5580:	e0bfff17 	ldw	r2,-4(fp)
    5584:	10801317 	ldw	r2,76(r2)
    5588:	10c001a8 	cmpgeui	r3,r2,6
    558c:	1800dd1e 	bne	r3,zero,5904 <jinit_color_converter+0x510>
    5590:	1085883a 	add	r2,r2,r2
    5594:	1087883a 	add	r3,r2,r2
    5598:	00800034 	movhi	r2,0
    559c:	10956b04 	addi	r2,r2,21932
    55a0:	1885883a 	add	r2,r3,r2
    55a4:	10800017 	ldw	r2,0(r2)
    55a8:	1000683a 	jmp	r2
    55ac:	00005904 	movi	zero,356
    55b0:	000055c4 	movi	zero,343
    55b4:	0000569c 	xori	zero,zero,346
    55b8:	0000571c 	xori	zero,zero,348
    55bc:	000057d0 	cmplti	zero,zero,351
    55c0:	00005850 	cmplti	zero,zero,353
	case JCS_GRAYSCALE:
		if (cinfo->num_components != 1)
    55c4:	e0bfff17 	ldw	r2,-4(fp)
    55c8:	10801217 	ldw	r2,72(r2)
    55cc:	10800060 	cmpeqi	r2,r2,1
    55d0:	1000091e 	bne	r2,zero,55f8 <jinit_color_converter+0x204>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    55d4:	e0bfff17 	ldw	r2,-4(fp)
    55d8:	10800017 	ldw	r2,0(r2)
    55dc:	00c002c4 	movi	r3,11
    55e0:	10c00515 	stw	r3,20(r2)
    55e4:	e0bfff17 	ldw	r2,-4(fp)
    55e8:	10800017 	ldw	r2,0(r2)
    55ec:	10800017 	ldw	r2,0(r2)
    55f0:	e13fff17 	ldw	r4,-4(fp)
    55f4:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_GRAYSCALE)
    55f8:	e0bfff17 	ldw	r2,-4(fp)
    55fc:	10800a17 	ldw	r2,40(r2)
    5600:	10800058 	cmpnei	r2,r2,1
    5604:	1000051e 	bne	r2,zero,561c <jinit_color_converter+0x228>
			cconvert->pub.color_convert = grayscale_convert;
    5608:	e0bffe17 	ldw	r2,-8(fp)
    560c:	00c00034 	movhi	r3,0
    5610:	18d47c04 	addi	r3,r3,20976
    5614:	10c00115 	stw	r3,4(r2)
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    5618:	0000d206 	br	5964 <jinit_color_converter+0x570>
	case JCS_GRAYSCALE:
		if (cinfo->num_components != 1)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_GRAYSCALE)
			cconvert->pub.color_convert = grayscale_convert;
		else if (cinfo->in_color_space == JCS_RGB) {
    561c:	e0bfff17 	ldw	r2,-4(fp)
    5620:	10800a17 	ldw	r2,40(r2)
    5624:	10800098 	cmpnei	r2,r2,2
    5628:	1000091e 	bne	r2,zero,5650 <jinit_color_converter+0x25c>
			cconvert->pub.start_pass = rgb_ycc_start;
    562c:	e0bffe17 	ldw	r2,-8(fp)
    5630:	00c00034 	movhi	r3,0
    5634:	18d26204 	addi	r3,r3,18824
    5638:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = rgb_gray_convert;
    563c:	e0bffe17 	ldw	r2,-8(fp)
    5640:	00c00034 	movhi	r3,0
    5644:	18d37304 	addi	r3,r3,19916
    5648:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    564c:	0000c506 	br	5964 <jinit_color_converter+0x570>
		if (cinfo->in_color_space == JCS_GRAYSCALE)
			cconvert->pub.color_convert = grayscale_convert;
		else if (cinfo->in_color_space == JCS_RGB) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
    5650:	e0bfff17 	ldw	r2,-4(fp)
    5654:	10800a17 	ldw	r2,40(r2)
    5658:	108000d8 	cmpnei	r2,r2,3
    565c:	1000051e 	bne	r2,zero,5674 <jinit_color_converter+0x280>
			cconvert->pub.color_convert = grayscale_convert;
    5660:	e0bffe17 	ldw	r2,-8(fp)
    5664:	00c00034 	movhi	r3,0
    5668:	18d47c04 	addi	r3,r3,20976
    566c:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    5670:	0000bc06 	br	5964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    5674:	e0bfff17 	ldw	r2,-4(fp)
    5678:	10800017 	ldw	r2,0(r2)
    567c:	00c00704 	movi	r3,28
    5680:	10c00515 	stw	r3,20(r2)
    5684:	e0bfff17 	ldw	r2,-4(fp)
    5688:	10800017 	ldw	r2,0(r2)
    568c:	10800017 	ldw	r2,0(r2)
    5690:	e13fff17 	ldw	r4,-4(fp)
    5694:	103ee83a 	callr	r2
		break;
    5698:	0000b206 	br	5964 <jinit_color_converter+0x570>

	case JCS_RGB:
		if (cinfo->num_components != 3)
    569c:	e0bfff17 	ldw	r2,-4(fp)
    56a0:	10801217 	ldw	r2,72(r2)
    56a4:	108000e0 	cmpeqi	r2,r2,3
    56a8:	1000091e 	bne	r2,zero,56d0 <jinit_color_converter+0x2dc>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    56ac:	e0bfff17 	ldw	r2,-4(fp)
    56b0:	10800017 	ldw	r2,0(r2)
    56b4:	00c002c4 	movi	r3,11
    56b8:	10c00515 	stw	r3,20(r2)
    56bc:	e0bfff17 	ldw	r2,-4(fp)
    56c0:	10800017 	ldw	r2,0(r2)
    56c4:	10800017 	ldw	r2,0(r2)
    56c8:	e13fff17 	ldw	r4,-4(fp)
    56cc:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
    56d0:	e0bfff17 	ldw	r2,-4(fp)
    56d4:	10800a17 	ldw	r2,40(r2)
    56d8:	10800098 	cmpnei	r2,r2,2
    56dc:	1000051e 	bne	r2,zero,56f4 <jinit_color_converter+0x300>
			cconvert->pub.color_convert = null_convert;
    56e0:	e0bffe17 	ldw	r2,-8(fp)
    56e4:	00c00034 	movhi	r3,0
    56e8:	18d4b204 	addi	r3,r3,21192
    56ec:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    56f0:	00009c06 	br	5964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 3)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    56f4:	e0bfff17 	ldw	r2,-4(fp)
    56f8:	10800017 	ldw	r2,0(r2)
    56fc:	00c00704 	movi	r3,28
    5700:	10c00515 	stw	r3,20(r2)
    5704:	e0bfff17 	ldw	r2,-4(fp)
    5708:	10800017 	ldw	r2,0(r2)
    570c:	10800017 	ldw	r2,0(r2)
    5710:	e13fff17 	ldw	r4,-4(fp)
    5714:	103ee83a 	callr	r2
		break;
    5718:	00009206 	br	5964 <jinit_color_converter+0x570>

	case JCS_YCbCr:
		if (cinfo->num_components != 3)
    571c:	e0bfff17 	ldw	r2,-4(fp)
    5720:	10801217 	ldw	r2,72(r2)
    5724:	108000e0 	cmpeqi	r2,r2,3
    5728:	1000091e 	bne	r2,zero,5750 <jinit_color_converter+0x35c>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    572c:	e0bfff17 	ldw	r2,-4(fp)
    5730:	10800017 	ldw	r2,0(r2)
    5734:	00c002c4 	movi	r3,11
    5738:	10c00515 	stw	r3,20(r2)
    573c:	e0bfff17 	ldw	r2,-4(fp)
    5740:	10800017 	ldw	r2,0(r2)
    5744:	10800017 	ldw	r2,0(r2)
    5748:	e13fff17 	ldw	r4,-4(fp)
    574c:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_RGB) {
    5750:	e0bfff17 	ldw	r2,-4(fp)
    5754:	10800a17 	ldw	r2,40(r2)
    5758:	10800098 	cmpnei	r2,r2,2
    575c:	1000091e 	bne	r2,zero,5784 <jinit_color_converter+0x390>
			cconvert->pub.start_pass = rgb_ycc_start;
    5760:	e0bffe17 	ldw	r2,-8(fp)
    5764:	00c00034 	movhi	r3,0
    5768:	18d26204 	addi	r3,r3,18824
    576c:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = rgb_ycc_convert;
    5770:	e0bffe17 	ldw	r2,-8(fp)
    5774:	00c00034 	movhi	r3,0
    5778:	18d2d704 	addi	r3,r3,19292
    577c:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    5780:	00007806 	br	5964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 3)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_RGB) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_ycc_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
    5784:	e0bfff17 	ldw	r2,-4(fp)
    5788:	10800a17 	ldw	r2,40(r2)
    578c:	108000d8 	cmpnei	r2,r2,3
    5790:	1000051e 	bne	r2,zero,57a8 <jinit_color_converter+0x3b4>
			cconvert->pub.color_convert = null_convert;
    5794:	e0bffe17 	ldw	r2,-8(fp)
    5798:	00c00034 	movhi	r3,0
    579c:	18d4b204 	addi	r3,r3,21192
    57a0:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    57a4:	00006f06 	br	5964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_ycc_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    57a8:	e0bfff17 	ldw	r2,-4(fp)
    57ac:	10800017 	ldw	r2,0(r2)
    57b0:	00c00704 	movi	r3,28
    57b4:	10c00515 	stw	r3,20(r2)
    57b8:	e0bfff17 	ldw	r2,-4(fp)
    57bc:	10800017 	ldw	r2,0(r2)
    57c0:	10800017 	ldw	r2,0(r2)
    57c4:	e13fff17 	ldw	r4,-4(fp)
    57c8:	103ee83a 	callr	r2
		break;
    57cc:	00006506 	br	5964 <jinit_color_converter+0x570>

	case JCS_CMYK:
		if (cinfo->num_components != 4)
    57d0:	e0bfff17 	ldw	r2,-4(fp)
    57d4:	10801217 	ldw	r2,72(r2)
    57d8:	10800120 	cmpeqi	r2,r2,4
    57dc:	1000091e 	bne	r2,zero,5804 <jinit_color_converter+0x410>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    57e0:	e0bfff17 	ldw	r2,-4(fp)
    57e4:	10800017 	ldw	r2,0(r2)
    57e8:	00c002c4 	movi	r3,11
    57ec:	10c00515 	stw	r3,20(r2)
    57f0:	e0bfff17 	ldw	r2,-4(fp)
    57f4:	10800017 	ldw	r2,0(r2)
    57f8:	10800017 	ldw	r2,0(r2)
    57fc:	e13fff17 	ldw	r4,-4(fp)
    5800:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_CMYK)
    5804:	e0bfff17 	ldw	r2,-4(fp)
    5808:	10800a17 	ldw	r2,40(r2)
    580c:	10800118 	cmpnei	r2,r2,4
    5810:	1000051e 	bne	r2,zero,5828 <jinit_color_converter+0x434>
			cconvert->pub.color_convert = null_convert;
    5814:	e0bffe17 	ldw	r2,-8(fp)
    5818:	00c00034 	movhi	r3,0
    581c:	18d4b204 	addi	r3,r3,21192
    5820:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    5824:	00004f06 	br	5964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 4)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_CMYK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    5828:	e0bfff17 	ldw	r2,-4(fp)
    582c:	10800017 	ldw	r2,0(r2)
    5830:	00c00704 	movi	r3,28
    5834:	10c00515 	stw	r3,20(r2)
    5838:	e0bfff17 	ldw	r2,-4(fp)
    583c:	10800017 	ldw	r2,0(r2)
    5840:	10800017 	ldw	r2,0(r2)
    5844:	e13fff17 	ldw	r4,-4(fp)
    5848:	103ee83a 	callr	r2
		break;
    584c:	00004506 	br	5964 <jinit_color_converter+0x570>

	case JCS_YCCK:
		if (cinfo->num_components != 4)
    5850:	e0bfff17 	ldw	r2,-4(fp)
    5854:	10801217 	ldw	r2,72(r2)
    5858:	10800120 	cmpeqi	r2,r2,4
    585c:	1000091e 	bne	r2,zero,5884 <jinit_color_converter+0x490>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    5860:	e0bfff17 	ldw	r2,-4(fp)
    5864:	10800017 	ldw	r2,0(r2)
    5868:	00c002c4 	movi	r3,11
    586c:	10c00515 	stw	r3,20(r2)
    5870:	e0bfff17 	ldw	r2,-4(fp)
    5874:	10800017 	ldw	r2,0(r2)
    5878:	10800017 	ldw	r2,0(r2)
    587c:	e13fff17 	ldw	r4,-4(fp)
    5880:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_CMYK) {
    5884:	e0bfff17 	ldw	r2,-4(fp)
    5888:	10800a17 	ldw	r2,40(r2)
    588c:	10800118 	cmpnei	r2,r2,4
    5890:	1000091e 	bne	r2,zero,58b8 <jinit_color_converter+0x4c4>
			cconvert->pub.start_pass = rgb_ycc_start;
    5894:	e0bffe17 	ldw	r2,-8(fp)
    5898:	00c00034 	movhi	r3,0
    589c:	18d26204 	addi	r3,r3,18824
    58a0:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = cmyk_ycck_convert;
    58a4:	e0bffe17 	ldw	r2,-8(fp)
    58a8:	00c00034 	movhi	r3,0
    58ac:	18d3cd04 	addi	r3,r3,20276
    58b0:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCCK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    58b4:	00002b06 	br	5964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 4)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_CMYK) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = cmyk_ycck_convert;
		} else if (cinfo->in_color_space == JCS_YCCK)
    58b8:	e0bfff17 	ldw	r2,-4(fp)
    58bc:	10800a17 	ldw	r2,40(r2)
    58c0:	10800158 	cmpnei	r2,r2,5
    58c4:	1000051e 	bne	r2,zero,58dc <jinit_color_converter+0x4e8>
			cconvert->pub.color_convert = null_convert;
    58c8:	e0bffe17 	ldw	r2,-8(fp)
    58cc:	00c00034 	movhi	r3,0
    58d0:	18d4b204 	addi	r3,r3,21192
    58d4:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
    58d8:	00002206 	br	5964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = cmyk_ycck_convert;
		} else if (cinfo->in_color_space == JCS_YCCK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    58dc:	e0bfff17 	ldw	r2,-4(fp)
    58e0:	10800017 	ldw	r2,0(r2)
    58e4:	00c00704 	movi	r3,28
    58e8:	10c00515 	stw	r3,20(r2)
    58ec:	e0bfff17 	ldw	r2,-4(fp)
    58f0:	10800017 	ldw	r2,0(r2)
    58f4:	10800017 	ldw	r2,0(r2)
    58f8:	e13fff17 	ldw	r4,-4(fp)
    58fc:	103ee83a 	callr	r2
		break;
    5900:	00001806 	br	5964 <jinit_color_converter+0x570>

	default:			/* allow null conversion of JCS_UNKNOWN */
		if (cinfo->jpeg_color_space != cinfo->in_color_space ||
    5904:	e0bfff17 	ldw	r2,-4(fp)
    5908:	10c01317 	ldw	r3,76(r2)
    590c:	e0bfff17 	ldw	r2,-4(fp)
    5910:	10800a17 	ldw	r2,40(r2)
    5914:	1880051e 	bne	r3,r2,592c <jinit_color_converter+0x538>
			cinfo->num_components != cinfo->input_components)
    5918:	e0bfff17 	ldw	r2,-4(fp)
    591c:	10c01217 	ldw	r3,72(r2)
    5920:	e0bfff17 	ldw	r2,-4(fp)
    5924:	10800917 	ldw	r2,36(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;

	default:			/* allow null conversion of JCS_UNKNOWN */
		if (cinfo->jpeg_color_space != cinfo->in_color_space ||
    5928:	18800926 	beq	r3,r2,5950 <jinit_color_converter+0x55c>
			cinfo->num_components != cinfo->input_components)
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    592c:	e0bfff17 	ldw	r2,-4(fp)
    5930:	10800017 	ldw	r2,0(r2)
    5934:	00c00704 	movi	r3,28
    5938:	10c00515 	stw	r3,20(r2)
    593c:	e0bfff17 	ldw	r2,-4(fp)
    5940:	10800017 	ldw	r2,0(r2)
    5944:	10800017 	ldw	r2,0(r2)
    5948:	e13fff17 	ldw	r4,-4(fp)
    594c:	103ee83a 	callr	r2
		cconvert->pub.color_convert = null_convert;
    5950:	e0bffe17 	ldw	r2,-8(fp)
    5954:	00c00034 	movhi	r3,0
    5958:	18d4b204 	addi	r3,r3,21192
    595c:	10c00115 	stw	r3,4(r2)
		break;
    5960:	0001883a 	nop
	}
}
    5964:	e037883a 	mov	sp,fp
    5968:	dfc00117 	ldw	ra,4(sp)
    596c:	df000017 	ldw	fp,0(sp)
    5970:	dec00204 	addi	sp,sp,8
    5974:	f800283a 	ret

00005978 <forward_DCT>:
	forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	JDIMENSION start_row, JDIMENSION start_col,
	JDIMENSION num_blocks)
	/* This version is used for integer DCT implementations. */
{
    5978:	deffb204 	addi	sp,sp,-312
    597c:	dfc04d15 	stw	ra,308(sp)
    5980:	df004c15 	stw	fp,304(sp)
    5984:	dcc04b15 	stw	r19,300(sp)
    5988:	dc804a15 	stw	r18,296(sp)
    598c:	dc404915 	stw	r17,292(sp)
    5990:	dc004815 	stw	r16,288(sp)
    5994:	df004804 	addi	fp,sp,288
    5998:	e13ffc15 	stw	r4,-16(fp)
    599c:	e17ffd15 	stw	r5,-12(fp)
    59a0:	e1bffe15 	stw	r6,-8(fp)
    59a4:	e1ffff15 	stw	r7,-4(fp)
	/* This routine is heavily used, so it's worth coding it tightly. */
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
    59a8:	e0bffc17 	ldw	r2,-16(fp)
    59ac:	10806317 	ldw	r2,396(r2)
    59b0:	e0bfb915 	stw	r2,-284(fp)
	forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
    59b4:	e0bffd17 	ldw	r2,-12(fp)
    59b8:	10800117 	ldw	r2,4(r2)
    59bc:	e0ffb917 	ldw	r3,-284(fp)
    59c0:	108002c4 	addi	r2,r2,11
    59c4:	1085883a 	add	r2,r2,r2
    59c8:	1085883a 	add	r2,r2,r2
    59cc:	1885883a 	add	r2,r3,r2
    59d0:	10800017 	ldw	r2,0(r2)
    59d4:	e0bfba15 	stw	r2,-280(fp)
	DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
    59d8:	e0bffd17 	ldw	r2,-12(fp)
    59dc:	10800417 	ldw	r2,16(r2)
    59e0:	e0ffb917 	ldw	r3,-284(fp)
    59e4:	10800544 	addi	r2,r2,21
    59e8:	1085883a 	add	r2,r2,r2
    59ec:	1085883a 	add	r2,r2,r2
    59f0:	1885883a 	add	r2,r3,r2
    59f4:	10800017 	ldw	r2,0(r2)
    59f8:	e0bfbb15 	stw	r2,-276(fp)
	DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */
    59fc:	e0800617 	ldw	r2,24(fp)
    5a00:	1085883a 	add	r2,r2,r2
    5a04:	1085883a 	add	r2,r2,r2
    5a08:	e0fffe17 	ldw	r3,-8(fp)
    5a0c:	1885883a 	add	r2,r3,r2
    5a10:	e0bffe15 	stw	r2,-8(fp)

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
    5a14:	e03fb815 	stw	zero,-288(fp)
    5a18:	00003e06 	br	5b14 <forward_DCT+0x19c>
		/* Perform the DCT */
		(*do_dct) (workspace, sample_data, start_col);
    5a1c:	e0bfbc04 	addi	r2,fp,-272
    5a20:	e0ffba17 	ldw	r3,-280(fp)
    5a24:	1009883a 	mov	r4,r2
    5a28:	e17ffe17 	ldw	r5,-8(fp)
    5a2c:	e1800717 	ldw	r6,28(fp)
    5a30:	183ee83a 	callr	r3

		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register DCTELEM temp, qval;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];
    5a34:	e0bfb817 	ldw	r2,-288(fp)
    5a38:	100491fa 	slli	r2,r2,7
    5a3c:	e0ffff17 	ldw	r3,-4(fp)
    5a40:	18a7883a 	add	r19,r3,r2

		for (i = 0; i < DCTSIZE2; i++) {
    5a44:	0023883a 	mov	r17,zero
    5a48:	00002806 	br	5aec <forward_DCT+0x174>
			qval = divisors[i];
    5a4c:	8805883a 	mov	r2,r17
    5a50:	1085883a 	add	r2,r2,r2
    5a54:	1085883a 	add	r2,r2,r2
    5a58:	e0ffbb17 	ldw	r3,-276(fp)
    5a5c:	1885883a 	add	r2,r3,r2
    5a60:	14800017 	ldw	r18,0(r2)
			temp = workspace[i];
    5a64:	8c45883a 	add	r2,r17,r17
    5a68:	1085883a 	add	r2,r2,r2
    5a6c:	e0ffb804 	addi	r3,fp,-288
    5a70:	1885883a 	add	r2,r3,r2
    5a74:	10800404 	addi	r2,r2,16
    5a78:	14000017 	ldw	r16,0(r2)
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
			if (temp < 0) {
    5a7c:	80000c0e 	bge	r16,zero,5ab0 <forward_DCT+0x138>
				temp = -temp;
    5a80:	0421c83a 	sub	r16,zero,r16
				temp += qval>>1;	/* for rounding */
    5a84:	9005d07a 	srai	r2,r18,1
    5a88:	80a1883a 	add	r16,r16,r2
				DIVIDE_BY(temp, qval);
    5a8c:	84800516 	blt	r16,r18,5aa4 <forward_DCT+0x12c>
    5a90:	8009883a 	mov	r4,r16
    5a94:	900b883a 	mov	r5,r18
    5a98:	002c0980 	call	2c098 <__divsi3>
    5a9c:	1021883a 	mov	r16,r2
    5aa0:	00000106 	br	5aa8 <forward_DCT+0x130>
    5aa4:	0021883a 	mov	r16,zero
				temp = -temp;
    5aa8:	0421c83a 	sub	r16,zero,r16
    5aac:	00000906 	br	5ad4 <forward_DCT+0x15c>
			} else {
				temp += qval>>1;	/* for rounding */
    5ab0:	9005d07a 	srai	r2,r18,1
    5ab4:	80a1883a 	add	r16,r16,r2
				DIVIDE_BY(temp, qval);
    5ab8:	84800516 	blt	r16,r18,5ad0 <forward_DCT+0x158>
    5abc:	8009883a 	mov	r4,r16
    5ac0:	900b883a 	mov	r5,r18
    5ac4:	002c0980 	call	2c098 <__divsi3>
    5ac8:	1021883a 	mov	r16,r2
    5acc:	00000106 	br	5ad4 <forward_DCT+0x15c>
    5ad0:	0021883a 	mov	r16,zero
			}
			output_ptr[i] = (JCOEF) temp;
    5ad4:	8805883a 	mov	r2,r17
    5ad8:	1085883a 	add	r2,r2,r2
    5adc:	9885883a 	add	r2,r19,r2
    5ae0:	8007883a 	mov	r3,r16
    5ae4:	10c0000d 	sth	r3,0(r2)
		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register DCTELEM temp, qval;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];

		for (i = 0; i < DCTSIZE2; i++) {
    5ae8:	8c400044 	addi	r17,r17,1
    5aec:	88801010 	cmplti	r2,r17,64
    5af0:	103fd61e 	bne	r2,zero,5a4c <forward_DCT+0xd4>
	DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
    5af4:	e0bfb817 	ldw	r2,-288(fp)
    5af8:	10800044 	addi	r2,r2,1
    5afc:	e0bfb815 	stw	r2,-288(fp)
    5b00:	e0bffd17 	ldw	r2,-12(fp)
    5b04:	10800917 	ldw	r2,36(r2)
    5b08:	e0c00717 	ldw	r3,28(fp)
    5b0c:	1885883a 	add	r2,r3,r2
    5b10:	e0800715 	stw	r2,28(fp)
    5b14:	e0ffb817 	ldw	r3,-288(fp)
    5b18:	e0800817 	ldw	r2,32(fp)
    5b1c:	18bfbf36 	bltu	r3,r2,5a1c <forward_DCT+0xa4>
			}
			output_ptr[i] = (JCOEF) temp;
		}
		}
	}
}
    5b20:	e037883a 	mov	sp,fp
    5b24:	dfc00517 	ldw	ra,20(sp)
    5b28:	df000417 	ldw	fp,16(sp)
    5b2c:	dcc00317 	ldw	r19,12(sp)
    5b30:	dc800217 	ldw	r18,8(sp)
    5b34:	dc400117 	ldw	r17,4(sp)
    5b38:	dc000017 	ldw	r16,0(sp)
    5b3c:	dec00604 	addi	sp,sp,24
    5b40:	f800283a 	ret

00005b44 <forward_DCT_float>:
	forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	JDIMENSION start_row, JDIMENSION start_col,
	JDIMENSION num_blocks)
	/* This version is used for floating-point DCT implementations. */
{
    5b44:	deffb204 	addi	sp,sp,-312
    5b48:	dfc04d15 	stw	ra,308(sp)
    5b4c:	df004c15 	stw	fp,304(sp)
    5b50:	dcc04b15 	stw	r19,300(sp)
    5b54:	dc804a15 	stw	r18,296(sp)
    5b58:	dc404915 	stw	r17,292(sp)
    5b5c:	dc004815 	stw	r16,288(sp)
    5b60:	df004804 	addi	fp,sp,288
    5b64:	e13ffc15 	stw	r4,-16(fp)
    5b68:	e17ffd15 	stw	r5,-12(fp)
    5b6c:	e1bffe15 	stw	r6,-8(fp)
    5b70:	e1ffff15 	stw	r7,-4(fp)
	/* This routine is heavily used, so it's worth coding it tightly. */
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
    5b74:	e0bffc17 	ldw	r2,-16(fp)
    5b78:	10806317 	ldw	r2,396(r2)
    5b7c:	e0bfb915 	stw	r2,-284(fp)
	float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
    5b80:	e0bffd17 	ldw	r2,-12(fp)
    5b84:	10800117 	ldw	r2,4(r2)
    5b88:	e0ffb917 	ldw	r3,-284(fp)
    5b8c:	10800644 	addi	r2,r2,25
    5b90:	1085883a 	add	r2,r2,r2
    5b94:	1085883a 	add	r2,r2,r2
    5b98:	1885883a 	add	r2,r3,r2
    5b9c:	10800017 	ldw	r2,0(r2)
    5ba0:	e0bfba15 	stw	r2,-280(fp)
	FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
    5ba4:	e0bffd17 	ldw	r2,-12(fp)
    5ba8:	10800417 	ldw	r2,16(r2)
    5bac:	e0ffb917 	ldw	r3,-284(fp)
    5bb0:	108008c4 	addi	r2,r2,35
    5bb4:	1085883a 	add	r2,r2,r2
    5bb8:	1085883a 	add	r2,r2,r2
    5bbc:	1885883a 	add	r2,r3,r2
    5bc0:	10800017 	ldw	r2,0(r2)
    5bc4:	e0bfbb15 	stw	r2,-276(fp)
	FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */
    5bc8:	e0800617 	ldw	r2,24(fp)
    5bcc:	1085883a 	add	r2,r2,r2
    5bd0:	1085883a 	add	r2,r2,r2
    5bd4:	e0fffe17 	ldw	r3,-8(fp)
    5bd8:	1885883a 	add	r2,r3,r2
    5bdc:	e0bffe15 	stw	r2,-8(fp)

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
    5be0:	e03fb815 	stw	zero,-288(fp)
    5be4:	00003506 	br	5cbc <forward_DCT_float+0x178>
		/* Perform the DCT */
		(*do_dct) (workspace, sample_data, start_col);
    5be8:	e0bfbc04 	addi	r2,fp,-272
    5bec:	e0ffba17 	ldw	r3,-280(fp)
    5bf0:	1009883a 	mov	r4,r2
    5bf4:	e17ffe17 	ldw	r5,-8(fp)
    5bf8:	e1800717 	ldw	r6,28(fp)
    5bfc:	183ee83a 	callr	r3

		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register FAST_FLOAT temp;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];
    5c00:	e0bfb817 	ldw	r2,-288(fp)
    5c04:	100491fa 	slli	r2,r2,7
    5c08:	e0ffff17 	ldw	r3,-4(fp)
    5c0c:	18a3883a 	add	r17,r3,r2

		for (i = 0; i < DCTSIZE2; i++) {
    5c10:	0021883a 	mov	r16,zero
    5c14:	00001f06 	br	5c94 <forward_DCT_float+0x150>
			/* Apply the quantization and scaling factor */
			temp = workspace[i] * divisors[i];
    5c18:	8405883a 	add	r2,r16,r16
    5c1c:	1085883a 	add	r2,r2,r2
    5c20:	e0ffb804 	addi	r3,fp,-288
    5c24:	1885883a 	add	r2,r3,r2
    5c28:	10800404 	addi	r2,r2,16
    5c2c:	10c00017 	ldw	r3,0(r2)
    5c30:	8005883a 	mov	r2,r16
    5c34:	1085883a 	add	r2,r2,r2
    5c38:	1085883a 	add	r2,r2,r2
    5c3c:	e13fbb17 	ldw	r4,-276(fp)
    5c40:	2089883a 	add	r4,r4,r2
    5c44:	20800017 	ldw	r2,0(r4)
    5c48:	1809883a 	mov	r4,r3
    5c4c:	100b883a 	mov	r5,r2
    5c50:	002b7380 	call	2b738 <__mulsf3>
    5c54:	1007883a 	mov	r3,r2
    5c58:	1827883a 	mov	r19,r3
			* Since C does not specify the direction of rounding for negative
			* quotients, we have to force the dividend positive for portability.
			* The maximum coefficient size is +-16K (for 12-bit data), so this
			* code should work for either 16-bit or 32-bit ints.
			*/
			output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
    5c5c:	8005883a 	mov	r2,r16
    5c60:	1085883a 	add	r2,r2,r2
    5c64:	88a5883a 	add	r18,r17,r2
    5c68:	9809883a 	mov	r4,r19
    5c6c:	0151a034 	movhi	r5,18048
    5c70:	29404004 	addi	r5,r5,256
    5c74:	002b6940 	call	2b694 <__addsf3>
    5c78:	1007883a 	mov	r3,r2
    5c7c:	1805883a 	mov	r2,r3
    5c80:	1009883a 	mov	r4,r2
    5c84:	002b96c0 	call	2b96c <__fixsfsi>
    5c88:	10b00004 	addi	r2,r2,-16384
    5c8c:	9080000d 	sth	r2,0(r18)
		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register FAST_FLOAT temp;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];

		for (i = 0; i < DCTSIZE2; i++) {
    5c90:	84000044 	addi	r16,r16,1
    5c94:	80801010 	cmplti	r2,r16,64
    5c98:	103fdf1e 	bne	r2,zero,5c18 <forward_DCT_float+0xd4>
	FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
    5c9c:	e0bfb817 	ldw	r2,-288(fp)
    5ca0:	10800044 	addi	r2,r2,1
    5ca4:	e0bfb815 	stw	r2,-288(fp)
    5ca8:	e0bffd17 	ldw	r2,-12(fp)
    5cac:	10800917 	ldw	r2,36(r2)
    5cb0:	e0c00717 	ldw	r3,28(fp)
    5cb4:	1885883a 	add	r2,r3,r2
    5cb8:	e0800715 	stw	r2,28(fp)
    5cbc:	e0ffb817 	ldw	r3,-288(fp)
    5cc0:	e0800817 	ldw	r2,32(fp)
    5cc4:	18bfc836 	bltu	r3,r2,5be8 <forward_DCT_float+0xa4>
			*/
			output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
		}
		}
	}
}
    5cc8:	e037883a 	mov	sp,fp
    5ccc:	dfc00517 	ldw	ra,20(sp)
    5cd0:	df000417 	ldw	fp,16(sp)
    5cd4:	dcc00317 	ldw	r19,12(sp)
    5cd8:	dc800217 	ldw	r18,8(sp)
    5cdc:	dc400117 	ldw	r17,4(sp)
    5ce0:	dc000017 	ldw	r16,0(sp)
    5ce4:	dec00604 	addi	sp,sp,24
    5ce8:	f800283a 	ret

00005cec <start_pass_fdctmgr>:
* first scan.  Hence all components should be examined here.
*/

METHODDEF(void)
	start_pass_fdctmgr (j_compress_ptr cinfo)
{
    5cec:	defff104 	addi	sp,sp,-60
    5cf0:	dfc00e15 	stw	ra,56(sp)
    5cf4:	df000d15 	stw	fp,52(sp)
    5cf8:	dc000c15 	stw	r16,48(sp)
    5cfc:	df000c04 	addi	fp,sp,48
    5d00:	e13fff15 	stw	r4,-4(fp)
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
    5d04:	e0bfff17 	ldw	r2,-4(fp)
    5d08:	10806317 	ldw	r2,396(r2)
    5d0c:	e0bffa15 	stw	r2,-24(fp)
	int ci, qtblno, i;
	jpeg_component_info *compptr;
	int method = 0;
    5d10:	e03ff715 	stw	zero,-36(fp)
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    5d14:	e03ff415 	stw	zero,-48(fp)
    5d18:	e0bfff17 	ldw	r2,-4(fp)
    5d1c:	10801417 	ldw	r2,80(r2)
    5d20:	e0bff615 	stw	r2,-40(fp)
    5d24:	00019906 	br	638c <start_pass_fdctmgr+0x6a0>
		ci++, compptr++) {
			/* Select the proper DCT routine for this component's scaling */
			switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
    5d28:	e0bff617 	ldw	r2,-40(fp)
    5d2c:	10800917 	ldw	r2,36(r2)
    5d30:	1006923a 	slli	r3,r2,8
    5d34:	e0bff617 	ldw	r2,-40(fp)
    5d38:	10800a17 	ldw	r2,40(r2)
    5d3c:	1885883a 	add	r2,r3,r2
    5d40:	10820220 	cmpeqi	r2,r2,2056
    5d44:	10003626 	beq	r2,zero,5e20 <start_pass_fdctmgr+0x134>
				fdct->do_dct[ci] = jpeg_fdct_1x2;
				method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
				break;
#endif
			case ((DCTSIZE << 8) + DCTSIZE):
				switch (cinfo->dct_method) {
    5d48:	e0bfff17 	ldw	r2,-4(fp)
    5d4c:	10803617 	ldw	r2,216(r2)
    5d50:	10c00060 	cmpeqi	r3,r2,1
    5d54:	18000f1e 	bne	r3,zero,5d94 <start_pass_fdctmgr+0xa8>
    5d58:	0080032e 	bgeu	zero,r2,5d68 <start_pass_fdctmgr+0x7c>
    5d5c:	108000a0 	cmpeqi	r2,r2,2
    5d60:	1000181e 	bne	r2,zero,5dc4 <start_pass_fdctmgr+0xd8>
    5d64:	00002306 	br	5df4 <start_pass_fdctmgr+0x108>
#ifdef DCT_ISLOW_SUPPORTED
				case JDCT_ISLOW:
					fdct->do_dct[ci] = jpeg_fdct_islow;
    5d68:	e0fffa17 	ldw	r3,-24(fp)
    5d6c:	e0bff417 	ldw	r2,-48(fp)
    5d70:	108002c4 	addi	r2,r2,11
    5d74:	1085883a 	add	r2,r2,r2
    5d78:	1085883a 	add	r2,r2,r2
    5d7c:	1885883a 	add	r2,r3,r2
    5d80:	00c00074 	movhi	r3,1
    5d84:	18caf804 	addi	r3,r3,11232
    5d88:	10c00015 	stw	r3,0(r2)
					method = JDCT_ISLOW;
    5d8c:	e03ff715 	stw	zero,-36(fp)
					break;
    5d90:	00002206 	br	5e1c <start_pass_fdctmgr+0x130>
#endif
#ifdef DCT_IFAST_SUPPORTED
				case JDCT_IFAST:
					fdct->do_dct[ci] = jpeg_fdct_ifast;
    5d94:	e0fffa17 	ldw	r3,-24(fp)
    5d98:	e0bff417 	ldw	r2,-48(fp)
    5d9c:	108002c4 	addi	r2,r2,11
    5da0:	1085883a 	add	r2,r2,r2
    5da4:	1085883a 	add	r2,r2,r2
    5da8:	1885883a 	add	r2,r3,r2
    5dac:	00c00074 	movhi	r3,1
    5db0:	18c95004 	addi	r3,r3,9536
    5db4:	10c00015 	stw	r3,0(r2)
					method = JDCT_IFAST;
    5db8:	00800044 	movi	r2,1
    5dbc:	e0bff715 	stw	r2,-36(fp)
					break;
    5dc0:	00001606 	br	5e1c <start_pass_fdctmgr+0x130>
#endif
#ifdef DCT_FLOAT_SUPPORTED
				case JDCT_FLOAT:
					fdct->do_float_dct[ci] = jpeg_fdct_float;
    5dc4:	e0fffa17 	ldw	r3,-24(fp)
    5dc8:	e0bff417 	ldw	r2,-48(fp)
    5dcc:	10800644 	addi	r2,r2,25
    5dd0:	1085883a 	add	r2,r2,r2
    5dd4:	1085883a 	add	r2,r2,r2
    5dd8:	1885883a 	add	r2,r3,r2
    5ddc:	00c00074 	movhi	r3,1
    5de0:	18c72204 	addi	r3,r3,7304
    5de4:	10c00015 	stw	r3,0(r2)
					method = JDCT_FLOAT;
    5de8:	00800084 	movi	r2,2
    5dec:	e0bff715 	stw	r2,-36(fp)
					break;
    5df0:	00000a06 	br	5e1c <start_pass_fdctmgr+0x130>
#endif
				default:
					ERREXIT(cinfo, JERR_NOT_COMPILED);
    5df4:	e0bfff17 	ldw	r2,-4(fp)
    5df8:	10800017 	ldw	r2,0(r2)
    5dfc:	00c00c44 	movi	r3,49
    5e00:	10c00515 	stw	r3,20(r2)
    5e04:	e0bfff17 	ldw	r2,-4(fp)
    5e08:	10800017 	ldw	r2,0(r2)
    5e0c:	10800017 	ldw	r2,0(r2)
    5e10:	e13fff17 	ldw	r4,-4(fp)
    5e14:	103ee83a 	callr	r2
					break;
    5e18:	0001883a 	nop
				}
				break;
    5e1c:	00001406 	br	5e70 <start_pass_fdctmgr+0x184>
			default:
				ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
    5e20:	e0bfff17 	ldw	r2,-4(fp)
    5e24:	10800017 	ldw	r2,0(r2)
    5e28:	00c001c4 	movi	r3,7
    5e2c:	10c00515 	stw	r3,20(r2)
    5e30:	e0bfff17 	ldw	r2,-4(fp)
    5e34:	10800017 	ldw	r2,0(r2)
    5e38:	e0fff617 	ldw	r3,-40(fp)
    5e3c:	18c00917 	ldw	r3,36(r3)
    5e40:	10c00615 	stw	r3,24(r2)
    5e44:	e0bfff17 	ldw	r2,-4(fp)
    5e48:	10800017 	ldw	r2,0(r2)
    5e4c:	e0fff617 	ldw	r3,-40(fp)
    5e50:	18c00a17 	ldw	r3,40(r3)
    5e54:	10c00715 	stw	r3,28(r2)
    5e58:	e0bfff17 	ldw	r2,-4(fp)
    5e5c:	10800017 	ldw	r2,0(r2)
    5e60:	10800017 	ldw	r2,0(r2)
    5e64:	e13fff17 	ldw	r4,-4(fp)
    5e68:	103ee83a 	callr	r2
					compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
				break;
    5e6c:	0001883a 	nop
			}
			qtblno = compptr->quant_tbl_no;
    5e70:	e0bff617 	ldw	r2,-40(fp)
    5e74:	10800417 	ldw	r2,16(r2)
    5e78:	e0bffb15 	stw	r2,-20(fp)
			/* Make sure specified quantization table is present */
			if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
    5e7c:	e0bffb17 	ldw	r2,-20(fp)
    5e80:	10000b16 	blt	r2,zero,5eb0 <start_pass_fdctmgr+0x1c4>
    5e84:	e0bffb17 	ldw	r2,-20(fp)
    5e88:	10800108 	cmpgei	r2,r2,4
    5e8c:	1000081e 	bne	r2,zero,5eb0 <start_pass_fdctmgr+0x1c4>
				cinfo->quant_tbl_ptrs[qtblno] == NULL)
    5e90:	e0ffff17 	ldw	r3,-4(fp)
    5e94:	e0bffb17 	ldw	r2,-20(fp)
    5e98:	10800544 	addi	r2,r2,21
    5e9c:	1085883a 	add	r2,r2,r2
    5ea0:	1085883a 	add	r2,r2,r2
    5ea4:	1885883a 	add	r2,r3,r2
    5ea8:	10800017 	ldw	r2,0(r2)
					compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
				break;
			}
			qtblno = compptr->quant_tbl_no;
			/* Make sure specified quantization table is present */
			if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
    5eac:	10000d1e 	bne	r2,zero,5ee4 <start_pass_fdctmgr+0x1f8>
				cinfo->quant_tbl_ptrs[qtblno] == NULL)
				ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    5eb0:	e0bfff17 	ldw	r2,-4(fp)
    5eb4:	10800017 	ldw	r2,0(r2)
    5eb8:	00c00d84 	movi	r3,54
    5ebc:	10c00515 	stw	r3,20(r2)
    5ec0:	e0bfff17 	ldw	r2,-4(fp)
    5ec4:	10800017 	ldw	r2,0(r2)
    5ec8:	e0fffb17 	ldw	r3,-20(fp)
    5ecc:	10c00615 	stw	r3,24(r2)
    5ed0:	e0bfff17 	ldw	r2,-4(fp)
    5ed4:	10800017 	ldw	r2,0(r2)
    5ed8:	10800017 	ldw	r2,0(r2)
    5edc:	e13fff17 	ldw	r4,-4(fp)
    5ee0:	103ee83a 	callr	r2
			qtbl = cinfo->quant_tbl_ptrs[qtblno];
    5ee4:	e0ffff17 	ldw	r3,-4(fp)
    5ee8:	e0bffb17 	ldw	r2,-20(fp)
    5eec:	10800544 	addi	r2,r2,21
    5ef0:	1085883a 	add	r2,r2,r2
    5ef4:	1085883a 	add	r2,r2,r2
    5ef8:	1885883a 	add	r2,r3,r2
    5efc:	10800017 	ldw	r2,0(r2)
    5f00:	e0bffc15 	stw	r2,-16(fp)
			/* Compute divisors for this quant table */
			/* We may do this more than once for same table, but it's not a big deal */
			switch (method) {
    5f04:	e0bff717 	ldw	r2,-36(fp)
    5f08:	10c00060 	cmpeqi	r3,r2,1
    5f0c:	1800411e 	bne	r3,zero,6014 <start_pass_fdctmgr+0x328>
    5f10:	10c000a0 	cmpeqi	r3,r2,2
    5f14:	18008a1e 	bne	r3,zero,6140 <start_pass_fdctmgr+0x454>
    5f18:	10010c1e 	bne	r2,zero,634c <start_pass_fdctmgr+0x660>
#ifdef PROVIDE_ISLOW_TABLES
			case JDCT_ISLOW:
				/* For LL&M IDCT method, divisors are equal to raw quantization
				* coefficients multiplied by 8 (to counteract scaling).
				*/
				if (fdct->divisors[qtblno] == NULL) {
    5f1c:	e0fffa17 	ldw	r3,-24(fp)
    5f20:	e0bffb17 	ldw	r2,-20(fp)
    5f24:	10800544 	addi	r2,r2,21
    5f28:	1085883a 	add	r2,r2,r2
    5f2c:	1085883a 	add	r2,r2,r2
    5f30:	1885883a 	add	r2,r3,r2
    5f34:	10800017 	ldw	r2,0(r2)
    5f38:	10000f1e 	bne	r2,zero,5f78 <start_pass_fdctmgr+0x28c>
					fdct->divisors[qtblno] = (DCTELEM *)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    5f3c:	e0bfff17 	ldw	r2,-4(fp)
    5f40:	10800117 	ldw	r2,4(r2)
    5f44:	10800017 	ldw	r2,0(r2)
    5f48:	e13fff17 	ldw	r4,-4(fp)
    5f4c:	01400044 	movi	r5,1
    5f50:	01804004 	movi	r6,256
    5f54:	103ee83a 	callr	r2
    5f58:	1007883a 	mov	r3,r2
			case JDCT_ISLOW:
				/* For LL&M IDCT method, divisors are equal to raw quantization
				* coefficients multiplied by 8 (to counteract scaling).
				*/
				if (fdct->divisors[qtblno] == NULL) {
					fdct->divisors[qtblno] = (DCTELEM *)
    5f5c:	e13ffa17 	ldw	r4,-24(fp)
    5f60:	e0bffb17 	ldw	r2,-20(fp)
    5f64:	10800544 	addi	r2,r2,21
    5f68:	1085883a 	add	r2,r2,r2
    5f6c:	1085883a 	add	r2,r2,r2
    5f70:	2085883a 	add	r2,r4,r2
    5f74:	10c00015 	stw	r3,0(r2)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
						DCTSIZE2 * SIZEOF(DCTELEM));
				}
				dtbl = fdct->divisors[qtblno];
    5f78:	e0fffa17 	ldw	r3,-24(fp)
    5f7c:	e0bffb17 	ldw	r2,-20(fp)
    5f80:	10800544 	addi	r2,r2,21
    5f84:	1085883a 	add	r2,r2,r2
    5f88:	1085883a 	add	r2,r2,r2
    5f8c:	1885883a 	add	r2,r3,r2
    5f90:	10800017 	ldw	r2,0(r2)
    5f94:	e0bffd15 	stw	r2,-12(fp)
				for (i = 0; i < DCTSIZE2; i++) {
    5f98:	e03ff515 	stw	zero,-44(fp)
    5f9c:	00001006 	br	5fe0 <start_pass_fdctmgr+0x2f4>
					dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
    5fa0:	e0bff517 	ldw	r2,-44(fp)
    5fa4:	1085883a 	add	r2,r2,r2
    5fa8:	1085883a 	add	r2,r2,r2
    5fac:	e0fffd17 	ldw	r3,-12(fp)
    5fb0:	1887883a 	add	r3,r3,r2
    5fb4:	e13ffc17 	ldw	r4,-16(fp)
    5fb8:	e0bff517 	ldw	r2,-44(fp)
    5fbc:	1085883a 	add	r2,r2,r2
    5fc0:	2085883a 	add	r2,r4,r2
    5fc4:	1080000b 	ldhu	r2,0(r2)
    5fc8:	10bfffcc 	andi	r2,r2,65535
    5fcc:	100490fa 	slli	r2,r2,3
    5fd0:	18800015 	stw	r2,0(r3)
					fdct->divisors[qtblno] = (DCTELEM *)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
						DCTSIZE2 * SIZEOF(DCTELEM));
				}
				dtbl = fdct->divisors[qtblno];
				for (i = 0; i < DCTSIZE2; i++) {
    5fd4:	e0bff517 	ldw	r2,-44(fp)
    5fd8:	10800044 	addi	r2,r2,1
    5fdc:	e0bff515 	stw	r2,-44(fp)
    5fe0:	e0bff517 	ldw	r2,-44(fp)
    5fe4:	10801010 	cmplti	r2,r2,64
    5fe8:	103fed1e 	bne	r2,zero,5fa0 <start_pass_fdctmgr+0x2b4>
					dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
				}
				fdct->pub.forward_DCT[ci] = forward_DCT;
    5fec:	e0fffa17 	ldw	r3,-24(fp)
    5ff0:	e0bff417 	ldw	r2,-48(fp)
    5ff4:	10800044 	addi	r2,r2,1
    5ff8:	1085883a 	add	r2,r2,r2
    5ffc:	1085883a 	add	r2,r2,r2
    6000:	1885883a 	add	r2,r3,r2
    6004:	00c00034 	movhi	r3,0
    6008:	18d65e04 	addi	r3,r3,22904
    600c:	10c00015 	stw	r3,0(r2)
				break;
    6010:	0000d806 	br	6374 <start_pass_fdctmgr+0x688>
						8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
						4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
					};
					SHIFT_TEMPS

						if (fdct->divisors[qtblno] == NULL) {
    6014:	e0fffa17 	ldw	r3,-24(fp)
    6018:	e0bffb17 	ldw	r2,-20(fp)
    601c:	10800544 	addi	r2,r2,21
    6020:	1085883a 	add	r2,r2,r2
    6024:	1085883a 	add	r2,r2,r2
    6028:	1885883a 	add	r2,r3,r2
    602c:	10800017 	ldw	r2,0(r2)
    6030:	10000f1e 	bne	r2,zero,6070 <start_pass_fdctmgr+0x384>
							fdct->divisors[qtblno] = (DCTELEM *)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    6034:	e0bfff17 	ldw	r2,-4(fp)
    6038:	10800117 	ldw	r2,4(r2)
    603c:	10800017 	ldw	r2,0(r2)
    6040:	e13fff17 	ldw	r4,-4(fp)
    6044:	01400044 	movi	r5,1
    6048:	01804004 	movi	r6,256
    604c:	103ee83a 	callr	r2
    6050:	1007883a 	mov	r3,r2
						4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
					};
					SHIFT_TEMPS

						if (fdct->divisors[qtblno] == NULL) {
							fdct->divisors[qtblno] = (DCTELEM *)
    6054:	e13ffa17 	ldw	r4,-24(fp)
    6058:	e0bffb17 	ldw	r2,-20(fp)
    605c:	10800544 	addi	r2,r2,21
    6060:	1085883a 	add	r2,r2,r2
    6064:	1085883a 	add	r2,r2,r2
    6068:	2085883a 	add	r2,r4,r2
    606c:	10c00015 	stw	r3,0(r2)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
    6070:	e0fffa17 	ldw	r3,-24(fp)
    6074:	e0bffb17 	ldw	r2,-20(fp)
    6078:	10800544 	addi	r2,r2,21
    607c:	1085883a 	add	r2,r2,r2
    6080:	1085883a 	add	r2,r2,r2
    6084:	1885883a 	add	r2,r3,r2
    6088:	10800017 	ldw	r2,0(r2)
    608c:	e0bffd15 	stw	r2,-12(fp)
						for (i = 0; i < DCTSIZE2; i++) {
    6090:	e03ff515 	stw	zero,-44(fp)
    6094:	00001d06 	br	610c <start_pass_fdctmgr+0x420>
							dtbl[i] = (DCTELEM)
    6098:	e0bff517 	ldw	r2,-44(fp)
    609c:	1085883a 	add	r2,r2,r2
    60a0:	1085883a 	add	r2,r2,r2
    60a4:	e0fffd17 	ldw	r3,-12(fp)
    60a8:	18a1883a 	add	r16,r3,r2
								DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
    60ac:	e0fffc17 	ldw	r3,-16(fp)
    60b0:	e0bff517 	ldw	r2,-44(fp)
    60b4:	1085883a 	add	r2,r2,r2
    60b8:	1885883a 	add	r2,r3,r2
    60bc:	1080000b 	ldhu	r2,0(r2)
    60c0:	10ffffcc 	andi	r3,r2,65535
    60c4:	01000134 	movhi	r4,4
    60c8:	213b8c04 	addi	r4,r4,-4560
    60cc:	e0bff517 	ldw	r2,-44(fp)
    60d0:	1085883a 	add	r2,r2,r2
    60d4:	2085883a 	add	r2,r4,r2
    60d8:	1080000b 	ldhu	r2,0(r2)
    60dc:	10bfffcc 	andi	r2,r2,65535
    60e0:	10a0001c 	xori	r2,r2,32768
    60e4:	10a00004 	addi	r2,r2,-32768
    60e8:	1809883a 	mov	r4,r3
    60ec:	100b883a 	mov	r5,r2
    60f0:	002c1540 	call	2c154 <__mulsi3>
    60f4:	10810004 	addi	r2,r2,1024
    60f8:	1005d2fa 	srai	r2,r2,11
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
						for (i = 0; i < DCTSIZE2; i++) {
							dtbl[i] = (DCTELEM)
    60fc:	80800015 	stw	r2,0(r16)
							fdct->divisors[qtblno] = (DCTELEM *)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
						for (i = 0; i < DCTSIZE2; i++) {
    6100:	e0bff517 	ldw	r2,-44(fp)
    6104:	10800044 	addi	r2,r2,1
    6108:	e0bff515 	stw	r2,-44(fp)
    610c:	e0bff517 	ldw	r2,-44(fp)
    6110:	10801010 	cmplti	r2,r2,64
    6114:	103fe01e 	bne	r2,zero,6098 <start_pass_fdctmgr+0x3ac>
								DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
								(INT32) aanscales[i]),
								CONST_BITS-3);
						}
				}
				fdct->pub.forward_DCT[ci] = forward_DCT;
    6118:	e0fffa17 	ldw	r3,-24(fp)
    611c:	e0bff417 	ldw	r2,-48(fp)
    6120:	10800044 	addi	r2,r2,1
    6124:	1085883a 	add	r2,r2,r2
    6128:	1085883a 	add	r2,r2,r2
    612c:	1885883a 	add	r2,r3,r2
    6130:	00c00034 	movhi	r3,0
    6134:	18d65e04 	addi	r3,r3,22904
    6138:	10c00015 	stw	r3,0(r2)
				break;
    613c:	00008d06 	br	6374 <start_pass_fdctmgr+0x688>
					static const double aanscalefactor[DCTSIZE] = {
						1.0, 1.387039845, 1.306562965, 1.175875602,
						1.0, 0.785694958, 0.541196100, 0.275899379
					};

					if (fdct->float_divisors[qtblno] == NULL) {
    6140:	e0fffa17 	ldw	r3,-24(fp)
    6144:	e0bffb17 	ldw	r2,-20(fp)
    6148:	108008c4 	addi	r2,r2,35
    614c:	1085883a 	add	r2,r2,r2
    6150:	1085883a 	add	r2,r2,r2
    6154:	1885883a 	add	r2,r3,r2
    6158:	10800017 	ldw	r2,0(r2)
    615c:	10000f1e 	bne	r2,zero,619c <start_pass_fdctmgr+0x4b0>
						fdct->float_divisors[qtblno] = (FAST_FLOAT *)
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    6160:	e0bfff17 	ldw	r2,-4(fp)
    6164:	10800117 	ldw	r2,4(r2)
    6168:	10800017 	ldw	r2,0(r2)
    616c:	e13fff17 	ldw	r4,-4(fp)
    6170:	01400044 	movi	r5,1
    6174:	01804004 	movi	r6,256
    6178:	103ee83a 	callr	r2
    617c:	1007883a 	mov	r3,r2
						1.0, 1.387039845, 1.306562965, 1.175875602,
						1.0, 0.785694958, 0.541196100, 0.275899379
					};

					if (fdct->float_divisors[qtblno] == NULL) {
						fdct->float_divisors[qtblno] = (FAST_FLOAT *)
    6180:	e13ffa17 	ldw	r4,-24(fp)
    6184:	e0bffb17 	ldw	r2,-20(fp)
    6188:	108008c4 	addi	r2,r2,35
    618c:	1085883a 	add	r2,r2,r2
    6190:	1085883a 	add	r2,r2,r2
    6194:	2085883a 	add	r2,r4,r2
    6198:	10c00015 	stw	r3,0(r2)
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
    619c:	e0fffa17 	ldw	r3,-24(fp)
    61a0:	e0bffb17 	ldw	r2,-20(fp)
    61a4:	108008c4 	addi	r2,r2,35
    61a8:	1085883a 	add	r2,r2,r2
    61ac:	1085883a 	add	r2,r2,r2
    61b0:	1885883a 	add	r2,r3,r2
    61b4:	10800017 	ldw	r2,0(r2)
    61b8:	e0bffe15 	stw	r2,-8(fp)
					i = 0;
    61bc:	e03ff515 	stw	zero,-44(fp)
					for (row = 0; row < DCTSIZE; row++) {
    61c0:	e03ff815 	stw	zero,-32(fp)
    61c4:	00005406 	br	6318 <start_pass_fdctmgr+0x62c>
						for (col = 0; col < DCTSIZE; col++) {
    61c8:	e03ff915 	stw	zero,-28(fp)
    61cc:	00004c06 	br	6300 <start_pass_fdctmgr+0x614>
							fdtbl[i] = (FAST_FLOAT)
    61d0:	e0bff517 	ldw	r2,-44(fp)
    61d4:	1085883a 	add	r2,r2,r2
    61d8:	1085883a 	add	r2,r2,r2
    61dc:	e0fffe17 	ldw	r3,-8(fp)
    61e0:	18a1883a 	add	r16,r3,r2
								(1.0 / (((double) qtbl->quantval[i] *
    61e4:	e0fffc17 	ldw	r3,-16(fp)
    61e8:	e0bff517 	ldw	r2,-44(fp)
    61ec:	1085883a 	add	r2,r2,r2
    61f0:	1885883a 	add	r2,r3,r2
    61f4:	1080000b 	ldhu	r2,0(r2)
    61f8:	10bfffcc 	andi	r2,r2,65535
    61fc:	1009883a 	mov	r4,r2
    6200:	002bf080 	call	2bf08 <__floatunsidf>
    6204:	100b883a 	mov	r5,r2
    6208:	180d883a 	mov	r6,r3
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
    620c:	00c00134 	movhi	r3,4
    6210:	18fbac04 	addi	r3,r3,-4432
    6214:	e0bff817 	ldw	r2,-32(fp)
    6218:	100490fa 	slli	r2,r2,3
    621c:	1889883a 	add	r4,r3,r2
    6220:	20800017 	ldw	r2,0(r4)
    6224:	20c00117 	ldw	r3,4(r4)
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
								(1.0 / (((double) qtbl->quantval[i] *
    6228:	2809883a 	mov	r4,r5
    622c:	300b883a 	mov	r5,r6
    6230:	100d883a 	mov	r6,r2
    6234:	180f883a 	mov	r7,r3
    6238:	002ba100 	call	2ba10 <__muldf3>
    623c:	100f883a 	mov	r7,r2
    6240:	1811883a 	mov	r8,r3
    6244:	380b883a 	mov	r5,r7
    6248:	400d883a 	mov	r6,r8
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
    624c:	00c00134 	movhi	r3,4
    6250:	18fbac04 	addi	r3,r3,-4432
    6254:	e0bff917 	ldw	r2,-28(fp)
    6258:	100490fa 	slli	r2,r2,3
    625c:	1889883a 	add	r4,r3,r2
    6260:	20800017 	ldw	r2,0(r4)
    6264:	20c00117 	ldw	r3,4(r4)
    6268:	2809883a 	mov	r4,r5
    626c:	300b883a 	mov	r5,r6
    6270:	100d883a 	mov	r6,r2
    6274:	180f883a 	mov	r7,r3
    6278:	002ba100 	call	2ba10 <__muldf3>
    627c:	1009883a 	mov	r4,r2
    6280:	180b883a 	mov	r5,r3
    6284:	2005883a 	mov	r2,r4
    6288:	2807883a 	mov	r3,r5
    628c:	1009883a 	mov	r4,r2
    6290:	180b883a 	mov	r5,r3
    6294:	000d883a 	mov	r6,zero
    6298:	01d00834 	movhi	r7,16416
    629c:	002ba100 	call	2ba10 <__muldf3>
    62a0:	1009883a 	mov	r4,r2
    62a4:	180b883a 	mov	r5,r3
    62a8:	2005883a 	mov	r2,r4
    62ac:	2807883a 	mov	r3,r5
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
								(1.0 / (((double) qtbl->quantval[i] *
    62b0:	0009883a 	mov	r4,zero
    62b4:	014ffc34 	movhi	r5,16368
    62b8:	100d883a 	mov	r6,r2
    62bc:	180f883a 	mov	r7,r3
    62c0:	002bcf40 	call	2bcf4 <__divdf3>
    62c4:	1009883a 	mov	r4,r2
    62c8:	180b883a 	mov	r5,r3
    62cc:	2005883a 	mov	r2,r4
    62d0:	2807883a 	mov	r3,r5
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
    62d4:	1009883a 	mov	r4,r2
    62d8:	180b883a 	mov	r5,r3
    62dc:	002bea80 	call	2bea8 <__truncdfsf2>
    62e0:	1007883a 	mov	r3,r2
    62e4:	80c00015 	stw	r3,0(r16)
								(1.0 / (((double) qtbl->quantval[i] *
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
							i++;
    62e8:	e0bff517 	ldw	r2,-44(fp)
    62ec:	10800044 	addi	r2,r2,1
    62f0:	e0bff515 	stw	r2,-44(fp)
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
    62f4:	e0bff917 	ldw	r2,-28(fp)
    62f8:	10800044 	addi	r2,r2,1
    62fc:	e0bff915 	stw	r2,-28(fp)
    6300:	e0bff917 	ldw	r2,-28(fp)
    6304:	10800210 	cmplti	r2,r2,8
    6308:	103fb11e 	bne	r2,zero,61d0 <start_pass_fdctmgr+0x4e4>
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
    630c:	e0bff817 	ldw	r2,-32(fp)
    6310:	10800044 	addi	r2,r2,1
    6314:	e0bff815 	stw	r2,-32(fp)
    6318:	e0bff817 	ldw	r2,-32(fp)
    631c:	10800210 	cmplti	r2,r2,8
    6320:	103fa91e 	bne	r2,zero,61c8 <start_pass_fdctmgr+0x4dc>
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
							i++;
						}
					}
				}
				fdct->pub.forward_DCT[ci] = forward_DCT_float;
    6324:	e0fffa17 	ldw	r3,-24(fp)
    6328:	e0bff417 	ldw	r2,-48(fp)
    632c:	10800044 	addi	r2,r2,1
    6330:	1085883a 	add	r2,r2,r2
    6334:	1085883a 	add	r2,r2,r2
    6338:	1885883a 	add	r2,r3,r2
    633c:	00c00034 	movhi	r3,0
    6340:	18d6d104 	addi	r3,r3,23364
    6344:	10c00015 	stw	r3,0(r2)
				break;
    6348:	00000a06 	br	6374 <start_pass_fdctmgr+0x688>
#endif
			default:
				ERREXIT(cinfo, JERR_NOT_COMPILED);
    634c:	e0bfff17 	ldw	r2,-4(fp)
    6350:	10800017 	ldw	r2,0(r2)
    6354:	00c00c44 	movi	r3,49
    6358:	10c00515 	stw	r3,20(r2)
    635c:	e0bfff17 	ldw	r2,-4(fp)
    6360:	10800017 	ldw	r2,0(r2)
    6364:	10800017 	ldw	r2,0(r2)
    6368:	e13fff17 	ldw	r4,-4(fp)
    636c:	103ee83a 	callr	r2
				break;
    6370:	0001883a 	nop
	int method = 0;
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    6374:	e0bff417 	ldw	r2,-48(fp)
    6378:	10800044 	addi	r2,r2,1
    637c:	e0bff415 	stw	r2,-48(fp)
    6380:	e0bff617 	ldw	r2,-40(fp)
    6384:	10801604 	addi	r2,r2,88
    6388:	e0bff615 	stw	r2,-40(fp)
	jpeg_component_info *compptr;
	int method = 0;
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    638c:	e0bfff17 	ldw	r2,-4(fp)
    6390:	10801217 	ldw	r2,72(r2)
    6394:	e0fff417 	ldw	r3,-48(fp)
    6398:	18be6316 	blt	r3,r2,5d28 <start_pass_fdctmgr+0x3c>
			default:
				ERREXIT(cinfo, JERR_NOT_COMPILED);
				break;
			}
	}
}
    639c:	e037883a 	mov	sp,fp
    63a0:	dfc00217 	ldw	ra,8(sp)
    63a4:	df000117 	ldw	fp,4(sp)
    63a8:	dc000017 	ldw	r16,0(sp)
    63ac:	dec00304 	addi	sp,sp,12
    63b0:	f800283a 	ret

000063b4 <jinit_forward_dct>:
* Initialize FDCT manager.
*/

GLOBAL(void)
	jinit_forward_dct (j_compress_ptr cinfo)
{
    63b4:	defffb04 	addi	sp,sp,-20
    63b8:	dfc00415 	stw	ra,16(sp)
    63bc:	df000315 	stw	fp,12(sp)
    63c0:	df000304 	addi	fp,sp,12
    63c4:	e13fff15 	stw	r4,-4(fp)
	my_fdct_ptr fdct;
	int i;

	fdct = (my_fdct_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    63c8:	e0bfff17 	ldw	r2,-4(fp)
    63cc:	10800117 	ldw	r2,4(r2)
    63d0:	10800017 	ldw	r2,0(r2)
	jinit_forward_dct (j_compress_ptr cinfo)
{
	my_fdct_ptr fdct;
	int i;

	fdct = (my_fdct_ptr)
    63d4:	e13fff17 	ldw	r4,-4(fp)
    63d8:	01400044 	movi	r5,1
    63dc:	01802704 	movi	r6,156
    63e0:	103ee83a 	callr	r2
    63e4:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_fdct_controller));
	cinfo->fdct = (struct jpeg_forward_dct *) fdct;
    63e8:	e0bfff17 	ldw	r2,-4(fp)
    63ec:	e0fffe17 	ldw	r3,-8(fp)
    63f0:	10c06315 	stw	r3,396(r2)
	fdct->pub.start_pass = start_pass_fdctmgr;
    63f4:	e0bffe17 	ldw	r2,-8(fp)
    63f8:	00c00034 	movhi	r3,0
    63fc:	18d73b04 	addi	r3,r3,23788
    6400:	10c00015 	stw	r3,0(r2)

	/* Mark divisor tables unallocated */
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
    6404:	e03ffd15 	stw	zero,-12(fp)
    6408:	00001106 	br	6450 <jinit_forward_dct+0x9c>
		fdct->divisors[i] = NULL;
    640c:	e0fffe17 	ldw	r3,-8(fp)
    6410:	e0bffd17 	ldw	r2,-12(fp)
    6414:	10800544 	addi	r2,r2,21
    6418:	1085883a 	add	r2,r2,r2
    641c:	1085883a 	add	r2,r2,r2
    6420:	1885883a 	add	r2,r3,r2
    6424:	10000015 	stw	zero,0(r2)
#ifdef DCT_FLOAT_SUPPORTED
		fdct->float_divisors[i] = NULL;
    6428:	e0fffe17 	ldw	r3,-8(fp)
    642c:	e0bffd17 	ldw	r2,-12(fp)
    6430:	108008c4 	addi	r2,r2,35
    6434:	1085883a 	add	r2,r2,r2
    6438:	1085883a 	add	r2,r2,r2
    643c:	1885883a 	add	r2,r3,r2
    6440:	10000015 	stw	zero,0(r2)
		SIZEOF(my_fdct_controller));
	cinfo->fdct = (struct jpeg_forward_dct *) fdct;
	fdct->pub.start_pass = start_pass_fdctmgr;

	/* Mark divisor tables unallocated */
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
    6444:	e0bffd17 	ldw	r2,-12(fp)
    6448:	10800044 	addi	r2,r2,1
    644c:	e0bffd15 	stw	r2,-12(fp)
    6450:	e0bffd17 	ldw	r2,-12(fp)
    6454:	10800110 	cmplti	r2,r2,4
    6458:	103fec1e 	bne	r2,zero,640c <jinit_forward_dct+0x58>
		fdct->divisors[i] = NULL;
#ifdef DCT_FLOAT_SUPPORTED
		fdct->float_divisors[i] = NULL;
#endif
	}
}
    645c:	e037883a 	mov	sp,fp
    6460:	dfc00117 	ldw	ra,4(sp)
    6464:	df000017 	ldw	fp,0(sp)
    6468:	dec00204 	addi	sp,sp,8
    646c:	f800283a 	ret

00006470 <jpeg_make_c_derived_tbl>:
*/

LOCAL(void)
	jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
	c_derived_tbl ** pdtbl)
{
    6470:	defeaf04 	addi	sp,sp,-1348
    6474:	dfc15015 	stw	ra,1344(sp)
    6478:	df014f15 	stw	fp,1340(sp)
    647c:	df014f04 	addi	fp,sp,1340
    6480:	e13ffc15 	stw	r4,-16(fp)
    6484:	2805883a 	mov	r2,r5
    6488:	e1bffe15 	stw	r6,-8(fp)
    648c:	e1ffff15 	stw	r7,-4(fp)
    6490:	e0bffd05 	stb	r2,-12(fp)
	/* Note that huffsize[] and huffcode[] are filled in code-length order,
	* paralleling the order of the symbols themselves in htbl->huffval[].
	*/

	/* Find the input Huffman table */
	if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
    6494:	e0bffe17 	ldw	r2,-8(fp)
    6498:	10000316 	blt	r2,zero,64a8 <jpeg_make_c_derived_tbl+0x38>
    649c:	e0bffe17 	ldw	r2,-8(fp)
    64a0:	10800110 	cmplti	r2,r2,4
    64a4:	10000d1e 	bne	r2,zero,64dc <jpeg_make_c_derived_tbl+0x6c>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
    64a8:	e0bffc17 	ldw	r2,-16(fp)
    64ac:	10800017 	ldw	r2,0(r2)
    64b0:	00c00d04 	movi	r3,52
    64b4:	10c00515 	stw	r3,20(r2)
    64b8:	e0bffc17 	ldw	r2,-16(fp)
    64bc:	10800017 	ldw	r2,0(r2)
    64c0:	e0fffe17 	ldw	r3,-8(fp)
    64c4:	10c00615 	stw	r3,24(r2)
    64c8:	e0bffc17 	ldw	r2,-16(fp)
    64cc:	10800017 	ldw	r2,0(r2)
    64d0:	10800017 	ldw	r2,0(r2)
    64d4:	e13ffc17 	ldw	r4,-16(fp)
    64d8:	103ee83a 	callr	r2
	htbl =
		isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
    64dc:	e0bffd03 	ldbu	r2,-12(fp)
    64e0:	10000826 	beq	r2,zero,6504 <jpeg_make_c_derived_tbl+0x94>
    64e4:	e0fffc17 	ldw	r3,-16(fp)
    64e8:	e0bffe17 	ldw	r2,-8(fp)
    64ec:	10800744 	addi	r2,r2,29
    64f0:	1085883a 	add	r2,r2,r2
    64f4:	1085883a 	add	r2,r2,r2
    64f8:	1885883a 	add	r2,r3,r2
    64fc:	10800017 	ldw	r2,0(r2)
    6500:	00000706 	br	6520 <jpeg_make_c_derived_tbl+0xb0>
    6504:	e0fffc17 	ldw	r3,-16(fp)
    6508:	e0bffe17 	ldw	r2,-8(fp)
    650c:	10800844 	addi	r2,r2,33
    6510:	1085883a 	add	r2,r2,r2
    6514:	1085883a 	add	r2,r2,r2
    6518:	1885883a 	add	r2,r3,r2
    651c:	10800017 	ldw	r2,0(r2)
	*/

	/* Find the input Huffman table */
	if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
	htbl =
    6520:	e0beb615 	stw	r2,-1320(fp)
		isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
	if (htbl == NULL)
    6524:	e0beb617 	ldw	r2,-1320(fp)
    6528:	10000d1e 	bne	r2,zero,6560 <jpeg_make_c_derived_tbl+0xf0>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
    652c:	e0bffc17 	ldw	r2,-16(fp)
    6530:	10800017 	ldw	r2,0(r2)
    6534:	00c00d04 	movi	r3,52
    6538:	10c00515 	stw	r3,20(r2)
    653c:	e0bffc17 	ldw	r2,-16(fp)
    6540:	10800017 	ldw	r2,0(r2)
    6544:	e0fffe17 	ldw	r3,-8(fp)
    6548:	10c00615 	stw	r3,24(r2)
    654c:	e0bffc17 	ldw	r2,-16(fp)
    6550:	10800017 	ldw	r2,0(r2)
    6554:	10800017 	ldw	r2,0(r2)
    6558:	e13ffc17 	ldw	r4,-16(fp)
    655c:	103ee83a 	callr	r2

	/* Allocate a workspace if we haven't already done so. */
	if (*pdtbl == NULL)
    6560:	e0bfff17 	ldw	r2,-4(fp)
    6564:	10800017 	ldw	r2,0(r2)
    6568:	1000091e 	bne	r2,zero,6590 <jpeg_make_c_derived_tbl+0x120>
		*pdtbl = (c_derived_tbl *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	10800117 	ldw	r2,4(r2)
    6574:	10800017 	ldw	r2,0(r2)
    6578:	e13ffc17 	ldw	r4,-16(fp)
    657c:	01400044 	movi	r5,1
    6580:	01814004 	movi	r6,1280
    6584:	103ee83a 	callr	r2
	if (htbl == NULL)
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);

	/* Allocate a workspace if we haven't already done so. */
	if (*pdtbl == NULL)
		*pdtbl = (c_derived_tbl *)
    6588:	e0ffff17 	ldw	r3,-4(fp)
    658c:	18800015 	stw	r2,0(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(c_derived_tbl));
	dtbl = *pdtbl;
    6590:	e0bfff17 	ldw	r2,-4(fp)
    6594:	10800017 	ldw	r2,0(r2)
    6598:	e0beb715 	stw	r2,-1316(fp)

	/* Figure C.1: make table of Huffman code length for each symbol */

	p = 0;
    659c:	e03eb115 	stw	zero,-1340(fp)
	for (l = 1; l <= 16; l++) {
    65a0:	00800044 	movi	r2,1
    65a4:	e0beb315 	stw	r2,-1332(fp)
    65a8:	00002c06 	br	665c <jpeg_make_c_derived_tbl+0x1ec>
		i = (int) htbl->bits[l];
    65ac:	e0feb617 	ldw	r3,-1320(fp)
    65b0:	e0beb317 	ldw	r2,-1332(fp)
    65b4:	1885883a 	add	r2,r3,r2
    65b8:	10800003 	ldbu	r2,0(r2)
    65bc:	10803fcc 	andi	r2,r2,255
    65c0:	e0beb215 	stw	r2,-1336(fp)
		if (i < 0 || p + i > 256)	/* protect against table overrun */
    65c4:	e0beb217 	ldw	r2,-1336(fp)
    65c8:	10000516 	blt	r2,zero,65e0 <jpeg_make_c_derived_tbl+0x170>
    65cc:	e0feb117 	ldw	r3,-1340(fp)
    65d0:	e0beb217 	ldw	r2,-1336(fp)
    65d4:	1885883a 	add	r2,r3,r2
    65d8:	10804050 	cmplti	r2,r2,257
    65dc:	1000141e 	bne	r2,zero,6630 <jpeg_make_c_derived_tbl+0x1c0>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
    65e0:	e0bffc17 	ldw	r2,-16(fp)
    65e4:	10800017 	ldw	r2,0(r2)
    65e8:	00c00244 	movi	r3,9
    65ec:	10c00515 	stw	r3,20(r2)
    65f0:	e0bffc17 	ldw	r2,-16(fp)
    65f4:	10800017 	ldw	r2,0(r2)
    65f8:	10800017 	ldw	r2,0(r2)
    65fc:	e13ffc17 	ldw	r4,-16(fp)
    6600:	103ee83a 	callr	r2
		while (i--)
    6604:	00000a06 	br	6630 <jpeg_make_c_derived_tbl+0x1c0>
			huffsize[p++] = (char) l;
    6608:	e0beb317 	ldw	r2,-1332(fp)
    660c:	1007883a 	mov	r3,r2
    6610:	e13eba04 	addi	r4,fp,-1304
    6614:	e0beb117 	ldw	r2,-1340(fp)
    6618:	2085883a 	add	r2,r4,r2
    661c:	10c00005 	stb	r3,0(r2)
    6620:	e0beb117 	ldw	r2,-1340(fp)
    6624:	10800044 	addi	r2,r2,1
    6628:	e0beb115 	stw	r2,-1340(fp)
    662c:	00000106 	br	6634 <jpeg_make_c_derived_tbl+0x1c4>
	p = 0;
	for (l = 1; l <= 16; l++) {
		i = (int) htbl->bits[l];
		if (i < 0 || p + i > 256)	/* protect against table overrun */
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		while (i--)
    6630:	0001883a 	nop
    6634:	e0beb217 	ldw	r2,-1336(fp)
    6638:	1004c03a 	cmpne	r2,r2,zero
    663c:	e0feb217 	ldw	r3,-1336(fp)
    6640:	18ffffc4 	addi	r3,r3,-1
    6644:	e0feb215 	stw	r3,-1336(fp)
    6648:	10803fcc 	andi	r2,r2,255
    664c:	103fee1e 	bne	r2,zero,6608 <jpeg_make_c_derived_tbl+0x198>
	dtbl = *pdtbl;

	/* Figure C.1: make table of Huffman code length for each symbol */

	p = 0;
	for (l = 1; l <= 16; l++) {
    6650:	e0beb317 	ldw	r2,-1332(fp)
    6654:	10800044 	addi	r2,r2,1
    6658:	e0beb315 	stw	r2,-1332(fp)
    665c:	e0beb317 	ldw	r2,-1332(fp)
    6660:	10800450 	cmplti	r2,r2,17
    6664:	103fd11e 	bne	r2,zero,65ac <jpeg_make_c_derived_tbl+0x13c>
		if (i < 0 || p + i > 256)	/* protect against table overrun */
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		while (i--)
			huffsize[p++] = (char) l;
	}
	huffsize[p] = 0;
    6668:	e0feba04 	addi	r3,fp,-1304
    666c:	e0beb117 	ldw	r2,-1340(fp)
    6670:	1885883a 	add	r2,r3,r2
    6674:	10000005 	stb	zero,0(r2)
	lastp = p;
    6678:	e0beb117 	ldw	r2,-1340(fp)
    667c:	e0beb815 	stw	r2,-1312(fp)

	/* Figure C.2: generate the codes themselves */
	/* We also validate that the counts represent a legal Huffman code tree. */

	code = 0;
    6680:	e03eb515 	stw	zero,-1324(fp)
	si = huffsize[0];
    6684:	e0beba03 	ldbu	r2,-1304(fp)
    6688:	10803fcc 	andi	r2,r2,255
    668c:	1080201c 	xori	r2,r2,128
    6690:	10bfe004 	addi	r2,r2,-128
    6694:	e0beb415 	stw	r2,-1328(fp)
	p = 0;
    6698:	e03eb115 	stw	zero,-1340(fp)
	while (huffsize[p]) {
    669c:	00002d06 	br	6754 <jpeg_make_c_derived_tbl+0x2e4>
		while (((int) huffsize[p]) == si) {
			huffcode[p++] = code;
    66a0:	e0beb117 	ldw	r2,-1340(fp)
    66a4:	1085883a 	add	r2,r2,r2
    66a8:	1085883a 	add	r2,r2,r2
    66ac:	e0feb104 	addi	r3,fp,-1340
    66b0:	1885883a 	add	r2,r3,r2
    66b4:	10804a04 	addi	r2,r2,296
    66b8:	e0feb517 	ldw	r3,-1324(fp)
    66bc:	10c00015 	stw	r3,0(r2)
    66c0:	e0beb117 	ldw	r2,-1340(fp)
    66c4:	10800044 	addi	r2,r2,1
    66c8:	e0beb115 	stw	r2,-1340(fp)
			code++;
    66cc:	e0beb517 	ldw	r2,-1324(fp)
    66d0:	10800044 	addi	r2,r2,1
    66d4:	e0beb515 	stw	r2,-1324(fp)
    66d8:	00000106 	br	66e0 <jpeg_make_c_derived_tbl+0x270>

	code = 0;
	si = huffsize[0];
	p = 0;
	while (huffsize[p]) {
		while (((int) huffsize[p]) == si) {
    66dc:	0001883a 	nop
    66e0:	e0feba04 	addi	r3,fp,-1304
    66e4:	e0beb117 	ldw	r2,-1340(fp)
    66e8:	1885883a 	add	r2,r3,r2
    66ec:	10800003 	ldbu	r2,0(r2)
    66f0:	10c03fcc 	andi	r3,r2,255
    66f4:	18c0201c 	xori	r3,r3,128
    66f8:	18ffe004 	addi	r3,r3,-128
    66fc:	e0beb417 	ldw	r2,-1328(fp)
    6700:	18bfe726 	beq	r3,r2,66a0 <jpeg_make_c_derived_tbl+0x230>
			code++;
		}
		/* code is now 1 more than the last code used for codelength si; but
		* it must still fit in si bits, since no code is allowed to be all ones.
		*/
		if (((INT32) code) >= (((INT32) 1) << si))
    6704:	e0feb517 	ldw	r3,-1324(fp)
    6708:	01000044 	movi	r4,1
    670c:	e0beb417 	ldw	r2,-1328(fp)
    6710:	2084983a 	sll	r2,r4,r2
    6714:	18800916 	blt	r3,r2,673c <jpeg_make_c_derived_tbl+0x2cc>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
    6718:	e0bffc17 	ldw	r2,-16(fp)
    671c:	10800017 	ldw	r2,0(r2)
    6720:	00c00244 	movi	r3,9
    6724:	10c00515 	stw	r3,20(r2)
    6728:	e0bffc17 	ldw	r2,-16(fp)
    672c:	10800017 	ldw	r2,0(r2)
    6730:	10800017 	ldw	r2,0(r2)
    6734:	e13ffc17 	ldw	r4,-16(fp)
    6738:	103ee83a 	callr	r2
		code <<= 1;
    673c:	e0beb517 	ldw	r2,-1324(fp)
    6740:	1085883a 	add	r2,r2,r2
    6744:	e0beb515 	stw	r2,-1324(fp)
		si++;
    6748:	e0beb417 	ldw	r2,-1328(fp)
    674c:	10800044 	addi	r2,r2,1
    6750:	e0beb415 	stw	r2,-1328(fp)
	/* We also validate that the counts represent a legal Huffman code tree. */

	code = 0;
	si = huffsize[0];
	p = 0;
	while (huffsize[p]) {
    6754:	e0feba04 	addi	r3,fp,-1304
    6758:	e0beb117 	ldw	r2,-1340(fp)
    675c:	1885883a 	add	r2,r3,r2
    6760:	10800003 	ldbu	r2,0(r2)
    6764:	10803fcc 	andi	r2,r2,255
    6768:	1080201c 	xori	r2,r2,128
    676c:	10bfe004 	addi	r2,r2,-128
    6770:	103fda1e 	bne	r2,zero,66dc <jpeg_make_c_derived_tbl+0x26c>

	/* Set all codeless symbols to have code length 0;
	* this lets us detect duplicate VAL entries here, and later
	* allows emit_bits to detect any attempt to emit such symbols.
	*/
	MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
    6774:	e0beb717 	ldw	r2,-1316(fp)
    6778:	10810004 	addi	r2,r2,1024
    677c:	1009883a 	mov	r4,r2
    6780:	000b883a 	mov	r5,zero
    6784:	01804004 	movi	r6,256
    6788:	002ec2c0 	call	2ec2c <memset>
	/* This is also a convenient place to check for out-of-range
	* and duplicated VAL entries.  We allow 0..255 for AC symbols
	* but only 0..15 for DC.  (We could constrain them further
	* based on data depth and mode, but this seems enough.)
	*/
	maxsymbol = isDC ? 15 : 255;
    678c:	e0bffd03 	ldbu	r2,-12(fp)
    6790:	10000226 	beq	r2,zero,679c <jpeg_make_c_derived_tbl+0x32c>
    6794:	008003c4 	movi	r2,15
    6798:	00000106 	br	67a0 <jpeg_make_c_derived_tbl+0x330>
    679c:	00803fc4 	movi	r2,255
    67a0:	e0beb915 	stw	r2,-1308(fp)

	for (p = 0; p < lastp; p++) {
    67a4:	e03eb115 	stw	zero,-1340(fp)
    67a8:	00003706 	br	6888 <jpeg_make_c_derived_tbl+0x418>
		i = htbl->huffval[p];
    67ac:	e0feb617 	ldw	r3,-1320(fp)
    67b0:	e0beb117 	ldw	r2,-1340(fp)
    67b4:	1885883a 	add	r2,r3,r2
    67b8:	10800444 	addi	r2,r2,17
    67bc:	10800003 	ldbu	r2,0(r2)
    67c0:	10803fcc 	andi	r2,r2,255
    67c4:	e0beb215 	stw	r2,-1336(fp)
		if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
    67c8:	e0beb217 	ldw	r2,-1336(fp)
    67cc:	10000c16 	blt	r2,zero,6800 <jpeg_make_c_derived_tbl+0x390>
    67d0:	e0beb217 	ldw	r2,-1336(fp)
    67d4:	e0feb917 	ldw	r3,-1308(fp)
    67d8:	18800916 	blt	r3,r2,6800 <jpeg_make_c_derived_tbl+0x390>
    67dc:	e0feb717 	ldw	r3,-1316(fp)
    67e0:	e0beb217 	ldw	r2,-1336(fp)
    67e4:	1885883a 	add	r2,r3,r2
    67e8:	10810004 	addi	r2,r2,1024
    67ec:	10800003 	ldbu	r2,0(r2)
    67f0:	10803fcc 	andi	r2,r2,255
    67f4:	1080201c 	xori	r2,r2,128
    67f8:	10bfe004 	addi	r2,r2,-128
    67fc:	10000926 	beq	r2,zero,6824 <jpeg_make_c_derived_tbl+0x3b4>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
    6800:	e0bffc17 	ldw	r2,-16(fp)
    6804:	10800017 	ldw	r2,0(r2)
    6808:	00c00244 	movi	r3,9
    680c:	10c00515 	stw	r3,20(r2)
    6810:	e0bffc17 	ldw	r2,-16(fp)
    6814:	10800017 	ldw	r2,0(r2)
    6818:	10800017 	ldw	r2,0(r2)
    681c:	e13ffc17 	ldw	r4,-16(fp)
    6820:	103ee83a 	callr	r2
		dtbl->ehufco[i] = huffcode[p];
    6824:	e0beb117 	ldw	r2,-1340(fp)
    6828:	1085883a 	add	r2,r2,r2
    682c:	1085883a 	add	r2,r2,r2
    6830:	e0feb104 	addi	r3,fp,-1340
    6834:	1885883a 	add	r2,r3,r2
    6838:	10804a04 	addi	r2,r2,296
    683c:	10c00017 	ldw	r3,0(r2)
    6840:	e13eb717 	ldw	r4,-1316(fp)
    6844:	e0beb217 	ldw	r2,-1336(fp)
    6848:	1085883a 	add	r2,r2,r2
    684c:	1085883a 	add	r2,r2,r2
    6850:	2085883a 	add	r2,r4,r2
    6854:	10c00015 	stw	r3,0(r2)
		dtbl->ehufsi[i] = huffsize[p];
    6858:	e0feba04 	addi	r3,fp,-1304
    685c:	e0beb117 	ldw	r2,-1340(fp)
    6860:	1885883a 	add	r2,r3,r2
    6864:	10c00003 	ldbu	r3,0(r2)
    6868:	e13eb717 	ldw	r4,-1316(fp)
    686c:	e0beb217 	ldw	r2,-1336(fp)
    6870:	2085883a 	add	r2,r4,r2
    6874:	10810004 	addi	r2,r2,1024
    6878:	10c00005 	stb	r3,0(r2)
	* but only 0..15 for DC.  (We could constrain them further
	* based on data depth and mode, but this seems enough.)
	*/
	maxsymbol = isDC ? 15 : 255;

	for (p = 0; p < lastp; p++) {
    687c:	e0beb117 	ldw	r2,-1340(fp)
    6880:	10800044 	addi	r2,r2,1
    6884:	e0beb115 	stw	r2,-1340(fp)
    6888:	e0feb117 	ldw	r3,-1340(fp)
    688c:	e0beb817 	ldw	r2,-1312(fp)
    6890:	18bfc616 	blt	r3,r2,67ac <jpeg_make_c_derived_tbl+0x33c>
		if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		dtbl->ehufco[i] = huffcode[p];
		dtbl->ehufsi[i] = huffsize[p];
	}
}
    6894:	e037883a 	mov	sp,fp
    6898:	dfc00117 	ldw	ra,4(sp)
    689c:	df000017 	ldw	fp,0(sp)
    68a0:	dec00204 	addi	sp,sp,8
    68a4:	f800283a 	ret

000068a8 <dump_buffer_s>:


LOCAL(boolean)
	dump_buffer_s (working_state * state)
	/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
    68a8:	defffc04 	addi	sp,sp,-16
    68ac:	dfc00315 	stw	ra,12(sp)
    68b0:	df000215 	stw	fp,8(sp)
    68b4:	df000204 	addi	fp,sp,8
    68b8:	e13fff15 	stw	r4,-4(fp)
	struct jpeg_destination_mgr * dest = state->cinfo->dest;
    68bc:	e0bfff17 	ldw	r2,-4(fp)
    68c0:	10800817 	ldw	r2,32(r2)
    68c4:	10800617 	ldw	r2,24(r2)
    68c8:	e0bffe15 	stw	r2,-8(fp)

	if (! (*dest->empty_output_buffer) (state->cinfo))
    68cc:	e0bffe17 	ldw	r2,-8(fp)
    68d0:	10c00317 	ldw	r3,12(r2)
    68d4:	e0bfff17 	ldw	r2,-4(fp)
    68d8:	10800817 	ldw	r2,32(r2)
    68dc:	1009883a 	mov	r4,r2
    68e0:	183ee83a 	callr	r3
    68e4:	10803fcc 	andi	r2,r2,255
    68e8:	1000021e 	bne	r2,zero,68f4 <dump_buffer_s+0x4c>
		return FALSE;
    68ec:	0005883a 	mov	r2,zero
    68f0:	00000906 	br	6918 <dump_buffer_s+0x70>
	/* After a successful buffer dump, must reset buffer pointers */
	state->next_output_byte = dest->next_output_byte;
    68f4:	e0bffe17 	ldw	r2,-8(fp)
    68f8:	10c00017 	ldw	r3,0(r2)
    68fc:	e0bfff17 	ldw	r2,-4(fp)
    6900:	10c00015 	stw	r3,0(r2)
	state->free_in_buffer = dest->free_in_buffer;
    6904:	e0bffe17 	ldw	r2,-8(fp)
    6908:	10c00117 	ldw	r3,4(r2)
    690c:	e0bfff17 	ldw	r2,-4(fp)
    6910:	10c00115 	stw	r3,4(r2)
	return TRUE;
    6914:	00800044 	movi	r2,1
}
    6918:	e037883a 	mov	sp,fp
    691c:	dfc00117 	ldw	ra,4(sp)
    6920:	df000017 	ldw	fp,0(sp)
    6924:	dec00204 	addi	sp,sp,8
    6928:	f800283a 	ret

0000692c <dump_buffer_e>:


LOCAL(void)
	dump_buffer_e (huff_entropy_ptr entropy)
	/* Empty the output buffer; we do not support suspension in this case. */
{
    692c:	defffc04 	addi	sp,sp,-16
    6930:	dfc00315 	stw	ra,12(sp)
    6934:	df000215 	stw	fp,8(sp)
    6938:	df000204 	addi	fp,sp,8
    693c:	e13fff15 	stw	r4,-4(fp)
	struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
    6940:	e0bfff17 	ldw	r2,-4(fp)
    6944:	10801e17 	ldw	r2,120(r2)
    6948:	10800617 	ldw	r2,24(r2)
    694c:	e0bffe15 	stw	r2,-8(fp)

	if (! (*dest->empty_output_buffer) (entropy->cinfo))
    6950:	e0bffe17 	ldw	r2,-8(fp)
    6954:	10c00317 	ldw	r3,12(r2)
    6958:	e0bfff17 	ldw	r2,-4(fp)
    695c:	10801e17 	ldw	r2,120(r2)
    6960:	1009883a 	mov	r4,r2
    6964:	183ee83a 	callr	r3
    6968:	10803fcc 	andi	r2,r2,255
    696c:	10000d1e 	bne	r2,zero,69a4 <dump_buffer_e+0x78>
		ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
    6970:	e0bfff17 	ldw	r2,-4(fp)
    6974:	10801e17 	ldw	r2,120(r2)
    6978:	10800017 	ldw	r2,0(r2)
    697c:	00c00644 	movi	r3,25
    6980:	10c00515 	stw	r3,20(r2)
    6984:	e0bfff17 	ldw	r2,-4(fp)
    6988:	10801e17 	ldw	r2,120(r2)
    698c:	10800017 	ldw	r2,0(r2)
    6990:	10c00017 	ldw	r3,0(r2)
    6994:	e0bfff17 	ldw	r2,-4(fp)
    6998:	10801e17 	ldw	r2,120(r2)
    699c:	1009883a 	mov	r4,r2
    69a0:	183ee83a 	callr	r3
	/* After a successful buffer dump, must reset buffer pointers */
	entropy->next_output_byte = dest->next_output_byte;
    69a4:	e0bffe17 	ldw	r2,-8(fp)
    69a8:	10c00017 	ldw	r3,0(r2)
    69ac:	e0bfff17 	ldw	r2,-4(fp)
    69b0:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = dest->free_in_buffer;
    69b4:	e0bffe17 	ldw	r2,-8(fp)
    69b8:	10c00117 	ldw	r3,4(r2)
    69bc:	e0bfff17 	ldw	r2,-4(fp)
    69c0:	10c01d15 	stw	r3,116(r2)
}
    69c4:	e037883a 	mov	sp,fp
    69c8:	dfc00117 	ldw	ra,4(sp)
    69cc:	df000017 	ldw	fp,0(sp)
    69d0:	dec00204 	addi	sp,sp,8
    69d4:	f800283a 	ret

000069d8 <emit_bits_s>:

INLINE
	LOCAL(boolean)
	emit_bits_s (working_state * state, unsigned int code, int size)
	/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
    69d8:	defff804 	addi	sp,sp,-32
    69dc:	dfc00715 	stw	ra,28(sp)
    69e0:	df000615 	stw	fp,24(sp)
    69e4:	dc400515 	stw	r17,20(sp)
    69e8:	dc000415 	stw	r16,16(sp)
    69ec:	df000404 	addi	fp,sp,16
    69f0:	e13ffd15 	stw	r4,-12(fp)
    69f4:	e17ffe15 	stw	r5,-8(fp)
    69f8:	e1bfff15 	stw	r6,-4(fp)
	/* This routine is heavily used, so it's worth coding tightly. */
	register INT32 put_buffer = (INT32) code;
    69fc:	e43ffe17 	ldw	r16,-8(fp)
	register int put_bits = state->cur.put_bits;
    6a00:	e0bffd17 	ldw	r2,-12(fp)
    6a04:	14400317 	ldw	r17,12(r2)

	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
    6a08:	e0bfff17 	ldw	r2,-4(fp)
    6a0c:	10000d1e 	bne	r2,zero,6a44 <emit_bits_s+0x6c>
		ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
    6a10:	e0bffd17 	ldw	r2,-12(fp)
    6a14:	10800817 	ldw	r2,32(r2)
    6a18:	10800017 	ldw	r2,0(r2)
    6a1c:	00c00a44 	movi	r3,41
    6a20:	10c00515 	stw	r3,20(r2)
    6a24:	e0bffd17 	ldw	r2,-12(fp)
    6a28:	10800817 	ldw	r2,32(r2)
    6a2c:	10800017 	ldw	r2,0(r2)
    6a30:	10c00017 	ldw	r3,0(r2)
    6a34:	e0bffd17 	ldw	r2,-12(fp)
    6a38:	10800817 	ldw	r2,32(r2)
    6a3c:	1009883a 	mov	r4,r2
    6a40:	183ee83a 	callr	r3

	put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
    6a44:	00c00044 	movi	r3,1
    6a48:	e0bfff17 	ldw	r2,-4(fp)
    6a4c:	1884983a 	sll	r2,r3,r2
    6a50:	10bfffc4 	addi	r2,r2,-1
    6a54:	80a0703a 	and	r16,r16,r2

	put_bits += size;		/* new number of bits in buffer */
    6a58:	e0bfff17 	ldw	r2,-4(fp)
    6a5c:	88a3883a 	add	r17,r17,r2

	put_buffer <<= 24 - put_bits; /* align incoming bits */
    6a60:	00800604 	movi	r2,24
    6a64:	1445c83a 	sub	r2,r2,r17
    6a68:	80a0983a 	sll	r16,r16,r2

	put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
    6a6c:	e0bffd17 	ldw	r2,-12(fp)
    6a70:	10800217 	ldw	r2,8(r2)
    6a74:	80a0b03a 	or	r16,r16,r2

	while (put_bits >= 8) {
    6a78:	00003106 	br	6b40 <emit_bits_s+0x168>
		int c = (int) ((put_buffer >> 16) & 0xFF);
    6a7c:	8005d43a 	srai	r2,r16,16
    6a80:	10803fcc 	andi	r2,r2,255
    6a84:	e0bffc15 	stw	r2,-16(fp)

		emit_byte_s(state, c, return FALSE);
    6a88:	e0bffd17 	ldw	r2,-12(fp)
    6a8c:	10800017 	ldw	r2,0(r2)
    6a90:	e0fffc17 	ldw	r3,-16(fp)
    6a94:	10c00005 	stb	r3,0(r2)
    6a98:	10c00044 	addi	r3,r2,1
    6a9c:	e0bffd17 	ldw	r2,-12(fp)
    6aa0:	10c00015 	stw	r3,0(r2)
    6aa4:	e0bffd17 	ldw	r2,-12(fp)
    6aa8:	10800117 	ldw	r2,4(r2)
    6aac:	10ffffc4 	addi	r3,r2,-1
    6ab0:	e0bffd17 	ldw	r2,-12(fp)
    6ab4:	10c00115 	stw	r3,4(r2)
    6ab8:	e0bffd17 	ldw	r2,-12(fp)
    6abc:	10800117 	ldw	r2,4(r2)
    6ac0:	1000061e 	bne	r2,zero,6adc <emit_bits_s+0x104>
    6ac4:	e13ffd17 	ldw	r4,-12(fp)
    6ac8:	00068a80 	call	68a8 <dump_buffer_s>
    6acc:	10803fcc 	andi	r2,r2,255
    6ad0:	1000021e 	bne	r2,zero,6adc <emit_bits_s+0x104>
    6ad4:	0005883a 	mov	r2,zero
    6ad8:	00002006 	br	6b5c <emit_bits_s+0x184>
		if (c == 0xFF) {		/* need to stuff a zero byte? */
    6adc:	e0bffc17 	ldw	r2,-16(fp)
    6ae0:	10803fd8 	cmpnei	r2,r2,255
    6ae4:	1000141e 	bne	r2,zero,6b38 <emit_bits_s+0x160>
			emit_byte_s(state, 0, return FALSE);
    6ae8:	e0bffd17 	ldw	r2,-12(fp)
    6aec:	10800017 	ldw	r2,0(r2)
    6af0:	10000005 	stb	zero,0(r2)
    6af4:	10c00044 	addi	r3,r2,1
    6af8:	e0bffd17 	ldw	r2,-12(fp)
    6afc:	10c00015 	stw	r3,0(r2)
    6b00:	e0bffd17 	ldw	r2,-12(fp)
    6b04:	10800117 	ldw	r2,4(r2)
    6b08:	10ffffc4 	addi	r3,r2,-1
    6b0c:	e0bffd17 	ldw	r2,-12(fp)
    6b10:	10c00115 	stw	r3,4(r2)
    6b14:	e0bffd17 	ldw	r2,-12(fp)
    6b18:	10800117 	ldw	r2,4(r2)
    6b1c:	1000061e 	bne	r2,zero,6b38 <emit_bits_s+0x160>
    6b20:	e13ffd17 	ldw	r4,-12(fp)
    6b24:	00068a80 	call	68a8 <dump_buffer_s>
    6b28:	10803fcc 	andi	r2,r2,255
    6b2c:	1000021e 	bne	r2,zero,6b38 <emit_bits_s+0x160>
    6b30:	0005883a 	mov	r2,zero
    6b34:	00000906 	br	6b5c <emit_bits_s+0x184>
		}
		put_buffer <<= 8;
    6b38:	8020923a 	slli	r16,r16,8
		put_bits -= 8;
    6b3c:	8c7ffe04 	addi	r17,r17,-8

	put_buffer <<= 24 - put_bits; /* align incoming bits */

	put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */

	while (put_bits >= 8) {
    6b40:	88800208 	cmpgei	r2,r17,8
    6b44:	103fcd1e 	bne	r2,zero,6a7c <emit_bits_s+0xa4>
		}
		put_buffer <<= 8;
		put_bits -= 8;
	}

	state->cur.put_buffer = put_buffer; /* update state variables */
    6b48:	e0bffd17 	ldw	r2,-12(fp)
    6b4c:	14000215 	stw	r16,8(r2)
	state->cur.put_bits = put_bits;
    6b50:	e0bffd17 	ldw	r2,-12(fp)
    6b54:	14400315 	stw	r17,12(r2)

	return TRUE;
    6b58:	00800044 	movi	r2,1
}
    6b5c:	e037883a 	mov	sp,fp
    6b60:	dfc00317 	ldw	ra,12(sp)
    6b64:	df000217 	ldw	fp,8(sp)
    6b68:	dc400117 	ldw	r17,4(sp)
    6b6c:	dc000017 	ldw	r16,0(sp)
    6b70:	dec00404 	addi	sp,sp,16
    6b74:	f800283a 	ret

00006b78 <emit_bits_e>:

INLINE
	LOCAL(void)
	emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
	/* Emit some bits, unless we are in gather mode */
{
    6b78:	defff804 	addi	sp,sp,-32
    6b7c:	dfc00715 	stw	ra,28(sp)
    6b80:	df000615 	stw	fp,24(sp)
    6b84:	dc400515 	stw	r17,20(sp)
    6b88:	dc000415 	stw	r16,16(sp)
    6b8c:	df000404 	addi	fp,sp,16
    6b90:	e13ffd15 	stw	r4,-12(fp)
    6b94:	e17ffe15 	stw	r5,-8(fp)
    6b98:	e1bfff15 	stw	r6,-4(fp)
	/* This routine is heavily used, so it's worth coding tightly. */
	register INT32 put_buffer = (INT32) code;
    6b9c:	e43ffe17 	ldw	r16,-8(fp)
	register int put_bits = entropy->saved.put_bits;
    6ba0:	e0bffd17 	ldw	r2,-12(fp)
    6ba4:	14400417 	ldw	r17,16(r2)

	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
    6ba8:	e0bfff17 	ldw	r2,-4(fp)
    6bac:	10000d1e 	bne	r2,zero,6be4 <emit_bits_e+0x6c>
		ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
    6bb0:	e0bffd17 	ldw	r2,-12(fp)
    6bb4:	10801e17 	ldw	r2,120(r2)
    6bb8:	10800017 	ldw	r2,0(r2)
    6bbc:	00c00a44 	movi	r3,41
    6bc0:	10c00515 	stw	r3,20(r2)
    6bc4:	e0bffd17 	ldw	r2,-12(fp)
    6bc8:	10801e17 	ldw	r2,120(r2)
    6bcc:	10800017 	ldw	r2,0(r2)
    6bd0:	10c00017 	ldw	r3,0(r2)
    6bd4:	e0bffd17 	ldw	r2,-12(fp)
    6bd8:	10801e17 	ldw	r2,120(r2)
    6bdc:	1009883a 	mov	r4,r2
    6be0:	183ee83a 	callr	r3

	if (entropy->gather_statistics)
    6be4:	e0bffd17 	ldw	r2,-12(fp)
    6be8:	10801b03 	ldbu	r2,108(r2)
    6bec:	10803fcc 	andi	r2,r2,255
    6bf0:	10003e1e 	bne	r2,zero,6cec <emit_bits_e+0x174>
		return;			/* do nothing if we're only getting stats */

	put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
    6bf4:	00c00044 	movi	r3,1
    6bf8:	e0bfff17 	ldw	r2,-4(fp)
    6bfc:	1884983a 	sll	r2,r3,r2
    6c00:	10bfffc4 	addi	r2,r2,-1
    6c04:	80a0703a 	and	r16,r16,r2

	put_bits += size;		/* new number of bits in buffer */
    6c08:	e0bfff17 	ldw	r2,-4(fp)
    6c0c:	88a3883a 	add	r17,r17,r2

	put_buffer <<= 24 - put_bits; /* align incoming bits */
    6c10:	00800604 	movi	r2,24
    6c14:	1445c83a 	sub	r2,r2,r17
    6c18:	80a0983a 	sll	r16,r16,r2

	/* and merge with old buffer contents */
	put_buffer |= entropy->saved.put_buffer;
    6c1c:	e0bffd17 	ldw	r2,-12(fp)
    6c20:	10800317 	ldw	r2,12(r2)
    6c24:	80a0b03a 	or	r16,r16,r2

	while (put_bits >= 8) {
    6c28:	00002906 	br	6cd0 <emit_bits_e+0x158>
		int c = (int) ((put_buffer >> 16) & 0xFF);
    6c2c:	8005d43a 	srai	r2,r16,16
    6c30:	10803fcc 	andi	r2,r2,255
    6c34:	e0bffc15 	stw	r2,-16(fp)

		emit_byte_e(entropy, c);
    6c38:	e0bffd17 	ldw	r2,-12(fp)
    6c3c:	10801c17 	ldw	r2,112(r2)
    6c40:	e0fffc17 	ldw	r3,-16(fp)
    6c44:	10c00005 	stb	r3,0(r2)
    6c48:	10c00044 	addi	r3,r2,1
    6c4c:	e0bffd17 	ldw	r2,-12(fp)
    6c50:	10c01c15 	stw	r3,112(r2)
    6c54:	e0bffd17 	ldw	r2,-12(fp)
    6c58:	10801d17 	ldw	r2,116(r2)
    6c5c:	10ffffc4 	addi	r3,r2,-1
    6c60:	e0bffd17 	ldw	r2,-12(fp)
    6c64:	10c01d15 	stw	r3,116(r2)
    6c68:	e0bffd17 	ldw	r2,-12(fp)
    6c6c:	10801d17 	ldw	r2,116(r2)
    6c70:	1000021e 	bne	r2,zero,6c7c <emit_bits_e+0x104>
    6c74:	e13ffd17 	ldw	r4,-12(fp)
    6c78:	000692c0 	call	692c <dump_buffer_e>
		if (c == 0xFF) {		/* need to stuff a zero byte? */
    6c7c:	e0bffc17 	ldw	r2,-16(fp)
    6c80:	10803fd8 	cmpnei	r2,r2,255
    6c84:	1000101e 	bne	r2,zero,6cc8 <emit_bits_e+0x150>
			emit_byte_e(entropy, 0);
    6c88:	e0bffd17 	ldw	r2,-12(fp)
    6c8c:	10801c17 	ldw	r2,112(r2)
    6c90:	10000005 	stb	zero,0(r2)
    6c94:	10c00044 	addi	r3,r2,1
    6c98:	e0bffd17 	ldw	r2,-12(fp)
    6c9c:	10c01c15 	stw	r3,112(r2)
    6ca0:	e0bffd17 	ldw	r2,-12(fp)
    6ca4:	10801d17 	ldw	r2,116(r2)
    6ca8:	10ffffc4 	addi	r3,r2,-1
    6cac:	e0bffd17 	ldw	r2,-12(fp)
    6cb0:	10c01d15 	stw	r3,116(r2)
    6cb4:	e0bffd17 	ldw	r2,-12(fp)
    6cb8:	10801d17 	ldw	r2,116(r2)
    6cbc:	1000021e 	bne	r2,zero,6cc8 <emit_bits_e+0x150>
    6cc0:	e13ffd17 	ldw	r4,-12(fp)
    6cc4:	000692c0 	call	692c <dump_buffer_e>
		}
		put_buffer <<= 8;
    6cc8:	8020923a 	slli	r16,r16,8
		put_bits -= 8;
    6ccc:	8c7ffe04 	addi	r17,r17,-8
	put_buffer <<= 24 - put_bits; /* align incoming bits */

	/* and merge with old buffer contents */
	put_buffer |= entropy->saved.put_buffer;

	while (put_bits >= 8) {
    6cd0:	88800208 	cmpgei	r2,r17,8
    6cd4:	103fd51e 	bne	r2,zero,6c2c <emit_bits_e+0xb4>
		}
		put_buffer <<= 8;
		put_bits -= 8;
	}

	entropy->saved.put_buffer = put_buffer; /* update variables */
    6cd8:	e0bffd17 	ldw	r2,-12(fp)
    6cdc:	14000315 	stw	r16,12(r2)
	entropy->saved.put_bits = put_bits;
    6ce0:	e0bffd17 	ldw	r2,-12(fp)
    6ce4:	14400415 	stw	r17,16(r2)
    6ce8:	00000106 	br	6cf0 <emit_bits_e+0x178>
	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
		ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);

	if (entropy->gather_statistics)
		return;			/* do nothing if we're only getting stats */
    6cec:	0001883a 	nop
		put_bits -= 8;
	}

	entropy->saved.put_buffer = put_buffer; /* update variables */
	entropy->saved.put_bits = put_bits;
}
    6cf0:	e037883a 	mov	sp,fp
    6cf4:	dfc00317 	ldw	ra,12(sp)
    6cf8:	df000217 	ldw	fp,8(sp)
    6cfc:	dc400117 	ldw	r17,4(sp)
    6d00:	dc000017 	ldw	r16,0(sp)
    6d04:	dec00404 	addi	sp,sp,16
    6d08:	f800283a 	ret

00006d0c <flush_bits_s>:


LOCAL(boolean)
	flush_bits_s (working_state * state)
{
    6d0c:	defffd04 	addi	sp,sp,-12
    6d10:	dfc00215 	stw	ra,8(sp)
    6d14:	df000115 	stw	fp,4(sp)
    6d18:	df000104 	addi	fp,sp,4
    6d1c:	e13fff15 	stw	r4,-4(fp)
	if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
    6d20:	e13fff17 	ldw	r4,-4(fp)
    6d24:	01401fc4 	movi	r5,127
    6d28:	018001c4 	movi	r6,7
    6d2c:	00069d80 	call	69d8 <emit_bits_s>
    6d30:	10803fcc 	andi	r2,r2,255
    6d34:	1000021e 	bne	r2,zero,6d40 <flush_bits_s+0x34>
		return FALSE;
    6d38:	0005883a 	mov	r2,zero
    6d3c:	00000506 	br	6d54 <flush_bits_s+0x48>
	state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
    6d40:	e0bfff17 	ldw	r2,-4(fp)
    6d44:	10000215 	stw	zero,8(r2)
	state->cur.put_bits = 0;
    6d48:	e0bfff17 	ldw	r2,-4(fp)
    6d4c:	10000315 	stw	zero,12(r2)
	return TRUE;
    6d50:	00800044 	movi	r2,1
}
    6d54:	e037883a 	mov	sp,fp
    6d58:	dfc00117 	ldw	ra,4(sp)
    6d5c:	df000017 	ldw	fp,0(sp)
    6d60:	dec00204 	addi	sp,sp,8
    6d64:	f800283a 	ret

00006d68 <flush_bits_e>:


LOCAL(void)
	flush_bits_e (huff_entropy_ptr entropy)
{
    6d68:	defffd04 	addi	sp,sp,-12
    6d6c:	dfc00215 	stw	ra,8(sp)
    6d70:	df000115 	stw	fp,4(sp)
    6d74:	df000104 	addi	fp,sp,4
    6d78:	e13fff15 	stw	r4,-4(fp)
	emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
    6d7c:	e13fff17 	ldw	r4,-4(fp)
    6d80:	01401fc4 	movi	r5,127
    6d84:	018001c4 	movi	r6,7
    6d88:	0006b780 	call	6b78 <emit_bits_e>
	entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
    6d8c:	e0bfff17 	ldw	r2,-4(fp)
    6d90:	10000315 	stw	zero,12(r2)
	entropy->saved.put_bits = 0;
    6d94:	e0bfff17 	ldw	r2,-4(fp)
    6d98:	10000415 	stw	zero,16(r2)
}
    6d9c:	e037883a 	mov	sp,fp
    6da0:	dfc00117 	ldw	ra,4(sp)
    6da4:	df000017 	ldw	fp,0(sp)
    6da8:	dec00204 	addi	sp,sp,8
    6dac:	f800283a 	ret

00006db0 <emit_dc_symbol>:
*/

INLINE
	LOCAL(void)
	emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
    6db0:	defffa04 	addi	sp,sp,-24
    6db4:	dfc00515 	stw	ra,20(sp)
    6db8:	df000415 	stw	fp,16(sp)
    6dbc:	df000404 	addi	fp,sp,16
    6dc0:	e13ffd15 	stw	r4,-12(fp)
    6dc4:	e17ffe15 	stw	r5,-8(fp)
    6dc8:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
    6dcc:	e0bffd17 	ldw	r2,-12(fp)
    6dd0:	10801b03 	ldbu	r2,108(r2)
    6dd4:	10803fcc 	andi	r2,r2,255
    6dd8:	10000f26 	beq	r2,zero,6e18 <emit_dc_symbol+0x68>
		entropy->dc_count_ptrs[tbl_no][symbol]++;
    6ddc:	e0fffd17 	ldw	r3,-12(fp)
    6de0:	e0bffe17 	ldw	r2,-8(fp)
    6de4:	108004c4 	addi	r2,r2,19
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	1085883a 	add	r2,r2,r2
    6df0:	1885883a 	add	r2,r3,r2
    6df4:	10c00017 	ldw	r3,0(r2)
    6df8:	e0bfff17 	ldw	r2,-4(fp)
    6dfc:	1085883a 	add	r2,r2,r2
    6e00:	1085883a 	add	r2,r2,r2
    6e04:	1885883a 	add	r2,r3,r2
    6e08:	10c00017 	ldw	r3,0(r2)
    6e0c:	18c00044 	addi	r3,r3,1
    6e10:	10c00015 	stw	r3,0(r2)
    6e14:	00001a06 	br	6e80 <emit_dc_symbol+0xd0>
	else {
		c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
    6e18:	e0fffd17 	ldw	r3,-12(fp)
    6e1c:	e0bffe17 	ldw	r2,-8(fp)
    6e20:	108002c4 	addi	r2,r2,11
    6e24:	1085883a 	add	r2,r2,r2
    6e28:	1085883a 	add	r2,r2,r2
    6e2c:	1885883a 	add	r2,r3,r2
    6e30:	10800017 	ldw	r2,0(r2)
    6e34:	e0bffc15 	stw	r2,-16(fp)
		emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
    6e38:	e0fffc17 	ldw	r3,-16(fp)
    6e3c:	e0bfff17 	ldw	r2,-4(fp)
    6e40:	1085883a 	add	r2,r2,r2
    6e44:	1085883a 	add	r2,r2,r2
    6e48:	1885883a 	add	r2,r3,r2
    6e4c:	10c00017 	ldw	r3,0(r2)
    6e50:	e13ffc17 	ldw	r4,-16(fp)
    6e54:	e0bfff17 	ldw	r2,-4(fp)
    6e58:	2085883a 	add	r2,r4,r2
    6e5c:	10810004 	addi	r2,r2,1024
    6e60:	10800003 	ldbu	r2,0(r2)
    6e64:	10803fcc 	andi	r2,r2,255
    6e68:	1080201c 	xori	r2,r2,128
    6e6c:	10bfe004 	addi	r2,r2,-128
    6e70:	e13ffd17 	ldw	r4,-12(fp)
    6e74:	180b883a 	mov	r5,r3
    6e78:	100d883a 	mov	r6,r2
    6e7c:	0006b780 	call	6b78 <emit_bits_e>
	}
}
    6e80:	e037883a 	mov	sp,fp
    6e84:	dfc00117 	ldw	ra,4(sp)
    6e88:	df000017 	ldw	fp,0(sp)
    6e8c:	dec00204 	addi	sp,sp,8
    6e90:	f800283a 	ret

00006e94 <emit_ac_symbol>:


INLINE
	LOCAL(void)
	emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
    6e94:	defffa04 	addi	sp,sp,-24
    6e98:	dfc00515 	stw	ra,20(sp)
    6e9c:	df000415 	stw	fp,16(sp)
    6ea0:	df000404 	addi	fp,sp,16
    6ea4:	e13ffd15 	stw	r4,-12(fp)
    6ea8:	e17ffe15 	stw	r5,-8(fp)
    6eac:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
    6eb0:	e0bffd17 	ldw	r2,-12(fp)
    6eb4:	10801b03 	ldbu	r2,108(r2)
    6eb8:	10803fcc 	andi	r2,r2,255
    6ebc:	10000f26 	beq	r2,zero,6efc <emit_ac_symbol+0x68>
		entropy->ac_count_ptrs[tbl_no][symbol]++;
    6ec0:	e0fffd17 	ldw	r3,-12(fp)
    6ec4:	e0bffe17 	ldw	r2,-8(fp)
    6ec8:	108005c4 	addi	r2,r2,23
    6ecc:	1085883a 	add	r2,r2,r2
    6ed0:	1085883a 	add	r2,r2,r2
    6ed4:	1885883a 	add	r2,r3,r2
    6ed8:	10c00017 	ldw	r3,0(r2)
    6edc:	e0bfff17 	ldw	r2,-4(fp)
    6ee0:	1085883a 	add	r2,r2,r2
    6ee4:	1085883a 	add	r2,r2,r2
    6ee8:	1885883a 	add	r2,r3,r2
    6eec:	10c00017 	ldw	r3,0(r2)
    6ef0:	18c00044 	addi	r3,r3,1
    6ef4:	10c00015 	stw	r3,0(r2)
    6ef8:	00001a06 	br	6f64 <emit_ac_symbol+0xd0>
	else {
		c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
    6efc:	e0fffd17 	ldw	r3,-12(fp)
    6f00:	e0bffe17 	ldw	r2,-8(fp)
    6f04:	108003c4 	addi	r2,r2,15
    6f08:	1085883a 	add	r2,r2,r2
    6f0c:	1085883a 	add	r2,r2,r2
    6f10:	1885883a 	add	r2,r3,r2
    6f14:	10800017 	ldw	r2,0(r2)
    6f18:	e0bffc15 	stw	r2,-16(fp)
		emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
    6f1c:	e0fffc17 	ldw	r3,-16(fp)
    6f20:	e0bfff17 	ldw	r2,-4(fp)
    6f24:	1085883a 	add	r2,r2,r2
    6f28:	1085883a 	add	r2,r2,r2
    6f2c:	1885883a 	add	r2,r3,r2
    6f30:	10c00017 	ldw	r3,0(r2)
    6f34:	e13ffc17 	ldw	r4,-16(fp)
    6f38:	e0bfff17 	ldw	r2,-4(fp)
    6f3c:	2085883a 	add	r2,r4,r2
    6f40:	10810004 	addi	r2,r2,1024
    6f44:	10800003 	ldbu	r2,0(r2)
    6f48:	10803fcc 	andi	r2,r2,255
    6f4c:	1080201c 	xori	r2,r2,128
    6f50:	10bfe004 	addi	r2,r2,-128
    6f54:	e13ffd17 	ldw	r4,-12(fp)
    6f58:	180b883a 	mov	r5,r3
    6f5c:	100d883a 	mov	r6,r2
    6f60:	0006b780 	call	6b78 <emit_bits_e>
	}
}
    6f64:	e037883a 	mov	sp,fp
    6f68:	dfc00117 	ldw	ra,4(sp)
    6f6c:	df000017 	ldw	fp,0(sp)
    6f70:	dec00204 	addi	sp,sp,8
    6f74:	f800283a 	ret

00006f78 <emit_buffered_bits>:
*/

LOCAL(void)
	emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
	unsigned int nbits)
{
    6f78:	defffb04 	addi	sp,sp,-20
    6f7c:	dfc00415 	stw	ra,16(sp)
    6f80:	df000315 	stw	fp,12(sp)
    6f84:	df000304 	addi	fp,sp,12
    6f88:	e13ffd15 	stw	r4,-12(fp)
    6f8c:	e17ffe15 	stw	r5,-8(fp)
    6f90:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
    6f94:	e0bffd17 	ldw	r2,-12(fp)
    6f98:	10801b03 	ldbu	r2,108(r2)
    6f9c:	10803fcc 	andi	r2,r2,255
    6fa0:	10001026 	beq	r2,zero,6fe4 <emit_buffered_bits+0x6c>
		return;			/* no real work */
    6fa4:	00001106 	br	6fec <emit_buffered_bits+0x74>

	while (nbits > 0) {
		emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
    6fa8:	e0bffe17 	ldw	r2,-8(fp)
    6fac:	10800003 	ldbu	r2,0(r2)
    6fb0:	10803fcc 	andi	r2,r2,255
    6fb4:	1080201c 	xori	r2,r2,128
    6fb8:	10bfe004 	addi	r2,r2,-128
    6fbc:	e13ffd17 	ldw	r4,-12(fp)
    6fc0:	100b883a 	mov	r5,r2
    6fc4:	01800044 	movi	r6,1
    6fc8:	0006b780 	call	6b78 <emit_bits_e>
		bufstart++;
    6fcc:	e0bffe17 	ldw	r2,-8(fp)
    6fd0:	10800044 	addi	r2,r2,1
    6fd4:	e0bffe15 	stw	r2,-8(fp)
		nbits--;
    6fd8:	e0bfff17 	ldw	r2,-4(fp)
    6fdc:	10bfffc4 	addi	r2,r2,-1
    6fe0:	e0bfff15 	stw	r2,-4(fp)
	unsigned int nbits)
{
	if (entropy->gather_statistics)
		return;			/* no real work */

	while (nbits > 0) {
    6fe4:	e0bfff17 	ldw	r2,-4(fp)
    6fe8:	103fef1e 	bne	r2,zero,6fa8 <emit_buffered_bits+0x30>
		emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
		bufstart++;
		nbits--;
	}
}
    6fec:	e037883a 	mov	sp,fp
    6ff0:	dfc00117 	ldw	ra,4(sp)
    6ff4:	df000017 	ldw	fp,0(sp)
    6ff8:	dec00204 	addi	sp,sp,8
    6ffc:	f800283a 	ret

00007000 <emit_eobrun>:
* Emit any pending EOBRUN symbol.
*/

LOCAL(void)
	emit_eobrun (huff_entropy_ptr entropy)
{
    7000:	defffb04 	addi	sp,sp,-20
    7004:	dfc00415 	stw	ra,16(sp)
    7008:	df000315 	stw	fp,12(sp)
    700c:	dc400215 	stw	r17,8(sp)
    7010:	dc000115 	stw	r16,4(sp)
    7014:	df000104 	addi	fp,sp,4
    7018:	e13fff15 	stw	r4,-4(fp)
	register int temp, nbits;

	if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
    701c:	e0bfff17 	ldw	r2,-4(fp)
    7020:	10802017 	ldw	r2,128(r2)
    7024:	10003126 	beq	r2,zero,70ec <emit_eobrun+0xec>
		temp = entropy->EOBRUN;
    7028:	e0bfff17 	ldw	r2,-4(fp)
    702c:	10802017 	ldw	r2,128(r2)
    7030:	1023883a 	mov	r17,r2
		nbits = 0;
    7034:	0021883a 	mov	r16,zero
		while ((temp >>= 1))
    7038:	00000106 	br	7040 <emit_eobrun+0x40>
			nbits++;
    703c:	84000044 	addi	r16,r16,1
	register int temp, nbits;

	if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
		temp = entropy->EOBRUN;
		nbits = 0;
		while ((temp >>= 1))
    7040:	8823d07a 	srai	r17,r17,1
    7044:	883ffd1e 	bne	r17,zero,703c <emit_eobrun+0x3c>
			nbits++;
		/* safety check: shouldn't happen given limited correction-bit buffer */
		if (nbits > 14)
    7048:	808003d0 	cmplti	r2,r16,15
    704c:	10000d1e 	bne	r2,zero,7084 <emit_eobrun+0x84>
			ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
    7050:	e0bfff17 	ldw	r2,-4(fp)
    7054:	10801e17 	ldw	r2,120(r2)
    7058:	10800017 	ldw	r2,0(r2)
    705c:	00c00a44 	movi	r3,41
    7060:	10c00515 	stw	r3,20(r2)
    7064:	e0bfff17 	ldw	r2,-4(fp)
    7068:	10801e17 	ldw	r2,120(r2)
    706c:	10800017 	ldw	r2,0(r2)
    7070:	10c00017 	ldw	r3,0(r2)
    7074:	e0bfff17 	ldw	r2,-4(fp)
    7078:	10801e17 	ldw	r2,120(r2)
    707c:	1009883a 	mov	r4,r2
    7080:	183ee83a 	callr	r3

		emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
    7084:	e0bfff17 	ldw	r2,-4(fp)
    7088:	10c01f17 	ldw	r3,124(r2)
    708c:	8004913a 	slli	r2,r16,4
    7090:	e13fff17 	ldw	r4,-4(fp)
    7094:	180b883a 	mov	r5,r3
    7098:	100d883a 	mov	r6,r2
    709c:	0006e940 	call	6e94 <emit_ac_symbol>
		if (nbits)
    70a0:	80000626 	beq	r16,zero,70bc <emit_eobrun+0xbc>
			emit_bits_e(entropy, entropy->EOBRUN, nbits);
    70a4:	e0bfff17 	ldw	r2,-4(fp)
    70a8:	10802017 	ldw	r2,128(r2)
    70ac:	e13fff17 	ldw	r4,-4(fp)
    70b0:	100b883a 	mov	r5,r2
    70b4:	800d883a 	mov	r6,r16
    70b8:	0006b780 	call	6b78 <emit_bits_e>

		entropy->EOBRUN = 0;
    70bc:	e0bfff17 	ldw	r2,-4(fp)
    70c0:	10002015 	stw	zero,128(r2)

		/* Emit any buffered correction bits */
		emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
    70c4:	e0bfff17 	ldw	r2,-4(fp)
    70c8:	10c02217 	ldw	r3,136(r2)
    70cc:	e0bfff17 	ldw	r2,-4(fp)
    70d0:	10802117 	ldw	r2,132(r2)
    70d4:	e13fff17 	ldw	r4,-4(fp)
    70d8:	180b883a 	mov	r5,r3
    70dc:	100d883a 	mov	r6,r2
    70e0:	0006f780 	call	6f78 <emit_buffered_bits>
		entropy->BE = 0;
    70e4:	e0bfff17 	ldw	r2,-4(fp)
    70e8:	10002115 	stw	zero,132(r2)
	}
}
    70ec:	e037883a 	mov	sp,fp
    70f0:	dfc00317 	ldw	ra,12(sp)
    70f4:	df000217 	ldw	fp,8(sp)
    70f8:	dc400117 	ldw	r17,4(sp)
    70fc:	dc000017 	ldw	r16,0(sp)
    7100:	dec00404 	addi	sp,sp,16
    7104:	f800283a 	ret

00007108 <emit_restart_s>:
* Emit a restart marker & resynchronize predictions.
*/

LOCAL(boolean)
	emit_restart_s (working_state * state, int restart_num)
{
    7108:	defffb04 	addi	sp,sp,-20
    710c:	dfc00415 	stw	ra,16(sp)
    7110:	df000315 	stw	fp,12(sp)
    7114:	df000304 	addi	fp,sp,12
    7118:	e13ffe15 	stw	r4,-8(fp)
    711c:	e17fff15 	stw	r5,-4(fp)
	int ci;

	if (! flush_bits_s(state))
    7120:	e13ffe17 	ldw	r4,-8(fp)
    7124:	0006d0c0 	call	6d0c <flush_bits_s>
    7128:	10803fcc 	andi	r2,r2,255
    712c:	1000021e 	bne	r2,zero,7138 <emit_restart_s+0x30>
		return FALSE;
    7130:	0005883a 	mov	r2,zero
    7134:	00003d06 	br	722c <emit_restart_s+0x124>

	emit_byte_s(state, 0xFF, return FALSE);
    7138:	e0bffe17 	ldw	r2,-8(fp)
    713c:	10800017 	ldw	r2,0(r2)
    7140:	00ffffc4 	movi	r3,-1
    7144:	10c00005 	stb	r3,0(r2)
    7148:	10c00044 	addi	r3,r2,1
    714c:	e0bffe17 	ldw	r2,-8(fp)
    7150:	10c00015 	stw	r3,0(r2)
    7154:	e0bffe17 	ldw	r2,-8(fp)
    7158:	10800117 	ldw	r2,4(r2)
    715c:	10ffffc4 	addi	r3,r2,-1
    7160:	e0bffe17 	ldw	r2,-8(fp)
    7164:	10c00115 	stw	r3,4(r2)
    7168:	e0bffe17 	ldw	r2,-8(fp)
    716c:	10800117 	ldw	r2,4(r2)
    7170:	1000061e 	bne	r2,zero,718c <emit_restart_s+0x84>
    7174:	e13ffe17 	ldw	r4,-8(fp)
    7178:	00068a80 	call	68a8 <dump_buffer_s>
    717c:	10803fcc 	andi	r2,r2,255
    7180:	1000021e 	bne	r2,zero,718c <emit_restart_s+0x84>
    7184:	0005883a 	mov	r2,zero
    7188:	00002806 	br	722c <emit_restart_s+0x124>
	emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
    718c:	e0bffe17 	ldw	r2,-8(fp)
    7190:	10800017 	ldw	r2,0(r2)
    7194:	e0ffff17 	ldw	r3,-4(fp)
    7198:	18fff404 	addi	r3,r3,-48
    719c:	10c00005 	stb	r3,0(r2)
    71a0:	10c00044 	addi	r3,r2,1
    71a4:	e0bffe17 	ldw	r2,-8(fp)
    71a8:	10c00015 	stw	r3,0(r2)
    71ac:	e0bffe17 	ldw	r2,-8(fp)
    71b0:	10800117 	ldw	r2,4(r2)
    71b4:	10ffffc4 	addi	r3,r2,-1
    71b8:	e0bffe17 	ldw	r2,-8(fp)
    71bc:	10c00115 	stw	r3,4(r2)
    71c0:	e0bffe17 	ldw	r2,-8(fp)
    71c4:	10800117 	ldw	r2,4(r2)
    71c8:	1000061e 	bne	r2,zero,71e4 <emit_restart_s+0xdc>
    71cc:	e13ffe17 	ldw	r4,-8(fp)
    71d0:	00068a80 	call	68a8 <dump_buffer_s>
    71d4:	10803fcc 	andi	r2,r2,255
    71d8:	1000021e 	bne	r2,zero,71e4 <emit_restart_s+0xdc>
    71dc:	0005883a 	mov	r2,zero
    71e0:	00001206 	br	722c <emit_restart_s+0x124>

	/* Re-initialize DC predictions to 0 */
	for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
    71e4:	e03ffd15 	stw	zero,-12(fp)
    71e8:	00000a06 	br	7214 <emit_restart_s+0x10c>
		state->cur.last_dc_val[ci] = 0;
    71ec:	e0fffe17 	ldw	r3,-8(fp)
    71f0:	e0bffd17 	ldw	r2,-12(fp)
    71f4:	10800104 	addi	r2,r2,4
    71f8:	1085883a 	add	r2,r2,r2
    71fc:	1085883a 	add	r2,r2,r2
    7200:	1885883a 	add	r2,r3,r2
    7204:	10000015 	stw	zero,0(r2)

	emit_byte_s(state, 0xFF, return FALSE);
	emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);

	/* Re-initialize DC predictions to 0 */
	for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
    7208:	e0bffd17 	ldw	r2,-12(fp)
    720c:	10800044 	addi	r2,r2,1
    7210:	e0bffd15 	stw	r2,-12(fp)
    7214:	e0bffe17 	ldw	r2,-8(fp)
    7218:	10800817 	ldw	r2,32(r2)
    721c:	10804317 	ldw	r2,268(r2)
    7220:	e0fffd17 	ldw	r3,-12(fp)
    7224:	18bff116 	blt	r3,r2,71ec <emit_restart_s+0xe4>
		state->cur.last_dc_val[ci] = 0;

	/* The restart counter is not updated until we successfully write the MCU. */

	return TRUE;
    7228:	00800044 	movi	r2,1
}
    722c:	e037883a 	mov	sp,fp
    7230:	dfc00117 	ldw	ra,4(sp)
    7234:	df000017 	ldw	fp,0(sp)
    7238:	dec00204 	addi	sp,sp,8
    723c:	f800283a 	ret

00007240 <emit_restart_e>:


LOCAL(void)
	emit_restart_e (huff_entropy_ptr entropy, int restart_num)
{
    7240:	defffb04 	addi	sp,sp,-20
    7244:	dfc00415 	stw	ra,16(sp)
    7248:	df000315 	stw	fp,12(sp)
    724c:	df000304 	addi	fp,sp,12
    7250:	e13ffe15 	stw	r4,-8(fp)
    7254:	e17fff15 	stw	r5,-4(fp)
	int ci;

	emit_eobrun(entropy);
    7258:	e13ffe17 	ldw	r4,-8(fp)
    725c:	00070000 	call	7000 <emit_eobrun>

	if (! entropy->gather_statistics) {
    7260:	e0bffe17 	ldw	r2,-8(fp)
    7264:	10801b03 	ldbu	r2,108(r2)
    7268:	10803fcc 	andi	r2,r2,255
    726c:	1000251e 	bne	r2,zero,7304 <emit_restart_e+0xc4>
		flush_bits_e(entropy);
    7270:	e13ffe17 	ldw	r4,-8(fp)
    7274:	0006d680 	call	6d68 <flush_bits_e>
		emit_byte_e(entropy, 0xFF);
    7278:	e0bffe17 	ldw	r2,-8(fp)
    727c:	10801c17 	ldw	r2,112(r2)
    7280:	00ffffc4 	movi	r3,-1
    7284:	10c00005 	stb	r3,0(r2)
    7288:	10c00044 	addi	r3,r2,1
    728c:	e0bffe17 	ldw	r2,-8(fp)
    7290:	10c01c15 	stw	r3,112(r2)
    7294:	e0bffe17 	ldw	r2,-8(fp)
    7298:	10801d17 	ldw	r2,116(r2)
    729c:	10ffffc4 	addi	r3,r2,-1
    72a0:	e0bffe17 	ldw	r2,-8(fp)
    72a4:	10c01d15 	stw	r3,116(r2)
    72a8:	e0bffe17 	ldw	r2,-8(fp)
    72ac:	10801d17 	ldw	r2,116(r2)
    72b0:	1000021e 	bne	r2,zero,72bc <emit_restart_e+0x7c>
    72b4:	e13ffe17 	ldw	r4,-8(fp)
    72b8:	000692c0 	call	692c <dump_buffer_e>
		emit_byte_e(entropy, JPEG_RST0 + restart_num);
    72bc:	e0bffe17 	ldw	r2,-8(fp)
    72c0:	10801c17 	ldw	r2,112(r2)
    72c4:	e0ffff17 	ldw	r3,-4(fp)
    72c8:	18fff404 	addi	r3,r3,-48
    72cc:	10c00005 	stb	r3,0(r2)
    72d0:	10c00044 	addi	r3,r2,1
    72d4:	e0bffe17 	ldw	r2,-8(fp)
    72d8:	10c01c15 	stw	r3,112(r2)
    72dc:	e0bffe17 	ldw	r2,-8(fp)
    72e0:	10801d17 	ldw	r2,116(r2)
    72e4:	10ffffc4 	addi	r3,r2,-1
    72e8:	e0bffe17 	ldw	r2,-8(fp)
    72ec:	10c01d15 	stw	r3,116(r2)
    72f0:	e0bffe17 	ldw	r2,-8(fp)
    72f4:	10801d17 	ldw	r2,116(r2)
    72f8:	1000021e 	bne	r2,zero,7304 <emit_restart_e+0xc4>
    72fc:	e13ffe17 	ldw	r4,-8(fp)
    7300:	000692c0 	call	692c <dump_buffer_e>
	}

	if (entropy->cinfo->Ss == 0) {
    7304:	e0bffe17 	ldw	r2,-8(fp)
    7308:	10801e17 	ldw	r2,120(r2)
    730c:	10805517 	ldw	r2,340(r2)
    7310:	1000121e 	bne	r2,zero,735c <emit_restart_e+0x11c>
		/* Re-initialize DC predictions to 0 */
		for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
    7314:	e03ffd15 	stw	zero,-12(fp)
    7318:	00000a06 	br	7344 <emit_restart_e+0x104>
			entropy->saved.last_dc_val[ci] = 0;
    731c:	e0fffe17 	ldw	r3,-8(fp)
    7320:	e0bffd17 	ldw	r2,-12(fp)
    7324:	10800144 	addi	r2,r2,5
    7328:	1085883a 	add	r2,r2,r2
    732c:	1085883a 	add	r2,r2,r2
    7330:	1885883a 	add	r2,r3,r2
    7334:	10000015 	stw	zero,0(r2)
		emit_byte_e(entropy, JPEG_RST0 + restart_num);
	}

	if (entropy->cinfo->Ss == 0) {
		/* Re-initialize DC predictions to 0 */
		for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
    7338:	e0bffd17 	ldw	r2,-12(fp)
    733c:	10800044 	addi	r2,r2,1
    7340:	e0bffd15 	stw	r2,-12(fp)
    7344:	e0bffe17 	ldw	r2,-8(fp)
    7348:	10801e17 	ldw	r2,120(r2)
    734c:	10804317 	ldw	r2,268(r2)
    7350:	e0fffd17 	ldw	r3,-12(fp)
    7354:	18bff116 	blt	r3,r2,731c <emit_restart_e+0xdc>
    7358:	00000406 	br	736c <emit_restart_e+0x12c>
			entropy->saved.last_dc_val[ci] = 0;
	} else {
		/* Re-initialize all AC-related fields to 0 */
		entropy->EOBRUN = 0;
    735c:	e0bffe17 	ldw	r2,-8(fp)
    7360:	10002015 	stw	zero,128(r2)
		entropy->BE = 0;
    7364:	e0bffe17 	ldw	r2,-8(fp)
    7368:	10002115 	stw	zero,132(r2)
	}
}
    736c:	e037883a 	mov	sp,fp
    7370:	dfc00117 	ldw	ra,4(sp)
    7374:	df000017 	ldw	fp,0(sp)
    7378:	dec00204 	addi	sp,sp,8
    737c:	f800283a 	ret

00007380 <encode_mcu_DC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    7380:	defff304 	addi	sp,sp,-52
    7384:	dfc00c15 	stw	ra,48(sp)
    7388:	df000b15 	stw	fp,44(sp)
    738c:	dc800a15 	stw	r18,40(sp)
    7390:	dc400915 	stw	r17,36(sp)
    7394:	dc000815 	stw	r16,32(sp)
    7398:	df000804 	addi	fp,sp,32
    739c:	e13ffe15 	stw	r4,-8(fp)
    73a0:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    73a4:	e0bffe17 	ldw	r2,-8(fp)
    73a8:	10806417 	ldw	r2,400(r2)
    73ac:	e0bff915 	stw	r2,-28(fp)
	register int temp, temp2;
	register int nbits;
	int blkn, ci;
	int Al = cinfo->Al;
    73b0:	e0bffe17 	ldw	r2,-8(fp)
    73b4:	10805817 	ldw	r2,352(r2)
    73b8:	e0bffa15 	stw	r2,-24(fp)
	JBLOCKROW block;
	jpeg_component_info * compptr;
	ISHIFT_TEMPS

		entropy->next_output_byte = cinfo->dest->next_output_byte;
    73bc:	e0bffe17 	ldw	r2,-8(fp)
    73c0:	10800617 	ldw	r2,24(r2)
    73c4:	10c00017 	ldw	r3,0(r2)
    73c8:	e0bff917 	ldw	r2,-28(fp)
    73cc:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
    73d0:	e0bffe17 	ldw	r2,-8(fp)
    73d4:	10800617 	ldw	r2,24(r2)
    73d8:	10c00117 	ldw	r3,4(r2)
    73dc:	e0bff917 	ldw	r2,-28(fp)
    73e0:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
    73e4:	e0bffe17 	ldw	r2,-8(fp)
    73e8:	10803717 	ldw	r2,220(r2)
    73ec:	10000826 	beq	r2,zero,7410 <encode_mcu_DC_first+0x90>
		if (entropy->restarts_to_go == 0)
    73f0:	e0bff917 	ldw	r2,-28(fp)
    73f4:	10800917 	ldw	r2,36(r2)
    73f8:	1000051e 	bne	r2,zero,7410 <encode_mcu_DC_first+0x90>
			emit_restart_e(entropy, entropy->next_restart_num);
    73fc:	e0bff917 	ldw	r2,-28(fp)
    7400:	10800a17 	ldw	r2,40(r2)
    7404:	e13ff917 	ldw	r4,-28(fp)
    7408:	100b883a 	mov	r5,r2
    740c:	00072400 	call	7240 <emit_restart_e>

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    7410:	e03ff815 	stw	zero,-32(fp)
    7414:	00005006 	br	7558 <encode_mcu_DC_first+0x1d8>
		block = MCU_data[blkn];
    7418:	e0bff817 	ldw	r2,-32(fp)
    741c:	1085883a 	add	r2,r2,r2
    7420:	1085883a 	add	r2,r2,r2
    7424:	e0ffff17 	ldw	r3,-4(fp)
    7428:	1885883a 	add	r2,r3,r2
    742c:	10800017 	ldw	r2,0(r2)
    7430:	e0bffb15 	stw	r2,-20(fp)
		ci = cinfo->MCU_membership[blkn];
    7434:	e0fffe17 	ldw	r3,-8(fp)
    7438:	e0bff817 	ldw	r2,-32(fp)
    743c:	108012c4 	addi	r2,r2,75
    7440:	1085883a 	add	r2,r2,r2
    7444:	1085883a 	add	r2,r2,r2
    7448:	1885883a 	add	r2,r3,r2
    744c:	10800017 	ldw	r2,0(r2)
    7450:	e0bffc15 	stw	r2,-16(fp)
		compptr = cinfo->cur_comp_info[ci];
    7454:	e0fffe17 	ldw	r3,-8(fp)
    7458:	e0bffc17 	ldw	r2,-16(fp)
    745c:	10801104 	addi	r2,r2,68
    7460:	1085883a 	add	r2,r2,r2
    7464:	1085883a 	add	r2,r2,r2
    7468:	1885883a 	add	r2,r3,r2
    746c:	10800017 	ldw	r2,0(r2)
    7470:	e0bffd15 	stw	r2,-12(fp)

		/* Compute the DC value after the required point transform by Al.
		* This is simply an arithmetic right shift.
		*/
		temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
    7474:	e0bffb17 	ldw	r2,-20(fp)
    7478:	1080000b 	ldhu	r2,0(r2)
    747c:	10ffffcc 	andi	r3,r2,65535
    7480:	18e0001c 	xori	r3,r3,32768
    7484:	18e00004 	addi	r3,r3,-32768
    7488:	e0bffa17 	ldw	r2,-24(fp)
    748c:	18a5d83a 	sra	r18,r3,r2

		/* DC differences are figured on the point-transformed values. */
		temp = temp2 - entropy->saved.last_dc_val[ci];
    7490:	e0fff917 	ldw	r3,-28(fp)
    7494:	e0bffc17 	ldw	r2,-16(fp)
    7498:	10800144 	addi	r2,r2,5
    749c:	1085883a 	add	r2,r2,r2
    74a0:	1085883a 	add	r2,r2,r2
    74a4:	1885883a 	add	r2,r3,r2
    74a8:	10800017 	ldw	r2,0(r2)
    74ac:	90a1c83a 	sub	r16,r18,r2
		entropy->saved.last_dc_val[ci] = temp2;
    74b0:	e0fff917 	ldw	r3,-28(fp)
    74b4:	e0bffc17 	ldw	r2,-16(fp)
    74b8:	10800144 	addi	r2,r2,5
    74bc:	1085883a 	add	r2,r2,r2
    74c0:	1085883a 	add	r2,r2,r2
    74c4:	1885883a 	add	r2,r3,r2
    74c8:	14800015 	stw	r18,0(r2)

		/* Encode the DC coefficient difference per section G.1.2.1 */
		temp2 = temp;
    74cc:	8025883a 	mov	r18,r16
		if (temp < 0) {
    74d0:	8000020e 	bge	r16,zero,74dc <encode_mcu_DC_first+0x15c>
			temp = -temp;		/* temp is abs value of input */
    74d4:	0421c83a 	sub	r16,zero,r16
			/* For a negative input, want temp2 = bitwise complement of abs(input) */
			/* This code assumes we are on a two's complement machine */
			temp2--;
    74d8:	94bfffc4 	addi	r18,r18,-1
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 0;
    74dc:	0023883a 	mov	r17,zero
		while (temp) {
    74e0:	00000206 	br	74ec <encode_mcu_DC_first+0x16c>
			nbits++;
    74e4:	8c400044 	addi	r17,r17,1
			temp >>= 1;
    74e8:	8021d07a 	srai	r16,r16,1
			temp2--;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 0;
		while (temp) {
    74ec:	803ffd1e 	bne	r16,zero,74e4 <encode_mcu_DC_first+0x164>
			temp >>= 1;
		}
		/* Check for out-of-range coefficient values.
		* Since we're encoding a difference, the range limit is twice as much.
		*/
		if (nbits > MAX_COEF_BITS+1)
    74f0:	88800310 	cmplti	r2,r17,12
    74f4:	1000091e 	bne	r2,zero,751c <encode_mcu_DC_first+0x19c>
			ERREXIT(cinfo, JERR_BAD_DCT_COEF);
    74f8:	e0bffe17 	ldw	r2,-8(fp)
    74fc:	10800017 	ldw	r2,0(r2)
    7500:	00c00184 	movi	r3,6
    7504:	10c00515 	stw	r3,20(r2)
    7508:	e0bffe17 	ldw	r2,-8(fp)
    750c:	10800017 	ldw	r2,0(r2)
    7510:	10800017 	ldw	r2,0(r2)
    7514:	e13ffe17 	ldw	r4,-8(fp)
    7518:	103ee83a 	callr	r2

		/* Count/emit the Huffman-coded symbol for the number of bits */
		emit_dc_symbol(entropy, compptr->dc_tbl_no, nbits);
    751c:	e0bffd17 	ldw	r2,-12(fp)
    7520:	10800517 	ldw	r2,20(r2)
    7524:	e13ff917 	ldw	r4,-28(fp)
    7528:	100b883a 	mov	r5,r2
    752c:	880d883a 	mov	r6,r17
    7530:	0006db00 	call	6db0 <emit_dc_symbol>

		/* Emit that number of bits of the value, if positive, */
		/* or the complement of its magnitude, if negative. */
		if (nbits)			/* emit_bits rejects calls with size 0 */
    7534:	88000526 	beq	r17,zero,754c <encode_mcu_DC_first+0x1cc>
			emit_bits_e(entropy, (unsigned int) temp2, nbits);
    7538:	9005883a 	mov	r2,r18
    753c:	e13ff917 	ldw	r4,-28(fp)
    7540:	100b883a 	mov	r5,r2
    7544:	880d883a 	mov	r6,r17
    7548:	0006b780 	call	6b78 <emit_bits_e>
	if (cinfo->restart_interval)
		if (entropy->restarts_to_go == 0)
			emit_restart_e(entropy, entropy->next_restart_num);

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    754c:	e0bff817 	ldw	r2,-32(fp)
    7550:	10800044 	addi	r2,r2,1
    7554:	e0bff815 	stw	r2,-32(fp)
    7558:	e0bffe17 	ldw	r2,-8(fp)
    755c:	10804a17 	ldw	r2,296(r2)
    7560:	e0fff817 	ldw	r3,-32(fp)
    7564:	18bfac16 	blt	r3,r2,7418 <encode_mcu_DC_first+0x98>
		/* or the complement of its magnitude, if negative. */
		if (nbits)			/* emit_bits rejects calls with size 0 */
			emit_bits_e(entropy, (unsigned int) temp2, nbits);
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
    7568:	e0bffe17 	ldw	r2,-8(fp)
    756c:	10800617 	ldw	r2,24(r2)
    7570:	e0fff917 	ldw	r3,-28(fp)
    7574:	18c01c17 	ldw	r3,112(r3)
    7578:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
    757c:	e0bffe17 	ldw	r2,-8(fp)
    7580:	10800617 	ldw	r2,24(r2)
    7584:	e0fff917 	ldw	r3,-28(fp)
    7588:	18c01d17 	ldw	r3,116(r3)
    758c:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
    7590:	e0bffe17 	ldw	r2,-8(fp)
    7594:	10803717 	ldw	r2,220(r2)
    7598:	10001626 	beq	r2,zero,75f4 <encode_mcu_DC_first+0x274>
		if (entropy->restarts_to_go == 0) {
    759c:	e0bff917 	ldw	r2,-28(fp)
    75a0:	10800917 	ldw	r2,36(r2)
    75a4:	10000e1e 	bne	r2,zero,75e0 <encode_mcu_DC_first+0x260>
			entropy->restarts_to_go = cinfo->restart_interval;
    75a8:	e0bffe17 	ldw	r2,-8(fp)
    75ac:	10c03717 	ldw	r3,220(r2)
    75b0:	e0bff917 	ldw	r2,-28(fp)
    75b4:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
    75b8:	e0bff917 	ldw	r2,-28(fp)
    75bc:	10800a17 	ldw	r2,40(r2)
    75c0:	10c00044 	addi	r3,r2,1
    75c4:	e0bff917 	ldw	r2,-28(fp)
    75c8:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
    75cc:	e0bff917 	ldw	r2,-28(fp)
    75d0:	10800a17 	ldw	r2,40(r2)
    75d4:	10c001cc 	andi	r3,r2,7
    75d8:	e0bff917 	ldw	r2,-28(fp)
    75dc:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
    75e0:	e0bff917 	ldw	r2,-28(fp)
    75e4:	10800917 	ldw	r2,36(r2)
    75e8:	10ffffc4 	addi	r3,r2,-1
    75ec:	e0bff917 	ldw	r2,-28(fp)
    75f0:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
    75f4:	00800044 	movi	r2,1
}
    75f8:	e037883a 	mov	sp,fp
    75fc:	dfc00417 	ldw	ra,16(sp)
    7600:	df000317 	ldw	fp,12(sp)
    7604:	dc800217 	ldw	r18,8(sp)
    7608:	dc400117 	ldw	r17,4(sp)
    760c:	dc000017 	ldw	r16,0(sp)
    7610:	dec00504 	addi	sp,sp,20
    7614:	f800283a 	ret

00007618 <encode_mcu_AC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    7618:	defff204 	addi	sp,sp,-56
    761c:	dfc00d15 	stw	ra,52(sp)
    7620:	df000c15 	stw	fp,48(sp)
    7624:	dd000b15 	stw	r20,44(sp)
    7628:	dcc00a15 	stw	r19,40(sp)
    762c:	dc800915 	stw	r18,36(sp)
    7630:	dc400815 	stw	r17,32(sp)
    7634:	dc000715 	stw	r16,28(sp)
    7638:	df000704 	addi	fp,sp,28
    763c:	e13ffe15 	stw	r4,-8(fp)
    7640:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    7644:	e0bffe17 	ldw	r2,-8(fp)
    7648:	10806417 	ldw	r2,400(r2)
    764c:	e0bff915 	stw	r2,-28(fp)
	register int r, k;
	int Se, Al;
	const int * natural_order;
	JBLOCKROW block;

	entropy->next_output_byte = cinfo->dest->next_output_byte;
    7650:	e0bffe17 	ldw	r2,-8(fp)
    7654:	10800617 	ldw	r2,24(r2)
    7658:	10c00017 	ldw	r3,0(r2)
    765c:	e0bff917 	ldw	r2,-28(fp)
    7660:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
    7664:	e0bffe17 	ldw	r2,-8(fp)
    7668:	10800617 	ldw	r2,24(r2)
    766c:	10c00117 	ldw	r3,4(r2)
    7670:	e0bff917 	ldw	r2,-28(fp)
    7674:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
    7678:	e0bffe17 	ldw	r2,-8(fp)
    767c:	10803717 	ldw	r2,220(r2)
    7680:	10000826 	beq	r2,zero,76a4 <encode_mcu_AC_first+0x8c>
		if (entropy->restarts_to_go == 0)
    7684:	e0bff917 	ldw	r2,-28(fp)
    7688:	10800917 	ldw	r2,36(r2)
    768c:	1000051e 	bne	r2,zero,76a4 <encode_mcu_AC_first+0x8c>
			emit_restart_e(entropy, entropy->next_restart_num);
    7690:	e0bff917 	ldw	r2,-28(fp)
    7694:	10800a17 	ldw	r2,40(r2)
    7698:	e13ff917 	ldw	r4,-28(fp)
    769c:	100b883a 	mov	r5,r2
    76a0:	00072400 	call	7240 <emit_restart_e>

	Se = cinfo->Se;
    76a4:	e0bffe17 	ldw	r2,-8(fp)
    76a8:	10805617 	ldw	r2,344(r2)
    76ac:	e0bffa15 	stw	r2,-24(fp)
	Al = cinfo->Al;
    76b0:	e0bffe17 	ldw	r2,-8(fp)
    76b4:	10805817 	ldw	r2,352(r2)
    76b8:	e0bffb15 	stw	r2,-20(fp)
	natural_order = cinfo->natural_order;
    76bc:	e0bffe17 	ldw	r2,-8(fp)
    76c0:	10805a17 	ldw	r2,360(r2)
    76c4:	e0bffc15 	stw	r2,-16(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
    76c8:	e0bfff17 	ldw	r2,-4(fp)
    76cc:	10800017 	ldw	r2,0(r2)
    76d0:	e0bffd15 	stw	r2,-12(fp)

	/* Encode the AC coefficients per section G.1.2.2, fig. G.3 */

	r = 0;			/* r = run length of zeros */
    76d4:	0023883a 	mov	r17,zero

	for (k = cinfo->Ss; k <= Se; k++) {
    76d8:	e0bffe17 	ldw	r2,-8(fp)
    76dc:	14c05517 	ldw	r19,340(r2)
    76e0:	00004a06 	br	780c <encode_mcu_AC_first+0x1f4>
		if ((temp = (*block)[natural_order[k]]) == 0) {
    76e4:	9805883a 	mov	r2,r19
    76e8:	1085883a 	add	r2,r2,r2
    76ec:	1085883a 	add	r2,r2,r2
    76f0:	e0fffc17 	ldw	r3,-16(fp)
    76f4:	1885883a 	add	r2,r3,r2
    76f8:	10800017 	ldw	r2,0(r2)
    76fc:	e0fffd17 	ldw	r3,-12(fp)
    7700:	1085883a 	add	r2,r2,r2
    7704:	1885883a 	add	r2,r3,r2
    7708:	1080000b 	ldhu	r2,0(r2)
    770c:	143fffcc 	andi	r16,r2,65535
    7710:	8420001c 	xori	r16,r16,32768
    7714:	84200004 	addi	r16,r16,-32768
    7718:	8000021e 	bne	r16,zero,7724 <encode_mcu_AC_first+0x10c>
			r++;
    771c:	8c400044 	addi	r17,r17,1
			continue;
    7720:	00003906 	br	7808 <encode_mcu_AC_first+0x1f0>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value; so the code is
		* interwoven with finding the abs value (temp) and output bits (temp2).
		*/
		if (temp < 0) {
    7724:	8000050e 	bge	r16,zero,773c <encode_mcu_AC_first+0x124>
			temp = -temp;		/* temp is abs value of input */
    7728:	0421c83a 	sub	r16,zero,r16
			temp >>= Al;		/* apply the point transform */
    772c:	e0bffb17 	ldw	r2,-20(fp)
    7730:	80a1d83a 	sra	r16,r16,r2
			/* For a negative coef, want temp2 = bitwise complement of abs(coef) */
			temp2 = ~temp;
    7734:	0428303a 	nor	r20,zero,r16
    7738:	00000306 	br	7748 <encode_mcu_AC_first+0x130>
		} else {
			temp >>= Al;		/* apply the point transform */
    773c:	e0bffb17 	ldw	r2,-20(fp)
    7740:	80a1d83a 	sra	r16,r16,r2
			temp2 = temp;
    7744:	8029883a 	mov	r20,r16
		}
		/* Watch out for case that nonzero coef is zero after point transform */
		if (temp == 0) {
    7748:	8000021e 	bne	r16,zero,7754 <encode_mcu_AC_first+0x13c>
			r++;
    774c:	8c400044 	addi	r17,r17,1
			continue;
    7750:	00002d06 	br	7808 <encode_mcu_AC_first+0x1f0>
		}

		/* Emit any pending EOBRUN */
		if (entropy->EOBRUN > 0)
    7754:	e0bff917 	ldw	r2,-28(fp)
    7758:	10802017 	ldw	r2,128(r2)
    775c:	10000a26 	beq	r2,zero,7788 <encode_mcu_AC_first+0x170>
			emit_eobrun(entropy);
    7760:	e13ff917 	ldw	r4,-28(fp)
    7764:	00070000 	call	7000 <emit_eobrun>
		/* if run length > 15, must emit special run-length-16 codes (0xF0) */
		while (r > 15) {
    7768:	00000706 	br	7788 <encode_mcu_AC_first+0x170>
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
    776c:	e0bff917 	ldw	r2,-28(fp)
    7770:	10801f17 	ldw	r2,124(r2)
    7774:	e13ff917 	ldw	r4,-28(fp)
    7778:	100b883a 	mov	r5,r2
    777c:	01803c04 	movi	r6,240
    7780:	0006e940 	call	6e94 <emit_ac_symbol>
			r -= 16;
    7784:	8c7ffc04 	addi	r17,r17,-16

		/* Emit any pending EOBRUN */
		if (entropy->EOBRUN > 0)
			emit_eobrun(entropy);
		/* if run length > 15, must emit special run-length-16 codes (0xF0) */
		while (r > 15) {
    7788:	88800408 	cmpgei	r2,r17,16
    778c:	103ff71e 	bne	r2,zero,776c <encode_mcu_AC_first+0x154>
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
			r -= 16;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 1;			/* there must be at least one 1 bit */
    7790:	04800044 	movi	r18,1
		while ((temp >>= 1))
    7794:	00000106 	br	779c <encode_mcu_AC_first+0x184>
			nbits++;
    7798:	94800044 	addi	r18,r18,1
			r -= 16;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 1;			/* there must be at least one 1 bit */
		while ((temp >>= 1))
    779c:	8021d07a 	srai	r16,r16,1
    77a0:	803ffd1e 	bne	r16,zero,7798 <encode_mcu_AC_first+0x180>
			nbits++;
		/* Check for out-of-range coefficient values */
		if (nbits > MAX_COEF_BITS)
    77a4:	908002d0 	cmplti	r2,r18,11
    77a8:	1000091e 	bne	r2,zero,77d0 <encode_mcu_AC_first+0x1b8>
			ERREXIT(cinfo, JERR_BAD_DCT_COEF);
    77ac:	e0bffe17 	ldw	r2,-8(fp)
    77b0:	10800017 	ldw	r2,0(r2)
    77b4:	00c00184 	movi	r3,6
    77b8:	10c00515 	stw	r3,20(r2)
    77bc:	e0bffe17 	ldw	r2,-8(fp)
    77c0:	10800017 	ldw	r2,0(r2)
    77c4:	10800017 	ldw	r2,0(r2)
    77c8:	e13ffe17 	ldw	r4,-8(fp)
    77cc:	103ee83a 	callr	r2

		/* Count/emit Huffman symbol for run length / number of bits */
		emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
    77d0:	e0bff917 	ldw	r2,-28(fp)
    77d4:	10c01f17 	ldw	r3,124(r2)
    77d8:	8804913a 	slli	r2,r17,4
    77dc:	1485883a 	add	r2,r2,r18
    77e0:	e13ff917 	ldw	r4,-28(fp)
    77e4:	180b883a 	mov	r5,r3
    77e8:	100d883a 	mov	r6,r2
    77ec:	0006e940 	call	6e94 <emit_ac_symbol>

		/* Emit that number of bits of the value, if positive, */
		/* or the complement of its magnitude, if negative. */
		emit_bits_e(entropy, (unsigned int) temp2, nbits);
    77f0:	a005883a 	mov	r2,r20
    77f4:	e13ff917 	ldw	r4,-28(fp)
    77f8:	100b883a 	mov	r5,r2
    77fc:	900d883a 	mov	r6,r18
    7800:	0006b780 	call	6b78 <emit_bits_e>

		r = 0;			/* reset zero run length */
    7804:	0023883a 	mov	r17,zero

	/* Encode the AC coefficients per section G.1.2.2, fig. G.3 */

	r = 0;			/* r = run length of zeros */

	for (k = cinfo->Ss; k <= Se; k++) {
    7808:	9cc00044 	addi	r19,r19,1
    780c:	e0bffa17 	ldw	r2,-24(fp)
    7810:	14ffb40e 	bge	r2,r19,76e4 <encode_mcu_AC_first+0xcc>
		emit_bits_e(entropy, (unsigned int) temp2, nbits);

		r = 0;			/* reset zero run length */
	}

	if (r > 0) {			/* If there are trailing zeroes, */
    7814:	04400b0e 	bge	zero,r17,7844 <encode_mcu_AC_first+0x22c>
		entropy->EOBRUN++;		/* count an EOB */
    7818:	e0bff917 	ldw	r2,-28(fp)
    781c:	10802017 	ldw	r2,128(r2)
    7820:	10c00044 	addi	r3,r2,1
    7824:	e0bff917 	ldw	r2,-28(fp)
    7828:	10c02015 	stw	r3,128(r2)
		if (entropy->EOBRUN == 0x7FFF)
    782c:	e0bff917 	ldw	r2,-28(fp)
    7830:	10802017 	ldw	r2,128(r2)
    7834:	109fffd8 	cmpnei	r2,r2,32767
    7838:	1000021e 	bne	r2,zero,7844 <encode_mcu_AC_first+0x22c>
			emit_eobrun(entropy);	/* force it out to avoid overflow */
    783c:	e13ff917 	ldw	r4,-28(fp)
    7840:	00070000 	call	7000 <emit_eobrun>
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
    7844:	e0bffe17 	ldw	r2,-8(fp)
    7848:	10800617 	ldw	r2,24(r2)
    784c:	e0fff917 	ldw	r3,-28(fp)
    7850:	18c01c17 	ldw	r3,112(r3)
    7854:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
    7858:	e0bffe17 	ldw	r2,-8(fp)
    785c:	10800617 	ldw	r2,24(r2)
    7860:	e0fff917 	ldw	r3,-28(fp)
    7864:	18c01d17 	ldw	r3,116(r3)
    7868:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
    786c:	e0bffe17 	ldw	r2,-8(fp)
    7870:	10803717 	ldw	r2,220(r2)
    7874:	10001626 	beq	r2,zero,78d0 <encode_mcu_AC_first+0x2b8>
		if (entropy->restarts_to_go == 0) {
    7878:	e0bff917 	ldw	r2,-28(fp)
    787c:	10800917 	ldw	r2,36(r2)
    7880:	10000e1e 	bne	r2,zero,78bc <encode_mcu_AC_first+0x2a4>
			entropy->restarts_to_go = cinfo->restart_interval;
    7884:	e0bffe17 	ldw	r2,-8(fp)
    7888:	10c03717 	ldw	r3,220(r2)
    788c:	e0bff917 	ldw	r2,-28(fp)
    7890:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
    7894:	e0bff917 	ldw	r2,-28(fp)
    7898:	10800a17 	ldw	r2,40(r2)
    789c:	10c00044 	addi	r3,r2,1
    78a0:	e0bff917 	ldw	r2,-28(fp)
    78a4:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
    78a8:	e0bff917 	ldw	r2,-28(fp)
    78ac:	10800a17 	ldw	r2,40(r2)
    78b0:	10c001cc 	andi	r3,r2,7
    78b4:	e0bff917 	ldw	r2,-28(fp)
    78b8:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
    78bc:	e0bff917 	ldw	r2,-28(fp)
    78c0:	10800917 	ldw	r2,36(r2)
    78c4:	10ffffc4 	addi	r3,r2,-1
    78c8:	e0bff917 	ldw	r2,-28(fp)
    78cc:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
    78d0:	00800044 	movi	r2,1
}
    78d4:	e037883a 	mov	sp,fp
    78d8:	dfc00617 	ldw	ra,24(sp)
    78dc:	df000517 	ldw	fp,20(sp)
    78e0:	dd000417 	ldw	r20,16(sp)
    78e4:	dcc00317 	ldw	r19,12(sp)
    78e8:	dc800217 	ldw	r18,8(sp)
    78ec:	dc400117 	ldw	r17,4(sp)
    78f0:	dc000017 	ldw	r16,0(sp)
    78f4:	dec00704 	addi	sp,sp,28
    78f8:	f800283a 	ret

000078fc <encode_mcu_DC_refine>:
* is not very clear on the point.
*/

METHODDEF(boolean)
	encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    78fc:	defff704 	addi	sp,sp,-36
    7900:	dfc00815 	stw	ra,32(sp)
    7904:	df000715 	stw	fp,28(sp)
    7908:	dc000615 	stw	r16,24(sp)
    790c:	df000604 	addi	fp,sp,24
    7910:	e13ffe15 	stw	r4,-8(fp)
    7914:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    7918:	e0bffe17 	ldw	r2,-8(fp)
    791c:	10806417 	ldw	r2,400(r2)
    7920:	e0bffb15 	stw	r2,-20(fp)
	register int temp;
	int blkn;
	int Al = cinfo->Al;
    7924:	e0bffe17 	ldw	r2,-8(fp)
    7928:	10805817 	ldw	r2,352(r2)
    792c:	e0bffc15 	stw	r2,-16(fp)
	JBLOCKROW block;

	entropy->next_output_byte = cinfo->dest->next_output_byte;
    7930:	e0bffe17 	ldw	r2,-8(fp)
    7934:	10800617 	ldw	r2,24(r2)
    7938:	10c00017 	ldw	r3,0(r2)
    793c:	e0bffb17 	ldw	r2,-20(fp)
    7940:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
    7944:	e0bffe17 	ldw	r2,-8(fp)
    7948:	10800617 	ldw	r2,24(r2)
    794c:	10c00117 	ldw	r3,4(r2)
    7950:	e0bffb17 	ldw	r2,-20(fp)
    7954:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
    7958:	e0bffe17 	ldw	r2,-8(fp)
    795c:	10803717 	ldw	r2,220(r2)
    7960:	10000826 	beq	r2,zero,7984 <encode_mcu_DC_refine+0x88>
		if (entropy->restarts_to_go == 0)
    7964:	e0bffb17 	ldw	r2,-20(fp)
    7968:	10800917 	ldw	r2,36(r2)
    796c:	1000051e 	bne	r2,zero,7984 <encode_mcu_DC_refine+0x88>
			emit_restart_e(entropy, entropy->next_restart_num);
    7970:	e0bffb17 	ldw	r2,-20(fp)
    7974:	10800a17 	ldw	r2,40(r2)
    7978:	e13ffb17 	ldw	r4,-20(fp)
    797c:	100b883a 	mov	r5,r2
    7980:	00072400 	call	7240 <emit_restart_e>

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    7984:	e03ffa15 	stw	zero,-24(fp)
    7988:	00001506 	br	79e0 <encode_mcu_DC_refine+0xe4>
		block = MCU_data[blkn];
    798c:	e0bffa17 	ldw	r2,-24(fp)
    7990:	1085883a 	add	r2,r2,r2
    7994:	1085883a 	add	r2,r2,r2
    7998:	e0ffff17 	ldw	r3,-4(fp)
    799c:	1885883a 	add	r2,r3,r2
    79a0:	10800017 	ldw	r2,0(r2)
    79a4:	e0bffd15 	stw	r2,-12(fp)

		/* We simply emit the Al'th bit of the DC coefficient value. */
		temp = (*block)[0];
    79a8:	e0bffd17 	ldw	r2,-12(fp)
    79ac:	1080000b 	ldhu	r2,0(r2)
    79b0:	143fffcc 	andi	r16,r2,65535
    79b4:	8420001c 	xori	r16,r16,32768
    79b8:	84200004 	addi	r16,r16,-32768
		emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
    79bc:	e0bffc17 	ldw	r2,-16(fp)
    79c0:	8085d83a 	sra	r2,r16,r2
    79c4:	e13ffb17 	ldw	r4,-20(fp)
    79c8:	100b883a 	mov	r5,r2
    79cc:	01800044 	movi	r6,1
    79d0:	0006b780 	call	6b78 <emit_bits_e>
	if (cinfo->restart_interval)
		if (entropy->restarts_to_go == 0)
			emit_restart_e(entropy, entropy->next_restart_num);

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    79d4:	e0bffa17 	ldw	r2,-24(fp)
    79d8:	10800044 	addi	r2,r2,1
    79dc:	e0bffa15 	stw	r2,-24(fp)
    79e0:	e0bffe17 	ldw	r2,-8(fp)
    79e4:	10804a17 	ldw	r2,296(r2)
    79e8:	e0fffa17 	ldw	r3,-24(fp)
    79ec:	18bfe716 	blt	r3,r2,798c <encode_mcu_DC_refine+0x90>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		temp = (*block)[0];
		emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
    79f0:	e0bffe17 	ldw	r2,-8(fp)
    79f4:	10800617 	ldw	r2,24(r2)
    79f8:	e0fffb17 	ldw	r3,-20(fp)
    79fc:	18c01c17 	ldw	r3,112(r3)
    7a00:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
    7a04:	e0bffe17 	ldw	r2,-8(fp)
    7a08:	10800617 	ldw	r2,24(r2)
    7a0c:	e0fffb17 	ldw	r3,-20(fp)
    7a10:	18c01d17 	ldw	r3,116(r3)
    7a14:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
    7a18:	e0bffe17 	ldw	r2,-8(fp)
    7a1c:	10803717 	ldw	r2,220(r2)
    7a20:	10001626 	beq	r2,zero,7a7c <encode_mcu_DC_refine+0x180>
		if (entropy->restarts_to_go == 0) {
    7a24:	e0bffb17 	ldw	r2,-20(fp)
    7a28:	10800917 	ldw	r2,36(r2)
    7a2c:	10000e1e 	bne	r2,zero,7a68 <encode_mcu_DC_refine+0x16c>
			entropy->restarts_to_go = cinfo->restart_interval;
    7a30:	e0bffe17 	ldw	r2,-8(fp)
    7a34:	10c03717 	ldw	r3,220(r2)
    7a38:	e0bffb17 	ldw	r2,-20(fp)
    7a3c:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
    7a40:	e0bffb17 	ldw	r2,-20(fp)
    7a44:	10800a17 	ldw	r2,40(r2)
    7a48:	10c00044 	addi	r3,r2,1
    7a4c:	e0bffb17 	ldw	r2,-20(fp)
    7a50:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
    7a54:	e0bffb17 	ldw	r2,-20(fp)
    7a58:	10800a17 	ldw	r2,40(r2)
    7a5c:	10c001cc 	andi	r3,r2,7
    7a60:	e0bffb17 	ldw	r2,-20(fp)
    7a64:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
    7a68:	e0bffb17 	ldw	r2,-20(fp)
    7a6c:	10800917 	ldw	r2,36(r2)
    7a70:	10ffffc4 	addi	r3,r2,-1
    7a74:	e0bffb17 	ldw	r2,-20(fp)
    7a78:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
    7a7c:	00800044 	movi	r2,1
}
    7a80:	e037883a 	mov	sp,fp
    7a84:	dfc00217 	ldw	ra,8(sp)
    7a88:	df000117 	ldw	fp,4(sp)
    7a8c:	dc000017 	ldw	r16,0(sp)
    7a90:	dec00304 	addi	sp,sp,12
    7a94:	f800283a 	ret

00007a98 <encode_mcu_AC_refine>:
* MCU encoding for AC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    7a98:	deffb104 	addi	sp,sp,-316
    7a9c:	dfc04e15 	stw	ra,312(sp)
    7aa0:	df004d15 	stw	fp,308(sp)
    7aa4:	dc804c15 	stw	r18,304(sp)
    7aa8:	dc404b15 	stw	r17,300(sp)
    7aac:	dc004a15 	stw	r16,296(sp)
    7ab0:	df004a04 	addi	fp,sp,296
    7ab4:	e13ffe15 	stw	r4,-8(fp)
    7ab8:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    7abc:	e0bffe17 	ldw	r2,-8(fp)
    7ac0:	10806417 	ldw	r2,400(r2)
    7ac4:	e0bfb915 	stw	r2,-284(fp)
	int Se, Al;
	const int * natural_order;
	JBLOCKROW block;
	int absvalues[DCTSIZE2];

	entropy->next_output_byte = cinfo->dest->next_output_byte;
    7ac8:	e0bffe17 	ldw	r2,-8(fp)
    7acc:	10800617 	ldw	r2,24(r2)
    7ad0:	10c00017 	ldw	r3,0(r2)
    7ad4:	e0bfb917 	ldw	r2,-284(fp)
    7ad8:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
    7adc:	e0bffe17 	ldw	r2,-8(fp)
    7ae0:	10800617 	ldw	r2,24(r2)
    7ae4:	10c00117 	ldw	r3,4(r2)
    7ae8:	e0bfb917 	ldw	r2,-284(fp)
    7aec:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
    7af0:	e0bffe17 	ldw	r2,-8(fp)
    7af4:	10803717 	ldw	r2,220(r2)
    7af8:	10000826 	beq	r2,zero,7b1c <encode_mcu_AC_refine+0x84>
		if (entropy->restarts_to_go == 0)
    7afc:	e0bfb917 	ldw	r2,-284(fp)
    7b00:	10800917 	ldw	r2,36(r2)
    7b04:	1000051e 	bne	r2,zero,7b1c <encode_mcu_AC_refine+0x84>
			emit_restart_e(entropy, entropy->next_restart_num);
    7b08:	e0bfb917 	ldw	r2,-284(fp)
    7b0c:	10800a17 	ldw	r2,40(r2)
    7b10:	e13fb917 	ldw	r4,-284(fp)
    7b14:	100b883a 	mov	r5,r2
    7b18:	00072400 	call	7240 <emit_restart_e>

	Se = cinfo->Se;
    7b1c:	e0bffe17 	ldw	r2,-8(fp)
    7b20:	10805617 	ldw	r2,344(r2)
    7b24:	e0bfba15 	stw	r2,-280(fp)
	Al = cinfo->Al;
    7b28:	e0bffe17 	ldw	r2,-8(fp)
    7b2c:	10805817 	ldw	r2,352(r2)
    7b30:	e0bfbb15 	stw	r2,-276(fp)
	natural_order = cinfo->natural_order;
    7b34:	e0bffe17 	ldw	r2,-8(fp)
    7b38:	10805a17 	ldw	r2,360(r2)
    7b3c:	e0bfbc15 	stw	r2,-272(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
    7b40:	e0bfff17 	ldw	r2,-4(fp)
    7b44:	10800017 	ldw	r2,0(r2)
    7b48:	e0bfbd15 	stw	r2,-268(fp)

	/* It is convenient to make a pre-pass to determine the transformed
	* coefficients' absolute values and the EOB position.
	*/
	EOB = 0;
    7b4c:	e03fb615 	stw	zero,-296(fp)
	for (k = cinfo->Ss; k <= Se; k++) {
    7b50:	e0bffe17 	ldw	r2,-8(fp)
    7b54:	14005517 	ldw	r16,340(r2)
    7b58:	00001b06 	br	7bc8 <encode_mcu_AC_refine+0x130>
		temp = (*block)[natural_order[k]];
    7b5c:	8005883a 	mov	r2,r16
    7b60:	1085883a 	add	r2,r2,r2
    7b64:	1085883a 	add	r2,r2,r2
    7b68:	e0ffbc17 	ldw	r3,-272(fp)
    7b6c:	1885883a 	add	r2,r3,r2
    7b70:	10800017 	ldw	r2,0(r2)
    7b74:	e0ffbd17 	ldw	r3,-268(fp)
    7b78:	1085883a 	add	r2,r2,r2
    7b7c:	1885883a 	add	r2,r3,r2
    7b80:	1080000b 	ldhu	r2,0(r2)
    7b84:	147fffcc 	andi	r17,r2,65535
    7b88:	8c60001c 	xori	r17,r17,32768
    7b8c:	8c600004 	addi	r17,r17,-32768
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if (temp < 0)
    7b90:	8800010e 	bge	r17,zero,7b98 <encode_mcu_AC_refine+0x100>
			temp = -temp;		/* temp is abs value of input */
    7b94:	0463c83a 	sub	r17,zero,r17
		temp >>= Al;		/* apply the point transform */
    7b98:	e0bfbb17 	ldw	r2,-276(fp)
    7b9c:	88a3d83a 	sra	r17,r17,r2
		absvalues[k] = temp;	/* save abs value for main pass */
    7ba0:	8405883a 	add	r2,r16,r16
    7ba4:	1085883a 	add	r2,r2,r2
    7ba8:	e0ffb604 	addi	r3,fp,-296
    7bac:	1885883a 	add	r2,r3,r2
    7bb0:	10800804 	addi	r2,r2,32
    7bb4:	14400015 	stw	r17,0(r2)
		if (temp == 1)
    7bb8:	88800058 	cmpnei	r2,r17,1
    7bbc:	1000011e 	bne	r2,zero,7bc4 <encode_mcu_AC_refine+0x12c>
			EOB = k;			/* EOB = index of last newly-nonzero coef */
    7bc0:	e43fb615 	stw	r16,-296(fp)

	/* It is convenient to make a pre-pass to determine the transformed
	* coefficients' absolute values and the EOB position.
	*/
	EOB = 0;
	for (k = cinfo->Ss; k <= Se; k++) {
    7bc4:	84000044 	addi	r16,r16,1
    7bc8:	e0bfba17 	ldw	r2,-280(fp)
    7bcc:	143fe30e 	bge	r2,r16,7b5c <encode_mcu_AC_refine+0xc4>
			EOB = k;			/* EOB = index of last newly-nonzero coef */
	}

	/* Encode the AC coefficients per section G.1.2.3, fig. G.7 */

	r = 0;			/* r = run length of zeros */
    7bd0:	0025883a 	mov	r18,zero
	BR = 0;			/* BR = count of buffered bits added now */
    7bd4:	e03fb815 	stw	zero,-288(fp)
	BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
    7bd8:	e0bfb917 	ldw	r2,-284(fp)
    7bdc:	10c02217 	ldw	r3,136(r2)
    7be0:	e0bfb917 	ldw	r2,-284(fp)
    7be4:	10802117 	ldw	r2,132(r2)
    7be8:	1885883a 	add	r2,r3,r2
    7bec:	e0bfb715 	stw	r2,-292(fp)

	for (k = cinfo->Ss; k <= Se; k++) {
    7bf0:	e0bffe17 	ldw	r2,-8(fp)
    7bf4:	14005517 	ldw	r16,340(r2)
    7bf8:	00005106 	br	7d40 <encode_mcu_AC_refine+0x2a8>
		if ((temp = absvalues[k]) == 0) {
    7bfc:	8405883a 	add	r2,r16,r16
    7c00:	1085883a 	add	r2,r2,r2
    7c04:	e0ffb604 	addi	r3,fp,-296
    7c08:	1885883a 	add	r2,r3,r2
    7c0c:	10800804 	addi	r2,r2,32
    7c10:	14400017 	ldw	r17,0(r2)
    7c14:	8800131e 	bne	r17,zero,7c64 <encode_mcu_AC_refine+0x1cc>
			r++;
    7c18:	94800044 	addi	r18,r18,1
			continue;
    7c1c:	00004706 	br	7d3c <encode_mcu_AC_refine+0x2a4>
		}

		/* Emit any required ZRLs, but not if they can be folded into EOB */
		while (r > 15 && k <= EOB) {
			/* emit any pending EOBRUN and the BE correction bits */
			emit_eobrun(entropy);
    7c20:	e13fb917 	ldw	r4,-284(fp)
    7c24:	00070000 	call	7000 <emit_eobrun>
			/* Emit ZRL */
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
    7c28:	e0bfb917 	ldw	r2,-284(fp)
    7c2c:	10801f17 	ldw	r2,124(r2)
    7c30:	e13fb917 	ldw	r4,-284(fp)
    7c34:	100b883a 	mov	r5,r2
    7c38:	01803c04 	movi	r6,240
    7c3c:	0006e940 	call	6e94 <emit_ac_symbol>
			r -= 16;
    7c40:	94bffc04 	addi	r18,r18,-16
			/* Emit buffered correction bits that must be associated with ZRL */
			emit_buffered_bits(entropy, BR_buffer, BR);
    7c44:	e13fb917 	ldw	r4,-284(fp)
    7c48:	e17fb717 	ldw	r5,-292(fp)
    7c4c:	e1bfb817 	ldw	r6,-288(fp)
    7c50:	0006f780 	call	6f78 <emit_buffered_bits>
			BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
    7c54:	e0bfb917 	ldw	r2,-284(fp)
    7c58:	10802217 	ldw	r2,136(r2)
    7c5c:	e0bfb715 	stw	r2,-292(fp)
			BR = 0;
    7c60:	e03fb815 	stw	zero,-288(fp)
			r++;
			continue;
		}

		/* Emit any required ZRLs, but not if they can be folded into EOB */
		while (r > 15 && k <= EOB) {
    7c64:	90800410 	cmplti	r2,r18,16
    7c68:	1000021e 	bne	r2,zero,7c74 <encode_mcu_AC_refine+0x1dc>
    7c6c:	e0bfb617 	ldw	r2,-296(fp)
    7c70:	143feb0e 	bge	r2,r16,7c20 <encode_mcu_AC_refine+0x188>
		/* If the coef was previously nonzero, it only needs a correction bit.
		* NOTE: a straight translation of the spec's figure G.7 would suggest
		* that we also need to test r > 15.  But if r > 15, we can only get here
		* if k > EOB, which implies that this coefficient is not 1.
		*/
		if (temp > 1) {
    7c74:	88800090 	cmplti	r2,r17,2
    7c78:	10000a1e 	bne	r2,zero,7ca4 <encode_mcu_AC_refine+0x20c>
			/* The correction bit is the next bit of the absolute value. */
			BR_buffer[BR++] = (char) (temp & 1);
    7c7c:	e0ffb717 	ldw	r3,-292(fp)
    7c80:	e0bfb817 	ldw	r2,-288(fp)
    7c84:	1885883a 	add	r2,r3,r2
    7c88:	8807883a 	mov	r3,r17
    7c8c:	18c0004c 	andi	r3,r3,1
    7c90:	10c00005 	stb	r3,0(r2)
    7c94:	e0bfb817 	ldw	r2,-288(fp)
    7c98:	10800044 	addi	r2,r2,1
    7c9c:	e0bfb815 	stw	r2,-288(fp)
			continue;
    7ca0:	00002606 	br	7d3c <encode_mcu_AC_refine+0x2a4>
		}

		/* Emit any pending EOBRUN and the BE correction bits */
		emit_eobrun(entropy);
    7ca4:	e13fb917 	ldw	r4,-284(fp)
    7ca8:	00070000 	call	7000 <emit_eobrun>

		/* Count/emit Huffman symbol for run length / number of bits */
		emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
    7cac:	e0bfb917 	ldw	r2,-284(fp)
    7cb0:	10c01f17 	ldw	r3,124(r2)
    7cb4:	9004913a 	slli	r2,r18,4
    7cb8:	10800044 	addi	r2,r2,1
    7cbc:	e13fb917 	ldw	r4,-284(fp)
    7cc0:	180b883a 	mov	r5,r3
    7cc4:	100d883a 	mov	r6,r2
    7cc8:	0006e940 	call	6e94 <emit_ac_symbol>

		/* Emit output bit for newly-nonzero coef */
		temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
    7ccc:	8005883a 	mov	r2,r16
    7cd0:	1085883a 	add	r2,r2,r2
    7cd4:	1085883a 	add	r2,r2,r2
    7cd8:	e0ffbc17 	ldw	r3,-272(fp)
    7cdc:	1885883a 	add	r2,r3,r2
    7ce0:	10800017 	ldw	r2,0(r2)
    7ce4:	e0ffbd17 	ldw	r3,-268(fp)
    7ce8:	1085883a 	add	r2,r2,r2
    7cec:	1885883a 	add	r2,r3,r2
    7cf0:	1080000b 	ldhu	r2,0(r2)
    7cf4:	0084303a 	nor	r2,zero,r2
    7cf8:	10bfffcc 	andi	r2,r2,65535
    7cfc:	1004d3fa 	srli	r2,r2,15
    7d00:	14403fcc 	andi	r17,r2,255
		emit_bits_e(entropy, (unsigned int) temp, 1);
    7d04:	8805883a 	mov	r2,r17
    7d08:	e13fb917 	ldw	r4,-284(fp)
    7d0c:	100b883a 	mov	r5,r2
    7d10:	01800044 	movi	r6,1
    7d14:	0006b780 	call	6b78 <emit_bits_e>

		/* Emit buffered correction bits that must be associated with this code */
		emit_buffered_bits(entropy, BR_buffer, BR);
    7d18:	e13fb917 	ldw	r4,-284(fp)
    7d1c:	e17fb717 	ldw	r5,-292(fp)
    7d20:	e1bfb817 	ldw	r6,-288(fp)
    7d24:	0006f780 	call	6f78 <emit_buffered_bits>
		BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
    7d28:	e0bfb917 	ldw	r2,-284(fp)
    7d2c:	10802217 	ldw	r2,136(r2)
    7d30:	e0bfb715 	stw	r2,-292(fp)
		BR = 0;
    7d34:	e03fb815 	stw	zero,-288(fp)
		r = 0;			/* reset zero run length */
    7d38:	0025883a 	mov	r18,zero

	r = 0;			/* r = run length of zeros */
	BR = 0;			/* BR = count of buffered bits added now */
	BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */

	for (k = cinfo->Ss; k <= Se; k++) {
    7d3c:	84000044 	addi	r16,r16,1
    7d40:	e0bfba17 	ldw	r2,-280(fp)
    7d44:	143fad0e 	bge	r2,r16,7bfc <encode_mcu_AC_refine+0x164>
		BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
		BR = 0;
		r = 0;			/* reset zero run length */
	}

	if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
    7d48:	04800216 	blt	zero,r18,7d54 <encode_mcu_AC_refine+0x2bc>
    7d4c:	e0bfb817 	ldw	r2,-288(fp)
    7d50:	10001526 	beq	r2,zero,7da8 <encode_mcu_AC_refine+0x310>
		entropy->EOBRUN++;		/* count an EOB */
    7d54:	e0bfb917 	ldw	r2,-284(fp)
    7d58:	10802017 	ldw	r2,128(r2)
    7d5c:	10c00044 	addi	r3,r2,1
    7d60:	e0bfb917 	ldw	r2,-284(fp)
    7d64:	10c02015 	stw	r3,128(r2)
		entropy->BE += BR;		/* concat my correction bits to older ones */
    7d68:	e0bfb917 	ldw	r2,-284(fp)
    7d6c:	10c02117 	ldw	r3,132(r2)
    7d70:	e0bfb817 	ldw	r2,-288(fp)
    7d74:	1887883a 	add	r3,r3,r2
    7d78:	e0bfb917 	ldw	r2,-284(fp)
    7d7c:	10c02115 	stw	r3,132(r2)
		/* We force out the EOB if we risk either:
		* 1. overflow of the EOB counter;
		* 2. overflow of the correction bit buffer during the next MCU.
		*/
		if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
    7d80:	e0bfb917 	ldw	r2,-284(fp)
    7d84:	10802017 	ldw	r2,128(r2)
    7d88:	109fffe0 	cmpeqi	r2,r2,32767
    7d8c:	1000041e 	bne	r2,zero,7da0 <encode_mcu_AC_refine+0x308>
    7d90:	e0bfb917 	ldw	r2,-284(fp)
    7d94:	10802117 	ldw	r2,132(r2)
    7d98:	1080eab0 	cmpltui	r2,r2,938
    7d9c:	1000021e 	bne	r2,zero,7da8 <encode_mcu_AC_refine+0x310>
			emit_eobrun(entropy);
    7da0:	e13fb917 	ldw	r4,-284(fp)
    7da4:	00070000 	call	7000 <emit_eobrun>
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
    7da8:	e0bffe17 	ldw	r2,-8(fp)
    7dac:	10800617 	ldw	r2,24(r2)
    7db0:	e0ffb917 	ldw	r3,-284(fp)
    7db4:	18c01c17 	ldw	r3,112(r3)
    7db8:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
    7dbc:	e0bffe17 	ldw	r2,-8(fp)
    7dc0:	10800617 	ldw	r2,24(r2)
    7dc4:	e0ffb917 	ldw	r3,-284(fp)
    7dc8:	18c01d17 	ldw	r3,116(r3)
    7dcc:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
    7dd0:	e0bffe17 	ldw	r2,-8(fp)
    7dd4:	10803717 	ldw	r2,220(r2)
    7dd8:	10001626 	beq	r2,zero,7e34 <encode_mcu_AC_refine+0x39c>
		if (entropy->restarts_to_go == 0) {
    7ddc:	e0bfb917 	ldw	r2,-284(fp)
    7de0:	10800917 	ldw	r2,36(r2)
    7de4:	10000e1e 	bne	r2,zero,7e20 <encode_mcu_AC_refine+0x388>
			entropy->restarts_to_go = cinfo->restart_interval;
    7de8:	e0bffe17 	ldw	r2,-8(fp)
    7dec:	10c03717 	ldw	r3,220(r2)
    7df0:	e0bfb917 	ldw	r2,-284(fp)
    7df4:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
    7df8:	e0bfb917 	ldw	r2,-284(fp)
    7dfc:	10800a17 	ldw	r2,40(r2)
    7e00:	10c00044 	addi	r3,r2,1
    7e04:	e0bfb917 	ldw	r2,-284(fp)
    7e08:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
    7e0c:	e0bfb917 	ldw	r2,-284(fp)
    7e10:	10800a17 	ldw	r2,40(r2)
    7e14:	10c001cc 	andi	r3,r2,7
    7e18:	e0bfb917 	ldw	r2,-284(fp)
    7e1c:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
    7e20:	e0bfb917 	ldw	r2,-284(fp)
    7e24:	10800917 	ldw	r2,36(r2)
    7e28:	10ffffc4 	addi	r3,r2,-1
    7e2c:	e0bfb917 	ldw	r2,-284(fp)
    7e30:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
    7e34:	00800044 	movi	r2,1
}
    7e38:	e037883a 	mov	sp,fp
    7e3c:	dfc00417 	ldw	ra,16(sp)
    7e40:	df000317 	ldw	fp,12(sp)
    7e44:	dc800217 	ldw	r18,8(sp)
    7e48:	dc400117 	ldw	r17,4(sp)
    7e4c:	dc000017 	ldw	r16,0(sp)
    7e50:	dec00504 	addi	sp,sp,20
    7e54:	f800283a 	ret

00007e58 <encode_one_block>:
/* Encode a single block's worth of coefficients */

LOCAL(boolean)
	encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
	c_derived_tbl *dctbl, c_derived_tbl *actbl)
{
    7e58:	defff304 	addi	sp,sp,-52
    7e5c:	dfc00c15 	stw	ra,48(sp)
    7e60:	df000b15 	stw	fp,44(sp)
    7e64:	dd000a15 	stw	r20,40(sp)
    7e68:	dcc00915 	stw	r19,36(sp)
    7e6c:	dc800815 	stw	r18,32(sp)
    7e70:	dc400715 	stw	r17,28(sp)
    7e74:	dc000615 	stw	r16,24(sp)
    7e78:	df000604 	addi	fp,sp,24
    7e7c:	e13ffc15 	stw	r4,-16(fp)
    7e80:	e17ffd15 	stw	r5,-12(fp)
    7e84:	e1bffe15 	stw	r6,-8(fp)
    7e88:	e1ffff15 	stw	r7,-4(fp)
	register int temp, temp2;
	register int nbits;
	register int k, r, i;
	int Se = state->cinfo->lim_Se;
    7e8c:	e0bffc17 	ldw	r2,-16(fp)
    7e90:	10800817 	ldw	r2,32(r2)
    7e94:	10805b17 	ldw	r2,364(r2)
    7e98:	e0bffa15 	stw	r2,-24(fp)
	const int * natural_order = state->cinfo->natural_order;
    7e9c:	e0bffc17 	ldw	r2,-16(fp)
    7ea0:	10800817 	ldw	r2,32(r2)
    7ea4:	10805a17 	ldw	r2,360(r2)
    7ea8:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the DC coefficient difference per section F.1.2.1 */

	temp = temp2 = block[0] - last_dc_val;
    7eac:	e0bffd17 	ldw	r2,-12(fp)
    7eb0:	1080000b 	ldhu	r2,0(r2)
    7eb4:	10ffffcc 	andi	r3,r2,65535
    7eb8:	18e0001c 	xori	r3,r3,32768
    7ebc:	18e00004 	addi	r3,r3,-32768
    7ec0:	e0bffe17 	ldw	r2,-8(fp)
    7ec4:	18a7c83a 	sub	r19,r3,r2
    7ec8:	9821883a 	mov	r16,r19

	if (temp < 0) {
    7ecc:	8000020e 	bge	r16,zero,7ed8 <encode_one_block+0x80>
		temp = -temp;		/* temp is abs value of input */
    7ed0:	0421c83a 	sub	r16,zero,r16
		/* For a negative input, want temp2 = bitwise complement of abs(input) */
		/* This code assumes we are on a two's complement machine */
		temp2--;
    7ed4:	9cffffc4 	addi	r19,r19,-1
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
    7ed8:	0023883a 	mov	r17,zero
	while (temp) {
    7edc:	00000206 	br	7ee8 <encode_one_block+0x90>
		nbits++;
    7ee0:	8c400044 	addi	r17,r17,1
		temp >>= 1;
    7ee4:	8021d07a 	srai	r16,r16,1
		temp2--;
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
	while (temp) {
    7ee8:	803ffd1e 	bne	r16,zero,7ee0 <encode_one_block+0x88>
		temp >>= 1;
	}
	/* Check for out-of-range coefficient values.
	* Since we're encoding a difference, the range limit is twice as much.
	*/
	if (nbits > MAX_COEF_BITS+1)
    7eec:	88800310 	cmplti	r2,r17,12
    7ef0:	10000d1e 	bne	r2,zero,7f28 <encode_one_block+0xd0>
		ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
    7ef4:	e0bffc17 	ldw	r2,-16(fp)
    7ef8:	10800817 	ldw	r2,32(r2)
    7efc:	10800017 	ldw	r2,0(r2)
    7f00:	00c00184 	movi	r3,6
    7f04:	10c00515 	stw	r3,20(r2)
    7f08:	e0bffc17 	ldw	r2,-16(fp)
    7f0c:	10800817 	ldw	r2,32(r2)
    7f10:	10800017 	ldw	r2,0(r2)
    7f14:	10c00017 	ldw	r3,0(r2)
    7f18:	e0bffc17 	ldw	r2,-16(fp)
    7f1c:	10800817 	ldw	r2,32(r2)
    7f20:	1009883a 	mov	r4,r2
    7f24:	183ee83a 	callr	r3

	/* Emit the Huffman-coded symbol for the number of bits */
	if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
    7f28:	e0ffff17 	ldw	r3,-4(fp)
    7f2c:	8c45883a 	add	r2,r17,r17
    7f30:	1085883a 	add	r2,r2,r2
    7f34:	1885883a 	add	r2,r3,r2
    7f38:	10c00017 	ldw	r3,0(r2)
    7f3c:	e0bfff17 	ldw	r2,-4(fp)
    7f40:	1445883a 	add	r2,r2,r17
    7f44:	10810004 	addi	r2,r2,1024
    7f48:	10800003 	ldbu	r2,0(r2)
    7f4c:	10803fcc 	andi	r2,r2,255
    7f50:	1080201c 	xori	r2,r2,128
    7f54:	10bfe004 	addi	r2,r2,-128
    7f58:	e13ffc17 	ldw	r4,-16(fp)
    7f5c:	180b883a 	mov	r5,r3
    7f60:	100d883a 	mov	r6,r2
    7f64:	00069d80 	call	69d8 <emit_bits_s>
    7f68:	10803fcc 	andi	r2,r2,255
    7f6c:	1000021e 	bne	r2,zero,7f78 <encode_one_block+0x120>
		return FALSE;
    7f70:	0005883a 	mov	r2,zero
    7f74:	00007b06 	br	8164 <encode_one_block+0x30c>

	/* Emit that number of bits of the value, if positive, */
	/* or the complement of its magnitude, if negative. */
	if (nbits)			/* emit_bits rejects calls with size 0 */
    7f78:	88000926 	beq	r17,zero,7fa0 <encode_one_block+0x148>
		if (! emit_bits_s(state, (unsigned int) temp2, nbits))
    7f7c:	9805883a 	mov	r2,r19
    7f80:	e13ffc17 	ldw	r4,-16(fp)
    7f84:	100b883a 	mov	r5,r2
    7f88:	880d883a 	mov	r6,r17
    7f8c:	00069d80 	call	69d8 <emit_bits_s>
    7f90:	10803fcc 	andi	r2,r2,255
    7f94:	1000021e 	bne	r2,zero,7fa0 <encode_one_block+0x148>
			return FALSE;
    7f98:	0005883a 	mov	r2,zero
    7f9c:	00007106 	br	8164 <encode_one_block+0x30c>

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */
    7fa0:	0025883a 	mov	r18,zero

	for (k = 1; k <= Se; k++) {
    7fa4:	05000044 	movi	r20,1
    7fa8:	00005b06 	br	8118 <encode_one_block+0x2c0>
		if ((temp = block[natural_order[k]]) == 0) {
    7fac:	a005883a 	mov	r2,r20
    7fb0:	1085883a 	add	r2,r2,r2
    7fb4:	1085883a 	add	r2,r2,r2
    7fb8:	e0fffb17 	ldw	r3,-20(fp)
    7fbc:	1885883a 	add	r2,r3,r2
    7fc0:	10800017 	ldw	r2,0(r2)
    7fc4:	1085883a 	add	r2,r2,r2
    7fc8:	e0fffd17 	ldw	r3,-12(fp)
    7fcc:	1885883a 	add	r2,r3,r2
    7fd0:	1080000b 	ldhu	r2,0(r2)
    7fd4:	143fffcc 	andi	r16,r2,65535
    7fd8:	8420001c 	xori	r16,r16,32768
    7fdc:	84200004 	addi	r16,r16,-32768
    7fe0:	8000121e 	bne	r16,zero,802c <encode_one_block+0x1d4>
			r++;
    7fe4:	94800044 	addi	r18,r18,1
    7fe8:	00004a06 	br	8114 <encode_one_block+0x2bc>
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
				if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
    7fec:	e0800717 	ldw	r2,28(fp)
    7ff0:	10c0f017 	ldw	r3,960(r2)
    7ff4:	e0800717 	ldw	r2,28(fp)
    7ff8:	10813c03 	ldbu	r2,1264(r2)
    7ffc:	10803fcc 	andi	r2,r2,255
    8000:	1080201c 	xori	r2,r2,128
    8004:	10bfe004 	addi	r2,r2,-128
    8008:	e13ffc17 	ldw	r4,-16(fp)
    800c:	180b883a 	mov	r5,r3
    8010:	100d883a 	mov	r6,r2
    8014:	00069d80 	call	69d8 <emit_bits_s>
    8018:	10803fcc 	andi	r2,r2,255
    801c:	1000021e 	bne	r2,zero,8028 <encode_one_block+0x1d0>
					return FALSE;
    8020:	0005883a 	mov	r2,zero
    8024:	00004f06 	br	8164 <encode_one_block+0x30c>
				r -= 16;
    8028:	94bffc04 	addi	r18,r18,-16
	for (k = 1; k <= Se; k++) {
		if ((temp = block[natural_order[k]]) == 0) {
			r++;
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
    802c:	90800408 	cmpgei	r2,r18,16
    8030:	103fee1e 	bne	r2,zero,7fec <encode_one_block+0x194>
				if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
					return FALSE;
				r -= 16;
			}

			temp2 = temp;
    8034:	8027883a 	mov	r19,r16
			if (temp < 0) {
    8038:	8000020e 	bge	r16,zero,8044 <encode_one_block+0x1ec>
				temp = -temp;		/* temp is abs value of input */
    803c:	0421c83a 	sub	r16,zero,r16
				/* This code assumes we are on a two's complement machine */
				temp2--;
    8040:	9cffffc4 	addi	r19,r19,-1
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
    8044:	04400044 	movi	r17,1
			while ((temp >>= 1))
    8048:	00000106 	br	8050 <encode_one_block+0x1f8>
				nbits++;
    804c:	8c400044 	addi	r17,r17,1
				temp2--;
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
			while ((temp >>= 1))
    8050:	8021d07a 	srai	r16,r16,1
    8054:	803ffd1e 	bne	r16,zero,804c <encode_one_block+0x1f4>
				nbits++;
			/* Check for out-of-range coefficient values */
			if (nbits > MAX_COEF_BITS)
    8058:	888002d0 	cmplti	r2,r17,11
    805c:	10000d1e 	bne	r2,zero,8094 <encode_one_block+0x23c>
				ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
    8060:	e0bffc17 	ldw	r2,-16(fp)
    8064:	10800817 	ldw	r2,32(r2)
    8068:	10800017 	ldw	r2,0(r2)
    806c:	00c00184 	movi	r3,6
    8070:	10c00515 	stw	r3,20(r2)
    8074:	e0bffc17 	ldw	r2,-16(fp)
    8078:	10800817 	ldw	r2,32(r2)
    807c:	10800017 	ldw	r2,0(r2)
    8080:	10c00017 	ldw	r3,0(r2)
    8084:	e0bffc17 	ldw	r2,-16(fp)
    8088:	10800817 	ldw	r2,32(r2)
    808c:	1009883a 	mov	r4,r2
    8090:	183ee83a 	callr	r3

			/* Emit Huffman symbol for run length / number of bits */
			i = (r << 4) + nbits;
    8094:	9004913a 	slli	r2,r18,4
    8098:	1461883a 	add	r16,r2,r17
			if (! emit_bits_s(state, actbl->ehufco[i], actbl->ehufsi[i]))
    809c:	e0c00717 	ldw	r3,28(fp)
    80a0:	8405883a 	add	r2,r16,r16
    80a4:	1085883a 	add	r2,r2,r2
    80a8:	1885883a 	add	r2,r3,r2
    80ac:	10c00017 	ldw	r3,0(r2)
    80b0:	e0800717 	ldw	r2,28(fp)
    80b4:	1405883a 	add	r2,r2,r16
    80b8:	10810004 	addi	r2,r2,1024
    80bc:	10800003 	ldbu	r2,0(r2)
    80c0:	10803fcc 	andi	r2,r2,255
    80c4:	1080201c 	xori	r2,r2,128
    80c8:	10bfe004 	addi	r2,r2,-128
    80cc:	e13ffc17 	ldw	r4,-16(fp)
    80d0:	180b883a 	mov	r5,r3
    80d4:	100d883a 	mov	r6,r2
    80d8:	00069d80 	call	69d8 <emit_bits_s>
    80dc:	10803fcc 	andi	r2,r2,255
    80e0:	1000021e 	bne	r2,zero,80ec <encode_one_block+0x294>
				return FALSE;
    80e4:	0005883a 	mov	r2,zero
    80e8:	00001e06 	br	8164 <encode_one_block+0x30c>

			/* Emit that number of bits of the value, if positive, */
			/* or the complement of its magnitude, if negative. */
			if (! emit_bits_s(state, (unsigned int) temp2, nbits))
    80ec:	9805883a 	mov	r2,r19
    80f0:	e13ffc17 	ldw	r4,-16(fp)
    80f4:	100b883a 	mov	r5,r2
    80f8:	880d883a 	mov	r6,r17
    80fc:	00069d80 	call	69d8 <emit_bits_s>
    8100:	10803fcc 	andi	r2,r2,255
    8104:	1000021e 	bne	r2,zero,8110 <encode_one_block+0x2b8>
				return FALSE;
    8108:	0005883a 	mov	r2,zero
    810c:	00001506 	br	8164 <encode_one_block+0x30c>

			r = 0;
    8110:	0025883a 	mov	r18,zero

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */

	for (k = 1; k <= Se; k++) {
    8114:	a5000044 	addi	r20,r20,1
    8118:	e0bffa17 	ldw	r2,-24(fp)
    811c:	153fa30e 	bge	r2,r20,7fac <encode_one_block+0x154>
			r = 0;
		}
	}

	/* If the last coef(s) were zero, emit an end-of-block code */
	if (r > 0)
    8120:	04800f0e 	bge	zero,r18,8160 <encode_one_block+0x308>
		if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
    8124:	e0800717 	ldw	r2,28(fp)
    8128:	10c00017 	ldw	r3,0(r2)
    812c:	e0800717 	ldw	r2,28(fp)
    8130:	10810003 	ldbu	r2,1024(r2)
    8134:	10803fcc 	andi	r2,r2,255
    8138:	1080201c 	xori	r2,r2,128
    813c:	10bfe004 	addi	r2,r2,-128
    8140:	e13ffc17 	ldw	r4,-16(fp)
    8144:	180b883a 	mov	r5,r3
    8148:	100d883a 	mov	r6,r2
    814c:	00069d80 	call	69d8 <emit_bits_s>
    8150:	10803fcc 	andi	r2,r2,255
    8154:	1000021e 	bne	r2,zero,8160 <encode_one_block+0x308>
			return FALSE;
    8158:	0005883a 	mov	r2,zero
    815c:	00000106 	br	8164 <encode_one_block+0x30c>

	return TRUE;
    8160:	00800044 	movi	r2,1
}
    8164:	e037883a 	mov	sp,fp
    8168:	dfc00617 	ldw	ra,24(sp)
    816c:	df000517 	ldw	fp,20(sp)
    8170:	dd000417 	ldw	r20,16(sp)
    8174:	dcc00317 	ldw	r19,12(sp)
    8178:	dc800217 	ldw	r18,8(sp)
    817c:	dc400117 	ldw	r17,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00704 	addi	sp,sp,28
    8188:	f800283a 	ret

0000818c <encode_mcu_huff>:
* Encode and output one MCU's worth of Huffman-compressed coefficients.
*/

METHODDEF(boolean)
	encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    818c:	deffee04 	addi	sp,sp,-72
    8190:	dfc01115 	stw	ra,68(sp)
    8194:	df001015 	stw	fp,64(sp)
    8198:	df001004 	addi	fp,sp,64
    819c:	e13ffe15 	stw	r4,-8(fp)
    81a0:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    81a4:	e0bffe17 	ldw	r2,-8(fp)
    81a8:	10806417 	ldw	r2,400(r2)
    81ac:	e0bff215 	stw	r2,-56(fp)
	working_state state;
	int blkn, ci;
	jpeg_component_info * compptr;

	/* Load up working state */
	state.next_output_byte = cinfo->dest->next_output_byte;
    81b0:	e0bffe17 	ldw	r2,-8(fp)
    81b4:	10800617 	ldw	r2,24(r2)
    81b8:	10800017 	ldw	r2,0(r2)
    81bc:	e0bff515 	stw	r2,-44(fp)
	state.free_in_buffer = cinfo->dest->free_in_buffer;
    81c0:	e0bffe17 	ldw	r2,-8(fp)
    81c4:	10800617 	ldw	r2,24(r2)
    81c8:	10800117 	ldw	r2,4(r2)
    81cc:	e0bff615 	stw	r2,-40(fp)
	ASSIGN_STATE(state.cur, entropy->saved);
    81d0:	e0bff217 	ldw	r2,-56(fp)
    81d4:	10c00317 	ldw	r3,12(r2)
    81d8:	e0fff715 	stw	r3,-36(fp)
    81dc:	10c00417 	ldw	r3,16(r2)
    81e0:	e0fff815 	stw	r3,-32(fp)
    81e4:	10c00517 	ldw	r3,20(r2)
    81e8:	e0fff915 	stw	r3,-28(fp)
    81ec:	10c00617 	ldw	r3,24(r2)
    81f0:	e0fffa15 	stw	r3,-24(fp)
    81f4:	10c00717 	ldw	r3,28(r2)
    81f8:	e0fffb15 	stw	r3,-20(fp)
    81fc:	10800817 	ldw	r2,32(r2)
    8200:	e0bffc15 	stw	r2,-16(fp)
	state.cinfo = cinfo;
    8204:	e0bffe17 	ldw	r2,-8(fp)
    8208:	e0bffd15 	stw	r2,-12(fp)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
    820c:	e0bffe17 	ldw	r2,-8(fp)
    8210:	10803717 	ldw	r2,220(r2)
    8214:	10000d26 	beq	r2,zero,824c <encode_mcu_huff+0xc0>
		if (entropy->restarts_to_go == 0)
    8218:	e0bff217 	ldw	r2,-56(fp)
    821c:	10800917 	ldw	r2,36(r2)
    8220:	10000a1e 	bne	r2,zero,824c <encode_mcu_huff+0xc0>
			if (! emit_restart_s(&state, entropy->next_restart_num))
    8224:	e0bff217 	ldw	r2,-56(fp)
    8228:	10800a17 	ldw	r2,40(r2)
    822c:	e0fff504 	addi	r3,fp,-44
    8230:	1809883a 	mov	r4,r3
    8234:	100b883a 	mov	r5,r2
    8238:	00071080 	call	7108 <emit_restart_s>
    823c:	10803fcc 	andi	r2,r2,255
    8240:	1000021e 	bne	r2,zero,824c <encode_mcu_huff+0xc0>
				return FALSE;
    8244:	0005883a 	mov	r2,zero
    8248:	00008106 	br	8450 <encode_mcu_huff+0x2c4>
	}

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    824c:	e03ff115 	stw	zero,-60(fp)
    8250:	00004c06 	br	8384 <encode_mcu_huff+0x1f8>
		ci = cinfo->MCU_membership[blkn];
    8254:	e0fffe17 	ldw	r3,-8(fp)
    8258:	e0bff117 	ldw	r2,-60(fp)
    825c:	108012c4 	addi	r2,r2,75
    8260:	1085883a 	add	r2,r2,r2
    8264:	1085883a 	add	r2,r2,r2
    8268:	1885883a 	add	r2,r3,r2
    826c:	10800017 	ldw	r2,0(r2)
    8270:	e0bff315 	stw	r2,-52(fp)
		compptr = cinfo->cur_comp_info[ci];
    8274:	e0fffe17 	ldw	r3,-8(fp)
    8278:	e0bff317 	ldw	r2,-52(fp)
    827c:	10801104 	addi	r2,r2,68
    8280:	1085883a 	add	r2,r2,r2
    8284:	1085883a 	add	r2,r2,r2
    8288:	1885883a 	add	r2,r3,r2
    828c:	10800017 	ldw	r2,0(r2)
    8290:	e0bff415 	stw	r2,-48(fp)
		if (! encode_one_block(&state,
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
    8294:	e0bff117 	ldw	r2,-60(fp)
    8298:	1085883a 	add	r2,r2,r2
    829c:	1085883a 	add	r2,r2,r2
    82a0:	e0ffff17 	ldw	r3,-4(fp)
    82a4:	1885883a 	add	r2,r3,r2

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
    82a8:	11400017 	ldw	r5,0(r2)
    82ac:	e0bff317 	ldw	r2,-52(fp)
    82b0:	10800104 	addi	r2,r2,4
    82b4:	1085883a 	add	r2,r2,r2
    82b8:	1085883a 	add	r2,r2,r2
    82bc:	e0fff104 	addi	r3,fp,-60
    82c0:	1885883a 	add	r2,r3,r2
    82c4:	10800404 	addi	r2,r2,16
    82c8:	11800017 	ldw	r6,0(r2)
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
    82cc:	e0bff417 	ldw	r2,-48(fp)
    82d0:	10800517 	ldw	r2,20(r2)
    82d4:	e0fff217 	ldw	r3,-56(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
    82d8:	108002c4 	addi	r2,r2,11
    82dc:	1085883a 	add	r2,r2,r2
    82e0:	1085883a 	add	r2,r2,r2
    82e4:	1885883a 	add	r2,r3,r2
    82e8:	10c00017 	ldw	r3,0(r2)
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
			entropy->ac_derived_tbls[compptr->ac_tbl_no]))
    82ec:	e0bff417 	ldw	r2,-48(fp)
    82f0:	10800617 	ldw	r2,24(r2)
    82f4:	e13ff217 	ldw	r4,-56(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
    82f8:	108003c4 	addi	r2,r2,15
    82fc:	1085883a 	add	r2,r2,r2
    8300:	1085883a 	add	r2,r2,r2
    8304:	2085883a 	add	r2,r4,r2
    8308:	11000017 	ldw	r4,0(r2)
    830c:	e0bff504 	addi	r2,fp,-44
    8310:	d9000015 	stw	r4,0(sp)
    8314:	1009883a 	mov	r4,r2
    8318:	180f883a 	mov	r7,r3
    831c:	0007e580 	call	7e58 <encode_one_block>
    8320:	10803fcc 	andi	r2,r2,255
    8324:	1000021e 	bne	r2,zero,8330 <encode_mcu_huff+0x1a4>
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
			entropy->ac_derived_tbls[compptr->ac_tbl_no]))
			return FALSE;
    8328:	0005883a 	mov	r2,zero
    832c:	00004806 	br	8450 <encode_mcu_huff+0x2c4>
		/* Update last_dc_val */
		state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
    8330:	e0bff117 	ldw	r2,-60(fp)
    8334:	1085883a 	add	r2,r2,r2
    8338:	1085883a 	add	r2,r2,r2
    833c:	e0ffff17 	ldw	r3,-4(fp)
    8340:	1885883a 	add	r2,r3,r2
    8344:	10800017 	ldw	r2,0(r2)
    8348:	1080000b 	ldhu	r2,0(r2)
    834c:	10ffffcc 	andi	r3,r2,65535
    8350:	18e0001c 	xori	r3,r3,32768
    8354:	18e00004 	addi	r3,r3,-32768
    8358:	e0bff317 	ldw	r2,-52(fp)
    835c:	10800104 	addi	r2,r2,4
    8360:	1085883a 	add	r2,r2,r2
    8364:	1085883a 	add	r2,r2,r2
    8368:	e13ff104 	addi	r4,fp,-60
    836c:	2085883a 	add	r2,r4,r2
    8370:	10800404 	addi	r2,r2,16
    8374:	10c00015 	stw	r3,0(r2)
			if (! emit_restart_s(&state, entropy->next_restart_num))
				return FALSE;
	}

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    8378:	e0bff117 	ldw	r2,-60(fp)
    837c:	10800044 	addi	r2,r2,1
    8380:	e0bff115 	stw	r2,-60(fp)
    8384:	e0bffe17 	ldw	r2,-8(fp)
    8388:	10804a17 	ldw	r2,296(r2)
    838c:	e0fff117 	ldw	r3,-60(fp)
    8390:	18bfb016 	blt	r3,r2,8254 <encode_mcu_huff+0xc8>
		/* Update last_dc_val */
		state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
	}

	/* Completed MCU, so update state */
	cinfo->dest->next_output_byte = state.next_output_byte;
    8394:	e0bffe17 	ldw	r2,-8(fp)
    8398:	10800617 	ldw	r2,24(r2)
    839c:	e0fff517 	ldw	r3,-44(fp)
    83a0:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = state.free_in_buffer;
    83a4:	e0bffe17 	ldw	r2,-8(fp)
    83a8:	10800617 	ldw	r2,24(r2)
    83ac:	e0fff617 	ldw	r3,-40(fp)
    83b0:	10c00115 	stw	r3,4(r2)
	ASSIGN_STATE(entropy->saved, state.cur);
    83b4:	e0bff217 	ldw	r2,-56(fp)
    83b8:	e0fff717 	ldw	r3,-36(fp)
    83bc:	10c00315 	stw	r3,12(r2)
    83c0:	e0fff817 	ldw	r3,-32(fp)
    83c4:	10c00415 	stw	r3,16(r2)
    83c8:	e0fff917 	ldw	r3,-28(fp)
    83cc:	10c00515 	stw	r3,20(r2)
    83d0:	e0fffa17 	ldw	r3,-24(fp)
    83d4:	10c00615 	stw	r3,24(r2)
    83d8:	e0fffb17 	ldw	r3,-20(fp)
    83dc:	10c00715 	stw	r3,28(r2)
    83e0:	e0fffc17 	ldw	r3,-16(fp)
    83e4:	10c00815 	stw	r3,32(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
    83e8:	e0bffe17 	ldw	r2,-8(fp)
    83ec:	10803717 	ldw	r2,220(r2)
    83f0:	10001626 	beq	r2,zero,844c <encode_mcu_huff+0x2c0>
		if (entropy->restarts_to_go == 0) {
    83f4:	e0bff217 	ldw	r2,-56(fp)
    83f8:	10800917 	ldw	r2,36(r2)
    83fc:	10000e1e 	bne	r2,zero,8438 <encode_mcu_huff+0x2ac>
			entropy->restarts_to_go = cinfo->restart_interval;
    8400:	e0bffe17 	ldw	r2,-8(fp)
    8404:	10c03717 	ldw	r3,220(r2)
    8408:	e0bff217 	ldw	r2,-56(fp)
    840c:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
    8410:	e0bff217 	ldw	r2,-56(fp)
    8414:	10800a17 	ldw	r2,40(r2)
    8418:	10c00044 	addi	r3,r2,1
    841c:	e0bff217 	ldw	r2,-56(fp)
    8420:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
    8424:	e0bff217 	ldw	r2,-56(fp)
    8428:	10800a17 	ldw	r2,40(r2)
    842c:	10c001cc 	andi	r3,r2,7
    8430:	e0bff217 	ldw	r2,-56(fp)
    8434:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
    8438:	e0bff217 	ldw	r2,-56(fp)
    843c:	10800917 	ldw	r2,36(r2)
    8440:	10ffffc4 	addi	r3,r2,-1
    8444:	e0bff217 	ldw	r2,-56(fp)
    8448:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
    844c:	00800044 	movi	r2,1
}
    8450:	e037883a 	mov	sp,fp
    8454:	dfc00117 	ldw	ra,4(sp)
    8458:	df000017 	ldw	fp,0(sp)
    845c:	dec00204 	addi	sp,sp,8
    8460:	f800283a 	ret

00008464 <finish_pass_huff>:
* Finish up at the end of a Huffman-compressed scan.
*/

METHODDEF(void)
	finish_pass_huff (j_compress_ptr cinfo)
{
    8464:	defff304 	addi	sp,sp,-52
    8468:	dfc00c15 	stw	ra,48(sp)
    846c:	df000b15 	stw	fp,44(sp)
    8470:	df000b04 	addi	fp,sp,44
    8474:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    8478:	e0bfff17 	ldw	r2,-4(fp)
    847c:	10806417 	ldw	r2,400(r2)
    8480:	e0bff515 	stw	r2,-44(fp)
	working_state state;

	if (cinfo->progressive_mode) {
    8484:	e0bfff17 	ldw	r2,-4(fp)
    8488:	10803d03 	ldbu	r2,244(r2)
    848c:	10803fcc 	andi	r2,r2,255
    8490:	10001926 	beq	r2,zero,84f8 <finish_pass_huff+0x94>
		entropy->next_output_byte = cinfo->dest->next_output_byte;
    8494:	e0bfff17 	ldw	r2,-4(fp)
    8498:	10800617 	ldw	r2,24(r2)
    849c:	10c00017 	ldw	r3,0(r2)
    84a0:	e0bff517 	ldw	r2,-44(fp)
    84a4:	10c01c15 	stw	r3,112(r2)
		entropy->free_in_buffer = cinfo->dest->free_in_buffer;
    84a8:	e0bfff17 	ldw	r2,-4(fp)
    84ac:	10800617 	ldw	r2,24(r2)
    84b0:	10c00117 	ldw	r3,4(r2)
    84b4:	e0bff517 	ldw	r2,-44(fp)
    84b8:	10c01d15 	stw	r3,116(r2)

		/* Flush out any buffered data */
		emit_eobrun(entropy);
    84bc:	e13ff517 	ldw	r4,-44(fp)
    84c0:	00070000 	call	7000 <emit_eobrun>
		flush_bits_e(entropy);
    84c4:	e13ff517 	ldw	r4,-44(fp)
    84c8:	0006d680 	call	6d68 <flush_bits_e>

		cinfo->dest->next_output_byte = entropy->next_output_byte;
    84cc:	e0bfff17 	ldw	r2,-4(fp)
    84d0:	10800617 	ldw	r2,24(r2)
    84d4:	e0fff517 	ldw	r3,-44(fp)
    84d8:	18c01c17 	ldw	r3,112(r3)
    84dc:	10c00015 	stw	r3,0(r2)
		cinfo->dest->free_in_buffer = entropy->free_in_buffer;
    84e0:	e0bfff17 	ldw	r2,-4(fp)
    84e4:	10800617 	ldw	r2,24(r2)
    84e8:	e0fff517 	ldw	r3,-44(fp)
    84ec:	18c01d17 	ldw	r3,116(r3)
    84f0:	10c00115 	stw	r3,4(r2)
    84f4:	00003a06 	br	85e0 <finish_pass_huff+0x17c>
	} else {
		/* Load up working state ... flush_bits needs it */
		state.next_output_byte = cinfo->dest->next_output_byte;
    84f8:	e0bfff17 	ldw	r2,-4(fp)
    84fc:	10800617 	ldw	r2,24(r2)
    8500:	10800017 	ldw	r2,0(r2)
    8504:	e0bff615 	stw	r2,-40(fp)
		state.free_in_buffer = cinfo->dest->free_in_buffer;
    8508:	e0bfff17 	ldw	r2,-4(fp)
    850c:	10800617 	ldw	r2,24(r2)
    8510:	10800117 	ldw	r2,4(r2)
    8514:	e0bff715 	stw	r2,-36(fp)
		ASSIGN_STATE(state.cur, entropy->saved);
    8518:	e0bff517 	ldw	r2,-44(fp)
    851c:	10c00317 	ldw	r3,12(r2)
    8520:	e0fff815 	stw	r3,-32(fp)
    8524:	10c00417 	ldw	r3,16(r2)
    8528:	e0fff915 	stw	r3,-28(fp)
    852c:	10c00517 	ldw	r3,20(r2)
    8530:	e0fffa15 	stw	r3,-24(fp)
    8534:	10c00617 	ldw	r3,24(r2)
    8538:	e0fffb15 	stw	r3,-20(fp)
    853c:	10c00717 	ldw	r3,28(r2)
    8540:	e0fffc15 	stw	r3,-16(fp)
    8544:	10800817 	ldw	r2,32(r2)
    8548:	e0bffd15 	stw	r2,-12(fp)
		state.cinfo = cinfo;
    854c:	e0bfff17 	ldw	r2,-4(fp)
    8550:	e0bffe15 	stw	r2,-8(fp)

		/* Flush out the last data */
		if (! flush_bits_s(&state))
    8554:	e0bff604 	addi	r2,fp,-40
    8558:	1009883a 	mov	r4,r2
    855c:	0006d0c0 	call	6d0c <flush_bits_s>
    8560:	10803fcc 	andi	r2,r2,255
    8564:	1000091e 	bne	r2,zero,858c <finish_pass_huff+0x128>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
    8568:	e0bfff17 	ldw	r2,-4(fp)
    856c:	10800017 	ldw	r2,0(r2)
    8570:	00c00644 	movi	r3,25
    8574:	10c00515 	stw	r3,20(r2)
    8578:	e0bfff17 	ldw	r2,-4(fp)
    857c:	10800017 	ldw	r2,0(r2)
    8580:	10800017 	ldw	r2,0(r2)
    8584:	e13fff17 	ldw	r4,-4(fp)
    8588:	103ee83a 	callr	r2

		/* Update state */
		cinfo->dest->next_output_byte = state.next_output_byte;
    858c:	e0bfff17 	ldw	r2,-4(fp)
    8590:	10800617 	ldw	r2,24(r2)
    8594:	e0fff617 	ldw	r3,-40(fp)
    8598:	10c00015 	stw	r3,0(r2)
		cinfo->dest->free_in_buffer = state.free_in_buffer;
    859c:	e0bfff17 	ldw	r2,-4(fp)
    85a0:	10800617 	ldw	r2,24(r2)
    85a4:	e0fff717 	ldw	r3,-36(fp)
    85a8:	10c00115 	stw	r3,4(r2)
		ASSIGN_STATE(entropy->saved, state.cur);
    85ac:	e0bff517 	ldw	r2,-44(fp)
    85b0:	e0fff817 	ldw	r3,-32(fp)
    85b4:	10c00315 	stw	r3,12(r2)
    85b8:	e0fff917 	ldw	r3,-28(fp)
    85bc:	10c00415 	stw	r3,16(r2)
    85c0:	e0fffa17 	ldw	r3,-24(fp)
    85c4:	10c00515 	stw	r3,20(r2)
    85c8:	e0fffb17 	ldw	r3,-20(fp)
    85cc:	10c00615 	stw	r3,24(r2)
    85d0:	e0fffc17 	ldw	r3,-16(fp)
    85d4:	10c00715 	stw	r3,28(r2)
    85d8:	e0fffd17 	ldw	r3,-12(fp)
    85dc:	10c00815 	stw	r3,32(r2)
	}
}
    85e0:	e037883a 	mov	sp,fp
    85e4:	dfc00117 	ldw	ra,4(sp)
    85e8:	df000017 	ldw	fp,0(sp)
    85ec:	dec00204 	addi	sp,sp,8
    85f0:	f800283a 	ret

000085f4 <htest_one_block>:
/* Process a single block's worth of coefficients */

LOCAL(void)
	htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
	long dc_counts[], long ac_counts[])
{
    85f4:	defff404 	addi	sp,sp,-48
    85f8:	dfc00b15 	stw	ra,44(sp)
    85fc:	df000a15 	stw	fp,40(sp)
    8600:	dcc00915 	stw	r19,36(sp)
    8604:	dc800815 	stw	r18,32(sp)
    8608:	dc400715 	stw	r17,28(sp)
    860c:	dc000615 	stw	r16,24(sp)
    8610:	df000604 	addi	fp,sp,24
    8614:	e13ffc15 	stw	r4,-16(fp)
    8618:	e17ffd15 	stw	r5,-12(fp)
    861c:	e1bffe15 	stw	r6,-8(fp)
    8620:	e1ffff15 	stw	r7,-4(fp)
	register int temp;
	register int nbits;
	register int k, r;
	int Se = cinfo->lim_Se;
    8624:	e0bffc17 	ldw	r2,-16(fp)
    8628:	10805b17 	ldw	r2,364(r2)
    862c:	e0bffa15 	stw	r2,-24(fp)
	const int * natural_order = cinfo->natural_order;
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	10805a17 	ldw	r2,360(r2)
    8638:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the DC coefficient difference per section F.1.2.1 */

	temp = block[0] - last_dc_val;
    863c:	e0bffd17 	ldw	r2,-12(fp)
    8640:	1080000b 	ldhu	r2,0(r2)
    8644:	10ffffcc 	andi	r3,r2,65535
    8648:	18e0001c 	xori	r3,r3,32768
    864c:	18e00004 	addi	r3,r3,-32768
    8650:	e0bffe17 	ldw	r2,-8(fp)
    8654:	18a1c83a 	sub	r16,r3,r2
	if (temp < 0)
    8658:	8000010e 	bge	r16,zero,8660 <htest_one_block+0x6c>
		temp = -temp;
    865c:	0421c83a 	sub	r16,zero,r16

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
    8660:	0023883a 	mov	r17,zero
	while (temp) {
    8664:	00000206 	br	8670 <htest_one_block+0x7c>
		nbits++;
    8668:	8c400044 	addi	r17,r17,1
		temp >>= 1;
    866c:	8021d07a 	srai	r16,r16,1
	if (temp < 0)
		temp = -temp;

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
	while (temp) {
    8670:	803ffd1e 	bne	r16,zero,8668 <htest_one_block+0x74>
		temp >>= 1;
	}
	/* Check for out-of-range coefficient values.
	* Since we're encoding a difference, the range limit is twice as much.
	*/
	if (nbits > MAX_COEF_BITS+1)
    8674:	88800310 	cmplti	r2,r17,12
    8678:	1000091e 	bne	r2,zero,86a0 <htest_one_block+0xac>
		ERREXIT(cinfo, JERR_BAD_DCT_COEF);
    867c:	e0bffc17 	ldw	r2,-16(fp)
    8680:	10800017 	ldw	r2,0(r2)
    8684:	00c00184 	movi	r3,6
    8688:	10c00515 	stw	r3,20(r2)
    868c:	e0bffc17 	ldw	r2,-16(fp)
    8690:	10800017 	ldw	r2,0(r2)
    8694:	10800017 	ldw	r2,0(r2)
    8698:	e13ffc17 	ldw	r4,-16(fp)
    869c:	103ee83a 	callr	r2

	/* Count the Huffman symbol for the number of bits */
	dc_counts[nbits]++;
    86a0:	8805883a 	mov	r2,r17
    86a4:	1085883a 	add	r2,r2,r2
    86a8:	1085883a 	add	r2,r2,r2
    86ac:	e0ffff17 	ldw	r3,-4(fp)
    86b0:	1885883a 	add	r2,r3,r2
    86b4:	10c00017 	ldw	r3,0(r2)
    86b8:	18c00044 	addi	r3,r3,1
    86bc:	10c00015 	stw	r3,0(r2)

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */
    86c0:	0025883a 	mov	r18,zero

	for (k = 1; k <= Se; k++) {
    86c4:	04c00044 	movi	r19,1
    86c8:	00003506 	br	87a0 <htest_one_block+0x1ac>
		if ((temp = block[natural_order[k]]) == 0) {
    86cc:	9805883a 	mov	r2,r19
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	1085883a 	add	r2,r2,r2
    86d8:	e0fffb17 	ldw	r3,-20(fp)
    86dc:	1885883a 	add	r2,r3,r2
    86e0:	10800017 	ldw	r2,0(r2)
    86e4:	1085883a 	add	r2,r2,r2
    86e8:	e0fffd17 	ldw	r3,-12(fp)
    86ec:	1885883a 	add	r2,r3,r2
    86f0:	1080000b 	ldhu	r2,0(r2)
    86f4:	143fffcc 	andi	r16,r2,65535
    86f8:	8420001c 	xori	r16,r16,32768
    86fc:	84200004 	addi	r16,r16,-32768
    8700:	8000081e 	bne	r16,zero,8724 <htest_one_block+0x130>
			r++;
    8704:	94800044 	addi	r18,r18,1
    8708:	00002406 	br	879c <htest_one_block+0x1a8>
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
				ac_counts[0xF0]++;
    870c:	e0800617 	ldw	r2,24(fp)
    8710:	1080f004 	addi	r2,r2,960
    8714:	10c00017 	ldw	r3,0(r2)
    8718:	18c00044 	addi	r3,r3,1
    871c:	10c00015 	stw	r3,0(r2)
				r -= 16;
    8720:	94bffc04 	addi	r18,r18,-16
	for (k = 1; k <= Se; k++) {
		if ((temp = block[natural_order[k]]) == 0) {
			r++;
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
    8724:	90800408 	cmpgei	r2,r18,16
    8728:	103ff81e 	bne	r2,zero,870c <htest_one_block+0x118>
				ac_counts[0xF0]++;
				r -= 16;
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			if (temp < 0)
    872c:	8000010e 	bge	r16,zero,8734 <htest_one_block+0x140>
				temp = -temp;
    8730:	0421c83a 	sub	r16,zero,r16

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
    8734:	04400044 	movi	r17,1
			while ((temp >>= 1))
    8738:	00000106 	br	8740 <htest_one_block+0x14c>
				nbits++;
    873c:	8c400044 	addi	r17,r17,1
			if (temp < 0)
				temp = -temp;

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
			while ((temp >>= 1))
    8740:	8021d07a 	srai	r16,r16,1
    8744:	803ffd1e 	bne	r16,zero,873c <htest_one_block+0x148>
				nbits++;
			/* Check for out-of-range coefficient values */
			if (nbits > MAX_COEF_BITS)
    8748:	888002d0 	cmplti	r2,r17,11
    874c:	1000091e 	bne	r2,zero,8774 <htest_one_block+0x180>
				ERREXIT(cinfo, JERR_BAD_DCT_COEF);
    8750:	e0bffc17 	ldw	r2,-16(fp)
    8754:	10800017 	ldw	r2,0(r2)
    8758:	00c00184 	movi	r3,6
    875c:	10c00515 	stw	r3,20(r2)
    8760:	e0bffc17 	ldw	r2,-16(fp)
    8764:	10800017 	ldw	r2,0(r2)
    8768:	10800017 	ldw	r2,0(r2)
    876c:	e13ffc17 	ldw	r4,-16(fp)
    8770:	103ee83a 	callr	r2

			/* Count Huffman symbol for run length / number of bits */
			ac_counts[(r << 4) + nbits]++;
    8774:	9004913a 	slli	r2,r18,4
    8778:	1445883a 	add	r2,r2,r17
    877c:	1085883a 	add	r2,r2,r2
    8780:	1085883a 	add	r2,r2,r2
    8784:	e0c00617 	ldw	r3,24(fp)
    8788:	1885883a 	add	r2,r3,r2
    878c:	10c00017 	ldw	r3,0(r2)
    8790:	18c00044 	addi	r3,r3,1
    8794:	10c00015 	stw	r3,0(r2)

			r = 0;
    8798:	0025883a 	mov	r18,zero

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */

	for (k = 1; k <= Se; k++) {
    879c:	9cc00044 	addi	r19,r19,1
    87a0:	e0bffa17 	ldw	r2,-24(fp)
    87a4:	14ffc90e 	bge	r2,r19,86cc <htest_one_block+0xd8>
			r = 0;
		}
	}

	/* If the last coef(s) were zero, emit an end-of-block code */
	if (r > 0)
    87a8:	0480050e 	bge	zero,r18,87c0 <htest_one_block+0x1cc>
		ac_counts[0]++;
    87ac:	e0800617 	ldw	r2,24(fp)
    87b0:	10800017 	ldw	r2,0(r2)
    87b4:	10c00044 	addi	r3,r2,1
    87b8:	e0800617 	ldw	r2,24(fp)
    87bc:	10c00015 	stw	r3,0(r2)
}
    87c0:	e037883a 	mov	sp,fp
    87c4:	dfc00517 	ldw	ra,20(sp)
    87c8:	df000417 	ldw	fp,16(sp)
    87cc:	dcc00317 	ldw	r19,12(sp)
    87d0:	dc800217 	ldw	r18,8(sp)
    87d4:	dc400117 	ldw	r17,4(sp)
    87d8:	dc000017 	ldw	r16,0(sp)
    87dc:	dec00604 	addi	sp,sp,24
    87e0:	f800283a 	ret

000087e4 <encode_mcu_gather>:
* No data is actually output, so no suspension return is possible.
*/

METHODDEF(boolean)
	encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
    87e4:	defff704 	addi	sp,sp,-36
    87e8:	dfc00815 	stw	ra,32(sp)
    87ec:	df000715 	stw	fp,28(sp)
    87f0:	df000704 	addi	fp,sp,28
    87f4:	e13ffe15 	stw	r4,-8(fp)
    87f8:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    87fc:	e0bffe17 	ldw	r2,-8(fp)
    8800:	10806417 	ldw	r2,400(r2)
    8804:	e0bffc15 	stw	r2,-16(fp)
	int blkn, ci;
	jpeg_component_info * compptr;

	/* Take care of restart intervals if needed */
	if (cinfo->restart_interval) {
    8808:	e0bffe17 	ldw	r2,-8(fp)
    880c:	10803717 	ldw	r2,220(r2)
    8810:	10001c26 	beq	r2,zero,8884 <encode_mcu_gather+0xa0>
		if (entropy->restarts_to_go == 0) {
    8814:	e0bffc17 	ldw	r2,-16(fp)
    8818:	10800917 	ldw	r2,36(r2)
    881c:	1000141e 	bne	r2,zero,8870 <encode_mcu_gather+0x8c>
			/* Re-initialize DC predictions to 0 */
			for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    8820:	e03ffb15 	stw	zero,-20(fp)
    8824:	00000a06 	br	8850 <encode_mcu_gather+0x6c>
				entropy->saved.last_dc_val[ci] = 0;
    8828:	e0fffc17 	ldw	r3,-16(fp)
    882c:	e0bffb17 	ldw	r2,-20(fp)
    8830:	10800144 	addi	r2,r2,5
    8834:	1085883a 	add	r2,r2,r2
    8838:	1085883a 	add	r2,r2,r2
    883c:	1885883a 	add	r2,r3,r2
    8840:	10000015 	stw	zero,0(r2)

	/* Take care of restart intervals if needed */
	if (cinfo->restart_interval) {
		if (entropy->restarts_to_go == 0) {
			/* Re-initialize DC predictions to 0 */
			for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    8844:	e0bffb17 	ldw	r2,-20(fp)
    8848:	10800044 	addi	r2,r2,1
    884c:	e0bffb15 	stw	r2,-20(fp)
    8850:	e0bffe17 	ldw	r2,-8(fp)
    8854:	10804317 	ldw	r2,268(r2)
    8858:	e0fffb17 	ldw	r3,-20(fp)
    885c:	18bff216 	blt	r3,r2,8828 <encode_mcu_gather+0x44>
				entropy->saved.last_dc_val[ci] = 0;
			/* Update restart state */
			entropy->restarts_to_go = cinfo->restart_interval;
    8860:	e0bffe17 	ldw	r2,-8(fp)
    8864:	10c03717 	ldw	r3,220(r2)
    8868:	e0bffc17 	ldw	r2,-16(fp)
    886c:	10c00915 	stw	r3,36(r2)
		}
		entropy->restarts_to_go--;
    8870:	e0bffc17 	ldw	r2,-16(fp)
    8874:	10800917 	ldw	r2,36(r2)
    8878:	10ffffc4 	addi	r3,r2,-1
    887c:	e0bffc17 	ldw	r2,-16(fp)
    8880:	10c00915 	stw	r3,36(r2)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    8884:	e03ffa15 	stw	zero,-24(fp)
    8888:	00004506 	br	89a0 <encode_mcu_gather+0x1bc>
		ci = cinfo->MCU_membership[blkn];
    888c:	e0fffe17 	ldw	r3,-8(fp)
    8890:	e0bffa17 	ldw	r2,-24(fp)
    8894:	108012c4 	addi	r2,r2,75
    8898:	1085883a 	add	r2,r2,r2
    889c:	1085883a 	add	r2,r2,r2
    88a0:	1885883a 	add	r2,r3,r2
    88a4:	10800017 	ldw	r2,0(r2)
    88a8:	e0bffb15 	stw	r2,-20(fp)
		compptr = cinfo->cur_comp_info[ci];
    88ac:	e0fffe17 	ldw	r3,-8(fp)
    88b0:	e0bffb17 	ldw	r2,-20(fp)
    88b4:	10801104 	addi	r2,r2,68
    88b8:	1085883a 	add	r2,r2,r2
    88bc:	1085883a 	add	r2,r2,r2
    88c0:	1885883a 	add	r2,r3,r2
    88c4:	10800017 	ldw	r2,0(r2)
    88c8:	e0bffd15 	stw	r2,-12(fp)
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
    88cc:	e0bffa17 	ldw	r2,-24(fp)
    88d0:	1085883a 	add	r2,r2,r2
    88d4:	1085883a 	add	r2,r2,r2
    88d8:	e0ffff17 	ldw	r3,-4(fp)
    88dc:	1885883a 	add	r2,r3,r2
    88e0:	11400017 	ldw	r5,0(r2)
    88e4:	e0fffc17 	ldw	r3,-16(fp)
    88e8:	e0bffb17 	ldw	r2,-20(fp)
    88ec:	10800144 	addi	r2,r2,5
    88f0:	1085883a 	add	r2,r2,r2
    88f4:	1085883a 	add	r2,r2,r2
    88f8:	1885883a 	add	r2,r3,r2
    88fc:	11800017 	ldw	r6,0(r2)
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
    8900:	e0bffd17 	ldw	r2,-12(fp)
    8904:	10800517 	ldw	r2,20(r2)
    8908:	e0fffc17 	ldw	r3,-16(fp)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
    890c:	108004c4 	addi	r2,r2,19
    8910:	1085883a 	add	r2,r2,r2
    8914:	1085883a 	add	r2,r2,r2
    8918:	1885883a 	add	r2,r3,r2
    891c:	10c00017 	ldw	r3,0(r2)
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
    8920:	e0bffd17 	ldw	r2,-12(fp)
    8924:	10800617 	ldw	r2,24(r2)
    8928:	e13ffc17 	ldw	r4,-16(fp)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
    892c:	108005c4 	addi	r2,r2,23
    8930:	1085883a 	add	r2,r2,r2
    8934:	1085883a 	add	r2,r2,r2
    8938:	2085883a 	add	r2,r4,r2
    893c:	10800017 	ldw	r2,0(r2)
    8940:	d8800015 	stw	r2,0(sp)
    8944:	e13ffe17 	ldw	r4,-8(fp)
    8948:	180f883a 	mov	r7,r3
    894c:	00085f40 	call	85f4 <htest_one_block>
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
		entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
    8950:	e0bffa17 	ldw	r2,-24(fp)
    8954:	1085883a 	add	r2,r2,r2
    8958:	1085883a 	add	r2,r2,r2
    895c:	e0ffff17 	ldw	r3,-4(fp)
    8960:	1885883a 	add	r2,r3,r2
    8964:	10800017 	ldw	r2,0(r2)
    8968:	1080000b 	ldhu	r2,0(r2)
    896c:	10ffffcc 	andi	r3,r2,65535
    8970:	18e0001c 	xori	r3,r3,32768
    8974:	18e00004 	addi	r3,r3,-32768
    8978:	e13ffc17 	ldw	r4,-16(fp)
    897c:	e0bffb17 	ldw	r2,-20(fp)
    8980:	10800144 	addi	r2,r2,5
    8984:	1085883a 	add	r2,r2,r2
    8988:	1085883a 	add	r2,r2,r2
    898c:	2085883a 	add	r2,r4,r2
    8990:	10c00015 	stw	r3,0(r2)
			entropy->restarts_to_go = cinfo->restart_interval;
		}
		entropy->restarts_to_go--;
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    8994:	e0bffa17 	ldw	r2,-24(fp)
    8998:	10800044 	addi	r2,r2,1
    899c:	e0bffa15 	stw	r2,-24(fp)
    89a0:	e0bffe17 	ldw	r2,-8(fp)
    89a4:	10804a17 	ldw	r2,296(r2)
    89a8:	e0fffa17 	ldw	r3,-24(fp)
    89ac:	18bfb716 	blt	r3,r2,888c <encode_mcu_gather+0xa8>
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
		entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
	}

	return TRUE;
    89b0:	00800044 	movi	r2,1
}
    89b4:	e037883a 	mov	sp,fp
    89b8:	dfc00117 	ldw	ra,4(sp)
    89bc:	df000017 	ldw	fp,0(sp)
    89c0:	dec00204 	addi	sp,sp,8
    89c4:	f800283a 	ret

000089c8 <jpeg_gen_optimal_table>:
* So the extra complexity of an optimal algorithm doesn't seem worthwhile.
*/

LOCAL(void)
	jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
{
    89c8:	defdea04 	addi	sp,sp,-2136
    89cc:	dfc21515 	stw	ra,2132(sp)
    89d0:	df021415 	stw	fp,2128(sp)
    89d4:	df021404 	addi	fp,sp,2128
    89d8:	e13ffd15 	stw	r4,-12(fp)
    89dc:	e17ffe15 	stw	r5,-8(fp)
    89e0:	e1bfff15 	stw	r6,-4(fp)
	int p, i, j;
	long v;

	/* This algorithm is explained in section K.2 of the JPEG standard */

	MEMZERO(bits, SIZEOF(bits));
    89e4:	e0bdf204 	addi	r2,fp,-2104
    89e8:	1009883a 	mov	r4,r2
    89ec:	000b883a 	mov	r5,zero
    89f0:	01800844 	movi	r6,33
    89f4:	002ec2c0 	call	2ec2c <memset>
	MEMZERO(codesize, SIZEOF(codesize));
    89f8:	e0bdfb04 	addi	r2,fp,-2068
    89fc:	1009883a 	mov	r4,r2
    8a00:	000b883a 	mov	r5,zero
    8a04:	01810104 	movi	r6,1028
    8a08:	002ec2c0 	call	2ec2c <memset>
	for (i = 0; i < 257; i++)
    8a0c:	e03def15 	stw	zero,-2116(fp)
    8a10:	00000b06 	br	8a40 <jpeg_gen_optimal_table+0x78>
		others[i] = -1;		/* init links to empty */
    8a14:	e0bdef17 	ldw	r2,-2116(fp)
    8a18:	1085883a 	add	r2,r2,r2
    8a1c:	1085883a 	add	r2,r2,r2
    8a20:	e0fdec04 	addi	r3,fp,-2128
    8a24:	1885883a 	add	r2,r3,r2
    8a28:	10811004 	addi	r2,r2,1088
    8a2c:	00ffffc4 	movi	r3,-1
    8a30:	10c00015 	stw	r3,0(r2)

	/* This algorithm is explained in section K.2 of the JPEG standard */

	MEMZERO(bits, SIZEOF(bits));
	MEMZERO(codesize, SIZEOF(codesize));
	for (i = 0; i < 257; i++)
    8a34:	e0bdef17 	ldw	r2,-2116(fp)
    8a38:	10800044 	addi	r2,r2,1
    8a3c:	e0bdef15 	stw	r2,-2116(fp)
    8a40:	e0bdef17 	ldw	r2,-2116(fp)
    8a44:	10804050 	cmplti	r2,r2,257
    8a48:	103ff21e 	bne	r2,zero,8a14 <jpeg_gen_optimal_table+0x4c>
		others[i] = -1;		/* init links to empty */

	freq[256] = 1;		/* make sure 256 has a nonzero count */
    8a4c:	e0bfff17 	ldw	r2,-4(fp)
    8a50:	10810004 	addi	r2,r2,1024
    8a54:	00c00044 	movi	r3,1
    8a58:	10c00015 	stw	r3,0(r2)
	/* Huffman's basic algorithm to assign optimal code lengths to symbols */

	for (;;) {
		/* Find the smallest nonzero frequency, set c1 = its symbol */
		/* In case of ties, take the larger symbol number */
		c1 = -1;
    8a5c:	00bfffc4 	movi	r2,-1
    8a60:	e0bdec15 	stw	r2,-2128(fp)
		v = 1000000000L;
    8a64:	008ee6f4 	movhi	r2,15259
    8a68:	10b28004 	addi	r2,r2,-13824
    8a6c:	e0bdf115 	stw	r2,-2108(fp)
		for (i = 0; i <= 256; i++) {
    8a70:	e03def15 	stw	zero,-2116(fp)
    8a74:	00001b06 	br	8ae4 <jpeg_gen_optimal_table+0x11c>
			if (freq[i] && freq[i] <= v) {
    8a78:	e0bdef17 	ldw	r2,-2116(fp)
    8a7c:	1085883a 	add	r2,r2,r2
    8a80:	1085883a 	add	r2,r2,r2
    8a84:	e0ffff17 	ldw	r3,-4(fp)
    8a88:	1885883a 	add	r2,r3,r2
    8a8c:	10800017 	ldw	r2,0(r2)
    8a90:	10001126 	beq	r2,zero,8ad8 <jpeg_gen_optimal_table+0x110>
    8a94:	e0bdef17 	ldw	r2,-2116(fp)
    8a98:	1085883a 	add	r2,r2,r2
    8a9c:	1085883a 	add	r2,r2,r2
    8aa0:	e0ffff17 	ldw	r3,-4(fp)
    8aa4:	1885883a 	add	r2,r3,r2
    8aa8:	10800017 	ldw	r2,0(r2)
    8aac:	e0fdf117 	ldw	r3,-2108(fp)
    8ab0:	18800916 	blt	r3,r2,8ad8 <jpeg_gen_optimal_table+0x110>
				v = freq[i];
    8ab4:	e0bdef17 	ldw	r2,-2116(fp)
    8ab8:	1085883a 	add	r2,r2,r2
    8abc:	1085883a 	add	r2,r2,r2
    8ac0:	e0ffff17 	ldw	r3,-4(fp)
    8ac4:	1885883a 	add	r2,r3,r2
    8ac8:	10800017 	ldw	r2,0(r2)
    8acc:	e0bdf115 	stw	r2,-2108(fp)
				c1 = i;
    8ad0:	e0bdef17 	ldw	r2,-2116(fp)
    8ad4:	e0bdec15 	stw	r2,-2128(fp)
	for (;;) {
		/* Find the smallest nonzero frequency, set c1 = its symbol */
		/* In case of ties, take the larger symbol number */
		c1 = -1;
		v = 1000000000L;
		for (i = 0; i <= 256; i++) {
    8ad8:	e0bdef17 	ldw	r2,-2116(fp)
    8adc:	10800044 	addi	r2,r2,1
    8ae0:	e0bdef15 	stw	r2,-2116(fp)
    8ae4:	e0bdef17 	ldw	r2,-2116(fp)
    8ae8:	10804050 	cmplti	r2,r2,257
    8aec:	103fe21e 	bne	r2,zero,8a78 <jpeg_gen_optimal_table+0xb0>
			}
		}

		/* Find the next smallest nonzero frequency, set c2 = its symbol */
		/* In case of ties, take the larger symbol number */
		c2 = -1;
    8af0:	00bfffc4 	movi	r2,-1
    8af4:	e0bded15 	stw	r2,-2124(fp)
		v = 1000000000L;
    8af8:	008ee6f4 	movhi	r2,15259
    8afc:	10b28004 	addi	r2,r2,-13824
    8b00:	e0bdf115 	stw	r2,-2108(fp)
		for (i = 0; i <= 256; i++) {
    8b04:	e03def15 	stw	zero,-2116(fp)
    8b08:	00001e06 	br	8b84 <jpeg_gen_optimal_table+0x1bc>
			if (freq[i] && freq[i] <= v && i != c1) {
    8b0c:	e0bdef17 	ldw	r2,-2116(fp)
    8b10:	1085883a 	add	r2,r2,r2
    8b14:	1085883a 	add	r2,r2,r2
    8b18:	e0ffff17 	ldw	r3,-4(fp)
    8b1c:	1885883a 	add	r2,r3,r2
    8b20:	10800017 	ldw	r2,0(r2)
    8b24:	10001426 	beq	r2,zero,8b78 <jpeg_gen_optimal_table+0x1b0>
    8b28:	e0bdef17 	ldw	r2,-2116(fp)
    8b2c:	1085883a 	add	r2,r2,r2
    8b30:	1085883a 	add	r2,r2,r2
    8b34:	e0ffff17 	ldw	r3,-4(fp)
    8b38:	1885883a 	add	r2,r3,r2
    8b3c:	10800017 	ldw	r2,0(r2)
    8b40:	e0fdf117 	ldw	r3,-2108(fp)
    8b44:	18800c16 	blt	r3,r2,8b78 <jpeg_gen_optimal_table+0x1b0>
    8b48:	e0fdef17 	ldw	r3,-2116(fp)
    8b4c:	e0bdec17 	ldw	r2,-2128(fp)
    8b50:	18800926 	beq	r3,r2,8b78 <jpeg_gen_optimal_table+0x1b0>
				v = freq[i];
    8b54:	e0bdef17 	ldw	r2,-2116(fp)
    8b58:	1085883a 	add	r2,r2,r2
    8b5c:	1085883a 	add	r2,r2,r2
    8b60:	e0ffff17 	ldw	r3,-4(fp)
    8b64:	1885883a 	add	r2,r3,r2
    8b68:	10800017 	ldw	r2,0(r2)
    8b6c:	e0bdf115 	stw	r2,-2108(fp)
				c2 = i;
    8b70:	e0bdef17 	ldw	r2,-2116(fp)
    8b74:	e0bded15 	stw	r2,-2124(fp)

		/* Find the next smallest nonzero frequency, set c2 = its symbol */
		/* In case of ties, take the larger symbol number */
		c2 = -1;
		v = 1000000000L;
		for (i = 0; i <= 256; i++) {
    8b78:	e0bdef17 	ldw	r2,-2116(fp)
    8b7c:	10800044 	addi	r2,r2,1
    8b80:	e0bdef15 	stw	r2,-2116(fp)
    8b84:	e0bdef17 	ldw	r2,-2116(fp)
    8b88:	10804050 	cmplti	r2,r2,257
    8b8c:	103fdf1e 	bne	r2,zero,8b0c <jpeg_gen_optimal_table+0x144>
				c2 = i;
			}
		}

		/* Done if we've merged everything into one frequency */
		if (c2 < 0)
    8b90:	e0bded17 	ldw	r2,-2124(fp)
    8b94:	10008016 	blt	r2,zero,8d98 <jpeg_gen_optimal_table+0x3d0>
			break;

		/* Else merge the two counts/trees */
		freq[c1] += freq[c2];
    8b98:	e0bdec17 	ldw	r2,-2128(fp)
    8b9c:	1085883a 	add	r2,r2,r2
    8ba0:	1085883a 	add	r2,r2,r2
    8ba4:	e0ffff17 	ldw	r3,-4(fp)
    8ba8:	1887883a 	add	r3,r3,r2
    8bac:	e0bdec17 	ldw	r2,-2128(fp)
    8bb0:	1085883a 	add	r2,r2,r2
    8bb4:	1085883a 	add	r2,r2,r2
    8bb8:	e13fff17 	ldw	r4,-4(fp)
    8bbc:	2085883a 	add	r2,r4,r2
    8bc0:	11000017 	ldw	r4,0(r2)
    8bc4:	e0bded17 	ldw	r2,-2124(fp)
    8bc8:	1085883a 	add	r2,r2,r2
    8bcc:	1085883a 	add	r2,r2,r2
    8bd0:	e17fff17 	ldw	r5,-4(fp)
    8bd4:	2885883a 	add	r2,r5,r2
    8bd8:	10800017 	ldw	r2,0(r2)
    8bdc:	2085883a 	add	r2,r4,r2
    8be0:	18800015 	stw	r2,0(r3)
		freq[c2] = 0;
    8be4:	e0bded17 	ldw	r2,-2124(fp)
    8be8:	1085883a 	add	r2,r2,r2
    8bec:	1085883a 	add	r2,r2,r2
    8bf0:	e0ffff17 	ldw	r3,-4(fp)
    8bf4:	1885883a 	add	r2,r3,r2
    8bf8:	10000015 	stw	zero,0(r2)

		/* Increment the codesize of everything in c1's tree branch */
		codesize[c1]++;
    8bfc:	e0bdec17 	ldw	r2,-2128(fp)
    8c00:	1085883a 	add	r2,r2,r2
    8c04:	1085883a 	add	r2,r2,r2
    8c08:	e13dec04 	addi	r4,fp,-2128
    8c0c:	2085883a 	add	r2,r4,r2
    8c10:	10800f04 	addi	r2,r2,60
    8c14:	10800017 	ldw	r2,0(r2)
    8c18:	10c00044 	addi	r3,r2,1
    8c1c:	e0bdec17 	ldw	r2,-2128(fp)
    8c20:	1085883a 	add	r2,r2,r2
    8c24:	1085883a 	add	r2,r2,r2
    8c28:	e13dec04 	addi	r4,fp,-2128
    8c2c:	2085883a 	add	r2,r4,r2
    8c30:	10800f04 	addi	r2,r2,60
    8c34:	10c00015 	stw	r3,0(r2)
		while (others[c1] >= 0) {
    8c38:	00001706 	br	8c98 <jpeg_gen_optimal_table+0x2d0>
			c1 = others[c1];
    8c3c:	e0bdec17 	ldw	r2,-2128(fp)
    8c40:	1085883a 	add	r2,r2,r2
    8c44:	1085883a 	add	r2,r2,r2
    8c48:	e0fdec04 	addi	r3,fp,-2128
    8c4c:	1885883a 	add	r2,r3,r2
    8c50:	10811004 	addi	r2,r2,1088
    8c54:	10800017 	ldw	r2,0(r2)
    8c58:	e0bdec15 	stw	r2,-2128(fp)
			codesize[c1]++;
    8c5c:	e0bdec17 	ldw	r2,-2128(fp)
    8c60:	1085883a 	add	r2,r2,r2
    8c64:	1085883a 	add	r2,r2,r2
    8c68:	e13dec04 	addi	r4,fp,-2128
    8c6c:	2085883a 	add	r2,r4,r2
    8c70:	10800f04 	addi	r2,r2,60
    8c74:	10800017 	ldw	r2,0(r2)
    8c78:	10c00044 	addi	r3,r2,1
    8c7c:	e0bdec17 	ldw	r2,-2128(fp)
    8c80:	1085883a 	add	r2,r2,r2
    8c84:	1085883a 	add	r2,r2,r2
    8c88:	e13dec04 	addi	r4,fp,-2128
    8c8c:	2085883a 	add	r2,r4,r2
    8c90:	10800f04 	addi	r2,r2,60
    8c94:	10c00015 	stw	r3,0(r2)
		freq[c1] += freq[c2];
		freq[c2] = 0;

		/* Increment the codesize of everything in c1's tree branch */
		codesize[c1]++;
		while (others[c1] >= 0) {
    8c98:	e0bdec17 	ldw	r2,-2128(fp)
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	1085883a 	add	r2,r2,r2
    8ca4:	e0fdec04 	addi	r3,fp,-2128
    8ca8:	1885883a 	add	r2,r3,r2
    8cac:	10811004 	addi	r2,r2,1088
    8cb0:	10800017 	ldw	r2,0(r2)
    8cb4:	103fe10e 	bge	r2,zero,8c3c <jpeg_gen_optimal_table+0x274>
			c1 = others[c1];
			codesize[c1]++;
		}

		others[c1] = c2;		/* chain c2 onto c1's tree branch */
    8cb8:	e0bdec17 	ldw	r2,-2128(fp)
    8cbc:	1085883a 	add	r2,r2,r2
    8cc0:	1085883a 	add	r2,r2,r2
    8cc4:	e13dec04 	addi	r4,fp,-2128
    8cc8:	2085883a 	add	r2,r4,r2
    8ccc:	10811004 	addi	r2,r2,1088
    8cd0:	e0fded17 	ldw	r3,-2124(fp)
    8cd4:	10c00015 	stw	r3,0(r2)

		/* Increment the codesize of everything in c2's tree branch */
		codesize[c2]++;
    8cd8:	e0bded17 	ldw	r2,-2124(fp)
    8cdc:	1085883a 	add	r2,r2,r2
    8ce0:	1085883a 	add	r2,r2,r2
    8ce4:	e0fdec04 	addi	r3,fp,-2128
    8ce8:	1885883a 	add	r2,r3,r2
    8cec:	10800f04 	addi	r2,r2,60
    8cf0:	10800017 	ldw	r2,0(r2)
    8cf4:	10c00044 	addi	r3,r2,1
    8cf8:	e0bded17 	ldw	r2,-2124(fp)
    8cfc:	1085883a 	add	r2,r2,r2
    8d00:	1085883a 	add	r2,r2,r2
    8d04:	e13dec04 	addi	r4,fp,-2128
    8d08:	2085883a 	add	r2,r4,r2
    8d0c:	10800f04 	addi	r2,r2,60
    8d10:	10c00015 	stw	r3,0(r2)
		while (others[c2] >= 0) {
    8d14:	00001706 	br	8d74 <jpeg_gen_optimal_table+0x3ac>
			c2 = others[c2];
    8d18:	e0bded17 	ldw	r2,-2124(fp)
    8d1c:	1085883a 	add	r2,r2,r2
    8d20:	1085883a 	add	r2,r2,r2
    8d24:	e0fdec04 	addi	r3,fp,-2128
    8d28:	1885883a 	add	r2,r3,r2
    8d2c:	10811004 	addi	r2,r2,1088
    8d30:	10800017 	ldw	r2,0(r2)
    8d34:	e0bded15 	stw	r2,-2124(fp)
			codesize[c2]++;
    8d38:	e0bded17 	ldw	r2,-2124(fp)
    8d3c:	1085883a 	add	r2,r2,r2
    8d40:	1085883a 	add	r2,r2,r2
    8d44:	e13dec04 	addi	r4,fp,-2128
    8d48:	2085883a 	add	r2,r4,r2
    8d4c:	10800f04 	addi	r2,r2,60
    8d50:	10800017 	ldw	r2,0(r2)
    8d54:	10c00044 	addi	r3,r2,1
    8d58:	e0bded17 	ldw	r2,-2124(fp)
    8d5c:	1085883a 	add	r2,r2,r2
    8d60:	1085883a 	add	r2,r2,r2
    8d64:	e13dec04 	addi	r4,fp,-2128
    8d68:	2085883a 	add	r2,r4,r2
    8d6c:	10800f04 	addi	r2,r2,60
    8d70:	10c00015 	stw	r3,0(r2)

		others[c1] = c2;		/* chain c2 onto c1's tree branch */

		/* Increment the codesize of everything in c2's tree branch */
		codesize[c2]++;
		while (others[c2] >= 0) {
    8d74:	e0bded17 	ldw	r2,-2124(fp)
    8d78:	1085883a 	add	r2,r2,r2
    8d7c:	1085883a 	add	r2,r2,r2
    8d80:	e0fdec04 	addi	r3,fp,-2128
    8d84:	1885883a 	add	r2,r3,r2
    8d88:	10811004 	addi	r2,r2,1088
    8d8c:	10800017 	ldw	r2,0(r2)
    8d90:	103fe10e 	bge	r2,zero,8d18 <jpeg_gen_optimal_table+0x350>
			c2 = others[c2];
			codesize[c2]++;
		}
	}
    8d94:	003f3106 	br	8a5c <jpeg_gen_optimal_table+0x94>
			}
		}

		/* Done if we've merged everything into one frequency */
		if (c2 < 0)
			break;
    8d98:	0001883a 	nop
			codesize[c2]++;
		}
	}

	/* Now count the number of symbols of each code length */
	for (i = 0; i <= 256; i++) {
    8d9c:	e03def15 	stw	zero,-2116(fp)
    8da0:	00002b06 	br	8e50 <jpeg_gen_optimal_table+0x488>
		if (codesize[i]) {
    8da4:	e0bdef17 	ldw	r2,-2116(fp)
    8da8:	1085883a 	add	r2,r2,r2
    8dac:	1085883a 	add	r2,r2,r2
    8db0:	e13dec04 	addi	r4,fp,-2128
    8db4:	2085883a 	add	r2,r4,r2
    8db8:	10800f04 	addi	r2,r2,60
    8dbc:	10800017 	ldw	r2,0(r2)
    8dc0:	10002026 	beq	r2,zero,8e44 <jpeg_gen_optimal_table+0x47c>
			/* The JPEG standard seems to think that this can't happen, */
			/* but I'm paranoid... */
			if (codesize[i] > MAX_CLEN)
    8dc4:	e0bdef17 	ldw	r2,-2116(fp)
    8dc8:	1085883a 	add	r2,r2,r2
    8dcc:	1085883a 	add	r2,r2,r2
    8dd0:	e0fdec04 	addi	r3,fp,-2128
    8dd4:	1885883a 	add	r2,r3,r2
    8dd8:	10800f04 	addi	r2,r2,60
    8ddc:	10800017 	ldw	r2,0(r2)
    8de0:	10800850 	cmplti	r2,r2,33
    8de4:	1000091e 	bne	r2,zero,8e0c <jpeg_gen_optimal_table+0x444>
				ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
    8de8:	e0bffd17 	ldw	r2,-12(fp)
    8dec:	10800017 	ldw	r2,0(r2)
    8df0:	00c00a04 	movi	r3,40
    8df4:	10c00515 	stw	r3,20(r2)
    8df8:	e0bffd17 	ldw	r2,-12(fp)
    8dfc:	10800017 	ldw	r2,0(r2)
    8e00:	10800017 	ldw	r2,0(r2)
    8e04:	e13ffd17 	ldw	r4,-12(fp)
    8e08:	103ee83a 	callr	r2

			bits[codesize[i]]++;
    8e0c:	e0bdef17 	ldw	r2,-2116(fp)
    8e10:	1085883a 	add	r2,r2,r2
    8e14:	1085883a 	add	r2,r2,r2
    8e18:	e13dec04 	addi	r4,fp,-2128
    8e1c:	2085883a 	add	r2,r4,r2
    8e20:	10800f04 	addi	r2,r2,60
    8e24:	10800017 	ldw	r2,0(r2)
    8e28:	e0fdf204 	addi	r3,fp,-2104
    8e2c:	1887883a 	add	r3,r3,r2
    8e30:	18c00003 	ldbu	r3,0(r3)
    8e34:	18c00044 	addi	r3,r3,1
    8e38:	e13df204 	addi	r4,fp,-2104
    8e3c:	2085883a 	add	r2,r4,r2
    8e40:	10c00005 	stb	r3,0(r2)
			codesize[c2]++;
		}
	}

	/* Now count the number of symbols of each code length */
	for (i = 0; i <= 256; i++) {
    8e44:	e0bdef17 	ldw	r2,-2116(fp)
    8e48:	10800044 	addi	r2,r2,1
    8e4c:	e0bdef15 	stw	r2,-2116(fp)
    8e50:	e0bdef17 	ldw	r2,-2116(fp)
    8e54:	10804050 	cmplti	r2,r2,257
    8e58:	103fd21e 	bne	r2,zero,8da4 <jpeg_gen_optimal_table+0x3dc>
	* skipping the BITS entry for that prefix length, a code word from the next
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
    8e5c:	00800804 	movi	r2,32
    8e60:	e0bdef15 	stw	r2,-2116(fp)
    8e64:	00004006 	br	8f68 <jpeg_gen_optimal_table+0x5a0>
		while (bits[i] > 0) {
			j = i - 2;		/* find length of new prefix to be used */
    8e68:	e0bdef17 	ldw	r2,-2116(fp)
    8e6c:	10bfff84 	addi	r2,r2,-2
    8e70:	e0bdf015 	stw	r2,-2112(fp)
			while (bits[j] == 0)
    8e74:	00000306 	br	8e84 <jpeg_gen_optimal_table+0x4bc>
				j--;
    8e78:	e0bdf017 	ldw	r2,-2112(fp)
    8e7c:	10bfffc4 	addi	r2,r2,-1
    8e80:	e0bdf015 	stw	r2,-2112(fp)
	*/

	for (i = MAX_CLEN; i > 16; i--) {
		while (bits[i] > 0) {
			j = i - 2;		/* find length of new prefix to be used */
			while (bits[j] == 0)
    8e84:	e0fdf204 	addi	r3,fp,-2104
    8e88:	e0bdf017 	ldw	r2,-2112(fp)
    8e8c:	1885883a 	add	r2,r3,r2
    8e90:	10800003 	ldbu	r2,0(r2)
    8e94:	10803fcc 	andi	r2,r2,255
    8e98:	103ff726 	beq	r2,zero,8e78 <jpeg_gen_optimal_table+0x4b0>
				j--;

			bits[i] -= 2;		/* remove two symbols */
    8e9c:	e0fdf204 	addi	r3,fp,-2104
    8ea0:	e0bdef17 	ldw	r2,-2116(fp)
    8ea4:	1885883a 	add	r2,r3,r2
    8ea8:	10800003 	ldbu	r2,0(r2)
    8eac:	10bfff84 	addi	r2,r2,-2
    8eb0:	1007883a 	mov	r3,r2
    8eb4:	e13df204 	addi	r4,fp,-2104
    8eb8:	e0bdef17 	ldw	r2,-2116(fp)
    8ebc:	2085883a 	add	r2,r4,r2
    8ec0:	10c00005 	stb	r3,0(r2)
			bits[i-1]++;		/* one goes in this length */
    8ec4:	e0bdef17 	ldw	r2,-2116(fp)
    8ec8:	10bfffc4 	addi	r2,r2,-1
    8ecc:	e0fdf204 	addi	r3,fp,-2104
    8ed0:	1887883a 	add	r3,r3,r2
    8ed4:	18c00003 	ldbu	r3,0(r3)
    8ed8:	18c00044 	addi	r3,r3,1
    8edc:	e13df204 	addi	r4,fp,-2104
    8ee0:	2085883a 	add	r2,r4,r2
    8ee4:	10c00005 	stb	r3,0(r2)
			bits[j+1] += 2;		/* two new symbols in this length */
    8ee8:	e0bdf017 	ldw	r2,-2112(fp)
    8eec:	10800044 	addi	r2,r2,1
    8ef0:	e0fdf017 	ldw	r3,-2112(fp)
    8ef4:	18c00044 	addi	r3,r3,1
    8ef8:	e13df204 	addi	r4,fp,-2104
    8efc:	20c7883a 	add	r3,r4,r3
    8f00:	18c00003 	ldbu	r3,0(r3)
    8f04:	18c00084 	addi	r3,r3,2
    8f08:	e13df204 	addi	r4,fp,-2104
    8f0c:	2085883a 	add	r2,r4,r2
    8f10:	10c00005 	stb	r3,0(r2)
			bits[j]--;		/* symbol of this length is now a prefix */
    8f14:	e0fdf204 	addi	r3,fp,-2104
    8f18:	e0bdf017 	ldw	r2,-2112(fp)
    8f1c:	1885883a 	add	r2,r3,r2
    8f20:	10800003 	ldbu	r2,0(r2)
    8f24:	10bfffc4 	addi	r2,r2,-1
    8f28:	1007883a 	mov	r3,r2
    8f2c:	e13df204 	addi	r4,fp,-2104
    8f30:	e0bdf017 	ldw	r2,-2112(fp)
    8f34:	2085883a 	add	r2,r4,r2
    8f38:	10c00005 	stb	r3,0(r2)
    8f3c:	00000106 	br	8f44 <jpeg_gen_optimal_table+0x57c>
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
		while (bits[i] > 0) {
    8f40:	0001883a 	nop
    8f44:	e0fdf204 	addi	r3,fp,-2104
    8f48:	e0bdef17 	ldw	r2,-2116(fp)
    8f4c:	1885883a 	add	r2,r3,r2
    8f50:	10800003 	ldbu	r2,0(r2)
    8f54:	10803fcc 	andi	r2,r2,255
    8f58:	103fc31e 	bne	r2,zero,8e68 <jpeg_gen_optimal_table+0x4a0>
	* skipping the BITS entry for that prefix length, a code word from the next
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
    8f5c:	e0bdef17 	ldw	r2,-2116(fp)
    8f60:	10bfffc4 	addi	r2,r2,-1
    8f64:	e0bdef15 	stw	r2,-2116(fp)
    8f68:	e0bdef17 	ldw	r2,-2116(fp)
    8f6c:	10800448 	cmpgei	r2,r2,17
    8f70:	103ff31e 	bne	r2,zero,8f40 <jpeg_gen_optimal_table+0x578>
			bits[j]--;		/* symbol of this length is now a prefix */
		}
	}

	/* Remove the count for the pseudo-symbol 256 from the largest codelength */
	while (bits[i] == 0)		/* find largest codelength still in use */
    8f74:	00000306 	br	8f84 <jpeg_gen_optimal_table+0x5bc>
		i--;
    8f78:	e0bdef17 	ldw	r2,-2116(fp)
    8f7c:	10bfffc4 	addi	r2,r2,-1
    8f80:	e0bdef15 	stw	r2,-2116(fp)
			bits[j]--;		/* symbol of this length is now a prefix */
		}
	}

	/* Remove the count for the pseudo-symbol 256 from the largest codelength */
	while (bits[i] == 0)		/* find largest codelength still in use */
    8f84:	e0fdf204 	addi	r3,fp,-2104
    8f88:	e0bdef17 	ldw	r2,-2116(fp)
    8f8c:	1885883a 	add	r2,r3,r2
    8f90:	10800003 	ldbu	r2,0(r2)
    8f94:	10803fcc 	andi	r2,r2,255
    8f98:	103ff726 	beq	r2,zero,8f78 <jpeg_gen_optimal_table+0x5b0>
		i--;
	bits[i]--;
    8f9c:	e0fdf204 	addi	r3,fp,-2104
    8fa0:	e0bdef17 	ldw	r2,-2116(fp)
    8fa4:	1885883a 	add	r2,r3,r2
    8fa8:	10800003 	ldbu	r2,0(r2)
    8fac:	10bfffc4 	addi	r2,r2,-1
    8fb0:	1007883a 	mov	r3,r2
    8fb4:	e13df204 	addi	r4,fp,-2104
    8fb8:	e0bdef17 	ldw	r2,-2116(fp)
    8fbc:	2085883a 	add	r2,r4,r2
    8fc0:	10c00005 	stb	r3,0(r2)

	/* Return final symbol counts (only for lengths 0..16) */
	MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
    8fc4:	e0fffe17 	ldw	r3,-8(fp)
    8fc8:	e0bdf204 	addi	r2,fp,-2104
    8fcc:	1809883a 	mov	r4,r3
    8fd0:	100b883a 	mov	r5,r2
    8fd4:	01800444 	movi	r6,17
    8fd8:	002eaec0 	call	2eaec <memcpy>

	/* Return a list of the symbols sorted by code length */
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
    8fdc:	e03dee15 	stw	zero,-2120(fp)
	for (i = 1; i <= MAX_CLEN; i++) {
    8fe0:	00800044 	movi	r2,1
    8fe4:	e0bdef15 	stw	r2,-2116(fp)
    8fe8:	00001e06 	br	9064 <jpeg_gen_optimal_table+0x69c>
		for (j = 0; j <= 255; j++) {
    8fec:	e03df015 	stw	zero,-2112(fp)
    8ff0:	00001606 	br	904c <jpeg_gen_optimal_table+0x684>
			if (codesize[j] == i) {
    8ff4:	e0bdf017 	ldw	r2,-2112(fp)
    8ff8:	1085883a 	add	r2,r2,r2
    8ffc:	1085883a 	add	r2,r2,r2
    9000:	e0fdec04 	addi	r3,fp,-2128
    9004:	1885883a 	add	r2,r3,r2
    9008:	10800f04 	addi	r2,r2,60
    900c:	10c00017 	ldw	r3,0(r2)
    9010:	e0bdef17 	ldw	r2,-2116(fp)
    9014:	18800a1e 	bne	r3,r2,9040 <jpeg_gen_optimal_table+0x678>
				htbl->huffval[p] = (UINT8) j;
    9018:	e0bdf017 	ldw	r2,-2112(fp)
    901c:	1007883a 	mov	r3,r2
    9020:	e13ffe17 	ldw	r4,-8(fp)
    9024:	e0bdee17 	ldw	r2,-2120(fp)
    9028:	2085883a 	add	r2,r4,r2
    902c:	10800444 	addi	r2,r2,17
    9030:	10c00005 	stb	r3,0(r2)
				p++;
    9034:	e0bdee17 	ldw	r2,-2120(fp)
    9038:	10800044 	addi	r2,r2,1
    903c:	e0bdee15 	stw	r2,-2120(fp)
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
	for (i = 1; i <= MAX_CLEN; i++) {
		for (j = 0; j <= 255; j++) {
    9040:	e0bdf017 	ldw	r2,-2112(fp)
    9044:	10800044 	addi	r2,r2,1
    9048:	e0bdf015 	stw	r2,-2112(fp)
    904c:	e0bdf017 	ldw	r2,-2112(fp)
    9050:	10804010 	cmplti	r2,r2,256
    9054:	103fe71e 	bne	r2,zero,8ff4 <jpeg_gen_optimal_table+0x62c>
	/* Return a list of the symbols sorted by code length */
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
	for (i = 1; i <= MAX_CLEN; i++) {
    9058:	e0bdef17 	ldw	r2,-2116(fp)
    905c:	10800044 	addi	r2,r2,1
    9060:	e0bdef15 	stw	r2,-2116(fp)
    9064:	e0bdef17 	ldw	r2,-2116(fp)
    9068:	10800850 	cmplti	r2,r2,33
    906c:	103fdf1e 	bne	r2,zero,8fec <jpeg_gen_optimal_table+0x624>
			}
		}
	}

	/* Set sent_table FALSE so updated table will be written to JPEG file. */
	htbl->sent_table = FALSE;
    9070:	e0bffe17 	ldw	r2,-8(fp)
    9074:	10004445 	stb	zero,273(r2)
}
    9078:	e037883a 	mov	sp,fp
    907c:	dfc00117 	ldw	ra,4(sp)
    9080:	df000017 	ldw	fp,0(sp)
    9084:	dec00204 	addi	sp,sp,8
    9088:	f800283a 	ret

0000908c <finish_pass_gather>:
* Finish up a statistics-gathering pass and create the new Huffman tables.
*/

METHODDEF(void)
	finish_pass_gather (j_compress_ptr cinfo)
{
    908c:	defff604 	addi	sp,sp,-40
    9090:	dfc00915 	stw	ra,36(sp)
    9094:	df000815 	stw	fp,32(sp)
    9098:	df000804 	addi	fp,sp,32
    909c:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    90a0:	e0bfff17 	ldw	r2,-4(fp)
    90a4:	10806417 	ldw	r2,400(r2)
    90a8:	e0bff915 	stw	r2,-28(fp)
	boolean did_ac[NUM_HUFF_TBLS];

	/* It's important not to apply jpeg_gen_optimal_table more than once
	* per table, because it clobbers the input frequency counts!
	*/
	if (cinfo->progressive_mode)
    90ac:	e0bfff17 	ldw	r2,-4(fp)
    90b0:	10803d03 	ldbu	r2,244(r2)
    90b4:	10803fcc 	andi	r2,r2,255
    90b8:	10000226 	beq	r2,zero,90c4 <finish_pass_gather+0x38>
		/* Flush out buffered data (all we care about is counting the EOB symbol) */
		emit_eobrun(entropy);
    90bc:	e13ff917 	ldw	r4,-28(fp)
    90c0:	00070000 	call	7000 <emit_eobrun>

	MEMZERO(did_dc, SIZEOF(did_dc));
    90c4:	e0bffd04 	addi	r2,fp,-12
    90c8:	1009883a 	mov	r4,r2
    90cc:	000b883a 	mov	r5,zero
    90d0:	01800104 	movi	r6,4
    90d4:	002ec2c0 	call	2ec2c <memset>
	MEMZERO(did_ac, SIZEOF(did_ac));
    90d8:	e0bffe04 	addi	r2,fp,-8
    90dc:	1009883a 	mov	r4,r2
    90e0:	000b883a 	mov	r5,zero
    90e4:	01800104 	movi	r6,4
    90e8:	002ec2c0 	call	2ec2c <memset>

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    90ec:	e03ff815 	stw	zero,-32(fp)
    90f0:	00006606 	br	928c <finish_pass_gather+0x200>
		compptr = cinfo->cur_comp_info[ci];
    90f4:	e0ffff17 	ldw	r3,-4(fp)
    90f8:	e0bff817 	ldw	r2,-32(fp)
    90fc:	10801104 	addi	r2,r2,68
    9100:	1085883a 	add	r2,r2,r2
    9104:	1085883a 	add	r2,r2,r2
    9108:	1885883a 	add	r2,r3,r2
    910c:	10800017 	ldw	r2,0(r2)
    9110:	e0bffa15 	stw	r2,-24(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
    9114:	e0bfff17 	ldw	r2,-4(fp)
    9118:	10805517 	ldw	r2,340(r2)
    911c:	10002c1e 	bne	r2,zero,91d0 <finish_pass_gather+0x144>
    9120:	e0bfff17 	ldw	r2,-4(fp)
    9124:	10805717 	ldw	r2,348(r2)
    9128:	1000291e 	bne	r2,zero,91d0 <finish_pass_gather+0x144>
			tbl = compptr->dc_tbl_no;
    912c:	e0bffa17 	ldw	r2,-24(fp)
    9130:	10800517 	ldw	r2,20(r2)
    9134:	e0bffb15 	stw	r2,-20(fp)
			if (! did_dc[tbl]) {
    9138:	e0fffd04 	addi	r3,fp,-12
    913c:	e0bffb17 	ldw	r2,-20(fp)
    9140:	1885883a 	add	r2,r3,r2
    9144:	10800003 	ldbu	r2,0(r2)
    9148:	10803fcc 	andi	r2,r2,255
    914c:	1000201e 	bne	r2,zero,91d0 <finish_pass_gather+0x144>
				htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
    9150:	e0bffb17 	ldw	r2,-20(fp)
    9154:	10800744 	addi	r2,r2,29
    9158:	1085883a 	add	r2,r2,r2
    915c:	1085883a 	add	r2,r2,r2
    9160:	e0ffff17 	ldw	r3,-4(fp)
    9164:	1885883a 	add	r2,r3,r2
    9168:	e0bffc15 	stw	r2,-16(fp)
				if (*htblptr == NULL)
    916c:	e0bffc17 	ldw	r2,-16(fp)
    9170:	10800017 	ldw	r2,0(r2)
    9174:	1000041e 	bne	r2,zero,9188 <finish_pass_gather+0xfc>
					*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
    9178:	e13fff17 	ldw	r4,-4(fp)
    917c:	000cfd40 	call	cfd4 <jpeg_alloc_huff_table>
    9180:	e0fffc17 	ldw	r3,-16(fp)
    9184:	18800015 	stw	r2,0(r3)
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
    9188:	e0bffc17 	ldw	r2,-16(fp)
    918c:	10c00017 	ldw	r3,0(r2)
    9190:	e13ff917 	ldw	r4,-28(fp)
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	108004c4 	addi	r2,r2,19
    919c:	1085883a 	add	r2,r2,r2
    91a0:	1085883a 	add	r2,r2,r2
    91a4:	2085883a 	add	r2,r4,r2
    91a8:	10800017 	ldw	r2,0(r2)
    91ac:	e13fff17 	ldw	r4,-4(fp)
    91b0:	180b883a 	mov	r5,r3
    91b4:	100d883a 	mov	r6,r2
    91b8:	00089c80 	call	89c8 <jpeg_gen_optimal_table>
				did_dc[tbl] = TRUE;
    91bc:	e0fffd04 	addi	r3,fp,-12
    91c0:	e0bffb17 	ldw	r2,-20(fp)
    91c4:	1885883a 	add	r2,r3,r2
    91c8:	00c00044 	movi	r3,1
    91cc:	10c00005 	stb	r3,0(r2)
			}
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
    91d0:	e0bfff17 	ldw	r2,-4(fp)
    91d4:	10805617 	ldw	r2,344(r2)
    91d8:	10002926 	beq	r2,zero,9280 <finish_pass_gather+0x1f4>
			tbl = compptr->ac_tbl_no;
    91dc:	e0bffa17 	ldw	r2,-24(fp)
    91e0:	10800617 	ldw	r2,24(r2)
    91e4:	e0bffb15 	stw	r2,-20(fp)
			if (! did_ac[tbl]) {
    91e8:	e0fffe04 	addi	r3,fp,-8
    91ec:	e0bffb17 	ldw	r2,-20(fp)
    91f0:	1885883a 	add	r2,r3,r2
    91f4:	10800003 	ldbu	r2,0(r2)
    91f8:	10803fcc 	andi	r2,r2,255
    91fc:	1000201e 	bne	r2,zero,9280 <finish_pass_gather+0x1f4>
				htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
    9200:	e0bffb17 	ldw	r2,-20(fp)
    9204:	10800844 	addi	r2,r2,33
    9208:	1085883a 	add	r2,r2,r2
    920c:	1085883a 	add	r2,r2,r2
    9210:	e0ffff17 	ldw	r3,-4(fp)
    9214:	1885883a 	add	r2,r3,r2
    9218:	e0bffc15 	stw	r2,-16(fp)
				if (*htblptr == NULL)
    921c:	e0bffc17 	ldw	r2,-16(fp)
    9220:	10800017 	ldw	r2,0(r2)
    9224:	1000041e 	bne	r2,zero,9238 <finish_pass_gather+0x1ac>
					*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
    9228:	e13fff17 	ldw	r4,-4(fp)
    922c:	000cfd40 	call	cfd4 <jpeg_alloc_huff_table>
    9230:	e0fffc17 	ldw	r3,-16(fp)
    9234:	18800015 	stw	r2,0(r3)
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
    9238:	e0bffc17 	ldw	r2,-16(fp)
    923c:	10c00017 	ldw	r3,0(r2)
    9240:	e13ff917 	ldw	r4,-28(fp)
    9244:	e0bffb17 	ldw	r2,-20(fp)
    9248:	108005c4 	addi	r2,r2,23
    924c:	1085883a 	add	r2,r2,r2
    9250:	1085883a 	add	r2,r2,r2
    9254:	2085883a 	add	r2,r4,r2
    9258:	10800017 	ldw	r2,0(r2)
    925c:	e13fff17 	ldw	r4,-4(fp)
    9260:	180b883a 	mov	r5,r3
    9264:	100d883a 	mov	r6,r2
    9268:	00089c80 	call	89c8 <jpeg_gen_optimal_table>
				did_ac[tbl] = TRUE;
    926c:	e0fffe04 	addi	r3,fp,-8
    9270:	e0bffb17 	ldw	r2,-20(fp)
    9274:	1885883a 	add	r2,r3,r2
    9278:	00c00044 	movi	r3,1
    927c:	10c00005 	stb	r3,0(r2)
		emit_eobrun(entropy);

	MEMZERO(did_dc, SIZEOF(did_dc));
	MEMZERO(did_ac, SIZEOF(did_ac));

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    9280:	e0bff817 	ldw	r2,-32(fp)
    9284:	10800044 	addi	r2,r2,1
    9288:	e0bff815 	stw	r2,-32(fp)
    928c:	e0bfff17 	ldw	r2,-4(fp)
    9290:	10804317 	ldw	r2,268(r2)
    9294:	e0fff817 	ldw	r3,-32(fp)
    9298:	18bf9616 	blt	r3,r2,90f4 <finish_pass_gather+0x68>
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
				did_ac[tbl] = TRUE;
			}
		}
	}
}
    929c:	e037883a 	mov	sp,fp
    92a0:	dfc00117 	ldw	ra,4(sp)
    92a4:	df000017 	ldw	fp,0(sp)
    92a8:	dec00204 	addi	sp,sp,8
    92ac:	f800283a 	ret

000092b0 <start_pass_huff>:
* just count the Huffman symbols used and generate Huffman code tables.
*/

METHODDEF(void)
	start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
    92b0:	defff804 	addi	sp,sp,-32
    92b4:	dfc00715 	stw	ra,28(sp)
    92b8:	df000615 	stw	fp,24(sp)
    92bc:	df000604 	addi	fp,sp,24
    92c0:	e13ffe15 	stw	r4,-8(fp)
    92c4:	2805883a 	mov	r2,r5
    92c8:	e0bfff05 	stb	r2,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
    92cc:	e0bffe17 	ldw	r2,-8(fp)
    92d0:	10806417 	ldw	r2,400(r2)
    92d4:	e0bffb15 	stw	r2,-20(fp)
	int ci, tbl;
	jpeg_component_info * compptr;

	if (gather_statistics)
    92d8:	e0bfff03 	ldbu	r2,-4(fp)
    92dc:	10000526 	beq	r2,zero,92f4 <start_pass_huff+0x44>
		entropy->pub.finish_pass = finish_pass_gather;
    92e0:	e0bffb17 	ldw	r2,-20(fp)
    92e4:	00c00074 	movhi	r3,1
    92e8:	18e42304 	addi	r3,r3,-28532
    92ec:	10c00215 	stw	r3,8(r2)
    92f0:	00000406 	br	9304 <start_pass_huff+0x54>
	else
		entropy->pub.finish_pass = finish_pass_huff;
    92f4:	e0bffb17 	ldw	r2,-20(fp)
    92f8:	00c00074 	movhi	r3,1
    92fc:	18e11904 	addi	r3,r3,-31644
    9300:	10c00215 	stw	r3,8(r2)

	if (cinfo->progressive_mode) {
    9304:	e0bffe17 	ldw	r2,-8(fp)
    9308:	10803d03 	ldbu	r2,244(r2)
    930c:	10803fcc 	andi	r2,r2,255
    9310:	10003826 	beq	r2,zero,93f4 <start_pass_huff+0x144>
		entropy->cinfo = cinfo;
    9314:	e0bffb17 	ldw	r2,-20(fp)
    9318:	e0fffe17 	ldw	r3,-8(fp)
    931c:	10c01e15 	stw	r3,120(r2)
		entropy->gather_statistics = gather_statistics;
    9320:	e0bffb17 	ldw	r2,-20(fp)
    9324:	e0ffff03 	ldbu	r3,-4(fp)
    9328:	10c01b05 	stb	r3,108(r2)

		/* We assume jcmaster.c already validated the scan parameters. */

		/* Select execution routine */
		if (cinfo->Ah == 0) {
    932c:	e0bffe17 	ldw	r2,-8(fp)
    9330:	10805717 	ldw	r2,348(r2)
    9334:	10000d1e 	bne	r2,zero,936c <start_pass_huff+0xbc>
			if (cinfo->Ss == 0)
    9338:	e0bffe17 	ldw	r2,-8(fp)
    933c:	10805517 	ldw	r2,340(r2)
    9340:	1000051e 	bne	r2,zero,9358 <start_pass_huff+0xa8>
				entropy->pub.encode_mcu = encode_mcu_DC_first;
    9344:	e0bffb17 	ldw	r2,-20(fp)
    9348:	00c00034 	movhi	r3,0
    934c:	18dce004 	addi	r3,r3,29568
    9350:	10c00115 	stw	r3,4(r2)
    9354:	00001d06 	br	93cc <start_pass_huff+0x11c>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_first;
    9358:	e0bffb17 	ldw	r2,-20(fp)
    935c:	00c00034 	movhi	r3,0
    9360:	18dd8604 	addi	r3,r3,30232
    9364:	10c00115 	stw	r3,4(r2)
    9368:	00001806 	br	93cc <start_pass_huff+0x11c>
		} else {
			if (cinfo->Ss == 0)
    936c:	e0bffe17 	ldw	r2,-8(fp)
    9370:	10805517 	ldw	r2,340(r2)
    9374:	1000051e 	bne	r2,zero,938c <start_pass_huff+0xdc>
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
    9378:	e0bffb17 	ldw	r2,-20(fp)
    937c:	00c00034 	movhi	r3,0
    9380:	18de3f04 	addi	r3,r3,30972
    9384:	10c00115 	stw	r3,4(r2)
    9388:	00001006 	br	93cc <start_pass_huff+0x11c>
			else {
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
    938c:	e0bffb17 	ldw	r2,-20(fp)
    9390:	00c00034 	movhi	r3,0
    9394:	18dea604 	addi	r3,r3,31384
    9398:	10c00115 	stw	r3,4(r2)
				/* AC refinement needs a correction bit buffer */
				if (entropy->bit_buffer == NULL)
    939c:	e0bffb17 	ldw	r2,-20(fp)
    93a0:	10802217 	ldw	r2,136(r2)
    93a4:	1000091e 	bne	r2,zero,93cc <start_pass_huff+0x11c>
					entropy->bit_buffer = (char *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    93a8:	e0bffe17 	ldw	r2,-8(fp)
    93ac:	10800117 	ldw	r2,4(r2)
    93b0:	10800017 	ldw	r2,0(r2)
    93b4:	e13ffe17 	ldw	r4,-8(fp)
    93b8:	01400044 	movi	r5,1
    93bc:	0180fa04 	movi	r6,1000
    93c0:	103ee83a 	callr	r2
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
			else {
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
				/* AC refinement needs a correction bit buffer */
				if (entropy->bit_buffer == NULL)
					entropy->bit_buffer = (char *)
    93c4:	e0fffb17 	ldw	r3,-20(fp)
    93c8:	18802215 	stw	r2,136(r3)
					MAX_CORR_BITS * SIZEOF(char));
			}
		}

		/* Initialize AC stuff */
		entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
    93cc:	e0bffe17 	ldw	r2,-8(fp)
    93d0:	10804417 	ldw	r2,272(r2)
    93d4:	10c00617 	ldw	r3,24(r2)
    93d8:	e0bffb17 	ldw	r2,-20(fp)
    93dc:	10c01f15 	stw	r3,124(r2)
		entropy->EOBRUN = 0;
    93e0:	e0bffb17 	ldw	r2,-20(fp)
    93e4:	10002015 	stw	zero,128(r2)
		entropy->BE = 0;
    93e8:	e0bffb17 	ldw	r2,-20(fp)
    93ec:	10002115 	stw	zero,132(r2)
    93f0:	00000b06 	br	9420 <start_pass_huff+0x170>
	} else {
		if (gather_statistics)
    93f4:	e0bfff03 	ldbu	r2,-4(fp)
    93f8:	10000526 	beq	r2,zero,9410 <start_pass_huff+0x160>
			entropy->pub.encode_mcu = encode_mcu_gather;
    93fc:	e0bffb17 	ldw	r2,-20(fp)
    9400:	00c00074 	movhi	r3,1
    9404:	18e1f904 	addi	r3,r3,-30748
    9408:	10c00115 	stw	r3,4(r2)
    940c:	00000406 	br	9420 <start_pass_huff+0x170>
		else
			entropy->pub.encode_mcu = encode_mcu_huff;
    9410:	e0bffb17 	ldw	r2,-20(fp)
    9414:	00c00074 	movhi	r3,1
    9418:	18e06304 	addi	r3,r3,-32372
    941c:	10c00115 	stw	r3,4(r2)
	}

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    9420:	e03ffa15 	stw	zero,-24(fp)
    9424:	0000a506 	br	96bc <start_pass_huff+0x40c>
		compptr = cinfo->cur_comp_info[ci];
    9428:	e0fffe17 	ldw	r3,-8(fp)
    942c:	e0bffa17 	ldw	r2,-24(fp)
    9430:	10801104 	addi	r2,r2,68
    9434:	1085883a 	add	r2,r2,r2
    9438:	1085883a 	add	r2,r2,r2
    943c:	1885883a 	add	r2,r3,r2
    9440:	10800017 	ldw	r2,0(r2)
    9444:	e0bffc15 	stw	r2,-16(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
    9448:	e0bffe17 	ldw	r2,-8(fp)
    944c:	10805517 	ldw	r2,340(r2)
    9450:	10004f1e 	bne	r2,zero,9590 <start_pass_huff+0x2e0>
    9454:	e0bffe17 	ldw	r2,-8(fp)
    9458:	10805717 	ldw	r2,348(r2)
    945c:	10004c1e 	bne	r2,zero,9590 <start_pass_huff+0x2e0>
			tbl = compptr->dc_tbl_no;
    9460:	e0bffc17 	ldw	r2,-16(fp)
    9464:	10800517 	ldw	r2,20(r2)
    9468:	e0bffd15 	stw	r2,-12(fp)
			if (gather_statistics) {
    946c:	e0bfff03 	ldbu	r2,-4(fp)
    9470:	10003526 	beq	r2,zero,9548 <start_pass_huff+0x298>
				/* Check for invalid table index */
				/* (make_c_derived_tbl does this in the other path) */
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	10000316 	blt	r2,zero,9488 <start_pass_huff+0x1d8>
    947c:	e0bffd17 	ldw	r2,-12(fp)
    9480:	10800110 	cmplti	r2,r2,4
    9484:	10000d1e 	bne	r2,zero,94bc <start_pass_huff+0x20c>
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
    9488:	e0bffe17 	ldw	r2,-8(fp)
    948c:	10800017 	ldw	r2,0(r2)
    9490:	00c00d04 	movi	r3,52
    9494:	10c00515 	stw	r3,20(r2)
    9498:	e0bffe17 	ldw	r2,-8(fp)
    949c:	10800017 	ldw	r2,0(r2)
    94a0:	e0fffd17 	ldw	r3,-12(fp)
    94a4:	10c00615 	stw	r3,24(r2)
    94a8:	e0bffe17 	ldw	r2,-8(fp)
    94ac:	10800017 	ldw	r2,0(r2)
    94b0:	10800017 	ldw	r2,0(r2)
    94b4:	e13ffe17 	ldw	r4,-8(fp)
    94b8:	103ee83a 	callr	r2
				/* Allocate and zero the statistics tables */
				/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
				if (entropy->dc_count_ptrs[tbl] == NULL)
    94bc:	e0fffb17 	ldw	r3,-20(fp)
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	108004c4 	addi	r2,r2,19
    94c8:	1085883a 	add	r2,r2,r2
    94cc:	1085883a 	add	r2,r2,r2
    94d0:	1885883a 	add	r2,r3,r2
    94d4:	10800017 	ldw	r2,0(r2)
    94d8:	10000f1e 	bne	r2,zero,9518 <start_pass_huff+0x268>
					entropy->dc_count_ptrs[tbl] = (long *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    94dc:	e0bffe17 	ldw	r2,-8(fp)
    94e0:	10800117 	ldw	r2,4(r2)
    94e4:	10800017 	ldw	r2,0(r2)
    94e8:	e13ffe17 	ldw	r4,-8(fp)
    94ec:	01400044 	movi	r5,1
    94f0:	01810104 	movi	r6,1028
    94f4:	103ee83a 	callr	r2
    94f8:	1007883a 	mov	r3,r2
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
				/* Allocate and zero the statistics tables */
				/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
				if (entropy->dc_count_ptrs[tbl] == NULL)
					entropy->dc_count_ptrs[tbl] = (long *)
    94fc:	e13ffb17 	ldw	r4,-20(fp)
    9500:	e0bffd17 	ldw	r2,-12(fp)
    9504:	108004c4 	addi	r2,r2,19
    9508:	1085883a 	add	r2,r2,r2
    950c:	1085883a 	add	r2,r2,r2
    9510:	2085883a 	add	r2,r4,r2
    9514:	10c00015 	stw	r3,0(r2)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					257 * SIZEOF(long));
				MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
    9518:	e0fffb17 	ldw	r3,-20(fp)
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	108004c4 	addi	r2,r2,19
    9524:	1085883a 	add	r2,r2,r2
    9528:	1085883a 	add	r2,r2,r2
    952c:	1885883a 	add	r2,r3,r2
    9530:	10800017 	ldw	r2,0(r2)
    9534:	1009883a 	mov	r4,r2
    9538:	000b883a 	mov	r5,zero
    953c:	01810104 	movi	r6,1028
    9540:	002ec2c0 	call	2ec2c <memset>
    9544:	00000b06 	br	9574 <start_pass_huff+0x2c4>
			} else {
				/* Compute derived values for Huffman tables */
				/* We may do this more than once for a table, but it's not expensive */
				jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
    9548:	e0bffd17 	ldw	r2,-12(fp)
    954c:	108002c4 	addi	r2,r2,11
    9550:	1085883a 	add	r2,r2,r2
    9554:	1085883a 	add	r2,r2,r2
    9558:	e0fffb17 	ldw	r3,-20(fp)
    955c:	1885883a 	add	r2,r3,r2
    9560:	e13ffe17 	ldw	r4,-8(fp)
    9564:	01400044 	movi	r5,1
    9568:	e1bffd17 	ldw	r6,-12(fp)
    956c:	100f883a 	mov	r7,r2
    9570:	00064700 	call	6470 <jpeg_make_c_derived_tbl>
					& entropy->dc_derived_tbls[tbl]);
			}
			/* Initialize DC predictions to 0 */
			entropy->saved.last_dc_val[ci] = 0;
    9574:	e0fffb17 	ldw	r3,-20(fp)
    9578:	e0bffa17 	ldw	r2,-24(fp)
    957c:	10800144 	addi	r2,r2,5
    9580:	1085883a 	add	r2,r2,r2
    9584:	1085883a 	add	r2,r2,r2
    9588:	1885883a 	add	r2,r3,r2
    958c:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
    9590:	e0bffe17 	ldw	r2,-8(fp)
    9594:	10805617 	ldw	r2,344(r2)
    9598:	10004526 	beq	r2,zero,96b0 <start_pass_huff+0x400>
			tbl = compptr->ac_tbl_no;
    959c:	e0bffc17 	ldw	r2,-16(fp)
    95a0:	10800617 	ldw	r2,24(r2)
    95a4:	e0bffd15 	stw	r2,-12(fp)
			if (gather_statistics) {
    95a8:	e0bfff03 	ldbu	r2,-4(fp)
    95ac:	10003526 	beq	r2,zero,9684 <start_pass_huff+0x3d4>
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
    95b0:	e0bffd17 	ldw	r2,-12(fp)
    95b4:	10000316 	blt	r2,zero,95c4 <start_pass_huff+0x314>
    95b8:	e0bffd17 	ldw	r2,-12(fp)
    95bc:	10800110 	cmplti	r2,r2,4
    95c0:	10000d1e 	bne	r2,zero,95f8 <start_pass_huff+0x348>
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
    95c4:	e0bffe17 	ldw	r2,-8(fp)
    95c8:	10800017 	ldw	r2,0(r2)
    95cc:	00c00d04 	movi	r3,52
    95d0:	10c00515 	stw	r3,20(r2)
    95d4:	e0bffe17 	ldw	r2,-8(fp)
    95d8:	10800017 	ldw	r2,0(r2)
    95dc:	e0fffd17 	ldw	r3,-12(fp)
    95e0:	10c00615 	stw	r3,24(r2)
    95e4:	e0bffe17 	ldw	r2,-8(fp)
    95e8:	10800017 	ldw	r2,0(r2)
    95ec:	10800017 	ldw	r2,0(r2)
    95f0:	e13ffe17 	ldw	r4,-8(fp)
    95f4:	103ee83a 	callr	r2
				if (entropy->ac_count_ptrs[tbl] == NULL)
    95f8:	e0fffb17 	ldw	r3,-20(fp)
    95fc:	e0bffd17 	ldw	r2,-12(fp)
    9600:	108005c4 	addi	r2,r2,23
    9604:	1085883a 	add	r2,r2,r2
    9608:	1085883a 	add	r2,r2,r2
    960c:	1885883a 	add	r2,r3,r2
    9610:	10800017 	ldw	r2,0(r2)
    9614:	10000f1e 	bne	r2,zero,9654 <start_pass_huff+0x3a4>
					entropy->ac_count_ptrs[tbl] = (long *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    9618:	e0bffe17 	ldw	r2,-8(fp)
    961c:	10800117 	ldw	r2,4(r2)
    9620:	10800017 	ldw	r2,0(r2)
    9624:	e13ffe17 	ldw	r4,-8(fp)
    9628:	01400044 	movi	r5,1
    962c:	01810104 	movi	r6,1028
    9630:	103ee83a 	callr	r2
    9634:	1007883a 	mov	r3,r2
			tbl = compptr->ac_tbl_no;
			if (gather_statistics) {
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
				if (entropy->ac_count_ptrs[tbl] == NULL)
					entropy->ac_count_ptrs[tbl] = (long *)
    9638:	e13ffb17 	ldw	r4,-20(fp)
    963c:	e0bffd17 	ldw	r2,-12(fp)
    9640:	108005c4 	addi	r2,r2,23
    9644:	1085883a 	add	r2,r2,r2
    9648:	1085883a 	add	r2,r2,r2
    964c:	2085883a 	add	r2,r4,r2
    9650:	10c00015 	stw	r3,0(r2)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					257 * SIZEOF(long));
				MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
    9654:	e0fffb17 	ldw	r3,-20(fp)
    9658:	e0bffd17 	ldw	r2,-12(fp)
    965c:	108005c4 	addi	r2,r2,23
    9660:	1085883a 	add	r2,r2,r2
    9664:	1085883a 	add	r2,r2,r2
    9668:	1885883a 	add	r2,r3,r2
    966c:	10800017 	ldw	r2,0(r2)
    9670:	1009883a 	mov	r4,r2
    9674:	000b883a 	mov	r5,zero
    9678:	01810104 	movi	r6,1028
    967c:	002ec2c0 	call	2ec2c <memset>
    9680:	00000b06 	br	96b0 <start_pass_huff+0x400>
			} else {
				jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
    9684:	e0bffd17 	ldw	r2,-12(fp)
    9688:	108003c4 	addi	r2,r2,15
    968c:	1085883a 	add	r2,r2,r2
    9690:	1085883a 	add	r2,r2,r2
    9694:	e0fffb17 	ldw	r3,-20(fp)
    9698:	1885883a 	add	r2,r3,r2
    969c:	e13ffe17 	ldw	r4,-8(fp)
    96a0:	000b883a 	mov	r5,zero
    96a4:	e1bffd17 	ldw	r6,-12(fp)
    96a8:	100f883a 	mov	r7,r2
    96ac:	00064700 	call	6470 <jpeg_make_c_derived_tbl>
			entropy->pub.encode_mcu = encode_mcu_gather;
		else
			entropy->pub.encode_mcu = encode_mcu_huff;
	}

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    96b0:	e0bffa17 	ldw	r2,-24(fp)
    96b4:	10800044 	addi	r2,r2,1
    96b8:	e0bffa15 	stw	r2,-24(fp)
    96bc:	e0bffe17 	ldw	r2,-8(fp)
    96c0:	10804317 	ldw	r2,268(r2)
    96c4:	e0fffa17 	ldw	r3,-24(fp)
    96c8:	18bf5716 	blt	r3,r2,9428 <start_pass_huff+0x178>
			}
		}
	}

	/* Initialize bit buffer to empty */
	entropy->saved.put_buffer = 0;
    96cc:	e0bffb17 	ldw	r2,-20(fp)
    96d0:	10000315 	stw	zero,12(r2)
	entropy->saved.put_bits = 0;
    96d4:	e0bffb17 	ldw	r2,-20(fp)
    96d8:	10000415 	stw	zero,16(r2)

	/* Initialize restart stuff */
	entropy->restarts_to_go = cinfo->restart_interval;
    96dc:	e0bffe17 	ldw	r2,-8(fp)
    96e0:	10c03717 	ldw	r3,220(r2)
    96e4:	e0bffb17 	ldw	r2,-20(fp)
    96e8:	10c00915 	stw	r3,36(r2)
	entropy->next_restart_num = 0;
    96ec:	e0bffb17 	ldw	r2,-20(fp)
    96f0:	10000a15 	stw	zero,40(r2)
}
    96f4:	e037883a 	mov	sp,fp
    96f8:	dfc00117 	ldw	ra,4(sp)
    96fc:	df000017 	ldw	fp,0(sp)
    9700:	dec00204 	addi	sp,sp,8
    9704:	f800283a 	ret

00009708 <jinit_huff_encoder>:
* Module initialization routine for Huffman entropy encoding.
*/

GLOBAL(void)
	jinit_huff_encoder (j_compress_ptr cinfo)
{
    9708:	defffb04 	addi	sp,sp,-20
    970c:	dfc00415 	stw	ra,16(sp)
    9710:	df000315 	stw	fp,12(sp)
    9714:	df000304 	addi	fp,sp,12
    9718:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy;
	int i;

	entropy = (huff_entropy_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    971c:	e0bfff17 	ldw	r2,-4(fp)
    9720:	10800117 	ldw	r2,4(r2)
    9724:	10800017 	ldw	r2,0(r2)
	jinit_huff_encoder (j_compress_ptr cinfo)
{
	huff_entropy_ptr entropy;
	int i;

	entropy = (huff_entropy_ptr)
    9728:	e13fff17 	ldw	r4,-4(fp)
    972c:	01400044 	movi	r5,1
    9730:	01802304 	movi	r6,140
    9734:	103ee83a 	callr	r2
    9738:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(huff_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
    973c:	e0bfff17 	ldw	r2,-4(fp)
    9740:	e0fffe17 	ldw	r3,-8(fp)
    9744:	10c06415 	stw	r3,400(r2)
	entropy->pub.start_pass = start_pass_huff;
    9748:	e0bffe17 	ldw	r2,-8(fp)
    974c:	00c00074 	movhi	r3,1
    9750:	18e4ac04 	addi	r3,r3,-27984
    9754:	10c00015 	stw	r3,0(r2)

	/* Mark tables unallocated */
	for (i = 0; i < NUM_HUFF_TBLS; i++) {
    9758:	e03ffd15 	stw	zero,-12(fp)
    975c:	00002d06 	br	9814 <jinit_huff_encoder+0x10c>
		entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
    9760:	e0fffe17 	ldw	r3,-8(fp)
    9764:	e0bffd17 	ldw	r2,-12(fp)
    9768:	108003c4 	addi	r2,r2,15
    976c:	1085883a 	add	r2,r2,r2
    9770:	1085883a 	add	r2,r2,r2
    9774:	1885883a 	add	r2,r3,r2
    9778:	10000015 	stw	zero,0(r2)
    977c:	e0fffe17 	ldw	r3,-8(fp)
    9780:	e0bffd17 	ldw	r2,-12(fp)
    9784:	108003c4 	addi	r2,r2,15
    9788:	1085883a 	add	r2,r2,r2
    978c:	1085883a 	add	r2,r2,r2
    9790:	1885883a 	add	r2,r3,r2
    9794:	10c00017 	ldw	r3,0(r2)
    9798:	e13ffe17 	ldw	r4,-8(fp)
    979c:	e0bffd17 	ldw	r2,-12(fp)
    97a0:	108002c4 	addi	r2,r2,11
    97a4:	1085883a 	add	r2,r2,r2
    97a8:	1085883a 	add	r2,r2,r2
    97ac:	2085883a 	add	r2,r4,r2
    97b0:	10c00015 	stw	r3,0(r2)
		entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
    97b4:	e0fffe17 	ldw	r3,-8(fp)
    97b8:	e0bffd17 	ldw	r2,-12(fp)
    97bc:	108005c4 	addi	r2,r2,23
    97c0:	1085883a 	add	r2,r2,r2
    97c4:	1085883a 	add	r2,r2,r2
    97c8:	1885883a 	add	r2,r3,r2
    97cc:	10000015 	stw	zero,0(r2)
    97d0:	e0fffe17 	ldw	r3,-8(fp)
    97d4:	e0bffd17 	ldw	r2,-12(fp)
    97d8:	108005c4 	addi	r2,r2,23
    97dc:	1085883a 	add	r2,r2,r2
    97e0:	1085883a 	add	r2,r2,r2
    97e4:	1885883a 	add	r2,r3,r2
    97e8:	10c00017 	ldw	r3,0(r2)
    97ec:	e13ffe17 	ldw	r4,-8(fp)
    97f0:	e0bffd17 	ldw	r2,-12(fp)
    97f4:	108004c4 	addi	r2,r2,19
    97f8:	1085883a 	add	r2,r2,r2
    97fc:	1085883a 	add	r2,r2,r2
    9800:	2085883a 	add	r2,r4,r2
    9804:	10c00015 	stw	r3,0(r2)
		SIZEOF(huff_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
	entropy->pub.start_pass = start_pass_huff;

	/* Mark tables unallocated */
	for (i = 0; i < NUM_HUFF_TBLS; i++) {
    9808:	e0bffd17 	ldw	r2,-12(fp)
    980c:	10800044 	addi	r2,r2,1
    9810:	e0bffd15 	stw	r2,-12(fp)
    9814:	e0bffd17 	ldw	r2,-12(fp)
    9818:	10800110 	cmplti	r2,r2,4
    981c:	103fd01e 	bne	r2,zero,9760 <jinit_huff_encoder+0x58>
		entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
		entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
	}

	if (cinfo->progressive_mode)
    9820:	e0bfff17 	ldw	r2,-4(fp)
    9824:	10803d03 	ldbu	r2,244(r2)
    9828:	10803fcc 	andi	r2,r2,255
    982c:	10000226 	beq	r2,zero,9838 <jinit_huff_encoder+0x130>
		entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
    9830:	e0bffe17 	ldw	r2,-8(fp)
    9834:	10002215 	stw	zero,136(r2)
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <jinit_compress_master>:
* which modules will be used and give them appropriate initialization calls.
*/

GLOBAL(void)
	jinit_compress_master (j_compress_ptr cinfo)
{
    984c:	defffd04 	addi	sp,sp,-12
    9850:	dfc00215 	stw	ra,8(sp)
    9854:	df000115 	stw	fp,4(sp)
    9858:	df000104 	addi	fp,sp,4
    985c:	e13fff15 	stw	r4,-4(fp)
	/* Initialize master control (includes parameter checking/processing) */
	jinit_c_master_control(cinfo, FALSE /* full compression */);
    9860:	e13fff17 	ldw	r4,-4(fp)
    9864:	000b883a 	mov	r5,zero
    9868:	000ccd00 	call	ccd0 <jinit_c_master_control>

	/* Preprocessing */
	if (! cinfo->raw_data_in) {
    986c:	e0bfff17 	ldw	r2,-4(fp)
    9870:	10803303 	ldbu	r2,204(r2)
    9874:	10803fcc 	andi	r2,r2,255
    9878:	1000071e 	bne	r2,zero,9898 <jinit_compress_master+0x4c>
		jinit_color_converter(cinfo);
    987c:	e13fff17 	ldw	r4,-4(fp)
    9880:	00053f40 	call	53f4 <jinit_color_converter>
		jinit_downsampler(cinfo);
    9884:	e13fff17 	ldw	r4,-4(fp)
    9888:	00102340 	call	10234 <jinit_downsampler>
		jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
    988c:	e13fff17 	ldw	r4,-4(fp)
    9890:	000b883a 	mov	r5,zero
    9894:	000efac0 	call	efac <jinit_c_prep_controller>
	}
	/* Forward DCT */
	jinit_forward_dct(cinfo);
    9898:	e13fff17 	ldw	r4,-4(fp)
    989c:	00063b40 	call	63b4 <jinit_forward_dct>
	/* Entropy encoding: either Huffman or arithmetic coding. */
	if (cinfo->arith_code)
    98a0:	e0bfff17 	ldw	r2,-4(fp)
    98a4:	10803343 	ldbu	r2,205(r2)
    98a8:	10803fcc 	andi	r2,r2,255
    98ac:	10000326 	beq	r2,zero,98bc <jinit_compress_master+0x70>
		jinit_arith_encoder(cinfo);
    98b0:	e13fff17 	ldw	r4,-4(fp)
    98b4:	00039900 	call	3990 <jinit_arith_encoder>
    98b8:	00000206 	br	98c4 <jinit_compress_master+0x78>
	else {
		jinit_huff_encoder(cinfo);
    98bc:	e13fff17 	ldw	r4,-4(fp)
    98c0:	00097080 	call	9708 <jinit_huff_encoder>
	}

	/* Need a full-image coefficient buffer in any multi-pass mode. */
	jinit_c_coef_controller(cinfo,
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
    98c4:	e0bfff17 	ldw	r2,-4(fp)
    98c8:	10803117 	ldw	r2,196(r2)
    98cc:	10800088 	cmpgei	r2,r2,2
    98d0:	1000041e 	bne	r2,zero,98e4 <jinit_compress_master+0x98>
    98d4:	e0bfff17 	ldw	r2,-4(fp)
    98d8:	10803383 	ldbu	r2,206(r2)
    98dc:	10803fcc 	andi	r2,r2,255
    98e0:	10000226 	beq	r2,zero,98ec <jinit_compress_master+0xa0>
    98e4:	00800044 	movi	r2,1
    98e8:	00000106 	br	98f0 <jinit_compress_master+0xa4>
    98ec:	0005883a 	mov	r2,zero
	else {
		jinit_huff_encoder(cinfo);
	}

	/* Need a full-image coefficient buffer in any multi-pass mode. */
	jinit_c_coef_controller(cinfo,
    98f0:	10803fcc 	andi	r2,r2,255
    98f4:	e13fff17 	ldw	r4,-4(fp)
    98f8:	100b883a 	mov	r5,r2
    98fc:	00047b80 	call	47b8 <jinit_c_coef_controller>
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
	jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
    9900:	e13fff17 	ldw	r4,-4(fp)
    9904:	000b883a 	mov	r5,zero
    9908:	0009b800 	call	9b80 <jinit_c_main_controller>

	jinit_marker_writer(cinfo);
    990c:	e13fff17 	ldw	r4,-4(fp)
    9910:	000b0480 	call	b048 <jinit_marker_writer>

	/* We can now tell the memory manager to allocate virtual arrays. */
	(*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
    9914:	e0bfff17 	ldw	r2,-4(fp)
    9918:	10800117 	ldw	r2,4(r2)
    991c:	10800617 	ldw	r2,24(r2)
    9920:	e13fff17 	ldw	r4,-4(fp)
    9924:	103ee83a 	callr	r2

	/* Write the datastream header (SOI) immediately.
	* Frame and scan headers are postponed till later.
	* This lets application insert special markers after the SOI.
	*/
	(*cinfo->marker->write_file_header) (cinfo);
    9928:	e0bfff17 	ldw	r2,-4(fp)
    992c:	10806017 	ldw	r2,384(r2)
    9930:	10800017 	ldw	r2,0(r2)
    9934:	e13fff17 	ldw	r4,-4(fp)
    9938:	103ee83a 	callr	r2
}
    993c:	e037883a 	mov	sp,fp
    9940:	dfc00117 	ldw	ra,4(sp)
    9944:	df000017 	ldw	fp,0(sp)
    9948:	dec00204 	addi	sp,sp,8
    994c:	f800283a 	ret

00009950 <start_pass_main>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
    9950:	defffb04 	addi	sp,sp,-20
    9954:	dfc00415 	stw	ra,16(sp)
    9958:	df000315 	stw	fp,12(sp)
    995c:	df000304 	addi	fp,sp,12
    9960:	e13ffe15 	stw	r4,-8(fp)
    9964:	e17fff15 	stw	r5,-4(fp)
	my_main_ptr main = (my_main_ptr) cinfo->main;
    9968:	e0bffe17 	ldw	r2,-8(fp)
    996c:	10805d17 	ldw	r2,372(r2)
    9970:	e0bffd15 	stw	r2,-12(fp)

	/* Do nothing in raw-data mode. */
	if (cinfo->raw_data_in)
    9974:	e0bffe17 	ldw	r2,-8(fp)
    9978:	10803303 	ldbu	r2,204(r2)
    997c:	10803fcc 	andi	r2,r2,255
    9980:	10001b1e 	bne	r2,zero,99f0 <start_pass_main+0xa0>
		return;

	main->cur_iMCU_row = 0;	/* initialize counters */
    9984:	e0bffd17 	ldw	r2,-12(fp)
    9988:	10000215 	stw	zero,8(r2)
	main->rowgroup_ctr = 0;
    998c:	e0bffd17 	ldw	r2,-12(fp)
    9990:	10000315 	stw	zero,12(r2)
	main->suspended = FALSE;
    9994:	e0bffd17 	ldw	r2,-12(fp)
    9998:	10000405 	stb	zero,16(r2)
	main->pass_mode = pass_mode;	/* save mode for use by process_data */
    999c:	e0bffd17 	ldw	r2,-12(fp)
    99a0:	e0ffff17 	ldw	r3,-4(fp)
    99a4:	10c00515 	stw	r3,20(r2)

	switch (pass_mode) {
    99a8:	e0bfff17 	ldw	r2,-4(fp)
    99ac:	1000051e 	bne	r2,zero,99c4 <start_pass_main+0x74>
	case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		if (main->whole_image[0] != NULL)
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
		main->pub.process_data = process_data_simple_main;
    99b0:	e0bffd17 	ldw	r2,-12(fp)
    99b4:	00c00074 	movhi	r3,1
    99b8:	18e68204 	addi	r3,r3,-26104
    99bc:	10c00115 	stw	r3,4(r2)
		break;
    99c0:	00000c06 	br	99f4 <start_pass_main+0xa4>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
		main->pub.process_data = process_data_buffer_main;
		break;
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    99c4:	e0bffe17 	ldw	r2,-8(fp)
    99c8:	10800017 	ldw	r2,0(r2)
    99cc:	00c000c4 	movi	r3,3
    99d0:	10c00515 	stw	r3,20(r2)
    99d4:	e0bffe17 	ldw	r2,-8(fp)
    99d8:	10800017 	ldw	r2,0(r2)
    99dc:	10800017 	ldw	r2,0(r2)
    99e0:	e13ffe17 	ldw	r4,-8(fp)
    99e4:	103ee83a 	callr	r2
		break;
    99e8:	0001883a 	nop
    99ec:	00000106 	br	99f4 <start_pass_main+0xa4>
{
	my_main_ptr main = (my_main_ptr) cinfo->main;

	/* Do nothing in raw-data mode. */
	if (cinfo->raw_data_in)
		return;
    99f0:	0001883a 	nop
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
		break;
	}
}
    99f4:	e037883a 	mov	sp,fp
    99f8:	dfc00117 	ldw	ra,4(sp)
    99fc:	df000017 	ldw	fp,0(sp)
    9a00:	dec00204 	addi	sp,sp,8
    9a04:	f800283a 	ret

00009a08 <process_data_simple_main>:

METHODDEF(void)
	process_data_simple_main (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail)
{
    9a08:	defff604 	addi	sp,sp,-40
    9a0c:	dfc00915 	stw	ra,36(sp)
    9a10:	df000815 	stw	fp,32(sp)
    9a14:	df000804 	addi	fp,sp,32
    9a18:	e13ffc15 	stw	r4,-16(fp)
    9a1c:	e17ffd15 	stw	r5,-12(fp)
    9a20:	e1bffe15 	stw	r6,-8(fp)
    9a24:	e1ffff15 	stw	r7,-4(fp)
	my_main_ptr main = (my_main_ptr) cinfo->main;
    9a28:	e0bffc17 	ldw	r2,-16(fp)
    9a2c:	10805d17 	ldw	r2,372(r2)
    9a30:	e0bffb15 	stw	r2,-20(fp)

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
    9a34:	00004406 	br	9b48 <process_data_simple_main+0x140>
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
    9a38:	e0bffb17 	ldw	r2,-20(fp)
    9a3c:	10c00317 	ldw	r3,12(r2)
    9a40:	e0bffc17 	ldw	r2,-16(fp)
    9a44:	10804117 	ldw	r2,260(r2)
    9a48:	1880112e 	bgeu	r3,r2,9a90 <process_data_simple_main+0x88>
			(*cinfo->prep->pre_process_data) (cinfo,
    9a4c:	e0bffc17 	ldw	r2,-16(fp)
    9a50:	10805e17 	ldw	r2,376(r2)
    9a54:	10800117 	ldw	r2,4(r2)
			input_buf, in_row_ctr, in_rows_avail,
			main->buffer, &main->rowgroup_ctr,
    9a58:	e0fffb17 	ldw	r3,-20(fp)
    9a5c:	19400604 	addi	r5,r3,24
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			(*cinfo->prep->pre_process_data) (cinfo,
    9a60:	e0fffb17 	ldw	r3,-20(fp)
    9a64:	19000304 	addi	r4,r3,12
			input_buf, in_row_ctr, in_rows_avail,
			main->buffer, &main->rowgroup_ctr,
			(JDIMENSION) cinfo->min_DCT_v_scaled_size);
    9a68:	e0fffc17 	ldw	r3,-16(fp)
    9a6c:	18c04117 	ldw	r3,260(r3)
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			(*cinfo->prep->pre_process_data) (cinfo,
    9a70:	d9400015 	stw	r5,0(sp)
    9a74:	d9000115 	stw	r4,4(sp)
    9a78:	d8c00215 	stw	r3,8(sp)
    9a7c:	e13ffc17 	ldw	r4,-16(fp)
    9a80:	e17ffd17 	ldw	r5,-12(fp)
    9a84:	e1bffe17 	ldw	r6,-8(fp)
    9a88:	e1ffff17 	ldw	r7,-4(fp)
    9a8c:	103ee83a 	callr	r2

		/* If we don't have a full iMCU row buffered, return to application for
		* more data.  Note that preprocessor will always pad to fill the iMCU row
		* at the bottom of the image.
		*/
		if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
    9a90:	e0bffb17 	ldw	r2,-20(fp)
    9a94:	10c00317 	ldw	r3,12(r2)
    9a98:	e0bffc17 	ldw	r2,-16(fp)
    9a9c:	10804117 	ldw	r2,260(r2)
    9aa0:	18802f1e 	bne	r3,r2,9b60 <process_data_simple_main+0x158>
			return;

		/* Send the completed row to the compressor */
		if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
    9aa4:	e0bffc17 	ldw	r2,-16(fp)
    9aa8:	10805f17 	ldw	r2,380(r2)
    9aac:	10c00117 	ldw	r3,4(r2)
    9ab0:	e0bffb17 	ldw	r2,-20(fp)
    9ab4:	10800604 	addi	r2,r2,24
    9ab8:	e13ffc17 	ldw	r4,-16(fp)
    9abc:	100b883a 	mov	r5,r2
    9ac0:	183ee83a 	callr	r3
    9ac4:	10803fcc 	andi	r2,r2,255
    9ac8:	10000d1e 	bne	r2,zero,9b00 <process_data_simple_main+0xf8>
			* suspend processing and return to the application.  In this situation
			* we pretend we didn't yet consume the last input row; otherwise, if
			* it happened to be the last row of the image, the application would
			* think we were done.
			*/
			if (! main->suspended) {
    9acc:	e0bffb17 	ldw	r2,-20(fp)
    9ad0:	10800403 	ldbu	r2,16(r2)
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	1000231e 	bne	r2,zero,9b68 <process_data_simple_main+0x160>
				(*in_row_ctr)--;
    9adc:	e0bffe17 	ldw	r2,-8(fp)
    9ae0:	10800017 	ldw	r2,0(r2)
    9ae4:	10ffffc4 	addi	r3,r2,-1
    9ae8:	e0bffe17 	ldw	r2,-8(fp)
    9aec:	10c00015 	stw	r3,0(r2)
				main->suspended = TRUE;
    9af0:	e0bffb17 	ldw	r2,-20(fp)
    9af4:	00c00044 	movi	r3,1
    9af8:	10c00405 	stb	r3,16(r2)
			}
			return;
    9afc:	00001a06 	br	9b68 <process_data_simple_main+0x160>
		}
		/* We did finish the row.  Undo our little suspension hack if a previous
		* call suspended; then mark the main buffer empty.
		*/
		if (main->suspended) {
    9b00:	e0bffb17 	ldw	r2,-20(fp)
    9b04:	10800403 	ldbu	r2,16(r2)
    9b08:	10803fcc 	andi	r2,r2,255
    9b0c:	10000726 	beq	r2,zero,9b2c <process_data_simple_main+0x124>
			(*in_row_ctr)++;
    9b10:	e0bffe17 	ldw	r2,-8(fp)
    9b14:	10800017 	ldw	r2,0(r2)
    9b18:	10c00044 	addi	r3,r2,1
    9b1c:	e0bffe17 	ldw	r2,-8(fp)
    9b20:	10c00015 	stw	r3,0(r2)
			main->suspended = FALSE;
    9b24:	e0bffb17 	ldw	r2,-20(fp)
    9b28:	10000405 	stb	zero,16(r2)
		}
		main->rowgroup_ctr = 0;
    9b2c:	e0bffb17 	ldw	r2,-20(fp)
    9b30:	10000315 	stw	zero,12(r2)
		main->cur_iMCU_row++;
    9b34:	e0bffb17 	ldw	r2,-20(fp)
    9b38:	10800217 	ldw	r2,8(r2)
    9b3c:	10c00044 	addi	r3,r2,1
    9b40:	e0bffb17 	ldw	r2,-20(fp)
    9b44:	10c00215 	stw	r3,8(r2)
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail)
{
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
    9b48:	e0bffb17 	ldw	r2,-20(fp)
    9b4c:	10c00217 	ldw	r3,8(r2)
    9b50:	e0bffc17 	ldw	r2,-16(fp)
    9b54:	10804217 	ldw	r2,264(r2)
    9b58:	18bfb736 	bltu	r3,r2,9a38 <process_data_simple_main+0x30>
    9b5c:	00000306 	br	9b6c <process_data_simple_main+0x164>
		/* If we don't have a full iMCU row buffered, return to application for
		* more data.  Note that preprocessor will always pad to fill the iMCU row
		* at the bottom of the image.
		*/
		if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			return;
    9b60:	0001883a 	nop
    9b64:	00000106 	br	9b6c <process_data_simple_main+0x164>
			*/
			if (! main->suspended) {
				(*in_row_ctr)--;
				main->suspended = TRUE;
			}
			return;
    9b68:	0001883a 	nop
			main->suspended = FALSE;
		}
		main->rowgroup_ctr = 0;
		main->cur_iMCU_row++;
	}
}
    9b6c:	e037883a 	mov	sp,fp
    9b70:	dfc00117 	ldw	ra,4(sp)
    9b74:	df000017 	ldw	fp,0(sp)
    9b78:	dec00204 	addi	sp,sp,8
    9b7c:	f800283a 	ret

00009b80 <jinit_c_main_controller>:
* Initialize main buffer controller.
*/

GLOBAL(void)
	jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
    9b80:	defff704 	addi	sp,sp,-36
    9b84:	dfc00815 	stw	ra,32(sp)
    9b88:	df000715 	stw	fp,28(sp)
    9b8c:	dc400615 	stw	r17,24(sp)
    9b90:	dc000515 	stw	r16,20(sp)
    9b94:	df000504 	addi	fp,sp,20
    9b98:	e13ffe15 	stw	r4,-8(fp)
    9b9c:	2805883a 	mov	r2,r5
    9ba0:	e0bfff05 	stb	r2,-4(fp)
	my_main_ptr main;
	int ci;
	jpeg_component_info *compptr;

	main = (my_main_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    9ba4:	e0bffe17 	ldw	r2,-8(fp)
    9ba8:	10800117 	ldw	r2,4(r2)
    9bac:	10800017 	ldw	r2,0(r2)
{
	my_main_ptr main;
	int ci;
	jpeg_component_info *compptr;

	main = (my_main_ptr)
    9bb0:	e13ffe17 	ldw	r4,-8(fp)
    9bb4:	01400044 	movi	r5,1
    9bb8:	01801004 	movi	r6,64
    9bbc:	103ee83a 	callr	r2
    9bc0:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_main_controller));
	cinfo->main = (struct jpeg_c_main_controller *) main;
    9bc4:	e0bffe17 	ldw	r2,-8(fp)
    9bc8:	e0fffd17 	ldw	r3,-12(fp)
    9bcc:	10c05d15 	stw	r3,372(r2)
	main->pub.start_pass = start_pass_main;
    9bd0:	e0bffd17 	ldw	r2,-12(fp)
    9bd4:	00c00074 	movhi	r3,1
    9bd8:	18e65404 	addi	r3,r3,-26288
    9bdc:	10c00015 	stw	r3,0(r2)

	/* We don't need to create a buffer in raw-data mode. */
	if (cinfo->raw_data_in)
    9be0:	e0bffe17 	ldw	r2,-8(fp)
    9be4:	10803303 	ldbu	r2,204(r2)
    9be8:	10803fcc 	andi	r2,r2,255
    9bec:	10003b1e 	bne	r2,zero,9cdc <jinit_c_main_controller+0x15c>
		return;

	/* Create the buffer.  It holds downsampled data, so each component
	* may be of a different size.
	*/
	if (need_full_buffer) {
    9bf0:	e0bfff03 	ldbu	r2,-4(fp)
    9bf4:	10000a26 	beq	r2,zero,9c20 <jinit_c_main_controller+0xa0>
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
					(long) compptr->v_samp_factor) * DCTSIZE,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
		}
#else
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    9bf8:	e0bffe17 	ldw	r2,-8(fp)
    9bfc:	10800017 	ldw	r2,0(r2)
    9c00:	00c000c4 	movi	r3,3
    9c04:	10c00515 	stw	r3,20(r2)
    9c08:	e0bffe17 	ldw	r2,-8(fp)
    9c0c:	10800017 	ldw	r2,0(r2)
    9c10:	10800017 	ldw	r2,0(r2)
    9c14:	e13ffe17 	ldw	r4,-8(fp)
    9c18:	103ee83a 	callr	r2
    9c1c:	00003006 	br	9ce0 <jinit_c_main_controller+0x160>
	} else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    9c20:	e03ffb15 	stw	zero,-20(fp)
    9c24:	e0bffe17 	ldw	r2,-8(fp)
    9c28:	10801417 	ldw	r2,80(r2)
    9c2c:	e0bffc15 	stw	r2,-16(fp)
    9c30:	00002506 	br	9cc8 <jinit_c_main_controller+0x148>
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
    9c34:	e0bffe17 	ldw	r2,-8(fp)
    9c38:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    9c3c:	14400217 	ldw	r17,8(r2)
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
    9c40:	e0bffc17 	ldw	r2,-16(fp)
    9c44:	10c00717 	ldw	r3,28(r2)
    9c48:	e0bffc17 	ldw	r2,-16(fp)
    9c4c:	10800917 	ldw	r2,36(r2)
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    9c50:	1809883a 	mov	r4,r3
    9c54:	100b883a 	mov	r5,r2
    9c58:	002c1540 	call	2c154 <__mulsi3>
    9c5c:	1021883a 	mov	r16,r2
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
    9c60:	e0bffc17 	ldw	r2,-16(fp)
    9c64:	10c00317 	ldw	r3,12(r2)
    9c68:	e0bffc17 	ldw	r2,-16(fp)
    9c6c:	10800a17 	ldw	r2,40(r2)
    9c70:	1809883a 	mov	r4,r3
    9c74:	100b883a 	mov	r5,r2
    9c78:	002c1540 	call	2c154 <__mulsi3>
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    9c7c:	e13ffe17 	ldw	r4,-8(fp)
    9c80:	01400044 	movi	r5,1
    9c84:	800d883a 	mov	r6,r16
    9c88:	100f883a 	mov	r7,r2
    9c8c:	883ee83a 	callr	r17
    9c90:	1007883a 	mov	r3,r2
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
    9c94:	e13ffd17 	ldw	r4,-12(fp)
    9c98:	e0bffb17 	ldw	r2,-20(fp)
    9c9c:	10800184 	addi	r2,r2,6
    9ca0:	1085883a 	add	r2,r2,r2
    9ca4:	1085883a 	add	r2,r2,r2
    9ca8:	2085883a 	add	r2,r4,r2
    9cac:	10c00015 	stw	r3,0(r2)
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
    9cb0:	e0bffb17 	ldw	r2,-20(fp)
    9cb4:	10800044 	addi	r2,r2,1
    9cb8:	e0bffb15 	stw	r2,-20(fp)
    9cbc:	e0bffc17 	ldw	r2,-16(fp)
    9cc0:	10801604 	addi	r2,r2,88
    9cc4:	e0bffc15 	stw	r2,-16(fp)
	} else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    9cc8:	e0bffe17 	ldw	r2,-8(fp)
    9ccc:	10801217 	ldw	r2,72(r2)
    9cd0:	e0fffb17 	ldw	r3,-20(fp)
    9cd4:	18bfd716 	blt	r3,r2,9c34 <jinit_c_main_controller+0xb4>
    9cd8:	00000106 	br	9ce0 <jinit_c_main_controller+0x160>
	cinfo->main = (struct jpeg_c_main_controller *) main;
	main->pub.start_pass = start_pass_main;

	/* We don't need to create a buffer in raw-data mode. */
	if (cinfo->raw_data_in)
		return;
    9cdc:	0001883a 	nop
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
		}
	}
}
    9ce0:	e037883a 	mov	sp,fp
    9ce4:	dfc00317 	ldw	ra,12(sp)
    9ce8:	df000217 	ldw	fp,8(sp)
    9cec:	dc400117 	ldw	r17,4(sp)
    9cf0:	dc000017 	ldw	r16,0(sp)
    9cf4:	dec00404 	addi	sp,sp,16
    9cf8:	f800283a 	ret

00009cfc <emit_byte>:
*/

LOCAL(void)
	emit_byte (j_compress_ptr cinfo, int val)
	/* Emit a byte */
{
    9cfc:	defffb04 	addi	sp,sp,-20
    9d00:	dfc00415 	stw	ra,16(sp)
    9d04:	df000315 	stw	fp,12(sp)
    9d08:	df000304 	addi	fp,sp,12
    9d0c:	e13ffe15 	stw	r4,-8(fp)
    9d10:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_destination_mgr * dest = cinfo->dest;
    9d14:	e0bffe17 	ldw	r2,-8(fp)
    9d18:	10800617 	ldw	r2,24(r2)
    9d1c:	e0bffd15 	stw	r2,-12(fp)

	*(dest->next_output_byte)++ = (JOCTET) val;
    9d20:	e0bffd17 	ldw	r2,-12(fp)
    9d24:	10800017 	ldw	r2,0(r2)
    9d28:	e0ffff17 	ldw	r3,-4(fp)
    9d2c:	10c00005 	stb	r3,0(r2)
    9d30:	10c00044 	addi	r3,r2,1
    9d34:	e0bffd17 	ldw	r2,-12(fp)
    9d38:	10c00015 	stw	r3,0(r2)
	if (--dest->free_in_buffer == 0) {
    9d3c:	e0bffd17 	ldw	r2,-12(fp)
    9d40:	10800117 	ldw	r2,4(r2)
    9d44:	10ffffc4 	addi	r3,r2,-1
    9d48:	e0bffd17 	ldw	r2,-12(fp)
    9d4c:	10c00115 	stw	r3,4(r2)
    9d50:	e0bffd17 	ldw	r2,-12(fp)
    9d54:	10800117 	ldw	r2,4(r2)
    9d58:	10000f1e 	bne	r2,zero,9d98 <emit_byte+0x9c>
		if (! (*dest->empty_output_buffer) (cinfo))
    9d5c:	e0bffd17 	ldw	r2,-12(fp)
    9d60:	10800317 	ldw	r2,12(r2)
    9d64:	e13ffe17 	ldw	r4,-8(fp)
    9d68:	103ee83a 	callr	r2
    9d6c:	10803fcc 	andi	r2,r2,255
    9d70:	1000091e 	bne	r2,zero,9d98 <emit_byte+0x9c>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
    9d74:	e0bffe17 	ldw	r2,-8(fp)
    9d78:	10800017 	ldw	r2,0(r2)
    9d7c:	00c00644 	movi	r3,25
    9d80:	10c00515 	stw	r3,20(r2)
    9d84:	e0bffe17 	ldw	r2,-8(fp)
    9d88:	10800017 	ldw	r2,0(r2)
    9d8c:	10800017 	ldw	r2,0(r2)
    9d90:	e13ffe17 	ldw	r4,-8(fp)
    9d94:	103ee83a 	callr	r2
	}
}
    9d98:	e037883a 	mov	sp,fp
    9d9c:	dfc00117 	ldw	ra,4(sp)
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00204 	addi	sp,sp,8
    9da8:	f800283a 	ret

00009dac <emit_marker>:


LOCAL(void)
	emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
	/* Emit a marker code */
{
    9dac:	defffc04 	addi	sp,sp,-16
    9db0:	dfc00315 	stw	ra,12(sp)
    9db4:	df000215 	stw	fp,8(sp)
    9db8:	df000204 	addi	fp,sp,8
    9dbc:	e13ffe15 	stw	r4,-8(fp)
    9dc0:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, 0xFF);
    9dc4:	e13ffe17 	ldw	r4,-8(fp)
    9dc8:	01403fc4 	movi	r5,255
    9dcc:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, (int) mark);
    9dd0:	e0bfff17 	ldw	r2,-4(fp)
    9dd4:	e13ffe17 	ldw	r4,-8(fp)
    9dd8:	100b883a 	mov	r5,r2
    9ddc:	0009cfc0 	call	9cfc <emit_byte>
}
    9de0:	e037883a 	mov	sp,fp
    9de4:	dfc00117 	ldw	ra,4(sp)
    9de8:	df000017 	ldw	fp,0(sp)
    9dec:	dec00204 	addi	sp,sp,8
    9df0:	f800283a 	ret

00009df4 <emit_2bytes>:


LOCAL(void)
	emit_2bytes (j_compress_ptr cinfo, int value)
	/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
    9df4:	defffc04 	addi	sp,sp,-16
    9df8:	dfc00315 	stw	ra,12(sp)
    9dfc:	df000215 	stw	fp,8(sp)
    9e00:	df000204 	addi	fp,sp,8
    9e04:	e13ffe15 	stw	r4,-8(fp)
    9e08:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, (value >> 8) & 0xFF);
    9e0c:	e0bfff17 	ldw	r2,-4(fp)
    9e10:	1005d23a 	srai	r2,r2,8
    9e14:	10803fcc 	andi	r2,r2,255
    9e18:	e13ffe17 	ldw	r4,-8(fp)
    9e1c:	100b883a 	mov	r5,r2
    9e20:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, value & 0xFF);
    9e24:	e0bfff17 	ldw	r2,-4(fp)
    9e28:	10803fcc 	andi	r2,r2,255
    9e2c:	e13ffe17 	ldw	r4,-8(fp)
    9e30:	100b883a 	mov	r5,r2
    9e34:	0009cfc0 	call	9cfc <emit_byte>
}
    9e38:	e037883a 	mov	sp,fp
    9e3c:	dfc00117 	ldw	ra,4(sp)
    9e40:	df000017 	ldw	fp,0(sp)
    9e44:	dec00204 	addi	sp,sp,8
    9e48:	f800283a 	ret

00009e4c <emit_dqt>:

LOCAL(int)
	emit_dqt (j_compress_ptr cinfo, int index)
	/* Emit a DQT marker */
	/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
    9e4c:	defff804 	addi	sp,sp,-32
    9e50:	dfc00715 	stw	ra,28(sp)
    9e54:	df000615 	stw	fp,24(sp)
    9e58:	df000604 	addi	fp,sp,24
    9e5c:	e13ffe15 	stw	r4,-8(fp)
    9e60:	e17fff15 	stw	r5,-4(fp)
	JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
    9e64:	e0fffe17 	ldw	r3,-8(fp)
    9e68:	e0bfff17 	ldw	r2,-4(fp)
    9e6c:	10800544 	addi	r2,r2,21
    9e70:	1085883a 	add	r2,r2,r2
    9e74:	1085883a 	add	r2,r2,r2
    9e78:	1885883a 	add	r2,r3,r2
    9e7c:	10800017 	ldw	r2,0(r2)
    9e80:	e0bffc15 	stw	r2,-16(fp)
	int prec;
	int i;

	if (qtbl == NULL)
    9e84:	e0bffc17 	ldw	r2,-16(fp)
    9e88:	10000d1e 	bne	r2,zero,9ec0 <emit_dqt+0x74>
		ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
    9e8c:	e0bffe17 	ldw	r2,-8(fp)
    9e90:	10800017 	ldw	r2,0(r2)
    9e94:	00c00d84 	movi	r3,54
    9e98:	10c00515 	stw	r3,20(r2)
    9e9c:	e0bffe17 	ldw	r2,-8(fp)
    9ea0:	10800017 	ldw	r2,0(r2)
    9ea4:	e0ffff17 	ldw	r3,-4(fp)
    9ea8:	10c00615 	stw	r3,24(r2)
    9eac:	e0bffe17 	ldw	r2,-8(fp)
    9eb0:	10800017 	ldw	r2,0(r2)
    9eb4:	10800017 	ldw	r2,0(r2)
    9eb8:	e13ffe17 	ldw	r4,-8(fp)
    9ebc:	103ee83a 	callr	r2

	prec = 0;
    9ec0:	e03ffa15 	stw	zero,-24(fp)
	for (i = 0; i <= cinfo->lim_Se; i++) {
    9ec4:	e03ffb15 	stw	zero,-20(fp)
    9ec8:	00001306 	br	9f18 <emit_dqt+0xcc>
		if (qtbl->quantval[cinfo->natural_order[i]] > 255)
    9ecc:	e0bffe17 	ldw	r2,-8(fp)
    9ed0:	10c05a17 	ldw	r3,360(r2)
    9ed4:	e0bffb17 	ldw	r2,-20(fp)
    9ed8:	1085883a 	add	r2,r2,r2
    9edc:	1085883a 	add	r2,r2,r2
    9ee0:	1885883a 	add	r2,r3,r2
    9ee4:	10800017 	ldw	r2,0(r2)
    9ee8:	e0fffc17 	ldw	r3,-16(fp)
    9eec:	1085883a 	add	r2,r2,r2
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	1080000b 	ldhu	r2,0(r2)
    9ef8:	10bfffcc 	andi	r2,r2,65535
    9efc:	10804030 	cmpltui	r2,r2,256
    9f00:	1000021e 	bne	r2,zero,9f0c <emit_dqt+0xc0>
			prec = 1;
    9f04:	00800044 	movi	r2,1
    9f08:	e0bffa15 	stw	r2,-24(fp)

	if (qtbl == NULL)
		ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);

	prec = 0;
	for (i = 0; i <= cinfo->lim_Se; i++) {
    9f0c:	e0bffb17 	ldw	r2,-20(fp)
    9f10:	10800044 	addi	r2,r2,1
    9f14:	e0bffb15 	stw	r2,-20(fp)
    9f18:	e0bffe17 	ldw	r2,-8(fp)
    9f1c:	10c05b17 	ldw	r3,364(r2)
    9f20:	e0bffb17 	ldw	r2,-20(fp)
    9f24:	18bfe90e 	bge	r3,r2,9ecc <emit_dqt+0x80>
		if (qtbl->quantval[cinfo->natural_order[i]] > 255)
			prec = 1;
	}

	if (! qtbl->sent_table) {
    9f28:	e0bffc17 	ldw	r2,-16(fp)
    9f2c:	10802003 	ldbu	r2,128(r2)
    9f30:	10803fcc 	andi	r2,r2,255
    9f34:	10003d1e 	bne	r2,zero,a02c <emit_dqt+0x1e0>
		emit_marker(cinfo, M_DQT);
    9f38:	e13ffe17 	ldw	r4,-8(fp)
    9f3c:	014036c4 	movi	r5,219
    9f40:	0009dac0 	call	9dac <emit_marker>

		emit_2bytes(cinfo,
    9f44:	e0bffa17 	ldw	r2,-24(fp)
    9f48:	10000626 	beq	r2,zero,9f64 <emit_dqt+0x118>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
    9f4c:	e0bffe17 	ldw	r2,-8(fp)
    9f50:	10805b17 	ldw	r2,364(r2)
    9f54:	10800044 	addi	r2,r2,1
    9f58:	1085883a 	add	r2,r2,r2
	}

	if (! qtbl->sent_table) {
		emit_marker(cinfo, M_DQT);

		emit_2bytes(cinfo,
    9f5c:	108000c4 	addi	r2,r2,3
    9f60:	00000306 	br	9f70 <emit_dqt+0x124>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
    9f64:	e0bffe17 	ldw	r2,-8(fp)
    9f68:	10805b17 	ldw	r2,364(r2)
	}

	if (! qtbl->sent_table) {
		emit_marker(cinfo, M_DQT);

		emit_2bytes(cinfo,
    9f6c:	10800104 	addi	r2,r2,4
    9f70:	e13ffe17 	ldw	r4,-8(fp)
    9f74:	100b883a 	mov	r5,r2
    9f78:	0009df40 	call	9df4 <emit_2bytes>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);

		emit_byte(cinfo, index + (prec<<4));
    9f7c:	e0bffa17 	ldw	r2,-24(fp)
    9f80:	1006913a 	slli	r3,r2,4
    9f84:	e0bfff17 	ldw	r2,-4(fp)
    9f88:	1885883a 	add	r2,r3,r2
    9f8c:	e13ffe17 	ldw	r4,-8(fp)
    9f90:	100b883a 	mov	r5,r2
    9f94:	0009cfc0 	call	9cfc <emit_byte>

		for (i = 0; i <= cinfo->lim_Se; i++) {
    9f98:	e03ffb15 	stw	zero,-20(fp)
    9f9c:	00001c06 	br	a010 <emit_dqt+0x1c4>
			/* The table entries must be emitted in zigzag order. */
			unsigned int qval = qtbl->quantval[cinfo->natural_order[i]];
    9fa0:	e0bffe17 	ldw	r2,-8(fp)
    9fa4:	10c05a17 	ldw	r3,360(r2)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	1085883a 	add	r2,r2,r2
    9fb0:	1085883a 	add	r2,r2,r2
    9fb4:	1885883a 	add	r2,r3,r2
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	e0fffc17 	ldw	r3,-16(fp)
    9fc0:	1085883a 	add	r2,r2,r2
    9fc4:	1885883a 	add	r2,r3,r2
    9fc8:	1080000b 	ldhu	r2,0(r2)
    9fcc:	10bfffcc 	andi	r2,r2,65535
    9fd0:	e0bffd15 	stw	r2,-12(fp)
			if (prec)
    9fd4:	e0bffa17 	ldw	r2,-24(fp)
    9fd8:	10000526 	beq	r2,zero,9ff0 <emit_dqt+0x1a4>
				emit_byte(cinfo, (int) (qval >> 8));
    9fdc:	e0bffd17 	ldw	r2,-12(fp)
    9fe0:	1004d23a 	srli	r2,r2,8
    9fe4:	e13ffe17 	ldw	r4,-8(fp)
    9fe8:	100b883a 	mov	r5,r2
    9fec:	0009cfc0 	call	9cfc <emit_byte>
			emit_byte(cinfo, (int) (qval & 0xFF));
    9ff0:	e0bffd17 	ldw	r2,-12(fp)
    9ff4:	10803fcc 	andi	r2,r2,255
    9ff8:	e13ffe17 	ldw	r4,-8(fp)
    9ffc:	100b883a 	mov	r5,r2
    a000:	0009cfc0 	call	9cfc <emit_byte>
		emit_2bytes(cinfo,
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);

		emit_byte(cinfo, index + (prec<<4));

		for (i = 0; i <= cinfo->lim_Se; i++) {
    a004:	e0bffb17 	ldw	r2,-20(fp)
    a008:	10800044 	addi	r2,r2,1
    a00c:	e0bffb15 	stw	r2,-20(fp)
    a010:	e0bffe17 	ldw	r2,-8(fp)
    a014:	10c05b17 	ldw	r3,364(r2)
    a018:	e0bffb17 	ldw	r2,-20(fp)
    a01c:	18bfe00e 	bge	r3,r2,9fa0 <emit_dqt+0x154>
			if (prec)
				emit_byte(cinfo, (int) (qval >> 8));
			emit_byte(cinfo, (int) (qval & 0xFF));
		}

		qtbl->sent_table = TRUE;
    a020:	e0bffc17 	ldw	r2,-16(fp)
    a024:	00c00044 	movi	r3,1
    a028:	10c02005 	stb	r3,128(r2)
	}

	return prec;
    a02c:	e0bffa17 	ldw	r2,-24(fp)
}
    a030:	e037883a 	mov	sp,fp
    a034:	dfc00117 	ldw	ra,4(sp)
    a038:	df000017 	ldw	fp,0(sp)
    a03c:	dec00204 	addi	sp,sp,8
    a040:	f800283a 	ret

0000a044 <emit_dht>:


LOCAL(void)
	emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
	/* Emit a DHT marker */
{
    a044:	defff804 	addi	sp,sp,-32
    a048:	dfc00715 	stw	ra,28(sp)
    a04c:	df000615 	stw	fp,24(sp)
    a050:	df000604 	addi	fp,sp,24
    a054:	e13ffd15 	stw	r4,-12(fp)
    a058:	e17ffe15 	stw	r5,-8(fp)
    a05c:	3005883a 	mov	r2,r6
    a060:	e0bfff05 	stb	r2,-4(fp)
	JHUFF_TBL * htbl;
	int length, i;

	if (is_ac) {
    a064:	e0bfff03 	ldbu	r2,-4(fp)
    a068:	10000c26 	beq	r2,zero,a09c <emit_dht+0x58>
		htbl = cinfo->ac_huff_tbl_ptrs[index];
    a06c:	e0fffd17 	ldw	r3,-12(fp)
    a070:	e0bffe17 	ldw	r2,-8(fp)
    a074:	10800844 	addi	r2,r2,33
    a078:	1085883a 	add	r2,r2,r2
    a07c:	1085883a 	add	r2,r2,r2
    a080:	1885883a 	add	r2,r3,r2
    a084:	10800017 	ldw	r2,0(r2)
    a088:	e0bffa15 	stw	r2,-24(fp)
		index += 0x10;		/* output index has AC bit set */
    a08c:	e0bffe17 	ldw	r2,-8(fp)
    a090:	10800404 	addi	r2,r2,16
    a094:	e0bffe15 	stw	r2,-8(fp)
    a098:	00000806 	br	a0bc <emit_dht+0x78>
	} else {
		htbl = cinfo->dc_huff_tbl_ptrs[index];
    a09c:	e0fffd17 	ldw	r3,-12(fp)
    a0a0:	e0bffe17 	ldw	r2,-8(fp)
    a0a4:	10800744 	addi	r2,r2,29
    a0a8:	1085883a 	add	r2,r2,r2
    a0ac:	1085883a 	add	r2,r2,r2
    a0b0:	1885883a 	add	r2,r3,r2
    a0b4:	10800017 	ldw	r2,0(r2)
    a0b8:	e0bffa15 	stw	r2,-24(fp)
	}

	if (htbl == NULL)
    a0bc:	e0bffa17 	ldw	r2,-24(fp)
    a0c0:	10000d1e 	bne	r2,zero,a0f8 <emit_dht+0xb4>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
    a0c4:	e0bffd17 	ldw	r2,-12(fp)
    a0c8:	10800017 	ldw	r2,0(r2)
    a0cc:	00c00d04 	movi	r3,52
    a0d0:	10c00515 	stw	r3,20(r2)
    a0d4:	e0bffd17 	ldw	r2,-12(fp)
    a0d8:	10800017 	ldw	r2,0(r2)
    a0dc:	e0fffe17 	ldw	r3,-8(fp)
    a0e0:	10c00615 	stw	r3,24(r2)
    a0e4:	e0bffd17 	ldw	r2,-12(fp)
    a0e8:	10800017 	ldw	r2,0(r2)
    a0ec:	10800017 	ldw	r2,0(r2)
    a0f0:	e13ffd17 	ldw	r4,-12(fp)
    a0f4:	103ee83a 	callr	r2

	if (! htbl->sent_table) {
    a0f8:	e0bffa17 	ldw	r2,-24(fp)
    a0fc:	10804443 	ldbu	r2,273(r2)
    a100:	10803fcc 	andi	r2,r2,255
    a104:	1000421e 	bne	r2,zero,a210 <emit_dht+0x1cc>
		emit_marker(cinfo, M_DHT);
    a108:	e13ffd17 	ldw	r4,-12(fp)
    a10c:	01403104 	movi	r5,196
    a110:	0009dac0 	call	9dac <emit_marker>

		length = 0;
    a114:	e03ffb15 	stw	zero,-20(fp)
		for (i = 1; i <= 16; i++)
    a118:	00800044 	movi	r2,1
    a11c:	e0bffc15 	stw	r2,-16(fp)
    a120:	00000b06 	br	a150 <emit_dht+0x10c>
			length += htbl->bits[i];
    a124:	e0fffa17 	ldw	r3,-24(fp)
    a128:	e0bffc17 	ldw	r2,-16(fp)
    a12c:	1885883a 	add	r2,r3,r2
    a130:	10800003 	ldbu	r2,0(r2)
    a134:	10803fcc 	andi	r2,r2,255
    a138:	e0fffb17 	ldw	r3,-20(fp)
    a13c:	1885883a 	add	r2,r3,r2
    a140:	e0bffb15 	stw	r2,-20(fp)

	if (! htbl->sent_table) {
		emit_marker(cinfo, M_DHT);

		length = 0;
		for (i = 1; i <= 16; i++)
    a144:	e0bffc17 	ldw	r2,-16(fp)
    a148:	10800044 	addi	r2,r2,1
    a14c:	e0bffc15 	stw	r2,-16(fp)
    a150:	e0bffc17 	ldw	r2,-16(fp)
    a154:	10800450 	cmplti	r2,r2,17
    a158:	103ff21e 	bne	r2,zero,a124 <emit_dht+0xe0>
			length += htbl->bits[i];

		emit_2bytes(cinfo, length + 2 + 1 + 16);
    a15c:	e0bffb17 	ldw	r2,-20(fp)
    a160:	108004c4 	addi	r2,r2,19
    a164:	e13ffd17 	ldw	r4,-12(fp)
    a168:	100b883a 	mov	r5,r2
    a16c:	0009df40 	call	9df4 <emit_2bytes>
		emit_byte(cinfo, index);
    a170:	e13ffd17 	ldw	r4,-12(fp)
    a174:	e17ffe17 	ldw	r5,-8(fp)
    a178:	0009cfc0 	call	9cfc <emit_byte>

		for (i = 1; i <= 16; i++)
    a17c:	00800044 	movi	r2,1
    a180:	e0bffc15 	stw	r2,-16(fp)
    a184:	00000b06 	br	a1b4 <emit_dht+0x170>
			emit_byte(cinfo, htbl->bits[i]);
    a188:	e0fffa17 	ldw	r3,-24(fp)
    a18c:	e0bffc17 	ldw	r2,-16(fp)
    a190:	1885883a 	add	r2,r3,r2
    a194:	10800003 	ldbu	r2,0(r2)
    a198:	10803fcc 	andi	r2,r2,255
    a19c:	e13ffd17 	ldw	r4,-12(fp)
    a1a0:	100b883a 	mov	r5,r2
    a1a4:	0009cfc0 	call	9cfc <emit_byte>
			length += htbl->bits[i];

		emit_2bytes(cinfo, length + 2 + 1 + 16);
		emit_byte(cinfo, index);

		for (i = 1; i <= 16; i++)
    a1a8:	e0bffc17 	ldw	r2,-16(fp)
    a1ac:	10800044 	addi	r2,r2,1
    a1b0:	e0bffc15 	stw	r2,-16(fp)
    a1b4:	e0bffc17 	ldw	r2,-16(fp)
    a1b8:	10800450 	cmplti	r2,r2,17
    a1bc:	103ff21e 	bne	r2,zero,a188 <emit_dht+0x144>
			emit_byte(cinfo, htbl->bits[i]);

		for (i = 0; i < length; i++)
    a1c0:	e03ffc15 	stw	zero,-16(fp)
    a1c4:	00000c06 	br	a1f8 <emit_dht+0x1b4>
			emit_byte(cinfo, htbl->huffval[i]);
    a1c8:	e0fffa17 	ldw	r3,-24(fp)
    a1cc:	e0bffc17 	ldw	r2,-16(fp)
    a1d0:	1885883a 	add	r2,r3,r2
    a1d4:	10800444 	addi	r2,r2,17
    a1d8:	10800003 	ldbu	r2,0(r2)
    a1dc:	10803fcc 	andi	r2,r2,255
    a1e0:	e13ffd17 	ldw	r4,-12(fp)
    a1e4:	100b883a 	mov	r5,r2
    a1e8:	0009cfc0 	call	9cfc <emit_byte>
		emit_byte(cinfo, index);

		for (i = 1; i <= 16; i++)
			emit_byte(cinfo, htbl->bits[i]);

		for (i = 0; i < length; i++)
    a1ec:	e0bffc17 	ldw	r2,-16(fp)
    a1f0:	10800044 	addi	r2,r2,1
    a1f4:	e0bffc15 	stw	r2,-16(fp)
    a1f8:	e0fffc17 	ldw	r3,-16(fp)
    a1fc:	e0bffb17 	ldw	r2,-20(fp)
    a200:	18bff116 	blt	r3,r2,a1c8 <emit_dht+0x184>
			emit_byte(cinfo, htbl->huffval[i]);

		htbl->sent_table = TRUE;
    a204:	e0bffa17 	ldw	r2,-24(fp)
    a208:	00c00044 	movi	r3,1
    a20c:	10c04445 	stb	r3,273(r2)
	}
}
    a210:	e037883a 	mov	sp,fp
    a214:	dfc00117 	ldw	ra,4(sp)
    a218:	df000017 	ldw	fp,0(sp)
    a21c:	dec00204 	addi	sp,sp,8
    a220:	f800283a 	ret

0000a224 <emit_dac>:
LOCAL(void)
	emit_dac (j_compress_ptr cinfo)
	/* Emit a DAC marker */
	/* Since the useful info is so small, we want to emit all the tables in */
	/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
    a224:	defff204 	addi	sp,sp,-56
    a228:	dfc00d15 	stw	ra,52(sp)
    a22c:	df000c15 	stw	fp,48(sp)
    a230:	df000c04 	addi	fp,sp,48
    a234:	e13fff15 	stw	r4,-4(fp)
	char dc_in_use[NUM_ARITH_TBLS];
	char ac_in_use[NUM_ARITH_TBLS];
	int length, i;
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
    a238:	e03ff515 	stw	zero,-44(fp)
    a23c:	00000f06 	br	a27c <emit_dac+0x58>
		dc_in_use[i] = ac_in_use[i] = 0;
    a240:	e0fffb04 	addi	r3,fp,-20
    a244:	e0bff517 	ldw	r2,-44(fp)
    a248:	1885883a 	add	r2,r3,r2
    a24c:	10000005 	stb	zero,0(r2)
    a250:	e0fffb04 	addi	r3,fp,-20
    a254:	e0bff517 	ldw	r2,-44(fp)
    a258:	1885883a 	add	r2,r3,r2
    a25c:	10c00003 	ldbu	r3,0(r2)
    a260:	e13ff704 	addi	r4,fp,-36
    a264:	e0bff517 	ldw	r2,-44(fp)
    a268:	2085883a 	add	r2,r4,r2
    a26c:	10c00005 	stb	r3,0(r2)
	char dc_in_use[NUM_ARITH_TBLS];
	char ac_in_use[NUM_ARITH_TBLS];
	int length, i;
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
    a270:	e0bff517 	ldw	r2,-44(fp)
    a274:	10800044 	addi	r2,r2,1
    a278:	e0bff515 	stw	r2,-44(fp)
    a27c:	e0bff517 	ldw	r2,-44(fp)
    a280:	10800410 	cmplti	r2,r2,16
    a284:	103fee1e 	bne	r2,zero,a240 <emit_dac+0x1c>
		dc_in_use[i] = ac_in_use[i] = 0;

	for (i = 0; i < cinfo->comps_in_scan; i++) {
    a288:	e03ff515 	stw	zero,-44(fp)
    a28c:	00002006 	br	a310 <emit_dac+0xec>
		compptr = cinfo->cur_comp_info[i];
    a290:	e0ffff17 	ldw	r3,-4(fp)
    a294:	e0bff517 	ldw	r2,-44(fp)
    a298:	10801104 	addi	r2,r2,68
    a29c:	1085883a 	add	r2,r2,r2
    a2a0:	1085883a 	add	r2,r2,r2
    a2a4:	1885883a 	add	r2,r3,r2
    a2a8:	10800017 	ldw	r2,0(r2)
    a2ac:	e0bff615 	stw	r2,-40(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0)
    a2b0:	e0bfff17 	ldw	r2,-4(fp)
    a2b4:	10805517 	ldw	r2,340(r2)
    a2b8:	1000091e 	bne	r2,zero,a2e0 <emit_dac+0xbc>
    a2bc:	e0bfff17 	ldw	r2,-4(fp)
    a2c0:	10805717 	ldw	r2,348(r2)
    a2c4:	1000061e 	bne	r2,zero,a2e0 <emit_dac+0xbc>
			dc_in_use[compptr->dc_tbl_no] = 1;
    a2c8:	e0bff617 	ldw	r2,-40(fp)
    a2cc:	10800517 	ldw	r2,20(r2)
    a2d0:	e0fff704 	addi	r3,fp,-36
    a2d4:	1885883a 	add	r2,r3,r2
    a2d8:	00c00044 	movi	r3,1
    a2dc:	10c00005 	stb	r3,0(r2)
		/* AC needs no table when not present */
		if (cinfo->Se)
    a2e0:	e0bfff17 	ldw	r2,-4(fp)
    a2e4:	10805617 	ldw	r2,344(r2)
    a2e8:	10000626 	beq	r2,zero,a304 <emit_dac+0xe0>
			ac_in_use[compptr->ac_tbl_no] = 1;
    a2ec:	e0bff617 	ldw	r2,-40(fp)
    a2f0:	10800617 	ldw	r2,24(r2)
    a2f4:	e0fffb04 	addi	r3,fp,-20
    a2f8:	1885883a 	add	r2,r3,r2
    a2fc:	00c00044 	movi	r3,1
    a300:	10c00005 	stb	r3,0(r2)
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
		dc_in_use[i] = ac_in_use[i] = 0;

	for (i = 0; i < cinfo->comps_in_scan; i++) {
    a304:	e0bff517 	ldw	r2,-44(fp)
    a308:	10800044 	addi	r2,r2,1
    a30c:	e0bff515 	stw	r2,-44(fp)
    a310:	e0bfff17 	ldw	r2,-4(fp)
    a314:	10804317 	ldw	r2,268(r2)
    a318:	e0fff517 	ldw	r3,-44(fp)
    a31c:	18bfdc16 	blt	r3,r2,a290 <emit_dac+0x6c>
		/* AC needs no table when not present */
		if (cinfo->Se)
			ac_in_use[compptr->ac_tbl_no] = 1;
	}

	length = 0;
    a320:	e03ff415 	stw	zero,-48(fp)
	for (i = 0; i < NUM_ARITH_TBLS; i++)
    a324:	e03ff515 	stw	zero,-44(fp)
    a328:	00001506 	br	a380 <emit_dac+0x15c>
		length += dc_in_use[i] + ac_in_use[i];
    a32c:	e0fff704 	addi	r3,fp,-36
    a330:	e0bff517 	ldw	r2,-44(fp)
    a334:	1885883a 	add	r2,r3,r2
    a338:	10800003 	ldbu	r2,0(r2)
    a33c:	10c03fcc 	andi	r3,r2,255
    a340:	18c0201c 	xori	r3,r3,128
    a344:	18ffe004 	addi	r3,r3,-128
    a348:	e13ffb04 	addi	r4,fp,-20
    a34c:	e0bff517 	ldw	r2,-44(fp)
    a350:	2085883a 	add	r2,r4,r2
    a354:	10800003 	ldbu	r2,0(r2)
    a358:	10803fcc 	andi	r2,r2,255
    a35c:	1080201c 	xori	r2,r2,128
    a360:	10bfe004 	addi	r2,r2,-128
    a364:	1885883a 	add	r2,r3,r2
    a368:	e0fff417 	ldw	r3,-48(fp)
    a36c:	1885883a 	add	r2,r3,r2
    a370:	e0bff415 	stw	r2,-48(fp)
		if (cinfo->Se)
			ac_in_use[compptr->ac_tbl_no] = 1;
	}

	length = 0;
	for (i = 0; i < NUM_ARITH_TBLS; i++)
    a374:	e0bff517 	ldw	r2,-44(fp)
    a378:	10800044 	addi	r2,r2,1
    a37c:	e0bff515 	stw	r2,-44(fp)
    a380:	e0bff517 	ldw	r2,-44(fp)
    a384:	10800410 	cmplti	r2,r2,16
    a388:	103fe81e 	bne	r2,zero,a32c <emit_dac+0x108>
		length += dc_in_use[i] + ac_in_use[i];

	if (length) {
    a38c:	e0bff417 	ldw	r2,-48(fp)
    a390:	10004326 	beq	r2,zero,a4a0 <emit_dac+0x27c>
		emit_marker(cinfo, M_DAC);
    a394:	e13fff17 	ldw	r4,-4(fp)
    a398:	01403304 	movi	r5,204
    a39c:	0009dac0 	call	9dac <emit_marker>

		emit_2bytes(cinfo, length*2 + 2);
    a3a0:	e0bff417 	ldw	r2,-48(fp)
    a3a4:	10800044 	addi	r2,r2,1
    a3a8:	1085883a 	add	r2,r2,r2
    a3ac:	e13fff17 	ldw	r4,-4(fp)
    a3b0:	100b883a 	mov	r5,r2
    a3b4:	0009df40 	call	9df4 <emit_2bytes>

		for (i = 0; i < NUM_ARITH_TBLS; i++) {
    a3b8:	e03ff515 	stw	zero,-44(fp)
    a3bc:	00003506 	br	a494 <emit_dac+0x270>
			if (dc_in_use[i]) {
    a3c0:	e0fff704 	addi	r3,fp,-36
    a3c4:	e0bff517 	ldw	r2,-44(fp)
    a3c8:	1885883a 	add	r2,r3,r2
    a3cc:	10800003 	ldbu	r2,0(r2)
    a3d0:	10803fcc 	andi	r2,r2,255
    a3d4:	1080201c 	xori	r2,r2,128
    a3d8:	10bfe004 	addi	r2,r2,-128
    a3dc:	10001426 	beq	r2,zero,a430 <emit_dac+0x20c>
				emit_byte(cinfo, i);
    a3e0:	e13fff17 	ldw	r4,-4(fp)
    a3e4:	e17ff517 	ldw	r5,-44(fp)
    a3e8:	0009cfc0 	call	9cfc <emit_byte>
				emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
    a3ec:	e0ffff17 	ldw	r3,-4(fp)
    a3f0:	e0bff517 	ldw	r2,-44(fp)
    a3f4:	1885883a 	add	r2,r3,r2
    a3f8:	10802504 	addi	r2,r2,148
    a3fc:	10800003 	ldbu	r2,0(r2)
    a400:	10c03fcc 	andi	r3,r2,255
    a404:	e13fff17 	ldw	r4,-4(fp)
    a408:	e0bff517 	ldw	r2,-44(fp)
    a40c:	2085883a 	add	r2,r4,r2
    a410:	10802904 	addi	r2,r2,164
    a414:	10800003 	ldbu	r2,0(r2)
    a418:	10803fcc 	andi	r2,r2,255
    a41c:	1004913a 	slli	r2,r2,4
    a420:	1885883a 	add	r2,r3,r2
    a424:	e13fff17 	ldw	r4,-4(fp)
    a428:	100b883a 	mov	r5,r2
    a42c:	0009cfc0 	call	9cfc <emit_byte>
			}
			if (ac_in_use[i]) {
    a430:	e0fffb04 	addi	r3,fp,-20
    a434:	e0bff517 	ldw	r2,-44(fp)
    a438:	1885883a 	add	r2,r3,r2
    a43c:	10800003 	ldbu	r2,0(r2)
    a440:	10803fcc 	andi	r2,r2,255
    a444:	1080201c 	xori	r2,r2,128
    a448:	10bfe004 	addi	r2,r2,-128
    a44c:	10000e26 	beq	r2,zero,a488 <emit_dac+0x264>
				emit_byte(cinfo, i + 0x10);
    a450:	e0bff517 	ldw	r2,-44(fp)
    a454:	10800404 	addi	r2,r2,16
    a458:	e13fff17 	ldw	r4,-4(fp)
    a45c:	100b883a 	mov	r5,r2
    a460:	0009cfc0 	call	9cfc <emit_byte>
				emit_byte(cinfo, cinfo->arith_ac_K[i]);
    a464:	e0ffff17 	ldw	r3,-4(fp)
    a468:	e0bff517 	ldw	r2,-44(fp)
    a46c:	1885883a 	add	r2,r3,r2
    a470:	10802d04 	addi	r2,r2,180
    a474:	10800003 	ldbu	r2,0(r2)
    a478:	10803fcc 	andi	r2,r2,255
    a47c:	e13fff17 	ldw	r4,-4(fp)
    a480:	100b883a 	mov	r5,r2
    a484:	0009cfc0 	call	9cfc <emit_byte>
	if (length) {
		emit_marker(cinfo, M_DAC);

		emit_2bytes(cinfo, length*2 + 2);

		for (i = 0; i < NUM_ARITH_TBLS; i++) {
    a488:	e0bff517 	ldw	r2,-44(fp)
    a48c:	10800044 	addi	r2,r2,1
    a490:	e0bff515 	stw	r2,-44(fp)
    a494:	e0bff517 	ldw	r2,-44(fp)
    a498:	10800410 	cmplti	r2,r2,16
    a49c:	103fc81e 	bne	r2,zero,a3c0 <emit_dac+0x19c>
				emit_byte(cinfo, cinfo->arith_ac_K[i]);
			}
		}
	}
#endif /* C_ARITH_CODING_SUPPORTED */
}
    a4a0:	e037883a 	mov	sp,fp
    a4a4:	dfc00117 	ldw	ra,4(sp)
    a4a8:	df000017 	ldw	fp,0(sp)
    a4ac:	dec00204 	addi	sp,sp,8
    a4b0:	f800283a 	ret

0000a4b4 <emit_dri>:


LOCAL(void)
	emit_dri (j_compress_ptr cinfo)
	/* Emit a DRI marker */
{
    a4b4:	defffd04 	addi	sp,sp,-12
    a4b8:	dfc00215 	stw	ra,8(sp)
    a4bc:	df000115 	stw	fp,4(sp)
    a4c0:	df000104 	addi	fp,sp,4
    a4c4:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_DRI);
    a4c8:	e13fff17 	ldw	r4,-4(fp)
    a4cc:	01403744 	movi	r5,221
    a4d0:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 4);	/* fixed length */
    a4d4:	e13fff17 	ldw	r4,-4(fp)
    a4d8:	01400104 	movi	r5,4
    a4dc:	0009df40 	call	9df4 <emit_2bytes>

	emit_2bytes(cinfo, (int) cinfo->restart_interval);
    a4e0:	e0bfff17 	ldw	r2,-4(fp)
    a4e4:	10803717 	ldw	r2,220(r2)
    a4e8:	e13fff17 	ldw	r4,-4(fp)
    a4ec:	100b883a 	mov	r5,r2
    a4f0:	0009df40 	call	9df4 <emit_2bytes>
}
    a4f4:	e037883a 	mov	sp,fp
    a4f8:	dfc00117 	ldw	ra,4(sp)
    a4fc:	df000017 	ldw	fp,0(sp)
    a500:	dec00204 	addi	sp,sp,8
    a504:	f800283a 	ret

0000a508 <emit_sof>:


LOCAL(void)
	emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
	/* Emit a SOF marker */
{
    a508:	defffa04 	addi	sp,sp,-24
    a50c:	dfc00515 	stw	ra,20(sp)
    a510:	df000415 	stw	fp,16(sp)
    a514:	df000404 	addi	fp,sp,16
    a518:	e13ffe15 	stw	r4,-8(fp)
    a51c:	e17fff15 	stw	r5,-4(fp)
	int ci;
	jpeg_component_info *compptr;

	emit_marker(cinfo, code);
    a520:	e13ffe17 	ldw	r4,-8(fp)
    a524:	e17fff17 	ldw	r5,-4(fp)
    a528:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
    a52c:	e0bffe17 	ldw	r2,-8(fp)
    a530:	10c01217 	ldw	r3,72(r2)
    a534:	1805883a 	mov	r2,r3
    a538:	1085883a 	add	r2,r2,r2
    a53c:	10c5883a 	add	r2,r2,r3
    a540:	10800204 	addi	r2,r2,8
    a544:	e13ffe17 	ldw	r4,-8(fp)
    a548:	100b883a 	mov	r5,r2
    a54c:	0009df40 	call	9df4 <emit_2bytes>

	/* Make sure image isn't bigger than SOF field can handle */
	if ((long) cinfo->jpeg_height > 65535L ||
    a550:	e0bffe17 	ldw	r2,-8(fp)
    a554:	10801017 	ldw	r2,64(r2)
    a558:	00ffffd4 	movui	r3,65535
    a55c:	18800416 	blt	r3,r2,a570 <emit_sof+0x68>
		(long) cinfo->jpeg_width > 65535L)
    a560:	e0bffe17 	ldw	r2,-8(fp)
    a564:	10800f17 	ldw	r2,60(r2)
	emit_marker(cinfo, code);

	emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */

	/* Make sure image isn't bigger than SOF field can handle */
	if ((long) cinfo->jpeg_height > 65535L ||
    a568:	00ffffd4 	movui	r3,65535
    a56c:	18800d0e 	bge	r3,r2,a5a4 <emit_sof+0x9c>
		(long) cinfo->jpeg_width > 65535L)
		ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
    a570:	e0bffe17 	ldw	r2,-8(fp)
    a574:	10800017 	ldw	r2,0(r2)
    a578:	00c00a84 	movi	r3,42
    a57c:	10c00515 	stw	r3,20(r2)
    a580:	e0bffe17 	ldw	r2,-8(fp)
    a584:	10800017 	ldw	r2,0(r2)
    a588:	00ffffd4 	movui	r3,65535
    a58c:	10c00615 	stw	r3,24(r2)
    a590:	e0bffe17 	ldw	r2,-8(fp)
    a594:	10800017 	ldw	r2,0(r2)
    a598:	10800017 	ldw	r2,0(r2)
    a59c:	e13ffe17 	ldw	r4,-8(fp)
    a5a0:	103ee83a 	callr	r2

	emit_byte(cinfo, cinfo->data_precision);
    a5a4:	e0bffe17 	ldw	r2,-8(fp)
    a5a8:	10801117 	ldw	r2,68(r2)
    a5ac:	e13ffe17 	ldw	r4,-8(fp)
    a5b0:	100b883a 	mov	r5,r2
    a5b4:	0009cfc0 	call	9cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->jpeg_height);
    a5b8:	e0bffe17 	ldw	r2,-8(fp)
    a5bc:	10801017 	ldw	r2,64(r2)
    a5c0:	e13ffe17 	ldw	r4,-8(fp)
    a5c4:	100b883a 	mov	r5,r2
    a5c8:	0009df40 	call	9df4 <emit_2bytes>
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);
    a5cc:	e0bffe17 	ldw	r2,-8(fp)
    a5d0:	10800f17 	ldw	r2,60(r2)
    a5d4:	e13ffe17 	ldw	r4,-8(fp)
    a5d8:	100b883a 	mov	r5,r2
    a5dc:	0009df40 	call	9df4 <emit_2bytes>

	emit_byte(cinfo, cinfo->num_components);
    a5e0:	e0bffe17 	ldw	r2,-8(fp)
    a5e4:	10801217 	ldw	r2,72(r2)
    a5e8:	e13ffe17 	ldw	r4,-8(fp)
    a5ec:	100b883a 	mov	r5,r2
    a5f0:	0009cfc0 	call	9cfc <emit_byte>

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    a5f4:	e03ffc15 	stw	zero,-16(fp)
    a5f8:	e0bffe17 	ldw	r2,-8(fp)
    a5fc:	10801417 	ldw	r2,80(r2)
    a600:	e0bffd15 	stw	r2,-12(fp)
    a604:	00001906 	br	a66c <emit_sof+0x164>
		ci++, compptr++) {
			emit_byte(cinfo, compptr->component_id);
    a608:	e0bffd17 	ldw	r2,-12(fp)
    a60c:	10800017 	ldw	r2,0(r2)
    a610:	e13ffe17 	ldw	r4,-8(fp)
    a614:	100b883a 	mov	r5,r2
    a618:	0009cfc0 	call	9cfc <emit_byte>
			emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
    a61c:	e0bffd17 	ldw	r2,-12(fp)
    a620:	10800217 	ldw	r2,8(r2)
    a624:	1006913a 	slli	r3,r2,4
    a628:	e0bffd17 	ldw	r2,-12(fp)
    a62c:	10800317 	ldw	r2,12(r2)
    a630:	1885883a 	add	r2,r3,r2
    a634:	e13ffe17 	ldw	r4,-8(fp)
    a638:	100b883a 	mov	r5,r2
    a63c:	0009cfc0 	call	9cfc <emit_byte>
			emit_byte(cinfo, compptr->quant_tbl_no);
    a640:	e0bffd17 	ldw	r2,-12(fp)
    a644:	10800417 	ldw	r2,16(r2)
    a648:	e13ffe17 	ldw	r4,-8(fp)
    a64c:	100b883a 	mov	r5,r2
    a650:	0009cfc0 	call	9cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);

	emit_byte(cinfo, cinfo->num_components);

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    a654:	e0bffc17 	ldw	r2,-16(fp)
    a658:	10800044 	addi	r2,r2,1
    a65c:	e0bffc15 	stw	r2,-16(fp)
    a660:	e0bffd17 	ldw	r2,-12(fp)
    a664:	10801604 	addi	r2,r2,88
    a668:	e0bffd15 	stw	r2,-12(fp)
	emit_2bytes(cinfo, (int) cinfo->jpeg_height);
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);

	emit_byte(cinfo, cinfo->num_components);

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    a66c:	e0bffe17 	ldw	r2,-8(fp)
    a670:	10801217 	ldw	r2,72(r2)
    a674:	e0fffc17 	ldw	r3,-16(fp)
    a678:	18bfe316 	blt	r3,r2,a608 <emit_sof+0x100>
		ci++, compptr++) {
			emit_byte(cinfo, compptr->component_id);
			emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
			emit_byte(cinfo, compptr->quant_tbl_no);
	}
}
    a67c:	e037883a 	mov	sp,fp
    a680:	dfc00117 	ldw	ra,4(sp)
    a684:	df000017 	ldw	fp,0(sp)
    a688:	dec00204 	addi	sp,sp,8
    a68c:	f800283a 	ret

0000a690 <emit_sos>:


LOCAL(void)
	emit_sos (j_compress_ptr cinfo)
	/* Emit a SOS marker */
{
    a690:	defff904 	addi	sp,sp,-28
    a694:	dfc00615 	stw	ra,24(sp)
    a698:	df000515 	stw	fp,20(sp)
    a69c:	df000504 	addi	fp,sp,20
    a6a0:	e13fff15 	stw	r4,-4(fp)
	int i, td, ta;
	jpeg_component_info *compptr;

	emit_marker(cinfo, M_SOS);
    a6a4:	e13fff17 	ldw	r4,-4(fp)
    a6a8:	01403684 	movi	r5,218
    a6ac:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	10804317 	ldw	r2,268(r2)
    a6b8:	108000c4 	addi	r2,r2,3
    a6bc:	1085883a 	add	r2,r2,r2
    a6c0:	e13fff17 	ldw	r4,-4(fp)
    a6c4:	100b883a 	mov	r5,r2
    a6c8:	0009df40 	call	9df4 <emit_2bytes>

	emit_byte(cinfo, cinfo->comps_in_scan);
    a6cc:	e0bfff17 	ldw	r2,-4(fp)
    a6d0:	10804317 	ldw	r2,268(r2)
    a6d4:	e13fff17 	ldw	r4,-4(fp)
    a6d8:	100b883a 	mov	r5,r2
    a6dc:	0009cfc0 	call	9cfc <emit_byte>

	for (i = 0; i < cinfo->comps_in_scan; i++) {
    a6e0:	e03ffb15 	stw	zero,-20(fp)
    a6e4:	00002a06 	br	a790 <emit_sos+0x100>
		compptr = cinfo->cur_comp_info[i];
    a6e8:	e0ffff17 	ldw	r3,-4(fp)
    a6ec:	e0bffb17 	ldw	r2,-20(fp)
    a6f0:	10801104 	addi	r2,r2,68
    a6f4:	1085883a 	add	r2,r2,r2
    a6f8:	1085883a 	add	r2,r2,r2
    a6fc:	1885883a 	add	r2,r3,r2
    a700:	10800017 	ldw	r2,0(r2)
    a704:	e0bffc15 	stw	r2,-16(fp)
		emit_byte(cinfo, compptr->component_id);
    a708:	e0bffc17 	ldw	r2,-16(fp)
    a70c:	10800017 	ldw	r2,0(r2)
    a710:	e13fff17 	ldw	r4,-4(fp)
    a714:	100b883a 	mov	r5,r2
    a718:	0009cfc0 	call	9cfc <emit_byte>
		/* We emit 0 for unused field(s); this is recommended by the P&M text
		* but does not seem to be specified in the standard.
		*/

		/* DC needs no table for refinement scan */
		td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
    a71c:	e0bfff17 	ldw	r2,-4(fp)
    a720:	10805517 	ldw	r2,340(r2)
    a724:	1000061e 	bne	r2,zero,a740 <emit_sos+0xb0>
    a728:	e0bfff17 	ldw	r2,-4(fp)
    a72c:	10805717 	ldw	r2,348(r2)
    a730:	1000031e 	bne	r2,zero,a740 <emit_sos+0xb0>
    a734:	e0bffc17 	ldw	r2,-16(fp)
    a738:	10800517 	ldw	r2,20(r2)
    a73c:	00000106 	br	a744 <emit_sos+0xb4>
    a740:	0005883a 	mov	r2,zero
    a744:	e0bffd15 	stw	r2,-12(fp)
		/* AC needs no table when not present */
		ta = cinfo->Se ? compptr->ac_tbl_no : 0;
    a748:	e0bfff17 	ldw	r2,-4(fp)
    a74c:	10805617 	ldw	r2,344(r2)
    a750:	10000326 	beq	r2,zero,a760 <emit_sos+0xd0>
    a754:	e0bffc17 	ldw	r2,-16(fp)
    a758:	10800617 	ldw	r2,24(r2)
    a75c:	00000106 	br	a764 <emit_sos+0xd4>
    a760:	0005883a 	mov	r2,zero
    a764:	e0bffe15 	stw	r2,-8(fp)

		emit_byte(cinfo, (td << 4) + ta);
    a768:	e0bffd17 	ldw	r2,-12(fp)
    a76c:	1006913a 	slli	r3,r2,4
    a770:	e0bffe17 	ldw	r2,-8(fp)
    a774:	1885883a 	add	r2,r3,r2
    a778:	e13fff17 	ldw	r4,-4(fp)
    a77c:	100b883a 	mov	r5,r2
    a780:	0009cfc0 	call	9cfc <emit_byte>

	emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */

	emit_byte(cinfo, cinfo->comps_in_scan);

	for (i = 0; i < cinfo->comps_in_scan; i++) {
    a784:	e0bffb17 	ldw	r2,-20(fp)
    a788:	10800044 	addi	r2,r2,1
    a78c:	e0bffb15 	stw	r2,-20(fp)
    a790:	e0bfff17 	ldw	r2,-4(fp)
    a794:	10804317 	ldw	r2,268(r2)
    a798:	e0fffb17 	ldw	r3,-20(fp)
    a79c:	18bfd216 	blt	r3,r2,a6e8 <emit_sos+0x58>
		ta = cinfo->Se ? compptr->ac_tbl_no : 0;

		emit_byte(cinfo, (td << 4) + ta);
	}

	emit_byte(cinfo, cinfo->Ss);
    a7a0:	e0bfff17 	ldw	r2,-4(fp)
    a7a4:	10805517 	ldw	r2,340(r2)
    a7a8:	e13fff17 	ldw	r4,-4(fp)
    a7ac:	100b883a 	mov	r5,r2
    a7b0:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, cinfo->Se);
    a7b4:	e0bfff17 	ldw	r2,-4(fp)
    a7b8:	10805617 	ldw	r2,344(r2)
    a7bc:	e13fff17 	ldw	r4,-4(fp)
    a7c0:	100b883a 	mov	r5,r2
    a7c4:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
    a7c8:	e0bfff17 	ldw	r2,-4(fp)
    a7cc:	10805717 	ldw	r2,348(r2)
    a7d0:	1006913a 	slli	r3,r2,4
    a7d4:	e0bfff17 	ldw	r2,-4(fp)
    a7d8:	10805817 	ldw	r2,352(r2)
    a7dc:	1885883a 	add	r2,r3,r2
    a7e0:	e13fff17 	ldw	r4,-4(fp)
    a7e4:	100b883a 	mov	r5,r2
    a7e8:	0009cfc0 	call	9cfc <emit_byte>
}
    a7ec:	e037883a 	mov	sp,fp
    a7f0:	dfc00117 	ldw	ra,4(sp)
    a7f4:	df000017 	ldw	fp,0(sp)
    a7f8:	dec00204 	addi	sp,sp,8
    a7fc:	f800283a 	ret

0000a800 <emit_pseudo_sos>:


LOCAL(void)
	emit_pseudo_sos (j_compress_ptr cinfo)
	/* Emit a pseudo SOS marker */
{
    a800:	defffd04 	addi	sp,sp,-12
    a804:	dfc00215 	stw	ra,8(sp)
    a808:	df000115 	stw	fp,4(sp)
    a80c:	df000104 	addi	fp,sp,4
    a810:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_SOS);
    a814:	e13fff17 	ldw	r4,-4(fp)
    a818:	01403684 	movi	r5,218
    a81c:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 2 + 1 + 3); /* length */
    a820:	e13fff17 	ldw	r4,-4(fp)
    a824:	01400184 	movi	r5,6
    a828:	0009df40 	call	9df4 <emit_2bytes>

	emit_byte(cinfo, 0); /* Ns */
    a82c:	e13fff17 	ldw	r4,-4(fp)
    a830:	000b883a 	mov	r5,zero
    a834:	0009cfc0 	call	9cfc <emit_byte>

	emit_byte(cinfo, 0); /* Ss */
    a838:	e13fff17 	ldw	r4,-4(fp)
    a83c:	000b883a 	mov	r5,zero
    a840:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, cinfo->block_size * cinfo->block_size - 1); /* Se */
    a844:	e0bfff17 	ldw	r2,-4(fp)
    a848:	10c05917 	ldw	r3,356(r2)
    a84c:	e0bfff17 	ldw	r2,-4(fp)
    a850:	10805917 	ldw	r2,356(r2)
    a854:	1809883a 	mov	r4,r3
    a858:	100b883a 	mov	r5,r2
    a85c:	002c1540 	call	2c154 <__mulsi3>
    a860:	10bfffc4 	addi	r2,r2,-1
    a864:	e13fff17 	ldw	r4,-4(fp)
    a868:	100b883a 	mov	r5,r2
    a86c:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0); /* Ah/Al */
    a870:	e13fff17 	ldw	r4,-4(fp)
    a874:	000b883a 	mov	r5,zero
    a878:	0009cfc0 	call	9cfc <emit_byte>
}
    a87c:	e037883a 	mov	sp,fp
    a880:	dfc00117 	ldw	ra,4(sp)
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00204 	addi	sp,sp,8
    a88c:	f800283a 	ret

0000a890 <emit_jfif_app0>:


LOCAL(void)
	emit_jfif_app0 (j_compress_ptr cinfo)
	/* Emit a JFIF-compliant APP0 marker */
{
    a890:	defffd04 	addi	sp,sp,-12
    a894:	dfc00215 	stw	ra,8(sp)
    a898:	df000115 	stw	fp,4(sp)
    a89c:	df000104 	addi	fp,sp,4
    a8a0:	e13fff15 	stw	r4,-4(fp)
	* Ydpu			(2 bytes - dots per unit vertical)
	* Thumbnail X size		(1 byte)
	* Thumbnail Y size		(1 byte)
	*/

	emit_marker(cinfo, M_APP0);
    a8a4:	e13fff17 	ldw	r4,-4(fp)
    a8a8:	01403804 	movi	r5,224
    a8ac:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
    a8b0:	e13fff17 	ldw	r4,-4(fp)
    a8b4:	01400404 	movi	r5,16
    a8b8:	0009df40 	call	9df4 <emit_2bytes>

	emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
    a8bc:	e13fff17 	ldw	r4,-4(fp)
    a8c0:	01401284 	movi	r5,74
    a8c4:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x46);
    a8c8:	e13fff17 	ldw	r4,-4(fp)
    a8cc:	01401184 	movi	r5,70
    a8d0:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x49);
    a8d4:	e13fff17 	ldw	r4,-4(fp)
    a8d8:	01401244 	movi	r5,73
    a8dc:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x46);
    a8e0:	e13fff17 	ldw	r4,-4(fp)
    a8e4:	01401184 	movi	r5,70
    a8e8:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0);
    a8ec:	e13fff17 	ldw	r4,-4(fp)
    a8f0:	000b883a 	mov	r5,zero
    a8f4:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
    a8f8:	e0bfff17 	ldw	r2,-4(fp)
    a8fc:	10803943 	ldbu	r2,229(r2)
    a900:	10803fcc 	andi	r2,r2,255
    a904:	e13fff17 	ldw	r4,-4(fp)
    a908:	100b883a 	mov	r5,r2
    a90c:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, cinfo->JFIF_minor_version);
    a910:	e0bfff17 	ldw	r2,-4(fp)
    a914:	10803983 	ldbu	r2,230(r2)
    a918:	10803fcc 	andi	r2,r2,255
    a91c:	e13fff17 	ldw	r4,-4(fp)
    a920:	100b883a 	mov	r5,r2
    a924:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
    a928:	e0bfff17 	ldw	r2,-4(fp)
    a92c:	108039c3 	ldbu	r2,231(r2)
    a930:	10803fcc 	andi	r2,r2,255
    a934:	e13fff17 	ldw	r4,-4(fp)
    a938:	100b883a 	mov	r5,r2
    a93c:	0009cfc0 	call	9cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->X_density);
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	10803a0b 	ldhu	r2,232(r2)
    a948:	10bfffcc 	andi	r2,r2,65535
    a94c:	e13fff17 	ldw	r4,-4(fp)
    a950:	100b883a 	mov	r5,r2
    a954:	0009df40 	call	9df4 <emit_2bytes>
	emit_2bytes(cinfo, (int) cinfo->Y_density);
    a958:	e0bfff17 	ldw	r2,-4(fp)
    a95c:	10803a8b 	ldhu	r2,234(r2)
    a960:	10bfffcc 	andi	r2,r2,65535
    a964:	e13fff17 	ldw	r4,-4(fp)
    a968:	100b883a 	mov	r5,r2
    a96c:	0009df40 	call	9df4 <emit_2bytes>
	emit_byte(cinfo, 0);		/* No thumbnail image */
    a970:	e13fff17 	ldw	r4,-4(fp)
    a974:	000b883a 	mov	r5,zero
    a978:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0);
    a97c:	e13fff17 	ldw	r4,-4(fp)
    a980:	000b883a 	mov	r5,zero
    a984:	0009cfc0 	call	9cfc <emit_byte>
}
    a988:	e037883a 	mov	sp,fp
    a98c:	dfc00117 	ldw	ra,4(sp)
    a990:	df000017 	ldw	fp,0(sp)
    a994:	dec00204 	addi	sp,sp,8
    a998:	f800283a 	ret

0000a99c <emit_adobe_app14>:


LOCAL(void)
	emit_adobe_app14 (j_compress_ptr cinfo)
	/* Emit an Adobe APP14 marker */
{
    a99c:	defffd04 	addi	sp,sp,-12
    a9a0:	dfc00215 	stw	ra,8(sp)
    a9a4:	df000115 	stw	fp,4(sp)
    a9a8:	df000104 	addi	fp,sp,4
    a9ac:	e13fff15 	stw	r4,-4(fp)
	* We write the color transform byte as 1 if the JPEG color space is
	* YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
	* whether the encoder performed a transformation, which is pretty useless.
	*/

	emit_marker(cinfo, M_APP14);
    a9b0:	e13fff17 	ldw	r4,-4(fp)
    a9b4:	01403b84 	movi	r5,238
    a9b8:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
    a9bc:	e13fff17 	ldw	r4,-4(fp)
    a9c0:	01400384 	movi	r5,14
    a9c4:	0009df40 	call	9df4 <emit_2bytes>

	emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
    a9c8:	e13fff17 	ldw	r4,-4(fp)
    a9cc:	01401044 	movi	r5,65
    a9d0:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x64);
    a9d4:	e13fff17 	ldw	r4,-4(fp)
    a9d8:	01401904 	movi	r5,100
    a9dc:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x6F);
    a9e0:	e13fff17 	ldw	r4,-4(fp)
    a9e4:	01401bc4 	movi	r5,111
    a9e8:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x62);
    a9ec:	e13fff17 	ldw	r4,-4(fp)
    a9f0:	01401884 	movi	r5,98
    a9f4:	0009cfc0 	call	9cfc <emit_byte>
	emit_byte(cinfo, 0x65);
    a9f8:	e13fff17 	ldw	r4,-4(fp)
    a9fc:	01401944 	movi	r5,101
    aa00:	0009cfc0 	call	9cfc <emit_byte>
	emit_2bytes(cinfo, 100);	/* Version */
    aa04:	e13fff17 	ldw	r4,-4(fp)
    aa08:	01401904 	movi	r5,100
    aa0c:	0009df40 	call	9df4 <emit_2bytes>
	emit_2bytes(cinfo, 0);	/* Flags0 */
    aa10:	e13fff17 	ldw	r4,-4(fp)
    aa14:	000b883a 	mov	r5,zero
    aa18:	0009df40 	call	9df4 <emit_2bytes>
	emit_2bytes(cinfo, 0);	/* Flags1 */
    aa1c:	e13fff17 	ldw	r4,-4(fp)
    aa20:	000b883a 	mov	r5,zero
    aa24:	0009df40 	call	9df4 <emit_2bytes>
	switch (cinfo->jpeg_color_space) {
    aa28:	e0bfff17 	ldw	r2,-4(fp)
    aa2c:	10801317 	ldw	r2,76(r2)
    aa30:	10c000e0 	cmpeqi	r3,r2,3
    aa34:	1800031e 	bne	r3,zero,aa44 <emit_adobe_app14+0xa8>
    aa38:	10800160 	cmpeqi	r2,r2,5
    aa3c:	1000051e 	bne	r2,zero,aa54 <emit_adobe_app14+0xb8>
    aa40:	00000806 	br	aa64 <emit_adobe_app14+0xc8>
	case JCS_YCbCr:
		emit_byte(cinfo, 1);	/* Color transform = 1 */
    aa44:	e13fff17 	ldw	r4,-4(fp)
    aa48:	01400044 	movi	r5,1
    aa4c:	0009cfc0 	call	9cfc <emit_byte>
		break;
    aa50:	00000806 	br	aa74 <emit_adobe_app14+0xd8>
	case JCS_YCCK:
		emit_byte(cinfo, 2);	/* Color transform = 2 */
    aa54:	e13fff17 	ldw	r4,-4(fp)
    aa58:	01400084 	movi	r5,2
    aa5c:	0009cfc0 	call	9cfc <emit_byte>
		break;
    aa60:	00000406 	br	aa74 <emit_adobe_app14+0xd8>
	default:
		emit_byte(cinfo, 0);	/* Color transform = 0 */
    aa64:	e13fff17 	ldw	r4,-4(fp)
    aa68:	000b883a 	mov	r5,zero
    aa6c:	0009cfc0 	call	9cfc <emit_byte>
		break;
    aa70:	0001883a 	nop
	}
}
    aa74:	e037883a 	mov	sp,fp
    aa78:	dfc00117 	ldw	ra,4(sp)
    aa7c:	df000017 	ldw	fp,0(sp)
    aa80:	dec00204 	addi	sp,sp,8
    aa84:	f800283a 	ret

0000aa88 <write_marker_header>:
*/

METHODDEF(void)
	write_marker_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
	/* Emit an arbitrary marker header */
{
    aa88:	defffb04 	addi	sp,sp,-20
    aa8c:	dfc00415 	stw	ra,16(sp)
    aa90:	df000315 	stw	fp,12(sp)
    aa94:	df000304 	addi	fp,sp,12
    aa98:	e13ffd15 	stw	r4,-12(fp)
    aa9c:	e17ffe15 	stw	r5,-8(fp)
    aaa0:	e1bfff15 	stw	r6,-4(fp)
	if (datalen > (unsigned int) 65533)		/* safety check */
    aaa4:	e0bfff17 	ldw	r2,-4(fp)
    aaa8:	10bfffb0 	cmpltui	r2,r2,65534
    aaac:	1000091e 	bne	r2,zero,aad4 <write_marker_header+0x4c>
		ERREXIT(cinfo, JERR_BAD_LENGTH);
    aab0:	e0bffd17 	ldw	r2,-12(fp)
    aab4:	10800017 	ldw	r2,0(r2)
    aab8:	00c00304 	movi	r3,12
    aabc:	10c00515 	stw	r3,20(r2)
    aac0:	e0bffd17 	ldw	r2,-12(fp)
    aac4:	10800017 	ldw	r2,0(r2)
    aac8:	10800017 	ldw	r2,0(r2)
    aacc:	e13ffd17 	ldw	r4,-12(fp)
    aad0:	103ee83a 	callr	r2

	emit_marker(cinfo, (JPEG_MARKER) marker);
    aad4:	e0bffe17 	ldw	r2,-8(fp)
    aad8:	e13ffd17 	ldw	r4,-12(fp)
    aadc:	100b883a 	mov	r5,r2
    aae0:	0009dac0 	call	9dac <emit_marker>

	emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
    aae4:	e0bfff17 	ldw	r2,-4(fp)
    aae8:	10800084 	addi	r2,r2,2
    aaec:	e13ffd17 	ldw	r4,-12(fp)
    aaf0:	100b883a 	mov	r5,r2
    aaf4:	0009df40 	call	9df4 <emit_2bytes>
}
    aaf8:	e037883a 	mov	sp,fp
    aafc:	dfc00117 	ldw	ra,4(sp)
    ab00:	df000017 	ldw	fp,0(sp)
    ab04:	dec00204 	addi	sp,sp,8
    ab08:	f800283a 	ret

0000ab0c <write_marker_byte>:

METHODDEF(void)
	write_marker_byte (j_compress_ptr cinfo, int val)
	/* Emit one byte of marker parameters following write_marker_header */
{
    ab0c:	defffc04 	addi	sp,sp,-16
    ab10:	dfc00315 	stw	ra,12(sp)
    ab14:	df000215 	stw	fp,8(sp)
    ab18:	df000204 	addi	fp,sp,8
    ab1c:	e13ffe15 	stw	r4,-8(fp)
    ab20:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, val);
    ab24:	e13ffe17 	ldw	r4,-8(fp)
    ab28:	e17fff17 	ldw	r5,-4(fp)
    ab2c:	0009cfc0 	call	9cfc <emit_byte>
}
    ab30:	e037883a 	mov	sp,fp
    ab34:	dfc00117 	ldw	ra,4(sp)
    ab38:	df000017 	ldw	fp,0(sp)
    ab3c:	dec00204 	addi	sp,sp,8
    ab40:	f800283a 	ret

0000ab44 <write_file_header>:
* jpeg_start_compress returns.
*/

METHODDEF(void)
	write_file_header (j_compress_ptr cinfo)
{
    ab44:	defffc04 	addi	sp,sp,-16
    ab48:	dfc00315 	stw	ra,12(sp)
    ab4c:	df000215 	stw	fp,8(sp)
    ab50:	df000204 	addi	fp,sp,8
    ab54:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
    ab58:	e0bfff17 	ldw	r2,-4(fp)
    ab5c:	10806017 	ldw	r2,384(r2)
    ab60:	e0bffe15 	stw	r2,-8(fp)

	emit_marker(cinfo, M_SOI);	/* first the SOI */
    ab64:	e13fff17 	ldw	r4,-4(fp)
    ab68:	01403604 	movi	r5,216
    ab6c:	0009dac0 	call	9dac <emit_marker>

	/* SOI is defined to reset restart interval to 0 */
	marker->last_restart_interval = 0;
    ab70:	e0bffe17 	ldw	r2,-8(fp)
    ab74:	10000715 	stw	zero,28(r2)

	if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
    ab78:	e0bfff17 	ldw	r2,-4(fp)
    ab7c:	10803903 	ldbu	r2,228(r2)
    ab80:	10803fcc 	andi	r2,r2,255
    ab84:	10000226 	beq	r2,zero,ab90 <write_file_header+0x4c>
		emit_jfif_app0(cinfo);
    ab88:	e13fff17 	ldw	r4,-4(fp)
    ab8c:	000a8900 	call	a890 <emit_jfif_app0>
	if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
    ab90:	e0bfff17 	ldw	r2,-4(fp)
    ab94:	10803b03 	ldbu	r2,236(r2)
    ab98:	10803fcc 	andi	r2,r2,255
    ab9c:	10000226 	beq	r2,zero,aba8 <write_file_header+0x64>
		emit_adobe_app14(cinfo);
    aba0:	e13fff17 	ldw	r4,-4(fp)
    aba4:	000a99c0 	call	a99c <emit_adobe_app14>
}
    aba8:	e037883a 	mov	sp,fp
    abac:	dfc00117 	ldw	ra,4(sp)
    abb0:	df000017 	ldw	fp,0(sp)
    abb4:	dec00204 	addi	sp,sp,8
    abb8:	f800283a 	ret

0000abbc <write_frame_header>:
* try to error-check the quant table numbers as soon as they see the SOF.
*/

METHODDEF(void)
	write_frame_header (j_compress_ptr cinfo)
{
    abbc:	defff904 	addi	sp,sp,-28
    abc0:	dfc00615 	stw	ra,24(sp)
    abc4:	df000515 	stw	fp,20(sp)
    abc8:	df000504 	addi	fp,sp,20
    abcc:	e13fff15 	stw	r4,-4(fp)
	jpeg_component_info *compptr;

	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
    abd0:	e03ffc15 	stw	zero,-16(fp)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    abd4:	e03ffb15 	stw	zero,-20(fp)
    abd8:	e0bfff17 	ldw	r2,-4(fp)
    abdc:	10801417 	ldw	r2,80(r2)
    abe0:	e0bffe15 	stw	r2,-8(fp)
    abe4:	00000e06 	br	ac20 <write_frame_header+0x64>
		ci++, compptr++) {
			prec += emit_dqt(cinfo, compptr->quant_tbl_no);
    abe8:	e0bffe17 	ldw	r2,-8(fp)
    abec:	10800417 	ldw	r2,16(r2)
    abf0:	e13fff17 	ldw	r4,-4(fp)
    abf4:	100b883a 	mov	r5,r2
    abf8:	0009e4c0 	call	9e4c <emit_dqt>
    abfc:	e0fffc17 	ldw	r3,-16(fp)
    ac00:	1885883a 	add	r2,r3,r2
    ac04:	e0bffc15 	stw	r2,-16(fp)
	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    ac08:	e0bffb17 	ldw	r2,-20(fp)
    ac0c:	10800044 	addi	r2,r2,1
    ac10:	e0bffb15 	stw	r2,-20(fp)
    ac14:	e0bffe17 	ldw	r2,-8(fp)
    ac18:	10801604 	addi	r2,r2,88
    ac1c:	e0bffe15 	stw	r2,-8(fp)

	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    ac20:	e0bfff17 	ldw	r2,-4(fp)
    ac24:	10801217 	ldw	r2,72(r2)
    ac28:	e0fffb17 	ldw	r3,-20(fp)
    ac2c:	18bfee16 	blt	r3,r2,abe8 <write_frame_header+0x2c>
	/* now prec is nonzero iff there are any 16-bit quant tables. */

	/* Check for a non-baseline specification.
	* Note we assume that Huffman table numbers won't be changed later.
	*/
	if (cinfo->arith_code || cinfo->progressive_mode ||
    ac30:	e0bfff17 	ldw	r2,-4(fp)
    ac34:	10803343 	ldbu	r2,205(r2)
    ac38:	10803fcc 	andi	r2,r2,255
    ac3c:	10000c1e 	bne	r2,zero,ac70 <write_frame_header+0xb4>
    ac40:	e0bfff17 	ldw	r2,-4(fp)
    ac44:	10803d03 	ldbu	r2,244(r2)
    ac48:	10803fcc 	andi	r2,r2,255
    ac4c:	1000081e 	bne	r2,zero,ac70 <write_frame_header+0xb4>
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
    ac50:	e0bfff17 	ldw	r2,-4(fp)
    ac54:	10801117 	ldw	r2,68(r2)
	/* now prec is nonzero iff there are any 16-bit quant tables. */

	/* Check for a non-baseline specification.
	* Note we assume that Huffman table numbers won't be changed later.
	*/
	if (cinfo->arith_code || cinfo->progressive_mode ||
    ac58:	10800218 	cmpnei	r2,r2,8
    ac5c:	1000041e 	bne	r2,zero,ac70 <write_frame_header+0xb4>
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
    ac60:	e0bfff17 	ldw	r2,-4(fp)
    ac64:	10805917 	ldw	r2,356(r2)
    ac68:	10800220 	cmpeqi	r2,r2,8
    ac6c:	1000021e 	bne	r2,zero,ac78 <write_frame_header+0xbc>
			is_baseline = FALSE;
    ac70:	e03ffd05 	stb	zero,-12(fp)
    ac74:	00002906 	br	ad1c <write_frame_header+0x160>
	} else {
		is_baseline = TRUE;
    ac78:	00800044 	movi	r2,1
    ac7c:	e0bffd05 	stb	r2,-12(fp)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    ac80:	e03ffb15 	stw	zero,-20(fp)
    ac84:	e0bfff17 	ldw	r2,-4(fp)
    ac88:	10801417 	ldw	r2,80(r2)
    ac8c:	e0bffe15 	stw	r2,-8(fp)
    ac90:	00000f06 	br	acd0 <write_frame_header+0x114>
			ci++, compptr++) {
				if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
    ac94:	e0bffe17 	ldw	r2,-8(fp)
    ac98:	10800517 	ldw	r2,20(r2)
    ac9c:	10800088 	cmpgei	r2,r2,2
    aca0:	1000041e 	bne	r2,zero,acb4 <write_frame_header+0xf8>
    aca4:	e0bffe17 	ldw	r2,-8(fp)
    aca8:	10800617 	ldw	r2,24(r2)
    acac:	10800090 	cmplti	r2,r2,2
    acb0:	1000011e 	bne	r2,zero,acb8 <write_frame_header+0xfc>
					is_baseline = FALSE;
    acb4:	e03ffd05 	stb	zero,-12(fp)
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
			is_baseline = FALSE;
	} else {
		is_baseline = TRUE;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
    acb8:	e0bffb17 	ldw	r2,-20(fp)
    acbc:	10800044 	addi	r2,r2,1
    acc0:	e0bffb15 	stw	r2,-20(fp)
    acc4:	e0bffe17 	ldw	r2,-8(fp)
    acc8:	10801604 	addi	r2,r2,88
    accc:	e0bffe15 	stw	r2,-8(fp)
	if (cinfo->arith_code || cinfo->progressive_mode ||
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
			is_baseline = FALSE;
	} else {
		is_baseline = TRUE;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    acd0:	e0bfff17 	ldw	r2,-4(fp)
    acd4:	10801217 	ldw	r2,72(r2)
    acd8:	e0fffb17 	ldw	r3,-20(fp)
    acdc:	18bfed16 	blt	r3,r2,ac94 <write_frame_header+0xd8>
			ci++, compptr++) {
				if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
					is_baseline = FALSE;
		}
		if (prec && is_baseline) {
    ace0:	e0bffc17 	ldw	r2,-16(fp)
    ace4:	10000d26 	beq	r2,zero,ad1c <write_frame_header+0x160>
    ace8:	e0bffd03 	ldbu	r2,-12(fp)
    acec:	10000b26 	beq	r2,zero,ad1c <write_frame_header+0x160>
			is_baseline = FALSE;
    acf0:	e03ffd05 	stb	zero,-12(fp)
			/* If it's baseline except for quantizer size, warn the user */
			TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
    acf4:	e0bfff17 	ldw	r2,-4(fp)
    acf8:	10800017 	ldw	r2,0(r2)
    acfc:	00c01344 	movi	r3,77
    ad00:	10c00515 	stw	r3,20(r2)
    ad04:	e0bfff17 	ldw	r2,-4(fp)
    ad08:	10800017 	ldw	r2,0(r2)
    ad0c:	10800117 	ldw	r2,4(r2)
    ad10:	e13fff17 	ldw	r4,-4(fp)
    ad14:	000b883a 	mov	r5,zero
    ad18:	103ee83a 	callr	r2
		}
	}

	/* Emit the proper SOF marker */
	if (cinfo->arith_code) {
    ad1c:	e0bfff17 	ldw	r2,-4(fp)
    ad20:	10803343 	ldbu	r2,205(r2)
    ad24:	10803fcc 	andi	r2,r2,255
    ad28:	10000c26 	beq	r2,zero,ad5c <write_frame_header+0x1a0>
		if (cinfo->progressive_mode)
    ad2c:	e0bfff17 	ldw	r2,-4(fp)
    ad30:	10803d03 	ldbu	r2,244(r2)
    ad34:	10803fcc 	andi	r2,r2,255
    ad38:	10000426 	beq	r2,zero,ad4c <write_frame_header+0x190>
			emit_sof(cinfo, M_SOF10); /* SOF code for progressive arithmetic */
    ad3c:	e13fff17 	ldw	r4,-4(fp)
    ad40:	01403284 	movi	r5,202
    ad44:	000a5080 	call	a508 <emit_sof>
    ad48:	00001506 	br	ada0 <write_frame_header+0x1e4>
		else
			emit_sof(cinfo, M_SOF9);  /* SOF code for sequential arithmetic */
    ad4c:	e13fff17 	ldw	r4,-4(fp)
    ad50:	01403244 	movi	r5,201
    ad54:	000a5080 	call	a508 <emit_sof>
    ad58:	00001106 	br	ada0 <write_frame_header+0x1e4>
	} else {
		if (cinfo->progressive_mode)
    ad5c:	e0bfff17 	ldw	r2,-4(fp)
    ad60:	10803d03 	ldbu	r2,244(r2)
    ad64:	10803fcc 	andi	r2,r2,255
    ad68:	10000426 	beq	r2,zero,ad7c <write_frame_header+0x1c0>
			emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
    ad6c:	e13fff17 	ldw	r4,-4(fp)
    ad70:	01403084 	movi	r5,194
    ad74:	000a5080 	call	a508 <emit_sof>
    ad78:	00000906 	br	ada0 <write_frame_header+0x1e4>
		else if (is_baseline)
    ad7c:	e0bffd03 	ldbu	r2,-12(fp)
    ad80:	10000426 	beq	r2,zero,ad94 <write_frame_header+0x1d8>
			emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
    ad84:	e13fff17 	ldw	r4,-4(fp)
    ad88:	01403004 	movi	r5,192
    ad8c:	000a5080 	call	a508 <emit_sof>
    ad90:	00000306 	br	ada0 <write_frame_header+0x1e4>
		else
			emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
    ad94:	e13fff17 	ldw	r4,-4(fp)
    ad98:	01403044 	movi	r5,193
    ad9c:	000a5080 	call	a508 <emit_sof>
	}

	/* Check to emit pseudo SOS marker */
	if (cinfo->progressive_mode && cinfo->block_size != DCTSIZE)
    ada0:	e0bfff17 	ldw	r2,-4(fp)
    ada4:	10803d03 	ldbu	r2,244(r2)
    ada8:	10803fcc 	andi	r2,r2,255
    adac:	10000626 	beq	r2,zero,adc8 <write_frame_header+0x20c>
    adb0:	e0bfff17 	ldw	r2,-4(fp)
    adb4:	10805917 	ldw	r2,356(r2)
    adb8:	10800220 	cmpeqi	r2,r2,8
    adbc:	1000021e 	bne	r2,zero,adc8 <write_frame_header+0x20c>
		emit_pseudo_sos(cinfo);
    adc0:	e13fff17 	ldw	r4,-4(fp)
    adc4:	000a8000 	call	a800 <emit_pseudo_sos>
}
    adc8:	e037883a 	mov	sp,fp
    adcc:	dfc00117 	ldw	ra,4(sp)
    add0:	df000017 	ldw	fp,0(sp)
    add4:	dec00204 	addi	sp,sp,8
    add8:	f800283a 	ret

0000addc <write_scan_header>:
* Compressed data will be written following the SOS.
*/

METHODDEF(void)
	write_scan_header (j_compress_ptr cinfo)
{
    addc:	defffa04 	addi	sp,sp,-24
    ade0:	dfc00515 	stw	ra,20(sp)
    ade4:	df000415 	stw	fp,16(sp)
    ade8:	df000404 	addi	fp,sp,16
    adec:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	10806017 	ldw	r2,384(r2)
    adf8:	e0bffd15 	stw	r2,-12(fp)
	int i;
	jpeg_component_info *compptr;

	if (cinfo->arith_code) {
    adfc:	e0bfff17 	ldw	r2,-4(fp)
    ae00:	10803343 	ldbu	r2,205(r2)
    ae04:	10803fcc 	andi	r2,r2,255
    ae08:	10000326 	beq	r2,zero,ae18 <write_scan_header+0x3c>
		/* Emit arith conditioning info.  We may have some duplication
		* if the file has multiple scans, but it's so small it's hardly
		* worth worrying about.
		*/
		emit_dac(cinfo);
    ae0c:	e13fff17 	ldw	r4,-4(fp)
    ae10:	000a2240 	call	a224 <emit_dac>
    ae14:	00002606 	br	aeb0 <write_scan_header+0xd4>
	} else {
		/* Emit Huffman tables.
		* Note that emit_dht() suppresses any duplicate tables.
		*/
		for (i = 0; i < cinfo->comps_in_scan; i++) {
    ae18:	e03ffc15 	stw	zero,-16(fp)
    ae1c:	00002006 	br	aea0 <write_scan_header+0xc4>
			compptr = cinfo->cur_comp_info[i];
    ae20:	e0ffff17 	ldw	r3,-4(fp)
    ae24:	e0bffc17 	ldw	r2,-16(fp)
    ae28:	10801104 	addi	r2,r2,68
    ae2c:	1085883a 	add	r2,r2,r2
    ae30:	1085883a 	add	r2,r2,r2
    ae34:	1885883a 	add	r2,r3,r2
    ae38:	10800017 	ldw	r2,0(r2)
    ae3c:	e0bffe15 	stw	r2,-8(fp)
			/* DC needs no table for refinement scan */
			if (cinfo->Ss == 0 && cinfo->Ah == 0)
    ae40:	e0bfff17 	ldw	r2,-4(fp)
    ae44:	10805517 	ldw	r2,340(r2)
    ae48:	1000091e 	bne	r2,zero,ae70 <write_scan_header+0x94>
    ae4c:	e0bfff17 	ldw	r2,-4(fp)
    ae50:	10805717 	ldw	r2,348(r2)
    ae54:	1000061e 	bne	r2,zero,ae70 <write_scan_header+0x94>
				emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
    ae58:	e0bffe17 	ldw	r2,-8(fp)
    ae5c:	10800517 	ldw	r2,20(r2)
    ae60:	e13fff17 	ldw	r4,-4(fp)
    ae64:	100b883a 	mov	r5,r2
    ae68:	000d883a 	mov	r6,zero
    ae6c:	000a0440 	call	a044 <emit_dht>
			/* AC needs no table when not present */
			if (cinfo->Se)
    ae70:	e0bfff17 	ldw	r2,-4(fp)
    ae74:	10805617 	ldw	r2,344(r2)
    ae78:	10000626 	beq	r2,zero,ae94 <write_scan_header+0xb8>
				emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
    ae7c:	e0bffe17 	ldw	r2,-8(fp)
    ae80:	10800617 	ldw	r2,24(r2)
    ae84:	e13fff17 	ldw	r4,-4(fp)
    ae88:	100b883a 	mov	r5,r2
    ae8c:	01800044 	movi	r6,1
    ae90:	000a0440 	call	a044 <emit_dht>
		emit_dac(cinfo);
	} else {
		/* Emit Huffman tables.
		* Note that emit_dht() suppresses any duplicate tables.
		*/
		for (i = 0; i < cinfo->comps_in_scan; i++) {
    ae94:	e0bffc17 	ldw	r2,-16(fp)
    ae98:	10800044 	addi	r2,r2,1
    ae9c:	e0bffc15 	stw	r2,-16(fp)
    aea0:	e0bfff17 	ldw	r2,-4(fp)
    aea4:	10804317 	ldw	r2,268(r2)
    aea8:	e0fffc17 	ldw	r3,-16(fp)
    aeac:	18bfdc16 	blt	r3,r2,ae20 <write_scan_header+0x44>
	}

	/* Emit DRI if required --- note that DRI value could change for each scan.
	* We avoid wasting space with unnecessary DRIs, however.
	*/
	if (cinfo->restart_interval != marker->last_restart_interval) {
    aeb0:	e0bfff17 	ldw	r2,-4(fp)
    aeb4:	10c03717 	ldw	r3,220(r2)
    aeb8:	e0bffd17 	ldw	r2,-12(fp)
    aebc:	10800717 	ldw	r2,28(r2)
    aec0:	18800626 	beq	r3,r2,aedc <write_scan_header+0x100>
		emit_dri(cinfo);
    aec4:	e13fff17 	ldw	r4,-4(fp)
    aec8:	000a4b40 	call	a4b4 <emit_dri>
		marker->last_restart_interval = cinfo->restart_interval;
    aecc:	e0bfff17 	ldw	r2,-4(fp)
    aed0:	10c03717 	ldw	r3,220(r2)
    aed4:	e0bffd17 	ldw	r2,-12(fp)
    aed8:	10c00715 	stw	r3,28(r2)
	}

	emit_sos(cinfo);
    aedc:	e13fff17 	ldw	r4,-4(fp)
    aee0:	000a6900 	call	a690 <emit_sos>
}
    aee4:	e037883a 	mov	sp,fp
    aee8:	dfc00117 	ldw	ra,4(sp)
    aeec:	df000017 	ldw	fp,0(sp)
    aef0:	dec00204 	addi	sp,sp,8
    aef4:	f800283a 	ret

0000aef8 <write_file_trailer>:
* Write datastream trailer.
*/

METHODDEF(void)
	write_file_trailer (j_compress_ptr cinfo)
{
    aef8:	defffd04 	addi	sp,sp,-12
    aefc:	dfc00215 	stw	ra,8(sp)
    af00:	df000115 	stw	fp,4(sp)
    af04:	df000104 	addi	fp,sp,4
    af08:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_EOI);
    af0c:	e13fff17 	ldw	r4,-4(fp)
    af10:	01403644 	movi	r5,217
    af14:	0009dac0 	call	9dac <emit_marker>
}
    af18:	e037883a 	mov	sp,fp
    af1c:	dfc00117 	ldw	ra,4(sp)
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00204 	addi	sp,sp,8
    af28:	f800283a 	ret

0000af2c <write_tables_only>:
* emitted.  Note that all tables will be marked sent_table = TRUE at exit.
*/

METHODDEF(void)
	write_tables_only (j_compress_ptr cinfo)
{
    af2c:	defffc04 	addi	sp,sp,-16
    af30:	dfc00315 	stw	ra,12(sp)
    af34:	df000215 	stw	fp,8(sp)
    af38:	df000204 	addi	fp,sp,8
    af3c:	e13fff15 	stw	r4,-4(fp)
	int i;

	emit_marker(cinfo, M_SOI);
    af40:	e13fff17 	ldw	r4,-4(fp)
    af44:	01403604 	movi	r5,216
    af48:	0009dac0 	call	9dac <emit_marker>

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
    af4c:	e03ffe15 	stw	zero,-8(fp)
    af50:	00000e06 	br	af8c <write_tables_only+0x60>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
    af54:	e0ffff17 	ldw	r3,-4(fp)
    af58:	e0bffe17 	ldw	r2,-8(fp)
    af5c:	10800544 	addi	r2,r2,21
    af60:	1085883a 	add	r2,r2,r2
    af64:	1085883a 	add	r2,r2,r2
    af68:	1885883a 	add	r2,r3,r2
    af6c:	10800017 	ldw	r2,0(r2)
    af70:	10000326 	beq	r2,zero,af80 <write_tables_only+0x54>
			(void) emit_dqt(cinfo, i);
    af74:	e13fff17 	ldw	r4,-4(fp)
    af78:	e17ffe17 	ldw	r5,-8(fp)
    af7c:	0009e4c0 	call	9e4c <emit_dqt>
{
	int i;

	emit_marker(cinfo, M_SOI);

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
    af80:	e0bffe17 	ldw	r2,-8(fp)
    af84:	10800044 	addi	r2,r2,1
    af88:	e0bffe15 	stw	r2,-8(fp)
    af8c:	e0bffe17 	ldw	r2,-8(fp)
    af90:	10800110 	cmplti	r2,r2,4
    af94:	103fef1e 	bne	r2,zero,af54 <write_tables_only+0x28>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
			(void) emit_dqt(cinfo, i);
	}

	if (! cinfo->arith_code) {
    af98:	e0bfff17 	ldw	r2,-4(fp)
    af9c:	10803343 	ldbu	r2,205(r2)
    afa0:	10803fcc 	andi	r2,r2,255
    afa4:	1000201e 	bne	r2,zero,b028 <write_tables_only+0xfc>
		for (i = 0; i < NUM_HUFF_TBLS; i++) {
    afa8:	e03ffe15 	stw	zero,-8(fp)
    afac:	00001b06 	br	b01c <write_tables_only+0xf0>
			if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
    afb0:	e0ffff17 	ldw	r3,-4(fp)
    afb4:	e0bffe17 	ldw	r2,-8(fp)
    afb8:	10800744 	addi	r2,r2,29
    afbc:	1085883a 	add	r2,r2,r2
    afc0:	1085883a 	add	r2,r2,r2
    afc4:	1885883a 	add	r2,r3,r2
    afc8:	10800017 	ldw	r2,0(r2)
    afcc:	10000426 	beq	r2,zero,afe0 <write_tables_only+0xb4>
				emit_dht(cinfo, i, FALSE);
    afd0:	e13fff17 	ldw	r4,-4(fp)
    afd4:	e17ffe17 	ldw	r5,-8(fp)
    afd8:	000d883a 	mov	r6,zero
    afdc:	000a0440 	call	a044 <emit_dht>
			if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
    afe0:	e0ffff17 	ldw	r3,-4(fp)
    afe4:	e0bffe17 	ldw	r2,-8(fp)
    afe8:	10800844 	addi	r2,r2,33
    afec:	1085883a 	add	r2,r2,r2
    aff0:	1085883a 	add	r2,r2,r2
    aff4:	1885883a 	add	r2,r3,r2
    aff8:	10800017 	ldw	r2,0(r2)
    affc:	10000426 	beq	r2,zero,b010 <write_tables_only+0xe4>
				emit_dht(cinfo, i, TRUE);
    b000:	e13fff17 	ldw	r4,-4(fp)
    b004:	e17ffe17 	ldw	r5,-8(fp)
    b008:	01800044 	movi	r6,1
    b00c:	000a0440 	call	a044 <emit_dht>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
			(void) emit_dqt(cinfo, i);
	}

	if (! cinfo->arith_code) {
		for (i = 0; i < NUM_HUFF_TBLS; i++) {
    b010:	e0bffe17 	ldw	r2,-8(fp)
    b014:	10800044 	addi	r2,r2,1
    b018:	e0bffe15 	stw	r2,-8(fp)
    b01c:	e0bffe17 	ldw	r2,-8(fp)
    b020:	10800110 	cmplti	r2,r2,4
    b024:	103fe21e 	bne	r2,zero,afb0 <write_tables_only+0x84>
			if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
				emit_dht(cinfo, i, TRUE);
		}
	}

	emit_marker(cinfo, M_EOI);
    b028:	e13fff17 	ldw	r4,-4(fp)
    b02c:	01403644 	movi	r5,217
    b030:	0009dac0 	call	9dac <emit_marker>
}
    b034:	e037883a 	mov	sp,fp
    b038:	dfc00117 	ldw	ra,4(sp)
    b03c:	df000017 	ldw	fp,0(sp)
    b040:	dec00204 	addi	sp,sp,8
    b044:	f800283a 	ret

0000b048 <jinit_marker_writer>:
* Initialize the marker writer module.
*/

GLOBAL(void)
	jinit_marker_writer (j_compress_ptr cinfo)
{
    b048:	defffc04 	addi	sp,sp,-16
    b04c:	dfc00315 	stw	ra,12(sp)
    b050:	df000215 	stw	fp,8(sp)
    b054:	df000204 	addi	fp,sp,8
    b058:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker;

	/* Create the subobject */
	marker = (my_marker_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    b05c:	e0bfff17 	ldw	r2,-4(fp)
    b060:	10800117 	ldw	r2,4(r2)
    b064:	10800017 	ldw	r2,0(r2)
	jinit_marker_writer (j_compress_ptr cinfo)
{
	my_marker_ptr marker;

	/* Create the subobject */
	marker = (my_marker_ptr)
    b068:	e13fff17 	ldw	r4,-4(fp)
    b06c:	01400044 	movi	r5,1
    b070:	01800804 	movi	r6,32
    b074:	103ee83a 	callr	r2
    b078:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_marker_writer));
	cinfo->marker = (struct jpeg_marker_writer *) marker;
    b07c:	e0bfff17 	ldw	r2,-4(fp)
    b080:	e0fffe17 	ldw	r3,-8(fp)
    b084:	10c06015 	stw	r3,384(r2)
	/* Initialize method pointers */
	marker->pub.write_file_header = write_file_header;
    b088:	e0bffe17 	ldw	r2,-8(fp)
    b08c:	00c00074 	movhi	r3,1
    b090:	18ead104 	addi	r3,r3,-21692
    b094:	10c00015 	stw	r3,0(r2)
	marker->pub.write_frame_header = write_frame_header;
    b098:	e0bffe17 	ldw	r2,-8(fp)
    b09c:	00c00074 	movhi	r3,1
    b0a0:	18eaef04 	addi	r3,r3,-21572
    b0a4:	10c00115 	stw	r3,4(r2)
	marker->pub.write_scan_header = write_scan_header;
    b0a8:	e0bffe17 	ldw	r2,-8(fp)
    b0ac:	00c00074 	movhi	r3,1
    b0b0:	18eb7704 	addi	r3,r3,-21028
    b0b4:	10c00215 	stw	r3,8(r2)
	marker->pub.write_file_trailer = write_file_trailer;
    b0b8:	e0bffe17 	ldw	r2,-8(fp)
    b0bc:	00c00074 	movhi	r3,1
    b0c0:	18ebbe04 	addi	r3,r3,-20744
    b0c4:	10c00315 	stw	r3,12(r2)
	marker->pub.write_tables_only = write_tables_only;
    b0c8:	e0bffe17 	ldw	r2,-8(fp)
    b0cc:	00c00074 	movhi	r3,1
    b0d0:	18ebcb04 	addi	r3,r3,-20692
    b0d4:	10c00415 	stw	r3,16(r2)
	marker->pub.write_marker_header = write_marker_header;
    b0d8:	e0bffe17 	ldw	r2,-8(fp)
    b0dc:	00c00074 	movhi	r3,1
    b0e0:	18eaa204 	addi	r3,r3,-21880
    b0e4:	10c00515 	stw	r3,20(r2)
	marker->pub.write_marker_byte = write_marker_byte;
    b0e8:	e0bffe17 	ldw	r2,-8(fp)
    b0ec:	00c00074 	movhi	r3,1
    b0f0:	18eac304 	addi	r3,r3,-21748
    b0f4:	10c00615 	stw	r3,24(r2)
	/* Initialize private state */
	marker->last_restart_interval = 0;
    b0f8:	e0bffe17 	ldw	r2,-8(fp)
    b0fc:	10000715 	stw	zero,28(r2)
}
    b100:	e037883a 	mov	sp,fp
    b104:	dfc00117 	ldw	ra,4(sp)
    b108:	df000017 	ldw	fp,0(sp)
    b10c:	dec00204 	addi	sp,sp,8
    b110:	f800283a 	ret

0000b114 <jpeg_calc_jpeg_dimensions>:
*/

GLOBAL(void)
	jpeg_calc_jpeg_dimensions (j_compress_ptr cinfo)
	/* Do computations that are needed before master selection phase */
{
    b114:	defffe04 	addi	sp,sp,-8
    b118:	df000115 	stw	fp,4(sp)
    b11c:	df000104 	addi	fp,sp,4
    b120:	e13fff15 	stw	r4,-4(fp)
	}

#else /* !DCT_SCALING_SUPPORTED */

	/* Hardwire it to "no scaling" */
	cinfo->jpeg_width = cinfo->image_width;
    b124:	e0bfff17 	ldw	r2,-4(fp)
    b128:	10c00717 	ldw	r3,28(r2)
    b12c:	e0bfff17 	ldw	r2,-4(fp)
    b130:	10c00f15 	stw	r3,60(r2)
	cinfo->jpeg_height = cinfo->image_height;
    b134:	e0bfff17 	ldw	r2,-4(fp)
    b138:	10c00817 	ldw	r3,32(r2)
    b13c:	e0bfff17 	ldw	r2,-4(fp)
    b140:	10c01015 	stw	r3,64(r2)
	cinfo->min_DCT_h_scaled_size = DCTSIZE;
    b144:	e0bfff17 	ldw	r2,-4(fp)
    b148:	00c00204 	movi	r3,8
    b14c:	10c04015 	stw	r3,256(r2)
	cinfo->min_DCT_v_scaled_size = DCTSIZE;
    b150:	e0bfff17 	ldw	r2,-4(fp)
    b154:	00c00204 	movi	r3,8
    b158:	10c04115 	stw	r3,260(r2)

#endif /* DCT_SCALING_SUPPORTED */
}
    b15c:	e037883a 	mov	sp,fp
    b160:	df000017 	ldw	fp,0(sp)
    b164:	dec00104 	addi	sp,sp,4
    b168:	f800283a 	ret

0000b16c <jpeg_calc_trans_dimensions>:


LOCAL(void)
	jpeg_calc_trans_dimensions (j_compress_ptr cinfo)
{
    b16c:	defffd04 	addi	sp,sp,-12
    b170:	dfc00215 	stw	ra,8(sp)
    b174:	df000115 	stw	fp,4(sp)
    b178:	df000104 	addi	fp,sp,4
    b17c:	e13fff15 	stw	r4,-4(fp)
	if (cinfo->min_DCT_h_scaled_size != cinfo->min_DCT_v_scaled_size)
    b180:	e0bfff17 	ldw	r2,-4(fp)
    b184:	10c04017 	ldw	r3,256(r2)
    b188:	e0bfff17 	ldw	r2,-4(fp)
    b18c:	10804117 	ldw	r2,260(r2)
    b190:	18801326 	beq	r3,r2,b1e0 <jpeg_calc_trans_dimensions+0x74>
		ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
    b194:	e0bfff17 	ldw	r2,-4(fp)
    b198:	10800017 	ldw	r2,0(r2)
    b19c:	00c001c4 	movi	r3,7
    b1a0:	10c00515 	stw	r3,20(r2)
    b1a4:	e0bfff17 	ldw	r2,-4(fp)
    b1a8:	10800017 	ldw	r2,0(r2)
    b1ac:	e0ffff17 	ldw	r3,-4(fp)
    b1b0:	18c04017 	ldw	r3,256(r3)
    b1b4:	10c00615 	stw	r3,24(r2)
    b1b8:	e0bfff17 	ldw	r2,-4(fp)
    b1bc:	10800017 	ldw	r2,0(r2)
    b1c0:	e0ffff17 	ldw	r3,-4(fp)
    b1c4:	18c04117 	ldw	r3,260(r3)
    b1c8:	10c00715 	stw	r3,28(r2)
    b1cc:	e0bfff17 	ldw	r2,-4(fp)
    b1d0:	10800017 	ldw	r2,0(r2)
    b1d4:	10800017 	ldw	r2,0(r2)
    b1d8:	e13fff17 	ldw	r4,-4(fp)
    b1dc:	103ee83a 	callr	r2
		cinfo->min_DCT_h_scaled_size, cinfo->min_DCT_v_scaled_size);

	cinfo->block_size = cinfo->min_DCT_h_scaled_size;
    b1e0:	e0bfff17 	ldw	r2,-4(fp)
    b1e4:	10c04017 	ldw	r3,256(r2)
    b1e8:	e0bfff17 	ldw	r2,-4(fp)
    b1ec:	10c05915 	stw	r3,356(r2)
}
    b1f0:	e037883a 	mov	sp,fp
    b1f4:	dfc00117 	ldw	ra,4(sp)
    b1f8:	df000017 	ldw	fp,0(sp)
    b1fc:	dec00204 	addi	sp,sp,8
    b200:	f800283a 	ret

0000b204 <initial_setup>:


LOCAL(void)
	initial_setup (j_compress_ptr cinfo, boolean transcode_only)
	/* Do computations that are needed before master selection phase */
{
    b204:	defff604 	addi	sp,sp,-40
    b208:	dfc00915 	stw	ra,36(sp)
    b20c:	df000815 	stw	fp,32(sp)
    b210:	dc000715 	stw	r16,28(sp)
    b214:	df000704 	addi	fp,sp,28
    b218:	e13ffe15 	stw	r4,-8(fp)
    b21c:	2805883a 	mov	r2,r5
    b220:	e0bfff05 	stb	r2,-4(fp)
	int ci, ssize;
	jpeg_component_info *compptr;
	long samplesperrow;
	JDIMENSION jd_samplesperrow;

	if (transcode_only)
    b224:	e0bfff03 	ldbu	r2,-4(fp)
    b228:	10000326 	beq	r2,zero,b238 <initial_setup+0x34>
		jpeg_calc_trans_dimensions(cinfo);
    b22c:	e13ffe17 	ldw	r4,-8(fp)
    b230:	000b16c0 	call	b16c <jpeg_calc_trans_dimensions>
    b234:	00000206 	br	b240 <initial_setup+0x3c>
	else
		jpeg_calc_jpeg_dimensions(cinfo);
    b238:	e13ffe17 	ldw	r4,-8(fp)
    b23c:	000b1140 	call	b114 <jpeg_calc_jpeg_dimensions>

	/* Sanity check on block_size */
	if (cinfo->block_size < 1 || cinfo->block_size > 16)
    b240:	e0bffe17 	ldw	r2,-8(fp)
    b244:	10805917 	ldw	r2,356(r2)
    b248:	0080040e 	bge	zero,r2,b25c <initial_setup+0x58>
    b24c:	e0bffe17 	ldw	r2,-8(fp)
    b250:	10805917 	ldw	r2,356(r2)
    b254:	10800450 	cmplti	r2,r2,17
    b258:	1000131e 	bne	r2,zero,b2a8 <initial_setup+0xa4>
		ERREXIT2(cinfo, JERR_BAD_DCTSIZE, cinfo->block_size, cinfo->block_size);
    b25c:	e0bffe17 	ldw	r2,-8(fp)
    b260:	10800017 	ldw	r2,0(r2)
    b264:	00c001c4 	movi	r3,7
    b268:	10c00515 	stw	r3,20(r2)
    b26c:	e0bffe17 	ldw	r2,-8(fp)
    b270:	10800017 	ldw	r2,0(r2)
    b274:	e0fffe17 	ldw	r3,-8(fp)
    b278:	18c05917 	ldw	r3,356(r3)
    b27c:	10c00615 	stw	r3,24(r2)
    b280:	e0bffe17 	ldw	r2,-8(fp)
    b284:	10800017 	ldw	r2,0(r2)
    b288:	e0fffe17 	ldw	r3,-8(fp)
    b28c:	18c05917 	ldw	r3,356(r3)
    b290:	10c00715 	stw	r3,28(r2)
    b294:	e0bffe17 	ldw	r2,-8(fp)
    b298:	10800017 	ldw	r2,0(r2)
    b29c:	10800017 	ldw	r2,0(r2)
    b2a0:	e13ffe17 	ldw	r4,-8(fp)
    b2a4:	103ee83a 	callr	r2

	/* Derive natural_order from block_size */
	switch (cinfo->block_size) {
    b2a8:	e0bffe17 	ldw	r2,-8(fp)
    b2ac:	10805917 	ldw	r2,356(r2)
    b2b0:	10c00228 	cmpgeui	r3,r2,8
    b2b4:	18002d1e 	bne	r3,zero,b36c <initial_setup+0x168>
    b2b8:	1085883a 	add	r2,r2,r2
    b2bc:	1087883a 	add	r3,r2,r2
    b2c0:	00800074 	movhi	r2,1
    b2c4:	10acb504 	addi	r2,r2,-19756
    b2c8:	1885883a 	add	r2,r3,r2
    b2cc:	10800017 	ldw	r2,0(r2)
    b2d0:	1000683a 	jmp	r2
    b2d4:	0000b36c 	andhi	zero,zero,717
    b2d8:	0000b36c 	andhi	zero,zero,717
    b2dc:	0000b2f4 	movhi	zero,715
    b2e0:	0000b308 	cmpgei	zero,zero,716
    b2e4:	0000b31c 	xori	zero,zero,716
    b2e8:	0000b330 	cmpltui	zero,zero,716
    b2ec:	0000b344 	movi	zero,717
    b2f0:	0000b358 	cmpnei	zero,zero,717
	case 2: cinfo->natural_order = jpeg_natural_order2; break;
    b2f4:	e0bffe17 	ldw	r2,-8(fp)
    b2f8:	00c00134 	movhi	r3,4
    b2fc:	18c35804 	addi	r3,r3,3424
    b300:	10c05a15 	stw	r3,360(r2)
    b304:	00001e06 	br	b380 <initial_setup+0x17c>
	case 3: cinfo->natural_order = jpeg_natural_order3; break;
    b308:	e0bffe17 	ldw	r2,-8(fp)
    b30c:	00c00134 	movhi	r3,4
    b310:	18c33f04 	addi	r3,r3,3324
    b314:	10c05a15 	stw	r3,360(r2)
    b318:	00001906 	br	b380 <initial_setup+0x17c>
	case 4: cinfo->natural_order = jpeg_natural_order4; break;
    b31c:	e0bffe17 	ldw	r2,-8(fp)
    b320:	00c00134 	movhi	r3,4
    b324:	18c31f04 	addi	r3,r3,3196
    b328:	10c05a15 	stw	r3,360(r2)
    b32c:	00001406 	br	b380 <initial_setup+0x17c>
	case 5: cinfo->natural_order = jpeg_natural_order5; break;
    b330:	e0bffe17 	ldw	r2,-8(fp)
    b334:	00c00134 	movhi	r3,4
    b338:	18c2f604 	addi	r3,r3,3032
    b33c:	10c05a15 	stw	r3,360(r2)
    b340:	00000f06 	br	b380 <initial_setup+0x17c>
	case 6: cinfo->natural_order = jpeg_natural_order6; break;
    b344:	e0bffe17 	ldw	r2,-8(fp)
    b348:	00c00134 	movhi	r3,4
    b34c:	18c2c204 	addi	r3,r3,2824
    b350:	10c05a15 	stw	r3,360(r2)
    b354:	00000a06 	br	b380 <initial_setup+0x17c>
	case 7: cinfo->natural_order = jpeg_natural_order7; break;
    b358:	e0bffe17 	ldw	r2,-8(fp)
    b35c:	00c00134 	movhi	r3,4
    b360:	18c28104 	addi	r3,r3,2564
    b364:	10c05a15 	stw	r3,360(r2)
    b368:	00000506 	br	b380 <initial_setup+0x17c>
	default: cinfo->natural_order = jpeg_natural_order; break;
    b36c:	e0bffe17 	ldw	r2,-8(fp)
    b370:	00c00134 	movhi	r3,4
    b374:	18c23104 	addi	r3,r3,2244
    b378:	10c05a15 	stw	r3,360(r2)
    b37c:	0001883a 	nop
	}

	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
    b380:	e0bffe17 	ldw	r2,-8(fp)
    b384:	10805917 	ldw	r2,356(r2)
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
    b388:	10800208 	cmpgei	r2,r2,8
    b38c:	1000091e 	bne	r2,zero,b3b4 <initial_setup+0x1b0>
    b390:	e0bffe17 	ldw	r2,-8(fp)
    b394:	10c05917 	ldw	r3,356(r2)
    b398:	e0bffe17 	ldw	r2,-8(fp)
    b39c:	10805917 	ldw	r2,356(r2)
    b3a0:	1809883a 	mov	r4,r3
    b3a4:	100b883a 	mov	r5,r2
    b3a8:	002c1540 	call	2c154 <__mulsi3>
    b3ac:	10bfffc4 	addi	r2,r2,-1
    b3b0:	00000106 	br	b3b8 <initial_setup+0x1b4>
    b3b4:	00800fc4 	movi	r2,63
	case 7: cinfo->natural_order = jpeg_natural_order7; break;
	default: cinfo->natural_order = jpeg_natural_order; break;
	}

	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
    b3b8:	e0fffe17 	ldw	r3,-8(fp)
    b3bc:	18805b15 	stw	r2,364(r3)
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;

	/* Sanity check on image dimensions */
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
    b3c0:	e0bffe17 	ldw	r2,-8(fp)
    b3c4:	10801017 	ldw	r2,64(r2)
    b3c8:	10000926 	beq	r2,zero,b3f0 <initial_setup+0x1ec>
    b3cc:	e0bffe17 	ldw	r2,-8(fp)
    b3d0:	10800f17 	ldw	r2,60(r2)
    b3d4:	10000626 	beq	r2,zero,b3f0 <initial_setup+0x1ec>
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
    b3d8:	e0bffe17 	ldw	r2,-8(fp)
    b3dc:	10801217 	ldw	r2,72(r2)
	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;

	/* Sanity check on image dimensions */
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
    b3e0:	0080030e 	bge	zero,r2,b3f0 <initial_setup+0x1ec>
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
    b3e4:	e0bffe17 	ldw	r2,-8(fp)
    b3e8:	10800917 	ldw	r2,36(r2)
    b3ec:	00800916 	blt	zero,r2,b414 <initial_setup+0x210>
		ERREXIT(cinfo, JERR_EMPTY_IMAGE);
    b3f0:	e0bffe17 	ldw	r2,-8(fp)
    b3f4:	10800017 	ldw	r2,0(r2)
    b3f8:	00c00844 	movi	r3,33
    b3fc:	10c00515 	stw	r3,20(r2)
    b400:	e0bffe17 	ldw	r2,-8(fp)
    b404:	10800017 	ldw	r2,0(r2)
    b408:	10800017 	ldw	r2,0(r2)
    b40c:	e13ffe17 	ldw	r4,-8(fp)
    b410:	103ee83a 	callr	r2

	/* Make sure image isn't bigger than I can handle */
	if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
    b414:	e0bffe17 	ldw	r2,-8(fp)
    b418:	10801017 	ldw	r2,64(r2)
    b41c:	00fff714 	movui	r3,65500
    b420:	18800416 	blt	r3,r2,b434 <initial_setup+0x230>
		(long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
    b424:	e0bffe17 	ldw	r2,-8(fp)
    b428:	10800f17 	ldw	r2,60(r2)
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
		ERREXIT(cinfo, JERR_EMPTY_IMAGE);

	/* Make sure image isn't bigger than I can handle */
	if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
    b42c:	00fff714 	movui	r3,65500
    b430:	18800d0e 	bge	r3,r2,b468 <initial_setup+0x264>
		(long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
		ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
    b434:	e0bffe17 	ldw	r2,-8(fp)
    b438:	10800017 	ldw	r2,0(r2)
    b43c:	00c00a84 	movi	r3,42
    b440:	10c00515 	stw	r3,20(r2)
    b444:	e0bffe17 	ldw	r2,-8(fp)
    b448:	10800017 	ldw	r2,0(r2)
    b44c:	00fff714 	movui	r3,65500
    b450:	10c00615 	stw	r3,24(r2)
    b454:	e0bffe17 	ldw	r2,-8(fp)
    b458:	10800017 	ldw	r2,0(r2)
    b45c:	10800017 	ldw	r2,0(r2)
    b460:	e13ffe17 	ldw	r4,-8(fp)
    b464:	103ee83a 	callr	r2

	/* Width of an input scanline must be representable as JDIMENSION. */
	samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
    b468:	e0bffe17 	ldw	r2,-8(fp)
    b46c:	10800717 	ldw	r2,28(r2)
    b470:	1007883a 	mov	r3,r2
    b474:	e0bffe17 	ldw	r2,-8(fp)
    b478:	10800917 	ldw	r2,36(r2)
    b47c:	1809883a 	mov	r4,r3
    b480:	100b883a 	mov	r5,r2
    b484:	002c1540 	call	2c154 <__mulsi3>
    b488:	e0bffb15 	stw	r2,-20(fp)
	jd_samplesperrow = (JDIMENSION) samplesperrow;
    b48c:	e0bffb17 	ldw	r2,-20(fp)
    b490:	e0bffc15 	stw	r2,-16(fp)
	if ((long) jd_samplesperrow != samplesperrow)
    b494:	e0fffc17 	ldw	r3,-16(fp)
    b498:	e0bffb17 	ldw	r2,-20(fp)
    b49c:	18800926 	beq	r3,r2,b4c4 <initial_setup+0x2c0>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
    b4a0:	e0bffe17 	ldw	r2,-8(fp)
    b4a4:	10800017 	ldw	r2,0(r2)
    b4a8:	00c01204 	movi	r3,72
    b4ac:	10c00515 	stw	r3,20(r2)
    b4b0:	e0bffe17 	ldw	r2,-8(fp)
    b4b4:	10800017 	ldw	r2,0(r2)
    b4b8:	10800017 	ldw	r2,0(r2)
    b4bc:	e13ffe17 	ldw	r4,-8(fp)
    b4c0:	103ee83a 	callr	r2

	/* For now, precision must match compiled-in value... */
	if (cinfo->data_precision != BITS_IN_JSAMPLE)
    b4c4:	e0bffe17 	ldw	r2,-8(fp)
    b4c8:	10801117 	ldw	r2,68(r2)
    b4cc:	10800220 	cmpeqi	r2,r2,8
    b4d0:	10000e1e 	bne	r2,zero,b50c <initial_setup+0x308>
		ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
    b4d4:	e0bffe17 	ldw	r2,-8(fp)
    b4d8:	10800017 	ldw	r2,0(r2)
    b4dc:	00c00404 	movi	r3,16
    b4e0:	10c00515 	stw	r3,20(r2)
    b4e4:	e0bffe17 	ldw	r2,-8(fp)
    b4e8:	10800017 	ldw	r2,0(r2)
    b4ec:	e0fffe17 	ldw	r3,-8(fp)
    b4f0:	18c01117 	ldw	r3,68(r3)
    b4f4:	10c00615 	stw	r3,24(r2)
    b4f8:	e0bffe17 	ldw	r2,-8(fp)
    b4fc:	10800017 	ldw	r2,0(r2)
    b500:	10800017 	ldw	r2,0(r2)
    b504:	e13ffe17 	ldw	r4,-8(fp)
    b508:	103ee83a 	callr	r2

	/* Check that number of components won't exceed internal array sizes */
	if (cinfo->num_components > MAX_COMPONENTS)
    b50c:	e0bffe17 	ldw	r2,-8(fp)
    b510:	10801217 	ldw	r2,72(r2)
    b514:	108002d0 	cmplti	r2,r2,11
    b518:	1000121e 	bne	r2,zero,b564 <initial_setup+0x360>
		ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
    b51c:	e0bffe17 	ldw	r2,-8(fp)
    b520:	10800017 	ldw	r2,0(r2)
    b524:	00c006c4 	movi	r3,27
    b528:	10c00515 	stw	r3,20(r2)
    b52c:	e0bffe17 	ldw	r2,-8(fp)
    b530:	10800017 	ldw	r2,0(r2)
    b534:	e0fffe17 	ldw	r3,-8(fp)
    b538:	18c01217 	ldw	r3,72(r3)
    b53c:	10c00615 	stw	r3,24(r2)
    b540:	e0bffe17 	ldw	r2,-8(fp)
    b544:	10800017 	ldw	r2,0(r2)
    b548:	00c00284 	movi	r3,10
    b54c:	10c00715 	stw	r3,28(r2)
    b550:	e0bffe17 	ldw	r2,-8(fp)
    b554:	10800017 	ldw	r2,0(r2)
    b558:	10800017 	ldw	r2,0(r2)
    b55c:	e13ffe17 	ldw	r4,-8(fp)
    b560:	103ee83a 	callr	r2
		MAX_COMPONENTS);

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
    b564:	e0bffe17 	ldw	r2,-8(fp)
    b568:	00c00044 	movi	r3,1
    b56c:	10c03e15 	stw	r3,248(r2)
	cinfo->max_v_samp_factor = 1;
    b570:	e0bffe17 	ldw	r2,-8(fp)
    b574:	00c00044 	movi	r3,1
    b578:	10c03f15 	stw	r3,252(r2)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    b57c:	e03ff915 	stw	zero,-28(fp)
    b580:	e0bffe17 	ldw	r2,-8(fp)
    b584:	10801417 	ldw	r2,80(r2)
    b588:	e0bffa15 	stw	r2,-24(fp)
    b58c:	00002d06 	br	b644 <initial_setup+0x440>
		ci++, compptr++) {
			if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
    b590:	e0bffa17 	ldw	r2,-24(fp)
    b594:	10800217 	ldw	r2,8(r2)
    b598:	00800b0e 	bge	zero,r2,b5c8 <initial_setup+0x3c4>
    b59c:	e0bffa17 	ldw	r2,-24(fp)
    b5a0:	10800217 	ldw	r2,8(r2)
    b5a4:	10800148 	cmpgei	r2,r2,5
    b5a8:	1000071e 	bne	r2,zero,b5c8 <initial_setup+0x3c4>
				compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
    b5ac:	e0bffa17 	ldw	r2,-24(fp)
    b5b0:	10800317 	ldw	r2,12(r2)
	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
    b5b4:	0080040e 	bge	zero,r2,b5c8 <initial_setup+0x3c4>
				compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
    b5b8:	e0bffa17 	ldw	r2,-24(fp)
    b5bc:	10800317 	ldw	r2,12(r2)
    b5c0:	10800150 	cmplti	r2,r2,5
    b5c4:	1000091e 	bne	r2,zero,b5ec <initial_setup+0x3e8>
				ERREXIT(cinfo, JERR_BAD_SAMPLING);
    b5c8:	e0bffe17 	ldw	r2,-8(fp)
    b5cc:	10800017 	ldw	r2,0(r2)
    b5d0:	00c004c4 	movi	r3,19
    b5d4:	10c00515 	stw	r3,20(r2)
    b5d8:	e0bffe17 	ldw	r2,-8(fp)
    b5dc:	10800017 	ldw	r2,0(r2)
    b5e0:	10800017 	ldw	r2,0(r2)
    b5e4:	e13ffe17 	ldw	r4,-8(fp)
    b5e8:	103ee83a 	callr	r2
			cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
    b5ec:	e0bffa17 	ldw	r2,-24(fp)
    b5f0:	10800217 	ldw	r2,8(r2)
    b5f4:	e0fffe17 	ldw	r3,-8(fp)
    b5f8:	18c03e17 	ldw	r3,248(r3)
    b5fc:	10c0010e 	bge	r2,r3,b604 <initial_setup+0x400>
    b600:	1805883a 	mov	r2,r3
    b604:	e0fffe17 	ldw	r3,-8(fp)
    b608:	18803e15 	stw	r2,248(r3)
				compptr->h_samp_factor);
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
    b60c:	e0bffa17 	ldw	r2,-24(fp)
    b610:	10800317 	ldw	r2,12(r2)
    b614:	e0fffe17 	ldw	r3,-8(fp)
    b618:	18c03f17 	ldw	r3,252(r3)
    b61c:	10c0010e 	bge	r2,r3,b624 <initial_setup+0x420>
    b620:	1805883a 	mov	r2,r3
    b624:	e0fffe17 	ldw	r3,-8(fp)
    b628:	18803f15 	stw	r2,252(r3)

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    b62c:	e0bff917 	ldw	r2,-28(fp)
    b630:	10800044 	addi	r2,r2,1
    b634:	e0bff915 	stw	r2,-28(fp)
    b638:	e0bffa17 	ldw	r2,-24(fp)
    b63c:	10801604 	addi	r2,r2,88
    b640:	e0bffa15 	stw	r2,-24(fp)
		MAX_COMPONENTS);

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    b644:	e0bffe17 	ldw	r2,-8(fp)
    b648:	10801217 	ldw	r2,72(r2)
    b64c:	e0fff917 	ldw	r3,-28(fp)
    b650:	18bfcf16 	blt	r3,r2,b590 <initial_setup+0x38c>
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    b654:	e03ff915 	stw	zero,-28(fp)
    b658:	e0bffe17 	ldw	r2,-8(fp)
    b65c:	10801417 	ldw	r2,80(r2)
    b660:	e0bffa15 	stw	r2,-24(fp)
    b664:	00009b06 	br	b8d4 <initial_setup+0x6d0>
		ci++, compptr++) {
			/* Fill in the correct component_index value; don't rely on application */
			compptr->component_index = ci;
    b668:	e0bffa17 	ldw	r2,-24(fp)
    b66c:	e0fff917 	ldw	r3,-28(fp)
    b670:	10c00115 	stw	r3,4(r2)
			/* In selecting the actual DCT scaling for each component, we try to
			* scale down the chroma components via DCT scaling rather than downsampling.
			* This saves time if the downsampler gets to use 1:1 scaling.
			* Note this code adapts subsampling ratios which are powers of 2.
			*/
			ssize = 1;
    b674:	00800044 	movi	r2,1
    b678:	e0bffd15 	stw	r2,-12(fp)
				(cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
				(cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
					ssize = ssize * 2;
			}
#endif
			compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
    b67c:	e0bffe17 	ldw	r2,-8(fp)
    b680:	10804017 	ldw	r2,256(r2)
    b684:	1009883a 	mov	r4,r2
    b688:	e17ffd17 	ldw	r5,-12(fp)
    b68c:	002c1540 	call	2c154 <__mulsi3>
    b690:	1007883a 	mov	r3,r2
    b694:	e0bffa17 	ldw	r2,-24(fp)
    b698:	10c00915 	stw	r3,36(r2)
			ssize = 1;
    b69c:	00800044 	movi	r2,1
    b6a0:	e0bffd15 	stw	r2,-12(fp)
				(cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
				(cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
					ssize = ssize * 2;
			}
#endif
			compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
    b6a4:	e0bffe17 	ldw	r2,-8(fp)
    b6a8:	10804117 	ldw	r2,260(r2)
    b6ac:	1009883a 	mov	r4,r2
    b6b0:	e17ffd17 	ldw	r5,-12(fp)
    b6b4:	002c1540 	call	2c154 <__mulsi3>
    b6b8:	1007883a 	mov	r3,r2
    b6bc:	e0bffa17 	ldw	r2,-24(fp)
    b6c0:	10c00a15 	stw	r3,40(r2)

			/* We don't support DCT ratios larger than 2. */
			if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
    b6c4:	e0bffa17 	ldw	r2,-24(fp)
    b6c8:	10c00917 	ldw	r3,36(r2)
    b6cc:	e0bffa17 	ldw	r2,-24(fp)
    b6d0:	10800a17 	ldw	r2,40(r2)
    b6d4:	1085883a 	add	r2,r2,r2
    b6d8:	10c0070e 	bge	r2,r3,b6f8 <initial_setup+0x4f4>
				compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
    b6dc:	e0bffa17 	ldw	r2,-24(fp)
    b6e0:	10800a17 	ldw	r2,40(r2)
    b6e4:	1085883a 	add	r2,r2,r2
    b6e8:	1007883a 	mov	r3,r2
    b6ec:	e0bffa17 	ldw	r2,-24(fp)
    b6f0:	10c00915 	stw	r3,36(r2)
    b6f4:	00000c06 	br	b728 <initial_setup+0x524>
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
    b6f8:	e0bffa17 	ldw	r2,-24(fp)
    b6fc:	10c00a17 	ldw	r3,40(r2)
    b700:	e0bffa17 	ldw	r2,-24(fp)
    b704:	10800917 	ldw	r2,36(r2)
    b708:	1085883a 	add	r2,r2,r2
    b70c:	10c0060e 	bge	r2,r3,b728 <initial_setup+0x524>
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
    b710:	e0bffa17 	ldw	r2,-24(fp)
    b714:	10800917 	ldw	r2,36(r2)
    b718:	1085883a 	add	r2,r2,r2
    b71c:	1007883a 	mov	r3,r2
    b720:	e0bffa17 	ldw	r2,-24(fp)
    b724:	10c00a15 	stw	r3,40(r2)

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
    b728:	e0bffe17 	ldw	r2,-8(fp)
    b72c:	10800f17 	ldw	r2,60(r2)
    b730:	1007883a 	mov	r3,r2
    b734:	e0bffa17 	ldw	r2,-24(fp)
    b738:	10800217 	ldw	r2,8(r2)
    b73c:	1809883a 	mov	r4,r3
    b740:	100b883a 	mov	r5,r2
    b744:	002c1540 	call	2c154 <__mulsi3>
    b748:	1021883a 	mov	r16,r2
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
    b74c:	e0bffe17 	ldw	r2,-8(fp)
    b750:	10c03e17 	ldw	r3,248(r2)
    b754:	e0bffe17 	ldw	r2,-8(fp)
    b758:	10805917 	ldw	r2,356(r2)
    b75c:	1809883a 	mov	r4,r3
    b760:	100b883a 	mov	r5,r2
    b764:	002c1540 	call	2c154 <__mulsi3>
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
    b768:	8009883a 	mov	r4,r16
    b76c:	100b883a 	mov	r5,r2
    b770:	002b0840 	call	2b084 <jdiv_round_up>
				compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
    b774:	1007883a 	mov	r3,r2
    b778:	e0bffa17 	ldw	r2,-24(fp)
    b77c:	10c00715 	stw	r3,28(r2)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
    b780:	e0bffe17 	ldw	r2,-8(fp)
    b784:	10801017 	ldw	r2,64(r2)
    b788:	1007883a 	mov	r3,r2
    b78c:	e0bffa17 	ldw	r2,-24(fp)
    b790:	10800317 	ldw	r2,12(r2)
    b794:	1809883a 	mov	r4,r3
    b798:	100b883a 	mov	r5,r2
    b79c:	002c1540 	call	2c154 <__mulsi3>
    b7a0:	1021883a 	mov	r16,r2
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
    b7a4:	e0bffe17 	ldw	r2,-8(fp)
    b7a8:	10c03f17 	ldw	r3,252(r2)
    b7ac:	e0bffe17 	ldw	r2,-8(fp)
    b7b0:	10805917 	ldw	r2,356(r2)
    b7b4:	1809883a 	mov	r4,r3
    b7b8:	100b883a 	mov	r5,r2
    b7bc:	002c1540 	call	2c154 <__mulsi3>
			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
    b7c0:	8009883a 	mov	r4,r16
    b7c4:	100b883a 	mov	r5,r2
    b7c8:	002b0840 	call	2b084 <jdiv_round_up>

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
    b7cc:	1007883a 	mov	r3,r2
    b7d0:	e0bffa17 	ldw	r2,-24(fp)
    b7d4:	10c00815 	stw	r3,32(r2)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
    b7d8:	e0bffe17 	ldw	r2,-8(fp)
    b7dc:	10800f17 	ldw	r2,60(r2)
    b7e0:	1021883a 	mov	r16,r2
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
    b7e4:	e0bffa17 	ldw	r2,-24(fp)
    b7e8:	10c00217 	ldw	r3,8(r2)
    b7ec:	e0bffa17 	ldw	r2,-24(fp)
    b7f0:	10800917 	ldw	r2,36(r2)
    b7f4:	1809883a 	mov	r4,r3
    b7f8:	100b883a 	mov	r5,r2
    b7fc:	002c1540 	call	2c154 <__mulsi3>
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
    b800:	8009883a 	mov	r4,r16
    b804:	100b883a 	mov	r5,r2
    b808:	002c1540 	call	2c154 <__mulsi3>
    b80c:	1021883a 	mov	r16,r2
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
    b810:	e0bffe17 	ldw	r2,-8(fp)
    b814:	10c03e17 	ldw	r3,248(r2)
    b818:	e0bffe17 	ldw	r2,-8(fp)
    b81c:	10805917 	ldw	r2,356(r2)
    b820:	1809883a 	mov	r4,r3
    b824:	100b883a 	mov	r5,r2
    b828:	002c1540 	call	2c154 <__mulsi3>
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
    b82c:	8009883a 	mov	r4,r16
    b830:	100b883a 	mov	r5,r2
    b834:	002b0840 	call	2b084 <jdiv_round_up>
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
    b838:	1007883a 	mov	r3,r2
    b83c:	e0bffa17 	ldw	r2,-24(fp)
    b840:	10c00b15 	stw	r3,44(r2)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
    b844:	e0bffe17 	ldw	r2,-8(fp)
    b848:	10801017 	ldw	r2,64(r2)
    b84c:	1021883a 	mov	r16,r2
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
    b850:	e0bffa17 	ldw	r2,-24(fp)
    b854:	10c00317 	ldw	r3,12(r2)
    b858:	e0bffa17 	ldw	r2,-24(fp)
    b85c:	10800a17 	ldw	r2,40(r2)
    b860:	1809883a 	mov	r4,r3
    b864:	100b883a 	mov	r5,r2
    b868:	002c1540 	call	2c154 <__mulsi3>
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
    b86c:	8009883a 	mov	r4,r16
    b870:	100b883a 	mov	r5,r2
    b874:	002c1540 	call	2c154 <__mulsi3>
    b878:	1021883a 	mov	r16,r2
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
    b87c:	e0bffe17 	ldw	r2,-8(fp)
    b880:	10c03f17 	ldw	r3,252(r2)
    b884:	e0bffe17 	ldw	r2,-8(fp)
    b888:	10805917 	ldw	r2,356(r2)
    b88c:	1809883a 	mov	r4,r3
    b890:	100b883a 	mov	r5,r2
    b894:	002c1540 	call	2c154 <__mulsi3>
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
    b898:	8009883a 	mov	r4,r16
    b89c:	100b883a 	mov	r5,r2
    b8a0:	002b0840 	call	2b084 <jdiv_round_up>
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
    b8a4:	1007883a 	mov	r3,r2
    b8a8:	e0bffa17 	ldw	r2,-24(fp)
    b8ac:	10c00c15 	stw	r3,48(r2)
				jdiv_round_up((long) cinfo->jpeg_height *
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Mark component needed (this flag isn't actually used for compression) */
			compptr->component_needed = TRUE;
    b8b0:	e0bffa17 	ldw	r2,-24(fp)
    b8b4:	00c00044 	movi	r3,1
    b8b8:	10c00d05 	stb	r3,52(r2)
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    b8bc:	e0bff917 	ldw	r2,-28(fp)
    b8c0:	10800044 	addi	r2,r2,1
    b8c4:	e0bff915 	stw	r2,-28(fp)
    b8c8:	e0bffa17 	ldw	r2,-24(fp)
    b8cc:	10801604 	addi	r2,r2,88
    b8d0:	e0bffa15 	stw	r2,-24(fp)
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    b8d4:	e0bffe17 	ldw	r2,-8(fp)
    b8d8:	10801217 	ldw	r2,72(r2)
    b8dc:	e0fff917 	ldw	r3,-28(fp)
    b8e0:	18bf6116 	blt	r3,r2,b668 <initial_setup+0x464>

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
		jdiv_round_up((long) cinfo->jpeg_height,
    b8e4:	e0bffe17 	ldw	r2,-8(fp)
    b8e8:	10801017 	ldw	r2,64(r2)
    b8ec:	1021883a 	mov	r16,r2
		(long) (cinfo->max_v_samp_factor * cinfo->block_size));
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	10c03f17 	ldw	r3,252(r2)
    b8f8:	e0bffe17 	ldw	r2,-8(fp)
    b8fc:	10805917 	ldw	r2,356(r2)
    b900:	1809883a 	mov	r4,r3
    b904:	100b883a 	mov	r5,r2
    b908:	002c1540 	call	2c154 <__mulsi3>

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
		jdiv_round_up((long) cinfo->jpeg_height,
    b90c:	8009883a 	mov	r4,r16
    b910:	100b883a 	mov	r5,r2
    b914:	002b0840 	call	2b084 <jdiv_round_up>
	}

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
    b918:	1007883a 	mov	r3,r2
    b91c:	e0bffe17 	ldw	r2,-8(fp)
    b920:	10c04215 	stw	r3,264(r2)
		jdiv_round_up((long) cinfo->jpeg_height,
		(long) (cinfo->max_v_samp_factor * cinfo->block_size));
}
    b924:	e037883a 	mov	sp,fp
    b928:	dfc00217 	ldw	ra,8(sp)
    b92c:	df000117 	ldw	fp,4(sp)
    b930:	dc000017 	ldw	r16,0(sp)
    b934:	dec00304 	addi	sp,sp,12
    b938:	f800283a 	ret

0000b93c <validate_script>:
LOCAL(void)
	validate_script (j_compress_ptr cinfo)
	/* Verify that the scan script in cinfo->scan_info[] is valid; also
	* determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
	*/
{
    b93c:	defd6f04 	addi	sp,sp,-2628
    b940:	dfc29015 	stw	ra,2624(sp)
    b944:	df028f15 	stw	fp,2620(sp)
    b948:	df028f04 	addi	fp,sp,2620
    b94c:	e13fff15 	stw	r4,-4(fp)
	int * last_bitpos_ptr;
	int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
	/* -1 until that coefficient has been seen; then last Al for it */
#endif

	if (cinfo->num_scans <= 0)
    b950:	e0bfff17 	ldw	r2,-4(fp)
    b954:	10803117 	ldw	r2,196(r2)
    b958:	00800c16 	blt	zero,r2,b98c <validate_script+0x50>
		ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
    b95c:	e0bfff17 	ldw	r2,-4(fp)
    b960:	10800017 	ldw	r2,0(r2)
    b964:	00c00504 	movi	r3,20
    b968:	10c00515 	stw	r3,20(r2)
    b96c:	e0bfff17 	ldw	r2,-4(fp)
    b970:	10800017 	ldw	r2,0(r2)
    b974:	10000615 	stw	zero,24(r2)
    b978:	e0bfff17 	ldw	r2,-4(fp)
    b97c:	10800017 	ldw	r2,0(r2)
    b980:	10800017 	ldw	r2,0(r2)
    b984:	e13fff17 	ldw	r4,-4(fp)
    b988:	103ee83a 	callr	r2

	/* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
	* for progressive JPEG, no scan can have this.
	*/
	scanptr = cinfo->scan_info;
    b98c:	e0bfff17 	ldw	r2,-4(fp)
    b990:	10803217 	ldw	r2,200(r2)
    b994:	e0bd7115 	stw	r2,-2620(fp)
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
    b998:	e0bd7117 	ldw	r2,-2620(fp)
    b99c:	10800517 	ldw	r2,20(r2)
    b9a0:	1000041e 	bne	r2,zero,b9b4 <validate_script+0x78>
    b9a4:	e0bd7117 	ldw	r2,-2620(fp)
    b9a8:	10800617 	ldw	r2,24(r2)
    b9ac:	10800fe0 	cmpeqi	r2,r2,63
    b9b0:	10001d1e 	bne	r2,zero,ba28 <validate_script+0xec>
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
    b9b4:	e0bfff17 	ldw	r2,-4(fp)
    b9b8:	00c00044 	movi	r3,1
    b9bc:	10c03d05 	stb	r3,244(r2)
		last_bitpos_ptr = & last_bitpos[0][0];
    b9c0:	e0bd7f04 	addi	r2,fp,-2564
    b9c4:	e0bd7515 	stw	r2,-2604(fp)
		for (ci = 0; ci < cinfo->num_components; ci++) 
    b9c8:	e03d7315 	stw	zero,-2612(fp)
    b9cc:	00001106 	br	ba14 <validate_script+0xd8>
			for (coefi = 0; coefi < DCTSIZE2; coefi++)
    b9d0:	e03d7415 	stw	zero,-2608(fp)
    b9d4:	00000906 	br	b9fc <validate_script+0xc0>
				*last_bitpos_ptr++ = -1;
    b9d8:	e0bd7517 	ldw	r2,-2604(fp)
    b9dc:	00ffffc4 	movi	r3,-1
    b9e0:	10c00015 	stw	r3,0(r2)
    b9e4:	e0bd7517 	ldw	r2,-2604(fp)
    b9e8:	10800104 	addi	r2,r2,4
    b9ec:	e0bd7515 	stw	r2,-2604(fp)
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
		last_bitpos_ptr = & last_bitpos[0][0];
		for (ci = 0; ci < cinfo->num_components; ci++) 
			for (coefi = 0; coefi < DCTSIZE2; coefi++)
    b9f0:	e0bd7417 	ldw	r2,-2608(fp)
    b9f4:	10800044 	addi	r2,r2,1
    b9f8:	e0bd7415 	stw	r2,-2608(fp)
    b9fc:	e0bd7417 	ldw	r2,-2608(fp)
    ba00:	10801010 	cmplti	r2,r2,64
    ba04:	103ff41e 	bne	r2,zero,b9d8 <validate_script+0x9c>
	scanptr = cinfo->scan_info;
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
		last_bitpos_ptr = & last_bitpos[0][0];
		for (ci = 0; ci < cinfo->num_components; ci++) 
    ba08:	e0bd7317 	ldw	r2,-2612(fp)
    ba0c:	10800044 	addi	r2,r2,1
    ba10:	e0bd7315 	stw	r2,-2612(fp)
    ba14:	e0bfff17 	ldw	r2,-4(fp)
    ba18:	10801217 	ldw	r2,72(r2)
    ba1c:	e0fd7317 	ldw	r3,-2612(fp)
    ba20:	18bfeb16 	blt	r3,r2,b9d0 <validate_script+0x94>

	/* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
	* for progressive JPEG, no scan can have this.
	*/
	scanptr = cinfo->scan_info;
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
    ba24:	00000f06 	br	ba64 <validate_script+0x128>
				*last_bitpos_ptr++ = -1;
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
    ba28:	e0bfff17 	ldw	r2,-4(fp)
    ba2c:	10003d05 	stb	zero,244(r2)
		for (ci = 0; ci < cinfo->num_components; ci++) 
    ba30:	e03d7315 	stw	zero,-2612(fp)
    ba34:	00000706 	br	ba54 <validate_script+0x118>
			component_sent[ci] = FALSE;
    ba38:	e0fd7c04 	addi	r3,fp,-2576
    ba3c:	e0bd7317 	ldw	r2,-2612(fp)
    ba40:	1885883a 	add	r2,r3,r2
    ba44:	10000005 	stb	zero,0(r2)
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
		for (ci = 0; ci < cinfo->num_components; ci++) 
    ba48:	e0bd7317 	ldw	r2,-2612(fp)
    ba4c:	10800044 	addi	r2,r2,1
    ba50:	e0bd7315 	stw	r2,-2612(fp)
    ba54:	e0bfff17 	ldw	r2,-4(fp)
    ba58:	10801217 	ldw	r2,72(r2)
    ba5c:	e0fd7317 	ldw	r3,-2612(fp)
    ba60:	18bff516 	blt	r3,r2,ba38 <validate_script+0xfc>
			component_sent[ci] = FALSE;
	}

	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
    ba64:	00800044 	movi	r2,1
    ba68:	e0bd7215 	stw	r2,-2616(fp)
    ba6c:	00015306 	br	bfbc <validate_script+0x680>
		/* Validate component indexes */
		ncomps = scanptr->comps_in_scan;
    ba70:	e0bd7117 	ldw	r2,-2620(fp)
    ba74:	10800017 	ldw	r2,0(r2)
    ba78:	e0bd7615 	stw	r2,-2600(fp)
		if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
    ba7c:	e0bd7617 	ldw	r2,-2600(fp)
    ba80:	0080030e 	bge	zero,r2,ba90 <validate_script+0x154>
    ba84:	e0bd7617 	ldw	r2,-2600(fp)
    ba88:	10800150 	cmplti	r2,r2,5
    ba8c:	1000111e 	bne	r2,zero,bad4 <validate_script+0x198>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
    ba90:	e0bfff17 	ldw	r2,-4(fp)
    ba94:	10800017 	ldw	r2,0(r2)
    ba98:	00c006c4 	movi	r3,27
    ba9c:	10c00515 	stw	r3,20(r2)
    baa0:	e0bfff17 	ldw	r2,-4(fp)
    baa4:	10800017 	ldw	r2,0(r2)
    baa8:	e0fd7617 	ldw	r3,-2600(fp)
    baac:	10c00615 	stw	r3,24(r2)
    bab0:	e0bfff17 	ldw	r2,-4(fp)
    bab4:	10800017 	ldw	r2,0(r2)
    bab8:	00c00104 	movi	r3,4
    babc:	10c00715 	stw	r3,28(r2)
    bac0:	e0bfff17 	ldw	r2,-4(fp)
    bac4:	10800017 	ldw	r2,0(r2)
    bac8:	10800017 	ldw	r2,0(r2)
    bacc:	e13fff17 	ldw	r4,-4(fp)
    bad0:	103ee83a 	callr	r2
		for (ci = 0; ci < ncomps; ci++) {
    bad4:	e03d7315 	stw	zero,-2612(fp)
    bad8:	00003706 	br	bbb8 <validate_script+0x27c>
			thisi = scanptr->component_index[ci];
    badc:	e0fd7117 	ldw	r3,-2620(fp)
    bae0:	e0bd7317 	ldw	r2,-2612(fp)
    bae4:	10800044 	addi	r2,r2,1
    bae8:	1085883a 	add	r2,r2,r2
    baec:	1085883a 	add	r2,r2,r2
    baf0:	1885883a 	add	r2,r3,r2
    baf4:	10800017 	ldw	r2,0(r2)
    baf8:	e0bd7715 	stw	r2,-2596(fp)
			if (thisi < 0 || thisi >= cinfo->num_components)
    bafc:	e0bd7717 	ldw	r2,-2596(fp)
    bb00:	10000416 	blt	r2,zero,bb14 <validate_script+0x1d8>
    bb04:	e0bfff17 	ldw	r2,-4(fp)
    bb08:	10801217 	ldw	r2,72(r2)
    bb0c:	e0fd7717 	ldw	r3,-2596(fp)
    bb10:	18800d16 	blt	r3,r2,bb48 <validate_script+0x20c>
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    bb14:	e0bfff17 	ldw	r2,-4(fp)
    bb18:	10800017 	ldw	r2,0(r2)
    bb1c:	00c00504 	movi	r3,20
    bb20:	10c00515 	stw	r3,20(r2)
    bb24:	e0bfff17 	ldw	r2,-4(fp)
    bb28:	10800017 	ldw	r2,0(r2)
    bb2c:	e0fd7217 	ldw	r3,-2616(fp)
    bb30:	10c00615 	stw	r3,24(r2)
    bb34:	e0bfff17 	ldw	r2,-4(fp)
    bb38:	10800017 	ldw	r2,0(r2)
    bb3c:	10800017 	ldw	r2,0(r2)
    bb40:	e13fff17 	ldw	r4,-4(fp)
    bb44:	103ee83a 	callr	r2
			/* Components must appear in SOF order within each scan */
			if (ci > 0 && thisi <= scanptr->component_index[ci-1])
    bb48:	e0bd7317 	ldw	r2,-2612(fp)
    bb4c:	0080170e 	bge	zero,r2,bbac <validate_script+0x270>
    bb50:	e0bd7317 	ldw	r2,-2612(fp)
    bb54:	10bfffc4 	addi	r2,r2,-1
    bb58:	e0fd7117 	ldw	r3,-2620(fp)
    bb5c:	10800044 	addi	r2,r2,1
    bb60:	1085883a 	add	r2,r2,r2
    bb64:	1085883a 	add	r2,r2,r2
    bb68:	1885883a 	add	r2,r3,r2
    bb6c:	10c00017 	ldw	r3,0(r2)
    bb70:	e0bd7717 	ldw	r2,-2596(fp)
    bb74:	18800d16 	blt	r3,r2,bbac <validate_script+0x270>
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    bb78:	e0bfff17 	ldw	r2,-4(fp)
    bb7c:	10800017 	ldw	r2,0(r2)
    bb80:	00c00504 	movi	r3,20
    bb84:	10c00515 	stw	r3,20(r2)
    bb88:	e0bfff17 	ldw	r2,-4(fp)
    bb8c:	10800017 	ldw	r2,0(r2)
    bb90:	e0fd7217 	ldw	r3,-2616(fp)
    bb94:	10c00615 	stw	r3,24(r2)
    bb98:	e0bfff17 	ldw	r2,-4(fp)
    bb9c:	10800017 	ldw	r2,0(r2)
    bba0:	10800017 	ldw	r2,0(r2)
    bba4:	e13fff17 	ldw	r4,-4(fp)
    bba8:	103ee83a 	callr	r2
	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
		/* Validate component indexes */
		ncomps = scanptr->comps_in_scan;
		if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
		for (ci = 0; ci < ncomps; ci++) {
    bbac:	e0bd7317 	ldw	r2,-2612(fp)
    bbb0:	10800044 	addi	r2,r2,1
    bbb4:	e0bd7315 	stw	r2,-2612(fp)
    bbb8:	e0fd7317 	ldw	r3,-2612(fp)
    bbbc:	e0bd7617 	ldw	r2,-2600(fp)
    bbc0:	18bfc616 	blt	r3,r2,badc <validate_script+0x1a0>
			/* Components must appear in SOF order within each scan */
			if (ci > 0 && thisi <= scanptr->component_index[ci-1])
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
		}
		/* Validate progression parameters */
		Ss = scanptr->Ss;
    bbc4:	e0bd7117 	ldw	r2,-2620(fp)
    bbc8:	10800517 	ldw	r2,20(r2)
    bbcc:	e0bd7815 	stw	r2,-2592(fp)
		Se = scanptr->Se;
    bbd0:	e0bd7117 	ldw	r2,-2620(fp)
    bbd4:	10800617 	ldw	r2,24(r2)
    bbd8:	e0bd7915 	stw	r2,-2588(fp)
		Ah = scanptr->Ah;
    bbdc:	e0bd7117 	ldw	r2,-2620(fp)
    bbe0:	10800717 	ldw	r2,28(r2)
    bbe4:	e0bd7a15 	stw	r2,-2584(fp)
		Al = scanptr->Al;
    bbe8:	e0bd7117 	ldw	r2,-2620(fp)
    bbec:	10800817 	ldw	r2,32(r2)
    bbf0:	e0bd7b15 	stw	r2,-2580(fp)
		if (cinfo->progressive_mode) {
    bbf4:	e0bfff17 	ldw	r2,-4(fp)
    bbf8:	10803d03 	ldbu	r2,244(r2)
    bbfc:	10803fcc 	andi	r2,r2,255
    bc00:	1000aa26 	beq	r2,zero,beac <validate_script+0x570>
#if BITS_IN_JSAMPLE == 8
#define MAX_AH_AL 10
#else
#define MAX_AH_AL 13
#endif
			if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
    bc04:	e0bd7817 	ldw	r2,-2592(fp)
    bc08:	10001316 	blt	r2,zero,bc58 <validate_script+0x31c>
    bc0c:	e0bd7817 	ldw	r2,-2592(fp)
    bc10:	10801008 	cmpgei	r2,r2,64
    bc14:	1000101e 	bne	r2,zero,bc58 <validate_script+0x31c>
    bc18:	e0fd7917 	ldw	r3,-2588(fp)
    bc1c:	e0bd7817 	ldw	r2,-2592(fp)
    bc20:	18800d16 	blt	r3,r2,bc58 <validate_script+0x31c>
    bc24:	e0bd7917 	ldw	r2,-2588(fp)
    bc28:	10801008 	cmpgei	r2,r2,64
    bc2c:	10000a1e 	bne	r2,zero,bc58 <validate_script+0x31c>
    bc30:	e0bd7a17 	ldw	r2,-2584(fp)
    bc34:	10000816 	blt	r2,zero,bc58 <validate_script+0x31c>
				Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
    bc38:	e0bd7a17 	ldw	r2,-2584(fp)
    bc3c:	108002c8 	cmpgei	r2,r2,11
    bc40:	1000051e 	bne	r2,zero,bc58 <validate_script+0x31c>
    bc44:	e0bd7b17 	ldw	r2,-2580(fp)
    bc48:	10000316 	blt	r2,zero,bc58 <validate_script+0x31c>
    bc4c:	e0bd7b17 	ldw	r2,-2580(fp)
    bc50:	108002d0 	cmplti	r2,r2,11
    bc54:	10000d1e 	bne	r2,zero,bc8c <validate_script+0x350>
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bc58:	e0bfff17 	ldw	r2,-4(fp)
    bc5c:	10800017 	ldw	r2,0(r2)
    bc60:	00c00484 	movi	r3,18
    bc64:	10c00515 	stw	r3,20(r2)
    bc68:	e0bfff17 	ldw	r2,-4(fp)
    bc6c:	10800017 	ldw	r2,0(r2)
    bc70:	e0fd7217 	ldw	r3,-2616(fp)
    bc74:	10c00615 	stw	r3,24(r2)
    bc78:	e0bfff17 	ldw	r2,-4(fp)
    bc7c:	10800017 	ldw	r2,0(r2)
    bc80:	10800017 	ldw	r2,0(r2)
    bc84:	e13fff17 	ldw	r4,-4(fp)
    bc88:	103ee83a 	callr	r2
			if (Ss == 0) {
    bc8c:	e0bd7817 	ldw	r2,-2592(fp)
    bc90:	1000101e 	bne	r2,zero,bcd4 <validate_script+0x398>
				if (Se != 0)		/* DC and AC together not OK */
    bc94:	e0bd7917 	ldw	r2,-2588(fp)
    bc98:	10001e26 	beq	r2,zero,bd14 <validate_script+0x3d8>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bc9c:	e0bfff17 	ldw	r2,-4(fp)
    bca0:	10800017 	ldw	r2,0(r2)
    bca4:	00c00484 	movi	r3,18
    bca8:	10c00515 	stw	r3,20(r2)
    bcac:	e0bfff17 	ldw	r2,-4(fp)
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	e0fd7217 	ldw	r3,-2616(fp)
    bcb8:	10c00615 	stw	r3,24(r2)
    bcbc:	e0bfff17 	ldw	r2,-4(fp)
    bcc0:	10800017 	ldw	r2,0(r2)
    bcc4:	10800017 	ldw	r2,0(r2)
    bcc8:	e13fff17 	ldw	r4,-4(fp)
    bccc:	103ee83a 	callr	r2
    bcd0:	00001006 	br	bd14 <validate_script+0x3d8>
			} else {
				if (ncomps != 1)	/* AC scans must be for only one component */
    bcd4:	e0bd7617 	ldw	r2,-2600(fp)
    bcd8:	10800060 	cmpeqi	r2,r2,1
    bcdc:	10000d1e 	bne	r2,zero,bd14 <validate_script+0x3d8>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bce0:	e0bfff17 	ldw	r2,-4(fp)
    bce4:	10800017 	ldw	r2,0(r2)
    bce8:	00c00484 	movi	r3,18
    bcec:	10c00515 	stw	r3,20(r2)
    bcf0:	e0bfff17 	ldw	r2,-4(fp)
    bcf4:	10800017 	ldw	r2,0(r2)
    bcf8:	e0fd7217 	ldw	r3,-2616(fp)
    bcfc:	10c00615 	stw	r3,24(r2)
    bd00:	e0bfff17 	ldw	r2,-4(fp)
    bd04:	10800017 	ldw	r2,0(r2)
    bd08:	10800017 	ldw	r2,0(r2)
    bd0c:	e13fff17 	ldw	r4,-4(fp)
    bd10:	103ee83a 	callr	r2
			}
			for (ci = 0; ci < ncomps; ci++) {
    bd14:	e03d7315 	stw	zero,-2612(fp)
    bd18:	00006006 	br	be9c <validate_script+0x560>
				last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
    bd1c:	e0fd7117 	ldw	r3,-2620(fp)
    bd20:	e0bd7317 	ldw	r2,-2612(fp)
    bd24:	10800044 	addi	r2,r2,1
    bd28:	1085883a 	add	r2,r2,r2
    bd2c:	1085883a 	add	r2,r2,r2
    bd30:	1885883a 	add	r2,r3,r2
    bd34:	10800017 	ldw	r2,0(r2)
    bd38:	e0fd7f04 	addi	r3,fp,-2564
    bd3c:	1004923a 	slli	r2,r2,8
    bd40:	1885883a 	add	r2,r3,r2
    bd44:	e0bd7515 	stw	r2,-2604(fp)
				if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
    bd48:	e0bd7817 	ldw	r2,-2592(fp)
    bd4c:	10001026 	beq	r2,zero,bd90 <validate_script+0x454>
    bd50:	e0bd7517 	ldw	r2,-2604(fp)
    bd54:	10800017 	ldw	r2,0(r2)
    bd58:	10000d0e 	bge	r2,zero,bd90 <validate_script+0x454>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
    bd60:	10800017 	ldw	r2,0(r2)
    bd64:	00c00484 	movi	r3,18
    bd68:	10c00515 	stw	r3,20(r2)
    bd6c:	e0bfff17 	ldw	r2,-4(fp)
    bd70:	10800017 	ldw	r2,0(r2)
    bd74:	e0fd7217 	ldw	r3,-2616(fp)
    bd78:	10c00615 	stw	r3,24(r2)
    bd7c:	e0bfff17 	ldw	r2,-4(fp)
    bd80:	10800017 	ldw	r2,0(r2)
    bd84:	10800017 	ldw	r2,0(r2)
    bd88:	e13fff17 	ldw	r4,-4(fp)
    bd8c:	103ee83a 	callr	r2
				for (coefi = Ss; coefi <= Se; coefi++) {
    bd90:	e0bd7817 	ldw	r2,-2592(fp)
    bd94:	e0bd7415 	stw	r2,-2608(fp)
    bd98:	00003a06 	br	be84 <validate_script+0x548>
					if (last_bitpos_ptr[coefi] < 0) {
    bd9c:	e0bd7417 	ldw	r2,-2608(fp)
    bda0:	1085883a 	add	r2,r2,r2
    bda4:	1085883a 	add	r2,r2,r2
    bda8:	e0fd7517 	ldw	r3,-2604(fp)
    bdac:	1885883a 	add	r2,r3,r2
    bdb0:	10800017 	ldw	r2,0(r2)
    bdb4:	1000100e 	bge	r2,zero,bdf8 <validate_script+0x4bc>
						/* first scan of this coefficient */
						if (Ah != 0)
    bdb8:	e0bd7a17 	ldw	r2,-2584(fp)
    bdbc:	10002726 	beq	r2,zero,be5c <validate_script+0x520>
							ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bdc0:	e0bfff17 	ldw	r2,-4(fp)
    bdc4:	10800017 	ldw	r2,0(r2)
    bdc8:	00c00484 	movi	r3,18
    bdcc:	10c00515 	stw	r3,20(r2)
    bdd0:	e0bfff17 	ldw	r2,-4(fp)
    bdd4:	10800017 	ldw	r2,0(r2)
    bdd8:	e0fd7217 	ldw	r3,-2616(fp)
    bddc:	10c00615 	stw	r3,24(r2)
    bde0:	e0bfff17 	ldw	r2,-4(fp)
    bde4:	10800017 	ldw	r2,0(r2)
    bde8:	10800017 	ldw	r2,0(r2)
    bdec:	e13fff17 	ldw	r4,-4(fp)
    bdf0:	103ee83a 	callr	r2
    bdf4:	00001906 	br	be5c <validate_script+0x520>
					} else {
						/* not first scan */
						if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
    bdf8:	e0bd7417 	ldw	r2,-2608(fp)
    bdfc:	1085883a 	add	r2,r2,r2
    be00:	1085883a 	add	r2,r2,r2
    be04:	e0fd7517 	ldw	r3,-2604(fp)
    be08:	1885883a 	add	r2,r3,r2
    be0c:	10c00017 	ldw	r3,0(r2)
    be10:	e0bd7a17 	ldw	r2,-2584(fp)
    be14:	1880041e 	bne	r3,r2,be28 <validate_script+0x4ec>
    be18:	e0bd7a17 	ldw	r2,-2584(fp)
    be1c:	10ffffc4 	addi	r3,r2,-1
    be20:	e0bd7b17 	ldw	r2,-2580(fp)
    be24:	18800d26 	beq	r3,r2,be5c <validate_script+0x520>
							ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    be28:	e0bfff17 	ldw	r2,-4(fp)
    be2c:	10800017 	ldw	r2,0(r2)
    be30:	00c00484 	movi	r3,18
    be34:	10c00515 	stw	r3,20(r2)
    be38:	e0bfff17 	ldw	r2,-4(fp)
    be3c:	10800017 	ldw	r2,0(r2)
    be40:	e0fd7217 	ldw	r3,-2616(fp)
    be44:	10c00615 	stw	r3,24(r2)
    be48:	e0bfff17 	ldw	r2,-4(fp)
    be4c:	10800017 	ldw	r2,0(r2)
    be50:	10800017 	ldw	r2,0(r2)
    be54:	e13fff17 	ldw	r4,-4(fp)
    be58:	103ee83a 	callr	r2
					}
					last_bitpos_ptr[coefi] = Al;
    be5c:	e0bd7417 	ldw	r2,-2608(fp)
    be60:	1085883a 	add	r2,r2,r2
    be64:	1085883a 	add	r2,r2,r2
    be68:	e0fd7517 	ldw	r3,-2604(fp)
    be6c:	1885883a 	add	r2,r3,r2
    be70:	e0fd7b17 	ldw	r3,-2580(fp)
    be74:	10c00015 	stw	r3,0(r2)
			}
			for (ci = 0; ci < ncomps; ci++) {
				last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
				if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
				for (coefi = Ss; coefi <= Se; coefi++) {
    be78:	e0bd7417 	ldw	r2,-2608(fp)
    be7c:	10800044 	addi	r2,r2,1
    be80:	e0bd7415 	stw	r2,-2608(fp)
    be84:	e0bd7417 	ldw	r2,-2608(fp)
    be88:	e0fd7917 	ldw	r3,-2588(fp)
    be8c:	18bfc30e 	bge	r3,r2,bd9c <validate_script+0x460>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			} else {
				if (ncomps != 1)	/* AC scans must be for only one component */
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			}
			for (ci = 0; ci < ncomps; ci++) {
    be90:	e0bd7317 	ldw	r2,-2612(fp)
    be94:	10800044 	addi	r2,r2,1
    be98:	e0bd7315 	stw	r2,-2612(fp)
    be9c:	e0fd7317 	ldw	r3,-2612(fp)
    bea0:	e0bd7617 	ldw	r2,-2600(fp)
    bea4:	18bf9d16 	blt	r3,r2,bd1c <validate_script+0x3e0>
    bea8:	00003e06 	br	bfa4 <validate_script+0x668>
				}
			}
#endif
		} else {
			/* For sequential JPEG, all progression parameters must be these: */
			if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
    beac:	e0bd7817 	ldw	r2,-2592(fp)
    beb0:	1000071e 	bne	r2,zero,bed0 <validate_script+0x594>
    beb4:	e0bd7917 	ldw	r2,-2588(fp)
    beb8:	10800fd8 	cmpnei	r2,r2,63
    bebc:	1000041e 	bne	r2,zero,bed0 <validate_script+0x594>
    bec0:	e0bd7a17 	ldw	r2,-2584(fp)
    bec4:	1000021e 	bne	r2,zero,bed0 <validate_script+0x594>
    bec8:	e0bd7b17 	ldw	r2,-2580(fp)
    becc:	10000d26 	beq	r2,zero,bf04 <validate_script+0x5c8>
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    bed0:	e0bfff17 	ldw	r2,-4(fp)
    bed4:	10800017 	ldw	r2,0(r2)
    bed8:	00c00484 	movi	r3,18
    bedc:	10c00515 	stw	r3,20(r2)
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	10800017 	ldw	r2,0(r2)
    bee8:	e0fd7217 	ldw	r3,-2616(fp)
    beec:	10c00615 	stw	r3,24(r2)
    bef0:	e0bfff17 	ldw	r2,-4(fp)
    bef4:	10800017 	ldw	r2,0(r2)
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	e13fff17 	ldw	r4,-4(fp)
    bf00:	103ee83a 	callr	r2
			/* Make sure components are not sent twice */
			for (ci = 0; ci < ncomps; ci++) {
    bf04:	e03d7315 	stw	zero,-2612(fp)
    bf08:	00002306 	br	bf98 <validate_script+0x65c>
				thisi = scanptr->component_index[ci];
    bf0c:	e0fd7117 	ldw	r3,-2620(fp)
    bf10:	e0bd7317 	ldw	r2,-2612(fp)
    bf14:	10800044 	addi	r2,r2,1
    bf18:	1085883a 	add	r2,r2,r2
    bf1c:	1085883a 	add	r2,r2,r2
    bf20:	1885883a 	add	r2,r3,r2
    bf24:	10800017 	ldw	r2,0(r2)
    bf28:	e0bd7715 	stw	r2,-2596(fp)
				if (component_sent[thisi])
    bf2c:	e0fd7c04 	addi	r3,fp,-2576
    bf30:	e0bd7717 	ldw	r2,-2596(fp)
    bf34:	1885883a 	add	r2,r3,r2
    bf38:	10800003 	ldbu	r2,0(r2)
    bf3c:	10803fcc 	andi	r2,r2,255
    bf40:	10000d26 	beq	r2,zero,bf78 <validate_script+0x63c>
					ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    bf44:	e0bfff17 	ldw	r2,-4(fp)
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	00c00504 	movi	r3,20
    bf50:	10c00515 	stw	r3,20(r2)
    bf54:	e0bfff17 	ldw	r2,-4(fp)
    bf58:	10800017 	ldw	r2,0(r2)
    bf5c:	e0fd7217 	ldw	r3,-2616(fp)
    bf60:	10c00615 	stw	r3,24(r2)
    bf64:	e0bfff17 	ldw	r2,-4(fp)
    bf68:	10800017 	ldw	r2,0(r2)
    bf6c:	10800017 	ldw	r2,0(r2)
    bf70:	e13fff17 	ldw	r4,-4(fp)
    bf74:	103ee83a 	callr	r2
				component_sent[thisi] = TRUE;
    bf78:	e0fd7c04 	addi	r3,fp,-2576
    bf7c:	e0bd7717 	ldw	r2,-2596(fp)
    bf80:	1885883a 	add	r2,r3,r2
    bf84:	00c00044 	movi	r3,1
    bf88:	10c00005 	stb	r3,0(r2)
		} else {
			/* For sequential JPEG, all progression parameters must be these: */
			if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			/* Make sure components are not sent twice */
			for (ci = 0; ci < ncomps; ci++) {
    bf8c:	e0bd7317 	ldw	r2,-2612(fp)
    bf90:	10800044 	addi	r2,r2,1
    bf94:	e0bd7315 	stw	r2,-2612(fp)
    bf98:	e0fd7317 	ldw	r3,-2612(fp)
    bf9c:	e0bd7617 	ldw	r2,-2600(fp)
    bfa0:	18bfda16 	blt	r3,r2,bf0c <validate_script+0x5d0>
		cinfo->progressive_mode = FALSE;
		for (ci = 0; ci < cinfo->num_components; ci++) 
			component_sent[ci] = FALSE;
	}

	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
    bfa4:	e0bd7117 	ldw	r2,-2620(fp)
    bfa8:	10800904 	addi	r2,r2,36
    bfac:	e0bd7115 	stw	r2,-2620(fp)
    bfb0:	e0bd7217 	ldw	r2,-2616(fp)
    bfb4:	10800044 	addi	r2,r2,1
    bfb8:	e0bd7215 	stw	r2,-2616(fp)
    bfbc:	e0bfff17 	ldw	r2,-4(fp)
    bfc0:	10c03117 	ldw	r3,196(r2)
    bfc4:	e0bd7217 	ldw	r2,-2616(fp)
    bfc8:	18bea90e 	bge	r3,r2,ba70 <validate_script+0x134>
			}
		}
	}

	/* Now verify that everything got sent. */
	if (cinfo->progressive_mode) {
    bfcc:	e0bfff17 	ldw	r2,-4(fp)
    bfd0:	10803d03 	ldbu	r2,244(r2)
    bfd4:	10803fcc 	andi	r2,r2,255
    bfd8:	10001a26 	beq	r2,zero,c044 <validate_script+0x708>
		/* For progressive mode, we only check that at least some DC data
		* got sent for each component; the spec does not require that all bits
		* of all coefficients be transmitted.  Would it be wiser to enforce
		* transmission of all coefficient bits??
		*/
		for (ci = 0; ci < cinfo->num_components; ci++) {
    bfdc:	e03d7315 	stw	zero,-2612(fp)
    bfe0:	00001306 	br	c030 <validate_script+0x6f4>
			if (last_bitpos[ci][0] < 0)
    bfe4:	e0bd7317 	ldw	r2,-2612(fp)
    bfe8:	1004923a 	slli	r2,r2,8
    bfec:	e0fd7104 	addi	r3,fp,-2620
    bff0:	1885883a 	add	r2,r3,r2
    bff4:	10800e04 	addi	r2,r2,56
    bff8:	10800017 	ldw	r2,0(r2)
    bffc:	1000090e 	bge	r2,zero,c024 <validate_script+0x6e8>
				ERREXIT(cinfo, JERR_MISSING_DATA);
    c000:	e0bfff17 	ldw	r2,-4(fp)
    c004:	10800017 	ldw	r2,0(r2)
    c008:	00c00b84 	movi	r3,46
    c00c:	10c00515 	stw	r3,20(r2)
    c010:	e0bfff17 	ldw	r2,-4(fp)
    c014:	10800017 	ldw	r2,0(r2)
    c018:	10800017 	ldw	r2,0(r2)
    c01c:	e13fff17 	ldw	r4,-4(fp)
    c020:	103ee83a 	callr	r2
		/* For progressive mode, we only check that at least some DC data
		* got sent for each component; the spec does not require that all bits
		* of all coefficients be transmitted.  Would it be wiser to enforce
		* transmission of all coefficient bits??
		*/
		for (ci = 0; ci < cinfo->num_components; ci++) {
    c024:	e0bd7317 	ldw	r2,-2612(fp)
    c028:	10800044 	addi	r2,r2,1
    c02c:	e0bd7315 	stw	r2,-2612(fp)
    c030:	e0bfff17 	ldw	r2,-4(fp)
    c034:	10801217 	ldw	r2,72(r2)
    c038:	e0fd7317 	ldw	r3,-2612(fp)
    c03c:	18bfe916 	blt	r3,r2,bfe4 <validate_script+0x6a8>
    c040:	00001806 	br	c0a4 <validate_script+0x768>
			if (last_bitpos[ci][0] < 0)
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
#endif
	} else {
		for (ci = 0; ci < cinfo->num_components; ci++) {
    c044:	e03d7315 	stw	zero,-2612(fp)
    c048:	00001206 	br	c094 <validate_script+0x758>
			if (! component_sent[ci])
    c04c:	e0fd7c04 	addi	r3,fp,-2576
    c050:	e0bd7317 	ldw	r2,-2612(fp)
    c054:	1885883a 	add	r2,r3,r2
    c058:	10800003 	ldbu	r2,0(r2)
    c05c:	10803fcc 	andi	r2,r2,255
    c060:	1000091e 	bne	r2,zero,c088 <validate_script+0x74c>
				ERREXIT(cinfo, JERR_MISSING_DATA);
    c064:	e0bfff17 	ldw	r2,-4(fp)
    c068:	10800017 	ldw	r2,0(r2)
    c06c:	00c00b84 	movi	r3,46
    c070:	10c00515 	stw	r3,20(r2)
    c074:	e0bfff17 	ldw	r2,-4(fp)
    c078:	10800017 	ldw	r2,0(r2)
    c07c:	10800017 	ldw	r2,0(r2)
    c080:	e13fff17 	ldw	r4,-4(fp)
    c084:	103ee83a 	callr	r2
			if (last_bitpos[ci][0] < 0)
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
#endif
	} else {
		for (ci = 0; ci < cinfo->num_components; ci++) {
    c088:	e0bd7317 	ldw	r2,-2612(fp)
    c08c:	10800044 	addi	r2,r2,1
    c090:	e0bd7315 	stw	r2,-2612(fp)
    c094:	e0bfff17 	ldw	r2,-4(fp)
    c098:	10801217 	ldw	r2,72(r2)
    c09c:	e0fd7317 	ldw	r3,-2612(fp)
    c0a0:	18bfea16 	blt	r3,r2,c04c <validate_script+0x710>
			if (! component_sent[ci])
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
	}
}
    c0a4:	e037883a 	mov	sp,fp
    c0a8:	dfc00117 	ldw	ra,4(sp)
    c0ac:	df000017 	ldw	fp,0(sp)
    c0b0:	dec00204 	addi	sp,sp,8
    c0b4:	f800283a 	ret

0000c0b8 <reduce_script>:
LOCAL(void)
	reduce_script (j_compress_ptr cinfo)
	/* Adapt scan script for use with reduced block size;
	* assume that script has been validated before.
	*/
{
    c0b8:	defff904 	addi	sp,sp,-28
    c0bc:	dfc00615 	stw	ra,24(sp)
    c0c0:	df000515 	stw	fp,20(sp)
    c0c4:	dc000415 	stw	r16,16(sp)
    c0c8:	df000404 	addi	fp,sp,16
    c0cc:	e13fff15 	stw	r4,-4(fp)
	jpeg_scan_info * scanptr;
	int idxout, idxin;

	/* Circumvent const declaration for this function */
	scanptr = (jpeg_scan_info *) cinfo->scan_info;
    c0d0:	e0bfff17 	ldw	r2,-4(fp)
    c0d4:	10803217 	ldw	r2,200(r2)
    c0d8:	e0bffe15 	stw	r2,-8(fp)
	idxout = 0;
    c0dc:	e03ffc15 	stw	zero,-16(fp)

	for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
    c0e0:	e03ffd15 	stw	zero,-12(fp)
    c0e4:	00004606 	br	c200 <reduce_script+0x148>
		/* After skipping, idxout becomes smaller than idxin */
		if (idxin != idxout)
    c0e8:	e0fffd17 	ldw	r3,-12(fp)
    c0ec:	e0bffc17 	ldw	r2,-16(fp)
    c0f0:	18801e26 	beq	r3,r2,c16c <reduce_script+0xb4>
			/* Copy rest of data;
			* note we stay in given chunk of allocated memory.
			*/
			scanptr[idxout] = scanptr[idxin];
    c0f4:	e0bffc17 	ldw	r2,-16(fp)
    c0f8:	1009883a 	mov	r4,r2
    c0fc:	01400904 	movi	r5,36
    c100:	002c1540 	call	2c154 <__mulsi3>
    c104:	e0fffe17 	ldw	r3,-8(fp)
    c108:	18a1883a 	add	r16,r3,r2
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	1009883a 	mov	r4,r2
    c114:	01400904 	movi	r5,36
    c118:	002c1540 	call	2c154 <__mulsi3>
    c11c:	e0fffe17 	ldw	r3,-8(fp)
    c120:	1885883a 	add	r2,r3,r2
    c124:	10c00017 	ldw	r3,0(r2)
    c128:	80c00015 	stw	r3,0(r16)
    c12c:	10c00117 	ldw	r3,4(r2)
    c130:	80c00115 	stw	r3,4(r16)
    c134:	10c00217 	ldw	r3,8(r2)
    c138:	80c00215 	stw	r3,8(r16)
    c13c:	10c00317 	ldw	r3,12(r2)
    c140:	80c00315 	stw	r3,12(r16)
    c144:	10c00417 	ldw	r3,16(r2)
    c148:	80c00415 	stw	r3,16(r16)
    c14c:	10c00517 	ldw	r3,20(r2)
    c150:	80c00515 	stw	r3,20(r16)
    c154:	10c00617 	ldw	r3,24(r2)
    c158:	80c00615 	stw	r3,24(r16)
    c15c:	10c00717 	ldw	r3,28(r2)
    c160:	80c00715 	stw	r3,28(r16)
    c164:	10800817 	ldw	r2,32(r2)
    c168:	80800815 	stw	r2,32(r16)
		if (scanptr[idxout].Ss > cinfo->lim_Se)
    c16c:	e0bffc17 	ldw	r2,-16(fp)
    c170:	1009883a 	mov	r4,r2
    c174:	01400904 	movi	r5,36
    c178:	002c1540 	call	2c154 <__mulsi3>
    c17c:	e0fffe17 	ldw	r3,-8(fp)
    c180:	1885883a 	add	r2,r3,r2
    c184:	10800517 	ldw	r2,20(r2)
    c188:	e0ffff17 	ldw	r3,-4(fp)
    c18c:	18c05b17 	ldw	r3,364(r3)
    c190:	18801716 	blt	r3,r2,c1f0 <reduce_script+0x138>
			/* Entire scan out of range - skip this entry */
			continue;
		if (scanptr[idxout].Se > cinfo->lim_Se)
    c194:	e0bffc17 	ldw	r2,-16(fp)
    c198:	1009883a 	mov	r4,r2
    c19c:	01400904 	movi	r5,36
    c1a0:	002c1540 	call	2c154 <__mulsi3>
    c1a4:	e0fffe17 	ldw	r3,-8(fp)
    c1a8:	1885883a 	add	r2,r3,r2
    c1ac:	10800617 	ldw	r2,24(r2)
    c1b0:	e0ffff17 	ldw	r3,-4(fp)
    c1b4:	18c05b17 	ldw	r3,364(r3)
    c1b8:	1880090e 	bge	r3,r2,c1e0 <reduce_script+0x128>
			/* Limit scan to end of block */
			scanptr[idxout].Se = cinfo->lim_Se;
    c1bc:	e0bffc17 	ldw	r2,-16(fp)
    c1c0:	1009883a 	mov	r4,r2
    c1c4:	01400904 	movi	r5,36
    c1c8:	002c1540 	call	2c154 <__mulsi3>
    c1cc:	e0fffe17 	ldw	r3,-8(fp)
    c1d0:	1885883a 	add	r2,r3,r2
    c1d4:	e0ffff17 	ldw	r3,-4(fp)
    c1d8:	18c05b17 	ldw	r3,364(r3)
    c1dc:	10c00615 	stw	r3,24(r2)
		idxout++;
    c1e0:	e0bffc17 	ldw	r2,-16(fp)
    c1e4:	10800044 	addi	r2,r2,1
    c1e8:	e0bffc15 	stw	r2,-16(fp)
    c1ec:	00000106 	br	c1f4 <reduce_script+0x13c>
			* note we stay in given chunk of allocated memory.
			*/
			scanptr[idxout] = scanptr[idxin];
		if (scanptr[idxout].Ss > cinfo->lim_Se)
			/* Entire scan out of range - skip this entry */
			continue;
    c1f0:	0001883a 	nop

	/* Circumvent const declaration for this function */
	scanptr = (jpeg_scan_info *) cinfo->scan_info;
	idxout = 0;

	for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
    c1f4:	e0bffd17 	ldw	r2,-12(fp)
    c1f8:	10800044 	addi	r2,r2,1
    c1fc:	e0bffd15 	stw	r2,-12(fp)
    c200:	e0bfff17 	ldw	r2,-4(fp)
    c204:	10803117 	ldw	r2,196(r2)
    c208:	e0fffd17 	ldw	r3,-12(fp)
    c20c:	18bfb616 	blt	r3,r2,c0e8 <reduce_script+0x30>
			/* Limit scan to end of block */
			scanptr[idxout].Se = cinfo->lim_Se;
		idxout++;
	}

	cinfo->num_scans = idxout;
    c210:	e0bfff17 	ldw	r2,-4(fp)
    c214:	e0fffc17 	ldw	r3,-16(fp)
    c218:	10c03115 	stw	r3,196(r2)
}
    c21c:	e037883a 	mov	sp,fp
    c220:	dfc00217 	ldw	ra,8(sp)
    c224:	df000117 	ldw	fp,4(sp)
    c228:	dc000017 	ldw	r16,0(sp)
    c22c:	dec00304 	addi	sp,sp,12
    c230:	f800283a 	ret

0000c234 <select_scan_parameters>:


LOCAL(void)
	select_scan_parameters (j_compress_ptr cinfo)
	/* Set up the scan parameters for the current scan */
{
    c234:	defff904 	addi	sp,sp,-28
    c238:	dfc00615 	stw	ra,24(sp)
    c23c:	df000515 	stw	fp,20(sp)
    c240:	dc000415 	stw	r16,16(sp)
    c244:	df000404 	addi	fp,sp,16
    c248:	e13fff15 	stw	r4,-4(fp)
	int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
	if (cinfo->scan_info != NULL) {
    c24c:	e0bfff17 	ldw	r2,-4(fp)
    c250:	10803217 	ldw	r2,200(r2)
    c254:	10004226 	beq	r2,zero,c360 <select_scan_parameters+0x12c>
		/* Prepare for current scan --- the script is already validated */
		my_master_ptr master = (my_master_ptr) cinfo->master;
    c258:	e0bfff17 	ldw	r2,-4(fp)
    c25c:	10805c17 	ldw	r2,368(r2)
    c260:	e0bffd15 	stw	r2,-12(fp)
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
    c264:	e0bfff17 	ldw	r2,-4(fp)
    c268:	14003217 	ldw	r16,200(r2)
    c26c:	e0bffd17 	ldw	r2,-12(fp)
    c270:	10800717 	ldw	r2,28(r2)
    c274:	1009883a 	mov	r4,r2
    c278:	01400904 	movi	r5,36
    c27c:	002c1540 	call	2c154 <__mulsi3>
    c280:	8085883a 	add	r2,r16,r2
    c284:	e0bffe15 	stw	r2,-8(fp)

		cinfo->comps_in_scan = scanptr->comps_in_scan;
    c288:	e0bffe17 	ldw	r2,-8(fp)
    c28c:	10c00017 	ldw	r3,0(r2)
    c290:	e0bfff17 	ldw	r2,-4(fp)
    c294:	10c04315 	stw	r3,268(r2)
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
    c298:	e03ffc15 	stw	zero,-16(fp)
    c29c:	00001706 	br	c2fc <select_scan_parameters+0xc8>
			cinfo->cur_comp_info[ci] =
				&cinfo->comp_info[scanptr->component_index[ci]];
    c2a0:	e0bfff17 	ldw	r2,-4(fp)
    c2a4:	14001417 	ldw	r16,80(r2)
    c2a8:	e0fffe17 	ldw	r3,-8(fp)
    c2ac:	e0bffc17 	ldw	r2,-16(fp)
    c2b0:	10800044 	addi	r2,r2,1
    c2b4:	1085883a 	add	r2,r2,r2
    c2b8:	1085883a 	add	r2,r2,r2
    c2bc:	1885883a 	add	r2,r3,r2
    c2c0:	10800017 	ldw	r2,0(r2)
    c2c4:	1009883a 	mov	r4,r2
    c2c8:	01401604 	movi	r5,88
    c2cc:	002c1540 	call	2c154 <__mulsi3>
    c2d0:	8087883a 	add	r3,r16,r2
		my_master_ptr master = (my_master_ptr) cinfo->master;
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

		cinfo->comps_in_scan = scanptr->comps_in_scan;
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
			cinfo->cur_comp_info[ci] =
    c2d4:	e13fff17 	ldw	r4,-4(fp)
    c2d8:	e0bffc17 	ldw	r2,-16(fp)
    c2dc:	10801104 	addi	r2,r2,68
    c2e0:	1085883a 	add	r2,r2,r2
    c2e4:	1085883a 	add	r2,r2,r2
    c2e8:	2085883a 	add	r2,r4,r2
    c2ec:	10c00015 	stw	r3,0(r2)
		/* Prepare for current scan --- the script is already validated */
		my_master_ptr master = (my_master_ptr) cinfo->master;
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

		cinfo->comps_in_scan = scanptr->comps_in_scan;
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
    c2f0:	e0bffc17 	ldw	r2,-16(fp)
    c2f4:	10800044 	addi	r2,r2,1
    c2f8:	e0bffc15 	stw	r2,-16(fp)
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	10800017 	ldw	r2,0(r2)
    c304:	e0fffc17 	ldw	r3,-16(fp)
    c308:	18bfe516 	blt	r3,r2,c2a0 <select_scan_parameters+0x6c>
			cinfo->cur_comp_info[ci] =
				&cinfo->comp_info[scanptr->component_index[ci]];
		}
		if (cinfo->progressive_mode) {
    c30c:	e0bfff17 	ldw	r2,-4(fp)
    c310:	10803d03 	ldbu	r2,244(r2)
    c314:	10803fcc 	andi	r2,r2,255
    c318:	10004226 	beq	r2,zero,c424 <select_scan_parameters+0x1f0>
			cinfo->Ss = scanptr->Ss;
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	10c00517 	ldw	r3,20(r2)
    c324:	e0bfff17 	ldw	r2,-4(fp)
    c328:	10c05515 	stw	r3,340(r2)
			cinfo->Se = scanptr->Se;
    c32c:	e0bffe17 	ldw	r2,-8(fp)
    c330:	10c00617 	ldw	r3,24(r2)
    c334:	e0bfff17 	ldw	r2,-4(fp)
    c338:	10c05615 	stw	r3,344(r2)
			cinfo->Ah = scanptr->Ah;
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	10c00717 	ldw	r3,28(r2)
    c344:	e0bfff17 	ldw	r2,-4(fp)
    c348:	10c05715 	stw	r3,348(r2)
			cinfo->Al = scanptr->Al;
    c34c:	e0bffe17 	ldw	r2,-8(fp)
    c350:	10c00817 	ldw	r3,32(r2)
    c354:	e0bfff17 	ldw	r2,-4(fp)
    c358:	10c05815 	stw	r3,352(r2)
			return;
    c35c:	00004106 	br	c464 <select_scan_parameters+0x230>
	}
	else
#endif
	{
		/* Prepare for single sequential-JPEG scan containing all components */
		if (cinfo->num_components > MAX_COMPS_IN_SCAN)
    c360:	e0bfff17 	ldw	r2,-4(fp)
    c364:	10801217 	ldw	r2,72(r2)
    c368:	10800150 	cmplti	r2,r2,5
    c36c:	1000121e 	bne	r2,zero,c3b8 <select_scan_parameters+0x184>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
    c370:	e0bfff17 	ldw	r2,-4(fp)
    c374:	10800017 	ldw	r2,0(r2)
    c378:	00c006c4 	movi	r3,27
    c37c:	10c00515 	stw	r3,20(r2)
    c380:	e0bfff17 	ldw	r2,-4(fp)
    c384:	10800017 	ldw	r2,0(r2)
    c388:	e0ffff17 	ldw	r3,-4(fp)
    c38c:	18c01217 	ldw	r3,72(r3)
    c390:	10c00615 	stw	r3,24(r2)
    c394:	e0bfff17 	ldw	r2,-4(fp)
    c398:	10800017 	ldw	r2,0(r2)
    c39c:	00c00104 	movi	r3,4
    c3a0:	10c00715 	stw	r3,28(r2)
    c3a4:	e0bfff17 	ldw	r2,-4(fp)
    c3a8:	10800017 	ldw	r2,0(r2)
    c3ac:	10800017 	ldw	r2,0(r2)
    c3b0:	e13fff17 	ldw	r4,-4(fp)
    c3b4:	103ee83a 	callr	r2
			MAX_COMPS_IN_SCAN);
		cinfo->comps_in_scan = cinfo->num_components;
    c3b8:	e0bfff17 	ldw	r2,-4(fp)
    c3bc:	10c01217 	ldw	r3,72(r2)
    c3c0:	e0bfff17 	ldw	r2,-4(fp)
    c3c4:	10c04315 	stw	r3,268(r2)
		for (ci = 0; ci < cinfo->num_components; ci++) {
    c3c8:	e03ffc15 	stw	zero,-16(fp)
    c3cc:	00001106 	br	c414 <select_scan_parameters+0x1e0>
			cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
    c3d0:	e0bfff17 	ldw	r2,-4(fp)
    c3d4:	14001417 	ldw	r16,80(r2)
    c3d8:	e0bffc17 	ldw	r2,-16(fp)
    c3dc:	1009883a 	mov	r4,r2
    c3e0:	01401604 	movi	r5,88
    c3e4:	002c1540 	call	2c154 <__mulsi3>
    c3e8:	8087883a 	add	r3,r16,r2
    c3ec:	e13fff17 	ldw	r4,-4(fp)
    c3f0:	e0bffc17 	ldw	r2,-16(fp)
    c3f4:	10801104 	addi	r2,r2,68
    c3f8:	1085883a 	add	r2,r2,r2
    c3fc:	1085883a 	add	r2,r2,r2
    c400:	2085883a 	add	r2,r4,r2
    c404:	10c00015 	stw	r3,0(r2)
		/* Prepare for single sequential-JPEG scan containing all components */
		if (cinfo->num_components > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
			MAX_COMPS_IN_SCAN);
		cinfo->comps_in_scan = cinfo->num_components;
		for (ci = 0; ci < cinfo->num_components; ci++) {
    c408:	e0bffc17 	ldw	r2,-16(fp)
    c40c:	10800044 	addi	r2,r2,1
    c410:	e0bffc15 	stw	r2,-16(fp)
    c414:	e0bfff17 	ldw	r2,-4(fp)
    c418:	10801217 	ldw	r2,72(r2)
    c41c:	e0fffc17 	ldw	r3,-16(fp)
    c420:	18bfeb16 	blt	r3,r2,c3d0 <select_scan_parameters+0x19c>
			cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
		}
	}
	cinfo->Ss = 0;
    c424:	e0bfff17 	ldw	r2,-4(fp)
    c428:	10005515 	stw	zero,340(r2)
	cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
    c42c:	e0bfff17 	ldw	r2,-4(fp)
    c430:	10c05917 	ldw	r3,356(r2)
    c434:	e0bfff17 	ldw	r2,-4(fp)
    c438:	10805917 	ldw	r2,356(r2)
    c43c:	1809883a 	mov	r4,r3
    c440:	100b883a 	mov	r5,r2
    c444:	002c1540 	call	2c154 <__mulsi3>
    c448:	10ffffc4 	addi	r3,r2,-1
    c44c:	e0bfff17 	ldw	r2,-4(fp)
    c450:	10c05615 	stw	r3,344(r2)
	cinfo->Ah = 0;
    c454:	e0bfff17 	ldw	r2,-4(fp)
    c458:	10005715 	stw	zero,348(r2)
	cinfo->Al = 0;
    c45c:	e0bfff17 	ldw	r2,-4(fp)
    c460:	10005815 	stw	zero,352(r2)
}
    c464:	e037883a 	mov	sp,fp
    c468:	dfc00217 	ldw	ra,8(sp)
    c46c:	df000117 	ldw	fp,4(sp)
    c470:	dc000017 	ldw	r16,0(sp)
    c474:	dec00304 	addi	sp,sp,12
    c478:	f800283a 	ret

0000c47c <per_scan_setup>:

LOCAL(void)
	per_scan_setup (j_compress_ptr cinfo)
	/* Do computations that are needed before processing a JPEG scan */
	/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
    c47c:	defff704 	addi	sp,sp,-36
    c480:	dfc00815 	stw	ra,32(sp)
    c484:	df000715 	stw	fp,28(sp)
    c488:	dc000615 	stw	r16,24(sp)
    c48c:	df000604 	addi	fp,sp,24
    c490:	e13fff15 	stw	r4,-4(fp)
	int ci, mcublks, tmp;
	jpeg_component_info *compptr;

	if (cinfo->comps_in_scan == 1) {
    c494:	e0bfff17 	ldw	r2,-4(fp)
    c498:	10804317 	ldw	r2,268(r2)
    c49c:	10800058 	cmpnei	r2,r2,1
    c4a0:	1000311e 	bne	r2,zero,c568 <per_scan_setup+0xec>

		/* Noninterleaved (single-component) scan */
		compptr = cinfo->cur_comp_info[0];
    c4a4:	e0bfff17 	ldw	r2,-4(fp)
    c4a8:	10804417 	ldw	r2,272(r2)
    c4ac:	e0bffd15 	stw	r2,-12(fp)

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = compptr->width_in_blocks;
    c4b0:	e0bffd17 	ldw	r2,-12(fp)
    c4b4:	10c00717 	ldw	r3,28(r2)
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	10c04815 	stw	r3,288(r2)
		cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    c4c0:	e0bffd17 	ldw	r2,-12(fp)
    c4c4:	10c00817 	ldw	r3,32(r2)
    c4c8:	e0bfff17 	ldw	r2,-4(fp)
    c4cc:	10c04915 	stw	r3,292(r2)

		/* For noninterleaved scan, always one block per MCU */
		compptr->MCU_width = 1;
    c4d0:	e0bffd17 	ldw	r2,-12(fp)
    c4d4:	00c00044 	movi	r3,1
    c4d8:	10c00e15 	stw	r3,56(r2)
		compptr->MCU_height = 1;
    c4dc:	e0bffd17 	ldw	r2,-12(fp)
    c4e0:	00c00044 	movi	r3,1
    c4e4:	10c00f15 	stw	r3,60(r2)
		compptr->MCU_blocks = 1;
    c4e8:	e0bffd17 	ldw	r2,-12(fp)
    c4ec:	00c00044 	movi	r3,1
    c4f0:	10c01015 	stw	r3,64(r2)
		compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
    c4f4:	e0bffd17 	ldw	r2,-12(fp)
    c4f8:	10c00917 	ldw	r3,36(r2)
    c4fc:	e0bffd17 	ldw	r2,-12(fp)
    c500:	10c01115 	stw	r3,68(r2)
		compptr->last_col_width = 1;
    c504:	e0bffd17 	ldw	r2,-12(fp)
    c508:	00c00044 	movi	r3,1
    c50c:	10c01215 	stw	r3,72(r2)
		/* For noninterleaved scans, it is convenient to define last_row_height
		* as the number of block rows present in the last iMCU row.
		*/
		tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    c510:	e0bffd17 	ldw	r2,-12(fp)
    c514:	10c00817 	ldw	r3,32(r2)
    c518:	e0bffd17 	ldw	r2,-12(fp)
    c51c:	10800317 	ldw	r2,12(r2)
    c520:	1809883a 	mov	r4,r3
    c524:	100b883a 	mov	r5,r2
    c528:	002c14c0 	call	2c14c <__umodsi3>
    c52c:	e0bffc15 	stw	r2,-16(fp)
		if (tmp == 0) tmp = compptr->v_samp_factor;
    c530:	e0bffc17 	ldw	r2,-16(fp)
    c534:	1000031e 	bne	r2,zero,c544 <per_scan_setup+0xc8>
    c538:	e0bffd17 	ldw	r2,-12(fp)
    c53c:	10800317 	ldw	r2,12(r2)
    c540:	e0bffc15 	stw	r2,-16(fp)
		compptr->last_row_height = tmp;
    c544:	e0bffd17 	ldw	r2,-12(fp)
    c548:	e0fffc17 	ldw	r3,-16(fp)
    c54c:	10c01315 	stw	r3,76(r2)

		/* Prepare array describing MCU composition */
		cinfo->blocks_in_MCU = 1;
    c550:	e0bfff17 	ldw	r2,-4(fp)
    c554:	00c00044 	movi	r3,1
    c558:	10c04a15 	stw	r3,296(r2)
		cinfo->MCU_membership[0] = 0;
    c55c:	e0bfff17 	ldw	r2,-4(fp)
    c560:	10004b15 	stw	zero,300(r2)
    c564:	0000b006 	br	c828 <per_scan_setup+0x3ac>

	} else {

		/* Interleaved (multi-component) scan */
		if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
    c568:	e0bfff17 	ldw	r2,-4(fp)
    c56c:	10804317 	ldw	r2,268(r2)
    c570:	0080040e 	bge	zero,r2,c584 <per_scan_setup+0x108>
    c574:	e0bfff17 	ldw	r2,-4(fp)
    c578:	10804317 	ldw	r2,268(r2)
    c57c:	10800150 	cmplti	r2,r2,5
    c580:	1000121e 	bne	r2,zero,c5cc <per_scan_setup+0x150>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
    c584:	e0bfff17 	ldw	r2,-4(fp)
    c588:	10800017 	ldw	r2,0(r2)
    c58c:	00c006c4 	movi	r3,27
    c590:	10c00515 	stw	r3,20(r2)
    c594:	e0bfff17 	ldw	r2,-4(fp)
    c598:	10800017 	ldw	r2,0(r2)
    c59c:	e0ffff17 	ldw	r3,-4(fp)
    c5a0:	18c04317 	ldw	r3,268(r3)
    c5a4:	10c00615 	stw	r3,24(r2)
    c5a8:	e0bfff17 	ldw	r2,-4(fp)
    c5ac:	10800017 	ldw	r2,0(r2)
    c5b0:	00c00104 	movi	r3,4
    c5b4:	10c00715 	stw	r3,28(r2)
    c5b8:	e0bfff17 	ldw	r2,-4(fp)
    c5bc:	10800017 	ldw	r2,0(r2)
    c5c0:	10800017 	ldw	r2,0(r2)
    c5c4:	e13fff17 	ldw	r4,-4(fp)
    c5c8:	103ee83a 	callr	r2
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
    c5cc:	e0bfff17 	ldw	r2,-4(fp)
    c5d0:	10800f17 	ldw	r2,60(r2)
    c5d4:	1021883a 	mov	r16,r2
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
    c5d8:	e0bfff17 	ldw	r2,-4(fp)
    c5dc:	10c03e17 	ldw	r3,248(r2)
    c5e0:	e0bfff17 	ldw	r2,-4(fp)
    c5e4:	10805917 	ldw	r2,356(r2)
    c5e8:	1809883a 	mov	r4,r3
    c5ec:	100b883a 	mov	r5,r2
    c5f0:	002c1540 	call	2c154 <__mulsi3>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
    c5f4:	8009883a 	mov	r4,r16
    c5f8:	100b883a 	mov	r5,r2
    c5fc:	002b0840 	call	2b084 <jdiv_round_up>
		if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
    c600:	1007883a 	mov	r3,r2
    c604:	e0bfff17 	ldw	r2,-4(fp)
    c608:	10c04815 	stw	r3,288(r2)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_height,
    c60c:	e0bfff17 	ldw	r2,-4(fp)
    c610:	10801017 	ldw	r2,64(r2)
    c614:	1021883a 	mov	r16,r2
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));
    c618:	e0bfff17 	ldw	r2,-4(fp)
    c61c:	10c03f17 	ldw	r3,252(r2)
    c620:	e0bfff17 	ldw	r2,-4(fp)
    c624:	10805917 	ldw	r2,356(r2)
    c628:	1809883a 	mov	r4,r3
    c62c:	100b883a 	mov	r5,r2
    c630:	002c1540 	call	2c154 <__mulsi3>
		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_height,
    c634:	8009883a 	mov	r4,r16
    c638:	100b883a 	mov	r5,r2
    c63c:	002b0840 	call	2b084 <jdiv_round_up>

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
    c640:	1007883a 	mov	r3,r2
    c644:	e0bfff17 	ldw	r2,-4(fp)
    c648:	10c04915 	stw	r3,292(r2)
			jdiv_round_up((long) cinfo->jpeg_height,
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));

		cinfo->blocks_in_MCU = 0;
    c64c:	e0bfff17 	ldw	r2,-4(fp)
    c650:	10004a15 	stw	zero,296(r2)

		for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    c654:	e03ffa15 	stw	zero,-24(fp)
    c658:	00006f06 	br	c818 <per_scan_setup+0x39c>
			compptr = cinfo->cur_comp_info[ci];
    c65c:	e0ffff17 	ldw	r3,-4(fp)
    c660:	e0bffa17 	ldw	r2,-24(fp)
    c664:	10801104 	addi	r2,r2,68
    c668:	1085883a 	add	r2,r2,r2
    c66c:	1085883a 	add	r2,r2,r2
    c670:	1885883a 	add	r2,r3,r2
    c674:	10800017 	ldw	r2,0(r2)
    c678:	e0bffd15 	stw	r2,-12(fp)
			/* Sampling factors give # of blocks of component in each MCU */
			compptr->MCU_width = compptr->h_samp_factor;
    c67c:	e0bffd17 	ldw	r2,-12(fp)
    c680:	10c00217 	ldw	r3,8(r2)
    c684:	e0bffd17 	ldw	r2,-12(fp)
    c688:	10c00e15 	stw	r3,56(r2)
			compptr->MCU_height = compptr->v_samp_factor;
    c68c:	e0bffd17 	ldw	r2,-12(fp)
    c690:	10c00317 	ldw	r3,12(r2)
    c694:	e0bffd17 	ldw	r2,-12(fp)
    c698:	10c00f15 	stw	r3,60(r2)
			compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
    c69c:	e0bffd17 	ldw	r2,-12(fp)
    c6a0:	10c00e17 	ldw	r3,56(r2)
    c6a4:	e0bffd17 	ldw	r2,-12(fp)
    c6a8:	10800f17 	ldw	r2,60(r2)
    c6ac:	1809883a 	mov	r4,r3
    c6b0:	100b883a 	mov	r5,r2
    c6b4:	002c1540 	call	2c154 <__mulsi3>
    c6b8:	1007883a 	mov	r3,r2
    c6bc:	e0bffd17 	ldw	r2,-12(fp)
    c6c0:	10c01015 	stw	r3,64(r2)
			compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
    c6c4:	e0bffd17 	ldw	r2,-12(fp)
    c6c8:	10c00e17 	ldw	r3,56(r2)
    c6cc:	e0bffd17 	ldw	r2,-12(fp)
    c6d0:	10800917 	ldw	r2,36(r2)
    c6d4:	1809883a 	mov	r4,r3
    c6d8:	100b883a 	mov	r5,r2
    c6dc:	002c1540 	call	2c154 <__mulsi3>
    c6e0:	1007883a 	mov	r3,r2
    c6e4:	e0bffd17 	ldw	r2,-12(fp)
    c6e8:	10c01115 	stw	r3,68(r2)
			/* Figure number of non-dummy blocks in last MCU column & row */
			tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
    c6ec:	e0bffd17 	ldw	r2,-12(fp)
    c6f0:	10c00717 	ldw	r3,28(r2)
    c6f4:	e0bffd17 	ldw	r2,-12(fp)
    c6f8:	10800e17 	ldw	r2,56(r2)
    c6fc:	1809883a 	mov	r4,r3
    c700:	100b883a 	mov	r5,r2
    c704:	002c14c0 	call	2c14c <__umodsi3>
    c708:	e0bffc15 	stw	r2,-16(fp)
			if (tmp == 0) tmp = compptr->MCU_width;
    c70c:	e0bffc17 	ldw	r2,-16(fp)
    c710:	1000031e 	bne	r2,zero,c720 <per_scan_setup+0x2a4>
    c714:	e0bffd17 	ldw	r2,-12(fp)
    c718:	10800e17 	ldw	r2,56(r2)
    c71c:	e0bffc15 	stw	r2,-16(fp)
			compptr->last_col_width = tmp;
    c720:	e0bffd17 	ldw	r2,-12(fp)
    c724:	e0fffc17 	ldw	r3,-16(fp)
    c728:	10c01215 	stw	r3,72(r2)
			tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
    c72c:	e0bffd17 	ldw	r2,-12(fp)
    c730:	10c00817 	ldw	r3,32(r2)
    c734:	e0bffd17 	ldw	r2,-12(fp)
    c738:	10800f17 	ldw	r2,60(r2)
    c73c:	1809883a 	mov	r4,r3
    c740:	100b883a 	mov	r5,r2
    c744:	002c14c0 	call	2c14c <__umodsi3>
    c748:	e0bffc15 	stw	r2,-16(fp)
			if (tmp == 0) tmp = compptr->MCU_height;
    c74c:	e0bffc17 	ldw	r2,-16(fp)
    c750:	1000031e 	bne	r2,zero,c760 <per_scan_setup+0x2e4>
    c754:	e0bffd17 	ldw	r2,-12(fp)
    c758:	10800f17 	ldw	r2,60(r2)
    c75c:	e0bffc15 	stw	r2,-16(fp)
			compptr->last_row_height = tmp;
    c760:	e0bffd17 	ldw	r2,-12(fp)
    c764:	e0fffc17 	ldw	r3,-16(fp)
    c768:	10c01315 	stw	r3,76(r2)
			/* Prepare array describing MCU composition */
			mcublks = compptr->MCU_blocks;
    c76c:	e0bffd17 	ldw	r2,-12(fp)
    c770:	10801017 	ldw	r2,64(r2)
    c774:	e0bffb15 	stw	r2,-20(fp)
			if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
    c778:	e0bfff17 	ldw	r2,-4(fp)
    c77c:	10c04a17 	ldw	r3,296(r2)
    c780:	e0bffb17 	ldw	r2,-20(fp)
    c784:	1885883a 	add	r2,r3,r2
    c788:	108002d0 	cmplti	r2,r2,11
    c78c:	1000171e 	bne	r2,zero,c7ec <per_scan_setup+0x370>
				ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
    c790:	e0bfff17 	ldw	r2,-4(fp)
    c794:	10800017 	ldw	r2,0(r2)
    c798:	00c00384 	movi	r3,14
    c79c:	10c00515 	stw	r3,20(r2)
    c7a0:	e0bfff17 	ldw	r2,-4(fp)
    c7a4:	10800017 	ldw	r2,0(r2)
    c7a8:	10800017 	ldw	r2,0(r2)
    c7ac:	e13fff17 	ldw	r4,-4(fp)
    c7b0:	103ee83a 	callr	r2
			while (mcublks-- > 0) {
    c7b4:	00000d06 	br	c7ec <per_scan_setup+0x370>
				cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
    c7b8:	e0bfff17 	ldw	r2,-4(fp)
    c7bc:	10804a17 	ldw	r2,296(r2)
    c7c0:	e13fff17 	ldw	r4,-4(fp)
    c7c4:	10c012c4 	addi	r3,r2,75
    c7c8:	18c7883a 	add	r3,r3,r3
    c7cc:	18c7883a 	add	r3,r3,r3
    c7d0:	20c7883a 	add	r3,r4,r3
    c7d4:	e13ffa17 	ldw	r4,-24(fp)
    c7d8:	19000015 	stw	r4,0(r3)
    c7dc:	10c00044 	addi	r3,r2,1
    c7e0:	e0bfff17 	ldw	r2,-4(fp)
    c7e4:	10c04a15 	stw	r3,296(r2)
    c7e8:	00000106 	br	c7f0 <per_scan_setup+0x374>
			compptr->last_row_height = tmp;
			/* Prepare array describing MCU composition */
			mcublks = compptr->MCU_blocks;
			if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
				ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
			while (mcublks-- > 0) {
    c7ec:	0001883a 	nop
    c7f0:	e0bffb17 	ldw	r2,-20(fp)
    c7f4:	0084803a 	cmplt	r2,zero,r2
    c7f8:	e0fffb17 	ldw	r3,-20(fp)
    c7fc:	18ffffc4 	addi	r3,r3,-1
    c800:	e0fffb15 	stw	r3,-20(fp)
    c804:	10803fcc 	andi	r2,r2,255
    c808:	103feb1e 	bne	r2,zero,c7b8 <per_scan_setup+0x33c>
			jdiv_round_up((long) cinfo->jpeg_height,
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));

		cinfo->blocks_in_MCU = 0;

		for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    c80c:	e0bffa17 	ldw	r2,-24(fp)
    c810:	10800044 	addi	r2,r2,1
    c814:	e0bffa15 	stw	r2,-24(fp)
    c818:	e0bfff17 	ldw	r2,-4(fp)
    c81c:	10804317 	ldw	r2,268(r2)
    c820:	e0fffa17 	ldw	r3,-24(fp)
    c824:	18bf8d16 	blt	r3,r2,c65c <per_scan_setup+0x1e0>

	}

	/* Convert restart specified in rows to actual MCU count. */
	/* Note that count must fit in 16 bits, so we provide limiting. */
	if (cinfo->restart_in_rows > 0) {
    c828:	e0bfff17 	ldw	r2,-4(fp)
    c82c:	10803817 	ldw	r2,224(r2)
    c830:	00800f0e 	bge	zero,r2,c870 <per_scan_setup+0x3f4>
		long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
    c834:	e0bfff17 	ldw	r2,-4(fp)
    c838:	10c03817 	ldw	r3,224(r2)
    c83c:	e0bfff17 	ldw	r2,-4(fp)
    c840:	10804817 	ldw	r2,288(r2)
    c844:	1809883a 	mov	r4,r3
    c848:	100b883a 	mov	r5,r2
    c84c:	002c1540 	call	2c154 <__mulsi3>
    c850:	e0bffe15 	stw	r2,-8(fp)
		cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	00ffffd4 	movui	r3,65535
    c85c:	1880010e 	bge	r3,r2,c864 <per_scan_setup+0x3e8>
    c860:	00bfffd4 	movui	r2,65535
    c864:	1007883a 	mov	r3,r2
    c868:	e0bfff17 	ldw	r2,-4(fp)
    c86c:	10c03715 	stw	r3,220(r2)
	}
}
    c870:	e037883a 	mov	sp,fp
    c874:	dfc00217 	ldw	ra,8(sp)
    c878:	df000117 	ldw	fp,4(sp)
    c87c:	dc000017 	ldw	r16,0(sp)
    c880:	dec00304 	addi	sp,sp,12
    c884:	f800283a 	ret

0000c888 <prepare_for_pass>:
* required.
*/

METHODDEF(void)
	prepare_for_pass (j_compress_ptr cinfo)
{
    c888:	defffc04 	addi	sp,sp,-16
    c88c:	dfc00315 	stw	ra,12(sp)
    c890:	df000215 	stw	fp,8(sp)
    c894:	df000204 	addi	fp,sp,8
    c898:	e13fff15 	stw	r4,-4(fp)
	my_master_ptr master = (my_master_ptr) cinfo->master;
    c89c:	e0bfff17 	ldw	r2,-4(fp)
    c8a0:	10805c17 	ldw	r2,368(r2)
    c8a4:	e0bffe15 	stw	r2,-8(fp)

	switch (master->pass_type) {
    c8a8:	e0bffe17 	ldw	r2,-8(fp)
    c8ac:	10800417 	ldw	r2,16(r2)
    c8b0:	10c00060 	cmpeqi	r3,r2,1
    c8b4:	1800481e 	bne	r3,zero,c9d8 <prepare_for_pass+0x150>
    c8b8:	0080032e 	bgeu	zero,r2,c8c8 <prepare_for_pass+0x40>
    c8bc:	108000a0 	cmpeqi	r2,r2,2
    c8c0:	1000661e 	bne	r2,zero,ca5c <prepare_for_pass+0x1d4>
    c8c4:	00008906 	br	caec <prepare_for_pass+0x264>
	case main_pass:
		/* Initial pass: will collect input data, and do either Huffman
		* optimization or data output for the first scan.
		*/
		select_scan_parameters(cinfo);
    c8c8:	e13fff17 	ldw	r4,-4(fp)
    c8cc:	000c2340 	call	c234 <select_scan_parameters>
		per_scan_setup(cinfo);
    c8d0:	e13fff17 	ldw	r4,-4(fp)
    c8d4:	000c47c0 	call	c47c <per_scan_setup>
		if (! cinfo->raw_data_in) {
    c8d8:	e0bfff17 	ldw	r2,-4(fp)
    c8dc:	10803303 	ldbu	r2,204(r2)
    c8e0:	10803fcc 	andi	r2,r2,255
    c8e4:	1000101e 	bne	r2,zero,c928 <prepare_for_pass+0xa0>
			(*cinfo->cconvert->start_pass) (cinfo);
    c8e8:	e0bfff17 	ldw	r2,-4(fp)
    c8ec:	10806117 	ldw	r2,388(r2)
    c8f0:	10800017 	ldw	r2,0(r2)
    c8f4:	e13fff17 	ldw	r4,-4(fp)
    c8f8:	103ee83a 	callr	r2
			(*cinfo->downsample->start_pass) (cinfo);
    c8fc:	e0bfff17 	ldw	r2,-4(fp)
    c900:	10806217 	ldw	r2,392(r2)
    c904:	10800017 	ldw	r2,0(r2)
    c908:	e13fff17 	ldw	r4,-4(fp)
    c90c:	103ee83a 	callr	r2
			(*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
    c910:	e0bfff17 	ldw	r2,-4(fp)
    c914:	10805e17 	ldw	r2,376(r2)
    c918:	10800017 	ldw	r2,0(r2)
    c91c:	e13fff17 	ldw	r4,-4(fp)
    c920:	000b883a 	mov	r5,zero
    c924:	103ee83a 	callr	r2
		}
		(*cinfo->fdct->start_pass) (cinfo);
    c928:	e0bfff17 	ldw	r2,-4(fp)
    c92c:	10806317 	ldw	r2,396(r2)
    c930:	10800017 	ldw	r2,0(r2)
    c934:	e13fff17 	ldw	r4,-4(fp)
    c938:	103ee83a 	callr	r2
		(*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
    c93c:	e0bfff17 	ldw	r2,-4(fp)
    c940:	10806417 	ldw	r2,400(r2)
    c944:	10c00017 	ldw	r3,0(r2)
    c948:	e0bfff17 	ldw	r2,-4(fp)
    c94c:	10803383 	ldbu	r2,206(r2)
    c950:	10803fcc 	andi	r2,r2,255
    c954:	e13fff17 	ldw	r4,-4(fp)
    c958:	100b883a 	mov	r5,r2
    c95c:	183ee83a 	callr	r3
		(*cinfo->coef->start_pass) (cinfo,
    c960:	e0bfff17 	ldw	r2,-4(fp)
    c964:	10805f17 	ldw	r2,380(r2)
    c968:	10c00017 	ldw	r3,0(r2)
			(master->total_passes > 1 ?
    c96c:	e0bffe17 	ldw	r2,-8(fp)
    c970:	10800617 	ldw	r2,24(r2)
			(*cinfo->downsample->start_pass) (cinfo);
			(*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
		}
		(*cinfo->fdct->start_pass) (cinfo);
		(*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
		(*cinfo->coef->start_pass) (cinfo,
    c974:	10800090 	cmplti	r2,r2,2
    c978:	1000021e 	bne	r2,zero,c984 <prepare_for_pass+0xfc>
    c97c:	008000c4 	movi	r2,3
    c980:	00000106 	br	c988 <prepare_for_pass+0x100>
    c984:	0005883a 	mov	r2,zero
    c988:	e13fff17 	ldw	r4,-4(fp)
    c98c:	100b883a 	mov	r5,r2
    c990:	183ee83a 	callr	r3
			(master->total_passes > 1 ?
JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
		(*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    c994:	e0bfff17 	ldw	r2,-4(fp)
    c998:	10805d17 	ldw	r2,372(r2)
    c99c:	10800017 	ldw	r2,0(r2)
    c9a0:	e13fff17 	ldw	r4,-4(fp)
    c9a4:	000b883a 	mov	r5,zero
    c9a8:	103ee83a 	callr	r2
		if (cinfo->optimize_coding) {
    c9ac:	e0bfff17 	ldw	r2,-4(fp)
    c9b0:	10803383 	ldbu	r2,206(r2)
    c9b4:	10803fcc 	andi	r2,r2,255
    c9b8:	10000326 	beq	r2,zero,c9c8 <prepare_for_pass+0x140>
			/* No immediate data output; postpone writing frame/scan headers */
			master->pub.call_pass_startup = FALSE;
    c9bc:	e0bffe17 	ldw	r2,-8(fp)
    c9c0:	10000305 	stb	zero,12(r2)
		} else {
			/* Will write frame/scan headers at first jpeg_write_scanlines call */
			master->pub.call_pass_startup = TRUE;
		}
		break;
    c9c4:	00005206 	br	cb10 <prepare_for_pass+0x288>
		if (cinfo->optimize_coding) {
			/* No immediate data output; postpone writing frame/scan headers */
			master->pub.call_pass_startup = FALSE;
		} else {
			/* Will write frame/scan headers at first jpeg_write_scanlines call */
			master->pub.call_pass_startup = TRUE;
    c9c8:	e0bffe17 	ldw	r2,-8(fp)
    c9cc:	00c00044 	movi	r3,1
    c9d0:	10c00305 	stb	r3,12(r2)
		}
		break;
    c9d4:	00004e06 	br	cb10 <prepare_for_pass+0x288>
#ifdef ENTROPY_OPT_SUPPORTED
	case huff_opt_pass:
		/* Do Huffman optimization for a scan after the first one. */
		select_scan_parameters(cinfo);
    c9d8:	e13fff17 	ldw	r4,-4(fp)
    c9dc:	000c2340 	call	c234 <select_scan_parameters>
		per_scan_setup(cinfo);
    c9e0:	e13fff17 	ldw	r4,-4(fp)
    c9e4:	000c47c0 	call	c47c <per_scan_setup>
		if (cinfo->Ss != 0 || cinfo->Ah == 0) {
    c9e8:	e0bfff17 	ldw	r2,-4(fp)
    c9ec:	10805517 	ldw	r2,340(r2)
    c9f0:	1000031e 	bne	r2,zero,ca00 <prepare_for_pass+0x178>
    c9f4:	e0bfff17 	ldw	r2,-4(fp)
    c9f8:	10805717 	ldw	r2,348(r2)
    c9fc:	10000f1e 	bne	r2,zero,ca3c <prepare_for_pass+0x1b4>
			(*cinfo->entropy->start_pass) (cinfo, TRUE);
    ca00:	e0bfff17 	ldw	r2,-4(fp)
    ca04:	10806417 	ldw	r2,400(r2)
    ca08:	10800017 	ldw	r2,0(r2)
    ca0c:	e13fff17 	ldw	r4,-4(fp)
    ca10:	01400044 	movi	r5,1
    ca14:	103ee83a 	callr	r2
			(*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
    ca18:	e0bfff17 	ldw	r2,-4(fp)
    ca1c:	10805f17 	ldw	r2,380(r2)
    ca20:	10800017 	ldw	r2,0(r2)
    ca24:	e13fff17 	ldw	r4,-4(fp)
    ca28:	01400084 	movi	r5,2
    ca2c:	103ee83a 	callr	r2
			master->pub.call_pass_startup = FALSE;
    ca30:	e0bffe17 	ldw	r2,-8(fp)
    ca34:	10000305 	stb	zero,12(r2)
			break;
    ca38:	00003506 	br	cb10 <prepare_for_pass+0x288>
		}
		/* Special case: Huffman DC refinement scans need no Huffman table
		* and therefore we can skip the optimization pass for them.
		*/
		master->pass_type = output_pass;
    ca3c:	e0bffe17 	ldw	r2,-8(fp)
    ca40:	00c00084 	movi	r3,2
    ca44:	10c00415 	stw	r3,16(r2)
		master->pass_number++;
    ca48:	e0bffe17 	ldw	r2,-8(fp)
    ca4c:	10800517 	ldw	r2,20(r2)
    ca50:	10c00044 	addi	r3,r2,1
    ca54:	e0bffe17 	ldw	r2,-8(fp)
    ca58:	10c00515 	stw	r3,20(r2)
		/*FALLTHROUGH*/
#endif
	case output_pass:
		/* Do a data-output pass. */
		/* We need not repeat per-scan setup if prior optimization pass did it. */
		if (! cinfo->optimize_coding) {
    ca5c:	e0bfff17 	ldw	r2,-4(fp)
    ca60:	10803383 	ldbu	r2,206(r2)
    ca64:	10803fcc 	andi	r2,r2,255
    ca68:	1000041e 	bne	r2,zero,ca7c <prepare_for_pass+0x1f4>
			select_scan_parameters(cinfo);
    ca6c:	e13fff17 	ldw	r4,-4(fp)
    ca70:	000c2340 	call	c234 <select_scan_parameters>
			per_scan_setup(cinfo);
    ca74:	e13fff17 	ldw	r4,-4(fp)
    ca78:	000c47c0 	call	c47c <per_scan_setup>
		}
		(*cinfo->entropy->start_pass) (cinfo, FALSE);
    ca7c:	e0bfff17 	ldw	r2,-4(fp)
    ca80:	10806417 	ldw	r2,400(r2)
    ca84:	10800017 	ldw	r2,0(r2)
    ca88:	e13fff17 	ldw	r4,-4(fp)
    ca8c:	000b883a 	mov	r5,zero
    ca90:	103ee83a 	callr	r2
		(*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
    ca94:	e0bfff17 	ldw	r2,-4(fp)
    ca98:	10805f17 	ldw	r2,380(r2)
    ca9c:	10800017 	ldw	r2,0(r2)
    caa0:	e13fff17 	ldw	r4,-4(fp)
    caa4:	01400084 	movi	r5,2
    caa8:	103ee83a 	callr	r2
		/* We emit frame/scan headers now */
		if (master->scan_number == 0)
    caac:	e0bffe17 	ldw	r2,-8(fp)
    cab0:	10800717 	ldw	r2,28(r2)
    cab4:	1000051e 	bne	r2,zero,cacc <prepare_for_pass+0x244>
			(*cinfo->marker->write_frame_header) (cinfo);
    cab8:	e0bfff17 	ldw	r2,-4(fp)
    cabc:	10806017 	ldw	r2,384(r2)
    cac0:	10800117 	ldw	r2,4(r2)
    cac4:	e13fff17 	ldw	r4,-4(fp)
    cac8:	103ee83a 	callr	r2
		(*cinfo->marker->write_scan_header) (cinfo);
    cacc:	e0bfff17 	ldw	r2,-4(fp)
    cad0:	10806017 	ldw	r2,384(r2)
    cad4:	10800217 	ldw	r2,8(r2)
    cad8:	e13fff17 	ldw	r4,-4(fp)
    cadc:	103ee83a 	callr	r2
		master->pub.call_pass_startup = FALSE;
    cae0:	e0bffe17 	ldw	r2,-8(fp)
    cae4:	10000305 	stb	zero,12(r2)
		break;
    cae8:	00000906 	br	cb10 <prepare_for_pass+0x288>
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
    caec:	e0bfff17 	ldw	r2,-4(fp)
    caf0:	10800017 	ldw	r2,0(r2)
    caf4:	00c00c44 	movi	r3,49
    caf8:	10c00515 	stw	r3,20(r2)
    cafc:	e0bfff17 	ldw	r2,-4(fp)
    cb00:	10800017 	ldw	r2,0(r2)
    cb04:	10800017 	ldw	r2,0(r2)
    cb08:	e13fff17 	ldw	r4,-4(fp)
    cb0c:	103ee83a 	callr	r2
	}

	master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
    cb10:	e0bffe17 	ldw	r2,-8(fp)
    cb14:	10c00517 	ldw	r3,20(r2)
    cb18:	e0bffe17 	ldw	r2,-8(fp)
    cb1c:	10800617 	ldw	r2,24(r2)
    cb20:	10bfffc4 	addi	r2,r2,-1
    cb24:	1885003a 	cmpeq	r2,r3,r2
    cb28:	1007883a 	mov	r3,r2
    cb2c:	e0bffe17 	ldw	r2,-8(fp)
    cb30:	10c00345 	stb	r3,13(r2)

	/* Set up progress monitor's pass info if present */
	if (cinfo->progress != NULL) {
    cb34:	e0bfff17 	ldw	r2,-4(fp)
    cb38:	10800217 	ldw	r2,8(r2)
    cb3c:	10000a26 	beq	r2,zero,cb68 <prepare_for_pass+0x2e0>
		cinfo->progress->completed_passes = master->pass_number;
    cb40:	e0bfff17 	ldw	r2,-4(fp)
    cb44:	10800217 	ldw	r2,8(r2)
    cb48:	e0fffe17 	ldw	r3,-8(fp)
    cb4c:	18c00517 	ldw	r3,20(r3)
    cb50:	10c00315 	stw	r3,12(r2)
		cinfo->progress->total_passes = master->total_passes;
    cb54:	e0bfff17 	ldw	r2,-4(fp)
    cb58:	10800217 	ldw	r2,8(r2)
    cb5c:	e0fffe17 	ldw	r3,-8(fp)
    cb60:	18c00617 	ldw	r3,24(r3)
    cb64:	10c00415 	stw	r3,16(r2)
	}
}
    cb68:	e037883a 	mov	sp,fp
    cb6c:	dfc00117 	ldw	ra,4(sp)
    cb70:	df000017 	ldw	fp,0(sp)
    cb74:	dec00204 	addi	sp,sp,8
    cb78:	f800283a 	ret

0000cb7c <pass_startup>:
* In multi-pass processing, this routine is not used.
*/

METHODDEF(void)
	pass_startup (j_compress_ptr cinfo)
{
    cb7c:	defffd04 	addi	sp,sp,-12
    cb80:	dfc00215 	stw	ra,8(sp)
    cb84:	df000115 	stw	fp,4(sp)
    cb88:	df000104 	addi	fp,sp,4
    cb8c:	e13fff15 	stw	r4,-4(fp)
	cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
    cb90:	e0bfff17 	ldw	r2,-4(fp)
    cb94:	10805c17 	ldw	r2,368(r2)
    cb98:	10000305 	stb	zero,12(r2)

	(*cinfo->marker->write_frame_header) (cinfo);
    cb9c:	e0bfff17 	ldw	r2,-4(fp)
    cba0:	10806017 	ldw	r2,384(r2)
    cba4:	10800117 	ldw	r2,4(r2)
    cba8:	e13fff17 	ldw	r4,-4(fp)
    cbac:	103ee83a 	callr	r2
	(*cinfo->marker->write_scan_header) (cinfo);
    cbb0:	e0bfff17 	ldw	r2,-4(fp)
    cbb4:	10806017 	ldw	r2,384(r2)
    cbb8:	10800217 	ldw	r2,8(r2)
    cbbc:	e13fff17 	ldw	r4,-4(fp)
    cbc0:	103ee83a 	callr	r2
}
    cbc4:	e037883a 	mov	sp,fp
    cbc8:	dfc00117 	ldw	ra,4(sp)
    cbcc:	df000017 	ldw	fp,0(sp)
    cbd0:	dec00204 	addi	sp,sp,8
    cbd4:	f800283a 	ret

0000cbd8 <finish_pass_master>:
* Finish up at end of pass.
*/

METHODDEF(void)
	finish_pass_master (j_compress_ptr cinfo)
{
    cbd8:	defffc04 	addi	sp,sp,-16
    cbdc:	dfc00315 	stw	ra,12(sp)
    cbe0:	df000215 	stw	fp,8(sp)
    cbe4:	df000204 	addi	fp,sp,8
    cbe8:	e13fff15 	stw	r4,-4(fp)
	my_master_ptr master = (my_master_ptr) cinfo->master;
    cbec:	e0bfff17 	ldw	r2,-4(fp)
    cbf0:	10805c17 	ldw	r2,368(r2)
    cbf4:	e0bffe15 	stw	r2,-8(fp)

	/* The entropy coder always needs an end-of-pass call,
	* either to analyze statistics or to flush its output buffer.
	*/
	(*cinfo->entropy->finish_pass) (cinfo);
    cbf8:	e0bfff17 	ldw	r2,-4(fp)
    cbfc:	10806417 	ldw	r2,400(r2)
    cc00:	10800217 	ldw	r2,8(r2)
    cc04:	e13fff17 	ldw	r4,-4(fp)
    cc08:	103ee83a 	callr	r2

	/* Update state for next pass */
	switch (master->pass_type) {
    cc0c:	e0bffe17 	ldw	r2,-8(fp)
    cc10:	10800417 	ldw	r2,16(r2)
    cc14:	10c00060 	cmpeqi	r3,r2,1
    cc18:	1800111e 	bne	r3,zero,cc60 <finish_pass_master+0x88>
    cc1c:	0080032e 	bgeu	zero,r2,cc2c <finish_pass_master+0x54>
    cc20:	108000a0 	cmpeqi	r2,r2,2
    cc24:	1000121e 	bne	r2,zero,cc70 <finish_pass_master+0x98>
    cc28:	00001f06 	br	cca8 <finish_pass_master+0xd0>
	case main_pass:
		/* next pass is either output of scan 0 (after optimization)
		* or output of scan 1 (if no optimization).
		*/
		master->pass_type = output_pass;
    cc2c:	e0bffe17 	ldw	r2,-8(fp)
    cc30:	00c00084 	movi	r3,2
    cc34:	10c00415 	stw	r3,16(r2)
		if (! cinfo->optimize_coding)
    cc38:	e0bfff17 	ldw	r2,-4(fp)
    cc3c:	10803383 	ldbu	r2,206(r2)
    cc40:	10803fcc 	andi	r2,r2,255
    cc44:	1000171e 	bne	r2,zero,cca4 <finish_pass_master+0xcc>
			master->scan_number++;
    cc48:	e0bffe17 	ldw	r2,-8(fp)
    cc4c:	10800717 	ldw	r2,28(r2)
    cc50:	10c00044 	addi	r3,r2,1
    cc54:	e0bffe17 	ldw	r2,-8(fp)
    cc58:	10c00715 	stw	r3,28(r2)
		break;
    cc5c:	00001106 	br	cca4 <finish_pass_master+0xcc>
	case huff_opt_pass:
		/* next pass is always output of current scan */
		master->pass_type = output_pass;
    cc60:	e0bffe17 	ldw	r2,-8(fp)
    cc64:	00c00084 	movi	r3,2
    cc68:	10c00415 	stw	r3,16(r2)
		break;
    cc6c:	00000e06 	br	cca8 <finish_pass_master+0xd0>
	case output_pass:
		/* next pass is either optimization or output of next scan */
		if (cinfo->optimize_coding)
    cc70:	e0bfff17 	ldw	r2,-4(fp)
    cc74:	10803383 	ldbu	r2,206(r2)
    cc78:	10803fcc 	andi	r2,r2,255
    cc7c:	10000326 	beq	r2,zero,cc8c <finish_pass_master+0xb4>
			master->pass_type = huff_opt_pass;
    cc80:	e0bffe17 	ldw	r2,-8(fp)
    cc84:	00c00044 	movi	r3,1
    cc88:	10c00415 	stw	r3,16(r2)
		master->scan_number++;
    cc8c:	e0bffe17 	ldw	r2,-8(fp)
    cc90:	10800717 	ldw	r2,28(r2)
    cc94:	10c00044 	addi	r3,r2,1
    cc98:	e0bffe17 	ldw	r2,-8(fp)
    cc9c:	10c00715 	stw	r3,28(r2)
		break;
    cca0:	00000106 	br	cca8 <finish_pass_master+0xd0>
		* or output of scan 1 (if no optimization).
		*/
		master->pass_type = output_pass;
		if (! cinfo->optimize_coding)
			master->scan_number++;
		break;
    cca4:	0001883a 	nop
			master->pass_type = huff_opt_pass;
		master->scan_number++;
		break;
	}

	master->pass_number++;
    cca8:	e0bffe17 	ldw	r2,-8(fp)
    ccac:	10800517 	ldw	r2,20(r2)
    ccb0:	10c00044 	addi	r3,r2,1
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
    ccb8:	10c00515 	stw	r3,20(r2)
}
    ccbc:	e037883a 	mov	sp,fp
    ccc0:	dfc00117 	ldw	ra,4(sp)
    ccc4:	df000017 	ldw	fp,0(sp)
    ccc8:	dec00204 	addi	sp,sp,8
    cccc:	f800283a 	ret

0000ccd0 <jinit_c_master_control>:
* Initialize master compression control.
*/

GLOBAL(void)
	jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
    ccd0:	defffb04 	addi	sp,sp,-20
    ccd4:	dfc00415 	stw	ra,16(sp)
    ccd8:	df000315 	stw	fp,12(sp)
    ccdc:	df000304 	addi	fp,sp,12
    cce0:	e13ffe15 	stw	r4,-8(fp)
    cce4:	2805883a 	mov	r2,r5
    cce8:	e0bfff05 	stb	r2,-4(fp)
	my_master_ptr master;

	master = (my_master_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    ccec:	e0bffe17 	ldw	r2,-8(fp)
    ccf0:	10800117 	ldw	r2,4(r2)
    ccf4:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
	my_master_ptr master;

	master = (my_master_ptr)
    ccf8:	e13ffe17 	ldw	r4,-8(fp)
    ccfc:	01400044 	movi	r5,1
    cd00:	01800804 	movi	r6,32
    cd04:	103ee83a 	callr	r2
    cd08:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_comp_master));
	cinfo->master = (struct jpeg_comp_master *) master;
    cd0c:	e0bffe17 	ldw	r2,-8(fp)
    cd10:	e0fffd17 	ldw	r3,-12(fp)
    cd14:	10c05c15 	stw	r3,368(r2)
	master->pub.prepare_for_pass = prepare_for_pass;
    cd18:	e0bffd17 	ldw	r2,-12(fp)
    cd1c:	00c00074 	movhi	r3,1
    cd20:	18f22204 	addi	r3,r3,-14200
    cd24:	10c00015 	stw	r3,0(r2)
	master->pub.pass_startup = pass_startup;
    cd28:	e0bffd17 	ldw	r2,-12(fp)
    cd2c:	00c00074 	movhi	r3,1
    cd30:	18f2df04 	addi	r3,r3,-13444
    cd34:	10c00115 	stw	r3,4(r2)
	master->pub.finish_pass = finish_pass_master;
    cd38:	e0bffd17 	ldw	r2,-12(fp)
    cd3c:	00c00074 	movhi	r3,1
    cd40:	18f2f604 	addi	r3,r3,-13352
    cd44:	10c00215 	stw	r3,8(r2)
	master->pub.is_last_pass = FALSE;
    cd48:	e0bffd17 	ldw	r2,-12(fp)
    cd4c:	10000345 	stb	zero,13(r2)

	/* Validate parameters, determine derived values */
	initial_setup(cinfo, transcode_only);
    cd50:	e0bfff03 	ldbu	r2,-4(fp)
    cd54:	e13ffe17 	ldw	r4,-8(fp)
    cd58:	100b883a 	mov	r5,r2
    cd5c:	000b2040 	call	b204 <initial_setup>

	if (cinfo->scan_info != NULL) {
    cd60:	e0bffe17 	ldw	r2,-8(fp)
    cd64:	10803217 	ldw	r2,200(r2)
    cd68:	10000926 	beq	r2,zero,cd90 <jinit_c_master_control+0xc0>
#ifdef C_MULTISCAN_FILES_SUPPORTED
		validate_script(cinfo);
    cd6c:	e13ffe17 	ldw	r4,-8(fp)
    cd70:	000b93c0 	call	b93c <validate_script>
		if (cinfo->block_size < DCTSIZE)
    cd74:	e0bffe17 	ldw	r2,-8(fp)
    cd78:	10805917 	ldw	r2,356(r2)
    cd7c:	10800208 	cmpgei	r2,r2,8
    cd80:	1000081e 	bne	r2,zero,cda4 <jinit_c_master_control+0xd4>
			reduce_script(cinfo);
    cd84:	e13ffe17 	ldw	r4,-8(fp)
    cd88:	000c0b80 	call	c0b8 <reduce_script>
    cd8c:	00000506 	br	cda4 <jinit_c_master_control+0xd4>
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
    cd90:	e0bffe17 	ldw	r2,-8(fp)
    cd94:	10003d05 	stb	zero,244(r2)
		cinfo->num_scans = 1;
    cd98:	e0bffe17 	ldw	r2,-8(fp)
    cd9c:	00c00044 	movi	r3,1
    cda0:	10c03115 	stw	r3,196(r2)
	}

	if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
    cda4:	e0bffe17 	ldw	r2,-8(fp)
    cda8:	10803d03 	ldbu	r2,244(r2)
    cdac:	10803fcc 	andi	r2,r2,255
    cdb0:	1000041e 	bne	r2,zero,cdc4 <jinit_c_master_control+0xf4>
    cdb4:	e0bffe17 	ldw	r2,-8(fp)
    cdb8:	10805917 	ldw	r2,356(r2)
    cdbc:	10800208 	cmpgei	r2,r2,8
    cdc0:	1000071e 	bne	r2,zero,cde0 <jinit_c_master_control+0x110>
		!cinfo->arith_code)			/*  TEMPORARY HACK ??? */
    cdc4:	e0bffe17 	ldw	r2,-8(fp)
    cdc8:	10803343 	ldbu	r2,205(r2)
	} else {
		cinfo->progressive_mode = FALSE;
		cinfo->num_scans = 1;
	}

	if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
    cdcc:	10803fcc 	andi	r2,r2,255
    cdd0:	1000031e 	bne	r2,zero,cde0 <jinit_c_master_control+0x110>
		!cinfo->arith_code)			/*  TEMPORARY HACK ??? */
		/* assume default tables no good for progressive or downscale mode */
		cinfo->optimize_coding = TRUE;
    cdd4:	e0bffe17 	ldw	r2,-8(fp)
    cdd8:	00c00044 	movi	r3,1
    cddc:	10c03385 	stb	r3,206(r2)

	/* Initialize my private state */
	if (transcode_only) {
    cde0:	e0bfff03 	ldbu	r2,-4(fp)
    cde4:	10000c26 	beq	r2,zero,ce18 <jinit_c_master_control+0x148>
		/* no main pass in transcoding */
		if (cinfo->optimize_coding)
    cde8:	e0bffe17 	ldw	r2,-8(fp)
    cdec:	10803383 	ldbu	r2,206(r2)
    cdf0:	10803fcc 	andi	r2,r2,255
    cdf4:	10000426 	beq	r2,zero,ce08 <jinit_c_master_control+0x138>
			master->pass_type = huff_opt_pass;
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	00c00044 	movi	r3,1
    ce00:	10c00415 	stw	r3,16(r2)
    ce04:	00000606 	br	ce20 <jinit_c_master_control+0x150>
		else
			master->pass_type = output_pass;
    ce08:	e0bffd17 	ldw	r2,-12(fp)
    ce0c:	00c00084 	movi	r3,2
    ce10:	10c00415 	stw	r3,16(r2)
    ce14:	00000206 	br	ce20 <jinit_c_master_control+0x150>
	} else {
		/* for normal compression, first pass is always this type: */
		master->pass_type = main_pass;
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	10000415 	stw	zero,16(r2)
	}
	master->scan_number = 0;
    ce20:	e0bffd17 	ldw	r2,-12(fp)
    ce24:	10000715 	stw	zero,28(r2)
	master->pass_number = 0;
    ce28:	e0bffd17 	ldw	r2,-12(fp)
    ce2c:	10000515 	stw	zero,20(r2)
	if (cinfo->optimize_coding)
    ce30:	e0bffe17 	ldw	r2,-8(fp)
    ce34:	10803383 	ldbu	r2,206(r2)
    ce38:	10803fcc 	andi	r2,r2,255
    ce3c:	10000726 	beq	r2,zero,ce5c <jinit_c_master_control+0x18c>
		master->total_passes = cinfo->num_scans * 2;
    ce40:	e0bffe17 	ldw	r2,-8(fp)
    ce44:	10803117 	ldw	r2,196(r2)
    ce48:	1085883a 	add	r2,r2,r2
    ce4c:	1007883a 	mov	r3,r2
    ce50:	e0bffd17 	ldw	r2,-12(fp)
    ce54:	10c00615 	stw	r3,24(r2)
    ce58:	00000406 	br	ce6c <jinit_c_master_control+0x19c>
	else
		master->total_passes = cinfo->num_scans;
    ce5c:	e0bffe17 	ldw	r2,-8(fp)
    ce60:	10c03117 	ldw	r3,196(r2)
    ce64:	e0bffd17 	ldw	r2,-12(fp)
    ce68:	10c00615 	stw	r3,24(r2)
}
    ce6c:	e037883a 	mov	sp,fp
    ce70:	dfc00117 	ldw	ra,4(sp)
    ce74:	df000017 	ldw	fp,0(sp)
    ce78:	dec00204 	addi	sp,sp,8
    ce7c:	f800283a 	ret

0000ce80 <jpeg_abort>:
* responsibility.
*/

GLOBAL(void)
	jpeg_abort (j_common_ptr cinfo)
{
    ce80:	defffc04 	addi	sp,sp,-16
    ce84:	dfc00315 	stw	ra,12(sp)
    ce88:	df000215 	stw	fp,8(sp)
    ce8c:	df000204 	addi	fp,sp,8
    ce90:	e13fff15 	stw	r4,-4(fp)
	int pool;

	/* Do nothing if called on a not-initialized or destroyed JPEG object. */
	if (cinfo->mem == NULL)
    ce94:	e0bfff17 	ldw	r2,-4(fp)
    ce98:	10800117 	ldw	r2,4(r2)
    ce9c:	10001c26 	beq	r2,zero,cf10 <jpeg_abort+0x90>
		return;

	/* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    cea0:	00800044 	movi	r2,1
    cea4:	e0bffe15 	stw	r2,-8(fp)
    cea8:	00000906 	br	ced0 <jpeg_abort+0x50>
		(*cinfo->mem->free_pool) (cinfo, pool);
    ceac:	e0bfff17 	ldw	r2,-4(fp)
    ceb0:	10800117 	ldw	r2,4(r2)
    ceb4:	10800917 	ldw	r2,36(r2)
    ceb8:	e13fff17 	ldw	r4,-4(fp)
    cebc:	e17ffe17 	ldw	r5,-8(fp)
    cec0:	103ee83a 	callr	r2
		return;

	/* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    cec4:	e0bffe17 	ldw	r2,-8(fp)
    cec8:	10bfffc4 	addi	r2,r2,-1
    cecc:	e0bffe15 	stw	r2,-8(fp)
    ced0:	e0bffe17 	ldw	r2,-8(fp)
    ced4:	00bff516 	blt	zero,r2,ceac <jpeg_abort+0x2c>
		(*cinfo->mem->free_pool) (cinfo, pool);
	}

	/* Reset overall state for possible reuse of object */
	if (cinfo->is_decompressor) {
    ced8:	e0bfff17 	ldw	r2,-4(fp)
    cedc:	10800403 	ldbu	r2,16(r2)
    cee0:	10803fcc 	andi	r2,r2,255
    cee4:	10000626 	beq	r2,zero,cf00 <jpeg_abort+0x80>
		cinfo->global_state = DSTATE_START;
    cee8:	e0bfff17 	ldw	r2,-4(fp)
    ceec:	00c03204 	movi	r3,200
    cef0:	10c00515 	stw	r3,20(r2)
		/* Try to keep application from accessing now-deleted marker list.
		* A bit kludgy to do it here, but this is the most central place.
		*/
		((j_decompress_ptr) cinfo)->marker_list = NULL;
    cef4:	e0bfff17 	ldw	r2,-4(fp)
    cef8:	10004315 	stw	zero,268(r2)
    cefc:	00000506 	br	cf14 <jpeg_abort+0x94>
	} else {
		cinfo->global_state = CSTATE_START;
    cf00:	e0bfff17 	ldw	r2,-4(fp)
    cf04:	00c01904 	movi	r3,100
    cf08:	10c00515 	stw	r3,20(r2)
    cf0c:	00000106 	br	cf14 <jpeg_abort+0x94>
{
	int pool;

	/* Do nothing if called on a not-initialized or destroyed JPEG object. */
	if (cinfo->mem == NULL)
		return;
    cf10:	0001883a 	nop
		*/
		((j_decompress_ptr) cinfo)->marker_list = NULL;
	} else {
		cinfo->global_state = CSTATE_START;
	}
}
    cf14:	e037883a 	mov	sp,fp
    cf18:	dfc00117 	ldw	ra,4(sp)
    cf1c:	df000017 	ldw	fp,0(sp)
    cf20:	dec00204 	addi	sp,sp,8
    cf24:	f800283a 	ret

0000cf28 <jpeg_destroy>:
* responsibility.
*/

GLOBAL(void)
	jpeg_destroy (j_common_ptr cinfo)
{
    cf28:	defffd04 	addi	sp,sp,-12
    cf2c:	dfc00215 	stw	ra,8(sp)
    cf30:	df000115 	stw	fp,4(sp)
    cf34:	df000104 	addi	fp,sp,4
    cf38:	e13fff15 	stw	r4,-4(fp)
	/* We need only tell the memory manager to release everything. */
	/* NB: mem pointer is NULL if memory mgr failed to initialize. */
	if (cinfo->mem != NULL)
    cf3c:	e0bfff17 	ldw	r2,-4(fp)
    cf40:	10800117 	ldw	r2,4(r2)
    cf44:	10000526 	beq	r2,zero,cf5c <jpeg_destroy+0x34>
		(*cinfo->mem->self_destruct) (cinfo);
    cf48:	e0bfff17 	ldw	r2,-4(fp)
    cf4c:	10800117 	ldw	r2,4(r2)
    cf50:	10800a17 	ldw	r2,40(r2)
    cf54:	e13fff17 	ldw	r4,-4(fp)
    cf58:	103ee83a 	callr	r2
	cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
    cf5c:	e0bfff17 	ldw	r2,-4(fp)
    cf60:	10000115 	stw	zero,4(r2)
	cinfo->global_state = 0;	/* mark it destroyed */
    cf64:	e0bfff17 	ldw	r2,-4(fp)
    cf68:	10000515 	stw	zero,20(r2)
}
    cf6c:	e037883a 	mov	sp,fp
    cf70:	dfc00117 	ldw	ra,4(sp)
    cf74:	df000017 	ldw	fp,0(sp)
    cf78:	dec00204 	addi	sp,sp,8
    cf7c:	f800283a 	ret

0000cf80 <jpeg_alloc_quant_table>:
* (Would jutils.c be a more reasonable place to put these?)
*/

GLOBAL(JQUANT_TBL *)
	jpeg_alloc_quant_table (j_common_ptr cinfo)
{
    cf80:	defffc04 	addi	sp,sp,-16
    cf84:	dfc00315 	stw	ra,12(sp)
    cf88:	df000215 	stw	fp,8(sp)
    cf8c:	df000204 	addi	fp,sp,8
    cf90:	e13fff15 	stw	r4,-4(fp)
	JQUANT_TBL *tbl;

	tbl = (JQUANT_TBL *)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
    cf94:	e0bfff17 	ldw	r2,-4(fp)
    cf98:	10800117 	ldw	r2,4(r2)
    cf9c:	10800017 	ldw	r2,0(r2)
GLOBAL(JQUANT_TBL *)
	jpeg_alloc_quant_table (j_common_ptr cinfo)
{
	JQUANT_TBL *tbl;

	tbl = (JQUANT_TBL *)
    cfa0:	e13fff17 	ldw	r4,-4(fp)
    cfa4:	000b883a 	mov	r5,zero
    cfa8:	01802084 	movi	r6,130
    cfac:	103ee83a 	callr	r2
    cfb0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
	tbl->sent_table = FALSE;	/* make sure this is false in any new table */
    cfb4:	e0bffe17 	ldw	r2,-8(fp)
    cfb8:	10002005 	stb	zero,128(r2)
	return tbl;
    cfbc:	e0bffe17 	ldw	r2,-8(fp)
}
    cfc0:	e037883a 	mov	sp,fp
    cfc4:	dfc00117 	ldw	ra,4(sp)
    cfc8:	df000017 	ldw	fp,0(sp)
    cfcc:	dec00204 	addi	sp,sp,8
    cfd0:	f800283a 	ret

0000cfd4 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
	jpeg_alloc_huff_table (j_common_ptr cinfo)
{
    cfd4:	defffc04 	addi	sp,sp,-16
    cfd8:	dfc00315 	stw	ra,12(sp)
    cfdc:	df000215 	stw	fp,8(sp)
    cfe0:	df000204 	addi	fp,sp,8
    cfe4:	e13fff15 	stw	r4,-4(fp)
	JHUFF_TBL *tbl;

	tbl = (JHUFF_TBL *)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
    cfe8:	e0bfff17 	ldw	r2,-4(fp)
    cfec:	10800117 	ldw	r2,4(r2)
    cff0:	10800017 	ldw	r2,0(r2)
GLOBAL(JHUFF_TBL *)
	jpeg_alloc_huff_table (j_common_ptr cinfo)
{
	JHUFF_TBL *tbl;

	tbl = (JHUFF_TBL *)
    cff4:	e13fff17 	ldw	r4,-4(fp)
    cff8:	000b883a 	mov	r5,zero
    cffc:	01804484 	movi	r6,274
    d000:	103ee83a 	callr	r2
    d004:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
	tbl->sent_table = FALSE;	/* make sure this is false in any new table */
    d008:	e0bffe17 	ldw	r2,-8(fp)
    d00c:	10004445 	stb	zero,273(r2)
	return tbl;
    d010:	e0bffe17 	ldw	r2,-8(fp)
}
    d014:	e037883a 	mov	sp,fp
    d018:	dfc00117 	ldw	ra,4(sp)
    d01c:	df000017 	ldw	fp,0(sp)
    d020:	dec00204 	addi	sp,sp,8
    d024:	f800283a 	ret

0000d028 <jpeg_add_quant_table>:
	/* Define a quantization table equal to the basic_table times
	* a scale factor (given as a percentage).
	* If force_baseline is TRUE, the computed quantization table entries
	* are limited to 1..255 for JPEG baseline compatibility.
	*/
{
    d028:	defff604 	addi	sp,sp,-40
    d02c:	dfc00915 	stw	ra,36(sp)
    d030:	df000815 	stw	fp,32(sp)
    d034:	df000804 	addi	fp,sp,32
    d038:	e13ffb15 	stw	r4,-20(fp)
    d03c:	e17ffc15 	stw	r5,-16(fp)
    d040:	e1bffd15 	stw	r6,-12(fp)
    d044:	e1fffe15 	stw	r7,-8(fp)
    d048:	e0800217 	ldw	r2,8(fp)
    d04c:	e0bfff05 	stb	r2,-4(fp)
	JQUANT_TBL ** qtblptr;
	int i;
	long temp;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
    d050:	e0bffb17 	ldw	r2,-20(fp)
    d054:	10800517 	ldw	r2,20(r2)
    d058:	10801920 	cmpeqi	r2,r2,100
    d05c:	10000e1e 	bne	r2,zero,d098 <jpeg_add_quant_table+0x70>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    d060:	e0bffb17 	ldw	r2,-20(fp)
    d064:	10800017 	ldw	r2,0(r2)
    d068:	00c00544 	movi	r3,21
    d06c:	10c00515 	stw	r3,20(r2)
    d070:	e0bffb17 	ldw	r2,-20(fp)
    d074:	10800017 	ldw	r2,0(r2)
    d078:	e0fffb17 	ldw	r3,-20(fp)
    d07c:	18c00517 	ldw	r3,20(r3)
    d080:	10c00615 	stw	r3,24(r2)
    d084:	e0bffb17 	ldw	r2,-20(fp)
    d088:	10800017 	ldw	r2,0(r2)
    d08c:	10800017 	ldw	r2,0(r2)
    d090:	e13ffb17 	ldw	r4,-20(fp)
    d094:	103ee83a 	callr	r2

	if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
    d098:	e0bffc17 	ldw	r2,-16(fp)
    d09c:	10000316 	blt	r2,zero,d0ac <jpeg_add_quant_table+0x84>
    d0a0:	e0bffc17 	ldw	r2,-16(fp)
    d0a4:	10800110 	cmplti	r2,r2,4
    d0a8:	10000d1e 	bne	r2,zero,d0e0 <jpeg_add_quant_table+0xb8>
		ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);
    d0ac:	e0bffb17 	ldw	r2,-20(fp)
    d0b0:	10800017 	ldw	r2,0(r2)
    d0b4:	00c00804 	movi	r3,32
    d0b8:	10c00515 	stw	r3,20(r2)
    d0bc:	e0bffb17 	ldw	r2,-20(fp)
    d0c0:	10800017 	ldw	r2,0(r2)
    d0c4:	e0fffc17 	ldw	r3,-16(fp)
    d0c8:	10c00615 	stw	r3,24(r2)
    d0cc:	e0bffb17 	ldw	r2,-20(fp)
    d0d0:	10800017 	ldw	r2,0(r2)
    d0d4:	10800017 	ldw	r2,0(r2)
    d0d8:	e13ffb17 	ldw	r4,-20(fp)
    d0dc:	103ee83a 	callr	r2

	qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
    d0e0:	e0bffc17 	ldw	r2,-16(fp)
    d0e4:	10800544 	addi	r2,r2,21
    d0e8:	1085883a 	add	r2,r2,r2
    d0ec:	1085883a 	add	r2,r2,r2
    d0f0:	e0fffb17 	ldw	r3,-20(fp)
    d0f4:	1885883a 	add	r2,r3,r2
    d0f8:	e0bffa15 	stw	r2,-24(fp)

	if (*qtblptr == NULL)
    d0fc:	e0bffa17 	ldw	r2,-24(fp)
    d100:	10800017 	ldw	r2,0(r2)
    d104:	1000041e 	bne	r2,zero,d118 <jpeg_add_quant_table+0xf0>
		*qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
    d108:	e13ffb17 	ldw	r4,-20(fp)
    d10c:	000cf800 	call	cf80 <jpeg_alloc_quant_table>
    d110:	e0fffa17 	ldw	r3,-24(fp)
    d114:	18800015 	stw	r2,0(r3)

	for (i = 0; i < DCTSIZE2; i++) {
    d118:	e03ff815 	stw	zero,-32(fp)
    d11c:	00002906 	br	d1c4 <jpeg_add_quant_table+0x19c>
		temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
    d120:	e0bff817 	ldw	r2,-32(fp)
    d124:	1085883a 	add	r2,r2,r2
    d128:	1085883a 	add	r2,r2,r2
    d12c:	e0fffd17 	ldw	r3,-12(fp)
    d130:	1885883a 	add	r2,r3,r2
    d134:	10800017 	ldw	r2,0(r2)
    d138:	1009883a 	mov	r4,r2
    d13c:	e17ffe17 	ldw	r5,-8(fp)
    d140:	002c1540 	call	2c154 <__mulsi3>
    d144:	10800c84 	addi	r2,r2,50
    d148:	1009883a 	mov	r4,r2
    d14c:	01401904 	movi	r5,100
    d150:	002c0980 	call	2c098 <__divsi3>
    d154:	e0bff915 	stw	r2,-28(fp)
		/* limit the values to the valid range */
		if (temp <= 0L) temp = 1L;
    d158:	e0bff917 	ldw	r2,-28(fp)
    d15c:	00800216 	blt	zero,r2,d168 <jpeg_add_quant_table+0x140>
    d160:	00800044 	movi	r2,1
    d164:	e0bff915 	stw	r2,-28(fp)
		if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
    d168:	e0bff917 	ldw	r2,-28(fp)
    d16c:	00dfffc4 	movi	r3,32767
    d170:	1880020e 	bge	r3,r2,d17c <jpeg_add_quant_table+0x154>
    d174:	009fffc4 	movi	r2,32767
    d178:	e0bff915 	stw	r2,-28(fp)
		if (force_baseline && temp > 255L)
    d17c:	e0bfff03 	ldbu	r2,-4(fp)
    d180:	10000526 	beq	r2,zero,d198 <jpeg_add_quant_table+0x170>
    d184:	e0bff917 	ldw	r2,-28(fp)
    d188:	10804010 	cmplti	r2,r2,256
    d18c:	1000021e 	bne	r2,zero,d198 <jpeg_add_quant_table+0x170>
			temp = 255L;		/* limit to baseline range if requested */
    d190:	00803fc4 	movi	r2,255
    d194:	e0bff915 	stw	r2,-28(fp)
		(*qtblptr)->quantval[i] = (UINT16) temp;
    d198:	e0bffa17 	ldw	r2,-24(fp)
    d19c:	11000017 	ldw	r4,0(r2)
    d1a0:	e0bff917 	ldw	r2,-28(fp)
    d1a4:	1007883a 	mov	r3,r2
    d1a8:	e0bff817 	ldw	r2,-32(fp)
    d1ac:	1085883a 	add	r2,r2,r2
    d1b0:	2085883a 	add	r2,r4,r2
    d1b4:	10c0000d 	sth	r3,0(r2)
	qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];

	if (*qtblptr == NULL)
		*qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);

	for (i = 0; i < DCTSIZE2; i++) {
    d1b8:	e0bff817 	ldw	r2,-32(fp)
    d1bc:	10800044 	addi	r2,r2,1
    d1c0:	e0bff815 	stw	r2,-32(fp)
    d1c4:	e0bff817 	ldw	r2,-32(fp)
    d1c8:	10801010 	cmplti	r2,r2,64
    d1cc:	103fd41e 	bne	r2,zero,d120 <jpeg_add_quant_table+0xf8>
			temp = 255L;		/* limit to baseline range if requested */
		(*qtblptr)->quantval[i] = (UINT16) temp;
	}

	/* Initialize sent_table FALSE so table will be written to JPEG file. */
	(*qtblptr)->sent_table = FALSE;
    d1d0:	e0bffa17 	ldw	r2,-24(fp)
    d1d4:	10800017 	ldw	r2,0(r2)
    d1d8:	10002005 	stb	zero,128(r2)
}
    d1dc:	e037883a 	mov	sp,fp
    d1e0:	dfc00117 	ldw	ra,4(sp)
    d1e4:	df000017 	ldw	fp,0(sp)
    d1e8:	dec00204 	addi	sp,sp,8
    d1ec:	f800283a 	ret

0000d1f0 <jpeg_default_qtables>:
	jpeg_default_qtables (j_compress_ptr cinfo, boolean force_baseline)
	/* Set or change the 'quality' (quantization) setting, using default tables
	* and straight percentage-scaling quality scales.
	* This entry point allows different scalings for luminance and chrominance.
	*/
{
    d1f0:	defffb04 	addi	sp,sp,-20
    d1f4:	dfc00415 	stw	ra,16(sp)
    d1f8:	df000315 	stw	fp,12(sp)
    d1fc:	df000304 	addi	fp,sp,12
    d200:	e13ffe15 	stw	r4,-8(fp)
    d204:	2805883a 	mov	r2,r5
    d208:	e0bfff05 	stb	r2,-4(fp)
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		cinfo->q_scale_factor[0], force_baseline);
    d20c:	e0bffe17 	ldw	r2,-8(fp)
	* and straight percentage-scaling quality scales.
	* This entry point allows different scalings for luminance and chrominance.
	*/
{
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
    d210:	10801917 	ldw	r2,100(r2)
    d214:	e0ffff03 	ldbu	r3,-4(fp)
    d218:	d8c00015 	stw	r3,0(sp)
    d21c:	e13ffe17 	ldw	r4,-8(fp)
    d220:	000b883a 	mov	r5,zero
    d224:	01800134 	movhi	r6,4
    d228:	31bbbc04 	addi	r6,r6,-4368
    d22c:	100f883a 	mov	r7,r2
    d230:	000d0280 	call	d028 <jpeg_add_quant_table>
		cinfo->q_scale_factor[0], force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
		cinfo->q_scale_factor[1], force_baseline);
    d234:	e0bffe17 	ldw	r2,-8(fp)
	*/
{
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		cinfo->q_scale_factor[0], force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
    d238:	10801a17 	ldw	r2,104(r2)
    d23c:	e0ffff03 	ldbu	r3,-4(fp)
    d240:	d8c00015 	stw	r3,0(sp)
    d244:	e13ffe17 	ldw	r4,-8(fp)
    d248:	01400044 	movi	r5,1
    d24c:	01800134 	movhi	r6,4
    d250:	31bbfc04 	addi	r6,r6,-4112
    d254:	100f883a 	mov	r7,r2
    d258:	000d0280 	call	d028 <jpeg_add_quant_table>
		cinfo->q_scale_factor[1], force_baseline);
}
    d25c:	e037883a 	mov	sp,fp
    d260:	dfc00117 	ldw	ra,4(sp)
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00204 	addi	sp,sp,8
    d26c:	f800283a 	ret

0000d270 <jpeg_set_linear_quality>:
	/* Set or change the 'quality' (quantization) setting, using default tables
	* and a straight percentage-scaling quality scale.  In most cases it's better
	* to use jpeg_set_quality (below); this entry point is provided for
	* applications that insist on a linear percentage scaling.
	*/
{
    d270:	defffa04 	addi	sp,sp,-24
    d274:	dfc00515 	stw	ra,20(sp)
    d278:	df000415 	stw	fp,16(sp)
    d27c:	df000404 	addi	fp,sp,16
    d280:	e13ffd15 	stw	r4,-12(fp)
    d284:	e17ffe15 	stw	r5,-8(fp)
    d288:	3005883a 	mov	r2,r6
    d28c:	e0bfff05 	stb	r2,-4(fp)
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
    d290:	e0bfff03 	ldbu	r2,-4(fp)
    d294:	d8800015 	stw	r2,0(sp)
    d298:	e13ffd17 	ldw	r4,-12(fp)
    d29c:	000b883a 	mov	r5,zero
    d2a0:	01800134 	movhi	r6,4
    d2a4:	31bbbc04 	addi	r6,r6,-4368
    d2a8:	e1fffe17 	ldw	r7,-8(fp)
    d2ac:	000d0280 	call	d028 <jpeg_add_quant_table>
		scale_factor, force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
    d2b0:	e0bfff03 	ldbu	r2,-4(fp)
    d2b4:	d8800015 	stw	r2,0(sp)
    d2b8:	e13ffd17 	ldw	r4,-12(fp)
    d2bc:	01400044 	movi	r5,1
    d2c0:	01800134 	movhi	r6,4
    d2c4:	31bbfc04 	addi	r6,r6,-4112
    d2c8:	e1fffe17 	ldw	r7,-8(fp)
    d2cc:	000d0280 	call	d028 <jpeg_add_quant_table>
		scale_factor, force_baseline);
}
    d2d0:	e037883a 	mov	sp,fp
    d2d4:	dfc00117 	ldw	ra,4(sp)
    d2d8:	df000017 	ldw	fp,0(sp)
    d2dc:	dec00204 	addi	sp,sp,8
    d2e0:	f800283a 	ret

0000d2e4 <jpeg_quality_scaling>:
	jpeg_quality_scaling (int quality)
	/* Convert a user-specified quality rating to a percentage scaling factor
	* for an underlying quantization table, using our recommended scaling curve.
	* The input 'quality' factor should be 0 (terrible) to 100 (very good).
	*/
{
    d2e4:	defffd04 	addi	sp,sp,-12
    d2e8:	dfc00215 	stw	ra,8(sp)
    d2ec:	df000115 	stw	fp,4(sp)
    d2f0:	df000104 	addi	fp,sp,4
    d2f4:	e13fff15 	stw	r4,-4(fp)
	/* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
	if (quality <= 0) quality = 1;
    d2f8:	e0bfff17 	ldw	r2,-4(fp)
    d2fc:	00800216 	blt	zero,r2,d308 <jpeg_quality_scaling+0x24>
    d300:	00800044 	movi	r2,1
    d304:	e0bfff15 	stw	r2,-4(fp)
	if (quality > 100) quality = 100;
    d308:	e0bfff17 	ldw	r2,-4(fp)
    d30c:	10801950 	cmplti	r2,r2,101
    d310:	1000021e 	bne	r2,zero,d31c <jpeg_quality_scaling+0x38>
    d314:	00801904 	movi	r2,100
    d318:	e0bfff15 	stw	r2,-4(fp)
	* Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
	* note that at Q=100 the scaling is 0, which will cause jpeg_add_quant_table
	* to make all the table entries 1 (hence, minimum quantization loss).
	* Qualities 1..50 are converted to scaling percentage 5000/Q.
	*/
	if (quality < 50)
    d31c:	e0bfff17 	ldw	r2,-4(fp)
    d320:	10800c88 	cmpgei	r2,r2,50
    d324:	1000051e 	bne	r2,zero,d33c <jpeg_quality_scaling+0x58>
		quality = 5000 / quality;
    d328:	0104e204 	movi	r4,5000
    d32c:	e17fff17 	ldw	r5,-4(fp)
    d330:	002c0980 	call	2c098 <__divsi3>
    d334:	e0bfff15 	stw	r2,-4(fp)
    d338:	00000506 	br	d350 <jpeg_quality_scaling+0x6c>
	else
		quality = 200 - quality*2;
    d33c:	00c01904 	movi	r3,100
    d340:	e0bfff17 	ldw	r2,-4(fp)
    d344:	1885c83a 	sub	r2,r3,r2
    d348:	1085883a 	add	r2,r2,r2
    d34c:	e0bfff15 	stw	r2,-4(fp)

	return quality;
    d350:	e0bfff17 	ldw	r2,-4(fp)
}
    d354:	e037883a 	mov	sp,fp
    d358:	dfc00117 	ldw	ra,4(sp)
    d35c:	df000017 	ldw	fp,0(sp)
    d360:	dec00204 	addi	sp,sp,8
    d364:	f800283a 	ret

0000d368 <jpeg_set_quality>:
	/* Set or change the 'quality' (quantization) setting, using default tables.
	* This is the standard quality-adjusting entry point for typical user
	* interfaces; only those who want detailed control over quantization tables
	* would use the preceding three routines directly.
	*/
{
    d368:	defffb04 	addi	sp,sp,-20
    d36c:	dfc00415 	stw	ra,16(sp)
    d370:	df000315 	stw	fp,12(sp)
    d374:	df000304 	addi	fp,sp,12
    d378:	e13ffd15 	stw	r4,-12(fp)
    d37c:	e17ffe15 	stw	r5,-8(fp)
    d380:	3005883a 	mov	r2,r6
    d384:	e0bfff05 	stb	r2,-4(fp)
	/* Convert user 0-100 rating to percentage scaling */
	quality = jpeg_quality_scaling(quality);
    d388:	e13ffe17 	ldw	r4,-8(fp)
    d38c:	000d2e40 	call	d2e4 <jpeg_quality_scaling>
    d390:	e0bffe15 	stw	r2,-8(fp)

	/* Set up standard quality tables */
	jpeg_set_linear_quality(cinfo, quality, force_baseline);
    d394:	e0bfff03 	ldbu	r2,-4(fp)
    d398:	e13ffd17 	ldw	r4,-12(fp)
    d39c:	e17ffe17 	ldw	r5,-8(fp)
    d3a0:	100d883a 	mov	r6,r2
    d3a4:	000d2700 	call	d270 <jpeg_set_linear_quality>
}
    d3a8:	e037883a 	mov	sp,fp
    d3ac:	dfc00117 	ldw	ra,4(sp)
    d3b0:	df000017 	ldw	fp,0(sp)
    d3b4:	dec00204 	addi	sp,sp,8
    d3b8:	f800283a 	ret

0000d3bc <add_huff_table>:

LOCAL(void)
	add_huff_table (j_compress_ptr cinfo,
	JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
	/* Define a Huffman table */
{
    d3bc:	defff804 	addi	sp,sp,-32
    d3c0:	dfc00715 	stw	ra,28(sp)
    d3c4:	df000615 	stw	fp,24(sp)
    d3c8:	df000604 	addi	fp,sp,24
    d3cc:	e13ffc15 	stw	r4,-16(fp)
    d3d0:	e17ffd15 	stw	r5,-12(fp)
    d3d4:	e1bffe15 	stw	r6,-8(fp)
    d3d8:	e1ffff15 	stw	r7,-4(fp)
	int nsymbols, len;

	if (*htblptr == NULL)
    d3dc:	e0bffd17 	ldw	r2,-12(fp)
    d3e0:	10800017 	ldw	r2,0(r2)
    d3e4:	1000041e 	bne	r2,zero,d3f8 <add_huff_table+0x3c>
		*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
    d3e8:	e13ffc17 	ldw	r4,-16(fp)
    d3ec:	000cfd40 	call	cfd4 <jpeg_alloc_huff_table>
    d3f0:	e0fffd17 	ldw	r3,-12(fp)
    d3f4:	18800015 	stw	r2,0(r3)

	/* Copy the number-of-symbols-of-each-code-length counts */
	MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
    d3f8:	e0bffd17 	ldw	r2,-12(fp)
    d3fc:	10800017 	ldw	r2,0(r2)
    d400:	1009883a 	mov	r4,r2
    d404:	e17ffe17 	ldw	r5,-8(fp)
    d408:	01800444 	movi	r6,17
    d40c:	002eaec0 	call	2eaec <memcpy>

	/* Validate the counts.  We do this here mainly so we can copy the right
	* number of symbols from the val[] array, without risking marching off
	* the end of memory.  jchuff.c will do a more thorough test later.
	*/
	nsymbols = 0;
    d410:	e03ffa15 	stw	zero,-24(fp)
	for (len = 1; len <= 16; len++)
    d414:	00800044 	movi	r2,1
    d418:	e0bffb15 	stw	r2,-20(fp)
    d41c:	00000b06 	br	d44c <add_huff_table+0x90>
		nsymbols += bits[len];
    d420:	e0bffb17 	ldw	r2,-20(fp)
    d424:	e0fffe17 	ldw	r3,-8(fp)
    d428:	1885883a 	add	r2,r3,r2
    d42c:	10800003 	ldbu	r2,0(r2)
    d430:	10803fcc 	andi	r2,r2,255
    d434:	e0fffa17 	ldw	r3,-24(fp)
    d438:	1885883a 	add	r2,r3,r2
    d43c:	e0bffa15 	stw	r2,-24(fp)
	/* Validate the counts.  We do this here mainly so we can copy the right
	* number of symbols from the val[] array, without risking marching off
	* the end of memory.  jchuff.c will do a more thorough test later.
	*/
	nsymbols = 0;
	for (len = 1; len <= 16; len++)
    d440:	e0bffb17 	ldw	r2,-20(fp)
    d444:	10800044 	addi	r2,r2,1
    d448:	e0bffb15 	stw	r2,-20(fp)
    d44c:	e0bffb17 	ldw	r2,-20(fp)
    d450:	10800450 	cmplti	r2,r2,17
    d454:	103ff21e 	bne	r2,zero,d420 <add_huff_table+0x64>
		nsymbols += bits[len];
	if (nsymbols < 1 || nsymbols > 256)
    d458:	e0bffa17 	ldw	r2,-24(fp)
    d45c:	0080030e 	bge	zero,r2,d46c <add_huff_table+0xb0>
    d460:	e0bffa17 	ldw	r2,-24(fp)
    d464:	10804050 	cmplti	r2,r2,257
    d468:	1000091e 	bne	r2,zero,d490 <add_huff_table+0xd4>
		ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
    d46c:	e0bffc17 	ldw	r2,-16(fp)
    d470:	10800017 	ldw	r2,0(r2)
    d474:	00c00244 	movi	r3,9
    d478:	10c00515 	stw	r3,20(r2)
    d47c:	e0bffc17 	ldw	r2,-16(fp)
    d480:	10800017 	ldw	r2,0(r2)
    d484:	10800017 	ldw	r2,0(r2)
    d488:	e13ffc17 	ldw	r4,-16(fp)
    d48c:	103ee83a 	callr	r2

	MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));
    d490:	e0bffd17 	ldw	r2,-12(fp)
    d494:	10800017 	ldw	r2,0(r2)
    d498:	10c00444 	addi	r3,r2,17
    d49c:	e0bffa17 	ldw	r2,-24(fp)
    d4a0:	1809883a 	mov	r4,r3
    d4a4:	e17fff17 	ldw	r5,-4(fp)
    d4a8:	100d883a 	mov	r6,r2
    d4ac:	002eaec0 	call	2eaec <memcpy>

	/* Initialize sent_table FALSE so table will be written to JPEG file. */
	(*htblptr)->sent_table = FALSE;
    d4b0:	e0bffd17 	ldw	r2,-12(fp)
    d4b4:	10800017 	ldw	r2,0(r2)
    d4b8:	10004445 	stb	zero,273(r2)
}
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	dfc00117 	ldw	ra,4(sp)
    d4c4:	df000017 	ldw	fp,0(sp)
    d4c8:	dec00204 	addi	sp,sp,8
    d4cc:	f800283a 	ret

0000d4d0 <std_huff_tables>:

LOCAL(void)
	std_huff_tables (j_compress_ptr cinfo)
	/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
	/* IMPORTANT: these are only valid for 8-bit data precision! */
{
    d4d0:	defffd04 	addi	sp,sp,-12
    d4d4:	dfc00215 	stw	ra,8(sp)
    d4d8:	df000115 	stw	fp,4(sp)
    d4dc:	df000104 	addi	fp,sp,4
    d4e0:	e13fff15 	stw	r4,-4(fp)
	0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
	0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	0xf9, 0xfa };

	add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
    d4e4:	e0bfff17 	ldw	r2,-4(fp)
    d4e8:	10801d04 	addi	r2,r2,116
    d4ec:	e13fff17 	ldw	r4,-4(fp)
    d4f0:	100b883a 	mov	r5,r2
    d4f4:	01800134 	movhi	r6,4
    d4f8:	31bc3c04 	addi	r6,r6,-3856
    d4fc:	01c00134 	movhi	r7,4
    d500:	39fc4044 	addi	r7,r7,-3839
    d504:	000d3bc0 	call	d3bc <add_huff_table>
		bits_dc_luminance, val_dc_luminance);
	add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
    d508:	e0bfff17 	ldw	r2,-4(fp)
    d50c:	10802104 	addi	r2,r2,132
    d510:	e13fff17 	ldw	r4,-4(fp)
    d514:	100b883a 	mov	r5,r2
    d518:	01800134 	movhi	r6,4
    d51c:	31bc4344 	addi	r6,r6,-3827
    d520:	01c00134 	movhi	r7,4
    d524:	39fc4784 	addi	r7,r7,-3810
    d528:	000d3bc0 	call	d3bc <add_huff_table>
		bits_ac_luminance, val_ac_luminance);
	add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
    d52c:	e0bfff17 	ldw	r2,-4(fp)
    d530:	10801e04 	addi	r2,r2,120
    d534:	e13fff17 	ldw	r4,-4(fp)
    d538:	100b883a 	mov	r5,r2
    d53c:	01800134 	movhi	r6,4
    d540:	31bc7004 	addi	r6,r6,-3648
    d544:	01c00134 	movhi	r7,4
    d548:	39fc7444 	addi	r7,r7,-3631
    d54c:	000d3bc0 	call	d3bc <add_huff_table>
		bits_dc_chrominance, val_dc_chrominance);
	add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
    d550:	e0bfff17 	ldw	r2,-4(fp)
    d554:	10802204 	addi	r2,r2,136
    d558:	e13fff17 	ldw	r4,-4(fp)
    d55c:	100b883a 	mov	r5,r2
    d560:	01800134 	movhi	r6,4
    d564:	31bc7744 	addi	r6,r6,-3619
    d568:	01c00134 	movhi	r7,4
    d56c:	39fc7b84 	addi	r7,r7,-3602
    d570:	000d3bc0 	call	d3bc <add_huff_table>
		bits_ac_chrominance, val_ac_chrominance);
}
    d574:	e037883a 	mov	sp,fp
    d578:	dfc00117 	ldw	ra,4(sp)
    d57c:	df000017 	ldw	fp,0(sp)
    d580:	dec00204 	addi	sp,sp,8
    d584:	f800283a 	ret

0000d588 <jpeg_set_defaults>:
* your code will still work (they'll be set to reasonable defaults).
*/

GLOBAL(void)
	jpeg_set_defaults (j_compress_ptr cinfo)
{
    d588:	defffc04 	addi	sp,sp,-16
    d58c:	dfc00315 	stw	ra,12(sp)
    d590:	df000215 	stw	fp,8(sp)
    d594:	df000204 	addi	fp,sp,8
    d598:	e13fff15 	stw	r4,-4(fp)
	int i;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
    d59c:	e0bfff17 	ldw	r2,-4(fp)
    d5a0:	10800517 	ldw	r2,20(r2)
    d5a4:	10801920 	cmpeqi	r2,r2,100
    d5a8:	10000e1e 	bne	r2,zero,d5e4 <jpeg_set_defaults+0x5c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    d5ac:	e0bfff17 	ldw	r2,-4(fp)
    d5b0:	10800017 	ldw	r2,0(r2)
    d5b4:	00c00544 	movi	r3,21
    d5b8:	10c00515 	stw	r3,20(r2)
    d5bc:	e0bfff17 	ldw	r2,-4(fp)
    d5c0:	10800017 	ldw	r2,0(r2)
    d5c4:	e0ffff17 	ldw	r3,-4(fp)
    d5c8:	18c00517 	ldw	r3,20(r3)
    d5cc:	10c00615 	stw	r3,24(r2)
    d5d0:	e0bfff17 	ldw	r2,-4(fp)
    d5d4:	10800017 	ldw	r2,0(r2)
    d5d8:	10800017 	ldw	r2,0(r2)
    d5dc:	e13fff17 	ldw	r4,-4(fp)
    d5e0:	103ee83a 	callr	r2

	/* Allocate comp_info array large enough for maximum component count.
	* Array is made permanent in case application wants to compress
	* multiple images at same param settings.
	*/
	if (cinfo->comp_info == NULL)
    d5e4:	e0bfff17 	ldw	r2,-4(fp)
    d5e8:	10801417 	ldw	r2,80(r2)
    d5ec:	1000091e 	bne	r2,zero,d614 <jpeg_set_defaults+0x8c>
		cinfo->comp_info = (jpeg_component_info *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
    d5f0:	e0bfff17 	ldw	r2,-4(fp)
    d5f4:	10800117 	ldw	r2,4(r2)
    d5f8:	10800017 	ldw	r2,0(r2)
    d5fc:	e13fff17 	ldw	r4,-4(fp)
    d600:	000b883a 	mov	r5,zero
    d604:	0180dc04 	movi	r6,880
    d608:	103ee83a 	callr	r2
	/* Allocate comp_info array large enough for maximum component count.
	* Array is made permanent in case application wants to compress
	* multiple images at same param settings.
	*/
	if (cinfo->comp_info == NULL)
		cinfo->comp_info = (jpeg_component_info *)
    d60c:	e0ffff17 	ldw	r3,-4(fp)
    d610:	18801415 	stw	r2,80(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
		MAX_COMPONENTS * SIZEOF(jpeg_component_info));

	/* Initialize everything not dependent on the color space */

	cinfo->scale_num = 1;		/* 1:1 scaling */
    d614:	e0bfff17 	ldw	r2,-4(fp)
    d618:	00c00044 	movi	r3,1
    d61c:	10c00d15 	stw	r3,52(r2)
	cinfo->scale_denom = 1;
    d620:	e0bfff17 	ldw	r2,-4(fp)
    d624:	00c00044 	movi	r3,1
    d628:	10c00e15 	stw	r3,56(r2)
	cinfo->data_precision = BITS_IN_JSAMPLE;
    d62c:	e0bfff17 	ldw	r2,-4(fp)
    d630:	00c00204 	movi	r3,8
    d634:	10c01115 	stw	r3,68(r2)
	/* Set up two quantization tables using default quality of 75 */
	jpeg_set_quality(cinfo, 75, TRUE);
    d638:	e13fff17 	ldw	r4,-4(fp)
    d63c:	014012c4 	movi	r5,75
    d640:	01800044 	movi	r6,1
    d644:	000d3680 	call	d368 <jpeg_set_quality>
	/* Set up two Huffman tables */
	std_huff_tables(cinfo);
    d648:	e13fff17 	ldw	r4,-4(fp)
    d64c:	000d4d00 	call	d4d0 <std_huff_tables>

	/* Initialize default arithmetic coding conditioning */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
    d650:	e03ffe15 	stw	zero,-8(fp)
    d654:	00001406 	br	d6a8 <jpeg_set_defaults+0x120>
		cinfo->arith_dc_L[i] = 0;
    d658:	e0ffff17 	ldw	r3,-4(fp)
    d65c:	e0bffe17 	ldw	r2,-8(fp)
    d660:	1885883a 	add	r2,r3,r2
    d664:	10802504 	addi	r2,r2,148
    d668:	10000005 	stb	zero,0(r2)
		cinfo->arith_dc_U[i] = 1;
    d66c:	e0ffff17 	ldw	r3,-4(fp)
    d670:	e0bffe17 	ldw	r2,-8(fp)
    d674:	1885883a 	add	r2,r3,r2
    d678:	10802904 	addi	r2,r2,164
    d67c:	00c00044 	movi	r3,1
    d680:	10c00005 	stb	r3,0(r2)
		cinfo->arith_ac_K[i] = 5;
    d684:	e0ffff17 	ldw	r3,-4(fp)
    d688:	e0bffe17 	ldw	r2,-8(fp)
    d68c:	1885883a 	add	r2,r3,r2
    d690:	10802d04 	addi	r2,r2,180
    d694:	00c00144 	movi	r3,5
    d698:	10c00005 	stb	r3,0(r2)
	jpeg_set_quality(cinfo, 75, TRUE);
	/* Set up two Huffman tables */
	std_huff_tables(cinfo);

	/* Initialize default arithmetic coding conditioning */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
    d69c:	e0bffe17 	ldw	r2,-8(fp)
    d6a0:	10800044 	addi	r2,r2,1
    d6a4:	e0bffe15 	stw	r2,-8(fp)
    d6a8:	e0bffe17 	ldw	r2,-8(fp)
    d6ac:	10800410 	cmplti	r2,r2,16
    d6b0:	103fe91e 	bne	r2,zero,d658 <jpeg_set_defaults+0xd0>
		cinfo->arith_dc_U[i] = 1;
		cinfo->arith_ac_K[i] = 5;
	}

	/* Default is no multiple-scan output */
	cinfo->scan_info = NULL;
    d6b4:	e0bfff17 	ldw	r2,-4(fp)
    d6b8:	10003215 	stw	zero,200(r2)
	cinfo->num_scans = 0;
    d6bc:	e0bfff17 	ldw	r2,-4(fp)
    d6c0:	10003115 	stw	zero,196(r2)

	/* Expect normal source image, not raw downsampled data */
	cinfo->raw_data_in = FALSE;
    d6c4:	e0bfff17 	ldw	r2,-4(fp)
    d6c8:	10003305 	stb	zero,204(r2)

	/* Use Huffman coding, not arithmetic coding, by default */
	cinfo->arith_code = FALSE;
    d6cc:	e0bfff17 	ldw	r2,-4(fp)
    d6d0:	10003345 	stb	zero,205(r2)

	/* By default, don't do extra passes to optimize entropy coding */
	cinfo->optimize_coding = FALSE;
    d6d4:	e0bfff17 	ldw	r2,-4(fp)
    d6d8:	10003385 	stb	zero,206(r2)
	/* The standard Huffman tables are only valid for 8-bit data precision.
	* If the precision is higher, force optimization on so that usable
	* tables will be computed.  This test can be removed if default tables
	* are supplied that are valid for the desired precision.
	*/
	if (cinfo->data_precision > 8)
    d6dc:	e0bfff17 	ldw	r2,-4(fp)
    d6e0:	10801117 	ldw	r2,68(r2)
    d6e4:	10800250 	cmplti	r2,r2,9
    d6e8:	1000031e 	bne	r2,zero,d6f8 <jpeg_set_defaults+0x170>
		cinfo->optimize_coding = TRUE;
    d6ec:	e0bfff17 	ldw	r2,-4(fp)
    d6f0:	00c00044 	movi	r3,1
    d6f4:	10c03385 	stb	r3,206(r2)

	/* By default, use the simpler non-cosited sampling alignment */
	cinfo->CCIR601_sampling = FALSE;
    d6f8:	e0bfff17 	ldw	r2,-4(fp)
    d6fc:	100033c5 	stb	zero,207(r2)

	/* By default, apply fancy downsampling */
	cinfo->do_fancy_downsampling = TRUE;
    d700:	e0bfff17 	ldw	r2,-4(fp)
    d704:	00c00044 	movi	r3,1
    d708:	10c03405 	stb	r3,208(r2)

	/* No input smoothing */
	cinfo->smoothing_factor = 0;
    d70c:	e0bfff17 	ldw	r2,-4(fp)
    d710:	10003515 	stw	zero,212(r2)

	/* DCT algorithm preference */
	cinfo->dct_method = JDCT_DEFAULT;
    d714:	e0bfff17 	ldw	r2,-4(fp)
    d718:	00c00044 	movi	r3,1
    d71c:	10c03615 	stw	r3,216(r2)

	/* No restart markers */
	cinfo->restart_interval = 0;
    d720:	e0bfff17 	ldw	r2,-4(fp)
    d724:	10003715 	stw	zero,220(r2)
	cinfo->restart_in_rows = 0;
    d728:	e0bfff17 	ldw	r2,-4(fp)
    d72c:	10003815 	stw	zero,224(r2)
	* An application that wants to emit JFIF 1.02 extension markers should set
	* JFIF_minor_version to 2.  We could probably get away with just defaulting
	* to 1.02, but there may still be some decoders in use that will complain
	* about that; saying 1.01 should minimize compatibility problems.
	*/
	cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
    d730:	e0bfff17 	ldw	r2,-4(fp)
    d734:	00c00044 	movi	r3,1
    d738:	10c03945 	stb	r3,229(r2)
	cinfo->JFIF_minor_version = 1;
    d73c:	e0bfff17 	ldw	r2,-4(fp)
    d740:	00c00044 	movi	r3,1
    d744:	10c03985 	stb	r3,230(r2)
	cinfo->density_unit = 0;	/* Pixel size is unknown by default */
    d748:	e0bfff17 	ldw	r2,-4(fp)
    d74c:	100039c5 	stb	zero,231(r2)
	cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
    d750:	e0bfff17 	ldw	r2,-4(fp)
    d754:	00c00044 	movi	r3,1
    d758:	10c03a0d 	sth	r3,232(r2)
	cinfo->Y_density = 1;
    d75c:	e0bfff17 	ldw	r2,-4(fp)
    d760:	00c00044 	movi	r3,1
    d764:	10c03a8d 	sth	r3,234(r2)

	/* Choose JPEG colorspace based on input space, set defaults accordingly */

	jpeg_default_colorspace(cinfo);
    d768:	e13fff17 	ldw	r4,-4(fp)
    d76c:	000d7840 	call	d784 <jpeg_default_colorspace>
}
    d770:	e037883a 	mov	sp,fp
    d774:	dfc00117 	ldw	ra,4(sp)
    d778:	df000017 	ldw	fp,0(sp)
    d77c:	dec00204 	addi	sp,sp,8
    d780:	f800283a 	ret

0000d784 <jpeg_default_colorspace>:
* Select an appropriate JPEG colorspace for in_color_space.
*/

GLOBAL(void)
	jpeg_default_colorspace (j_compress_ptr cinfo)
{
    d784:	defffd04 	addi	sp,sp,-12
    d788:	dfc00215 	stw	ra,8(sp)
    d78c:	df000115 	stw	fp,4(sp)
    d790:	df000104 	addi	fp,sp,4
    d794:	e13fff15 	stw	r4,-4(fp)
	switch (cinfo->in_color_space) {
    d798:	e0bfff17 	ldw	r2,-4(fp)
    d79c:	10800a17 	ldw	r2,40(r2)
    d7a0:	10c001a8 	cmpgeui	r3,r2,6
    d7a4:	1800251e 	bne	r3,zero,d83c <jpeg_default_colorspace+0xb8>
    d7a8:	1085883a 	add	r2,r2,r2
    d7ac:	1087883a 	add	r3,r2,r2
    d7b0:	00800074 	movhi	r2,1
    d7b4:	10b5f104 	addi	r2,r2,-10300
    d7b8:	1885883a 	add	r2,r3,r2
    d7bc:	10800017 	ldw	r2,0(r2)
    d7c0:	1000683a 	jmp	r2
    d7c4:	0000d82c 	andhi	zero,zero,864
    d7c8:	0000d7dc 	xori	zero,zero,863
    d7cc:	0000d7ec 	andhi	zero,zero,863
    d7d0:	0000d7fc 	xorhi	zero,zero,863
    d7d4:	0000d80c 	andi	zero,zero,864
    d7d8:	0000d81c 	xori	zero,zero,864
	case JCS_GRAYSCALE:
		jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
    d7dc:	e13fff17 	ldw	r4,-4(fp)
    d7e0:	01400044 	movi	r5,1
    d7e4:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d7e8:	00001d06 	br	d860 <jpeg_default_colorspace+0xdc>
	case JCS_RGB:
		jpeg_set_colorspace(cinfo, JCS_YCbCr);
    d7ec:	e13fff17 	ldw	r4,-4(fp)
    d7f0:	014000c4 	movi	r5,3
    d7f4:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d7f8:	00001906 	br	d860 <jpeg_default_colorspace+0xdc>
	case JCS_YCbCr:
		jpeg_set_colorspace(cinfo, JCS_YCbCr);
    d7fc:	e13fff17 	ldw	r4,-4(fp)
    d800:	014000c4 	movi	r5,3
    d804:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d808:	00001506 	br	d860 <jpeg_default_colorspace+0xdc>
	case JCS_CMYK:
		jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
    d80c:	e13fff17 	ldw	r4,-4(fp)
    d810:	01400104 	movi	r5,4
    d814:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d818:	00001106 	br	d860 <jpeg_default_colorspace+0xdc>
	case JCS_YCCK:
		jpeg_set_colorspace(cinfo, JCS_YCCK);
    d81c:	e13fff17 	ldw	r4,-4(fp)
    d820:	01400144 	movi	r5,5
    d824:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d828:	00000d06 	br	d860 <jpeg_default_colorspace+0xdc>
	case JCS_UNKNOWN:
		jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
    d82c:	e13fff17 	ldw	r4,-4(fp)
    d830:	000b883a 	mov	r5,zero
    d834:	000d8740 	call	d874 <jpeg_set_colorspace>
		break;
    d838:	00000906 	br	d860 <jpeg_default_colorspace+0xdc>
	default:
		ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    d83c:	e0bfff17 	ldw	r2,-4(fp)
    d840:	10800017 	ldw	r2,0(r2)
    d844:	00c00284 	movi	r3,10
    d848:	10c00515 	stw	r3,20(r2)
    d84c:	e0bfff17 	ldw	r2,-4(fp)
    d850:	10800017 	ldw	r2,0(r2)
    d854:	10800017 	ldw	r2,0(r2)
    d858:	e13fff17 	ldw	r4,-4(fp)
    d85c:	103ee83a 	callr	r2
	}
}
    d860:	e037883a 	mov	sp,fp
    d864:	dfc00117 	ldw	ra,4(sp)
    d868:	df000017 	ldw	fp,0(sp)
    d86c:	dec00204 	addi	sp,sp,8
    d870:	f800283a 	ret

0000d874 <jpeg_set_colorspace>:
* Set the JPEG colorspace, and choose colorspace-dependent default values.
*/

GLOBAL(void)
	jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
    d874:	defff904 	addi	sp,sp,-28
    d878:	dfc00615 	stw	ra,24(sp)
    d87c:	df000515 	stw	fp,20(sp)
    d880:	dc000415 	stw	r16,16(sp)
    d884:	df000404 	addi	fp,sp,16
    d888:	e13ffe15 	stw	r4,-8(fp)
    d88c:	e17fff15 	stw	r5,-4(fp)
	compptr->quant_tbl_no = (quant), \
	compptr->dc_tbl_no = (dctbl), \
	compptr->ac_tbl_no = (actbl) )

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
    d890:	e0bffe17 	ldw	r2,-8(fp)
    d894:	10800517 	ldw	r2,20(r2)
    d898:	10801920 	cmpeqi	r2,r2,100
    d89c:	10000e1e 	bne	r2,zero,d8d8 <jpeg_set_colorspace+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    d8a0:	e0bffe17 	ldw	r2,-8(fp)
    d8a4:	10800017 	ldw	r2,0(r2)
    d8a8:	00c00544 	movi	r3,21
    d8ac:	10c00515 	stw	r3,20(r2)
    d8b0:	e0bffe17 	ldw	r2,-8(fp)
    d8b4:	10800017 	ldw	r2,0(r2)
    d8b8:	e0fffe17 	ldw	r3,-8(fp)
    d8bc:	18c00517 	ldw	r3,20(r3)
    d8c0:	10c00615 	stw	r3,24(r2)
    d8c4:	e0bffe17 	ldw	r2,-8(fp)
    d8c8:	10800017 	ldw	r2,0(r2)
    d8cc:	10800017 	ldw	r2,0(r2)
    d8d0:	e13ffe17 	ldw	r4,-8(fp)
    d8d4:	103ee83a 	callr	r2

	/* For all colorspaces, we use Q and Huff tables 0 for luminance components,
	* tables 1 for chrominance components.
	*/

	cinfo->jpeg_color_space = colorspace;
    d8d8:	e0bffe17 	ldw	r2,-8(fp)
    d8dc:	e0ffff17 	ldw	r3,-4(fp)
    d8e0:	10c01315 	stw	r3,76(r2)

	cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
    d8e4:	e0bffe17 	ldw	r2,-8(fp)
    d8e8:	10003905 	stb	zero,228(r2)
	cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
    d8ec:	e0bffe17 	ldw	r2,-8(fp)
    d8f0:	10003b05 	stb	zero,236(r2)

	switch (colorspace) {
    d8f4:	e0bfff17 	ldw	r2,-4(fp)
    d8f8:	108001a8 	cmpgeui	r2,r2,6
    d8fc:	1001931e 	bne	r2,zero,df4c <jpeg_set_colorspace+0x6d8>
    d900:	e0bfff17 	ldw	r2,-4(fp)
    d904:	1085883a 	add	r2,r2,r2
    d908:	1087883a 	add	r3,r2,r2
    d90c:	00800074 	movhi	r2,1
    d910:	10b64804 	addi	r2,r2,-9952
    d914:	1885883a 	add	r2,r3,r2
    d918:	10800017 	ldw	r2,0(r2)
    d91c:	1000683a 	jmp	r2
    d920:	0000de54 	movui	zero,889
    d924:	0000d938 	rdprs	zero,zero,868
    d928:	0000d99c 	xori	zero,zero,870
    d92c:	0000da98 	cmpnei	zero,zero,874
    d930:	0000dbac 	andhi	zero,zero,878
    d934:	0000dcf4 	movhi	zero,883
	case JCS_GRAYSCALE:
		cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
    d938:	e0bffe17 	ldw	r2,-8(fp)
    d93c:	00c00044 	movi	r3,1
    d940:	10c03905 	stb	r3,228(r2)
		cinfo->num_components = 1;
    d944:	e0bffe17 	ldw	r2,-8(fp)
    d948:	00c00044 	movi	r3,1
    d94c:	10c01215 	stw	r3,72(r2)
		/* JFIF specifies component ID 1 */
		SET_COMP(0, 1, 1,1, 0, 0,0);
    d950:	e0bffe17 	ldw	r2,-8(fp)
    d954:	10801417 	ldw	r2,80(r2)
    d958:	e0bffd15 	stw	r2,-12(fp)
    d95c:	e0bffd17 	ldw	r2,-12(fp)
    d960:	00c00044 	movi	r3,1
    d964:	10c00015 	stw	r3,0(r2)
    d968:	e0bffd17 	ldw	r2,-12(fp)
    d96c:	00c00044 	movi	r3,1
    d970:	10c00215 	stw	r3,8(r2)
    d974:	e0bffd17 	ldw	r2,-12(fp)
    d978:	00c00044 	movi	r3,1
    d97c:	10c00315 	stw	r3,12(r2)
    d980:	e0bffd17 	ldw	r2,-12(fp)
    d984:	10000415 	stw	zero,16(r2)
    d988:	e0bffd17 	ldw	r2,-12(fp)
    d98c:	10000515 	stw	zero,20(r2)
    d990:	e0bffd17 	ldw	r2,-12(fp)
    d994:	10000615 	stw	zero,24(r2)
		break;
    d998:	00017506 	br	df70 <jpeg_set_colorspace+0x6fc>
	case JCS_RGB:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
    d99c:	e0bffe17 	ldw	r2,-8(fp)
    d9a0:	00c00044 	movi	r3,1
    d9a4:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 3;
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	00c000c4 	movi	r3,3
    d9b0:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
    d9b4:	e0bffe17 	ldw	r2,-8(fp)
    d9b8:	10801417 	ldw	r2,80(r2)
    d9bc:	e0bffd15 	stw	r2,-12(fp)
    d9c0:	e0bffd17 	ldw	r2,-12(fp)
    d9c4:	00c01484 	movi	r3,82
    d9c8:	10c00015 	stw	r3,0(r2)
    d9cc:	e0bffd17 	ldw	r2,-12(fp)
    d9d0:	00c00044 	movi	r3,1
    d9d4:	10c00215 	stw	r3,8(r2)
    d9d8:	e0bffd17 	ldw	r2,-12(fp)
    d9dc:	00c00044 	movi	r3,1
    d9e0:	10c00315 	stw	r3,12(r2)
    d9e4:	e0bffd17 	ldw	r2,-12(fp)
    d9e8:	10000415 	stw	zero,16(r2)
    d9ec:	e0bffd17 	ldw	r2,-12(fp)
    d9f0:	10000515 	stw	zero,20(r2)
    d9f4:	e0bffd17 	ldw	r2,-12(fp)
    d9f8:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
    d9fc:	e0bffe17 	ldw	r2,-8(fp)
    da00:	10801417 	ldw	r2,80(r2)
    da04:	10801604 	addi	r2,r2,88
    da08:	e0bffd15 	stw	r2,-12(fp)
    da0c:	e0bffd17 	ldw	r2,-12(fp)
    da10:	00c011c4 	movi	r3,71
    da14:	10c00015 	stw	r3,0(r2)
    da18:	e0bffd17 	ldw	r2,-12(fp)
    da1c:	00c00044 	movi	r3,1
    da20:	10c00215 	stw	r3,8(r2)
    da24:	e0bffd17 	ldw	r2,-12(fp)
    da28:	00c00044 	movi	r3,1
    da2c:	10c00315 	stw	r3,12(r2)
    da30:	e0bffd17 	ldw	r2,-12(fp)
    da34:	10000415 	stw	zero,16(r2)
    da38:	e0bffd17 	ldw	r2,-12(fp)
    da3c:	10000515 	stw	zero,20(r2)
    da40:	e0bffd17 	ldw	r2,-12(fp)
    da44:	10000615 	stw	zero,24(r2)
		SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
    da48:	e0bffe17 	ldw	r2,-8(fp)
    da4c:	10801417 	ldw	r2,80(r2)
    da50:	10802c04 	addi	r2,r2,176
    da54:	e0bffd15 	stw	r2,-12(fp)
    da58:	e0bffd17 	ldw	r2,-12(fp)
    da5c:	00c01084 	movi	r3,66
    da60:	10c00015 	stw	r3,0(r2)
    da64:	e0bffd17 	ldw	r2,-12(fp)
    da68:	00c00044 	movi	r3,1
    da6c:	10c00215 	stw	r3,8(r2)
    da70:	e0bffd17 	ldw	r2,-12(fp)
    da74:	00c00044 	movi	r3,1
    da78:	10c00315 	stw	r3,12(r2)
    da7c:	e0bffd17 	ldw	r2,-12(fp)
    da80:	10000415 	stw	zero,16(r2)
    da84:	e0bffd17 	ldw	r2,-12(fp)
    da88:	10000515 	stw	zero,20(r2)
    da8c:	e0bffd17 	ldw	r2,-12(fp)
    da90:	10000615 	stw	zero,24(r2)
		break;
    da94:	00013606 	br	df70 <jpeg_set_colorspace+0x6fc>
	case JCS_YCbCr:
		cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
    da98:	e0bffe17 	ldw	r2,-8(fp)
    da9c:	00c00044 	movi	r3,1
    daa0:	10c03905 	stb	r3,228(r2)
		cinfo->num_components = 3;
    daa4:	e0bffe17 	ldw	r2,-8(fp)
    daa8:	00c000c4 	movi	r3,3
    daac:	10c01215 	stw	r3,72(r2)
		/* JFIF specifies component IDs 1,2,3 */
		/* We default to 2x2 subsamples of chrominance */
		SET_COMP(0, 1, 2,2, 0, 0,0);
    dab0:	e0bffe17 	ldw	r2,-8(fp)
    dab4:	10801417 	ldw	r2,80(r2)
    dab8:	e0bffd15 	stw	r2,-12(fp)
    dabc:	e0bffd17 	ldw	r2,-12(fp)
    dac0:	00c00044 	movi	r3,1
    dac4:	10c00015 	stw	r3,0(r2)
    dac8:	e0bffd17 	ldw	r2,-12(fp)
    dacc:	00c00084 	movi	r3,2
    dad0:	10c00215 	stw	r3,8(r2)
    dad4:	e0bffd17 	ldw	r2,-12(fp)
    dad8:	00c00084 	movi	r3,2
    dadc:	10c00315 	stw	r3,12(r2)
    dae0:	e0bffd17 	ldw	r2,-12(fp)
    dae4:	10000415 	stw	zero,16(r2)
    dae8:	e0bffd17 	ldw	r2,-12(fp)
    daec:	10000515 	stw	zero,20(r2)
    daf0:	e0bffd17 	ldw	r2,-12(fp)
    daf4:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 2, 1,1, 1, 1,1);
    daf8:	e0bffe17 	ldw	r2,-8(fp)
    dafc:	10801417 	ldw	r2,80(r2)
    db00:	10801604 	addi	r2,r2,88
    db04:	e0bffd15 	stw	r2,-12(fp)
    db08:	e0bffd17 	ldw	r2,-12(fp)
    db0c:	00c00084 	movi	r3,2
    db10:	10c00015 	stw	r3,0(r2)
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	00c00044 	movi	r3,1
    db1c:	10c00215 	stw	r3,8(r2)
    db20:	e0bffd17 	ldw	r2,-12(fp)
    db24:	00c00044 	movi	r3,1
    db28:	10c00315 	stw	r3,12(r2)
    db2c:	e0bffd17 	ldw	r2,-12(fp)
    db30:	00c00044 	movi	r3,1
    db34:	10c00415 	stw	r3,16(r2)
    db38:	e0bffd17 	ldw	r2,-12(fp)
    db3c:	00c00044 	movi	r3,1
    db40:	10c00515 	stw	r3,20(r2)
    db44:	e0bffd17 	ldw	r2,-12(fp)
    db48:	00c00044 	movi	r3,1
    db4c:	10c00615 	stw	r3,24(r2)
		SET_COMP(2, 3, 1,1, 1, 1,1);
    db50:	e0bffe17 	ldw	r2,-8(fp)
    db54:	10801417 	ldw	r2,80(r2)
    db58:	10802c04 	addi	r2,r2,176
    db5c:	e0bffd15 	stw	r2,-12(fp)
    db60:	e0bffd17 	ldw	r2,-12(fp)
    db64:	00c000c4 	movi	r3,3
    db68:	10c00015 	stw	r3,0(r2)
    db6c:	e0bffd17 	ldw	r2,-12(fp)
    db70:	00c00044 	movi	r3,1
    db74:	10c00215 	stw	r3,8(r2)
    db78:	e0bffd17 	ldw	r2,-12(fp)
    db7c:	00c00044 	movi	r3,1
    db80:	10c00315 	stw	r3,12(r2)
    db84:	e0bffd17 	ldw	r2,-12(fp)
    db88:	00c00044 	movi	r3,1
    db8c:	10c00415 	stw	r3,16(r2)
    db90:	e0bffd17 	ldw	r2,-12(fp)
    db94:	00c00044 	movi	r3,1
    db98:	10c00515 	stw	r3,20(r2)
    db9c:	e0bffd17 	ldw	r2,-12(fp)
    dba0:	00c00044 	movi	r3,1
    dba4:	10c00615 	stw	r3,24(r2)
		break;
    dba8:	0000f106 	br	df70 <jpeg_set_colorspace+0x6fc>
	case JCS_CMYK:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
    dbac:	e0bffe17 	ldw	r2,-8(fp)
    dbb0:	00c00044 	movi	r3,1
    dbb4:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 4;
    dbb8:	e0bffe17 	ldw	r2,-8(fp)
    dbbc:	00c00104 	movi	r3,4
    dbc0:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
    dbc4:	e0bffe17 	ldw	r2,-8(fp)
    dbc8:	10801417 	ldw	r2,80(r2)
    dbcc:	e0bffd15 	stw	r2,-12(fp)
    dbd0:	e0bffd17 	ldw	r2,-12(fp)
    dbd4:	00c010c4 	movi	r3,67
    dbd8:	10c00015 	stw	r3,0(r2)
    dbdc:	e0bffd17 	ldw	r2,-12(fp)
    dbe0:	00c00044 	movi	r3,1
    dbe4:	10c00215 	stw	r3,8(r2)
    dbe8:	e0bffd17 	ldw	r2,-12(fp)
    dbec:	00c00044 	movi	r3,1
    dbf0:	10c00315 	stw	r3,12(r2)
    dbf4:	e0bffd17 	ldw	r2,-12(fp)
    dbf8:	10000415 	stw	zero,16(r2)
    dbfc:	e0bffd17 	ldw	r2,-12(fp)
    dc00:	10000515 	stw	zero,20(r2)
    dc04:	e0bffd17 	ldw	r2,-12(fp)
    dc08:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
    dc0c:	e0bffe17 	ldw	r2,-8(fp)
    dc10:	10801417 	ldw	r2,80(r2)
    dc14:	10801604 	addi	r2,r2,88
    dc18:	e0bffd15 	stw	r2,-12(fp)
    dc1c:	e0bffd17 	ldw	r2,-12(fp)
    dc20:	00c01344 	movi	r3,77
    dc24:	10c00015 	stw	r3,0(r2)
    dc28:	e0bffd17 	ldw	r2,-12(fp)
    dc2c:	00c00044 	movi	r3,1
    dc30:	10c00215 	stw	r3,8(r2)
    dc34:	e0bffd17 	ldw	r2,-12(fp)
    dc38:	00c00044 	movi	r3,1
    dc3c:	10c00315 	stw	r3,12(r2)
    dc40:	e0bffd17 	ldw	r2,-12(fp)
    dc44:	10000415 	stw	zero,16(r2)
    dc48:	e0bffd17 	ldw	r2,-12(fp)
    dc4c:	10000515 	stw	zero,20(r2)
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	10000615 	stw	zero,24(r2)
		SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
    dc58:	e0bffe17 	ldw	r2,-8(fp)
    dc5c:	10801417 	ldw	r2,80(r2)
    dc60:	10802c04 	addi	r2,r2,176
    dc64:	e0bffd15 	stw	r2,-12(fp)
    dc68:	e0bffd17 	ldw	r2,-12(fp)
    dc6c:	00c01644 	movi	r3,89
    dc70:	10c00015 	stw	r3,0(r2)
    dc74:	e0bffd17 	ldw	r2,-12(fp)
    dc78:	00c00044 	movi	r3,1
    dc7c:	10c00215 	stw	r3,8(r2)
    dc80:	e0bffd17 	ldw	r2,-12(fp)
    dc84:	00c00044 	movi	r3,1
    dc88:	10c00315 	stw	r3,12(r2)
    dc8c:	e0bffd17 	ldw	r2,-12(fp)
    dc90:	10000415 	stw	zero,16(r2)
    dc94:	e0bffd17 	ldw	r2,-12(fp)
    dc98:	10000515 	stw	zero,20(r2)
    dc9c:	e0bffd17 	ldw	r2,-12(fp)
    dca0:	10000615 	stw	zero,24(r2)
		SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
    dca4:	e0bffe17 	ldw	r2,-8(fp)
    dca8:	10801417 	ldw	r2,80(r2)
    dcac:	10804204 	addi	r2,r2,264
    dcb0:	e0bffd15 	stw	r2,-12(fp)
    dcb4:	e0bffd17 	ldw	r2,-12(fp)
    dcb8:	00c012c4 	movi	r3,75
    dcbc:	10c00015 	stw	r3,0(r2)
    dcc0:	e0bffd17 	ldw	r2,-12(fp)
    dcc4:	00c00044 	movi	r3,1
    dcc8:	10c00215 	stw	r3,8(r2)
    dccc:	e0bffd17 	ldw	r2,-12(fp)
    dcd0:	00c00044 	movi	r3,1
    dcd4:	10c00315 	stw	r3,12(r2)
    dcd8:	e0bffd17 	ldw	r2,-12(fp)
    dcdc:	10000415 	stw	zero,16(r2)
    dce0:	e0bffd17 	ldw	r2,-12(fp)
    dce4:	10000515 	stw	zero,20(r2)
    dce8:	e0bffd17 	ldw	r2,-12(fp)
    dcec:	10000615 	stw	zero,24(r2)
		break;
    dcf0:	00009f06 	br	df70 <jpeg_set_colorspace+0x6fc>
	case JCS_YCCK:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
    dcf4:	e0bffe17 	ldw	r2,-8(fp)
    dcf8:	00c00044 	movi	r3,1
    dcfc:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 4;
    dd00:	e0bffe17 	ldw	r2,-8(fp)
    dd04:	00c00104 	movi	r3,4
    dd08:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 1, 2,2, 0, 0,0);
    dd0c:	e0bffe17 	ldw	r2,-8(fp)
    dd10:	10801417 	ldw	r2,80(r2)
    dd14:	e0bffd15 	stw	r2,-12(fp)
    dd18:	e0bffd17 	ldw	r2,-12(fp)
    dd1c:	00c00044 	movi	r3,1
    dd20:	10c00015 	stw	r3,0(r2)
    dd24:	e0bffd17 	ldw	r2,-12(fp)
    dd28:	00c00084 	movi	r3,2
    dd2c:	10c00215 	stw	r3,8(r2)
    dd30:	e0bffd17 	ldw	r2,-12(fp)
    dd34:	00c00084 	movi	r3,2
    dd38:	10c00315 	stw	r3,12(r2)
    dd3c:	e0bffd17 	ldw	r2,-12(fp)
    dd40:	10000415 	stw	zero,16(r2)
    dd44:	e0bffd17 	ldw	r2,-12(fp)
    dd48:	10000515 	stw	zero,20(r2)
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 2, 1,1, 1, 1,1);
    dd54:	e0bffe17 	ldw	r2,-8(fp)
    dd58:	10801417 	ldw	r2,80(r2)
    dd5c:	10801604 	addi	r2,r2,88
    dd60:	e0bffd15 	stw	r2,-12(fp)
    dd64:	e0bffd17 	ldw	r2,-12(fp)
    dd68:	00c00084 	movi	r3,2
    dd6c:	10c00015 	stw	r3,0(r2)
    dd70:	e0bffd17 	ldw	r2,-12(fp)
    dd74:	00c00044 	movi	r3,1
    dd78:	10c00215 	stw	r3,8(r2)
    dd7c:	e0bffd17 	ldw	r2,-12(fp)
    dd80:	00c00044 	movi	r3,1
    dd84:	10c00315 	stw	r3,12(r2)
    dd88:	e0bffd17 	ldw	r2,-12(fp)
    dd8c:	00c00044 	movi	r3,1
    dd90:	10c00415 	stw	r3,16(r2)
    dd94:	e0bffd17 	ldw	r2,-12(fp)
    dd98:	00c00044 	movi	r3,1
    dd9c:	10c00515 	stw	r3,20(r2)
    dda0:	e0bffd17 	ldw	r2,-12(fp)
    dda4:	00c00044 	movi	r3,1
    dda8:	10c00615 	stw	r3,24(r2)
		SET_COMP(2, 3, 1,1, 1, 1,1);
    ddac:	e0bffe17 	ldw	r2,-8(fp)
    ddb0:	10801417 	ldw	r2,80(r2)
    ddb4:	10802c04 	addi	r2,r2,176
    ddb8:	e0bffd15 	stw	r2,-12(fp)
    ddbc:	e0bffd17 	ldw	r2,-12(fp)
    ddc0:	00c000c4 	movi	r3,3
    ddc4:	10c00015 	stw	r3,0(r2)
    ddc8:	e0bffd17 	ldw	r2,-12(fp)
    ddcc:	00c00044 	movi	r3,1
    ddd0:	10c00215 	stw	r3,8(r2)
    ddd4:	e0bffd17 	ldw	r2,-12(fp)
    ddd8:	00c00044 	movi	r3,1
    dddc:	10c00315 	stw	r3,12(r2)
    dde0:	e0bffd17 	ldw	r2,-12(fp)
    dde4:	00c00044 	movi	r3,1
    dde8:	10c00415 	stw	r3,16(r2)
    ddec:	e0bffd17 	ldw	r2,-12(fp)
    ddf0:	00c00044 	movi	r3,1
    ddf4:	10c00515 	stw	r3,20(r2)
    ddf8:	e0bffd17 	ldw	r2,-12(fp)
    ddfc:	00c00044 	movi	r3,1
    de00:	10c00615 	stw	r3,24(r2)
		SET_COMP(3, 4, 2,2, 0, 0,0);
    de04:	e0bffe17 	ldw	r2,-8(fp)
    de08:	10801417 	ldw	r2,80(r2)
    de0c:	10804204 	addi	r2,r2,264
    de10:	e0bffd15 	stw	r2,-12(fp)
    de14:	e0bffd17 	ldw	r2,-12(fp)
    de18:	00c00104 	movi	r3,4
    de1c:	10c00015 	stw	r3,0(r2)
    de20:	e0bffd17 	ldw	r2,-12(fp)
    de24:	00c00084 	movi	r3,2
    de28:	10c00215 	stw	r3,8(r2)
    de2c:	e0bffd17 	ldw	r2,-12(fp)
    de30:	00c00084 	movi	r3,2
    de34:	10c00315 	stw	r3,12(r2)
    de38:	e0bffd17 	ldw	r2,-12(fp)
    de3c:	10000415 	stw	zero,16(r2)
    de40:	e0bffd17 	ldw	r2,-12(fp)
    de44:	10000515 	stw	zero,20(r2)
    de48:	e0bffd17 	ldw	r2,-12(fp)
    de4c:	10000615 	stw	zero,24(r2)
		break;
    de50:	00004706 	br	df70 <jpeg_set_colorspace+0x6fc>
	case JCS_UNKNOWN:
		cinfo->num_components = cinfo->input_components;
    de54:	e0bffe17 	ldw	r2,-8(fp)
    de58:	10c00917 	ldw	r3,36(r2)
    de5c:	e0bffe17 	ldw	r2,-8(fp)
    de60:	10c01215 	stw	r3,72(r2)
		if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
    de64:	e0bffe17 	ldw	r2,-8(fp)
    de68:	10801217 	ldw	r2,72(r2)
    de6c:	0080040e 	bge	zero,r2,de80 <jpeg_set_colorspace+0x60c>
    de70:	e0bffe17 	ldw	r2,-8(fp)
    de74:	10801217 	ldw	r2,72(r2)
    de78:	108002d0 	cmplti	r2,r2,11
    de7c:	1000121e 	bne	r2,zero,dec8 <jpeg_set_colorspace+0x654>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
    de80:	e0bffe17 	ldw	r2,-8(fp)
    de84:	10800017 	ldw	r2,0(r2)
    de88:	00c006c4 	movi	r3,27
    de8c:	10c00515 	stw	r3,20(r2)
    de90:	e0bffe17 	ldw	r2,-8(fp)
    de94:	10800017 	ldw	r2,0(r2)
    de98:	e0fffe17 	ldw	r3,-8(fp)
    de9c:	18c01217 	ldw	r3,72(r3)
    dea0:	10c00615 	stw	r3,24(r2)
    dea4:	e0bffe17 	ldw	r2,-8(fp)
    dea8:	10800017 	ldw	r2,0(r2)
    deac:	00c00284 	movi	r3,10
    deb0:	10c00715 	stw	r3,28(r2)
    deb4:	e0bffe17 	ldw	r2,-8(fp)
    deb8:	10800017 	ldw	r2,0(r2)
    debc:	10800017 	ldw	r2,0(r2)
    dec0:	e13ffe17 	ldw	r4,-8(fp)
    dec4:	103ee83a 	callr	r2
			MAX_COMPONENTS);
		for (ci = 0; ci < cinfo->num_components; ci++) {
    dec8:	e03ffc15 	stw	zero,-16(fp)
    decc:	00001a06 	br	df38 <jpeg_set_colorspace+0x6c4>
			SET_COMP(ci, ci, 1,1, 0, 0,0);
    ded0:	e0bffe17 	ldw	r2,-8(fp)
    ded4:	14001417 	ldw	r16,80(r2)
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	1009883a 	mov	r4,r2
    dee0:	01401604 	movi	r5,88
    dee4:	002c1540 	call	2c154 <__mulsi3>
    dee8:	8085883a 	add	r2,r16,r2
    deec:	e0bffd15 	stw	r2,-12(fp)
    def0:	e0bffd17 	ldw	r2,-12(fp)
    def4:	e0fffc17 	ldw	r3,-16(fp)
    def8:	10c00015 	stw	r3,0(r2)
    defc:	e0bffd17 	ldw	r2,-12(fp)
    df00:	00c00044 	movi	r3,1
    df04:	10c00215 	stw	r3,8(r2)
    df08:	e0bffd17 	ldw	r2,-12(fp)
    df0c:	00c00044 	movi	r3,1
    df10:	10c00315 	stw	r3,12(r2)
    df14:	e0bffd17 	ldw	r2,-12(fp)
    df18:	10000415 	stw	zero,16(r2)
    df1c:	e0bffd17 	ldw	r2,-12(fp)
    df20:	10000515 	stw	zero,20(r2)
    df24:	e0bffd17 	ldw	r2,-12(fp)
    df28:	10000615 	stw	zero,24(r2)
	case JCS_UNKNOWN:
		cinfo->num_components = cinfo->input_components;
		if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
			MAX_COMPONENTS);
		for (ci = 0; ci < cinfo->num_components; ci++) {
    df2c:	e0bffc17 	ldw	r2,-16(fp)
    df30:	10800044 	addi	r2,r2,1
    df34:	e0bffc15 	stw	r2,-16(fp)
    df38:	e0bffe17 	ldw	r2,-8(fp)
    df3c:	10801217 	ldw	r2,72(r2)
    df40:	e0fffc17 	ldw	r3,-16(fp)
    df44:	18bfe216 	blt	r3,r2,ded0 <jpeg_set_colorspace+0x65c>
			SET_COMP(ci, ci, 1,1, 0, 0,0);
		}
		break;
    df48:	00000906 	br	df70 <jpeg_set_colorspace+0x6fc>
	default:
		ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    df4c:	e0bffe17 	ldw	r2,-8(fp)
    df50:	10800017 	ldw	r2,0(r2)
    df54:	00c002c4 	movi	r3,11
    df58:	10c00515 	stw	r3,20(r2)
    df5c:	e0bffe17 	ldw	r2,-8(fp)
    df60:	10800017 	ldw	r2,0(r2)
    df64:	10800017 	ldw	r2,0(r2)
    df68:	e13ffe17 	ldw	r4,-8(fp)
    df6c:	103ee83a 	callr	r2
	}
}
    df70:	e037883a 	mov	sp,fp
    df74:	dfc00217 	ldw	ra,8(sp)
    df78:	df000117 	ldw	fp,4(sp)
    df7c:	dc000017 	ldw	r16,0(sp)
    df80:	dec00304 	addi	sp,sp,12
    df84:	f800283a 	ret

0000df88 <fill_a_scan>:

LOCAL(jpeg_scan_info *)
	fill_a_scan (jpeg_scan_info * scanptr, int ci,
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for specified component */
{
    df88:	defffb04 	addi	sp,sp,-20
    df8c:	df000415 	stw	fp,16(sp)
    df90:	df000404 	addi	fp,sp,16
    df94:	e13ffc15 	stw	r4,-16(fp)
    df98:	e17ffd15 	stw	r5,-12(fp)
    df9c:	e1bffe15 	stw	r6,-8(fp)
    dfa0:	e1ffff15 	stw	r7,-4(fp)
	scanptr->comps_in_scan = 1;
    dfa4:	e0bffc17 	ldw	r2,-16(fp)
    dfa8:	00c00044 	movi	r3,1
    dfac:	10c00015 	stw	r3,0(r2)
	scanptr->component_index[0] = ci;
    dfb0:	e0bffc17 	ldw	r2,-16(fp)
    dfb4:	e0fffd17 	ldw	r3,-12(fp)
    dfb8:	10c00115 	stw	r3,4(r2)
	scanptr->Ss = Ss;
    dfbc:	e0bffc17 	ldw	r2,-16(fp)
    dfc0:	e0fffe17 	ldw	r3,-8(fp)
    dfc4:	10c00515 	stw	r3,20(r2)
	scanptr->Se = Se;
    dfc8:	e0bffc17 	ldw	r2,-16(fp)
    dfcc:	e0ffff17 	ldw	r3,-4(fp)
    dfd0:	10c00615 	stw	r3,24(r2)
	scanptr->Ah = Ah;
    dfd4:	e0bffc17 	ldw	r2,-16(fp)
    dfd8:	e0c00117 	ldw	r3,4(fp)
    dfdc:	10c00715 	stw	r3,28(r2)
	scanptr->Al = Al;
    dfe0:	e0bffc17 	ldw	r2,-16(fp)
    dfe4:	e0c00217 	ldw	r3,8(fp)
    dfe8:	10c00815 	stw	r3,32(r2)
	scanptr++;
    dfec:	e0bffc17 	ldw	r2,-16(fp)
    dff0:	10800904 	addi	r2,r2,36
    dff4:	e0bffc15 	stw	r2,-16(fp)
	return scanptr;
    dff8:	e0bffc17 	ldw	r2,-16(fp)
}
    dffc:	e037883a 	mov	sp,fp
    e000:	df000017 	ldw	fp,0(sp)
    e004:	dec00104 	addi	sp,sp,4
    e008:	f800283a 	ret

0000e00c <fill_scans>:

LOCAL(jpeg_scan_info *)
	fill_scans (jpeg_scan_info * scanptr, int ncomps,
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for each component */
{
    e00c:	defffa04 	addi	sp,sp,-24
    e010:	df000515 	stw	fp,20(sp)
    e014:	df000504 	addi	fp,sp,20
    e018:	e13ffc15 	stw	r4,-16(fp)
    e01c:	e17ffd15 	stw	r5,-12(fp)
    e020:	e1bffe15 	stw	r6,-8(fp)
    e024:	e1ffff15 	stw	r7,-4(fp)
	int ci;

	for (ci = 0; ci < ncomps; ci++) {
    e028:	e03ffb15 	stw	zero,-20(fp)
    e02c:	00001806 	br	e090 <fill_scans+0x84>
		scanptr->comps_in_scan = 1;
    e030:	e0bffc17 	ldw	r2,-16(fp)
    e034:	00c00044 	movi	r3,1
    e038:	10c00015 	stw	r3,0(r2)
		scanptr->component_index[0] = ci;
    e03c:	e0bffc17 	ldw	r2,-16(fp)
    e040:	e0fffb17 	ldw	r3,-20(fp)
    e044:	10c00115 	stw	r3,4(r2)
		scanptr->Ss = Ss;
    e048:	e0bffc17 	ldw	r2,-16(fp)
    e04c:	e0fffe17 	ldw	r3,-8(fp)
    e050:	10c00515 	stw	r3,20(r2)
		scanptr->Se = Se;
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	e0ffff17 	ldw	r3,-4(fp)
    e05c:	10c00615 	stw	r3,24(r2)
		scanptr->Ah = Ah;
    e060:	e0bffc17 	ldw	r2,-16(fp)
    e064:	e0c00117 	ldw	r3,4(fp)
    e068:	10c00715 	stw	r3,28(r2)
		scanptr->Al = Al;
    e06c:	e0bffc17 	ldw	r2,-16(fp)
    e070:	e0c00217 	ldw	r3,8(fp)
    e074:	10c00815 	stw	r3,32(r2)
		scanptr++;
    e078:	e0bffc17 	ldw	r2,-16(fp)
    e07c:	10800904 	addi	r2,r2,36
    e080:	e0bffc15 	stw	r2,-16(fp)
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for each component */
{
	int ci;

	for (ci = 0; ci < ncomps; ci++) {
    e084:	e0bffb17 	ldw	r2,-20(fp)
    e088:	10800044 	addi	r2,r2,1
    e08c:	e0bffb15 	stw	r2,-20(fp)
    e090:	e0fffb17 	ldw	r3,-20(fp)
    e094:	e0bffd17 	ldw	r2,-12(fp)
    e098:	18bfe516 	blt	r3,r2,e030 <fill_scans+0x24>
		scanptr->Se = Se;
		scanptr->Ah = Ah;
		scanptr->Al = Al;
		scanptr++;
	}
	return scanptr;
    e09c:	e0bffc17 	ldw	r2,-16(fp)
}
    e0a0:	e037883a 	mov	sp,fp
    e0a4:	df000017 	ldw	fp,0(sp)
    e0a8:	dec00104 	addi	sp,sp,4
    e0ac:	f800283a 	ret

0000e0b0 <fill_dc_scans>:

LOCAL(jpeg_scan_info *)
	fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
	/* Support routine: generate interleaved DC scan if possible, else N scans */
{
    e0b0:	defff704 	addi	sp,sp,-36
    e0b4:	dfc00815 	stw	ra,32(sp)
    e0b8:	df000715 	stw	fp,28(sp)
    e0bc:	df000704 	addi	fp,sp,28
    e0c0:	e13ffc15 	stw	r4,-16(fp)
    e0c4:	e17ffd15 	stw	r5,-12(fp)
    e0c8:	e1bffe15 	stw	r6,-8(fp)
    e0cc:	e1ffff15 	stw	r7,-4(fp)
	int ci;

	if (ncomps <= MAX_COMPS_IN_SCAN) {
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	10800148 	cmpgei	r2,r2,5
    e0d8:	1000231e 	bne	r2,zero,e168 <fill_dc_scans+0xb8>
		/* Single interleaved DC scan */
		scanptr->comps_in_scan = ncomps;
    e0dc:	e0bffc17 	ldw	r2,-16(fp)
    e0e0:	e0fffd17 	ldw	r3,-12(fp)
    e0e4:	10c00015 	stw	r3,0(r2)
		for (ci = 0; ci < ncomps; ci++)
    e0e8:	e03ffb15 	stw	zero,-20(fp)
    e0ec:	00000b06 	br	e11c <fill_dc_scans+0x6c>
			scanptr->component_index[ci] = ci;
    e0f0:	e0fffc17 	ldw	r3,-16(fp)
    e0f4:	e0bffb17 	ldw	r2,-20(fp)
    e0f8:	10800044 	addi	r2,r2,1
    e0fc:	1085883a 	add	r2,r2,r2
    e100:	1085883a 	add	r2,r2,r2
    e104:	1885883a 	add	r2,r3,r2
    e108:	e0fffb17 	ldw	r3,-20(fp)
    e10c:	10c00015 	stw	r3,0(r2)
	int ci;

	if (ncomps <= MAX_COMPS_IN_SCAN) {
		/* Single interleaved DC scan */
		scanptr->comps_in_scan = ncomps;
		for (ci = 0; ci < ncomps; ci++)
    e110:	e0bffb17 	ldw	r2,-20(fp)
    e114:	10800044 	addi	r2,r2,1
    e118:	e0bffb15 	stw	r2,-20(fp)
    e11c:	e0fffb17 	ldw	r3,-20(fp)
    e120:	e0bffd17 	ldw	r2,-12(fp)
    e124:	18bff216 	blt	r3,r2,e0f0 <fill_dc_scans+0x40>
			scanptr->component_index[ci] = ci;
		scanptr->Ss = scanptr->Se = 0;
    e128:	e0bffc17 	ldw	r2,-16(fp)
    e12c:	10000615 	stw	zero,24(r2)
    e130:	e0bffc17 	ldw	r2,-16(fp)
    e134:	10c00617 	ldw	r3,24(r2)
    e138:	e0bffc17 	ldw	r2,-16(fp)
    e13c:	10c00515 	stw	r3,20(r2)
		scanptr->Ah = Ah;
    e140:	e0bffc17 	ldw	r2,-16(fp)
    e144:	e0fffe17 	ldw	r3,-8(fp)
    e148:	10c00715 	stw	r3,28(r2)
		scanptr->Al = Al;
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	e0ffff17 	ldw	r3,-4(fp)
    e154:	10c00815 	stw	r3,32(r2)
		scanptr++;
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	10800904 	addi	r2,r2,36
    e160:	e0bffc15 	stw	r2,-16(fp)
    e164:	00000a06 	br	e190 <fill_dc_scans+0xe0>
	} else {
		/* Noninterleaved DC scan for each component */
		scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
    e168:	e0bffe17 	ldw	r2,-8(fp)
    e16c:	d8800015 	stw	r2,0(sp)
    e170:	e0bfff17 	ldw	r2,-4(fp)
    e174:	d8800115 	stw	r2,4(sp)
    e178:	e13ffc17 	ldw	r4,-16(fp)
    e17c:	e17ffd17 	ldw	r5,-12(fp)
    e180:	000d883a 	mov	r6,zero
    e184:	000f883a 	mov	r7,zero
    e188:	000e00c0 	call	e00c <fill_scans>
    e18c:	e0bffc15 	stw	r2,-16(fp)
	}
	return scanptr;
    e190:	e0bffc17 	ldw	r2,-16(fp)
}
    e194:	e037883a 	mov	sp,fp
    e198:	dfc00117 	ldw	ra,4(sp)
    e19c:	df000017 	ldw	fp,0(sp)
    e1a0:	dec00204 	addi	sp,sp,8
    e1a4:	f800283a 	ret

0000e1a8 <jpeg_simple_progression>:
* cinfo->num_components and cinfo->jpeg_color_space must be correct.
*/

GLOBAL(void)
	jpeg_simple_progression (j_compress_ptr cinfo)
{
    e1a8:	defff704 	addi	sp,sp,-36
    e1ac:	dfc00815 	stw	ra,32(sp)
    e1b0:	df000715 	stw	fp,28(sp)
    e1b4:	dc000615 	stw	r16,24(sp)
    e1b8:	df000604 	addi	fp,sp,24
    e1bc:	e13fff15 	stw	r4,-4(fp)
	int ncomps = cinfo->num_components;
    e1c0:	e0bfff17 	ldw	r2,-4(fp)
    e1c4:	10801217 	ldw	r2,72(r2)
    e1c8:	e0bffd15 	stw	r2,-12(fp)
	int nscans;
	jpeg_scan_info * scanptr;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
    e1cc:	e0bfff17 	ldw	r2,-4(fp)
    e1d0:	10800517 	ldw	r2,20(r2)
    e1d4:	10801920 	cmpeqi	r2,r2,100
    e1d8:	10000e1e 	bne	r2,zero,e214 <jpeg_simple_progression+0x6c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
    e1dc:	e0bfff17 	ldw	r2,-4(fp)
    e1e0:	10800017 	ldw	r2,0(r2)
    e1e4:	00c00544 	movi	r3,21
    e1e8:	10c00515 	stw	r3,20(r2)
    e1ec:	e0bfff17 	ldw	r2,-4(fp)
    e1f0:	10800017 	ldw	r2,0(r2)
    e1f4:	e0ffff17 	ldw	r3,-4(fp)
    e1f8:	18c00517 	ldw	r3,20(r3)
    e1fc:	10c00615 	stw	r3,24(r2)
    e200:	e0bfff17 	ldw	r2,-4(fp)
    e204:	10800017 	ldw	r2,0(r2)
    e208:	10800017 	ldw	r2,0(r2)
    e20c:	e13fff17 	ldw	r4,-4(fp)
    e210:	103ee83a 	callr	r2

	/* Figure space needed for script.  Calculation must match code below! */
	if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
    e214:	e0bffd17 	ldw	r2,-12(fp)
    e218:	108000d8 	cmpnei	r2,r2,3
    e21c:	1000071e 	bne	r2,zero,e23c <jpeg_simple_progression+0x94>
    e220:	e0bfff17 	ldw	r2,-4(fp)
    e224:	10801317 	ldw	r2,76(r2)
    e228:	108000d8 	cmpnei	r2,r2,3
    e22c:	1000031e 	bne	r2,zero,e23c <jpeg_simple_progression+0x94>
		/* Custom script for YCbCr color images. */
		nscans = 10;
    e230:	00800284 	movi	r2,10
    e234:	e0bffc15 	stw	r2,-16(fp)
    e238:	00000d06 	br	e270 <jpeg_simple_progression+0xc8>
	} else {
		/* All-purpose script for other color spaces. */
		if (ncomps > MAX_COMPS_IN_SCAN)
    e23c:	e0bffd17 	ldw	r2,-12(fp)
    e240:	10800150 	cmplti	r2,r2,5
    e244:	1000051e 	bne	r2,zero,e25c <jpeg_simple_progression+0xb4>
			nscans = 6 * ncomps;	/* 2 DC + 4 AC scans per component */
    e248:	e13ffd17 	ldw	r4,-12(fp)
    e24c:	01400184 	movi	r5,6
    e250:	002c1540 	call	2c154 <__mulsi3>
    e254:	e0bffc15 	stw	r2,-16(fp)
    e258:	00000506 	br	e270 <jpeg_simple_progression+0xc8>
		else
			nscans = 2 + 4 * ncomps;	/* 2 DC scans; 4 AC scans per component */
    e25c:	e0bffd17 	ldw	r2,-12(fp)
    e260:	1085883a 	add	r2,r2,r2
    e264:	1085883a 	add	r2,r2,r2
    e268:	10800084 	addi	r2,r2,2
    e26c:	e0bffc15 	stw	r2,-16(fp)
	* multiple compressions without changing the settings.  To avoid a memory
	* leak if jpeg_simple_progression is called repeatedly for the same JPEG
	* object, we try to re-use previously allocated space, and we allocate
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
    e270:	e0bfff17 	ldw	r2,-4(fp)
    e274:	10806517 	ldw	r2,404(r2)
    e278:	10000426 	beq	r2,zero,e28c <jpeg_simple_progression+0xe4>
    e27c:	e0bfff17 	ldw	r2,-4(fp)
    e280:	10c06617 	ldw	r3,408(r2)
    e284:	e0bffc17 	ldw	r2,-16(fp)
    e288:	1880140e 	bge	r3,r2,e2dc <jpeg_simple_progression+0x134>
		cinfo->script_space_size = MAX(nscans, 10);
    e28c:	e0bffc17 	ldw	r2,-16(fp)
    e290:	10c00288 	cmpgei	r3,r2,10
    e294:	1800011e 	bne	r3,zero,e29c <jpeg_simple_progression+0xf4>
    e298:	00800284 	movi	r2,10
    e29c:	e0ffff17 	ldw	r3,-4(fp)
    e2a0:	18806615 	stw	r2,408(r3)
		cinfo->script_space = (jpeg_scan_info *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
    e2a4:	e0bfff17 	ldw	r2,-4(fp)
    e2a8:	10800117 	ldw	r2,4(r2)
    e2ac:	14000017 	ldw	r16,0(r2)
			cinfo->script_space_size * SIZEOF(jpeg_scan_info));
    e2b0:	e0bfff17 	ldw	r2,-4(fp)
    e2b4:	10806617 	ldw	r2,408(r2)
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
		cinfo->script_space_size = MAX(nscans, 10);
		cinfo->script_space = (jpeg_scan_info *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
    e2b8:	1009883a 	mov	r4,r2
    e2bc:	01400904 	movi	r5,36
    e2c0:	002c1540 	call	2c154 <__mulsi3>
    e2c4:	e13fff17 	ldw	r4,-4(fp)
    e2c8:	000b883a 	mov	r5,zero
    e2cc:	100d883a 	mov	r6,r2
    e2d0:	803ee83a 	callr	r16
	* object, we try to re-use previously allocated space, and we allocate
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
		cinfo->script_space_size = MAX(nscans, 10);
		cinfo->script_space = (jpeg_scan_info *)
    e2d4:	e0ffff17 	ldw	r3,-4(fp)
    e2d8:	18806515 	stw	r2,404(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			cinfo->script_space_size * SIZEOF(jpeg_scan_info));
	}
	scanptr = cinfo->script_space;
    e2dc:	e0bfff17 	ldw	r2,-4(fp)
    e2e0:	10806517 	ldw	r2,404(r2)
    e2e4:	e0bffe15 	stw	r2,-8(fp)
	cinfo->scan_info = scanptr;
    e2e8:	e0bfff17 	ldw	r2,-4(fp)
    e2ec:	e0fffe17 	ldw	r3,-8(fp)
    e2f0:	10c03215 	stw	r3,200(r2)
	cinfo->num_scans = nscans;
    e2f4:	e0bfff17 	ldw	r2,-4(fp)
    e2f8:	e0fffc17 	ldw	r3,-16(fp)
    e2fc:	10c03115 	stw	r3,196(r2)

	if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
    e300:	e0bffd17 	ldw	r2,-12(fp)
    e304:	108000d8 	cmpnei	r2,r2,3
    e308:	10005a1e 	bne	r2,zero,e474 <jpeg_simple_progression+0x2cc>
    e30c:	e0bfff17 	ldw	r2,-4(fp)
    e310:	10801317 	ldw	r2,76(r2)
    e314:	108000d8 	cmpnei	r2,r2,3
    e318:	1000561e 	bne	r2,zero,e474 <jpeg_simple_progression+0x2cc>
		/* Custom script for YCbCr color images. */
		/* Initial DC scan */
		scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
    e31c:	e13ffe17 	ldw	r4,-8(fp)
    e320:	e17ffd17 	ldw	r5,-12(fp)
    e324:	000d883a 	mov	r6,zero
    e328:	01c00044 	movi	r7,1
    e32c:	000e0b00 	call	e0b0 <fill_dc_scans>
    e330:	e0bffe15 	stw	r2,-8(fp)
		/* Initial AC scan: get some luma data out in a hurry */
		scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
    e334:	d8000015 	stw	zero,0(sp)
    e338:	00800084 	movi	r2,2
    e33c:	d8800115 	stw	r2,4(sp)
    e340:	e13ffe17 	ldw	r4,-8(fp)
    e344:	000b883a 	mov	r5,zero
    e348:	01800044 	movi	r6,1
    e34c:	01c00144 	movi	r7,5
    e350:	000df880 	call	df88 <fill_a_scan>
    e354:	e0bffe15 	stw	r2,-8(fp)
		/* Chroma data is too small to be worth expending many scans on */
		scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
    e358:	d8000015 	stw	zero,0(sp)
    e35c:	00800044 	movi	r2,1
    e360:	d8800115 	stw	r2,4(sp)
    e364:	e13ffe17 	ldw	r4,-8(fp)
    e368:	01400084 	movi	r5,2
    e36c:	01800044 	movi	r6,1
    e370:	01c00fc4 	movi	r7,63
    e374:	000df880 	call	df88 <fill_a_scan>
    e378:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
    e37c:	d8000015 	stw	zero,0(sp)
    e380:	00800044 	movi	r2,1
    e384:	d8800115 	stw	r2,4(sp)
    e388:	e13ffe17 	ldw	r4,-8(fp)
    e38c:	01400044 	movi	r5,1
    e390:	01800044 	movi	r6,1
    e394:	01c00fc4 	movi	r7,63
    e398:	000df880 	call	df88 <fill_a_scan>
    e39c:	e0bffe15 	stw	r2,-8(fp)
		/* Complete spectral selection for luma AC */
		scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
    e3a0:	d8000015 	stw	zero,0(sp)
    e3a4:	00800084 	movi	r2,2
    e3a8:	d8800115 	stw	r2,4(sp)
    e3ac:	e13ffe17 	ldw	r4,-8(fp)
    e3b0:	000b883a 	mov	r5,zero
    e3b4:	01800184 	movi	r6,6
    e3b8:	01c00fc4 	movi	r7,63
    e3bc:	000df880 	call	df88 <fill_a_scan>
    e3c0:	e0bffe15 	stw	r2,-8(fp)
		/* Refine next bit of luma AC */
		scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
    e3c4:	00800084 	movi	r2,2
    e3c8:	d8800015 	stw	r2,0(sp)
    e3cc:	00800044 	movi	r2,1
    e3d0:	d8800115 	stw	r2,4(sp)
    e3d4:	e13ffe17 	ldw	r4,-8(fp)
    e3d8:	000b883a 	mov	r5,zero
    e3dc:	01800044 	movi	r6,1
    e3e0:	01c00fc4 	movi	r7,63
    e3e4:	000df880 	call	df88 <fill_a_scan>
    e3e8:	e0bffe15 	stw	r2,-8(fp)
		/* Finish DC successive approximation */
		scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
    e3ec:	e13ffe17 	ldw	r4,-8(fp)
    e3f0:	e17ffd17 	ldw	r5,-12(fp)
    e3f4:	01800044 	movi	r6,1
    e3f8:	000f883a 	mov	r7,zero
    e3fc:	000e0b00 	call	e0b0 <fill_dc_scans>
    e400:	e0bffe15 	stw	r2,-8(fp)
		/* Finish AC successive approximation */
		scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
    e404:	00800044 	movi	r2,1
    e408:	d8800015 	stw	r2,0(sp)
    e40c:	d8000115 	stw	zero,4(sp)
    e410:	e13ffe17 	ldw	r4,-8(fp)
    e414:	01400084 	movi	r5,2
    e418:	01800044 	movi	r6,1
    e41c:	01c00fc4 	movi	r7,63
    e420:	000df880 	call	df88 <fill_a_scan>
    e424:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
    e428:	00800044 	movi	r2,1
    e42c:	d8800015 	stw	r2,0(sp)
    e430:	d8000115 	stw	zero,4(sp)
    e434:	e13ffe17 	ldw	r4,-8(fp)
    e438:	01400044 	movi	r5,1
    e43c:	01800044 	movi	r6,1
    e440:	01c00fc4 	movi	r7,63
    e444:	000df880 	call	df88 <fill_a_scan>
    e448:	e0bffe15 	stw	r2,-8(fp)
		/* Luma bottom bit comes last since it's usually largest scan */
		scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
    e44c:	00800044 	movi	r2,1
    e450:	d8800015 	stw	r2,0(sp)
    e454:	d8000115 	stw	zero,4(sp)
    e458:	e13ffe17 	ldw	r4,-8(fp)
    e45c:	000b883a 	mov	r5,zero
    e460:	01800044 	movi	r6,1
    e464:	01c00fc4 	movi	r7,63
    e468:	000df880 	call	df88 <fill_a_scan>
    e46c:	e0bffe15 	stw	r2,-8(fp)
    e470:	00003106 	br	e538 <jpeg_simple_progression+0x390>
	} else {
		/* All-purpose script for other color spaces. */
		/* Successive approximation first pass */
		scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
    e474:	e13ffe17 	ldw	r4,-8(fp)
    e478:	e17ffd17 	ldw	r5,-12(fp)
    e47c:	000d883a 	mov	r6,zero
    e480:	01c00044 	movi	r7,1
    e484:	000e0b00 	call	e0b0 <fill_dc_scans>
    e488:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
    e48c:	d8000015 	stw	zero,0(sp)
    e490:	00800084 	movi	r2,2
    e494:	d8800115 	stw	r2,4(sp)
    e498:	e13ffe17 	ldw	r4,-8(fp)
    e49c:	e17ffd17 	ldw	r5,-12(fp)
    e4a0:	01800044 	movi	r6,1
    e4a4:	01c00144 	movi	r7,5
    e4a8:	000e00c0 	call	e00c <fill_scans>
    e4ac:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
    e4b0:	d8000015 	stw	zero,0(sp)
    e4b4:	00800084 	movi	r2,2
    e4b8:	d8800115 	stw	r2,4(sp)
    e4bc:	e13ffe17 	ldw	r4,-8(fp)
    e4c0:	e17ffd17 	ldw	r5,-12(fp)
    e4c4:	01800184 	movi	r6,6
    e4c8:	01c00fc4 	movi	r7,63
    e4cc:	000e00c0 	call	e00c <fill_scans>
    e4d0:	e0bffe15 	stw	r2,-8(fp)
		/* Successive approximation second pass */
		scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
    e4d4:	00800084 	movi	r2,2
    e4d8:	d8800015 	stw	r2,0(sp)
    e4dc:	00800044 	movi	r2,1
    e4e0:	d8800115 	stw	r2,4(sp)
    e4e4:	e13ffe17 	ldw	r4,-8(fp)
    e4e8:	e17ffd17 	ldw	r5,-12(fp)
    e4ec:	01800044 	movi	r6,1
    e4f0:	01c00fc4 	movi	r7,63
    e4f4:	000e00c0 	call	e00c <fill_scans>
    e4f8:	e0bffe15 	stw	r2,-8(fp)
		/* Successive approximation final pass */
		scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
    e4fc:	e13ffe17 	ldw	r4,-8(fp)
    e500:	e17ffd17 	ldw	r5,-12(fp)
    e504:	01800044 	movi	r6,1
    e508:	000f883a 	mov	r7,zero
    e50c:	000e0b00 	call	e0b0 <fill_dc_scans>
    e510:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
    e514:	00800044 	movi	r2,1
    e518:	d8800015 	stw	r2,0(sp)
    e51c:	d8000115 	stw	zero,4(sp)
    e520:	e13ffe17 	ldw	r4,-8(fp)
    e524:	e17ffd17 	ldw	r5,-12(fp)
    e528:	01800044 	movi	r6,1
    e52c:	01c00fc4 	movi	r7,63
    e530:	000e00c0 	call	e00c <fill_scans>
    e534:	e0bffe15 	stw	r2,-8(fp)
	}
}
    e538:	e037883a 	mov	sp,fp
    e53c:	dfc00217 	ldw	ra,8(sp)
    e540:	df000117 	ldw	fp,4(sp)
    e544:	dc000017 	ldw	r16,0(sp)
    e548:	dec00304 	addi	sp,sp,12
    e54c:	f800283a 	ret

0000e550 <start_pass_prep>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
    e550:	defffb04 	addi	sp,sp,-20
    e554:	dfc00415 	stw	ra,16(sp)
    e558:	df000315 	stw	fp,12(sp)
    e55c:	df000304 	addi	fp,sp,12
    e560:	e13ffe15 	stw	r4,-8(fp)
    e564:	e17fff15 	stw	r5,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
    e568:	e0bffe17 	ldw	r2,-8(fp)
    e56c:	10805e17 	ldw	r2,376(r2)
    e570:	e0bffd15 	stw	r2,-12(fp)

	if (pass_mode != JBUF_PASS_THRU)
    e574:	e0bfff17 	ldw	r2,-4(fp)
    e578:	10000926 	beq	r2,zero,e5a0 <start_pass_prep+0x50>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    e57c:	e0bffe17 	ldw	r2,-8(fp)
    e580:	10800017 	ldw	r2,0(r2)
    e584:	00c000c4 	movi	r3,3
    e588:	10c00515 	stw	r3,20(r2)
    e58c:	e0bffe17 	ldw	r2,-8(fp)
    e590:	10800017 	ldw	r2,0(r2)
    e594:	10800017 	ldw	r2,0(r2)
    e598:	e13ffe17 	ldw	r4,-8(fp)
    e59c:	103ee83a 	callr	r2

	/* Initialize total-height counter for detecting bottom of image */
	prep->rows_to_go = cinfo->image_height;
    e5a0:	e0bffe17 	ldw	r2,-8(fp)
    e5a4:	10c00817 	ldw	r3,32(r2)
    e5a8:	e0bffd17 	ldw	r2,-12(fp)
    e5ac:	10c00c15 	stw	r3,48(r2)
	/* Mark the conversion buffer empty */
	prep->next_buf_row = 0;
    e5b0:	e0bffd17 	ldw	r2,-12(fp)
    e5b4:	10000d15 	stw	zero,52(r2)
#ifdef CONTEXT_ROWS_SUPPORTED
	/* Preset additional state variables for context mode.
	* These aren't used in non-context mode, so we needn't test which mode.
	*/
	prep->this_row_group = 0;
    e5b8:	e0bffd17 	ldw	r2,-12(fp)
    e5bc:	10000e15 	stw	zero,56(r2)
	/* Set next_buf_stop to stop after two row groups have been read in. */
	prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
    e5c0:	e0bffe17 	ldw	r2,-8(fp)
    e5c4:	10803f17 	ldw	r2,252(r2)
    e5c8:	1085883a 	add	r2,r2,r2
    e5cc:	1007883a 	mov	r3,r2
    e5d0:	e0bffd17 	ldw	r2,-12(fp)
    e5d4:	10c00f15 	stw	r3,60(r2)
#endif
}
    e5d8:	e037883a 	mov	sp,fp
    e5dc:	dfc00117 	ldw	ra,4(sp)
    e5e0:	df000017 	ldw	fp,0(sp)
    e5e4:	dec00204 	addi	sp,sp,8
    e5e8:	f800283a 	ret

0000e5ec <expand_bottom_edge>:
*/

LOCAL(void)
	expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
	int input_rows, int output_rows)
{
    e5ec:	defff704 	addi	sp,sp,-36
    e5f0:	dfc00815 	stw	ra,32(sp)
    e5f4:	df000715 	stw	fp,28(sp)
    e5f8:	dc000615 	stw	r16,24(sp)
    e5fc:	df000604 	addi	fp,sp,24
    e600:	e13ffc15 	stw	r4,-16(fp)
    e604:	e17ffd15 	stw	r5,-12(fp)
    e608:	e1bffe15 	stw	r6,-8(fp)
    e60c:	e1ffff15 	stw	r7,-4(fp)
	register int row;

	for (row = input_rows; row < output_rows; row++) {
    e610:	e43ffe17 	ldw	r16,-8(fp)
    e614:	00000c06 	br	e648 <expand_bottom_edge+0x5c>
		jcopy_sample_rows(image_data, input_rows-1, image_data, row,
    e618:	e0bffe17 	ldw	r2,-8(fp)
    e61c:	10bfffc4 	addi	r2,r2,-1
    e620:	00c00044 	movi	r3,1
    e624:	d8c00015 	stw	r3,0(sp)
    e628:	e0fffd17 	ldw	r3,-12(fp)
    e62c:	d8c00115 	stw	r3,4(sp)
    e630:	e13ffc17 	ldw	r4,-16(fp)
    e634:	100b883a 	mov	r5,r2
    e638:	e1bffc17 	ldw	r6,-16(fp)
    e63c:	800f883a 	mov	r7,r16
    e640:	002b1240 	call	2b124 <jcopy_sample_rows>
	expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
	int input_rows, int output_rows)
{
	register int row;

	for (row = input_rows; row < output_rows; row++) {
    e644:	84000044 	addi	r16,r16,1
    e648:	e0bfff17 	ldw	r2,-4(fp)
    e64c:	80bff216 	blt	r16,r2,e618 <expand_bottom_edge+0x2c>
		jcopy_sample_rows(image_data, input_rows-1, image_data, row,
			1, num_cols);
	}
}
    e650:	e037883a 	mov	sp,fp
    e654:	dfc00217 	ldw	ra,8(sp)
    e658:	df000117 	ldw	fp,4(sp)
    e65c:	dc000017 	ldw	r16,0(sp)
    e660:	dec00304 	addi	sp,sp,12
    e664:	f800283a 	ret

0000e668 <pre_process_data>:
	pre_process_data (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail,
	JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
	JDIMENSION out_row_groups_avail)
{
    e668:	defff104 	addi	sp,sp,-60
    e66c:	dfc00e15 	stw	ra,56(sp)
    e670:	df000d15 	stw	fp,52(sp)
    e674:	dc800c15 	stw	r18,48(sp)
    e678:	dc400b15 	stw	r17,44(sp)
    e67c:	dc000a15 	stw	r16,40(sp)
    e680:	df000a04 	addi	fp,sp,40
    e684:	e13ffc15 	stw	r4,-16(fp)
    e688:	e17ffd15 	stw	r5,-12(fp)
    e68c:	e1bffe15 	stw	r6,-8(fp)
    e690:	e1ffff15 	stw	r7,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
    e694:	e0bffc17 	ldw	r2,-16(fp)
    e698:	10805e17 	ldw	r2,376(r2)
    e69c:	e0bff915 	stw	r2,-28(fp)
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
    e6a0:	0000b906 	br	e988 <pre_process_data+0x320>
		*out_row_group_ctr < out_row_groups_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
    e6a4:	e0bffe17 	ldw	r2,-8(fp)
    e6a8:	10800017 	ldw	r2,0(r2)
    e6ac:	e0ffff17 	ldw	r3,-4(fp)
    e6b0:	1885c83a 	sub	r2,r3,r2
    e6b4:	e0bffa15 	stw	r2,-24(fp)
			numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
    e6b8:	e0bffc17 	ldw	r2,-16(fp)
    e6bc:	10c03f17 	ldw	r3,252(r2)
    e6c0:	e0bff917 	ldw	r2,-28(fp)
    e6c4:	10800d17 	ldw	r2,52(r2)
    e6c8:	1885c83a 	sub	r2,r3,r2
    e6cc:	e0bffb15 	stw	r2,-20(fp)
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
    e6d0:	e0bffb17 	ldw	r2,-20(fp)
    e6d4:	e0fffa17 	ldw	r3,-24(fp)
    e6d8:	1880012e 	bgeu	r3,r2,e6e0 <pre_process_data+0x78>
    e6dc:	1805883a 	mov	r2,r3
    e6e0:	e0bffb15 	stw	r2,-20(fp)
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
    e6e4:	e0bffc17 	ldw	r2,-16(fp)
    e6e8:	10806117 	ldw	r2,388(r2)
    e6ec:	12000117 	ldw	r8,4(r2)
    e6f0:	e0bffe17 	ldw	r2,-8(fp)
    e6f4:	10800017 	ldw	r2,0(r2)
    e6f8:	1085883a 	add	r2,r2,r2
    e6fc:	1085883a 	add	r2,r2,r2
    e700:	e0fffd17 	ldw	r3,-12(fp)
    e704:	188b883a 	add	r5,r3,r2
				prep->color_buf,
    e708:	e0bff917 	ldw	r2,-28(fp)
    e70c:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->next_buf_row,
    e710:	e0bff917 	ldw	r2,-28(fp)
    e714:	10800d17 	ldw	r2,52(r2)
		*out_row_group_ctr < out_row_groups_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
			numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
    e718:	e13ffb17 	ldw	r4,-20(fp)
    e71c:	d9000015 	stw	r4,0(sp)
    e720:	e13ffc17 	ldw	r4,-16(fp)
    e724:	180d883a 	mov	r6,r3
    e728:	100f883a 	mov	r7,r2
    e72c:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			*in_row_ctr += numrows;
    e730:	e0bffe17 	ldw	r2,-8(fp)
    e734:	10c00017 	ldw	r3,0(r2)
    e738:	e0bffb17 	ldw	r2,-20(fp)
    e73c:	1887883a 	add	r3,r3,r2
    e740:	e0bffe17 	ldw	r2,-8(fp)
    e744:	10c00015 	stw	r3,0(r2)
			prep->next_buf_row += numrows;
    e748:	e0bff917 	ldw	r2,-28(fp)
    e74c:	10c00d17 	ldw	r3,52(r2)
    e750:	e0bffb17 	ldw	r2,-20(fp)
    e754:	1887883a 	add	r3,r3,r2
    e758:	e0bff917 	ldw	r2,-28(fp)
    e75c:	10c00d15 	stw	r3,52(r2)
			prep->rows_to_go -= numrows;
    e760:	e0bff917 	ldw	r2,-28(fp)
    e764:	10c00c17 	ldw	r3,48(r2)
    e768:	e0bffb17 	ldw	r2,-20(fp)
    e76c:	1887c83a 	sub	r3,r3,r2
    e770:	e0bff917 	ldw	r2,-28(fp)
    e774:	10c00c15 	stw	r3,48(r2)
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
    e778:	e0bff917 	ldw	r2,-28(fp)
    e77c:	10800c17 	ldw	r2,48(r2)
    e780:	1000221e 	bne	r2,zero,e80c <pre_process_data+0x1a4>
				prep->next_buf_row < cinfo->max_v_samp_factor) {
    e784:	e0bff917 	ldw	r2,-28(fp)
    e788:	10c00d17 	ldw	r3,52(r2)
    e78c:	e0bffc17 	ldw	r2,-16(fp)
    e790:	10803f17 	ldw	r2,252(r2)
				numrows);
			*in_row_ctr += numrows;
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
    e794:	18801d0e 	bge	r3,r2,e80c <pre_process_data+0x1a4>
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
    e798:	e03ff715 	stw	zero,-36(fp)
    e79c:	00001306 	br	e7ec <pre_process_data+0x184>
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    e7a0:	e0fff917 	ldw	r3,-28(fp)
    e7a4:	e0bff717 	ldw	r2,-36(fp)
    e7a8:	10800084 	addi	r2,r2,2
    e7ac:	1085883a 	add	r2,r2,r2
    e7b0:	1085883a 	add	r2,r2,r2
    e7b4:	1885883a 	add	r2,r3,r2
    e7b8:	11000017 	ldw	r4,0(r2)
    e7bc:	e0bffc17 	ldw	r2,-16(fp)
    e7c0:	11400717 	ldw	r5,28(r2)
							prep->next_buf_row, cinfo->max_v_samp_factor);
    e7c4:	e0bff917 	ldw	r2,-28(fp)
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    e7c8:	10c00d17 	ldw	r3,52(r2)
							prep->next_buf_row, cinfo->max_v_samp_factor);
    e7cc:	e0bffc17 	ldw	r2,-16(fp)
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    e7d0:	10803f17 	ldw	r2,252(r2)
    e7d4:	180d883a 	mov	r6,r3
    e7d8:	100f883a 	mov	r7,r2
    e7dc:	000e5ec0 	call	e5ec <expand_bottom_edge>
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
    e7e0:	e0bff717 	ldw	r2,-36(fp)
    e7e4:	10800044 	addi	r2,r2,1
    e7e8:	e0bff715 	stw	r2,-36(fp)
    e7ec:	e0bffc17 	ldw	r2,-16(fp)
    e7f0:	10801217 	ldw	r2,72(r2)
    e7f4:	e0fff717 	ldw	r3,-36(fp)
    e7f8:	18bfe916 	blt	r3,r2,e7a0 <pre_process_data+0x138>
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
							prep->next_buf_row, cinfo->max_v_samp_factor);
					}
					prep->next_buf_row = cinfo->max_v_samp_factor;
    e7fc:	e0bffc17 	ldw	r2,-16(fp)
    e800:	10c03f17 	ldw	r3,252(r2)
    e804:	e0bff917 	ldw	r2,-28(fp)
    e808:	10c00d15 	stw	r3,52(r2)
			}
			/* If we've filled the conversion buffer, empty it. */
			if (prep->next_buf_row == cinfo->max_v_samp_factor) {
    e80c:	e0bff917 	ldw	r2,-28(fp)
    e810:	10c00d17 	ldw	r3,52(r2)
    e814:	e0bffc17 	ldw	r2,-16(fp)
    e818:	10803f17 	ldw	r2,252(r2)
    e81c:	1880141e 	bne	r3,r2,e870 <pre_process_data+0x208>
				(*cinfo->downsample->downsample) (cinfo,
    e820:	e0bffc17 	ldw	r2,-16(fp)
    e824:	10806217 	ldw	r2,392(r2)
    e828:	10c00117 	ldw	r3,4(r2)
					prep->color_buf, (JDIMENSION) 0,
    e82c:	e0bff917 	ldw	r2,-28(fp)
    e830:	10800204 	addi	r2,r2,8
					}
					prep->next_buf_row = cinfo->max_v_samp_factor;
			}
			/* If we've filled the conversion buffer, empty it. */
			if (prep->next_buf_row == cinfo->max_v_samp_factor) {
				(*cinfo->downsample->downsample) (cinfo,
    e834:	e1000617 	ldw	r4,24(fp)
    e838:	21000017 	ldw	r4,0(r4)
    e83c:	d9000015 	stw	r4,0(sp)
    e840:	e13ffc17 	ldw	r4,-16(fp)
    e844:	100b883a 	mov	r5,r2
    e848:	000d883a 	mov	r6,zero
    e84c:	e1c00517 	ldw	r7,20(fp)
    e850:	183ee83a 	callr	r3
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
				prep->next_buf_row = 0;
    e854:	e0bff917 	ldw	r2,-28(fp)
    e858:	10000d15 	stw	zero,52(r2)
				(*out_row_group_ctr)++;
    e85c:	e0800617 	ldw	r2,24(fp)
    e860:	10800017 	ldw	r2,0(r2)
    e864:	10c00044 	addi	r3,r2,1
    e868:	e0800617 	ldw	r2,24(fp)
    e86c:	10c00015 	stw	r3,0(r2)
			}
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
    e870:	e0bff917 	ldw	r2,-28(fp)
    e874:	10800c17 	ldw	r2,48(r2)
    e878:	1000431e 	bne	r2,zero,e988 <pre_process_data+0x320>
				*out_row_group_ctr < out_row_groups_avail) {
    e87c:	e0800617 	ldw	r2,24(fp)
    e880:	10c00017 	ldw	r3,0(r2)
				(*out_row_group_ctr)++;
			}
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
    e884:	e0800717 	ldw	r2,28(fp)
    e888:	18803f2e 	bgeu	r3,r2,e988 <pre_process_data+0x320>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    e88c:	e03ff715 	stw	zero,-36(fp)
    e890:	e0bffc17 	ldw	r2,-16(fp)
    e894:	10801417 	ldw	r2,80(r2)
    e898:	e0bff815 	stw	r2,-32(fp)
    e89c:	00003206 	br	e968 <pre_process_data+0x300>
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
    e8a0:	e0bff817 	ldw	r2,-32(fp)
    e8a4:	10c00317 	ldw	r3,12(r2)
    e8a8:	e0bff817 	ldw	r2,-32(fp)
    e8ac:	10800a17 	ldw	r2,40(r2)
    e8b0:	1809883a 	mov	r4,r3
    e8b4:	100b883a 	mov	r5,r2
    e8b8:	002c1540 	call	2c154 <__mulsi3>
    e8bc:	1007883a 	mov	r3,r2
								cinfo->min_DCT_v_scaled_size;
    e8c0:	e0bffc17 	ldw	r2,-16(fp)
    e8c4:	10804117 	ldw	r2,260(r2)
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
    e8c8:	1809883a 	mov	r4,r3
    e8cc:	100b883a 	mov	r5,r2
    e8d0:	002c0980 	call	2c098 <__divsi3>
    e8d4:	e0bffb15 	stw	r2,-20(fp)
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
    e8d8:	e0bff717 	ldw	r2,-36(fp)
    e8dc:	1085883a 	add	r2,r2,r2
    e8e0:	1085883a 	add	r2,r2,r2
    e8e4:	e0c00517 	ldw	r3,20(fp)
    e8e8:	1885883a 	add	r2,r3,r2
    e8ec:	14800017 	ldw	r18,0(r2)
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
    e8f0:	e0bff817 	ldw	r2,-32(fp)
    e8f4:	10c00717 	ldw	r3,28(r2)
    e8f8:	e0bff817 	ldw	r2,-32(fp)
    e8fc:	10800917 	ldw	r2,36(r2)
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
    e900:	1809883a 	mov	r4,r3
    e904:	100b883a 	mov	r5,r2
    e908:	002c1540 	call	2c154 <__mulsi3>
    e90c:	1023883a 	mov	r17,r2
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
    e910:	e0800617 	ldw	r2,24(fp)
    e914:	10c00017 	ldw	r3,0(r2)
    e918:	e0bffb17 	ldw	r2,-20(fp)
    e91c:	1809883a 	mov	r4,r3
    e920:	100b883a 	mov	r5,r2
    e924:	002c1540 	call	2c154 <__mulsi3>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
    e928:	1021883a 	mov	r16,r2
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
								(int) (out_row_groups_avail * numrows));
    e92c:	e0bffb17 	ldw	r2,-20(fp)
    e930:	1009883a 	mov	r4,r2
    e934:	e1400717 	ldw	r5,28(fp)
    e938:	002c1540 	call	2c154 <__mulsi3>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
    e93c:	9009883a 	mov	r4,r18
    e940:	880b883a 	mov	r5,r17
    e944:	800d883a 	mov	r6,r16
    e948:	100f883a 	mov	r7,r2
    e94c:	000e5ec0 	call	e5ec <expand_bottom_edge>
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
    e950:	e0bff717 	ldw	r2,-36(fp)
    e954:	10800044 	addi	r2,r2,1
    e958:	e0bff715 	stw	r2,-36(fp)
    e95c:	e0bff817 	ldw	r2,-32(fp)
    e960:	10801604 	addi	r2,r2,88
    e964:	e0bff815 	stw	r2,-32(fp)
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10801217 	ldw	r2,72(r2)
    e970:	e0fff717 	ldw	r3,-36(fp)
    e974:	18bfca16 	blt	r3,r2,e8a0 <pre_process_data+0x238>
							expand_bottom_edge(output_buf[ci],
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
								(int) (out_row_groups_avail * numrows));
					}
					*out_row_group_ctr = out_row_groups_avail;
    e978:	e0800617 	ldw	r2,24(fp)
    e97c:	e0c00717 	ldw	r3,28(fp)
    e980:	10c00015 	stw	r3,0(r2)
					break;			/* can exit outer loop without test */
    e984:	00000806 	br	e9a8 <pre_process_data+0x340>
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
    e988:	e0bffe17 	ldw	r2,-8(fp)
    e98c:	10c00017 	ldw	r3,0(r2)
    e990:	e0bfff17 	ldw	r2,-4(fp)
    e994:	1880042e 	bgeu	r3,r2,e9a8 <pre_process_data+0x340>
		*out_row_group_ctr < out_row_groups_avail) {
    e998:	e0800617 	ldw	r2,24(fp)
    e99c:	10c00017 	ldw	r3,0(r2)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
    e9a0:	e0800717 	ldw	r2,28(fp)
    e9a4:	18bf3f36 	bltu	r3,r2,e6a4 <pre_process_data+0x3c>
					}
					*out_row_group_ctr = out_row_groups_avail;
					break;			/* can exit outer loop without test */
			}
	}
}
    e9a8:	e037883a 	mov	sp,fp
    e9ac:	dfc00417 	ldw	ra,16(sp)
    e9b0:	df000317 	ldw	fp,12(sp)
    e9b4:	dc800217 	ldw	r18,8(sp)
    e9b8:	dc400117 	ldw	r17,4(sp)
    e9bc:	dc000017 	ldw	r16,0(sp)
    e9c0:	dec00504 	addi	sp,sp,20
    e9c4:	f800283a 	ret

0000e9c8 <pre_process_context>:
	pre_process_context (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail,
	JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
	JDIMENSION out_row_groups_avail)
{
    e9c8:	defff204 	addi	sp,sp,-56
    e9cc:	dfc00d15 	stw	ra,52(sp)
    e9d0:	df000c15 	stw	fp,48(sp)
    e9d4:	df000c04 	addi	fp,sp,48
    e9d8:	e13ffc15 	stw	r4,-16(fp)
    e9dc:	e17ffd15 	stw	r5,-12(fp)
    e9e0:	e1bffe15 	stw	r6,-8(fp)
    e9e4:	e1ffff15 	stw	r7,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	10805e17 	ldw	r2,376(r2)
    e9f0:	e0bff815 	stw	r2,-32(fp)
	int numrows, ci;
	int buf_height = cinfo->max_v_samp_factor * 3;
    e9f4:	e0bffc17 	ldw	r2,-16(fp)
    e9f8:	10c03f17 	ldw	r3,252(r2)
    e9fc:	1805883a 	mov	r2,r3
    ea00:	1085883a 	add	r2,r2,r2
    ea04:	10c5883a 	add	r2,r2,r3
    ea08:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION inrows;

	while (*out_row_group_ctr < out_row_groups_avail) {
    ea0c:	0000c306 	br	ed1c <pre_process_context+0x354>
		if (*in_row_ctr < in_rows_avail) {
    ea10:	e0bffe17 	ldw	r2,-8(fp)
    ea14:	10c00017 	ldw	r3,0(r2)
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	1880672e 	bgeu	r3,r2,ebbc <pre_process_context+0x1f4>
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
    ea20:	e0bffe17 	ldw	r2,-8(fp)
    ea24:	10800017 	ldw	r2,0(r2)
    ea28:	e0ffff17 	ldw	r3,-4(fp)
    ea2c:	1885c83a 	sub	r2,r3,r2
    ea30:	e0bffa15 	stw	r2,-24(fp)
			numrows = prep->next_buf_stop - prep->next_buf_row;
    ea34:	e0bff817 	ldw	r2,-32(fp)
    ea38:	10c00f17 	ldw	r3,60(r2)
    ea3c:	e0bff817 	ldw	r2,-32(fp)
    ea40:	10800d17 	ldw	r2,52(r2)
    ea44:	1885c83a 	sub	r2,r3,r2
    ea48:	e0bffb15 	stw	r2,-20(fp)
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
    ea4c:	e0bffb17 	ldw	r2,-20(fp)
    ea50:	e0fffa17 	ldw	r3,-24(fp)
    ea54:	1880012e 	bgeu	r3,r2,ea5c <pre_process_context+0x94>
    ea58:	1805883a 	mov	r2,r3
    ea5c:	e0bffb15 	stw	r2,-20(fp)
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
    ea60:	e0bffc17 	ldw	r2,-16(fp)
    ea64:	10806117 	ldw	r2,388(r2)
    ea68:	12000117 	ldw	r8,4(r2)
    ea6c:	e0bffe17 	ldw	r2,-8(fp)
    ea70:	10800017 	ldw	r2,0(r2)
    ea74:	1085883a 	add	r2,r2,r2
    ea78:	1085883a 	add	r2,r2,r2
    ea7c:	e0fffd17 	ldw	r3,-12(fp)
    ea80:	188b883a 	add	r5,r3,r2
				prep->color_buf,
    ea84:	e0bff817 	ldw	r2,-32(fp)
    ea88:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->next_buf_row,
    ea8c:	e0bff817 	ldw	r2,-32(fp)
    ea90:	10800d17 	ldw	r2,52(r2)
		if (*in_row_ctr < in_rows_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
			numrows = prep->next_buf_stop - prep->next_buf_row;
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
    ea94:	e13ffb17 	ldw	r4,-20(fp)
    ea98:	d9000015 	stw	r4,0(sp)
    ea9c:	e13ffc17 	ldw	r4,-16(fp)
    eaa0:	180d883a 	mov	r6,r3
    eaa4:	100f883a 	mov	r7,r2
    eaa8:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
    eaac:	e0bff817 	ldw	r2,-32(fp)
    eab0:	10c00c17 	ldw	r3,48(r2)
    eab4:	e0bffc17 	ldw	r2,-16(fp)
    eab8:	10800817 	ldw	r2,32(r2)
    eabc:	18802c1e 	bne	r3,r2,eb70 <pre_process_context+0x1a8>
				for (ci = 0; ci < cinfo->num_components; ci++) {
    eac0:	e03ff615 	stw	zero,-40(fp)
    eac4:	00002606 	br	eb60 <pre_process_context+0x198>
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
    eac8:	00800044 	movi	r2,1
    eacc:	e0bff715 	stw	r2,-36(fp)
    ead0:	00001c06 	br	eb44 <pre_process_context+0x17c>
						jcopy_sample_rows(prep->color_buf[ci], 0,
    ead4:	e0fff817 	ldw	r3,-32(fp)
    ead8:	e0bff617 	ldw	r2,-40(fp)
    eadc:	10800084 	addi	r2,r2,2
    eae0:	1085883a 	add	r2,r2,r2
    eae4:	1085883a 	add	r2,r2,r2
    eae8:	1885883a 	add	r2,r3,r2
    eaec:	11000017 	ldw	r4,0(r2)
							prep->color_buf[ci], -row,
    eaf0:	e0fff817 	ldw	r3,-32(fp)
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
						jcopy_sample_rows(prep->color_buf[ci], 0,
    eaf4:	e0bff617 	ldw	r2,-40(fp)
    eaf8:	10800084 	addi	r2,r2,2
    eafc:	1085883a 	add	r2,r2,r2
    eb00:	1085883a 	add	r2,r2,r2
    eb04:	1885883a 	add	r2,r3,r2
    eb08:	10c00017 	ldw	r3,0(r2)
    eb0c:	e0bff717 	ldw	r2,-36(fp)
    eb10:	0085c83a 	sub	r2,zero,r2
							prep->color_buf[ci], -row,
							1, cinfo->image_width);
    eb14:	e17ffc17 	ldw	r5,-16(fp)
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
						jcopy_sample_rows(prep->color_buf[ci], 0,
    eb18:	29400717 	ldw	r5,28(r5)
    eb1c:	01800044 	movi	r6,1
    eb20:	d9800015 	stw	r6,0(sp)
    eb24:	d9400115 	stw	r5,4(sp)
    eb28:	000b883a 	mov	r5,zero
    eb2c:	180d883a 	mov	r6,r3
    eb30:	100f883a 	mov	r7,r2
    eb34:	002b1240 	call	2b124 <jcopy_sample_rows>
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
    eb38:	e0bff717 	ldw	r2,-36(fp)
    eb3c:	10800044 	addi	r2,r2,1
    eb40:	e0bff715 	stw	r2,-36(fp)
    eb44:	e0bffc17 	ldw	r2,-16(fp)
    eb48:	10c03f17 	ldw	r3,252(r2)
    eb4c:	e0bff717 	ldw	r2,-36(fp)
    eb50:	18bfe00e 	bge	r3,r2,ead4 <pre_process_context+0x10c>
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
    eb54:	e0bff617 	ldw	r2,-40(fp)
    eb58:	10800044 	addi	r2,r2,1
    eb5c:	e0bff615 	stw	r2,-40(fp)
    eb60:	e0bffc17 	ldw	r2,-16(fp)
    eb64:	10801217 	ldw	r2,72(r2)
    eb68:	e0fff617 	ldw	r3,-40(fp)
    eb6c:	18bfd616 	blt	r3,r2,eac8 <pre_process_context+0x100>
							prep->color_buf[ci], -row,
							1, cinfo->image_width);
					}
				}
			}
			*in_row_ctr += numrows;
    eb70:	e0bffe17 	ldw	r2,-8(fp)
    eb74:	10c00017 	ldw	r3,0(r2)
    eb78:	e0bffb17 	ldw	r2,-20(fp)
    eb7c:	1887883a 	add	r3,r3,r2
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	10c00015 	stw	r3,0(r2)
			prep->next_buf_row += numrows;
    eb88:	e0bff817 	ldw	r2,-32(fp)
    eb8c:	10c00d17 	ldw	r3,52(r2)
    eb90:	e0bffb17 	ldw	r2,-20(fp)
    eb94:	1887883a 	add	r3,r3,r2
    eb98:	e0bff817 	ldw	r2,-32(fp)
    eb9c:	10c00d15 	stw	r3,52(r2)
			prep->rows_to_go -= numrows;
    eba0:	e0bff817 	ldw	r2,-32(fp)
    eba4:	10c00c17 	ldw	r3,48(r2)
    eba8:	e0bffb17 	ldw	r2,-20(fp)
    ebac:	1887c83a 	sub	r3,r3,r2
    ebb0:	e0bff817 	ldw	r2,-32(fp)
    ebb4:	10c00c15 	stw	r3,48(r2)
    ebb8:	00002506 	br	ec50 <pre_process_context+0x288>
		} else {
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
    ebbc:	e0bff817 	ldw	r2,-32(fp)
    ebc0:	10800c17 	ldw	r2,48(r2)
    ebc4:	10005a1e 	bne	r2,zero,ed30 <pre_process_context+0x368>
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
    ebc8:	e0bff817 	ldw	r2,-32(fp)
    ebcc:	10c00d17 	ldw	r3,52(r2)
    ebd0:	e0bff817 	ldw	r2,-32(fp)
    ebd4:	10800f17 	ldw	r2,60(r2)
    ebd8:	18801d0e 	bge	r3,r2,ec50 <pre_process_context+0x288>
				for (ci = 0; ci < cinfo->num_components; ci++) {
    ebdc:	e03ff615 	stw	zero,-40(fp)
    ebe0:	00001306 	br	ec30 <pre_process_context+0x268>
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    ebe4:	e0fff817 	ldw	r3,-32(fp)
    ebe8:	e0bff617 	ldw	r2,-40(fp)
    ebec:	10800084 	addi	r2,r2,2
    ebf0:	1085883a 	add	r2,r2,r2
    ebf4:	1085883a 	add	r2,r2,r2
    ebf8:	1885883a 	add	r2,r3,r2
    ebfc:	11000017 	ldw	r4,0(r2)
    ec00:	e0bffc17 	ldw	r2,-16(fp)
    ec04:	11400717 	ldw	r5,28(r2)
						prep->next_buf_row, prep->next_buf_stop);
    ec08:	e0bff817 	ldw	r2,-32(fp)
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    ec0c:	10c00d17 	ldw	r3,52(r2)
						prep->next_buf_row, prep->next_buf_stop);
    ec10:	e0bff817 	ldw	r2,-32(fp)
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
    ec14:	10800f17 	ldw	r2,60(r2)
    ec18:	180d883a 	mov	r6,r3
    ec1c:	100f883a 	mov	r7,r2
    ec20:	000e5ec0 	call	e5ec <expand_bottom_edge>
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
    ec24:	e0bff617 	ldw	r2,-40(fp)
    ec28:	10800044 	addi	r2,r2,1
    ec2c:	e0bff615 	stw	r2,-40(fp)
    ec30:	e0bffc17 	ldw	r2,-16(fp)
    ec34:	10801217 	ldw	r2,72(r2)
    ec38:	e0fff617 	ldw	r3,-40(fp)
    ec3c:	18bfe916 	blt	r3,r2,ebe4 <pre_process_context+0x21c>
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
						prep->next_buf_row, prep->next_buf_stop);
				}
				prep->next_buf_row = prep->next_buf_stop;
    ec40:	e0bff817 	ldw	r2,-32(fp)
    ec44:	10c00f17 	ldw	r3,60(r2)
    ec48:	e0bff817 	ldw	r2,-32(fp)
    ec4c:	10c00d15 	stw	r3,52(r2)
			}
		}
		/* If we've gotten enough data, downsample a row group. */
		if (prep->next_buf_row == prep->next_buf_stop) {
    ec50:	e0bff817 	ldw	r2,-32(fp)
    ec54:	10c00d17 	ldw	r3,52(r2)
    ec58:	e0bff817 	ldw	r2,-32(fp)
    ec5c:	10800f17 	ldw	r2,60(r2)
    ec60:	18802e1e 	bne	r3,r2,ed1c <pre_process_context+0x354>
			(*cinfo->downsample->downsample) (cinfo,
    ec64:	e0bffc17 	ldw	r2,-16(fp)
    ec68:	10806217 	ldw	r2,392(r2)
    ec6c:	12000117 	ldw	r8,4(r2)
				prep->color_buf,
    ec70:	e0bff817 	ldw	r2,-32(fp)
    ec74:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->this_row_group,
    ec78:	e0bff817 	ldw	r2,-32(fp)
    ec7c:	10800e17 	ldw	r2,56(r2)
				prep->next_buf_row = prep->next_buf_stop;
			}
		}
		/* If we've gotten enough data, downsample a row group. */
		if (prep->next_buf_row == prep->next_buf_stop) {
			(*cinfo->downsample->downsample) (cinfo,
    ec80:	e1000317 	ldw	r4,12(fp)
    ec84:	21000017 	ldw	r4,0(r4)
    ec88:	d9000015 	stw	r4,0(sp)
    ec8c:	e13ffc17 	ldw	r4,-16(fp)
    ec90:	180b883a 	mov	r5,r3
    ec94:	100d883a 	mov	r6,r2
    ec98:	e1c00217 	ldw	r7,8(fp)
    ec9c:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->this_row_group,
				output_buf, *out_row_group_ctr);
			(*out_row_group_ctr)++;
    eca0:	e0800317 	ldw	r2,12(fp)
    eca4:	10800017 	ldw	r2,0(r2)
    eca8:	10c00044 	addi	r3,r2,1
    ecac:	e0800317 	ldw	r2,12(fp)
    ecb0:	10c00015 	stw	r3,0(r2)
			/* Advance pointers with wraparound as necessary. */
			prep->this_row_group += cinfo->max_v_samp_factor;
    ecb4:	e0bff817 	ldw	r2,-32(fp)
    ecb8:	10c00e17 	ldw	r3,56(r2)
    ecbc:	e0bffc17 	ldw	r2,-16(fp)
    ecc0:	10803f17 	ldw	r2,252(r2)
    ecc4:	1887883a 	add	r3,r3,r2
    ecc8:	e0bff817 	ldw	r2,-32(fp)
    eccc:	10c00e15 	stw	r3,56(r2)
			if (prep->this_row_group >= buf_height)
    ecd0:	e0bff817 	ldw	r2,-32(fp)
    ecd4:	10c00e17 	ldw	r3,56(r2)
    ecd8:	e0bff917 	ldw	r2,-28(fp)
    ecdc:	18800216 	blt	r3,r2,ece8 <pre_process_context+0x320>
				prep->this_row_group = 0;
    ece0:	e0bff817 	ldw	r2,-32(fp)
    ece4:	10000e15 	stw	zero,56(r2)
			if (prep->next_buf_row >= buf_height)
    ece8:	e0bff817 	ldw	r2,-32(fp)
    ecec:	10c00d17 	ldw	r3,52(r2)
    ecf0:	e0bff917 	ldw	r2,-28(fp)
    ecf4:	18800216 	blt	r3,r2,ed00 <pre_process_context+0x338>
				prep->next_buf_row = 0;
    ecf8:	e0bff817 	ldw	r2,-32(fp)
    ecfc:	10000d15 	stw	zero,52(r2)
			prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
    ed00:	e0bff817 	ldw	r2,-32(fp)
    ed04:	10c00d17 	ldw	r3,52(r2)
    ed08:	e0bffc17 	ldw	r2,-16(fp)
    ed0c:	10803f17 	ldw	r2,252(r2)
    ed10:	1887883a 	add	r3,r3,r2
    ed14:	e0bff817 	ldw	r2,-32(fp)
    ed18:	10c00f15 	stw	r3,60(r2)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	int buf_height = cinfo->max_v_samp_factor * 3;
	JDIMENSION inrows;

	while (*out_row_group_ctr < out_row_groups_avail) {
    ed1c:	e0800317 	ldw	r2,12(fp)
    ed20:	10c00017 	ldw	r3,0(r2)
    ed24:	e0800417 	ldw	r2,16(fp)
    ed28:	18bf3936 	bltu	r3,r2,ea10 <pre_process_context+0x48>
    ed2c:	00000106 	br	ed34 <pre_process_context+0x36c>
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
		} else {
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
				break;
    ed30:	0001883a 	nop
			if (prep->next_buf_row >= buf_height)
				prep->next_buf_row = 0;
			prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
		}
	}
}
    ed34:	e037883a 	mov	sp,fp
    ed38:	dfc00117 	ldw	ra,4(sp)
    ed3c:	df000017 	ldw	fp,0(sp)
    ed40:	dec00204 	addi	sp,sp,8
    ed44:	f800283a 	ret

0000ed48 <create_context_buffer>:
* Create the wrapped-around downsampling input buffer needed for context mode.
*/

LOCAL(void)
	create_context_buffer (j_compress_ptr cinfo)
{
    ed48:	defff504 	addi	sp,sp,-44
    ed4c:	dfc00a15 	stw	ra,40(sp)
    ed50:	df000915 	stw	fp,36(sp)
    ed54:	dc000815 	stw	r16,32(sp)
    ed58:	df000804 	addi	fp,sp,32
    ed5c:	e13fff15 	stw	r4,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
    ed60:	e0bfff17 	ldw	r2,-4(fp)
    ed64:	10805e17 	ldw	r2,376(r2)
    ed68:	e0bffc15 	stw	r2,-16(fp)
	int rgroup_height = cinfo->max_v_samp_factor;
    ed6c:	e0bfff17 	ldw	r2,-4(fp)
    ed70:	10803f17 	ldw	r2,252(r2)
    ed74:	e0bffd15 	stw	r2,-12(fp)

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    ed78:	e0bfff17 	ldw	r2,-4(fp)
    ed7c:	10800117 	ldw	r2,4(r2)
    ed80:	14000017 	ldw	r16,0(r2)
		(cinfo->num_components * 5 * rgroup_height) *
    ed84:	e0bfff17 	ldw	r2,-4(fp)
    ed88:	10801217 	ldw	r2,72(r2)

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    ed8c:	1009883a 	mov	r4,r2
    ed90:	01400504 	movi	r5,20
    ed94:	002c1540 	call	2c154 <__mulsi3>
    ed98:	1009883a 	mov	r4,r2
    ed9c:	e17ffd17 	ldw	r5,-12(fp)
    eda0:	002c1540 	call	2c154 <__mulsi3>
	JSAMPARRAY true_buffer, fake_buffer;

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
    eda4:	e13fff17 	ldw	r4,-4(fp)
    eda8:	01400044 	movi	r5,1
    edac:	100d883a 	mov	r6,r2
    edb0:	803ee83a 	callr	r16
    edb4:	e0bffb15 	stw	r2,-20(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    edb8:	e03ff815 	stw	zero,-32(fp)
    edbc:	e0bfff17 	ldw	r2,-4(fp)
    edc0:	10801417 	ldw	r2,80(r2)
    edc4:	e0bffa15 	stw	r2,-24(fp)
    edc8:	00006e06 	br	ef84 <create_context_buffer+0x23c>
		ci++, compptr++) {
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
    edcc:	e0bfff17 	ldw	r2,-4(fp)
    edd0:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
    edd4:	14000217 	ldw	r16,8(r2)
				(JDIMENSION) (((long) compptr->width_in_blocks *
    edd8:	e0bffa17 	ldw	r2,-24(fp)
    eddc:	10800717 	ldw	r2,28(r2)
    ede0:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size *
    ede4:	e0bfff17 	ldw	r2,-4(fp)
    ede8:	10804017 	ldw	r2,256(r2)
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
				(JDIMENSION) (((long) compptr->width_in_blocks *
    edec:	1809883a 	mov	r4,r3
    edf0:	100b883a 	mov	r5,r2
    edf4:	002c1540 	call	2c154 <__mulsi3>
    edf8:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
    edfc:	e0bfff17 	ldw	r2,-4(fp)
    ee00:	10803e17 	ldw	r2,248(r2)
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
    ee04:	1809883a 	mov	r4,r3
    ee08:	100b883a 	mov	r5,r2
    ee0c:	002c1540 	call	2c154 <__mulsi3>
    ee10:	1007883a 	mov	r3,r2
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
    ee14:	e0bffa17 	ldw	r2,-24(fp)
    ee18:	10800217 	ldw	r2,8(r2)
    ee1c:	1809883a 	mov	r4,r3
    ee20:	100b883a 	mov	r5,r2
    ee24:	002c0980 	call	2c098 <__divsi3>
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
    ee28:	100d883a 	mov	r6,r2
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
				(JDIMENSION) (3 * rgroup_height));
    ee2c:	e0fffd17 	ldw	r3,-12(fp)
    ee30:	1805883a 	mov	r2,r3
    ee34:	1085883a 	add	r2,r2,r2
    ee38:	10c5883a 	add	r2,r2,r3
		ci++, compptr++) {
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
    ee3c:	e13fff17 	ldw	r4,-4(fp)
    ee40:	01400044 	movi	r5,1
    ee44:	100f883a 	mov	r7,r2
    ee48:	803ee83a 	callr	r16
    ee4c:	e0bffe15 	stw	r2,-8(fp)
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
				(JDIMENSION) (3 * rgroup_height));
			/* Copy true buffer row pointers into the middle of the fake row array */
			MEMCOPY(fake_buffer + rgroup_height, true_buffer,
    ee50:	e0bffd17 	ldw	r2,-12(fp)
    ee54:	1085883a 	add	r2,r2,r2
    ee58:	1085883a 	add	r2,r2,r2
    ee5c:	e0fffb17 	ldw	r3,-20(fp)
    ee60:	18a1883a 	add	r16,r3,r2
    ee64:	e13ffd17 	ldw	r4,-12(fp)
    ee68:	01400304 	movi	r5,12
    ee6c:	002c1540 	call	2c154 <__mulsi3>
    ee70:	8009883a 	mov	r4,r16
    ee74:	e17ffe17 	ldw	r5,-8(fp)
    ee78:	100d883a 	mov	r6,r2
    ee7c:	002eaec0 	call	2eaec <memcpy>
				3 * rgroup_height * SIZEOF(JSAMPROW));
			/* Fill in the above and below wraparound pointers */
			for (i = 0; i < rgroup_height; i++) {
    ee80:	e03ff915 	stw	zero,-28(fp)
    ee84:	00002406 	br	ef18 <create_context_buffer+0x1d0>
				fake_buffer[i] = true_buffer[2 * rgroup_height + i];
    ee88:	e0bff917 	ldw	r2,-28(fp)
    ee8c:	1085883a 	add	r2,r2,r2
    ee90:	1085883a 	add	r2,r2,r2
    ee94:	e0fffb17 	ldw	r3,-20(fp)
    ee98:	1887883a 	add	r3,r3,r2
    ee9c:	e0bffd17 	ldw	r2,-12(fp)
    eea0:	1085883a 	add	r2,r2,r2
    eea4:	1009883a 	mov	r4,r2
    eea8:	e0bff917 	ldw	r2,-28(fp)
    eeac:	2085883a 	add	r2,r4,r2
    eeb0:	1085883a 	add	r2,r2,r2
    eeb4:	1085883a 	add	r2,r2,r2
    eeb8:	e13ffe17 	ldw	r4,-8(fp)
    eebc:	2085883a 	add	r2,r4,r2
    eec0:	10800017 	ldw	r2,0(r2)
    eec4:	18800015 	stw	r2,0(r3)
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
    eec8:	e0bffd17 	ldw	r2,-12(fp)
    eecc:	1085883a 	add	r2,r2,r2
    eed0:	1085883a 	add	r2,r2,r2
    eed4:	1007883a 	mov	r3,r2
    eed8:	e0bff917 	ldw	r2,-28(fp)
    eedc:	1885883a 	add	r2,r3,r2
    eee0:	1085883a 	add	r2,r2,r2
    eee4:	1085883a 	add	r2,r2,r2
    eee8:	e0fffb17 	ldw	r3,-20(fp)
    eeec:	1887883a 	add	r3,r3,r2
    eef0:	e0bff917 	ldw	r2,-28(fp)
    eef4:	1085883a 	add	r2,r2,r2
    eef8:	1085883a 	add	r2,r2,r2
    eefc:	e13ffe17 	ldw	r4,-8(fp)
    ef00:	2085883a 	add	r2,r4,r2
    ef04:	10800017 	ldw	r2,0(r2)
    ef08:	18800015 	stw	r2,0(r3)
				(JDIMENSION) (3 * rgroup_height));
			/* Copy true buffer row pointers into the middle of the fake row array */
			MEMCOPY(fake_buffer + rgroup_height, true_buffer,
				3 * rgroup_height * SIZEOF(JSAMPROW));
			/* Fill in the above and below wraparound pointers */
			for (i = 0; i < rgroup_height; i++) {
    ef0c:	e0bff917 	ldw	r2,-28(fp)
    ef10:	10800044 	addi	r2,r2,1
    ef14:	e0bff915 	stw	r2,-28(fp)
    ef18:	e0fff917 	ldw	r3,-28(fp)
    ef1c:	e0bffd17 	ldw	r2,-12(fp)
    ef20:	18bfd916 	blt	r3,r2,ee88 <create_context_buffer+0x140>
				fake_buffer[i] = true_buffer[2 * rgroup_height + i];
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
			}
			prep->color_buf[ci] = fake_buffer + rgroup_height;
    ef24:	e0bffd17 	ldw	r2,-12(fp)
    ef28:	1085883a 	add	r2,r2,r2
    ef2c:	1085883a 	add	r2,r2,r2
    ef30:	e0fffb17 	ldw	r3,-20(fp)
    ef34:	1887883a 	add	r3,r3,r2
    ef38:	e13ffc17 	ldw	r4,-16(fp)
    ef3c:	e0bff817 	ldw	r2,-32(fp)
    ef40:	10800084 	addi	r2,r2,2
    ef44:	1085883a 	add	r2,r2,r2
    ef48:	1085883a 	add	r2,r2,r2
    ef4c:	2085883a 	add	r2,r4,r2
    ef50:	10c00015 	stw	r3,0(r2)
			fake_buffer += 5 * rgroup_height; /* point to space for next component */
    ef54:	e13ffd17 	ldw	r4,-12(fp)
    ef58:	01400504 	movi	r5,20
    ef5c:	002c1540 	call	2c154 <__mulsi3>
    ef60:	e0fffb17 	ldw	r3,-20(fp)
    ef64:	1885883a 	add	r2,r3,r2
    ef68:	e0bffb15 	stw	r2,-20(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    ef6c:	e0bff817 	ldw	r2,-32(fp)
    ef70:	10800044 	addi	r2,r2,1
    ef74:	e0bff815 	stw	r2,-32(fp)
    ef78:	e0bffa17 	ldw	r2,-24(fp)
    ef7c:	10801604 	addi	r2,r2,88
    ef80:	e0bffa15 	stw	r2,-24(fp)
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    ef84:	e0bfff17 	ldw	r2,-4(fp)
    ef88:	10801217 	ldw	r2,72(r2)
    ef8c:	e0fff817 	ldw	r3,-32(fp)
    ef90:	18bf8e16 	blt	r3,r2,edcc <create_context_buffer+0x84>
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
			}
			prep->color_buf[ci] = fake_buffer + rgroup_height;
			fake_buffer += 5 * rgroup_height; /* point to space for next component */
	}
}
    ef94:	e037883a 	mov	sp,fp
    ef98:	dfc00217 	ldw	ra,8(sp)
    ef9c:	df000117 	ldw	fp,4(sp)
    efa0:	dc000017 	ldw	r16,0(sp)
    efa4:	dec00304 	addi	sp,sp,12
    efa8:	f800283a 	ret

0000efac <jinit_c_prep_controller>:
* Initialize preprocessing controller.
*/

GLOBAL(void)
	jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
    efac:	defff804 	addi	sp,sp,-32
    efb0:	dfc00715 	stw	ra,28(sp)
    efb4:	df000615 	stw	fp,24(sp)
    efb8:	dc000515 	stw	r16,20(sp)
    efbc:	df000504 	addi	fp,sp,20
    efc0:	e13ffe15 	stw	r4,-8(fp)
    efc4:	2805883a 	mov	r2,r5
    efc8:	e0bfff05 	stb	r2,-4(fp)
	my_prep_ptr prep;
	int ci;
	jpeg_component_info * compptr;

	if (need_full_buffer)		/* safety check */
    efcc:	e0bfff03 	ldbu	r2,-4(fp)
    efd0:	10000926 	beq	r2,zero,eff8 <jinit_c_prep_controller+0x4c>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    efd4:	e0bffe17 	ldw	r2,-8(fp)
    efd8:	10800017 	ldw	r2,0(r2)
    efdc:	00c000c4 	movi	r3,3
    efe0:	10c00515 	stw	r3,20(r2)
    efe4:	e0bffe17 	ldw	r2,-8(fp)
    efe8:	10800017 	ldw	r2,0(r2)
    efec:	10800017 	ldw	r2,0(r2)
    eff0:	e13ffe17 	ldw	r4,-8(fp)
    eff4:	103ee83a 	callr	r2

	prep = (my_prep_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    eff8:	e0bffe17 	ldw	r2,-8(fp)
    effc:	10800117 	ldw	r2,4(r2)
    f000:	10800017 	ldw	r2,0(r2)
	jpeg_component_info * compptr;

	if (need_full_buffer)		/* safety check */
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

	prep = (my_prep_ptr)
    f004:	e13ffe17 	ldw	r4,-8(fp)
    f008:	01400044 	movi	r5,1
    f00c:	01801004 	movi	r6,64
    f010:	103ee83a 	callr	r2
    f014:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_prep_controller));
	cinfo->prep = (struct jpeg_c_prep_controller *) prep;
    f018:	e0bffe17 	ldw	r2,-8(fp)
    f01c:	e0fffd17 	ldw	r3,-12(fp)
    f020:	10c05e15 	stw	r3,376(r2)
	prep->pub.start_pass = start_pass_prep;
    f024:	e0bffd17 	ldw	r2,-12(fp)
    f028:	00c00074 	movhi	r3,1
    f02c:	18f95404 	addi	r3,r3,-6832
    f030:	10c00015 	stw	r3,0(r2)

	/* Allocate the color conversion buffer.
	* We make the buffer wide enough to allow the downsampler to edge-expand
	* horizontally within the buffer, if it so chooses.
	*/
	if (cinfo->downsample->need_context_rows) {
    f034:	e0bffe17 	ldw	r2,-8(fp)
    f038:	10806217 	ldw	r2,392(r2)
    f03c:	10800203 	ldbu	r2,8(r2)
    f040:	10803fcc 	andi	r2,r2,255
    f044:	10000726 	beq	r2,zero,f064 <jinit_c_prep_controller+0xb8>
		/* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
		prep->pub.pre_process_data = pre_process_context;
    f048:	e0bffd17 	ldw	r2,-12(fp)
    f04c:	00c00074 	movhi	r3,1
    f050:	18fa7204 	addi	r3,r3,-5688
    f054:	10c00115 	stw	r3,4(r2)
		create_context_buffer(cinfo);
    f058:	e13ffe17 	ldw	r4,-8(fp)
    f05c:	000ed480 	call	ed48 <create_context_buffer>
    f060:	00003a06 	br	f14c <jinit_c_prep_controller+0x1a0>
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
    f064:	e0bffd17 	ldw	r2,-12(fp)
    f068:	00c00074 	movhi	r3,1
    f06c:	18f99a04 	addi	r3,r3,-6552
    f070:	10c00115 	stw	r3,4(r2)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    f074:	e03ffb15 	stw	zero,-20(fp)
    f078:	e0bffe17 	ldw	r2,-8(fp)
    f07c:	10801417 	ldw	r2,80(r2)
    f080:	e0bffc15 	stw	r2,-16(fp)
    f084:	00002d06 	br	f13c <jinit_c_prep_controller+0x190>
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
    f088:	e0bffe17 	ldw	r2,-8(fp)
    f08c:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    f090:	14000217 	ldw	r16,8(r2)
					(JDIMENSION) (((long) compptr->width_in_blocks *
    f094:	e0bffc17 	ldw	r2,-16(fp)
    f098:	10800717 	ldw	r2,28(r2)
    f09c:	1007883a 	mov	r3,r2
					cinfo->min_DCT_h_scaled_size *
    f0a0:	e0bffe17 	ldw	r2,-8(fp)
    f0a4:	10804017 	ldw	r2,256(r2)
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					(JDIMENSION) (((long) compptr->width_in_blocks *
    f0a8:	1809883a 	mov	r4,r3
    f0ac:	100b883a 	mov	r5,r2
    f0b0:	002c1540 	call	2c154 <__mulsi3>
    f0b4:	1007883a 	mov	r3,r2
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
    f0b8:	e0bffe17 	ldw	r2,-8(fp)
    f0bc:	10803e17 	ldw	r2,248(r2)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					(JDIMENSION) (((long) compptr->width_in_blocks *
					cinfo->min_DCT_h_scaled_size *
    f0c0:	1809883a 	mov	r4,r3
    f0c4:	100b883a 	mov	r5,r2
    f0c8:	002c1540 	call	2c154 <__mulsi3>
    f0cc:	1007883a 	mov	r3,r2
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
    f0d0:	e0bffc17 	ldw	r2,-16(fp)
    f0d4:	10800217 	ldw	r2,8(r2)
    f0d8:	1809883a 	mov	r4,r3
    f0dc:	100b883a 	mov	r5,r2
    f0e0:	002c0980 	call	2c098 <__divsi3>
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    f0e4:	1007883a 	mov	r3,r2
					(JDIMENSION) (((long) compptr->width_in_blocks *
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
					(JDIMENSION) cinfo->max_v_samp_factor);
    f0e8:	e0bffe17 	ldw	r2,-8(fp)
    f0ec:	10803f17 	ldw	r2,252(r2)
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
    f0f0:	e13ffe17 	ldw	r4,-8(fp)
    f0f4:	01400044 	movi	r5,1
    f0f8:	180d883a 	mov	r6,r3
    f0fc:	100f883a 	mov	r7,r2
    f100:	803ee83a 	callr	r16
    f104:	1007883a 	mov	r3,r2
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
    f108:	e13ffd17 	ldw	r4,-12(fp)
    f10c:	e0bffb17 	ldw	r2,-20(fp)
    f110:	10800084 	addi	r2,r2,2
    f114:	1085883a 	add	r2,r2,r2
    f118:	1085883a 	add	r2,r2,r2
    f11c:	2085883a 	add	r2,r4,r2
    f120:	10c00015 	stw	r3,0(r2)
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
    f124:	e0bffb17 	ldw	r2,-20(fp)
    f128:	10800044 	addi	r2,r2,1
    f12c:	e0bffb15 	stw	r2,-20(fp)
    f130:	e0bffc17 	ldw	r2,-16(fp)
    f134:	10801604 	addi	r2,r2,88
    f138:	e0bffc15 	stw	r2,-16(fp)
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    f13c:	e0bffe17 	ldw	r2,-8(fp)
    f140:	10801217 	ldw	r2,72(r2)
    f144:	e0fffb17 	ldw	r3,-20(fp)
    f148:	18bfcf16 	blt	r3,r2,f088 <jinit_c_prep_controller+0xdc>
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
					(JDIMENSION) cinfo->max_v_samp_factor);
		}
	}
}
    f14c:	e037883a 	mov	sp,fp
    f150:	dfc00217 	ldw	ra,8(sp)
    f154:	df000117 	ldw	fp,4(sp)
    f158:	dc000017 	ldw	r16,0(sp)
    f15c:	dec00304 	addi	sp,sp,12
    f160:	f800283a 	ret

0000f164 <start_pass_downsample>:
* Initialize for a downsampling pass.
*/

METHODDEF(void)
	start_pass_downsample (j_compress_ptr cinfo)
{
    f164:	defffe04 	addi	sp,sp,-8
    f168:	df000115 	stw	fp,4(sp)
    f16c:	df000104 	addi	fp,sp,4
    f170:	e13fff15 	stw	r4,-4(fp)
	/* no work for now */
}
    f174:	e037883a 	mov	sp,fp
    f178:	df000017 	ldw	fp,0(sp)
    f17c:	dec00104 	addi	sp,sp,4
    f180:	f800283a 	ret

0000f184 <expand_right_edge>:
*/

LOCAL(void)
	expand_right_edge (JSAMPARRAY image_data, int num_rows,
	JDIMENSION input_cols, JDIMENSION output_cols)
{
    f184:	defff604 	addi	sp,sp,-40
    f188:	df000915 	stw	fp,36(sp)
    f18c:	dc800815 	stw	r18,32(sp)
    f190:	dc400715 	stw	r17,28(sp)
    f194:	dc000615 	stw	r16,24(sp)
    f198:	df000604 	addi	fp,sp,24
    f19c:	e13ffc15 	stw	r4,-16(fp)
    f1a0:	e17ffd15 	stw	r5,-12(fp)
    f1a4:	e1bffe15 	stw	r6,-8(fp)
    f1a8:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW ptr;
	register JSAMPLE pixval;
	register int count;
	int row;
	int numcols = (int) (output_cols - input_cols);
    f1ac:	e0ffff17 	ldw	r3,-4(fp)
    f1b0:	e0bffe17 	ldw	r2,-8(fp)
    f1b4:	1885c83a 	sub	r2,r3,r2
    f1b8:	e0bffb15 	stw	r2,-20(fp)

	if (numcols > 0) {
    f1bc:	e0bffb17 	ldw	r2,-20(fp)
    f1c0:	0080170e 	bge	zero,r2,f220 <expand_right_edge+0x9c>
		for (row = 0; row < num_rows; row++) {
    f1c4:	e03ffa15 	stw	zero,-24(fp)
    f1c8:	00001206 	br	f214 <expand_right_edge+0x90>
			ptr = image_data[row] + input_cols;
    f1cc:	e0bffa17 	ldw	r2,-24(fp)
    f1d0:	1085883a 	add	r2,r2,r2
    f1d4:	1085883a 	add	r2,r2,r2
    f1d8:	e0fffc17 	ldw	r3,-16(fp)
    f1dc:	1885883a 	add	r2,r3,r2
    f1e0:	10c00017 	ldw	r3,0(r2)
    f1e4:	e0bffe17 	ldw	r2,-8(fp)
    f1e8:	18a1883a 	add	r16,r3,r2
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
    f1ec:	84bfffc3 	ldbu	r18,-1(r16)
			for (count = numcols; count > 0; count--)
    f1f0:	e47ffb17 	ldw	r17,-20(fp)
    f1f4:	00000306 	br	f204 <expand_right_edge+0x80>
				*ptr++ = pixval;
    f1f8:	84800005 	stb	r18,0(r16)
    f1fc:	84000044 	addi	r16,r16,1

	if (numcols > 0) {
		for (row = 0; row < num_rows; row++) {
			ptr = image_data[row] + input_cols;
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
			for (count = numcols; count > 0; count--)
    f200:	8c7fffc4 	addi	r17,r17,-1
    f204:	047ffc16 	blt	zero,r17,f1f8 <expand_right_edge+0x74>
	register int count;
	int row;
	int numcols = (int) (output_cols - input_cols);

	if (numcols > 0) {
		for (row = 0; row < num_rows; row++) {
    f208:	e0bffa17 	ldw	r2,-24(fp)
    f20c:	10800044 	addi	r2,r2,1
    f210:	e0bffa15 	stw	r2,-24(fp)
    f214:	e0fffa17 	ldw	r3,-24(fp)
    f218:	e0bffd17 	ldw	r2,-12(fp)
    f21c:	18bfeb16 	blt	r3,r2,f1cc <expand_right_edge+0x48>
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
			for (count = numcols; count > 0; count--)
				*ptr++ = pixval;
		}
	}
}
    f220:	e037883a 	mov	sp,fp
    f224:	df000317 	ldw	fp,12(sp)
    f228:	dc800217 	ldw	r18,8(sp)
    f22c:	dc400117 	ldw	r17,4(sp)
    f230:	dc000017 	ldw	r16,0(sp)
    f234:	dec00404 	addi	sp,sp,16
    f238:	f800283a 	ret

0000f23c <sep_downsample>:

METHODDEF(void)
	sep_downsample (j_compress_ptr cinfo,
	JSAMPIMAGE input_buf, JDIMENSION in_row_index,
	JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
    f23c:	defff404 	addi	sp,sp,-48
    f240:	dfc00b15 	stw	ra,44(sp)
    f244:	df000a15 	stw	fp,40(sp)
    f248:	dc000915 	stw	r16,36(sp)
    f24c:	df000904 	addi	fp,sp,36
    f250:	e13ffc15 	stw	r4,-16(fp)
    f254:	e17ffd15 	stw	r5,-12(fp)
    f258:	e1bffe15 	stw	r6,-8(fp)
    f25c:	e1ffff15 	stw	r7,-4(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
    f260:	e0bffc17 	ldw	r2,-16(fp)
    f264:	10806217 	ldw	r2,392(r2)
    f268:	e0bff915 	stw	r2,-28(fp)
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    f26c:	e03ff715 	stw	zero,-36(fp)
    f270:	e0bffc17 	ldw	r2,-16(fp)
    f274:	10801417 	ldw	r2,80(r2)
    f278:	e0bff815 	stw	r2,-32(fp)
    f27c:	00003106 	br	f344 <sep_downsample+0x108>
		ci++, compptr++) {
			in_ptr = input_buf[ci] + in_row_index;
    f280:	e0bff717 	ldw	r2,-36(fp)
    f284:	1085883a 	add	r2,r2,r2
    f288:	1085883a 	add	r2,r2,r2
    f28c:	e0fffd17 	ldw	r3,-12(fp)
    f290:	1885883a 	add	r2,r3,r2
    f294:	10c00017 	ldw	r3,0(r2)
    f298:	e0bffe17 	ldw	r2,-8(fp)
    f29c:	1085883a 	add	r2,r2,r2
    f2a0:	1085883a 	add	r2,r2,r2
    f2a4:	1885883a 	add	r2,r3,r2
    f2a8:	e0bffa15 	stw	r2,-24(fp)
			out_ptr = output_buf[ci] +
    f2ac:	e0bff717 	ldw	r2,-36(fp)
    f2b0:	1085883a 	add	r2,r2,r2
    f2b4:	1085883a 	add	r2,r2,r2
    f2b8:	e0ffff17 	ldw	r3,-4(fp)
    f2bc:	1885883a 	add	r2,r3,r2
    f2c0:	14000017 	ldw	r16,0(r2)
				(out_row_group_index * downsample->rowgroup_height[ci]);
    f2c4:	e0fff917 	ldw	r3,-28(fp)
    f2c8:	e0bff717 	ldw	r2,-36(fp)
    f2cc:	10800344 	addi	r2,r2,13
    f2d0:	1085883a 	add	r2,r2,r2
    f2d4:	1085883a 	add	r2,r2,r2
    f2d8:	1885883a 	add	r2,r3,r2
    f2dc:	10800017 	ldw	r2,0(r2)
    f2e0:	1009883a 	mov	r4,r2
    f2e4:	e1400317 	ldw	r5,12(fp)
    f2e8:	002c1540 	call	2c154 <__mulsi3>
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			in_ptr = input_buf[ci] + in_row_index;
			out_ptr = output_buf[ci] +
    f2ec:	1085883a 	add	r2,r2,r2
    f2f0:	1085883a 	add	r2,r2,r2
    f2f4:	8085883a 	add	r2,r16,r2
    f2f8:	e0bffb15 	stw	r2,-20(fp)
				(out_row_group_index * downsample->rowgroup_height[ci]);
			(*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
    f2fc:	e0fff917 	ldw	r3,-28(fp)
    f300:	e0bff717 	ldw	r2,-36(fp)
    f304:	108000c4 	addi	r2,r2,3
    f308:	1085883a 	add	r2,r2,r2
    f30c:	1085883a 	add	r2,r2,r2
    f310:	1885883a 	add	r2,r3,r2
    f314:	10800017 	ldw	r2,0(r2)
    f318:	e13ffc17 	ldw	r4,-16(fp)
    f31c:	e17ff817 	ldw	r5,-32(fp)
    f320:	e1bffa17 	ldw	r6,-24(fp)
    f324:	e1fffb17 	ldw	r7,-20(fp)
    f328:	103ee83a 	callr	r2
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
    f32c:	e0bff717 	ldw	r2,-36(fp)
    f330:	10800044 	addi	r2,r2,1
    f334:	e0bff715 	stw	r2,-36(fp)
    f338:	e0bff817 	ldw	r2,-32(fp)
    f33c:	10801604 	addi	r2,r2,88
    f340:	e0bff815 	stw	r2,-32(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
    f344:	e0bffc17 	ldw	r2,-16(fp)
    f348:	10801217 	ldw	r2,72(r2)
    f34c:	e0fff717 	ldw	r3,-36(fp)
    f350:	18bfcb16 	blt	r3,r2,f280 <sep_downsample+0x44>
			in_ptr = input_buf[ci] + in_row_index;
			out_ptr = output_buf[ci] +
				(out_row_group_index * downsample->rowgroup_height[ci]);
			(*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
	}
}
    f354:	e037883a 	mov	sp,fp
    f358:	dfc00217 	ldw	ra,8(sp)
    f35c:	df000117 	ldw	fp,4(sp)
    f360:	dc000017 	ldw	r16,0(sp)
    f364:	dec00304 	addi	sp,sp,12
    f368:	f800283a 	ret

0000f36c <int_downsample>:
*/

METHODDEF(void)
	int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    f36c:	deffe904 	addi	sp,sp,-92
    f370:	dfc01615 	stw	ra,88(sp)
    f374:	df001515 	stw	fp,84(sp)
    f378:	dc401415 	stw	r17,80(sp)
    f37c:	dc001315 	stw	r16,76(sp)
    f380:	df001304 	addi	fp,sp,76
    f384:	e13ffc15 	stw	r4,-16(fp)
    f388:	e17ffd15 	stw	r5,-12(fp)
    f38c:	e1bffe15 	stw	r6,-8(fp)
    f390:	e1ffff15 	stw	r7,-4(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
    f394:	e0bffc17 	ldw	r2,-16(fp)
    f398:	10806217 	ldw	r2,392(r2)
    f39c:	e0bff615 	stw	r2,-40(fp)
	int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
	JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
    f3a0:	e0bffd17 	ldw	r2,-12(fp)
    f3a4:	10c00717 	ldw	r3,28(r2)
    f3a8:	e0bffd17 	ldw	r2,-12(fp)
    f3ac:	10800917 	ldw	r2,36(r2)
    f3b0:	1809883a 	mov	r4,r3
    f3b4:	100b883a 	mov	r5,r2
    f3b8:	002c1540 	call	2c154 <__mulsi3>
    f3bc:	e0bff715 	stw	r2,-36(fp)
	JSAMPROW inptr, outptr;
	INT32 outvalue;

	h_expand = downsample->h_expand[compptr->component_index];
    f3c0:	e0bffd17 	ldw	r2,-12(fp)
    f3c4:	10800117 	ldw	r2,4(r2)
    f3c8:	e0fff617 	ldw	r3,-40(fp)
    f3cc:	1885883a 	add	r2,r3,r2
    f3d0:	10801704 	addi	r2,r2,92
    f3d4:	10800003 	ldbu	r2,0(r2)
    f3d8:	10803fcc 	andi	r2,r2,255
    f3dc:	e0bff815 	stw	r2,-32(fp)
	v_expand = downsample->v_expand[compptr->component_index];
    f3e0:	e0bffd17 	ldw	r2,-12(fp)
    f3e4:	10800117 	ldw	r2,4(r2)
    f3e8:	e0fff617 	ldw	r3,-40(fp)
    f3ec:	1885883a 	add	r2,r3,r2
    f3f0:	10801904 	addi	r2,r2,100
    f3f4:	10800083 	ldbu	r2,2(r2)
    f3f8:	10803fcc 	andi	r2,r2,255
    f3fc:	e0bff915 	stw	r2,-28(fp)
	numpix = h_expand * v_expand;
    f400:	e13ff817 	ldw	r4,-32(fp)
    f404:	e17ff917 	ldw	r5,-28(fp)
    f408:	002c1540 	call	2c154 <__mulsi3>
    f40c:	e0bffa15 	stw	r2,-24(fp)
	numpix2 = numpix/2;
    f410:	e0bffa17 	ldw	r2,-24(fp)
    f414:	1006d7fa 	srli	r3,r2,31
    f418:	1885883a 	add	r2,r3,r2
    f41c:	1005d07a 	srai	r2,r2,1
    f420:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f424:	e0bffc17 	ldw	r2,-16(fp)
    f428:	14403f17 	ldw	r17,252(r2)
		cinfo->image_width, output_cols * h_expand);
    f42c:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f430:	14000717 	ldw	r16,28(r2)
    f434:	e0bff817 	ldw	r2,-32(fp)
    f438:	1009883a 	mov	r4,r2
    f43c:	e17ff717 	ldw	r5,-36(fp)
    f440:	002c1540 	call	2c154 <__mulsi3>
    f444:	e13ffe17 	ldw	r4,-8(fp)
    f448:	880b883a 	mov	r5,r17
    f44c:	800d883a 	mov	r6,r16
    f450:	100f883a 	mov	r7,r2
    f454:	000f1840 	call	f184 <expand_right_edge>
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
    f458:	e03fee15 	stw	zero,-72(fp)
    f45c:	e0bfee17 	ldw	r2,-72(fp)
    f460:	e0bfed15 	stw	r2,-76(fp)
	while (inrow < cinfo->max_v_samp_factor) {
    f464:	00004c06 	br	f598 <int_downsample+0x22c>
		outptr = output_data[outrow];
    f468:	e0bfee17 	ldw	r2,-72(fp)
    f46c:	1085883a 	add	r2,r2,r2
    f470:	1085883a 	add	r2,r2,r2
    f474:	e0ffff17 	ldw	r3,-4(fp)
    f478:	1885883a 	add	r2,r3,r2
    f47c:	10800017 	ldw	r2,0(r2)
    f480:	e0bff415 	stw	r2,-48(fp)
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
    f484:	e03ff115 	stw	zero,-60(fp)
    f488:	e03ff215 	stw	zero,-56(fp)
    f48c:	00003806 	br	f570 <int_downsample+0x204>
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
    f490:	e03ff515 	stw	zero,-44(fp)
				for (v = 0; v < v_expand; v++) {
    f494:	e03ff015 	stw	zero,-64(fp)
    f498:	00001f06 	br	f518 <int_downsample+0x1ac>
					inptr = input_data[inrow+v] + outcol_h;
    f49c:	e0ffed17 	ldw	r3,-76(fp)
    f4a0:	e0bff017 	ldw	r2,-64(fp)
    f4a4:	1885883a 	add	r2,r3,r2
    f4a8:	1085883a 	add	r2,r2,r2
    f4ac:	1085883a 	add	r2,r2,r2
    f4b0:	e0fffe17 	ldw	r3,-8(fp)
    f4b4:	1885883a 	add	r2,r3,r2
    f4b8:	10c00017 	ldw	r3,0(r2)
    f4bc:	e0bff217 	ldw	r2,-56(fp)
    f4c0:	1885883a 	add	r2,r3,r2
    f4c4:	e0bff315 	stw	r2,-52(fp)
					for (h = 0; h < h_expand; h++) {
    f4c8:	e03fef15 	stw	zero,-68(fp)
    f4cc:	00000c06 	br	f500 <int_downsample+0x194>
						outvalue += (INT32) GETJSAMPLE(*inptr++);
    f4d0:	e0bff317 	ldw	r2,-52(fp)
    f4d4:	10800003 	ldbu	r2,0(r2)
    f4d8:	10803fcc 	andi	r2,r2,255
    f4dc:	e0fff517 	ldw	r3,-44(fp)
    f4e0:	1885883a 	add	r2,r3,r2
    f4e4:	e0bff515 	stw	r2,-44(fp)
    f4e8:	e0bff317 	ldw	r2,-52(fp)
    f4ec:	10800044 	addi	r2,r2,1
    f4f0:	e0bff315 	stw	r2,-52(fp)
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
				for (v = 0; v < v_expand; v++) {
					inptr = input_data[inrow+v] + outcol_h;
					for (h = 0; h < h_expand; h++) {
    f4f4:	e0bfef17 	ldw	r2,-68(fp)
    f4f8:	10800044 	addi	r2,r2,1
    f4fc:	e0bfef15 	stw	r2,-68(fp)
    f500:	e0ffef17 	ldw	r3,-68(fp)
    f504:	e0bff817 	ldw	r2,-32(fp)
    f508:	18bff116 	blt	r3,r2,f4d0 <int_downsample+0x164>
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
				for (v = 0; v < v_expand; v++) {
    f50c:	e0bff017 	ldw	r2,-64(fp)
    f510:	10800044 	addi	r2,r2,1
    f514:	e0bff015 	stw	r2,-64(fp)
    f518:	e0fff017 	ldw	r3,-64(fp)
    f51c:	e0bff917 	ldw	r2,-28(fp)
    f520:	18bfde16 	blt	r3,r2,f49c <int_downsample+0x130>
					inptr = input_data[inrow+v] + outcol_h;
					for (h = 0; h < h_expand; h++) {
						outvalue += (INT32) GETJSAMPLE(*inptr++);
					}
				}
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
    f524:	e0fff517 	ldw	r3,-44(fp)
    f528:	e0bffb17 	ldw	r2,-20(fp)
    f52c:	1885883a 	add	r2,r3,r2
    f530:	1009883a 	mov	r4,r2
    f534:	e17ffa17 	ldw	r5,-24(fp)
    f538:	002c0980 	call	2c098 <__divsi3>
    f53c:	1007883a 	mov	r3,r2
    f540:	e0bff417 	ldw	r2,-48(fp)
    f544:	10c00005 	stb	r3,0(r2)
    f548:	e0bff417 	ldw	r2,-48(fp)
    f54c:	10800044 	addi	r2,r2,1
    f550:	e0bff415 	stw	r2,-48(fp)

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
    f554:	e0bff117 	ldw	r2,-60(fp)
    f558:	10800044 	addi	r2,r2,1
    f55c:	e0bff115 	stw	r2,-60(fp)
    f560:	e0bff817 	ldw	r2,-32(fp)
    f564:	e0fff217 	ldw	r3,-56(fp)
    f568:	1885883a 	add	r2,r3,r2
    f56c:	e0bff215 	stw	r2,-56(fp)
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
    f570:	e0fff117 	ldw	r3,-60(fp)
    f574:	e0bff717 	ldw	r2,-36(fp)
    f578:	18bfc536 	bltu	r3,r2,f490 <int_downsample+0x124>
						outvalue += (INT32) GETJSAMPLE(*inptr++);
					}
				}
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
		}
		inrow += v_expand;
    f57c:	e0ffed17 	ldw	r3,-76(fp)
    f580:	e0bff917 	ldw	r2,-28(fp)
    f584:	1885883a 	add	r2,r3,r2
    f588:	e0bfed15 	stw	r2,-76(fp)
		outrow++;
    f58c:	e0bfee17 	ldw	r2,-72(fp)
    f590:	10800044 	addi	r2,r2,1
    f594:	e0bfee15 	stw	r2,-72(fp)
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
    f598:	e0bffc17 	ldw	r2,-16(fp)
    f59c:	10803f17 	ldw	r2,252(r2)
    f5a0:	e0ffed17 	ldw	r3,-76(fp)
    f5a4:	18bfb016 	blt	r3,r2,f468 <int_downsample+0xfc>
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
		}
		inrow += v_expand;
		outrow++;
	}
}
    f5a8:	e037883a 	mov	sp,fp
    f5ac:	dfc00317 	ldw	ra,12(sp)
    f5b0:	df000217 	ldw	fp,8(sp)
    f5b4:	dc400117 	ldw	r17,4(sp)
    f5b8:	dc000017 	ldw	r16,0(sp)
    f5bc:	dec00404 	addi	sp,sp,16
    f5c0:	f800283a 	ret

0000f5c4 <fullsize_downsample>:
*/

METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    f5c4:	defff604 	addi	sp,sp,-40
    f5c8:	dfc00915 	stw	ra,36(sp)
    f5cc:	df000815 	stw	fp,32(sp)
    f5d0:	dc400715 	stw	r17,28(sp)
    f5d4:	dc000615 	stw	r16,24(sp)
    f5d8:	df000604 	addi	fp,sp,24
    f5dc:	e13ffc15 	stw	r4,-16(fp)
    f5e0:	e17ffd15 	stw	r5,-12(fp)
    f5e4:	e1bffe15 	stw	r6,-8(fp)
    f5e8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
		cinfo->max_v_samp_factor, cinfo->image_width);
    f5ec:	e0bffc17 	ldw	r2,-16(fp)
METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
    f5f0:	10c03f17 	ldw	r3,252(r2)
		cinfo->max_v_samp_factor, cinfo->image_width);
    f5f4:	e0bffc17 	ldw	r2,-16(fp)
METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
    f5f8:	10800717 	ldw	r2,28(r2)
    f5fc:	d8c00015 	stw	r3,0(sp)
    f600:	d8800115 	stw	r2,4(sp)
    f604:	e13ffe17 	ldw	r4,-8(fp)
    f608:	000b883a 	mov	r5,zero
    f60c:	e1bfff17 	ldw	r6,-4(fp)
    f610:	000f883a 	mov	r7,zero
    f614:	002b1240 	call	2b124 <jcopy_sample_rows>
		cinfo->max_v_samp_factor, cinfo->image_width);
	/* Edge-expand */
	expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
    f618:	e0bffc17 	ldw	r2,-16(fp)
    f61c:	14403f17 	ldw	r17,252(r2)
    f620:	e0bffc17 	ldw	r2,-16(fp)
    f624:	14000717 	ldw	r16,28(r2)
		compptr->width_in_blocks * compptr->DCT_h_scaled_size);
    f628:	e0bffd17 	ldw	r2,-12(fp)
    f62c:	10c00717 	ldw	r3,28(r2)
    f630:	e0bffd17 	ldw	r2,-12(fp)
    f634:	10800917 	ldw	r2,36(r2)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
		cinfo->max_v_samp_factor, cinfo->image_width);
	/* Edge-expand */
	expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
    f638:	1809883a 	mov	r4,r3
    f63c:	100b883a 	mov	r5,r2
    f640:	002c1540 	call	2c154 <__mulsi3>
    f644:	e13fff17 	ldw	r4,-4(fp)
    f648:	880b883a 	mov	r5,r17
    f64c:	800d883a 	mov	r6,r16
    f650:	100f883a 	mov	r7,r2
    f654:	000f1840 	call	f184 <expand_right_edge>
		compptr->width_in_blocks * compptr->DCT_h_scaled_size);
}
    f658:	e037883a 	mov	sp,fp
    f65c:	dfc00317 	ldw	ra,12(sp)
    f660:	df000217 	ldw	fp,8(sp)
    f664:	dc400117 	ldw	r17,4(sp)
    f668:	dc000017 	ldw	r16,0(sp)
    f66c:	dec00404 	addi	sp,sp,16
    f670:	f800283a 	ret

0000f674 <h2v1_downsample>:
*/

METHODDEF(void)
	h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    f674:	defff404 	addi	sp,sp,-48
    f678:	dfc00b15 	stw	ra,44(sp)
    f67c:	df000a15 	stw	fp,40(sp)
    f680:	dc800915 	stw	r18,36(sp)
    f684:	dc400815 	stw	r17,32(sp)
    f688:	dc000715 	stw	r16,28(sp)
    f68c:	df000704 	addi	fp,sp,28
    f690:	e13ffc15 	stw	r4,-16(fp)
    f694:	e17ffd15 	stw	r5,-12(fp)
    f698:	e1bffe15 	stw	r6,-8(fp)
    f69c:	e1ffff15 	stw	r7,-4(fp)
	int inrow;
	JDIMENSION outcol;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
    f6a0:	e0bffd17 	ldw	r2,-12(fp)
    f6a4:	10c00717 	ldw	r3,28(r2)
    f6a8:	e0bffd17 	ldw	r2,-12(fp)
    f6ac:	10800917 	ldw	r2,36(r2)
    f6b0:	1809883a 	mov	r4,r3
    f6b4:	100b883a 	mov	r5,r2
    f6b8:	002c1540 	call	2c154 <__mulsi3>
    f6bc:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f6c0:	e0bffc17 	ldw	r2,-16(fp)
    f6c4:	11403f17 	ldw	r5,252(r2)
		cinfo->image_width, output_cols * 2);
    f6c8:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f6cc:	10c00717 	ldw	r3,28(r2)
    f6d0:	e0bffb17 	ldw	r2,-20(fp)
    f6d4:	1085883a 	add	r2,r2,r2
    f6d8:	e13ffe17 	ldw	r4,-8(fp)
    f6dc:	180d883a 	mov	r6,r3
    f6e0:	100f883a 	mov	r7,r2
    f6e4:	000f1840 	call	f184 <expand_right_edge>
		cinfo->image_width, output_cols * 2);

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    f6e8:	e03ff915 	stw	zero,-28(fp)
    f6ec:	00002406 	br	f780 <h2v1_downsample+0x10c>
		outptr = output_data[inrow];
    f6f0:	e0bff917 	ldw	r2,-28(fp)
    f6f4:	1085883a 	add	r2,r2,r2
    f6f8:	1085883a 	add	r2,r2,r2
    f6fc:	e0ffff17 	ldw	r3,-4(fp)
    f700:	1885883a 	add	r2,r3,r2
    f704:	14400017 	ldw	r17,0(r2)
		inptr = input_data[inrow];
    f708:	e0bff917 	ldw	r2,-28(fp)
    f70c:	1085883a 	add	r2,r2,r2
    f710:	1085883a 	add	r2,r2,r2
    f714:	e0fffe17 	ldw	r3,-8(fp)
    f718:	1885883a 	add	r2,r3,r2
    f71c:	14000017 	ldw	r16,0(r2)
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
    f720:	0025883a 	mov	r18,zero
		for (outcol = 0; outcol < output_cols; outcol++) {
    f724:	e03ffa15 	stw	zero,-24(fp)
    f728:	00000f06 	br	f768 <h2v1_downsample+0xf4>
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
    f72c:	80800003 	ldbu	r2,0(r16)
    f730:	10c03fcc 	andi	r3,r2,255
    f734:	80800044 	addi	r2,r16,1
    f738:	10800003 	ldbu	r2,0(r2)
    f73c:	10803fcc 	andi	r2,r2,255
    f740:	1885883a 	add	r2,r3,r2
				+ bias) >> 1);
    f744:	1485883a 	add	r2,r2,r18
    f748:	1005d07a 	srai	r2,r2,1
	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
		outptr = output_data[inrow];
		inptr = input_data[inrow];
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
    f74c:	88800005 	stb	r2,0(r17)
    f750:	8c400044 	addi	r17,r17,1
				+ bias) >> 1);
			bias ^= 1;		/* 0=>1, 1=>0 */
    f754:	9480005c 	xori	r18,r18,1
			inptr += 2;
    f758:	84000084 	addi	r16,r16,2

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
		outptr = output_data[inrow];
		inptr = input_data[inrow];
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
    f75c:	e0bffa17 	ldw	r2,-24(fp)
    f760:	10800044 	addi	r2,r2,1
    f764:	e0bffa15 	stw	r2,-24(fp)
    f768:	e0fffa17 	ldw	r3,-24(fp)
    f76c:	e0bffb17 	ldw	r2,-20(fp)
    f770:	18bfee36 	bltu	r3,r2,f72c <h2v1_downsample+0xb8>
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * 2);

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    f774:	e0bff917 	ldw	r2,-28(fp)
    f778:	10800044 	addi	r2,r2,1
    f77c:	e0bff915 	stw	r2,-28(fp)
    f780:	e0bffc17 	ldw	r2,-16(fp)
    f784:	10803f17 	ldw	r2,252(r2)
    f788:	e0fff917 	ldw	r3,-28(fp)
    f78c:	18bfd816 	blt	r3,r2,f6f0 <h2v1_downsample+0x7c>
				+ bias) >> 1);
			bias ^= 1;		/* 0=>1, 1=>0 */
			inptr += 2;
		}
	}
}
    f790:	e037883a 	mov	sp,fp
    f794:	dfc00417 	ldw	ra,16(sp)
    f798:	df000317 	ldw	fp,12(sp)
    f79c:	dc800217 	ldw	r18,8(sp)
    f7a0:	dc400117 	ldw	r17,4(sp)
    f7a4:	dc000017 	ldw	r16,0(sp)
    f7a8:	dec00504 	addi	sp,sp,20
    f7ac:	f800283a 	ret

0000f7b0 <h2v2_downsample>:
*/

METHODDEF(void)
	h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    f7b0:	defff204 	addi	sp,sp,-56
    f7b4:	dfc00d15 	stw	ra,52(sp)
    f7b8:	df000c15 	stw	fp,48(sp)
    f7bc:	dcc00b15 	stw	r19,44(sp)
    f7c0:	dc800a15 	stw	r18,40(sp)
    f7c4:	dc400915 	stw	r17,36(sp)
    f7c8:	dc000815 	stw	r16,32(sp)
    f7cc:	df000804 	addi	fp,sp,32
    f7d0:	e13ffc15 	stw	r4,-16(fp)
    f7d4:	e17ffd15 	stw	r5,-12(fp)
    f7d8:	e1bffe15 	stw	r6,-8(fp)
    f7dc:	e1ffff15 	stw	r7,-4(fp)
	int inrow, outrow;
	JDIMENSION outcol;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
    f7e0:	e0bffd17 	ldw	r2,-12(fp)
    f7e4:	10c00717 	ldw	r3,28(r2)
    f7e8:	e0bffd17 	ldw	r2,-12(fp)
    f7ec:	10800917 	ldw	r2,36(r2)
    f7f0:	1809883a 	mov	r4,r3
    f7f4:	100b883a 	mov	r5,r2
    f7f8:	002c1540 	call	2c154 <__mulsi3>
    f7fc:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f800:	e0bffc17 	ldw	r2,-16(fp)
    f804:	11403f17 	ldw	r5,252(r2)
		cinfo->image_width, output_cols * 2);
    f808:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
    f80c:	10c00717 	ldw	r3,28(r2)
    f810:	e0bffb17 	ldw	r2,-20(fp)
    f814:	1085883a 	add	r2,r2,r2
    f818:	e13ffe17 	ldw	r4,-8(fp)
    f81c:	180d883a 	mov	r6,r3
    f820:	100f883a 	mov	r7,r2
    f824:	000f1840 	call	f184 <expand_right_edge>
		cinfo->image_width, output_cols * 2);

	inrow = outrow = 0;
    f828:	e03ff915 	stw	zero,-28(fp)
    f82c:	e0bff917 	ldw	r2,-28(fp)
    f830:	e0bff815 	stw	r2,-32(fp)
	while (inrow < cinfo->max_v_samp_factor) {
    f834:	00003606 	br	f910 <h2v2_downsample+0x160>
		outptr = output_data[outrow];
    f838:	e0bff917 	ldw	r2,-28(fp)
    f83c:	1085883a 	add	r2,r2,r2
    f840:	1085883a 	add	r2,r2,r2
    f844:	e0ffff17 	ldw	r3,-4(fp)
    f848:	1885883a 	add	r2,r3,r2
    f84c:	14800017 	ldw	r18,0(r2)
		inptr0 = input_data[inrow];
    f850:	e0bff817 	ldw	r2,-32(fp)
    f854:	1085883a 	add	r2,r2,r2
    f858:	1085883a 	add	r2,r2,r2
    f85c:	e0fffe17 	ldw	r3,-8(fp)
    f860:	1885883a 	add	r2,r3,r2
    f864:	14000017 	ldw	r16,0(r2)
		inptr1 = input_data[inrow+1];
    f868:	e0bff817 	ldw	r2,-32(fp)
    f86c:	10800044 	addi	r2,r2,1
    f870:	1085883a 	add	r2,r2,r2
    f874:	1085883a 	add	r2,r2,r2
    f878:	e0fffe17 	ldw	r3,-8(fp)
    f87c:	1885883a 	add	r2,r3,r2
    f880:	14400017 	ldw	r17,0(r2)
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
    f884:	04c00044 	movi	r19,1
		for (outcol = 0; outcol < output_cols; outcol++) {
    f888:	e03ffa15 	stw	zero,-24(fp)
    f88c:	00001706 	br	f8ec <h2v2_downsample+0x13c>
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    f890:	80800003 	ldbu	r2,0(r16)
    f894:	10c03fcc 	andi	r3,r2,255
    f898:	80800044 	addi	r2,r16,1
    f89c:	10800003 	ldbu	r2,0(r2)
    f8a0:	10803fcc 	andi	r2,r2,255
    f8a4:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
    f8a8:	88800003 	ldbu	r2,0(r17)
    f8ac:	10803fcc 	andi	r2,r2,255
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    f8b0:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
    f8b4:	88800044 	addi	r2,r17,1
    f8b8:	10800003 	ldbu	r2,0(r2)
    f8bc:	10803fcc 	andi	r2,r2,255
    f8c0:	1885883a 	add	r2,r3,r2
				+ bias) >> 2);
    f8c4:	14c5883a 	add	r2,r2,r19
    f8c8:	1005d0ba 	srai	r2,r2,2
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    f8cc:	90800005 	stb	r2,0(r18)
    f8d0:	94800044 	addi	r18,r18,1
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
				+ bias) >> 2);
			bias ^= 3;		/* 1=>2, 2=>1 */
    f8d4:	9cc000dc 	xori	r19,r19,3
			inptr0 += 2; inptr1 += 2;
    f8d8:	84000084 	addi	r16,r16,2
    f8dc:	8c400084 	addi	r17,r17,2
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
    f8e0:	e0bffa17 	ldw	r2,-24(fp)
    f8e4:	10800044 	addi	r2,r2,1
    f8e8:	e0bffa15 	stw	r2,-24(fp)
    f8ec:	e0fffa17 	ldw	r3,-24(fp)
    f8f0:	e0bffb17 	ldw	r2,-20(fp)
    f8f4:	18bfe636 	bltu	r3,r2,f890 <h2v2_downsample+0xe0>
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
				+ bias) >> 2);
			bias ^= 3;		/* 1=>2, 2=>1 */
			inptr0 += 2; inptr1 += 2;
		}
		inrow += 2;
    f8f8:	e0bff817 	ldw	r2,-32(fp)
    f8fc:	10800084 	addi	r2,r2,2
    f900:	e0bff815 	stw	r2,-32(fp)
		outrow++;
    f904:	e0bff917 	ldw	r2,-28(fp)
    f908:	10800044 	addi	r2,r2,1
    f90c:	e0bff915 	stw	r2,-28(fp)
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * 2);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
    f910:	e0bffc17 	ldw	r2,-16(fp)
    f914:	10803f17 	ldw	r2,252(r2)
    f918:	e0fff817 	ldw	r3,-32(fp)
    f91c:	18bfc616 	blt	r3,r2,f838 <h2v2_downsample+0x88>
			inptr0 += 2; inptr1 += 2;
		}
		inrow += 2;
		outrow++;
	}
}
    f920:	e037883a 	mov	sp,fp
    f924:	dfc00517 	ldw	ra,20(sp)
    f928:	df000417 	ldw	fp,16(sp)
    f92c:	dcc00317 	ldw	r19,12(sp)
    f930:	dc800217 	ldw	r18,8(sp)
    f934:	dc400117 	ldw	r17,4(sp)
    f938:	dc000017 	ldw	r16,0(sp)
    f93c:	dec00604 	addi	sp,sp,24
    f940:	f800283a 	ret

0000f944 <h2v2_smooth_downsample>:
*/

METHODDEF(void)
	h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    f944:	deffec04 	addi	sp,sp,-80
    f948:	dfc01315 	stw	ra,76(sp)
    f94c:	df001215 	stw	fp,72(sp)
    f950:	dd401115 	stw	r21,68(sp)
    f954:	dd001015 	stw	r20,64(sp)
    f958:	dcc00f15 	stw	r19,60(sp)
    f95c:	dc800e15 	stw	r18,56(sp)
    f960:	dc400d15 	stw	r17,52(sp)
    f964:	dc000c15 	stw	r16,48(sp)
    f968:	df000c04 	addi	fp,sp,48
    f96c:	e13ffc15 	stw	r4,-16(fp)
    f970:	e17ffd15 	stw	r5,-12(fp)
    f974:	e1bffe15 	stw	r6,-8(fp)
    f978:	e1ffff15 	stw	r7,-4(fp)
	int inrow, outrow;
	JDIMENSION colctr;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
    f97c:	e0bffd17 	ldw	r2,-12(fp)
    f980:	10c00717 	ldw	r3,28(r2)
    f984:	e0bffd17 	ldw	r2,-12(fp)
    f988:	10800917 	ldw	r2,36(r2)
    f98c:	1809883a 	mov	r4,r3
    f990:	100b883a 	mov	r5,r2
    f994:	002c1540 	call	2c154 <__mulsi3>
    f998:	e0bff715 	stw	r2,-36(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
    f99c:	e0bffe17 	ldw	r2,-8(fp)
    f9a0:	113fff04 	addi	r4,r2,-4
    f9a4:	e0bffc17 	ldw	r2,-16(fp)
    f9a8:	10803f17 	ldw	r2,252(r2)
    f9ac:	11400084 	addi	r5,r2,2
		cinfo->image_width, output_cols * 2);
    f9b0:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
    f9b4:	10c00717 	ldw	r3,28(r2)
    f9b8:	e0bff717 	ldw	r2,-36(fp)
    f9bc:	1085883a 	add	r2,r2,r2
    f9c0:	180d883a 	mov	r6,r3
    f9c4:	100f883a 	mov	r7,r2
    f9c8:	000f1840 	call	f184 <expand_right_edge>
	* pixels, or SF/2 overall.  In order to use integer arithmetic, these
	* factors are scaled by 2^16 = 65536.
	* Also recall that SF = smoothing_factor / 1024.
	*/

	memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
    f9cc:	e0bffc17 	ldw	r2,-16(fp)
    f9d0:	10803517 	ldw	r2,212(r2)
    f9d4:	1009883a 	mov	r4,r2
    f9d8:	017fec04 	movi	r5,-80
    f9dc:	002c1540 	call	2c154 <__mulsi3>
    f9e0:	10900004 	addi	r2,r2,16384
    f9e4:	e0bff815 	stw	r2,-32(fp)
	neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
    f9e8:	e0bffc17 	ldw	r2,-16(fp)
    f9ec:	10803517 	ldw	r2,212(r2)
    f9f0:	1004913a 	slli	r2,r2,4
    f9f4:	e0bff915 	stw	r2,-28(fp)

	inrow = outrow = 0;
    f9f8:	e03ff515 	stw	zero,-44(fp)
    f9fc:	e0bff517 	ldw	r2,-44(fp)
    fa00:	e0bff415 	stw	r2,-48(fp)
	while (inrow < cinfo->max_v_samp_factor) {
    fa04:	00012606 	br	fea0 <h2v2_smooth_downsample+0x55c>
		outptr = output_data[outrow];
    fa08:	e0bff517 	ldw	r2,-44(fp)
    fa0c:	1085883a 	add	r2,r2,r2
    fa10:	1085883a 	add	r2,r2,r2
    fa14:	e0ffff17 	ldw	r3,-4(fp)
    fa18:	1885883a 	add	r2,r3,r2
    fa1c:	15000017 	ldw	r20,0(r2)
		inptr0 = input_data[inrow];
    fa20:	e0bff417 	ldw	r2,-48(fp)
    fa24:	1085883a 	add	r2,r2,r2
    fa28:	1085883a 	add	r2,r2,r2
    fa2c:	e0fffe17 	ldw	r3,-8(fp)
    fa30:	1885883a 	add	r2,r3,r2
    fa34:	14c00017 	ldw	r19,0(r2)
		inptr1 = input_data[inrow+1];
    fa38:	e0bff417 	ldw	r2,-48(fp)
    fa3c:	10800044 	addi	r2,r2,1
    fa40:	1085883a 	add	r2,r2,r2
    fa44:	1085883a 	add	r2,r2,r2
    fa48:	e0fffe17 	ldw	r3,-8(fp)
    fa4c:	1885883a 	add	r2,r3,r2
    fa50:	14800017 	ldw	r18,0(r2)
		above_ptr = input_data[inrow-1];
    fa54:	e0bff417 	ldw	r2,-48(fp)
    fa58:	10bfffc4 	addi	r2,r2,-1
    fa5c:	1085883a 	add	r2,r2,r2
    fa60:	1085883a 	add	r2,r2,r2
    fa64:	e0fffe17 	ldw	r3,-8(fp)
    fa68:	1885883a 	add	r2,r3,r2
    fa6c:	14400017 	ldw	r17,0(r2)
		below_ptr = input_data[inrow+2];
    fa70:	e0bff417 	ldw	r2,-48(fp)
    fa74:	10800084 	addi	r2,r2,2
    fa78:	1085883a 	add	r2,r2,r2
    fa7c:	1085883a 	add	r2,r2,r2
    fa80:	e0fffe17 	ldw	r3,-8(fp)
    fa84:	1885883a 	add	r2,r3,r2
    fa88:	14000017 	ldw	r16,0(r2)

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fa8c:	98800003 	ldbu	r2,0(r19)
    fa90:	10c03fcc 	andi	r3,r2,255
    fa94:	98800044 	addi	r2,r19,1
    fa98:	10800003 	ldbu	r2,0(r2)
    fa9c:	10803fcc 	andi	r2,r2,255
    faa0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    faa4:	90800003 	ldbu	r2,0(r18)
    faa8:	10803fcc 	andi	r2,r2,255
		inptr1 = input_data[inrow+1];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    faac:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    fab0:	90800044 	addi	r2,r18,1
    fab4:	10800003 	ldbu	r2,0(r2)
    fab8:	10803fcc 	andi	r2,r2,255
		inptr1 = input_data[inrow+1];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fabc:	1885883a 	add	r2,r3,r2
    fac0:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fac4:	88800003 	ldbu	r2,0(r17)
    fac8:	10c03fcc 	andi	r3,r2,255
    facc:	88800044 	addi	r2,r17,1
    fad0:	10800003 	ldbu	r2,0(r2)
    fad4:	10803fcc 	andi	r2,r2,255
    fad8:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fadc:	80800003 	ldbu	r2,0(r16)
    fae0:	10803fcc 	andi	r2,r2,255
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fae4:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fae8:	80800044 	addi	r2,r16,1
    faec:	10800003 	ldbu	r2,0(r2)
    faf0:	10803fcc 	andi	r2,r2,255
    faf4:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
    faf8:	98800003 	ldbu	r2,0(r19)
    fafc:	10803fcc 	andi	r2,r2,255

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fb00:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
    fb04:	98800084 	addi	r2,r19,2
    fb08:	10800003 	ldbu	r2,0(r2)
    fb0c:	10803fcc 	andi	r2,r2,255
    fb10:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
    fb14:	90800003 	ldbu	r2,0(r18)
    fb18:	10803fcc 	andi	r2,r2,255
		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
    fb1c:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
    fb20:	90800084 	addi	r2,r18,2
    fb24:	10800003 	ldbu	r2,0(r2)
    fb28:	10803fcc 	andi	r2,r2,255
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fb2c:	1885883a 	add	r2,r3,r2
    fb30:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
    fb34:	e0fffb17 	ldw	r3,-20(fp)
    fb38:	e0bffb17 	ldw	r2,-20(fp)
    fb3c:	1885883a 	add	r2,r3,r2
    fb40:	e0bffb15 	stw	r2,-20(fp)
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
    fb44:	88800003 	ldbu	r2,0(r17)
    fb48:	10c03fcc 	andi	r3,r2,255
    fb4c:	88800084 	addi	r2,r17,2
    fb50:	10800003 	ldbu	r2,0(r2)
    fb54:	10803fcc 	andi	r2,r2,255
    fb58:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
    fb5c:	80800003 	ldbu	r2,0(r16)
    fb60:	10803fcc 	andi	r2,r2,255
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
    fb64:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
    fb68:	80800084 	addi	r2,r16,2
    fb6c:	10800003 	ldbu	r2,0(r2)
    fb70:	10803fcc 	andi	r2,r2,255
    fb74:	1885883a 	add	r2,r3,r2
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
    fb78:	e0fffb17 	ldw	r3,-20(fp)
    fb7c:	1885883a 	add	r2,r3,r2
    fb80:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
		membersum = membersum * memberscale + neighsum * neighscale;
    fb84:	e13ffa17 	ldw	r4,-24(fp)
    fb88:	e17ff817 	ldw	r5,-32(fp)
    fb8c:	002c1540 	call	2c154 <__mulsi3>
    fb90:	102b883a 	mov	r21,r2
    fb94:	e13ffb17 	ldw	r4,-20(fp)
    fb98:	e17ff917 	ldw	r5,-28(fp)
    fb9c:	002c1540 	call	2c154 <__mulsi3>
    fba0:	a885883a 	add	r2,r21,r2
    fba4:	e0bffa15 	stw	r2,-24(fp)
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    fba8:	e0fffa17 	ldw	r3,-24(fp)
    fbac:	00a00014 	movui	r2,32768
    fbb0:	1885883a 	add	r2,r3,r2
    fbb4:	1005d43a 	srai	r2,r2,16
    fbb8:	a0800005 	stb	r2,0(r20)
    fbbc:	a5000044 	addi	r20,r20,1
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
    fbc0:	9cc00084 	addi	r19,r19,2
    fbc4:	94800084 	addi	r18,r18,2
    fbc8:	8c400084 	addi	r17,r17,2
    fbcc:	84000084 	addi	r16,r16,2

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
    fbd0:	e0bff717 	ldw	r2,-36(fp)
    fbd4:	10bfff84 	addi	r2,r2,-2
    fbd8:	e0bff615 	stw	r2,-40(fp)
    fbdc:	00005806 	br	fd40 <h2v2_smooth_downsample+0x3fc>
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fbe0:	98800003 	ldbu	r2,0(r19)
    fbe4:	10c03fcc 	andi	r3,r2,255
    fbe8:	98800044 	addi	r2,r19,1
    fbec:	10800003 	ldbu	r2,0(r2)
    fbf0:	10803fcc 	andi	r2,r2,255
    fbf4:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    fbf8:	90800003 	ldbu	r2,0(r18)
    fbfc:	10803fcc 	andi	r2,r2,255
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fc00:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    fc04:	90800044 	addi	r2,r18,1
    fc08:	10800003 	ldbu	r2,0(r2)
    fc0c:	10803fcc 	andi	r2,r2,255
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fc10:	1885883a 	add	r2,r3,r2
    fc14:	e0bffa15 	stw	r2,-24(fp)
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fc18:	88800003 	ldbu	r2,0(r17)
    fc1c:	10c03fcc 	andi	r3,r2,255
    fc20:	88800044 	addi	r2,r17,1
    fc24:	10800003 	ldbu	r2,0(r2)
    fc28:	10803fcc 	andi	r2,r2,255
    fc2c:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fc30:	80800003 	ldbu	r2,0(r16)
    fc34:	10803fcc 	andi	r2,r2,255
		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fc38:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fc3c:	80800044 	addi	r2,r16,1
    fc40:	10800003 	ldbu	r2,0(r2)
    fc44:	10803fcc 	andi	r2,r2,255
    fc48:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
    fc4c:	98bfffc4 	addi	r2,r19,-1
    fc50:	10800003 	ldbu	r2,0(r2)
    fc54:	10803fcc 	andi	r2,r2,255
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fc58:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
    fc5c:	98800084 	addi	r2,r19,2
    fc60:	10800003 	ldbu	r2,0(r2)
    fc64:	10803fcc 	andi	r2,r2,255
    fc68:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
    fc6c:	90bfffc4 	addi	r2,r18,-1
    fc70:	10800003 	ldbu	r2,0(r2)
    fc74:	10803fcc 	andi	r2,r2,255
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
    fc78:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
    fc7c:	90800084 	addi	r2,r18,2
    fc80:	10800003 	ldbu	r2,0(r2)
    fc84:	10803fcc 	andi	r2,r2,255
		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fc88:	1885883a 	add	r2,r3,r2
    fc8c:	e0bffb15 	stw	r2,-20(fp)
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
    fc90:	e0fffb17 	ldw	r3,-20(fp)
    fc94:	e0bffb17 	ldw	r2,-20(fp)
    fc98:	1885883a 	add	r2,r3,r2
    fc9c:	e0bffb15 	stw	r2,-20(fp)
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
    fca0:	88bfffc4 	addi	r2,r17,-1
    fca4:	10800003 	ldbu	r2,0(r2)
    fca8:	10c03fcc 	andi	r3,r2,255
    fcac:	88800084 	addi	r2,r17,2
    fcb0:	10800003 	ldbu	r2,0(r2)
    fcb4:	10803fcc 	andi	r2,r2,255
    fcb8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
    fcbc:	80bfffc4 	addi	r2,r16,-1
    fcc0:	10800003 	ldbu	r2,0(r2)
    fcc4:	10803fcc 	andi	r2,r2,255
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
    fcc8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
    fccc:	80800084 	addi	r2,r16,2
    fcd0:	10800003 	ldbu	r2,0(r2)
    fcd4:	10803fcc 	andi	r2,r2,255
    fcd8:	1885883a 	add	r2,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
    fcdc:	e0fffb17 	ldw	r3,-20(fp)
    fce0:	1885883a 	add	r2,r3,r2
    fce4:	e0bffb15 	stw	r2,-20(fp)
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
			/* form final output scaled up by 2^16 */
			membersum = membersum * memberscale + neighsum * neighscale;
    fce8:	e13ffa17 	ldw	r4,-24(fp)
    fcec:	e17ff817 	ldw	r5,-32(fp)
    fcf0:	002c1540 	call	2c154 <__mulsi3>
    fcf4:	102b883a 	mov	r21,r2
    fcf8:	e13ffb17 	ldw	r4,-20(fp)
    fcfc:	e17ff917 	ldw	r5,-28(fp)
    fd00:	002c1540 	call	2c154 <__mulsi3>
    fd04:	a885883a 	add	r2,r21,r2
    fd08:	e0bffa15 	stw	r2,-24(fp)
			/* round, descale and output it */
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    fd0c:	e0fffa17 	ldw	r3,-24(fp)
    fd10:	00a00014 	movui	r2,32768
    fd14:	1885883a 	add	r2,r3,r2
    fd18:	1005d43a 	srai	r2,r2,16
    fd1c:	a0800005 	stb	r2,0(r20)
    fd20:	a5000044 	addi	r20,r20,1
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
    fd24:	9cc00084 	addi	r19,r19,2
    fd28:	94800084 	addi	r18,r18,2
    fd2c:	8c400084 	addi	r17,r17,2
    fd30:	84000084 	addi	r16,r16,2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
    fd34:	e0bff617 	ldw	r2,-40(fp)
    fd38:	10bfffc4 	addi	r2,r2,-1
    fd3c:	e0bff615 	stw	r2,-40(fp)
    fd40:	e0bff617 	ldw	r2,-40(fp)
    fd44:	103fa61e 	bne	r2,zero,fbe0 <h2v2_smooth_downsample+0x29c>
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fd48:	98800003 	ldbu	r2,0(r19)
    fd4c:	10c03fcc 	andi	r3,r2,255
    fd50:	98800044 	addi	r2,r19,1
    fd54:	10800003 	ldbu	r2,0(r2)
    fd58:	10803fcc 	andi	r2,r2,255
    fd5c:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    fd60:	90800003 	ldbu	r2,0(r18)
    fd64:	10803fcc 	andi	r2,r2,255
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fd68:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    fd6c:	90800044 	addi	r2,r18,1
    fd70:	10800003 	ldbu	r2,0(r2)
    fd74:	10803fcc 	andi	r2,r2,255
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
    fd78:	1885883a 	add	r2,r3,r2
    fd7c:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fd80:	88800003 	ldbu	r2,0(r17)
    fd84:	10c03fcc 	andi	r3,r2,255
    fd88:	88800044 	addi	r2,r17,1
    fd8c:	10800003 	ldbu	r2,0(r2)
    fd90:	10803fcc 	andi	r2,r2,255
    fd94:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fd98:	80800003 	ldbu	r2,0(r16)
    fd9c:	10803fcc 	andi	r2,r2,255
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fda0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fda4:	80800044 	addi	r2,r16,1
    fda8:	10800003 	ldbu	r2,0(r2)
    fdac:	10803fcc 	andi	r2,r2,255
    fdb0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
    fdb4:	98bfffc4 	addi	r2,r19,-1
    fdb8:	10800003 	ldbu	r2,0(r2)
    fdbc:	10803fcc 	andi	r2,r2,255

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
    fdc0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
    fdc4:	98800044 	addi	r2,r19,1
    fdc8:	10800003 	ldbu	r2,0(r2)
    fdcc:	10803fcc 	andi	r2,r2,255
    fdd0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
    fdd4:	90bfffc4 	addi	r2,r18,-1
    fdd8:	10800003 	ldbu	r2,0(r2)
    fddc:	10803fcc 	andi	r2,r2,255
		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
    fde0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
    fde4:	90800044 	addi	r2,r18,1
    fde8:	10800003 	ldbu	r2,0(r2)
    fdec:	10803fcc 	andi	r2,r2,255
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
    fdf0:	1885883a 	add	r2,r3,r2
    fdf4:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
    fdf8:	e0fffb17 	ldw	r3,-20(fp)
    fdfc:	e0bffb17 	ldw	r2,-20(fp)
    fe00:	1885883a 	add	r2,r3,r2
    fe04:	e0bffb15 	stw	r2,-20(fp)
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
    fe08:	88bfffc4 	addi	r2,r17,-1
    fe0c:	10800003 	ldbu	r2,0(r2)
    fe10:	10c03fcc 	andi	r3,r2,255
    fe14:	88800044 	addi	r2,r17,1
    fe18:	10800003 	ldbu	r2,0(r2)
    fe1c:	10803fcc 	andi	r2,r2,255
    fe20:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
    fe24:	80bfffc4 	addi	r2,r16,-1
    fe28:	10800003 	ldbu	r2,0(r2)
    fe2c:	10803fcc 	andi	r2,r2,255
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
    fe30:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
    fe34:	80800044 	addi	r2,r16,1
    fe38:	10800003 	ldbu	r2,0(r2)
    fe3c:	10803fcc 	andi	r2,r2,255
    fe40:	1885883a 	add	r2,r3,r2
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
    fe44:	e0fffb17 	ldw	r3,-20(fp)
    fe48:	1885883a 	add	r2,r3,r2
    fe4c:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
		membersum = membersum * memberscale + neighsum * neighscale;
    fe50:	e13ffa17 	ldw	r4,-24(fp)
    fe54:	e17ff817 	ldw	r5,-32(fp)
    fe58:	002c1540 	call	2c154 <__mulsi3>
    fe5c:	1021883a 	mov	r16,r2
    fe60:	e13ffb17 	ldw	r4,-20(fp)
    fe64:	e17ff917 	ldw	r5,-28(fp)
    fe68:	002c1540 	call	2c154 <__mulsi3>
    fe6c:	8085883a 	add	r2,r16,r2
    fe70:	e0bffa15 	stw	r2,-24(fp)
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);
    fe74:	e0fffa17 	ldw	r3,-24(fp)
    fe78:	00a00014 	movui	r2,32768
    fe7c:	1885883a 	add	r2,r3,r2
    fe80:	1005d43a 	srai	r2,r2,16
    fe84:	a0800005 	stb	r2,0(r20)

		inrow += 2;
    fe88:	e0bff417 	ldw	r2,-48(fp)
    fe8c:	10800084 	addi	r2,r2,2
    fe90:	e0bff415 	stw	r2,-48(fp)
		outrow++;
    fe94:	e0bff517 	ldw	r2,-44(fp)
    fe98:	10800044 	addi	r2,r2,1
    fe9c:	e0bff515 	stw	r2,-44(fp)

	memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
	neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
    fea0:	e0bffc17 	ldw	r2,-16(fp)
    fea4:	10803f17 	ldw	r2,252(r2)
    fea8:	e0fff417 	ldw	r3,-48(fp)
    feac:	18bed616 	blt	r3,r2,fa08 <h2v2_smooth_downsample+0xc4>
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

		inrow += 2;
		outrow++;
	}
}
    feb0:	e037883a 	mov	sp,fp
    feb4:	dfc00717 	ldw	ra,28(sp)
    feb8:	df000617 	ldw	fp,24(sp)
    febc:	dd400517 	ldw	r21,20(sp)
    fec0:	dd000417 	ldw	r20,16(sp)
    fec4:	dcc00317 	ldw	r19,12(sp)
    fec8:	dc800217 	ldw	r18,8(sp)
    fecc:	dc400117 	ldw	r17,4(sp)
    fed0:	dc000017 	ldw	r16,0(sp)
    fed4:	dec00804 	addi	sp,sp,32
    fed8:	f800283a 	ret

0000fedc <fullsize_smooth_downsample>:
*/

METHODDEF(void)
	fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
    fedc:	deffeb04 	addi	sp,sp,-84
    fee0:	dfc01415 	stw	ra,80(sp)
    fee4:	df001315 	stw	fp,76(sp)
    fee8:	dd001215 	stw	r20,72(sp)
    feec:	dcc01115 	stw	r19,68(sp)
    fef0:	dc801015 	stw	r18,64(sp)
    fef4:	dc400f15 	stw	r17,60(sp)
    fef8:	dc000e15 	stw	r16,56(sp)
    fefc:	df000e04 	addi	fp,sp,56
    ff00:	e13ffc15 	stw	r4,-16(fp)
    ff04:	e17ffd15 	stw	r5,-12(fp)
    ff08:	e1bffe15 	stw	r6,-8(fp)
    ff0c:	e1ffff15 	stw	r7,-4(fp)
	int inrow;
	JDIMENSION colctr;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
    ff10:	e0bffd17 	ldw	r2,-12(fp)
    ff14:	10c00717 	ldw	r3,28(r2)
    ff18:	e0bffd17 	ldw	r2,-12(fp)
    ff1c:	10800917 	ldw	r2,36(r2)
    ff20:	1809883a 	mov	r4,r3
    ff24:	100b883a 	mov	r5,r2
    ff28:	002c1540 	call	2c154 <__mulsi3>
    ff2c:	e0bff615 	stw	r2,-40(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
    ff30:	e0bffe17 	ldw	r2,-8(fp)
    ff34:	113fff04 	addi	r4,r2,-4
    ff38:	e0bffc17 	ldw	r2,-16(fp)
    ff3c:	10803f17 	ldw	r2,252(r2)
    ff40:	10c00084 	addi	r3,r2,2
		cinfo->image_width, output_cols);
    ff44:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
    ff48:	10800717 	ldw	r2,28(r2)
    ff4c:	180b883a 	mov	r5,r3
    ff50:	100d883a 	mov	r6,r2
    ff54:	e1fff617 	ldw	r7,-40(fp)
    ff58:	000f1840 	call	f184 <expand_right_edge>
	* smoothed pixel, while the main pixel contributes (1-8*SF).  In order
	* to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
	* Also recall that SF = smoothing_factor / 1024.
	*/

	memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10803517 	ldw	r2,212(r2)
    ff64:	00c02004 	movi	r3,128
    ff68:	1885c83a 	sub	r2,r3,r2
    ff6c:	1004927a 	slli	r2,r2,9
    ff70:	e0bff715 	stw	r2,-36(fp)
	neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
    ff74:	e0bffc17 	ldw	r2,-16(fp)
    ff78:	10803517 	ldw	r2,212(r2)
    ff7c:	100491ba 	slli	r2,r2,6
    ff80:	e0bff815 	stw	r2,-32(fp)

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    ff84:	e03ff215 	stw	zero,-56(fp)
    ff88:	00009c06 	br	101fc <fullsize_smooth_downsample+0x320>
		outptr = output_data[inrow];
    ff8c:	e0bff217 	ldw	r2,-56(fp)
    ff90:	1085883a 	add	r2,r2,r2
    ff94:	1085883a 	add	r2,r2,r2
    ff98:	e0ffff17 	ldw	r3,-4(fp)
    ff9c:	1885883a 	add	r2,r3,r2
    ffa0:	14400017 	ldw	r17,0(r2)
		inptr = input_data[inrow];
    ffa4:	e0bff217 	ldw	r2,-56(fp)
    ffa8:	1085883a 	add	r2,r2,r2
    ffac:	1085883a 	add	r2,r2,r2
    ffb0:	e0fffe17 	ldw	r3,-8(fp)
    ffb4:	1885883a 	add	r2,r3,r2
    ffb8:	14000017 	ldw	r16,0(r2)
		above_ptr = input_data[inrow-1];
    ffbc:	e0bff217 	ldw	r2,-56(fp)
    ffc0:	10bfffc4 	addi	r2,r2,-1
    ffc4:	1085883a 	add	r2,r2,r2
    ffc8:	1085883a 	add	r2,r2,r2
    ffcc:	e0fffe17 	ldw	r3,-8(fp)
    ffd0:	1885883a 	add	r2,r3,r2
    ffd4:	14800017 	ldw	r18,0(r2)
		below_ptr = input_data[inrow+1];
    ffd8:	e0bff217 	ldw	r2,-56(fp)
    ffdc:	10800044 	addi	r2,r2,1
    ffe0:	1085883a 	add	r2,r2,r2
    ffe4:	1085883a 	add	r2,r2,r2
    ffe8:	e0fffe17 	ldw	r3,-8(fp)
    ffec:	1885883a 	add	r2,r3,r2
    fff0:	14c00017 	ldw	r19,0(r2)

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
    fff4:	90800003 	ldbu	r2,0(r18)
    fff8:	10c03fcc 	andi	r3,r2,255
    fffc:	98800003 	ldbu	r2,0(r19)
   10000:	10803fcc 	andi	r2,r2,255
   10004:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr);
   10008:	80800003 	ldbu	r2,0(r16)
   1000c:	10803fcc 	andi	r2,r2,255
		inptr = input_data[inrow];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+1];

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
   10010:	1885883a 	add	r2,r3,r2
   10014:	e0bff415 	stw	r2,-48(fp)
   10018:	94800044 	addi	r18,r18,1
   1001c:	9cc00044 	addi	r19,r19,1
			GETJSAMPLE(*inptr);
		membersum = GETJSAMPLE(*inptr++);
   10020:	80800003 	ldbu	r2,0(r16)
   10024:	10803fcc 	andi	r2,r2,255
   10028:	e0bff915 	stw	r2,-28(fp)
   1002c:	84000044 	addi	r16,r16,1
		nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
   10030:	90800003 	ldbu	r2,0(r18)
   10034:	10c03fcc 	andi	r3,r2,255
   10038:	98800003 	ldbu	r2,0(r19)
   1003c:	10803fcc 	andi	r2,r2,255
   10040:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr);
   10044:	80800003 	ldbu	r2,0(r16)
   10048:	10803fcc 	andi	r2,r2,255

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
			GETJSAMPLE(*inptr);
		membersum = GETJSAMPLE(*inptr++);
		nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
   1004c:	1885883a 	add	r2,r3,r2
   10050:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr);
		neighsum = colsum + (colsum - membersum) + nextcolsum;
   10054:	e0fff417 	ldw	r3,-48(fp)
   10058:	e0bff917 	ldw	r2,-28(fp)
   1005c:	1887c83a 	sub	r3,r3,r2
   10060:	e0bff417 	ldw	r2,-48(fp)
   10064:	1887883a 	add	r3,r3,r2
   10068:	e0bffa17 	ldw	r2,-24(fp)
   1006c:	1885883a 	add	r2,r3,r2
   10070:	e0bffb15 	stw	r2,-20(fp)
		membersum = membersum * memberscale + neighsum * neighscale;
   10074:	e13ff917 	ldw	r4,-28(fp)
   10078:	e17ff717 	ldw	r5,-36(fp)
   1007c:	002c1540 	call	2c154 <__mulsi3>
   10080:	1029883a 	mov	r20,r2
   10084:	e13ffb17 	ldw	r4,-20(fp)
   10088:	e17ff817 	ldw	r5,-32(fp)
   1008c:	002c1540 	call	2c154 <__mulsi3>
   10090:	a085883a 	add	r2,r20,r2
   10094:	e0bff915 	stw	r2,-28(fp)
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
   10098:	e0fff917 	ldw	r3,-28(fp)
   1009c:	00a00014 	movui	r2,32768
   100a0:	1885883a 	add	r2,r3,r2
   100a4:	1005d43a 	srai	r2,r2,16
   100a8:	88800005 	stb	r2,0(r17)
   100ac:	8c400044 	addi	r17,r17,1
		lastcolsum = colsum; colsum = nextcolsum;
   100b0:	e0bff417 	ldw	r2,-48(fp)
   100b4:	e0bff515 	stw	r2,-44(fp)
   100b8:	e0bffa17 	ldw	r2,-24(fp)
   100bc:	e0bff415 	stw	r2,-48(fp)

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
   100c0:	e0bff617 	ldw	r2,-40(fp)
   100c4:	10bfff84 	addi	r2,r2,-2
   100c8:	e0bff315 	stw	r2,-52(fp)
   100cc:	00002d06 	br	10184 <fullsize_smooth_downsample+0x2a8>
			membersum = GETJSAMPLE(*inptr++);
   100d0:	80800003 	ldbu	r2,0(r16)
   100d4:	10803fcc 	andi	r2,r2,255
   100d8:	e0bff915 	stw	r2,-28(fp)
   100dc:	84000044 	addi	r16,r16,1
			above_ptr++; below_ptr++;
   100e0:	94800044 	addi	r18,r18,1
   100e4:	9cc00044 	addi	r19,r19,1
			nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
   100e8:	90800003 	ldbu	r2,0(r18)
   100ec:	10c03fcc 	andi	r3,r2,255
   100f0:	98800003 	ldbu	r2,0(r19)
   100f4:	10803fcc 	andi	r2,r2,255
   100f8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr);
   100fc:	80800003 	ldbu	r2,0(r16)
   10100:	10803fcc 	andi	r2,r2,255
		lastcolsum = colsum; colsum = nextcolsum;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			membersum = GETJSAMPLE(*inptr++);
			above_ptr++; below_ptr++;
			nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
   10104:	1885883a 	add	r2,r3,r2
   10108:	e0bffa15 	stw	r2,-24(fp)
				GETJSAMPLE(*inptr);
			neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
   1010c:	e0fff417 	ldw	r3,-48(fp)
   10110:	e0bff917 	ldw	r2,-28(fp)
   10114:	1887c83a 	sub	r3,r3,r2
   10118:	e0bff517 	ldw	r2,-44(fp)
   1011c:	1887883a 	add	r3,r3,r2
   10120:	e0bffa17 	ldw	r2,-24(fp)
   10124:	1885883a 	add	r2,r3,r2
   10128:	e0bffb15 	stw	r2,-20(fp)
			membersum = membersum * memberscale + neighsum * neighscale;
   1012c:	e13ff917 	ldw	r4,-28(fp)
   10130:	e17ff717 	ldw	r5,-36(fp)
   10134:	002c1540 	call	2c154 <__mulsi3>
   10138:	1029883a 	mov	r20,r2
   1013c:	e13ffb17 	ldw	r4,-20(fp)
   10140:	e17ff817 	ldw	r5,-32(fp)
   10144:	002c1540 	call	2c154 <__mulsi3>
   10148:	a085883a 	add	r2,r20,r2
   1014c:	e0bff915 	stw	r2,-28(fp)
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
   10150:	e0fff917 	ldw	r3,-28(fp)
   10154:	00a00014 	movui	r2,32768
   10158:	1885883a 	add	r2,r3,r2
   1015c:	1005d43a 	srai	r2,r2,16
   10160:	88800005 	stb	r2,0(r17)
   10164:	8c400044 	addi	r17,r17,1
			lastcolsum = colsum; colsum = nextcolsum;
   10168:	e0bff417 	ldw	r2,-48(fp)
   1016c:	e0bff515 	stw	r2,-44(fp)
   10170:	e0bffa17 	ldw	r2,-24(fp)
   10174:	e0bff415 	stw	r2,-48(fp)
		neighsum = colsum + (colsum - membersum) + nextcolsum;
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		lastcolsum = colsum; colsum = nextcolsum;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
   10178:	e0bff317 	ldw	r2,-52(fp)
   1017c:	10bfffc4 	addi	r2,r2,-1
   10180:	e0bff315 	stw	r2,-52(fp)
   10184:	e0bff317 	ldw	r2,-52(fp)
   10188:	103fd11e 	bne	r2,zero,100d0 <fullsize_smooth_downsample+0x1f4>
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			lastcolsum = colsum; colsum = nextcolsum;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr);
   1018c:	80800003 	ldbu	r2,0(r16)
   10190:	10803fcc 	andi	r2,r2,255
   10194:	e0bff915 	stw	r2,-28(fp)
		neighsum = lastcolsum + (colsum - membersum) + colsum;
   10198:	e0fff417 	ldw	r3,-48(fp)
   1019c:	e0bff917 	ldw	r2,-28(fp)
   101a0:	1887c83a 	sub	r3,r3,r2
   101a4:	e0bff517 	ldw	r2,-44(fp)
   101a8:	1887883a 	add	r3,r3,r2
   101ac:	e0bff417 	ldw	r2,-48(fp)
   101b0:	1885883a 	add	r2,r3,r2
   101b4:	e0bffb15 	stw	r2,-20(fp)
		membersum = membersum * memberscale + neighsum * neighscale;
   101b8:	e13ff917 	ldw	r4,-28(fp)
   101bc:	e17ff717 	ldw	r5,-36(fp)
   101c0:	002c1540 	call	2c154 <__mulsi3>
   101c4:	1021883a 	mov	r16,r2
   101c8:	e13ffb17 	ldw	r4,-20(fp)
   101cc:	e17ff817 	ldw	r5,-32(fp)
   101d0:	002c1540 	call	2c154 <__mulsi3>
   101d4:	8085883a 	add	r2,r16,r2
   101d8:	e0bff915 	stw	r2,-28(fp)
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);
   101dc:	e0fff917 	ldw	r3,-28(fp)
   101e0:	00a00014 	movui	r2,32768
   101e4:	1885883a 	add	r2,r3,r2
   101e8:	1005d43a 	srai	r2,r2,16
   101ec:	88800005 	stb	r2,0(r17)
	*/

	memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
	neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
   101f0:	e0bff217 	ldw	r2,-56(fp)
   101f4:	10800044 	addi	r2,r2,1
   101f8:	e0bff215 	stw	r2,-56(fp)
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	10803f17 	ldw	r2,252(r2)
   10204:	e0fff217 	ldw	r3,-56(fp)
   10208:	18bf6016 	blt	r3,r2,ff8c <fullsize_smooth_downsample+0xb0>
		neighsum = lastcolsum + (colsum - membersum) + colsum;
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

	}
}
   1020c:	e037883a 	mov	sp,fp
   10210:	dfc00617 	ldw	ra,24(sp)
   10214:	df000517 	ldw	fp,20(sp)
   10218:	dd000417 	ldw	r20,16(sp)
   1021c:	dcc00317 	ldw	r19,12(sp)
   10220:	dc800217 	ldw	r18,8(sp)
   10224:	dc400117 	ldw	r17,4(sp)
   10228:	dc000017 	ldw	r16,0(sp)
   1022c:	dec00704 	addi	sp,sp,28
   10230:	f800283a 	ret

00010234 <jinit_downsampler>:
* Note that we must select a routine for each component.
*/

GLOBAL(void)
	jinit_downsampler (j_compress_ptr cinfo)
{
   10234:	defff504 	addi	sp,sp,-44
   10238:	dfc00a15 	stw	ra,40(sp)
   1023c:	df000915 	stw	fp,36(sp)
   10240:	df000904 	addi	fp,sp,36
   10244:	e13fff15 	stw	r4,-4(fp)
	my_downsample_ptr downsample;
	int ci;
	jpeg_component_info * compptr;
	boolean smoothok = TRUE;
   10248:	00800044 	movi	r2,1
   1024c:	e0bff905 	stb	r2,-28(fp)
	int h_in_group, v_in_group, h_out_group, v_out_group;

	downsample = (my_downsample_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   10250:	e0bfff17 	ldw	r2,-4(fp)
   10254:	10800117 	ldw	r2,4(r2)
   10258:	10800017 	ldw	r2,0(r2)
	int ci;
	jpeg_component_info * compptr;
	boolean smoothok = TRUE;
	int h_in_group, v_in_group, h_out_group, v_out_group;

	downsample = (my_downsample_ptr)
   1025c:	e13fff17 	ldw	r4,-4(fp)
   10260:	01400044 	movi	r5,1
   10264:	01801c04 	movi	r6,112
   10268:	103ee83a 	callr	r2
   1026c:	e0bffa15 	stw	r2,-24(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_downsampler));
	cinfo->downsample = (struct jpeg_downsampler *) downsample;
   10270:	e0bfff17 	ldw	r2,-4(fp)
   10274:	e0fffa17 	ldw	r3,-24(fp)
   10278:	10c06215 	stw	r3,392(r2)
	downsample->pub.start_pass = start_pass_downsample;
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	00c00074 	movhi	r3,1
   10284:	18fc5904 	addi	r3,r3,-3740
   10288:	10c00015 	stw	r3,0(r2)
	downsample->pub.downsample = sep_downsample;
   1028c:	e0bffa17 	ldw	r2,-24(fp)
   10290:	00c00074 	movhi	r3,1
   10294:	18fc8f04 	addi	r3,r3,-3524
   10298:	10c00115 	stw	r3,4(r2)
	downsample->pub.need_context_rows = FALSE;
   1029c:	e0bffa17 	ldw	r2,-24(fp)
   102a0:	10000205 	stb	zero,8(r2)

	if (cinfo->CCIR601_sampling)
   102a4:	e0bfff17 	ldw	r2,-4(fp)
   102a8:	108033c3 	ldbu	r2,207(r2)
   102ac:	10803fcc 	andi	r2,r2,255
   102b0:	10000926 	beq	r2,zero,102d8 <jinit_downsampler+0xa4>
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800017 	ldw	r2,0(r2)
   102bc:	00c00684 	movi	r3,26
   102c0:	10c00515 	stw	r3,20(r2)
   102c4:	e0bfff17 	ldw	r2,-4(fp)
   102c8:	10800017 	ldw	r2,0(r2)
   102cc:	10800017 	ldw	r2,0(r2)
   102d0:	e13fff17 	ldw	r4,-4(fp)
   102d4:	103ee83a 	callr	r2

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
   102d8:	e03ff715 	stw	zero,-36(fp)
   102dc:	e0bfff17 	ldw	r2,-4(fp)
   102e0:	10801417 	ldw	r2,80(r2)
   102e4:	e0bff815 	stw	r2,-32(fp)
   102e8:	0000b706 	br	105c8 <jinit_downsampler+0x394>
		ci++, compptr++) {
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
   102ec:	e0bff817 	ldw	r2,-32(fp)
   102f0:	10c00217 	ldw	r3,8(r2)
   102f4:	e0bff817 	ldw	r2,-32(fp)
   102f8:	10800917 	ldw	r2,36(r2)
   102fc:	1809883a 	mov	r4,r3
   10300:	100b883a 	mov	r5,r2
   10304:	002c1540 	call	2c154 <__mulsi3>
   10308:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size;
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	10804017 	ldw	r2,256(r2)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
   10314:	1809883a 	mov	r4,r3
   10318:	100b883a 	mov	r5,r2
   1031c:	002c0980 	call	2c098 <__divsi3>
   10320:	e0bffb15 	stw	r2,-20(fp)
				cinfo->min_DCT_h_scaled_size;
			v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
   10324:	e0bff817 	ldw	r2,-32(fp)
   10328:	10c00317 	ldw	r3,12(r2)
   1032c:	e0bff817 	ldw	r2,-32(fp)
   10330:	10800a17 	ldw	r2,40(r2)
   10334:	1809883a 	mov	r4,r3
   10338:	100b883a 	mov	r5,r2
   1033c:	002c1540 	call	2c154 <__mulsi3>
   10340:	1007883a 	mov	r3,r2
				cinfo->min_DCT_v_scaled_size;
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	10804117 	ldw	r2,260(r2)
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
				cinfo->min_DCT_h_scaled_size;
			v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
   1034c:	1809883a 	mov	r4,r3
   10350:	100b883a 	mov	r5,r2
   10354:	002c0980 	call	2c098 <__divsi3>
   10358:	e0bffc15 	stw	r2,-16(fp)
				cinfo->min_DCT_v_scaled_size;
			h_in_group = cinfo->max_h_samp_factor;
   1035c:	e0bfff17 	ldw	r2,-4(fp)
   10360:	10803e17 	ldw	r2,248(r2)
   10364:	e0bffd15 	stw	r2,-12(fp)
			v_in_group = cinfo->max_v_samp_factor;
   10368:	e0bfff17 	ldw	r2,-4(fp)
   1036c:	10803f17 	ldw	r2,252(r2)
   10370:	e0bffe15 	stw	r2,-8(fp)
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
   10374:	e0fffa17 	ldw	r3,-24(fp)
   10378:	e0bff717 	ldw	r2,-36(fp)
   1037c:	10800344 	addi	r2,r2,13
   10380:	1085883a 	add	r2,r2,r2
   10384:	1085883a 	add	r2,r2,r2
   10388:	1885883a 	add	r2,r3,r2
   1038c:	e0fffc17 	ldw	r3,-16(fp)
   10390:	10c00015 	stw	r3,0(r2)
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
   10394:	e0fffd17 	ldw	r3,-12(fp)
   10398:	e0bffb17 	ldw	r2,-20(fp)
   1039c:	18801d1e 	bne	r3,r2,10414 <jinit_downsampler+0x1e0>
   103a0:	e0fffe17 	ldw	r3,-8(fp)
   103a4:	e0bffc17 	ldw	r2,-16(fp)
   103a8:	18801a1e 	bne	r3,r2,10414 <jinit_downsampler+0x1e0>
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
   103ac:	e0bfff17 	ldw	r2,-4(fp)
   103b0:	10803517 	ldw	r2,212(r2)
   103b4:	10000d26 	beq	r2,zero,103ec <jinit_downsampler+0x1b8>
					downsample->methods[ci] = fullsize_smooth_downsample;
   103b8:	e0fffa17 	ldw	r3,-24(fp)
   103bc:	e0bff717 	ldw	r2,-36(fp)
   103c0:	108000c4 	addi	r2,r2,3
   103c4:	1085883a 	add	r2,r2,r2
   103c8:	1085883a 	add	r2,r2,r2
   103cc:	1885883a 	add	r2,r3,r2
   103d0:	00c00074 	movhi	r3,1
   103d4:	18ffb704 	addi	r3,r3,-292
   103d8:	10c00015 	stw	r3,0(r2)
					downsample->pub.need_context_rows = TRUE;
   103dc:	e0bffa17 	ldw	r2,-24(fp)
   103e0:	00c00044 	movi	r3,1
   103e4:	10c00205 	stb	r3,8(r2)
			h_in_group = cinfo->max_h_samp_factor;
			v_in_group = cinfo->max_v_samp_factor;
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
   103e8:	00007106 	br	105b0 <jinit_downsampler+0x37c>
					downsample->methods[ci] = fullsize_smooth_downsample;
					downsample->pub.need_context_rows = TRUE;
				} else
#endif
					downsample->methods[ci] = fullsize_downsample;
   103ec:	e0fffa17 	ldw	r3,-24(fp)
   103f0:	e0bff717 	ldw	r2,-36(fp)
   103f4:	108000c4 	addi	r2,r2,3
   103f8:	1085883a 	add	r2,r2,r2
   103fc:	1085883a 	add	r2,r2,r2
   10400:	1885883a 	add	r2,r3,r2
   10404:	00c00074 	movhi	r3,1
   10408:	18fd7104 	addi	r3,r3,-2620
   1040c:	10c00015 	stw	r3,0(r2)
			h_in_group = cinfo->max_h_samp_factor;
			v_in_group = cinfo->max_v_samp_factor;
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
   10410:	00006706 	br	105b0 <jinit_downsampler+0x37c>
					downsample->methods[ci] = fullsize_smooth_downsample;
					downsample->pub.need_context_rows = TRUE;
				} else
#endif
					downsample->methods[ci] = fullsize_downsample;
			} else if (h_in_group == h_out_group * 2 &&
   10414:	e0bffb17 	ldw	r2,-20(fp)
   10418:	1085883a 	add	r2,r2,r2
   1041c:	1007883a 	mov	r3,r2
   10420:	e0bffd17 	ldw	r2,-12(fp)
   10424:	18800e1e 	bne	r3,r2,10460 <jinit_downsampler+0x22c>
   10428:	e0fffe17 	ldw	r3,-8(fp)
   1042c:	e0bffc17 	ldw	r2,-16(fp)
   10430:	18800b1e 	bne	r3,r2,10460 <jinit_downsampler+0x22c>
				v_in_group == v_out_group) {
					smoothok = FALSE;
   10434:	e03ff905 	stb	zero,-28(fp)
					downsample->methods[ci] = h2v1_downsample;
   10438:	e0fffa17 	ldw	r3,-24(fp)
   1043c:	e0bff717 	ldw	r2,-36(fp)
   10440:	108000c4 	addi	r2,r2,3
   10444:	1085883a 	add	r2,r2,r2
   10448:	1085883a 	add	r2,r2,r2
   1044c:	1885883a 	add	r2,r3,r2
   10450:	00c00074 	movhi	r3,1
   10454:	18fd9d04 	addi	r3,r3,-2444
   10458:	10c00015 	stw	r3,0(r2)
   1045c:	00005406 	br	105b0 <jinit_downsampler+0x37c>
			} else if (h_in_group == h_out_group * 2 &&
   10460:	e0bffb17 	ldw	r2,-20(fp)
   10464:	1085883a 	add	r2,r2,r2
   10468:	1007883a 	mov	r3,r2
   1046c:	e0bffd17 	ldw	r2,-12(fp)
   10470:	18801f1e 	bne	r3,r2,104f0 <jinit_downsampler+0x2bc>
				v_in_group == v_out_group * 2) {
   10474:	e0bffc17 	ldw	r2,-16(fp)
   10478:	1085883a 	add	r2,r2,r2
   1047c:	1007883a 	mov	r3,r2
					downsample->methods[ci] = fullsize_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group) {
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
   10480:	e0bffe17 	ldw	r2,-8(fp)
   10484:	18801a1e 	bne	r3,r2,104f0 <jinit_downsampler+0x2bc>
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
   10488:	e0bfff17 	ldw	r2,-4(fp)
   1048c:	10803517 	ldw	r2,212(r2)
   10490:	10000d26 	beq	r2,zero,104c8 <jinit_downsampler+0x294>
						downsample->methods[ci] = h2v2_smooth_downsample;
   10494:	e0fffa17 	ldw	r3,-24(fp)
   10498:	e0bff717 	ldw	r2,-36(fp)
   1049c:	108000c4 	addi	r2,r2,3
   104a0:	1085883a 	add	r2,r2,r2
   104a4:	1085883a 	add	r2,r2,r2
   104a8:	1885883a 	add	r2,r3,r2
   104ac:	00c00074 	movhi	r3,1
   104b0:	18fe5104 	addi	r3,r3,-1724
   104b4:	10c00015 	stw	r3,0(r2)
						downsample->pub.need_context_rows = TRUE;
   104b8:	e0bffa17 	ldw	r2,-24(fp)
   104bc:	00c00044 	movi	r3,1
   104c0:	10c00205 	stb	r3,8(r2)
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
   104c4:	00003a06 	br	105b0 <jinit_downsampler+0x37c>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
   104c8:	e0fffa17 	ldw	r3,-24(fp)
   104cc:	e0bff717 	ldw	r2,-36(fp)
   104d0:	108000c4 	addi	r2,r2,3
   104d4:	1085883a 	add	r2,r2,r2
   104d8:	1085883a 	add	r2,r2,r2
   104dc:	1885883a 	add	r2,r3,r2
   104e0:	00c00074 	movhi	r3,1
   104e4:	18fdec04 	addi	r3,r3,-2128
   104e8:	10c00015 	stw	r3,0(r2)
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
   104ec:	00003006 	br	105b0 <jinit_downsampler+0x37c>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
			} else if ((h_in_group % h_out_group) == 0 &&
   104f0:	e0bffd17 	ldw	r2,-12(fp)
   104f4:	1009883a 	mov	r4,r2
   104f8:	e17ffb17 	ldw	r5,-20(fp)
   104fc:	002c0e80 	call	2c0e8 <__modsi3>
   10500:	1000221e 	bne	r2,zero,1058c <jinit_downsampler+0x358>
				(v_in_group % v_out_group) == 0) {
   10504:	e0bffe17 	ldw	r2,-8(fp)
   10508:	1009883a 	mov	r4,r2
   1050c:	e17ffc17 	ldw	r5,-16(fp)
   10510:	002c0e80 	call	2c0e8 <__modsi3>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
			} else if ((h_in_group % h_out_group) == 0 &&
   10514:	10001d1e 	bne	r2,zero,1058c <jinit_downsampler+0x358>
				(v_in_group % v_out_group) == 0) {
					smoothok = FALSE;
   10518:	e03ff905 	stb	zero,-28(fp)
					downsample->methods[ci] = int_downsample;
   1051c:	e0fffa17 	ldw	r3,-24(fp)
   10520:	e0bff717 	ldw	r2,-36(fp)
   10524:	108000c4 	addi	r2,r2,3
   10528:	1085883a 	add	r2,r2,r2
   1052c:	1085883a 	add	r2,r2,r2
   10530:	1885883a 	add	r2,r3,r2
   10534:	00c00074 	movhi	r3,1
   10538:	18fcdb04 	addi	r3,r3,-3220
   1053c:	10c00015 	stw	r3,0(r2)
					downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
   10540:	e13ffd17 	ldw	r4,-12(fp)
   10544:	e17ffb17 	ldw	r5,-20(fp)
   10548:	002c0980 	call	2c098 <__divsi3>
   1054c:	1007883a 	mov	r3,r2
   10550:	e13ffa17 	ldw	r4,-24(fp)
   10554:	e0bff717 	ldw	r2,-36(fp)
   10558:	2085883a 	add	r2,r4,r2
   1055c:	10801704 	addi	r2,r2,92
   10560:	10c00005 	stb	r3,0(r2)
					downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
   10564:	e13ffe17 	ldw	r4,-8(fp)
   10568:	e17ffc17 	ldw	r5,-16(fp)
   1056c:	002c0980 	call	2c098 <__divsi3>
   10570:	1007883a 	mov	r3,r2
   10574:	e13ffa17 	ldw	r4,-24(fp)
   10578:	e0bff717 	ldw	r2,-36(fp)
   1057c:	2085883a 	add	r2,r4,r2
   10580:	10801904 	addi	r2,r2,100
   10584:	10c00085 	stb	r3,2(r2)
   10588:	00000906 	br	105b0 <jinit_downsampler+0x37c>
			} else
				ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	10800017 	ldw	r2,0(r2)
   10594:	00c009c4 	movi	r3,39
   10598:	10c00515 	stw	r3,20(r2)
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10800017 	ldw	r2,0(r2)
   105a4:	10800017 	ldw	r2,0(r2)
   105a8:	e13fff17 	ldw	r4,-4(fp)
   105ac:	103ee83a 	callr	r2
	if (cinfo->CCIR601_sampling)
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
   105b0:	e0bff717 	ldw	r2,-36(fp)
   105b4:	10800044 	addi	r2,r2,1
   105b8:	e0bff715 	stw	r2,-36(fp)
   105bc:	e0bff817 	ldw	r2,-32(fp)
   105c0:	10801604 	addi	r2,r2,88
   105c4:	e0bff815 	stw	r2,-32(fp)

	if (cinfo->CCIR601_sampling)
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
   105c8:	e0bfff17 	ldw	r2,-4(fp)
   105cc:	10801217 	ldw	r2,72(r2)
   105d0:	e0fff717 	ldw	r3,-36(fp)
   105d4:	18bf4516 	blt	r3,r2,102ec <jinit_downsampler+0xb8>
			} else
				ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
	}

#ifdef INPUT_SMOOTHING_SUPPORTED
	if (cinfo->smoothing_factor && !smoothok)
   105d8:	e0bfff17 	ldw	r2,-4(fp)
   105dc:	10803517 	ldw	r2,212(r2)
   105e0:	10000c26 	beq	r2,zero,10614 <jinit_downsampler+0x3e0>
   105e4:	e0bff903 	ldbu	r2,-28(fp)
   105e8:	10000a1e 	bne	r2,zero,10614 <jinit_downsampler+0x3e0>
		TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
   105ec:	e0bfff17 	ldw	r2,-4(fp)
   105f0:	10800017 	ldw	r2,0(r2)
   105f4:	00c01944 	movi	r3,101
   105f8:	10c00515 	stw	r3,20(r2)
   105fc:	e0bfff17 	ldw	r2,-4(fp)
   10600:	10800017 	ldw	r2,0(r2)
   10604:	10800117 	ldw	r2,4(r2)
   10608:	e13fff17 	ldw	r4,-4(fp)
   1060c:	000b883a 	mov	r5,zero
   10610:	103ee83a 	callr	r2
#endif
}
   10614:	e037883a 	mov	sp,fp
   10618:	dfc00117 	ldw	ra,4(sp)
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00204 	addi	sp,sp,8
   10624:	f800283a 	ret

00010628 <jpeg_write_coefficients>:
* typically will be realized during this routine and filled afterwards.
*/

GLOBAL(void)
	jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
{
   10628:	defffc04 	addi	sp,sp,-16
   1062c:	dfc00315 	stw	ra,12(sp)
   10630:	df000215 	stw	fp,8(sp)
   10634:	df000204 	addi	fp,sp,8
   10638:	e13ffe15 	stw	r4,-8(fp)
   1063c:	e17fff15 	stw	r5,-4(fp)
	if (cinfo->global_state != CSTATE_START)
   10640:	e0bffe17 	ldw	r2,-8(fp)
   10644:	10800517 	ldw	r2,20(r2)
   10648:	10801920 	cmpeqi	r2,r2,100
   1064c:	10000e1e 	bne	r2,zero,10688 <jpeg_write_coefficients+0x60>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   10650:	e0bffe17 	ldw	r2,-8(fp)
   10654:	10800017 	ldw	r2,0(r2)
   10658:	00c00544 	movi	r3,21
   1065c:	10c00515 	stw	r3,20(r2)
   10660:	e0bffe17 	ldw	r2,-8(fp)
   10664:	10800017 	ldw	r2,0(r2)
   10668:	e0fffe17 	ldw	r3,-8(fp)
   1066c:	18c00517 	ldw	r3,20(r3)
   10670:	10c00615 	stw	r3,24(r2)
   10674:	e0bffe17 	ldw	r2,-8(fp)
   10678:	10800017 	ldw	r2,0(r2)
   1067c:	10800017 	ldw	r2,0(r2)
   10680:	e13ffe17 	ldw	r4,-8(fp)
   10684:	103ee83a 	callr	r2
	/* Mark all tables to be written */
	jpeg_suppress_tables(cinfo, FALSE);
   10688:	e13ffe17 	ldw	r4,-8(fp)
   1068c:	000b883a 	mov	r5,zero
   10690:	0000c400 	call	c40 <jpeg_suppress_tables>
	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
   10694:	e0bffe17 	ldw	r2,-8(fp)
   10698:	10800017 	ldw	r2,0(r2)
   1069c:	10800417 	ldw	r2,16(r2)
   106a0:	e13ffe17 	ldw	r4,-8(fp)
   106a4:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
   106a8:	e0bffe17 	ldw	r2,-8(fp)
   106ac:	10800617 	ldw	r2,24(r2)
   106b0:	10800217 	ldw	r2,8(r2)
   106b4:	e13ffe17 	ldw	r4,-8(fp)
   106b8:	103ee83a 	callr	r2
	/* Perform master selection of active modules */
	transencode_master_selection(cinfo, coef_arrays);
   106bc:	e13ffe17 	ldw	r4,-8(fp)
   106c0:	e17fff17 	ldw	r5,-4(fp)
   106c4:	0010b880 	call	10b88 <transencode_master_selection>
	/* Wait for jpeg_finish_compress() call */
	cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
   106c8:	e0bffe17 	ldw	r2,-8(fp)
   106cc:	10003c15 	stw	zero,240(r2)
	cinfo->global_state = CSTATE_WRCOEFS;
   106d0:	e0bffe17 	ldw	r2,-8(fp)
   106d4:	00c019c4 	movi	r3,103
   106d8:	10c00515 	stw	r3,20(r2)
}
   106dc:	e037883a 	mov	sp,fp
   106e0:	dfc00117 	ldw	ra,4(sp)
   106e4:	df000017 	ldw	fp,0(sp)
   106e8:	dec00204 	addi	sp,sp,8
   106ec:	f800283a 	ret

000106f0 <jpeg_copy_critical_parameters>:
*/

GLOBAL(void)
	jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
	j_compress_ptr dstinfo)
{
   106f0:	defff404 	addi	sp,sp,-48
   106f4:	dfc00b15 	stw	ra,44(sp)
   106f8:	df000a15 	stw	fp,40(sp)
   106fc:	df000a04 	addi	fp,sp,40
   10700:	e13ffe15 	stw	r4,-8(fp)
   10704:	e17fff15 	stw	r5,-4(fp)
	jpeg_component_info *incomp, *outcomp;
	JQUANT_TBL *c_quant, *slot_quant;
	int tblno, ci, coefi;

	/* Safety check to ensure start_compress not called yet. */
	if (dstinfo->global_state != CSTATE_START)
   10708:	e0bfff17 	ldw	r2,-4(fp)
   1070c:	10800517 	ldw	r2,20(r2)
   10710:	10801920 	cmpeqi	r2,r2,100
   10714:	10000e1e 	bne	r2,zero,10750 <jpeg_copy_critical_parameters+0x60>
		ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
   10718:	e0bfff17 	ldw	r2,-4(fp)
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	00c00544 	movi	r3,21
   10724:	10c00515 	stw	r3,20(r2)
   10728:	e0bfff17 	ldw	r2,-4(fp)
   1072c:	10800017 	ldw	r2,0(r2)
   10730:	e0ffff17 	ldw	r3,-4(fp)
   10734:	18c00517 	ldw	r3,20(r3)
   10738:	10c00615 	stw	r3,24(r2)
   1073c:	e0bfff17 	ldw	r2,-4(fp)
   10740:	10800017 	ldw	r2,0(r2)
   10744:	10800017 	ldw	r2,0(r2)
   10748:	e13fff17 	ldw	r4,-4(fp)
   1074c:	103ee83a 	callr	r2
	/* Copy fundamental image dimensions */
	dstinfo->image_width = srcinfo->image_width;
   10750:	e0bffe17 	ldw	r2,-8(fp)
   10754:	10c00717 	ldw	r3,28(r2)
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	10c00715 	stw	r3,28(r2)
	dstinfo->image_height = srcinfo->image_height;
   10760:	e0bffe17 	ldw	r2,-8(fp)
   10764:	10c00817 	ldw	r3,32(r2)
   10768:	e0bfff17 	ldw	r2,-4(fp)
   1076c:	10c00815 	stw	r3,32(r2)
	dstinfo->input_components = srcinfo->num_components;
   10770:	e0bffe17 	ldw	r2,-8(fp)
   10774:	10c00917 	ldw	r3,36(r2)
   10778:	e0bfff17 	ldw	r2,-4(fp)
   1077c:	10c00915 	stw	r3,36(r2)
	dstinfo->in_color_space = srcinfo->jpeg_color_space;
   10780:	e0bffe17 	ldw	r2,-8(fp)
   10784:	10c00a17 	ldw	r3,40(r2)
   10788:	e0bfff17 	ldw	r2,-4(fp)
   1078c:	10c00a15 	stw	r3,40(r2)
	dstinfo->jpeg_width = srcinfo->output_width;
   10790:	e0bffe17 	ldw	r2,-8(fp)
   10794:	10c01717 	ldw	r3,92(r2)
   10798:	e0bfff17 	ldw	r2,-4(fp)
   1079c:	10c00f15 	stw	r3,60(r2)
	dstinfo->jpeg_height = srcinfo->output_height;
   107a0:	e0bffe17 	ldw	r2,-8(fp)
   107a4:	10c01817 	ldw	r3,96(r2)
   107a8:	e0bfff17 	ldw	r2,-4(fp)
   107ac:	10c01015 	stw	r3,64(r2)
	dstinfo->min_DCT_h_scaled_size = srcinfo->min_DCT_h_scaled_size;
   107b0:	e0bffe17 	ldw	r2,-8(fp)
   107b4:	10c04617 	ldw	r3,280(r2)
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	10c04015 	stw	r3,256(r2)
	dstinfo->min_DCT_v_scaled_size = srcinfo->min_DCT_v_scaled_size;
   107c0:	e0bffe17 	ldw	r2,-8(fp)
   107c4:	10c04717 	ldw	r3,284(r2)
   107c8:	e0bfff17 	ldw	r2,-4(fp)
   107cc:	10c04115 	stw	r3,260(r2)
	/* Initialize all parameters to default values */
	jpeg_set_defaults(dstinfo);
   107d0:	e13fff17 	ldw	r4,-4(fp)
   107d4:	000d5880 	call	d588 <jpeg_set_defaults>
	/* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
	* Fix it to get the right header markers for the image colorspace.
	*/
	jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
   107d8:	e0bffe17 	ldw	r2,-8(fp)
   107dc:	10800a17 	ldw	r2,40(r2)
   107e0:	e13fff17 	ldw	r4,-4(fp)
   107e4:	100b883a 	mov	r5,r2
   107e8:	000d8740 	call	d874 <jpeg_set_colorspace>
	dstinfo->data_precision = srcinfo->data_precision;
   107ec:	e0bffe17 	ldw	r2,-8(fp)
   107f0:	10c03017 	ldw	r3,192(r2)
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	10c01115 	stw	r3,68(r2)
	dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
   107fc:	e0bffe17 	ldw	r2,-8(fp)
   10800:	10c04283 	ldbu	r3,266(r2)
   10804:	e0bfff17 	ldw	r2,-4(fp)
   10808:	10c033c5 	stb	r3,207(r2)
	/* Copy the source's quantization tables. */
	for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
   1080c:	e03ff815 	stw	zero,-32(fp)
   10810:	00002a06 	br	108bc <jpeg_copy_critical_parameters+0x1cc>
		if (srcinfo->quant_tbl_ptrs[tblno] != NULL) {
   10814:	e0fffe17 	ldw	r3,-8(fp)
   10818:	e0bff817 	ldw	r2,-32(fp)
   1081c:	10800904 	addi	r2,r2,36
   10820:	1085883a 	add	r2,r2,r2
   10824:	1085883a 	add	r2,r2,r2
   10828:	1885883a 	add	r2,r3,r2
   1082c:	10800017 	ldw	r2,0(r2)
   10830:	10001f26 	beq	r2,zero,108b0 <jpeg_copy_critical_parameters+0x1c0>
			qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
   10834:	e0bff817 	ldw	r2,-32(fp)
   10838:	10800544 	addi	r2,r2,21
   1083c:	1085883a 	add	r2,r2,r2
   10840:	1085883a 	add	r2,r2,r2
   10844:	e0ffff17 	ldw	r3,-4(fp)
   10848:	1885883a 	add	r2,r3,r2
   1084c:	e0bffb15 	stw	r2,-20(fp)
			if (*qtblptr == NULL)
   10850:	e0bffb17 	ldw	r2,-20(fp)
   10854:	10800017 	ldw	r2,0(r2)
   10858:	1000041e 	bne	r2,zero,1086c <jpeg_copy_critical_parameters+0x17c>
				*qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
   1085c:	e13fff17 	ldw	r4,-4(fp)
   10860:	000cf800 	call	cf80 <jpeg_alloc_quant_table>
   10864:	e0fffb17 	ldw	r3,-20(fp)
   10868:	18800015 	stw	r2,0(r3)
			MEMCOPY((*qtblptr)->quantval,
   1086c:	e0bffb17 	ldw	r2,-20(fp)
   10870:	10800017 	ldw	r2,0(r2)
   10874:	1007883a 	mov	r3,r2
   10878:	e13ffe17 	ldw	r4,-8(fp)
   1087c:	e0bff817 	ldw	r2,-32(fp)
   10880:	10800904 	addi	r2,r2,36
   10884:	1085883a 	add	r2,r2,r2
   10888:	1085883a 	add	r2,r2,r2
   1088c:	2085883a 	add	r2,r4,r2
   10890:	10800017 	ldw	r2,0(r2)
   10894:	1809883a 	mov	r4,r3
   10898:	100b883a 	mov	r5,r2
   1089c:	01802004 	movi	r6,128
   108a0:	002eaec0 	call	2eaec <memcpy>
				srcinfo->quant_tbl_ptrs[tblno]->quantval,
				SIZEOF((*qtblptr)->quantval));
			(*qtblptr)->sent_table = FALSE;
   108a4:	e0bffb17 	ldw	r2,-20(fp)
   108a8:	10800017 	ldw	r2,0(r2)
   108ac:	10002005 	stb	zero,128(r2)
	*/
	jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
	dstinfo->data_precision = srcinfo->data_precision;
	dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
	/* Copy the source's quantization tables. */
	for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
   108b0:	e0bff817 	ldw	r2,-32(fp)
   108b4:	10800044 	addi	r2,r2,1
   108b8:	e0bff815 	stw	r2,-32(fp)
   108bc:	e0bff817 	ldw	r2,-32(fp)
   108c0:	10800110 	cmplti	r2,r2,4
   108c4:	103fd31e 	bne	r2,zero,10814 <jpeg_copy_critical_parameters+0x124>
		}
	}
	/* Copy the source's per-component info.
	* Note we assume jpeg_set_defaults has allocated the dest comp_info array.
	*/
	dstinfo->num_components = srcinfo->num_components;
   108c8:	e0bffe17 	ldw	r2,-8(fp)
   108cc:	10c00917 	ldw	r3,36(r2)
   108d0:	e0bfff17 	ldw	r2,-4(fp)
   108d4:	10c01215 	stw	r3,72(r2)
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
   108d8:	e0bfff17 	ldw	r2,-4(fp)
   108dc:	10801217 	ldw	r2,72(r2)
   108e0:	0080040e 	bge	zero,r2,108f4 <jpeg_copy_critical_parameters+0x204>
   108e4:	e0bfff17 	ldw	r2,-4(fp)
   108e8:	10801217 	ldw	r2,72(r2)
   108ec:	108002d0 	cmplti	r2,r2,11
   108f0:	1000121e 	bne	r2,zero,1093c <jpeg_copy_critical_parameters+0x24c>
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
   108f4:	e0bfff17 	ldw	r2,-4(fp)
   108f8:	10800017 	ldw	r2,0(r2)
   108fc:	00c006c4 	movi	r3,27
   10900:	10c00515 	stw	r3,20(r2)
   10904:	e0bfff17 	ldw	r2,-4(fp)
   10908:	10800017 	ldw	r2,0(r2)
   1090c:	e0ffff17 	ldw	r3,-4(fp)
   10910:	18c01217 	ldw	r3,72(r3)
   10914:	10c00615 	stw	r3,24(r2)
   10918:	e0bfff17 	ldw	r2,-4(fp)
   1091c:	10800017 	ldw	r2,0(r2)
   10920:	00c00284 	movi	r3,10
   10924:	10c00715 	stw	r3,28(r2)
   10928:	e0bfff17 	ldw	r2,-4(fp)
   1092c:	10800017 	ldw	r2,0(r2)
   10930:	10800017 	ldw	r2,0(r2)
   10934:	e13fff17 	ldw	r4,-4(fp)
   10938:	103ee83a 	callr	r2
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
   1093c:	e03ff915 	stw	zero,-28(fp)
   10940:	e0bffe17 	ldw	r2,-8(fp)
   10944:	10803117 	ldw	r2,196(r2)
   10948:	e0bff615 	stw	r2,-40(fp)
   1094c:	e0bfff17 	ldw	r2,-4(fp)
   10950:	10801417 	ldw	r2,80(r2)
   10954:	e0bff715 	stw	r2,-36(fp)
   10958:	00006506 	br	10af0 <jpeg_copy_critical_parameters+0x400>
		ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
			outcomp->component_id = incomp->component_id;
   1095c:	e0bff617 	ldw	r2,-40(fp)
   10960:	10c00017 	ldw	r3,0(r2)
   10964:	e0bff717 	ldw	r2,-36(fp)
   10968:	10c00015 	stw	r3,0(r2)
			outcomp->h_samp_factor = incomp->h_samp_factor;
   1096c:	e0bff617 	ldw	r2,-40(fp)
   10970:	10c00217 	ldw	r3,8(r2)
   10974:	e0bff717 	ldw	r2,-36(fp)
   10978:	10c00215 	stw	r3,8(r2)
			outcomp->v_samp_factor = incomp->v_samp_factor;
   1097c:	e0bff617 	ldw	r2,-40(fp)
   10980:	10c00317 	ldw	r3,12(r2)
   10984:	e0bff717 	ldw	r2,-36(fp)
   10988:	10c00315 	stw	r3,12(r2)
			outcomp->quant_tbl_no = incomp->quant_tbl_no;
   1098c:	e0bff617 	ldw	r2,-40(fp)
   10990:	10c00417 	ldw	r3,16(r2)
   10994:	e0bff717 	ldw	r2,-36(fp)
   10998:	10c00415 	stw	r3,16(r2)
			/* Make sure saved quantization table for component matches the qtable
			* slot.  If not, the input file re-used this qtable slot.
			* IJG encoder currently cannot duplicate this.
			*/
			tblno = outcomp->quant_tbl_no;
   1099c:	e0bff717 	ldw	r2,-36(fp)
   109a0:	10800417 	ldw	r2,16(r2)
   109a4:	e0bff815 	stw	r2,-32(fp)
			if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
   109a8:	e0bff817 	ldw	r2,-32(fp)
   109ac:	10000b16 	blt	r2,zero,109dc <jpeg_copy_critical_parameters+0x2ec>
   109b0:	e0bff817 	ldw	r2,-32(fp)
   109b4:	10800108 	cmpgei	r2,r2,4
   109b8:	1000081e 	bne	r2,zero,109dc <jpeg_copy_critical_parameters+0x2ec>
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
   109bc:	e0fffe17 	ldw	r3,-8(fp)
   109c0:	e0bff817 	ldw	r2,-32(fp)
   109c4:	10800904 	addi	r2,r2,36
   109c8:	1085883a 	add	r2,r2,r2
   109cc:	1085883a 	add	r2,r2,r2
   109d0:	1885883a 	add	r2,r3,r2
   109d4:	10800017 	ldw	r2,0(r2)
			/* Make sure saved quantization table for component matches the qtable
			* slot.  If not, the input file re-used this qtable slot.
			* IJG encoder currently cannot duplicate this.
			*/
			tblno = outcomp->quant_tbl_no;
			if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
   109d8:	10000d1e 	bne	r2,zero,10a10 <jpeg_copy_critical_parameters+0x320>
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
				ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
   109dc:	e0bfff17 	ldw	r2,-4(fp)
   109e0:	10800017 	ldw	r2,0(r2)
   109e4:	00c00d84 	movi	r3,54
   109e8:	10c00515 	stw	r3,20(r2)
   109ec:	e0bfff17 	ldw	r2,-4(fp)
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	e0fff817 	ldw	r3,-32(fp)
   109f8:	10c00615 	stw	r3,24(r2)
   109fc:	e0bfff17 	ldw	r2,-4(fp)
   10a00:	10800017 	ldw	r2,0(r2)
   10a04:	10800017 	ldw	r2,0(r2)
   10a08:	e13fff17 	ldw	r4,-4(fp)
   10a0c:	103ee83a 	callr	r2
			slot_quant = srcinfo->quant_tbl_ptrs[tblno];
   10a10:	e0fffe17 	ldw	r3,-8(fp)
   10a14:	e0bff817 	ldw	r2,-32(fp)
   10a18:	10800904 	addi	r2,r2,36
   10a1c:	1085883a 	add	r2,r2,r2
   10a20:	1085883a 	add	r2,r2,r2
   10a24:	1885883a 	add	r2,r3,r2
   10a28:	10800017 	ldw	r2,0(r2)
   10a2c:	e0bffc15 	stw	r2,-16(fp)
			c_quant = incomp->quant_table;
   10a30:	e0bff617 	ldw	r2,-40(fp)
   10a34:	10801417 	ldw	r2,80(r2)
   10a38:	e0bffd15 	stw	r2,-12(fp)
			if (c_quant != NULL) {
   10a3c:	e0bffd17 	ldw	r2,-12(fp)
   10a40:	10002226 	beq	r2,zero,10acc <jpeg_copy_critical_parameters+0x3dc>
				for (coefi = 0; coefi < DCTSIZE2; coefi++) {
   10a44:	e03ffa15 	stw	zero,-24(fp)
   10a48:	00001d06 	br	10ac0 <jpeg_copy_critical_parameters+0x3d0>
					if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
   10a4c:	e0fffd17 	ldw	r3,-12(fp)
   10a50:	e0bffa17 	ldw	r2,-24(fp)
   10a54:	1085883a 	add	r2,r2,r2
   10a58:	1885883a 	add	r2,r3,r2
   10a5c:	10c0000b 	ldhu	r3,0(r2)
   10a60:	e13ffc17 	ldw	r4,-16(fp)
   10a64:	e0bffa17 	ldw	r2,-24(fp)
   10a68:	1085883a 	add	r2,r2,r2
   10a6c:	2085883a 	add	r2,r4,r2
   10a70:	1080000b 	ldhu	r2,0(r2)
   10a74:	18ffffcc 	andi	r3,r3,65535
   10a78:	10bfffcc 	andi	r2,r2,65535
   10a7c:	18800d26 	beq	r3,r2,10ab4 <jpeg_copy_critical_parameters+0x3c4>
						ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
   10a80:	e0bfff17 	ldw	r2,-4(fp)
   10a84:	10800017 	ldw	r2,0(r2)
   10a88:	00c00b44 	movi	r3,45
   10a8c:	10c00515 	stw	r3,20(r2)
   10a90:	e0bfff17 	ldw	r2,-4(fp)
   10a94:	10800017 	ldw	r2,0(r2)
   10a98:	e0fff817 	ldw	r3,-32(fp)
   10a9c:	10c00615 	stw	r3,24(r2)
   10aa0:	e0bfff17 	ldw	r2,-4(fp)
   10aa4:	10800017 	ldw	r2,0(r2)
   10aa8:	10800017 	ldw	r2,0(r2)
   10aac:	e13fff17 	ldw	r4,-4(fp)
   10ab0:	103ee83a 	callr	r2
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
				ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
			slot_quant = srcinfo->quant_tbl_ptrs[tblno];
			c_quant = incomp->quant_table;
			if (c_quant != NULL) {
				for (coefi = 0; coefi < DCTSIZE2; coefi++) {
   10ab4:	e0bffa17 	ldw	r2,-24(fp)
   10ab8:	10800044 	addi	r2,r2,1
   10abc:	e0bffa15 	stw	r2,-24(fp)
   10ac0:	e0bffa17 	ldw	r2,-24(fp)
   10ac4:	10801010 	cmplti	r2,r2,64
   10ac8:	103fe01e 	bne	r2,zero,10a4c <jpeg_copy_critical_parameters+0x35c>
	dstinfo->num_components = srcinfo->num_components;
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
		ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
   10acc:	e0bff917 	ldw	r2,-28(fp)
   10ad0:	10800044 	addi	r2,r2,1
   10ad4:	e0bff915 	stw	r2,-28(fp)
   10ad8:	e0bff617 	ldw	r2,-40(fp)
   10adc:	10801604 	addi	r2,r2,88
   10ae0:	e0bff615 	stw	r2,-40(fp)
   10ae4:	e0bff717 	ldw	r2,-36(fp)
   10ae8:	10801604 	addi	r2,r2,88
   10aec:	e0bff715 	stw	r2,-36(fp)
   10af0:	e0bfff17 	ldw	r2,-4(fp)
   10af4:	10801217 	ldw	r2,72(r2)
	*/
	dstinfo->num_components = srcinfo->num_components;
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
   10af8:	e0fff917 	ldw	r3,-28(fp)
   10afc:	18bf9716 	blt	r3,r2,1095c <jpeg_copy_critical_parameters+0x26c>
	* if the application chooses to copy JFIF 1.02 extension markers from
	* the source file, we need to copy the version to make sure we don't
	* emit a file that has 1.02 extensions but a claimed version of 1.01.
	* We will *not*, however, copy version info from mislabeled "2.01" files.
	*/
	if (srcinfo->saw_JFIF_marker) {
   10b00:	e0bffe17 	ldw	r2,-8(fp)
   10b04:	10804003 	ldbu	r2,256(r2)
   10b08:	10803fcc 	andi	r2,r2,255
   10b0c:	10001926 	beq	r2,zero,10b74 <jpeg_copy_critical_parameters+0x484>
		if (srcinfo->JFIF_major_version == 1) {
   10b10:	e0bffe17 	ldw	r2,-8(fp)
   10b14:	10804043 	ldbu	r2,257(r2)
   10b18:	10803fcc 	andi	r2,r2,255
   10b1c:	10800058 	cmpnei	r2,r2,1
   10b20:	1000081e 	bne	r2,zero,10b44 <jpeg_copy_critical_parameters+0x454>
			dstinfo->JFIF_major_version = srcinfo->JFIF_major_version;
   10b24:	e0bffe17 	ldw	r2,-8(fp)
   10b28:	10c04043 	ldbu	r3,257(r2)
   10b2c:	e0bfff17 	ldw	r2,-4(fp)
   10b30:	10c03945 	stb	r3,229(r2)
			dstinfo->JFIF_minor_version = srcinfo->JFIF_minor_version;
   10b34:	e0bffe17 	ldw	r2,-8(fp)
   10b38:	10c04083 	ldbu	r3,258(r2)
   10b3c:	e0bfff17 	ldw	r2,-4(fp)
   10b40:	10c03985 	stb	r3,230(r2)
		}
		dstinfo->density_unit = srcinfo->density_unit;
   10b44:	e0bffe17 	ldw	r2,-8(fp)
   10b48:	10c040c3 	ldbu	r3,259(r2)
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	10c039c5 	stb	r3,231(r2)
		dstinfo->X_density = srcinfo->X_density;
   10b54:	e0bffe17 	ldw	r2,-8(fp)
   10b58:	10c0410b 	ldhu	r3,260(r2)
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	10c03a0d 	sth	r3,232(r2)
		dstinfo->Y_density = srcinfo->Y_density;
   10b64:	e0bffe17 	ldw	r2,-8(fp)
   10b68:	10c0418b 	ldhu	r3,262(r2)
   10b6c:	e0bfff17 	ldw	r2,-4(fp)
   10b70:	10c03a8d 	sth	r3,234(r2)
	}
}
   10b74:	e037883a 	mov	sp,fp
   10b78:	dfc00117 	ldw	ra,4(sp)
   10b7c:	df000017 	ldw	fp,0(sp)
   10b80:	dec00204 	addi	sp,sp,8
   10b84:	f800283a 	ret

00010b88 <transencode_master_selection>:
*/

LOCAL(void)
	transencode_master_selection (j_compress_ptr cinfo,
	jvirt_barray_ptr * coef_arrays)
{
   10b88:	defffc04 	addi	sp,sp,-16
   10b8c:	dfc00315 	stw	ra,12(sp)
   10b90:	df000215 	stw	fp,8(sp)
   10b94:	df000204 	addi	fp,sp,8
   10b98:	e13ffe15 	stw	r4,-8(fp)
   10b9c:	e17fff15 	stw	r5,-4(fp)
	/* Initialize master control (includes parameter checking/processing) */
	jinit_c_master_control(cinfo, TRUE /* transcode only */);
   10ba0:	e13ffe17 	ldw	r4,-8(fp)
   10ba4:	01400044 	movi	r5,1
   10ba8:	000ccd00 	call	ccd0 <jinit_c_master_control>

	/* Entropy encoding: either Huffman or arithmetic coding. */
	if (cinfo->arith_code)
   10bac:	e0bffe17 	ldw	r2,-8(fp)
   10bb0:	10803343 	ldbu	r2,205(r2)
   10bb4:	10803fcc 	andi	r2,r2,255
   10bb8:	10000326 	beq	r2,zero,10bc8 <transencode_master_selection+0x40>
		jinit_arith_encoder(cinfo);
   10bbc:	e13ffe17 	ldw	r4,-8(fp)
   10bc0:	00039900 	call	3990 <jinit_arith_encoder>
   10bc4:	00000206 	br	10bd0 <transencode_master_selection+0x48>
	else {
		jinit_huff_encoder(cinfo);
   10bc8:	e13ffe17 	ldw	r4,-8(fp)
   10bcc:	00097080 	call	9708 <jinit_huff_encoder>
	}

	/* We need a special coefficient buffer controller. */
	transencode_coef_controller(cinfo, coef_arrays);
   10bd0:	e13ffe17 	ldw	r4,-8(fp)
   10bd4:	e17fff17 	ldw	r5,-4(fp)
   10bd8:	00111580 	call	11158 <transencode_coef_controller>

	jinit_marker_writer(cinfo);
   10bdc:	e13ffe17 	ldw	r4,-8(fp)
   10be0:	000b0480 	call	b048 <jinit_marker_writer>

	/* We can now tell the memory manager to allocate virtual arrays. */
	(*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
   10be4:	e0bffe17 	ldw	r2,-8(fp)
   10be8:	10800117 	ldw	r2,4(r2)
   10bec:	10800617 	ldw	r2,24(r2)
   10bf0:	e13ffe17 	ldw	r4,-8(fp)
   10bf4:	103ee83a 	callr	r2

	/* Write the datastream header (SOI, JFIF) immediately.
	* Frame and scan headers are postponed till later.
	* This lets application insert special markers after the SOI.
	*/
	(*cinfo->marker->write_file_header) (cinfo);
   10bf8:	e0bffe17 	ldw	r2,-8(fp)
   10bfc:	10806017 	ldw	r2,384(r2)
   10c00:	10800017 	ldw	r2,0(r2)
   10c04:	e13ffe17 	ldw	r4,-8(fp)
   10c08:	103ee83a 	callr	r2
}
   10c0c:	e037883a 	mov	sp,fp
   10c10:	dfc00117 	ldw	ra,4(sp)
   10c14:	df000017 	ldw	fp,0(sp)
   10c18:	dec00204 	addi	sp,sp,8
   10c1c:	f800283a 	ret

00010c20 <start_iMCU_row>:


LOCAL(void)
	start_iMCU_row (j_compress_ptr cinfo)
	/* Reset within-iMCU-row counters for a new row */
{
   10c20:	defffd04 	addi	sp,sp,-12
   10c24:	df000215 	stw	fp,8(sp)
   10c28:	df000204 	addi	fp,sp,8
   10c2c:	e13fff15 	stw	r4,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
   10c30:	e0bfff17 	ldw	r2,-4(fp)
   10c34:	10805f17 	ldw	r2,380(r2)
   10c38:	e0bffe15 	stw	r2,-8(fp)

	/* In an interleaved scan, an MCU row is the same as an iMCU row.
	* In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
	* But at the bottom of the image, process only what's left.
	*/
	if (cinfo->comps_in_scan > 1) {
   10c3c:	e0bfff17 	ldw	r2,-4(fp)
   10c40:	10804317 	ldw	r2,268(r2)
   10c44:	10800090 	cmplti	r2,r2,2
   10c48:	1000041e 	bne	r2,zero,10c5c <start_iMCU_row+0x3c>
		coef->MCU_rows_per_iMCU_row = 1;
   10c4c:	e0bffe17 	ldw	r2,-8(fp)
   10c50:	00c00044 	movi	r3,1
   10c54:	10c00515 	stw	r3,20(r2)
   10c58:	00001106 	br	10ca0 <start_iMCU_row+0x80>
	} else {
		if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
   10c5c:	e0bffe17 	ldw	r2,-8(fp)
   10c60:	10c00217 	ldw	r3,8(r2)
   10c64:	e0bfff17 	ldw	r2,-4(fp)
   10c68:	10804217 	ldw	r2,264(r2)
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	1880062e 	bgeu	r3,r2,10c8c <start_iMCU_row+0x6c>
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
   10c74:	e0bfff17 	ldw	r2,-4(fp)
   10c78:	10804417 	ldw	r2,272(r2)
   10c7c:	10c00317 	ldw	r3,12(r2)
   10c80:	e0bffe17 	ldw	r2,-8(fp)
   10c84:	10c00515 	stw	r3,20(r2)
   10c88:	00000506 	br	10ca0 <start_iMCU_row+0x80>
		else
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	10804417 	ldw	r2,272(r2)
   10c94:	10c01317 	ldw	r3,76(r2)
   10c98:	e0bffe17 	ldw	r2,-8(fp)
   10c9c:	10c00515 	stw	r3,20(r2)
	}

	coef->mcu_ctr = 0;
   10ca0:	e0bffe17 	ldw	r2,-8(fp)
   10ca4:	10000315 	stw	zero,12(r2)
	coef->MCU_vert_offset = 0;
   10ca8:	e0bffe17 	ldw	r2,-8(fp)
   10cac:	10000415 	stw	zero,16(r2)
}
   10cb0:	e037883a 	mov	sp,fp
   10cb4:	df000017 	ldw	fp,0(sp)
   10cb8:	dec00104 	addi	sp,sp,4
   10cbc:	f800283a 	ret

00010cc0 <start_pass_coef>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
   10cc0:	defffb04 	addi	sp,sp,-20
   10cc4:	dfc00415 	stw	ra,16(sp)
   10cc8:	df000315 	stw	fp,12(sp)
   10ccc:	df000304 	addi	fp,sp,12
   10cd0:	e13ffe15 	stw	r4,-8(fp)
   10cd4:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
   10cd8:	e0bffe17 	ldw	r2,-8(fp)
   10cdc:	10805f17 	ldw	r2,380(r2)
   10ce0:	e0bffd15 	stw	r2,-12(fp)

	if (pass_mode != JBUF_CRANK_DEST)
   10ce4:	e0bfff17 	ldw	r2,-4(fp)
   10ce8:	108000a0 	cmpeqi	r2,r2,2
   10cec:	1000091e 	bne	r2,zero,10d14 <start_pass_coef+0x54>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
   10cf0:	e0bffe17 	ldw	r2,-8(fp)
   10cf4:	10800017 	ldw	r2,0(r2)
   10cf8:	00c000c4 	movi	r3,3
   10cfc:	10c00515 	stw	r3,20(r2)
   10d00:	e0bffe17 	ldw	r2,-8(fp)
   10d04:	10800017 	ldw	r2,0(r2)
   10d08:	10800017 	ldw	r2,0(r2)
   10d0c:	e13ffe17 	ldw	r4,-8(fp)
   10d10:	103ee83a 	callr	r2

	coef->iMCU_row_num = 0;
   10d14:	e0bffd17 	ldw	r2,-12(fp)
   10d18:	10000215 	stw	zero,8(r2)
	start_iMCU_row(cinfo);
   10d1c:	e13ffe17 	ldw	r4,-8(fp)
   10d20:	0010c200 	call	10c20 <start_iMCU_row>
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <compress_output>:
* NB: input_buf is ignored; it is likely to be a NULL pointer.
*/

METHODDEF(boolean)
	compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
   10d38:	deffde04 	addi	sp,sp,-136
   10d3c:	dfc02115 	stw	ra,132(sp)
   10d40:	df002015 	stw	fp,128(sp)
   10d44:	dc401f15 	stw	r17,124(sp)
   10d48:	dc001e15 	stw	r16,120(sp)
   10d4c:	df001e04 	addi	fp,sp,120
   10d50:	e13ffe15 	stw	r4,-8(fp)
   10d54:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
   10d58:	e0bffe17 	ldw	r2,-8(fp)
   10d5c:	10805f17 	ldw	r2,380(r2)
   10d60:	e0bfea15 	stw	r2,-88(fp)
	JDIMENSION MCU_col_num;	/* index of current MCU within row */
	JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
   10d64:	e0bffe17 	ldw	r2,-8(fp)
   10d68:	10804817 	ldw	r2,288(r2)
   10d6c:	10bfffc4 	addi	r2,r2,-1
   10d70:	e0bfeb15 	stw	r2,-84(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
   10d74:	e0bffe17 	ldw	r2,-8(fp)
   10d78:	10804217 	ldw	r2,264(r2)
   10d7c:	10bfffc4 	addi	r2,r2,-1
   10d80:	e0bfec15 	stw	r2,-80(fp)
	JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
	JBLOCKROW buffer_ptr;
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
   10d84:	e03fe515 	stw	zero,-108(fp)
   10d88:	00002e06 	br	10e44 <compress_output+0x10c>
		compptr = cinfo->cur_comp_info[ci];
   10d8c:	e0fffe17 	ldw	r3,-8(fp)
   10d90:	e0bfe517 	ldw	r2,-108(fp)
   10d94:	10801104 	addi	r2,r2,68
   10d98:	1085883a 	add	r2,r2,r2
   10d9c:	1085883a 	add	r2,r2,r2
   10da0:	1885883a 	add	r2,r3,r2
   10da4:	10800017 	ldw	r2,0(r2)
   10da8:	e0bfed15 	stw	r2,-76(fp)
		buffer[ci] = (*cinfo->mem->access_virt_barray)
   10dac:	e0bffe17 	ldw	r2,-8(fp)
   10db0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
   10db4:	14400817 	ldw	r17,32(r2)
   10db8:	e0bfea17 	ldw	r2,-88(fp)
   10dbc:	10c00617 	ldw	r3,24(r2)
   10dc0:	e0bfed17 	ldw	r2,-76(fp)
   10dc4:	10800117 	ldw	r2,4(r2)
   10dc8:	1085883a 	add	r2,r2,r2
   10dcc:	1085883a 	add	r2,r2,r2
   10dd0:	1885883a 	add	r2,r3,r2
   10dd4:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
   10dd8:	e0bfea17 	ldw	r2,-88(fp)
   10ddc:	10c00217 	ldw	r3,8(r2)
   10de0:	e0bfed17 	ldw	r2,-76(fp)
   10de4:	10800317 	ldw	r2,12(r2)

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
   10de8:	1809883a 	mov	r4,r3
   10dec:	100b883a 	mov	r5,r2
   10df0:	002c1540 	call	2c154 <__mulsi3>
   10df4:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
   10df8:	e0bfed17 	ldw	r2,-76(fp)
   10dfc:	10800317 	ldw	r2,12(r2)

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
   10e00:	d8000015 	stw	zero,0(sp)
   10e04:	e13ffe17 	ldw	r4,-8(fp)
   10e08:	800b883a 	mov	r5,r16
   10e0c:	180d883a 	mov	r6,r3
   10e10:	100f883a 	mov	r7,r2
   10e14:	883ee83a 	callr	r17
   10e18:	1007883a 	mov	r3,r2
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
   10e1c:	e0bfe517 	ldw	r2,-108(fp)
   10e20:	1085883a 	add	r2,r2,r2
   10e24:	1085883a 	add	r2,r2,r2
   10e28:	e13fe304 	addi	r4,fp,-116
   10e2c:	2085883a 	add	r2,r4,r2
   10e30:	10800d04 	addi	r2,r2,52
   10e34:	10c00015 	stw	r3,0(r2)
	JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
	JBLOCKROW buffer_ptr;
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
   10e38:	e0bfe517 	ldw	r2,-108(fp)
   10e3c:	10800044 	addi	r2,r2,1
   10e40:	e0bfe515 	stw	r2,-108(fp)
   10e44:	e0bffe17 	ldw	r2,-8(fp)
   10e48:	10804317 	ldw	r2,268(r2)
   10e4c:	e0ffe517 	ldw	r3,-108(fp)
   10e50:	18bfce16 	blt	r3,r2,10d8c <compress_output+0x54>
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
   10e54:	e0bfea17 	ldw	r2,-88(fp)
   10e58:	10800417 	ldw	r2,16(r2)
   10e5c:	e0bfe815 	stw	r2,-96(fp)
   10e60:	0000aa06 	br	1110c <compress_output+0x3d4>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
   10e64:	e0bfea17 	ldw	r2,-88(fp)
   10e68:	10800317 	ldw	r2,12(r2)
   10e6c:	e0bfe315 	stw	r2,-116(fp)
   10e70:	00009d06 	br	110e8 <compress_output+0x3b0>
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
   10e74:	e03fe415 	stw	zero,-112(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
   10e78:	e03fe515 	stw	zero,-108(fp)
   10e7c:	00008206 	br	11088 <compress_output+0x350>
						compptr = cinfo->cur_comp_info[ci];
   10e80:	e0fffe17 	ldw	r3,-8(fp)
   10e84:	e0bfe517 	ldw	r2,-108(fp)
   10e88:	10801104 	addi	r2,r2,68
   10e8c:	1085883a 	add	r2,r2,r2
   10e90:	1085883a 	add	r2,r2,r2
   10e94:	1885883a 	add	r2,r3,r2
   10e98:	10800017 	ldw	r2,0(r2)
   10e9c:	e0bfed15 	stw	r2,-76(fp)
						start_col = MCU_col_num * compptr->MCU_width;
   10ea0:	e0bfed17 	ldw	r2,-76(fp)
   10ea4:	10800e17 	ldw	r2,56(r2)
   10ea8:	1009883a 	mov	r4,r2
   10eac:	e17fe317 	ldw	r5,-116(fp)
   10eb0:	002c1540 	call	2c154 <__mulsi3>
   10eb4:	e0bfee15 	stw	r2,-72(fp)
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
   10eb8:	e0ffe317 	ldw	r3,-116(fp)
   10ebc:	e0bfeb17 	ldw	r2,-84(fp)
   10ec0:	1880032e 	bgeu	r3,r2,10ed0 <compress_output+0x198>
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
   10ec4:	e0bfed17 	ldw	r2,-76(fp)
							: compptr->last_col_width;
   10ec8:	10800e17 	ldw	r2,56(r2)
   10ecc:	00000206 	br	10ed8 <compress_output+0x1a0>
   10ed0:	e0bfed17 	ldw	r2,-76(fp)
   10ed4:	10801217 	ldw	r2,72(r2)
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
   10ed8:	e0bfef15 	stw	r2,-68(fp)
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
   10edc:	e03fe715 	stw	zero,-100(fp)
   10ee0:	00006206 	br	1106c <compress_output+0x334>
							if (coef->iMCU_row_num < last_iMCU_row ||
   10ee4:	e0bfea17 	ldw	r2,-88(fp)
   10ee8:	10c00217 	ldw	r3,8(r2)
   10eec:	e0bfec17 	ldw	r2,-80(fp)
   10ef0:	18800636 	bltu	r3,r2,10f0c <compress_output+0x1d4>
								yindex+yoffset < compptr->last_row_height) {
   10ef4:	e0ffe717 	ldw	r3,-100(fp)
   10ef8:	e0bfe817 	ldw	r2,-96(fp)
   10efc:	1887883a 	add	r3,r3,r2
   10f00:	e0bfed17 	ldw	r2,-76(fp)
   10f04:	10801317 	ldw	r2,76(r2)
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
   10f08:	1880290e 	bge	r3,r2,10fb0 <compress_output+0x278>
								yindex+yoffset < compptr->last_row_height) {
									/* Fill in pointers to real blocks in this row */
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
   10f0c:	e0bfe517 	ldw	r2,-108(fp)
   10f10:	1085883a 	add	r2,r2,r2
   10f14:	1085883a 	add	r2,r2,r2
   10f18:	e0ffe304 	addi	r3,fp,-116
   10f1c:	1885883a 	add	r2,r3,r2
   10f20:	10800d04 	addi	r2,r2,52
   10f24:	10c00017 	ldw	r3,0(r2)
   10f28:	e13fe717 	ldw	r4,-100(fp)
   10f2c:	e0bfe817 	ldw	r2,-96(fp)
   10f30:	2085883a 	add	r2,r4,r2
   10f34:	1085883a 	add	r2,r2,r2
   10f38:	1085883a 	add	r2,r2,r2
   10f3c:	1885883a 	add	r2,r3,r2
   10f40:	10c00017 	ldw	r3,0(r2)
   10f44:	e0bfee17 	ldw	r2,-72(fp)
   10f48:	100491fa 	slli	r2,r2,7
   10f4c:	1885883a 	add	r2,r3,r2
   10f50:	e0bfe915 	stw	r2,-92(fp)
									for (xindex = 0; xindex < blockcnt; xindex++)
   10f54:	e03fe615 	stw	zero,-104(fp)
   10f58:	00001106 	br	10fa0 <compress_output+0x268>
										MCU_buffer[blkn++] = buffer_ptr++;
   10f5c:	e0bfe417 	ldw	r2,-112(fp)
   10f60:	1085883a 	add	r2,r2,r2
   10f64:	1085883a 	add	r2,r2,r2
   10f68:	e13fe304 	addi	r4,fp,-116
   10f6c:	2085883a 	add	r2,r4,r2
   10f70:	10801104 	addi	r2,r2,68
   10f74:	e0ffe917 	ldw	r3,-92(fp)
   10f78:	10c00015 	stw	r3,0(r2)
   10f7c:	e0bfe417 	ldw	r2,-112(fp)
   10f80:	10800044 	addi	r2,r2,1
   10f84:	e0bfe415 	stw	r2,-112(fp)
   10f88:	e0bfe917 	ldw	r2,-92(fp)
   10f8c:	10802004 	addi	r2,r2,128
   10f90:	e0bfe915 	stw	r2,-92(fp)
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
								yindex+yoffset < compptr->last_row_height) {
									/* Fill in pointers to real blocks in this row */
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
									for (xindex = 0; xindex < blockcnt; xindex++)
   10f94:	e0bfe617 	ldw	r2,-104(fp)
   10f98:	10800044 	addi	r2,r2,1
   10f9c:	e0bfe615 	stw	r2,-104(fp)
   10fa0:	e0ffe617 	ldw	r3,-104(fp)
   10fa4:	e0bfef17 	ldw	r2,-68(fp)
   10fa8:	18bfec16 	blt	r3,r2,10f5c <compress_output+0x224>
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
   10fac:	00000206 	br	10fb8 <compress_output+0x280>
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
									for (xindex = 0; xindex < blockcnt; xindex++)
										MCU_buffer[blkn++] = buffer_ptr++;
							} else {
								/* At bottom of image, need a whole row of dummy blocks */
								xindex = 0;
   10fb0:	e03fe615 	stw	zero,-104(fp)
							* Dummy blocks are filled in the same way as in jccoefct.c:
							* all zeroes in the AC entries, DC entries equal to previous
							* block's DC value.  The init routine has already zeroed the
							* AC entries, so we need only set the DC entries correctly.
							*/
							for (; xindex < compptr->MCU_width; xindex++) {
   10fb4:	00002606 	br	11050 <compress_output+0x318>
   10fb8:	00002506 	br	11050 <compress_output+0x318>
								MCU_buffer[blkn] = coef->dummy_buffer[blkn];
   10fbc:	e0ffea17 	ldw	r3,-88(fp)
   10fc0:	e0bfe417 	ldw	r2,-112(fp)
   10fc4:	108001c4 	addi	r2,r2,7
   10fc8:	1085883a 	add	r2,r2,r2
   10fcc:	1085883a 	add	r2,r2,r2
   10fd0:	1885883a 	add	r2,r3,r2
   10fd4:	10c00017 	ldw	r3,0(r2)
   10fd8:	e0bfe417 	ldw	r2,-112(fp)
   10fdc:	1085883a 	add	r2,r2,r2
   10fe0:	1085883a 	add	r2,r2,r2
   10fe4:	e13fe304 	addi	r4,fp,-116
   10fe8:	2085883a 	add	r2,r4,r2
   10fec:	10801104 	addi	r2,r2,68
   10ff0:	10c00015 	stw	r3,0(r2)
								MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
   10ff4:	e0bfe417 	ldw	r2,-112(fp)
   10ff8:	1085883a 	add	r2,r2,r2
   10ffc:	1085883a 	add	r2,r2,r2
   11000:	e0ffe304 	addi	r3,fp,-116
   11004:	1885883a 	add	r2,r3,r2
   11008:	10801104 	addi	r2,r2,68
   1100c:	10c00017 	ldw	r3,0(r2)
   11010:	e0bfe417 	ldw	r2,-112(fp)
   11014:	10bfffc4 	addi	r2,r2,-1
   11018:	1085883a 	add	r2,r2,r2
   1101c:	1085883a 	add	r2,r2,r2
   11020:	e13fe304 	addi	r4,fp,-116
   11024:	2085883a 	add	r2,r4,r2
   11028:	10801104 	addi	r2,r2,68
   1102c:	10800017 	ldw	r2,0(r2)
   11030:	1080000b 	ldhu	r2,0(r2)
   11034:	1880000d 	sth	r2,0(r3)
								blkn++;
   11038:	e0bfe417 	ldw	r2,-112(fp)
   1103c:	10800044 	addi	r2,r2,1
   11040:	e0bfe415 	stw	r2,-112(fp)
							* Dummy blocks are filled in the same way as in jccoefct.c:
							* all zeroes in the AC entries, DC entries equal to previous
							* block's DC value.  The init routine has already zeroed the
							* AC entries, so we need only set the DC entries correctly.
							*/
							for (; xindex < compptr->MCU_width; xindex++) {
   11044:	e0bfe617 	ldw	r2,-104(fp)
   11048:	10800044 	addi	r2,r2,1
   1104c:	e0bfe615 	stw	r2,-104(fp)
   11050:	e0bfed17 	ldw	r2,-76(fp)
   11054:	10800e17 	ldw	r2,56(r2)
   11058:	e0ffe617 	ldw	r3,-104(fp)
   1105c:	18bfd716 	blt	r3,r2,10fbc <compress_output+0x284>
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
   11060:	e0bfe717 	ldw	r2,-100(fp)
   11064:	10800044 	addi	r2,r2,1
   11068:	e0bfe715 	stw	r2,-100(fp)
   1106c:	e0bfed17 	ldw	r2,-76(fp)
   11070:	10800f17 	ldw	r2,60(r2)
   11074:	e0ffe717 	ldw	r3,-100(fp)
   11078:	18bf9a16 	blt	r3,r2,10ee4 <compress_output+0x1ac>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
   1107c:	e0bfe517 	ldw	r2,-108(fp)
   11080:	10800044 	addi	r2,r2,1
   11084:	e0bfe515 	stw	r2,-108(fp)
   11088:	e0bffe17 	ldw	r2,-8(fp)
   1108c:	10804317 	ldw	r2,268(r2)
   11090:	e0ffe517 	ldw	r3,-108(fp)
   11094:	18bf7a16 	blt	r3,r2,10e80 <compress_output+0x148>
								blkn++;
							}
						}
					}
					/* Try to write the MCU. */
					if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer)) {
   11098:	e0bffe17 	ldw	r2,-8(fp)
   1109c:	10806417 	ldw	r2,400(r2)
   110a0:	10c00117 	ldw	r3,4(r2)
   110a4:	e0bff404 	addi	r2,fp,-48
   110a8:	e13ffe17 	ldw	r4,-8(fp)
   110ac:	100b883a 	mov	r5,r2
   110b0:	183ee83a 	callr	r3
   110b4:	10803fcc 	andi	r2,r2,255
   110b8:	1000081e 	bne	r2,zero,110dc <compress_output+0x3a4>
						/* Suspension forced; update state counters and exit */
						coef->MCU_vert_offset = yoffset;
   110bc:	e0bfea17 	ldw	r2,-88(fp)
   110c0:	e0ffe817 	ldw	r3,-96(fp)
   110c4:	10c00415 	stw	r3,16(r2)
						coef->mcu_ctr = MCU_col_num;
   110c8:	e0bfea17 	ldw	r2,-88(fp)
   110cc:	e0ffe317 	ldw	r3,-116(fp)
   110d0:	10c00315 	stw	r3,12(r2)
						return FALSE;
   110d4:	0005883a 	mov	r2,zero
   110d8:	00001806 	br	1113c <compress_output+0x404>

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
   110dc:	e0bfe317 	ldw	r2,-116(fp)
   110e0:	10800044 	addi	r2,r2,1
   110e4:	e0bfe315 	stw	r2,-116(fp)
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
   110e8:	e0bffe17 	ldw	r2,-8(fp)
   110ec:	10804817 	ldw	r2,288(r2)
   110f0:	e0ffe317 	ldw	r3,-116(fp)
   110f4:	18bf5f36 	bltu	r3,r2,10e74 <compress_output+0x13c>
						coef->mcu_ctr = MCU_col_num;
						return FALSE;
					}
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
   110f8:	e0bfea17 	ldw	r2,-88(fp)
   110fc:	10000315 	stw	zero,12(r2)
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
   11100:	e0bfe817 	ldw	r2,-96(fp)
   11104:	10800044 	addi	r2,r2,1
   11108:	e0bfe815 	stw	r2,-96(fp)
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
   1110c:	e0bfea17 	ldw	r2,-88(fp)
   11110:	10800517 	ldw	r2,20(r2)
   11114:	e0ffe817 	ldw	r3,-96(fp)
   11118:	18bf5216 	blt	r3,r2,10e64 <compress_output+0x12c>
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
   1111c:	e0bfea17 	ldw	r2,-88(fp)
   11120:	10800217 	ldw	r2,8(r2)
   11124:	10c00044 	addi	r3,r2,1
   11128:	e0bfea17 	ldw	r2,-88(fp)
   1112c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
   11130:	e13ffe17 	ldw	r4,-8(fp)
   11134:	0010c200 	call	10c20 <start_iMCU_row>
	return TRUE;
   11138:	00800044 	movi	r2,1
}
   1113c:	e037883a 	mov	sp,fp
   11140:	dfc00317 	ldw	ra,12(sp)
   11144:	df000217 	ldw	fp,8(sp)
   11148:	dc400117 	ldw	r17,4(sp)
   1114c:	dc000017 	ldw	r16,0(sp)
   11150:	dec00404 	addi	sp,sp,16
   11154:	f800283a 	ret

00011158 <transencode_coef_controller>:
*/

LOCAL(void)
	transencode_coef_controller (j_compress_ptr cinfo,
	jvirt_barray_ptr * coef_arrays)
{
   11158:	defff904 	addi	sp,sp,-28
   1115c:	dfc00615 	stw	ra,24(sp)
   11160:	df000515 	stw	fp,20(sp)
   11164:	df000504 	addi	fp,sp,20
   11168:	e13ffe15 	stw	r4,-8(fp)
   1116c:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef;
	JBLOCKROW buffer;
	int i;

	coef = (my_coef_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   11170:	e0bffe17 	ldw	r2,-8(fp)
   11174:	10800117 	ldw	r2,4(r2)
   11178:	10800017 	ldw	r2,0(r2)
{
	my_coef_ptr coef;
	JBLOCKROW buffer;
	int i;

	coef = (my_coef_ptr)
   1117c:	e13ffe17 	ldw	r4,-8(fp)
   11180:	01400044 	movi	r5,1
   11184:	01801104 	movi	r6,68
   11188:	103ee83a 	callr	r2
   1118c:	e0bffc15 	stw	r2,-16(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_coef_controller));
	cinfo->coef = (struct jpeg_c_coef_controller *) coef;
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	e0fffc17 	ldw	r3,-16(fp)
   11198:	10c05f15 	stw	r3,380(r2)
	coef->pub.start_pass = start_pass_coef;
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	00c00074 	movhi	r3,1
   111a4:	18c33004 	addi	r3,r3,3264
   111a8:	10c00015 	stw	r3,0(r2)
	coef->pub.compress_data = compress_output;
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	00c00074 	movhi	r3,1
   111b4:	18c34e04 	addi	r3,r3,3384
   111b8:	10c00115 	stw	r3,4(r2)

	/* Save pointer to virtual arrays */
	coef->whole_image = coef_arrays;
   111bc:	e0bffc17 	ldw	r2,-16(fp)
   111c0:	e0ffff17 	ldw	r3,-4(fp)
   111c4:	10c00615 	stw	r3,24(r2)

	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   111c8:	e0bffe17 	ldw	r2,-8(fp)
   111cc:	10800117 	ldw	r2,4(r2)
   111d0:	10800117 	ldw	r2,4(r2)

	/* Save pointer to virtual arrays */
	coef->whole_image = coef_arrays;

	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
   111d4:	e13ffe17 	ldw	r4,-8(fp)
   111d8:	01400044 	movi	r5,1
   111dc:	01814004 	movi	r6,1280
   111e0:	103ee83a 	callr	r2
   111e4:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
   111e8:	e13ffd17 	ldw	r4,-12(fp)
   111ec:	01414004 	movi	r5,1280
   111f0:	002b23c0 	call	2b23c <jzero_far>
	for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
   111f4:	e03ffb15 	stw	zero,-20(fp)
   111f8:	00000e06 	br	11234 <transencode_coef_controller+0xdc>
		coef->dummy_buffer[i] = buffer + i;
   111fc:	e0bffb17 	ldw	r2,-20(fp)
   11200:	100491fa 	slli	r2,r2,7
   11204:	e0fffd17 	ldw	r3,-12(fp)
   11208:	1887883a 	add	r3,r3,r2
   1120c:	e13ffc17 	ldw	r4,-16(fp)
   11210:	e0bffb17 	ldw	r2,-20(fp)
   11214:	108001c4 	addi	r2,r2,7
   11218:	1085883a 	add	r2,r2,r2
   1121c:	1085883a 	add	r2,r2,r2
   11220:	2085883a 	add	r2,r4,r2
   11224:	10c00015 	stw	r3,0(r2)
	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
   11228:	e0bffb17 	ldw	r2,-20(fp)
   1122c:	10800044 	addi	r2,r2,1
   11230:	e0bffb15 	stw	r2,-20(fp)
   11234:	e0bffb17 	ldw	r2,-20(fp)
   11238:	10800290 	cmplti	r2,r2,10
   1123c:	103fef1e 	bne	r2,zero,111fc <transencode_coef_controller+0xa4>
		coef->dummy_buffer[i] = buffer + i;
	}
}
   11240:	e037883a 	mov	sp,fp
   11244:	dfc00117 	ldw	ra,4(sp)
   11248:	df000017 	ldw	fp,0(sp)
   1124c:	dec00204 	addi	sp,sp,8
   11250:	f800283a 	ret

00011254 <init_destination>:
* before any data is actually written.
*/

METHODDEF(void)
	init_destination (j_compress_ptr cinfo)
{
   11254:	defffc04 	addi	sp,sp,-16
   11258:	dfc00315 	stw	ra,12(sp)
   1125c:	df000215 	stw	fp,8(sp)
   11260:	df000204 	addi	fp,sp,8
   11264:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
   11268:	e0bfff17 	ldw	r2,-4(fp)
   1126c:	10800617 	ldw	r2,24(r2)
   11270:	e0bffe15 	stw	r2,-8(fp)

	/* Allocate the output buffer --- it will be released when done with image */
	dest->buffer = (JOCTET *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   11274:	e0bfff17 	ldw	r2,-4(fp)
   11278:	10800117 	ldw	r2,4(r2)
   1127c:	10800017 	ldw	r2,0(r2)
   11280:	e13fff17 	ldw	r4,-4(fp)
   11284:	01400044 	movi	r5,1
   11288:	01840004 	movi	r6,4096
   1128c:	103ee83a 	callr	r2
	init_destination (j_compress_ptr cinfo)
{
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

	/* Allocate the output buffer --- it will be released when done with image */
	dest->buffer = (JOCTET *)
   11290:	e0fffe17 	ldw	r3,-8(fp)
   11294:	18800615 	stw	r2,24(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

	dest->pub.next_output_byte = dest->buffer;
   11298:	e0bffe17 	ldw	r2,-8(fp)
   1129c:	10c00617 	ldw	r3,24(r2)
   112a0:	e0bffe17 	ldw	r2,-8(fp)
   112a4:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	00c40004 	movi	r3,4096
   112b0:	10c00115 	stw	r3,4(r2)
}
   112b4:	e037883a 	mov	sp,fp
   112b8:	dfc00117 	ldw	ra,4(sp)
   112bc:	df000017 	ldw	fp,0(sp)
   112c0:	dec00204 	addi	sp,sp,8
   112c4:	f800283a 	ret

000112c8 <init_mem_destination>:

METHODDEF(void)
	init_mem_destination (j_compress_ptr cinfo)
{
   112c8:	defffe04 	addi	sp,sp,-8
   112cc:	df000115 	stw	fp,4(sp)
   112d0:	df000104 	addi	fp,sp,4
   112d4:	e13fff15 	stw	r4,-4(fp)
	/* no work necessary here */
}
   112d8:	e037883a 	mov	sp,fp
   112dc:	df000017 	ldw	fp,0(sp)
   112e0:	dec00104 	addi	sp,sp,4
   112e4:	f800283a 	ret

000112e8 <empty_output_buffer>:
* write it out when emptying the buffer externally.
*/

METHODDEF(boolean)
	empty_output_buffer (j_compress_ptr cinfo)
{
   112e8:	defffc04 	addi	sp,sp,-16
   112ec:	dfc00315 	stw	ra,12(sp)
   112f0:	df000215 	stw	fp,8(sp)
   112f4:	df000204 	addi	fp,sp,8
   112f8:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
   112fc:	e0bfff17 	ldw	r2,-4(fp)
   11300:	10800617 	ldw	r2,24(r2)
   11304:	e0bffe15 	stw	r2,-8(fp)

	if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	10c00617 	ldw	r3,24(r2)
   11310:	e0bffe17 	ldw	r2,-8(fp)
   11314:	10800517 	ldw	r2,20(r2)
   11318:	1809883a 	mov	r4,r3
   1131c:	01400044 	movi	r5,1
   11320:	01840004 	movi	r6,4096
   11324:	100f883a 	mov	r7,r2
   11328:	002dfe80 	call	2dfe8 <fwrite>
   1132c:	10840020 	cmpeqi	r2,r2,4096
   11330:	1000091e 	bne	r2,zero,11358 <empty_output_buffer+0x70>
		(size_t) OUTPUT_BUF_SIZE)
		ERREXIT(cinfo, JERR_FILE_WRITE);
   11334:	e0bfff17 	ldw	r2,-4(fp)
   11338:	10800017 	ldw	r2,0(r2)
   1133c:	00c00984 	movi	r3,38
   11340:	10c00515 	stw	r3,20(r2)
   11344:	e0bfff17 	ldw	r2,-4(fp)
   11348:	10800017 	ldw	r2,0(r2)
   1134c:	10800017 	ldw	r2,0(r2)
   11350:	e13fff17 	ldw	r4,-4(fp)
   11354:	103ee83a 	callr	r2

	dest->pub.next_output_byte = dest->buffer;
   11358:	e0bffe17 	ldw	r2,-8(fp)
   1135c:	10c00617 	ldw	r3,24(r2)
   11360:	e0bffe17 	ldw	r2,-8(fp)
   11364:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
   11368:	e0bffe17 	ldw	r2,-8(fp)
   1136c:	00c40004 	movi	r3,4096
   11370:	10c00115 	stw	r3,4(r2)

	return TRUE;
   11374:	00800044 	movi	r2,1
}
   11378:	e037883a 	mov	sp,fp
   1137c:	dfc00117 	ldw	ra,4(sp)
   11380:	df000017 	ldw	fp,0(sp)
   11384:	dec00204 	addi	sp,sp,8
   11388:	f800283a 	ret

0001138c <empty_mem_output_buffer>:

METHODDEF(boolean)
	empty_mem_output_buffer (j_compress_ptr cinfo)
{
   1138c:	defffa04 	addi	sp,sp,-24
   11390:	dfc00515 	stw	ra,20(sp)
   11394:	df000415 	stw	fp,16(sp)
   11398:	df000404 	addi	fp,sp,16
   1139c:	e13fff15 	stw	r4,-4(fp)
	size_t nextsize;
	JOCTET * nextbuffer;
	my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
   113a0:	e0bfff17 	ldw	r2,-4(fp)
   113a4:	10800617 	ldw	r2,24(r2)
   113a8:	e0bffc15 	stw	r2,-16(fp)

	/* Try to allocate new buffer with double size */
	nextsize = dest->bufsize * 2;
   113ac:	e0bffc17 	ldw	r2,-16(fp)
   113b0:	10800917 	ldw	r2,36(r2)
   113b4:	1085883a 	add	r2,r2,r2
   113b8:	e0bffd15 	stw	r2,-12(fp)
	nextbuffer = (JOCTET *)malloc(nextsize);
   113bc:	e13ffd17 	ldw	r4,-12(fp)
   113c0:	002e3400 	call	2e340 <malloc>
   113c4:	e0bffe15 	stw	r2,-8(fp)

	if (nextbuffer == NULL)
   113c8:	e0bffe17 	ldw	r2,-8(fp)
   113cc:	10000d1e 	bne	r2,zero,11404 <empty_mem_output_buffer+0x78>
		ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
   113d0:	e0bfff17 	ldw	r2,-4(fp)
   113d4:	10800017 	ldw	r2,0(r2)
   113d8:	00c00e04 	movi	r3,56
   113dc:	10c00515 	stw	r3,20(r2)
   113e0:	e0bfff17 	ldw	r2,-4(fp)
   113e4:	10800017 	ldw	r2,0(r2)
   113e8:	00c00284 	movi	r3,10
   113ec:	10c00615 	stw	r3,24(r2)
   113f0:	e0bfff17 	ldw	r2,-4(fp)
   113f4:	10800017 	ldw	r2,0(r2)
   113f8:	10800017 	ldw	r2,0(r2)
   113fc:	e13fff17 	ldw	r4,-4(fp)
   11400:	103ee83a 	callr	r2

	MEMCOPY(nextbuffer, dest->buffer, dest->bufsize);
   11404:	e0bffc17 	ldw	r2,-16(fp)
   11408:	10c00817 	ldw	r3,32(r2)
   1140c:	e0bffc17 	ldw	r2,-16(fp)
   11410:	10800917 	ldw	r2,36(r2)
   11414:	e13ffe17 	ldw	r4,-8(fp)
   11418:	180b883a 	mov	r5,r3
   1141c:	100d883a 	mov	r6,r2
   11420:	002eaec0 	call	2eaec <memcpy>

	if (dest->newbuffer != NULL)
   11424:	e0bffc17 	ldw	r2,-16(fp)
   11428:	10800717 	ldw	r2,28(r2)
   1142c:	10000426 	beq	r2,zero,11440 <empty_mem_output_buffer+0xb4>
		free(dest->newbuffer);
   11430:	e0bffc17 	ldw	r2,-16(fp)
   11434:	10800717 	ldw	r2,28(r2)
   11438:	1009883a 	mov	r4,r2
   1143c:	002e3540 	call	2e354 <free>

	dest->newbuffer = nextbuffer;
   11440:	e0bffc17 	ldw	r2,-16(fp)
   11444:	e0fffe17 	ldw	r3,-8(fp)
   11448:	10c00715 	stw	r3,28(r2)

	dest->pub.next_output_byte = nextbuffer + dest->bufsize;
   1144c:	e0bffc17 	ldw	r2,-16(fp)
   11450:	10800917 	ldw	r2,36(r2)
   11454:	e0fffe17 	ldw	r3,-8(fp)
   11458:	1887883a 	add	r3,r3,r2
   1145c:	e0bffc17 	ldw	r2,-16(fp)
   11460:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = dest->bufsize;
   11464:	e0bffc17 	ldw	r2,-16(fp)
   11468:	10c00917 	ldw	r3,36(r2)
   1146c:	e0bffc17 	ldw	r2,-16(fp)
   11470:	10c00115 	stw	r3,4(r2)

	dest->buffer = nextbuffer;
   11474:	e0bffc17 	ldw	r2,-16(fp)
   11478:	e0fffe17 	ldw	r3,-8(fp)
   1147c:	10c00815 	stw	r3,32(r2)
	dest->bufsize = nextsize;
   11480:	e0bffc17 	ldw	r2,-16(fp)
   11484:	e0fffd17 	ldw	r3,-12(fp)
   11488:	10c00915 	stw	r3,36(r2)

	return TRUE;
   1148c:	00800044 	movi	r2,1
}
   11490:	e037883a 	mov	sp,fp
   11494:	dfc00117 	ldw	ra,4(sp)
   11498:	df000017 	ldw	fp,0(sp)
   1149c:	dec00204 	addi	sp,sp,8
   114a0:	f800283a 	ret

000114a4 <term_destination>:
* for error exit.
*/

METHODDEF(void)
	term_destination (j_compress_ptr cinfo)
{
   114a4:	defffb04 	addi	sp,sp,-20
   114a8:	dfc00415 	stw	ra,16(sp)
   114ac:	df000315 	stw	fp,12(sp)
   114b0:	df000304 	addi	fp,sp,12
   114b4:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
   114b8:	e0bfff17 	ldw	r2,-4(fp)
   114bc:	10800617 	ldw	r2,24(r2)
   114c0:	e0bffd15 	stw	r2,-12(fp)
	size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	10800117 	ldw	r2,4(r2)
   114cc:	00c40004 	movi	r3,4096
   114d0:	1885c83a 	sub	r2,r3,r2
   114d4:	e0bffe15 	stw	r2,-8(fp)

	/* Write any data remaining in the buffer */
	if (datacount > 0) {
   114d8:	e0bffe17 	ldw	r2,-8(fp)
   114dc:	10001426 	beq	r2,zero,11530 <term_destination+0x8c>
		if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
   114e0:	e0bffd17 	ldw	r2,-12(fp)
   114e4:	10c00617 	ldw	r3,24(r2)
   114e8:	e0bffd17 	ldw	r2,-12(fp)
   114ec:	10800517 	ldw	r2,20(r2)
   114f0:	1809883a 	mov	r4,r3
   114f4:	01400044 	movi	r5,1
   114f8:	e1bffe17 	ldw	r6,-8(fp)
   114fc:	100f883a 	mov	r7,r2
   11500:	002dfe80 	call	2dfe8 <fwrite>
   11504:	e0fffe17 	ldw	r3,-8(fp)
   11508:	10c00926 	beq	r2,r3,11530 <term_destination+0x8c>
			ERREXIT(cinfo, JERR_FILE_WRITE);
   1150c:	e0bfff17 	ldw	r2,-4(fp)
   11510:	10800017 	ldw	r2,0(r2)
   11514:	00c00984 	movi	r3,38
   11518:	10c00515 	stw	r3,20(r2)
   1151c:	e0bfff17 	ldw	r2,-4(fp)
   11520:	10800017 	ldw	r2,0(r2)
   11524:	10800017 	ldw	r2,0(r2)
   11528:	e13fff17 	ldw	r4,-4(fp)
   1152c:	103ee83a 	callr	r2
	}
	fflush(dest->outfile);
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	10800517 	ldw	r2,20(r2)
   11538:	1009883a 	mov	r4,r2
   1153c:	002cc780 	call	2cc78 <fflush>
	/* Make sure we wrote the output file OK */
	if (ferror(dest->outfile))
   11540:	e0bffd17 	ldw	r2,-12(fp)
   11544:	10800517 	ldw	r2,20(r2)
   11548:	1080030b 	ldhu	r2,12(r2)
   1154c:	10bfffcc 	andi	r2,r2,65535
   11550:	1080100c 	andi	r2,r2,64
   11554:	10000926 	beq	r2,zero,1157c <term_destination+0xd8>
		ERREXIT(cinfo, JERR_FILE_WRITE);
   11558:	e0bfff17 	ldw	r2,-4(fp)
   1155c:	10800017 	ldw	r2,0(r2)
   11560:	00c00984 	movi	r3,38
   11564:	10c00515 	stw	r3,20(r2)
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	10800017 	ldw	r2,0(r2)
   11570:	10800017 	ldw	r2,0(r2)
   11574:	e13fff17 	ldw	r4,-4(fp)
   11578:	103ee83a 	callr	r2
}
   1157c:	e037883a 	mov	sp,fp
   11580:	dfc00117 	ldw	ra,4(sp)
   11584:	df000017 	ldw	fp,0(sp)
   11588:	dec00204 	addi	sp,sp,8
   1158c:	f800283a 	ret

00011590 <term_mem_destination>:

METHODDEF(void)
	term_mem_destination (j_compress_ptr cinfo)
{
   11590:	defffd04 	addi	sp,sp,-12
   11594:	df000215 	stw	fp,8(sp)
   11598:	df000204 	addi	fp,sp,8
   1159c:	e13fff15 	stw	r4,-4(fp)
	my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
   115a0:	e0bfff17 	ldw	r2,-4(fp)
   115a4:	10800617 	ldw	r2,24(r2)
   115a8:	e0bffe15 	stw	r2,-8(fp)

	*dest->outbuffer = dest->buffer;
   115ac:	e0bffe17 	ldw	r2,-8(fp)
   115b0:	10800517 	ldw	r2,20(r2)
   115b4:	e0fffe17 	ldw	r3,-8(fp)
   115b8:	18c00817 	ldw	r3,32(r3)
   115bc:	10c00015 	stw	r3,0(r2)
	*dest->outsize = dest->bufsize - dest->pub.free_in_buffer;
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	10800617 	ldw	r2,24(r2)
   115c8:	e0fffe17 	ldw	r3,-8(fp)
   115cc:	19000917 	ldw	r4,36(r3)
   115d0:	e0fffe17 	ldw	r3,-8(fp)
   115d4:	18c00117 	ldw	r3,4(r3)
   115d8:	20c7c83a 	sub	r3,r4,r3
   115dc:	10c00015 	stw	r3,0(r2)
}
   115e0:	e037883a 	mov	sp,fp
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00104 	addi	sp,sp,4
   115ec:	f800283a 	ret

000115f0 <jpeg_stdio_dest>:
* for closing it after finishing compression.
*/

GLOBAL(void)
	jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
{
   115f0:	defffb04 	addi	sp,sp,-20
   115f4:	dfc00415 	stw	ra,16(sp)
   115f8:	df000315 	stw	fp,12(sp)
   115fc:	df000304 	addi	fp,sp,12
   11600:	e13ffe15 	stw	r4,-8(fp)
   11604:	e17fff15 	stw	r5,-4(fp)
	* can be written to the same file without re-executing jpeg_stdio_dest.
	* This makes it dangerous to use this manager and a different destination
	* manager serially with the same JPEG object, because their private object
	* sizes may be different.  Caveat programmer.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
   11608:	e0bffe17 	ldw	r2,-8(fp)
   1160c:	10800617 	ldw	r2,24(r2)
   11610:	1000091e 	bne	r2,zero,11638 <jpeg_stdio_dest+0x48>
		cinfo->dest = (struct jpeg_destination_mgr *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
   11614:	e0bffe17 	ldw	r2,-8(fp)
   11618:	10800117 	ldw	r2,4(r2)
   1161c:	10800017 	ldw	r2,0(r2)
   11620:	e13ffe17 	ldw	r4,-8(fp)
   11624:	000b883a 	mov	r5,zero
   11628:	01800704 	movi	r6,28
   1162c:	103ee83a 	callr	r2
	* This makes it dangerous to use this manager and a different destination
	* manager serially with the same JPEG object, because their private object
	* sizes may be different.  Caveat programmer.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
		cinfo->dest = (struct jpeg_destination_mgr *)
   11630:	e0fffe17 	ldw	r3,-8(fp)
   11634:	18800615 	stw	r2,24(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			SIZEOF(my_destination_mgr));
	}

	dest = (my_dest_ptr) cinfo->dest;
   11638:	e0bffe17 	ldw	r2,-8(fp)
   1163c:	10800617 	ldw	r2,24(r2)
   11640:	e0bffd15 	stw	r2,-12(fp)
	dest->pub.init_destination = init_destination;
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	00c00074 	movhi	r3,1
   1164c:	18c49504 	addi	r3,r3,4692
   11650:	10c00215 	stw	r3,8(r2)
	dest->pub.empty_output_buffer = empty_output_buffer;
   11654:	e0bffd17 	ldw	r2,-12(fp)
   11658:	00c00074 	movhi	r3,1
   1165c:	18c4ba04 	addi	r3,r3,4840
   11660:	10c00315 	stw	r3,12(r2)
	dest->pub.term_destination = term_destination;
   11664:	e0bffd17 	ldw	r2,-12(fp)
   11668:	00c00074 	movhi	r3,1
   1166c:	18c52904 	addi	r3,r3,5284
   11670:	10c00415 	stw	r3,16(r2)
	dest->outfile = outfile;
   11674:	e0bffd17 	ldw	r2,-12(fp)
   11678:	e0ffff17 	ldw	r3,-4(fp)
   1167c:	10c00515 	stw	r3,20(r2)
}
   11680:	e037883a 	mov	sp,fp
   11684:	dfc00117 	ldw	ra,4(sp)
   11688:	df000017 	ldw	fp,0(sp)
   1168c:	dec00204 	addi	sp,sp,8
   11690:	f800283a 	ret

00011694 <jpeg_mem_dest>:
*/

GLOBAL(void)
	jpeg_mem_dest (j_compress_ptr cinfo,
	unsigned char ** outbuffer, unsigned long * outsize)
{
   11694:	defffa04 	addi	sp,sp,-24
   11698:	dfc00515 	stw	ra,20(sp)
   1169c:	df000415 	stw	fp,16(sp)
   116a0:	df000404 	addi	fp,sp,16
   116a4:	e13ffd15 	stw	r4,-12(fp)
   116a8:	e17ffe15 	stw	r5,-8(fp)
   116ac:	e1bfff15 	stw	r6,-4(fp)
	my_mem_dest_ptr dest;

	if (outbuffer == NULL || outsize == NULL)	/* sanity check */
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	10000226 	beq	r2,zero,116c0 <jpeg_mem_dest+0x2c>
   116b8:	e0bfff17 	ldw	r2,-4(fp)
   116bc:	1000091e 	bne	r2,zero,116e4 <jpeg_mem_dest+0x50>
		ERREXIT(cinfo, JERR_BUFFER_SIZE);
   116c0:	e0bffd17 	ldw	r2,-12(fp)
   116c4:	10800017 	ldw	r2,0(r2)
   116c8:	00c00604 	movi	r3,24
   116cc:	10c00515 	stw	r3,20(r2)
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	10800017 	ldw	r2,0(r2)
   116d8:	10800017 	ldw	r2,0(r2)
   116dc:	e13ffd17 	ldw	r4,-12(fp)
   116e0:	103ee83a 	callr	r2

	/* The destination object is made permanent so that multiple JPEG images
	* can be written to the same buffer without re-executing jpeg_mem_dest.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
   116e4:	e0bffd17 	ldw	r2,-12(fp)
   116e8:	10800617 	ldw	r2,24(r2)
   116ec:	1000091e 	bne	r2,zero,11714 <jpeg_mem_dest+0x80>
		cinfo->dest = (struct jpeg_destination_mgr *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
   116f0:	e0bffd17 	ldw	r2,-12(fp)
   116f4:	10800117 	ldw	r2,4(r2)
   116f8:	10800017 	ldw	r2,0(r2)
   116fc:	e13ffd17 	ldw	r4,-12(fp)
   11700:	000b883a 	mov	r5,zero
   11704:	01800a04 	movi	r6,40
   11708:	103ee83a 	callr	r2

	/* The destination object is made permanent so that multiple JPEG images
	* can be written to the same buffer without re-executing jpeg_mem_dest.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
		cinfo->dest = (struct jpeg_destination_mgr *)
   1170c:	e0fffd17 	ldw	r3,-12(fp)
   11710:	18800615 	stw	r2,24(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			SIZEOF(my_mem_destination_mgr));
	}

	dest = (my_mem_dest_ptr) cinfo->dest;
   11714:	e0bffd17 	ldw	r2,-12(fp)
   11718:	10800617 	ldw	r2,24(r2)
   1171c:	e0bffc15 	stw	r2,-16(fp)
	dest->pub.init_destination = init_mem_destination;
   11720:	e0bffc17 	ldw	r2,-16(fp)
   11724:	00c00074 	movhi	r3,1
   11728:	18c4b204 	addi	r3,r3,4808
   1172c:	10c00215 	stw	r3,8(r2)
	dest->pub.empty_output_buffer = empty_mem_output_buffer;
   11730:	e0bffc17 	ldw	r2,-16(fp)
   11734:	00c00074 	movhi	r3,1
   11738:	18c4e304 	addi	r3,r3,5004
   1173c:	10c00315 	stw	r3,12(r2)
	dest->pub.term_destination = term_mem_destination;
   11740:	e0bffc17 	ldw	r2,-16(fp)
   11744:	00c00074 	movhi	r3,1
   11748:	18c56404 	addi	r3,r3,5520
   1174c:	10c00415 	stw	r3,16(r2)
	dest->outbuffer = outbuffer;
   11750:	e0bffc17 	ldw	r2,-16(fp)
   11754:	e0fffe17 	ldw	r3,-8(fp)
   11758:	10c00515 	stw	r3,20(r2)
	dest->outsize = outsize;
   1175c:	e0bffc17 	ldw	r2,-16(fp)
   11760:	e0ffff17 	ldw	r3,-4(fp)
   11764:	10c00615 	stw	r3,24(r2)
	dest->newbuffer = NULL;
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10000715 	stw	zero,28(r2)

	if (*outbuffer == NULL || *outsize == 0) {
   11770:	e0bffe17 	ldw	r2,-8(fp)
   11774:	10800017 	ldw	r2,0(r2)
   11778:	10000326 	beq	r2,zero,11788 <jpeg_mem_dest+0xf4>
   1177c:	e0bfff17 	ldw	r2,-4(fp)
   11780:	10800017 	ldw	r2,0(r2)
   11784:	10001c1e 	bne	r2,zero,117f8 <jpeg_mem_dest+0x164>
		/* Allocate initial buffer */
		dest->newbuffer = *outbuffer = malloc(OUTPUT_BUF_SIZE);
   11788:	01040004 	movi	r4,4096
   1178c:	002e3400 	call	2e340 <malloc>
   11790:	1007883a 	mov	r3,r2
   11794:	e0bffe17 	ldw	r2,-8(fp)
   11798:	10c00015 	stw	r3,0(r2)
   1179c:	e0bffe17 	ldw	r2,-8(fp)
   117a0:	10c00017 	ldw	r3,0(r2)
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10c00715 	stw	r3,28(r2)
		if (dest->newbuffer == NULL)
   117ac:	e0bffc17 	ldw	r2,-16(fp)
   117b0:	10800717 	ldw	r2,28(r2)
   117b4:	10000d1e 	bne	r2,zero,117ec <jpeg_mem_dest+0x158>
			ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
   117b8:	e0bffd17 	ldw	r2,-12(fp)
   117bc:	10800017 	ldw	r2,0(r2)
   117c0:	00c00e04 	movi	r3,56
   117c4:	10c00515 	stw	r3,20(r2)
   117c8:	e0bffd17 	ldw	r2,-12(fp)
   117cc:	10800017 	ldw	r2,0(r2)
   117d0:	00c00284 	movi	r3,10
   117d4:	10c00615 	stw	r3,24(r2)
   117d8:	e0bffd17 	ldw	r2,-12(fp)
   117dc:	10800017 	ldw	r2,0(r2)
   117e0:	10800017 	ldw	r2,0(r2)
   117e4:	e13ffd17 	ldw	r4,-12(fp)
   117e8:	103ee83a 	callr	r2
		*outsize = OUTPUT_BUF_SIZE;
   117ec:	e0bfff17 	ldw	r2,-4(fp)
   117f0:	00c40004 	movi	r3,4096
   117f4:	10c00015 	stw	r3,0(r2)
	}

	dest->pub.next_output_byte = dest->buffer = *outbuffer;
   117f8:	e0bffe17 	ldw	r2,-8(fp)
   117fc:	10c00017 	ldw	r3,0(r2)
   11800:	e0bffc17 	ldw	r2,-16(fp)
   11804:	10c00815 	stw	r3,32(r2)
   11808:	e0bffc17 	ldw	r2,-16(fp)
   1180c:	10c00817 	ldw	r3,32(r2)
   11810:	e0bffc17 	ldw	r2,-16(fp)
   11814:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = dest->bufsize = *outsize;
   11818:	e0bfff17 	ldw	r2,-4(fp)
   1181c:	10c00017 	ldw	r3,0(r2)
   11820:	e0bffc17 	ldw	r2,-16(fp)
   11824:	10c00915 	stw	r3,36(r2)
   11828:	e0bffc17 	ldw	r2,-16(fp)
   1182c:	10c00917 	ldw	r3,36(r2)
   11830:	e0bffc17 	ldw	r2,-16(fp)
   11834:	10c00115 	stw	r3,4(r2)
}
   11838:	e037883a 	mov	sp,fp
   1183c:	dfc00117 	ldw	ra,4(sp)
   11840:	df000017 	ldw	fp,0(sp)
   11844:	dec00204 	addi	sp,sp,8
   11848:	f800283a 	ret

0001184c <error_exit>:
* or jpeg_destroy) at some point.
*/

METHODDEF(void)
	error_exit (j_common_ptr cinfo)
{
   1184c:	defffd04 	addi	sp,sp,-12
   11850:	dfc00215 	stw	ra,8(sp)
   11854:	df000115 	stw	fp,4(sp)
   11858:	df000104 	addi	fp,sp,4
   1185c:	e13fff15 	stw	r4,-4(fp)
	/* Always display the message */
	(*cinfo->err->output_message) (cinfo);
   11860:	e0bfff17 	ldw	r2,-4(fp)
   11864:	10800017 	ldw	r2,0(r2)
   11868:	10800217 	ldw	r2,8(r2)
   1186c:	e13fff17 	ldw	r4,-4(fp)
   11870:	103ee83a 	callr	r2

	/* Let the memory manager delete any temp files before we die */
	jpeg_destroy(cinfo);
   11874:	e13fff17 	ldw	r4,-4(fp)
   11878:	000cf280 	call	cf28 <jpeg_destroy>

	exit(EXIT_FAILURE);
   1187c:	01000044 	movi	r4,1
   11880:	002c9080 	call	2c908 <exit>

00011884 <output_message>:
* not just not use this routine.
*/

METHODDEF(void)
	output_message (j_common_ptr cinfo)
{
   11884:	deffcb04 	addi	sp,sp,-212
   11888:	dfc03415 	stw	ra,208(sp)
   1188c:	df003315 	stw	fp,204(sp)
   11890:	df003304 	addi	fp,sp,204
   11894:	e13fff15 	stw	r4,-4(fp)
	char buffer[JMSG_LENGTH_MAX];

	/* Create the message */
	(*cinfo->err->format_message) (cinfo, buffer);
   11898:	e0bfff17 	ldw	r2,-4(fp)
   1189c:	10800017 	ldw	r2,0(r2)
   118a0:	10800317 	ldw	r2,12(r2)
   118a4:	e13fff17 	ldw	r4,-4(fp)
   118a8:	e17fcd04 	addi	r5,fp,-204
   118ac:	103ee83a 	callr	r2
	/* Display it in a message dialog box */
	MessageBox(GetActiveWindow(), buffer, "JPEG Library Error",
		MB_OK | MB_ICONERROR);
#else
	/* Send it to stderr, adding a newline */
	fprintf(stderr, "%s\n", buffer);
   118b0:	00800134 	movhi	r2,4
   118b4:	108bb304 	addi	r2,r2,11980
   118b8:	10800017 	ldw	r2,0(r2)
   118bc:	10800317 	ldw	r2,12(r2)
   118c0:	1009883a 	mov	r4,r2
   118c4:	01400134 	movhi	r5,4
   118c8:	2941e804 	addi	r5,r5,1952
   118cc:	e1bfcd04 	addi	r6,fp,-204
   118d0:	002d1080 	call	2d108 <fprintf>
#endif
}
   118d4:	e037883a 	mov	sp,fp
   118d8:	dfc00117 	ldw	ra,4(sp)
   118dc:	df000017 	ldw	fp,0(sp)
   118e0:	dec00204 	addi	sp,sp,8
   118e4:	f800283a 	ret

000118e8 <emit_message>:
* or change the policy about which messages to display.
*/

METHODDEF(void)
	emit_message (j_common_ptr cinfo, int msg_level)
{
   118e8:	defffb04 	addi	sp,sp,-20
   118ec:	dfc00415 	stw	ra,16(sp)
   118f0:	df000315 	stw	fp,12(sp)
   118f4:	df000304 	addi	fp,sp,12
   118f8:	e13ffe15 	stw	r4,-8(fp)
   118fc:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_error_mgr * err = cinfo->err;
   11900:	e0bffe17 	ldw	r2,-8(fp)
   11904:	10800017 	ldw	r2,0(r2)
   11908:	e0bffd15 	stw	r2,-12(fp)

	if (msg_level < 0) {
   1190c:	e0bfff17 	ldw	r2,-4(fp)
   11910:	1000110e 	bge	r2,zero,11958 <emit_message+0x70>
		/* It's a warning message.  Since corrupt files may generate many warnings,
		* the policy implemented here is to show only the first warning,
		* unless trace_level >= 3.
		*/
		if (err->num_warnings == 0 || err->trace_level >= 3)
   11914:	e0bffd17 	ldw	r2,-12(fp)
   11918:	10801b17 	ldw	r2,108(r2)
   1191c:	10000426 	beq	r2,zero,11930 <emit_message+0x48>
   11920:	e0bffd17 	ldw	r2,-12(fp)
   11924:	10801a17 	ldw	r2,104(r2)
   11928:	108000d0 	cmplti	r2,r2,3
   1192c:	1000041e 	bne	r2,zero,11940 <emit_message+0x58>
			(*err->output_message) (cinfo);
   11930:	e0bffd17 	ldw	r2,-12(fp)
   11934:	10800217 	ldw	r2,8(r2)
   11938:	e13ffe17 	ldw	r4,-8(fp)
   1193c:	103ee83a 	callr	r2
		/* Always count warnings in num_warnings. */
		err->num_warnings++;
   11940:	e0bffd17 	ldw	r2,-12(fp)
   11944:	10801b17 	ldw	r2,108(r2)
   11948:	10c00044 	addi	r3,r2,1
   1194c:	e0bffd17 	ldw	r2,-12(fp)
   11950:	10c01b15 	stw	r3,108(r2)
   11954:	00000806 	br	11978 <emit_message+0x90>
	} else {
		/* It's a trace message.  Show it if trace_level >= msg_level. */
		if (err->trace_level >= msg_level)
   11958:	e0bffd17 	ldw	r2,-12(fp)
   1195c:	10c01a17 	ldw	r3,104(r2)
   11960:	e0bfff17 	ldw	r2,-4(fp)
   11964:	18800416 	blt	r3,r2,11978 <emit_message+0x90>
			(*err->output_message) (cinfo);
   11968:	e0bffd17 	ldw	r2,-12(fp)
   1196c:	10800217 	ldw	r2,8(r2)
   11970:	e13ffe17 	ldw	r4,-8(fp)
   11974:	103ee83a 	callr	r2
	}
}
   11978:	e037883a 	mov	sp,fp
   1197c:	dfc00117 	ldw	ra,4(sp)
   11980:	df000017 	ldw	fp,0(sp)
   11984:	dec00204 	addi	sp,sp,8
   11988:	f800283a 	ret

0001198c <format_message>:
* Few applications should need to override this method.
*/

METHODDEF(void)
	format_message (j_common_ptr cinfo, char * buffer)
{
   1198c:	defff004 	addi	sp,sp,-64
   11990:	dfc00f15 	stw	ra,60(sp)
   11994:	df000e15 	stw	fp,56(sp)
   11998:	df000e04 	addi	fp,sp,56
   1199c:	e13ffe15 	stw	r4,-8(fp)
   119a0:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_error_mgr * err = cinfo->err;
   119a4:	e0bffe17 	ldw	r2,-8(fp)
   119a8:	10800017 	ldw	r2,0(r2)
   119ac:	e0bffb15 	stw	r2,-20(fp)
	int msg_code = err->msg_code;
   119b0:	e0bffb17 	ldw	r2,-20(fp)
   119b4:	10800517 	ldw	r2,20(r2)
   119b8:	e0bffc15 	stw	r2,-16(fp)
	const char * msgtext = NULL;
   119bc:	e03ff815 	stw	zero,-32(fp)
	const char * msgptr;
	char ch;
	boolean isstring;

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
   119c0:	e0bffc17 	ldw	r2,-16(fp)
   119c4:	00800d0e 	bge	zero,r2,119fc <format_message+0x70>
   119c8:	e0bffb17 	ldw	r2,-20(fp)
   119cc:	10c01d17 	ldw	r3,116(r2)
   119d0:	e0bffc17 	ldw	r2,-16(fp)
   119d4:	18800916 	blt	r3,r2,119fc <format_message+0x70>
		msgtext = err->jpeg_message_table[msg_code];
   119d8:	e0bffb17 	ldw	r2,-20(fp)
   119dc:	10c01c17 	ldw	r3,112(r2)
   119e0:	e0bffc17 	ldw	r2,-16(fp)
   119e4:	1085883a 	add	r2,r2,r2
   119e8:	1085883a 	add	r2,r2,r2
   119ec:	1885883a 	add	r2,r3,r2
   119f0:	10800017 	ldw	r2,0(r2)
   119f4:	e0bff815 	stw	r2,-32(fp)
   119f8:	00001606 	br	11a54 <format_message+0xc8>
	} else if (err->addon_message_table != NULL &&
   119fc:	e0bffb17 	ldw	r2,-20(fp)
   11a00:	10801e17 	ldw	r2,120(r2)
   11a04:	10001326 	beq	r2,zero,11a54 <format_message+0xc8>
		msg_code >= err->first_addon_message &&
   11a08:	e0bffb17 	ldw	r2,-20(fp)
   11a0c:	10801f17 	ldw	r2,124(r2)
	boolean isstring;

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
		msgtext = err->jpeg_message_table[msg_code];
	} else if (err->addon_message_table != NULL &&
   11a10:	e0fffc17 	ldw	r3,-16(fp)
   11a14:	18800f16 	blt	r3,r2,11a54 <format_message+0xc8>
		msg_code >= err->first_addon_message &&
		msg_code <= err->last_addon_message) {
   11a18:	e0bffb17 	ldw	r2,-20(fp)
   11a1c:	10c02017 	ldw	r3,128(r2)

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
		msgtext = err->jpeg_message_table[msg_code];
	} else if (err->addon_message_table != NULL &&
		msg_code >= err->first_addon_message &&
   11a20:	e0bffc17 	ldw	r2,-16(fp)
   11a24:	18800b16 	blt	r3,r2,11a54 <format_message+0xc8>
		msg_code <= err->last_addon_message) {
			msgtext = err->addon_message_table[msg_code - err->first_addon_message];
   11a28:	e0bffb17 	ldw	r2,-20(fp)
   11a2c:	10c01e17 	ldw	r3,120(r2)
   11a30:	e0bffb17 	ldw	r2,-20(fp)
   11a34:	10801f17 	ldw	r2,124(r2)
   11a38:	e13ffc17 	ldw	r4,-16(fp)
   11a3c:	2085c83a 	sub	r2,r4,r2
   11a40:	1085883a 	add	r2,r2,r2
   11a44:	1085883a 	add	r2,r2,r2
   11a48:	1885883a 	add	r2,r3,r2
   11a4c:	10800017 	ldw	r2,0(r2)
   11a50:	e0bff815 	stw	r2,-32(fp)
	}

	/* Defend against bogus message number */
	if (msgtext == NULL) {
   11a54:	e0bff817 	ldw	r2,-32(fp)
   11a58:	1000071e 	bne	r2,zero,11a78 <format_message+0xec>
		err->msg_parm.i[0] = msg_code;
   11a5c:	e0bffb17 	ldw	r2,-20(fp)
   11a60:	e0fffc17 	ldw	r3,-16(fp)
   11a64:	10c00615 	stw	r3,24(r2)
		msgtext = err->jpeg_message_table[0];
   11a68:	e0bffb17 	ldw	r2,-20(fp)
   11a6c:	10801c17 	ldw	r2,112(r2)
   11a70:	10800017 	ldw	r2,0(r2)
   11a74:	e0bff815 	stw	r2,-32(fp)
	}

	/* Check for string parameter, as indicated by %s in the message text */
	isstring = FALSE;
   11a78:	e03ffa05 	stb	zero,-24(fp)
	msgptr = msgtext;
   11a7c:	e0bff817 	ldw	r2,-32(fp)
   11a80:	e0bff915 	stw	r2,-28(fp)
	while ((ch = *msgptr++) != '\0') {
   11a84:	00000d06 	br	11abc <format_message+0x130>
		if (ch == '%') {
   11a88:	e0bffd07 	ldb	r2,-12(fp)
   11a8c:	10800958 	cmpnei	r2,r2,37
   11a90:	10000a1e 	bne	r2,zero,11abc <format_message+0x130>
			if (*msgptr == 's') isstring = TRUE;
   11a94:	e0bff917 	ldw	r2,-28(fp)
   11a98:	10800003 	ldbu	r2,0(r2)
   11a9c:	10803fcc 	andi	r2,r2,255
   11aa0:	1080201c 	xori	r2,r2,128
   11aa4:	10bfe004 	addi	r2,r2,-128
   11aa8:	10801cd8 	cmpnei	r2,r2,115
   11aac:	10000e1e 	bne	r2,zero,11ae8 <format_message+0x15c>
   11ab0:	00800044 	movi	r2,1
   11ab4:	e0bffa05 	stb	r2,-24(fp)
			break;
   11ab8:	00000b06 	br	11ae8 <format_message+0x15c>
	}

	/* Check for string parameter, as indicated by %s in the message text */
	isstring = FALSE;
	msgptr = msgtext;
	while ((ch = *msgptr++) != '\0') {
   11abc:	e0bff917 	ldw	r2,-28(fp)
   11ac0:	10800003 	ldbu	r2,0(r2)
   11ac4:	e0bffd05 	stb	r2,-12(fp)
   11ac8:	e0bffd07 	ldb	r2,-12(fp)
   11acc:	1004c03a 	cmpne	r2,r2,zero
   11ad0:	e0fff917 	ldw	r3,-28(fp)
   11ad4:	18c00044 	addi	r3,r3,1
   11ad8:	e0fff915 	stw	r3,-28(fp)
   11adc:	10803fcc 	andi	r2,r2,255
   11ae0:	103fe91e 	bne	r2,zero,11a88 <format_message+0xfc>
   11ae4:	00000106 	br	11aec <format_message+0x160>
		if (ch == '%') {
			if (*msgptr == 's') isstring = TRUE;
			break;
   11ae8:	0001883a 	nop
		}
	}

	/* Format the message into the passed buffer */
	if (isstring)
   11aec:	e0bffa03 	ldbu	r2,-24(fp)
   11af0:	10000726 	beq	r2,zero,11b10 <format_message+0x184>
		sprintf(buffer, msgtext, err->msg_parm.s);
   11af4:	e0bffb17 	ldw	r2,-20(fp)
   11af8:	10800604 	addi	r2,r2,24
   11afc:	e13fff17 	ldw	r4,-4(fp)
   11b00:	e17ff817 	ldw	r5,-32(fp)
   11b04:	100d883a 	mov	r6,r2
   11b08:	002f1f00 	call	2f1f0 <sprintf>
   11b0c:	00001b06 	br	11b7c <format_message+0x1f0>
	else
		sprintf(buffer, msgtext,
		err->msg_parm.i[0], err->msg_parm.i[1],
   11b10:	e0bffb17 	ldw	r2,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b14:	10c00617 	ldw	r3,24(r2)
		err->msg_parm.i[0], err->msg_parm.i[1],
   11b18:	e0bffb17 	ldw	r2,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b1c:	10800717 	ldw	r2,28(r2)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
   11b20:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b24:	22400817 	ldw	r9,32(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
   11b28:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b2c:	22000917 	ldw	r8,36(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
   11b30:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b34:	21c00a17 	ldw	r7,40(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
   11b38:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b3c:	21800b17 	ldw	r6,44(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
   11b40:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b44:	21400c17 	ldw	r5,48(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
   11b48:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
   11b4c:	21000d17 	ldw	r4,52(r4)
   11b50:	da400015 	stw	r9,0(sp)
   11b54:	da000115 	stw	r8,4(sp)
   11b58:	d9c00215 	stw	r7,8(sp)
   11b5c:	d9800315 	stw	r6,12(sp)
   11b60:	d9400415 	stw	r5,16(sp)
   11b64:	d9000515 	stw	r4,20(sp)
   11b68:	e13fff17 	ldw	r4,-4(fp)
   11b6c:	e17ff817 	ldw	r5,-32(fp)
   11b70:	180d883a 	mov	r6,r3
   11b74:	100f883a 	mov	r7,r2
   11b78:	002f1f00 	call	2f1f0 <sprintf>
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
}
   11b7c:	e037883a 	mov	sp,fp
   11b80:	dfc00117 	ldw	ra,4(sp)
   11b84:	df000017 	ldw	fp,0(sp)
   11b88:	dec00204 	addi	sp,sp,8
   11b8c:	f800283a 	ret

00011b90 <reset_error_mgr>:
* this method if it has additional error processing state.
*/

METHODDEF(void)
	reset_error_mgr (j_common_ptr cinfo)
{
   11b90:	defffe04 	addi	sp,sp,-8
   11b94:	df000115 	stw	fp,4(sp)
   11b98:	df000104 	addi	fp,sp,4
   11b9c:	e13fff15 	stw	r4,-4(fp)
	cinfo->err->num_warnings = 0;
   11ba0:	e0bfff17 	ldw	r2,-4(fp)
   11ba4:	10800017 	ldw	r2,0(r2)
   11ba8:	10001b15 	stw	zero,108(r2)
	/* trace_level is not reset since it is an application-supplied parameter */
	cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
   11bac:	e0bfff17 	ldw	r2,-4(fp)
   11bb0:	10800017 	ldw	r2,0(r2)
   11bb4:	10000515 	stw	zero,20(r2)
}
   11bb8:	e037883a 	mov	sp,fp
   11bbc:	df000017 	ldw	fp,0(sp)
   11bc0:	dec00104 	addi	sp,sp,4
   11bc4:	f800283a 	ret

00011bc8 <jpeg_std_error>:
* after which the application may override some of the methods.
*/

GLOBAL(struct jpeg_error_mgr *)
	jpeg_std_error (struct jpeg_error_mgr * err)
{
   11bc8:	defffe04 	addi	sp,sp,-8
   11bcc:	df000115 	stw	fp,4(sp)
   11bd0:	df000104 	addi	fp,sp,4
   11bd4:	e13fff15 	stw	r4,-4(fp)
	err->error_exit = error_exit;
   11bd8:	e0bfff17 	ldw	r2,-4(fp)
   11bdc:	00c00074 	movhi	r3,1
   11be0:	18c61304 	addi	r3,r3,6220
   11be4:	10c00015 	stw	r3,0(r2)
	err->emit_message = emit_message;
   11be8:	e0bfff17 	ldw	r2,-4(fp)
   11bec:	00c00074 	movhi	r3,1
   11bf0:	18c63a04 	addi	r3,r3,6376
   11bf4:	10c00115 	stw	r3,4(r2)
	err->output_message = output_message;
   11bf8:	e0bfff17 	ldw	r2,-4(fp)
   11bfc:	00c00074 	movhi	r3,1
   11c00:	18c62104 	addi	r3,r3,6276
   11c04:	10c00215 	stw	r3,8(r2)
	err->format_message = format_message;
   11c08:	e0bfff17 	ldw	r2,-4(fp)
   11c0c:	00c00074 	movhi	r3,1
   11c10:	18c66304 	addi	r3,r3,6540
   11c14:	10c00315 	stw	r3,12(r2)
	err->reset_error_mgr = reset_error_mgr;
   11c18:	e0bfff17 	ldw	r2,-4(fp)
   11c1c:	00c00074 	movhi	r3,1
   11c20:	18c6e404 	addi	r3,r3,7056
   11c24:	10c00415 	stw	r3,16(r2)

	err->trace_level = 0;		/* default = no tracing */
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	10001a15 	stw	zero,104(r2)
	err->num_warnings = 0;	/* no warnings emitted yet */
   11c30:	e0bfff17 	ldw	r2,-4(fp)
   11c34:	10001b15 	stw	zero,108(r2)
	err->msg_code = 0;		/* may be useful as a flag for "no error" */
   11c38:	e0bfff17 	ldw	r2,-4(fp)
   11c3c:	10000515 	stw	zero,20(r2)

	/* Initialize message table pointers */
	err->jpeg_message_table = jpeg_std_message_table;
   11c40:	e0bfff17 	ldw	r2,-4(fp)
   11c44:	00c00134 	movhi	r3,4
   11c48:	18c16804 	addi	r3,r3,1440
   11c4c:	10c01c15 	stw	r3,112(r2)
	err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
   11c50:	e0bfff17 	ldw	r2,-4(fp)
   11c54:	00c01f84 	movi	r3,126
   11c58:	10c01d15 	stw	r3,116(r2)

	err->addon_message_table = NULL;
   11c5c:	e0bfff17 	ldw	r2,-4(fp)
   11c60:	10001e15 	stw	zero,120(r2)
	err->first_addon_message = 0;	/* for safety */
   11c64:	e0bfff17 	ldw	r2,-4(fp)
   11c68:	10001f15 	stw	zero,124(r2)
	err->last_addon_message = 0;
   11c6c:	e0bfff17 	ldw	r2,-4(fp)
   11c70:	10002015 	stw	zero,128(r2)

	return err;
   11c74:	e0bfff17 	ldw	r2,-4(fp)
}
   11c78:	e037883a 	mov	sp,fp
   11c7c:	df000017 	ldw	fp,0(sp)
   11c80:	dec00104 	addi	sp,sp,4
   11c84:	f800283a 	ret

00011c88 <jpeg_fdct_float>:
	* Perform the forward DCT on one block of samples.
	*/

	GLOBAL(void)
	jpeg_fdct_float (FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
   11c88:	deffe404 	addi	sp,sp,-112
   11c8c:	dfc01b15 	stw	ra,108(sp)
   11c90:	df001a15 	stw	fp,104(sp)
   11c94:	dc001915 	stw	r16,100(sp)
   11c98:	df001904 	addi	fp,sp,100
   11c9c:	e13ffd15 	stw	r4,-12(fp)
   11ca0:	e17ffe15 	stw	r5,-8(fp)
   11ca4:	e1bfff15 	stw	r6,-4(fp)
	JSAMPROW elemptr;
	int ctr;

	/* Pass 1: process rows. */

	dataptr = data;
   11ca8:	e0bffd17 	ldw	r2,-12(fp)
   11cac:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   11cb0:	e03fe815 	stw	zero,-96(fp)
   11cb4:	00011806 	br	12118 <jpeg_fdct_float+0x490>
		elemptr = sample_data[ctr] + start_col;
   11cb8:	e0bfe817 	ldw	r2,-96(fp)
   11cbc:	1085883a 	add	r2,r2,r2
   11cc0:	1085883a 	add	r2,r2,r2
   11cc4:	e0fffe17 	ldw	r3,-8(fp)
   11cc8:	1885883a 	add	r2,r3,r2
   11ccc:	10c00017 	ldw	r3,0(r2)
   11cd0:	e0bfff17 	ldw	r2,-4(fp)
   11cd4:	1885883a 	add	r2,r3,r2
   11cd8:	e0bfe915 	stw	r2,-92(fp)

		/* Load data into workspace */
		tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
   11cdc:	e0bfe917 	ldw	r2,-92(fp)
   11ce0:	10800003 	ldbu	r2,0(r2)
   11ce4:	10c03fcc 	andi	r3,r2,255
   11ce8:	e0bfe917 	ldw	r2,-92(fp)
   11cec:	108001c4 	addi	r2,r2,7
   11cf0:	10800003 	ldbu	r2,0(r2)
   11cf4:	10803fcc 	andi	r2,r2,255
   11cf8:	1885883a 	add	r2,r3,r2
   11cfc:	1009883a 	mov	r4,r2
   11d00:	002b8c80 	call	2b8c8 <__floatsisf>
   11d04:	1007883a 	mov	r3,r2
   11d08:	e0ffea15 	stw	r3,-88(fp)
		tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
   11d0c:	e0bfe917 	ldw	r2,-92(fp)
   11d10:	10800003 	ldbu	r2,0(r2)
   11d14:	10c03fcc 	andi	r3,r2,255
   11d18:	e0bfe917 	ldw	r2,-92(fp)
   11d1c:	108001c4 	addi	r2,r2,7
   11d20:	10800003 	ldbu	r2,0(r2)
   11d24:	10803fcc 	andi	r2,r2,255
   11d28:	1885c83a 	sub	r2,r3,r2
   11d2c:	1009883a 	mov	r4,r2
   11d30:	002b8c80 	call	2b8c8 <__floatsisf>
   11d34:	1007883a 	mov	r3,r2
   11d38:	e0ffeb15 	stw	r3,-84(fp)
		tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
   11d3c:	e0bfe917 	ldw	r2,-92(fp)
   11d40:	10800044 	addi	r2,r2,1
   11d44:	10800003 	ldbu	r2,0(r2)
   11d48:	10c03fcc 	andi	r3,r2,255
   11d4c:	e0bfe917 	ldw	r2,-92(fp)
   11d50:	10800184 	addi	r2,r2,6
   11d54:	10800003 	ldbu	r2,0(r2)
   11d58:	10803fcc 	andi	r2,r2,255
   11d5c:	1885883a 	add	r2,r3,r2
   11d60:	1009883a 	mov	r4,r2
   11d64:	002b8c80 	call	2b8c8 <__floatsisf>
   11d68:	1007883a 	mov	r3,r2
   11d6c:	e0ffec15 	stw	r3,-80(fp)
		tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
   11d70:	e0bfe917 	ldw	r2,-92(fp)
   11d74:	10800044 	addi	r2,r2,1
   11d78:	10800003 	ldbu	r2,0(r2)
   11d7c:	10c03fcc 	andi	r3,r2,255
   11d80:	e0bfe917 	ldw	r2,-92(fp)
   11d84:	10800184 	addi	r2,r2,6
   11d88:	10800003 	ldbu	r2,0(r2)
   11d8c:	10803fcc 	andi	r2,r2,255
   11d90:	1885c83a 	sub	r2,r3,r2
   11d94:	1009883a 	mov	r4,r2
   11d98:	002b8c80 	call	2b8c8 <__floatsisf>
   11d9c:	1007883a 	mov	r3,r2
   11da0:	e0ffed15 	stw	r3,-76(fp)
		tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
   11da4:	e0bfe917 	ldw	r2,-92(fp)
   11da8:	10800084 	addi	r2,r2,2
   11dac:	10800003 	ldbu	r2,0(r2)
   11db0:	10c03fcc 	andi	r3,r2,255
   11db4:	e0bfe917 	ldw	r2,-92(fp)
   11db8:	10800144 	addi	r2,r2,5
   11dbc:	10800003 	ldbu	r2,0(r2)
   11dc0:	10803fcc 	andi	r2,r2,255
   11dc4:	1885883a 	add	r2,r3,r2
   11dc8:	1009883a 	mov	r4,r2
   11dcc:	002b8c80 	call	2b8c8 <__floatsisf>
   11dd0:	1007883a 	mov	r3,r2
   11dd4:	e0ffee15 	stw	r3,-72(fp)
		tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
   11dd8:	e0bfe917 	ldw	r2,-92(fp)
   11ddc:	10800084 	addi	r2,r2,2
   11de0:	10800003 	ldbu	r2,0(r2)
   11de4:	10c03fcc 	andi	r3,r2,255
   11de8:	e0bfe917 	ldw	r2,-92(fp)
   11dec:	10800144 	addi	r2,r2,5
   11df0:	10800003 	ldbu	r2,0(r2)
   11df4:	10803fcc 	andi	r2,r2,255
   11df8:	1885c83a 	sub	r2,r3,r2
   11dfc:	1009883a 	mov	r4,r2
   11e00:	002b8c80 	call	2b8c8 <__floatsisf>
   11e04:	1007883a 	mov	r3,r2
   11e08:	e0ffef15 	stw	r3,-68(fp)
		tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
   11e0c:	e0bfe917 	ldw	r2,-92(fp)
   11e10:	108000c4 	addi	r2,r2,3
   11e14:	10800003 	ldbu	r2,0(r2)
   11e18:	10c03fcc 	andi	r3,r2,255
   11e1c:	e0bfe917 	ldw	r2,-92(fp)
   11e20:	10800104 	addi	r2,r2,4
   11e24:	10800003 	ldbu	r2,0(r2)
   11e28:	10803fcc 	andi	r2,r2,255
   11e2c:	1885883a 	add	r2,r3,r2
   11e30:	1009883a 	mov	r4,r2
   11e34:	002b8c80 	call	2b8c8 <__floatsisf>
   11e38:	1007883a 	mov	r3,r2
   11e3c:	e0fff015 	stw	r3,-64(fp)
		tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
   11e40:	e0bfe917 	ldw	r2,-92(fp)
   11e44:	108000c4 	addi	r2,r2,3
   11e48:	10800003 	ldbu	r2,0(r2)
   11e4c:	10c03fcc 	andi	r3,r2,255
   11e50:	e0bfe917 	ldw	r2,-92(fp)
   11e54:	10800104 	addi	r2,r2,4
   11e58:	10800003 	ldbu	r2,0(r2)
   11e5c:	10803fcc 	andi	r2,r2,255
   11e60:	1885c83a 	sub	r2,r3,r2
   11e64:	1009883a 	mov	r4,r2
   11e68:	002b8c80 	call	2b8c8 <__floatsisf>
   11e6c:	1007883a 	mov	r3,r2
   11e70:	e0fff115 	stw	r3,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
   11e74:	e13fea17 	ldw	r4,-88(fp)
   11e78:	e17ff017 	ldw	r5,-64(fp)
   11e7c:	002b6940 	call	2b694 <__addsf3>
   11e80:	1007883a 	mov	r3,r2
   11e84:	e0fff215 	stw	r3,-56(fp)
		tmp13 = tmp0 - tmp3;
   11e88:	e13fea17 	ldw	r4,-88(fp)
   11e8c:	e17ff017 	ldw	r5,-64(fp)
   11e90:	002b6e00 	call	2b6e0 <__subsf3>
   11e94:	1007883a 	mov	r3,r2
   11e98:	e0fff315 	stw	r3,-52(fp)
		tmp11 = tmp1 + tmp2;
   11e9c:	e13fec17 	ldw	r4,-80(fp)
   11ea0:	e17fee17 	ldw	r5,-72(fp)
   11ea4:	002b6940 	call	2b694 <__addsf3>
   11ea8:	1007883a 	mov	r3,r2
   11eac:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp1 - tmp2;
   11eb0:	e13fec17 	ldw	r4,-80(fp)
   11eb4:	e17fee17 	ldw	r5,-72(fp)
   11eb8:	002b6e00 	call	2b6e0 <__subsf3>
   11ebc:	1007883a 	mov	r3,r2
   11ec0:	e0fff515 	stw	r3,-44(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
   11ec4:	e13ff217 	ldw	r4,-56(fp)
   11ec8:	e17ff417 	ldw	r5,-48(fp)
   11ecc:	002b6940 	call	2b694 <__addsf3>
   11ed0:	1007883a 	mov	r3,r2
   11ed4:	1805883a 	mov	r2,r3
   11ed8:	1009883a 	mov	r4,r2
   11edc:	01512034 	movhi	r5,17536
   11ee0:	002b6e00 	call	2b6e0 <__subsf3>
   11ee4:	1009883a 	mov	r4,r2
   11ee8:	2007883a 	mov	r3,r4
   11eec:	e0bfe717 	ldw	r2,-100(fp)
   11ef0:	10c00015 	stw	r3,0(r2)
		dataptr[4] = tmp10 - tmp11;
   11ef4:	e0bfe717 	ldw	r2,-100(fp)
   11ef8:	14000404 	addi	r16,r2,16
   11efc:	e13ff217 	ldw	r4,-56(fp)
   11f00:	e17ff417 	ldw	r5,-48(fp)
   11f04:	002b6e00 	call	2b6e0 <__subsf3>
   11f08:	1007883a 	mov	r3,r2
   11f0c:	1805883a 	mov	r2,r3
   11f10:	80800015 	stw	r2,0(r16)

		z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
   11f14:	e13ff517 	ldw	r4,-44(fp)
   11f18:	e17ff317 	ldw	r5,-52(fp)
   11f1c:	002b6940 	call	2b694 <__addsf3>
   11f20:	1007883a 	mov	r3,r2
   11f24:	1805883a 	mov	r2,r3
   11f28:	1009883a 	mov	r4,r2
   11f2c:	014fcd74 	movhi	r5,16181
   11f30:	29413cc4 	addi	r5,r5,1267
   11f34:	002b7380 	call	2b738 <__mulsf3>
   11f38:	1007883a 	mov	r3,r2
   11f3c:	e0fff615 	stw	r3,-40(fp)
		dataptr[2] = tmp13 + z1;	/* phase 5 */
   11f40:	e0bfe717 	ldw	r2,-100(fp)
   11f44:	14000204 	addi	r16,r2,8
   11f48:	e13ff317 	ldw	r4,-52(fp)
   11f4c:	e17ff617 	ldw	r5,-40(fp)
   11f50:	002b6940 	call	2b694 <__addsf3>
   11f54:	1007883a 	mov	r3,r2
   11f58:	1805883a 	mov	r2,r3
   11f5c:	80800015 	stw	r2,0(r16)
		dataptr[6] = tmp13 - z1;
   11f60:	e0bfe717 	ldw	r2,-100(fp)
   11f64:	14000604 	addi	r16,r2,24
   11f68:	e13ff317 	ldw	r4,-52(fp)
   11f6c:	e17ff617 	ldw	r5,-40(fp)
   11f70:	002b6e00 	call	2b6e0 <__subsf3>
   11f74:	1007883a 	mov	r3,r2
   11f78:	1805883a 	mov	r2,r3
   11f7c:	80800015 	stw	r2,0(r16)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
   11f80:	e13ff117 	ldw	r4,-60(fp)
   11f84:	e17fef17 	ldw	r5,-68(fp)
   11f88:	002b6940 	call	2b694 <__addsf3>
   11f8c:	1007883a 	mov	r3,r2
   11f90:	e0fff215 	stw	r3,-56(fp)
		tmp11 = tmp5 + tmp6;
   11f94:	e13fef17 	ldw	r4,-68(fp)
   11f98:	e17fed17 	ldw	r5,-76(fp)
   11f9c:	002b6940 	call	2b694 <__addsf3>
   11fa0:	1007883a 	mov	r3,r2
   11fa4:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp6 + tmp7;
   11fa8:	e13fed17 	ldw	r4,-76(fp)
   11fac:	e17feb17 	ldw	r5,-84(fp)
   11fb0:	002b6940 	call	2b694 <__addsf3>
   11fb4:	1007883a 	mov	r3,r2
   11fb8:	e0fff515 	stw	r3,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
   11fbc:	e13ff217 	ldw	r4,-56(fp)
   11fc0:	e17ff517 	ldw	r5,-44(fp)
   11fc4:	002b6e00 	call	2b6e0 <__subsf3>
   11fc8:	1007883a 	mov	r3,r2
   11fcc:	1805883a 	mov	r2,r3
   11fd0:	1009883a 	mov	r4,r2
   11fd4:	014fb134 	movhi	r5,16068
   11fd8:	297bc544 	addi	r5,r5,-4331
   11fdc:	002b7380 	call	2b738 <__mulsf3>
   11fe0:	1007883a 	mov	r3,r2
   11fe4:	e0fff715 	stw	r3,-36(fp)
		z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
   11fe8:	e13ff217 	ldw	r4,-56(fp)
   11fec:	014fc2f4 	movhi	r5,16139
   11ff0:	2962f504 	addi	r5,r5,-29740
   11ff4:	002b7380 	call	2b738 <__mulsf3>
   11ff8:	1007883a 	mov	r3,r2
   11ffc:	1805883a 	mov	r2,r3
   12000:	1009883a 	mov	r4,r2
   12004:	e17ff717 	ldw	r5,-36(fp)
   12008:	002b6940 	call	2b694 <__addsf3>
   1200c:	1007883a 	mov	r3,r2
   12010:	e0fff815 	stw	r3,-32(fp)
		z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
   12014:	e13ff517 	ldw	r4,-44(fp)
   12018:	014fe9f4 	movhi	r5,16295
   1201c:	294f5d44 	addi	r5,r5,15733
   12020:	002b7380 	call	2b738 <__mulsf3>
   12024:	1007883a 	mov	r3,r2
   12028:	1805883a 	mov	r2,r3
   1202c:	1009883a 	mov	r4,r2
   12030:	e17ff717 	ldw	r5,-36(fp)
   12034:	002b6940 	call	2b694 <__addsf3>
   12038:	1007883a 	mov	r3,r2
   1203c:	e0fff915 	stw	r3,-28(fp)
		z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
   12040:	e13ff417 	ldw	r4,-48(fp)
   12044:	014fcd74 	movhi	r5,16181
   12048:	29413cc4 	addi	r5,r5,1267
   1204c:	002b7380 	call	2b738 <__mulsf3>
   12050:	1007883a 	mov	r3,r2
   12054:	e0fffa15 	stw	r3,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
   12058:	e13feb17 	ldw	r4,-84(fp)
   1205c:	e17ffa17 	ldw	r5,-24(fp)
   12060:	002b6940 	call	2b694 <__addsf3>
   12064:	1007883a 	mov	r3,r2
   12068:	e0fffb15 	stw	r3,-20(fp)
		z13 = tmp7 - z3;
   1206c:	e13feb17 	ldw	r4,-84(fp)
   12070:	e17ffa17 	ldw	r5,-24(fp)
   12074:	002b6e00 	call	2b6e0 <__subsf3>
   12078:	1007883a 	mov	r3,r2
   1207c:	e0fffc15 	stw	r3,-16(fp)

		dataptr[5] = z13 + z2;	/* phase 6 */
   12080:	e0bfe717 	ldw	r2,-100(fp)
   12084:	14000504 	addi	r16,r2,20
   12088:	e13ffc17 	ldw	r4,-16(fp)
   1208c:	e17ff817 	ldw	r5,-32(fp)
   12090:	002b6940 	call	2b694 <__addsf3>
   12094:	1007883a 	mov	r3,r2
   12098:	1805883a 	mov	r2,r3
   1209c:	80800015 	stw	r2,0(r16)
		dataptr[3] = z13 - z2;
   120a0:	e0bfe717 	ldw	r2,-100(fp)
   120a4:	14000304 	addi	r16,r2,12
   120a8:	e13ffc17 	ldw	r4,-16(fp)
   120ac:	e17ff817 	ldw	r5,-32(fp)
   120b0:	002b6e00 	call	2b6e0 <__subsf3>
   120b4:	1007883a 	mov	r3,r2
   120b8:	1805883a 	mov	r2,r3
   120bc:	80800015 	stw	r2,0(r16)
		dataptr[1] = z11 + z4;
   120c0:	e0bfe717 	ldw	r2,-100(fp)
   120c4:	14000104 	addi	r16,r2,4
   120c8:	e13ffb17 	ldw	r4,-20(fp)
   120cc:	e17ff917 	ldw	r5,-28(fp)
   120d0:	002b6940 	call	2b694 <__addsf3>
   120d4:	1007883a 	mov	r3,r2
   120d8:	1805883a 	mov	r2,r3
   120dc:	80800015 	stw	r2,0(r16)
		dataptr[7] = z11 - z4;
   120e0:	e0bfe717 	ldw	r2,-100(fp)
   120e4:	14000704 	addi	r16,r2,28
   120e8:	e13ffb17 	ldw	r4,-20(fp)
   120ec:	e17ff917 	ldw	r5,-28(fp)
   120f0:	002b6e00 	call	2b6e0 <__subsf3>
   120f4:	1007883a 	mov	r3,r2
   120f8:	1805883a 	mov	r2,r3
   120fc:	80800015 	stw	r2,0(r16)

		dataptr += DCTSIZE;		/* advance pointer to next row */
   12100:	e0bfe717 	ldw	r2,-100(fp)
   12104:	10800804 	addi	r2,r2,32
   12108:	e0bfe715 	stw	r2,-100(fp)
	int ctr;

	/* Pass 1: process rows. */

	dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   1210c:	e0bfe817 	ldw	r2,-96(fp)
   12110:	10800044 	addi	r2,r2,1
   12114:	e0bfe815 	stw	r2,-96(fp)
   12118:	e0bfe817 	ldw	r2,-96(fp)
   1211c:	10800210 	cmplti	r2,r2,8
   12120:	103ee51e 	bne	r2,zero,11cb8 <jpeg_fdct_float+0x30>
		dataptr += DCTSIZE;		/* advance pointer to next row */
	}

	/* Pass 2: process columns. */

	dataptr = data;
   12124:	e0bffd17 	ldw	r2,-12(fp)
   12128:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   1212c:	008001c4 	movi	r2,7
   12130:	e0bfe815 	stw	r2,-96(fp)
   12134:	0000fa06 	br	12520 <jpeg_fdct_float+0x898>
		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
   12138:	e0bfe717 	ldw	r2,-100(fp)
   1213c:	10c00017 	ldw	r3,0(r2)
   12140:	e0bfe717 	ldw	r2,-100(fp)
   12144:	11003804 	addi	r4,r2,224
   12148:	20800017 	ldw	r2,0(r4)
   1214c:	1809883a 	mov	r4,r3
   12150:	100b883a 	mov	r5,r2
   12154:	002b6940 	call	2b694 <__addsf3>
   12158:	1007883a 	mov	r3,r2
   1215c:	e0ffea15 	stw	r3,-88(fp)
		tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
   12160:	e0bfe717 	ldw	r2,-100(fp)
   12164:	10c00017 	ldw	r3,0(r2)
   12168:	e0bfe717 	ldw	r2,-100(fp)
   1216c:	11003804 	addi	r4,r2,224
   12170:	20800017 	ldw	r2,0(r4)
   12174:	1809883a 	mov	r4,r3
   12178:	100b883a 	mov	r5,r2
   1217c:	002b6e00 	call	2b6e0 <__subsf3>
   12180:	1007883a 	mov	r3,r2
   12184:	e0ffeb15 	stw	r3,-84(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
   12188:	e0bfe717 	ldw	r2,-100(fp)
   1218c:	10800804 	addi	r2,r2,32
   12190:	10c00017 	ldw	r3,0(r2)
   12194:	e0bfe717 	ldw	r2,-100(fp)
   12198:	11003004 	addi	r4,r2,192
   1219c:	20800017 	ldw	r2,0(r4)
   121a0:	1809883a 	mov	r4,r3
   121a4:	100b883a 	mov	r5,r2
   121a8:	002b6940 	call	2b694 <__addsf3>
   121ac:	1007883a 	mov	r3,r2
   121b0:	e0ffec15 	stw	r3,-80(fp)
		tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
   121b4:	e0bfe717 	ldw	r2,-100(fp)
   121b8:	10800804 	addi	r2,r2,32
   121bc:	10c00017 	ldw	r3,0(r2)
   121c0:	e0bfe717 	ldw	r2,-100(fp)
   121c4:	11003004 	addi	r4,r2,192
   121c8:	20800017 	ldw	r2,0(r4)
   121cc:	1809883a 	mov	r4,r3
   121d0:	100b883a 	mov	r5,r2
   121d4:	002b6e00 	call	2b6e0 <__subsf3>
   121d8:	1007883a 	mov	r3,r2
   121dc:	e0ffed15 	stw	r3,-76(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
   121e0:	e0bfe717 	ldw	r2,-100(fp)
   121e4:	10801004 	addi	r2,r2,64
   121e8:	10c00017 	ldw	r3,0(r2)
   121ec:	e0bfe717 	ldw	r2,-100(fp)
   121f0:	11002804 	addi	r4,r2,160
   121f4:	20800017 	ldw	r2,0(r4)
   121f8:	1809883a 	mov	r4,r3
   121fc:	100b883a 	mov	r5,r2
   12200:	002b6940 	call	2b694 <__addsf3>
   12204:	1007883a 	mov	r3,r2
   12208:	e0ffee15 	stw	r3,-72(fp)
		tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
   1220c:	e0bfe717 	ldw	r2,-100(fp)
   12210:	10801004 	addi	r2,r2,64
   12214:	10c00017 	ldw	r3,0(r2)
   12218:	e0bfe717 	ldw	r2,-100(fp)
   1221c:	11002804 	addi	r4,r2,160
   12220:	20800017 	ldw	r2,0(r4)
   12224:	1809883a 	mov	r4,r3
   12228:	100b883a 	mov	r5,r2
   1222c:	002b6e00 	call	2b6e0 <__subsf3>
   12230:	1007883a 	mov	r3,r2
   12234:	e0ffef15 	stw	r3,-68(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
   12238:	e0bfe717 	ldw	r2,-100(fp)
   1223c:	10801804 	addi	r2,r2,96
   12240:	10c00017 	ldw	r3,0(r2)
   12244:	e0bfe717 	ldw	r2,-100(fp)
   12248:	11002004 	addi	r4,r2,128
   1224c:	20800017 	ldw	r2,0(r4)
   12250:	1809883a 	mov	r4,r3
   12254:	100b883a 	mov	r5,r2
   12258:	002b6940 	call	2b694 <__addsf3>
   1225c:	1007883a 	mov	r3,r2
   12260:	e0fff015 	stw	r3,-64(fp)
		tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
   12264:	e0bfe717 	ldw	r2,-100(fp)
   12268:	10801804 	addi	r2,r2,96
   1226c:	10c00017 	ldw	r3,0(r2)
   12270:	e0bfe717 	ldw	r2,-100(fp)
   12274:	11002004 	addi	r4,r2,128
   12278:	20800017 	ldw	r2,0(r4)
   1227c:	1809883a 	mov	r4,r3
   12280:	100b883a 	mov	r5,r2
   12284:	002b6e00 	call	2b6e0 <__subsf3>
   12288:	1007883a 	mov	r3,r2
   1228c:	e0fff115 	stw	r3,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
   12290:	e13fea17 	ldw	r4,-88(fp)
   12294:	e17ff017 	ldw	r5,-64(fp)
   12298:	002b6940 	call	2b694 <__addsf3>
   1229c:	1007883a 	mov	r3,r2
   122a0:	e0fff215 	stw	r3,-56(fp)
		tmp13 = tmp0 - tmp3;
   122a4:	e13fea17 	ldw	r4,-88(fp)
   122a8:	e17ff017 	ldw	r5,-64(fp)
   122ac:	002b6e00 	call	2b6e0 <__subsf3>
   122b0:	1007883a 	mov	r3,r2
   122b4:	e0fff315 	stw	r3,-52(fp)
		tmp11 = tmp1 + tmp2;
   122b8:	e13fec17 	ldw	r4,-80(fp)
   122bc:	e17fee17 	ldw	r5,-72(fp)
   122c0:	002b6940 	call	2b694 <__addsf3>
   122c4:	1007883a 	mov	r3,r2
   122c8:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp1 - tmp2;
   122cc:	e13fec17 	ldw	r4,-80(fp)
   122d0:	e17fee17 	ldw	r5,-72(fp)
   122d4:	002b6e00 	call	2b6e0 <__subsf3>
   122d8:	1007883a 	mov	r3,r2
   122dc:	e0fff515 	stw	r3,-44(fp)

		dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
   122e0:	e13ff217 	ldw	r4,-56(fp)
   122e4:	e17ff417 	ldw	r5,-48(fp)
   122e8:	002b6940 	call	2b694 <__addsf3>
   122ec:	1009883a 	mov	r4,r2
   122f0:	2007883a 	mov	r3,r4
   122f4:	e0bfe717 	ldw	r2,-100(fp)
   122f8:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = tmp10 - tmp11;
   122fc:	e0bfe717 	ldw	r2,-100(fp)
   12300:	14002004 	addi	r16,r2,128
   12304:	e13ff217 	ldw	r4,-56(fp)
   12308:	e17ff417 	ldw	r5,-48(fp)
   1230c:	002b6e00 	call	2b6e0 <__subsf3>
   12310:	1007883a 	mov	r3,r2
   12314:	1805883a 	mov	r2,r3
   12318:	80800015 	stw	r2,0(r16)

		z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
   1231c:	e13ff517 	ldw	r4,-44(fp)
   12320:	e17ff317 	ldw	r5,-52(fp)
   12324:	002b6940 	call	2b694 <__addsf3>
   12328:	1007883a 	mov	r3,r2
   1232c:	1805883a 	mov	r2,r3
   12330:	1009883a 	mov	r4,r2
   12334:	014fcd74 	movhi	r5,16181
   12338:	29413cc4 	addi	r5,r5,1267
   1233c:	002b7380 	call	2b738 <__mulsf3>
   12340:	1007883a 	mov	r3,r2
   12344:	e0fff615 	stw	r3,-40(fp)
		dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
   12348:	e0bfe717 	ldw	r2,-100(fp)
   1234c:	14001004 	addi	r16,r2,64
   12350:	e13ff317 	ldw	r4,-52(fp)
   12354:	e17ff617 	ldw	r5,-40(fp)
   12358:	002b6940 	call	2b694 <__addsf3>
   1235c:	1007883a 	mov	r3,r2
   12360:	1805883a 	mov	r2,r3
   12364:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*6] = tmp13 - z1;
   12368:	e0bfe717 	ldw	r2,-100(fp)
   1236c:	14003004 	addi	r16,r2,192
   12370:	e13ff317 	ldw	r4,-52(fp)
   12374:	e17ff617 	ldw	r5,-40(fp)
   12378:	002b6e00 	call	2b6e0 <__subsf3>
   1237c:	1007883a 	mov	r3,r2
   12380:	1805883a 	mov	r2,r3
   12384:	80800015 	stw	r2,0(r16)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
   12388:	e13ff117 	ldw	r4,-60(fp)
   1238c:	e17fef17 	ldw	r5,-68(fp)
   12390:	002b6940 	call	2b694 <__addsf3>
   12394:	1007883a 	mov	r3,r2
   12398:	e0fff215 	stw	r3,-56(fp)
		tmp11 = tmp5 + tmp6;
   1239c:	e13fef17 	ldw	r4,-68(fp)
   123a0:	e17fed17 	ldw	r5,-76(fp)
   123a4:	002b6940 	call	2b694 <__addsf3>
   123a8:	1007883a 	mov	r3,r2
   123ac:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp6 + tmp7;
   123b0:	e13fed17 	ldw	r4,-76(fp)
   123b4:	e17feb17 	ldw	r5,-84(fp)
   123b8:	002b6940 	call	2b694 <__addsf3>
   123bc:	1007883a 	mov	r3,r2
   123c0:	e0fff515 	stw	r3,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
   123c4:	e13ff217 	ldw	r4,-56(fp)
   123c8:	e17ff517 	ldw	r5,-44(fp)
   123cc:	002b6e00 	call	2b6e0 <__subsf3>
   123d0:	1007883a 	mov	r3,r2
   123d4:	1805883a 	mov	r2,r3
   123d8:	1009883a 	mov	r4,r2
   123dc:	014fb134 	movhi	r5,16068
   123e0:	297bc544 	addi	r5,r5,-4331
   123e4:	002b7380 	call	2b738 <__mulsf3>
   123e8:	1007883a 	mov	r3,r2
   123ec:	e0fff715 	stw	r3,-36(fp)
		z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
   123f0:	e13ff217 	ldw	r4,-56(fp)
   123f4:	014fc2f4 	movhi	r5,16139
   123f8:	2962f504 	addi	r5,r5,-29740
   123fc:	002b7380 	call	2b738 <__mulsf3>
   12400:	1007883a 	mov	r3,r2
   12404:	1805883a 	mov	r2,r3
   12408:	1009883a 	mov	r4,r2
   1240c:	e17ff717 	ldw	r5,-36(fp)
   12410:	002b6940 	call	2b694 <__addsf3>
   12414:	1007883a 	mov	r3,r2
   12418:	e0fff815 	stw	r3,-32(fp)
		z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
   1241c:	e13ff517 	ldw	r4,-44(fp)
   12420:	014fe9f4 	movhi	r5,16295
   12424:	294f5d44 	addi	r5,r5,15733
   12428:	002b7380 	call	2b738 <__mulsf3>
   1242c:	1007883a 	mov	r3,r2
   12430:	1805883a 	mov	r2,r3
   12434:	1009883a 	mov	r4,r2
   12438:	e17ff717 	ldw	r5,-36(fp)
   1243c:	002b6940 	call	2b694 <__addsf3>
   12440:	1007883a 	mov	r3,r2
   12444:	e0fff915 	stw	r3,-28(fp)
		z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
   12448:	e13ff417 	ldw	r4,-48(fp)
   1244c:	014fcd74 	movhi	r5,16181
   12450:	29413cc4 	addi	r5,r5,1267
   12454:	002b7380 	call	2b738 <__mulsf3>
   12458:	1007883a 	mov	r3,r2
   1245c:	e0fffa15 	stw	r3,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
   12460:	e13feb17 	ldw	r4,-84(fp)
   12464:	e17ffa17 	ldw	r5,-24(fp)
   12468:	002b6940 	call	2b694 <__addsf3>
   1246c:	1007883a 	mov	r3,r2
   12470:	e0fffb15 	stw	r3,-20(fp)
		z13 = tmp7 - z3;
   12474:	e13feb17 	ldw	r4,-84(fp)
   12478:	e17ffa17 	ldw	r5,-24(fp)
   1247c:	002b6e00 	call	2b6e0 <__subsf3>
   12480:	1007883a 	mov	r3,r2
   12484:	e0fffc15 	stw	r3,-16(fp)

		dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
   12488:	e0bfe717 	ldw	r2,-100(fp)
   1248c:	14002804 	addi	r16,r2,160
   12490:	e13ffc17 	ldw	r4,-16(fp)
   12494:	e17ff817 	ldw	r5,-32(fp)
   12498:	002b6940 	call	2b694 <__addsf3>
   1249c:	1007883a 	mov	r3,r2
   124a0:	1805883a 	mov	r2,r3
   124a4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*3] = z13 - z2;
   124a8:	e0bfe717 	ldw	r2,-100(fp)
   124ac:	14001804 	addi	r16,r2,96
   124b0:	e13ffc17 	ldw	r4,-16(fp)
   124b4:	e17ff817 	ldw	r5,-32(fp)
   124b8:	002b6e00 	call	2b6e0 <__subsf3>
   124bc:	1007883a 	mov	r3,r2
   124c0:	1805883a 	mov	r2,r3
   124c4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*1] = z11 + z4;
   124c8:	e0bfe717 	ldw	r2,-100(fp)
   124cc:	14000804 	addi	r16,r2,32
   124d0:	e13ffb17 	ldw	r4,-20(fp)
   124d4:	e17ff917 	ldw	r5,-28(fp)
   124d8:	002b6940 	call	2b694 <__addsf3>
   124dc:	1007883a 	mov	r3,r2
   124e0:	1805883a 	mov	r2,r3
   124e4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*7] = z11 - z4;
   124e8:	e0bfe717 	ldw	r2,-100(fp)
   124ec:	14003804 	addi	r16,r2,224
   124f0:	e13ffb17 	ldw	r4,-20(fp)
   124f4:	e17ff917 	ldw	r5,-28(fp)
   124f8:	002b6e00 	call	2b6e0 <__subsf3>
   124fc:	1007883a 	mov	r3,r2
   12500:	1805883a 	mov	r2,r3
   12504:	80800015 	stw	r2,0(r16)

		dataptr++;			/* advance pointer to next column */
   12508:	e0bfe717 	ldw	r2,-100(fp)
   1250c:	10800104 	addi	r2,r2,4
   12510:	e0bfe715 	stw	r2,-100(fp)
	}

	/* Pass 2: process columns. */

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   12514:	e0bfe817 	ldw	r2,-96(fp)
   12518:	10bfffc4 	addi	r2,r2,-1
   1251c:	e0bfe815 	stw	r2,-96(fp)
   12520:	e0bfe817 	ldw	r2,-96(fp)
   12524:	103f040e 	bge	r2,zero,12138 <jpeg_fdct_float+0x4b0>
		dataptr[DCTSIZE*1] = z11 + z4;
		dataptr[DCTSIZE*7] = z11 - z4;

		dataptr++;			/* advance pointer to next column */
	}
}
   12528:	e037883a 	mov	sp,fp
   1252c:	dfc00217 	ldw	ra,8(sp)
   12530:	df000117 	ldw	fp,4(sp)
   12534:	dc000017 	ldw	r16,0(sp)
   12538:	dec00304 	addi	sp,sp,12
   1253c:	f800283a 	ret

00012540 <jpeg_fdct_ifast>:
	* Perform the forward DCT on one block of samples.
	*/

	GLOBAL(void)
	jpeg_fdct_ifast (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
   12540:	deffe504 	addi	sp,sp,-108
   12544:	dfc01a15 	stw	ra,104(sp)
   12548:	df001915 	stw	fp,100(sp)
   1254c:	df001904 	addi	fp,sp,100
   12550:	e13ffd15 	stw	r4,-12(fp)
   12554:	e17ffe15 	stw	r5,-8(fp)
   12558:	e1bfff15 	stw	r6,-4(fp)
	int ctr;
	SHIFT_TEMPS

		/* Pass 1: process rows. */

		dataptr = data;
   1255c:	e0bffd17 	ldw	r2,-12(fp)
   12560:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   12564:	e03fe815 	stw	zero,-96(fp)
   12568:	0000d406 	br	128bc <jpeg_fdct_ifast+0x37c>
		elemptr = sample_data[ctr] + start_col;
   1256c:	e0bfe817 	ldw	r2,-96(fp)
   12570:	1085883a 	add	r2,r2,r2
   12574:	1085883a 	add	r2,r2,r2
   12578:	e0fffe17 	ldw	r3,-8(fp)
   1257c:	1885883a 	add	r2,r3,r2
   12580:	10c00017 	ldw	r3,0(r2)
   12584:	e0bfff17 	ldw	r2,-4(fp)
   12588:	1885883a 	add	r2,r3,r2
   1258c:	e0bfe915 	stw	r2,-92(fp)

		/* Load data into workspace */
		tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
   12590:	e0bfe917 	ldw	r2,-92(fp)
   12594:	10800003 	ldbu	r2,0(r2)
   12598:	10c03fcc 	andi	r3,r2,255
   1259c:	e0bfe917 	ldw	r2,-92(fp)
   125a0:	108001c4 	addi	r2,r2,7
   125a4:	10800003 	ldbu	r2,0(r2)
   125a8:	10803fcc 	andi	r2,r2,255
   125ac:	1885883a 	add	r2,r3,r2
   125b0:	e0bfea15 	stw	r2,-88(fp)
		tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
   125b4:	e0bfe917 	ldw	r2,-92(fp)
   125b8:	10800003 	ldbu	r2,0(r2)
   125bc:	10c03fcc 	andi	r3,r2,255
   125c0:	e0bfe917 	ldw	r2,-92(fp)
   125c4:	108001c4 	addi	r2,r2,7
   125c8:	10800003 	ldbu	r2,0(r2)
   125cc:	10803fcc 	andi	r2,r2,255
   125d0:	1885c83a 	sub	r2,r3,r2
   125d4:	e0bfeb15 	stw	r2,-84(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
   125d8:	e0bfe917 	ldw	r2,-92(fp)
   125dc:	10800044 	addi	r2,r2,1
   125e0:	10800003 	ldbu	r2,0(r2)
   125e4:	10c03fcc 	andi	r3,r2,255
   125e8:	e0bfe917 	ldw	r2,-92(fp)
   125ec:	10800184 	addi	r2,r2,6
   125f0:	10800003 	ldbu	r2,0(r2)
   125f4:	10803fcc 	andi	r2,r2,255
   125f8:	1885883a 	add	r2,r3,r2
   125fc:	e0bfec15 	stw	r2,-80(fp)
		tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
   12600:	e0bfe917 	ldw	r2,-92(fp)
   12604:	10800044 	addi	r2,r2,1
   12608:	10800003 	ldbu	r2,0(r2)
   1260c:	10c03fcc 	andi	r3,r2,255
   12610:	e0bfe917 	ldw	r2,-92(fp)
   12614:	10800184 	addi	r2,r2,6
   12618:	10800003 	ldbu	r2,0(r2)
   1261c:	10803fcc 	andi	r2,r2,255
   12620:	1885c83a 	sub	r2,r3,r2
   12624:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
   12628:	e0bfe917 	ldw	r2,-92(fp)
   1262c:	10800084 	addi	r2,r2,2
   12630:	10800003 	ldbu	r2,0(r2)
   12634:	10c03fcc 	andi	r3,r2,255
   12638:	e0bfe917 	ldw	r2,-92(fp)
   1263c:	10800144 	addi	r2,r2,5
   12640:	10800003 	ldbu	r2,0(r2)
   12644:	10803fcc 	andi	r2,r2,255
   12648:	1885883a 	add	r2,r3,r2
   1264c:	e0bfee15 	stw	r2,-72(fp)
		tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
   12650:	e0bfe917 	ldw	r2,-92(fp)
   12654:	10800084 	addi	r2,r2,2
   12658:	10800003 	ldbu	r2,0(r2)
   1265c:	10c03fcc 	andi	r3,r2,255
   12660:	e0bfe917 	ldw	r2,-92(fp)
   12664:	10800144 	addi	r2,r2,5
   12668:	10800003 	ldbu	r2,0(r2)
   1266c:	10803fcc 	andi	r2,r2,255
   12670:	1885c83a 	sub	r2,r3,r2
   12674:	e0bfef15 	stw	r2,-68(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
   12678:	e0bfe917 	ldw	r2,-92(fp)
   1267c:	108000c4 	addi	r2,r2,3
   12680:	10800003 	ldbu	r2,0(r2)
   12684:	10c03fcc 	andi	r3,r2,255
   12688:	e0bfe917 	ldw	r2,-92(fp)
   1268c:	10800104 	addi	r2,r2,4
   12690:	10800003 	ldbu	r2,0(r2)
   12694:	10803fcc 	andi	r2,r2,255
   12698:	1885883a 	add	r2,r3,r2
   1269c:	e0bff015 	stw	r2,-64(fp)
		tmp4 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
   126a0:	e0bfe917 	ldw	r2,-92(fp)
   126a4:	108000c4 	addi	r2,r2,3
   126a8:	10800003 	ldbu	r2,0(r2)
   126ac:	10c03fcc 	andi	r3,r2,255
   126b0:	e0bfe917 	ldw	r2,-92(fp)
   126b4:	10800104 	addi	r2,r2,4
   126b8:	10800003 	ldbu	r2,0(r2)
   126bc:	10803fcc 	andi	r2,r2,255
   126c0:	1885c83a 	sub	r2,r3,r2
   126c4:	e0bff115 	stw	r2,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
   126c8:	e0ffea17 	ldw	r3,-88(fp)
   126cc:	e0bff017 	ldw	r2,-64(fp)
   126d0:	1885883a 	add	r2,r3,r2
   126d4:	e0bff215 	stw	r2,-56(fp)
		tmp13 = tmp0 - tmp3;
   126d8:	e0ffea17 	ldw	r3,-88(fp)
   126dc:	e0bff017 	ldw	r2,-64(fp)
   126e0:	1885c83a 	sub	r2,r3,r2
   126e4:	e0bff315 	stw	r2,-52(fp)
		tmp11 = tmp1 + tmp2;
   126e8:	e0ffec17 	ldw	r3,-80(fp)
   126ec:	e0bfee17 	ldw	r2,-72(fp)
   126f0:	1885883a 	add	r2,r3,r2
   126f4:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp1 - tmp2;
   126f8:	e0ffec17 	ldw	r3,-80(fp)
   126fc:	e0bfee17 	ldw	r2,-72(fp)
   12700:	1885c83a 	sub	r2,r3,r2
   12704:	e0bff515 	stw	r2,-44(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
   12708:	e0fff217 	ldw	r3,-56(fp)
   1270c:	e0bff417 	ldw	r2,-48(fp)
   12710:	1885883a 	add	r2,r3,r2
   12714:	10ff0004 	addi	r3,r2,-1024
   12718:	e0bfe717 	ldw	r2,-100(fp)
   1271c:	10c00015 	stw	r3,0(r2)
		dataptr[4] = tmp10 - tmp11;
   12720:	e0bfe717 	ldw	r2,-100(fp)
   12724:	10800404 	addi	r2,r2,16
   12728:	e13ff217 	ldw	r4,-56(fp)
   1272c:	e0fff417 	ldw	r3,-48(fp)
   12730:	20c7c83a 	sub	r3,r4,r3
   12734:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
   12738:	e0fff517 	ldw	r3,-44(fp)
   1273c:	e0bff317 	ldw	r2,-52(fp)
   12740:	1885883a 	add	r2,r3,r2
   12744:	1009883a 	mov	r4,r2
   12748:	01402d44 	movi	r5,181
   1274c:	002c1540 	call	2c154 <__mulsi3>
   12750:	1005d23a 	srai	r2,r2,8
   12754:	e0bff615 	stw	r2,-40(fp)
		dataptr[2] = tmp13 + z1;	/* phase 5 */
   12758:	e0bfe717 	ldw	r2,-100(fp)
   1275c:	10800204 	addi	r2,r2,8
   12760:	e13ff317 	ldw	r4,-52(fp)
   12764:	e0fff617 	ldw	r3,-40(fp)
   12768:	20c7883a 	add	r3,r4,r3
   1276c:	10c00015 	stw	r3,0(r2)
		dataptr[6] = tmp13 - z1;
   12770:	e0bfe717 	ldw	r2,-100(fp)
   12774:	10800604 	addi	r2,r2,24
   12778:	e13ff317 	ldw	r4,-52(fp)
   1277c:	e0fff617 	ldw	r3,-40(fp)
   12780:	20c7c83a 	sub	r3,r4,r3
   12784:	10c00015 	stw	r3,0(r2)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
   12788:	e0fff117 	ldw	r3,-60(fp)
   1278c:	e0bfef17 	ldw	r2,-68(fp)
   12790:	1885883a 	add	r2,r3,r2
   12794:	e0bff215 	stw	r2,-56(fp)
		tmp11 = tmp5 + tmp6;
   12798:	e0ffef17 	ldw	r3,-68(fp)
   1279c:	e0bfed17 	ldw	r2,-76(fp)
   127a0:	1885883a 	add	r2,r3,r2
   127a4:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp6 + tmp7;
   127a8:	e0ffed17 	ldw	r3,-76(fp)
   127ac:	e0bfeb17 	ldw	r2,-84(fp)
   127b0:	1885883a 	add	r2,r3,r2
   127b4:	e0bff515 	stw	r2,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
   127b8:	e0fff217 	ldw	r3,-56(fp)
   127bc:	e0bff517 	ldw	r2,-44(fp)
   127c0:	1885c83a 	sub	r2,r3,r2
   127c4:	1009883a 	mov	r4,r2
   127c8:	01401884 	movi	r5,98
   127cc:	002c1540 	call	2c154 <__mulsi3>
   127d0:	1005d23a 	srai	r2,r2,8
   127d4:	e0bff715 	stw	r2,-36(fp)
		z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
   127d8:	e13ff217 	ldw	r4,-56(fp)
   127dc:	014022c4 	movi	r5,139
   127e0:	002c1540 	call	2c154 <__mulsi3>
   127e4:	1007d23a 	srai	r3,r2,8
   127e8:	e0bff717 	ldw	r2,-36(fp)
   127ec:	1885883a 	add	r2,r3,r2
   127f0:	e0bff815 	stw	r2,-32(fp)
		z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
   127f4:	e13ff517 	ldw	r4,-44(fp)
   127f8:	01405384 	movi	r5,334
   127fc:	002c1540 	call	2c154 <__mulsi3>
   12800:	1007d23a 	srai	r3,r2,8
   12804:	e0bff717 	ldw	r2,-36(fp)
   12808:	1885883a 	add	r2,r3,r2
   1280c:	e0bff915 	stw	r2,-28(fp)
		z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
   12810:	e13ff417 	ldw	r4,-48(fp)
   12814:	01402d44 	movi	r5,181
   12818:	002c1540 	call	2c154 <__mulsi3>
   1281c:	1005d23a 	srai	r2,r2,8
   12820:	e0bffa15 	stw	r2,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
   12824:	e0ffeb17 	ldw	r3,-84(fp)
   12828:	e0bffa17 	ldw	r2,-24(fp)
   1282c:	1885883a 	add	r2,r3,r2
   12830:	e0bffb15 	stw	r2,-20(fp)
		z13 = tmp7 - z3;
   12834:	e0ffeb17 	ldw	r3,-84(fp)
   12838:	e0bffa17 	ldw	r2,-24(fp)
   1283c:	1885c83a 	sub	r2,r3,r2
   12840:	e0bffc15 	stw	r2,-16(fp)

		dataptr[5] = z13 + z2;	/* phase 6 */
   12844:	e0bfe717 	ldw	r2,-100(fp)
   12848:	10800504 	addi	r2,r2,20
   1284c:	e13ffc17 	ldw	r4,-16(fp)
   12850:	e0fff817 	ldw	r3,-32(fp)
   12854:	20c7883a 	add	r3,r4,r3
   12858:	10c00015 	stw	r3,0(r2)
		dataptr[3] = z13 - z2;
   1285c:	e0bfe717 	ldw	r2,-100(fp)
   12860:	10800304 	addi	r2,r2,12
   12864:	e13ffc17 	ldw	r4,-16(fp)
   12868:	e0fff817 	ldw	r3,-32(fp)
   1286c:	20c7c83a 	sub	r3,r4,r3
   12870:	10c00015 	stw	r3,0(r2)
		dataptr[1] = z11 + z4;
   12874:	e0bfe717 	ldw	r2,-100(fp)
   12878:	10800104 	addi	r2,r2,4
   1287c:	e13ffb17 	ldw	r4,-20(fp)
   12880:	e0fff917 	ldw	r3,-28(fp)
   12884:	20c7883a 	add	r3,r4,r3
   12888:	10c00015 	stw	r3,0(r2)
		dataptr[7] = z11 - z4;
   1288c:	e0bfe717 	ldw	r2,-100(fp)
   12890:	10800704 	addi	r2,r2,28
   12894:	e13ffb17 	ldw	r4,-20(fp)
   12898:	e0fff917 	ldw	r3,-28(fp)
   1289c:	20c7c83a 	sub	r3,r4,r3
   128a0:	10c00015 	stw	r3,0(r2)

		dataptr += DCTSIZE;		/* advance pointer to next row */
   128a4:	e0bfe717 	ldw	r2,-100(fp)
   128a8:	10800804 	addi	r2,r2,32
   128ac:	e0bfe715 	stw	r2,-100(fp)
	SHIFT_TEMPS

		/* Pass 1: process rows. */

		dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   128b0:	e0bfe817 	ldw	r2,-96(fp)
   128b4:	10800044 	addi	r2,r2,1
   128b8:	e0bfe815 	stw	r2,-96(fp)
   128bc:	e0bfe817 	ldw	r2,-96(fp)
   128c0:	10800210 	cmplti	r2,r2,8
   128c4:	103f291e 	bne	r2,zero,1256c <jpeg_fdct_ifast+0x2c>
		dataptr += DCTSIZE;		/* advance pointer to next row */
	}

	/* Pass 2: process columns. */

	dataptr = data;
   128c8:	e0bffd17 	ldw	r2,-12(fp)
   128cc:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   128d0:	008001c4 	movi	r2,7
   128d4:	e0bfe815 	stw	r2,-96(fp)
   128d8:	0000ba06 	br	12bc4 <jpeg_fdct_ifast+0x684>
		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
   128dc:	e0bfe717 	ldw	r2,-100(fp)
   128e0:	10c00017 	ldw	r3,0(r2)
   128e4:	e0bfe717 	ldw	r2,-100(fp)
   128e8:	10803804 	addi	r2,r2,224
   128ec:	10800017 	ldw	r2,0(r2)
   128f0:	1885883a 	add	r2,r3,r2
   128f4:	e0bfea15 	stw	r2,-88(fp)
		tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
   128f8:	e0bfe717 	ldw	r2,-100(fp)
   128fc:	10c00017 	ldw	r3,0(r2)
   12900:	e0bfe717 	ldw	r2,-100(fp)
   12904:	10803804 	addi	r2,r2,224
   12908:	10800017 	ldw	r2,0(r2)
   1290c:	1885c83a 	sub	r2,r3,r2
   12910:	e0bfeb15 	stw	r2,-84(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
   12914:	e0bfe717 	ldw	r2,-100(fp)
   12918:	10800804 	addi	r2,r2,32
   1291c:	10c00017 	ldw	r3,0(r2)
   12920:	e0bfe717 	ldw	r2,-100(fp)
   12924:	10803004 	addi	r2,r2,192
   12928:	10800017 	ldw	r2,0(r2)
   1292c:	1885883a 	add	r2,r3,r2
   12930:	e0bfec15 	stw	r2,-80(fp)
		tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
   12934:	e0bfe717 	ldw	r2,-100(fp)
   12938:	10800804 	addi	r2,r2,32
   1293c:	10c00017 	ldw	r3,0(r2)
   12940:	e0bfe717 	ldw	r2,-100(fp)
   12944:	10803004 	addi	r2,r2,192
   12948:	10800017 	ldw	r2,0(r2)
   1294c:	1885c83a 	sub	r2,r3,r2
   12950:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
   12954:	e0bfe717 	ldw	r2,-100(fp)
   12958:	10801004 	addi	r2,r2,64
   1295c:	10c00017 	ldw	r3,0(r2)
   12960:	e0bfe717 	ldw	r2,-100(fp)
   12964:	10802804 	addi	r2,r2,160
   12968:	10800017 	ldw	r2,0(r2)
   1296c:	1885883a 	add	r2,r3,r2
   12970:	e0bfee15 	stw	r2,-72(fp)
		tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
   12974:	e0bfe717 	ldw	r2,-100(fp)
   12978:	10801004 	addi	r2,r2,64
   1297c:	10c00017 	ldw	r3,0(r2)
   12980:	e0bfe717 	ldw	r2,-100(fp)
   12984:	10802804 	addi	r2,r2,160
   12988:	10800017 	ldw	r2,0(r2)
   1298c:	1885c83a 	sub	r2,r3,r2
   12990:	e0bfef15 	stw	r2,-68(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
   12994:	e0bfe717 	ldw	r2,-100(fp)
   12998:	10801804 	addi	r2,r2,96
   1299c:	10c00017 	ldw	r3,0(r2)
   129a0:	e0bfe717 	ldw	r2,-100(fp)
   129a4:	10802004 	addi	r2,r2,128
   129a8:	10800017 	ldw	r2,0(r2)
   129ac:	1885883a 	add	r2,r3,r2
   129b0:	e0bff015 	stw	r2,-64(fp)
		tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
   129b4:	e0bfe717 	ldw	r2,-100(fp)
   129b8:	10801804 	addi	r2,r2,96
   129bc:	10c00017 	ldw	r3,0(r2)
   129c0:	e0bfe717 	ldw	r2,-100(fp)
   129c4:	10802004 	addi	r2,r2,128
   129c8:	10800017 	ldw	r2,0(r2)
   129cc:	1885c83a 	sub	r2,r3,r2
   129d0:	e0bff115 	stw	r2,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
   129d4:	e0ffea17 	ldw	r3,-88(fp)
   129d8:	e0bff017 	ldw	r2,-64(fp)
   129dc:	1885883a 	add	r2,r3,r2
   129e0:	e0bff215 	stw	r2,-56(fp)
		tmp13 = tmp0 - tmp3;
   129e4:	e0ffea17 	ldw	r3,-88(fp)
   129e8:	e0bff017 	ldw	r2,-64(fp)
   129ec:	1885c83a 	sub	r2,r3,r2
   129f0:	e0bff315 	stw	r2,-52(fp)
		tmp11 = tmp1 + tmp2;
   129f4:	e0ffec17 	ldw	r3,-80(fp)
   129f8:	e0bfee17 	ldw	r2,-72(fp)
   129fc:	1885883a 	add	r2,r3,r2
   12a00:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp1 - tmp2;
   12a04:	e0ffec17 	ldw	r3,-80(fp)
   12a08:	e0bfee17 	ldw	r2,-72(fp)
   12a0c:	1885c83a 	sub	r2,r3,r2
   12a10:	e0bff515 	stw	r2,-44(fp)

		dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
   12a14:	e0fff217 	ldw	r3,-56(fp)
   12a18:	e0bff417 	ldw	r2,-48(fp)
   12a1c:	1887883a 	add	r3,r3,r2
   12a20:	e0bfe717 	ldw	r2,-100(fp)
   12a24:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = tmp10 - tmp11;
   12a28:	e0bfe717 	ldw	r2,-100(fp)
   12a2c:	10802004 	addi	r2,r2,128
   12a30:	e13ff217 	ldw	r4,-56(fp)
   12a34:	e0fff417 	ldw	r3,-48(fp)
   12a38:	20c7c83a 	sub	r3,r4,r3
   12a3c:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
   12a40:	e0fff517 	ldw	r3,-44(fp)
   12a44:	e0bff317 	ldw	r2,-52(fp)
   12a48:	1885883a 	add	r2,r3,r2
   12a4c:	1009883a 	mov	r4,r2
   12a50:	01402d44 	movi	r5,181
   12a54:	002c1540 	call	2c154 <__mulsi3>
   12a58:	1005d23a 	srai	r2,r2,8
   12a5c:	e0bff615 	stw	r2,-40(fp)
		dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
   12a60:	e0bfe717 	ldw	r2,-100(fp)
   12a64:	10801004 	addi	r2,r2,64
   12a68:	e13ff317 	ldw	r4,-52(fp)
   12a6c:	e0fff617 	ldw	r3,-40(fp)
   12a70:	20c7883a 	add	r3,r4,r3
   12a74:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*6] = tmp13 - z1;
   12a78:	e0bfe717 	ldw	r2,-100(fp)
   12a7c:	10803004 	addi	r2,r2,192
   12a80:	e13ff317 	ldw	r4,-52(fp)
   12a84:	e0fff617 	ldw	r3,-40(fp)
   12a88:	20c7c83a 	sub	r3,r4,r3
   12a8c:	10c00015 	stw	r3,0(r2)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
   12a90:	e0fff117 	ldw	r3,-60(fp)
   12a94:	e0bfef17 	ldw	r2,-68(fp)
   12a98:	1885883a 	add	r2,r3,r2
   12a9c:	e0bff215 	stw	r2,-56(fp)
		tmp11 = tmp5 + tmp6;
   12aa0:	e0ffef17 	ldw	r3,-68(fp)
   12aa4:	e0bfed17 	ldw	r2,-76(fp)
   12aa8:	1885883a 	add	r2,r3,r2
   12aac:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp6 + tmp7;
   12ab0:	e0ffed17 	ldw	r3,-76(fp)
   12ab4:	e0bfeb17 	ldw	r2,-84(fp)
   12ab8:	1885883a 	add	r2,r3,r2
   12abc:	e0bff515 	stw	r2,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
   12ac0:	e0fff217 	ldw	r3,-56(fp)
   12ac4:	e0bff517 	ldw	r2,-44(fp)
   12ac8:	1885c83a 	sub	r2,r3,r2
   12acc:	1009883a 	mov	r4,r2
   12ad0:	01401884 	movi	r5,98
   12ad4:	002c1540 	call	2c154 <__mulsi3>
   12ad8:	1005d23a 	srai	r2,r2,8
   12adc:	e0bff715 	stw	r2,-36(fp)
		z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
   12ae0:	e13ff217 	ldw	r4,-56(fp)
   12ae4:	014022c4 	movi	r5,139
   12ae8:	002c1540 	call	2c154 <__mulsi3>
   12aec:	1007d23a 	srai	r3,r2,8
   12af0:	e0bff717 	ldw	r2,-36(fp)
   12af4:	1885883a 	add	r2,r3,r2
   12af8:	e0bff815 	stw	r2,-32(fp)
		z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
   12afc:	e13ff517 	ldw	r4,-44(fp)
   12b00:	01405384 	movi	r5,334
   12b04:	002c1540 	call	2c154 <__mulsi3>
   12b08:	1007d23a 	srai	r3,r2,8
   12b0c:	e0bff717 	ldw	r2,-36(fp)
   12b10:	1885883a 	add	r2,r3,r2
   12b14:	e0bff915 	stw	r2,-28(fp)
		z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
   12b18:	e13ff417 	ldw	r4,-48(fp)
   12b1c:	01402d44 	movi	r5,181
   12b20:	002c1540 	call	2c154 <__mulsi3>
   12b24:	1005d23a 	srai	r2,r2,8
   12b28:	e0bffa15 	stw	r2,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
   12b2c:	e0ffeb17 	ldw	r3,-84(fp)
   12b30:	e0bffa17 	ldw	r2,-24(fp)
   12b34:	1885883a 	add	r2,r3,r2
   12b38:	e0bffb15 	stw	r2,-20(fp)
		z13 = tmp7 - z3;
   12b3c:	e0ffeb17 	ldw	r3,-84(fp)
   12b40:	e0bffa17 	ldw	r2,-24(fp)
   12b44:	1885c83a 	sub	r2,r3,r2
   12b48:	e0bffc15 	stw	r2,-16(fp)

		dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
   12b4c:	e0bfe717 	ldw	r2,-100(fp)
   12b50:	10802804 	addi	r2,r2,160
   12b54:	e13ffc17 	ldw	r4,-16(fp)
   12b58:	e0fff817 	ldw	r3,-32(fp)
   12b5c:	20c7883a 	add	r3,r4,r3
   12b60:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*3] = z13 - z2;
   12b64:	e0bfe717 	ldw	r2,-100(fp)
   12b68:	10801804 	addi	r2,r2,96
   12b6c:	e13ffc17 	ldw	r4,-16(fp)
   12b70:	e0fff817 	ldw	r3,-32(fp)
   12b74:	20c7c83a 	sub	r3,r4,r3
   12b78:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*1] = z11 + z4;
   12b7c:	e0bfe717 	ldw	r2,-100(fp)
   12b80:	10800804 	addi	r2,r2,32
   12b84:	e13ffb17 	ldw	r4,-20(fp)
   12b88:	e0fff917 	ldw	r3,-28(fp)
   12b8c:	20c7883a 	add	r3,r4,r3
   12b90:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*7] = z11 - z4;
   12b94:	e0bfe717 	ldw	r2,-100(fp)
   12b98:	10803804 	addi	r2,r2,224
   12b9c:	e13ffb17 	ldw	r4,-20(fp)
   12ba0:	e0fff917 	ldw	r3,-28(fp)
   12ba4:	20c7c83a 	sub	r3,r4,r3
   12ba8:	10c00015 	stw	r3,0(r2)

		dataptr++;			/* advance pointer to next column */
   12bac:	e0bfe717 	ldw	r2,-100(fp)
   12bb0:	10800104 	addi	r2,r2,4
   12bb4:	e0bfe715 	stw	r2,-100(fp)
	}

	/* Pass 2: process columns. */

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   12bb8:	e0bfe817 	ldw	r2,-96(fp)
   12bbc:	10bfffc4 	addi	r2,r2,-1
   12bc0:	e0bfe815 	stw	r2,-96(fp)
   12bc4:	e0bfe817 	ldw	r2,-96(fp)
   12bc8:	103f440e 	bge	r2,zero,128dc <jpeg_fdct_ifast+0x39c>
		dataptr[DCTSIZE*1] = z11 + z4;
		dataptr[DCTSIZE*7] = z11 - z4;

		dataptr++;			/* advance pointer to next column */
	}
}
   12bcc:	e037883a 	mov	sp,fp
   12bd0:	dfc00117 	ldw	ra,4(sp)
   12bd4:	df000017 	ldw	fp,0(sp)
   12bd8:	dec00204 	addi	sp,sp,8
   12bdc:	f800283a 	ret

00012be0 <jpeg_fdct_islow>:
	* Perform the forward DCT on one block of samples.
	*/

GLOBAL(void)
	jpeg_fdct_islow (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
   12be0:	deffee04 	addi	sp,sp,-72
   12be4:	dfc01115 	stw	ra,68(sp)
   12be8:	df001015 	stw	fp,64(sp)
   12bec:	dc000f15 	stw	r16,60(sp)
   12bf0:	df000f04 	addi	fp,sp,60
   12bf4:	e13ffd15 	stw	r4,-12(fp)
   12bf8:	e17ffe15 	stw	r5,-8(fp)
   12bfc:	e1bfff15 	stw	r6,-4(fp)

		/* Pass 1: process rows. */
		/* Note results are scaled up by sqrt(8) compared to a true DCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

	dataptr = data;
   12c00:	e0bffd17 	ldw	r2,-12(fp)
   12c04:	e0bff115 	stw	r2,-60(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   12c08:	e03ff215 	stw	zero,-56(fp)
   12c0c:	00010206 	br	13018 <jpeg_fdct_islow+0x438>
		elemptr = sample_data[ctr] + start_col;
   12c10:	e0bff217 	ldw	r2,-56(fp)
   12c14:	1085883a 	add	r2,r2,r2
   12c18:	1085883a 	add	r2,r2,r2
   12c1c:	e0fffe17 	ldw	r3,-8(fp)
   12c20:	1885883a 	add	r2,r3,r2
   12c24:	10c00017 	ldw	r3,0(r2)
   12c28:	e0bfff17 	ldw	r2,-4(fp)
   12c2c:	1885883a 	add	r2,r3,r2
   12c30:	e0bff315 	stw	r2,-52(fp)

		/* Even part per LL&M figure 1 --- note that published figure is faulty;
		* rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
		*/

		tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
   12c34:	e0bff317 	ldw	r2,-52(fp)
   12c38:	10800003 	ldbu	r2,0(r2)
   12c3c:	10c03fcc 	andi	r3,r2,255
   12c40:	e0bff317 	ldw	r2,-52(fp)
   12c44:	108001c4 	addi	r2,r2,7
   12c48:	10800003 	ldbu	r2,0(r2)
   12c4c:	10803fcc 	andi	r2,r2,255
   12c50:	1885883a 	add	r2,r3,r2
   12c54:	e0bff415 	stw	r2,-48(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
   12c58:	e0bff317 	ldw	r2,-52(fp)
   12c5c:	10800044 	addi	r2,r2,1
   12c60:	10800003 	ldbu	r2,0(r2)
   12c64:	10c03fcc 	andi	r3,r2,255
   12c68:	e0bff317 	ldw	r2,-52(fp)
   12c6c:	10800184 	addi	r2,r2,6
   12c70:	10800003 	ldbu	r2,0(r2)
   12c74:	10803fcc 	andi	r2,r2,255
   12c78:	1885883a 	add	r2,r3,r2
   12c7c:	e0bff515 	stw	r2,-44(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
   12c80:	e0bff317 	ldw	r2,-52(fp)
   12c84:	10800084 	addi	r2,r2,2
   12c88:	10800003 	ldbu	r2,0(r2)
   12c8c:	10c03fcc 	andi	r3,r2,255
   12c90:	e0bff317 	ldw	r2,-52(fp)
   12c94:	10800144 	addi	r2,r2,5
   12c98:	10800003 	ldbu	r2,0(r2)
   12c9c:	10803fcc 	andi	r2,r2,255
   12ca0:	1885883a 	add	r2,r3,r2
   12ca4:	e0bff615 	stw	r2,-40(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
   12ca8:	e0bff317 	ldw	r2,-52(fp)
   12cac:	108000c4 	addi	r2,r2,3
   12cb0:	10800003 	ldbu	r2,0(r2)
   12cb4:	10c03fcc 	andi	r3,r2,255
   12cb8:	e0bff317 	ldw	r2,-52(fp)
   12cbc:	10800104 	addi	r2,r2,4
   12cc0:	10800003 	ldbu	r2,0(r2)
   12cc4:	10803fcc 	andi	r2,r2,255
   12cc8:	1885883a 	add	r2,r3,r2
   12ccc:	e0bff715 	stw	r2,-36(fp)

		tmp10 = tmp0 + tmp3;
   12cd0:	e0fff417 	ldw	r3,-48(fp)
   12cd4:	e0bff717 	ldw	r2,-36(fp)
   12cd8:	1885883a 	add	r2,r3,r2
   12cdc:	e0bff815 	stw	r2,-32(fp)
		tmp12 = tmp0 - tmp3;
   12ce0:	e0fff417 	ldw	r3,-48(fp)
   12ce4:	e0bff717 	ldw	r2,-36(fp)
   12ce8:	1885c83a 	sub	r2,r3,r2
   12cec:	e0bff915 	stw	r2,-28(fp)
		tmp11 = tmp1 + tmp2;
   12cf0:	e0fff517 	ldw	r3,-44(fp)
   12cf4:	e0bff617 	ldw	r2,-40(fp)
   12cf8:	1885883a 	add	r2,r3,r2
   12cfc:	e0bffa15 	stw	r2,-24(fp)
		tmp13 = tmp1 - tmp2;
   12d00:	e0fff517 	ldw	r3,-44(fp)
   12d04:	e0bff617 	ldw	r2,-40(fp)
   12d08:	1885c83a 	sub	r2,r3,r2
   12d0c:	e0bffb15 	stw	r2,-20(fp)

		tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
   12d10:	e0bff317 	ldw	r2,-52(fp)
   12d14:	10800003 	ldbu	r2,0(r2)
   12d18:	10c03fcc 	andi	r3,r2,255
   12d1c:	e0bff317 	ldw	r2,-52(fp)
   12d20:	108001c4 	addi	r2,r2,7
   12d24:	10800003 	ldbu	r2,0(r2)
   12d28:	10803fcc 	andi	r2,r2,255
   12d2c:	1885c83a 	sub	r2,r3,r2
   12d30:	e0bff415 	stw	r2,-48(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
   12d34:	e0bff317 	ldw	r2,-52(fp)
   12d38:	10800044 	addi	r2,r2,1
   12d3c:	10800003 	ldbu	r2,0(r2)
   12d40:	10c03fcc 	andi	r3,r2,255
   12d44:	e0bff317 	ldw	r2,-52(fp)
   12d48:	10800184 	addi	r2,r2,6
   12d4c:	10800003 	ldbu	r2,0(r2)
   12d50:	10803fcc 	andi	r2,r2,255
   12d54:	1885c83a 	sub	r2,r3,r2
   12d58:	e0bff515 	stw	r2,-44(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
   12d5c:	e0bff317 	ldw	r2,-52(fp)
   12d60:	10800084 	addi	r2,r2,2
   12d64:	10800003 	ldbu	r2,0(r2)
   12d68:	10c03fcc 	andi	r3,r2,255
   12d6c:	e0bff317 	ldw	r2,-52(fp)
   12d70:	10800144 	addi	r2,r2,5
   12d74:	10800003 	ldbu	r2,0(r2)
   12d78:	10803fcc 	andi	r2,r2,255
   12d7c:	1885c83a 	sub	r2,r3,r2
   12d80:	e0bff615 	stw	r2,-40(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
   12d84:	e0bff317 	ldw	r2,-52(fp)
   12d88:	108000c4 	addi	r2,r2,3
   12d8c:	10800003 	ldbu	r2,0(r2)
   12d90:	10c03fcc 	andi	r3,r2,255
   12d94:	e0bff317 	ldw	r2,-52(fp)
   12d98:	10800104 	addi	r2,r2,4
   12d9c:	10800003 	ldbu	r2,0(r2)
   12da0:	10803fcc 	andi	r2,r2,255
   12da4:	1885c83a 	sub	r2,r3,r2
   12da8:	e0bff715 	stw	r2,-36(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
   12dac:	e0fff817 	ldw	r3,-32(fp)
   12db0:	e0bffa17 	ldw	r2,-24(fp)
   12db4:	1885883a 	add	r2,r3,r2
   12db8:	10bf0004 	addi	r2,r2,-1024
   12dbc:	1085883a 	add	r2,r2,r2
   12dc0:	1085883a 	add	r2,r2,r2
   12dc4:	1007883a 	mov	r3,r2
   12dc8:	e0bff117 	ldw	r2,-60(fp)
   12dcc:	10c00015 	stw	r3,0(r2)
		dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
   12dd0:	e0bff117 	ldw	r2,-60(fp)
   12dd4:	10c00404 	addi	r3,r2,16
   12dd8:	e13ff817 	ldw	r4,-32(fp)
   12ddc:	e0bffa17 	ldw	r2,-24(fp)
   12de0:	2085c83a 	sub	r2,r4,r2
   12de4:	1085883a 	add	r2,r2,r2
   12de8:	1085883a 	add	r2,r2,r2
   12dec:	18800015 	stw	r2,0(r3)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
   12df0:	e0fff917 	ldw	r3,-28(fp)
   12df4:	e0bffb17 	ldw	r2,-20(fp)
   12df8:	1885883a 	add	r2,r3,r2
   12dfc:	1009883a 	mov	r4,r2
   12e00:	01445444 	movi	r5,4433
   12e04:	002c1540 	call	2c154 <__mulsi3>
   12e08:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
   12e10:	10810004 	addi	r2,r2,1024
   12e14:	e0bffc15 	stw	r2,-16(fp)
		dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
   12e18:	e0bff117 	ldw	r2,-60(fp)
   12e1c:	14000204 	addi	r16,r2,8
   12e20:	e13ff917 	ldw	r4,-28(fp)
   12e24:	01461f84 	movi	r5,6270
   12e28:	002c1540 	call	2c154 <__mulsi3>
   12e2c:	1007883a 	mov	r3,r2
   12e30:	e0bffc17 	ldw	r2,-16(fp)
   12e34:	1885883a 	add	r2,r3,r2
   12e38:	1005d2fa 	srai	r2,r2,11
   12e3c:	80800015 	stw	r2,0(r16)
			CONST_BITS-PASS1_BITS);
		dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
   12e40:	e0bff117 	ldw	r2,-60(fp)
   12e44:	14000604 	addi	r16,r2,24
   12e48:	e13ffb17 	ldw	r4,-20(fp)
   12e4c:	017137c4 	movi	r5,-15137
   12e50:	002c1540 	call	2c154 <__mulsi3>
   12e54:	1007883a 	mov	r3,r2
   12e58:	e0bffc17 	ldw	r2,-16(fp)
   12e5c:	1885883a 	add	r2,r3,r2
   12e60:	1005d2fa 	srai	r2,r2,11
   12e64:	80800015 	stw	r2,0(r16)
		/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
		* cK represents sqrt(2) * cos(K*pi/16).
		* i0..i3 in the paper are tmp0..tmp3 here.
		*/

		tmp10 = tmp0 + tmp3;
   12e68:	e0fff417 	ldw	r3,-48(fp)
   12e6c:	e0bff717 	ldw	r2,-36(fp)
   12e70:	1885883a 	add	r2,r3,r2
   12e74:	e0bff815 	stw	r2,-32(fp)
		tmp11 = tmp1 + tmp2;
   12e78:	e0fff517 	ldw	r3,-44(fp)
   12e7c:	e0bff617 	ldw	r2,-40(fp)
   12e80:	1885883a 	add	r2,r3,r2
   12e84:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = tmp0 + tmp2;
   12e88:	e0fff417 	ldw	r3,-48(fp)
   12e8c:	e0bff617 	ldw	r2,-40(fp)
   12e90:	1885883a 	add	r2,r3,r2
   12e94:	e0bff915 	stw	r2,-28(fp)
		tmp13 = tmp1 + tmp3;
   12e98:	e0fff517 	ldw	r3,-44(fp)
   12e9c:	e0bff717 	ldw	r2,-36(fp)
   12ea0:	1885883a 	add	r2,r3,r2
   12ea4:	e0bffb15 	stw	r2,-20(fp)
		z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
   12ea8:	e0fff917 	ldw	r3,-28(fp)
   12eac:	e0bffb17 	ldw	r2,-20(fp)
   12eb0:	1885883a 	add	r2,r3,r2
   12eb4:	1009883a 	mov	r4,r2
   12eb8:	01496844 	movi	r5,9633
   12ebc:	002c1540 	call	2c154 <__mulsi3>
   12ec0:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   12ec4:	e0bffc17 	ldw	r2,-16(fp)
   12ec8:	10810004 	addi	r2,r2,1024
   12ecc:	e0bffc15 	stw	r2,-16(fp)

		tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
   12ed0:	e13ff417 	ldw	r4,-48(fp)
   12ed4:	014c02c4 	movi	r5,12299
   12ed8:	002c1540 	call	2c154 <__mulsi3>
   12edc:	e0bff415 	stw	r2,-48(fp)
		tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
   12ee0:	e13ff517 	ldw	r4,-44(fp)
   12ee4:	01589504 	movi	r5,25172
   12ee8:	002c1540 	call	2c154 <__mulsi3>
   12eec:	e0bff515 	stw	r2,-44(fp)
		tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
   12ef0:	e13ff617 	ldw	r4,-40(fp)
   12ef4:	01506cc4 	movi	r5,16819
   12ef8:	002c1540 	call	2c154 <__mulsi3>
   12efc:	e0bff615 	stw	r2,-40(fp)
		tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
   12f00:	e13ff717 	ldw	r4,-36(fp)
   12f04:	01426384 	movi	r5,2446
   12f08:	002c1540 	call	2c154 <__mulsi3>
   12f0c:	e0bff715 	stw	r2,-36(fp)
		tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
   12f10:	e13ff817 	ldw	r4,-32(fp)
   12f14:	0178ccc4 	movi	r5,-7373
   12f18:	002c1540 	call	2c154 <__mulsi3>
   12f1c:	e0bff815 	stw	r2,-32(fp)
		tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
   12f20:	e13ffa17 	ldw	r4,-24(fp)
   12f24:	016b7f44 	movi	r5,-20995
   12f28:	002c1540 	call	2c154 <__mulsi3>
   12f2c:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
   12f30:	e13ff917 	ldw	r4,-28(fp)
   12f34:	017ce104 	movi	r5,-3196
   12f38:	002c1540 	call	2c154 <__mulsi3>
   12f3c:	e0bff915 	stw	r2,-28(fp)
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
   12f40:	e13ffb17 	ldw	r4,-20(fp)
   12f44:	01704ec4 	movi	r5,-16069
   12f48:	002c1540 	call	2c154 <__mulsi3>
   12f4c:	e0bffb15 	stw	r2,-20(fp)

		tmp12 += z1;
   12f50:	e0fff917 	ldw	r3,-28(fp)
   12f54:	e0bffc17 	ldw	r2,-16(fp)
   12f58:	1885883a 	add	r2,r3,r2
   12f5c:	e0bff915 	stw	r2,-28(fp)
		tmp13 += z1;
   12f60:	e0fffb17 	ldw	r3,-20(fp)
   12f64:	e0bffc17 	ldw	r2,-16(fp)
   12f68:	1885883a 	add	r2,r3,r2
   12f6c:	e0bffb15 	stw	r2,-20(fp)

		dataptr[1] = (DCTELEM)
   12f70:	e0bff117 	ldw	r2,-60(fp)
   12f74:	10800104 	addi	r2,r2,4
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
   12f78:	e13ff417 	ldw	r4,-48(fp)
   12f7c:	e0fff817 	ldw	r3,-32(fp)
   12f80:	20c9883a 	add	r4,r4,r3
   12f84:	e0fff917 	ldw	r3,-28(fp)
   12f88:	20c7883a 	add	r3,r4,r3
   12f8c:	1807d2fa 	srai	r3,r3,11
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

		tmp12 += z1;
		tmp13 += z1;

		dataptr[1] = (DCTELEM)
   12f90:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
   12f94:	e0bff117 	ldw	r2,-60(fp)
   12f98:	10800304 	addi	r2,r2,12
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
   12f9c:	e13ff517 	ldw	r4,-44(fp)
   12fa0:	e0fffa17 	ldw	r3,-24(fp)
   12fa4:	20c9883a 	add	r4,r4,r3
   12fa8:	e0fffb17 	ldw	r3,-20(fp)
   12fac:	20c7883a 	add	r3,r4,r3
   12fb0:	1807d2fa 	srai	r3,r3,11
		tmp12 += z1;
		tmp13 += z1;

		dataptr[1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
   12fb4:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
   12fb8:	e0bff117 	ldw	r2,-60(fp)
   12fbc:	10800504 	addi	r2,r2,20
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
   12fc0:	e13ff617 	ldw	r4,-40(fp)
   12fc4:	e0fffa17 	ldw	r3,-24(fp)
   12fc8:	20c9883a 	add	r4,r4,r3
   12fcc:	e0fff917 	ldw	r3,-28(fp)
   12fd0:	20c7883a 	add	r3,r4,r3
   12fd4:	1807d2fa 	srai	r3,r3,11

		dataptr[1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
   12fd8:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[7] = (DCTELEM)
   12fdc:	e0bff117 	ldw	r2,-60(fp)
   12fe0:	10800704 	addi	r2,r2,28
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
   12fe4:	e13ff717 	ldw	r4,-36(fp)
   12fe8:	e0fff817 	ldw	r3,-32(fp)
   12fec:	20c9883a 	add	r4,r4,r3
   12ff0:	e0fffb17 	ldw	r3,-20(fp)
   12ff4:	20c7883a 	add	r3,r4,r3
   12ff8:	1807d2fa 	srai	r3,r3,11
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[7] = (DCTELEM)
   12ffc:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);

		dataptr += DCTSIZE;		/* advance pointer to next row */
   13000:	e0bff117 	ldw	r2,-60(fp)
   13004:	10800804 	addi	r2,r2,32
   13008:	e0bff115 	stw	r2,-60(fp)
		/* Pass 1: process rows. */
		/* Note results are scaled up by sqrt(8) compared to a true DCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

	dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   1300c:	e0bff217 	ldw	r2,-56(fp)
   13010:	10800044 	addi	r2,r2,1
   13014:	e0bff215 	stw	r2,-56(fp)
   13018:	e0bff217 	ldw	r2,-56(fp)
   1301c:	10800210 	cmplti	r2,r2,8
   13020:	103efb1e 	bne	r2,zero,12c10 <jpeg_fdct_islow+0x30>
	/* Pass 2: process columns.
	* We remove the PASS1_BITS scaling, but leave the results scaled up
	* by an overall factor of 8.
	*/

	dataptr = data;
   13024:	e0bffd17 	ldw	r2,-12(fp)
   13028:	e0bff115 	stw	r2,-60(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   1302c:	008001c4 	movi	r2,7
   13030:	e0bff215 	stw	r2,-56(fp)
   13034:	0000e606 	br	133d0 <jpeg_fdct_islow+0x7f0>
		/* Even part per LL&M figure 1 --- note that published figure is faulty;
		* rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
		*/

		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
   13038:	e0bff117 	ldw	r2,-60(fp)
   1303c:	10c00017 	ldw	r3,0(r2)
   13040:	e0bff117 	ldw	r2,-60(fp)
   13044:	10803804 	addi	r2,r2,224
   13048:	10800017 	ldw	r2,0(r2)
   1304c:	1885883a 	add	r2,r3,r2
   13050:	e0bff415 	stw	r2,-48(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
   13054:	e0bff117 	ldw	r2,-60(fp)
   13058:	10800804 	addi	r2,r2,32
   1305c:	10c00017 	ldw	r3,0(r2)
   13060:	e0bff117 	ldw	r2,-60(fp)
   13064:	10803004 	addi	r2,r2,192
   13068:	10800017 	ldw	r2,0(r2)
   1306c:	1885883a 	add	r2,r3,r2
   13070:	e0bff515 	stw	r2,-44(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
   13074:	e0bff117 	ldw	r2,-60(fp)
   13078:	10801004 	addi	r2,r2,64
   1307c:	10c00017 	ldw	r3,0(r2)
   13080:	e0bff117 	ldw	r2,-60(fp)
   13084:	10802804 	addi	r2,r2,160
   13088:	10800017 	ldw	r2,0(r2)
   1308c:	1885883a 	add	r2,r3,r2
   13090:	e0bff615 	stw	r2,-40(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
   13094:	e0bff117 	ldw	r2,-60(fp)
   13098:	10801804 	addi	r2,r2,96
   1309c:	10c00017 	ldw	r3,0(r2)
   130a0:	e0bff117 	ldw	r2,-60(fp)
   130a4:	10802004 	addi	r2,r2,128
   130a8:	10800017 	ldw	r2,0(r2)
   130ac:	1885883a 	add	r2,r3,r2
   130b0:	e0bff715 	stw	r2,-36(fp)

		/* Add fudge factor here for final descale. */
		tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
   130b4:	e0fff417 	ldw	r3,-48(fp)
   130b8:	e0bff717 	ldw	r2,-36(fp)
   130bc:	1885883a 	add	r2,r3,r2
   130c0:	10800084 	addi	r2,r2,2
   130c4:	e0bff815 	stw	r2,-32(fp)
		tmp12 = tmp0 - tmp3;
   130c8:	e0fff417 	ldw	r3,-48(fp)
   130cc:	e0bff717 	ldw	r2,-36(fp)
   130d0:	1885c83a 	sub	r2,r3,r2
   130d4:	e0bff915 	stw	r2,-28(fp)
		tmp11 = tmp1 + tmp2;
   130d8:	e0fff517 	ldw	r3,-44(fp)
   130dc:	e0bff617 	ldw	r2,-40(fp)
   130e0:	1885883a 	add	r2,r3,r2
   130e4:	e0bffa15 	stw	r2,-24(fp)
		tmp13 = tmp1 - tmp2;
   130e8:	e0fff517 	ldw	r3,-44(fp)
   130ec:	e0bff617 	ldw	r2,-40(fp)
   130f0:	1885c83a 	sub	r2,r3,r2
   130f4:	e0bffb15 	stw	r2,-20(fp)

		tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
   130f8:	e0bff117 	ldw	r2,-60(fp)
   130fc:	10c00017 	ldw	r3,0(r2)
   13100:	e0bff117 	ldw	r2,-60(fp)
   13104:	10803804 	addi	r2,r2,224
   13108:	10800017 	ldw	r2,0(r2)
   1310c:	1885c83a 	sub	r2,r3,r2
   13110:	e0bff415 	stw	r2,-48(fp)
		tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
   13114:	e0bff117 	ldw	r2,-60(fp)
   13118:	10800804 	addi	r2,r2,32
   1311c:	10c00017 	ldw	r3,0(r2)
   13120:	e0bff117 	ldw	r2,-60(fp)
   13124:	10803004 	addi	r2,r2,192
   13128:	10800017 	ldw	r2,0(r2)
   1312c:	1885c83a 	sub	r2,r3,r2
   13130:	e0bff515 	stw	r2,-44(fp)
		tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
   13134:	e0bff117 	ldw	r2,-60(fp)
   13138:	10801004 	addi	r2,r2,64
   1313c:	10c00017 	ldw	r3,0(r2)
   13140:	e0bff117 	ldw	r2,-60(fp)
   13144:	10802804 	addi	r2,r2,160
   13148:	10800017 	ldw	r2,0(r2)
   1314c:	1885c83a 	sub	r2,r3,r2
   13150:	e0bff615 	stw	r2,-40(fp)
		tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
   13154:	e0bff117 	ldw	r2,-60(fp)
   13158:	10801804 	addi	r2,r2,96
   1315c:	10c00017 	ldw	r3,0(r2)
   13160:	e0bff117 	ldw	r2,-60(fp)
   13164:	10802004 	addi	r2,r2,128
   13168:	10800017 	ldw	r2,0(r2)
   1316c:	1885c83a 	sub	r2,r3,r2
   13170:	e0bff715 	stw	r2,-36(fp)

		dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
   13174:	e0fff817 	ldw	r3,-32(fp)
   13178:	e0bffa17 	ldw	r2,-24(fp)
   1317c:	1885883a 	add	r2,r3,r2
   13180:	1007d0ba 	srai	r3,r2,2
   13184:	e0bff117 	ldw	r2,-60(fp)
   13188:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
   1318c:	e0bff117 	ldw	r2,-60(fp)
   13190:	10802004 	addi	r2,r2,128
   13194:	e13ff817 	ldw	r4,-32(fp)
   13198:	e0fffa17 	ldw	r3,-24(fp)
   1319c:	20c7c83a 	sub	r3,r4,r3
   131a0:	1807d0ba 	srai	r3,r3,2
   131a4:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
   131a8:	e0fff917 	ldw	r3,-28(fp)
   131ac:	e0bffb17 	ldw	r2,-20(fp)
   131b0:	1885883a 	add	r2,r3,r2
   131b4:	1009883a 	mov	r4,r2
   131b8:	01445444 	movi	r5,4433
   131bc:	002c1540 	call	2c154 <__mulsi3>
   131c0:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
   131c4:	e0bffc17 	ldw	r2,-16(fp)
   131c8:	10900004 	addi	r2,r2,16384
   131cc:	e0bffc15 	stw	r2,-16(fp)
		dataptr[DCTSIZE*2] = (DCTELEM)
   131d0:	e0bff117 	ldw	r2,-60(fp)
   131d4:	14001004 	addi	r16,r2,64
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
   131d8:	e13ff917 	ldw	r4,-28(fp)
   131dc:	01461f84 	movi	r5,6270
   131e0:	002c1540 	call	2c154 <__mulsi3>
   131e4:	1007883a 	mov	r3,r2
   131e8:	e0bffc17 	ldw	r2,-16(fp)
   131ec:	1885883a 	add	r2,r3,r2
   131f0:	1005d3fa 	srai	r2,r2,15
		dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
		dataptr[DCTSIZE*2] = (DCTELEM)
   131f4:	80800015 	stw	r2,0(r16)
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*6] = (DCTELEM)
   131f8:	e0bff117 	ldw	r2,-60(fp)
   131fc:	14003004 	addi	r16,r2,192
			RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
   13200:	e13ffb17 	ldw	r4,-20(fp)
   13204:	017137c4 	movi	r5,-15137
   13208:	002c1540 	call	2c154 <__mulsi3>
   1320c:	1007883a 	mov	r3,r2
   13210:	e0bffc17 	ldw	r2,-16(fp)
   13214:	1885883a 	add	r2,r3,r2
   13218:	1005d3fa 	srai	r2,r2,15
		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
		dataptr[DCTSIZE*2] = (DCTELEM)
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*6] = (DCTELEM)
   1321c:	80800015 	stw	r2,0(r16)
		/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
		* cK represents sqrt(2) * cos(K*pi/16).
		* i0..i3 in the paper are tmp0..tmp3 here.
		*/

		tmp10 = tmp0 + tmp3;
   13220:	e0fff417 	ldw	r3,-48(fp)
   13224:	e0bff717 	ldw	r2,-36(fp)
   13228:	1885883a 	add	r2,r3,r2
   1322c:	e0bff815 	stw	r2,-32(fp)
		tmp11 = tmp1 + tmp2;
   13230:	e0fff517 	ldw	r3,-44(fp)
   13234:	e0bff617 	ldw	r2,-40(fp)
   13238:	1885883a 	add	r2,r3,r2
   1323c:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = tmp0 + tmp2;
   13240:	e0fff417 	ldw	r3,-48(fp)
   13244:	e0bff617 	ldw	r2,-40(fp)
   13248:	1885883a 	add	r2,r3,r2
   1324c:	e0bff915 	stw	r2,-28(fp)
		tmp13 = tmp1 + tmp3;
   13250:	e0fff517 	ldw	r3,-44(fp)
   13254:	e0bff717 	ldw	r2,-36(fp)
   13258:	1885883a 	add	r2,r3,r2
   1325c:	e0bffb15 	stw	r2,-20(fp)
		z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
   13260:	e0fff917 	ldw	r3,-28(fp)
   13264:	e0bffb17 	ldw	r2,-20(fp)
   13268:	1885883a 	add	r2,r3,r2
   1326c:	1009883a 	mov	r4,r2
   13270:	01496844 	movi	r5,9633
   13274:	002c1540 	call	2c154 <__mulsi3>
   13278:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
   1327c:	e0bffc17 	ldw	r2,-16(fp)
   13280:	10900004 	addi	r2,r2,16384
   13284:	e0bffc15 	stw	r2,-16(fp)

		tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
   13288:	e13ff417 	ldw	r4,-48(fp)
   1328c:	014c02c4 	movi	r5,12299
   13290:	002c1540 	call	2c154 <__mulsi3>
   13294:	e0bff415 	stw	r2,-48(fp)
		tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
   13298:	e13ff517 	ldw	r4,-44(fp)
   1329c:	01589504 	movi	r5,25172
   132a0:	002c1540 	call	2c154 <__mulsi3>
   132a4:	e0bff515 	stw	r2,-44(fp)
		tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
   132a8:	e13ff617 	ldw	r4,-40(fp)
   132ac:	01506cc4 	movi	r5,16819
   132b0:	002c1540 	call	2c154 <__mulsi3>
   132b4:	e0bff615 	stw	r2,-40(fp)
		tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
   132b8:	e13ff717 	ldw	r4,-36(fp)
   132bc:	01426384 	movi	r5,2446
   132c0:	002c1540 	call	2c154 <__mulsi3>
   132c4:	e0bff715 	stw	r2,-36(fp)
		tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
   132c8:	e13ff817 	ldw	r4,-32(fp)
   132cc:	0178ccc4 	movi	r5,-7373
   132d0:	002c1540 	call	2c154 <__mulsi3>
   132d4:	e0bff815 	stw	r2,-32(fp)
		tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
   132d8:	e13ffa17 	ldw	r4,-24(fp)
   132dc:	016b7f44 	movi	r5,-20995
   132e0:	002c1540 	call	2c154 <__mulsi3>
   132e4:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
   132e8:	e13ff917 	ldw	r4,-28(fp)
   132ec:	017ce104 	movi	r5,-3196
   132f0:	002c1540 	call	2c154 <__mulsi3>
   132f4:	e0bff915 	stw	r2,-28(fp)
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
   132f8:	e13ffb17 	ldw	r4,-20(fp)
   132fc:	01704ec4 	movi	r5,-16069
   13300:	002c1540 	call	2c154 <__mulsi3>
   13304:	e0bffb15 	stw	r2,-20(fp)

		tmp12 += z1;
   13308:	e0fff917 	ldw	r3,-28(fp)
   1330c:	e0bffc17 	ldw	r2,-16(fp)
   13310:	1885883a 	add	r2,r3,r2
   13314:	e0bff915 	stw	r2,-28(fp)
		tmp13 += z1;
   13318:	e0fffb17 	ldw	r3,-20(fp)
   1331c:	e0bffc17 	ldw	r2,-16(fp)
   13320:	1885883a 	add	r2,r3,r2
   13324:	e0bffb15 	stw	r2,-20(fp)

		dataptr[DCTSIZE*1] = (DCTELEM)
   13328:	e0bff117 	ldw	r2,-60(fp)
   1332c:	10800804 	addi	r2,r2,32
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
   13330:	e13ff417 	ldw	r4,-48(fp)
   13334:	e0fff817 	ldw	r3,-32(fp)
   13338:	20c9883a 	add	r4,r4,r3
   1333c:	e0fff917 	ldw	r3,-28(fp)
   13340:	20c7883a 	add	r3,r4,r3
   13344:	1807d3fa 	srai	r3,r3,15
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

		tmp12 += z1;
		tmp13 += z1;

		dataptr[DCTSIZE*1] = (DCTELEM)
   13348:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
   1334c:	e0bff117 	ldw	r2,-60(fp)
   13350:	10801804 	addi	r2,r2,96
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
   13354:	e13ff517 	ldw	r4,-44(fp)
   13358:	e0fffa17 	ldw	r3,-24(fp)
   1335c:	20c9883a 	add	r4,r4,r3
   13360:	e0fffb17 	ldw	r3,-20(fp)
   13364:	20c7883a 	add	r3,r4,r3
   13368:	1807d3fa 	srai	r3,r3,15
		tmp12 += z1;
		tmp13 += z1;

		dataptr[DCTSIZE*1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
   1336c:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
   13370:	e0bff117 	ldw	r2,-60(fp)
   13374:	10802804 	addi	r2,r2,160
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
   13378:	e13ff617 	ldw	r4,-40(fp)
   1337c:	e0fffa17 	ldw	r3,-24(fp)
   13380:	20c9883a 	add	r4,r4,r3
   13384:	e0fff917 	ldw	r3,-28(fp)
   13388:	20c7883a 	add	r3,r4,r3
   1338c:	1807d3fa 	srai	r3,r3,15

		dataptr[DCTSIZE*1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
   13390:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*7] = (DCTELEM)
   13394:	e0bff117 	ldw	r2,-60(fp)
   13398:	10803804 	addi	r2,r2,224
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
   1339c:	e13ff717 	ldw	r4,-36(fp)
   133a0:	e0fff817 	ldw	r3,-32(fp)
   133a4:	20c9883a 	add	r4,r4,r3
   133a8:	e0fffb17 	ldw	r3,-20(fp)
   133ac:	20c7883a 	add	r3,r4,r3
   133b0:	1807d3fa 	srai	r3,r3,15
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*7] = (DCTELEM)
   133b4:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

		dataptr++;			/* advance pointer to next column */
   133b8:	e0bff117 	ldw	r2,-60(fp)
   133bc:	10800104 	addi	r2,r2,4
   133c0:	e0bff115 	stw	r2,-60(fp)
	* We remove the PASS1_BITS scaling, but leave the results scaled up
	* by an overall factor of 8.
	*/

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
   133c4:	e0bff217 	ldw	r2,-56(fp)
   133c8:	10bfffc4 	addi	r2,r2,-1
   133cc:	e0bff215 	stw	r2,-56(fp)
   133d0:	e0bff217 	ldw	r2,-56(fp)
   133d4:	103f180e 	bge	r2,zero,13038 <jpeg_fdct_islow+0x458>
		dataptr[DCTSIZE*7] = (DCTELEM)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

		dataptr++;			/* advance pointer to next column */
	}
}
   133d8:	e037883a 	mov	sp,fp
   133dc:	dfc00217 	ldw	ra,8(sp)
   133e0:	df000117 	ldw	fp,4(sp)
   133e4:	dc000017 	ldw	r16,0(sp)
   133e8:	dec00304 	addi	sp,sp,12
   133ec:	f800283a 	ret

000133f0 <jpeg_idct_float>:

	GLOBAL(void)
	jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   133f0:	deffa104 	addi	sp,sp,-380
   133f4:	dfc05e15 	stw	ra,376(sp)
   133f8:	df005d15 	stw	fp,372(sp)
   133fc:	dc005c15 	stw	r16,368(sp)
   13400:	df005c04 	addi	fp,sp,368
   13404:	e13ffc15 	stw	r4,-16(fp)
   13408:	e17ffd15 	stw	r5,-12(fp)
   1340c:	e1bffe15 	stw	r6,-8(fp)
   13410:	e1ffff15 	stw	r7,-4(fp)
	FAST_FLOAT z5, z10, z11, z12, z13;
	JCOEFPTR inptr;
	FLOAT_MULT_TYPE * quantptr;
	FAST_FLOAT * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = cinfo->sample_range_limit;
   13414:	e0bffc17 	ldw	r2,-16(fp)
   13418:	10804917 	ldw	r2,292(r2)
   1341c:	e0bfa815 	stw	r2,-352(fp)
	int ctr;
	FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

	/* Pass 1: process columns from input, store into work array. */

	inptr = coef_block;
   13420:	e0bffe17 	ldw	r2,-8(fp)
   13424:	e0bfa415 	stw	r2,-368(fp)
	quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	10801517 	ldw	r2,84(r2)
   13430:	e0bfa515 	stw	r2,-364(fp)
	wsptr = workspace;
   13434:	e0bfbc04 	addi	r2,fp,-272
   13438:	e0bfa615 	stw	r2,-360(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   1343c:	00800204 	movi	r2,8
   13440:	e0bfa715 	stw	r2,-356(fp)
   13444:	0001c106 	br	13b4c <jpeg_idct_float+0x75c>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   13448:	e0bfa417 	ldw	r2,-368(fp)
   1344c:	10800404 	addi	r2,r2,16
   13450:	1080000b 	ldhu	r2,0(r2)
   13454:	10bfffcc 	andi	r2,r2,65535
   13458:	10a0001c 	xori	r2,r2,32768
   1345c:	10a00004 	addi	r2,r2,-32768
   13460:	1000621e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
   13464:	e0bfa417 	ldw	r2,-368(fp)
   13468:	10800804 	addi	r2,r2,32
   1346c:	1080000b 	ldhu	r2,0(r2)
   13470:	10bfffcc 	andi	r2,r2,65535
   13474:	10a0001c 	xori	r2,r2,32768
   13478:	10a00004 	addi	r2,r2,-32768
   1347c:	10005b1e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   13480:	e0bfa417 	ldw	r2,-368(fp)
   13484:	10800c04 	addi	r2,r2,48
   13488:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   1348c:	10bfffcc 	andi	r2,r2,65535
   13490:	10a0001c 	xori	r2,r2,32768
   13494:	10a00004 	addi	r2,r2,-32768
   13498:	1000541e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   1349c:	e0bfa417 	ldw	r2,-368(fp)
   134a0:	10801004 	addi	r2,r2,64
   134a4:	1080000b 	ldhu	r2,0(r2)
   134a8:	10bfffcc 	andi	r2,r2,65535
   134ac:	10a0001c 	xori	r2,r2,32768
   134b0:	10a00004 	addi	r2,r2,-32768
   134b4:	10004d1e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   134b8:	e0bfa417 	ldw	r2,-368(fp)
   134bc:	10801404 	addi	r2,r2,80
   134c0:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   134c4:	10bfffcc 	andi	r2,r2,65535
   134c8:	10a0001c 	xori	r2,r2,32768
   134cc:	10a00004 	addi	r2,r2,-32768
   134d0:	1000461e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   134d4:	e0bfa417 	ldw	r2,-368(fp)
   134d8:	10801804 	addi	r2,r2,96
   134dc:	1080000b 	ldhu	r2,0(r2)
   134e0:	10bfffcc 	andi	r2,r2,65535
   134e4:	10a0001c 	xori	r2,r2,32768
   134e8:	10a00004 	addi	r2,r2,-32768
   134ec:	10003f1e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*7] == 0) {
   134f0:	e0bfa417 	ldw	r2,-368(fp)
   134f4:	10801c04 	addi	r2,r2,112
   134f8:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   134fc:	10bfffcc 	andi	r2,r2,65535
   13500:	10a0001c 	xori	r2,r2,32768
   13504:	10a00004 	addi	r2,r2,-32768
   13508:	1000381e 	bne	r2,zero,135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1350c:	e0bfa417 	ldw	r2,-368(fp)
   13510:	1080000b 	ldhu	r2,0(r2)
   13514:	10bfffcc 	andi	r2,r2,65535
   13518:	10a0001c 	xori	r2,r2,32768
   1351c:	10a00004 	addi	r2,r2,-32768
   13520:	1009883a 	mov	r4,r2
   13524:	002b8c80 	call	2b8c8 <__floatsisf>
   13528:	1007883a 	mov	r3,r2
   1352c:	e13fa517 	ldw	r4,-364(fp)
   13530:	20800017 	ldw	r2,0(r4)
   13534:	1809883a 	mov	r4,r3
   13538:	100b883a 	mov	r5,r2
   1353c:	002b7380 	call	2b738 <__mulsf3>
   13540:	1007883a 	mov	r3,r2
   13544:	e0ffa915 	stw	r3,-348(fp)

				wsptr[DCTSIZE*0] = dcval;
   13548:	e0bfa617 	ldw	r2,-360(fp)
   1354c:	e0ffa917 	ldw	r3,-348(fp)
   13550:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
   13554:	e0bfa617 	ldw	r2,-360(fp)
   13558:	10800804 	addi	r2,r2,32
   1355c:	e0ffa917 	ldw	r3,-348(fp)
   13560:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
   13564:	e0bfa617 	ldw	r2,-360(fp)
   13568:	10801004 	addi	r2,r2,64
   1356c:	e0ffa917 	ldw	r3,-348(fp)
   13570:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
   13574:	e0bfa617 	ldw	r2,-360(fp)
   13578:	10801804 	addi	r2,r2,96
   1357c:	e0ffa917 	ldw	r3,-348(fp)
   13580:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
   13584:	e0bfa617 	ldw	r2,-360(fp)
   13588:	10802004 	addi	r2,r2,128
   1358c:	e0ffa917 	ldw	r3,-348(fp)
   13590:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
   13594:	e0bfa617 	ldw	r2,-360(fp)
   13598:	10802804 	addi	r2,r2,160
   1359c:	e0ffa917 	ldw	r3,-348(fp)
   135a0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
   135a4:	e0bfa617 	ldw	r2,-360(fp)
   135a8:	10803004 	addi	r2,r2,192
   135ac:	e0ffa917 	ldw	r3,-348(fp)
   135b0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
   135b4:	e0bfa617 	ldw	r2,-360(fp)
   135b8:	10803804 	addi	r2,r2,224
   135bc:	e0ffa917 	ldw	r3,-348(fp)
   135c0:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
   135c4:	e0bfa417 	ldw	r2,-368(fp)
   135c8:	10800084 	addi	r2,r2,2
   135cc:	e0bfa415 	stw	r2,-368(fp)
				quantptr++;
   135d0:	e0bfa517 	ldw	r2,-364(fp)
   135d4:	10800104 	addi	r2,r2,4
   135d8:	e0bfa515 	stw	r2,-364(fp)
				wsptr++;
   135dc:	e0bfa617 	ldw	r2,-360(fp)
   135e0:	10800104 	addi	r2,r2,4
   135e4:	e0bfa615 	stw	r2,-360(fp)
				continue;
   135e8:	00015506 	br	13b40 <jpeg_idct_float+0x750>
		}

		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   135ec:	e0bfa417 	ldw	r2,-368(fp)
   135f0:	1080000b 	ldhu	r2,0(r2)
   135f4:	10bfffcc 	andi	r2,r2,65535
   135f8:	10a0001c 	xori	r2,r2,32768
   135fc:	10a00004 	addi	r2,r2,-32768
   13600:	1009883a 	mov	r4,r2
   13604:	002b8c80 	call	2b8c8 <__floatsisf>
   13608:	1007883a 	mov	r3,r2
   1360c:	e13fa517 	ldw	r4,-364(fp)
   13610:	20800017 	ldw	r2,0(r4)
   13614:	1809883a 	mov	r4,r3
   13618:	100b883a 	mov	r5,r2
   1361c:	002b7380 	call	2b738 <__mulsf3>
   13620:	1007883a 	mov	r3,r2
   13624:	e0ffaa15 	stw	r3,-344(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   13628:	e0bfa417 	ldw	r2,-368(fp)
   1362c:	10800804 	addi	r2,r2,32
   13630:	1080000b 	ldhu	r2,0(r2)
   13634:	10bfffcc 	andi	r2,r2,65535
   13638:	10a0001c 	xori	r2,r2,32768
   1363c:	10a00004 	addi	r2,r2,-32768
   13640:	1009883a 	mov	r4,r2
   13644:	002b8c80 	call	2b8c8 <__floatsisf>
   13648:	1007883a 	mov	r3,r2
   1364c:	e0bfa517 	ldw	r2,-364(fp)
   13650:	11001004 	addi	r4,r2,64
   13654:	20800017 	ldw	r2,0(r4)
   13658:	1809883a 	mov	r4,r3
   1365c:	100b883a 	mov	r5,r2
   13660:	002b7380 	call	2b738 <__mulsf3>
   13664:	1007883a 	mov	r3,r2
   13668:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1366c:	e0bfa417 	ldw	r2,-368(fp)
   13670:	10801004 	addi	r2,r2,64
   13674:	1080000b 	ldhu	r2,0(r2)
   13678:	10bfffcc 	andi	r2,r2,65535
   1367c:	10a0001c 	xori	r2,r2,32768
   13680:	10a00004 	addi	r2,r2,-32768
   13684:	1009883a 	mov	r4,r2
   13688:	002b8c80 	call	2b8c8 <__floatsisf>
   1368c:	1007883a 	mov	r3,r2
   13690:	e0bfa517 	ldw	r2,-364(fp)
   13694:	11002004 	addi	r4,r2,128
   13698:	20800017 	ldw	r2,0(r4)
   1369c:	1809883a 	mov	r4,r3
   136a0:	100b883a 	mov	r5,r2
   136a4:	002b7380 	call	2b738 <__mulsf3>
   136a8:	1007883a 	mov	r3,r2
   136ac:	e0ffac15 	stw	r3,-336(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   136b0:	e0bfa417 	ldw	r2,-368(fp)
   136b4:	10801804 	addi	r2,r2,96
   136b8:	1080000b 	ldhu	r2,0(r2)
   136bc:	10bfffcc 	andi	r2,r2,65535
   136c0:	10a0001c 	xori	r2,r2,32768
   136c4:	10a00004 	addi	r2,r2,-32768
   136c8:	1009883a 	mov	r4,r2
   136cc:	002b8c80 	call	2b8c8 <__floatsisf>
   136d0:	1007883a 	mov	r3,r2
   136d4:	e0bfa517 	ldw	r2,-364(fp)
   136d8:	11003004 	addi	r4,r2,192
   136dc:	20800017 	ldw	r2,0(r4)
   136e0:	1809883a 	mov	r4,r3
   136e4:	100b883a 	mov	r5,r2
   136e8:	002b7380 	call	2b738 <__mulsf3>
   136ec:	1007883a 	mov	r3,r2
   136f0:	e0ffad15 	stw	r3,-332(fp)

		tmp10 = tmp0 + tmp2;	/* phase 3 */
   136f4:	e13faa17 	ldw	r4,-344(fp)
   136f8:	e17fac17 	ldw	r5,-336(fp)
   136fc:	002b6940 	call	2b694 <__addsf3>
   13700:	1007883a 	mov	r3,r2
   13704:	e0ffae15 	stw	r3,-328(fp)
		tmp11 = tmp0 - tmp2;
   13708:	e13faa17 	ldw	r4,-344(fp)
   1370c:	e17fac17 	ldw	r5,-336(fp)
   13710:	002b6e00 	call	2b6e0 <__subsf3>
   13714:	1007883a 	mov	r3,r2
   13718:	e0ffaf15 	stw	r3,-324(fp)

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
   1371c:	e13fab17 	ldw	r4,-340(fp)
   13720:	e17fad17 	ldw	r5,-332(fp)
   13724:	002b6940 	call	2b694 <__addsf3>
   13728:	1007883a 	mov	r3,r2
   1372c:	e0ffb015 	stw	r3,-320(fp)
		tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
   13730:	e13fab17 	ldw	r4,-340(fp)
   13734:	e17fad17 	ldw	r5,-332(fp)
   13738:	002b6e00 	call	2b6e0 <__subsf3>
   1373c:	1007883a 	mov	r3,r2
   13740:	1805883a 	mov	r2,r3
   13744:	1009883a 	mov	r4,r2
   13748:	014fed74 	movhi	r5,16309
   1374c:	29413cc4 	addi	r5,r5,1267
   13750:	002b7380 	call	2b738 <__mulsf3>
   13754:	1007883a 	mov	r3,r2
   13758:	1805883a 	mov	r2,r3
   1375c:	1009883a 	mov	r4,r2
   13760:	e17fb017 	ldw	r5,-320(fp)
   13764:	002b6e00 	call	2b6e0 <__subsf3>
   13768:	1007883a 	mov	r3,r2
   1376c:	e0ffb115 	stw	r3,-316(fp)

		tmp0 = tmp10 + tmp13;	/* phase 2 */
   13770:	e13fae17 	ldw	r4,-328(fp)
   13774:	e17fb017 	ldw	r5,-320(fp)
   13778:	002b6940 	call	2b694 <__addsf3>
   1377c:	1007883a 	mov	r3,r2
   13780:	e0ffaa15 	stw	r3,-344(fp)
		tmp3 = tmp10 - tmp13;
   13784:	e13fae17 	ldw	r4,-328(fp)
   13788:	e17fb017 	ldw	r5,-320(fp)
   1378c:	002b6e00 	call	2b6e0 <__subsf3>
   13790:	1007883a 	mov	r3,r2
   13794:	e0ffad15 	stw	r3,-332(fp)
		tmp1 = tmp11 + tmp12;
   13798:	e13faf17 	ldw	r4,-324(fp)
   1379c:	e17fb117 	ldw	r5,-316(fp)
   137a0:	002b6940 	call	2b694 <__addsf3>
   137a4:	1007883a 	mov	r3,r2
   137a8:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = tmp11 - tmp12;
   137ac:	e13faf17 	ldw	r4,-324(fp)
   137b0:	e17fb117 	ldw	r5,-316(fp)
   137b4:	002b6e00 	call	2b6e0 <__subsf3>
   137b8:	1007883a 	mov	r3,r2
   137bc:	e0ffac15 	stw	r3,-336(fp)

		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   137c0:	e0bfa417 	ldw	r2,-368(fp)
   137c4:	10800404 	addi	r2,r2,16
   137c8:	1080000b 	ldhu	r2,0(r2)
   137cc:	10bfffcc 	andi	r2,r2,65535
   137d0:	10a0001c 	xori	r2,r2,32768
   137d4:	10a00004 	addi	r2,r2,-32768
   137d8:	1009883a 	mov	r4,r2
   137dc:	002b8c80 	call	2b8c8 <__floatsisf>
   137e0:	1007883a 	mov	r3,r2
   137e4:	e0bfa517 	ldw	r2,-364(fp)
   137e8:	11000804 	addi	r4,r2,32
   137ec:	20800017 	ldw	r2,0(r4)
   137f0:	1809883a 	mov	r4,r3
   137f4:	100b883a 	mov	r5,r2
   137f8:	002b7380 	call	2b738 <__mulsf3>
   137fc:	1007883a 	mov	r3,r2
   13800:	e0ffb215 	stw	r3,-312(fp)
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   13804:	e0bfa417 	ldw	r2,-368(fp)
   13808:	10800c04 	addi	r2,r2,48
   1380c:	1080000b 	ldhu	r2,0(r2)
   13810:	10bfffcc 	andi	r2,r2,65535
   13814:	10a0001c 	xori	r2,r2,32768
   13818:	10a00004 	addi	r2,r2,-32768
   1381c:	1009883a 	mov	r4,r2
   13820:	002b8c80 	call	2b8c8 <__floatsisf>
   13824:	1007883a 	mov	r3,r2
   13828:	e0bfa517 	ldw	r2,-364(fp)
   1382c:	11001804 	addi	r4,r2,96
   13830:	20800017 	ldw	r2,0(r4)
   13834:	1809883a 	mov	r4,r3
   13838:	100b883a 	mov	r5,r2
   1383c:	002b7380 	call	2b738 <__mulsf3>
   13840:	1007883a 	mov	r3,r2
   13844:	e0ffb315 	stw	r3,-308(fp)
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   13848:	e0bfa417 	ldw	r2,-368(fp)
   1384c:	10801404 	addi	r2,r2,80
   13850:	1080000b 	ldhu	r2,0(r2)
   13854:	10bfffcc 	andi	r2,r2,65535
   13858:	10a0001c 	xori	r2,r2,32768
   1385c:	10a00004 	addi	r2,r2,-32768
   13860:	1009883a 	mov	r4,r2
   13864:	002b8c80 	call	2b8c8 <__floatsisf>
   13868:	1007883a 	mov	r3,r2
   1386c:	e0bfa517 	ldw	r2,-364(fp)
   13870:	11002804 	addi	r4,r2,160
   13874:	20800017 	ldw	r2,0(r4)
   13878:	1809883a 	mov	r4,r3
   1387c:	100b883a 	mov	r5,r2
   13880:	002b7380 	call	2b738 <__mulsf3>
   13884:	1007883a 	mov	r3,r2
   13888:	e0ffb415 	stw	r3,-304(fp)
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1388c:	e0bfa417 	ldw	r2,-368(fp)
   13890:	10801c04 	addi	r2,r2,112
   13894:	1080000b 	ldhu	r2,0(r2)
   13898:	10bfffcc 	andi	r2,r2,65535
   1389c:	10a0001c 	xori	r2,r2,32768
   138a0:	10a00004 	addi	r2,r2,-32768
   138a4:	1009883a 	mov	r4,r2
   138a8:	002b8c80 	call	2b8c8 <__floatsisf>
   138ac:	1007883a 	mov	r3,r2
   138b0:	e0bfa517 	ldw	r2,-364(fp)
   138b4:	11003804 	addi	r4,r2,224
   138b8:	20800017 	ldw	r2,0(r4)
   138bc:	1809883a 	mov	r4,r3
   138c0:	100b883a 	mov	r5,r2
   138c4:	002b7380 	call	2b738 <__mulsf3>
   138c8:	1007883a 	mov	r3,r2
   138cc:	e0ffb515 	stw	r3,-300(fp)

		z13 = tmp6 + tmp5;		/* phase 6 */
   138d0:	e13fb417 	ldw	r4,-304(fp)
   138d4:	e17fb317 	ldw	r5,-308(fp)
   138d8:	002b6940 	call	2b694 <__addsf3>
   138dc:	1007883a 	mov	r3,r2
   138e0:	e0ffb615 	stw	r3,-296(fp)
		z10 = tmp6 - tmp5;
   138e4:	e13fb417 	ldw	r4,-304(fp)
   138e8:	e17fb317 	ldw	r5,-308(fp)
   138ec:	002b6e00 	call	2b6e0 <__subsf3>
   138f0:	1007883a 	mov	r3,r2
   138f4:	e0ffb715 	stw	r3,-292(fp)
		z11 = tmp4 + tmp7;
   138f8:	e13fb217 	ldw	r4,-312(fp)
   138fc:	e17fb517 	ldw	r5,-300(fp)
   13900:	002b6940 	call	2b694 <__addsf3>
   13904:	1007883a 	mov	r3,r2
   13908:	e0ffb815 	stw	r3,-288(fp)
		z12 = tmp4 - tmp7;
   1390c:	e13fb217 	ldw	r4,-312(fp)
   13910:	e17fb517 	ldw	r5,-300(fp)
   13914:	002b6e00 	call	2b6e0 <__subsf3>
   13918:	1007883a 	mov	r3,r2
   1391c:	e0ffb915 	stw	r3,-284(fp)

		tmp7 = z11 + z13;		/* phase 5 */
   13920:	e13fb817 	ldw	r4,-288(fp)
   13924:	e17fb617 	ldw	r5,-296(fp)
   13928:	002b6940 	call	2b694 <__addsf3>
   1392c:	1007883a 	mov	r3,r2
   13930:	e0ffb515 	stw	r3,-300(fp)
		tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
   13934:	e13fb817 	ldw	r4,-288(fp)
   13938:	e17fb617 	ldw	r5,-296(fp)
   1393c:	002b6e00 	call	2b6e0 <__subsf3>
   13940:	1007883a 	mov	r3,r2
   13944:	1805883a 	mov	r2,r3
   13948:	1009883a 	mov	r4,r2
   1394c:	014fed74 	movhi	r5,16309
   13950:	29413cc4 	addi	r5,r5,1267
   13954:	002b7380 	call	2b738 <__mulsf3>
   13958:	1007883a 	mov	r3,r2
   1395c:	e0ffaf15 	stw	r3,-324(fp)

		z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
   13960:	e13fb717 	ldw	r4,-292(fp)
   13964:	e17fb917 	ldw	r5,-284(fp)
   13968:	002b6940 	call	2b694 <__addsf3>
   1396c:	1007883a 	mov	r3,r2
   13970:	1805883a 	mov	r2,r3
   13974:	1009883a 	mov	r4,r2
   13978:	014ffb74 	movhi	r5,16365
   1397c:	2960d784 	addi	r5,r5,-31906
   13980:	002b7380 	call	2b738 <__mulsf3>
   13984:	1007883a 	mov	r3,r2
   13988:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
   1398c:	e13fb917 	ldw	r4,-284(fp)
   13990:	014fe2f4 	movhi	r5,16267
   13994:	2962f504 	addi	r5,r5,-29740
   13998:	002b7380 	call	2b738 <__mulsf3>
   1399c:	1007883a 	mov	r3,r2
   139a0:	1805883a 	mov	r2,r3
   139a4:	e13fba17 	ldw	r4,-280(fp)
   139a8:	100b883a 	mov	r5,r2
   139ac:	002b6e00 	call	2b6e0 <__subsf3>
   139b0:	1007883a 	mov	r3,r2
   139b4:	e0ffae15 	stw	r3,-328(fp)
		tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
   139b8:	e13fb717 	ldw	r4,-292(fp)
   139bc:	015009f4 	movhi	r5,16423
   139c0:	294f5d44 	addi	r5,r5,15733
   139c4:	002b7380 	call	2b738 <__mulsf3>
   139c8:	1007883a 	mov	r3,r2
   139cc:	1805883a 	mov	r2,r3
   139d0:	e13fba17 	ldw	r4,-280(fp)
   139d4:	100b883a 	mov	r5,r2
   139d8:	002b6e00 	call	2b6e0 <__subsf3>
   139dc:	1007883a 	mov	r3,r2
   139e0:	e0ffb115 	stw	r3,-316(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
   139e4:	e13fb117 	ldw	r4,-316(fp)
   139e8:	e17fb517 	ldw	r5,-300(fp)
   139ec:	002b6e00 	call	2b6e0 <__subsf3>
   139f0:	1007883a 	mov	r3,r2
   139f4:	e0ffb415 	stw	r3,-304(fp)
		tmp5 = tmp11 - tmp6;
   139f8:	e13faf17 	ldw	r4,-324(fp)
   139fc:	e17fb417 	ldw	r5,-304(fp)
   13a00:	002b6e00 	call	2b6e0 <__subsf3>
   13a04:	1007883a 	mov	r3,r2
   13a08:	e0ffb315 	stw	r3,-308(fp)
		tmp4 = tmp10 - tmp5;
   13a0c:	e13fae17 	ldw	r4,-328(fp)
   13a10:	e17fb317 	ldw	r5,-308(fp)
   13a14:	002b6e00 	call	2b6e0 <__subsf3>
   13a18:	1007883a 	mov	r3,r2
   13a1c:	e0ffb215 	stw	r3,-312(fp)

		wsptr[DCTSIZE*0] = tmp0 + tmp7;
   13a20:	e13faa17 	ldw	r4,-344(fp)
   13a24:	e17fb517 	ldw	r5,-300(fp)
   13a28:	002b6940 	call	2b694 <__addsf3>
   13a2c:	1009883a 	mov	r4,r2
   13a30:	2007883a 	mov	r3,r4
   13a34:	e0bfa617 	ldw	r2,-360(fp)
   13a38:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = tmp0 - tmp7;
   13a3c:	e0bfa617 	ldw	r2,-360(fp)
   13a40:	14003804 	addi	r16,r2,224
   13a44:	e13faa17 	ldw	r4,-344(fp)
   13a48:	e17fb517 	ldw	r5,-300(fp)
   13a4c:	002b6e00 	call	2b6e0 <__subsf3>
   13a50:	1007883a 	mov	r3,r2
   13a54:	1805883a 	mov	r2,r3
   13a58:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*1] = tmp1 + tmp6;
   13a5c:	e0bfa617 	ldw	r2,-360(fp)
   13a60:	14000804 	addi	r16,r2,32
   13a64:	e13fab17 	ldw	r4,-340(fp)
   13a68:	e17fb417 	ldw	r5,-304(fp)
   13a6c:	002b6940 	call	2b694 <__addsf3>
   13a70:	1007883a 	mov	r3,r2
   13a74:	1805883a 	mov	r2,r3
   13a78:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*6] = tmp1 - tmp6;
   13a7c:	e0bfa617 	ldw	r2,-360(fp)
   13a80:	14003004 	addi	r16,r2,192
   13a84:	e13fab17 	ldw	r4,-340(fp)
   13a88:	e17fb417 	ldw	r5,-304(fp)
   13a8c:	002b6e00 	call	2b6e0 <__subsf3>
   13a90:	1007883a 	mov	r3,r2
   13a94:	1805883a 	mov	r2,r3
   13a98:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*2] = tmp2 + tmp5;
   13a9c:	e0bfa617 	ldw	r2,-360(fp)
   13aa0:	14001004 	addi	r16,r2,64
   13aa4:	e13fac17 	ldw	r4,-336(fp)
   13aa8:	e17fb317 	ldw	r5,-308(fp)
   13aac:	002b6940 	call	2b694 <__addsf3>
   13ab0:	1007883a 	mov	r3,r2
   13ab4:	1805883a 	mov	r2,r3
   13ab8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*5] = tmp2 - tmp5;
   13abc:	e0bfa617 	ldw	r2,-360(fp)
   13ac0:	14002804 	addi	r16,r2,160
   13ac4:	e13fac17 	ldw	r4,-336(fp)
   13ac8:	e17fb317 	ldw	r5,-308(fp)
   13acc:	002b6e00 	call	2b6e0 <__subsf3>
   13ad0:	1007883a 	mov	r3,r2
   13ad4:	1805883a 	mov	r2,r3
   13ad8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*3] = tmp3 + tmp4;
   13adc:	e0bfa617 	ldw	r2,-360(fp)
   13ae0:	14001804 	addi	r16,r2,96
   13ae4:	e13fad17 	ldw	r4,-332(fp)
   13ae8:	e17fb217 	ldw	r5,-312(fp)
   13aec:	002b6940 	call	2b694 <__addsf3>
   13af0:	1007883a 	mov	r3,r2
   13af4:	1805883a 	mov	r2,r3
   13af8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*4] = tmp3 - tmp4;
   13afc:	e0bfa617 	ldw	r2,-360(fp)
   13b00:	14002004 	addi	r16,r2,128
   13b04:	e13fad17 	ldw	r4,-332(fp)
   13b08:	e17fb217 	ldw	r5,-312(fp)
   13b0c:	002b6e00 	call	2b6e0 <__subsf3>
   13b10:	1007883a 	mov	r3,r2
   13b14:	1805883a 	mov	r2,r3
   13b18:	80800015 	stw	r2,0(r16)

		inptr++;			/* advance pointers to next column */
   13b1c:	e0bfa417 	ldw	r2,-368(fp)
   13b20:	10800084 	addi	r2,r2,2
   13b24:	e0bfa415 	stw	r2,-368(fp)
		quantptr++;
   13b28:	e0bfa517 	ldw	r2,-364(fp)
   13b2c:	10800104 	addi	r2,r2,4
   13b30:	e0bfa515 	stw	r2,-364(fp)
		wsptr++;
   13b34:	e0bfa617 	ldw	r2,-360(fp)
   13b38:	10800104 	addi	r2,r2,4
   13b3c:	e0bfa615 	stw	r2,-360(fp)
	/* Pass 1: process columns from input, store into work array. */

	inptr = coef_block;
	quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   13b40:	e0bfa717 	ldw	r2,-356(fp)
   13b44:	10bfffc4 	addi	r2,r2,-1
   13b48:	e0bfa715 	stw	r2,-356(fp)
   13b4c:	e0bfa717 	ldw	r2,-356(fp)
   13b50:	00be3d16 	blt	zero,r2,13448 <jpeg_idct_float+0x58>
		wsptr++;
	}

	/* Pass 2: process rows from work array, store into output array. */

	wsptr = workspace;
   13b54:	e0bfbc04 	addi	r2,fp,-272
   13b58:	e0bfa615 	stw	r2,-360(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   13b5c:	e03fa715 	stw	zero,-356(fp)
   13b60:	00013706 	br	14040 <jpeg_idct_float+0xc50>
		outptr = output_buf[ctr] + output_col;
   13b64:	e0bfa717 	ldw	r2,-356(fp)
   13b68:	1085883a 	add	r2,r2,r2
   13b6c:	1085883a 	add	r2,r2,r2
   13b70:	e0ffff17 	ldw	r3,-4(fp)
   13b74:	1885883a 	add	r2,r3,r2
   13b78:	10c00017 	ldw	r3,0(r2)
   13b7c:	e0800317 	ldw	r2,12(fp)
   13b80:	1885883a 	add	r2,r3,r2
   13b84:	e0bfbb15 	stw	r2,-276(fp)
		*/

		/* Even part */

		/* Apply signed->unsigned and prepare float->int conversion */
		z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
   13b88:	e0ffa617 	ldw	r3,-360(fp)
   13b8c:	18800017 	ldw	r2,0(r3)
   13b90:	1009883a 	mov	r4,r2
   13b94:	0150c074 	movhi	r5,17153
   13b98:	29600004 	addi	r5,r5,-32768
   13b9c:	002b6940 	call	2b694 <__addsf3>
   13ba0:	1007883a 	mov	r3,r2
   13ba4:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 + wsptr[4];
   13ba8:	e0bfa617 	ldw	r2,-360(fp)
   13bac:	10c00404 	addi	r3,r2,16
   13bb0:	18800017 	ldw	r2,0(r3)
   13bb4:	1009883a 	mov	r4,r2
   13bb8:	e17fba17 	ldw	r5,-280(fp)
   13bbc:	002b6940 	call	2b694 <__addsf3>
   13bc0:	1007883a 	mov	r3,r2
   13bc4:	e0ffae15 	stw	r3,-328(fp)
		tmp11 = z5 - wsptr[4];
   13bc8:	e0bfa617 	ldw	r2,-360(fp)
   13bcc:	10c00404 	addi	r3,r2,16
   13bd0:	18800017 	ldw	r2,0(r3)
   13bd4:	e13fba17 	ldw	r4,-280(fp)
   13bd8:	100b883a 	mov	r5,r2
   13bdc:	002b6e00 	call	2b6e0 <__subsf3>
   13be0:	1007883a 	mov	r3,r2
   13be4:	e0ffaf15 	stw	r3,-324(fp)

		tmp13 = wsptr[2] + wsptr[6];
   13be8:	e0bfa617 	ldw	r2,-360(fp)
   13bec:	10800204 	addi	r2,r2,8
   13bf0:	10c00017 	ldw	r3,0(r2)
   13bf4:	e0bfa617 	ldw	r2,-360(fp)
   13bf8:	11000604 	addi	r4,r2,24
   13bfc:	20800017 	ldw	r2,0(r4)
   13c00:	1809883a 	mov	r4,r3
   13c04:	100b883a 	mov	r5,r2
   13c08:	002b6940 	call	2b694 <__addsf3>
   13c0c:	1007883a 	mov	r3,r2
   13c10:	e0ffb015 	stw	r3,-320(fp)
		tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
   13c14:	e0bfa617 	ldw	r2,-360(fp)
   13c18:	10800204 	addi	r2,r2,8
   13c1c:	10c00017 	ldw	r3,0(r2)
   13c20:	e0bfa617 	ldw	r2,-360(fp)
   13c24:	11000604 	addi	r4,r2,24
   13c28:	20800017 	ldw	r2,0(r4)
   13c2c:	1809883a 	mov	r4,r3
   13c30:	100b883a 	mov	r5,r2
   13c34:	002b6e00 	call	2b6e0 <__subsf3>
   13c38:	1007883a 	mov	r3,r2
   13c3c:	1805883a 	mov	r2,r3
   13c40:	1009883a 	mov	r4,r2
   13c44:	014fed74 	movhi	r5,16309
   13c48:	29413cc4 	addi	r5,r5,1267
   13c4c:	002b7380 	call	2b738 <__mulsf3>
   13c50:	1007883a 	mov	r3,r2
   13c54:	1805883a 	mov	r2,r3
   13c58:	1009883a 	mov	r4,r2
   13c5c:	e17fb017 	ldw	r5,-320(fp)
   13c60:	002b6e00 	call	2b6e0 <__subsf3>
   13c64:	1007883a 	mov	r3,r2
   13c68:	e0ffb115 	stw	r3,-316(fp)

		tmp0 = tmp10 + tmp13;
   13c6c:	e13fae17 	ldw	r4,-328(fp)
   13c70:	e17fb017 	ldw	r5,-320(fp)
   13c74:	002b6940 	call	2b694 <__addsf3>
   13c78:	1007883a 	mov	r3,r2
   13c7c:	e0ffaa15 	stw	r3,-344(fp)
		tmp3 = tmp10 - tmp13;
   13c80:	e13fae17 	ldw	r4,-328(fp)
   13c84:	e17fb017 	ldw	r5,-320(fp)
   13c88:	002b6e00 	call	2b6e0 <__subsf3>
   13c8c:	1007883a 	mov	r3,r2
   13c90:	e0ffad15 	stw	r3,-332(fp)
		tmp1 = tmp11 + tmp12;
   13c94:	e13faf17 	ldw	r4,-324(fp)
   13c98:	e17fb117 	ldw	r5,-316(fp)
   13c9c:	002b6940 	call	2b694 <__addsf3>
   13ca0:	1007883a 	mov	r3,r2
   13ca4:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = tmp11 - tmp12;
   13ca8:	e13faf17 	ldw	r4,-324(fp)
   13cac:	e17fb117 	ldw	r5,-316(fp)
   13cb0:	002b6e00 	call	2b6e0 <__subsf3>
   13cb4:	1007883a 	mov	r3,r2
   13cb8:	e0ffac15 	stw	r3,-336(fp)

		/* Odd part */

		z13 = wsptr[5] + wsptr[3];
   13cbc:	e0bfa617 	ldw	r2,-360(fp)
   13cc0:	10800504 	addi	r2,r2,20
   13cc4:	10c00017 	ldw	r3,0(r2)
   13cc8:	e0bfa617 	ldw	r2,-360(fp)
   13ccc:	11000304 	addi	r4,r2,12
   13cd0:	20800017 	ldw	r2,0(r4)
   13cd4:	1809883a 	mov	r4,r3
   13cd8:	100b883a 	mov	r5,r2
   13cdc:	002b6940 	call	2b694 <__addsf3>
   13ce0:	1007883a 	mov	r3,r2
   13ce4:	e0ffb615 	stw	r3,-296(fp)
		z10 = wsptr[5] - wsptr[3];
   13ce8:	e0bfa617 	ldw	r2,-360(fp)
   13cec:	10800504 	addi	r2,r2,20
   13cf0:	10c00017 	ldw	r3,0(r2)
   13cf4:	e0bfa617 	ldw	r2,-360(fp)
   13cf8:	11000304 	addi	r4,r2,12
   13cfc:	20800017 	ldw	r2,0(r4)
   13d00:	1809883a 	mov	r4,r3
   13d04:	100b883a 	mov	r5,r2
   13d08:	002b6e00 	call	2b6e0 <__subsf3>
   13d0c:	1007883a 	mov	r3,r2
   13d10:	e0ffb715 	stw	r3,-292(fp)
		z11 = wsptr[1] + wsptr[7];
   13d14:	e0bfa617 	ldw	r2,-360(fp)
   13d18:	10800104 	addi	r2,r2,4
   13d1c:	10c00017 	ldw	r3,0(r2)
   13d20:	e0bfa617 	ldw	r2,-360(fp)
   13d24:	11000704 	addi	r4,r2,28
   13d28:	20800017 	ldw	r2,0(r4)
   13d2c:	1809883a 	mov	r4,r3
   13d30:	100b883a 	mov	r5,r2
   13d34:	002b6940 	call	2b694 <__addsf3>
   13d38:	1007883a 	mov	r3,r2
   13d3c:	e0ffb815 	stw	r3,-288(fp)
		z12 = wsptr[1] - wsptr[7];
   13d40:	e0bfa617 	ldw	r2,-360(fp)
   13d44:	10800104 	addi	r2,r2,4
   13d48:	10c00017 	ldw	r3,0(r2)
   13d4c:	e0bfa617 	ldw	r2,-360(fp)
   13d50:	11000704 	addi	r4,r2,28
   13d54:	20800017 	ldw	r2,0(r4)
   13d58:	1809883a 	mov	r4,r3
   13d5c:	100b883a 	mov	r5,r2
   13d60:	002b6e00 	call	2b6e0 <__subsf3>
   13d64:	1007883a 	mov	r3,r2
   13d68:	e0ffb915 	stw	r3,-284(fp)

		tmp7 = z11 + z13;
   13d6c:	e13fb817 	ldw	r4,-288(fp)
   13d70:	e17fb617 	ldw	r5,-296(fp)
   13d74:	002b6940 	call	2b694 <__addsf3>
   13d78:	1007883a 	mov	r3,r2
   13d7c:	e0ffb515 	stw	r3,-300(fp)
		tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
   13d80:	e13fb817 	ldw	r4,-288(fp)
   13d84:	e17fb617 	ldw	r5,-296(fp)
   13d88:	002b6e00 	call	2b6e0 <__subsf3>
   13d8c:	1007883a 	mov	r3,r2
   13d90:	1805883a 	mov	r2,r3
   13d94:	1009883a 	mov	r4,r2
   13d98:	014fed74 	movhi	r5,16309
   13d9c:	29413cc4 	addi	r5,r5,1267
   13da0:	002b7380 	call	2b738 <__mulsf3>
   13da4:	1007883a 	mov	r3,r2
   13da8:	e0ffaf15 	stw	r3,-324(fp)

		z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
   13dac:	e13fb717 	ldw	r4,-292(fp)
   13db0:	e17fb917 	ldw	r5,-284(fp)
   13db4:	002b6940 	call	2b694 <__addsf3>
   13db8:	1007883a 	mov	r3,r2
   13dbc:	1805883a 	mov	r2,r3
   13dc0:	1009883a 	mov	r4,r2
   13dc4:	014ffb74 	movhi	r5,16365
   13dc8:	2960d784 	addi	r5,r5,-31906
   13dcc:	002b7380 	call	2b738 <__mulsf3>
   13dd0:	1007883a 	mov	r3,r2
   13dd4:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
   13dd8:	e13fb917 	ldw	r4,-284(fp)
   13ddc:	014fe2f4 	movhi	r5,16267
   13de0:	2962f504 	addi	r5,r5,-29740
   13de4:	002b7380 	call	2b738 <__mulsf3>
   13de8:	1007883a 	mov	r3,r2
   13dec:	1805883a 	mov	r2,r3
   13df0:	e13fba17 	ldw	r4,-280(fp)
   13df4:	100b883a 	mov	r5,r2
   13df8:	002b6e00 	call	2b6e0 <__subsf3>
   13dfc:	1007883a 	mov	r3,r2
   13e00:	e0ffae15 	stw	r3,-328(fp)
		tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
   13e04:	e13fb717 	ldw	r4,-292(fp)
   13e08:	015009f4 	movhi	r5,16423
   13e0c:	294f5d44 	addi	r5,r5,15733
   13e10:	002b7380 	call	2b738 <__mulsf3>
   13e14:	1007883a 	mov	r3,r2
   13e18:	1805883a 	mov	r2,r3
   13e1c:	e13fba17 	ldw	r4,-280(fp)
   13e20:	100b883a 	mov	r5,r2
   13e24:	002b6e00 	call	2b6e0 <__subsf3>
   13e28:	1007883a 	mov	r3,r2
   13e2c:	e0ffb115 	stw	r3,-316(fp)

		tmp6 = tmp12 - tmp7;
   13e30:	e13fb117 	ldw	r4,-316(fp)
   13e34:	e17fb517 	ldw	r5,-300(fp)
   13e38:	002b6e00 	call	2b6e0 <__subsf3>
   13e3c:	1007883a 	mov	r3,r2
   13e40:	e0ffb415 	stw	r3,-304(fp)
		tmp5 = tmp11 - tmp6;
   13e44:	e13faf17 	ldw	r4,-324(fp)
   13e48:	e17fb417 	ldw	r5,-304(fp)
   13e4c:	002b6e00 	call	2b6e0 <__subsf3>
   13e50:	1007883a 	mov	r3,r2
   13e54:	e0ffb315 	stw	r3,-308(fp)
		tmp4 = tmp10 - tmp5;
   13e58:	e13fae17 	ldw	r4,-328(fp)
   13e5c:	e17fb317 	ldw	r5,-308(fp)
   13e60:	002b6e00 	call	2b6e0 <__subsf3>
   13e64:	1007883a 	mov	r3,r2
   13e68:	e0ffb215 	stw	r3,-312(fp)

		/* Final output stage: float->int conversion and range-limit */

		outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
   13e6c:	e13faa17 	ldw	r4,-344(fp)
   13e70:	e17fb517 	ldw	r5,-300(fp)
   13e74:	002b6940 	call	2b694 <__addsf3>
   13e78:	1007883a 	mov	r3,r2
   13e7c:	1805883a 	mov	r2,r3
   13e80:	1009883a 	mov	r4,r2
   13e84:	002b96c0 	call	2b96c <__fixsfsi>
   13e88:	1080ffcc 	andi	r2,r2,1023
   13e8c:	e0ffa817 	ldw	r3,-352(fp)
   13e90:	1885883a 	add	r2,r3,r2
   13e94:	10c00003 	ldbu	r3,0(r2)
   13e98:	e0bfbb17 	ldw	r2,-276(fp)
   13e9c:	10c00005 	stb	r3,0(r2)
		outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
   13ea0:	e0bfbb17 	ldw	r2,-276(fp)
   13ea4:	140001c4 	addi	r16,r2,7
   13ea8:	e13faa17 	ldw	r4,-344(fp)
   13eac:	e17fb517 	ldw	r5,-300(fp)
   13eb0:	002b6e00 	call	2b6e0 <__subsf3>
   13eb4:	1007883a 	mov	r3,r2
   13eb8:	1805883a 	mov	r2,r3
   13ebc:	1009883a 	mov	r4,r2
   13ec0:	002b96c0 	call	2b96c <__fixsfsi>
   13ec4:	1080ffcc 	andi	r2,r2,1023
   13ec8:	e0ffa817 	ldw	r3,-352(fp)
   13ecc:	1885883a 	add	r2,r3,r2
   13ed0:	10800003 	ldbu	r2,0(r2)
   13ed4:	80800005 	stb	r2,0(r16)
		outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
   13ed8:	e0bfbb17 	ldw	r2,-276(fp)
   13edc:	14000044 	addi	r16,r2,1
   13ee0:	e13fab17 	ldw	r4,-340(fp)
   13ee4:	e17fb417 	ldw	r5,-304(fp)
   13ee8:	002b6940 	call	2b694 <__addsf3>
   13eec:	1007883a 	mov	r3,r2
   13ef0:	1805883a 	mov	r2,r3
   13ef4:	1009883a 	mov	r4,r2
   13ef8:	002b96c0 	call	2b96c <__fixsfsi>
   13efc:	1080ffcc 	andi	r2,r2,1023
   13f00:	e0ffa817 	ldw	r3,-352(fp)
   13f04:	1885883a 	add	r2,r3,r2
   13f08:	10800003 	ldbu	r2,0(r2)
   13f0c:	80800005 	stb	r2,0(r16)
		outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
   13f10:	e0bfbb17 	ldw	r2,-276(fp)
   13f14:	14000184 	addi	r16,r2,6
   13f18:	e13fab17 	ldw	r4,-340(fp)
   13f1c:	e17fb417 	ldw	r5,-304(fp)
   13f20:	002b6e00 	call	2b6e0 <__subsf3>
   13f24:	1007883a 	mov	r3,r2
   13f28:	1805883a 	mov	r2,r3
   13f2c:	1009883a 	mov	r4,r2
   13f30:	002b96c0 	call	2b96c <__fixsfsi>
   13f34:	1080ffcc 	andi	r2,r2,1023
   13f38:	e0ffa817 	ldw	r3,-352(fp)
   13f3c:	1885883a 	add	r2,r3,r2
   13f40:	10800003 	ldbu	r2,0(r2)
   13f44:	80800005 	stb	r2,0(r16)
		outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
   13f48:	e0bfbb17 	ldw	r2,-276(fp)
   13f4c:	14000084 	addi	r16,r2,2
   13f50:	e13fac17 	ldw	r4,-336(fp)
   13f54:	e17fb317 	ldw	r5,-308(fp)
   13f58:	002b6940 	call	2b694 <__addsf3>
   13f5c:	1007883a 	mov	r3,r2
   13f60:	1805883a 	mov	r2,r3
   13f64:	1009883a 	mov	r4,r2
   13f68:	002b96c0 	call	2b96c <__fixsfsi>
   13f6c:	1080ffcc 	andi	r2,r2,1023
   13f70:	e0ffa817 	ldw	r3,-352(fp)
   13f74:	1885883a 	add	r2,r3,r2
   13f78:	10800003 	ldbu	r2,0(r2)
   13f7c:	80800005 	stb	r2,0(r16)
		outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
   13f80:	e0bfbb17 	ldw	r2,-276(fp)
   13f84:	14000144 	addi	r16,r2,5
   13f88:	e13fac17 	ldw	r4,-336(fp)
   13f8c:	e17fb317 	ldw	r5,-308(fp)
   13f90:	002b6e00 	call	2b6e0 <__subsf3>
   13f94:	1007883a 	mov	r3,r2
   13f98:	1805883a 	mov	r2,r3
   13f9c:	1009883a 	mov	r4,r2
   13fa0:	002b96c0 	call	2b96c <__fixsfsi>
   13fa4:	1080ffcc 	andi	r2,r2,1023
   13fa8:	e0ffa817 	ldw	r3,-352(fp)
   13fac:	1885883a 	add	r2,r3,r2
   13fb0:	10800003 	ldbu	r2,0(r2)
   13fb4:	80800005 	stb	r2,0(r16)
		outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
   13fb8:	e0bfbb17 	ldw	r2,-276(fp)
   13fbc:	140000c4 	addi	r16,r2,3
   13fc0:	e13fad17 	ldw	r4,-332(fp)
   13fc4:	e17fb217 	ldw	r5,-312(fp)
   13fc8:	002b6940 	call	2b694 <__addsf3>
   13fcc:	1007883a 	mov	r3,r2
   13fd0:	1805883a 	mov	r2,r3
   13fd4:	1009883a 	mov	r4,r2
   13fd8:	002b96c0 	call	2b96c <__fixsfsi>
   13fdc:	1080ffcc 	andi	r2,r2,1023
   13fe0:	e0ffa817 	ldw	r3,-352(fp)
   13fe4:	1885883a 	add	r2,r3,r2
   13fe8:	10800003 	ldbu	r2,0(r2)
   13fec:	80800005 	stb	r2,0(r16)
		outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
   13ff0:	e0bfbb17 	ldw	r2,-276(fp)
   13ff4:	14000104 	addi	r16,r2,4
   13ff8:	e13fad17 	ldw	r4,-332(fp)
   13ffc:	e17fb217 	ldw	r5,-312(fp)
   14000:	002b6e00 	call	2b6e0 <__subsf3>
   14004:	1007883a 	mov	r3,r2
   14008:	1805883a 	mov	r2,r3
   1400c:	1009883a 	mov	r4,r2
   14010:	002b96c0 	call	2b96c <__fixsfsi>
   14014:	1080ffcc 	andi	r2,r2,1023
   14018:	e0ffa817 	ldw	r3,-352(fp)
   1401c:	1885883a 	add	r2,r3,r2
   14020:	10800003 	ldbu	r2,0(r2)
   14024:	80800005 	stb	r2,0(r16)

		wsptr += DCTSIZE;		/* advance pointer to next row */
   14028:	e0bfa617 	ldw	r2,-360(fp)
   1402c:	10800804 	addi	r2,r2,32
   14030:	e0bfa615 	stw	r2,-360(fp)
	}

	/* Pass 2: process rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   14034:	e0bfa717 	ldw	r2,-356(fp)
   14038:	10800044 	addi	r2,r2,1
   1403c:	e0bfa715 	stw	r2,-356(fp)
   14040:	e0bfa717 	ldw	r2,-356(fp)
   14044:	10800210 	cmplti	r2,r2,8
   14048:	103ec61e 	bne	r2,zero,13b64 <jpeg_idct_float+0x774>
		outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
		outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
   1404c:	e037883a 	mov	sp,fp
   14050:	dfc00217 	ldw	ra,8(sp)
   14054:	df000117 	ldw	fp,4(sp)
   14058:	dc000017 	ldw	r16,0(sp)
   1405c:	dec00304 	addi	sp,sp,12
   14060:	f800283a 	ret

00014064 <jpeg_idct_ifast>:

	GLOBAL(void)
	jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   14064:	deffa104 	addi	sp,sp,-380
   14068:	dfc05e15 	stw	ra,376(sp)
   1406c:	df005d15 	stw	fp,372(sp)
   14070:	df005d04 	addi	fp,sp,372
   14074:	e13ffc15 	stw	r4,-16(fp)
   14078:	e17ffd15 	stw	r5,-12(fp)
   1407c:	e1bffe15 	stw	r6,-8(fp)
   14080:	e1ffff15 	stw	r7,-4(fp)
	DCTELEM z5, z10, z11, z12, z13;
	JCOEFPTR inptr;
	IFAST_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   14084:	e0bffc17 	ldw	r2,-16(fp)
   14088:	10804917 	ldw	r2,292(r2)
   1408c:	10802004 	addi	r2,r2,128
   14090:	e0bfa715 	stw	r2,-356(fp)
	SHIFT_TEMPS			/* for DESCALE */
		ISHIFT_TEMPS			/* for IDESCALE */

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   14094:	e0bffe17 	ldw	r2,-8(fp)
   14098:	e0bfa315 	stw	r2,-372(fp)
	quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
   1409c:	e0bffd17 	ldw	r2,-12(fp)
   140a0:	10801517 	ldw	r2,84(r2)
   140a4:	e0bfa415 	stw	r2,-368(fp)
	wsptr = workspace;
   140a8:	e0bfbc04 	addi	r2,fp,-272
   140ac:	e0bfa515 	stw	r2,-364(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   140b0:	00800204 	movi	r2,8
   140b4:	e0bfa615 	stw	r2,-360(fp)
   140b8:	00016a06 	br	14664 <jpeg_idct_ifast+0x600>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   140bc:	e0bfa317 	ldw	r2,-372(fp)
   140c0:	10800404 	addi	r2,r2,16
   140c4:	1080000b 	ldhu	r2,0(r2)
   140c8:	10bfffcc 	andi	r2,r2,65535
   140cc:	10a0001c 	xori	r2,r2,32768
   140d0:	10a00004 	addi	r2,r2,-32768
   140d4:	10005e1e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
   140d8:	e0bfa317 	ldw	r2,-372(fp)
   140dc:	10800804 	addi	r2,r2,32
   140e0:	1080000b 	ldhu	r2,0(r2)
   140e4:	10bfffcc 	andi	r2,r2,65535
   140e8:	10a0001c 	xori	r2,r2,32768
   140ec:	10a00004 	addi	r2,r2,-32768
   140f0:	1000571e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   140f4:	e0bfa317 	ldw	r2,-372(fp)
   140f8:	10800c04 	addi	r2,r2,48
   140fc:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   14100:	10bfffcc 	andi	r2,r2,65535
   14104:	10a0001c 	xori	r2,r2,32768
   14108:	10a00004 	addi	r2,r2,-32768
   1410c:	1000501e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   14110:	e0bfa317 	ldw	r2,-372(fp)
   14114:	10801004 	addi	r2,r2,64
   14118:	1080000b 	ldhu	r2,0(r2)
   1411c:	10bfffcc 	andi	r2,r2,65535
   14120:	10a0001c 	xori	r2,r2,32768
   14124:	10a00004 	addi	r2,r2,-32768
   14128:	1000491e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   1412c:	e0bfa317 	ldw	r2,-372(fp)
   14130:	10801404 	addi	r2,r2,80
   14134:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   14138:	10bfffcc 	andi	r2,r2,65535
   1413c:	10a0001c 	xori	r2,r2,32768
   14140:	10a00004 	addi	r2,r2,-32768
   14144:	1000421e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   14148:	e0bfa317 	ldw	r2,-372(fp)
   1414c:	10801804 	addi	r2,r2,96
   14150:	1080000b 	ldhu	r2,0(r2)
   14154:	10bfffcc 	andi	r2,r2,65535
   14158:	10a0001c 	xori	r2,r2,32768
   1415c:	10a00004 	addi	r2,r2,-32768
   14160:	10003b1e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*7] == 0) {
   14164:	e0bfa317 	ldw	r2,-372(fp)
   14168:	10801c04 	addi	r2,r2,112
   1416c:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   14170:	10bfffcc 	andi	r2,r2,65535
   14174:	10a0001c 	xori	r2,r2,32768
   14178:	10a00004 	addi	r2,r2,-32768
   1417c:	1000341e 	bne	r2,zero,14250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   14180:	e0bfa317 	ldw	r2,-372(fp)
   14184:	1080000b 	ldhu	r2,0(r2)
   14188:	10ffffcc 	andi	r3,r2,65535
   1418c:	18e0001c 	xori	r3,r3,32768
   14190:	18e00004 	addi	r3,r3,-32768
   14194:	e0bfa417 	ldw	r2,-368(fp)
   14198:	10800017 	ldw	r2,0(r2)
   1419c:	1809883a 	mov	r4,r3
   141a0:	100b883a 	mov	r5,r2
   141a4:	002c1540 	call	2c154 <__mulsi3>
   141a8:	e0bfa815 	stw	r2,-352(fp)

				wsptr[DCTSIZE*0] = dcval;
   141ac:	e0bfa517 	ldw	r2,-364(fp)
   141b0:	e0ffa817 	ldw	r3,-352(fp)
   141b4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
   141b8:	e0bfa517 	ldw	r2,-364(fp)
   141bc:	10800804 	addi	r2,r2,32
   141c0:	e0ffa817 	ldw	r3,-352(fp)
   141c4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
   141c8:	e0bfa517 	ldw	r2,-364(fp)
   141cc:	10801004 	addi	r2,r2,64
   141d0:	e0ffa817 	ldw	r3,-352(fp)
   141d4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
   141d8:	e0bfa517 	ldw	r2,-364(fp)
   141dc:	10801804 	addi	r2,r2,96
   141e0:	e0ffa817 	ldw	r3,-352(fp)
   141e4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
   141e8:	e0bfa517 	ldw	r2,-364(fp)
   141ec:	10802004 	addi	r2,r2,128
   141f0:	e0ffa817 	ldw	r3,-352(fp)
   141f4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
   141f8:	e0bfa517 	ldw	r2,-364(fp)
   141fc:	10802804 	addi	r2,r2,160
   14200:	e0ffa817 	ldw	r3,-352(fp)
   14204:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
   14208:	e0bfa517 	ldw	r2,-364(fp)
   1420c:	10803004 	addi	r2,r2,192
   14210:	e0ffa817 	ldw	r3,-352(fp)
   14214:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
   14218:	e0bfa517 	ldw	r2,-364(fp)
   1421c:	10803804 	addi	r2,r2,224
   14220:	e0ffa817 	ldw	r3,-352(fp)
   14224:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
   14228:	e0bfa317 	ldw	r2,-372(fp)
   1422c:	10800084 	addi	r2,r2,2
   14230:	e0bfa315 	stw	r2,-372(fp)
				quantptr++;
   14234:	e0bfa417 	ldw	r2,-368(fp)
   14238:	10800104 	addi	r2,r2,4
   1423c:	e0bfa415 	stw	r2,-368(fp)
				wsptr++;
   14240:	e0bfa517 	ldw	r2,-364(fp)
   14244:	10800104 	addi	r2,r2,4
   14248:	e0bfa515 	stw	r2,-364(fp)
				continue;
   1424c:	00010206 	br	14658 <jpeg_idct_ifast+0x5f4>
		}

		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   14250:	e0bfa317 	ldw	r2,-372(fp)
   14254:	1080000b 	ldhu	r2,0(r2)
   14258:	10ffffcc 	andi	r3,r2,65535
   1425c:	18e0001c 	xori	r3,r3,32768
   14260:	18e00004 	addi	r3,r3,-32768
   14264:	e0bfa417 	ldw	r2,-368(fp)
   14268:	10800017 	ldw	r2,0(r2)
   1426c:	1809883a 	mov	r4,r3
   14270:	100b883a 	mov	r5,r2
   14274:	002c1540 	call	2c154 <__mulsi3>
   14278:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1427c:	e0bfa317 	ldw	r2,-372(fp)
   14280:	10800804 	addi	r2,r2,32
   14284:	1080000b 	ldhu	r2,0(r2)
   14288:	10ffffcc 	andi	r3,r2,65535
   1428c:	18e0001c 	xori	r3,r3,32768
   14290:	18e00004 	addi	r3,r3,-32768
   14294:	e0bfa417 	ldw	r2,-368(fp)
   14298:	10801004 	addi	r2,r2,64
   1429c:	10800017 	ldw	r2,0(r2)
   142a0:	1809883a 	mov	r4,r3
   142a4:	100b883a 	mov	r5,r2
   142a8:	002c1540 	call	2c154 <__mulsi3>
   142ac:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   142b0:	e0bfa317 	ldw	r2,-372(fp)
   142b4:	10801004 	addi	r2,r2,64
   142b8:	1080000b 	ldhu	r2,0(r2)
   142bc:	10ffffcc 	andi	r3,r2,65535
   142c0:	18e0001c 	xori	r3,r3,32768
   142c4:	18e00004 	addi	r3,r3,-32768
   142c8:	e0bfa417 	ldw	r2,-368(fp)
   142cc:	10802004 	addi	r2,r2,128
   142d0:	10800017 	ldw	r2,0(r2)
   142d4:	1809883a 	mov	r4,r3
   142d8:	100b883a 	mov	r5,r2
   142dc:	002c1540 	call	2c154 <__mulsi3>
   142e0:	e0bfab15 	stw	r2,-340(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   142e4:	e0bfa317 	ldw	r2,-372(fp)
   142e8:	10801804 	addi	r2,r2,96
   142ec:	1080000b 	ldhu	r2,0(r2)
   142f0:	10ffffcc 	andi	r3,r2,65535
   142f4:	18e0001c 	xori	r3,r3,32768
   142f8:	18e00004 	addi	r3,r3,-32768
   142fc:	e0bfa417 	ldw	r2,-368(fp)
   14300:	10803004 	addi	r2,r2,192
   14304:	10800017 	ldw	r2,0(r2)
   14308:	1809883a 	mov	r4,r3
   1430c:	100b883a 	mov	r5,r2
   14310:	002c1540 	call	2c154 <__mulsi3>
   14314:	e0bfac15 	stw	r2,-336(fp)

		tmp10 = tmp0 + tmp2;	/* phase 3 */
   14318:	e0ffa917 	ldw	r3,-348(fp)
   1431c:	e0bfab17 	ldw	r2,-340(fp)
   14320:	1885883a 	add	r2,r3,r2
   14324:	e0bfad15 	stw	r2,-332(fp)
		tmp11 = tmp0 - tmp2;
   14328:	e0ffa917 	ldw	r3,-348(fp)
   1432c:	e0bfab17 	ldw	r2,-340(fp)
   14330:	1885c83a 	sub	r2,r3,r2
   14334:	e0bfae15 	stw	r2,-328(fp)

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
   14338:	e0ffaa17 	ldw	r3,-344(fp)
   1433c:	e0bfac17 	ldw	r2,-336(fp)
   14340:	1885883a 	add	r2,r3,r2
   14344:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
   14348:	e0ffaa17 	ldw	r3,-344(fp)
   1434c:	e0bfac17 	ldw	r2,-336(fp)
   14350:	1885c83a 	sub	r2,r3,r2
   14354:	1009883a 	mov	r4,r2
   14358:	01405a84 	movi	r5,362
   1435c:	002c1540 	call	2c154 <__mulsi3>
   14360:	1007d23a 	srai	r3,r2,8
   14364:	e0bfaf17 	ldw	r2,-324(fp)
   14368:	1885c83a 	sub	r2,r3,r2
   1436c:	e0bfb015 	stw	r2,-320(fp)

		tmp0 = tmp10 + tmp13;	/* phase 2 */
   14370:	e0ffad17 	ldw	r3,-332(fp)
   14374:	e0bfaf17 	ldw	r2,-324(fp)
   14378:	1885883a 	add	r2,r3,r2
   1437c:	e0bfa915 	stw	r2,-348(fp)
		tmp3 = tmp10 - tmp13;
   14380:	e0ffad17 	ldw	r3,-332(fp)
   14384:	e0bfaf17 	ldw	r2,-324(fp)
   14388:	1885c83a 	sub	r2,r3,r2
   1438c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = tmp11 + tmp12;
   14390:	e0ffae17 	ldw	r3,-328(fp)
   14394:	e0bfb017 	ldw	r2,-320(fp)
   14398:	1885883a 	add	r2,r3,r2
   1439c:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = tmp11 - tmp12;
   143a0:	e0ffae17 	ldw	r3,-328(fp)
   143a4:	e0bfb017 	ldw	r2,-320(fp)
   143a8:	1885c83a 	sub	r2,r3,r2
   143ac:	e0bfab15 	stw	r2,-340(fp)

		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   143b0:	e0bfa317 	ldw	r2,-372(fp)
   143b4:	10800404 	addi	r2,r2,16
   143b8:	1080000b 	ldhu	r2,0(r2)
   143bc:	10ffffcc 	andi	r3,r2,65535
   143c0:	18e0001c 	xori	r3,r3,32768
   143c4:	18e00004 	addi	r3,r3,-32768
   143c8:	e0bfa417 	ldw	r2,-368(fp)
   143cc:	10800804 	addi	r2,r2,32
   143d0:	10800017 	ldw	r2,0(r2)
   143d4:	1809883a 	mov	r4,r3
   143d8:	100b883a 	mov	r5,r2
   143dc:	002c1540 	call	2c154 <__mulsi3>
   143e0:	e0bfb115 	stw	r2,-316(fp)
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   143e4:	e0bfa317 	ldw	r2,-372(fp)
   143e8:	10800c04 	addi	r2,r2,48
   143ec:	1080000b 	ldhu	r2,0(r2)
   143f0:	10ffffcc 	andi	r3,r2,65535
   143f4:	18e0001c 	xori	r3,r3,32768
   143f8:	18e00004 	addi	r3,r3,-32768
   143fc:	e0bfa417 	ldw	r2,-368(fp)
   14400:	10801804 	addi	r2,r2,96
   14404:	10800017 	ldw	r2,0(r2)
   14408:	1809883a 	mov	r4,r3
   1440c:	100b883a 	mov	r5,r2
   14410:	002c1540 	call	2c154 <__mulsi3>
   14414:	e0bfb215 	stw	r2,-312(fp)
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   14418:	e0bfa317 	ldw	r2,-372(fp)
   1441c:	10801404 	addi	r2,r2,80
   14420:	1080000b 	ldhu	r2,0(r2)
   14424:	10ffffcc 	andi	r3,r2,65535
   14428:	18e0001c 	xori	r3,r3,32768
   1442c:	18e00004 	addi	r3,r3,-32768
   14430:	e0bfa417 	ldw	r2,-368(fp)
   14434:	10802804 	addi	r2,r2,160
   14438:	10800017 	ldw	r2,0(r2)
   1443c:	1809883a 	mov	r4,r3
   14440:	100b883a 	mov	r5,r2
   14444:	002c1540 	call	2c154 <__mulsi3>
   14448:	e0bfb315 	stw	r2,-308(fp)
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1444c:	e0bfa317 	ldw	r2,-372(fp)
   14450:	10801c04 	addi	r2,r2,112
   14454:	1080000b 	ldhu	r2,0(r2)
   14458:	10ffffcc 	andi	r3,r2,65535
   1445c:	18e0001c 	xori	r3,r3,32768
   14460:	18e00004 	addi	r3,r3,-32768
   14464:	e0bfa417 	ldw	r2,-368(fp)
   14468:	10803804 	addi	r2,r2,224
   1446c:	10800017 	ldw	r2,0(r2)
   14470:	1809883a 	mov	r4,r3
   14474:	100b883a 	mov	r5,r2
   14478:	002c1540 	call	2c154 <__mulsi3>
   1447c:	e0bfb415 	stw	r2,-304(fp)

		z13 = tmp6 + tmp5;		/* phase 6 */
   14480:	e0ffb317 	ldw	r3,-308(fp)
   14484:	e0bfb217 	ldw	r2,-312(fp)
   14488:	1885883a 	add	r2,r3,r2
   1448c:	e0bfb515 	stw	r2,-300(fp)
		z10 = tmp6 - tmp5;
   14490:	e0ffb317 	ldw	r3,-308(fp)
   14494:	e0bfb217 	ldw	r2,-312(fp)
   14498:	1885c83a 	sub	r2,r3,r2
   1449c:	e0bfb615 	stw	r2,-296(fp)
		z11 = tmp4 + tmp7;
   144a0:	e0ffb117 	ldw	r3,-316(fp)
   144a4:	e0bfb417 	ldw	r2,-304(fp)
   144a8:	1885883a 	add	r2,r3,r2
   144ac:	e0bfb715 	stw	r2,-292(fp)
		z12 = tmp4 - tmp7;
   144b0:	e0ffb117 	ldw	r3,-316(fp)
   144b4:	e0bfb417 	ldw	r2,-304(fp)
   144b8:	1885c83a 	sub	r2,r3,r2
   144bc:	e0bfb815 	stw	r2,-288(fp)

		tmp7 = z11 + z13;		/* phase 5 */
   144c0:	e0ffb717 	ldw	r3,-292(fp)
   144c4:	e0bfb517 	ldw	r2,-300(fp)
   144c8:	1885883a 	add	r2,r3,r2
   144cc:	e0bfb415 	stw	r2,-304(fp)
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
   144d0:	e0ffb717 	ldw	r3,-292(fp)
   144d4:	e0bfb517 	ldw	r2,-300(fp)
   144d8:	1885c83a 	sub	r2,r3,r2
   144dc:	1009883a 	mov	r4,r2
   144e0:	01405a84 	movi	r5,362
   144e4:	002c1540 	call	2c154 <__mulsi3>
   144e8:	1005d23a 	srai	r2,r2,8
   144ec:	e0bfae15 	stw	r2,-328(fp)

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
   144f0:	e0ffb617 	ldw	r3,-296(fp)
   144f4:	e0bfb817 	ldw	r2,-288(fp)
   144f8:	1885883a 	add	r2,r3,r2
   144fc:	1009883a 	mov	r4,r2
   14500:	01407644 	movi	r5,473
   14504:	002c1540 	call	2c154 <__mulsi3>
   14508:	1005d23a 	srai	r2,r2,8
   1450c:	e0bfb915 	stw	r2,-284(fp)
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
   14510:	e13fb817 	ldw	r4,-288(fp)
   14514:	01404544 	movi	r5,277
   14518:	002c1540 	call	2c154 <__mulsi3>
   1451c:	1007d23a 	srai	r3,r2,8
   14520:	e0bfb917 	ldw	r2,-284(fp)
   14524:	1885c83a 	sub	r2,r3,r2
   14528:	e0bfad15 	stw	r2,-332(fp)
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
   1452c:	e13fb617 	ldw	r4,-296(fp)
   14530:	017f58c4 	movi	r5,-669
   14534:	002c1540 	call	2c154 <__mulsi3>
   14538:	1007d23a 	srai	r3,r2,8
   1453c:	e0bfb917 	ldw	r2,-284(fp)
   14540:	1885883a 	add	r2,r3,r2
   14544:	e0bfb015 	stw	r2,-320(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
   14548:	e0ffb017 	ldw	r3,-320(fp)
   1454c:	e0bfb417 	ldw	r2,-304(fp)
   14550:	1885c83a 	sub	r2,r3,r2
   14554:	e0bfb315 	stw	r2,-308(fp)
		tmp5 = tmp11 - tmp6;
   14558:	e0ffae17 	ldw	r3,-328(fp)
   1455c:	e0bfb317 	ldw	r2,-308(fp)
   14560:	1885c83a 	sub	r2,r3,r2
   14564:	e0bfb215 	stw	r2,-312(fp)
		tmp4 = tmp10 + tmp5;
   14568:	e0ffad17 	ldw	r3,-332(fp)
   1456c:	e0bfb217 	ldw	r2,-312(fp)
   14570:	1885883a 	add	r2,r3,r2
   14574:	e0bfb115 	stw	r2,-316(fp)

		wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
   14578:	e0ffa917 	ldw	r3,-348(fp)
   1457c:	e0bfb417 	ldw	r2,-304(fp)
   14580:	1887883a 	add	r3,r3,r2
   14584:	e0bfa517 	ldw	r2,-364(fp)
   14588:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
   1458c:	e0bfa517 	ldw	r2,-364(fp)
   14590:	10803804 	addi	r2,r2,224
   14594:	e13fa917 	ldw	r4,-348(fp)
   14598:	e0ffb417 	ldw	r3,-304(fp)
   1459c:	20c7c83a 	sub	r3,r4,r3
   145a0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
   145a4:	e0bfa517 	ldw	r2,-364(fp)
   145a8:	10800804 	addi	r2,r2,32
   145ac:	e13faa17 	ldw	r4,-344(fp)
   145b0:	e0ffb317 	ldw	r3,-308(fp)
   145b4:	20c7883a 	add	r3,r4,r3
   145b8:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
   145bc:	e0bfa517 	ldw	r2,-364(fp)
   145c0:	10803004 	addi	r2,r2,192
   145c4:	e13faa17 	ldw	r4,-344(fp)
   145c8:	e0ffb317 	ldw	r3,-308(fp)
   145cc:	20c7c83a 	sub	r3,r4,r3
   145d0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
   145d4:	e0bfa517 	ldw	r2,-364(fp)
   145d8:	10801004 	addi	r2,r2,64
   145dc:	e13fab17 	ldw	r4,-340(fp)
   145e0:	e0ffb217 	ldw	r3,-312(fp)
   145e4:	20c7883a 	add	r3,r4,r3
   145e8:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
   145ec:	e0bfa517 	ldw	r2,-364(fp)
   145f0:	10802804 	addi	r2,r2,160
   145f4:	e13fab17 	ldw	r4,-340(fp)
   145f8:	e0ffb217 	ldw	r3,-312(fp)
   145fc:	20c7c83a 	sub	r3,r4,r3
   14600:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
   14604:	e0bfa517 	ldw	r2,-364(fp)
   14608:	10802004 	addi	r2,r2,128
   1460c:	e13fac17 	ldw	r4,-336(fp)
   14610:	e0ffb117 	ldw	r3,-316(fp)
   14614:	20c7883a 	add	r3,r4,r3
   14618:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
   1461c:	e0bfa517 	ldw	r2,-364(fp)
   14620:	10801804 	addi	r2,r2,96
   14624:	e13fac17 	ldw	r4,-336(fp)
   14628:	e0ffb117 	ldw	r3,-316(fp)
   1462c:	20c7c83a 	sub	r3,r4,r3
   14630:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
   14634:	e0bfa317 	ldw	r2,-372(fp)
   14638:	10800084 	addi	r2,r2,2
   1463c:	e0bfa315 	stw	r2,-372(fp)
		quantptr++;
   14640:	e0bfa417 	ldw	r2,-368(fp)
   14644:	10800104 	addi	r2,r2,4
   14648:	e0bfa415 	stw	r2,-368(fp)
		wsptr++;
   1464c:	e0bfa517 	ldw	r2,-364(fp)
   14650:	10800104 	addi	r2,r2,4
   14654:	e0bfa515 	stw	r2,-364(fp)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   14658:	e0bfa617 	ldw	r2,-360(fp)
   1465c:	10bfffc4 	addi	r2,r2,-1
   14660:	e0bfa615 	stw	r2,-360(fp)
   14664:	e0bfa617 	ldw	r2,-360(fp)
   14668:	00be9416 	blt	zero,r2,140bc <jpeg_idct_ifast+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
   1466c:	e0bfbc04 	addi	r2,fp,-272
   14670:	e0bfa515 	stw	r2,-364(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   14674:	e03fa615 	stw	zero,-360(fp)
   14678:	00012f06 	br	14b38 <jpeg_idct_ifast+0xad4>
		outptr = output_buf[ctr] + output_col;
   1467c:	e0bfa617 	ldw	r2,-360(fp)
   14680:	1085883a 	add	r2,r2,r2
   14684:	1085883a 	add	r2,r2,r2
   14688:	e0ffff17 	ldw	r3,-4(fp)
   1468c:	1885883a 	add	r2,r3,r2
   14690:	10c00017 	ldw	r3,0(r2)
   14694:	e0800217 	ldw	r2,8(fp)
   14698:	1885883a 	add	r2,r3,r2
   1469c:	e0bfba15 	stw	r2,-280(fp)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
   146a0:	e0bfa517 	ldw	r2,-364(fp)
   146a4:	10800104 	addi	r2,r2,4
   146a8:	10800017 	ldw	r2,0(r2)
   146ac:	1000431e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
   146b0:	e0bfa517 	ldw	r2,-364(fp)
   146b4:	10800204 	addi	r2,r2,8
   146b8:	10800017 	ldw	r2,0(r2)
   146bc:	10003f1e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
   146c0:	e0bfa517 	ldw	r2,-364(fp)
   146c4:	10800304 	addi	r2,r2,12
   146c8:	10800017 	ldw	r2,0(r2)
   146cc:	10003b1e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
   146d0:	e0bfa517 	ldw	r2,-364(fp)
   146d4:	10800404 	addi	r2,r2,16
   146d8:	10800017 	ldw	r2,0(r2)
   146dc:	1000371e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
   146e0:	e0bfa517 	ldw	r2,-364(fp)
   146e4:	10800504 	addi	r2,r2,20
   146e8:	10800017 	ldw	r2,0(r2)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
   146ec:	1000331e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
   146f0:	e0bfa517 	ldw	r2,-364(fp)
   146f4:	10800604 	addi	r2,r2,24
   146f8:	10800017 	ldw	r2,0(r2)
   146fc:	10002f1e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
   14700:	e0bfa517 	ldw	r2,-364(fp)
   14704:	10800704 	addi	r2,r2,28
   14708:	10800017 	ldw	r2,0(r2)
   1470c:	10002b1e 	bne	r2,zero,147bc <jpeg_idct_ifast+0x758>
				/* AC terms all zero */
				JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
   14710:	e0bfa517 	ldw	r2,-364(fp)
   14714:	10800017 	ldw	r2,0(r2)
   14718:	1005d17a 	srai	r2,r2,5
   1471c:	1080ffcc 	andi	r2,r2,1023
   14720:	e0ffa717 	ldw	r3,-356(fp)
   14724:	1885883a 	add	r2,r3,r2
   14728:	10800003 	ldbu	r2,0(r2)
   1472c:	e0bfbb05 	stb	r2,-276(fp)
					& RANGE_MASK];

				outptr[0] = dcval;
   14730:	e0bfba17 	ldw	r2,-280(fp)
   14734:	e0ffbb03 	ldbu	r3,-276(fp)
   14738:	10c00005 	stb	r3,0(r2)
				outptr[1] = dcval;
   1473c:	e0bfba17 	ldw	r2,-280(fp)
   14740:	10800044 	addi	r2,r2,1
   14744:	e0ffbb03 	ldbu	r3,-276(fp)
   14748:	10c00005 	stb	r3,0(r2)
				outptr[2] = dcval;
   1474c:	e0bfba17 	ldw	r2,-280(fp)
   14750:	10800084 	addi	r2,r2,2
   14754:	e0ffbb03 	ldbu	r3,-276(fp)
   14758:	10c00005 	stb	r3,0(r2)
				outptr[3] = dcval;
   1475c:	e0bfba17 	ldw	r2,-280(fp)
   14760:	108000c4 	addi	r2,r2,3
   14764:	e0ffbb03 	ldbu	r3,-276(fp)
   14768:	10c00005 	stb	r3,0(r2)
				outptr[4] = dcval;
   1476c:	e0bfba17 	ldw	r2,-280(fp)
   14770:	10800104 	addi	r2,r2,4
   14774:	e0ffbb03 	ldbu	r3,-276(fp)
   14778:	10c00005 	stb	r3,0(r2)
				outptr[5] = dcval;
   1477c:	e0bfba17 	ldw	r2,-280(fp)
   14780:	10800144 	addi	r2,r2,5
   14784:	e0ffbb03 	ldbu	r3,-276(fp)
   14788:	10c00005 	stb	r3,0(r2)
				outptr[6] = dcval;
   1478c:	e0bfba17 	ldw	r2,-280(fp)
   14790:	10800184 	addi	r2,r2,6
   14794:	e0ffbb03 	ldbu	r3,-276(fp)
   14798:	10c00005 	stb	r3,0(r2)
				outptr[7] = dcval;
   1479c:	e0bfba17 	ldw	r2,-280(fp)
   147a0:	108001c4 	addi	r2,r2,7
   147a4:	e0ffbb03 	ldbu	r3,-276(fp)
   147a8:	10c00005 	stb	r3,0(r2)

				wsptr += DCTSIZE;		/* advance pointer to next row */
   147ac:	e0bfa517 	ldw	r2,-364(fp)
   147b0:	10800804 	addi	r2,r2,32
   147b4:	e0bfa515 	stw	r2,-364(fp)
				continue;
   147b8:	0000dc06 	br	14b2c <jpeg_idct_ifast+0xac8>
		}
#endif

		/* Even part */

		tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
   147bc:	e0bfa517 	ldw	r2,-364(fp)
   147c0:	10c00017 	ldw	r3,0(r2)
   147c4:	e0bfa517 	ldw	r2,-364(fp)
   147c8:	10800404 	addi	r2,r2,16
   147cc:	10800017 	ldw	r2,0(r2)
   147d0:	1885883a 	add	r2,r3,r2
   147d4:	e0bfad15 	stw	r2,-332(fp)
		tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
   147d8:	e0bfa517 	ldw	r2,-364(fp)
   147dc:	10c00017 	ldw	r3,0(r2)
   147e0:	e0bfa517 	ldw	r2,-364(fp)
   147e4:	10800404 	addi	r2,r2,16
   147e8:	10800017 	ldw	r2,0(r2)
   147ec:	1885c83a 	sub	r2,r3,r2
   147f0:	e0bfae15 	stw	r2,-328(fp)

		tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
   147f4:	e0bfa517 	ldw	r2,-364(fp)
   147f8:	10800204 	addi	r2,r2,8
   147fc:	10c00017 	ldw	r3,0(r2)
   14800:	e0bfa517 	ldw	r2,-364(fp)
   14804:	10800604 	addi	r2,r2,24
   14808:	10800017 	ldw	r2,0(r2)
   1480c:	1885883a 	add	r2,r3,r2
   14810:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
   14814:	e0bfa517 	ldw	r2,-364(fp)
   14818:	10800204 	addi	r2,r2,8
   1481c:	10c00017 	ldw	r3,0(r2)
   14820:	e0bfa517 	ldw	r2,-364(fp)
   14824:	10800604 	addi	r2,r2,24
   14828:	10800017 	ldw	r2,0(r2)
   1482c:	1885c83a 	sub	r2,r3,r2
   14830:	1009883a 	mov	r4,r2
   14834:	01405a84 	movi	r5,362
   14838:	002c1540 	call	2c154 <__mulsi3>
   1483c:	1007d23a 	srai	r3,r2,8
   14840:	e0bfaf17 	ldw	r2,-324(fp)
   14844:	1885c83a 	sub	r2,r3,r2
   14848:	e0bfb015 	stw	r2,-320(fp)
			- tmp13;

		tmp0 = tmp10 + tmp13;
   1484c:	e0ffad17 	ldw	r3,-332(fp)
   14850:	e0bfaf17 	ldw	r2,-324(fp)
   14854:	1885883a 	add	r2,r3,r2
   14858:	e0bfa915 	stw	r2,-348(fp)
		tmp3 = tmp10 - tmp13;
   1485c:	e0ffad17 	ldw	r3,-332(fp)
   14860:	e0bfaf17 	ldw	r2,-324(fp)
   14864:	1885c83a 	sub	r2,r3,r2
   14868:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = tmp11 + tmp12;
   1486c:	e0ffae17 	ldw	r3,-328(fp)
   14870:	e0bfb017 	ldw	r2,-320(fp)
   14874:	1885883a 	add	r2,r3,r2
   14878:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = tmp11 - tmp12;
   1487c:	e0ffae17 	ldw	r3,-328(fp)
   14880:	e0bfb017 	ldw	r2,-320(fp)
   14884:	1885c83a 	sub	r2,r3,r2
   14888:	e0bfab15 	stw	r2,-340(fp)

		/* Odd part */

		z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
   1488c:	e0bfa517 	ldw	r2,-364(fp)
   14890:	10800504 	addi	r2,r2,20
   14894:	10c00017 	ldw	r3,0(r2)
   14898:	e0bfa517 	ldw	r2,-364(fp)
   1489c:	10800304 	addi	r2,r2,12
   148a0:	10800017 	ldw	r2,0(r2)
   148a4:	1885883a 	add	r2,r3,r2
   148a8:	e0bfb515 	stw	r2,-300(fp)
		z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
   148ac:	e0bfa517 	ldw	r2,-364(fp)
   148b0:	10800504 	addi	r2,r2,20
   148b4:	10c00017 	ldw	r3,0(r2)
   148b8:	e0bfa517 	ldw	r2,-364(fp)
   148bc:	10800304 	addi	r2,r2,12
   148c0:	10800017 	ldw	r2,0(r2)
   148c4:	1885c83a 	sub	r2,r3,r2
   148c8:	e0bfb615 	stw	r2,-296(fp)
		z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
   148cc:	e0bfa517 	ldw	r2,-364(fp)
   148d0:	10800104 	addi	r2,r2,4
   148d4:	10c00017 	ldw	r3,0(r2)
   148d8:	e0bfa517 	ldw	r2,-364(fp)
   148dc:	10800704 	addi	r2,r2,28
   148e0:	10800017 	ldw	r2,0(r2)
   148e4:	1885883a 	add	r2,r3,r2
   148e8:	e0bfb715 	stw	r2,-292(fp)
		z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
   148ec:	e0bfa517 	ldw	r2,-364(fp)
   148f0:	10800104 	addi	r2,r2,4
   148f4:	10c00017 	ldw	r3,0(r2)
   148f8:	e0bfa517 	ldw	r2,-364(fp)
   148fc:	10800704 	addi	r2,r2,28
   14900:	10800017 	ldw	r2,0(r2)
   14904:	1885c83a 	sub	r2,r3,r2
   14908:	e0bfb815 	stw	r2,-288(fp)

		tmp7 = z11 + z13;		/* phase 5 */
   1490c:	e0ffb717 	ldw	r3,-292(fp)
   14910:	e0bfb517 	ldw	r2,-300(fp)
   14914:	1885883a 	add	r2,r3,r2
   14918:	e0bfb415 	stw	r2,-304(fp)
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
   1491c:	e0ffb717 	ldw	r3,-292(fp)
   14920:	e0bfb517 	ldw	r2,-300(fp)
   14924:	1885c83a 	sub	r2,r3,r2
   14928:	1009883a 	mov	r4,r2
   1492c:	01405a84 	movi	r5,362
   14930:	002c1540 	call	2c154 <__mulsi3>
   14934:	1005d23a 	srai	r2,r2,8
   14938:	e0bfae15 	stw	r2,-328(fp)

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
   1493c:	e0ffb617 	ldw	r3,-296(fp)
   14940:	e0bfb817 	ldw	r2,-288(fp)
   14944:	1885883a 	add	r2,r3,r2
   14948:	1009883a 	mov	r4,r2
   1494c:	01407644 	movi	r5,473
   14950:	002c1540 	call	2c154 <__mulsi3>
   14954:	1005d23a 	srai	r2,r2,8
   14958:	e0bfb915 	stw	r2,-284(fp)
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
   1495c:	e13fb817 	ldw	r4,-288(fp)
   14960:	01404544 	movi	r5,277
   14964:	002c1540 	call	2c154 <__mulsi3>
   14968:	1007d23a 	srai	r3,r2,8
   1496c:	e0bfb917 	ldw	r2,-284(fp)
   14970:	1885c83a 	sub	r2,r3,r2
   14974:	e0bfad15 	stw	r2,-332(fp)
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
   14978:	e13fb617 	ldw	r4,-296(fp)
   1497c:	017f58c4 	movi	r5,-669
   14980:	002c1540 	call	2c154 <__mulsi3>
   14984:	1007d23a 	srai	r3,r2,8
   14988:	e0bfb917 	ldw	r2,-284(fp)
   1498c:	1885883a 	add	r2,r3,r2
   14990:	e0bfb015 	stw	r2,-320(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
   14994:	e0ffb017 	ldw	r3,-320(fp)
   14998:	e0bfb417 	ldw	r2,-304(fp)
   1499c:	1885c83a 	sub	r2,r3,r2
   149a0:	e0bfb315 	stw	r2,-308(fp)
		tmp5 = tmp11 - tmp6;
   149a4:	e0ffae17 	ldw	r3,-328(fp)
   149a8:	e0bfb317 	ldw	r2,-308(fp)
   149ac:	1885c83a 	sub	r2,r3,r2
   149b0:	e0bfb215 	stw	r2,-312(fp)
		tmp4 = tmp10 + tmp5;
   149b4:	e0ffad17 	ldw	r3,-332(fp)
   149b8:	e0bfb217 	ldw	r2,-312(fp)
   149bc:	1885883a 	add	r2,r3,r2
   149c0:	e0bfb115 	stw	r2,-316(fp)

		/* Final output stage: scale down by a factor of 8 and range-limit */

		outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
   149c4:	e0ffa917 	ldw	r3,-348(fp)
   149c8:	e0bfb417 	ldw	r2,-304(fp)
   149cc:	1885883a 	add	r2,r3,r2
   149d0:	1005d17a 	srai	r2,r2,5
   149d4:	1080ffcc 	andi	r2,r2,1023
   149d8:	e0ffa717 	ldw	r3,-356(fp)
   149dc:	1885883a 	add	r2,r3,r2
   149e0:	10c00003 	ldbu	r3,0(r2)
   149e4:	e0bfba17 	ldw	r2,-280(fp)
   149e8:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
   149ec:	e0bfba17 	ldw	r2,-280(fp)
   149f0:	108001c4 	addi	r2,r2,7
   149f4:	e13fa917 	ldw	r4,-348(fp)
   149f8:	e0ffb417 	ldw	r3,-304(fp)
   149fc:	20c7c83a 	sub	r3,r4,r3
   14a00:	1807d17a 	srai	r3,r3,5
   14a04:	18c0ffcc 	andi	r3,r3,1023
   14a08:	e13fa717 	ldw	r4,-356(fp)
   14a0c:	20c7883a 	add	r3,r4,r3
   14a10:	18c00003 	ldbu	r3,0(r3)
   14a14:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
   14a18:	e0bfba17 	ldw	r2,-280(fp)
   14a1c:	10800044 	addi	r2,r2,1
   14a20:	e13faa17 	ldw	r4,-344(fp)
   14a24:	e0ffb317 	ldw	r3,-308(fp)
   14a28:	20c7883a 	add	r3,r4,r3
   14a2c:	1807d17a 	srai	r3,r3,5
   14a30:	18c0ffcc 	andi	r3,r3,1023
   14a34:	e13fa717 	ldw	r4,-356(fp)
   14a38:	20c7883a 	add	r3,r4,r3
   14a3c:	18c00003 	ldbu	r3,0(r3)
   14a40:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
   14a44:	e0bfba17 	ldw	r2,-280(fp)
   14a48:	10800184 	addi	r2,r2,6
   14a4c:	e13faa17 	ldw	r4,-344(fp)
   14a50:	e0ffb317 	ldw	r3,-308(fp)
   14a54:	20c7c83a 	sub	r3,r4,r3
   14a58:	1807d17a 	srai	r3,r3,5
   14a5c:	18c0ffcc 	andi	r3,r3,1023
   14a60:	e13fa717 	ldw	r4,-356(fp)
   14a64:	20c7883a 	add	r3,r4,r3
   14a68:	18c00003 	ldbu	r3,0(r3)
   14a6c:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
   14a70:	e0bfba17 	ldw	r2,-280(fp)
   14a74:	10800084 	addi	r2,r2,2
   14a78:	e13fab17 	ldw	r4,-340(fp)
   14a7c:	e0ffb217 	ldw	r3,-312(fp)
   14a80:	20c7883a 	add	r3,r4,r3
   14a84:	1807d17a 	srai	r3,r3,5
   14a88:	18c0ffcc 	andi	r3,r3,1023
   14a8c:	e13fa717 	ldw	r4,-356(fp)
   14a90:	20c7883a 	add	r3,r4,r3
   14a94:	18c00003 	ldbu	r3,0(r3)
   14a98:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
   14a9c:	e0bfba17 	ldw	r2,-280(fp)
   14aa0:	10800144 	addi	r2,r2,5
   14aa4:	e13fab17 	ldw	r4,-340(fp)
   14aa8:	e0ffb217 	ldw	r3,-312(fp)
   14aac:	20c7c83a 	sub	r3,r4,r3
   14ab0:	1807d17a 	srai	r3,r3,5
   14ab4:	18c0ffcc 	andi	r3,r3,1023
   14ab8:	e13fa717 	ldw	r4,-356(fp)
   14abc:	20c7883a 	add	r3,r4,r3
   14ac0:	18c00003 	ldbu	r3,0(r3)
   14ac4:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
   14ac8:	e0bfba17 	ldw	r2,-280(fp)
   14acc:	10800104 	addi	r2,r2,4
   14ad0:	e13fac17 	ldw	r4,-336(fp)
   14ad4:	e0ffb117 	ldw	r3,-316(fp)
   14ad8:	20c7883a 	add	r3,r4,r3
   14adc:	1807d17a 	srai	r3,r3,5
   14ae0:	18c0ffcc 	andi	r3,r3,1023
   14ae4:	e13fa717 	ldw	r4,-356(fp)
   14ae8:	20c7883a 	add	r3,r4,r3
   14aec:	18c00003 	ldbu	r3,0(r3)
   14af0:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
   14af4:	e0bfba17 	ldw	r2,-280(fp)
   14af8:	108000c4 	addi	r2,r2,3
   14afc:	e13fac17 	ldw	r4,-336(fp)
   14b00:	e0ffb117 	ldw	r3,-316(fp)
   14b04:	20c7c83a 	sub	r3,r4,r3
   14b08:	1807d17a 	srai	r3,r3,5
   14b0c:	18c0ffcc 	andi	r3,r3,1023
   14b10:	e13fa717 	ldw	r4,-356(fp)
   14b14:	20c7883a 	add	r3,r4,r3
   14b18:	18c00003 	ldbu	r3,0(r3)
   14b1c:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
   14b20:	e0bfa517 	ldw	r2,-364(fp)
   14b24:	10800804 	addi	r2,r2,32
   14b28:	e0bfa515 	stw	r2,-364(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   14b2c:	e0bfa617 	ldw	r2,-360(fp)
   14b30:	10800044 	addi	r2,r2,1
   14b34:	e0bfa615 	stw	r2,-360(fp)
   14b38:	e0bfa617 	ldw	r2,-360(fp)
   14b3c:	10800210 	cmplti	r2,r2,8
   14b40:	103ece1e 	bne	r2,zero,1467c <jpeg_idct_ifast+0x618>
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
   14b44:	e037883a 	mov	sp,fp
   14b48:	dfc00117 	ldw	ra,4(sp)
   14b4c:	df000017 	ldw	fp,0(sp)
   14b50:	dec00204 	addi	sp,sp,8
   14b54:	f800283a 	ret

00014b58 <jpeg_idct_islow>:

	GLOBAL(void)
	jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   14b58:	deffa704 	addi	sp,sp,-356
   14b5c:	dfc05815 	stw	ra,352(sp)
   14b60:	df005715 	stw	fp,348(sp)
   14b64:	df005704 	addi	fp,sp,348
   14b68:	e13ffc15 	stw	r4,-16(fp)
   14b6c:	e17ffd15 	stw	r5,-12(fp)
   14b70:	e1bffe15 	stw	r6,-8(fp)
   14b74:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   14b78:	e0bffc17 	ldw	r2,-16(fp)
   14b7c:	10804917 	ldw	r2,292(r2)
   14b80:	10802004 	addi	r2,r2,128
   14b84:	e0bfad15 	stw	r2,-332(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
   14b88:	e0bffe17 	ldw	r2,-8(fp)
   14b8c:	e0bfa915 	stw	r2,-348(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   14b90:	e0bffd17 	ldw	r2,-12(fp)
   14b94:	10801517 	ldw	r2,84(r2)
   14b98:	e0bfaa15 	stw	r2,-344(fp)
	wsptr = workspace;
   14b9c:	e0bfbc04 	addi	r2,fp,-272
   14ba0:	e0bfab15 	stw	r2,-340(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   14ba4:	00800204 	movi	r2,8
   14ba8:	e0bfac15 	stw	r2,-336(fp)
   14bac:	00019b06 	br	1521c <jpeg_idct_islow+0x6c4>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   14bb0:	e0bfa917 	ldw	r2,-348(fp)
   14bb4:	10800404 	addi	r2,r2,16
   14bb8:	1080000b 	ldhu	r2,0(r2)
   14bbc:	10bfffcc 	andi	r2,r2,65535
   14bc0:	10a0001c 	xori	r2,r2,32768
   14bc4:	10a00004 	addi	r2,r2,-32768
   14bc8:	1000601e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
   14bcc:	e0bfa917 	ldw	r2,-348(fp)
   14bd0:	10800804 	addi	r2,r2,32
   14bd4:	1080000b 	ldhu	r2,0(r2)
   14bd8:	10bfffcc 	andi	r2,r2,65535
   14bdc:	10a0001c 	xori	r2,r2,32768
   14be0:	10a00004 	addi	r2,r2,-32768
   14be4:	1000591e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   14be8:	e0bfa917 	ldw	r2,-348(fp)
   14bec:	10800c04 	addi	r2,r2,48
   14bf0:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   14bf4:	10bfffcc 	andi	r2,r2,65535
   14bf8:	10a0001c 	xori	r2,r2,32768
   14bfc:	10a00004 	addi	r2,r2,-32768
   14c00:	1000521e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   14c04:	e0bfa917 	ldw	r2,-348(fp)
   14c08:	10801004 	addi	r2,r2,64
   14c0c:	1080000b 	ldhu	r2,0(r2)
   14c10:	10bfffcc 	andi	r2,r2,65535
   14c14:	10a0001c 	xori	r2,r2,32768
   14c18:	10a00004 	addi	r2,r2,-32768
   14c1c:	10004b1e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   14c20:	e0bfa917 	ldw	r2,-348(fp)
   14c24:	10801404 	addi	r2,r2,80
   14c28:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   14c2c:	10bfffcc 	andi	r2,r2,65535
   14c30:	10a0001c 	xori	r2,r2,32768
   14c34:	10a00004 	addi	r2,r2,-32768
   14c38:	1000441e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   14c3c:	e0bfa917 	ldw	r2,-348(fp)
   14c40:	10801804 	addi	r2,r2,96
   14c44:	1080000b 	ldhu	r2,0(r2)
   14c48:	10bfffcc 	andi	r2,r2,65535
   14c4c:	10a0001c 	xori	r2,r2,32768
   14c50:	10a00004 	addi	r2,r2,-32768
   14c54:	10003d1e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*7] == 0) {
   14c58:	e0bfa917 	ldw	r2,-348(fp)
   14c5c:	10801c04 	addi	r2,r2,112
   14c60:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   14c64:	10bfffcc 	andi	r2,r2,65535
   14c68:	10a0001c 	xori	r2,r2,32768
   14c6c:	10a00004 	addi	r2,r2,-32768
   14c70:	1000361e 	bne	r2,zero,14d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
   14c74:	e0bfa917 	ldw	r2,-348(fp)
   14c78:	1080000b 	ldhu	r2,0(r2)
   14c7c:	10ffffcc 	andi	r3,r2,65535
   14c80:	18e0001c 	xori	r3,r3,32768
   14c84:	18e00004 	addi	r3,r3,-32768
   14c88:	e0bfaa17 	ldw	r2,-344(fp)
   14c8c:	10800017 	ldw	r2,0(r2)
   14c90:	1809883a 	mov	r4,r3
   14c94:	100b883a 	mov	r5,r2
   14c98:	002c1540 	call	2c154 <__mulsi3>
   14c9c:	1085883a 	add	r2,r2,r2
   14ca0:	1085883a 	add	r2,r2,r2
   14ca4:	e0bfae15 	stw	r2,-328(fp)

				wsptr[DCTSIZE*0] = dcval;
   14ca8:	e0bfab17 	ldw	r2,-340(fp)
   14cac:	e0ffae17 	ldw	r3,-328(fp)
   14cb0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
   14cb4:	e0bfab17 	ldw	r2,-340(fp)
   14cb8:	10800804 	addi	r2,r2,32
   14cbc:	e0ffae17 	ldw	r3,-328(fp)
   14cc0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
   14cc4:	e0bfab17 	ldw	r2,-340(fp)
   14cc8:	10801004 	addi	r2,r2,64
   14ccc:	e0ffae17 	ldw	r3,-328(fp)
   14cd0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
   14cd4:	e0bfab17 	ldw	r2,-340(fp)
   14cd8:	10801804 	addi	r2,r2,96
   14cdc:	e0ffae17 	ldw	r3,-328(fp)
   14ce0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
   14ce4:	e0bfab17 	ldw	r2,-340(fp)
   14ce8:	10802004 	addi	r2,r2,128
   14cec:	e0ffae17 	ldw	r3,-328(fp)
   14cf0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
   14cf4:	e0bfab17 	ldw	r2,-340(fp)
   14cf8:	10802804 	addi	r2,r2,160
   14cfc:	e0ffae17 	ldw	r3,-328(fp)
   14d00:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
   14d04:	e0bfab17 	ldw	r2,-340(fp)
   14d08:	10803004 	addi	r2,r2,192
   14d0c:	e0ffae17 	ldw	r3,-328(fp)
   14d10:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
   14d14:	e0bfab17 	ldw	r2,-340(fp)
   14d18:	10803804 	addi	r2,r2,224
   14d1c:	e0ffae17 	ldw	r3,-328(fp)
   14d20:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
   14d24:	e0bfa917 	ldw	r2,-348(fp)
   14d28:	10800084 	addi	r2,r2,2
   14d2c:	e0bfa915 	stw	r2,-348(fp)
				quantptr++;
   14d30:	e0bfaa17 	ldw	r2,-344(fp)
   14d34:	10800104 	addi	r2,r2,4
   14d38:	e0bfaa15 	stw	r2,-344(fp)
				wsptr++;
   14d3c:	e0bfab17 	ldw	r2,-340(fp)
   14d40:	10800104 	addi	r2,r2,4
   14d44:	e0bfab15 	stw	r2,-340(fp)
				continue;
   14d48:	00013106 	br	15210 <jpeg_idct_islow+0x6b8>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   14d4c:	e0bfa917 	ldw	r2,-348(fp)
   14d50:	10800804 	addi	r2,r2,32
   14d54:	1080000b 	ldhu	r2,0(r2)
   14d58:	10ffffcc 	andi	r3,r2,65535
   14d5c:	18e0001c 	xori	r3,r3,32768
   14d60:	18e00004 	addi	r3,r3,-32768
   14d64:	e0bfaa17 	ldw	r2,-344(fp)
   14d68:	10801004 	addi	r2,r2,64
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	1809883a 	mov	r4,r3
   14d74:	100b883a 	mov	r5,r2
   14d78:	002c1540 	call	2c154 <__mulsi3>
   14d7c:	e0bfaf15 	stw	r2,-324(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   14d80:	e0bfa917 	ldw	r2,-348(fp)
   14d84:	10801804 	addi	r2,r2,96
   14d88:	1080000b 	ldhu	r2,0(r2)
   14d8c:	10ffffcc 	andi	r3,r2,65535
   14d90:	18e0001c 	xori	r3,r3,32768
   14d94:	18e00004 	addi	r3,r3,-32768
   14d98:	e0bfaa17 	ldw	r2,-344(fp)
   14d9c:	10803004 	addi	r2,r2,192
   14da0:	10800017 	ldw	r2,0(r2)
   14da4:	1809883a 	mov	r4,r3
   14da8:	100b883a 	mov	r5,r2
   14dac:	002c1540 	call	2c154 <__mulsi3>
   14db0:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   14db4:	e0ffaf17 	ldw	r3,-324(fp)
   14db8:	e0bfb017 	ldw	r2,-320(fp)
   14dbc:	1885883a 	add	r2,r3,r2
   14dc0:	1009883a 	mov	r4,r2
   14dc4:	01445444 	movi	r5,4433
   14dc8:	002c1540 	call	2c154 <__mulsi3>
   14dcc:	e0bfb115 	stw	r2,-316(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   14dd0:	e13faf17 	ldw	r4,-324(fp)
   14dd4:	01461f84 	movi	r5,6270
   14dd8:	002c1540 	call	2c154 <__mulsi3>
   14ddc:	1007883a 	mov	r3,r2
   14de0:	e0bfb117 	ldw	r2,-316(fp)
   14de4:	1885883a 	add	r2,r3,r2
   14de8:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   14dec:	e13fb017 	ldw	r4,-320(fp)
   14df0:	017137c4 	movi	r5,-15137
   14df4:	002c1540 	call	2c154 <__mulsi3>
   14df8:	1007883a 	mov	r3,r2
   14dfc:	e0bfb117 	ldw	r2,-316(fp)
   14e00:	1885883a 	add	r2,r3,r2
   14e04:	e0bfb315 	stw	r2,-308(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   14e08:	e0bfa917 	ldw	r2,-348(fp)
   14e0c:	1080000b 	ldhu	r2,0(r2)
   14e10:	10ffffcc 	andi	r3,r2,65535
   14e14:	18e0001c 	xori	r3,r3,32768
   14e18:	18e00004 	addi	r3,r3,-32768
   14e1c:	e0bfaa17 	ldw	r2,-344(fp)
   14e20:	10800017 	ldw	r2,0(r2)
   14e24:	1809883a 	mov	r4,r3
   14e28:	100b883a 	mov	r5,r2
   14e2c:	002c1540 	call	2c154 <__mulsi3>
   14e30:	e0bfaf15 	stw	r2,-324(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   14e34:	e0bfa917 	ldw	r2,-348(fp)
   14e38:	10801004 	addi	r2,r2,64
   14e3c:	1080000b 	ldhu	r2,0(r2)
   14e40:	10ffffcc 	andi	r3,r2,65535
   14e44:	18e0001c 	xori	r3,r3,32768
   14e48:	18e00004 	addi	r3,r3,-32768
   14e4c:	e0bfaa17 	ldw	r2,-344(fp)
   14e50:	10802004 	addi	r2,r2,128
   14e54:	10800017 	ldw	r2,0(r2)
   14e58:	1809883a 	mov	r4,r3
   14e5c:	100b883a 	mov	r5,r2
   14e60:	002c1540 	call	2c154 <__mulsi3>
   14e64:	e0bfb015 	stw	r2,-320(fp)
		z2 <<= CONST_BITS;
   14e68:	e0bfaf17 	ldw	r2,-324(fp)
   14e6c:	1004937a 	slli	r2,r2,13
   14e70:	e0bfaf15 	stw	r2,-324(fp)
		z3 <<= CONST_BITS;
   14e74:	e0bfb017 	ldw	r2,-320(fp)
   14e78:	1004937a 	slli	r2,r2,13
   14e7c:	e0bfb015 	stw	r2,-320(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
   14e80:	e0bfaf17 	ldw	r2,-324(fp)
   14e84:	10810004 	addi	r2,r2,1024
   14e88:	e0bfaf15 	stw	r2,-324(fp)

		tmp0 = z2 + z3;
   14e8c:	e0ffaf17 	ldw	r3,-324(fp)
   14e90:	e0bfb017 	ldw	r2,-320(fp)
   14e94:	1885883a 	add	r2,r3,r2
   14e98:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = z2 - z3;
   14e9c:	e0ffaf17 	ldw	r3,-324(fp)
   14ea0:	e0bfb017 	ldw	r2,-320(fp)
   14ea4:	1885c83a 	sub	r2,r3,r2
   14ea8:	e0bfb515 	stw	r2,-300(fp)

		tmp10 = tmp0 + tmp2;
   14eac:	e0ffb417 	ldw	r3,-304(fp)
   14eb0:	e0bfb217 	ldw	r2,-312(fp)
   14eb4:	1885883a 	add	r2,r3,r2
   14eb8:	e0bfb615 	stw	r2,-296(fp)
		tmp13 = tmp0 - tmp2;
   14ebc:	e0ffb417 	ldw	r3,-304(fp)
   14ec0:	e0bfb217 	ldw	r2,-312(fp)
   14ec4:	1885c83a 	sub	r2,r3,r2
   14ec8:	e0bfb715 	stw	r2,-292(fp)
		tmp11 = tmp1 + tmp3;
   14ecc:	e0ffb517 	ldw	r3,-300(fp)
   14ed0:	e0bfb317 	ldw	r2,-308(fp)
   14ed4:	1885883a 	add	r2,r3,r2
   14ed8:	e0bfb815 	stw	r2,-288(fp)
		tmp12 = tmp1 - tmp3;
   14edc:	e0ffb517 	ldw	r3,-300(fp)
   14ee0:	e0bfb317 	ldw	r2,-308(fp)
   14ee4:	1885c83a 	sub	r2,r3,r2
   14ee8:	e0bfb915 	stw	r2,-284(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   14eec:	e0bfa917 	ldw	r2,-348(fp)
   14ef0:	10801c04 	addi	r2,r2,112
   14ef4:	1080000b 	ldhu	r2,0(r2)
   14ef8:	10ffffcc 	andi	r3,r2,65535
   14efc:	18e0001c 	xori	r3,r3,32768
   14f00:	18e00004 	addi	r3,r3,-32768
   14f04:	e0bfaa17 	ldw	r2,-344(fp)
   14f08:	10803804 	addi	r2,r2,224
   14f0c:	10800017 	ldw	r2,0(r2)
   14f10:	1809883a 	mov	r4,r3
   14f14:	100b883a 	mov	r5,r2
   14f18:	002c1540 	call	2c154 <__mulsi3>
   14f1c:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   14f20:	e0bfa917 	ldw	r2,-348(fp)
   14f24:	10801404 	addi	r2,r2,80
   14f28:	1080000b 	ldhu	r2,0(r2)
   14f2c:	10ffffcc 	andi	r3,r2,65535
   14f30:	18e0001c 	xori	r3,r3,32768
   14f34:	18e00004 	addi	r3,r3,-32768
   14f38:	e0bfaa17 	ldw	r2,-344(fp)
   14f3c:	10802804 	addi	r2,r2,160
   14f40:	10800017 	ldw	r2,0(r2)
   14f44:	1809883a 	mov	r4,r3
   14f48:	100b883a 	mov	r5,r2
   14f4c:	002c1540 	call	2c154 <__mulsi3>
   14f50:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   14f54:	e0bfa917 	ldw	r2,-348(fp)
   14f58:	10800c04 	addi	r2,r2,48
   14f5c:	1080000b 	ldhu	r2,0(r2)
   14f60:	10ffffcc 	andi	r3,r2,65535
   14f64:	18e0001c 	xori	r3,r3,32768
   14f68:	18e00004 	addi	r3,r3,-32768
   14f6c:	e0bfaa17 	ldw	r2,-344(fp)
   14f70:	10801804 	addi	r2,r2,96
   14f74:	10800017 	ldw	r2,0(r2)
   14f78:	1809883a 	mov	r4,r3
   14f7c:	100b883a 	mov	r5,r2
   14f80:	002c1540 	call	2c154 <__mulsi3>
   14f84:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   14f88:	e0bfa917 	ldw	r2,-348(fp)
   14f8c:	10800404 	addi	r2,r2,16
   14f90:	1080000b 	ldhu	r2,0(r2)
   14f94:	10ffffcc 	andi	r3,r2,65535
   14f98:	18e0001c 	xori	r3,r3,32768
   14f9c:	18e00004 	addi	r3,r3,-32768
   14fa0:	e0bfaa17 	ldw	r2,-344(fp)
   14fa4:	10800804 	addi	r2,r2,32
   14fa8:	10800017 	ldw	r2,0(r2)
   14fac:	1809883a 	mov	r4,r3
   14fb0:	100b883a 	mov	r5,r2
   14fb4:	002c1540 	call	2c154 <__mulsi3>
   14fb8:	e0bfb315 	stw	r2,-308(fp)

		z2 = tmp0 + tmp2;
   14fbc:	e0ffb417 	ldw	r3,-304(fp)
   14fc0:	e0bfb217 	ldw	r2,-312(fp)
   14fc4:	1885883a 	add	r2,r3,r2
   14fc8:	e0bfaf15 	stw	r2,-324(fp)
		z3 = tmp1 + tmp3;
   14fcc:	e0ffb517 	ldw	r3,-300(fp)
   14fd0:	e0bfb317 	ldw	r2,-308(fp)
   14fd4:	1885883a 	add	r2,r3,r2
   14fd8:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   14fdc:	e0ffaf17 	ldw	r3,-324(fp)
   14fe0:	e0bfb017 	ldw	r2,-320(fp)
   14fe4:	1885883a 	add	r2,r3,r2
   14fe8:	1009883a 	mov	r4,r2
   14fec:	01496844 	movi	r5,9633
   14ff0:	002c1540 	call	2c154 <__mulsi3>
   14ff4:	e0bfb115 	stw	r2,-316(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   14ff8:	e13faf17 	ldw	r4,-324(fp)
   14ffc:	01704ec4 	movi	r5,-16069
   15000:	002c1540 	call	2c154 <__mulsi3>
   15004:	e0bfaf15 	stw	r2,-324(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   15008:	e13fb017 	ldw	r4,-320(fp)
   1500c:	017ce104 	movi	r5,-3196
   15010:	002c1540 	call	2c154 <__mulsi3>
   15014:	e0bfb015 	stw	r2,-320(fp)
		z2 += z1;
   15018:	e0ffaf17 	ldw	r3,-324(fp)
   1501c:	e0bfb117 	ldw	r2,-316(fp)
   15020:	1885883a 	add	r2,r3,r2
   15024:	e0bfaf15 	stw	r2,-324(fp)
		z3 += z1;
   15028:	e0ffb017 	ldw	r3,-320(fp)
   1502c:	e0bfb117 	ldw	r2,-316(fp)
   15030:	1885883a 	add	r2,r3,r2
   15034:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   15038:	e0ffb417 	ldw	r3,-304(fp)
   1503c:	e0bfb317 	ldw	r2,-308(fp)
   15040:	1885883a 	add	r2,r3,r2
   15044:	1009883a 	mov	r4,r2
   15048:	0178ccc4 	movi	r5,-7373
   1504c:	002c1540 	call	2c154 <__mulsi3>
   15050:	e0bfb115 	stw	r2,-316(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   15054:	e13fb417 	ldw	r4,-304(fp)
   15058:	01426384 	movi	r5,2446
   1505c:	002c1540 	call	2c154 <__mulsi3>
   15060:	e0bfb415 	stw	r2,-304(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   15064:	e13fb317 	ldw	r4,-308(fp)
   15068:	014c02c4 	movi	r5,12299
   1506c:	002c1540 	call	2c154 <__mulsi3>
   15070:	e0bfb315 	stw	r2,-308(fp)
		tmp0 += z1 + z2;
   15074:	e0ffb117 	ldw	r3,-316(fp)
   15078:	e0bfaf17 	ldw	r2,-324(fp)
   1507c:	1885883a 	add	r2,r3,r2
   15080:	e0ffb417 	ldw	r3,-304(fp)
   15084:	1885883a 	add	r2,r3,r2
   15088:	e0bfb415 	stw	r2,-304(fp)
		tmp3 += z1 + z3;
   1508c:	e0ffb117 	ldw	r3,-316(fp)
   15090:	e0bfb017 	ldw	r2,-320(fp)
   15094:	1885883a 	add	r2,r3,r2
   15098:	e0ffb317 	ldw	r3,-308(fp)
   1509c:	1885883a 	add	r2,r3,r2
   150a0:	e0bfb315 	stw	r2,-308(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   150a4:	e0ffb517 	ldw	r3,-300(fp)
   150a8:	e0bfb217 	ldw	r2,-312(fp)
   150ac:	1885883a 	add	r2,r3,r2
   150b0:	1009883a 	mov	r4,r2
   150b4:	016b7f44 	movi	r5,-20995
   150b8:	002c1540 	call	2c154 <__mulsi3>
   150bc:	e0bfb115 	stw	r2,-316(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   150c0:	e13fb517 	ldw	r4,-300(fp)
   150c4:	01506cc4 	movi	r5,16819
   150c8:	002c1540 	call	2c154 <__mulsi3>
   150cc:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   150d0:	e13fb217 	ldw	r4,-312(fp)
   150d4:	01589504 	movi	r5,25172
   150d8:	002c1540 	call	2c154 <__mulsi3>
   150dc:	e0bfb215 	stw	r2,-312(fp)
		tmp1 += z1 + z3;
   150e0:	e0ffb117 	ldw	r3,-316(fp)
   150e4:	e0bfb017 	ldw	r2,-320(fp)
   150e8:	1885883a 	add	r2,r3,r2
   150ec:	e0ffb517 	ldw	r3,-300(fp)
   150f0:	1885883a 	add	r2,r3,r2
   150f4:	e0bfb515 	stw	r2,-300(fp)
		tmp2 += z1 + z2;
   150f8:	e0ffb117 	ldw	r3,-316(fp)
   150fc:	e0bfaf17 	ldw	r2,-324(fp)
   15100:	1885883a 	add	r2,r3,r2
   15104:	e0ffb217 	ldw	r3,-312(fp)
   15108:	1885883a 	add	r2,r3,r2
   1510c:	e0bfb215 	stw	r2,-312(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
   15110:	e0ffb617 	ldw	r3,-296(fp)
   15114:	e0bfb317 	ldw	r2,-308(fp)
   15118:	1885883a 	add	r2,r3,r2
   1511c:	1007d2fa 	srai	r3,r2,11
   15120:	e0bfab17 	ldw	r2,-340(fp)
   15124:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
   15128:	e0bfab17 	ldw	r2,-340(fp)
   1512c:	10803804 	addi	r2,r2,224
   15130:	e13fb617 	ldw	r4,-296(fp)
   15134:	e0ffb317 	ldw	r3,-308(fp)
   15138:	20c7c83a 	sub	r3,r4,r3
   1513c:	1807d2fa 	srai	r3,r3,11
   15140:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
   15144:	e0bfab17 	ldw	r2,-340(fp)
   15148:	10800804 	addi	r2,r2,32
   1514c:	e13fb817 	ldw	r4,-288(fp)
   15150:	e0ffb217 	ldw	r3,-312(fp)
   15154:	20c7883a 	add	r3,r4,r3
   15158:	1807d2fa 	srai	r3,r3,11
   1515c:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
   15160:	e0bfab17 	ldw	r2,-340(fp)
   15164:	10803004 	addi	r2,r2,192
   15168:	e13fb817 	ldw	r4,-288(fp)
   1516c:	e0ffb217 	ldw	r3,-312(fp)
   15170:	20c7c83a 	sub	r3,r4,r3
   15174:	1807d2fa 	srai	r3,r3,11
   15178:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
   1517c:	e0bfab17 	ldw	r2,-340(fp)
   15180:	10801004 	addi	r2,r2,64
   15184:	e13fb917 	ldw	r4,-284(fp)
   15188:	e0ffb517 	ldw	r3,-300(fp)
   1518c:	20c7883a 	add	r3,r4,r3
   15190:	1807d2fa 	srai	r3,r3,11
   15194:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
   15198:	e0bfab17 	ldw	r2,-340(fp)
   1519c:	10802804 	addi	r2,r2,160
   151a0:	e13fb917 	ldw	r4,-284(fp)
   151a4:	e0ffb517 	ldw	r3,-300(fp)
   151a8:	20c7c83a 	sub	r3,r4,r3
   151ac:	1807d2fa 	srai	r3,r3,11
   151b0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
   151b4:	e0bfab17 	ldw	r2,-340(fp)
   151b8:	10801804 	addi	r2,r2,96
   151bc:	e13fb717 	ldw	r4,-292(fp)
   151c0:	e0ffb417 	ldw	r3,-304(fp)
   151c4:	20c7883a 	add	r3,r4,r3
   151c8:	1807d2fa 	srai	r3,r3,11
   151cc:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
   151d0:	e0bfab17 	ldw	r2,-340(fp)
   151d4:	10802004 	addi	r2,r2,128
   151d8:	e13fb717 	ldw	r4,-292(fp)
   151dc:	e0ffb417 	ldw	r3,-304(fp)
   151e0:	20c7c83a 	sub	r3,r4,r3
   151e4:	1807d2fa 	srai	r3,r3,11
   151e8:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
   151ec:	e0bfa917 	ldw	r2,-348(fp)
   151f0:	10800084 	addi	r2,r2,2
   151f4:	e0bfa915 	stw	r2,-348(fp)
		quantptr++;
   151f8:	e0bfaa17 	ldw	r2,-344(fp)
   151fc:	10800104 	addi	r2,r2,4
   15200:	e0bfaa15 	stw	r2,-344(fp)
		wsptr++;
   15204:	e0bfab17 	ldw	r2,-340(fp)
   15208:	10800104 	addi	r2,r2,4
   1520c:	e0bfab15 	stw	r2,-340(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   15210:	e0bfac17 	ldw	r2,-336(fp)
   15214:	10bfffc4 	addi	r2,r2,-1
   15218:	e0bfac15 	stw	r2,-336(fp)
   1521c:	e0bfac17 	ldw	r2,-336(fp)
   15220:	00be6316 	blt	zero,r2,14bb0 <jpeg_idct_islow+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
   15224:	e0bfbc04 	addi	r2,fp,-272
   15228:	e0bfab15 	stw	r2,-340(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   1522c:	e03fac15 	stw	zero,-336(fp)
   15230:	00015206 	br	1577c <jpeg_idct_islow+0xc24>
		outptr = output_buf[ctr] + output_col;
   15234:	e0bfac17 	ldw	r2,-336(fp)
   15238:	1085883a 	add	r2,r2,r2
   1523c:	1085883a 	add	r2,r2,r2
   15240:	e0ffff17 	ldw	r3,-4(fp)
   15244:	1885883a 	add	r2,r3,r2
   15248:	10c00017 	ldw	r3,0(r2)
   1524c:	e0800217 	ldw	r2,8(fp)
   15250:	1885883a 	add	r2,r3,r2
   15254:	e0bfba15 	stw	r2,-280(fp)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
   15258:	e0bfab17 	ldw	r2,-340(fp)
   1525c:	10800104 	addi	r2,r2,4
   15260:	10800017 	ldw	r2,0(r2)
   15264:	1000441e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
   15268:	e0bfab17 	ldw	r2,-340(fp)
   1526c:	10800204 	addi	r2,r2,8
   15270:	10800017 	ldw	r2,0(r2)
   15274:	1000401e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
   15278:	e0bfab17 	ldw	r2,-340(fp)
   1527c:	10800304 	addi	r2,r2,12
   15280:	10800017 	ldw	r2,0(r2)
   15284:	10003c1e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
   15288:	e0bfab17 	ldw	r2,-340(fp)
   1528c:	10800404 	addi	r2,r2,16
   15290:	10800017 	ldw	r2,0(r2)
   15294:	1000381e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
   15298:	e0bfab17 	ldw	r2,-340(fp)
   1529c:	10800504 	addi	r2,r2,20
   152a0:	10800017 	ldw	r2,0(r2)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
   152a4:	1000341e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
   152a8:	e0bfab17 	ldw	r2,-340(fp)
   152ac:	10800604 	addi	r2,r2,24
   152b0:	10800017 	ldw	r2,0(r2)
   152b4:	1000301e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
   152b8:	e0bfab17 	ldw	r2,-340(fp)
   152bc:	10800704 	addi	r2,r2,28
   152c0:	10800017 	ldw	r2,0(r2)
   152c4:	10002c1e 	bne	r2,zero,15378 <jpeg_idct_islow+0x820>
				/* AC terms all zero */
				JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
   152c8:	e0bfab17 	ldw	r2,-340(fp)
   152cc:	10800017 	ldw	r2,0(r2)
   152d0:	10800404 	addi	r2,r2,16
   152d4:	1005d17a 	srai	r2,r2,5
   152d8:	1080ffcc 	andi	r2,r2,1023
   152dc:	e0ffad17 	ldw	r3,-332(fp)
   152e0:	1885883a 	add	r2,r3,r2
   152e4:	10800003 	ldbu	r2,0(r2)
   152e8:	e0bfbb05 	stb	r2,-276(fp)
					& RANGE_MASK];

				outptr[0] = dcval;
   152ec:	e0bfba17 	ldw	r2,-280(fp)
   152f0:	e0ffbb03 	ldbu	r3,-276(fp)
   152f4:	10c00005 	stb	r3,0(r2)
				outptr[1] = dcval;
   152f8:	e0bfba17 	ldw	r2,-280(fp)
   152fc:	10800044 	addi	r2,r2,1
   15300:	e0ffbb03 	ldbu	r3,-276(fp)
   15304:	10c00005 	stb	r3,0(r2)
				outptr[2] = dcval;
   15308:	e0bfba17 	ldw	r2,-280(fp)
   1530c:	10800084 	addi	r2,r2,2
   15310:	e0ffbb03 	ldbu	r3,-276(fp)
   15314:	10c00005 	stb	r3,0(r2)
				outptr[3] = dcval;
   15318:	e0bfba17 	ldw	r2,-280(fp)
   1531c:	108000c4 	addi	r2,r2,3
   15320:	e0ffbb03 	ldbu	r3,-276(fp)
   15324:	10c00005 	stb	r3,0(r2)
				outptr[4] = dcval;
   15328:	e0bfba17 	ldw	r2,-280(fp)
   1532c:	10800104 	addi	r2,r2,4
   15330:	e0ffbb03 	ldbu	r3,-276(fp)
   15334:	10c00005 	stb	r3,0(r2)
				outptr[5] = dcval;
   15338:	e0bfba17 	ldw	r2,-280(fp)
   1533c:	10800144 	addi	r2,r2,5
   15340:	e0ffbb03 	ldbu	r3,-276(fp)
   15344:	10c00005 	stb	r3,0(r2)
				outptr[6] = dcval;
   15348:	e0bfba17 	ldw	r2,-280(fp)
   1534c:	10800184 	addi	r2,r2,6
   15350:	e0ffbb03 	ldbu	r3,-276(fp)
   15354:	10c00005 	stb	r3,0(r2)
				outptr[7] = dcval;
   15358:	e0bfba17 	ldw	r2,-280(fp)
   1535c:	108001c4 	addi	r2,r2,7
   15360:	e0ffbb03 	ldbu	r3,-276(fp)
   15364:	10c00005 	stb	r3,0(r2)

				wsptr += DCTSIZE;		/* advance pointer to next row */
   15368:	e0bfab17 	ldw	r2,-340(fp)
   1536c:	10800804 	addi	r2,r2,32
   15370:	e0bfab15 	stw	r2,-340(fp)
				continue;
   15374:	0000fe06 	br	15770 <jpeg_idct_islow+0xc18>
#endif

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
   15378:	e0bfab17 	ldw	r2,-340(fp)
   1537c:	10800204 	addi	r2,r2,8
   15380:	10800017 	ldw	r2,0(r2)
   15384:	e0bfaf15 	stw	r2,-324(fp)
		z3 = (INT32) wsptr[6];
   15388:	e0bfab17 	ldw	r2,-340(fp)
   1538c:	10800604 	addi	r2,r2,24
   15390:	10800017 	ldw	r2,0(r2)
   15394:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   15398:	e0ffaf17 	ldw	r3,-324(fp)
   1539c:	e0bfb017 	ldw	r2,-320(fp)
   153a0:	1885883a 	add	r2,r3,r2
   153a4:	1009883a 	mov	r4,r2
   153a8:	01445444 	movi	r5,4433
   153ac:	002c1540 	call	2c154 <__mulsi3>
   153b0:	e0bfb115 	stw	r2,-316(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   153b4:	e13faf17 	ldw	r4,-324(fp)
   153b8:	01461f84 	movi	r5,6270
   153bc:	002c1540 	call	2c154 <__mulsi3>
   153c0:	1007883a 	mov	r3,r2
   153c4:	e0bfb117 	ldw	r2,-316(fp)
   153c8:	1885883a 	add	r2,r3,r2
   153cc:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   153d0:	e13fb017 	ldw	r4,-320(fp)
   153d4:	017137c4 	movi	r5,-15137
   153d8:	002c1540 	call	2c154 <__mulsi3>
   153dc:	1007883a 	mov	r3,r2
   153e0:	e0bfb117 	ldw	r2,-316(fp)
   153e4:	1885883a 	add	r2,r3,r2
   153e8:	e0bfb315 	stw	r2,-308(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   153ec:	e0bfab17 	ldw	r2,-340(fp)
   153f0:	10800017 	ldw	r2,0(r2)
   153f4:	10800404 	addi	r2,r2,16
   153f8:	e0bfaf15 	stw	r2,-324(fp)
		z3 = (INT32) wsptr[4];
   153fc:	e0bfab17 	ldw	r2,-340(fp)
   15400:	10800404 	addi	r2,r2,16
   15404:	10800017 	ldw	r2,0(r2)
   15408:	e0bfb015 	stw	r2,-320(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
   1540c:	e0ffaf17 	ldw	r3,-324(fp)
   15410:	e0bfb017 	ldw	r2,-320(fp)
   15414:	1885883a 	add	r2,r3,r2
   15418:	1004937a 	slli	r2,r2,13
   1541c:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
   15420:	e0ffaf17 	ldw	r3,-324(fp)
   15424:	e0bfb017 	ldw	r2,-320(fp)
   15428:	1885c83a 	sub	r2,r3,r2
   1542c:	1004937a 	slli	r2,r2,13
   15430:	e0bfb515 	stw	r2,-300(fp)

		tmp10 = tmp0 + tmp2;
   15434:	e0ffb417 	ldw	r3,-304(fp)
   15438:	e0bfb217 	ldw	r2,-312(fp)
   1543c:	1885883a 	add	r2,r3,r2
   15440:	e0bfb615 	stw	r2,-296(fp)
		tmp13 = tmp0 - tmp2;
   15444:	e0ffb417 	ldw	r3,-304(fp)
   15448:	e0bfb217 	ldw	r2,-312(fp)
   1544c:	1885c83a 	sub	r2,r3,r2
   15450:	e0bfb715 	stw	r2,-292(fp)
		tmp11 = tmp1 + tmp3;
   15454:	e0ffb517 	ldw	r3,-300(fp)
   15458:	e0bfb317 	ldw	r2,-308(fp)
   1545c:	1885883a 	add	r2,r3,r2
   15460:	e0bfb815 	stw	r2,-288(fp)
		tmp12 = tmp1 - tmp3;
   15464:	e0ffb517 	ldw	r3,-300(fp)
   15468:	e0bfb317 	ldw	r2,-308(fp)
   1546c:	1885c83a 	sub	r2,r3,r2
   15470:	e0bfb915 	stw	r2,-284(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
   15474:	e0bfab17 	ldw	r2,-340(fp)
   15478:	10800704 	addi	r2,r2,28
   1547c:	10800017 	ldw	r2,0(r2)
   15480:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = (INT32) wsptr[5];
   15484:	e0bfab17 	ldw	r2,-340(fp)
   15488:	10800504 	addi	r2,r2,20
   1548c:	10800017 	ldw	r2,0(r2)
   15490:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = (INT32) wsptr[3];
   15494:	e0bfab17 	ldw	r2,-340(fp)
   15498:	10800304 	addi	r2,r2,12
   1549c:	10800017 	ldw	r2,0(r2)
   154a0:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = (INT32) wsptr[1];
   154a4:	e0bfab17 	ldw	r2,-340(fp)
   154a8:	10800104 	addi	r2,r2,4
   154ac:	10800017 	ldw	r2,0(r2)
   154b0:	e0bfb315 	stw	r2,-308(fp)

		z2 = tmp0 + tmp2;
   154b4:	e0ffb417 	ldw	r3,-304(fp)
   154b8:	e0bfb217 	ldw	r2,-312(fp)
   154bc:	1885883a 	add	r2,r3,r2
   154c0:	e0bfaf15 	stw	r2,-324(fp)
		z3 = tmp1 + tmp3;
   154c4:	e0ffb517 	ldw	r3,-300(fp)
   154c8:	e0bfb317 	ldw	r2,-308(fp)
   154cc:	1885883a 	add	r2,r3,r2
   154d0:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   154d4:	e0ffaf17 	ldw	r3,-324(fp)
   154d8:	e0bfb017 	ldw	r2,-320(fp)
   154dc:	1885883a 	add	r2,r3,r2
   154e0:	1009883a 	mov	r4,r2
   154e4:	01496844 	movi	r5,9633
   154e8:	002c1540 	call	2c154 <__mulsi3>
   154ec:	e0bfb115 	stw	r2,-316(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   154f0:	e13faf17 	ldw	r4,-324(fp)
   154f4:	01704ec4 	movi	r5,-16069
   154f8:	002c1540 	call	2c154 <__mulsi3>
   154fc:	e0bfaf15 	stw	r2,-324(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   15500:	e13fb017 	ldw	r4,-320(fp)
   15504:	017ce104 	movi	r5,-3196
   15508:	002c1540 	call	2c154 <__mulsi3>
   1550c:	e0bfb015 	stw	r2,-320(fp)
		z2 += z1;
   15510:	e0ffaf17 	ldw	r3,-324(fp)
   15514:	e0bfb117 	ldw	r2,-316(fp)
   15518:	1885883a 	add	r2,r3,r2
   1551c:	e0bfaf15 	stw	r2,-324(fp)
		z3 += z1;
   15520:	e0ffb017 	ldw	r3,-320(fp)
   15524:	e0bfb117 	ldw	r2,-316(fp)
   15528:	1885883a 	add	r2,r3,r2
   1552c:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   15530:	e0ffb417 	ldw	r3,-304(fp)
   15534:	e0bfb317 	ldw	r2,-308(fp)
   15538:	1885883a 	add	r2,r3,r2
   1553c:	1009883a 	mov	r4,r2
   15540:	0178ccc4 	movi	r5,-7373
   15544:	002c1540 	call	2c154 <__mulsi3>
   15548:	e0bfb115 	stw	r2,-316(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   1554c:	e13fb417 	ldw	r4,-304(fp)
   15550:	01426384 	movi	r5,2446
   15554:	002c1540 	call	2c154 <__mulsi3>
   15558:	e0bfb415 	stw	r2,-304(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   1555c:	e13fb317 	ldw	r4,-308(fp)
   15560:	014c02c4 	movi	r5,12299
   15564:	002c1540 	call	2c154 <__mulsi3>
   15568:	e0bfb315 	stw	r2,-308(fp)
		tmp0 += z1 + z2;
   1556c:	e0ffb117 	ldw	r3,-316(fp)
   15570:	e0bfaf17 	ldw	r2,-324(fp)
   15574:	1885883a 	add	r2,r3,r2
   15578:	e0ffb417 	ldw	r3,-304(fp)
   1557c:	1885883a 	add	r2,r3,r2
   15580:	e0bfb415 	stw	r2,-304(fp)
		tmp3 += z1 + z3;
   15584:	e0ffb117 	ldw	r3,-316(fp)
   15588:	e0bfb017 	ldw	r2,-320(fp)
   1558c:	1885883a 	add	r2,r3,r2
   15590:	e0ffb317 	ldw	r3,-308(fp)
   15594:	1885883a 	add	r2,r3,r2
   15598:	e0bfb315 	stw	r2,-308(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   1559c:	e0ffb517 	ldw	r3,-300(fp)
   155a0:	e0bfb217 	ldw	r2,-312(fp)
   155a4:	1885883a 	add	r2,r3,r2
   155a8:	1009883a 	mov	r4,r2
   155ac:	016b7f44 	movi	r5,-20995
   155b0:	002c1540 	call	2c154 <__mulsi3>
   155b4:	e0bfb115 	stw	r2,-316(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   155b8:	e13fb517 	ldw	r4,-300(fp)
   155bc:	01506cc4 	movi	r5,16819
   155c0:	002c1540 	call	2c154 <__mulsi3>
   155c4:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   155c8:	e13fb217 	ldw	r4,-312(fp)
   155cc:	01589504 	movi	r5,25172
   155d0:	002c1540 	call	2c154 <__mulsi3>
   155d4:	e0bfb215 	stw	r2,-312(fp)
		tmp1 += z1 + z3;
   155d8:	e0ffb117 	ldw	r3,-316(fp)
   155dc:	e0bfb017 	ldw	r2,-320(fp)
   155e0:	1885883a 	add	r2,r3,r2
   155e4:	e0ffb517 	ldw	r3,-300(fp)
   155e8:	1885883a 	add	r2,r3,r2
   155ec:	e0bfb515 	stw	r2,-300(fp)
		tmp2 += z1 + z2;
   155f0:	e0ffb117 	ldw	r3,-316(fp)
   155f4:	e0bfaf17 	ldw	r2,-324(fp)
   155f8:	1885883a 	add	r2,r3,r2
   155fc:	e0ffb217 	ldw	r3,-312(fp)
   15600:	1885883a 	add	r2,r3,r2
   15604:	e0bfb215 	stw	r2,-312(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
   15608:	e0ffb617 	ldw	r3,-296(fp)
   1560c:	e0bfb317 	ldw	r2,-308(fp)
   15610:	1885883a 	add	r2,r3,r2
   15614:	1005d4ba 	srai	r2,r2,18
   15618:	1080ffcc 	andi	r2,r2,1023
   1561c:	e0ffad17 	ldw	r3,-332(fp)
   15620:	1885883a 	add	r2,r3,r2
   15624:	10c00003 	ldbu	r3,0(r2)
   15628:	e0bfba17 	ldw	r2,-280(fp)
   1562c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
   15630:	e0bfba17 	ldw	r2,-280(fp)
   15634:	108001c4 	addi	r2,r2,7
   15638:	e13fb617 	ldw	r4,-296(fp)
   1563c:	e0ffb317 	ldw	r3,-308(fp)
   15640:	20c7c83a 	sub	r3,r4,r3
   15644:	1807d4ba 	srai	r3,r3,18
   15648:	18c0ffcc 	andi	r3,r3,1023
   1564c:	e13fad17 	ldw	r4,-332(fp)
   15650:	20c7883a 	add	r3,r4,r3
   15654:	18c00003 	ldbu	r3,0(r3)
   15658:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
   1565c:	e0bfba17 	ldw	r2,-280(fp)
   15660:	10800044 	addi	r2,r2,1
   15664:	e13fb817 	ldw	r4,-288(fp)
   15668:	e0ffb217 	ldw	r3,-312(fp)
   1566c:	20c7883a 	add	r3,r4,r3
   15670:	1807d4ba 	srai	r3,r3,18
   15674:	18c0ffcc 	andi	r3,r3,1023
   15678:	e13fad17 	ldw	r4,-332(fp)
   1567c:	20c7883a 	add	r3,r4,r3
   15680:	18c00003 	ldbu	r3,0(r3)
   15684:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
   15688:	e0bfba17 	ldw	r2,-280(fp)
   1568c:	10800184 	addi	r2,r2,6
   15690:	e13fb817 	ldw	r4,-288(fp)
   15694:	e0ffb217 	ldw	r3,-312(fp)
   15698:	20c7c83a 	sub	r3,r4,r3
   1569c:	1807d4ba 	srai	r3,r3,18
   156a0:	18c0ffcc 	andi	r3,r3,1023
   156a4:	e13fad17 	ldw	r4,-332(fp)
   156a8:	20c7883a 	add	r3,r4,r3
   156ac:	18c00003 	ldbu	r3,0(r3)
   156b0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
   156b4:	e0bfba17 	ldw	r2,-280(fp)
   156b8:	10800084 	addi	r2,r2,2
   156bc:	e13fb917 	ldw	r4,-284(fp)
   156c0:	e0ffb517 	ldw	r3,-300(fp)
   156c4:	20c7883a 	add	r3,r4,r3
   156c8:	1807d4ba 	srai	r3,r3,18
   156cc:	18c0ffcc 	andi	r3,r3,1023
   156d0:	e13fad17 	ldw	r4,-332(fp)
   156d4:	20c7883a 	add	r3,r4,r3
   156d8:	18c00003 	ldbu	r3,0(r3)
   156dc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
   156e0:	e0bfba17 	ldw	r2,-280(fp)
   156e4:	10800144 	addi	r2,r2,5
   156e8:	e13fb917 	ldw	r4,-284(fp)
   156ec:	e0ffb517 	ldw	r3,-300(fp)
   156f0:	20c7c83a 	sub	r3,r4,r3
   156f4:	1807d4ba 	srai	r3,r3,18
   156f8:	18c0ffcc 	andi	r3,r3,1023
   156fc:	e13fad17 	ldw	r4,-332(fp)
   15700:	20c7883a 	add	r3,r4,r3
   15704:	18c00003 	ldbu	r3,0(r3)
   15708:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
   1570c:	e0bfba17 	ldw	r2,-280(fp)
   15710:	108000c4 	addi	r2,r2,3
   15714:	e13fb717 	ldw	r4,-292(fp)
   15718:	e0ffb417 	ldw	r3,-304(fp)
   1571c:	20c7883a 	add	r3,r4,r3
   15720:	1807d4ba 	srai	r3,r3,18
   15724:	18c0ffcc 	andi	r3,r3,1023
   15728:	e13fad17 	ldw	r4,-332(fp)
   1572c:	20c7883a 	add	r3,r4,r3
   15730:	18c00003 	ldbu	r3,0(r3)
   15734:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
   15738:	e0bfba17 	ldw	r2,-280(fp)
   1573c:	10800104 	addi	r2,r2,4
   15740:	e13fb717 	ldw	r4,-292(fp)
   15744:	e0ffb417 	ldw	r3,-304(fp)
   15748:	20c7c83a 	sub	r3,r4,r3
   1574c:	1807d4ba 	srai	r3,r3,18
   15750:	18c0ffcc 	andi	r3,r3,1023
   15754:	e13fad17 	ldw	r4,-332(fp)
   15758:	20c7883a 	add	r3,r4,r3
   1575c:	18c00003 	ldbu	r3,0(r3)
   15760:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
   15764:	e0bfab17 	ldw	r2,-340(fp)
   15768:	10800804 	addi	r2,r2,32
   1576c:	e0bfab15 	stw	r2,-340(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
   15770:	e0bfac17 	ldw	r2,-336(fp)
   15774:	10800044 	addi	r2,r2,1
   15778:	e0bfac15 	stw	r2,-336(fp)
   1577c:	e0bfac17 	ldw	r2,-336(fp)
   15780:	10800210 	cmplti	r2,r2,8
   15784:	103eab1e 	bne	r2,zero,15234 <jpeg_idct_islow+0x6dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
   15788:	e037883a 	mov	sp,fp
   1578c:	dfc00117 	ldw	ra,4(sp)
   15790:	df000017 	ldw	fp,0(sp)
   15794:	dec00204 	addi	sp,sp,8
   15798:	f800283a 	ret

0001579c <jpeg_idct_7x7>:

GLOBAL(void)
	jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1579c:	deffb804 	addi	sp,sp,-288
   157a0:	dfc04715 	stw	ra,284(sp)
   157a4:	df004615 	stw	fp,280(sp)
   157a8:	dc004515 	stw	r16,276(sp)
   157ac:	df004504 	addi	fp,sp,276
   157b0:	e13ffc15 	stw	r4,-16(fp)
   157b4:	e17ffd15 	stw	r5,-12(fp)
   157b8:	e1bffe15 	stw	r6,-8(fp)
   157bc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   157c0:	e0bffc17 	ldw	r2,-16(fp)
   157c4:	10804917 	ldw	r2,292(r2)
   157c8:	10802004 	addi	r2,r2,128
   157cc:	e0bfbf15 	stw	r2,-260(fp)
	int workspace[7*7];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   157d0:	e0bffe17 	ldw	r2,-8(fp)
   157d4:	e0bfbb15 	stw	r2,-276(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   157d8:	e0bffd17 	ldw	r2,-12(fp)
   157dc:	10801517 	ldw	r2,84(r2)
   157e0:	e0bfbc15 	stw	r2,-272(fp)
	wsptr = workspace;
   157e4:	e0bfcb04 	addi	r2,fp,-212
   157e8:	e0bfbd15 	stw	r2,-268(fp)
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
   157ec:	e03fbe15 	stw	zero,-264(fp)
   157f0:	00010d06 	br	15c28 <jpeg_idct_7x7+0x48c>
		/* Even part */

		tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   157f4:	e0bfbb17 	ldw	r2,-276(fp)
   157f8:	1080000b 	ldhu	r2,0(r2)
   157fc:	10ffffcc 	andi	r3,r2,65535
   15800:	18e0001c 	xori	r3,r3,32768
   15804:	18e00004 	addi	r3,r3,-32768
   15808:	e0bfbc17 	ldw	r2,-272(fp)
   1580c:	10800017 	ldw	r2,0(r2)
   15810:	1809883a 	mov	r4,r3
   15814:	100b883a 	mov	r5,r2
   15818:	002c1540 	call	2c154 <__mulsi3>
   1581c:	e0bfc015 	stw	r2,-256(fp)
		tmp13 <<= CONST_BITS;
   15820:	e0bfc017 	ldw	r2,-256(fp)
   15824:	1004937a 	slli	r2,r2,13
   15828:	e0bfc015 	stw	r2,-256(fp)
		/* Add fudge factor here for final descale. */
		tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
   1582c:	e0bfc017 	ldw	r2,-256(fp)
   15830:	10810004 	addi	r2,r2,1024
   15834:	e0bfc015 	stw	r2,-256(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   15838:	e0bfbb17 	ldw	r2,-276(fp)
   1583c:	10800804 	addi	r2,r2,32
   15840:	1080000b 	ldhu	r2,0(r2)
   15844:	10ffffcc 	andi	r3,r2,65535
   15848:	18e0001c 	xori	r3,r3,32768
   1584c:	18e00004 	addi	r3,r3,-32768
   15850:	e0bfbc17 	ldw	r2,-272(fp)
   15854:	10801004 	addi	r2,r2,64
   15858:	10800017 	ldw	r2,0(r2)
   1585c:	1809883a 	mov	r4,r3
   15860:	100b883a 	mov	r5,r2
   15864:	002c1540 	call	2c154 <__mulsi3>
   15868:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1586c:	e0bfbb17 	ldw	r2,-276(fp)
   15870:	10801004 	addi	r2,r2,64
   15874:	1080000b 	ldhu	r2,0(r2)
   15878:	10ffffcc 	andi	r3,r2,65535
   1587c:	18e0001c 	xori	r3,r3,32768
   15880:	18e00004 	addi	r3,r3,-32768
   15884:	e0bfbc17 	ldw	r2,-272(fp)
   15888:	10802004 	addi	r2,r2,128
   1588c:	10800017 	ldw	r2,0(r2)
   15890:	1809883a 	mov	r4,r3
   15894:	100b883a 	mov	r5,r2
   15898:	002c1540 	call	2c154 <__mulsi3>
   1589c:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   158a0:	e0bfbb17 	ldw	r2,-276(fp)
   158a4:	10801804 	addi	r2,r2,96
   158a8:	1080000b 	ldhu	r2,0(r2)
   158ac:	10ffffcc 	andi	r3,r2,65535
   158b0:	18e0001c 	xori	r3,r3,32768
   158b4:	18e00004 	addi	r3,r3,-32768
   158b8:	e0bfbc17 	ldw	r2,-272(fp)
   158bc:	10803004 	addi	r2,r2,192
   158c0:	10800017 	ldw	r2,0(r2)
   158c4:	1809883a 	mov	r4,r3
   158c8:	100b883a 	mov	r5,r2
   158cc:	002c1540 	call	2c154 <__mulsi3>
   158d0:	e0bfc315 	stw	r2,-244(fp)

		tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
   158d4:	e0ffc217 	ldw	r3,-248(fp)
   158d8:	e0bfc317 	ldw	r2,-244(fp)
   158dc:	1885c83a 	sub	r2,r3,r2
   158e0:	1009883a 	mov	r4,r2
   158e4:	01470dc4 	movi	r5,7223
   158e8:	002c1540 	call	2c154 <__mulsi3>
   158ec:	e0bfc415 	stw	r2,-240(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
   158f0:	e0ffc117 	ldw	r3,-252(fp)
   158f4:	e0bfc217 	ldw	r2,-248(fp)
   158f8:	1885c83a 	sub	r2,r3,r2
   158fc:	1009883a 	mov	r4,r2
   15900:	01428484 	movi	r5,2578
   15904:	002c1540 	call	2c154 <__mulsi3>
   15908:	e0bfc515 	stw	r2,-236(fp)
		tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
   1590c:	e0ffc417 	ldw	r3,-240(fp)
   15910:	e0bfc517 	ldw	r2,-236(fp)
   15914:	1887883a 	add	r3,r3,r2
   15918:	e0bfc017 	ldw	r2,-256(fp)
   1591c:	18a1883a 	add	r16,r3,r2
   15920:	e13fc217 	ldw	r4,-248(fp)
   15924:	01714544 	movi	r5,-15083
   15928:	002c1540 	call	2c154 <__mulsi3>
   1592c:	8085883a 	add	r2,r16,r2
   15930:	e0bfc615 	stw	r2,-232(fp)
		tmp0 = z1 + z3;
   15934:	e0ffc117 	ldw	r3,-252(fp)
   15938:	e0bfc317 	ldw	r2,-244(fp)
   1593c:	1885883a 	add	r2,r3,r2
   15940:	e0bfc715 	stw	r2,-228(fp)
		z2 -= tmp0;
   15944:	e0ffc217 	ldw	r3,-248(fp)
   15948:	e0bfc717 	ldw	r2,-228(fp)
   1594c:	1885c83a 	sub	r2,r3,r2
   15950:	e0bfc215 	stw	r2,-248(fp)
		tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
   15954:	e13fc717 	ldw	r4,-228(fp)
   15958:	014a3184 	movi	r5,10438
   1595c:	002c1540 	call	2c154 <__mulsi3>
   15960:	1007883a 	mov	r3,r2
   15964:	e0bfc017 	ldw	r2,-256(fp)
   15968:	1885883a 	add	r2,r3,r2
   1596c:	e0bfc715 	stw	r2,-228(fp)
		tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
   15970:	e13fc317 	ldw	r4,-244(fp)
   15974:	017f60c4 	movi	r5,-637
   15978:	002c1540 	call	2c154 <__mulsi3>
   1597c:	1007883a 	mov	r3,r2
   15980:	e0bfc717 	ldw	r2,-228(fp)
   15984:	1885883a 	add	r2,r3,r2
   15988:	e0ffc417 	ldw	r3,-240(fp)
   1598c:	1885883a 	add	r2,r3,r2
   15990:	e0bfc415 	stw	r2,-240(fp)
		tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
   15994:	e13fc117 	ldw	r4,-252(fp)
   15998:	016c3c44 	movi	r5,-20239
   1599c:	002c1540 	call	2c154 <__mulsi3>
   159a0:	1007883a 	mov	r3,r2
   159a4:	e0bfc717 	ldw	r2,-228(fp)
   159a8:	1885883a 	add	r2,r3,r2
   159ac:	e0ffc517 	ldw	r3,-236(fp)
   159b0:	1885883a 	add	r2,r3,r2
   159b4:	e0bfc515 	stw	r2,-236(fp)
		tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
   159b8:	e13fc217 	ldw	r4,-248(fp)
   159bc:	014b5044 	movi	r5,11585
   159c0:	002c1540 	call	2c154 <__mulsi3>
   159c4:	e0ffc017 	ldw	r3,-256(fp)
   159c8:	1885883a 	add	r2,r3,r2
   159cc:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   159d0:	e0bfbb17 	ldw	r2,-276(fp)
   159d4:	10800404 	addi	r2,r2,16
   159d8:	1080000b 	ldhu	r2,0(r2)
   159dc:	10ffffcc 	andi	r3,r2,65535
   159e0:	18e0001c 	xori	r3,r3,32768
   159e4:	18e00004 	addi	r3,r3,-32768
   159e8:	e0bfbc17 	ldw	r2,-272(fp)
   159ec:	10800804 	addi	r2,r2,32
   159f0:	10800017 	ldw	r2,0(r2)
   159f4:	1809883a 	mov	r4,r3
   159f8:	100b883a 	mov	r5,r2
   159fc:	002c1540 	call	2c154 <__mulsi3>
   15a00:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   15a04:	e0bfbb17 	ldw	r2,-276(fp)
   15a08:	10800c04 	addi	r2,r2,48
   15a0c:	1080000b 	ldhu	r2,0(r2)
   15a10:	10ffffcc 	andi	r3,r2,65535
   15a14:	18e0001c 	xori	r3,r3,32768
   15a18:	18e00004 	addi	r3,r3,-32768
   15a1c:	e0bfbc17 	ldw	r2,-272(fp)
   15a20:	10801804 	addi	r2,r2,96
   15a24:	10800017 	ldw	r2,0(r2)
   15a28:	1809883a 	mov	r4,r3
   15a2c:	100b883a 	mov	r5,r2
   15a30:	002c1540 	call	2c154 <__mulsi3>
   15a34:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   15a38:	e0bfbb17 	ldw	r2,-276(fp)
   15a3c:	10801404 	addi	r2,r2,80
   15a40:	1080000b 	ldhu	r2,0(r2)
   15a44:	10ffffcc 	andi	r3,r2,65535
   15a48:	18e0001c 	xori	r3,r3,32768
   15a4c:	18e00004 	addi	r3,r3,-32768
   15a50:	e0bfbc17 	ldw	r2,-272(fp)
   15a54:	10802804 	addi	r2,r2,160
   15a58:	10800017 	ldw	r2,0(r2)
   15a5c:	1809883a 	mov	r4,r3
   15a60:	100b883a 	mov	r5,r2
   15a64:	002c1540 	call	2c154 <__mulsi3>
   15a68:	e0bfc315 	stw	r2,-244(fp)

		tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
   15a6c:	e0ffc117 	ldw	r3,-252(fp)
   15a70:	e0bfc217 	ldw	r2,-248(fp)
   15a74:	1885883a 	add	r2,r3,r2
   15a78:	1009883a 	mov	r4,r2
   15a7c:	01477bc4 	movi	r5,7663
   15a80:	002c1540 	call	2c154 <__mulsi3>
   15a84:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
   15a88:	e0ffc117 	ldw	r3,-252(fp)
   15a8c:	e0bfc217 	ldw	r2,-248(fp)
   15a90:	1885c83a 	sub	r2,r3,r2
   15a94:	1009883a 	mov	r4,r2
   15a98:	01415cc4 	movi	r5,1395
   15a9c:	002c1540 	call	2c154 <__mulsi3>
   15aa0:	e0bfc915 	stw	r2,-220(fp)
		tmp0 = tmp1 - tmp2;
   15aa4:	e0ffc817 	ldw	r3,-224(fp)
   15aa8:	e0bfc917 	ldw	r2,-220(fp)
   15aac:	1885c83a 	sub	r2,r3,r2
   15ab0:	e0bfc715 	stw	r2,-228(fp)
		tmp1 += tmp2;
   15ab4:	e0ffc817 	ldw	r3,-224(fp)
   15ab8:	e0bfc917 	ldw	r2,-220(fp)
   15abc:	1885883a 	add	r2,r3,r2
   15ac0:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
   15ac4:	e0ffc217 	ldw	r3,-248(fp)
   15ac8:	e0bfc317 	ldw	r2,-244(fp)
   15acc:	1885883a 	add	r2,r3,r2
   15ad0:	1009883a 	mov	r4,r2
   15ad4:	0174f844 	movi	r5,-11295
   15ad8:	002c1540 	call	2c154 <__mulsi3>
   15adc:	e0bfc915 	stw	r2,-220(fp)
		tmp1 += tmp2;
   15ae0:	e0ffc817 	ldw	r3,-224(fp)
   15ae4:	e0bfc917 	ldw	r2,-220(fp)
   15ae8:	1885883a 	add	r2,r3,r2
   15aec:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
   15af0:	e0ffc117 	ldw	r3,-252(fp)
   15af4:	e0bfc317 	ldw	r2,-244(fp)
   15af8:	1885883a 	add	r2,r3,r2
   15afc:	1009883a 	mov	r4,r2
   15b00:	0144e8c4 	movi	r5,5027
   15b04:	002c1540 	call	2c154 <__mulsi3>
   15b08:	e0bfc215 	stw	r2,-248(fp)
		tmp0 += z2;
   15b0c:	e0ffc717 	ldw	r3,-228(fp)
   15b10:	e0bfc217 	ldw	r2,-248(fp)
   15b14:	1885883a 	add	r2,r3,r2
   15b18:	e0bfc715 	stw	r2,-228(fp)
		tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
   15b1c:	e13fc317 	ldw	r4,-244(fp)
   15b20:	014ef784 	movi	r5,15326
   15b24:	002c1540 	call	2c154 <__mulsi3>
   15b28:	1007883a 	mov	r3,r2
   15b2c:	e0bfc217 	ldw	r2,-248(fp)
   15b30:	1885883a 	add	r2,r3,r2
   15b34:	e0ffc917 	ldw	r3,-220(fp)
   15b38:	1885883a 	add	r2,r3,r2
   15b3c:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   15b40:	e0ffc417 	ldw	r3,-240(fp)
   15b44:	e0bfc717 	ldw	r2,-228(fp)
   15b48:	1885883a 	add	r2,r3,r2
   15b4c:	1007d2fa 	srai	r3,r2,11
   15b50:	e0bfbd17 	ldw	r2,-268(fp)
   15b54:	10c00015 	stw	r3,0(r2)
		wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   15b58:	e0bfbd17 	ldw	r2,-268(fp)
   15b5c:	10802a04 	addi	r2,r2,168
   15b60:	e13fc417 	ldw	r4,-240(fp)
   15b64:	e0ffc717 	ldw	r3,-228(fp)
   15b68:	20c7c83a 	sub	r3,r4,r3
   15b6c:	1807d2fa 	srai	r3,r3,11
   15b70:	10c00015 	stw	r3,0(r2)
		wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
   15b74:	e0bfbd17 	ldw	r2,-268(fp)
   15b78:	10800704 	addi	r2,r2,28
   15b7c:	e13fc617 	ldw	r4,-232(fp)
   15b80:	e0ffc817 	ldw	r3,-224(fp)
   15b84:	20c7883a 	add	r3,r4,r3
   15b88:	1807d2fa 	srai	r3,r3,11
   15b8c:	10c00015 	stw	r3,0(r2)
		wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
   15b90:	e0bfbd17 	ldw	r2,-268(fp)
   15b94:	10802304 	addi	r2,r2,140
   15b98:	e13fc617 	ldw	r4,-232(fp)
   15b9c:	e0ffc817 	ldw	r3,-224(fp)
   15ba0:	20c7c83a 	sub	r3,r4,r3
   15ba4:	1807d2fa 	srai	r3,r3,11
   15ba8:	10c00015 	stw	r3,0(r2)
		wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
   15bac:	e0bfbd17 	ldw	r2,-268(fp)
   15bb0:	10800e04 	addi	r2,r2,56
   15bb4:	e13fc517 	ldw	r4,-236(fp)
   15bb8:	e0ffc917 	ldw	r3,-220(fp)
   15bbc:	20c7883a 	add	r3,r4,r3
   15bc0:	1807d2fa 	srai	r3,r3,11
   15bc4:	10c00015 	stw	r3,0(r2)
		wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
   15bc8:	e0bfbd17 	ldw	r2,-268(fp)
   15bcc:	10801c04 	addi	r2,r2,112
   15bd0:	e13fc517 	ldw	r4,-236(fp)
   15bd4:	e0ffc917 	ldw	r3,-220(fp)
   15bd8:	20c7c83a 	sub	r3,r4,r3
   15bdc:	1807d2fa 	srai	r3,r3,11
   15be0:	10c00015 	stw	r3,0(r2)
		wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
   15be4:	e0bfbd17 	ldw	r2,-268(fp)
   15be8:	10801504 	addi	r2,r2,84
   15bec:	e0ffc017 	ldw	r3,-256(fp)
   15bf0:	1807d2fa 	srai	r3,r3,11
   15bf4:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
   15bf8:	e0bfbe17 	ldw	r2,-264(fp)
   15bfc:	10800044 	addi	r2,r2,1
   15c00:	e0bfbe15 	stw	r2,-264(fp)
   15c04:	e0bfbb17 	ldw	r2,-276(fp)
   15c08:	10800084 	addi	r2,r2,2
   15c0c:	e0bfbb15 	stw	r2,-276(fp)
   15c10:	e0bfbc17 	ldw	r2,-272(fp)
   15c14:	10800104 	addi	r2,r2,4
   15c18:	e0bfbc15 	stw	r2,-272(fp)
   15c1c:	e0bfbd17 	ldw	r2,-268(fp)
   15c20:	10800104 	addi	r2,r2,4
   15c24:	e0bfbd15 	stw	r2,-268(fp)
   15c28:	e0bfbe17 	ldw	r2,-264(fp)
   15c2c:	108001d0 	cmplti	r2,r2,7
   15c30:	103ef01e 	bne	r2,zero,157f4 <jpeg_idct_7x7+0x58>
		wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 7 rows from work array, store into output array. */

	wsptr = workspace;
   15c34:	e0bfcb04 	addi	r2,fp,-212
   15c38:	e0bfbd15 	stw	r2,-268(fp)
	for (ctr = 0; ctr < 7; ctr++) {
   15c3c:	e03fbe15 	stw	zero,-264(fp)
   15c40:	0000ec06 	br	15ff4 <jpeg_idct_7x7+0x858>
		outptr = output_buf[ctr] + output_col;
   15c44:	e0bfbe17 	ldw	r2,-264(fp)
   15c48:	1085883a 	add	r2,r2,r2
   15c4c:	1085883a 	add	r2,r2,r2
   15c50:	e0ffff17 	ldw	r3,-4(fp)
   15c54:	1885883a 	add	r2,r3,r2
   15c58:	10c00017 	ldw	r3,0(r2)
   15c5c:	e0800317 	ldw	r2,12(fp)
   15c60:	1885883a 	add	r2,r3,r2
   15c64:	e0bfca15 	stw	r2,-216(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   15c68:	e0bfbd17 	ldw	r2,-268(fp)
   15c6c:	10800017 	ldw	r2,0(r2)
   15c70:	10800404 	addi	r2,r2,16
   15c74:	e0bfc015 	stw	r2,-256(fp)
		tmp13 <<= CONST_BITS;
   15c78:	e0bfc017 	ldw	r2,-256(fp)
   15c7c:	1004937a 	slli	r2,r2,13
   15c80:	e0bfc015 	stw	r2,-256(fp)

		z1 = (INT32) wsptr[2];
   15c84:	e0bfbd17 	ldw	r2,-268(fp)
   15c88:	10800204 	addi	r2,r2,8
   15c8c:	10800017 	ldw	r2,0(r2)
   15c90:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[4];
   15c94:	e0bfbd17 	ldw	r2,-268(fp)
   15c98:	10800404 	addi	r2,r2,16
   15c9c:	10800017 	ldw	r2,0(r2)
   15ca0:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[6];
   15ca4:	e0bfbd17 	ldw	r2,-268(fp)
   15ca8:	10800604 	addi	r2,r2,24
   15cac:	10800017 	ldw	r2,0(r2)
   15cb0:	e0bfc315 	stw	r2,-244(fp)

		tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
   15cb4:	e0ffc217 	ldw	r3,-248(fp)
   15cb8:	e0bfc317 	ldw	r2,-244(fp)
   15cbc:	1885c83a 	sub	r2,r3,r2
   15cc0:	1009883a 	mov	r4,r2
   15cc4:	01470dc4 	movi	r5,7223
   15cc8:	002c1540 	call	2c154 <__mulsi3>
   15ccc:	e0bfc415 	stw	r2,-240(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
   15cd0:	e0ffc117 	ldw	r3,-252(fp)
   15cd4:	e0bfc217 	ldw	r2,-248(fp)
   15cd8:	1885c83a 	sub	r2,r3,r2
   15cdc:	1009883a 	mov	r4,r2
   15ce0:	01428484 	movi	r5,2578
   15ce4:	002c1540 	call	2c154 <__mulsi3>
   15ce8:	e0bfc515 	stw	r2,-236(fp)
		tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
   15cec:	e0ffc417 	ldw	r3,-240(fp)
   15cf0:	e0bfc517 	ldw	r2,-236(fp)
   15cf4:	1887883a 	add	r3,r3,r2
   15cf8:	e0bfc017 	ldw	r2,-256(fp)
   15cfc:	18a1883a 	add	r16,r3,r2
   15d00:	e13fc217 	ldw	r4,-248(fp)
   15d04:	01714544 	movi	r5,-15083
   15d08:	002c1540 	call	2c154 <__mulsi3>
   15d0c:	8085883a 	add	r2,r16,r2
   15d10:	e0bfc615 	stw	r2,-232(fp)
		tmp0 = z1 + z3;
   15d14:	e0ffc117 	ldw	r3,-252(fp)
   15d18:	e0bfc317 	ldw	r2,-244(fp)
   15d1c:	1885883a 	add	r2,r3,r2
   15d20:	e0bfc715 	stw	r2,-228(fp)
		z2 -= tmp0;
   15d24:	e0ffc217 	ldw	r3,-248(fp)
   15d28:	e0bfc717 	ldw	r2,-228(fp)
   15d2c:	1885c83a 	sub	r2,r3,r2
   15d30:	e0bfc215 	stw	r2,-248(fp)
		tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
   15d34:	e13fc717 	ldw	r4,-228(fp)
   15d38:	014a3184 	movi	r5,10438
   15d3c:	002c1540 	call	2c154 <__mulsi3>
   15d40:	1007883a 	mov	r3,r2
   15d44:	e0bfc017 	ldw	r2,-256(fp)
   15d48:	1885883a 	add	r2,r3,r2
   15d4c:	e0bfc715 	stw	r2,-228(fp)
		tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
   15d50:	e13fc317 	ldw	r4,-244(fp)
   15d54:	017f60c4 	movi	r5,-637
   15d58:	002c1540 	call	2c154 <__mulsi3>
   15d5c:	1007883a 	mov	r3,r2
   15d60:	e0bfc717 	ldw	r2,-228(fp)
   15d64:	1885883a 	add	r2,r3,r2
   15d68:	e0ffc417 	ldw	r3,-240(fp)
   15d6c:	1885883a 	add	r2,r3,r2
   15d70:	e0bfc415 	stw	r2,-240(fp)
		tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
   15d74:	e13fc117 	ldw	r4,-252(fp)
   15d78:	016c3c44 	movi	r5,-20239
   15d7c:	002c1540 	call	2c154 <__mulsi3>
   15d80:	1007883a 	mov	r3,r2
   15d84:	e0bfc717 	ldw	r2,-228(fp)
   15d88:	1885883a 	add	r2,r3,r2
   15d8c:	e0ffc517 	ldw	r3,-236(fp)
   15d90:	1885883a 	add	r2,r3,r2
   15d94:	e0bfc515 	stw	r2,-236(fp)
		tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
   15d98:	e13fc217 	ldw	r4,-248(fp)
   15d9c:	014b5044 	movi	r5,11585
   15da0:	002c1540 	call	2c154 <__mulsi3>
   15da4:	e0ffc017 	ldw	r3,-256(fp)
   15da8:	1885883a 	add	r2,r3,r2
   15dac:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   15db0:	e0bfbd17 	ldw	r2,-268(fp)
   15db4:	10800104 	addi	r2,r2,4
   15db8:	10800017 	ldw	r2,0(r2)
   15dbc:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[3];
   15dc0:	e0bfbd17 	ldw	r2,-268(fp)
   15dc4:	10800304 	addi	r2,r2,12
   15dc8:	10800017 	ldw	r2,0(r2)
   15dcc:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[5];
   15dd0:	e0bfbd17 	ldw	r2,-268(fp)
   15dd4:	10800504 	addi	r2,r2,20
   15dd8:	10800017 	ldw	r2,0(r2)
   15ddc:	e0bfc315 	stw	r2,-244(fp)

		tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
   15de0:	e0ffc117 	ldw	r3,-252(fp)
   15de4:	e0bfc217 	ldw	r2,-248(fp)
   15de8:	1885883a 	add	r2,r3,r2
   15dec:	1009883a 	mov	r4,r2
   15df0:	01477bc4 	movi	r5,7663
   15df4:	002c1540 	call	2c154 <__mulsi3>
   15df8:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
   15dfc:	e0ffc117 	ldw	r3,-252(fp)
   15e00:	e0bfc217 	ldw	r2,-248(fp)
   15e04:	1885c83a 	sub	r2,r3,r2
   15e08:	1009883a 	mov	r4,r2
   15e0c:	01415cc4 	movi	r5,1395
   15e10:	002c1540 	call	2c154 <__mulsi3>
   15e14:	e0bfc915 	stw	r2,-220(fp)
		tmp0 = tmp1 - tmp2;
   15e18:	e0ffc817 	ldw	r3,-224(fp)
   15e1c:	e0bfc917 	ldw	r2,-220(fp)
   15e20:	1885c83a 	sub	r2,r3,r2
   15e24:	e0bfc715 	stw	r2,-228(fp)
		tmp1 += tmp2;
   15e28:	e0ffc817 	ldw	r3,-224(fp)
   15e2c:	e0bfc917 	ldw	r2,-220(fp)
   15e30:	1885883a 	add	r2,r3,r2
   15e34:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
   15e38:	e0ffc217 	ldw	r3,-248(fp)
   15e3c:	e0bfc317 	ldw	r2,-244(fp)
   15e40:	1885883a 	add	r2,r3,r2
   15e44:	1009883a 	mov	r4,r2
   15e48:	0174f844 	movi	r5,-11295
   15e4c:	002c1540 	call	2c154 <__mulsi3>
   15e50:	e0bfc915 	stw	r2,-220(fp)
		tmp1 += tmp2;
   15e54:	e0ffc817 	ldw	r3,-224(fp)
   15e58:	e0bfc917 	ldw	r2,-220(fp)
   15e5c:	1885883a 	add	r2,r3,r2
   15e60:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
   15e64:	e0ffc117 	ldw	r3,-252(fp)
   15e68:	e0bfc317 	ldw	r2,-244(fp)
   15e6c:	1885883a 	add	r2,r3,r2
   15e70:	1009883a 	mov	r4,r2
   15e74:	0144e8c4 	movi	r5,5027
   15e78:	002c1540 	call	2c154 <__mulsi3>
   15e7c:	e0bfc215 	stw	r2,-248(fp)
		tmp0 += z2;
   15e80:	e0ffc717 	ldw	r3,-228(fp)
   15e84:	e0bfc217 	ldw	r2,-248(fp)
   15e88:	1885883a 	add	r2,r3,r2
   15e8c:	e0bfc715 	stw	r2,-228(fp)
		tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
   15e90:	e13fc317 	ldw	r4,-244(fp)
   15e94:	014ef784 	movi	r5,15326
   15e98:	002c1540 	call	2c154 <__mulsi3>
   15e9c:	1007883a 	mov	r3,r2
   15ea0:	e0bfc217 	ldw	r2,-248(fp)
   15ea4:	1885883a 	add	r2,r3,r2
   15ea8:	e0ffc917 	ldw	r3,-220(fp)
   15eac:	1885883a 	add	r2,r3,r2
   15eb0:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   15eb4:	e0ffc417 	ldw	r3,-240(fp)
   15eb8:	e0bfc717 	ldw	r2,-228(fp)
   15ebc:	1885883a 	add	r2,r3,r2
   15ec0:	1005d4ba 	srai	r2,r2,18
   15ec4:	1080ffcc 	andi	r2,r2,1023
   15ec8:	e0ffbf17 	ldw	r3,-260(fp)
   15ecc:	1885883a 	add	r2,r3,r2
   15ed0:	10c00003 	ldbu	r3,0(r2)
   15ed4:	e0bfca17 	ldw	r2,-216(fp)
   15ed8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   15edc:	e0bfca17 	ldw	r2,-216(fp)
   15ee0:	10800184 	addi	r2,r2,6
   15ee4:	e13fc417 	ldw	r4,-240(fp)
   15ee8:	e0ffc717 	ldw	r3,-228(fp)
   15eec:	20c7c83a 	sub	r3,r4,r3
   15ef0:	1807d4ba 	srai	r3,r3,18
   15ef4:	18c0ffcc 	andi	r3,r3,1023
   15ef8:	e13fbf17 	ldw	r4,-260(fp)
   15efc:	20c7883a 	add	r3,r4,r3
   15f00:	18c00003 	ldbu	r3,0(r3)
   15f04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
   15f08:	e0bfca17 	ldw	r2,-216(fp)
   15f0c:	10800044 	addi	r2,r2,1
   15f10:	e13fc617 	ldw	r4,-232(fp)
   15f14:	e0ffc817 	ldw	r3,-224(fp)
   15f18:	20c7883a 	add	r3,r4,r3
   15f1c:	1807d4ba 	srai	r3,r3,18
   15f20:	18c0ffcc 	andi	r3,r3,1023
   15f24:	e13fbf17 	ldw	r4,-260(fp)
   15f28:	20c7883a 	add	r3,r4,r3
   15f2c:	18c00003 	ldbu	r3,0(r3)
   15f30:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
   15f34:	e0bfca17 	ldw	r2,-216(fp)
   15f38:	10800144 	addi	r2,r2,5
   15f3c:	e13fc617 	ldw	r4,-232(fp)
   15f40:	e0ffc817 	ldw	r3,-224(fp)
   15f44:	20c7c83a 	sub	r3,r4,r3
   15f48:	1807d4ba 	srai	r3,r3,18
   15f4c:	18c0ffcc 	andi	r3,r3,1023
   15f50:	e13fbf17 	ldw	r4,-260(fp)
   15f54:	20c7883a 	add	r3,r4,r3
   15f58:	18c00003 	ldbu	r3,0(r3)
   15f5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   15f60:	e0bfca17 	ldw	r2,-216(fp)
   15f64:	10800084 	addi	r2,r2,2
   15f68:	e13fc517 	ldw	r4,-236(fp)
   15f6c:	e0ffc917 	ldw	r3,-220(fp)
   15f70:	20c7883a 	add	r3,r4,r3
   15f74:	1807d4ba 	srai	r3,r3,18
   15f78:	18c0ffcc 	andi	r3,r3,1023
   15f7c:	e13fbf17 	ldw	r4,-260(fp)
   15f80:	20c7883a 	add	r3,r4,r3
   15f84:	18c00003 	ldbu	r3,0(r3)
   15f88:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   15f8c:	e0bfca17 	ldw	r2,-216(fp)
   15f90:	10800104 	addi	r2,r2,4
   15f94:	e13fc517 	ldw	r4,-236(fp)
   15f98:	e0ffc917 	ldw	r3,-220(fp)
   15f9c:	20c7c83a 	sub	r3,r4,r3
   15fa0:	1807d4ba 	srai	r3,r3,18
   15fa4:	18c0ffcc 	andi	r3,r3,1023
   15fa8:	e13fbf17 	ldw	r4,-260(fp)
   15fac:	20c7883a 	add	r3,r4,r3
   15fb0:	18c00003 	ldbu	r3,0(r3)
   15fb4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
   15fb8:	e0bfca17 	ldw	r2,-216(fp)
   15fbc:	108000c4 	addi	r2,r2,3
   15fc0:	e0ffc017 	ldw	r3,-256(fp)
   15fc4:	1807d4ba 	srai	r3,r3,18
   15fc8:	18c0ffcc 	andi	r3,r3,1023
   15fcc:	e13fbf17 	ldw	r4,-260(fp)
   15fd0:	20c7883a 	add	r3,r4,r3
   15fd4:	18c00003 	ldbu	r3,0(r3)
   15fd8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
   15fdc:	e0bfbd17 	ldw	r2,-268(fp)
   15fe0:	10800704 	addi	r2,r2,28
   15fe4:	e0bfbd15 	stw	r2,-268(fp)
	}

	/* Pass 2: process 7 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++) {
   15fe8:	e0bfbe17 	ldw	r2,-264(fp)
   15fec:	10800044 	addi	r2,r2,1
   15ff0:	e0bfbe15 	stw	r2,-264(fp)
   15ff4:	e0bfbe17 	ldw	r2,-264(fp)
   15ff8:	108001d0 	cmplti	r2,r2,7
   15ffc:	103f111e 	bne	r2,zero,15c44 <jpeg_idct_7x7+0x4a8>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
	}
}
   16000:	e037883a 	mov	sp,fp
   16004:	dfc00217 	ldw	ra,8(sp)
   16008:	df000117 	ldw	fp,4(sp)
   1600c:	dc000017 	ldw	r16,0(sp)
   16010:	dec00304 	addi	sp,sp,12
   16014:	f800283a 	ret

00016018 <jpeg_idct_6x6>:

GLOBAL(void)
	jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   16018:	deffc704 	addi	sp,sp,-228
   1601c:	dfc03815 	stw	ra,224(sp)
   16020:	df003715 	stw	fp,220(sp)
   16024:	df003704 	addi	fp,sp,220
   16028:	e13ffc15 	stw	r4,-16(fp)
   1602c:	e17ffd15 	stw	r5,-12(fp)
   16030:	e1bffe15 	stw	r6,-8(fp)
   16034:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   16038:	e0bffc17 	ldw	r2,-16(fp)
   1603c:	10804917 	ldw	r2,292(r2)
   16040:	10802004 	addi	r2,r2,128
   16044:	e0bfcd15 	stw	r2,-204(fp)
	int workspace[6*6];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   16048:	e0bffe17 	ldw	r2,-8(fp)
   1604c:	e0bfc915 	stw	r2,-220(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   16050:	e0bffd17 	ldw	r2,-12(fp)
   16054:	10801517 	ldw	r2,84(r2)
   16058:	e0bfca15 	stw	r2,-216(fp)
	wsptr = workspace;
   1605c:	e0bfd804 	addi	r2,fp,-160
   16060:	e0bfcb15 	stw	r2,-212(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   16064:	e03fcc15 	stw	zero,-208(fp)
   16068:	0000bd06 	br	16360 <jpeg_idct_6x6+0x348>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1606c:	e0bfc917 	ldw	r2,-220(fp)
   16070:	1080000b 	ldhu	r2,0(r2)
   16074:	10ffffcc 	andi	r3,r2,65535
   16078:	18e0001c 	xori	r3,r3,32768
   1607c:	18e00004 	addi	r3,r3,-32768
   16080:	e0bfca17 	ldw	r2,-216(fp)
   16084:	10800017 	ldw	r2,0(r2)
   16088:	1809883a 	mov	r4,r3
   1608c:	100b883a 	mov	r5,r2
   16090:	002c1540 	call	2c154 <__mulsi3>
   16094:	e0bfce15 	stw	r2,-200(fp)
		tmp0 <<= CONST_BITS;
   16098:	e0bfce17 	ldw	r2,-200(fp)
   1609c:	1004937a 	slli	r2,r2,13
   160a0:	e0bfce15 	stw	r2,-200(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   160a4:	e0bfce17 	ldw	r2,-200(fp)
   160a8:	10810004 	addi	r2,r2,1024
   160ac:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   160b0:	e0bfc917 	ldw	r2,-220(fp)
   160b4:	10801004 	addi	r2,r2,64
   160b8:	1080000b 	ldhu	r2,0(r2)
   160bc:	10ffffcc 	andi	r3,r2,65535
   160c0:	18e0001c 	xori	r3,r3,32768
   160c4:	18e00004 	addi	r3,r3,-32768
   160c8:	e0bfca17 	ldw	r2,-216(fp)
   160cc:	10802004 	addi	r2,r2,128
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	1809883a 	mov	r4,r3
   160d8:	100b883a 	mov	r5,r2
   160dc:	002c1540 	call	2c154 <__mulsi3>
   160e0:	e0bfcf15 	stw	r2,-196(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
   160e4:	e13fcf17 	ldw	r4,-196(fp)
   160e8:	0145a844 	movi	r5,5793
   160ec:	002c1540 	call	2c154 <__mulsi3>
   160f0:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = tmp0 + tmp10;
   160f4:	e0ffce17 	ldw	r3,-200(fp)
   160f8:	e0bfd017 	ldw	r2,-192(fp)
   160fc:	1885883a 	add	r2,r3,r2
   16100:	e0bfd115 	stw	r2,-188(fp)
		tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
   16104:	e0ffce17 	ldw	r3,-200(fp)
   16108:	e0bfd017 	ldw	r2,-192(fp)
   1610c:	1887c83a 	sub	r3,r3,r2
   16110:	e0bfd017 	ldw	r2,-192(fp)
   16114:	1885c83a 	sub	r2,r3,r2
   16118:	1005d2fa 	srai	r2,r2,11
   1611c:	e0bfd215 	stw	r2,-184(fp)
		tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   16120:	e0bfc917 	ldw	r2,-220(fp)
   16124:	10800804 	addi	r2,r2,32
   16128:	1080000b 	ldhu	r2,0(r2)
   1612c:	10ffffcc 	andi	r3,r2,65535
   16130:	18e0001c 	xori	r3,r3,32768
   16134:	18e00004 	addi	r3,r3,-32768
   16138:	e0bfca17 	ldw	r2,-216(fp)
   1613c:	10801004 	addi	r2,r2,64
   16140:	10800017 	ldw	r2,0(r2)
   16144:	1809883a 	mov	r4,r3
   16148:	100b883a 	mov	r5,r2
   1614c:	002c1540 	call	2c154 <__mulsi3>
   16150:	e0bfd015 	stw	r2,-192(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
   16154:	e13fd017 	ldw	r4,-192(fp)
   16158:	0149cc44 	movi	r5,10033
   1615c:	002c1540 	call	2c154 <__mulsi3>
   16160:	e0bfce15 	stw	r2,-200(fp)
		tmp10 = tmp1 + tmp0;
   16164:	e0ffd117 	ldw	r3,-188(fp)
   16168:	e0bfce17 	ldw	r2,-200(fp)
   1616c:	1885883a 	add	r2,r3,r2
   16170:	e0bfd015 	stw	r2,-192(fp)
		tmp12 = tmp1 - tmp0;
   16174:	e0ffd117 	ldw	r3,-188(fp)
   16178:	e0bfce17 	ldw	r2,-200(fp)
   1617c:	1885c83a 	sub	r2,r3,r2
   16180:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   16184:	e0bfc917 	ldw	r2,-220(fp)
   16188:	10800404 	addi	r2,r2,16
   1618c:	1080000b 	ldhu	r2,0(r2)
   16190:	10ffffcc 	andi	r3,r2,65535
   16194:	18e0001c 	xori	r3,r3,32768
   16198:	18e00004 	addi	r3,r3,-32768
   1619c:	e0bfca17 	ldw	r2,-216(fp)
   161a0:	10800804 	addi	r2,r2,32
   161a4:	10800017 	ldw	r2,0(r2)
   161a8:	1809883a 	mov	r4,r3
   161ac:	100b883a 	mov	r5,r2
   161b0:	002c1540 	call	2c154 <__mulsi3>
   161b4:	e0bfd415 	stw	r2,-176(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   161b8:	e0bfc917 	ldw	r2,-220(fp)
   161bc:	10800c04 	addi	r2,r2,48
   161c0:	1080000b 	ldhu	r2,0(r2)
   161c4:	10ffffcc 	andi	r3,r2,65535
   161c8:	18e0001c 	xori	r3,r3,32768
   161cc:	18e00004 	addi	r3,r3,-32768
   161d0:	e0bfca17 	ldw	r2,-216(fp)
   161d4:	10801804 	addi	r2,r2,96
   161d8:	10800017 	ldw	r2,0(r2)
   161dc:	1809883a 	mov	r4,r3
   161e0:	100b883a 	mov	r5,r2
   161e4:	002c1540 	call	2c154 <__mulsi3>
   161e8:	e0bfd515 	stw	r2,-172(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   161ec:	e0bfc917 	ldw	r2,-220(fp)
   161f0:	10801404 	addi	r2,r2,80
   161f4:	1080000b 	ldhu	r2,0(r2)
   161f8:	10ffffcc 	andi	r3,r2,65535
   161fc:	18e0001c 	xori	r3,r3,32768
   16200:	18e00004 	addi	r3,r3,-32768
   16204:	e0bfca17 	ldw	r2,-216(fp)
   16208:	10802804 	addi	r2,r2,160
   1620c:	10800017 	ldw	r2,0(r2)
   16210:	1809883a 	mov	r4,r3
   16214:	100b883a 	mov	r5,r2
   16218:	002c1540 	call	2c154 <__mulsi3>
   1621c:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   16220:	e0ffd417 	ldw	r3,-176(fp)
   16224:	e0bfd617 	ldw	r2,-168(fp)
   16228:	1885883a 	add	r2,r3,r2
   1622c:	1009883a 	mov	r4,r2
   16230:	0142ed84 	movi	r5,2998
   16234:	002c1540 	call	2c154 <__mulsi3>
   16238:	e0bfd115 	stw	r2,-188(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
   1623c:	e0ffd417 	ldw	r3,-176(fp)
   16240:	e0bfd517 	ldw	r2,-172(fp)
   16244:	1885883a 	add	r2,r3,r2
   16248:	1006937a 	slli	r3,r2,13
   1624c:	e0bfd117 	ldw	r2,-188(fp)
   16250:	1885883a 	add	r2,r3,r2
   16254:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
   16258:	e0ffd617 	ldw	r3,-168(fp)
   1625c:	e0bfd517 	ldw	r2,-172(fp)
   16260:	1885c83a 	sub	r2,r3,r2
   16264:	1006937a 	slli	r3,r2,13
   16268:	e0bfd117 	ldw	r2,-188(fp)
   1626c:	1885883a 	add	r2,r3,r2
   16270:	e0bfcf15 	stw	r2,-196(fp)
		tmp1 = (z1 - z2 - z3) << PASS1_BITS;
   16274:	e0ffd417 	ldw	r3,-176(fp)
   16278:	e0bfd517 	ldw	r2,-172(fp)
   1627c:	1887c83a 	sub	r3,r3,r2
   16280:	e0bfd617 	ldw	r2,-168(fp)
   16284:	1885c83a 	sub	r2,r3,r2
   16288:	1085883a 	add	r2,r2,r2
   1628c:	1085883a 	add	r2,r2,r2
   16290:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage */

		wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   16294:	e0ffd017 	ldw	r3,-192(fp)
   16298:	e0bfce17 	ldw	r2,-200(fp)
   1629c:	1885883a 	add	r2,r3,r2
   162a0:	1007d2fa 	srai	r3,r2,11
   162a4:	e0bfcb17 	ldw	r2,-212(fp)
   162a8:	10c00015 	stw	r3,0(r2)
		wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   162ac:	e0bfcb17 	ldw	r2,-212(fp)
   162b0:	10801e04 	addi	r2,r2,120
   162b4:	e13fd017 	ldw	r4,-192(fp)
   162b8:	e0ffce17 	ldw	r3,-200(fp)
   162bc:	20c7c83a 	sub	r3,r4,r3
   162c0:	1807d2fa 	srai	r3,r3,11
   162c4:	10c00015 	stw	r3,0(r2)
		wsptr[6*1] = (int) (tmp11 + tmp1);
   162c8:	e0bfcb17 	ldw	r2,-212(fp)
   162cc:	10800604 	addi	r2,r2,24
   162d0:	e13fd217 	ldw	r4,-184(fp)
   162d4:	e0ffd117 	ldw	r3,-188(fp)
   162d8:	20c7883a 	add	r3,r4,r3
   162dc:	10c00015 	stw	r3,0(r2)
		wsptr[6*4] = (int) (tmp11 - tmp1);
   162e0:	e0bfcb17 	ldw	r2,-212(fp)
   162e4:	10801804 	addi	r2,r2,96
   162e8:	e13fd217 	ldw	r4,-184(fp)
   162ec:	e0ffd117 	ldw	r3,-188(fp)
   162f0:	20c7c83a 	sub	r3,r4,r3
   162f4:	10c00015 	stw	r3,0(r2)
		wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
   162f8:	e0bfcb17 	ldw	r2,-212(fp)
   162fc:	10800c04 	addi	r2,r2,48
   16300:	e13fd317 	ldw	r4,-180(fp)
   16304:	e0ffcf17 	ldw	r3,-196(fp)
   16308:	20c7883a 	add	r3,r4,r3
   1630c:	1807d2fa 	srai	r3,r3,11
   16310:	10c00015 	stw	r3,0(r2)
		wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
   16314:	e0bfcb17 	ldw	r2,-212(fp)
   16318:	10801204 	addi	r2,r2,72
   1631c:	e13fd317 	ldw	r4,-180(fp)
   16320:	e0ffcf17 	ldw	r3,-196(fp)
   16324:	20c7c83a 	sub	r3,r4,r3
   16328:	1807d2fa 	srai	r3,r3,11
   1632c:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   16330:	e0bfcc17 	ldw	r2,-208(fp)
   16334:	10800044 	addi	r2,r2,1
   16338:	e0bfcc15 	stw	r2,-208(fp)
   1633c:	e0bfc917 	ldw	r2,-220(fp)
   16340:	10800084 	addi	r2,r2,2
   16344:	e0bfc915 	stw	r2,-220(fp)
   16348:	e0bfca17 	ldw	r2,-216(fp)
   1634c:	10800104 	addi	r2,r2,4
   16350:	e0bfca15 	stw	r2,-216(fp)
   16354:	e0bfcb17 	ldw	r2,-212(fp)
   16358:	10800104 	addi	r2,r2,4
   1635c:	e0bfcb15 	stw	r2,-212(fp)
   16360:	e0bfcc17 	ldw	r2,-208(fp)
   16364:	10800190 	cmplti	r2,r2,6
   16368:	103f401e 	bne	r2,zero,1606c <jpeg_idct_6x6+0x54>
		wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 6 rows from work array, store into output array. */

	wsptr = workspace;
   1636c:	e0bfd804 	addi	r2,fp,-160
   16370:	e0bfcb15 	stw	r2,-212(fp)
	for (ctr = 0; ctr < 6; ctr++) {
   16374:	e03fcc15 	stw	zero,-208(fp)
   16378:	0000a106 	br	16600 <jpeg_idct_6x6+0x5e8>
		outptr = output_buf[ctr] + output_col;
   1637c:	e0bfcc17 	ldw	r2,-208(fp)
   16380:	1085883a 	add	r2,r2,r2
   16384:	1085883a 	add	r2,r2,r2
   16388:	e0ffff17 	ldw	r3,-4(fp)
   1638c:	1885883a 	add	r2,r3,r2
   16390:	10c00017 	ldw	r3,0(r2)
   16394:	e0800217 	ldw	r2,8(fp)
   16398:	1885883a 	add	r2,r3,r2
   1639c:	e0bfd715 	stw	r2,-164(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   163a0:	e0bfcb17 	ldw	r2,-212(fp)
   163a4:	10800017 	ldw	r2,0(r2)
   163a8:	10800404 	addi	r2,r2,16
   163ac:	e0bfce15 	stw	r2,-200(fp)
		tmp0 <<= CONST_BITS;
   163b0:	e0bfce17 	ldw	r2,-200(fp)
   163b4:	1004937a 	slli	r2,r2,13
   163b8:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = (INT32) wsptr[4];
   163bc:	e0bfcb17 	ldw	r2,-212(fp)
   163c0:	10800404 	addi	r2,r2,16
   163c4:	10800017 	ldw	r2,0(r2)
   163c8:	e0bfcf15 	stw	r2,-196(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
   163cc:	e13fcf17 	ldw	r4,-196(fp)
   163d0:	0145a844 	movi	r5,5793
   163d4:	002c1540 	call	2c154 <__mulsi3>
   163d8:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = tmp0 + tmp10;
   163dc:	e0ffce17 	ldw	r3,-200(fp)
   163e0:	e0bfd017 	ldw	r2,-192(fp)
   163e4:	1885883a 	add	r2,r3,r2
   163e8:	e0bfd115 	stw	r2,-188(fp)
		tmp11 = tmp0 - tmp10 - tmp10;
   163ec:	e0ffce17 	ldw	r3,-200(fp)
   163f0:	e0bfd017 	ldw	r2,-192(fp)
   163f4:	1887c83a 	sub	r3,r3,r2
   163f8:	e0bfd017 	ldw	r2,-192(fp)
   163fc:	1885c83a 	sub	r2,r3,r2
   16400:	e0bfd215 	stw	r2,-184(fp)
		tmp10 = (INT32) wsptr[2];
   16404:	e0bfcb17 	ldw	r2,-212(fp)
   16408:	10800204 	addi	r2,r2,8
   1640c:	10800017 	ldw	r2,0(r2)
   16410:	e0bfd015 	stw	r2,-192(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
   16414:	e13fd017 	ldw	r4,-192(fp)
   16418:	0149cc44 	movi	r5,10033
   1641c:	002c1540 	call	2c154 <__mulsi3>
   16420:	e0bfce15 	stw	r2,-200(fp)
		tmp10 = tmp1 + tmp0;
   16424:	e0ffd117 	ldw	r3,-188(fp)
   16428:	e0bfce17 	ldw	r2,-200(fp)
   1642c:	1885883a 	add	r2,r3,r2
   16430:	e0bfd015 	stw	r2,-192(fp)
		tmp12 = tmp1 - tmp0;
   16434:	e0ffd117 	ldw	r3,-188(fp)
   16438:	e0bfce17 	ldw	r2,-200(fp)
   1643c:	1885c83a 	sub	r2,r3,r2
   16440:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   16444:	e0bfcb17 	ldw	r2,-212(fp)
   16448:	10800104 	addi	r2,r2,4
   1644c:	10800017 	ldw	r2,0(r2)
   16450:	e0bfd415 	stw	r2,-176(fp)
		z2 = (INT32) wsptr[3];
   16454:	e0bfcb17 	ldw	r2,-212(fp)
   16458:	10800304 	addi	r2,r2,12
   1645c:	10800017 	ldw	r2,0(r2)
   16460:	e0bfd515 	stw	r2,-172(fp)
		z3 = (INT32) wsptr[5];
   16464:	e0bfcb17 	ldw	r2,-212(fp)
   16468:	10800504 	addi	r2,r2,20
   1646c:	10800017 	ldw	r2,0(r2)
   16470:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   16474:	e0ffd417 	ldw	r3,-176(fp)
   16478:	e0bfd617 	ldw	r2,-168(fp)
   1647c:	1885883a 	add	r2,r3,r2
   16480:	1009883a 	mov	r4,r2
   16484:	0142ed84 	movi	r5,2998
   16488:	002c1540 	call	2c154 <__mulsi3>
   1648c:	e0bfd115 	stw	r2,-188(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
   16490:	e0ffd417 	ldw	r3,-176(fp)
   16494:	e0bfd517 	ldw	r2,-172(fp)
   16498:	1885883a 	add	r2,r3,r2
   1649c:	1006937a 	slli	r3,r2,13
   164a0:	e0bfd117 	ldw	r2,-188(fp)
   164a4:	1885883a 	add	r2,r3,r2
   164a8:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
   164ac:	e0ffd617 	ldw	r3,-168(fp)
   164b0:	e0bfd517 	ldw	r2,-172(fp)
   164b4:	1885c83a 	sub	r2,r3,r2
   164b8:	1006937a 	slli	r3,r2,13
   164bc:	e0bfd117 	ldw	r2,-188(fp)
   164c0:	1885883a 	add	r2,r3,r2
   164c4:	e0bfcf15 	stw	r2,-196(fp)
		tmp1 = (z1 - z2 - z3) << CONST_BITS;
   164c8:	e0ffd417 	ldw	r3,-176(fp)
   164cc:	e0bfd517 	ldw	r2,-172(fp)
   164d0:	1887c83a 	sub	r3,r3,r2
   164d4:	e0bfd617 	ldw	r2,-168(fp)
   164d8:	1885c83a 	sub	r2,r3,r2
   164dc:	1004937a 	slli	r2,r2,13
   164e0:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   164e4:	e0ffd017 	ldw	r3,-192(fp)
   164e8:	e0bfce17 	ldw	r2,-200(fp)
   164ec:	1885883a 	add	r2,r3,r2
   164f0:	1005d4ba 	srai	r2,r2,18
   164f4:	1080ffcc 	andi	r2,r2,1023
   164f8:	e0ffcd17 	ldw	r3,-204(fp)
   164fc:	1885883a 	add	r2,r3,r2
   16500:	10c00003 	ldbu	r3,0(r2)
   16504:	e0bfd717 	ldw	r2,-164(fp)
   16508:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   1650c:	e0bfd717 	ldw	r2,-164(fp)
   16510:	10800144 	addi	r2,r2,5
   16514:	e13fd017 	ldw	r4,-192(fp)
   16518:	e0ffce17 	ldw	r3,-200(fp)
   1651c:	20c7c83a 	sub	r3,r4,r3
   16520:	1807d4ba 	srai	r3,r3,18
   16524:	18c0ffcc 	andi	r3,r3,1023
   16528:	e13fcd17 	ldw	r4,-204(fp)
   1652c:	20c7883a 	add	r3,r4,r3
   16530:	18c00003 	ldbu	r3,0(r3)
   16534:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
   16538:	e0bfd717 	ldw	r2,-164(fp)
   1653c:	10800044 	addi	r2,r2,1
   16540:	e13fd217 	ldw	r4,-184(fp)
   16544:	e0ffd117 	ldw	r3,-188(fp)
   16548:	20c7883a 	add	r3,r4,r3
   1654c:	1807d4ba 	srai	r3,r3,18
   16550:	18c0ffcc 	andi	r3,r3,1023
   16554:	e13fcd17 	ldw	r4,-204(fp)
   16558:	20c7883a 	add	r3,r4,r3
   1655c:	18c00003 	ldbu	r3,0(r3)
   16560:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
   16564:	e0bfd717 	ldw	r2,-164(fp)
   16568:	10800104 	addi	r2,r2,4
   1656c:	e13fd217 	ldw	r4,-184(fp)
   16570:	e0ffd117 	ldw	r3,-188(fp)
   16574:	20c7c83a 	sub	r3,r4,r3
   16578:	1807d4ba 	srai	r3,r3,18
   1657c:	18c0ffcc 	andi	r3,r3,1023
   16580:	e13fcd17 	ldw	r4,-204(fp)
   16584:	20c7883a 	add	r3,r4,r3
   16588:	18c00003 	ldbu	r3,0(r3)
   1658c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   16590:	e0bfd717 	ldw	r2,-164(fp)
   16594:	10800084 	addi	r2,r2,2
   16598:	e13fd317 	ldw	r4,-180(fp)
   1659c:	e0ffcf17 	ldw	r3,-196(fp)
   165a0:	20c7883a 	add	r3,r4,r3
   165a4:	1807d4ba 	srai	r3,r3,18
   165a8:	18c0ffcc 	andi	r3,r3,1023
   165ac:	e13fcd17 	ldw	r4,-204(fp)
   165b0:	20c7883a 	add	r3,r4,r3
   165b4:	18c00003 	ldbu	r3,0(r3)
   165b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   165bc:	e0bfd717 	ldw	r2,-164(fp)
   165c0:	108000c4 	addi	r2,r2,3
   165c4:	e13fd317 	ldw	r4,-180(fp)
   165c8:	e0ffcf17 	ldw	r3,-196(fp)
   165cc:	20c7c83a 	sub	r3,r4,r3
   165d0:	1807d4ba 	srai	r3,r3,18
   165d4:	18c0ffcc 	andi	r3,r3,1023
   165d8:	e13fcd17 	ldw	r4,-204(fp)
   165dc:	20c7883a 	add	r3,r4,r3
   165e0:	18c00003 	ldbu	r3,0(r3)
   165e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
   165e8:	e0bfcb17 	ldw	r2,-212(fp)
   165ec:	10800604 	addi	r2,r2,24
   165f0:	e0bfcb15 	stw	r2,-212(fp)
	}

	/* Pass 2: process 6 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
   165f4:	e0bfcc17 	ldw	r2,-208(fp)
   165f8:	10800044 	addi	r2,r2,1
   165fc:	e0bfcc15 	stw	r2,-208(fp)
   16600:	e0bfcc17 	ldw	r2,-208(fp)
   16604:	10800190 	cmplti	r2,r2,6
   16608:	103f5c1e 	bne	r2,zero,1637c <jpeg_idct_6x6+0x364>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
   1660c:	e037883a 	mov	sp,fp
   16610:	dfc00117 	ldw	ra,4(sp)
   16614:	df000017 	ldw	fp,0(sp)
   16618:	dec00204 	addi	sp,sp,8
   1661c:	f800283a 	ret

00016620 <jpeg_idct_5x5>:

GLOBAL(void)
	jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   16620:	deffd304 	addi	sp,sp,-180
   16624:	dfc02c15 	stw	ra,176(sp)
   16628:	df002b15 	stw	fp,172(sp)
   1662c:	df002b04 	addi	fp,sp,172
   16630:	e13ffc15 	stw	r4,-16(fp)
   16634:	e17ffd15 	stw	r5,-12(fp)
   16638:	e1bffe15 	stw	r6,-8(fp)
   1663c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   16640:	e0bffc17 	ldw	r2,-16(fp)
   16644:	10804917 	ldw	r2,292(r2)
   16648:	10802004 	addi	r2,r2,128
   1664c:	e0bfd915 	stw	r2,-156(fp)
	int workspace[5*5];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   16650:	e0bffe17 	ldw	r2,-8(fp)
   16654:	e0bfd515 	stw	r2,-172(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   16658:	e0bffd17 	ldw	r2,-12(fp)
   1665c:	10801517 	ldw	r2,84(r2)
   16660:	e0bfd615 	stw	r2,-168(fp)
	wsptr = workspace;
   16664:	e0bfe304 	addi	r2,fp,-116
   16668:	e0bfd715 	stw	r2,-164(fp)
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
   1666c:	e03fd815 	stw	zero,-160(fp)
   16670:	0000a606 	br	1690c <jpeg_idct_5x5+0x2ec>
		/* Even part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   16674:	e0bfd517 	ldw	r2,-172(fp)
   16678:	1080000b 	ldhu	r2,0(r2)
   1667c:	10ffffcc 	andi	r3,r2,65535
   16680:	18e0001c 	xori	r3,r3,32768
   16684:	18e00004 	addi	r3,r3,-32768
   16688:	e0bfd617 	ldw	r2,-168(fp)
   1668c:	10800017 	ldw	r2,0(r2)
   16690:	1809883a 	mov	r4,r3
   16694:	100b883a 	mov	r5,r2
   16698:	002c1540 	call	2c154 <__mulsi3>
   1669c:	e0bfda15 	stw	r2,-152(fp)
		tmp12 <<= CONST_BITS;
   166a0:	e0bfda17 	ldw	r2,-152(fp)
   166a4:	1004937a 	slli	r2,r2,13
   166a8:	e0bfda15 	stw	r2,-152(fp)
		/* Add fudge factor here for final descale. */
		tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
   166ac:	e0bfda17 	ldw	r2,-152(fp)
   166b0:	10810004 	addi	r2,r2,1024
   166b4:	e0bfda15 	stw	r2,-152(fp)
		tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   166b8:	e0bfd517 	ldw	r2,-172(fp)
   166bc:	10800804 	addi	r2,r2,32
   166c0:	1080000b 	ldhu	r2,0(r2)
   166c4:	10ffffcc 	andi	r3,r2,65535
   166c8:	18e0001c 	xori	r3,r3,32768
   166cc:	18e00004 	addi	r3,r3,-32768
   166d0:	e0bfd617 	ldw	r2,-168(fp)
   166d4:	10801004 	addi	r2,r2,64
   166d8:	10800017 	ldw	r2,0(r2)
   166dc:	1809883a 	mov	r4,r3
   166e0:	100b883a 	mov	r5,r2
   166e4:	002c1540 	call	2c154 <__mulsi3>
   166e8:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   166ec:	e0bfd517 	ldw	r2,-172(fp)
   166f0:	10801004 	addi	r2,r2,64
   166f4:	1080000b 	ldhu	r2,0(r2)
   166f8:	10ffffcc 	andi	r3,r2,65535
   166fc:	18e0001c 	xori	r3,r3,32768
   16700:	18e00004 	addi	r3,r3,-32768
   16704:	e0bfd617 	ldw	r2,-168(fp)
   16708:	10802004 	addi	r2,r2,128
   1670c:	10800017 	ldw	r2,0(r2)
   16710:	1809883a 	mov	r4,r3
   16714:	100b883a 	mov	r5,r2
   16718:	002c1540 	call	2c154 <__mulsi3>
   1671c:	e0bfdc15 	stw	r2,-144(fp)
		z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
   16720:	e0ffdb17 	ldw	r3,-148(fp)
   16724:	e0bfdc17 	ldw	r2,-144(fp)
   16728:	1885883a 	add	r2,r3,r2
   1672c:	1009883a 	mov	r4,r2
   16730:	01465304 	movi	r5,6476
   16734:	002c1540 	call	2c154 <__mulsi3>
   16738:	e0bfdd15 	stw	r2,-140(fp)
		z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
   1673c:	e0ffdb17 	ldw	r3,-148(fp)
   16740:	e0bfdc17 	ldw	r2,-144(fp)
   16744:	1885c83a 	sub	r2,r3,r2
   16748:	1009883a 	mov	r4,r2
   1674c:	0142d404 	movi	r5,2896
   16750:	002c1540 	call	2c154 <__mulsi3>
   16754:	e0bfde15 	stw	r2,-136(fp)
		z3 = tmp12 + z2;
   16758:	e0ffda17 	ldw	r3,-152(fp)
   1675c:	e0bfde17 	ldw	r2,-136(fp)
   16760:	1885883a 	add	r2,r3,r2
   16764:	e0bfdf15 	stw	r2,-132(fp)
		tmp10 = z3 + z1;
   16768:	e0ffdf17 	ldw	r3,-132(fp)
   1676c:	e0bfdd17 	ldw	r2,-140(fp)
   16770:	1885883a 	add	r2,r3,r2
   16774:	e0bfe015 	stw	r2,-128(fp)
		tmp11 = z3 - z1;
   16778:	e0ffdf17 	ldw	r3,-132(fp)
   1677c:	e0bfdd17 	ldw	r2,-140(fp)
   16780:	1885c83a 	sub	r2,r3,r2
   16784:	e0bfe115 	stw	r2,-124(fp)
		tmp12 -= z2 << 2;
   16788:	e0bfde17 	ldw	r2,-136(fp)
   1678c:	1085883a 	add	r2,r2,r2
   16790:	1085883a 	add	r2,r2,r2
   16794:	e0ffda17 	ldw	r3,-152(fp)
   16798:	1885c83a 	sub	r2,r3,r2
   1679c:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   167a0:	e0bfd517 	ldw	r2,-172(fp)
   167a4:	10800404 	addi	r2,r2,16
   167a8:	1080000b 	ldhu	r2,0(r2)
   167ac:	10ffffcc 	andi	r3,r2,65535
   167b0:	18e0001c 	xori	r3,r3,32768
   167b4:	18e00004 	addi	r3,r3,-32768
   167b8:	e0bfd617 	ldw	r2,-168(fp)
   167bc:	10800804 	addi	r2,r2,32
   167c0:	10800017 	ldw	r2,0(r2)
   167c4:	1809883a 	mov	r4,r3
   167c8:	100b883a 	mov	r5,r2
   167cc:	002c1540 	call	2c154 <__mulsi3>
   167d0:	e0bfde15 	stw	r2,-136(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   167d4:	e0bfd517 	ldw	r2,-172(fp)
   167d8:	10800c04 	addi	r2,r2,48
   167dc:	1080000b 	ldhu	r2,0(r2)
   167e0:	10ffffcc 	andi	r3,r2,65535
   167e4:	18e0001c 	xori	r3,r3,32768
   167e8:	18e00004 	addi	r3,r3,-32768
   167ec:	e0bfd617 	ldw	r2,-168(fp)
   167f0:	10801804 	addi	r2,r2,96
   167f4:	10800017 	ldw	r2,0(r2)
   167f8:	1809883a 	mov	r4,r3
   167fc:	100b883a 	mov	r5,r2
   16800:	002c1540 	call	2c154 <__mulsi3>
   16804:	e0bfdf15 	stw	r2,-132(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
   16808:	e0ffde17 	ldw	r3,-136(fp)
   1680c:	e0bfdf17 	ldw	r2,-132(fp)
   16810:	1885883a 	add	r2,r3,r2
   16814:	1009883a 	mov	r4,r2
   16818:	0146a684 	movi	r5,6810
   1681c:	002c1540 	call	2c154 <__mulsi3>
   16820:	e0bfdd15 	stw	r2,-140(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
   16824:	e13fde17 	ldw	r4,-136(fp)
   16828:	01441c44 	movi	r5,4209
   1682c:	002c1540 	call	2c154 <__mulsi3>
   16830:	1007883a 	mov	r3,r2
   16834:	e0bfdd17 	ldw	r2,-140(fp)
   16838:	1885883a 	add	r2,r3,r2
   1683c:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
   16840:	e13fdf17 	ldw	r4,-132(fp)
   16844:	016e9704 	movi	r5,-17828
   16848:	002c1540 	call	2c154 <__mulsi3>
   1684c:	1007883a 	mov	r3,r2
   16850:	e0bfdd17 	ldw	r2,-140(fp)
   16854:	1885883a 	add	r2,r3,r2
   16858:	e0bfdc15 	stw	r2,-144(fp)

		/* Final output stage */

		wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   1685c:	e0ffe017 	ldw	r3,-128(fp)
   16860:	e0bfdb17 	ldw	r2,-148(fp)
   16864:	1885883a 	add	r2,r3,r2
   16868:	1007d2fa 	srai	r3,r2,11
   1686c:	e0bfd717 	ldw	r2,-164(fp)
   16870:	10c00015 	stw	r3,0(r2)
		wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   16874:	e0bfd717 	ldw	r2,-164(fp)
   16878:	10801404 	addi	r2,r2,80
   1687c:	e13fe017 	ldw	r4,-128(fp)
   16880:	e0ffdb17 	ldw	r3,-148(fp)
   16884:	20c7c83a 	sub	r3,r4,r3
   16888:	1807d2fa 	srai	r3,r3,11
   1688c:	10c00015 	stw	r3,0(r2)
		wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
   16890:	e0bfd717 	ldw	r2,-164(fp)
   16894:	10800504 	addi	r2,r2,20
   16898:	e13fe117 	ldw	r4,-124(fp)
   1689c:	e0ffdc17 	ldw	r3,-144(fp)
   168a0:	20c7883a 	add	r3,r4,r3
   168a4:	1807d2fa 	srai	r3,r3,11
   168a8:	10c00015 	stw	r3,0(r2)
		wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
   168ac:	e0bfd717 	ldw	r2,-164(fp)
   168b0:	10800f04 	addi	r2,r2,60
   168b4:	e13fe117 	ldw	r4,-124(fp)
   168b8:	e0ffdc17 	ldw	r3,-144(fp)
   168bc:	20c7c83a 	sub	r3,r4,r3
   168c0:	1807d2fa 	srai	r3,r3,11
   168c4:	10c00015 	stw	r3,0(r2)
		wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
   168c8:	e0bfd717 	ldw	r2,-164(fp)
   168cc:	10800a04 	addi	r2,r2,40
   168d0:	e0ffda17 	ldw	r3,-152(fp)
   168d4:	1807d2fa 	srai	r3,r3,11
   168d8:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
   168dc:	e0bfd817 	ldw	r2,-160(fp)
   168e0:	10800044 	addi	r2,r2,1
   168e4:	e0bfd815 	stw	r2,-160(fp)
   168e8:	e0bfd517 	ldw	r2,-172(fp)
   168ec:	10800084 	addi	r2,r2,2
   168f0:	e0bfd515 	stw	r2,-172(fp)
   168f4:	e0bfd617 	ldw	r2,-168(fp)
   168f8:	10800104 	addi	r2,r2,4
   168fc:	e0bfd615 	stw	r2,-168(fp)
   16900:	e0bfd717 	ldw	r2,-164(fp)
   16904:	10800104 	addi	r2,r2,4
   16908:	e0bfd715 	stw	r2,-164(fp)
   1690c:	e0bfd817 	ldw	r2,-160(fp)
   16910:	10800150 	cmplti	r2,r2,5
   16914:	103f571e 	bne	r2,zero,16674 <jpeg_idct_5x5+0x54>
		wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 5 rows from work array, store into output array. */

	wsptr = workspace;
   16918:	e0bfe304 	addi	r2,fp,-116
   1691c:	e0bfd715 	stw	r2,-164(fp)
	for (ctr = 0; ctr < 5; ctr++) {
   16920:	e03fd815 	stw	zero,-160(fp)
   16924:	00008f06 	br	16b64 <jpeg_idct_5x5+0x544>
		outptr = output_buf[ctr] + output_col;
   16928:	e0bfd817 	ldw	r2,-160(fp)
   1692c:	1085883a 	add	r2,r2,r2
   16930:	1085883a 	add	r2,r2,r2
   16934:	e0ffff17 	ldw	r3,-4(fp)
   16938:	1885883a 	add	r2,r3,r2
   1693c:	10c00017 	ldw	r3,0(r2)
   16940:	e0800217 	ldw	r2,8(fp)
   16944:	1885883a 	add	r2,r3,r2
   16948:	e0bfe215 	stw	r2,-120(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1694c:	e0bfd717 	ldw	r2,-164(fp)
   16950:	10800017 	ldw	r2,0(r2)
   16954:	10800404 	addi	r2,r2,16
   16958:	e0bfda15 	stw	r2,-152(fp)
		tmp12 <<= CONST_BITS;
   1695c:	e0bfda17 	ldw	r2,-152(fp)
   16960:	1004937a 	slli	r2,r2,13
   16964:	e0bfda15 	stw	r2,-152(fp)
		tmp0 = (INT32) wsptr[2];
   16968:	e0bfd717 	ldw	r2,-164(fp)
   1696c:	10800204 	addi	r2,r2,8
   16970:	10800017 	ldw	r2,0(r2)
   16974:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = (INT32) wsptr[4];
   16978:	e0bfd717 	ldw	r2,-164(fp)
   1697c:	10800404 	addi	r2,r2,16
   16980:	10800017 	ldw	r2,0(r2)
   16984:	e0bfdc15 	stw	r2,-144(fp)
		z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
   16988:	e0ffdb17 	ldw	r3,-148(fp)
   1698c:	e0bfdc17 	ldw	r2,-144(fp)
   16990:	1885883a 	add	r2,r3,r2
   16994:	1009883a 	mov	r4,r2
   16998:	01465304 	movi	r5,6476
   1699c:	002c1540 	call	2c154 <__mulsi3>
   169a0:	e0bfdd15 	stw	r2,-140(fp)
		z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
   169a4:	e0ffdb17 	ldw	r3,-148(fp)
   169a8:	e0bfdc17 	ldw	r2,-144(fp)
   169ac:	1885c83a 	sub	r2,r3,r2
   169b0:	1009883a 	mov	r4,r2
   169b4:	0142d404 	movi	r5,2896
   169b8:	002c1540 	call	2c154 <__mulsi3>
   169bc:	e0bfde15 	stw	r2,-136(fp)
		z3 = tmp12 + z2;
   169c0:	e0ffda17 	ldw	r3,-152(fp)
   169c4:	e0bfde17 	ldw	r2,-136(fp)
   169c8:	1885883a 	add	r2,r3,r2
   169cc:	e0bfdf15 	stw	r2,-132(fp)
		tmp10 = z3 + z1;
   169d0:	e0ffdf17 	ldw	r3,-132(fp)
   169d4:	e0bfdd17 	ldw	r2,-140(fp)
   169d8:	1885883a 	add	r2,r3,r2
   169dc:	e0bfe015 	stw	r2,-128(fp)
		tmp11 = z3 - z1;
   169e0:	e0ffdf17 	ldw	r3,-132(fp)
   169e4:	e0bfdd17 	ldw	r2,-140(fp)
   169e8:	1885c83a 	sub	r2,r3,r2
   169ec:	e0bfe115 	stw	r2,-124(fp)
		tmp12 -= z2 << 2;
   169f0:	e0bfde17 	ldw	r2,-136(fp)
   169f4:	1085883a 	add	r2,r2,r2
   169f8:	1085883a 	add	r2,r2,r2
   169fc:	e0ffda17 	ldw	r3,-152(fp)
   16a00:	1885c83a 	sub	r2,r3,r2
   16a04:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */

		z2 = (INT32) wsptr[1];
   16a08:	e0bfd717 	ldw	r2,-164(fp)
   16a0c:	10800104 	addi	r2,r2,4
   16a10:	10800017 	ldw	r2,0(r2)
   16a14:	e0bfde15 	stw	r2,-136(fp)
		z3 = (INT32) wsptr[3];
   16a18:	e0bfd717 	ldw	r2,-164(fp)
   16a1c:	10800304 	addi	r2,r2,12
   16a20:	10800017 	ldw	r2,0(r2)
   16a24:	e0bfdf15 	stw	r2,-132(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
   16a28:	e0ffde17 	ldw	r3,-136(fp)
   16a2c:	e0bfdf17 	ldw	r2,-132(fp)
   16a30:	1885883a 	add	r2,r3,r2
   16a34:	1009883a 	mov	r4,r2
   16a38:	0146a684 	movi	r5,6810
   16a3c:	002c1540 	call	2c154 <__mulsi3>
   16a40:	e0bfdd15 	stw	r2,-140(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
   16a44:	e13fde17 	ldw	r4,-136(fp)
   16a48:	01441c44 	movi	r5,4209
   16a4c:	002c1540 	call	2c154 <__mulsi3>
   16a50:	1007883a 	mov	r3,r2
   16a54:	e0bfdd17 	ldw	r2,-140(fp)
   16a58:	1885883a 	add	r2,r3,r2
   16a5c:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
   16a60:	e13fdf17 	ldw	r4,-132(fp)
   16a64:	016e9704 	movi	r5,-17828
   16a68:	002c1540 	call	2c154 <__mulsi3>
   16a6c:	1007883a 	mov	r3,r2
   16a70:	e0bfdd17 	ldw	r2,-140(fp)
   16a74:	1885883a 	add	r2,r3,r2
   16a78:	e0bfdc15 	stw	r2,-144(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   16a7c:	e0ffe017 	ldw	r3,-128(fp)
   16a80:	e0bfdb17 	ldw	r2,-148(fp)
   16a84:	1885883a 	add	r2,r3,r2
   16a88:	1005d4ba 	srai	r2,r2,18
   16a8c:	1080ffcc 	andi	r2,r2,1023
   16a90:	e0ffd917 	ldw	r3,-156(fp)
   16a94:	1885883a 	add	r2,r3,r2
   16a98:	10c00003 	ldbu	r3,0(r2)
   16a9c:	e0bfe217 	ldw	r2,-120(fp)
   16aa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   16aa4:	e0bfe217 	ldw	r2,-120(fp)
   16aa8:	10800104 	addi	r2,r2,4
   16aac:	e13fe017 	ldw	r4,-128(fp)
   16ab0:	e0ffdb17 	ldw	r3,-148(fp)
   16ab4:	20c7c83a 	sub	r3,r4,r3
   16ab8:	1807d4ba 	srai	r3,r3,18
   16abc:	18c0ffcc 	andi	r3,r3,1023
   16ac0:	e13fd917 	ldw	r4,-156(fp)
   16ac4:	20c7883a 	add	r3,r4,r3
   16ac8:	18c00003 	ldbu	r3,0(r3)
   16acc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
   16ad0:	e0bfe217 	ldw	r2,-120(fp)
   16ad4:	10800044 	addi	r2,r2,1
   16ad8:	e13fe117 	ldw	r4,-124(fp)
   16adc:	e0ffdc17 	ldw	r3,-144(fp)
   16ae0:	20c7883a 	add	r3,r4,r3
   16ae4:	1807d4ba 	srai	r3,r3,18
   16ae8:	18c0ffcc 	andi	r3,r3,1023
   16aec:	e13fd917 	ldw	r4,-156(fp)
   16af0:	20c7883a 	add	r3,r4,r3
   16af4:	18c00003 	ldbu	r3,0(r3)
   16af8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
   16afc:	e0bfe217 	ldw	r2,-120(fp)
   16b00:	108000c4 	addi	r2,r2,3
   16b04:	e13fe117 	ldw	r4,-124(fp)
   16b08:	e0ffdc17 	ldw	r3,-144(fp)
   16b0c:	20c7c83a 	sub	r3,r4,r3
   16b10:	1807d4ba 	srai	r3,r3,18
   16b14:	18c0ffcc 	andi	r3,r3,1023
   16b18:	e13fd917 	ldw	r4,-156(fp)
   16b1c:	20c7883a 	add	r3,r4,r3
   16b20:	18c00003 	ldbu	r3,0(r3)
   16b24:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
   16b28:	e0bfe217 	ldw	r2,-120(fp)
   16b2c:	10800084 	addi	r2,r2,2
   16b30:	e0ffda17 	ldw	r3,-152(fp)
   16b34:	1807d4ba 	srai	r3,r3,18
   16b38:	18c0ffcc 	andi	r3,r3,1023
   16b3c:	e13fd917 	ldw	r4,-156(fp)
   16b40:	20c7883a 	add	r3,r4,r3
   16b44:	18c00003 	ldbu	r3,0(r3)
   16b48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
   16b4c:	e0bfd717 	ldw	r2,-164(fp)
   16b50:	10800504 	addi	r2,r2,20
   16b54:	e0bfd715 	stw	r2,-164(fp)
	}

	/* Pass 2: process 5 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++) {
   16b58:	e0bfd817 	ldw	r2,-160(fp)
   16b5c:	10800044 	addi	r2,r2,1
   16b60:	e0bfd815 	stw	r2,-160(fp)
   16b64:	e0bfd817 	ldw	r2,-160(fp)
   16b68:	10800150 	cmplti	r2,r2,5
   16b6c:	103f6e1e 	bne	r2,zero,16928 <jpeg_idct_5x5+0x308>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
	}
}
   16b70:	e037883a 	mov	sp,fp
   16b74:	dfc00117 	ldw	ra,4(sp)
   16b78:	df000017 	ldw	fp,0(sp)
   16b7c:	dec00204 	addi	sp,sp,8
   16b80:	f800283a 	ret

00016b84 <jpeg_idct_4x4>:

GLOBAL(void)
	jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   16b84:	deffdd04 	addi	sp,sp,-140
   16b88:	dfc02215 	stw	ra,136(sp)
   16b8c:	df002115 	stw	fp,132(sp)
   16b90:	df002104 	addi	fp,sp,132
   16b94:	e13ffc15 	stw	r4,-16(fp)
   16b98:	e17ffd15 	stw	r5,-12(fp)
   16b9c:	e1bffe15 	stw	r6,-8(fp)
   16ba0:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   16ba4:	e0bffc17 	ldw	r2,-16(fp)
   16ba8:	10804917 	ldw	r2,292(r2)
   16bac:	10802004 	addi	r2,r2,128
   16bb0:	e0bfe315 	stw	r2,-116(fp)
	int workspace[4*4];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   16bb4:	e0bffe17 	ldw	r2,-8(fp)
   16bb8:	e0bfdf15 	stw	r2,-132(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   16bbc:	e0bffd17 	ldw	r2,-12(fp)
   16bc0:	10801517 	ldw	r2,84(r2)
   16bc4:	e0bfe015 	stw	r2,-128(fp)
	wsptr = workspace;
   16bc8:	e0bfec04 	addi	r2,fp,-80
   16bcc:	e0bfe115 	stw	r2,-124(fp)
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
   16bd0:	e03fe215 	stw	zero,-120(fp)
   16bd4:	00007b06 	br	16dc4 <jpeg_idct_4x4+0x240>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   16bd8:	e0bfdf17 	ldw	r2,-132(fp)
   16bdc:	1080000b 	ldhu	r2,0(r2)
   16be0:	10ffffcc 	andi	r3,r2,65535
   16be4:	18e0001c 	xori	r3,r3,32768
   16be8:	18e00004 	addi	r3,r3,-32768
   16bec:	e0bfe017 	ldw	r2,-128(fp)
   16bf0:	10800017 	ldw	r2,0(r2)
   16bf4:	1809883a 	mov	r4,r3
   16bf8:	100b883a 	mov	r5,r2
   16bfc:	002c1540 	call	2c154 <__mulsi3>
   16c00:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   16c04:	e0bfdf17 	ldw	r2,-132(fp)
   16c08:	10800804 	addi	r2,r2,32
   16c0c:	1080000b 	ldhu	r2,0(r2)
   16c10:	10ffffcc 	andi	r3,r2,65535
   16c14:	18e0001c 	xori	r3,r3,32768
   16c18:	18e00004 	addi	r3,r3,-32768
   16c1c:	e0bfe017 	ldw	r2,-128(fp)
   16c20:	10801004 	addi	r2,r2,64
   16c24:	10800017 	ldw	r2,0(r2)
   16c28:	1809883a 	mov	r4,r3
   16c2c:	100b883a 	mov	r5,r2
   16c30:	002c1540 	call	2c154 <__mulsi3>
   16c34:	e0bfe515 	stw	r2,-108(fp)

		tmp10 = (tmp0 + tmp2) << PASS1_BITS;
   16c38:	e0ffe417 	ldw	r3,-112(fp)
   16c3c:	e0bfe517 	ldw	r2,-108(fp)
   16c40:	1885883a 	add	r2,r3,r2
   16c44:	1085883a 	add	r2,r2,r2
   16c48:	1085883a 	add	r2,r2,r2
   16c4c:	e0bfe615 	stw	r2,-104(fp)
		tmp12 = (tmp0 - tmp2) << PASS1_BITS;
   16c50:	e0ffe417 	ldw	r3,-112(fp)
   16c54:	e0bfe517 	ldw	r2,-108(fp)
   16c58:	1885c83a 	sub	r2,r3,r2
   16c5c:	1085883a 	add	r2,r2,r2
   16c60:	1085883a 	add	r2,r2,r2
   16c64:	e0bfe715 	stw	r2,-100(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   16c68:	e0bfdf17 	ldw	r2,-132(fp)
   16c6c:	10800404 	addi	r2,r2,16
   16c70:	1080000b 	ldhu	r2,0(r2)
   16c74:	10ffffcc 	andi	r3,r2,65535
   16c78:	18e0001c 	xori	r3,r3,32768
   16c7c:	18e00004 	addi	r3,r3,-32768
   16c80:	e0bfe017 	ldw	r2,-128(fp)
   16c84:	10800804 	addi	r2,r2,32
   16c88:	10800017 	ldw	r2,0(r2)
   16c8c:	1809883a 	mov	r4,r3
   16c90:	100b883a 	mov	r5,r2
   16c94:	002c1540 	call	2c154 <__mulsi3>
   16c98:	e0bfe815 	stw	r2,-96(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   16c9c:	e0bfdf17 	ldw	r2,-132(fp)
   16ca0:	10800c04 	addi	r2,r2,48
   16ca4:	1080000b 	ldhu	r2,0(r2)
   16ca8:	10ffffcc 	andi	r3,r2,65535
   16cac:	18e0001c 	xori	r3,r3,32768
   16cb0:	18e00004 	addi	r3,r3,-32768
   16cb4:	e0bfe017 	ldw	r2,-128(fp)
   16cb8:	10801804 	addi	r2,r2,96
   16cbc:	10800017 	ldw	r2,0(r2)
   16cc0:	1809883a 	mov	r4,r3
   16cc4:	100b883a 	mov	r5,r2
   16cc8:	002c1540 	call	2c154 <__mulsi3>
   16ccc:	e0bfe915 	stw	r2,-92(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
   16cd0:	e0ffe817 	ldw	r3,-96(fp)
   16cd4:	e0bfe917 	ldw	r2,-92(fp)
   16cd8:	1885883a 	add	r2,r3,r2
   16cdc:	1009883a 	mov	r4,r2
   16ce0:	01445444 	movi	r5,4433
   16ce4:	002c1540 	call	2c154 <__mulsi3>
   16ce8:	e0bfea15 	stw	r2,-88(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   16cec:	e0bfea17 	ldw	r2,-88(fp)
   16cf0:	10810004 	addi	r2,r2,1024
   16cf4:	e0bfea15 	stw	r2,-88(fp)
		tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
   16cf8:	e13fe817 	ldw	r4,-96(fp)
   16cfc:	01461f84 	movi	r5,6270
   16d00:	002c1540 	call	2c154 <__mulsi3>
   16d04:	1007883a 	mov	r3,r2
   16d08:	e0bfea17 	ldw	r2,-88(fp)
   16d0c:	1885883a 	add	r2,r3,r2
   16d10:	1005d2fa 	srai	r2,r2,11
   16d14:	e0bfe415 	stw	r2,-112(fp)
			CONST_BITS-PASS1_BITS);
		tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
   16d18:	e13fe917 	ldw	r4,-92(fp)
   16d1c:	017137c4 	movi	r5,-15137
   16d20:	002c1540 	call	2c154 <__mulsi3>
   16d24:	1007883a 	mov	r3,r2
   16d28:	e0bfea17 	ldw	r2,-88(fp)
   16d2c:	1885883a 	add	r2,r3,r2
   16d30:	1005d2fa 	srai	r2,r2,11
   16d34:	e0bfe515 	stw	r2,-108(fp)
			CONST_BITS-PASS1_BITS);

		/* Final output stage */

		wsptr[4*0] = (int) (tmp10 + tmp0);
   16d38:	e0ffe617 	ldw	r3,-104(fp)
   16d3c:	e0bfe417 	ldw	r2,-112(fp)
   16d40:	1887883a 	add	r3,r3,r2
   16d44:	e0bfe117 	ldw	r2,-124(fp)
   16d48:	10c00015 	stw	r3,0(r2)
		wsptr[4*3] = (int) (tmp10 - tmp0);
   16d4c:	e0bfe117 	ldw	r2,-124(fp)
   16d50:	10800c04 	addi	r2,r2,48
   16d54:	e13fe617 	ldw	r4,-104(fp)
   16d58:	e0ffe417 	ldw	r3,-112(fp)
   16d5c:	20c7c83a 	sub	r3,r4,r3
   16d60:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = (int) (tmp12 + tmp2);
   16d64:	e0bfe117 	ldw	r2,-124(fp)
   16d68:	10800404 	addi	r2,r2,16
   16d6c:	e13fe717 	ldw	r4,-100(fp)
   16d70:	e0ffe517 	ldw	r3,-108(fp)
   16d74:	20c7883a 	add	r3,r4,r3
   16d78:	10c00015 	stw	r3,0(r2)
		wsptr[4*2] = (int) (tmp12 - tmp2);
   16d7c:	e0bfe117 	ldw	r2,-124(fp)
   16d80:	10800804 	addi	r2,r2,32
   16d84:	e13fe717 	ldw	r4,-100(fp)
   16d88:	e0ffe517 	ldw	r3,-108(fp)
   16d8c:	20c7c83a 	sub	r3,r4,r3
   16d90:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
   16d94:	e0bfe217 	ldw	r2,-120(fp)
   16d98:	10800044 	addi	r2,r2,1
   16d9c:	e0bfe215 	stw	r2,-120(fp)
   16da0:	e0bfdf17 	ldw	r2,-132(fp)
   16da4:	10800084 	addi	r2,r2,2
   16da8:	e0bfdf15 	stw	r2,-132(fp)
   16dac:	e0bfe017 	ldw	r2,-128(fp)
   16db0:	10800104 	addi	r2,r2,4
   16db4:	e0bfe015 	stw	r2,-128(fp)
   16db8:	e0bfe117 	ldw	r2,-124(fp)
   16dbc:	10800104 	addi	r2,r2,4
   16dc0:	e0bfe115 	stw	r2,-124(fp)
   16dc4:	e0bfe217 	ldw	r2,-120(fp)
   16dc8:	10800110 	cmplti	r2,r2,4
   16dcc:	103f821e 	bne	r2,zero,16bd8 <jpeg_idct_4x4+0x54>
		wsptr[4*2] = (int) (tmp12 - tmp2);
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
   16dd0:	e0bfec04 	addi	r2,fp,-80
   16dd4:	e0bfe115 	stw	r2,-124(fp)
	for (ctr = 0; ctr < 4; ctr++) {
   16dd8:	e03fe215 	stw	zero,-120(fp)
   16ddc:	00006906 	br	16f84 <jpeg_idct_4x4+0x400>
		outptr = output_buf[ctr] + output_col;
   16de0:	e0bfe217 	ldw	r2,-120(fp)
   16de4:	1085883a 	add	r2,r2,r2
   16de8:	1085883a 	add	r2,r2,r2
   16dec:	e0ffff17 	ldw	r3,-4(fp)
   16df0:	1885883a 	add	r2,r3,r2
   16df4:	10c00017 	ldw	r3,0(r2)
   16df8:	e0800217 	ldw	r2,8(fp)
   16dfc:	1885883a 	add	r2,r3,r2
   16e00:	e0bfeb15 	stw	r2,-84(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   16e04:	e0bfe117 	ldw	r2,-124(fp)
   16e08:	10800017 	ldw	r2,0(r2)
   16e0c:	10800404 	addi	r2,r2,16
   16e10:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = (INT32) wsptr[2];
   16e14:	e0bfe117 	ldw	r2,-124(fp)
   16e18:	10800204 	addi	r2,r2,8
   16e1c:	10800017 	ldw	r2,0(r2)
   16e20:	e0bfe515 	stw	r2,-108(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
   16e24:	e0ffe417 	ldw	r3,-112(fp)
   16e28:	e0bfe517 	ldw	r2,-108(fp)
   16e2c:	1885883a 	add	r2,r3,r2
   16e30:	1004937a 	slli	r2,r2,13
   16e34:	e0bfe615 	stw	r2,-104(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
   16e38:	e0ffe417 	ldw	r3,-112(fp)
   16e3c:	e0bfe517 	ldw	r2,-108(fp)
   16e40:	1885c83a 	sub	r2,r3,r2
   16e44:	1004937a 	slli	r2,r2,13
   16e48:	e0bfe715 	stw	r2,-100(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = (INT32) wsptr[1];
   16e4c:	e0bfe117 	ldw	r2,-124(fp)
   16e50:	10800104 	addi	r2,r2,4
   16e54:	10800017 	ldw	r2,0(r2)
   16e58:	e0bfe815 	stw	r2,-96(fp)
		z3 = (INT32) wsptr[3];
   16e5c:	e0bfe117 	ldw	r2,-124(fp)
   16e60:	10800304 	addi	r2,r2,12
   16e64:	10800017 	ldw	r2,0(r2)
   16e68:	e0bfe915 	stw	r2,-92(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
   16e6c:	e0ffe817 	ldw	r3,-96(fp)
   16e70:	e0bfe917 	ldw	r2,-92(fp)
   16e74:	1885883a 	add	r2,r3,r2
   16e78:	1009883a 	mov	r4,r2
   16e7c:	01445444 	movi	r5,4433
   16e80:	002c1540 	call	2c154 <__mulsi3>
   16e84:	e0bfea15 	stw	r2,-88(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
   16e88:	e13fe817 	ldw	r4,-96(fp)
   16e8c:	01461f84 	movi	r5,6270
   16e90:	002c1540 	call	2c154 <__mulsi3>
   16e94:	1007883a 	mov	r3,r2
   16e98:	e0bfea17 	ldw	r2,-88(fp)
   16e9c:	1885883a 	add	r2,r3,r2
   16ea0:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
   16ea4:	e13fe917 	ldw	r4,-92(fp)
   16ea8:	017137c4 	movi	r5,-15137
   16eac:	002c1540 	call	2c154 <__mulsi3>
   16eb0:	1007883a 	mov	r3,r2
   16eb4:	e0bfea17 	ldw	r2,-88(fp)
   16eb8:	1885883a 	add	r2,r3,r2
   16ebc:	e0bfe515 	stw	r2,-108(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   16ec0:	e0ffe617 	ldw	r3,-104(fp)
   16ec4:	e0bfe417 	ldw	r2,-112(fp)
   16ec8:	1885883a 	add	r2,r3,r2
   16ecc:	1005d4ba 	srai	r2,r2,18
   16ed0:	1080ffcc 	andi	r2,r2,1023
   16ed4:	e0ffe317 	ldw	r3,-116(fp)
   16ed8:	1885883a 	add	r2,r3,r2
   16edc:	10c00003 	ldbu	r3,0(r2)
   16ee0:	e0bfeb17 	ldw	r2,-84(fp)
   16ee4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   16ee8:	e0bfeb17 	ldw	r2,-84(fp)
   16eec:	108000c4 	addi	r2,r2,3
   16ef0:	e13fe617 	ldw	r4,-104(fp)
   16ef4:	e0ffe417 	ldw	r3,-112(fp)
   16ef8:	20c7c83a 	sub	r3,r4,r3
   16efc:	1807d4ba 	srai	r3,r3,18
   16f00:	18c0ffcc 	andi	r3,r3,1023
   16f04:	e13fe317 	ldw	r4,-116(fp)
   16f08:	20c7883a 	add	r3,r4,r3
   16f0c:	18c00003 	ldbu	r3,0(r3)
   16f10:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   16f14:	e0bfeb17 	ldw	r2,-84(fp)
   16f18:	10800044 	addi	r2,r2,1
   16f1c:	e13fe717 	ldw	r4,-100(fp)
   16f20:	e0ffe517 	ldw	r3,-108(fp)
   16f24:	20c7883a 	add	r3,r4,r3
   16f28:	1807d4ba 	srai	r3,r3,18
   16f2c:	18c0ffcc 	andi	r3,r3,1023
   16f30:	e13fe317 	ldw	r4,-116(fp)
   16f34:	20c7883a 	add	r3,r4,r3
   16f38:	18c00003 	ldbu	r3,0(r3)
   16f3c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   16f40:	e0bfeb17 	ldw	r2,-84(fp)
   16f44:	10800084 	addi	r2,r2,2
   16f48:	e13fe717 	ldw	r4,-100(fp)
   16f4c:	e0ffe517 	ldw	r3,-108(fp)
   16f50:	20c7c83a 	sub	r3,r4,r3
   16f54:	1807d4ba 	srai	r3,r3,18
   16f58:	18c0ffcc 	andi	r3,r3,1023
   16f5c:	e13fe317 	ldw	r4,-116(fp)
   16f60:	20c7883a 	add	r3,r4,r3
   16f64:	18c00003 	ldbu	r3,0(r3)
   16f68:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
   16f6c:	e0bfe117 	ldw	r2,-124(fp)
   16f70:	10800404 	addi	r2,r2,16
   16f74:	e0bfe115 	stw	r2,-124(fp)
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
   16f78:	e0bfe217 	ldw	r2,-120(fp)
   16f7c:	10800044 	addi	r2,r2,1
   16f80:	e0bfe215 	stw	r2,-120(fp)
   16f84:	e0bfe217 	ldw	r2,-120(fp)
   16f88:	10800110 	cmplti	r2,r2,4
   16f8c:	103f941e 	bne	r2,zero,16de0 <jpeg_idct_4x4+0x25c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
   16f90:	e037883a 	mov	sp,fp
   16f94:	dfc00117 	ldw	ra,4(sp)
   16f98:	df000017 	ldw	fp,0(sp)
   16f9c:	dec00204 	addi	sp,sp,8
   16fa0:	f800283a 	ret

00016fa4 <jpeg_idct_3x3>:

GLOBAL(void)
	jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   16fa4:	deffe704 	addi	sp,sp,-100
   16fa8:	dfc01815 	stw	ra,96(sp)
   16fac:	df001715 	stw	fp,92(sp)
   16fb0:	df001704 	addi	fp,sp,92
   16fb4:	e13ffc15 	stw	r4,-16(fp)
   16fb8:	e17ffd15 	stw	r5,-12(fp)
   16fbc:	e1bffe15 	stw	r6,-8(fp)
   16fc0:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp2, tmp10, tmp12;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   16fc4:	e0bffc17 	ldw	r2,-16(fp)
   16fc8:	10804917 	ldw	r2,292(r2)
   16fcc:	10802004 	addi	r2,r2,128
   16fd0:	e0bfed15 	stw	r2,-76(fp)
	int workspace[3*3];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   16fd4:	e0bffe17 	ldw	r2,-8(fp)
   16fd8:	e0bfe915 	stw	r2,-92(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   16fdc:	e0bffd17 	ldw	r2,-12(fp)
   16fe0:	10801517 	ldw	r2,84(r2)
   16fe4:	e0bfea15 	stw	r2,-88(fp)
	wsptr = workspace;
   16fe8:	e0bff304 	addi	r2,fp,-52
   16fec:	e0bfeb15 	stw	r2,-84(fp)
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
   16ff0:	e03fec15 	stw	zero,-80(fp)
   16ff4:	00005b06 	br	17164 <jpeg_idct_3x3+0x1c0>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   16ff8:	e0bfe917 	ldw	r2,-92(fp)
   16ffc:	1080000b 	ldhu	r2,0(r2)
   17000:	10ffffcc 	andi	r3,r2,65535
   17004:	18e0001c 	xori	r3,r3,32768
   17008:	18e00004 	addi	r3,r3,-32768
   1700c:	e0bfea17 	ldw	r2,-88(fp)
   17010:	10800017 	ldw	r2,0(r2)
   17014:	1809883a 	mov	r4,r3
   17018:	100b883a 	mov	r5,r2
   1701c:	002c1540 	call	2c154 <__mulsi3>
   17020:	e0bfee15 	stw	r2,-72(fp)
		tmp0 <<= CONST_BITS;
   17024:	e0bfee17 	ldw	r2,-72(fp)
   17028:	1004937a 	slli	r2,r2,13
   1702c:	e0bfee15 	stw	r2,-72(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   17030:	e0bfee17 	ldw	r2,-72(fp)
   17034:	10810004 	addi	r2,r2,1024
   17038:	e0bfee15 	stw	r2,-72(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1703c:	e0bfe917 	ldw	r2,-92(fp)
   17040:	10800804 	addi	r2,r2,32
   17044:	1080000b 	ldhu	r2,0(r2)
   17048:	10ffffcc 	andi	r3,r2,65535
   1704c:	18e0001c 	xori	r3,r3,32768
   17050:	18e00004 	addi	r3,r3,-32768
   17054:	e0bfea17 	ldw	r2,-88(fp)
   17058:	10801004 	addi	r2,r2,64
   1705c:	10800017 	ldw	r2,0(r2)
   17060:	1809883a 	mov	r4,r3
   17064:	100b883a 	mov	r5,r2
   17068:	002c1540 	call	2c154 <__mulsi3>
   1706c:	e0bfef15 	stw	r2,-68(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
   17070:	e13fef17 	ldw	r4,-68(fp)
   17074:	0145a844 	movi	r5,5793
   17078:	002c1540 	call	2c154 <__mulsi3>
   1707c:	e0bff015 	stw	r2,-64(fp)
		tmp10 = tmp0 + tmp12;
   17080:	e0ffee17 	ldw	r3,-72(fp)
   17084:	e0bff017 	ldw	r2,-64(fp)
   17088:	1885883a 	add	r2,r3,r2
   1708c:	e0bff115 	stw	r2,-60(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
   17090:	e0ffee17 	ldw	r3,-72(fp)
   17094:	e0bff017 	ldw	r2,-64(fp)
   17098:	1887c83a 	sub	r3,r3,r2
   1709c:	e0bff017 	ldw	r2,-64(fp)
   170a0:	1885c83a 	sub	r2,r3,r2
   170a4:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   170a8:	e0bfe917 	ldw	r2,-92(fp)
   170ac:	10800404 	addi	r2,r2,16
   170b0:	1080000b 	ldhu	r2,0(r2)
   170b4:	10ffffcc 	andi	r3,r2,65535
   170b8:	18e0001c 	xori	r3,r3,32768
   170bc:	18e00004 	addi	r3,r3,-32768
   170c0:	e0bfea17 	ldw	r2,-88(fp)
   170c4:	10800804 	addi	r2,r2,32
   170c8:	10800017 	ldw	r2,0(r2)
   170cc:	1809883a 	mov	r4,r3
   170d0:	100b883a 	mov	r5,r2
   170d4:	002c1540 	call	2c154 <__mulsi3>
   170d8:	e0bff015 	stw	r2,-64(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
   170dc:	e13ff017 	ldw	r4,-64(fp)
   170e0:	0149cc44 	movi	r5,10033
   170e4:	002c1540 	call	2c154 <__mulsi3>
   170e8:	e0bfee15 	stw	r2,-72(fp)

		/* Final output stage */

		wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   170ec:	e0fff117 	ldw	r3,-60(fp)
   170f0:	e0bfee17 	ldw	r2,-72(fp)
   170f4:	1885883a 	add	r2,r3,r2
   170f8:	1007d2fa 	srai	r3,r2,11
   170fc:	e0bfeb17 	ldw	r2,-84(fp)
   17100:	10c00015 	stw	r3,0(r2)
		wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   17104:	e0bfeb17 	ldw	r2,-84(fp)
   17108:	10800604 	addi	r2,r2,24
   1710c:	e13ff117 	ldw	r4,-60(fp)
   17110:	e0ffee17 	ldw	r3,-72(fp)
   17114:	20c7c83a 	sub	r3,r4,r3
   17118:	1807d2fa 	srai	r3,r3,11
   1711c:	10c00015 	stw	r3,0(r2)
		wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
   17120:	e0bfeb17 	ldw	r2,-84(fp)
   17124:	10800304 	addi	r2,r2,12
   17128:	e0ffef17 	ldw	r3,-68(fp)
   1712c:	1807d2fa 	srai	r3,r3,11
   17130:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
   17134:	e0bfec17 	ldw	r2,-80(fp)
   17138:	10800044 	addi	r2,r2,1
   1713c:	e0bfec15 	stw	r2,-80(fp)
   17140:	e0bfe917 	ldw	r2,-92(fp)
   17144:	10800084 	addi	r2,r2,2
   17148:	e0bfe915 	stw	r2,-92(fp)
   1714c:	e0bfea17 	ldw	r2,-88(fp)
   17150:	10800104 	addi	r2,r2,4
   17154:	e0bfea15 	stw	r2,-88(fp)
   17158:	e0bfeb17 	ldw	r2,-84(fp)
   1715c:	10800104 	addi	r2,r2,4
   17160:	e0bfeb15 	stw	r2,-84(fp)
   17164:	e0bfec17 	ldw	r2,-80(fp)
   17168:	108000d0 	cmplti	r2,r2,3
   1716c:	103fa21e 	bne	r2,zero,16ff8 <jpeg_idct_3x3+0x54>
		wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 3 rows from work array, store into output array. */

	wsptr = workspace;
   17170:	e0bff304 	addi	r2,fp,-52
   17174:	e0bfeb15 	stw	r2,-84(fp)
	for (ctr = 0; ctr < 3; ctr++) {
   17178:	e03fec15 	stw	zero,-80(fp)
   1717c:	00004e06 	br	172b8 <jpeg_idct_3x3+0x314>
		outptr = output_buf[ctr] + output_col;
   17180:	e0bfec17 	ldw	r2,-80(fp)
   17184:	1085883a 	add	r2,r2,r2
   17188:	1085883a 	add	r2,r2,r2
   1718c:	e0ffff17 	ldw	r3,-4(fp)
   17190:	1885883a 	add	r2,r3,r2
   17194:	10c00017 	ldw	r3,0(r2)
   17198:	e0800217 	ldw	r2,8(fp)
   1719c:	1885883a 	add	r2,r3,r2
   171a0:	e0bff215 	stw	r2,-56(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   171a4:	e0bfeb17 	ldw	r2,-84(fp)
   171a8:	10800017 	ldw	r2,0(r2)
   171ac:	10800404 	addi	r2,r2,16
   171b0:	e0bfee15 	stw	r2,-72(fp)
		tmp0 <<= CONST_BITS;
   171b4:	e0bfee17 	ldw	r2,-72(fp)
   171b8:	1004937a 	slli	r2,r2,13
   171bc:	e0bfee15 	stw	r2,-72(fp)
		tmp2 = (INT32) wsptr[2];
   171c0:	e0bfeb17 	ldw	r2,-84(fp)
   171c4:	10800204 	addi	r2,r2,8
   171c8:	10800017 	ldw	r2,0(r2)
   171cc:	e0bfef15 	stw	r2,-68(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
   171d0:	e13fef17 	ldw	r4,-68(fp)
   171d4:	0145a844 	movi	r5,5793
   171d8:	002c1540 	call	2c154 <__mulsi3>
   171dc:	e0bff015 	stw	r2,-64(fp)
		tmp10 = tmp0 + tmp12;
   171e0:	e0ffee17 	ldw	r3,-72(fp)
   171e4:	e0bff017 	ldw	r2,-64(fp)
   171e8:	1885883a 	add	r2,r3,r2
   171ec:	e0bff115 	stw	r2,-60(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
   171f0:	e0ffee17 	ldw	r3,-72(fp)
   171f4:	e0bff017 	ldw	r2,-64(fp)
   171f8:	1887c83a 	sub	r3,r3,r2
   171fc:	e0bff017 	ldw	r2,-64(fp)
   17200:	1885c83a 	sub	r2,r3,r2
   17204:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */

		tmp12 = (INT32) wsptr[1];
   17208:	e0bfeb17 	ldw	r2,-84(fp)
   1720c:	10800104 	addi	r2,r2,4
   17210:	10800017 	ldw	r2,0(r2)
   17214:	e0bff015 	stw	r2,-64(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
   17218:	e13ff017 	ldw	r4,-64(fp)
   1721c:	0149cc44 	movi	r5,10033
   17220:	002c1540 	call	2c154 <__mulsi3>
   17224:	e0bfee15 	stw	r2,-72(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   17228:	e0fff117 	ldw	r3,-60(fp)
   1722c:	e0bfee17 	ldw	r2,-72(fp)
   17230:	1885883a 	add	r2,r3,r2
   17234:	1005d4ba 	srai	r2,r2,18
   17238:	1080ffcc 	andi	r2,r2,1023
   1723c:	e0ffed17 	ldw	r3,-76(fp)
   17240:	1885883a 	add	r2,r3,r2
   17244:	10c00003 	ldbu	r3,0(r2)
   17248:	e0bff217 	ldw	r2,-56(fp)
   1724c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   17250:	e0bff217 	ldw	r2,-56(fp)
   17254:	10800084 	addi	r2,r2,2
   17258:	e13ff117 	ldw	r4,-60(fp)
   1725c:	e0ffee17 	ldw	r3,-72(fp)
   17260:	20c7c83a 	sub	r3,r4,r3
   17264:	1807d4ba 	srai	r3,r3,18
   17268:	18c0ffcc 	andi	r3,r3,1023
   1726c:	e13fed17 	ldw	r4,-76(fp)
   17270:	20c7883a 	add	r3,r4,r3
   17274:	18c00003 	ldbu	r3,0(r3)
   17278:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
   1727c:	e0bff217 	ldw	r2,-56(fp)
   17280:	10800044 	addi	r2,r2,1
   17284:	e0ffef17 	ldw	r3,-68(fp)
   17288:	1807d4ba 	srai	r3,r3,18
   1728c:	18c0ffcc 	andi	r3,r3,1023
   17290:	e13fed17 	ldw	r4,-76(fp)
   17294:	20c7883a 	add	r3,r4,r3
   17298:	18c00003 	ldbu	r3,0(r3)
   1729c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
   172a0:	e0bfeb17 	ldw	r2,-84(fp)
   172a4:	10800304 	addi	r2,r2,12
   172a8:	e0bfeb15 	stw	r2,-84(fp)
	}

	/* Pass 2: process 3 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++) {
   172ac:	e0bfec17 	ldw	r2,-80(fp)
   172b0:	10800044 	addi	r2,r2,1
   172b4:	e0bfec15 	stw	r2,-80(fp)
   172b8:	e0bfec17 	ldw	r2,-80(fp)
   172bc:	108000d0 	cmplti	r2,r2,3
   172c0:	103faf1e 	bne	r2,zero,17180 <jpeg_idct_3x3+0x1dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
	}
}
   172c4:	e037883a 	mov	sp,fp
   172c8:	dfc00117 	ldw	ra,4(sp)
   172cc:	df000017 	ldw	fp,0(sp)
   172d0:	dec00204 	addi	sp,sp,8
   172d4:	f800283a 	ret

000172d8 <jpeg_idct_2x2>:

GLOBAL(void)
	jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   172d8:	defff104 	addi	sp,sp,-60
   172dc:	dfc00e15 	stw	ra,56(sp)
   172e0:	df000d15 	stw	fp,52(sp)
   172e4:	df000d04 	addi	fp,sp,52
   172e8:	e13ffc15 	stw	r4,-16(fp)
   172ec:	e17ffd15 	stw	r5,-12(fp)
   172f0:	e1bffe15 	stw	r6,-8(fp)
   172f4:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   172f8:	e0bffc17 	ldw	r2,-16(fp)
   172fc:	10804917 	ldw	r2,292(r2)
   17300:	10802004 	addi	r2,r2,128
   17304:	e0bff315 	stw	r2,-52(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   17308:	e0bffd17 	ldw	r2,-12(fp)
   1730c:	10801517 	ldw	r2,84(r2)
   17310:	e0bff415 	stw	r2,-48(fp)

	/* Column 0 */
	tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
   17314:	e0bffe17 	ldw	r2,-8(fp)
   17318:	1080000b 	ldhu	r2,0(r2)
   1731c:	10ffffcc 	andi	r3,r2,65535
   17320:	18e0001c 	xori	r3,r3,32768
   17324:	18e00004 	addi	r3,r3,-32768
   17328:	e0bff417 	ldw	r2,-48(fp)
   1732c:	10800017 	ldw	r2,0(r2)
   17330:	1809883a 	mov	r4,r3
   17334:	100b883a 	mov	r5,r2
   17338:	002c1540 	call	2c154 <__mulsi3>
   1733c:	e0bff515 	stw	r2,-44(fp)
	tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
   17340:	e0bffe17 	ldw	r2,-8(fp)
   17344:	10800404 	addi	r2,r2,16
   17348:	1080000b 	ldhu	r2,0(r2)
   1734c:	10ffffcc 	andi	r3,r2,65535
   17350:	18e0001c 	xori	r3,r3,32768
   17354:	18e00004 	addi	r3,r3,-32768
   17358:	e0bff417 	ldw	r2,-48(fp)
   1735c:	10800804 	addi	r2,r2,32
   17360:	10800017 	ldw	r2,0(r2)
   17364:	1809883a 	mov	r4,r3
   17368:	100b883a 	mov	r5,r2
   1736c:	002c1540 	call	2c154 <__mulsi3>
   17370:	e0bff615 	stw	r2,-40(fp)
	/* Add fudge factor here for final descale. */
	tmp4 += ONE << 2;
   17374:	e0bff517 	ldw	r2,-44(fp)
   17378:	10800104 	addi	r2,r2,4
   1737c:	e0bff515 	stw	r2,-44(fp)

	tmp0 = tmp4 + tmp5;
   17380:	e0fff517 	ldw	r3,-44(fp)
   17384:	e0bff617 	ldw	r2,-40(fp)
   17388:	1885883a 	add	r2,r3,r2
   1738c:	e0bff715 	stw	r2,-36(fp)
	tmp2 = tmp4 - tmp5;
   17390:	e0fff517 	ldw	r3,-44(fp)
   17394:	e0bff617 	ldw	r2,-40(fp)
   17398:	1885c83a 	sub	r2,r3,r2
   1739c:	e0bff815 	stw	r2,-32(fp)

	/* Column 1 */
	tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
   173a0:	e0bffe17 	ldw	r2,-8(fp)
   173a4:	10800084 	addi	r2,r2,2
   173a8:	1080000b 	ldhu	r2,0(r2)
   173ac:	10ffffcc 	andi	r3,r2,65535
   173b0:	18e0001c 	xori	r3,r3,32768
   173b4:	18e00004 	addi	r3,r3,-32768
   173b8:	e0bff417 	ldw	r2,-48(fp)
   173bc:	10800104 	addi	r2,r2,4
   173c0:	10800017 	ldw	r2,0(r2)
   173c4:	1809883a 	mov	r4,r3
   173c8:	100b883a 	mov	r5,r2
   173cc:	002c1540 	call	2c154 <__mulsi3>
   173d0:	e0bff515 	stw	r2,-44(fp)
	tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
   173d4:	e0bffe17 	ldw	r2,-8(fp)
   173d8:	10800484 	addi	r2,r2,18
   173dc:	1080000b 	ldhu	r2,0(r2)
   173e0:	10ffffcc 	andi	r3,r2,65535
   173e4:	18e0001c 	xori	r3,r3,32768
   173e8:	18e00004 	addi	r3,r3,-32768
   173ec:	e0bff417 	ldw	r2,-48(fp)
   173f0:	10800904 	addi	r2,r2,36
   173f4:	10800017 	ldw	r2,0(r2)
   173f8:	1809883a 	mov	r4,r3
   173fc:	100b883a 	mov	r5,r2
   17400:	002c1540 	call	2c154 <__mulsi3>
   17404:	e0bff615 	stw	r2,-40(fp)

	tmp1 = tmp4 + tmp5;
   17408:	e0fff517 	ldw	r3,-44(fp)
   1740c:	e0bff617 	ldw	r2,-40(fp)
   17410:	1885883a 	add	r2,r3,r2
   17414:	e0bff915 	stw	r2,-28(fp)
	tmp3 = tmp4 - tmp5;
   17418:	e0fff517 	ldw	r3,-44(fp)
   1741c:	e0bff617 	ldw	r2,-40(fp)
   17420:	1885c83a 	sub	r2,r3,r2
   17424:	e0bffa15 	stw	r2,-24(fp)

	/* Pass 2: process 2 rows, store into output array. */

	/* Row 0 */
	outptr = output_buf[0] + output_col;
   17428:	e0bfff17 	ldw	r2,-4(fp)
   1742c:	10c00017 	ldw	r3,0(r2)
   17430:	e0800217 	ldw	r2,8(fp)
   17434:	1885883a 	add	r2,r3,r2
   17438:	e0bffb15 	stw	r2,-20(fp)

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
   1743c:	e0fff717 	ldw	r3,-36(fp)
   17440:	e0bff917 	ldw	r2,-28(fp)
   17444:	1885883a 	add	r2,r3,r2
   17448:	1005d0fa 	srai	r2,r2,3
   1744c:	1080ffcc 	andi	r2,r2,1023
   17450:	e0fff317 	ldw	r3,-52(fp)
   17454:	1885883a 	add	r2,r3,r2
   17458:	10c00003 	ldbu	r3,0(r2)
   1745c:	e0bffb17 	ldw	r2,-20(fp)
   17460:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
   17464:	e0bffb17 	ldw	r2,-20(fp)
   17468:	10800044 	addi	r2,r2,1
   1746c:	e13ff717 	ldw	r4,-36(fp)
   17470:	e0fff917 	ldw	r3,-28(fp)
   17474:	20c7c83a 	sub	r3,r4,r3
   17478:	1807d0fa 	srai	r3,r3,3
   1747c:	18c0ffcc 	andi	r3,r3,1023
   17480:	e13ff317 	ldw	r4,-52(fp)
   17484:	20c7883a 	add	r3,r4,r3
   17488:	18c00003 	ldbu	r3,0(r3)
   1748c:	10c00005 	stb	r3,0(r2)

	/* Row 1 */
	outptr = output_buf[1] + output_col;
   17490:	e0bfff17 	ldw	r2,-4(fp)
   17494:	10800104 	addi	r2,r2,4
   17498:	10c00017 	ldw	r3,0(r2)
   1749c:	e0800217 	ldw	r2,8(fp)
   174a0:	1885883a 	add	r2,r3,r2
   174a4:	e0bffb15 	stw	r2,-20(fp)

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
   174a8:	e0fff817 	ldw	r3,-32(fp)
   174ac:	e0bffa17 	ldw	r2,-24(fp)
   174b0:	1885883a 	add	r2,r3,r2
   174b4:	1005d0fa 	srai	r2,r2,3
   174b8:	1080ffcc 	andi	r2,r2,1023
   174bc:	e0fff317 	ldw	r3,-52(fp)
   174c0:	1885883a 	add	r2,r3,r2
   174c4:	10c00003 	ldbu	r3,0(r2)
   174c8:	e0bffb17 	ldw	r2,-20(fp)
   174cc:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
   174d0:	e0bffb17 	ldw	r2,-20(fp)
   174d4:	10800044 	addi	r2,r2,1
   174d8:	e13ff817 	ldw	r4,-32(fp)
   174dc:	e0fffa17 	ldw	r3,-24(fp)
   174e0:	20c7c83a 	sub	r3,r4,r3
   174e4:	1807d0fa 	srai	r3,r3,3
   174e8:	18c0ffcc 	andi	r3,r3,1023
   174ec:	e13ff317 	ldw	r4,-52(fp)
   174f0:	20c7883a 	add	r3,r4,r3
   174f4:	18c00003 	ldbu	r3,0(r3)
   174f8:	10c00005 	stb	r3,0(r2)
}
   174fc:	e037883a 	mov	sp,fp
   17500:	dfc00117 	ldw	ra,4(sp)
   17504:	df000017 	ldw	fp,0(sp)
   17508:	dec00204 	addi	sp,sp,8
   1750c:	f800283a 	ret

00017510 <jpeg_idct_1x1>:

GLOBAL(void)
	jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   17510:	defff704 	addi	sp,sp,-36
   17514:	dfc00815 	stw	ra,32(sp)
   17518:	df000715 	stw	fp,28(sp)
   1751c:	df000704 	addi	fp,sp,28
   17520:	e13ffc15 	stw	r4,-16(fp)
   17524:	e17ffd15 	stw	r5,-12(fp)
   17528:	e1bffe15 	stw	r6,-8(fp)
   1752c:	e1ffff15 	stw	r7,-4(fp)
	int dcval;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   17530:	e0bffc17 	ldw	r2,-16(fp)
   17534:	10804917 	ldw	r2,292(r2)
   17538:	10802004 	addi	r2,r2,128
   1753c:	e0bff915 	stw	r2,-28(fp)
	SHIFT_TEMPS

		/* 1x1 is trivial: just take the DC coefficient divided by 8. */
		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   17540:	e0bffd17 	ldw	r2,-12(fp)
   17544:	10801517 	ldw	r2,84(r2)
   17548:	e0bffa15 	stw	r2,-24(fp)
	dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
   1754c:	e0bffe17 	ldw	r2,-8(fp)
   17550:	1080000b 	ldhu	r2,0(r2)
   17554:	10ffffcc 	andi	r3,r2,65535
   17558:	18e0001c 	xori	r3,r3,32768
   1755c:	18e00004 	addi	r3,r3,-32768
   17560:	e0bffa17 	ldw	r2,-24(fp)
   17564:	10800017 	ldw	r2,0(r2)
   17568:	1809883a 	mov	r4,r3
   1756c:	100b883a 	mov	r5,r2
   17570:	002c1540 	call	2c154 <__mulsi3>
   17574:	e0bffb15 	stw	r2,-20(fp)
	dcval = (int) DESCALE((INT32) dcval, 3);
   17578:	e0bffb17 	ldw	r2,-20(fp)
   1757c:	10800104 	addi	r2,r2,4
   17580:	1005d0fa 	srai	r2,r2,3
   17584:	e0bffb15 	stw	r2,-20(fp)

	output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
   17588:	e0bfff17 	ldw	r2,-4(fp)
   1758c:	10c00017 	ldw	r3,0(r2)
   17590:	e0800217 	ldw	r2,8(fp)
   17594:	1885883a 	add	r2,r3,r2
   17598:	e0fffb17 	ldw	r3,-20(fp)
   1759c:	18c0ffcc 	andi	r3,r3,1023
   175a0:	e13ff917 	ldw	r4,-28(fp)
   175a4:	20c7883a 	add	r3,r4,r3
   175a8:	18c00003 	ldbu	r3,0(r3)
   175ac:	10c00005 	stb	r3,0(r2)
}
   175b0:	e037883a 	mov	sp,fp
   175b4:	dfc00117 	ldw	ra,4(sp)
   175b8:	df000017 	ldw	fp,0(sp)
   175bc:	dec00204 	addi	sp,sp,8
   175c0:	f800283a 	ret

000175c4 <jpeg_idct_9x9>:

GLOBAL(void)
	jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   175c4:	deff9f04 	addi	sp,sp,-388
   175c8:	dfc06015 	stw	ra,384(sp)
   175cc:	df005f15 	stw	fp,380(sp)
   175d0:	df005f04 	addi	fp,sp,380
   175d4:	e13ffc15 	stw	r4,-16(fp)
   175d8:	e17ffd15 	stw	r5,-12(fp)
   175dc:	e1bffe15 	stw	r6,-8(fp)
   175e0:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   175e4:	e0bffc17 	ldw	r2,-16(fp)
   175e8:	10804917 	ldw	r2,292(r2)
   175ec:	10802004 	addi	r2,r2,128
   175f0:	e0bfa515 	stw	r2,-364(fp)
	int workspace[8*9];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   175f4:	e0bffe17 	ldw	r2,-8(fp)
   175f8:	e0bfa115 	stw	r2,-380(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   175fc:	e0bffd17 	ldw	r2,-12(fp)
   17600:	10801517 	ldw	r2,84(r2)
   17604:	e0bfa215 	stw	r2,-376(fp)
	wsptr = workspace;
   17608:	e0bfb404 	addi	r2,fp,-304
   1760c:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   17610:	e03fa415 	stw	zero,-368(fp)
   17614:	00012806 	br	17ab8 <jpeg_idct_9x9+0x4f4>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   17618:	e0bfa117 	ldw	r2,-380(fp)
   1761c:	1080000b 	ldhu	r2,0(r2)
   17620:	10ffffcc 	andi	r3,r2,65535
   17624:	18e0001c 	xori	r3,r3,32768
   17628:	18e00004 	addi	r3,r3,-32768
   1762c:	e0bfa217 	ldw	r2,-376(fp)
   17630:	10800017 	ldw	r2,0(r2)
   17634:	1809883a 	mov	r4,r3
   17638:	100b883a 	mov	r5,r2
   1763c:	002c1540 	call	2c154 <__mulsi3>
   17640:	e0bfa615 	stw	r2,-360(fp)
		tmp0 <<= CONST_BITS;
   17644:	e0bfa617 	ldw	r2,-360(fp)
   17648:	1004937a 	slli	r2,r2,13
   1764c:	e0bfa615 	stw	r2,-360(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   17650:	e0bfa617 	ldw	r2,-360(fp)
   17654:	10810004 	addi	r2,r2,1024
   17658:	e0bfa615 	stw	r2,-360(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1765c:	e0bfa117 	ldw	r2,-380(fp)
   17660:	10800804 	addi	r2,r2,32
   17664:	1080000b 	ldhu	r2,0(r2)
   17668:	10ffffcc 	andi	r3,r2,65535
   1766c:	18e0001c 	xori	r3,r3,32768
   17670:	18e00004 	addi	r3,r3,-32768
   17674:	e0bfa217 	ldw	r2,-376(fp)
   17678:	10801004 	addi	r2,r2,64
   1767c:	10800017 	ldw	r2,0(r2)
   17680:	1809883a 	mov	r4,r3
   17684:	100b883a 	mov	r5,r2
   17688:	002c1540 	call	2c154 <__mulsi3>
   1768c:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   17690:	e0bfa117 	ldw	r2,-380(fp)
   17694:	10801004 	addi	r2,r2,64
   17698:	1080000b 	ldhu	r2,0(r2)
   1769c:	10ffffcc 	andi	r3,r2,65535
   176a0:	18e0001c 	xori	r3,r3,32768
   176a4:	18e00004 	addi	r3,r3,-32768
   176a8:	e0bfa217 	ldw	r2,-376(fp)
   176ac:	10802004 	addi	r2,r2,128
   176b0:	10800017 	ldw	r2,0(r2)
   176b4:	1809883a 	mov	r4,r3
   176b8:	100b883a 	mov	r5,r2
   176bc:	002c1540 	call	2c154 <__mulsi3>
   176c0:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   176c4:	e0bfa117 	ldw	r2,-380(fp)
   176c8:	10801804 	addi	r2,r2,96
   176cc:	1080000b 	ldhu	r2,0(r2)
   176d0:	10ffffcc 	andi	r3,r2,65535
   176d4:	18e0001c 	xori	r3,r3,32768
   176d8:	18e00004 	addi	r3,r3,-32768
   176dc:	e0bfa217 	ldw	r2,-376(fp)
   176e0:	10803004 	addi	r2,r2,192
   176e4:	10800017 	ldw	r2,0(r2)
   176e8:	1809883a 	mov	r4,r3
   176ec:	100b883a 	mov	r5,r2
   176f0:	002c1540 	call	2c154 <__mulsi3>
   176f4:	e0bfa915 	stw	r2,-348(fp)

		tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
   176f8:	e13fa917 	ldw	r4,-348(fp)
   176fc:	0145a844 	movi	r5,5793
   17700:	002c1540 	call	2c154 <__mulsi3>
   17704:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = tmp0 + tmp3;
   17708:	e0ffa617 	ldw	r3,-360(fp)
   1770c:	e0bfaa17 	ldw	r2,-344(fp)
   17710:	1885883a 	add	r2,r3,r2
   17714:	e0bfab15 	stw	r2,-340(fp)
		tmp2 = tmp0 - tmp3 - tmp3;
   17718:	e0ffa617 	ldw	r3,-360(fp)
   1771c:	e0bfaa17 	ldw	r2,-344(fp)
   17720:	1887c83a 	sub	r3,r3,r2
   17724:	e0bfaa17 	ldw	r2,-344(fp)
   17728:	1885c83a 	sub	r2,r3,r2
   1772c:	e0bfac15 	stw	r2,-336(fp)

		tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
   17730:	e0ffa717 	ldw	r3,-356(fp)
   17734:	e0bfa817 	ldw	r2,-352(fp)
   17738:	1885c83a 	sub	r2,r3,r2
   1773c:	1009883a 	mov	r4,r2
   17740:	0145a844 	movi	r5,5793
   17744:	002c1540 	call	2c154 <__mulsi3>
   17748:	e0bfa615 	stw	r2,-360(fp)
		tmp11 = tmp2 + tmp0;
   1774c:	e0ffac17 	ldw	r3,-336(fp)
   17750:	e0bfa617 	ldw	r2,-360(fp)
   17754:	1885883a 	add	r2,r3,r2
   17758:	e0bfad15 	stw	r2,-332(fp)
		tmp14 = tmp2 - tmp0 - tmp0;
   1775c:	e0ffac17 	ldw	r3,-336(fp)
   17760:	e0bfa617 	ldw	r2,-360(fp)
   17764:	1887c83a 	sub	r3,r3,r2
   17768:	e0bfa617 	ldw	r2,-360(fp)
   1776c:	1885c83a 	sub	r2,r3,r2
   17770:	e0bfae15 	stw	r2,-328(fp)

		tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
   17774:	e0ffa717 	ldw	r3,-356(fp)
   17778:	e0bfa817 	ldw	r2,-352(fp)
   1777c:	1885883a 	add	r2,r3,r2
   17780:	1009883a 	mov	r4,r2
   17784:	014aa1c4 	movi	r5,10887
   17788:	002c1540 	call	2c154 <__mulsi3>
   1778c:	e0bfa615 	stw	r2,-360(fp)
		tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
   17790:	e13fa717 	ldw	r4,-356(fp)
   17794:	0148aac4 	movi	r5,8875
   17798:	002c1540 	call	2c154 <__mulsi3>
   1779c:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
   177a0:	e13fa817 	ldw	r4,-352(fp)
   177a4:	0141f704 	movi	r5,2012
   177a8:	002c1540 	call	2c154 <__mulsi3>
   177ac:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp1 + tmp0 - tmp3;
   177b0:	e0ffab17 	ldw	r3,-340(fp)
   177b4:	e0bfa617 	ldw	r2,-360(fp)
   177b8:	1887883a 	add	r3,r3,r2
   177bc:	e0bfaa17 	ldw	r2,-344(fp)
   177c0:	1885c83a 	sub	r2,r3,r2
   177c4:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = tmp1 - tmp0 + tmp2;
   177c8:	e0ffab17 	ldw	r3,-340(fp)
   177cc:	e0bfa617 	ldw	r2,-360(fp)
   177d0:	1887c83a 	sub	r3,r3,r2
   177d4:	e0bfac17 	ldw	r2,-336(fp)
   177d8:	1885883a 	add	r2,r3,r2
   177dc:	e0bfb015 	stw	r2,-320(fp)
		tmp13 = tmp1 - tmp2 + tmp3;
   177e0:	e0ffab17 	ldw	r3,-340(fp)
   177e4:	e0bfac17 	ldw	r2,-336(fp)
   177e8:	1887c83a 	sub	r3,r3,r2
   177ec:	e0bfaa17 	ldw	r2,-344(fp)
   177f0:	1885883a 	add	r2,r3,r2
   177f4:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   177f8:	e0bfa117 	ldw	r2,-380(fp)
   177fc:	10800404 	addi	r2,r2,16
   17800:	1080000b 	ldhu	r2,0(r2)
   17804:	10ffffcc 	andi	r3,r2,65535
   17808:	18e0001c 	xori	r3,r3,32768
   1780c:	18e00004 	addi	r3,r3,-32768
   17810:	e0bfa217 	ldw	r2,-376(fp)
   17814:	10800804 	addi	r2,r2,32
   17818:	10800017 	ldw	r2,0(r2)
   1781c:	1809883a 	mov	r4,r3
   17820:	100b883a 	mov	r5,r2
   17824:	002c1540 	call	2c154 <__mulsi3>
   17828:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1782c:	e0bfa117 	ldw	r2,-380(fp)
   17830:	10800c04 	addi	r2,r2,48
   17834:	1080000b 	ldhu	r2,0(r2)
   17838:	10ffffcc 	andi	r3,r2,65535
   1783c:	18e0001c 	xori	r3,r3,32768
   17840:	18e00004 	addi	r3,r3,-32768
   17844:	e0bfa217 	ldw	r2,-376(fp)
   17848:	10801804 	addi	r2,r2,96
   1784c:	10800017 	ldw	r2,0(r2)
   17850:	1809883a 	mov	r4,r3
   17854:	100b883a 	mov	r5,r2
   17858:	002c1540 	call	2c154 <__mulsi3>
   1785c:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   17860:	e0bfa117 	ldw	r2,-380(fp)
   17864:	10801404 	addi	r2,r2,80
   17868:	1080000b 	ldhu	r2,0(r2)
   1786c:	10ffffcc 	andi	r3,r2,65535
   17870:	18e0001c 	xori	r3,r3,32768
   17874:	18e00004 	addi	r3,r3,-32768
   17878:	e0bfa217 	ldw	r2,-376(fp)
   1787c:	10802804 	addi	r2,r2,160
   17880:	10800017 	ldw	r2,0(r2)
   17884:	1809883a 	mov	r4,r3
   17888:	100b883a 	mov	r5,r2
   1788c:	002c1540 	call	2c154 <__mulsi3>
   17890:	e0bfa915 	stw	r2,-348(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   17894:	e0bfa117 	ldw	r2,-380(fp)
   17898:	10801c04 	addi	r2,r2,112
   1789c:	1080000b 	ldhu	r2,0(r2)
   178a0:	10ffffcc 	andi	r3,r2,65535
   178a4:	18e0001c 	xori	r3,r3,32768
   178a8:	18e00004 	addi	r3,r3,-32768
   178ac:	e0bfa217 	ldw	r2,-376(fp)
   178b0:	10803804 	addi	r2,r2,224
   178b4:	10800017 	ldw	r2,0(r2)
   178b8:	1809883a 	mov	r4,r3
   178bc:	100b883a 	mov	r5,r2
   178c0:	002c1540 	call	2c154 <__mulsi3>
   178c4:	e0bfb215 	stw	r2,-312(fp)

		z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
   178c8:	e13fa817 	ldw	r4,-352(fp)
   178cc:	017633c4 	movi	r5,-10033
   178d0:	002c1540 	call	2c154 <__mulsi3>
   178d4:	e0bfa815 	stw	r2,-352(fp)

		tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
   178d8:	e0ffa717 	ldw	r3,-356(fp)
   178dc:	e0bfa917 	ldw	r2,-348(fp)
   178e0:	1885883a 	add	r2,r3,r2
   178e4:	1009883a 	mov	r4,r2
   178e8:	014745c4 	movi	r5,7447
   178ec:	002c1540 	call	2c154 <__mulsi3>
   178f0:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
   178f4:	e0ffa717 	ldw	r3,-356(fp)
   178f8:	e0bfb217 	ldw	r2,-312(fp)
   178fc:	1885883a 	add	r2,r3,r2
   17900:	1009883a 	mov	r4,r2
   17904:	0143de84 	movi	r5,3962
   17908:	002c1540 	call	2c154 <__mulsi3>
   1790c:	e0bfaa15 	stw	r2,-344(fp)
		tmp0 = tmp2 + tmp3 - z2;
   17910:	e0ffac17 	ldw	r3,-336(fp)
   17914:	e0bfaa17 	ldw	r2,-344(fp)
   17918:	1887883a 	add	r3,r3,r2
   1791c:	e0bfa817 	ldw	r2,-352(fp)
   17920:	1885c83a 	sub	r2,r3,r2
   17924:	e0bfa615 	stw	r2,-360(fp)
		tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
   17928:	e0ffa917 	ldw	r3,-348(fp)
   1792c:	e0bfb217 	ldw	r2,-312(fp)
   17930:	1885c83a 	sub	r2,r3,r2
   17934:	1009883a 	mov	r4,r2
   17938:	014b2444 	movi	r5,11409
   1793c:	002c1540 	call	2c154 <__mulsi3>
   17940:	e0bfab15 	stw	r2,-340(fp)
		tmp2 += z2 - tmp1;
   17944:	e0ffa817 	ldw	r3,-352(fp)
   17948:	e0bfab17 	ldw	r2,-340(fp)
   1794c:	1885c83a 	sub	r2,r3,r2
   17950:	e0ffac17 	ldw	r3,-336(fp)
   17954:	1885883a 	add	r2,r3,r2
   17958:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z2 + tmp1;
   1795c:	e0ffa817 	ldw	r3,-352(fp)
   17960:	e0bfab17 	ldw	r2,-340(fp)
   17964:	1885883a 	add	r2,r3,r2
   17968:	e0ffaa17 	ldw	r3,-344(fp)
   1796c:	1885883a 	add	r2,r3,r2
   17970:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
   17974:	e0ffa717 	ldw	r3,-356(fp)
   17978:	e0bfa917 	ldw	r2,-348(fp)
   1797c:	1887c83a 	sub	r3,r3,r2
   17980:	e0bfb217 	ldw	r2,-312(fp)
   17984:	1885c83a 	sub	r2,r3,r2
   17988:	1009883a 	mov	r4,r2
   1798c:	0149cc44 	movi	r5,10033
   17990:	002c1540 	call	2c154 <__mulsi3>
   17994:	e0bfab15 	stw	r2,-340(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   17998:	e0ffaf17 	ldw	r3,-324(fp)
   1799c:	e0bfa617 	ldw	r2,-360(fp)
   179a0:	1885883a 	add	r2,r3,r2
   179a4:	1007d2fa 	srai	r3,r2,11
   179a8:	e0bfa317 	ldw	r2,-372(fp)
   179ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   179b0:	e0bfa317 	ldw	r2,-372(fp)
   179b4:	10804004 	addi	r2,r2,256
   179b8:	e13faf17 	ldw	r4,-324(fp)
   179bc:	e0ffa617 	ldw	r3,-360(fp)
   179c0:	20c7c83a 	sub	r3,r4,r3
   179c4:	1807d2fa 	srai	r3,r3,11
   179c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
   179cc:	e0bfa317 	ldw	r2,-372(fp)
   179d0:	10800804 	addi	r2,r2,32
   179d4:	e13fad17 	ldw	r4,-332(fp)
   179d8:	e0ffab17 	ldw	r3,-340(fp)
   179dc:	20c7883a 	add	r3,r4,r3
   179e0:	1807d2fa 	srai	r3,r3,11
   179e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
   179e8:	e0bfa317 	ldw	r2,-372(fp)
   179ec:	10803804 	addi	r2,r2,224
   179f0:	e13fad17 	ldw	r4,-332(fp)
   179f4:	e0ffab17 	ldw	r3,-340(fp)
   179f8:	20c7c83a 	sub	r3,r4,r3
   179fc:	1807d2fa 	srai	r3,r3,11
   17a00:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
   17a04:	e0bfa317 	ldw	r2,-372(fp)
   17a08:	10801004 	addi	r2,r2,64
   17a0c:	e13fb017 	ldw	r4,-320(fp)
   17a10:	e0ffac17 	ldw	r3,-336(fp)
   17a14:	20c7883a 	add	r3,r4,r3
   17a18:	1807d2fa 	srai	r3,r3,11
   17a1c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
   17a20:	e0bfa317 	ldw	r2,-372(fp)
   17a24:	10803004 	addi	r2,r2,192
   17a28:	e13fb017 	ldw	r4,-320(fp)
   17a2c:	e0ffac17 	ldw	r3,-336(fp)
   17a30:	20c7c83a 	sub	r3,r4,r3
   17a34:	1807d2fa 	srai	r3,r3,11
   17a38:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
   17a3c:	e0bfa317 	ldw	r2,-372(fp)
   17a40:	10801804 	addi	r2,r2,96
   17a44:	e13fb117 	ldw	r4,-316(fp)
   17a48:	e0ffaa17 	ldw	r3,-344(fp)
   17a4c:	20c7883a 	add	r3,r4,r3
   17a50:	1807d2fa 	srai	r3,r3,11
   17a54:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
   17a58:	e0bfa317 	ldw	r2,-372(fp)
   17a5c:	10802804 	addi	r2,r2,160
   17a60:	e13fb117 	ldw	r4,-316(fp)
   17a64:	e0ffaa17 	ldw	r3,-344(fp)
   17a68:	20c7c83a 	sub	r3,r4,r3
   17a6c:	1807d2fa 	srai	r3,r3,11
   17a70:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
   17a74:	e0bfa317 	ldw	r2,-372(fp)
   17a78:	10802004 	addi	r2,r2,128
   17a7c:	e0ffae17 	ldw	r3,-328(fp)
   17a80:	1807d2fa 	srai	r3,r3,11
   17a84:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   17a88:	e0bfa417 	ldw	r2,-368(fp)
   17a8c:	10800044 	addi	r2,r2,1
   17a90:	e0bfa415 	stw	r2,-368(fp)
   17a94:	e0bfa117 	ldw	r2,-380(fp)
   17a98:	10800084 	addi	r2,r2,2
   17a9c:	e0bfa115 	stw	r2,-380(fp)
   17aa0:	e0bfa217 	ldw	r2,-376(fp)
   17aa4:	10800104 	addi	r2,r2,4
   17aa8:	e0bfa215 	stw	r2,-376(fp)
   17aac:	e0bfa317 	ldw	r2,-372(fp)
   17ab0:	10800104 	addi	r2,r2,4
   17ab4:	e0bfa315 	stw	r2,-372(fp)
   17ab8:	e0bfa417 	ldw	r2,-368(fp)
   17abc:	10800210 	cmplti	r2,r2,8
   17ac0:	103ed51e 	bne	r2,zero,17618 <jpeg_idct_9x9+0x54>
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 9 rows from work array, store into output array. */

	wsptr = workspace;
   17ac4:	e0bfb404 	addi	r2,fp,-304
   17ac8:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 9; ctr++) {
   17acc:	e03fa415 	stw	zero,-368(fp)
   17ad0:	00010606 	br	17eec <jpeg_idct_9x9+0x928>
		outptr = output_buf[ctr] + output_col;
   17ad4:	e0bfa417 	ldw	r2,-368(fp)
   17ad8:	1085883a 	add	r2,r2,r2
   17adc:	1085883a 	add	r2,r2,r2
   17ae0:	e0ffff17 	ldw	r3,-4(fp)
   17ae4:	1885883a 	add	r2,r3,r2
   17ae8:	10c00017 	ldw	r3,0(r2)
   17aec:	e0800217 	ldw	r2,8(fp)
   17af0:	1885883a 	add	r2,r3,r2
   17af4:	e0bfb315 	stw	r2,-308(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   17af8:	e0bfa317 	ldw	r2,-372(fp)
   17afc:	10800017 	ldw	r2,0(r2)
   17b00:	10800404 	addi	r2,r2,16
   17b04:	e0bfa615 	stw	r2,-360(fp)
		tmp0 <<= CONST_BITS;
   17b08:	e0bfa617 	ldw	r2,-360(fp)
   17b0c:	1004937a 	slli	r2,r2,13
   17b10:	e0bfa615 	stw	r2,-360(fp)

		z1 = (INT32) wsptr[2];
   17b14:	e0bfa317 	ldw	r2,-372(fp)
   17b18:	10800204 	addi	r2,r2,8
   17b1c:	10800017 	ldw	r2,0(r2)
   17b20:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[4];
   17b24:	e0bfa317 	ldw	r2,-372(fp)
   17b28:	10800404 	addi	r2,r2,16
   17b2c:	10800017 	ldw	r2,0(r2)
   17b30:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[6];
   17b34:	e0bfa317 	ldw	r2,-372(fp)
   17b38:	10800604 	addi	r2,r2,24
   17b3c:	10800017 	ldw	r2,0(r2)
   17b40:	e0bfa915 	stw	r2,-348(fp)

		tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
   17b44:	e13fa917 	ldw	r4,-348(fp)
   17b48:	0145a844 	movi	r5,5793
   17b4c:	002c1540 	call	2c154 <__mulsi3>
   17b50:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = tmp0 + tmp3;
   17b54:	e0ffa617 	ldw	r3,-360(fp)
   17b58:	e0bfaa17 	ldw	r2,-344(fp)
   17b5c:	1885883a 	add	r2,r3,r2
   17b60:	e0bfab15 	stw	r2,-340(fp)
		tmp2 = tmp0 - tmp3 - tmp3;
   17b64:	e0ffa617 	ldw	r3,-360(fp)
   17b68:	e0bfaa17 	ldw	r2,-344(fp)
   17b6c:	1887c83a 	sub	r3,r3,r2
   17b70:	e0bfaa17 	ldw	r2,-344(fp)
   17b74:	1885c83a 	sub	r2,r3,r2
   17b78:	e0bfac15 	stw	r2,-336(fp)

		tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
   17b7c:	e0ffa717 	ldw	r3,-356(fp)
   17b80:	e0bfa817 	ldw	r2,-352(fp)
   17b84:	1885c83a 	sub	r2,r3,r2
   17b88:	1009883a 	mov	r4,r2
   17b8c:	0145a844 	movi	r5,5793
   17b90:	002c1540 	call	2c154 <__mulsi3>
   17b94:	e0bfa615 	stw	r2,-360(fp)
		tmp11 = tmp2 + tmp0;
   17b98:	e0ffac17 	ldw	r3,-336(fp)
   17b9c:	e0bfa617 	ldw	r2,-360(fp)
   17ba0:	1885883a 	add	r2,r3,r2
   17ba4:	e0bfad15 	stw	r2,-332(fp)
		tmp14 = tmp2 - tmp0 - tmp0;
   17ba8:	e0ffac17 	ldw	r3,-336(fp)
   17bac:	e0bfa617 	ldw	r2,-360(fp)
   17bb0:	1887c83a 	sub	r3,r3,r2
   17bb4:	e0bfa617 	ldw	r2,-360(fp)
   17bb8:	1885c83a 	sub	r2,r3,r2
   17bbc:	e0bfae15 	stw	r2,-328(fp)

		tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
   17bc0:	e0ffa717 	ldw	r3,-356(fp)
   17bc4:	e0bfa817 	ldw	r2,-352(fp)
   17bc8:	1885883a 	add	r2,r3,r2
   17bcc:	1009883a 	mov	r4,r2
   17bd0:	014aa1c4 	movi	r5,10887
   17bd4:	002c1540 	call	2c154 <__mulsi3>
   17bd8:	e0bfa615 	stw	r2,-360(fp)
		tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
   17bdc:	e13fa717 	ldw	r4,-356(fp)
   17be0:	0148aac4 	movi	r5,8875
   17be4:	002c1540 	call	2c154 <__mulsi3>
   17be8:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
   17bec:	e13fa817 	ldw	r4,-352(fp)
   17bf0:	0141f704 	movi	r5,2012
   17bf4:	002c1540 	call	2c154 <__mulsi3>
   17bf8:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp1 + tmp0 - tmp3;
   17bfc:	e0ffab17 	ldw	r3,-340(fp)
   17c00:	e0bfa617 	ldw	r2,-360(fp)
   17c04:	1887883a 	add	r3,r3,r2
   17c08:	e0bfaa17 	ldw	r2,-344(fp)
   17c0c:	1885c83a 	sub	r2,r3,r2
   17c10:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = tmp1 - tmp0 + tmp2;
   17c14:	e0ffab17 	ldw	r3,-340(fp)
   17c18:	e0bfa617 	ldw	r2,-360(fp)
   17c1c:	1887c83a 	sub	r3,r3,r2
   17c20:	e0bfac17 	ldw	r2,-336(fp)
   17c24:	1885883a 	add	r2,r3,r2
   17c28:	e0bfb015 	stw	r2,-320(fp)
		tmp13 = tmp1 - tmp2 + tmp3;
   17c2c:	e0ffab17 	ldw	r3,-340(fp)
   17c30:	e0bfac17 	ldw	r2,-336(fp)
   17c34:	1887c83a 	sub	r3,r3,r2
   17c38:	e0bfaa17 	ldw	r2,-344(fp)
   17c3c:	1885883a 	add	r2,r3,r2
   17c40:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   17c44:	e0bfa317 	ldw	r2,-372(fp)
   17c48:	10800104 	addi	r2,r2,4
   17c4c:	10800017 	ldw	r2,0(r2)
   17c50:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[3];
   17c54:	e0bfa317 	ldw	r2,-372(fp)
   17c58:	10800304 	addi	r2,r2,12
   17c5c:	10800017 	ldw	r2,0(r2)
   17c60:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[5];
   17c64:	e0bfa317 	ldw	r2,-372(fp)
   17c68:	10800504 	addi	r2,r2,20
   17c6c:	10800017 	ldw	r2,0(r2)
   17c70:	e0bfa915 	stw	r2,-348(fp)
		z4 = (INT32) wsptr[7];
   17c74:	e0bfa317 	ldw	r2,-372(fp)
   17c78:	10800704 	addi	r2,r2,28
   17c7c:	10800017 	ldw	r2,0(r2)
   17c80:	e0bfb215 	stw	r2,-312(fp)

		z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
   17c84:	e13fa817 	ldw	r4,-352(fp)
   17c88:	017633c4 	movi	r5,-10033
   17c8c:	002c1540 	call	2c154 <__mulsi3>
   17c90:	e0bfa815 	stw	r2,-352(fp)

		tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
   17c94:	e0ffa717 	ldw	r3,-356(fp)
   17c98:	e0bfa917 	ldw	r2,-348(fp)
   17c9c:	1885883a 	add	r2,r3,r2
   17ca0:	1009883a 	mov	r4,r2
   17ca4:	014745c4 	movi	r5,7447
   17ca8:	002c1540 	call	2c154 <__mulsi3>
   17cac:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
   17cb0:	e0ffa717 	ldw	r3,-356(fp)
   17cb4:	e0bfb217 	ldw	r2,-312(fp)
   17cb8:	1885883a 	add	r2,r3,r2
   17cbc:	1009883a 	mov	r4,r2
   17cc0:	0143de84 	movi	r5,3962
   17cc4:	002c1540 	call	2c154 <__mulsi3>
   17cc8:	e0bfaa15 	stw	r2,-344(fp)
		tmp0 = tmp2 + tmp3 - z2;
   17ccc:	e0ffac17 	ldw	r3,-336(fp)
   17cd0:	e0bfaa17 	ldw	r2,-344(fp)
   17cd4:	1887883a 	add	r3,r3,r2
   17cd8:	e0bfa817 	ldw	r2,-352(fp)
   17cdc:	1885c83a 	sub	r2,r3,r2
   17ce0:	e0bfa615 	stw	r2,-360(fp)
		tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
   17ce4:	e0ffa917 	ldw	r3,-348(fp)
   17ce8:	e0bfb217 	ldw	r2,-312(fp)
   17cec:	1885c83a 	sub	r2,r3,r2
   17cf0:	1009883a 	mov	r4,r2
   17cf4:	014b2444 	movi	r5,11409
   17cf8:	002c1540 	call	2c154 <__mulsi3>
   17cfc:	e0bfab15 	stw	r2,-340(fp)
		tmp2 += z2 - tmp1;
   17d00:	e0ffa817 	ldw	r3,-352(fp)
   17d04:	e0bfab17 	ldw	r2,-340(fp)
   17d08:	1885c83a 	sub	r2,r3,r2
   17d0c:	e0ffac17 	ldw	r3,-336(fp)
   17d10:	1885883a 	add	r2,r3,r2
   17d14:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z2 + tmp1;
   17d18:	e0ffa817 	ldw	r3,-352(fp)
   17d1c:	e0bfab17 	ldw	r2,-340(fp)
   17d20:	1885883a 	add	r2,r3,r2
   17d24:	e0ffaa17 	ldw	r3,-344(fp)
   17d28:	1885883a 	add	r2,r3,r2
   17d2c:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
   17d30:	e0ffa717 	ldw	r3,-356(fp)
   17d34:	e0bfa917 	ldw	r2,-348(fp)
   17d38:	1887c83a 	sub	r3,r3,r2
   17d3c:	e0bfb217 	ldw	r2,-312(fp)
   17d40:	1885c83a 	sub	r2,r3,r2
   17d44:	1009883a 	mov	r4,r2
   17d48:	0149cc44 	movi	r5,10033
   17d4c:	002c1540 	call	2c154 <__mulsi3>
   17d50:	e0bfab15 	stw	r2,-340(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   17d54:	e0ffaf17 	ldw	r3,-324(fp)
   17d58:	e0bfa617 	ldw	r2,-360(fp)
   17d5c:	1885883a 	add	r2,r3,r2
   17d60:	1005d4ba 	srai	r2,r2,18
   17d64:	1080ffcc 	andi	r2,r2,1023
   17d68:	e0ffa517 	ldw	r3,-364(fp)
   17d6c:	1885883a 	add	r2,r3,r2
   17d70:	10c00003 	ldbu	r3,0(r2)
   17d74:	e0bfb317 	ldw	r2,-308(fp)
   17d78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   17d7c:	e0bfb317 	ldw	r2,-308(fp)
   17d80:	10800204 	addi	r2,r2,8
   17d84:	e13faf17 	ldw	r4,-324(fp)
   17d88:	e0ffa617 	ldw	r3,-360(fp)
   17d8c:	20c7c83a 	sub	r3,r4,r3
   17d90:	1807d4ba 	srai	r3,r3,18
   17d94:	18c0ffcc 	andi	r3,r3,1023
   17d98:	e13fa517 	ldw	r4,-364(fp)
   17d9c:	20c7883a 	add	r3,r4,r3
   17da0:	18c00003 	ldbu	r3,0(r3)
   17da4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
   17da8:	e0bfb317 	ldw	r2,-308(fp)
   17dac:	10800044 	addi	r2,r2,1
   17db0:	e13fad17 	ldw	r4,-332(fp)
   17db4:	e0ffab17 	ldw	r3,-340(fp)
   17db8:	20c7883a 	add	r3,r4,r3
   17dbc:	1807d4ba 	srai	r3,r3,18
   17dc0:	18c0ffcc 	andi	r3,r3,1023
   17dc4:	e13fa517 	ldw	r4,-364(fp)
   17dc8:	20c7883a 	add	r3,r4,r3
   17dcc:	18c00003 	ldbu	r3,0(r3)
   17dd0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
   17dd4:	e0bfb317 	ldw	r2,-308(fp)
   17dd8:	108001c4 	addi	r2,r2,7
   17ddc:	e13fad17 	ldw	r4,-332(fp)
   17de0:	e0ffab17 	ldw	r3,-340(fp)
   17de4:	20c7c83a 	sub	r3,r4,r3
   17de8:	1807d4ba 	srai	r3,r3,18
   17dec:	18c0ffcc 	andi	r3,r3,1023
   17df0:	e13fa517 	ldw	r4,-364(fp)
   17df4:	20c7883a 	add	r3,r4,r3
   17df8:	18c00003 	ldbu	r3,0(r3)
   17dfc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   17e00:	e0bfb317 	ldw	r2,-308(fp)
   17e04:	10800084 	addi	r2,r2,2
   17e08:	e13fb017 	ldw	r4,-320(fp)
   17e0c:	e0ffac17 	ldw	r3,-336(fp)
   17e10:	20c7883a 	add	r3,r4,r3
   17e14:	1807d4ba 	srai	r3,r3,18
   17e18:	18c0ffcc 	andi	r3,r3,1023
   17e1c:	e13fa517 	ldw	r4,-364(fp)
   17e20:	20c7883a 	add	r3,r4,r3
   17e24:	18c00003 	ldbu	r3,0(r3)
   17e28:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   17e2c:	e0bfb317 	ldw	r2,-308(fp)
   17e30:	10800184 	addi	r2,r2,6
   17e34:	e13fb017 	ldw	r4,-320(fp)
   17e38:	e0ffac17 	ldw	r3,-336(fp)
   17e3c:	20c7c83a 	sub	r3,r4,r3
   17e40:	1807d4ba 	srai	r3,r3,18
   17e44:	18c0ffcc 	andi	r3,r3,1023
   17e48:	e13fa517 	ldw	r4,-364(fp)
   17e4c:	20c7883a 	add	r3,r4,r3
   17e50:	18c00003 	ldbu	r3,0(r3)
   17e54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
   17e58:	e0bfb317 	ldw	r2,-308(fp)
   17e5c:	108000c4 	addi	r2,r2,3
   17e60:	e13fb117 	ldw	r4,-316(fp)
   17e64:	e0ffaa17 	ldw	r3,-344(fp)
   17e68:	20c7883a 	add	r3,r4,r3
   17e6c:	1807d4ba 	srai	r3,r3,18
   17e70:	18c0ffcc 	andi	r3,r3,1023
   17e74:	e13fa517 	ldw	r4,-364(fp)
   17e78:	20c7883a 	add	r3,r4,r3
   17e7c:	18c00003 	ldbu	r3,0(r3)
   17e80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
   17e84:	e0bfb317 	ldw	r2,-308(fp)
   17e88:	10800144 	addi	r2,r2,5
   17e8c:	e13fb117 	ldw	r4,-316(fp)
   17e90:	e0ffaa17 	ldw	r3,-344(fp)
   17e94:	20c7c83a 	sub	r3,r4,r3
   17e98:	1807d4ba 	srai	r3,r3,18
   17e9c:	18c0ffcc 	andi	r3,r3,1023
   17ea0:	e13fa517 	ldw	r4,-364(fp)
   17ea4:	20c7883a 	add	r3,r4,r3
   17ea8:	18c00003 	ldbu	r3,0(r3)
   17eac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
   17eb0:	e0bfb317 	ldw	r2,-308(fp)
   17eb4:	10800104 	addi	r2,r2,4
   17eb8:	e0ffae17 	ldw	r3,-328(fp)
   17ebc:	1807d4ba 	srai	r3,r3,18
   17ec0:	18c0ffcc 	andi	r3,r3,1023
   17ec4:	e13fa517 	ldw	r4,-364(fp)
   17ec8:	20c7883a 	add	r3,r4,r3
   17ecc:	18c00003 	ldbu	r3,0(r3)
   17ed0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   17ed4:	e0bfa317 	ldw	r2,-372(fp)
   17ed8:	10800804 	addi	r2,r2,32
   17edc:	e0bfa315 	stw	r2,-372(fp)
	}

	/* Pass 2: process 9 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 9; ctr++) {
   17ee0:	e0bfa417 	ldw	r2,-368(fp)
   17ee4:	10800044 	addi	r2,r2,1
   17ee8:	e0bfa415 	stw	r2,-368(fp)
   17eec:	e0bfa417 	ldw	r2,-368(fp)
   17ef0:	10800250 	cmplti	r2,r2,9
   17ef4:	103ef71e 	bne	r2,zero,17ad4 <jpeg_idct_9x9+0x510>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   17ef8:	e037883a 	mov	sp,fp
   17efc:	dfc00117 	ldw	ra,4(sp)
   17f00:	df000017 	ldw	fp,0(sp)
   17f04:	dec00204 	addi	sp,sp,8
   17f08:	f800283a 	ret

00017f0c <jpeg_idct_10x10>:

GLOBAL(void)
	jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   17f0c:	deff9504 	addi	sp,sp,-428
   17f10:	dfc06a15 	stw	ra,424(sp)
   17f14:	df006915 	stw	fp,420(sp)
   17f18:	df006904 	addi	fp,sp,420
   17f1c:	e13ffc15 	stw	r4,-16(fp)
   17f20:	e17ffd15 	stw	r5,-12(fp)
   17f24:	e1bffe15 	stw	r6,-8(fp)
   17f28:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4, z5;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   17f2c:	e0bffc17 	ldw	r2,-16(fp)
   17f30:	10804917 	ldw	r2,292(r2)
   17f34:	10802004 	addi	r2,r2,128
   17f38:	e0bf9b15 	stw	r2,-404(fp)
	int workspace[8*10];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   17f3c:	e0bffe17 	ldw	r2,-8(fp)
   17f40:	e0bf9715 	stw	r2,-420(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   17f44:	e0bffd17 	ldw	r2,-12(fp)
   17f48:	10801517 	ldw	r2,84(r2)
   17f4c:	e0bf9815 	stw	r2,-416(fp)
	wsptr = workspace;
   17f50:	e0bfac04 	addi	r2,fp,-336
   17f54:	e0bf9915 	stw	r2,-412(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   17f58:	e03f9a15 	stw	zero,-408(fp)
   17f5c:	00014606 	br	18478 <jpeg_idct_10x10+0x56c>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   17f60:	e0bf9717 	ldw	r2,-420(fp)
   17f64:	1080000b 	ldhu	r2,0(r2)
   17f68:	10ffffcc 	andi	r3,r2,65535
   17f6c:	18e0001c 	xori	r3,r3,32768
   17f70:	18e00004 	addi	r3,r3,-32768
   17f74:	e0bf9817 	ldw	r2,-416(fp)
   17f78:	10800017 	ldw	r2,0(r2)
   17f7c:	1809883a 	mov	r4,r3
   17f80:	100b883a 	mov	r5,r2
   17f84:	002c1540 	call	2c154 <__mulsi3>
   17f88:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
   17f8c:	e0bf9c17 	ldw	r2,-400(fp)
   17f90:	1004937a 	slli	r2,r2,13
   17f94:	e0bf9c15 	stw	r2,-400(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
   17f98:	e0bf9c17 	ldw	r2,-400(fp)
   17f9c:	10810004 	addi	r2,r2,1024
   17fa0:	e0bf9c15 	stw	r2,-400(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   17fa4:	e0bf9717 	ldw	r2,-420(fp)
   17fa8:	10801004 	addi	r2,r2,64
   17fac:	1080000b 	ldhu	r2,0(r2)
   17fb0:	10ffffcc 	andi	r3,r2,65535
   17fb4:	18e0001c 	xori	r3,r3,32768
   17fb8:	18e00004 	addi	r3,r3,-32768
   17fbc:	e0bf9817 	ldw	r2,-416(fp)
   17fc0:	10802004 	addi	r2,r2,128
   17fc4:	10800017 	ldw	r2,0(r2)
   17fc8:	1809883a 	mov	r4,r3
   17fcc:	100b883a 	mov	r5,r2
   17fd0:	002c1540 	call	2c154 <__mulsi3>
   17fd4:	e0bf9d15 	stw	r2,-396(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
   17fd8:	e13f9d17 	ldw	r4,-396(fp)
   17fdc:	01492744 	movi	r5,9373
   17fe0:	002c1540 	call	2c154 <__mulsi3>
   17fe4:	e0bf9e15 	stw	r2,-392(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
   17fe8:	e13f9d17 	ldw	r4,-396(fp)
   17fec:	01437f04 	movi	r5,3580
   17ff0:	002c1540 	call	2c154 <__mulsi3>
   17ff4:	e0bf9f15 	stw	r2,-388(fp)
		tmp10 = z3 + z1;
   17ff8:	e0ff9c17 	ldw	r3,-400(fp)
   17ffc:	e0bf9e17 	ldw	r2,-392(fp)
   18000:	1885883a 	add	r2,r3,r2
   18004:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = z3 - z2;
   18008:	e0ff9c17 	ldw	r3,-400(fp)
   1800c:	e0bf9f17 	ldw	r2,-388(fp)
   18010:	1885c83a 	sub	r2,r3,r2
   18014:	e0bfa115 	stw	r2,-380(fp)

		tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
   18018:	e0ff9e17 	ldw	r3,-392(fp)
   1801c:	e0bf9f17 	ldw	r2,-388(fp)
   18020:	1885c83a 	sub	r2,r3,r2
   18024:	1085883a 	add	r2,r2,r2
   18028:	e0ff9c17 	ldw	r3,-400(fp)
   1802c:	1885c83a 	sub	r2,r3,r2
   18030:	1005d2fa 	srai	r2,r2,11
   18034:	e0bfa215 	stw	r2,-376(fp)
			CONST_BITS-PASS1_BITS);

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   18038:	e0bf9717 	ldw	r2,-420(fp)
   1803c:	10800804 	addi	r2,r2,32
   18040:	1080000b 	ldhu	r2,0(r2)
   18044:	10ffffcc 	andi	r3,r2,65535
   18048:	18e0001c 	xori	r3,r3,32768
   1804c:	18e00004 	addi	r3,r3,-32768
   18050:	e0bf9817 	ldw	r2,-416(fp)
   18054:	10801004 	addi	r2,r2,64
   18058:	10800017 	ldw	r2,0(r2)
   1805c:	1809883a 	mov	r4,r3
   18060:	100b883a 	mov	r5,r2
   18064:	002c1540 	call	2c154 <__mulsi3>
   18068:	e0bf9f15 	stw	r2,-388(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1806c:	e0bf9717 	ldw	r2,-420(fp)
   18070:	10801804 	addi	r2,r2,96
   18074:	1080000b 	ldhu	r2,0(r2)
   18078:	10ffffcc 	andi	r3,r2,65535
   1807c:	18e0001c 	xori	r3,r3,32768
   18080:	18e00004 	addi	r3,r3,-32768
   18084:	e0bf9817 	ldw	r2,-416(fp)
   18088:	10803004 	addi	r2,r2,192
   1808c:	10800017 	ldw	r2,0(r2)
   18090:	1809883a 	mov	r4,r3
   18094:	100b883a 	mov	r5,r2
   18098:	002c1540 	call	2c154 <__mulsi3>
   1809c:	e0bf9c15 	stw	r2,-400(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
   180a0:	e0ff9f17 	ldw	r3,-388(fp)
   180a4:	e0bf9c17 	ldw	r2,-400(fp)
   180a8:	1885883a 	add	r2,r3,r2
   180ac:	1009883a 	mov	r4,r2
   180b0:	0146a684 	movi	r5,6810
   180b4:	002c1540 	call	2c154 <__mulsi3>
   180b8:	e0bf9e15 	stw	r2,-392(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
   180bc:	e13f9f17 	ldw	r4,-388(fp)
   180c0:	01441c44 	movi	r5,4209
   180c4:	002c1540 	call	2c154 <__mulsi3>
   180c8:	1007883a 	mov	r3,r2
   180cc:	e0bf9e17 	ldw	r2,-392(fp)
   180d0:	1885883a 	add	r2,r3,r2
   180d4:	e0bfa315 	stw	r2,-372(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
   180d8:	e13f9c17 	ldw	r4,-400(fp)
   180dc:	016e9704 	movi	r5,-17828
   180e0:	002c1540 	call	2c154 <__mulsi3>
   180e4:	1007883a 	mov	r3,r2
   180e8:	e0bf9e17 	ldw	r2,-392(fp)
   180ec:	1885883a 	add	r2,r3,r2
   180f0:	e0bfa415 	stw	r2,-368(fp)

		tmp20 = tmp10 + tmp12;
   180f4:	e0ffa017 	ldw	r3,-384(fp)
   180f8:	e0bfa317 	ldw	r2,-372(fp)
   180fc:	1885883a 	add	r2,r3,r2
   18100:	e0bfa515 	stw	r2,-364(fp)
		tmp24 = tmp10 - tmp12;
   18104:	e0ffa017 	ldw	r3,-384(fp)
   18108:	e0bfa317 	ldw	r2,-372(fp)
   1810c:	1885c83a 	sub	r2,r3,r2
   18110:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp11 + tmp13;
   18114:	e0ffa117 	ldw	r3,-380(fp)
   18118:	e0bfa417 	ldw	r2,-368(fp)
   1811c:	1885883a 	add	r2,r3,r2
   18120:	e0bfa715 	stw	r2,-356(fp)
		tmp23 = tmp11 - tmp13;
   18124:	e0ffa117 	ldw	r3,-380(fp)
   18128:	e0bfa417 	ldw	r2,-368(fp)
   1812c:	1885c83a 	sub	r2,r3,r2
   18130:	e0bfa815 	stw	r2,-352(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   18134:	e0bf9717 	ldw	r2,-420(fp)
   18138:	10800404 	addi	r2,r2,16
   1813c:	1080000b 	ldhu	r2,0(r2)
   18140:	10ffffcc 	andi	r3,r2,65535
   18144:	18e0001c 	xori	r3,r3,32768
   18148:	18e00004 	addi	r3,r3,-32768
   1814c:	e0bf9817 	ldw	r2,-416(fp)
   18150:	10800804 	addi	r2,r2,32
   18154:	10800017 	ldw	r2,0(r2)
   18158:	1809883a 	mov	r4,r3
   1815c:	100b883a 	mov	r5,r2
   18160:	002c1540 	call	2c154 <__mulsi3>
   18164:	e0bf9e15 	stw	r2,-392(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   18168:	e0bf9717 	ldw	r2,-420(fp)
   1816c:	10800c04 	addi	r2,r2,48
   18170:	1080000b 	ldhu	r2,0(r2)
   18174:	10ffffcc 	andi	r3,r2,65535
   18178:	18e0001c 	xori	r3,r3,32768
   1817c:	18e00004 	addi	r3,r3,-32768
   18180:	e0bf9817 	ldw	r2,-416(fp)
   18184:	10801804 	addi	r2,r2,96
   18188:	10800017 	ldw	r2,0(r2)
   1818c:	1809883a 	mov	r4,r3
   18190:	100b883a 	mov	r5,r2
   18194:	002c1540 	call	2c154 <__mulsi3>
   18198:	e0bf9f15 	stw	r2,-388(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1819c:	e0bf9717 	ldw	r2,-420(fp)
   181a0:	10801404 	addi	r2,r2,80
   181a4:	1080000b 	ldhu	r2,0(r2)
   181a8:	10ffffcc 	andi	r3,r2,65535
   181ac:	18e0001c 	xori	r3,r3,32768
   181b0:	18e00004 	addi	r3,r3,-32768
   181b4:	e0bf9817 	ldw	r2,-416(fp)
   181b8:	10802804 	addi	r2,r2,160
   181bc:	10800017 	ldw	r2,0(r2)
   181c0:	1809883a 	mov	r4,r3
   181c4:	100b883a 	mov	r5,r2
   181c8:	002c1540 	call	2c154 <__mulsi3>
   181cc:	e0bf9c15 	stw	r2,-400(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   181d0:	e0bf9717 	ldw	r2,-420(fp)
   181d4:	10801c04 	addi	r2,r2,112
   181d8:	1080000b 	ldhu	r2,0(r2)
   181dc:	10ffffcc 	andi	r3,r2,65535
   181e0:	18e0001c 	xori	r3,r3,32768
   181e4:	18e00004 	addi	r3,r3,-32768
   181e8:	e0bf9817 	ldw	r2,-416(fp)
   181ec:	10803804 	addi	r2,r2,224
   181f0:	10800017 	ldw	r2,0(r2)
   181f4:	1809883a 	mov	r4,r3
   181f8:	100b883a 	mov	r5,r2
   181fc:	002c1540 	call	2c154 <__mulsi3>
   18200:	e0bf9d15 	stw	r2,-396(fp)

		tmp11 = z2 + z4;
   18204:	e0ff9f17 	ldw	r3,-388(fp)
   18208:	e0bf9d17 	ldw	r2,-396(fp)
   1820c:	1885883a 	add	r2,r3,r2
   18210:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = z2 - z4;
   18214:	e0ff9f17 	ldw	r3,-388(fp)
   18218:	e0bf9d17 	ldw	r2,-396(fp)
   1821c:	1885c83a 	sub	r2,r3,r2
   18220:	e0bfa415 	stw	r2,-368(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
   18224:	e13fa417 	ldw	r4,-368(fp)
   18228:	014278c4 	movi	r5,2531
   1822c:	002c1540 	call	2c154 <__mulsi3>
   18230:	e0bfa315 	stw	r2,-372(fp)
		z5 = z3 << CONST_BITS;
   18234:	e0bf9c17 	ldw	r2,-400(fp)
   18238:	1004937a 	slli	r2,r2,13
   1823c:	e0bfa915 	stw	r2,-348(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
   18240:	e13fa117 	ldw	r4,-380(fp)
   18244:	01479bc4 	movi	r5,7791
   18248:	002c1540 	call	2c154 <__mulsi3>
   1824c:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z5 + tmp12;
   18250:	e0ffa917 	ldw	r3,-348(fp)
   18254:	e0bfa317 	ldw	r2,-372(fp)
   18258:	1885883a 	add	r2,r3,r2
   1825c:	e0bf9d15 	stw	r2,-396(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
   18260:	e13f9e17 	ldw	r4,-392(fp)
   18264:	014b2cc4 	movi	r5,11443
   18268:	002c1540 	call	2c154 <__mulsi3>
   1826c:	1007883a 	mov	r3,r2
   18270:	e0bf9f17 	ldw	r2,-388(fp)
   18274:	1887883a 	add	r3,r3,r2
   18278:	e0bf9d17 	ldw	r2,-396(fp)
   1827c:	1885883a 	add	r2,r3,r2
   18280:	e0bfa015 	stw	r2,-384(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
   18284:	e13f9e17 	ldw	r4,-392(fp)
   18288:	0141c504 	movi	r5,1812
   1828c:	002c1540 	call	2c154 <__mulsi3>
   18290:	1007883a 	mov	r3,r2
   18294:	e0bf9f17 	ldw	r2,-388(fp)
   18298:	1887c83a 	sub	r3,r3,r2
   1829c:	e0bf9d17 	ldw	r2,-396(fp)
   182a0:	1885883a 	add	r2,r3,r2
   182a4:	e0bfaa15 	stw	r2,-344(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
   182a8:	e13fa117 	ldw	r4,-380(fp)
   182ac:	0144b3c4 	movi	r5,4815
   182b0:	002c1540 	call	2c154 <__mulsi3>
   182b4:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
   182b8:	e0ffa917 	ldw	r3,-348(fp)
   182bc:	e0bfa317 	ldw	r2,-372(fp)
   182c0:	1887c83a 	sub	r3,r3,r2
   182c4:	e0bfa417 	ldw	r2,-368(fp)
   182c8:	1004933a 	slli	r2,r2,12
   182cc:	1885c83a 	sub	r2,r3,r2
   182d0:	e0bf9d15 	stw	r2,-396(fp)

		tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
   182d4:	e0ff9e17 	ldw	r3,-392(fp)
   182d8:	e0bfa417 	ldw	r2,-368(fp)
   182dc:	1887c83a 	sub	r3,r3,r2
   182e0:	e0bf9c17 	ldw	r2,-400(fp)
   182e4:	1885c83a 	sub	r2,r3,r2
   182e8:	1085883a 	add	r2,r2,r2
   182ec:	1085883a 	add	r2,r2,r2
   182f0:	e0bfa315 	stw	r2,-372(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
   182f4:	e13f9e17 	ldw	r4,-392(fp)
   182f8:	014a14c4 	movi	r5,10323
   182fc:	002c1540 	call	2c154 <__mulsi3>
   18300:	1007883a 	mov	r3,r2
   18304:	e0bf9f17 	ldw	r2,-388(fp)
   18308:	1887c83a 	sub	r3,r3,r2
   1830c:	e0bf9d17 	ldw	r2,-396(fp)
   18310:	1885c83a 	sub	r2,r3,r2
   18314:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
   18318:	e13f9e17 	ldw	r4,-392(fp)
   1831c:	01452304 	movi	r5,5260
   18320:	002c1540 	call	2c154 <__mulsi3>
   18324:	1007883a 	mov	r3,r2
   18328:	e0bf9f17 	ldw	r2,-388(fp)
   1832c:	1887c83a 	sub	r3,r3,r2
   18330:	e0bf9d17 	ldw	r2,-396(fp)
   18334:	1885883a 	add	r2,r3,r2
   18338:	e0bfa415 	stw	r2,-368(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1833c:	e0ffa517 	ldw	r3,-364(fp)
   18340:	e0bfa017 	ldw	r2,-384(fp)
   18344:	1885883a 	add	r2,r3,r2
   18348:	1007d2fa 	srai	r3,r2,11
   1834c:	e0bf9917 	ldw	r2,-412(fp)
   18350:	10c00015 	stw	r3,0(r2)
		wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   18354:	e0bf9917 	ldw	r2,-412(fp)
   18358:	10804804 	addi	r2,r2,288
   1835c:	e13fa517 	ldw	r4,-364(fp)
   18360:	e0ffa017 	ldw	r3,-384(fp)
   18364:	20c7c83a 	sub	r3,r4,r3
   18368:	1807d2fa 	srai	r3,r3,11
   1836c:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   18370:	e0bf9917 	ldw	r2,-412(fp)
   18374:	10800804 	addi	r2,r2,32
   18378:	e13fa717 	ldw	r4,-356(fp)
   1837c:	e0ffa117 	ldw	r3,-380(fp)
   18380:	20c7883a 	add	r3,r4,r3
   18384:	1807d2fa 	srai	r3,r3,11
   18388:	10c00015 	stw	r3,0(r2)
		wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   1838c:	e0bf9917 	ldw	r2,-412(fp)
   18390:	10804004 	addi	r2,r2,256
   18394:	e13fa717 	ldw	r4,-356(fp)
   18398:	e0ffa117 	ldw	r3,-380(fp)
   1839c:	20c7c83a 	sub	r3,r4,r3
   183a0:	1807d2fa 	srai	r3,r3,11
   183a4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) (tmp22 + tmp12);
   183a8:	e0bf9917 	ldw	r2,-412(fp)
   183ac:	10801004 	addi	r2,r2,64
   183b0:	e13fa217 	ldw	r4,-376(fp)
   183b4:	e0ffa317 	ldw	r3,-372(fp)
   183b8:	20c7883a 	add	r3,r4,r3
   183bc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7] = (int) (tmp22 - tmp12);
   183c0:	e0bf9917 	ldw	r2,-412(fp)
   183c4:	10803804 	addi	r2,r2,224
   183c8:	e13fa217 	ldw	r4,-376(fp)
   183cc:	e0ffa317 	ldw	r3,-372(fp)
   183d0:	20c7c83a 	sub	r3,r4,r3
   183d4:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   183d8:	e0bf9917 	ldw	r2,-412(fp)
   183dc:	10801804 	addi	r2,r2,96
   183e0:	e13fa817 	ldw	r4,-352(fp)
   183e4:	e0ffa417 	ldw	r3,-368(fp)
   183e8:	20c7883a 	add	r3,r4,r3
   183ec:	1807d2fa 	srai	r3,r3,11
   183f0:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   183f4:	e0bf9917 	ldw	r2,-412(fp)
   183f8:	10803004 	addi	r2,r2,192
   183fc:	e13fa817 	ldw	r4,-352(fp)
   18400:	e0ffa417 	ldw	r3,-368(fp)
   18404:	20c7c83a 	sub	r3,r4,r3
   18408:	1807d2fa 	srai	r3,r3,11
   1840c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   18410:	e0bf9917 	ldw	r2,-412(fp)
   18414:	10802004 	addi	r2,r2,128
   18418:	e13fa617 	ldw	r4,-360(fp)
   1841c:	e0ffaa17 	ldw	r3,-344(fp)
   18420:	20c7883a 	add	r3,r4,r3
   18424:	1807d2fa 	srai	r3,r3,11
   18428:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   1842c:	e0bf9917 	ldw	r2,-412(fp)
   18430:	10802804 	addi	r2,r2,160
   18434:	e13fa617 	ldw	r4,-360(fp)
   18438:	e0ffaa17 	ldw	r3,-344(fp)
   1843c:	20c7c83a 	sub	r3,r4,r3
   18440:	1807d2fa 	srai	r3,r3,11
   18444:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   18448:	e0bf9a17 	ldw	r2,-408(fp)
   1844c:	10800044 	addi	r2,r2,1
   18450:	e0bf9a15 	stw	r2,-408(fp)
   18454:	e0bf9717 	ldw	r2,-420(fp)
   18458:	10800084 	addi	r2,r2,2
   1845c:	e0bf9715 	stw	r2,-420(fp)
   18460:	e0bf9817 	ldw	r2,-416(fp)
   18464:	10800104 	addi	r2,r2,4
   18468:	e0bf9815 	stw	r2,-416(fp)
   1846c:	e0bf9917 	ldw	r2,-412(fp)
   18470:	10800104 	addi	r2,r2,4
   18474:	e0bf9915 	stw	r2,-412(fp)
   18478:	e0bf9a17 	ldw	r2,-408(fp)
   1847c:	10800210 	cmplti	r2,r2,8
   18480:	103eb71e 	bne	r2,zero,17f60 <jpeg_idct_10x10+0x54>
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 10 rows from work array, store into output array. */

	wsptr = workspace;
   18484:	e0bfac04 	addi	r2,fp,-336
   18488:	e0bf9915 	stw	r2,-412(fp)
	for (ctr = 0; ctr < 10; ctr++) {
   1848c:	e03f9a15 	stw	zero,-408(fp)
   18490:	00012806 	br	18934 <jpeg_idct_10x10+0xa28>
		outptr = output_buf[ctr] + output_col;
   18494:	e0bf9a17 	ldw	r2,-408(fp)
   18498:	1085883a 	add	r2,r2,r2
   1849c:	1085883a 	add	r2,r2,r2
   184a0:	e0ffff17 	ldw	r3,-4(fp)
   184a4:	1885883a 	add	r2,r3,r2
   184a8:	10c00017 	ldw	r3,0(r2)
   184ac:	e0800217 	ldw	r2,8(fp)
   184b0:	1885883a 	add	r2,r3,r2
   184b4:	e0bfab15 	stw	r2,-340(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   184b8:	e0bf9917 	ldw	r2,-412(fp)
   184bc:	10800017 	ldw	r2,0(r2)
   184c0:	10800404 	addi	r2,r2,16
   184c4:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
   184c8:	e0bf9c17 	ldw	r2,-400(fp)
   184cc:	1004937a 	slli	r2,r2,13
   184d0:	e0bf9c15 	stw	r2,-400(fp)
		z4 = (INT32) wsptr[4];
   184d4:	e0bf9917 	ldw	r2,-412(fp)
   184d8:	10800404 	addi	r2,r2,16
   184dc:	10800017 	ldw	r2,0(r2)
   184e0:	e0bf9d15 	stw	r2,-396(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
   184e4:	e13f9d17 	ldw	r4,-396(fp)
   184e8:	01492744 	movi	r5,9373
   184ec:	002c1540 	call	2c154 <__mulsi3>
   184f0:	e0bf9e15 	stw	r2,-392(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
   184f4:	e13f9d17 	ldw	r4,-396(fp)
   184f8:	01437f04 	movi	r5,3580
   184fc:	002c1540 	call	2c154 <__mulsi3>
   18500:	e0bf9f15 	stw	r2,-388(fp)
		tmp10 = z3 + z1;
   18504:	e0ff9c17 	ldw	r3,-400(fp)
   18508:	e0bf9e17 	ldw	r2,-392(fp)
   1850c:	1885883a 	add	r2,r3,r2
   18510:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = z3 - z2;
   18514:	e0ff9c17 	ldw	r3,-400(fp)
   18518:	e0bf9f17 	ldw	r2,-388(fp)
   1851c:	1885c83a 	sub	r2,r3,r2
   18520:	e0bfa115 	stw	r2,-380(fp)

		tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
   18524:	e0ff9e17 	ldw	r3,-392(fp)
   18528:	e0bf9f17 	ldw	r2,-388(fp)
   1852c:	1885c83a 	sub	r2,r3,r2
   18530:	1085883a 	add	r2,r2,r2
   18534:	e0ff9c17 	ldw	r3,-400(fp)
   18538:	1885c83a 	sub	r2,r3,r2
   1853c:	e0bfa215 	stw	r2,-376(fp)

		z2 = (INT32) wsptr[2];
   18540:	e0bf9917 	ldw	r2,-412(fp)
   18544:	10800204 	addi	r2,r2,8
   18548:	10800017 	ldw	r2,0(r2)
   1854c:	e0bf9f15 	stw	r2,-388(fp)
		z3 = (INT32) wsptr[6];
   18550:	e0bf9917 	ldw	r2,-412(fp)
   18554:	10800604 	addi	r2,r2,24
   18558:	10800017 	ldw	r2,0(r2)
   1855c:	e0bf9c15 	stw	r2,-400(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
   18560:	e0ff9f17 	ldw	r3,-388(fp)
   18564:	e0bf9c17 	ldw	r2,-400(fp)
   18568:	1885883a 	add	r2,r3,r2
   1856c:	1009883a 	mov	r4,r2
   18570:	0146a684 	movi	r5,6810
   18574:	002c1540 	call	2c154 <__mulsi3>
   18578:	e0bf9e15 	stw	r2,-392(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
   1857c:	e13f9f17 	ldw	r4,-388(fp)
   18580:	01441c44 	movi	r5,4209
   18584:	002c1540 	call	2c154 <__mulsi3>
   18588:	1007883a 	mov	r3,r2
   1858c:	e0bf9e17 	ldw	r2,-392(fp)
   18590:	1885883a 	add	r2,r3,r2
   18594:	e0bfa315 	stw	r2,-372(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
   18598:	e13f9c17 	ldw	r4,-400(fp)
   1859c:	016e9704 	movi	r5,-17828
   185a0:	002c1540 	call	2c154 <__mulsi3>
   185a4:	1007883a 	mov	r3,r2
   185a8:	e0bf9e17 	ldw	r2,-392(fp)
   185ac:	1885883a 	add	r2,r3,r2
   185b0:	e0bfa415 	stw	r2,-368(fp)

		tmp20 = tmp10 + tmp12;
   185b4:	e0ffa017 	ldw	r3,-384(fp)
   185b8:	e0bfa317 	ldw	r2,-372(fp)
   185bc:	1885883a 	add	r2,r3,r2
   185c0:	e0bfa515 	stw	r2,-364(fp)
		tmp24 = tmp10 - tmp12;
   185c4:	e0ffa017 	ldw	r3,-384(fp)
   185c8:	e0bfa317 	ldw	r2,-372(fp)
   185cc:	1885c83a 	sub	r2,r3,r2
   185d0:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp11 + tmp13;
   185d4:	e0ffa117 	ldw	r3,-380(fp)
   185d8:	e0bfa417 	ldw	r2,-368(fp)
   185dc:	1885883a 	add	r2,r3,r2
   185e0:	e0bfa715 	stw	r2,-356(fp)
		tmp23 = tmp11 - tmp13;
   185e4:	e0ffa117 	ldw	r3,-380(fp)
   185e8:	e0bfa417 	ldw	r2,-368(fp)
   185ec:	1885c83a 	sub	r2,r3,r2
   185f0:	e0bfa815 	stw	r2,-352(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   185f4:	e0bf9917 	ldw	r2,-412(fp)
   185f8:	10800104 	addi	r2,r2,4
   185fc:	10800017 	ldw	r2,0(r2)
   18600:	e0bf9e15 	stw	r2,-392(fp)
		z2 = (INT32) wsptr[3];
   18604:	e0bf9917 	ldw	r2,-412(fp)
   18608:	10800304 	addi	r2,r2,12
   1860c:	10800017 	ldw	r2,0(r2)
   18610:	e0bf9f15 	stw	r2,-388(fp)
		z3 = (INT32) wsptr[5];
   18614:	e0bf9917 	ldw	r2,-412(fp)
   18618:	10800504 	addi	r2,r2,20
   1861c:	10800017 	ldw	r2,0(r2)
   18620:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
   18624:	e0bf9c17 	ldw	r2,-400(fp)
   18628:	1004937a 	slli	r2,r2,13
   1862c:	e0bf9c15 	stw	r2,-400(fp)
		z4 = (INT32) wsptr[7];
   18630:	e0bf9917 	ldw	r2,-412(fp)
   18634:	10800704 	addi	r2,r2,28
   18638:	10800017 	ldw	r2,0(r2)
   1863c:	e0bf9d15 	stw	r2,-396(fp)

		tmp11 = z2 + z4;
   18640:	e0ff9f17 	ldw	r3,-388(fp)
   18644:	e0bf9d17 	ldw	r2,-396(fp)
   18648:	1885883a 	add	r2,r3,r2
   1864c:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = z2 - z4;
   18650:	e0ff9f17 	ldw	r3,-388(fp)
   18654:	e0bf9d17 	ldw	r2,-396(fp)
   18658:	1885c83a 	sub	r2,r3,r2
   1865c:	e0bfa415 	stw	r2,-368(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
   18660:	e13fa417 	ldw	r4,-368(fp)
   18664:	014278c4 	movi	r5,2531
   18668:	002c1540 	call	2c154 <__mulsi3>
   1866c:	e0bfa315 	stw	r2,-372(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
   18670:	e13fa117 	ldw	r4,-380(fp)
   18674:	01479bc4 	movi	r5,7791
   18678:	002c1540 	call	2c154 <__mulsi3>
   1867c:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z3 + tmp12;
   18680:	e0ff9c17 	ldw	r3,-400(fp)
   18684:	e0bfa317 	ldw	r2,-372(fp)
   18688:	1885883a 	add	r2,r3,r2
   1868c:	e0bf9d15 	stw	r2,-396(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
   18690:	e13f9e17 	ldw	r4,-392(fp)
   18694:	014b2cc4 	movi	r5,11443
   18698:	002c1540 	call	2c154 <__mulsi3>
   1869c:	1007883a 	mov	r3,r2
   186a0:	e0bf9f17 	ldw	r2,-388(fp)
   186a4:	1887883a 	add	r3,r3,r2
   186a8:	e0bf9d17 	ldw	r2,-396(fp)
   186ac:	1885883a 	add	r2,r3,r2
   186b0:	e0bfa015 	stw	r2,-384(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
   186b4:	e13f9e17 	ldw	r4,-392(fp)
   186b8:	0141c504 	movi	r5,1812
   186bc:	002c1540 	call	2c154 <__mulsi3>
   186c0:	1007883a 	mov	r3,r2
   186c4:	e0bf9f17 	ldw	r2,-388(fp)
   186c8:	1887c83a 	sub	r3,r3,r2
   186cc:	e0bf9d17 	ldw	r2,-396(fp)
   186d0:	1885883a 	add	r2,r3,r2
   186d4:	e0bfaa15 	stw	r2,-344(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
   186d8:	e13fa117 	ldw	r4,-380(fp)
   186dc:	0144b3c4 	movi	r5,4815
   186e0:	002c1540 	call	2c154 <__mulsi3>
   186e4:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
   186e8:	e0ff9c17 	ldw	r3,-400(fp)
   186ec:	e0bfa317 	ldw	r2,-372(fp)
   186f0:	1887c83a 	sub	r3,r3,r2
   186f4:	e0bfa417 	ldw	r2,-368(fp)
   186f8:	1004933a 	slli	r2,r2,12
   186fc:	1885c83a 	sub	r2,r3,r2
   18700:	e0bf9d15 	stw	r2,-396(fp)

		tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
   18704:	e0ff9e17 	ldw	r3,-392(fp)
   18708:	e0bfa417 	ldw	r2,-368(fp)
   1870c:	1885c83a 	sub	r2,r3,r2
   18710:	1006937a 	slli	r3,r2,13
   18714:	e0bf9c17 	ldw	r2,-400(fp)
   18718:	1885c83a 	sub	r2,r3,r2
   1871c:	e0bfa315 	stw	r2,-372(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
   18720:	e13f9e17 	ldw	r4,-392(fp)
   18724:	014a14c4 	movi	r5,10323
   18728:	002c1540 	call	2c154 <__mulsi3>
   1872c:	1007883a 	mov	r3,r2
   18730:	e0bf9f17 	ldw	r2,-388(fp)
   18734:	1887c83a 	sub	r3,r3,r2
   18738:	e0bf9d17 	ldw	r2,-396(fp)
   1873c:	1885c83a 	sub	r2,r3,r2
   18740:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
   18744:	e13f9e17 	ldw	r4,-392(fp)
   18748:	01452304 	movi	r5,5260
   1874c:	002c1540 	call	2c154 <__mulsi3>
   18750:	1007883a 	mov	r3,r2
   18754:	e0bf9f17 	ldw	r2,-388(fp)
   18758:	1887c83a 	sub	r3,r3,r2
   1875c:	e0bf9d17 	ldw	r2,-396(fp)
   18760:	1885883a 	add	r2,r3,r2
   18764:	e0bfa415 	stw	r2,-368(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   18768:	e0ffa517 	ldw	r3,-364(fp)
   1876c:	e0bfa017 	ldw	r2,-384(fp)
   18770:	1885883a 	add	r2,r3,r2
   18774:	1005d4ba 	srai	r2,r2,18
   18778:	1080ffcc 	andi	r2,r2,1023
   1877c:	e0ff9b17 	ldw	r3,-404(fp)
   18780:	1885883a 	add	r2,r3,r2
   18784:	10c00003 	ldbu	r3,0(r2)
   18788:	e0bfab17 	ldw	r2,-340(fp)
   1878c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   18790:	e0bfab17 	ldw	r2,-340(fp)
   18794:	10800244 	addi	r2,r2,9
   18798:	e13fa517 	ldw	r4,-364(fp)
   1879c:	e0ffa017 	ldw	r3,-384(fp)
   187a0:	20c7c83a 	sub	r3,r4,r3
   187a4:	1807d4ba 	srai	r3,r3,18
   187a8:	18c0ffcc 	andi	r3,r3,1023
   187ac:	e13f9b17 	ldw	r4,-404(fp)
   187b0:	20c7883a 	add	r3,r4,r3
   187b4:	18c00003 	ldbu	r3,0(r3)
   187b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   187bc:	e0bfab17 	ldw	r2,-340(fp)
   187c0:	10800044 	addi	r2,r2,1
   187c4:	e13fa717 	ldw	r4,-356(fp)
   187c8:	e0ffa117 	ldw	r3,-380(fp)
   187cc:	20c7883a 	add	r3,r4,r3
   187d0:	1807d4ba 	srai	r3,r3,18
   187d4:	18c0ffcc 	andi	r3,r3,1023
   187d8:	e13f9b17 	ldw	r4,-404(fp)
   187dc:	20c7883a 	add	r3,r4,r3
   187e0:	18c00003 	ldbu	r3,0(r3)
   187e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   187e8:	e0bfab17 	ldw	r2,-340(fp)
   187ec:	10800204 	addi	r2,r2,8
   187f0:	e13fa717 	ldw	r4,-356(fp)
   187f4:	e0ffa117 	ldw	r3,-380(fp)
   187f8:	20c7c83a 	sub	r3,r4,r3
   187fc:	1807d4ba 	srai	r3,r3,18
   18800:	18c0ffcc 	andi	r3,r3,1023
   18804:	e13f9b17 	ldw	r4,-404(fp)
   18808:	20c7883a 	add	r3,r4,r3
   1880c:	18c00003 	ldbu	r3,0(r3)
   18810:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   18814:	e0bfab17 	ldw	r2,-340(fp)
   18818:	10800084 	addi	r2,r2,2
   1881c:	e13fa217 	ldw	r4,-376(fp)
   18820:	e0ffa317 	ldw	r3,-372(fp)
   18824:	20c7883a 	add	r3,r4,r3
   18828:	1807d4ba 	srai	r3,r3,18
   1882c:	18c0ffcc 	andi	r3,r3,1023
   18830:	e13f9b17 	ldw	r4,-404(fp)
   18834:	20c7883a 	add	r3,r4,r3
   18838:	18c00003 	ldbu	r3,0(r3)
   1883c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   18840:	e0bfab17 	ldw	r2,-340(fp)
   18844:	108001c4 	addi	r2,r2,7
   18848:	e13fa217 	ldw	r4,-376(fp)
   1884c:	e0ffa317 	ldw	r3,-372(fp)
   18850:	20c7c83a 	sub	r3,r4,r3
   18854:	1807d4ba 	srai	r3,r3,18
   18858:	18c0ffcc 	andi	r3,r3,1023
   1885c:	e13f9b17 	ldw	r4,-404(fp)
   18860:	20c7883a 	add	r3,r4,r3
   18864:	18c00003 	ldbu	r3,0(r3)
   18868:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1886c:	e0bfab17 	ldw	r2,-340(fp)
   18870:	108000c4 	addi	r2,r2,3
   18874:	e13fa817 	ldw	r4,-352(fp)
   18878:	e0ffa417 	ldw	r3,-368(fp)
   1887c:	20c7883a 	add	r3,r4,r3
   18880:	1807d4ba 	srai	r3,r3,18
   18884:	18c0ffcc 	andi	r3,r3,1023
   18888:	e13f9b17 	ldw	r4,-404(fp)
   1888c:	20c7883a 	add	r3,r4,r3
   18890:	18c00003 	ldbu	r3,0(r3)
   18894:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   18898:	e0bfab17 	ldw	r2,-340(fp)
   1889c:	10800184 	addi	r2,r2,6
   188a0:	e13fa817 	ldw	r4,-352(fp)
   188a4:	e0ffa417 	ldw	r3,-368(fp)
   188a8:	20c7c83a 	sub	r3,r4,r3
   188ac:	1807d4ba 	srai	r3,r3,18
   188b0:	18c0ffcc 	andi	r3,r3,1023
   188b4:	e13f9b17 	ldw	r4,-404(fp)
   188b8:	20c7883a 	add	r3,r4,r3
   188bc:	18c00003 	ldbu	r3,0(r3)
   188c0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   188c4:	e0bfab17 	ldw	r2,-340(fp)
   188c8:	10800104 	addi	r2,r2,4
   188cc:	e13fa617 	ldw	r4,-360(fp)
   188d0:	e0ffaa17 	ldw	r3,-344(fp)
   188d4:	20c7883a 	add	r3,r4,r3
   188d8:	1807d4ba 	srai	r3,r3,18
   188dc:	18c0ffcc 	andi	r3,r3,1023
   188e0:	e13f9b17 	ldw	r4,-404(fp)
   188e4:	20c7883a 	add	r3,r4,r3
   188e8:	18c00003 	ldbu	r3,0(r3)
   188ec:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   188f0:	e0bfab17 	ldw	r2,-340(fp)
   188f4:	10800144 	addi	r2,r2,5
   188f8:	e13fa617 	ldw	r4,-360(fp)
   188fc:	e0ffaa17 	ldw	r3,-344(fp)
   18900:	20c7c83a 	sub	r3,r4,r3
   18904:	1807d4ba 	srai	r3,r3,18
   18908:	18c0ffcc 	andi	r3,r3,1023
   1890c:	e13f9b17 	ldw	r4,-404(fp)
   18910:	20c7883a 	add	r3,r4,r3
   18914:	18c00003 	ldbu	r3,0(r3)
   18918:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1891c:	e0bf9917 	ldw	r2,-412(fp)
   18920:	10800804 	addi	r2,r2,32
   18924:	e0bf9915 	stw	r2,-412(fp)
	}

	/* Pass 2: process 10 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 10; ctr++) {
   18928:	e0bf9a17 	ldw	r2,-408(fp)
   1892c:	10800044 	addi	r2,r2,1
   18930:	e0bf9a15 	stw	r2,-408(fp)
   18934:	e0bf9a17 	ldw	r2,-408(fp)
   18938:	10800290 	cmplti	r2,r2,10
   1893c:	103ed51e 	bne	r2,zero,18494 <jpeg_idct_10x10+0x588>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   18940:	e037883a 	mov	sp,fp
   18944:	dfc00117 	ldw	ra,4(sp)
   18948:	df000017 	ldw	fp,0(sp)
   1894c:	dec00204 	addi	sp,sp,8
   18950:	f800283a 	ret

00018954 <jpeg_idct_11x11>:

GLOBAL(void)
	jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   18954:	deff8c04 	addi	sp,sp,-464
   18958:	dfc07315 	stw	ra,460(sp)
   1895c:	df007215 	stw	fp,456(sp)
   18960:	dc007115 	stw	r16,452(sp)
   18964:	df007104 	addi	fp,sp,452
   18968:	e13ffc15 	stw	r4,-16(fp)
   1896c:	e17ffd15 	stw	r5,-12(fp)
   18970:	e1bffe15 	stw	r6,-8(fp)
   18974:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   18978:	e0bffc17 	ldw	r2,-16(fp)
   1897c:	10804917 	ldw	r2,292(r2)
   18980:	10802004 	addi	r2,r2,128
   18984:	e0bf9315 	stw	r2,-436(fp)
	int workspace[8*11];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   18988:	e0bffe17 	ldw	r2,-8(fp)
   1898c:	e0bf8f15 	stw	r2,-452(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   18990:	e0bffd17 	ldw	r2,-12(fp)
   18994:	10801517 	ldw	r2,84(r2)
   18998:	e0bf9015 	stw	r2,-448(fp)
	wsptr = workspace;
   1899c:	e0bfa404 	addi	r2,fp,-368
   189a0:	e0bf9115 	stw	r2,-444(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   189a4:	e03f9215 	stw	zero,-440(fp)
   189a8:	00018706 	br	18fc8 <jpeg_idct_11x11+0x674>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   189ac:	e0bf8f17 	ldw	r2,-452(fp)
   189b0:	1080000b 	ldhu	r2,0(r2)
   189b4:	10ffffcc 	andi	r3,r2,65535
   189b8:	18e0001c 	xori	r3,r3,32768
   189bc:	18e00004 	addi	r3,r3,-32768
   189c0:	e0bf9017 	ldw	r2,-448(fp)
   189c4:	10800017 	ldw	r2,0(r2)
   189c8:	1809883a 	mov	r4,r3
   189cc:	100b883a 	mov	r5,r2
   189d0:	002c1540 	call	2c154 <__mulsi3>
   189d4:	e0bf9415 	stw	r2,-432(fp)
		tmp10 <<= CONST_BITS;
   189d8:	e0bf9417 	ldw	r2,-432(fp)
   189dc:	1004937a 	slli	r2,r2,13
   189e0:	e0bf9415 	stw	r2,-432(fp)
		/* Add fudge factor here for final descale. */
		tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
   189e4:	e0bf9417 	ldw	r2,-432(fp)
   189e8:	10810004 	addi	r2,r2,1024
   189ec:	e0bf9415 	stw	r2,-432(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   189f0:	e0bf8f17 	ldw	r2,-452(fp)
   189f4:	10800804 	addi	r2,r2,32
   189f8:	1080000b 	ldhu	r2,0(r2)
   189fc:	10ffffcc 	andi	r3,r2,65535
   18a00:	18e0001c 	xori	r3,r3,32768
   18a04:	18e00004 	addi	r3,r3,-32768
   18a08:	e0bf9017 	ldw	r2,-448(fp)
   18a0c:	10801004 	addi	r2,r2,64
   18a10:	10800017 	ldw	r2,0(r2)
   18a14:	1809883a 	mov	r4,r3
   18a18:	100b883a 	mov	r5,r2
   18a1c:	002c1540 	call	2c154 <__mulsi3>
   18a20:	e0bf9515 	stw	r2,-428(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   18a24:	e0bf8f17 	ldw	r2,-452(fp)
   18a28:	10801004 	addi	r2,r2,64
   18a2c:	1080000b 	ldhu	r2,0(r2)
   18a30:	10ffffcc 	andi	r3,r2,65535
   18a34:	18e0001c 	xori	r3,r3,32768
   18a38:	18e00004 	addi	r3,r3,-32768
   18a3c:	e0bf9017 	ldw	r2,-448(fp)
   18a40:	10802004 	addi	r2,r2,128
   18a44:	10800017 	ldw	r2,0(r2)
   18a48:	1809883a 	mov	r4,r3
   18a4c:	100b883a 	mov	r5,r2
   18a50:	002c1540 	call	2c154 <__mulsi3>
   18a54:	e0bf9615 	stw	r2,-424(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   18a58:	e0bf8f17 	ldw	r2,-452(fp)
   18a5c:	10801804 	addi	r2,r2,96
   18a60:	1080000b 	ldhu	r2,0(r2)
   18a64:	10ffffcc 	andi	r3,r2,65535
   18a68:	18e0001c 	xori	r3,r3,32768
   18a6c:	18e00004 	addi	r3,r3,-32768
   18a70:	e0bf9017 	ldw	r2,-448(fp)
   18a74:	10803004 	addi	r2,r2,192
   18a78:	10800017 	ldw	r2,0(r2)
   18a7c:	1809883a 	mov	r4,r3
   18a80:	100b883a 	mov	r5,r2
   18a84:	002c1540 	call	2c154 <__mulsi3>
   18a88:	e0bf9715 	stw	r2,-420(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
   18a8c:	e0ff9617 	ldw	r3,-424(fp)
   18a90:	e0bf9717 	ldw	r2,-420(fp)
   18a94:	1885c83a 	sub	r2,r3,r2
   18a98:	1009883a 	mov	r4,r2
   18a9c:	01545f84 	movi	r5,20862
   18aa0:	002c1540 	call	2c154 <__mulsi3>
   18aa4:	e0bf9815 	stw	r2,-416(fp)
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
   18aa8:	e0ff9617 	ldw	r3,-424(fp)
   18aac:	e0bf9517 	ldw	r2,-428(fp)
   18ab0:	1885c83a 	sub	r2,r3,r2
   18ab4:	1009883a 	mov	r4,r2
   18ab8:	01437244 	movi	r5,3529
   18abc:	002c1540 	call	2c154 <__mulsi3>
   18ac0:	e0bf9915 	stw	r2,-412(fp)
		z4 = z1 + z3;
   18ac4:	e0ff9517 	ldw	r3,-428(fp)
   18ac8:	e0bf9717 	ldw	r2,-420(fp)
   18acc:	1885883a 	add	r2,r3,r2
   18ad0:	e0bf9a15 	stw	r2,-408(fp)
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
   18ad4:	e13f9a17 	ldw	r4,-408(fp)
   18ad8:	0176c144 	movi	r5,-9467
   18adc:	002c1540 	call	2c154 <__mulsi3>
   18ae0:	e0bf9b15 	stw	r2,-404(fp)
		z4 -= z2;
   18ae4:	e0ff9a17 	ldw	r3,-408(fp)
   18ae8:	e0bf9617 	ldw	r2,-424(fp)
   18aec:	1885c83a 	sub	r2,r3,r2
   18af0:	e0bf9a15 	stw	r2,-408(fp)
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
   18af4:	e13f9a17 	ldw	r4,-408(fp)
   18af8:	014adb04 	movi	r5,11116
   18afc:	002c1540 	call	2c154 <__mulsi3>
   18b00:	1007883a 	mov	r3,r2
   18b04:	e0bf9417 	ldw	r2,-432(fp)
   18b08:	1885883a 	add	r2,r3,r2
   18b0c:	e0bf9c15 	stw	r2,-400(fp)
		tmp21 = tmp20 + tmp23 + tmp25 -
   18b10:	e0ff9817 	ldw	r3,-416(fp)
   18b14:	e0bf9917 	ldw	r2,-412(fp)
   18b18:	1887883a 	add	r3,r3,r2
   18b1c:	e0bf9c17 	ldw	r2,-400(fp)
   18b20:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
   18b24:	e13f9617 	ldw	r4,-424(fp)
   18b28:	01716d04 	movi	r5,-14924
   18b2c:	002c1540 	call	2c154 <__mulsi3>
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
		z4 = z1 + z3;
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
		z4 -= z2;
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
		tmp21 = tmp20 + tmp23 + tmp25 -
   18b30:	8085883a 	add	r2,r16,r2
   18b34:	e0bf9d15 	stw	r2,-396(fp)
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
   18b38:	e13f9717 	ldw	r4,-420(fp)
   18b3c:	0150ed44 	movi	r5,17333
   18b40:	002c1540 	call	2c154 <__mulsi3>
   18b44:	1007883a 	mov	r3,r2
   18b48:	e0bf9c17 	ldw	r2,-400(fp)
   18b4c:	1885883a 	add	r2,r3,r2
   18b50:	e0ff9817 	ldw	r3,-416(fp)
   18b54:	1885883a 	add	r2,r3,r2
   18b58:	e0bf9815 	stw	r2,-416(fp)
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
   18b5c:	e13f9517 	ldw	r4,-428(fp)
   18b60:	0173e444 	movi	r5,-12399
   18b64:	002c1540 	call	2c154 <__mulsi3>
   18b68:	1007883a 	mov	r3,r2
   18b6c:	e0bf9c17 	ldw	r2,-400(fp)
   18b70:	1885883a 	add	r2,r3,r2
   18b74:	e0ff9917 	ldw	r3,-412(fp)
   18b78:	1885883a 	add	r2,r3,r2
   18b7c:	e0bf9915 	stw	r2,-412(fp)
		tmp24 += tmp25;
   18b80:	e0ff9b17 	ldw	r3,-404(fp)
   18b84:	e0bf9c17 	ldw	r2,-400(fp)
   18b88:	1885883a 	add	r2,r3,r2
   18b8c:	e0bf9b15 	stw	r2,-404(fp)
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
   18b90:	e13f9717 	ldw	r4,-420(fp)
   18b94:	0179b0c4 	movi	r5,-6461
   18b98:	002c1540 	call	2c154 <__mulsi3>
   18b9c:	1007883a 	mov	r3,r2
   18ba0:	e0bf9b17 	ldw	r2,-404(fp)
   18ba4:	1885883a 	add	r2,r3,r2
   18ba8:	e0bf9e15 	stw	r2,-392(fp)
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
   18bac:	e13f9617 	ldw	r4,-424(fp)
   18bb0:	014f8e44 	movi	r5,15929
   18bb4:	002c1540 	call	2c154 <__mulsi3>
   18bb8:	1021883a 	mov	r16,r2
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
   18bbc:	e13f9517 	ldw	r4,-428(fp)
   18bc0:	0174df44 	movi	r5,-11395
   18bc4:	002c1540 	call	2c154 <__mulsi3>
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
		tmp24 += tmp25;
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
   18bc8:	8085883a 	add	r2,r16,r2
   18bcc:	e0ff9b17 	ldw	r3,-404(fp)
   18bd0:	1885883a 	add	r2,r3,r2
   18bd4:	e0bf9b15 	stw	r2,-404(fp)
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
		tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
   18bd8:	e13f9a17 	ldw	r4,-408(fp)
   18bdc:	0174afc4 	movi	r5,-11585
   18be0:	002c1540 	call	2c154 <__mulsi3>
   18be4:	1007883a 	mov	r3,r2
   18be8:	e0bf9417 	ldw	r2,-432(fp)
   18bec:	1885883a 	add	r2,r3,r2
   18bf0:	e0bf9c15 	stw	r2,-400(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   18bf4:	e0bf8f17 	ldw	r2,-452(fp)
   18bf8:	10800404 	addi	r2,r2,16
   18bfc:	1080000b 	ldhu	r2,0(r2)
   18c00:	10ffffcc 	andi	r3,r2,65535
   18c04:	18e0001c 	xori	r3,r3,32768
   18c08:	18e00004 	addi	r3,r3,-32768
   18c0c:	e0bf9017 	ldw	r2,-448(fp)
   18c10:	10800804 	addi	r2,r2,32
   18c14:	10800017 	ldw	r2,0(r2)
   18c18:	1809883a 	mov	r4,r3
   18c1c:	100b883a 	mov	r5,r2
   18c20:	002c1540 	call	2c154 <__mulsi3>
   18c24:	e0bf9515 	stw	r2,-428(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   18c28:	e0bf8f17 	ldw	r2,-452(fp)
   18c2c:	10800c04 	addi	r2,r2,48
   18c30:	1080000b 	ldhu	r2,0(r2)
   18c34:	10ffffcc 	andi	r3,r2,65535
   18c38:	18e0001c 	xori	r3,r3,32768
   18c3c:	18e00004 	addi	r3,r3,-32768
   18c40:	e0bf9017 	ldw	r2,-448(fp)
   18c44:	10801804 	addi	r2,r2,96
   18c48:	10800017 	ldw	r2,0(r2)
   18c4c:	1809883a 	mov	r4,r3
   18c50:	100b883a 	mov	r5,r2
   18c54:	002c1540 	call	2c154 <__mulsi3>
   18c58:	e0bf9615 	stw	r2,-424(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   18c5c:	e0bf8f17 	ldw	r2,-452(fp)
   18c60:	10801404 	addi	r2,r2,80
   18c64:	1080000b 	ldhu	r2,0(r2)
   18c68:	10ffffcc 	andi	r3,r2,65535
   18c6c:	18e0001c 	xori	r3,r3,32768
   18c70:	18e00004 	addi	r3,r3,-32768
   18c74:	e0bf9017 	ldw	r2,-448(fp)
   18c78:	10802804 	addi	r2,r2,160
   18c7c:	10800017 	ldw	r2,0(r2)
   18c80:	1809883a 	mov	r4,r3
   18c84:	100b883a 	mov	r5,r2
   18c88:	002c1540 	call	2c154 <__mulsi3>
   18c8c:	e0bf9715 	stw	r2,-420(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   18c90:	e0bf8f17 	ldw	r2,-452(fp)
   18c94:	10801c04 	addi	r2,r2,112
   18c98:	1080000b 	ldhu	r2,0(r2)
   18c9c:	10ffffcc 	andi	r3,r2,65535
   18ca0:	18e0001c 	xori	r3,r3,32768
   18ca4:	18e00004 	addi	r3,r3,-32768
   18ca8:	e0bf9017 	ldw	r2,-448(fp)
   18cac:	10803804 	addi	r2,r2,224
   18cb0:	10800017 	ldw	r2,0(r2)
   18cb4:	1809883a 	mov	r4,r3
   18cb8:	100b883a 	mov	r5,r2
   18cbc:	002c1540 	call	2c154 <__mulsi3>
   18cc0:	e0bf9a15 	stw	r2,-408(fp)

		tmp11 = z1 + z2;
   18cc4:	e0ff9517 	ldw	r3,-428(fp)
   18cc8:	e0bf9617 	ldw	r2,-424(fp)
   18ccc:	1885883a 	add	r2,r3,r2
   18cd0:	e0bf9f15 	stw	r2,-388(fp)
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
   18cd4:	e0ff9f17 	ldw	r3,-388(fp)
   18cd8:	e0bf9717 	ldw	r2,-420(fp)
   18cdc:	1887883a 	add	r3,r3,r2
   18ce0:	e0bf9a17 	ldw	r2,-408(fp)
   18ce4:	1885883a 	add	r2,r3,r2
   18ce8:	1009883a 	mov	r4,r2
   18cec:	01433004 	movi	r5,3264
   18cf0:	002c1540 	call	2c154 <__mulsi3>
   18cf4:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
   18cf8:	e13f9f17 	ldw	r4,-388(fp)
   18cfc:	01471a84 	movi	r5,7274
   18d00:	002c1540 	call	2c154 <__mulsi3>
   18d04:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
   18d08:	e0ff9517 	ldw	r3,-428(fp)
   18d0c:	e0bf9717 	ldw	r2,-420(fp)
   18d10:	1885883a 	add	r2,r3,r2
   18d14:	1009883a 	mov	r4,r2
   18d18:	01455d04 	movi	r5,5492
   18d1c:	002c1540 	call	2c154 <__mulsi3>
   18d20:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
   18d24:	e0ff9517 	ldw	r3,-428(fp)
   18d28:	e0bf9a17 	ldw	r2,-408(fp)
   18d2c:	1885883a 	add	r2,r3,r2
   18d30:	1009883a 	mov	r4,r2
   18d34:	0142ee04 	movi	r5,3000
   18d38:	002c1540 	call	2c154 <__mulsi3>
   18d3c:	1007883a 	mov	r3,r2
   18d40:	e0bfa017 	ldw	r2,-384(fp)
   18d44:	1885883a 	add	r2,r3,r2
   18d48:	e0bfa215 	stw	r2,-376(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
   18d4c:	e0ff9f17 	ldw	r3,-388(fp)
   18d50:	e0bfa117 	ldw	r2,-380(fp)
   18d54:	1887883a 	add	r3,r3,r2
   18d58:	e0bfa217 	ldw	r2,-376(fp)
   18d5c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
   18d60:	e13f9517 	ldw	r4,-428(fp)
   18d64:	01789d84 	movi	r5,-7562
   18d68:	002c1540 	call	2c154 <__mulsi3>
		tmp11 = z1 + z2;
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
		tmp10 = tmp11 + tmp12 + tmp13 -
   18d6c:	8085883a 	add	r2,r16,r2
   18d70:	e0bf9415 	stw	r2,-432(fp)
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
		z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
   18d74:	e0ff9617 	ldw	r3,-424(fp)
   18d78:	e0bf9717 	ldw	r2,-420(fp)
   18d7c:	1885883a 	add	r2,r3,r2
   18d80:	1009883a 	mov	r4,r2
   18d84:	0176b244 	movi	r5,-9527
   18d88:	002c1540 	call	2c154 <__mulsi3>
   18d8c:	1007883a 	mov	r3,r2
   18d90:	e0bfa017 	ldw	r2,-384(fp)
   18d94:	1885883a 	add	r2,r3,r2
   18d98:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
   18d9c:	e13f9617 	ldw	r4,-424(fp)
   18da0:	01509604 	movi	r5,16984
   18da4:	002c1540 	call	2c154 <__mulsi3>
   18da8:	1007883a 	mov	r3,r2
   18dac:	e0bf9517 	ldw	r2,-428(fp)
   18db0:	1885883a 	add	r2,r3,r2
   18db4:	e0ff9f17 	ldw	r3,-388(fp)
   18db8:	1885883a 	add	r2,r3,r2
   18dbc:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
   18dc0:	e13f9717 	ldw	r4,-420(fp)
   18dc4:	01767684 	movi	r5,-9766
   18dc8:	002c1540 	call	2c154 <__mulsi3>
   18dcc:	1007883a 	mov	r3,r2
   18dd0:	e0bf9517 	ldw	r2,-428(fp)
   18dd4:	1885883a 	add	r2,r3,r2
   18dd8:	e0ffa117 	ldw	r3,-380(fp)
   18ddc:	1885883a 	add	r2,r3,r2
   18de0:	e0bfa115 	stw	r2,-380(fp)
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
   18de4:	e0ff9617 	ldw	r3,-424(fp)
   18de8:	e0bf9a17 	ldw	r2,-408(fp)
   18dec:	1885883a 	add	r2,r3,r2
   18df0:	1009883a 	mov	r4,r2
   18df4:	01719d44 	movi	r5,-14731
   18df8:	002c1540 	call	2c154 <__mulsi3>
   18dfc:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1;
   18e00:	e0ff9f17 	ldw	r3,-388(fp)
   18e04:	e0bf9517 	ldw	r2,-428(fp)
   18e08:	1885883a 	add	r2,r3,r2
   18e0c:	e0bf9f15 	stw	r2,-388(fp)
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
   18e10:	e13f9a17 	ldw	r4,-408(fp)
   18e14:	0150d1c4 	movi	r5,17223
   18e18:	002c1540 	call	2c154 <__mulsi3>
   18e1c:	1007883a 	mov	r3,r2
   18e20:	e0bf9517 	ldw	r2,-428(fp)
   18e24:	1885883a 	add	r2,r3,r2
   18e28:	e0ffa217 	ldw	r3,-376(fp)
   18e2c:	1885883a 	add	r2,r3,r2
   18e30:	e0bfa215 	stw	r2,-376(fp)
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   18e34:	e13f9617 	ldw	r4,-424(fp)
   18e38:	01744344 	movi	r5,-12019
   18e3c:	002c1540 	call	2c154 <__mulsi3>
   18e40:	1021883a 	mov	r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
   18e44:	e13f9717 	ldw	r4,-420(fp)
   18e48:	014802c4 	movi	r5,8203
   18e4c:	002c1540 	call	2c154 <__mulsi3>
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   18e50:	80a1883a 	add	r16,r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
   18e54:	e13f9a17 	ldw	r4,-408(fp)
   18e58:	01728584 	movi	r5,-13802
   18e5c:	002c1540 	call	2c154 <__mulsi3>
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
   18e60:	8085883a 	add	r2,r16,r2
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   18e64:	e0ffa017 	ldw	r3,-384(fp)
   18e68:	1885883a 	add	r2,r3,r2
   18e6c:	e0bfa015 	stw	r2,-384(fp)
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   18e70:	e0ff9817 	ldw	r3,-416(fp)
   18e74:	e0bf9417 	ldw	r2,-432(fp)
   18e78:	1885883a 	add	r2,r3,r2
   18e7c:	1007d2fa 	srai	r3,r2,11
   18e80:	e0bf9117 	ldw	r2,-444(fp)
   18e84:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   18e88:	e0bf9117 	ldw	r2,-444(fp)
   18e8c:	10805004 	addi	r2,r2,320
   18e90:	e13f9817 	ldw	r4,-416(fp)
   18e94:	e0ff9417 	ldw	r3,-432(fp)
   18e98:	20c7c83a 	sub	r3,r4,r3
   18e9c:	1807d2fa 	srai	r3,r3,11
   18ea0:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   18ea4:	e0bf9117 	ldw	r2,-444(fp)
   18ea8:	10800804 	addi	r2,r2,32
   18eac:	e13f9d17 	ldw	r4,-396(fp)
   18eb0:	e0ff9f17 	ldw	r3,-388(fp)
   18eb4:	20c7883a 	add	r3,r4,r3
   18eb8:	1807d2fa 	srai	r3,r3,11
   18ebc:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   18ec0:	e0bf9117 	ldw	r2,-444(fp)
   18ec4:	10804804 	addi	r2,r2,288
   18ec8:	e13f9d17 	ldw	r4,-396(fp)
   18ecc:	e0ff9f17 	ldw	r3,-388(fp)
   18ed0:	20c7c83a 	sub	r3,r4,r3
   18ed4:	1807d2fa 	srai	r3,r3,11
   18ed8:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   18edc:	e0bf9117 	ldw	r2,-444(fp)
   18ee0:	10801004 	addi	r2,r2,64
   18ee4:	e13f9e17 	ldw	r4,-392(fp)
   18ee8:	e0ffa117 	ldw	r3,-380(fp)
   18eec:	20c7883a 	add	r3,r4,r3
   18ef0:	1807d2fa 	srai	r3,r3,11
   18ef4:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   18ef8:	e0bf9117 	ldw	r2,-444(fp)
   18efc:	10804004 	addi	r2,r2,256
   18f00:	e13f9e17 	ldw	r4,-392(fp)
   18f04:	e0ffa117 	ldw	r3,-380(fp)
   18f08:	20c7c83a 	sub	r3,r4,r3
   18f0c:	1807d2fa 	srai	r3,r3,11
   18f10:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   18f14:	e0bf9117 	ldw	r2,-444(fp)
   18f18:	10801804 	addi	r2,r2,96
   18f1c:	e13f9917 	ldw	r4,-412(fp)
   18f20:	e0ffa217 	ldw	r3,-376(fp)
   18f24:	20c7883a 	add	r3,r4,r3
   18f28:	1807d2fa 	srai	r3,r3,11
   18f2c:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   18f30:	e0bf9117 	ldw	r2,-444(fp)
   18f34:	10803804 	addi	r2,r2,224
   18f38:	e13f9917 	ldw	r4,-412(fp)
   18f3c:	e0ffa217 	ldw	r3,-376(fp)
   18f40:	20c7c83a 	sub	r3,r4,r3
   18f44:	1807d2fa 	srai	r3,r3,11
   18f48:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   18f4c:	e0bf9117 	ldw	r2,-444(fp)
   18f50:	10802004 	addi	r2,r2,128
   18f54:	e13f9b17 	ldw	r4,-404(fp)
   18f58:	e0ffa017 	ldw	r3,-384(fp)
   18f5c:	20c7883a 	add	r3,r4,r3
   18f60:	1807d2fa 	srai	r3,r3,11
   18f64:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   18f68:	e0bf9117 	ldw	r2,-444(fp)
   18f6c:	10803004 	addi	r2,r2,192
   18f70:	e13f9b17 	ldw	r4,-404(fp)
   18f74:	e0ffa017 	ldw	r3,-384(fp)
   18f78:	20c7c83a 	sub	r3,r4,r3
   18f7c:	1807d2fa 	srai	r3,r3,11
   18f80:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
   18f84:	e0bf9117 	ldw	r2,-444(fp)
   18f88:	10802804 	addi	r2,r2,160
   18f8c:	e0ff9c17 	ldw	r3,-400(fp)
   18f90:	1807d2fa 	srai	r3,r3,11
   18f94:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   18f98:	e0bf9217 	ldw	r2,-440(fp)
   18f9c:	10800044 	addi	r2,r2,1
   18fa0:	e0bf9215 	stw	r2,-440(fp)
   18fa4:	e0bf8f17 	ldw	r2,-452(fp)
   18fa8:	10800084 	addi	r2,r2,2
   18fac:	e0bf8f15 	stw	r2,-452(fp)
   18fb0:	e0bf9017 	ldw	r2,-448(fp)
   18fb4:	10800104 	addi	r2,r2,4
   18fb8:	e0bf9015 	stw	r2,-448(fp)
   18fbc:	e0bf9117 	ldw	r2,-444(fp)
   18fc0:	10800104 	addi	r2,r2,4
   18fc4:	e0bf9115 	stw	r2,-444(fp)
   18fc8:	e0bf9217 	ldw	r2,-440(fp)
   18fcc:	10800210 	cmplti	r2,r2,8
   18fd0:	103e761e 	bne	r2,zero,189ac <jpeg_idct_11x11+0x58>
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 11 rows from work array, store into output array. */

	wsptr = workspace;
   18fd4:	e0bfa404 	addi	r2,fp,-368
   18fd8:	e0bf9115 	stw	r2,-444(fp)
	for (ctr = 0; ctr < 11; ctr++) {
   18fdc:	e03f9215 	stw	zero,-440(fp)
   18fe0:	00016d06 	br	19598 <jpeg_idct_11x11+0xc44>
		outptr = output_buf[ctr] + output_col;
   18fe4:	e0bf9217 	ldw	r2,-440(fp)
   18fe8:	1085883a 	add	r2,r2,r2
   18fec:	1085883a 	add	r2,r2,r2
   18ff0:	e0ffff17 	ldw	r3,-4(fp)
   18ff4:	1885883a 	add	r2,r3,r2
   18ff8:	10c00017 	ldw	r3,0(r2)
   18ffc:	e0800317 	ldw	r2,12(fp)
   19000:	1885883a 	add	r2,r3,r2
   19004:	e0bfa315 	stw	r2,-372(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   19008:	e0bf9117 	ldw	r2,-444(fp)
   1900c:	10800017 	ldw	r2,0(r2)
   19010:	10800404 	addi	r2,r2,16
   19014:	e0bf9415 	stw	r2,-432(fp)
		tmp10 <<= CONST_BITS;
   19018:	e0bf9417 	ldw	r2,-432(fp)
   1901c:	1004937a 	slli	r2,r2,13
   19020:	e0bf9415 	stw	r2,-432(fp)

		z1 = (INT32) wsptr[2];
   19024:	e0bf9117 	ldw	r2,-444(fp)
   19028:	10800204 	addi	r2,r2,8
   1902c:	10800017 	ldw	r2,0(r2)
   19030:	e0bf9515 	stw	r2,-428(fp)
		z2 = (INT32) wsptr[4];
   19034:	e0bf9117 	ldw	r2,-444(fp)
   19038:	10800404 	addi	r2,r2,16
   1903c:	10800017 	ldw	r2,0(r2)
   19040:	e0bf9615 	stw	r2,-424(fp)
		z3 = (INT32) wsptr[6];
   19044:	e0bf9117 	ldw	r2,-444(fp)
   19048:	10800604 	addi	r2,r2,24
   1904c:	10800017 	ldw	r2,0(r2)
   19050:	e0bf9715 	stw	r2,-420(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
   19054:	e0ff9617 	ldw	r3,-424(fp)
   19058:	e0bf9717 	ldw	r2,-420(fp)
   1905c:	1885c83a 	sub	r2,r3,r2
   19060:	1009883a 	mov	r4,r2
   19064:	01545f84 	movi	r5,20862
   19068:	002c1540 	call	2c154 <__mulsi3>
   1906c:	e0bf9815 	stw	r2,-416(fp)
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
   19070:	e0ff9617 	ldw	r3,-424(fp)
   19074:	e0bf9517 	ldw	r2,-428(fp)
   19078:	1885c83a 	sub	r2,r3,r2
   1907c:	1009883a 	mov	r4,r2
   19080:	01437244 	movi	r5,3529
   19084:	002c1540 	call	2c154 <__mulsi3>
   19088:	e0bf9915 	stw	r2,-412(fp)
		z4 = z1 + z3;
   1908c:	e0ff9517 	ldw	r3,-428(fp)
   19090:	e0bf9717 	ldw	r2,-420(fp)
   19094:	1885883a 	add	r2,r3,r2
   19098:	e0bf9a15 	stw	r2,-408(fp)
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
   1909c:	e13f9a17 	ldw	r4,-408(fp)
   190a0:	0176c144 	movi	r5,-9467
   190a4:	002c1540 	call	2c154 <__mulsi3>
   190a8:	e0bf9b15 	stw	r2,-404(fp)
		z4 -= z2;
   190ac:	e0ff9a17 	ldw	r3,-408(fp)
   190b0:	e0bf9617 	ldw	r2,-424(fp)
   190b4:	1885c83a 	sub	r2,r3,r2
   190b8:	e0bf9a15 	stw	r2,-408(fp)
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
   190bc:	e13f9a17 	ldw	r4,-408(fp)
   190c0:	014adb04 	movi	r5,11116
   190c4:	002c1540 	call	2c154 <__mulsi3>
   190c8:	1007883a 	mov	r3,r2
   190cc:	e0bf9417 	ldw	r2,-432(fp)
   190d0:	1885883a 	add	r2,r3,r2
   190d4:	e0bf9c15 	stw	r2,-400(fp)
		tmp21 = tmp20 + tmp23 + tmp25 -
   190d8:	e0ff9817 	ldw	r3,-416(fp)
   190dc:	e0bf9917 	ldw	r2,-412(fp)
   190e0:	1887883a 	add	r3,r3,r2
   190e4:	e0bf9c17 	ldw	r2,-400(fp)
   190e8:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
   190ec:	e13f9617 	ldw	r4,-424(fp)
   190f0:	01716d04 	movi	r5,-14924
   190f4:	002c1540 	call	2c154 <__mulsi3>
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
		z4 = z1 + z3;
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
		z4 -= z2;
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
		tmp21 = tmp20 + tmp23 + tmp25 -
   190f8:	8085883a 	add	r2,r16,r2
   190fc:	e0bf9d15 	stw	r2,-396(fp)
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
   19100:	e13f9717 	ldw	r4,-420(fp)
   19104:	0150ed44 	movi	r5,17333
   19108:	002c1540 	call	2c154 <__mulsi3>
   1910c:	1007883a 	mov	r3,r2
   19110:	e0bf9c17 	ldw	r2,-400(fp)
   19114:	1885883a 	add	r2,r3,r2
   19118:	e0ff9817 	ldw	r3,-416(fp)
   1911c:	1885883a 	add	r2,r3,r2
   19120:	e0bf9815 	stw	r2,-416(fp)
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
   19124:	e13f9517 	ldw	r4,-428(fp)
   19128:	0173e444 	movi	r5,-12399
   1912c:	002c1540 	call	2c154 <__mulsi3>
   19130:	1007883a 	mov	r3,r2
   19134:	e0bf9c17 	ldw	r2,-400(fp)
   19138:	1885883a 	add	r2,r3,r2
   1913c:	e0ff9917 	ldw	r3,-412(fp)
   19140:	1885883a 	add	r2,r3,r2
   19144:	e0bf9915 	stw	r2,-412(fp)
		tmp24 += tmp25;
   19148:	e0ff9b17 	ldw	r3,-404(fp)
   1914c:	e0bf9c17 	ldw	r2,-400(fp)
   19150:	1885883a 	add	r2,r3,r2
   19154:	e0bf9b15 	stw	r2,-404(fp)
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
   19158:	e13f9717 	ldw	r4,-420(fp)
   1915c:	0179b0c4 	movi	r5,-6461
   19160:	002c1540 	call	2c154 <__mulsi3>
   19164:	1007883a 	mov	r3,r2
   19168:	e0bf9b17 	ldw	r2,-404(fp)
   1916c:	1885883a 	add	r2,r3,r2
   19170:	e0bf9e15 	stw	r2,-392(fp)
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
   19174:	e13f9617 	ldw	r4,-424(fp)
   19178:	014f8e44 	movi	r5,15929
   1917c:	002c1540 	call	2c154 <__mulsi3>
   19180:	1021883a 	mov	r16,r2
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
   19184:	e13f9517 	ldw	r4,-428(fp)
   19188:	0174df44 	movi	r5,-11395
   1918c:	002c1540 	call	2c154 <__mulsi3>
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
		tmp24 += tmp25;
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
   19190:	8085883a 	add	r2,r16,r2
   19194:	e0ff9b17 	ldw	r3,-404(fp)
   19198:	1885883a 	add	r2,r3,r2
   1919c:	e0bf9b15 	stw	r2,-404(fp)
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
		tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
   191a0:	e13f9a17 	ldw	r4,-408(fp)
   191a4:	0174afc4 	movi	r5,-11585
   191a8:	002c1540 	call	2c154 <__mulsi3>
   191ac:	1007883a 	mov	r3,r2
   191b0:	e0bf9417 	ldw	r2,-432(fp)
   191b4:	1885883a 	add	r2,r3,r2
   191b8:	e0bf9c15 	stw	r2,-400(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   191bc:	e0bf9117 	ldw	r2,-444(fp)
   191c0:	10800104 	addi	r2,r2,4
   191c4:	10800017 	ldw	r2,0(r2)
   191c8:	e0bf9515 	stw	r2,-428(fp)
		z2 = (INT32) wsptr[3];
   191cc:	e0bf9117 	ldw	r2,-444(fp)
   191d0:	10800304 	addi	r2,r2,12
   191d4:	10800017 	ldw	r2,0(r2)
   191d8:	e0bf9615 	stw	r2,-424(fp)
		z3 = (INT32) wsptr[5];
   191dc:	e0bf9117 	ldw	r2,-444(fp)
   191e0:	10800504 	addi	r2,r2,20
   191e4:	10800017 	ldw	r2,0(r2)
   191e8:	e0bf9715 	stw	r2,-420(fp)
		z4 = (INT32) wsptr[7];
   191ec:	e0bf9117 	ldw	r2,-444(fp)
   191f0:	10800704 	addi	r2,r2,28
   191f4:	10800017 	ldw	r2,0(r2)
   191f8:	e0bf9a15 	stw	r2,-408(fp)

		tmp11 = z1 + z2;
   191fc:	e0ff9517 	ldw	r3,-428(fp)
   19200:	e0bf9617 	ldw	r2,-424(fp)
   19204:	1885883a 	add	r2,r3,r2
   19208:	e0bf9f15 	stw	r2,-388(fp)
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
   1920c:	e0ff9f17 	ldw	r3,-388(fp)
   19210:	e0bf9717 	ldw	r2,-420(fp)
   19214:	1887883a 	add	r3,r3,r2
   19218:	e0bf9a17 	ldw	r2,-408(fp)
   1921c:	1885883a 	add	r2,r3,r2
   19220:	1009883a 	mov	r4,r2
   19224:	01433004 	movi	r5,3264
   19228:	002c1540 	call	2c154 <__mulsi3>
   1922c:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
   19230:	e13f9f17 	ldw	r4,-388(fp)
   19234:	01471a84 	movi	r5,7274
   19238:	002c1540 	call	2c154 <__mulsi3>
   1923c:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
   19240:	e0ff9517 	ldw	r3,-428(fp)
   19244:	e0bf9717 	ldw	r2,-420(fp)
   19248:	1885883a 	add	r2,r3,r2
   1924c:	1009883a 	mov	r4,r2
   19250:	01455d04 	movi	r5,5492
   19254:	002c1540 	call	2c154 <__mulsi3>
   19258:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
   1925c:	e0ff9517 	ldw	r3,-428(fp)
   19260:	e0bf9a17 	ldw	r2,-408(fp)
   19264:	1885883a 	add	r2,r3,r2
   19268:	1009883a 	mov	r4,r2
   1926c:	0142ee04 	movi	r5,3000
   19270:	002c1540 	call	2c154 <__mulsi3>
   19274:	1007883a 	mov	r3,r2
   19278:	e0bfa017 	ldw	r2,-384(fp)
   1927c:	1885883a 	add	r2,r3,r2
   19280:	e0bfa215 	stw	r2,-376(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
   19284:	e0ff9f17 	ldw	r3,-388(fp)
   19288:	e0bfa117 	ldw	r2,-380(fp)
   1928c:	1887883a 	add	r3,r3,r2
   19290:	e0bfa217 	ldw	r2,-376(fp)
   19294:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
   19298:	e13f9517 	ldw	r4,-428(fp)
   1929c:	01789d84 	movi	r5,-7562
   192a0:	002c1540 	call	2c154 <__mulsi3>
		tmp11 = z1 + z2;
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
		tmp10 = tmp11 + tmp12 + tmp13 -
   192a4:	8085883a 	add	r2,r16,r2
   192a8:	e0bf9415 	stw	r2,-432(fp)
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
		z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
   192ac:	e0ff9617 	ldw	r3,-424(fp)
   192b0:	e0bf9717 	ldw	r2,-420(fp)
   192b4:	1885883a 	add	r2,r3,r2
   192b8:	1009883a 	mov	r4,r2
   192bc:	0176b244 	movi	r5,-9527
   192c0:	002c1540 	call	2c154 <__mulsi3>
   192c4:	1007883a 	mov	r3,r2
   192c8:	e0bfa017 	ldw	r2,-384(fp)
   192cc:	1885883a 	add	r2,r3,r2
   192d0:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
   192d4:	e13f9617 	ldw	r4,-424(fp)
   192d8:	01509604 	movi	r5,16984
   192dc:	002c1540 	call	2c154 <__mulsi3>
   192e0:	1007883a 	mov	r3,r2
   192e4:	e0bf9517 	ldw	r2,-428(fp)
   192e8:	1885883a 	add	r2,r3,r2
   192ec:	e0ff9f17 	ldw	r3,-388(fp)
   192f0:	1885883a 	add	r2,r3,r2
   192f4:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
   192f8:	e13f9717 	ldw	r4,-420(fp)
   192fc:	01767684 	movi	r5,-9766
   19300:	002c1540 	call	2c154 <__mulsi3>
   19304:	1007883a 	mov	r3,r2
   19308:	e0bf9517 	ldw	r2,-428(fp)
   1930c:	1885883a 	add	r2,r3,r2
   19310:	e0ffa117 	ldw	r3,-380(fp)
   19314:	1885883a 	add	r2,r3,r2
   19318:	e0bfa115 	stw	r2,-380(fp)
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
   1931c:	e0ff9617 	ldw	r3,-424(fp)
   19320:	e0bf9a17 	ldw	r2,-408(fp)
   19324:	1885883a 	add	r2,r3,r2
   19328:	1009883a 	mov	r4,r2
   1932c:	01719d44 	movi	r5,-14731
   19330:	002c1540 	call	2c154 <__mulsi3>
   19334:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1;
   19338:	e0ff9f17 	ldw	r3,-388(fp)
   1933c:	e0bf9517 	ldw	r2,-428(fp)
   19340:	1885883a 	add	r2,r3,r2
   19344:	e0bf9f15 	stw	r2,-388(fp)
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
   19348:	e13f9a17 	ldw	r4,-408(fp)
   1934c:	0150d1c4 	movi	r5,17223
   19350:	002c1540 	call	2c154 <__mulsi3>
   19354:	1007883a 	mov	r3,r2
   19358:	e0bf9517 	ldw	r2,-428(fp)
   1935c:	1885883a 	add	r2,r3,r2
   19360:	e0ffa217 	ldw	r3,-376(fp)
   19364:	1885883a 	add	r2,r3,r2
   19368:	e0bfa215 	stw	r2,-376(fp)
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   1936c:	e13f9617 	ldw	r4,-424(fp)
   19370:	01744344 	movi	r5,-12019
   19374:	002c1540 	call	2c154 <__mulsi3>
   19378:	1021883a 	mov	r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
   1937c:	e13f9717 	ldw	r4,-420(fp)
   19380:	014802c4 	movi	r5,8203
   19384:	002c1540 	call	2c154 <__mulsi3>
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   19388:	80a1883a 	add	r16,r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
   1938c:	e13f9a17 	ldw	r4,-408(fp)
   19390:	01728584 	movi	r5,-13802
   19394:	002c1540 	call	2c154 <__mulsi3>
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
   19398:	8085883a 	add	r2,r16,r2
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
   1939c:	e0ffa017 	ldw	r3,-384(fp)
   193a0:	1885883a 	add	r2,r3,r2
   193a4:	e0bfa015 	stw	r2,-384(fp)
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   193a8:	e0ff9817 	ldw	r3,-416(fp)
   193ac:	e0bf9417 	ldw	r2,-432(fp)
   193b0:	1885883a 	add	r2,r3,r2
   193b4:	1005d4ba 	srai	r2,r2,18
   193b8:	1080ffcc 	andi	r2,r2,1023
   193bc:	e0ff9317 	ldw	r3,-436(fp)
   193c0:	1885883a 	add	r2,r3,r2
   193c4:	10c00003 	ldbu	r3,0(r2)
   193c8:	e0bfa317 	ldw	r2,-372(fp)
   193cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   193d0:	e0bfa317 	ldw	r2,-372(fp)
   193d4:	10800284 	addi	r2,r2,10
   193d8:	e13f9817 	ldw	r4,-416(fp)
   193dc:	e0ff9417 	ldw	r3,-432(fp)
   193e0:	20c7c83a 	sub	r3,r4,r3
   193e4:	1807d4ba 	srai	r3,r3,18
   193e8:	18c0ffcc 	andi	r3,r3,1023
   193ec:	e13f9317 	ldw	r4,-436(fp)
   193f0:	20c7883a 	add	r3,r4,r3
   193f4:	18c00003 	ldbu	r3,0(r3)
   193f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   193fc:	e0bfa317 	ldw	r2,-372(fp)
   19400:	10800044 	addi	r2,r2,1
   19404:	e13f9d17 	ldw	r4,-396(fp)
   19408:	e0ff9f17 	ldw	r3,-388(fp)
   1940c:	20c7883a 	add	r3,r4,r3
   19410:	1807d4ba 	srai	r3,r3,18
   19414:	18c0ffcc 	andi	r3,r3,1023
   19418:	e13f9317 	ldw	r4,-436(fp)
   1941c:	20c7883a 	add	r3,r4,r3
   19420:	18c00003 	ldbu	r3,0(r3)
   19424:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   19428:	e0bfa317 	ldw	r2,-372(fp)
   1942c:	10800244 	addi	r2,r2,9
   19430:	e13f9d17 	ldw	r4,-396(fp)
   19434:	e0ff9f17 	ldw	r3,-388(fp)
   19438:	20c7c83a 	sub	r3,r4,r3
   1943c:	1807d4ba 	srai	r3,r3,18
   19440:	18c0ffcc 	andi	r3,r3,1023
   19444:	e13f9317 	ldw	r4,-436(fp)
   19448:	20c7883a 	add	r3,r4,r3
   1944c:	18c00003 	ldbu	r3,0(r3)
   19450:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   19454:	e0bfa317 	ldw	r2,-372(fp)
   19458:	10800084 	addi	r2,r2,2
   1945c:	e13f9e17 	ldw	r4,-392(fp)
   19460:	e0ffa117 	ldw	r3,-380(fp)
   19464:	20c7883a 	add	r3,r4,r3
   19468:	1807d4ba 	srai	r3,r3,18
   1946c:	18c0ffcc 	andi	r3,r3,1023
   19470:	e13f9317 	ldw	r4,-436(fp)
   19474:	20c7883a 	add	r3,r4,r3
   19478:	18c00003 	ldbu	r3,0(r3)
   1947c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   19480:	e0bfa317 	ldw	r2,-372(fp)
   19484:	10800204 	addi	r2,r2,8
   19488:	e13f9e17 	ldw	r4,-392(fp)
   1948c:	e0ffa117 	ldw	r3,-380(fp)
   19490:	20c7c83a 	sub	r3,r4,r3
   19494:	1807d4ba 	srai	r3,r3,18
   19498:	18c0ffcc 	andi	r3,r3,1023
   1949c:	e13f9317 	ldw	r4,-436(fp)
   194a0:	20c7883a 	add	r3,r4,r3
   194a4:	18c00003 	ldbu	r3,0(r3)
   194a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   194ac:	e0bfa317 	ldw	r2,-372(fp)
   194b0:	108000c4 	addi	r2,r2,3
   194b4:	e13f9917 	ldw	r4,-412(fp)
   194b8:	e0ffa217 	ldw	r3,-376(fp)
   194bc:	20c7883a 	add	r3,r4,r3
   194c0:	1807d4ba 	srai	r3,r3,18
   194c4:	18c0ffcc 	andi	r3,r3,1023
   194c8:	e13f9317 	ldw	r4,-436(fp)
   194cc:	20c7883a 	add	r3,r4,r3
   194d0:	18c00003 	ldbu	r3,0(r3)
   194d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   194d8:	e0bfa317 	ldw	r2,-372(fp)
   194dc:	108001c4 	addi	r2,r2,7
   194e0:	e13f9917 	ldw	r4,-412(fp)
   194e4:	e0ffa217 	ldw	r3,-376(fp)
   194e8:	20c7c83a 	sub	r3,r4,r3
   194ec:	1807d4ba 	srai	r3,r3,18
   194f0:	18c0ffcc 	andi	r3,r3,1023
   194f4:	e13f9317 	ldw	r4,-436(fp)
   194f8:	20c7883a 	add	r3,r4,r3
   194fc:	18c00003 	ldbu	r3,0(r3)
   19500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   19504:	e0bfa317 	ldw	r2,-372(fp)
   19508:	10800104 	addi	r2,r2,4
   1950c:	e13f9b17 	ldw	r4,-404(fp)
   19510:	e0ffa017 	ldw	r3,-384(fp)
   19514:	20c7883a 	add	r3,r4,r3
   19518:	1807d4ba 	srai	r3,r3,18
   1951c:	18c0ffcc 	andi	r3,r3,1023
   19520:	e13f9317 	ldw	r4,-436(fp)
   19524:	20c7883a 	add	r3,r4,r3
   19528:	18c00003 	ldbu	r3,0(r3)
   1952c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   19530:	e0bfa317 	ldw	r2,-372(fp)
   19534:	10800184 	addi	r2,r2,6
   19538:	e13f9b17 	ldw	r4,-404(fp)
   1953c:	e0ffa017 	ldw	r3,-384(fp)
   19540:	20c7c83a 	sub	r3,r4,r3
   19544:	1807d4ba 	srai	r3,r3,18
   19548:	18c0ffcc 	andi	r3,r3,1023
   1954c:	e13f9317 	ldw	r4,-436(fp)
   19550:	20c7883a 	add	r3,r4,r3
   19554:	18c00003 	ldbu	r3,0(r3)
   19558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
   1955c:	e0bfa317 	ldw	r2,-372(fp)
   19560:	10800144 	addi	r2,r2,5
   19564:	e0ff9c17 	ldw	r3,-400(fp)
   19568:	1807d4ba 	srai	r3,r3,18
   1956c:	18c0ffcc 	andi	r3,r3,1023
   19570:	e13f9317 	ldw	r4,-436(fp)
   19574:	20c7883a 	add	r3,r4,r3
   19578:	18c00003 	ldbu	r3,0(r3)
   1957c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   19580:	e0bf9117 	ldw	r2,-444(fp)
   19584:	10800804 	addi	r2,r2,32
   19588:	e0bf9115 	stw	r2,-444(fp)
	}

	/* Pass 2: process 11 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 11; ctr++) {
   1958c:	e0bf9217 	ldw	r2,-440(fp)
   19590:	10800044 	addi	r2,r2,1
   19594:	e0bf9215 	stw	r2,-440(fp)
   19598:	e0bf9217 	ldw	r2,-440(fp)
   1959c:	108002d0 	cmplti	r2,r2,11
   195a0:	103e901e 	bne	r2,zero,18fe4 <jpeg_idct_11x11+0x690>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   195a4:	e037883a 	mov	sp,fp
   195a8:	dfc00217 	ldw	ra,8(sp)
   195ac:	df000117 	ldw	fp,4(sp)
   195b0:	dc000017 	ldw	r16,0(sp)
   195b4:	dec00304 	addi	sp,sp,12
   195b8:	f800283a 	ret

000195bc <jpeg_idct_12x12>:

GLOBAL(void)
	jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   195bc:	deff8304 	addi	sp,sp,-500
   195c0:	dfc07c15 	stw	ra,496(sp)
   195c4:	df007b15 	stw	fp,492(sp)
   195c8:	dc007a15 	stw	r16,488(sp)
   195cc:	df007a04 	addi	fp,sp,488
   195d0:	e13ffc15 	stw	r4,-16(fp)
   195d4:	e17ffd15 	stw	r5,-12(fp)
   195d8:	e1bffe15 	stw	r6,-8(fp)
   195dc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   195e0:	e0bffc17 	ldw	r2,-16(fp)
   195e4:	10804917 	ldw	r2,292(r2)
   195e8:	10802004 	addi	r2,r2,128
   195ec:	e0bf8a15 	stw	r2,-472(fp)
	int workspace[8*12];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   195f0:	e0bffe17 	ldw	r2,-8(fp)
   195f4:	e0bf8615 	stw	r2,-488(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   195f8:	e0bffd17 	ldw	r2,-12(fp)
   195fc:	10801517 	ldw	r2,84(r2)
   19600:	e0bf8715 	stw	r2,-484(fp)
	wsptr = workspace;
   19604:	e0bf9c04 	addi	r2,fp,-400
   19608:	e0bf8815 	stw	r2,-480(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1960c:	e03f8915 	stw	zero,-476(fp)
   19610:	00016e06 	br	19bcc <jpeg_idct_12x12+0x610>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   19614:	e0bf8617 	ldw	r2,-488(fp)
   19618:	1080000b 	ldhu	r2,0(r2)
   1961c:	10ffffcc 	andi	r3,r2,65535
   19620:	18e0001c 	xori	r3,r3,32768
   19624:	18e00004 	addi	r3,r3,-32768
   19628:	e0bf8717 	ldw	r2,-484(fp)
   1962c:	10800017 	ldw	r2,0(r2)
   19630:	1809883a 	mov	r4,r3
   19634:	100b883a 	mov	r5,r2
   19638:	002c1540 	call	2c154 <__mulsi3>
   1963c:	e0bf8b15 	stw	r2,-468(fp)
		z3 <<= CONST_BITS;
   19640:	e0bf8b17 	ldw	r2,-468(fp)
   19644:	1004937a 	slli	r2,r2,13
   19648:	e0bf8b15 	stw	r2,-468(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
   1964c:	e0bf8b17 	ldw	r2,-468(fp)
   19650:	10810004 	addi	r2,r2,1024
   19654:	e0bf8b15 	stw	r2,-468(fp)

		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   19658:	e0bf8617 	ldw	r2,-488(fp)
   1965c:	10801004 	addi	r2,r2,64
   19660:	1080000b 	ldhu	r2,0(r2)
   19664:	10ffffcc 	andi	r3,r2,65535
   19668:	18e0001c 	xori	r3,r3,32768
   1966c:	18e00004 	addi	r3,r3,-32768
   19670:	e0bf8717 	ldw	r2,-484(fp)
   19674:	10802004 	addi	r2,r2,128
   19678:	10800017 	ldw	r2,0(r2)
   1967c:	1809883a 	mov	r4,r3
   19680:	100b883a 	mov	r5,r2
   19684:	002c1540 	call	2c154 <__mulsi3>
   19688:	e0bf8c15 	stw	r2,-464(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
   1968c:	e13f8c17 	ldw	r4,-464(fp)
   19690:	0149cc44 	movi	r5,10033
   19694:	002c1540 	call	2c154 <__mulsi3>
   19698:	e0bf8c15 	stw	r2,-464(fp)

		tmp10 = z3 + z4;
   1969c:	e0ff8b17 	ldw	r3,-468(fp)
   196a0:	e0bf8c17 	ldw	r2,-464(fp)
   196a4:	1885883a 	add	r2,r3,r2
   196a8:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 = z3 - z4;
   196ac:	e0ff8b17 	ldw	r3,-468(fp)
   196b0:	e0bf8c17 	ldw	r2,-464(fp)
   196b4:	1885c83a 	sub	r2,r3,r2
   196b8:	e0bf8e15 	stw	r2,-456(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   196bc:	e0bf8617 	ldw	r2,-488(fp)
   196c0:	10800804 	addi	r2,r2,32
   196c4:	1080000b 	ldhu	r2,0(r2)
   196c8:	10ffffcc 	andi	r3,r2,65535
   196cc:	18e0001c 	xori	r3,r3,32768
   196d0:	18e00004 	addi	r3,r3,-32768
   196d4:	e0bf8717 	ldw	r2,-484(fp)
   196d8:	10801004 	addi	r2,r2,64
   196dc:	10800017 	ldw	r2,0(r2)
   196e0:	1809883a 	mov	r4,r3
   196e4:	100b883a 	mov	r5,r2
   196e8:	002c1540 	call	2c154 <__mulsi3>
   196ec:	e0bf8f15 	stw	r2,-452(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
   196f0:	e13f8f17 	ldw	r4,-452(fp)
   196f4:	014aed84 	movi	r5,11190
   196f8:	002c1540 	call	2c154 <__mulsi3>
   196fc:	e0bf8c15 	stw	r2,-464(fp)
		z1 <<= CONST_BITS;
   19700:	e0bf8f17 	ldw	r2,-452(fp)
   19704:	1004937a 	slli	r2,r2,13
   19708:	e0bf8f15 	stw	r2,-452(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1970c:	e0bf8617 	ldw	r2,-488(fp)
   19710:	10801804 	addi	r2,r2,96
   19714:	1080000b 	ldhu	r2,0(r2)
   19718:	10ffffcc 	andi	r3,r2,65535
   1971c:	18e0001c 	xori	r3,r3,32768
   19720:	18e00004 	addi	r3,r3,-32768
   19724:	e0bf8717 	ldw	r2,-484(fp)
   19728:	10803004 	addi	r2,r2,192
   1972c:	10800017 	ldw	r2,0(r2)
   19730:	1809883a 	mov	r4,r3
   19734:	100b883a 	mov	r5,r2
   19738:	002c1540 	call	2c154 <__mulsi3>
   1973c:	e0bf9015 	stw	r2,-448(fp)
		z2 <<= CONST_BITS;
   19740:	e0bf9017 	ldw	r2,-448(fp)
   19744:	1004937a 	slli	r2,r2,13
   19748:	e0bf9015 	stw	r2,-448(fp)

		tmp12 = z1 - z2;
   1974c:	e0ff8f17 	ldw	r3,-452(fp)
   19750:	e0bf9017 	ldw	r2,-448(fp)
   19754:	1885c83a 	sub	r2,r3,r2
   19758:	e0bf9115 	stw	r2,-444(fp)

		tmp21 = z3 + tmp12;
   1975c:	e0ff8b17 	ldw	r3,-468(fp)
   19760:	e0bf9117 	ldw	r2,-444(fp)
   19764:	1885883a 	add	r2,r3,r2
   19768:	e0bf9215 	stw	r2,-440(fp)
		tmp24 = z3 - tmp12;
   1976c:	e0ff8b17 	ldw	r3,-468(fp)
   19770:	e0bf9117 	ldw	r2,-444(fp)
   19774:	1885c83a 	sub	r2,r3,r2
   19778:	e0bf9315 	stw	r2,-436(fp)

		tmp12 = z4 + z2;
   1977c:	e0ff8c17 	ldw	r3,-464(fp)
   19780:	e0bf9017 	ldw	r2,-448(fp)
   19784:	1885883a 	add	r2,r3,r2
   19788:	e0bf9115 	stw	r2,-444(fp)

		tmp20 = tmp10 + tmp12;
   1978c:	e0ff8d17 	ldw	r3,-460(fp)
   19790:	e0bf9117 	ldw	r2,-444(fp)
   19794:	1885883a 	add	r2,r3,r2
   19798:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp10 - tmp12;
   1979c:	e0ff8d17 	ldw	r3,-460(fp)
   197a0:	e0bf9117 	ldw	r2,-444(fp)
   197a4:	1885c83a 	sub	r2,r3,r2
   197a8:	e0bf9515 	stw	r2,-428(fp)

		tmp12 = z4 - z1 - z2;
   197ac:	e0ff8c17 	ldw	r3,-464(fp)
   197b0:	e0bf8f17 	ldw	r2,-452(fp)
   197b4:	1887c83a 	sub	r3,r3,r2
   197b8:	e0bf9017 	ldw	r2,-448(fp)
   197bc:	1885c83a 	sub	r2,r3,r2
   197c0:	e0bf9115 	stw	r2,-444(fp)

		tmp22 = tmp11 + tmp12;
   197c4:	e0ff8e17 	ldw	r3,-456(fp)
   197c8:	e0bf9117 	ldw	r2,-444(fp)
   197cc:	1885883a 	add	r2,r3,r2
   197d0:	e0bf9615 	stw	r2,-424(fp)
		tmp23 = tmp11 - tmp12;
   197d4:	e0ff8e17 	ldw	r3,-456(fp)
   197d8:	e0bf9117 	ldw	r2,-444(fp)
   197dc:	1885c83a 	sub	r2,r3,r2
   197e0:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   197e4:	e0bf8617 	ldw	r2,-488(fp)
   197e8:	10800404 	addi	r2,r2,16
   197ec:	1080000b 	ldhu	r2,0(r2)
   197f0:	10ffffcc 	andi	r3,r2,65535
   197f4:	18e0001c 	xori	r3,r3,32768
   197f8:	18e00004 	addi	r3,r3,-32768
   197fc:	e0bf8717 	ldw	r2,-484(fp)
   19800:	10800804 	addi	r2,r2,32
   19804:	10800017 	ldw	r2,0(r2)
   19808:	1809883a 	mov	r4,r3
   1980c:	100b883a 	mov	r5,r2
   19810:	002c1540 	call	2c154 <__mulsi3>
   19814:	e0bf8f15 	stw	r2,-452(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   19818:	e0bf8617 	ldw	r2,-488(fp)
   1981c:	10800c04 	addi	r2,r2,48
   19820:	1080000b 	ldhu	r2,0(r2)
   19824:	10ffffcc 	andi	r3,r2,65535
   19828:	18e0001c 	xori	r3,r3,32768
   1982c:	18e00004 	addi	r3,r3,-32768
   19830:	e0bf8717 	ldw	r2,-484(fp)
   19834:	10801804 	addi	r2,r2,96
   19838:	10800017 	ldw	r2,0(r2)
   1983c:	1809883a 	mov	r4,r3
   19840:	100b883a 	mov	r5,r2
   19844:	002c1540 	call	2c154 <__mulsi3>
   19848:	e0bf9015 	stw	r2,-448(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1984c:	e0bf8617 	ldw	r2,-488(fp)
   19850:	10801404 	addi	r2,r2,80
   19854:	1080000b 	ldhu	r2,0(r2)
   19858:	10ffffcc 	andi	r3,r2,65535
   1985c:	18e0001c 	xori	r3,r3,32768
   19860:	18e00004 	addi	r3,r3,-32768
   19864:	e0bf8717 	ldw	r2,-484(fp)
   19868:	10802804 	addi	r2,r2,160
   1986c:	10800017 	ldw	r2,0(r2)
   19870:	1809883a 	mov	r4,r3
   19874:	100b883a 	mov	r5,r2
   19878:	002c1540 	call	2c154 <__mulsi3>
   1987c:	e0bf8b15 	stw	r2,-468(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   19880:	e0bf8617 	ldw	r2,-488(fp)
   19884:	10801c04 	addi	r2,r2,112
   19888:	1080000b 	ldhu	r2,0(r2)
   1988c:	10ffffcc 	andi	r3,r2,65535
   19890:	18e0001c 	xori	r3,r3,32768
   19894:	18e00004 	addi	r3,r3,-32768
   19898:	e0bf8717 	ldw	r2,-484(fp)
   1989c:	10803804 	addi	r2,r2,224
   198a0:	10800017 	ldw	r2,0(r2)
   198a4:	1809883a 	mov	r4,r3
   198a8:	100b883a 	mov	r5,r2
   198ac:	002c1540 	call	2c154 <__mulsi3>
   198b0:	e0bf8c15 	stw	r2,-464(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
   198b4:	e13f9017 	ldw	r4,-448(fp)
   198b8:	014a73c4 	movi	r5,10703
   198bc:	002c1540 	call	2c154 <__mulsi3>
   198c0:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
   198c4:	e13f9017 	ldw	r4,-448(fp)
   198c8:	017babc4 	movi	r5,-4433
   198cc:	002c1540 	call	2c154 <__mulsi3>
   198d0:	e0bf9815 	stw	r2,-416(fp)

		tmp10 = z1 + z3;
   198d4:	e0ff8f17 	ldw	r3,-452(fp)
   198d8:	e0bf8b17 	ldw	r2,-468(fp)
   198dc:	1885883a 	add	r2,r3,r2
   198e0:	e0bf8d15 	stw	r2,-460(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
   198e4:	e0ff8d17 	ldw	r3,-460(fp)
   198e8:	e0bf8c17 	ldw	r2,-464(fp)
   198ec:	1885883a 	add	r2,r3,r2
   198f0:	1009883a 	mov	r4,r2
   198f4:	0146e344 	movi	r5,7053
   198f8:	002c1540 	call	2c154 <__mulsi3>
   198fc:	e0bf9915 	stw	r2,-412(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
   19900:	e13f8d17 	ldw	r4,-460(fp)
   19904:	014216c4 	movi	r5,2139
   19908:	002c1540 	call	2c154 <__mulsi3>
   1990c:	1007883a 	mov	r3,r2
   19910:	e0bf9917 	ldw	r2,-412(fp)
   19914:	1885883a 	add	r2,r3,r2
   19918:	e0bf9115 	stw	r2,-444(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
   1991c:	e0ff9117 	ldw	r3,-444(fp)
   19920:	e0bf8e17 	ldw	r2,-456(fp)
   19924:	18a1883a 	add	r16,r3,r2
   19928:	e13f8f17 	ldw	r4,-452(fp)
   1992c:	01423dc4 	movi	r5,2295
   19930:	002c1540 	call	2c154 <__mulsi3>
   19934:	8085883a 	add	r2,r16,r2
   19938:	e0bf8d15 	stw	r2,-460(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
   1993c:	e0ff8b17 	ldw	r3,-468(fp)
   19940:	e0bf8c17 	ldw	r2,-464(fp)
   19944:	1885883a 	add	r2,r3,r2
   19948:	1009883a 	mov	r4,r2
   1994c:	0177a2c4 	movi	r5,-8565
   19950:	002c1540 	call	2c154 <__mulsi3>
   19954:	e0bf9a15 	stw	r2,-408(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
   19958:	e0ff9a17 	ldw	r3,-408(fp)
   1995c:	e0bf9817 	ldw	r2,-416(fp)
   19960:	18a1883a 	add	r16,r3,r2
   19964:	e13f8b17 	ldw	r4,-468(fp)
   19968:	01742c04 	movi	r5,-12112
   1996c:	002c1540 	call	2c154 <__mulsi3>
   19970:	8085883a 	add	r2,r16,r2
   19974:	e0ff9117 	ldw	r3,-444(fp)
   19978:	1885883a 	add	r2,r3,r2
   1997c:	e0bf9115 	stw	r2,-444(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
   19980:	e0ff9917 	ldw	r3,-412(fp)
   19984:	e0bf8e17 	ldw	r2,-456(fp)
   19988:	18a1c83a 	sub	r16,r3,r2
   1998c:	e13f8c17 	ldw	r4,-464(fp)
   19990:	014cb184 	movi	r5,12998
   19994:	002c1540 	call	2c154 <__mulsi3>
   19998:	8085883a 	add	r2,r16,r2
   1999c:	e0ff9a17 	ldw	r3,-408(fp)
   199a0:	1885883a 	add	r2,r3,r2
   199a4:	e0bf9a15 	stw	r2,-408(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   199a8:	e13f8f17 	ldw	r4,-452(fp)
   199ac:	017a9704 	movi	r5,-5540
   199b0:	002c1540 	call	2c154 <__mulsi3>
   199b4:	1007883a 	mov	r3,r2
   199b8:	e0bf9817 	ldw	r2,-416(fp)
   199bc:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
   199c0:	e13f8c17 	ldw	r4,-464(fp)
   199c4:	01702304 	movi	r5,-16244
   199c8:	002c1540 	call	2c154 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   199cc:	8085883a 	add	r2,r16,r2
   199d0:	e0ff9917 	ldw	r3,-412(fp)
   199d4:	1885883a 	add	r2,r3,r2
   199d8:	e0bf9915 	stw	r2,-412(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
   199dc:	e0ff8f17 	ldw	r3,-452(fp)
   199e0:	e0bf8c17 	ldw	r2,-464(fp)
   199e4:	1885c83a 	sub	r2,r3,r2
   199e8:	e0bf8f15 	stw	r2,-452(fp)
		z2 -= z3;
   199ec:	e0ff9017 	ldw	r3,-448(fp)
   199f0:	e0bf8b17 	ldw	r2,-468(fp)
   199f4:	1885c83a 	sub	r2,r3,r2
   199f8:	e0bf9015 	stw	r2,-448(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
   199fc:	e0ff8f17 	ldw	r3,-452(fp)
   19a00:	e0bf9017 	ldw	r2,-448(fp)
   19a04:	1885883a 	add	r2,r3,r2
   19a08:	1009883a 	mov	r4,r2
   19a0c:	01445444 	movi	r5,4433
   19a10:	002c1540 	call	2c154 <__mulsi3>
   19a14:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
   19a18:	e13f8f17 	ldw	r4,-452(fp)
   19a1c:	01461f84 	movi	r5,6270
   19a20:	002c1540 	call	2c154 <__mulsi3>
   19a24:	1007883a 	mov	r3,r2
   19a28:	e0bf8b17 	ldw	r2,-468(fp)
   19a2c:	1885883a 	add	r2,r3,r2
   19a30:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
   19a34:	e13f9017 	ldw	r4,-448(fp)
   19a38:	017137c4 	movi	r5,-15137
   19a3c:	002c1540 	call	2c154 <__mulsi3>
   19a40:	1007883a 	mov	r3,r2
   19a44:	e0bf8b17 	ldw	r2,-468(fp)
   19a48:	1885883a 	add	r2,r3,r2
   19a4c:	e0bf9815 	stw	r2,-416(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   19a50:	e0ff9417 	ldw	r3,-432(fp)
   19a54:	e0bf8d17 	ldw	r2,-460(fp)
   19a58:	1885883a 	add	r2,r3,r2
   19a5c:	1007d2fa 	srai	r3,r2,11
   19a60:	e0bf8817 	ldw	r2,-480(fp)
   19a64:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   19a68:	e0bf8817 	ldw	r2,-480(fp)
   19a6c:	10805804 	addi	r2,r2,352
   19a70:	e13f9417 	ldw	r4,-432(fp)
   19a74:	e0ff8d17 	ldw	r3,-460(fp)
   19a78:	20c7c83a 	sub	r3,r4,r3
   19a7c:	1807d2fa 	srai	r3,r3,11
   19a80:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   19a84:	e0bf8817 	ldw	r2,-480(fp)
   19a88:	10800804 	addi	r2,r2,32
   19a8c:	e13f9217 	ldw	r4,-440(fp)
   19a90:	e0ff8e17 	ldw	r3,-456(fp)
   19a94:	20c7883a 	add	r3,r4,r3
   19a98:	1807d2fa 	srai	r3,r3,11
   19a9c:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   19aa0:	e0bf8817 	ldw	r2,-480(fp)
   19aa4:	10805004 	addi	r2,r2,320
   19aa8:	e13f9217 	ldw	r4,-440(fp)
   19aac:	e0ff8e17 	ldw	r3,-456(fp)
   19ab0:	20c7c83a 	sub	r3,r4,r3
   19ab4:	1807d2fa 	srai	r3,r3,11
   19ab8:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   19abc:	e0bf8817 	ldw	r2,-480(fp)
   19ac0:	10801004 	addi	r2,r2,64
   19ac4:	e13f9617 	ldw	r4,-424(fp)
   19ac8:	e0ff9117 	ldw	r3,-444(fp)
   19acc:	20c7883a 	add	r3,r4,r3
   19ad0:	1807d2fa 	srai	r3,r3,11
   19ad4:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   19ad8:	e0bf8817 	ldw	r2,-480(fp)
   19adc:	10804804 	addi	r2,r2,288
   19ae0:	e13f9617 	ldw	r4,-424(fp)
   19ae4:	e0ff9117 	ldw	r3,-444(fp)
   19ae8:	20c7c83a 	sub	r3,r4,r3
   19aec:	1807d2fa 	srai	r3,r3,11
   19af0:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   19af4:	e0bf8817 	ldw	r2,-480(fp)
   19af8:	10801804 	addi	r2,r2,96
   19afc:	e13f9717 	ldw	r4,-420(fp)
   19b00:	e0ff9a17 	ldw	r3,-408(fp)
   19b04:	20c7883a 	add	r3,r4,r3
   19b08:	1807d2fa 	srai	r3,r3,11
   19b0c:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   19b10:	e0bf8817 	ldw	r2,-480(fp)
   19b14:	10804004 	addi	r2,r2,256
   19b18:	e13f9717 	ldw	r4,-420(fp)
   19b1c:	e0ff9a17 	ldw	r3,-408(fp)
   19b20:	20c7c83a 	sub	r3,r4,r3
   19b24:	1807d2fa 	srai	r3,r3,11
   19b28:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   19b2c:	e0bf8817 	ldw	r2,-480(fp)
   19b30:	10802004 	addi	r2,r2,128
   19b34:	e13f9317 	ldw	r4,-436(fp)
   19b38:	e0ff9817 	ldw	r3,-416(fp)
   19b3c:	20c7883a 	add	r3,r4,r3
   19b40:	1807d2fa 	srai	r3,r3,11
   19b44:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   19b48:	e0bf8817 	ldw	r2,-480(fp)
   19b4c:	10803804 	addi	r2,r2,224
   19b50:	e13f9317 	ldw	r4,-436(fp)
   19b54:	e0ff9817 	ldw	r3,-416(fp)
   19b58:	20c7c83a 	sub	r3,r4,r3
   19b5c:	1807d2fa 	srai	r3,r3,11
   19b60:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   19b64:	e0bf8817 	ldw	r2,-480(fp)
   19b68:	10802804 	addi	r2,r2,160
   19b6c:	e13f9517 	ldw	r4,-428(fp)
   19b70:	e0ff9917 	ldw	r3,-412(fp)
   19b74:	20c7883a 	add	r3,r4,r3
   19b78:	1807d2fa 	srai	r3,r3,11
   19b7c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   19b80:	e0bf8817 	ldw	r2,-480(fp)
   19b84:	10803004 	addi	r2,r2,192
   19b88:	e13f9517 	ldw	r4,-428(fp)
   19b8c:	e0ff9917 	ldw	r3,-412(fp)
   19b90:	20c7c83a 	sub	r3,r4,r3
   19b94:	1807d2fa 	srai	r3,r3,11
   19b98:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   19b9c:	e0bf8917 	ldw	r2,-476(fp)
   19ba0:	10800044 	addi	r2,r2,1
   19ba4:	e0bf8915 	stw	r2,-476(fp)
   19ba8:	e0bf8617 	ldw	r2,-488(fp)
   19bac:	10800084 	addi	r2,r2,2
   19bb0:	e0bf8615 	stw	r2,-488(fp)
   19bb4:	e0bf8717 	ldw	r2,-484(fp)
   19bb8:	10800104 	addi	r2,r2,4
   19bbc:	e0bf8715 	stw	r2,-484(fp)
   19bc0:	e0bf8817 	ldw	r2,-480(fp)
   19bc4:	10800104 	addi	r2,r2,4
   19bc8:	e0bf8815 	stw	r2,-480(fp)
   19bcc:	e0bf8917 	ldw	r2,-476(fp)
   19bd0:	10800210 	cmplti	r2,r2,8
   19bd4:	103e8f1e 	bne	r2,zero,19614 <jpeg_idct_12x12+0x58>
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 12 rows from work array, store into output array. */

	wsptr = workspace;
   19bd8:	e0bf9c04 	addi	r2,fp,-400
   19bdc:	e0bf8815 	stw	r2,-480(fp)
	for (ctr = 0; ctr < 12; ctr++) {
   19be0:	e03f8915 	stw	zero,-476(fp)
   19be4:	00015806 	br	1a148 <jpeg_idct_12x12+0xb8c>
		outptr = output_buf[ctr] + output_col;
   19be8:	e0bf8917 	ldw	r2,-476(fp)
   19bec:	1085883a 	add	r2,r2,r2
   19bf0:	1085883a 	add	r2,r2,r2
   19bf4:	e0ffff17 	ldw	r3,-4(fp)
   19bf8:	1885883a 	add	r2,r3,r2
   19bfc:	10c00017 	ldw	r3,0(r2)
   19c00:	e0800317 	ldw	r2,12(fp)
   19c04:	1885883a 	add	r2,r3,r2
   19c08:	e0bf9b15 	stw	r2,-404(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   19c0c:	e0bf8817 	ldw	r2,-480(fp)
   19c10:	10800017 	ldw	r2,0(r2)
   19c14:	10800404 	addi	r2,r2,16
   19c18:	e0bf8b15 	stw	r2,-468(fp)
		z3 <<= CONST_BITS;
   19c1c:	e0bf8b17 	ldw	r2,-468(fp)
   19c20:	1004937a 	slli	r2,r2,13
   19c24:	e0bf8b15 	stw	r2,-468(fp)

		z4 = (INT32) wsptr[4];
   19c28:	e0bf8817 	ldw	r2,-480(fp)
   19c2c:	10800404 	addi	r2,r2,16
   19c30:	10800017 	ldw	r2,0(r2)
   19c34:	e0bf8c15 	stw	r2,-464(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
   19c38:	e13f8c17 	ldw	r4,-464(fp)
   19c3c:	0149cc44 	movi	r5,10033
   19c40:	002c1540 	call	2c154 <__mulsi3>
   19c44:	e0bf8c15 	stw	r2,-464(fp)

		tmp10 = z3 + z4;
   19c48:	e0ff8b17 	ldw	r3,-468(fp)
   19c4c:	e0bf8c17 	ldw	r2,-464(fp)
   19c50:	1885883a 	add	r2,r3,r2
   19c54:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 = z3 - z4;
   19c58:	e0ff8b17 	ldw	r3,-468(fp)
   19c5c:	e0bf8c17 	ldw	r2,-464(fp)
   19c60:	1885c83a 	sub	r2,r3,r2
   19c64:	e0bf8e15 	stw	r2,-456(fp)

		z1 = (INT32) wsptr[2];
   19c68:	e0bf8817 	ldw	r2,-480(fp)
   19c6c:	10800204 	addi	r2,r2,8
   19c70:	10800017 	ldw	r2,0(r2)
   19c74:	e0bf8f15 	stw	r2,-452(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
   19c78:	e13f8f17 	ldw	r4,-452(fp)
   19c7c:	014aed84 	movi	r5,11190
   19c80:	002c1540 	call	2c154 <__mulsi3>
   19c84:	e0bf8c15 	stw	r2,-464(fp)
		z1 <<= CONST_BITS;
   19c88:	e0bf8f17 	ldw	r2,-452(fp)
   19c8c:	1004937a 	slli	r2,r2,13
   19c90:	e0bf8f15 	stw	r2,-452(fp)
		z2 = (INT32) wsptr[6];
   19c94:	e0bf8817 	ldw	r2,-480(fp)
   19c98:	10800604 	addi	r2,r2,24
   19c9c:	10800017 	ldw	r2,0(r2)
   19ca0:	e0bf9015 	stw	r2,-448(fp)
		z2 <<= CONST_BITS;
   19ca4:	e0bf9017 	ldw	r2,-448(fp)
   19ca8:	1004937a 	slli	r2,r2,13
   19cac:	e0bf9015 	stw	r2,-448(fp)

		tmp12 = z1 - z2;
   19cb0:	e0ff8f17 	ldw	r3,-452(fp)
   19cb4:	e0bf9017 	ldw	r2,-448(fp)
   19cb8:	1885c83a 	sub	r2,r3,r2
   19cbc:	e0bf9115 	stw	r2,-444(fp)

		tmp21 = z3 + tmp12;
   19cc0:	e0ff8b17 	ldw	r3,-468(fp)
   19cc4:	e0bf9117 	ldw	r2,-444(fp)
   19cc8:	1885883a 	add	r2,r3,r2
   19ccc:	e0bf9215 	stw	r2,-440(fp)
		tmp24 = z3 - tmp12;
   19cd0:	e0ff8b17 	ldw	r3,-468(fp)
   19cd4:	e0bf9117 	ldw	r2,-444(fp)
   19cd8:	1885c83a 	sub	r2,r3,r2
   19cdc:	e0bf9315 	stw	r2,-436(fp)

		tmp12 = z4 + z2;
   19ce0:	e0ff8c17 	ldw	r3,-464(fp)
   19ce4:	e0bf9017 	ldw	r2,-448(fp)
   19ce8:	1885883a 	add	r2,r3,r2
   19cec:	e0bf9115 	stw	r2,-444(fp)

		tmp20 = tmp10 + tmp12;
   19cf0:	e0ff8d17 	ldw	r3,-460(fp)
   19cf4:	e0bf9117 	ldw	r2,-444(fp)
   19cf8:	1885883a 	add	r2,r3,r2
   19cfc:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp10 - tmp12;
   19d00:	e0ff8d17 	ldw	r3,-460(fp)
   19d04:	e0bf9117 	ldw	r2,-444(fp)
   19d08:	1885c83a 	sub	r2,r3,r2
   19d0c:	e0bf9515 	stw	r2,-428(fp)

		tmp12 = z4 - z1 - z2;
   19d10:	e0ff8c17 	ldw	r3,-464(fp)
   19d14:	e0bf8f17 	ldw	r2,-452(fp)
   19d18:	1887c83a 	sub	r3,r3,r2
   19d1c:	e0bf9017 	ldw	r2,-448(fp)
   19d20:	1885c83a 	sub	r2,r3,r2
   19d24:	e0bf9115 	stw	r2,-444(fp)

		tmp22 = tmp11 + tmp12;
   19d28:	e0ff8e17 	ldw	r3,-456(fp)
   19d2c:	e0bf9117 	ldw	r2,-444(fp)
   19d30:	1885883a 	add	r2,r3,r2
   19d34:	e0bf9615 	stw	r2,-424(fp)
		tmp23 = tmp11 - tmp12;
   19d38:	e0ff8e17 	ldw	r3,-456(fp)
   19d3c:	e0bf9117 	ldw	r2,-444(fp)
   19d40:	1885c83a 	sub	r2,r3,r2
   19d44:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   19d48:	e0bf8817 	ldw	r2,-480(fp)
   19d4c:	10800104 	addi	r2,r2,4
   19d50:	10800017 	ldw	r2,0(r2)
   19d54:	e0bf8f15 	stw	r2,-452(fp)
		z2 = (INT32) wsptr[3];
   19d58:	e0bf8817 	ldw	r2,-480(fp)
   19d5c:	10800304 	addi	r2,r2,12
   19d60:	10800017 	ldw	r2,0(r2)
   19d64:	e0bf9015 	stw	r2,-448(fp)
		z3 = (INT32) wsptr[5];
   19d68:	e0bf8817 	ldw	r2,-480(fp)
   19d6c:	10800504 	addi	r2,r2,20
   19d70:	10800017 	ldw	r2,0(r2)
   19d74:	e0bf8b15 	stw	r2,-468(fp)
		z4 = (INT32) wsptr[7];
   19d78:	e0bf8817 	ldw	r2,-480(fp)
   19d7c:	10800704 	addi	r2,r2,28
   19d80:	10800017 	ldw	r2,0(r2)
   19d84:	e0bf8c15 	stw	r2,-464(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
   19d88:	e13f9017 	ldw	r4,-448(fp)
   19d8c:	014a73c4 	movi	r5,10703
   19d90:	002c1540 	call	2c154 <__mulsi3>
   19d94:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
   19d98:	e13f9017 	ldw	r4,-448(fp)
   19d9c:	017babc4 	movi	r5,-4433
   19da0:	002c1540 	call	2c154 <__mulsi3>
   19da4:	e0bf9815 	stw	r2,-416(fp)

		tmp10 = z1 + z3;
   19da8:	e0ff8f17 	ldw	r3,-452(fp)
   19dac:	e0bf8b17 	ldw	r2,-468(fp)
   19db0:	1885883a 	add	r2,r3,r2
   19db4:	e0bf8d15 	stw	r2,-460(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
   19db8:	e0ff8d17 	ldw	r3,-460(fp)
   19dbc:	e0bf8c17 	ldw	r2,-464(fp)
   19dc0:	1885883a 	add	r2,r3,r2
   19dc4:	1009883a 	mov	r4,r2
   19dc8:	0146e344 	movi	r5,7053
   19dcc:	002c1540 	call	2c154 <__mulsi3>
   19dd0:	e0bf9915 	stw	r2,-412(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
   19dd4:	e13f8d17 	ldw	r4,-460(fp)
   19dd8:	014216c4 	movi	r5,2139
   19ddc:	002c1540 	call	2c154 <__mulsi3>
   19de0:	1007883a 	mov	r3,r2
   19de4:	e0bf9917 	ldw	r2,-412(fp)
   19de8:	1885883a 	add	r2,r3,r2
   19dec:	e0bf9115 	stw	r2,-444(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
   19df0:	e0ff9117 	ldw	r3,-444(fp)
   19df4:	e0bf8e17 	ldw	r2,-456(fp)
   19df8:	18a1883a 	add	r16,r3,r2
   19dfc:	e13f8f17 	ldw	r4,-452(fp)
   19e00:	01423dc4 	movi	r5,2295
   19e04:	002c1540 	call	2c154 <__mulsi3>
   19e08:	8085883a 	add	r2,r16,r2
   19e0c:	e0bf8d15 	stw	r2,-460(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
   19e10:	e0ff8b17 	ldw	r3,-468(fp)
   19e14:	e0bf8c17 	ldw	r2,-464(fp)
   19e18:	1885883a 	add	r2,r3,r2
   19e1c:	1009883a 	mov	r4,r2
   19e20:	0177a2c4 	movi	r5,-8565
   19e24:	002c1540 	call	2c154 <__mulsi3>
   19e28:	e0bf9a15 	stw	r2,-408(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
   19e2c:	e0ff9a17 	ldw	r3,-408(fp)
   19e30:	e0bf9817 	ldw	r2,-416(fp)
   19e34:	18a1883a 	add	r16,r3,r2
   19e38:	e13f8b17 	ldw	r4,-468(fp)
   19e3c:	01742c04 	movi	r5,-12112
   19e40:	002c1540 	call	2c154 <__mulsi3>
   19e44:	8085883a 	add	r2,r16,r2
   19e48:	e0ff9117 	ldw	r3,-444(fp)
   19e4c:	1885883a 	add	r2,r3,r2
   19e50:	e0bf9115 	stw	r2,-444(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
   19e54:	e0ff9917 	ldw	r3,-412(fp)
   19e58:	e0bf8e17 	ldw	r2,-456(fp)
   19e5c:	18a1c83a 	sub	r16,r3,r2
   19e60:	e13f8c17 	ldw	r4,-464(fp)
   19e64:	014cb184 	movi	r5,12998
   19e68:	002c1540 	call	2c154 <__mulsi3>
   19e6c:	8085883a 	add	r2,r16,r2
   19e70:	e0ff9a17 	ldw	r3,-408(fp)
   19e74:	1885883a 	add	r2,r3,r2
   19e78:	e0bf9a15 	stw	r2,-408(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   19e7c:	e13f8f17 	ldw	r4,-452(fp)
   19e80:	017a9704 	movi	r5,-5540
   19e84:	002c1540 	call	2c154 <__mulsi3>
   19e88:	1007883a 	mov	r3,r2
   19e8c:	e0bf9817 	ldw	r2,-416(fp)
   19e90:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
   19e94:	e13f8c17 	ldw	r4,-464(fp)
   19e98:	01702304 	movi	r5,-16244
   19e9c:	002c1540 	call	2c154 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   19ea0:	8085883a 	add	r2,r16,r2
   19ea4:	e0ff9917 	ldw	r3,-412(fp)
   19ea8:	1885883a 	add	r2,r3,r2
   19eac:	e0bf9915 	stw	r2,-412(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
   19eb0:	e0ff8f17 	ldw	r3,-452(fp)
   19eb4:	e0bf8c17 	ldw	r2,-464(fp)
   19eb8:	1885c83a 	sub	r2,r3,r2
   19ebc:	e0bf8f15 	stw	r2,-452(fp)
		z2 -= z3;
   19ec0:	e0ff9017 	ldw	r3,-448(fp)
   19ec4:	e0bf8b17 	ldw	r2,-468(fp)
   19ec8:	1885c83a 	sub	r2,r3,r2
   19ecc:	e0bf9015 	stw	r2,-448(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
   19ed0:	e0ff8f17 	ldw	r3,-452(fp)
   19ed4:	e0bf9017 	ldw	r2,-448(fp)
   19ed8:	1885883a 	add	r2,r3,r2
   19edc:	1009883a 	mov	r4,r2
   19ee0:	01445444 	movi	r5,4433
   19ee4:	002c1540 	call	2c154 <__mulsi3>
   19ee8:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
   19eec:	e13f8f17 	ldw	r4,-452(fp)
   19ef0:	01461f84 	movi	r5,6270
   19ef4:	002c1540 	call	2c154 <__mulsi3>
   19ef8:	1007883a 	mov	r3,r2
   19efc:	e0bf8b17 	ldw	r2,-468(fp)
   19f00:	1885883a 	add	r2,r3,r2
   19f04:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
   19f08:	e13f9017 	ldw	r4,-448(fp)
   19f0c:	017137c4 	movi	r5,-15137
   19f10:	002c1540 	call	2c154 <__mulsi3>
   19f14:	1007883a 	mov	r3,r2
   19f18:	e0bf8b17 	ldw	r2,-468(fp)
   19f1c:	1885883a 	add	r2,r3,r2
   19f20:	e0bf9815 	stw	r2,-416(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   19f24:	e0ff9417 	ldw	r3,-432(fp)
   19f28:	e0bf8d17 	ldw	r2,-460(fp)
   19f2c:	1885883a 	add	r2,r3,r2
   19f30:	1005d4ba 	srai	r2,r2,18
   19f34:	1080ffcc 	andi	r2,r2,1023
   19f38:	e0ff8a17 	ldw	r3,-472(fp)
   19f3c:	1885883a 	add	r2,r3,r2
   19f40:	10c00003 	ldbu	r3,0(r2)
   19f44:	e0bf9b17 	ldw	r2,-404(fp)
   19f48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   19f4c:	e0bf9b17 	ldw	r2,-404(fp)
   19f50:	108002c4 	addi	r2,r2,11
   19f54:	e13f9417 	ldw	r4,-432(fp)
   19f58:	e0ff8d17 	ldw	r3,-460(fp)
   19f5c:	20c7c83a 	sub	r3,r4,r3
   19f60:	1807d4ba 	srai	r3,r3,18
   19f64:	18c0ffcc 	andi	r3,r3,1023
   19f68:	e13f8a17 	ldw	r4,-472(fp)
   19f6c:	20c7883a 	add	r3,r4,r3
   19f70:	18c00003 	ldbu	r3,0(r3)
   19f74:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   19f78:	e0bf9b17 	ldw	r2,-404(fp)
   19f7c:	10800044 	addi	r2,r2,1
   19f80:	e13f9217 	ldw	r4,-440(fp)
   19f84:	e0ff8e17 	ldw	r3,-456(fp)
   19f88:	20c7883a 	add	r3,r4,r3
   19f8c:	1807d4ba 	srai	r3,r3,18
   19f90:	18c0ffcc 	andi	r3,r3,1023
   19f94:	e13f8a17 	ldw	r4,-472(fp)
   19f98:	20c7883a 	add	r3,r4,r3
   19f9c:	18c00003 	ldbu	r3,0(r3)
   19fa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   19fa4:	e0bf9b17 	ldw	r2,-404(fp)
   19fa8:	10800284 	addi	r2,r2,10
   19fac:	e13f9217 	ldw	r4,-440(fp)
   19fb0:	e0ff8e17 	ldw	r3,-456(fp)
   19fb4:	20c7c83a 	sub	r3,r4,r3
   19fb8:	1807d4ba 	srai	r3,r3,18
   19fbc:	18c0ffcc 	andi	r3,r3,1023
   19fc0:	e13f8a17 	ldw	r4,-472(fp)
   19fc4:	20c7883a 	add	r3,r4,r3
   19fc8:	18c00003 	ldbu	r3,0(r3)
   19fcc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   19fd0:	e0bf9b17 	ldw	r2,-404(fp)
   19fd4:	10800084 	addi	r2,r2,2
   19fd8:	e13f9617 	ldw	r4,-424(fp)
   19fdc:	e0ff9117 	ldw	r3,-444(fp)
   19fe0:	20c7883a 	add	r3,r4,r3
   19fe4:	1807d4ba 	srai	r3,r3,18
   19fe8:	18c0ffcc 	andi	r3,r3,1023
   19fec:	e13f8a17 	ldw	r4,-472(fp)
   19ff0:	20c7883a 	add	r3,r4,r3
   19ff4:	18c00003 	ldbu	r3,0(r3)
   19ff8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   19ffc:	e0bf9b17 	ldw	r2,-404(fp)
   1a000:	10800244 	addi	r2,r2,9
   1a004:	e13f9617 	ldw	r4,-424(fp)
   1a008:	e0ff9117 	ldw	r3,-444(fp)
   1a00c:	20c7c83a 	sub	r3,r4,r3
   1a010:	1807d4ba 	srai	r3,r3,18
   1a014:	18c0ffcc 	andi	r3,r3,1023
   1a018:	e13f8a17 	ldw	r4,-472(fp)
   1a01c:	20c7883a 	add	r3,r4,r3
   1a020:	18c00003 	ldbu	r3,0(r3)
   1a024:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1a028:	e0bf9b17 	ldw	r2,-404(fp)
   1a02c:	108000c4 	addi	r2,r2,3
   1a030:	e13f9717 	ldw	r4,-420(fp)
   1a034:	e0ff9a17 	ldw	r3,-408(fp)
   1a038:	20c7883a 	add	r3,r4,r3
   1a03c:	1807d4ba 	srai	r3,r3,18
   1a040:	18c0ffcc 	andi	r3,r3,1023
   1a044:	e13f8a17 	ldw	r4,-472(fp)
   1a048:	20c7883a 	add	r3,r4,r3
   1a04c:	18c00003 	ldbu	r3,0(r3)
   1a050:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1a054:	e0bf9b17 	ldw	r2,-404(fp)
   1a058:	10800204 	addi	r2,r2,8
   1a05c:	e13f9717 	ldw	r4,-420(fp)
   1a060:	e0ff9a17 	ldw	r3,-408(fp)
   1a064:	20c7c83a 	sub	r3,r4,r3
   1a068:	1807d4ba 	srai	r3,r3,18
   1a06c:	18c0ffcc 	andi	r3,r3,1023
   1a070:	e13f8a17 	ldw	r4,-472(fp)
   1a074:	20c7883a 	add	r3,r4,r3
   1a078:	18c00003 	ldbu	r3,0(r3)
   1a07c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1a080:	e0bf9b17 	ldw	r2,-404(fp)
   1a084:	10800104 	addi	r2,r2,4
   1a088:	e13f9317 	ldw	r4,-436(fp)
   1a08c:	e0ff9817 	ldw	r3,-416(fp)
   1a090:	20c7883a 	add	r3,r4,r3
   1a094:	1807d4ba 	srai	r3,r3,18
   1a098:	18c0ffcc 	andi	r3,r3,1023
   1a09c:	e13f8a17 	ldw	r4,-472(fp)
   1a0a0:	20c7883a 	add	r3,r4,r3
   1a0a4:	18c00003 	ldbu	r3,0(r3)
   1a0a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1a0ac:	e0bf9b17 	ldw	r2,-404(fp)
   1a0b0:	108001c4 	addi	r2,r2,7
   1a0b4:	e13f9317 	ldw	r4,-436(fp)
   1a0b8:	e0ff9817 	ldw	r3,-416(fp)
   1a0bc:	20c7c83a 	sub	r3,r4,r3
   1a0c0:	1807d4ba 	srai	r3,r3,18
   1a0c4:	18c0ffcc 	andi	r3,r3,1023
   1a0c8:	e13f8a17 	ldw	r4,-472(fp)
   1a0cc:	20c7883a 	add	r3,r4,r3
   1a0d0:	18c00003 	ldbu	r3,0(r3)
   1a0d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1a0d8:	e0bf9b17 	ldw	r2,-404(fp)
   1a0dc:	10800144 	addi	r2,r2,5
   1a0e0:	e13f9517 	ldw	r4,-428(fp)
   1a0e4:	e0ff9917 	ldw	r3,-412(fp)
   1a0e8:	20c7883a 	add	r3,r4,r3
   1a0ec:	1807d4ba 	srai	r3,r3,18
   1a0f0:	18c0ffcc 	andi	r3,r3,1023
   1a0f4:	e13f8a17 	ldw	r4,-472(fp)
   1a0f8:	20c7883a 	add	r3,r4,r3
   1a0fc:	18c00003 	ldbu	r3,0(r3)
   1a100:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1a104:	e0bf9b17 	ldw	r2,-404(fp)
   1a108:	10800184 	addi	r2,r2,6
   1a10c:	e13f9517 	ldw	r4,-428(fp)
   1a110:	e0ff9917 	ldw	r3,-412(fp)
   1a114:	20c7c83a 	sub	r3,r4,r3
   1a118:	1807d4ba 	srai	r3,r3,18
   1a11c:	18c0ffcc 	andi	r3,r3,1023
   1a120:	e13f8a17 	ldw	r4,-472(fp)
   1a124:	20c7883a 	add	r3,r4,r3
   1a128:	18c00003 	ldbu	r3,0(r3)
   1a12c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1a130:	e0bf8817 	ldw	r2,-480(fp)
   1a134:	10800804 	addi	r2,r2,32
   1a138:	e0bf8815 	stw	r2,-480(fp)
	}

	/* Pass 2: process 12 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 12; ctr++) {
   1a13c:	e0bf8917 	ldw	r2,-476(fp)
   1a140:	10800044 	addi	r2,r2,1
   1a144:	e0bf8915 	stw	r2,-476(fp)
   1a148:	e0bf8917 	ldw	r2,-476(fp)
   1a14c:	10800310 	cmplti	r2,r2,12
   1a150:	103ea51e 	bne	r2,zero,19be8 <jpeg_idct_12x12+0x62c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1a154:	e037883a 	mov	sp,fp
   1a158:	dfc00217 	ldw	ra,8(sp)
   1a15c:	df000117 	ldw	fp,4(sp)
   1a160:	dc000017 	ldw	r16,0(sp)
   1a164:	dec00304 	addi	sp,sp,12
   1a168:	f800283a 	ret

0001a16c <jpeg_idct_13x13>:

GLOBAL(void)
	jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1a16c:	deff7a04 	addi	sp,sp,-536
   1a170:	dfc08515 	stw	ra,532(sp)
   1a174:	df008415 	stw	fp,528(sp)
   1a178:	dc008315 	stw	r16,524(sp)
   1a17c:	df008304 	addi	fp,sp,524
   1a180:	e13ffc15 	stw	r4,-16(fp)
   1a184:	e17ffd15 	stw	r5,-12(fp)
   1a188:	e1bffe15 	stw	r6,-8(fp)
   1a18c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1a190:	e0bffc17 	ldw	r2,-16(fp)
   1a194:	10804917 	ldw	r2,292(r2)
   1a198:	10802004 	addi	r2,r2,128
   1a19c:	e0bf8115 	stw	r2,-508(fp)
	int workspace[8*13];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   1a1a0:	e0bffe17 	ldw	r2,-8(fp)
   1a1a4:	e0bf7d15 	stw	r2,-524(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1a1a8:	e0bffd17 	ldw	r2,-12(fp)
   1a1ac:	10801517 	ldw	r2,84(r2)
   1a1b0:	e0bf7e15 	stw	r2,-520(fp)
	wsptr = workspace;
   1a1b4:	e0bf9404 	addi	r2,fp,-432
   1a1b8:	e0bf7f15 	stw	r2,-516(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1a1bc:	e03f8015 	stw	zero,-512(fp)
   1a1c0:	0001bc06 	br	1a8b4 <jpeg_idct_13x13+0x748>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1a1c4:	e0bf7d17 	ldw	r2,-524(fp)
   1a1c8:	1080000b 	ldhu	r2,0(r2)
   1a1cc:	10ffffcc 	andi	r3,r2,65535
   1a1d0:	18e0001c 	xori	r3,r3,32768
   1a1d4:	18e00004 	addi	r3,r3,-32768
   1a1d8:	e0bf7e17 	ldw	r2,-520(fp)
   1a1dc:	10800017 	ldw	r2,0(r2)
   1a1e0:	1809883a 	mov	r4,r3
   1a1e4:	100b883a 	mov	r5,r2
   1a1e8:	002c1540 	call	2c154 <__mulsi3>
   1a1ec:	e0bf8215 	stw	r2,-504(fp)
		z1 <<= CONST_BITS;
   1a1f0:	e0bf8217 	ldw	r2,-504(fp)
   1a1f4:	1004937a 	slli	r2,r2,13
   1a1f8:	e0bf8215 	stw	r2,-504(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   1a1fc:	e0bf8217 	ldw	r2,-504(fp)
   1a200:	10810004 	addi	r2,r2,1024
   1a204:	e0bf8215 	stw	r2,-504(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1a208:	e0bf7d17 	ldw	r2,-524(fp)
   1a20c:	10800804 	addi	r2,r2,32
   1a210:	1080000b 	ldhu	r2,0(r2)
   1a214:	10ffffcc 	andi	r3,r2,65535
   1a218:	18e0001c 	xori	r3,r3,32768
   1a21c:	18e00004 	addi	r3,r3,-32768
   1a220:	e0bf7e17 	ldw	r2,-520(fp)
   1a224:	10801004 	addi	r2,r2,64
   1a228:	10800017 	ldw	r2,0(r2)
   1a22c:	1809883a 	mov	r4,r3
   1a230:	100b883a 	mov	r5,r2
   1a234:	002c1540 	call	2c154 <__mulsi3>
   1a238:	e0bf8315 	stw	r2,-500(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1a23c:	e0bf7d17 	ldw	r2,-524(fp)
   1a240:	10801004 	addi	r2,r2,64
   1a244:	1080000b 	ldhu	r2,0(r2)
   1a248:	10ffffcc 	andi	r3,r2,65535
   1a24c:	18e0001c 	xori	r3,r3,32768
   1a250:	18e00004 	addi	r3,r3,-32768
   1a254:	e0bf7e17 	ldw	r2,-520(fp)
   1a258:	10802004 	addi	r2,r2,128
   1a25c:	10800017 	ldw	r2,0(r2)
   1a260:	1809883a 	mov	r4,r3
   1a264:	100b883a 	mov	r5,r2
   1a268:	002c1540 	call	2c154 <__mulsi3>
   1a26c:	e0bf8415 	stw	r2,-496(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1a270:	e0bf7d17 	ldw	r2,-524(fp)
   1a274:	10801804 	addi	r2,r2,96
   1a278:	1080000b 	ldhu	r2,0(r2)
   1a27c:	10ffffcc 	andi	r3,r2,65535
   1a280:	18e0001c 	xori	r3,r3,32768
   1a284:	18e00004 	addi	r3,r3,-32768
   1a288:	e0bf7e17 	ldw	r2,-520(fp)
   1a28c:	10803004 	addi	r2,r2,192
   1a290:	10800017 	ldw	r2,0(r2)
   1a294:	1809883a 	mov	r4,r3
   1a298:	100b883a 	mov	r5,r2
   1a29c:	002c1540 	call	2c154 <__mulsi3>
   1a2a0:	e0bf8515 	stw	r2,-492(fp)

		tmp10 = z3 + z4;
   1a2a4:	e0ff8417 	ldw	r3,-496(fp)
   1a2a8:	e0bf8517 	ldw	r2,-492(fp)
   1a2ac:	1885883a 	add	r2,r3,r2
   1a2b0:	e0bf8615 	stw	r2,-488(fp)
		tmp11 = z3 - z4;
   1a2b4:	e0ff8417 	ldw	r3,-496(fp)
   1a2b8:	e0bf8517 	ldw	r2,-492(fp)
   1a2bc:	1885c83a 	sub	r2,r3,r2
   1a2c0:	e0bf8715 	stw	r2,-484(fp)

		tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
   1a2c4:	e13f8617 	ldw	r4,-488(fp)
   1a2c8:	01493e44 	movi	r5,9465
   1a2cc:	002c1540 	call	2c154 <__mulsi3>
   1a2d0:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
   1a2d4:	e13f8717 	ldw	r4,-484(fp)
   1a2d8:	0140c644 	movi	r5,793
   1a2dc:	002c1540 	call	2c154 <__mulsi3>
   1a2e0:	1007883a 	mov	r3,r2
   1a2e4:	e0bf8217 	ldw	r2,-504(fp)
   1a2e8:	1885883a 	add	r2,r3,r2
   1a2ec:	e0bf8915 	stw	r2,-476(fp)

		tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
   1a2f0:	e13f8317 	ldw	r4,-500(fp)
   1a2f4:	014afc44 	movi	r5,11249
   1a2f8:	002c1540 	call	2c154 <__mulsi3>
   1a2fc:	1007883a 	mov	r3,r2
   1a300:	e0bf8817 	ldw	r2,-480(fp)
   1a304:	1887883a 	add	r3,r3,r2
   1a308:	e0bf8917 	ldw	r2,-476(fp)
   1a30c:	1885883a 	add	r2,r3,r2
   1a310:	e0bf8a15 	stw	r2,-472(fp)
		tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
   1a314:	e13f8317 	ldw	r4,-500(fp)
   1a318:	01440304 	movi	r5,4108
   1a31c:	002c1540 	call	2c154 <__mulsi3>
   1a320:	1007883a 	mov	r3,r2
   1a324:	e0bf8817 	ldw	r2,-480(fp)
   1a328:	1887c83a 	sub	r3,r3,r2
   1a32c:	e0bf8917 	ldw	r2,-476(fp)
   1a330:	1885883a 	add	r2,r3,r2
   1a334:	e0bf8b15 	stw	r2,-468(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
   1a338:	e13f8617 	ldw	r4,-488(fp)
   1a33c:	01428804 	movi	r5,2592
   1a340:	002c1540 	call	2c154 <__mulsi3>
   1a344:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
   1a348:	e13f8717 	ldw	r4,-484(fp)
   1a34c:	0143e544 	movi	r5,3989
   1a350:	002c1540 	call	2c154 <__mulsi3>
   1a354:	1007883a 	mov	r3,r2
   1a358:	e0bf8217 	ldw	r2,-504(fp)
   1a35c:	1885883a 	add	r2,r3,r2
   1a360:	e0bf8915 	stw	r2,-476(fp)

		tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
   1a364:	e13f8317 	ldw	r4,-500(fp)
   1a368:	01487804 	movi	r5,8672
   1a36c:	002c1540 	call	2c154 <__mulsi3>
   1a370:	1007883a 	mov	r3,r2
   1a374:	e0bf8817 	ldw	r2,-480(fp)
   1a378:	1887c83a 	sub	r3,r3,r2
   1a37c:	e0bf8917 	ldw	r2,-476(fp)
   1a380:	1885883a 	add	r2,r3,r2
   1a384:	e0bf8c15 	stw	r2,-464(fp)
		tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
   1a388:	e13f8317 	ldw	r4,-500(fp)
   1a38c:	0175fb84 	movi	r5,-10258
   1a390:	002c1540 	call	2c154 <__mulsi3>
   1a394:	1007883a 	mov	r3,r2
   1a398:	e0bf8817 	ldw	r2,-480(fp)
   1a39c:	1887883a 	add	r3,r3,r2
   1a3a0:	e0bf8917 	ldw	r2,-476(fp)
   1a3a4:	1885883a 	add	r2,r3,r2
   1a3a8:	e0bf8d15 	stw	r2,-460(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
   1a3ac:	e13f8617 	ldw	r4,-488(fp)
   1a3b0:	01437c84 	movi	r5,3570
   1a3b4:	002c1540 	call	2c154 <__mulsi3>
   1a3b8:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
   1a3bc:	e13f8717 	ldw	r4,-484(fp)
   1a3c0:	01477f84 	movi	r5,7678
   1a3c4:	002c1540 	call	2c154 <__mulsi3>
   1a3c8:	1007883a 	mov	r3,r2
   1a3cc:	e0bf8217 	ldw	r2,-504(fp)
   1a3d0:	1885c83a 	sub	r2,r3,r2
   1a3d4:	e0bf8915 	stw	r2,-476(fp)

		tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
   1a3d8:	e13f8317 	ldw	r4,-500(fp)
   1a3dc:	017ea304 	movi	r5,-1396
   1a3e0:	002c1540 	call	2c154 <__mulsi3>
   1a3e4:	1007883a 	mov	r3,r2
   1a3e8:	e0bf8817 	ldw	r2,-480(fp)
   1a3ec:	1887c83a 	sub	r3,r3,r2
   1a3f0:	e0bf8917 	ldw	r2,-476(fp)
   1a3f4:	1885c83a 	sub	r2,r3,r2
   1a3f8:	e0bf8e15 	stw	r2,-456(fp)
		tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
   1a3fc:	e13f8317 	ldw	r4,-500(fp)
   1a400:	017992c4 	movi	r5,-6581
   1a404:	002c1540 	call	2c154 <__mulsi3>
   1a408:	1007883a 	mov	r3,r2
   1a40c:	e0bf8817 	ldw	r2,-480(fp)
   1a410:	1887883a 	add	r3,r3,r2
   1a414:	e0bf8917 	ldw	r2,-476(fp)
   1a418:	1885c83a 	sub	r2,r3,r2
   1a41c:	e0bf8f15 	stw	r2,-452(fp)

		tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
   1a420:	e0ff8717 	ldw	r3,-484(fp)
   1a424:	e0bf8317 	ldw	r2,-500(fp)
   1a428:	1885c83a 	sub	r2,r3,r2
   1a42c:	1009883a 	mov	r4,r2
   1a430:	014b5044 	movi	r5,11585
   1a434:	002c1540 	call	2c154 <__mulsi3>
   1a438:	1007883a 	mov	r3,r2
   1a43c:	e0bf8217 	ldw	r2,-504(fp)
   1a440:	1885883a 	add	r2,r3,r2
   1a444:	e0bf9015 	stw	r2,-448(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1a448:	e0bf7d17 	ldw	r2,-524(fp)
   1a44c:	10800404 	addi	r2,r2,16
   1a450:	1080000b 	ldhu	r2,0(r2)
   1a454:	10ffffcc 	andi	r3,r2,65535
   1a458:	18e0001c 	xori	r3,r3,32768
   1a45c:	18e00004 	addi	r3,r3,-32768
   1a460:	e0bf7e17 	ldw	r2,-520(fp)
   1a464:	10800804 	addi	r2,r2,32
   1a468:	10800017 	ldw	r2,0(r2)
   1a46c:	1809883a 	mov	r4,r3
   1a470:	100b883a 	mov	r5,r2
   1a474:	002c1540 	call	2c154 <__mulsi3>
   1a478:	e0bf8215 	stw	r2,-504(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1a47c:	e0bf7d17 	ldw	r2,-524(fp)
   1a480:	10800c04 	addi	r2,r2,48
   1a484:	1080000b 	ldhu	r2,0(r2)
   1a488:	10ffffcc 	andi	r3,r2,65535
   1a48c:	18e0001c 	xori	r3,r3,32768
   1a490:	18e00004 	addi	r3,r3,-32768
   1a494:	e0bf7e17 	ldw	r2,-520(fp)
   1a498:	10801804 	addi	r2,r2,96
   1a49c:	10800017 	ldw	r2,0(r2)
   1a4a0:	1809883a 	mov	r4,r3
   1a4a4:	100b883a 	mov	r5,r2
   1a4a8:	002c1540 	call	2c154 <__mulsi3>
   1a4ac:	e0bf8315 	stw	r2,-500(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1a4b0:	e0bf7d17 	ldw	r2,-524(fp)
   1a4b4:	10801404 	addi	r2,r2,80
   1a4b8:	1080000b 	ldhu	r2,0(r2)
   1a4bc:	10ffffcc 	andi	r3,r2,65535
   1a4c0:	18e0001c 	xori	r3,r3,32768
   1a4c4:	18e00004 	addi	r3,r3,-32768
   1a4c8:	e0bf7e17 	ldw	r2,-520(fp)
   1a4cc:	10802804 	addi	r2,r2,160
   1a4d0:	10800017 	ldw	r2,0(r2)
   1a4d4:	1809883a 	mov	r4,r3
   1a4d8:	100b883a 	mov	r5,r2
   1a4dc:	002c1540 	call	2c154 <__mulsi3>
   1a4e0:	e0bf8415 	stw	r2,-496(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1a4e4:	e0bf7d17 	ldw	r2,-524(fp)
   1a4e8:	10801c04 	addi	r2,r2,112
   1a4ec:	1080000b 	ldhu	r2,0(r2)
   1a4f0:	10ffffcc 	andi	r3,r2,65535
   1a4f4:	18e0001c 	xori	r3,r3,32768
   1a4f8:	18e00004 	addi	r3,r3,-32768
   1a4fc:	e0bf7e17 	ldw	r2,-520(fp)
   1a500:	10803804 	addi	r2,r2,224
   1a504:	10800017 	ldw	r2,0(r2)
   1a508:	1809883a 	mov	r4,r3
   1a50c:	100b883a 	mov	r5,r2
   1a510:	002c1540 	call	2c154 <__mulsi3>
   1a514:	e0bf8515 	stw	r2,-492(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
   1a518:	e0ff8217 	ldw	r3,-504(fp)
   1a51c:	e0bf8317 	ldw	r2,-500(fp)
   1a520:	1885883a 	add	r2,r3,r2
   1a524:	1009883a 	mov	r4,r2
   1a528:	014a9404 	movi	r5,10832
   1a52c:	002c1540 	call	2c154 <__mulsi3>
   1a530:	e0bf8715 	stw	r2,-484(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
   1a534:	e0ff8217 	ldw	r3,-504(fp)
   1a538:	e0bf8417 	ldw	r2,-496(fp)
   1a53c:	1885883a 	add	r2,r3,r2
   1a540:	1009883a 	mov	r4,r2
   1a544:	01494f84 	movi	r5,9534
   1a548:	002c1540 	call	2c154 <__mulsi3>
   1a54c:	e0bf8815 	stw	r2,-480(fp)
		tmp15 = z1 + z4;
   1a550:	e0ff8217 	ldw	r3,-504(fp)
   1a554:	e0bf8517 	ldw	r2,-492(fp)
   1a558:	1885883a 	add	r2,r3,r2
   1a55c:	e0bf9115 	stw	r2,-444(fp)
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
   1a560:	e13f9117 	ldw	r4,-444(fp)
   1a564:	01478084 	movi	r5,7682
   1a568:	002c1540 	call	2c154 <__mulsi3>
   1a56c:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
   1a570:	e0ff8717 	ldw	r3,-484(fp)
   1a574:	e0bf8817 	ldw	r2,-480(fp)
   1a578:	1887883a 	add	r3,r3,r2
   1a57c:	e0bf8917 	ldw	r2,-476(fp)
   1a580:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
   1a584:	e13f8217 	ldw	r4,-504(fp)
   1a588:	016fd6c4 	movi	r5,-16549
   1a58c:	002c1540 	call	2c154 <__mulsi3>

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
		tmp15 = z1 + z4;
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
		tmp10 = tmp11 + tmp12 + tmp13 -
   1a590:	8085883a 	add	r2,r16,r2
   1a594:	e0bf8615 	stw	r2,-488(fp)
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
		tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
   1a598:	e0ff8317 	ldw	r3,-500(fp)
   1a59c:	e0bf8417 	ldw	r2,-496(fp)
   1a5a0:	1885883a 	add	r2,r3,r2
   1a5a4:	1009883a 	mov	r4,r2
   1a5a8:	017d4ac4 	movi	r5,-2773
   1a5ac:	002c1540 	call	2c154 <__mulsi3>
   1a5b0:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
   1a5b4:	e13f8317 	ldw	r4,-500(fp)
   1a5b8:	0146b2c4 	movi	r5,6859
   1a5bc:	002c1540 	call	2c154 <__mulsi3>
   1a5c0:	1007883a 	mov	r3,r2
   1a5c4:	e0bf9217 	ldw	r2,-440(fp)
   1a5c8:	1885883a 	add	r2,r3,r2
   1a5cc:	e0ff8717 	ldw	r3,-484(fp)
   1a5d0:	1885883a 	add	r2,r3,r2
   1a5d4:	e0bf8715 	stw	r2,-484(fp)
		tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
   1a5d8:	e13f8417 	ldw	r4,-496(fp)
   1a5dc:	01736c44 	movi	r5,-12879
   1a5e0:	002c1540 	call	2c154 <__mulsi3>
   1a5e4:	1007883a 	mov	r3,r2
   1a5e8:	e0bf9217 	ldw	r2,-440(fp)
   1a5ec:	1885883a 	add	r2,r3,r2
   1a5f0:	e0ff8817 	ldw	r3,-480(fp)
   1a5f4:	1885883a 	add	r2,r3,r2
   1a5f8:	e0bf8815 	stw	r2,-480(fp)
		tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
   1a5fc:	e0ff8317 	ldw	r3,-500(fp)
   1a600:	e0bf8517 	ldw	r2,-492(fp)
   1a604:	1885883a 	add	r2,r3,r2
   1a608:	1009883a 	mov	r4,r2
   1a60c:	0176b084 	movi	r5,-9534
   1a610:	002c1540 	call	2c154 <__mulsi3>
   1a614:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14;
   1a618:	e0ff8717 	ldw	r3,-484(fp)
   1a61c:	e0bf9217 	ldw	r2,-440(fp)
   1a620:	1885883a 	add	r2,r3,r2
   1a624:	e0bf8715 	stw	r2,-484(fp)
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
   1a628:	e13f8517 	ldw	r4,-492(fp)
   1a62c:	0151a504 	movi	r5,18068
   1a630:	002c1540 	call	2c154 <__mulsi3>
   1a634:	1007883a 	mov	r3,r2
   1a638:	e0bf9217 	ldw	r2,-440(fp)
   1a63c:	1885883a 	add	r2,r3,r2
   1a640:	e0ff8917 	ldw	r3,-476(fp)
   1a644:	1885883a 	add	r2,r3,r2
   1a648:	e0bf8915 	stw	r2,-476(fp)
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
   1a64c:	e0ff8417 	ldw	r3,-496(fp)
   1a650:	e0bf8517 	ldw	r2,-492(fp)
   1a654:	1885883a 	add	r2,r3,r2
   1a658:	1009883a 	mov	r4,r2
   1a65c:	017abe04 	movi	r5,-5384
   1a660:	002c1540 	call	2c154 <__mulsi3>
   1a664:	e0bf9215 	stw	r2,-440(fp)
		tmp12 += tmp14;
   1a668:	e0ff8817 	ldw	r3,-480(fp)
   1a66c:	e0bf9217 	ldw	r2,-440(fp)
   1a670:	1885883a 	add	r2,r3,r2
   1a674:	e0bf8815 	stw	r2,-480(fp)
		tmp13 += tmp14;
   1a678:	e0ff8917 	ldw	r3,-476(fp)
   1a67c:	e0bf9217 	ldw	r2,-440(fp)
   1a680:	1885883a 	add	r2,r3,r2
   1a684:	e0bf8915 	stw	r2,-476(fp)
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
   1a688:	e13f9117 	ldw	r4,-444(fp)
   1a68c:	0142b544 	movi	r5,2773
   1a690:	002c1540 	call	2c154 <__mulsi3>
   1a694:	e0bf9115 	stw	r2,-444(fp)
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
   1a698:	e13f8217 	ldw	r4,-504(fp)
   1a69c:	01428cc4 	movi	r5,2611
   1a6a0:	002c1540 	call	2c154 <__mulsi3>
   1a6a4:	1007883a 	mov	r3,r2
   1a6a8:	e0bf9117 	ldw	r2,-444(fp)
   1a6ac:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
   1a6b0:	e13f8317 	ldw	r4,-500(fp)
   1a6b4:	017c4584 	movi	r5,-3818
   1a6b8:	002c1540 	call	2c154 <__mulsi3>
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
		tmp12 += tmp14;
		tmp13 += tmp14;
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
   1a6bc:	8085883a 	add	r2,r16,r2
   1a6c0:	e0bf9215 	stw	r2,-440(fp)
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
   1a6c4:	e0ff8417 	ldw	r3,-496(fp)
   1a6c8:	e0bf8317 	ldw	r2,-500(fp)
   1a6cc:	1885c83a 	sub	r2,r3,r2
   1a6d0:	1009883a 	mov	r4,r2
   1a6d4:	01478084 	movi	r5,7682
   1a6d8:	002c1540 	call	2c154 <__mulsi3>
   1a6dc:	e0bf8215 	stw	r2,-504(fp)
		tmp14 += z1;
   1a6e0:	e0ff9217 	ldw	r3,-440(fp)
   1a6e4:	e0bf8217 	ldw	r2,-504(fp)
   1a6e8:	1885883a 	add	r2,r3,r2
   1a6ec:	e0bf9215 	stw	r2,-440(fp)
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
   1a6f0:	e13f8417 	ldw	r4,-496(fp)
   1a6f4:	01431384 	movi	r5,3150
   1a6f8:	002c1540 	call	2c154 <__mulsi3>
   1a6fc:	1007883a 	mov	r3,r2
   1a700:	e0bf8217 	ldw	r2,-504(fp)
   1a704:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
   1a708:	e13f8517 	ldw	r4,-492(fp)
   1a70c:	01720fc4 	movi	r5,-14273
   1a710:	002c1540 	call	2c154 <__mulsi3>
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
		tmp14 += z1;
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
   1a714:	8085883a 	add	r2,r16,r2
   1a718:	e0ff9117 	ldw	r3,-444(fp)
   1a71c:	1885883a 	add	r2,r3,r2
   1a720:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1a724:	e0ff8a17 	ldw	r3,-472(fp)
   1a728:	e0bf8617 	ldw	r2,-488(fp)
   1a72c:	1885883a 	add	r2,r3,r2
   1a730:	1007d2fa 	srai	r3,r2,11
   1a734:	e0bf7f17 	ldw	r2,-516(fp)
   1a738:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   1a73c:	e0bf7f17 	ldw	r2,-516(fp)
   1a740:	10806004 	addi	r2,r2,384
   1a744:	e13f8a17 	ldw	r4,-472(fp)
   1a748:	e0ff8617 	ldw	r3,-488(fp)
   1a74c:	20c7c83a 	sub	r3,r4,r3
   1a750:	1807d2fa 	srai	r3,r3,11
   1a754:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   1a758:	e0bf7f17 	ldw	r2,-516(fp)
   1a75c:	10800804 	addi	r2,r2,32
   1a760:	e13f8c17 	ldw	r4,-464(fp)
   1a764:	e0ff8717 	ldw	r3,-484(fp)
   1a768:	20c7883a 	add	r3,r4,r3
   1a76c:	1807d2fa 	srai	r3,r3,11
   1a770:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   1a774:	e0bf7f17 	ldw	r2,-516(fp)
   1a778:	10805804 	addi	r2,r2,352
   1a77c:	e13f8c17 	ldw	r4,-464(fp)
   1a780:	e0ff8717 	ldw	r3,-484(fp)
   1a784:	20c7c83a 	sub	r3,r4,r3
   1a788:	1807d2fa 	srai	r3,r3,11
   1a78c:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   1a790:	e0bf7f17 	ldw	r2,-516(fp)
   1a794:	10801004 	addi	r2,r2,64
   1a798:	e13f8b17 	ldw	r4,-468(fp)
   1a79c:	e0ff8817 	ldw	r3,-480(fp)
   1a7a0:	20c7883a 	add	r3,r4,r3
   1a7a4:	1807d2fa 	srai	r3,r3,11
   1a7a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   1a7ac:	e0bf7f17 	ldw	r2,-516(fp)
   1a7b0:	10805004 	addi	r2,r2,320
   1a7b4:	e13f8b17 	ldw	r4,-468(fp)
   1a7b8:	e0ff8817 	ldw	r3,-480(fp)
   1a7bc:	20c7c83a 	sub	r3,r4,r3
   1a7c0:	1807d2fa 	srai	r3,r3,11
   1a7c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   1a7c8:	e0bf7f17 	ldw	r2,-516(fp)
   1a7cc:	10801804 	addi	r2,r2,96
   1a7d0:	e13f8e17 	ldw	r4,-456(fp)
   1a7d4:	e0ff8917 	ldw	r3,-476(fp)
   1a7d8:	20c7883a 	add	r3,r4,r3
   1a7dc:	1807d2fa 	srai	r3,r3,11
   1a7e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   1a7e4:	e0bf7f17 	ldw	r2,-516(fp)
   1a7e8:	10804804 	addi	r2,r2,288
   1a7ec:	e13f8e17 	ldw	r4,-456(fp)
   1a7f0:	e0ff8917 	ldw	r3,-476(fp)
   1a7f4:	20c7c83a 	sub	r3,r4,r3
   1a7f8:	1807d2fa 	srai	r3,r3,11
   1a7fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   1a800:	e0bf7f17 	ldw	r2,-516(fp)
   1a804:	10802004 	addi	r2,r2,128
   1a808:	e13f8f17 	ldw	r4,-452(fp)
   1a80c:	e0ff9217 	ldw	r3,-440(fp)
   1a810:	20c7883a 	add	r3,r4,r3
   1a814:	1807d2fa 	srai	r3,r3,11
   1a818:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   1a81c:	e0bf7f17 	ldw	r2,-516(fp)
   1a820:	10804004 	addi	r2,r2,256
   1a824:	e13f8f17 	ldw	r4,-452(fp)
   1a828:	e0ff9217 	ldw	r3,-440(fp)
   1a82c:	20c7c83a 	sub	r3,r4,r3
   1a830:	1807d2fa 	srai	r3,r3,11
   1a834:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   1a838:	e0bf7f17 	ldw	r2,-516(fp)
   1a83c:	10802804 	addi	r2,r2,160
   1a840:	e13f8d17 	ldw	r4,-460(fp)
   1a844:	e0ff9117 	ldw	r3,-444(fp)
   1a848:	20c7883a 	add	r3,r4,r3
   1a84c:	1807d2fa 	srai	r3,r3,11
   1a850:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   1a854:	e0bf7f17 	ldw	r2,-516(fp)
   1a858:	10803804 	addi	r2,r2,224
   1a85c:	e13f8d17 	ldw	r4,-460(fp)
   1a860:	e0ff9117 	ldw	r3,-444(fp)
   1a864:	20c7c83a 	sub	r3,r4,r3
   1a868:	1807d2fa 	srai	r3,r3,11
   1a86c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
   1a870:	e0bf7f17 	ldw	r2,-516(fp)
   1a874:	10803004 	addi	r2,r2,192
   1a878:	e0ff9017 	ldw	r3,-448(fp)
   1a87c:	1807d2fa 	srai	r3,r3,11
   1a880:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1a884:	e0bf8017 	ldw	r2,-512(fp)
   1a888:	10800044 	addi	r2,r2,1
   1a88c:	e0bf8015 	stw	r2,-512(fp)
   1a890:	e0bf7d17 	ldw	r2,-524(fp)
   1a894:	10800084 	addi	r2,r2,2
   1a898:	e0bf7d15 	stw	r2,-524(fp)
   1a89c:	e0bf7e17 	ldw	r2,-520(fp)
   1a8a0:	10800104 	addi	r2,r2,4
   1a8a4:	e0bf7e15 	stw	r2,-520(fp)
   1a8a8:	e0bf7f17 	ldw	r2,-516(fp)
   1a8ac:	10800104 	addi	r2,r2,4
   1a8b0:	e0bf7f15 	stw	r2,-516(fp)
   1a8b4:	e0bf8017 	ldw	r2,-512(fp)
   1a8b8:	10800210 	cmplti	r2,r2,8
   1a8bc:	103e411e 	bne	r2,zero,1a1c4 <jpeg_idct_13x13+0x58>
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 13 rows from work array, store into output array. */

	wsptr = workspace;
   1a8c0:	e0bf9404 	addi	r2,fp,-432
   1a8c4:	e0bf7f15 	stw	r2,-516(fp)
	for (ctr = 0; ctr < 13; ctr++) {
   1a8c8:	e03f8015 	stw	zero,-512(fp)
   1a8cc:	0001aa06 	br	1af78 <jpeg_idct_13x13+0xe0c>
		outptr = output_buf[ctr] + output_col;
   1a8d0:	e0bf8017 	ldw	r2,-512(fp)
   1a8d4:	1085883a 	add	r2,r2,r2
   1a8d8:	1085883a 	add	r2,r2,r2
   1a8dc:	e0ffff17 	ldw	r3,-4(fp)
   1a8e0:	1885883a 	add	r2,r3,r2
   1a8e4:	10c00017 	ldw	r3,0(r2)
   1a8e8:	e0800317 	ldw	r2,12(fp)
   1a8ec:	1885883a 	add	r2,r3,r2
   1a8f0:	e0bf9315 	stw	r2,-436(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1a8f4:	e0bf7f17 	ldw	r2,-516(fp)
   1a8f8:	10800017 	ldw	r2,0(r2)
   1a8fc:	10800404 	addi	r2,r2,16
   1a900:	e0bf8215 	stw	r2,-504(fp)
		z1 <<= CONST_BITS;
   1a904:	e0bf8217 	ldw	r2,-504(fp)
   1a908:	1004937a 	slli	r2,r2,13
   1a90c:	e0bf8215 	stw	r2,-504(fp)

		z2 = (INT32) wsptr[2];
   1a910:	e0bf7f17 	ldw	r2,-516(fp)
   1a914:	10800204 	addi	r2,r2,8
   1a918:	10800017 	ldw	r2,0(r2)
   1a91c:	e0bf8315 	stw	r2,-500(fp)
		z3 = (INT32) wsptr[4];
   1a920:	e0bf7f17 	ldw	r2,-516(fp)
   1a924:	10800404 	addi	r2,r2,16
   1a928:	10800017 	ldw	r2,0(r2)
   1a92c:	e0bf8415 	stw	r2,-496(fp)
		z4 = (INT32) wsptr[6];
   1a930:	e0bf7f17 	ldw	r2,-516(fp)
   1a934:	10800604 	addi	r2,r2,24
   1a938:	10800017 	ldw	r2,0(r2)
   1a93c:	e0bf8515 	stw	r2,-492(fp)

		tmp10 = z3 + z4;
   1a940:	e0ff8417 	ldw	r3,-496(fp)
   1a944:	e0bf8517 	ldw	r2,-492(fp)
   1a948:	1885883a 	add	r2,r3,r2
   1a94c:	e0bf8615 	stw	r2,-488(fp)
		tmp11 = z3 - z4;
   1a950:	e0ff8417 	ldw	r3,-496(fp)
   1a954:	e0bf8517 	ldw	r2,-492(fp)
   1a958:	1885c83a 	sub	r2,r3,r2
   1a95c:	e0bf8715 	stw	r2,-484(fp)

		tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
   1a960:	e13f8617 	ldw	r4,-488(fp)
   1a964:	01493e44 	movi	r5,9465
   1a968:	002c1540 	call	2c154 <__mulsi3>
   1a96c:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
   1a970:	e13f8717 	ldw	r4,-484(fp)
   1a974:	0140c644 	movi	r5,793
   1a978:	002c1540 	call	2c154 <__mulsi3>
   1a97c:	1007883a 	mov	r3,r2
   1a980:	e0bf8217 	ldw	r2,-504(fp)
   1a984:	1885883a 	add	r2,r3,r2
   1a988:	e0bf8915 	stw	r2,-476(fp)

		tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
   1a98c:	e13f8317 	ldw	r4,-500(fp)
   1a990:	014afc44 	movi	r5,11249
   1a994:	002c1540 	call	2c154 <__mulsi3>
   1a998:	1007883a 	mov	r3,r2
   1a99c:	e0bf8817 	ldw	r2,-480(fp)
   1a9a0:	1887883a 	add	r3,r3,r2
   1a9a4:	e0bf8917 	ldw	r2,-476(fp)
   1a9a8:	1885883a 	add	r2,r3,r2
   1a9ac:	e0bf8a15 	stw	r2,-472(fp)
		tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
   1a9b0:	e13f8317 	ldw	r4,-500(fp)
   1a9b4:	01440304 	movi	r5,4108
   1a9b8:	002c1540 	call	2c154 <__mulsi3>
   1a9bc:	1007883a 	mov	r3,r2
   1a9c0:	e0bf8817 	ldw	r2,-480(fp)
   1a9c4:	1887c83a 	sub	r3,r3,r2
   1a9c8:	e0bf8917 	ldw	r2,-476(fp)
   1a9cc:	1885883a 	add	r2,r3,r2
   1a9d0:	e0bf8b15 	stw	r2,-468(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
   1a9d4:	e13f8617 	ldw	r4,-488(fp)
   1a9d8:	01428804 	movi	r5,2592
   1a9dc:	002c1540 	call	2c154 <__mulsi3>
   1a9e0:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
   1a9e4:	e13f8717 	ldw	r4,-484(fp)
   1a9e8:	0143e544 	movi	r5,3989
   1a9ec:	002c1540 	call	2c154 <__mulsi3>
   1a9f0:	1007883a 	mov	r3,r2
   1a9f4:	e0bf8217 	ldw	r2,-504(fp)
   1a9f8:	1885883a 	add	r2,r3,r2
   1a9fc:	e0bf8915 	stw	r2,-476(fp)

		tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
   1aa00:	e13f8317 	ldw	r4,-500(fp)
   1aa04:	01487804 	movi	r5,8672
   1aa08:	002c1540 	call	2c154 <__mulsi3>
   1aa0c:	1007883a 	mov	r3,r2
   1aa10:	e0bf8817 	ldw	r2,-480(fp)
   1aa14:	1887c83a 	sub	r3,r3,r2
   1aa18:	e0bf8917 	ldw	r2,-476(fp)
   1aa1c:	1885883a 	add	r2,r3,r2
   1aa20:	e0bf8c15 	stw	r2,-464(fp)
		tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
   1aa24:	e13f8317 	ldw	r4,-500(fp)
   1aa28:	0175fb84 	movi	r5,-10258
   1aa2c:	002c1540 	call	2c154 <__mulsi3>
   1aa30:	1007883a 	mov	r3,r2
   1aa34:	e0bf8817 	ldw	r2,-480(fp)
   1aa38:	1887883a 	add	r3,r3,r2
   1aa3c:	e0bf8917 	ldw	r2,-476(fp)
   1aa40:	1885883a 	add	r2,r3,r2
   1aa44:	e0bf8d15 	stw	r2,-460(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
   1aa48:	e13f8617 	ldw	r4,-488(fp)
   1aa4c:	01437c84 	movi	r5,3570
   1aa50:	002c1540 	call	2c154 <__mulsi3>
   1aa54:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
   1aa58:	e13f8717 	ldw	r4,-484(fp)
   1aa5c:	01477f84 	movi	r5,7678
   1aa60:	002c1540 	call	2c154 <__mulsi3>
   1aa64:	1007883a 	mov	r3,r2
   1aa68:	e0bf8217 	ldw	r2,-504(fp)
   1aa6c:	1885c83a 	sub	r2,r3,r2
   1aa70:	e0bf8915 	stw	r2,-476(fp)

		tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
   1aa74:	e13f8317 	ldw	r4,-500(fp)
   1aa78:	017ea304 	movi	r5,-1396
   1aa7c:	002c1540 	call	2c154 <__mulsi3>
   1aa80:	1007883a 	mov	r3,r2
   1aa84:	e0bf8817 	ldw	r2,-480(fp)
   1aa88:	1887c83a 	sub	r3,r3,r2
   1aa8c:	e0bf8917 	ldw	r2,-476(fp)
   1aa90:	1885c83a 	sub	r2,r3,r2
   1aa94:	e0bf8e15 	stw	r2,-456(fp)
		tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
   1aa98:	e13f8317 	ldw	r4,-500(fp)
   1aa9c:	017992c4 	movi	r5,-6581
   1aaa0:	002c1540 	call	2c154 <__mulsi3>
   1aaa4:	1007883a 	mov	r3,r2
   1aaa8:	e0bf8817 	ldw	r2,-480(fp)
   1aaac:	1887883a 	add	r3,r3,r2
   1aab0:	e0bf8917 	ldw	r2,-476(fp)
   1aab4:	1885c83a 	sub	r2,r3,r2
   1aab8:	e0bf8f15 	stw	r2,-452(fp)

		tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
   1aabc:	e0ff8717 	ldw	r3,-484(fp)
   1aac0:	e0bf8317 	ldw	r2,-500(fp)
   1aac4:	1885c83a 	sub	r2,r3,r2
   1aac8:	1009883a 	mov	r4,r2
   1aacc:	014b5044 	movi	r5,11585
   1aad0:	002c1540 	call	2c154 <__mulsi3>
   1aad4:	1007883a 	mov	r3,r2
   1aad8:	e0bf8217 	ldw	r2,-504(fp)
   1aadc:	1885883a 	add	r2,r3,r2
   1aae0:	e0bf9015 	stw	r2,-448(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1aae4:	e0bf7f17 	ldw	r2,-516(fp)
   1aae8:	10800104 	addi	r2,r2,4
   1aaec:	10800017 	ldw	r2,0(r2)
   1aaf0:	e0bf8215 	stw	r2,-504(fp)
		z2 = (INT32) wsptr[3];
   1aaf4:	e0bf7f17 	ldw	r2,-516(fp)
   1aaf8:	10800304 	addi	r2,r2,12
   1aafc:	10800017 	ldw	r2,0(r2)
   1ab00:	e0bf8315 	stw	r2,-500(fp)
		z3 = (INT32) wsptr[5];
   1ab04:	e0bf7f17 	ldw	r2,-516(fp)
   1ab08:	10800504 	addi	r2,r2,20
   1ab0c:	10800017 	ldw	r2,0(r2)
   1ab10:	e0bf8415 	stw	r2,-496(fp)
		z4 = (INT32) wsptr[7];
   1ab14:	e0bf7f17 	ldw	r2,-516(fp)
   1ab18:	10800704 	addi	r2,r2,28
   1ab1c:	10800017 	ldw	r2,0(r2)
   1ab20:	e0bf8515 	stw	r2,-492(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
   1ab24:	e0ff8217 	ldw	r3,-504(fp)
   1ab28:	e0bf8317 	ldw	r2,-500(fp)
   1ab2c:	1885883a 	add	r2,r3,r2
   1ab30:	1009883a 	mov	r4,r2
   1ab34:	014a9404 	movi	r5,10832
   1ab38:	002c1540 	call	2c154 <__mulsi3>
   1ab3c:	e0bf8715 	stw	r2,-484(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
   1ab40:	e0ff8217 	ldw	r3,-504(fp)
   1ab44:	e0bf8417 	ldw	r2,-496(fp)
   1ab48:	1885883a 	add	r2,r3,r2
   1ab4c:	1009883a 	mov	r4,r2
   1ab50:	01494f84 	movi	r5,9534
   1ab54:	002c1540 	call	2c154 <__mulsi3>
   1ab58:	e0bf8815 	stw	r2,-480(fp)
		tmp15 = z1 + z4;
   1ab5c:	e0ff8217 	ldw	r3,-504(fp)
   1ab60:	e0bf8517 	ldw	r2,-492(fp)
   1ab64:	1885883a 	add	r2,r3,r2
   1ab68:	e0bf9115 	stw	r2,-444(fp)
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
   1ab6c:	e13f9117 	ldw	r4,-444(fp)
   1ab70:	01478084 	movi	r5,7682
   1ab74:	002c1540 	call	2c154 <__mulsi3>
   1ab78:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
   1ab7c:	e0ff8717 	ldw	r3,-484(fp)
   1ab80:	e0bf8817 	ldw	r2,-480(fp)
   1ab84:	1887883a 	add	r3,r3,r2
   1ab88:	e0bf8917 	ldw	r2,-476(fp)
   1ab8c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
   1ab90:	e13f8217 	ldw	r4,-504(fp)
   1ab94:	016fd6c4 	movi	r5,-16549
   1ab98:	002c1540 	call	2c154 <__mulsi3>

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
		tmp15 = z1 + z4;
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
		tmp10 = tmp11 + tmp12 + tmp13 -
   1ab9c:	8085883a 	add	r2,r16,r2
   1aba0:	e0bf8615 	stw	r2,-488(fp)
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
		tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
   1aba4:	e0ff8317 	ldw	r3,-500(fp)
   1aba8:	e0bf8417 	ldw	r2,-496(fp)
   1abac:	1885883a 	add	r2,r3,r2
   1abb0:	1009883a 	mov	r4,r2
   1abb4:	017d4ac4 	movi	r5,-2773
   1abb8:	002c1540 	call	2c154 <__mulsi3>
   1abbc:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
   1abc0:	e13f8317 	ldw	r4,-500(fp)
   1abc4:	0146b2c4 	movi	r5,6859
   1abc8:	002c1540 	call	2c154 <__mulsi3>
   1abcc:	1007883a 	mov	r3,r2
   1abd0:	e0bf9217 	ldw	r2,-440(fp)
   1abd4:	1885883a 	add	r2,r3,r2
   1abd8:	e0ff8717 	ldw	r3,-484(fp)
   1abdc:	1885883a 	add	r2,r3,r2
   1abe0:	e0bf8715 	stw	r2,-484(fp)
		tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
   1abe4:	e13f8417 	ldw	r4,-496(fp)
   1abe8:	01736c44 	movi	r5,-12879
   1abec:	002c1540 	call	2c154 <__mulsi3>
   1abf0:	1007883a 	mov	r3,r2
   1abf4:	e0bf9217 	ldw	r2,-440(fp)
   1abf8:	1885883a 	add	r2,r3,r2
   1abfc:	e0ff8817 	ldw	r3,-480(fp)
   1ac00:	1885883a 	add	r2,r3,r2
   1ac04:	e0bf8815 	stw	r2,-480(fp)
		tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
   1ac08:	e0ff8317 	ldw	r3,-500(fp)
   1ac0c:	e0bf8517 	ldw	r2,-492(fp)
   1ac10:	1885883a 	add	r2,r3,r2
   1ac14:	1009883a 	mov	r4,r2
   1ac18:	0176b084 	movi	r5,-9534
   1ac1c:	002c1540 	call	2c154 <__mulsi3>
   1ac20:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14;
   1ac24:	e0ff8717 	ldw	r3,-484(fp)
   1ac28:	e0bf9217 	ldw	r2,-440(fp)
   1ac2c:	1885883a 	add	r2,r3,r2
   1ac30:	e0bf8715 	stw	r2,-484(fp)
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
   1ac34:	e13f8517 	ldw	r4,-492(fp)
   1ac38:	0151a504 	movi	r5,18068
   1ac3c:	002c1540 	call	2c154 <__mulsi3>
   1ac40:	1007883a 	mov	r3,r2
   1ac44:	e0bf9217 	ldw	r2,-440(fp)
   1ac48:	1885883a 	add	r2,r3,r2
   1ac4c:	e0ff8917 	ldw	r3,-476(fp)
   1ac50:	1885883a 	add	r2,r3,r2
   1ac54:	e0bf8915 	stw	r2,-476(fp)
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
   1ac58:	e0ff8417 	ldw	r3,-496(fp)
   1ac5c:	e0bf8517 	ldw	r2,-492(fp)
   1ac60:	1885883a 	add	r2,r3,r2
   1ac64:	1009883a 	mov	r4,r2
   1ac68:	017abe04 	movi	r5,-5384
   1ac6c:	002c1540 	call	2c154 <__mulsi3>
   1ac70:	e0bf9215 	stw	r2,-440(fp)
		tmp12 += tmp14;
   1ac74:	e0ff8817 	ldw	r3,-480(fp)
   1ac78:	e0bf9217 	ldw	r2,-440(fp)
   1ac7c:	1885883a 	add	r2,r3,r2
   1ac80:	e0bf8815 	stw	r2,-480(fp)
		tmp13 += tmp14;
   1ac84:	e0ff8917 	ldw	r3,-476(fp)
   1ac88:	e0bf9217 	ldw	r2,-440(fp)
   1ac8c:	1885883a 	add	r2,r3,r2
   1ac90:	e0bf8915 	stw	r2,-476(fp)
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
   1ac94:	e13f9117 	ldw	r4,-444(fp)
   1ac98:	0142b544 	movi	r5,2773
   1ac9c:	002c1540 	call	2c154 <__mulsi3>
   1aca0:	e0bf9115 	stw	r2,-444(fp)
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
   1aca4:	e13f8217 	ldw	r4,-504(fp)
   1aca8:	01428cc4 	movi	r5,2611
   1acac:	002c1540 	call	2c154 <__mulsi3>
   1acb0:	1007883a 	mov	r3,r2
   1acb4:	e0bf9117 	ldw	r2,-444(fp)
   1acb8:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
   1acbc:	e13f8317 	ldw	r4,-500(fp)
   1acc0:	017c4584 	movi	r5,-3818
   1acc4:	002c1540 	call	2c154 <__mulsi3>
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
		tmp12 += tmp14;
		tmp13 += tmp14;
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
   1acc8:	8085883a 	add	r2,r16,r2
   1accc:	e0bf9215 	stw	r2,-440(fp)
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
   1acd0:	e0ff8417 	ldw	r3,-496(fp)
   1acd4:	e0bf8317 	ldw	r2,-500(fp)
   1acd8:	1885c83a 	sub	r2,r3,r2
   1acdc:	1009883a 	mov	r4,r2
   1ace0:	01478084 	movi	r5,7682
   1ace4:	002c1540 	call	2c154 <__mulsi3>
   1ace8:	e0bf8215 	stw	r2,-504(fp)
		tmp14 += z1;
   1acec:	e0ff9217 	ldw	r3,-440(fp)
   1acf0:	e0bf8217 	ldw	r2,-504(fp)
   1acf4:	1885883a 	add	r2,r3,r2
   1acf8:	e0bf9215 	stw	r2,-440(fp)
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
   1acfc:	e13f8417 	ldw	r4,-496(fp)
   1ad00:	01431384 	movi	r5,3150
   1ad04:	002c1540 	call	2c154 <__mulsi3>
   1ad08:	1007883a 	mov	r3,r2
   1ad0c:	e0bf8217 	ldw	r2,-504(fp)
   1ad10:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
   1ad14:	e13f8517 	ldw	r4,-492(fp)
   1ad18:	01720fc4 	movi	r5,-14273
   1ad1c:	002c1540 	call	2c154 <__mulsi3>
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
		tmp14 += z1;
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
   1ad20:	8085883a 	add	r2,r16,r2
   1ad24:	e0ff9117 	ldw	r3,-444(fp)
   1ad28:	1885883a 	add	r2,r3,r2
   1ad2c:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   1ad30:	e0ff8a17 	ldw	r3,-472(fp)
   1ad34:	e0bf8617 	ldw	r2,-488(fp)
   1ad38:	1885883a 	add	r2,r3,r2
   1ad3c:	1005d4ba 	srai	r2,r2,18
   1ad40:	1080ffcc 	andi	r2,r2,1023
   1ad44:	e0ff8117 	ldw	r3,-508(fp)
   1ad48:	1885883a 	add	r2,r3,r2
   1ad4c:	10c00003 	ldbu	r3,0(r2)
   1ad50:	e0bf9317 	ldw	r2,-436(fp)
   1ad54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   1ad58:	e0bf9317 	ldw	r2,-436(fp)
   1ad5c:	10800304 	addi	r2,r2,12
   1ad60:	e13f8a17 	ldw	r4,-472(fp)
   1ad64:	e0ff8617 	ldw	r3,-488(fp)
   1ad68:	20c7c83a 	sub	r3,r4,r3
   1ad6c:	1807d4ba 	srai	r3,r3,18
   1ad70:	18c0ffcc 	andi	r3,r3,1023
   1ad74:	e13f8117 	ldw	r4,-508(fp)
   1ad78:	20c7883a 	add	r3,r4,r3
   1ad7c:	18c00003 	ldbu	r3,0(r3)
   1ad80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   1ad84:	e0bf9317 	ldw	r2,-436(fp)
   1ad88:	10800044 	addi	r2,r2,1
   1ad8c:	e13f8c17 	ldw	r4,-464(fp)
   1ad90:	e0ff8717 	ldw	r3,-484(fp)
   1ad94:	20c7883a 	add	r3,r4,r3
   1ad98:	1807d4ba 	srai	r3,r3,18
   1ad9c:	18c0ffcc 	andi	r3,r3,1023
   1ada0:	e13f8117 	ldw	r4,-508(fp)
   1ada4:	20c7883a 	add	r3,r4,r3
   1ada8:	18c00003 	ldbu	r3,0(r3)
   1adac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   1adb0:	e0bf9317 	ldw	r2,-436(fp)
   1adb4:	108002c4 	addi	r2,r2,11
   1adb8:	e13f8c17 	ldw	r4,-464(fp)
   1adbc:	e0ff8717 	ldw	r3,-484(fp)
   1adc0:	20c7c83a 	sub	r3,r4,r3
   1adc4:	1807d4ba 	srai	r3,r3,18
   1adc8:	18c0ffcc 	andi	r3,r3,1023
   1adcc:	e13f8117 	ldw	r4,-508(fp)
   1add0:	20c7883a 	add	r3,r4,r3
   1add4:	18c00003 	ldbu	r3,0(r3)
   1add8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   1addc:	e0bf9317 	ldw	r2,-436(fp)
   1ade0:	10800084 	addi	r2,r2,2
   1ade4:	e13f8b17 	ldw	r4,-468(fp)
   1ade8:	e0ff8817 	ldw	r3,-480(fp)
   1adec:	20c7883a 	add	r3,r4,r3
   1adf0:	1807d4ba 	srai	r3,r3,18
   1adf4:	18c0ffcc 	andi	r3,r3,1023
   1adf8:	e13f8117 	ldw	r4,-508(fp)
   1adfc:	20c7883a 	add	r3,r4,r3
   1ae00:	18c00003 	ldbu	r3,0(r3)
   1ae04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   1ae08:	e0bf9317 	ldw	r2,-436(fp)
   1ae0c:	10800284 	addi	r2,r2,10
   1ae10:	e13f8b17 	ldw	r4,-468(fp)
   1ae14:	e0ff8817 	ldw	r3,-480(fp)
   1ae18:	20c7c83a 	sub	r3,r4,r3
   1ae1c:	1807d4ba 	srai	r3,r3,18
   1ae20:	18c0ffcc 	andi	r3,r3,1023
   1ae24:	e13f8117 	ldw	r4,-508(fp)
   1ae28:	20c7883a 	add	r3,r4,r3
   1ae2c:	18c00003 	ldbu	r3,0(r3)
   1ae30:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1ae34:	e0bf9317 	ldw	r2,-436(fp)
   1ae38:	108000c4 	addi	r2,r2,3
   1ae3c:	e13f8e17 	ldw	r4,-456(fp)
   1ae40:	e0ff8917 	ldw	r3,-476(fp)
   1ae44:	20c7883a 	add	r3,r4,r3
   1ae48:	1807d4ba 	srai	r3,r3,18
   1ae4c:	18c0ffcc 	andi	r3,r3,1023
   1ae50:	e13f8117 	ldw	r4,-508(fp)
   1ae54:	20c7883a 	add	r3,r4,r3
   1ae58:	18c00003 	ldbu	r3,0(r3)
   1ae5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1ae60:	e0bf9317 	ldw	r2,-436(fp)
   1ae64:	10800244 	addi	r2,r2,9
   1ae68:	e13f8e17 	ldw	r4,-456(fp)
   1ae6c:	e0ff8917 	ldw	r3,-476(fp)
   1ae70:	20c7c83a 	sub	r3,r4,r3
   1ae74:	1807d4ba 	srai	r3,r3,18
   1ae78:	18c0ffcc 	andi	r3,r3,1023
   1ae7c:	e13f8117 	ldw	r4,-508(fp)
   1ae80:	20c7883a 	add	r3,r4,r3
   1ae84:	18c00003 	ldbu	r3,0(r3)
   1ae88:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1ae8c:	e0bf9317 	ldw	r2,-436(fp)
   1ae90:	10800104 	addi	r2,r2,4
   1ae94:	e13f8f17 	ldw	r4,-452(fp)
   1ae98:	e0ff9217 	ldw	r3,-440(fp)
   1ae9c:	20c7883a 	add	r3,r4,r3
   1aea0:	1807d4ba 	srai	r3,r3,18
   1aea4:	18c0ffcc 	andi	r3,r3,1023
   1aea8:	e13f8117 	ldw	r4,-508(fp)
   1aeac:	20c7883a 	add	r3,r4,r3
   1aeb0:	18c00003 	ldbu	r3,0(r3)
   1aeb4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1aeb8:	e0bf9317 	ldw	r2,-436(fp)
   1aebc:	10800204 	addi	r2,r2,8
   1aec0:	e13f8f17 	ldw	r4,-452(fp)
   1aec4:	e0ff9217 	ldw	r3,-440(fp)
   1aec8:	20c7c83a 	sub	r3,r4,r3
   1aecc:	1807d4ba 	srai	r3,r3,18
   1aed0:	18c0ffcc 	andi	r3,r3,1023
   1aed4:	e13f8117 	ldw	r4,-508(fp)
   1aed8:	20c7883a 	add	r3,r4,r3
   1aedc:	18c00003 	ldbu	r3,0(r3)
   1aee0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1aee4:	e0bf9317 	ldw	r2,-436(fp)
   1aee8:	10800144 	addi	r2,r2,5
   1aeec:	e13f8d17 	ldw	r4,-460(fp)
   1aef0:	e0ff9117 	ldw	r3,-444(fp)
   1aef4:	20c7883a 	add	r3,r4,r3
   1aef8:	1807d4ba 	srai	r3,r3,18
   1aefc:	18c0ffcc 	andi	r3,r3,1023
   1af00:	e13f8117 	ldw	r4,-508(fp)
   1af04:	20c7883a 	add	r3,r4,r3
   1af08:	18c00003 	ldbu	r3,0(r3)
   1af0c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1af10:	e0bf9317 	ldw	r2,-436(fp)
   1af14:	108001c4 	addi	r2,r2,7
   1af18:	e13f8d17 	ldw	r4,-460(fp)
   1af1c:	e0ff9117 	ldw	r3,-444(fp)
   1af20:	20c7c83a 	sub	r3,r4,r3
   1af24:	1807d4ba 	srai	r3,r3,18
   1af28:	18c0ffcc 	andi	r3,r3,1023
   1af2c:	e13f8117 	ldw	r4,-508(fp)
   1af30:	20c7883a 	add	r3,r4,r3
   1af34:	18c00003 	ldbu	r3,0(r3)
   1af38:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
   1af3c:	e0bf9317 	ldw	r2,-436(fp)
   1af40:	10800184 	addi	r2,r2,6
   1af44:	e0ff9017 	ldw	r3,-448(fp)
   1af48:	1807d4ba 	srai	r3,r3,18
   1af4c:	18c0ffcc 	andi	r3,r3,1023
   1af50:	e13f8117 	ldw	r4,-508(fp)
   1af54:	20c7883a 	add	r3,r4,r3
   1af58:	18c00003 	ldbu	r3,0(r3)
   1af5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1af60:	e0bf7f17 	ldw	r2,-516(fp)
   1af64:	10800804 	addi	r2,r2,32
   1af68:	e0bf7f15 	stw	r2,-516(fp)
	}

	/* Pass 2: process 13 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 13; ctr++) {
   1af6c:	e0bf8017 	ldw	r2,-512(fp)
   1af70:	10800044 	addi	r2,r2,1
   1af74:	e0bf8015 	stw	r2,-512(fp)
   1af78:	e0bf8017 	ldw	r2,-512(fp)
   1af7c:	10800350 	cmplti	r2,r2,13
   1af80:	103e531e 	bne	r2,zero,1a8d0 <jpeg_idct_13x13+0x764>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1af84:	e037883a 	mov	sp,fp
   1af88:	dfc00217 	ldw	ra,8(sp)
   1af8c:	df000117 	ldw	fp,4(sp)
   1af90:	dc000017 	ldw	r16,0(sp)
   1af94:	dec00304 	addi	sp,sp,12
   1af98:	f800283a 	ret

0001af9c <jpeg_idct_14x14>:

GLOBAL(void)
	jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1af9c:	deff7104 	addi	sp,sp,-572
   1afa0:	dfc08e15 	stw	ra,568(sp)
   1afa4:	df008d15 	stw	fp,564(sp)
   1afa8:	dc008c15 	stw	r16,560(sp)
   1afac:	df008c04 	addi	fp,sp,560
   1afb0:	e13ffc15 	stw	r4,-16(fp)
   1afb4:	e17ffd15 	stw	r5,-12(fp)
   1afb8:	e1bffe15 	stw	r6,-8(fp)
   1afbc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1afc0:	e0bffc17 	ldw	r2,-16(fp)
   1afc4:	10804917 	ldw	r2,292(r2)
   1afc8:	10802004 	addi	r2,r2,128
   1afcc:	e0bf7815 	stw	r2,-544(fp)
	int workspace[8*14];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   1afd0:	e0bffe17 	ldw	r2,-8(fp)
   1afd4:	e0bf7415 	stw	r2,-560(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1afd8:	e0bffd17 	ldw	r2,-12(fp)
   1afdc:	10801517 	ldw	r2,84(r2)
   1afe0:	e0bf7515 	stw	r2,-556(fp)
	wsptr = workspace;
   1afe4:	e0bf8c04 	addi	r2,fp,-464
   1afe8:	e0bf7615 	stw	r2,-552(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1afec:	e03f7715 	stw	zero,-548(fp)
   1aff0:	0001a506 	br	1b688 <jpeg_idct_14x14+0x6ec>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1aff4:	e0bf7417 	ldw	r2,-560(fp)
   1aff8:	1080000b 	ldhu	r2,0(r2)
   1affc:	10ffffcc 	andi	r3,r2,65535
   1b000:	18e0001c 	xori	r3,r3,32768
   1b004:	18e00004 	addi	r3,r3,-32768
   1b008:	e0bf7517 	ldw	r2,-556(fp)
   1b00c:	10800017 	ldw	r2,0(r2)
   1b010:	1809883a 	mov	r4,r3
   1b014:	100b883a 	mov	r5,r2
   1b018:	002c1540 	call	2c154 <__mulsi3>
   1b01c:	e0bf7915 	stw	r2,-540(fp)
		z1 <<= CONST_BITS;
   1b020:	e0bf7917 	ldw	r2,-540(fp)
   1b024:	1004937a 	slli	r2,r2,13
   1b028:	e0bf7915 	stw	r2,-540(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   1b02c:	e0bf7917 	ldw	r2,-540(fp)
   1b030:	10810004 	addi	r2,r2,1024
   1b034:	e0bf7915 	stw	r2,-540(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1b038:	e0bf7417 	ldw	r2,-560(fp)
   1b03c:	10801004 	addi	r2,r2,64
   1b040:	1080000b 	ldhu	r2,0(r2)
   1b044:	10ffffcc 	andi	r3,r2,65535
   1b048:	18e0001c 	xori	r3,r3,32768
   1b04c:	18e00004 	addi	r3,r3,-32768
   1b050:	e0bf7517 	ldw	r2,-556(fp)
   1b054:	10802004 	addi	r2,r2,128
   1b058:	10800017 	ldw	r2,0(r2)
   1b05c:	1809883a 	mov	r4,r3
   1b060:	100b883a 	mov	r5,r2
   1b064:	002c1540 	call	2c154 <__mulsi3>
   1b068:	e0bf7a15 	stw	r2,-536(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
   1b06c:	e13f7a17 	ldw	r4,-536(fp)
   1b070:	014a3184 	movi	r5,10438
   1b074:	002c1540 	call	2c154 <__mulsi3>
   1b078:	e0bf7b15 	stw	r2,-532(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
   1b07c:	e13f7a17 	ldw	r4,-536(fp)
   1b080:	01428484 	movi	r5,2578
   1b084:	002c1540 	call	2c154 <__mulsi3>
   1b088:	e0bf7c15 	stw	r2,-528(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
   1b08c:	e13f7a17 	ldw	r4,-536(fp)
   1b090:	01470dc4 	movi	r5,7223
   1b094:	002c1540 	call	2c154 <__mulsi3>
   1b098:	e0bf7a15 	stw	r2,-536(fp)

		tmp10 = z1 + z2;
   1b09c:	e0ff7917 	ldw	r3,-540(fp)
   1b0a0:	e0bf7b17 	ldw	r2,-532(fp)
   1b0a4:	1885883a 	add	r2,r3,r2
   1b0a8:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 = z1 + z3;
   1b0ac:	e0ff7917 	ldw	r3,-540(fp)
   1b0b0:	e0bf7c17 	ldw	r2,-528(fp)
   1b0b4:	1885883a 	add	r2,r3,r2
   1b0b8:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = z1 - z4;
   1b0bc:	e0ff7917 	ldw	r3,-540(fp)
   1b0c0:	e0bf7a17 	ldw	r2,-536(fp)
   1b0c4:	1885c83a 	sub	r2,r3,r2
   1b0c8:	e0bf7f15 	stw	r2,-516(fp)

		tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
   1b0cc:	e0ff7b17 	ldw	r3,-532(fp)
   1b0d0:	e0bf7c17 	ldw	r2,-528(fp)
   1b0d4:	1887883a 	add	r3,r3,r2
   1b0d8:	e0bf7a17 	ldw	r2,-536(fp)
   1b0dc:	1885c83a 	sub	r2,r3,r2
   1b0e0:	1085883a 	add	r2,r2,r2
   1b0e4:	e0ff7917 	ldw	r3,-540(fp)
   1b0e8:	1885c83a 	sub	r2,r3,r2
   1b0ec:	1005d2fa 	srai	r2,r2,11
   1b0f0:	e0bf8015 	stw	r2,-512(fp)
			CONST_BITS-PASS1_BITS);

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1b0f4:	e0bf7417 	ldw	r2,-560(fp)
   1b0f8:	10800804 	addi	r2,r2,32
   1b0fc:	1080000b 	ldhu	r2,0(r2)
   1b100:	10ffffcc 	andi	r3,r2,65535
   1b104:	18e0001c 	xori	r3,r3,32768
   1b108:	18e00004 	addi	r3,r3,-32768
   1b10c:	e0bf7517 	ldw	r2,-556(fp)
   1b110:	10801004 	addi	r2,r2,64
   1b114:	10800017 	ldw	r2,0(r2)
   1b118:	1809883a 	mov	r4,r3
   1b11c:	100b883a 	mov	r5,r2
   1b120:	002c1540 	call	2c154 <__mulsi3>
   1b124:	e0bf7915 	stw	r2,-540(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1b128:	e0bf7417 	ldw	r2,-560(fp)
   1b12c:	10801804 	addi	r2,r2,96
   1b130:	1080000b 	ldhu	r2,0(r2)
   1b134:	10ffffcc 	andi	r3,r2,65535
   1b138:	18e0001c 	xori	r3,r3,32768
   1b13c:	18e00004 	addi	r3,r3,-32768
   1b140:	e0bf7517 	ldw	r2,-556(fp)
   1b144:	10803004 	addi	r2,r2,192
   1b148:	10800017 	ldw	r2,0(r2)
   1b14c:	1809883a 	mov	r4,r3
   1b150:	100b883a 	mov	r5,r2
   1b154:	002c1540 	call	2c154 <__mulsi3>
   1b158:	e0bf7b15 	stw	r2,-532(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
   1b15c:	e0ff7917 	ldw	r3,-540(fp)
   1b160:	e0bf7b17 	ldw	r2,-532(fp)
   1b164:	1885883a 	add	r2,r3,r2
   1b168:	1009883a 	mov	r4,r2
   1b16c:	0148d884 	movi	r5,9058
   1b170:	002c1540 	call	2c154 <__mulsi3>
   1b174:	e0bf7c15 	stw	r2,-528(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
   1b178:	e13f7917 	ldw	r4,-540(fp)
   1b17c:	01422f44 	movi	r5,2237
   1b180:	002c1540 	call	2c154 <__mulsi3>
   1b184:	1007883a 	mov	r3,r2
   1b188:	e0bf7c17 	ldw	r2,-528(fp)
   1b18c:	1885883a 	add	r2,r3,r2
   1b190:	e0bf8115 	stw	r2,-508(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
   1b194:	e13f7b17 	ldw	r4,-532(fp)
   1b198:	01723f04 	movi	r5,-14084
   1b19c:	002c1540 	call	2c154 <__mulsi3>
   1b1a0:	1007883a 	mov	r3,r2
   1b1a4:	e0bf7c17 	ldw	r2,-528(fp)
   1b1a8:	1885883a 	add	r2,r3,r2
   1b1ac:	e0bf8215 	stw	r2,-504(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1b1b0:	e13f7917 	ldw	r4,-540(fp)
   1b1b4:	0144e8c4 	movi	r5,5027
   1b1b8:	002c1540 	call	2c154 <__mulsi3>
   1b1bc:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
   1b1c0:	e13f7b17 	ldw	r4,-532(fp)
   1b1c4:	0174f844 	movi	r5,-11295
   1b1c8:	002c1540 	call	2c154 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1b1cc:	8085883a 	add	r2,r16,r2
   1b1d0:	e0bf8315 	stw	r2,-500(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
   1b1d4:	e0ff7d17 	ldw	r3,-524(fp)
   1b1d8:	e0bf8117 	ldw	r2,-508(fp)
   1b1dc:	1885883a 	add	r2,r3,r2
   1b1e0:	e0bf8415 	stw	r2,-496(fp)
		tmp26 = tmp10 - tmp13;
   1b1e4:	e0ff7d17 	ldw	r3,-524(fp)
   1b1e8:	e0bf8117 	ldw	r2,-508(fp)
   1b1ec:	1885c83a 	sub	r2,r3,r2
   1b1f0:	e0bf8515 	stw	r2,-492(fp)
		tmp21 = tmp11 + tmp14;
   1b1f4:	e0ff7e17 	ldw	r3,-520(fp)
   1b1f8:	e0bf8217 	ldw	r2,-504(fp)
   1b1fc:	1885883a 	add	r2,r3,r2
   1b200:	e0bf8615 	stw	r2,-488(fp)
		tmp25 = tmp11 - tmp14;
   1b204:	e0ff7e17 	ldw	r3,-520(fp)
   1b208:	e0bf8217 	ldw	r2,-504(fp)
   1b20c:	1885c83a 	sub	r2,r3,r2
   1b210:	e0bf8715 	stw	r2,-484(fp)
		tmp22 = tmp12 + tmp15;
   1b214:	e0ff7f17 	ldw	r3,-516(fp)
   1b218:	e0bf8317 	ldw	r2,-500(fp)
   1b21c:	1885883a 	add	r2,r3,r2
   1b220:	e0bf8815 	stw	r2,-480(fp)
		tmp24 = tmp12 - tmp15;
   1b224:	e0ff7f17 	ldw	r3,-516(fp)
   1b228:	e0bf8317 	ldw	r2,-500(fp)
   1b22c:	1885c83a 	sub	r2,r3,r2
   1b230:	e0bf8915 	stw	r2,-476(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1b234:	e0bf7417 	ldw	r2,-560(fp)
   1b238:	10800404 	addi	r2,r2,16
   1b23c:	1080000b 	ldhu	r2,0(r2)
   1b240:	10ffffcc 	andi	r3,r2,65535
   1b244:	18e0001c 	xori	r3,r3,32768
   1b248:	18e00004 	addi	r3,r3,-32768
   1b24c:	e0bf7517 	ldw	r2,-556(fp)
   1b250:	10800804 	addi	r2,r2,32
   1b254:	10800017 	ldw	r2,0(r2)
   1b258:	1809883a 	mov	r4,r3
   1b25c:	100b883a 	mov	r5,r2
   1b260:	002c1540 	call	2c154 <__mulsi3>
   1b264:	e0bf7915 	stw	r2,-540(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1b268:	e0bf7417 	ldw	r2,-560(fp)
   1b26c:	10800c04 	addi	r2,r2,48
   1b270:	1080000b 	ldhu	r2,0(r2)
   1b274:	10ffffcc 	andi	r3,r2,65535
   1b278:	18e0001c 	xori	r3,r3,32768
   1b27c:	18e00004 	addi	r3,r3,-32768
   1b280:	e0bf7517 	ldw	r2,-556(fp)
   1b284:	10801804 	addi	r2,r2,96
   1b288:	10800017 	ldw	r2,0(r2)
   1b28c:	1809883a 	mov	r4,r3
   1b290:	100b883a 	mov	r5,r2
   1b294:	002c1540 	call	2c154 <__mulsi3>
   1b298:	e0bf7b15 	stw	r2,-532(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1b29c:	e0bf7417 	ldw	r2,-560(fp)
   1b2a0:	10801404 	addi	r2,r2,80
   1b2a4:	1080000b 	ldhu	r2,0(r2)
   1b2a8:	10ffffcc 	andi	r3,r2,65535
   1b2ac:	18e0001c 	xori	r3,r3,32768
   1b2b0:	18e00004 	addi	r3,r3,-32768
   1b2b4:	e0bf7517 	ldw	r2,-556(fp)
   1b2b8:	10802804 	addi	r2,r2,160
   1b2bc:	10800017 	ldw	r2,0(r2)
   1b2c0:	1809883a 	mov	r4,r3
   1b2c4:	100b883a 	mov	r5,r2
   1b2c8:	002c1540 	call	2c154 <__mulsi3>
   1b2cc:	e0bf7c15 	stw	r2,-528(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1b2d0:	e0bf7417 	ldw	r2,-560(fp)
   1b2d4:	10801c04 	addi	r2,r2,112
   1b2d8:	1080000b 	ldhu	r2,0(r2)
   1b2dc:	10ffffcc 	andi	r3,r2,65535
   1b2e0:	18e0001c 	xori	r3,r3,32768
   1b2e4:	18e00004 	addi	r3,r3,-32768
   1b2e8:	e0bf7517 	ldw	r2,-556(fp)
   1b2ec:	10803804 	addi	r2,r2,224
   1b2f0:	10800017 	ldw	r2,0(r2)
   1b2f4:	1809883a 	mov	r4,r3
   1b2f8:	100b883a 	mov	r5,r2
   1b2fc:	002c1540 	call	2c154 <__mulsi3>
   1b300:	e0bf7a15 	stw	r2,-536(fp)
		tmp13 = z4 << CONST_BITS;
   1b304:	e0bf7a17 	ldw	r2,-536(fp)
   1b308:	1004937a 	slli	r2,r2,13
   1b30c:	e0bf8115 	stw	r2,-508(fp)

		tmp14 = z1 + z3;
   1b310:	e0ff7917 	ldw	r3,-540(fp)
   1b314:	e0bf7c17 	ldw	r2,-528(fp)
   1b318:	1885883a 	add	r2,r3,r2
   1b31c:	e0bf8215 	stw	r2,-504(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
   1b320:	e0ff7917 	ldw	r3,-540(fp)
   1b324:	e0bf7b17 	ldw	r2,-532(fp)
   1b328:	1885883a 	add	r2,r3,r2
   1b32c:	1009883a 	mov	r4,r2
   1b330:	014aadc4 	movi	r5,10935
   1b334:	002c1540 	call	2c154 <__mulsi3>
   1b338:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
   1b33c:	e13f8217 	ldw	r4,-504(fp)
   1b340:	01499484 	movi	r5,9810
   1b344:	002c1540 	call	2c154 <__mulsi3>
   1b348:	e0bf7f15 	stw	r2,-516(fp)
		tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
   1b34c:	e0ff7e17 	ldw	r3,-520(fp)
   1b350:	e0bf7f17 	ldw	r2,-516(fp)
   1b354:	1887883a 	add	r3,r3,r2
   1b358:	e0bf8117 	ldw	r2,-508(fp)
   1b35c:	18a1883a 	add	r16,r3,r2
   1b360:	e13f7917 	ldw	r4,-540(fp)
   1b364:	0176fc04 	movi	r5,-9232
   1b368:	002c1540 	call	2c154 <__mulsi3>
   1b36c:	8085883a 	add	r2,r16,r2
   1b370:	e0bf7d15 	stw	r2,-524(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
   1b374:	e13f8217 	ldw	r4,-504(fp)
   1b378:	01460504 	movi	r5,6164
   1b37c:	002c1540 	call	2c154 <__mulsi3>
   1b380:	e0bf8215 	stw	r2,-504(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
   1b384:	e13f7917 	ldw	r4,-540(fp)
   1b388:	017782c4 	movi	r5,-8693
   1b38c:	002c1540 	call	2c154 <__mulsi3>
   1b390:	1007883a 	mov	r3,r2
   1b394:	e0bf8217 	ldw	r2,-504(fp)
   1b398:	1885883a 	add	r2,r3,r2
   1b39c:	e0bf8a15 	stw	r2,-472(fp)
		z1    -= z2;
   1b3a0:	e0ff7917 	ldw	r3,-540(fp)
   1b3a4:	e0bf7b17 	ldw	r2,-532(fp)
   1b3a8:	1885c83a 	sub	r2,r3,r2
   1b3ac:	e0bf7915 	stw	r2,-540(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
   1b3b0:	e13f7917 	ldw	r4,-540(fp)
   1b3b4:	0143bc84 	movi	r5,3826
   1b3b8:	002c1540 	call	2c154 <__mulsi3>
   1b3bc:	1007883a 	mov	r3,r2
   1b3c0:	e0bf8117 	ldw	r2,-508(fp)
   1b3c4:	1885c83a 	sub	r2,r3,r2
   1b3c8:	e0bf8315 	stw	r2,-500(fp)
		tmp16 += tmp15;
   1b3cc:	e0ff8a17 	ldw	r3,-472(fp)
   1b3d0:	e0bf8317 	ldw	r2,-500(fp)
   1b3d4:	1885883a 	add	r2,r3,r2
   1b3d8:	e0bf8a15 	stw	r2,-472(fp)
		z1    += z4;
   1b3dc:	e0ff7917 	ldw	r3,-540(fp)
   1b3e0:	e0bf7a17 	ldw	r2,-536(fp)
   1b3e4:	1885883a 	add	r2,r3,r2
   1b3e8:	e0bf7915 	stw	r2,-540(fp)
		z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
   1b3ec:	e0ff7b17 	ldw	r3,-532(fp)
   1b3f0:	e0bf7c17 	ldw	r2,-528(fp)
   1b3f4:	1885883a 	add	r2,r3,r2
   1b3f8:	1009883a 	mov	r4,r2
   1b3fc:	017ebbc4 	movi	r5,-1297
   1b400:	002c1540 	call	2c154 <__mulsi3>
   1b404:	1007883a 	mov	r3,r2
   1b408:	e0bf8117 	ldw	r2,-508(fp)
   1b40c:	1885c83a 	sub	r2,r3,r2
   1b410:	e0bf7a15 	stw	r2,-536(fp)
		tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
   1b414:	e13f7b17 	ldw	r4,-532(fp)
   1b418:	017c9b84 	movi	r5,-3474
   1b41c:	002c1540 	call	2c154 <__mulsi3>
   1b420:	1007883a 	mov	r3,r2
   1b424:	e0bf7a17 	ldw	r2,-536(fp)
   1b428:	1885883a 	add	r2,r3,r2
   1b42c:	e0ff7e17 	ldw	r3,-520(fp)
   1b430:	1885883a 	add	r2,r3,r2
   1b434:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
   1b438:	e13f7c17 	ldw	r4,-528(fp)
   1b43c:	016d0244 	movi	r5,-19447
   1b440:	002c1540 	call	2c154 <__mulsi3>
   1b444:	1007883a 	mov	r3,r2
   1b448:	e0bf7a17 	ldw	r2,-536(fp)
   1b44c:	1885883a 	add	r2,r3,r2
   1b450:	e0ff7f17 	ldw	r3,-516(fp)
   1b454:	1885883a 	add	r2,r3,r2
   1b458:	e0bf7f15 	stw	r2,-516(fp)
		z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
   1b45c:	e0ff7c17 	ldw	r3,-528(fp)
   1b460:	e0bf7b17 	ldw	r2,-532(fp)
   1b464:	1885c83a 	sub	r2,r3,r2
   1b468:	1009883a 	mov	r4,r2
   1b46c:	014b3e04 	movi	r5,11512
   1b470:	002c1540 	call	2c154 <__mulsi3>
   1b474:	e0bf7a15 	stw	r2,-536(fp)
		tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
   1b478:	e0ff7a17 	ldw	r3,-536(fp)
   1b47c:	e0bf8117 	ldw	r2,-508(fp)
   1b480:	18a1883a 	add	r16,r3,r2
   1b484:	e13f7c17 	ldw	r4,-528(fp)
   1b488:	01727984 	movi	r5,-13850
   1b48c:	002c1540 	call	2c154 <__mulsi3>
   1b490:	8085883a 	add	r2,r16,r2
   1b494:	e0ff8217 	ldw	r3,-504(fp)
   1b498:	1885883a 	add	r2,r3,r2
   1b49c:	e0bf8215 	stw	r2,-504(fp)
		tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
   1b4a0:	e13f7b17 	ldw	r4,-532(fp)
   1b4a4:	01456644 	movi	r5,5529
   1b4a8:	002c1540 	call	2c154 <__mulsi3>
   1b4ac:	1007883a 	mov	r3,r2
   1b4b0:	e0bf7a17 	ldw	r2,-536(fp)
   1b4b4:	1885883a 	add	r2,r3,r2
   1b4b8:	e0ff8317 	ldw	r3,-500(fp)
   1b4bc:	1885883a 	add	r2,r3,r2
   1b4c0:	e0bf8315 	stw	r2,-500(fp)

		tmp13 = (z1 - z3) << PASS1_BITS;
   1b4c4:	e0ff7917 	ldw	r3,-540(fp)
   1b4c8:	e0bf7c17 	ldw	r2,-528(fp)
   1b4cc:	1885c83a 	sub	r2,r3,r2
   1b4d0:	1085883a 	add	r2,r2,r2
   1b4d4:	1085883a 	add	r2,r2,r2
   1b4d8:	e0bf8115 	stw	r2,-508(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1b4dc:	e0ff8417 	ldw	r3,-496(fp)
   1b4e0:	e0bf7d17 	ldw	r2,-524(fp)
   1b4e4:	1885883a 	add	r2,r3,r2
   1b4e8:	1007d2fa 	srai	r3,r2,11
   1b4ec:	e0bf7617 	ldw	r2,-552(fp)
   1b4f0:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   1b4f4:	e0bf7617 	ldw	r2,-552(fp)
   1b4f8:	10806804 	addi	r2,r2,416
   1b4fc:	e13f8417 	ldw	r4,-496(fp)
   1b500:	e0ff7d17 	ldw	r3,-524(fp)
   1b504:	20c7c83a 	sub	r3,r4,r3
   1b508:	1807d2fa 	srai	r3,r3,11
   1b50c:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   1b510:	e0bf7617 	ldw	r2,-552(fp)
   1b514:	10800804 	addi	r2,r2,32
   1b518:	e13f8617 	ldw	r4,-488(fp)
   1b51c:	e0ff7e17 	ldw	r3,-520(fp)
   1b520:	20c7883a 	add	r3,r4,r3
   1b524:	1807d2fa 	srai	r3,r3,11
   1b528:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   1b52c:	e0bf7617 	ldw	r2,-552(fp)
   1b530:	10806004 	addi	r2,r2,384
   1b534:	e13f8617 	ldw	r4,-488(fp)
   1b538:	e0ff7e17 	ldw	r3,-520(fp)
   1b53c:	20c7c83a 	sub	r3,r4,r3
   1b540:	1807d2fa 	srai	r3,r3,11
   1b544:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   1b548:	e0bf7617 	ldw	r2,-552(fp)
   1b54c:	10801004 	addi	r2,r2,64
   1b550:	e13f8817 	ldw	r4,-480(fp)
   1b554:	e0ff7f17 	ldw	r3,-516(fp)
   1b558:	20c7883a 	add	r3,r4,r3
   1b55c:	1807d2fa 	srai	r3,r3,11
   1b560:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   1b564:	e0bf7617 	ldw	r2,-552(fp)
   1b568:	10805804 	addi	r2,r2,352
   1b56c:	e13f8817 	ldw	r4,-480(fp)
   1b570:	e0ff7f17 	ldw	r3,-516(fp)
   1b574:	20c7c83a 	sub	r3,r4,r3
   1b578:	1807d2fa 	srai	r3,r3,11
   1b57c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) (tmp23 + tmp13);
   1b580:	e0bf7617 	ldw	r2,-552(fp)
   1b584:	10801804 	addi	r2,r2,96
   1b588:	e13f8017 	ldw	r4,-512(fp)
   1b58c:	e0ff8117 	ldw	r3,-508(fp)
   1b590:	20c7883a 	add	r3,r4,r3
   1b594:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) (tmp23 - tmp13);
   1b598:	e0bf7617 	ldw	r2,-552(fp)
   1b59c:	10805004 	addi	r2,r2,320
   1b5a0:	e13f8017 	ldw	r4,-512(fp)
   1b5a4:	e0ff8117 	ldw	r3,-508(fp)
   1b5a8:	20c7c83a 	sub	r3,r4,r3
   1b5ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   1b5b0:	e0bf7617 	ldw	r2,-552(fp)
   1b5b4:	10802004 	addi	r2,r2,128
   1b5b8:	e13f8917 	ldw	r4,-476(fp)
   1b5bc:	e0ff8217 	ldw	r3,-504(fp)
   1b5c0:	20c7883a 	add	r3,r4,r3
   1b5c4:	1807d2fa 	srai	r3,r3,11
   1b5c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   1b5cc:	e0bf7617 	ldw	r2,-552(fp)
   1b5d0:	10804804 	addi	r2,r2,288
   1b5d4:	e13f8917 	ldw	r4,-476(fp)
   1b5d8:	e0ff8217 	ldw	r3,-504(fp)
   1b5dc:	20c7c83a 	sub	r3,r4,r3
   1b5e0:	1807d2fa 	srai	r3,r3,11
   1b5e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   1b5e8:	e0bf7617 	ldw	r2,-552(fp)
   1b5ec:	10802804 	addi	r2,r2,160
   1b5f0:	e13f8717 	ldw	r4,-484(fp)
   1b5f4:	e0ff8317 	ldw	r3,-500(fp)
   1b5f8:	20c7883a 	add	r3,r4,r3
   1b5fc:	1807d2fa 	srai	r3,r3,11
   1b600:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   1b604:	e0bf7617 	ldw	r2,-552(fp)
   1b608:	10804004 	addi	r2,r2,256
   1b60c:	e13f8717 	ldw	r4,-484(fp)
   1b610:	e0ff8317 	ldw	r3,-500(fp)
   1b614:	20c7c83a 	sub	r3,r4,r3
   1b618:	1807d2fa 	srai	r3,r3,11
   1b61c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
   1b620:	e0bf7617 	ldw	r2,-552(fp)
   1b624:	10803004 	addi	r2,r2,192
   1b628:	e13f8517 	ldw	r4,-492(fp)
   1b62c:	e0ff8a17 	ldw	r3,-472(fp)
   1b630:	20c7883a 	add	r3,r4,r3
   1b634:	1807d2fa 	srai	r3,r3,11
   1b638:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
   1b63c:	e0bf7617 	ldw	r2,-552(fp)
   1b640:	10803804 	addi	r2,r2,224
   1b644:	e13f8517 	ldw	r4,-492(fp)
   1b648:	e0ff8a17 	ldw	r3,-472(fp)
   1b64c:	20c7c83a 	sub	r3,r4,r3
   1b650:	1807d2fa 	srai	r3,r3,11
   1b654:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1b658:	e0bf7717 	ldw	r2,-548(fp)
   1b65c:	10800044 	addi	r2,r2,1
   1b660:	e0bf7715 	stw	r2,-548(fp)
   1b664:	e0bf7417 	ldw	r2,-560(fp)
   1b668:	10800084 	addi	r2,r2,2
   1b66c:	e0bf7415 	stw	r2,-560(fp)
   1b670:	e0bf7517 	ldw	r2,-556(fp)
   1b674:	10800104 	addi	r2,r2,4
   1b678:	e0bf7515 	stw	r2,-556(fp)
   1b67c:	e0bf7617 	ldw	r2,-552(fp)
   1b680:	10800104 	addi	r2,r2,4
   1b684:	e0bf7615 	stw	r2,-552(fp)
   1b688:	e0bf7717 	ldw	r2,-548(fp)
   1b68c:	10800210 	cmplti	r2,r2,8
   1b690:	103e581e 	bne	r2,zero,1aff4 <jpeg_idct_14x14+0x58>
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 14 rows from work array, store into output array. */

	wsptr = workspace;
   1b694:	e0bf8c04 	addi	r2,fp,-464
   1b698:	e0bf7615 	stw	r2,-552(fp)
	for (ctr = 0; ctr < 14; ctr++) {
   1b69c:	e03f7715 	stw	zero,-548(fp)
   1b6a0:	00019506 	br	1bcf8 <jpeg_idct_14x14+0xd5c>
		outptr = output_buf[ctr] + output_col;
   1b6a4:	e0bf7717 	ldw	r2,-548(fp)
   1b6a8:	1085883a 	add	r2,r2,r2
   1b6ac:	1085883a 	add	r2,r2,r2
   1b6b0:	e0ffff17 	ldw	r3,-4(fp)
   1b6b4:	1885883a 	add	r2,r3,r2
   1b6b8:	10c00017 	ldw	r3,0(r2)
   1b6bc:	e0800317 	ldw	r2,12(fp)
   1b6c0:	1885883a 	add	r2,r3,r2
   1b6c4:	e0bf8b15 	stw	r2,-468(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1b6c8:	e0bf7617 	ldw	r2,-552(fp)
   1b6cc:	10800017 	ldw	r2,0(r2)
   1b6d0:	10800404 	addi	r2,r2,16
   1b6d4:	e0bf7915 	stw	r2,-540(fp)
		z1 <<= CONST_BITS;
   1b6d8:	e0bf7917 	ldw	r2,-540(fp)
   1b6dc:	1004937a 	slli	r2,r2,13
   1b6e0:	e0bf7915 	stw	r2,-540(fp)
		z4 = (INT32) wsptr[4];
   1b6e4:	e0bf7617 	ldw	r2,-552(fp)
   1b6e8:	10800404 	addi	r2,r2,16
   1b6ec:	10800017 	ldw	r2,0(r2)
   1b6f0:	e0bf7a15 	stw	r2,-536(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
   1b6f4:	e13f7a17 	ldw	r4,-536(fp)
   1b6f8:	014a3184 	movi	r5,10438
   1b6fc:	002c1540 	call	2c154 <__mulsi3>
   1b700:	e0bf7b15 	stw	r2,-532(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
   1b704:	e13f7a17 	ldw	r4,-536(fp)
   1b708:	01428484 	movi	r5,2578
   1b70c:	002c1540 	call	2c154 <__mulsi3>
   1b710:	e0bf7c15 	stw	r2,-528(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
   1b714:	e13f7a17 	ldw	r4,-536(fp)
   1b718:	01470dc4 	movi	r5,7223
   1b71c:	002c1540 	call	2c154 <__mulsi3>
   1b720:	e0bf7a15 	stw	r2,-536(fp)

		tmp10 = z1 + z2;
   1b724:	e0ff7917 	ldw	r3,-540(fp)
   1b728:	e0bf7b17 	ldw	r2,-532(fp)
   1b72c:	1885883a 	add	r2,r3,r2
   1b730:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 = z1 + z3;
   1b734:	e0ff7917 	ldw	r3,-540(fp)
   1b738:	e0bf7c17 	ldw	r2,-528(fp)
   1b73c:	1885883a 	add	r2,r3,r2
   1b740:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = z1 - z4;
   1b744:	e0ff7917 	ldw	r3,-540(fp)
   1b748:	e0bf7a17 	ldw	r2,-536(fp)
   1b74c:	1885c83a 	sub	r2,r3,r2
   1b750:	e0bf7f15 	stw	r2,-516(fp)

		tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
   1b754:	e0ff7b17 	ldw	r3,-532(fp)
   1b758:	e0bf7c17 	ldw	r2,-528(fp)
   1b75c:	1887883a 	add	r3,r3,r2
   1b760:	e0bf7a17 	ldw	r2,-536(fp)
   1b764:	1885c83a 	sub	r2,r3,r2
   1b768:	1085883a 	add	r2,r2,r2
   1b76c:	e0ff7917 	ldw	r3,-540(fp)
   1b770:	1885c83a 	sub	r2,r3,r2
   1b774:	e0bf8015 	stw	r2,-512(fp)

		z1 = (INT32) wsptr[2];
   1b778:	e0bf7617 	ldw	r2,-552(fp)
   1b77c:	10800204 	addi	r2,r2,8
   1b780:	10800017 	ldw	r2,0(r2)
   1b784:	e0bf7915 	stw	r2,-540(fp)
		z2 = (INT32) wsptr[6];
   1b788:	e0bf7617 	ldw	r2,-552(fp)
   1b78c:	10800604 	addi	r2,r2,24
   1b790:	10800017 	ldw	r2,0(r2)
   1b794:	e0bf7b15 	stw	r2,-532(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
   1b798:	e0ff7917 	ldw	r3,-540(fp)
   1b79c:	e0bf7b17 	ldw	r2,-532(fp)
   1b7a0:	1885883a 	add	r2,r3,r2
   1b7a4:	1009883a 	mov	r4,r2
   1b7a8:	0148d884 	movi	r5,9058
   1b7ac:	002c1540 	call	2c154 <__mulsi3>
   1b7b0:	e0bf7c15 	stw	r2,-528(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
   1b7b4:	e13f7917 	ldw	r4,-540(fp)
   1b7b8:	01422f44 	movi	r5,2237
   1b7bc:	002c1540 	call	2c154 <__mulsi3>
   1b7c0:	1007883a 	mov	r3,r2
   1b7c4:	e0bf7c17 	ldw	r2,-528(fp)
   1b7c8:	1885883a 	add	r2,r3,r2
   1b7cc:	e0bf8115 	stw	r2,-508(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
   1b7d0:	e13f7b17 	ldw	r4,-532(fp)
   1b7d4:	01723f04 	movi	r5,-14084
   1b7d8:	002c1540 	call	2c154 <__mulsi3>
   1b7dc:	1007883a 	mov	r3,r2
   1b7e0:	e0bf7c17 	ldw	r2,-528(fp)
   1b7e4:	1885883a 	add	r2,r3,r2
   1b7e8:	e0bf8215 	stw	r2,-504(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1b7ec:	e13f7917 	ldw	r4,-540(fp)
   1b7f0:	0144e8c4 	movi	r5,5027
   1b7f4:	002c1540 	call	2c154 <__mulsi3>
   1b7f8:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
   1b7fc:	e13f7b17 	ldw	r4,-532(fp)
   1b800:	0174f844 	movi	r5,-11295
   1b804:	002c1540 	call	2c154 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1b808:	8085883a 	add	r2,r16,r2
   1b80c:	e0bf8315 	stw	r2,-500(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
   1b810:	e0ff7d17 	ldw	r3,-524(fp)
   1b814:	e0bf8117 	ldw	r2,-508(fp)
   1b818:	1885883a 	add	r2,r3,r2
   1b81c:	e0bf8415 	stw	r2,-496(fp)
		tmp26 = tmp10 - tmp13;
   1b820:	e0ff7d17 	ldw	r3,-524(fp)
   1b824:	e0bf8117 	ldw	r2,-508(fp)
   1b828:	1885c83a 	sub	r2,r3,r2
   1b82c:	e0bf8515 	stw	r2,-492(fp)
		tmp21 = tmp11 + tmp14;
   1b830:	e0ff7e17 	ldw	r3,-520(fp)
   1b834:	e0bf8217 	ldw	r2,-504(fp)
   1b838:	1885883a 	add	r2,r3,r2
   1b83c:	e0bf8615 	stw	r2,-488(fp)
		tmp25 = tmp11 - tmp14;
   1b840:	e0ff7e17 	ldw	r3,-520(fp)
   1b844:	e0bf8217 	ldw	r2,-504(fp)
   1b848:	1885c83a 	sub	r2,r3,r2
   1b84c:	e0bf8715 	stw	r2,-484(fp)
		tmp22 = tmp12 + tmp15;
   1b850:	e0ff7f17 	ldw	r3,-516(fp)
   1b854:	e0bf8317 	ldw	r2,-500(fp)
   1b858:	1885883a 	add	r2,r3,r2
   1b85c:	e0bf8815 	stw	r2,-480(fp)
		tmp24 = tmp12 - tmp15;
   1b860:	e0ff7f17 	ldw	r3,-516(fp)
   1b864:	e0bf8317 	ldw	r2,-500(fp)
   1b868:	1885c83a 	sub	r2,r3,r2
   1b86c:	e0bf8915 	stw	r2,-476(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1b870:	e0bf7617 	ldw	r2,-552(fp)
   1b874:	10800104 	addi	r2,r2,4
   1b878:	10800017 	ldw	r2,0(r2)
   1b87c:	e0bf7915 	stw	r2,-540(fp)
		z2 = (INT32) wsptr[3];
   1b880:	e0bf7617 	ldw	r2,-552(fp)
   1b884:	10800304 	addi	r2,r2,12
   1b888:	10800017 	ldw	r2,0(r2)
   1b88c:	e0bf7b15 	stw	r2,-532(fp)
		z3 = (INT32) wsptr[5];
   1b890:	e0bf7617 	ldw	r2,-552(fp)
   1b894:	10800504 	addi	r2,r2,20
   1b898:	10800017 	ldw	r2,0(r2)
   1b89c:	e0bf7c15 	stw	r2,-528(fp)
		z4 = (INT32) wsptr[7];
   1b8a0:	e0bf7617 	ldw	r2,-552(fp)
   1b8a4:	10800704 	addi	r2,r2,28
   1b8a8:	10800017 	ldw	r2,0(r2)
   1b8ac:	e0bf7a15 	stw	r2,-536(fp)
		z4 <<= CONST_BITS;
   1b8b0:	e0bf7a17 	ldw	r2,-536(fp)
   1b8b4:	1004937a 	slli	r2,r2,13
   1b8b8:	e0bf7a15 	stw	r2,-536(fp)

		tmp14 = z1 + z3;
   1b8bc:	e0ff7917 	ldw	r3,-540(fp)
   1b8c0:	e0bf7c17 	ldw	r2,-528(fp)
   1b8c4:	1885883a 	add	r2,r3,r2
   1b8c8:	e0bf8215 	stw	r2,-504(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
   1b8cc:	e0ff7917 	ldw	r3,-540(fp)
   1b8d0:	e0bf7b17 	ldw	r2,-532(fp)
   1b8d4:	1885883a 	add	r2,r3,r2
   1b8d8:	1009883a 	mov	r4,r2
   1b8dc:	014aadc4 	movi	r5,10935
   1b8e0:	002c1540 	call	2c154 <__mulsi3>
   1b8e4:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
   1b8e8:	e13f8217 	ldw	r4,-504(fp)
   1b8ec:	01499484 	movi	r5,9810
   1b8f0:	002c1540 	call	2c154 <__mulsi3>
   1b8f4:	e0bf7f15 	stw	r2,-516(fp)
		tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
   1b8f8:	e0ff7e17 	ldw	r3,-520(fp)
   1b8fc:	e0bf7f17 	ldw	r2,-516(fp)
   1b900:	1887883a 	add	r3,r3,r2
   1b904:	e0bf7a17 	ldw	r2,-536(fp)
   1b908:	18a1883a 	add	r16,r3,r2
   1b90c:	e13f7917 	ldw	r4,-540(fp)
   1b910:	0176fc04 	movi	r5,-9232
   1b914:	002c1540 	call	2c154 <__mulsi3>
   1b918:	8085883a 	add	r2,r16,r2
   1b91c:	e0bf7d15 	stw	r2,-524(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
   1b920:	e13f8217 	ldw	r4,-504(fp)
   1b924:	01460504 	movi	r5,6164
   1b928:	002c1540 	call	2c154 <__mulsi3>
   1b92c:	e0bf8215 	stw	r2,-504(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
   1b930:	e13f7917 	ldw	r4,-540(fp)
   1b934:	017782c4 	movi	r5,-8693
   1b938:	002c1540 	call	2c154 <__mulsi3>
   1b93c:	1007883a 	mov	r3,r2
   1b940:	e0bf8217 	ldw	r2,-504(fp)
   1b944:	1885883a 	add	r2,r3,r2
   1b948:	e0bf8a15 	stw	r2,-472(fp)
		z1    -= z2;
   1b94c:	e0ff7917 	ldw	r3,-540(fp)
   1b950:	e0bf7b17 	ldw	r2,-532(fp)
   1b954:	1885c83a 	sub	r2,r3,r2
   1b958:	e0bf7915 	stw	r2,-540(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
   1b95c:	e13f7917 	ldw	r4,-540(fp)
   1b960:	0143bc84 	movi	r5,3826
   1b964:	002c1540 	call	2c154 <__mulsi3>
   1b968:	1007883a 	mov	r3,r2
   1b96c:	e0bf7a17 	ldw	r2,-536(fp)
   1b970:	1885c83a 	sub	r2,r3,r2
   1b974:	e0bf8315 	stw	r2,-500(fp)
		tmp16 += tmp15;
   1b978:	e0ff8a17 	ldw	r3,-472(fp)
   1b97c:	e0bf8317 	ldw	r2,-500(fp)
   1b980:	1885883a 	add	r2,r3,r2
   1b984:	e0bf8a15 	stw	r2,-472(fp)
		tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
   1b988:	e0ff7b17 	ldw	r3,-532(fp)
   1b98c:	e0bf7c17 	ldw	r2,-528(fp)
   1b990:	1885883a 	add	r2,r3,r2
   1b994:	1009883a 	mov	r4,r2
   1b998:	017ebbc4 	movi	r5,-1297
   1b99c:	002c1540 	call	2c154 <__mulsi3>
   1b9a0:	1007883a 	mov	r3,r2
   1b9a4:	e0bf7a17 	ldw	r2,-536(fp)
   1b9a8:	1885c83a 	sub	r2,r3,r2
   1b9ac:	e0bf8115 	stw	r2,-508(fp)
		tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
   1b9b0:	e13f7b17 	ldw	r4,-532(fp)
   1b9b4:	017c9b84 	movi	r5,-3474
   1b9b8:	002c1540 	call	2c154 <__mulsi3>
   1b9bc:	1007883a 	mov	r3,r2
   1b9c0:	e0bf8117 	ldw	r2,-508(fp)
   1b9c4:	1885883a 	add	r2,r3,r2
   1b9c8:	e0ff7e17 	ldw	r3,-520(fp)
   1b9cc:	1885883a 	add	r2,r3,r2
   1b9d0:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
   1b9d4:	e13f7c17 	ldw	r4,-528(fp)
   1b9d8:	016d0244 	movi	r5,-19447
   1b9dc:	002c1540 	call	2c154 <__mulsi3>
   1b9e0:	1007883a 	mov	r3,r2
   1b9e4:	e0bf8117 	ldw	r2,-508(fp)
   1b9e8:	1885883a 	add	r2,r3,r2
   1b9ec:	e0ff7f17 	ldw	r3,-516(fp)
   1b9f0:	1885883a 	add	r2,r3,r2
   1b9f4:	e0bf7f15 	stw	r2,-516(fp)
		tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
   1b9f8:	e0ff7c17 	ldw	r3,-528(fp)
   1b9fc:	e0bf7b17 	ldw	r2,-532(fp)
   1ba00:	1885c83a 	sub	r2,r3,r2
   1ba04:	1009883a 	mov	r4,r2
   1ba08:	014b3e04 	movi	r5,11512
   1ba0c:	002c1540 	call	2c154 <__mulsi3>
   1ba10:	e0bf8115 	stw	r2,-508(fp)
		tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
   1ba14:	e0ff8117 	ldw	r3,-508(fp)
   1ba18:	e0bf7a17 	ldw	r2,-536(fp)
   1ba1c:	18a1883a 	add	r16,r3,r2
   1ba20:	e13f7c17 	ldw	r4,-528(fp)
   1ba24:	01727984 	movi	r5,-13850
   1ba28:	002c1540 	call	2c154 <__mulsi3>
   1ba2c:	8085883a 	add	r2,r16,r2
   1ba30:	e0ff8217 	ldw	r3,-504(fp)
   1ba34:	1885883a 	add	r2,r3,r2
   1ba38:	e0bf8215 	stw	r2,-504(fp)
		tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
   1ba3c:	e13f7b17 	ldw	r4,-532(fp)
   1ba40:	01456644 	movi	r5,5529
   1ba44:	002c1540 	call	2c154 <__mulsi3>
   1ba48:	1007883a 	mov	r3,r2
   1ba4c:	e0bf8117 	ldw	r2,-508(fp)
   1ba50:	1885883a 	add	r2,r3,r2
   1ba54:	e0ff8317 	ldw	r3,-500(fp)
   1ba58:	1885883a 	add	r2,r3,r2
   1ba5c:	e0bf8315 	stw	r2,-500(fp)

		tmp13 = ((z1 - z3) << CONST_BITS) + z4;
   1ba60:	e0ff7917 	ldw	r3,-540(fp)
   1ba64:	e0bf7c17 	ldw	r2,-528(fp)
   1ba68:	1885c83a 	sub	r2,r3,r2
   1ba6c:	1006937a 	slli	r3,r2,13
   1ba70:	e0bf7a17 	ldw	r2,-536(fp)
   1ba74:	1885883a 	add	r2,r3,r2
   1ba78:	e0bf8115 	stw	r2,-508(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   1ba7c:	e0ff8417 	ldw	r3,-496(fp)
   1ba80:	e0bf7d17 	ldw	r2,-524(fp)
   1ba84:	1885883a 	add	r2,r3,r2
   1ba88:	1005d4ba 	srai	r2,r2,18
   1ba8c:	1080ffcc 	andi	r2,r2,1023
   1ba90:	e0ff7817 	ldw	r3,-544(fp)
   1ba94:	1885883a 	add	r2,r3,r2
   1ba98:	10c00003 	ldbu	r3,0(r2)
   1ba9c:	e0bf8b17 	ldw	r2,-468(fp)
   1baa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   1baa4:	e0bf8b17 	ldw	r2,-468(fp)
   1baa8:	10800344 	addi	r2,r2,13
   1baac:	e13f8417 	ldw	r4,-496(fp)
   1bab0:	e0ff7d17 	ldw	r3,-524(fp)
   1bab4:	20c7c83a 	sub	r3,r4,r3
   1bab8:	1807d4ba 	srai	r3,r3,18
   1babc:	18c0ffcc 	andi	r3,r3,1023
   1bac0:	e13f7817 	ldw	r4,-544(fp)
   1bac4:	20c7883a 	add	r3,r4,r3
   1bac8:	18c00003 	ldbu	r3,0(r3)
   1bacc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   1bad0:	e0bf8b17 	ldw	r2,-468(fp)
   1bad4:	10800044 	addi	r2,r2,1
   1bad8:	e13f8617 	ldw	r4,-488(fp)
   1badc:	e0ff7e17 	ldw	r3,-520(fp)
   1bae0:	20c7883a 	add	r3,r4,r3
   1bae4:	1807d4ba 	srai	r3,r3,18
   1bae8:	18c0ffcc 	andi	r3,r3,1023
   1baec:	e13f7817 	ldw	r4,-544(fp)
   1baf0:	20c7883a 	add	r3,r4,r3
   1baf4:	18c00003 	ldbu	r3,0(r3)
   1baf8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   1bafc:	e0bf8b17 	ldw	r2,-468(fp)
   1bb00:	10800304 	addi	r2,r2,12
   1bb04:	e13f8617 	ldw	r4,-488(fp)
   1bb08:	e0ff7e17 	ldw	r3,-520(fp)
   1bb0c:	20c7c83a 	sub	r3,r4,r3
   1bb10:	1807d4ba 	srai	r3,r3,18
   1bb14:	18c0ffcc 	andi	r3,r3,1023
   1bb18:	e13f7817 	ldw	r4,-544(fp)
   1bb1c:	20c7883a 	add	r3,r4,r3
   1bb20:	18c00003 	ldbu	r3,0(r3)
   1bb24:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   1bb28:	e0bf8b17 	ldw	r2,-468(fp)
   1bb2c:	10800084 	addi	r2,r2,2
   1bb30:	e13f8817 	ldw	r4,-480(fp)
   1bb34:	e0ff7f17 	ldw	r3,-516(fp)
   1bb38:	20c7883a 	add	r3,r4,r3
   1bb3c:	1807d4ba 	srai	r3,r3,18
   1bb40:	18c0ffcc 	andi	r3,r3,1023
   1bb44:	e13f7817 	ldw	r4,-544(fp)
   1bb48:	20c7883a 	add	r3,r4,r3
   1bb4c:	18c00003 	ldbu	r3,0(r3)
   1bb50:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   1bb54:	e0bf8b17 	ldw	r2,-468(fp)
   1bb58:	108002c4 	addi	r2,r2,11
   1bb5c:	e13f8817 	ldw	r4,-480(fp)
   1bb60:	e0ff7f17 	ldw	r3,-516(fp)
   1bb64:	20c7c83a 	sub	r3,r4,r3
   1bb68:	1807d4ba 	srai	r3,r3,18
   1bb6c:	18c0ffcc 	andi	r3,r3,1023
   1bb70:	e13f7817 	ldw	r4,-544(fp)
   1bb74:	20c7883a 	add	r3,r4,r3
   1bb78:	18c00003 	ldbu	r3,0(r3)
   1bb7c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1bb80:	e0bf8b17 	ldw	r2,-468(fp)
   1bb84:	108000c4 	addi	r2,r2,3
   1bb88:	e13f8017 	ldw	r4,-512(fp)
   1bb8c:	e0ff8117 	ldw	r3,-508(fp)
   1bb90:	20c7883a 	add	r3,r4,r3
   1bb94:	1807d4ba 	srai	r3,r3,18
   1bb98:	18c0ffcc 	andi	r3,r3,1023
   1bb9c:	e13f7817 	ldw	r4,-544(fp)
   1bba0:	20c7883a 	add	r3,r4,r3
   1bba4:	18c00003 	ldbu	r3,0(r3)
   1bba8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1bbac:	e0bf8b17 	ldw	r2,-468(fp)
   1bbb0:	10800284 	addi	r2,r2,10
   1bbb4:	e13f8017 	ldw	r4,-512(fp)
   1bbb8:	e0ff8117 	ldw	r3,-508(fp)
   1bbbc:	20c7c83a 	sub	r3,r4,r3
   1bbc0:	1807d4ba 	srai	r3,r3,18
   1bbc4:	18c0ffcc 	andi	r3,r3,1023
   1bbc8:	e13f7817 	ldw	r4,-544(fp)
   1bbcc:	20c7883a 	add	r3,r4,r3
   1bbd0:	18c00003 	ldbu	r3,0(r3)
   1bbd4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1bbd8:	e0bf8b17 	ldw	r2,-468(fp)
   1bbdc:	10800104 	addi	r2,r2,4
   1bbe0:	e13f8917 	ldw	r4,-476(fp)
   1bbe4:	e0ff8217 	ldw	r3,-504(fp)
   1bbe8:	20c7883a 	add	r3,r4,r3
   1bbec:	1807d4ba 	srai	r3,r3,18
   1bbf0:	18c0ffcc 	andi	r3,r3,1023
   1bbf4:	e13f7817 	ldw	r4,-544(fp)
   1bbf8:	20c7883a 	add	r3,r4,r3
   1bbfc:	18c00003 	ldbu	r3,0(r3)
   1bc00:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1bc04:	e0bf8b17 	ldw	r2,-468(fp)
   1bc08:	10800244 	addi	r2,r2,9
   1bc0c:	e13f8917 	ldw	r4,-476(fp)
   1bc10:	e0ff8217 	ldw	r3,-504(fp)
   1bc14:	20c7c83a 	sub	r3,r4,r3
   1bc18:	1807d4ba 	srai	r3,r3,18
   1bc1c:	18c0ffcc 	andi	r3,r3,1023
   1bc20:	e13f7817 	ldw	r4,-544(fp)
   1bc24:	20c7883a 	add	r3,r4,r3
   1bc28:	18c00003 	ldbu	r3,0(r3)
   1bc2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1bc30:	e0bf8b17 	ldw	r2,-468(fp)
   1bc34:	10800144 	addi	r2,r2,5
   1bc38:	e13f8717 	ldw	r4,-484(fp)
   1bc3c:	e0ff8317 	ldw	r3,-500(fp)
   1bc40:	20c7883a 	add	r3,r4,r3
   1bc44:	1807d4ba 	srai	r3,r3,18
   1bc48:	18c0ffcc 	andi	r3,r3,1023
   1bc4c:	e13f7817 	ldw	r4,-544(fp)
   1bc50:	20c7883a 	add	r3,r4,r3
   1bc54:	18c00003 	ldbu	r3,0(r3)
   1bc58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1bc5c:	e0bf8b17 	ldw	r2,-468(fp)
   1bc60:	10800204 	addi	r2,r2,8
   1bc64:	e13f8717 	ldw	r4,-484(fp)
   1bc68:	e0ff8317 	ldw	r3,-500(fp)
   1bc6c:	20c7c83a 	sub	r3,r4,r3
   1bc70:	1807d4ba 	srai	r3,r3,18
   1bc74:	18c0ffcc 	andi	r3,r3,1023
   1bc78:	e13f7817 	ldw	r4,-544(fp)
   1bc7c:	20c7883a 	add	r3,r4,r3
   1bc80:	18c00003 	ldbu	r3,0(r3)
   1bc84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
   1bc88:	e0bf8b17 	ldw	r2,-468(fp)
   1bc8c:	10800184 	addi	r2,r2,6
   1bc90:	e13f8517 	ldw	r4,-492(fp)
   1bc94:	e0ff8a17 	ldw	r3,-472(fp)
   1bc98:	20c7883a 	add	r3,r4,r3
   1bc9c:	1807d4ba 	srai	r3,r3,18
   1bca0:	18c0ffcc 	andi	r3,r3,1023
   1bca4:	e13f7817 	ldw	r4,-544(fp)
   1bca8:	20c7883a 	add	r3,r4,r3
   1bcac:	18c00003 	ldbu	r3,0(r3)
   1bcb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
   1bcb4:	e0bf8b17 	ldw	r2,-468(fp)
   1bcb8:	108001c4 	addi	r2,r2,7
   1bcbc:	e13f8517 	ldw	r4,-492(fp)
   1bcc0:	e0ff8a17 	ldw	r3,-472(fp)
   1bcc4:	20c7c83a 	sub	r3,r4,r3
   1bcc8:	1807d4ba 	srai	r3,r3,18
   1bccc:	18c0ffcc 	andi	r3,r3,1023
   1bcd0:	e13f7817 	ldw	r4,-544(fp)
   1bcd4:	20c7883a 	add	r3,r4,r3
   1bcd8:	18c00003 	ldbu	r3,0(r3)
   1bcdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1bce0:	e0bf7617 	ldw	r2,-552(fp)
   1bce4:	10800804 	addi	r2,r2,32
   1bce8:	e0bf7615 	stw	r2,-552(fp)
	}

	/* Pass 2: process 14 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 14; ctr++) {
   1bcec:	e0bf7717 	ldw	r2,-548(fp)
   1bcf0:	10800044 	addi	r2,r2,1
   1bcf4:	e0bf7715 	stw	r2,-548(fp)
   1bcf8:	e0bf7717 	ldw	r2,-548(fp)
   1bcfc:	10800390 	cmplti	r2,r2,14
   1bd00:	103e681e 	bne	r2,zero,1b6a4 <jpeg_idct_14x14+0x708>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1bd04:	e037883a 	mov	sp,fp
   1bd08:	dfc00217 	ldw	ra,8(sp)
   1bd0c:	df000117 	ldw	fp,4(sp)
   1bd10:	dc000017 	ldw	r16,0(sp)
   1bd14:	dec00304 	addi	sp,sp,12
   1bd18:	f800283a 	ret

0001bd1c <jpeg_idct_15x15>:

GLOBAL(void)
	jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1bd1c:	deff6904 	addi	sp,sp,-604
   1bd20:	dfc09615 	stw	ra,600(sp)
   1bd24:	df009515 	stw	fp,596(sp)
   1bd28:	df009504 	addi	fp,sp,596
   1bd2c:	e13ffc15 	stw	r4,-16(fp)
   1bd30:	e17ffd15 	stw	r5,-12(fp)
   1bd34:	e1bffe15 	stw	r6,-8(fp)
   1bd38:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1bd3c:	e0bffc17 	ldw	r2,-16(fp)
   1bd40:	10804917 	ldw	r2,292(r2)
   1bd44:	10802004 	addi	r2,r2,128
   1bd48:	e0bf6f15 	stw	r2,-580(fp)
	int workspace[8*15];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   1bd4c:	e0bffe17 	ldw	r2,-8(fp)
   1bd50:	e0bf6b15 	stw	r2,-596(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1bd54:	e0bffd17 	ldw	r2,-12(fp)
   1bd58:	10801517 	ldw	r2,84(r2)
   1bd5c:	e0bf6c15 	stw	r2,-592(fp)
	wsptr = workspace;
   1bd60:	e0bf8404 	addi	r2,fp,-496
   1bd64:	e0bf6d15 	stw	r2,-588(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1bd68:	e03f6e15 	stw	zero,-584(fp)
   1bd6c:	0001b506 	br	1c444 <jpeg_idct_15x15+0x728>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1bd70:	e0bf6b17 	ldw	r2,-596(fp)
   1bd74:	1080000b 	ldhu	r2,0(r2)
   1bd78:	10ffffcc 	andi	r3,r2,65535
   1bd7c:	18e0001c 	xori	r3,r3,32768
   1bd80:	18e00004 	addi	r3,r3,-32768
   1bd84:	e0bf6c17 	ldw	r2,-592(fp)
   1bd88:	10800017 	ldw	r2,0(r2)
   1bd8c:	1809883a 	mov	r4,r3
   1bd90:	100b883a 	mov	r5,r2
   1bd94:	002c1540 	call	2c154 <__mulsi3>
   1bd98:	e0bf7015 	stw	r2,-576(fp)
		z1 <<= CONST_BITS;
   1bd9c:	e0bf7017 	ldw	r2,-576(fp)
   1bda0:	1004937a 	slli	r2,r2,13
   1bda4:	e0bf7015 	stw	r2,-576(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   1bda8:	e0bf7017 	ldw	r2,-576(fp)
   1bdac:	10810004 	addi	r2,r2,1024
   1bdb0:	e0bf7015 	stw	r2,-576(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1bdb4:	e0bf6b17 	ldw	r2,-596(fp)
   1bdb8:	10800804 	addi	r2,r2,32
   1bdbc:	1080000b 	ldhu	r2,0(r2)
   1bdc0:	10ffffcc 	andi	r3,r2,65535
   1bdc4:	18e0001c 	xori	r3,r3,32768
   1bdc8:	18e00004 	addi	r3,r3,-32768
   1bdcc:	e0bf6c17 	ldw	r2,-592(fp)
   1bdd0:	10801004 	addi	r2,r2,64
   1bdd4:	10800017 	ldw	r2,0(r2)
   1bdd8:	1809883a 	mov	r4,r3
   1bddc:	100b883a 	mov	r5,r2
   1bde0:	002c1540 	call	2c154 <__mulsi3>
   1bde4:	e0bf7115 	stw	r2,-572(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1bde8:	e0bf6b17 	ldw	r2,-596(fp)
   1bdec:	10801004 	addi	r2,r2,64
   1bdf0:	1080000b 	ldhu	r2,0(r2)
   1bdf4:	10ffffcc 	andi	r3,r2,65535
   1bdf8:	18e0001c 	xori	r3,r3,32768
   1bdfc:	18e00004 	addi	r3,r3,-32768
   1be00:	e0bf6c17 	ldw	r2,-592(fp)
   1be04:	10802004 	addi	r2,r2,128
   1be08:	10800017 	ldw	r2,0(r2)
   1be0c:	1809883a 	mov	r4,r3
   1be10:	100b883a 	mov	r5,r2
   1be14:	002c1540 	call	2c154 <__mulsi3>
   1be18:	e0bf7215 	stw	r2,-568(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1be1c:	e0bf6b17 	ldw	r2,-596(fp)
   1be20:	10801804 	addi	r2,r2,96
   1be24:	1080000b 	ldhu	r2,0(r2)
   1be28:	10ffffcc 	andi	r3,r2,65535
   1be2c:	18e0001c 	xori	r3,r3,32768
   1be30:	18e00004 	addi	r3,r3,-32768
   1be34:	e0bf6c17 	ldw	r2,-592(fp)
   1be38:	10803004 	addi	r2,r2,192
   1be3c:	10800017 	ldw	r2,0(r2)
   1be40:	1809883a 	mov	r4,r3
   1be44:	100b883a 	mov	r5,r2
   1be48:	002c1540 	call	2c154 <__mulsi3>
   1be4c:	e0bf7315 	stw	r2,-564(fp)

		tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
   1be50:	e13f7317 	ldw	r4,-564(fp)
   1be54:	01437f04 	movi	r5,3580
   1be58:	002c1540 	call	2c154 <__mulsi3>
   1be5c:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
   1be60:	e13f7317 	ldw	r4,-564(fp)
   1be64:	01492744 	movi	r5,9373
   1be68:	002c1540 	call	2c154 <__mulsi3>
   1be6c:	e0bf7515 	stw	r2,-556(fp)

		tmp12 = z1 - tmp10;
   1be70:	e0ff7017 	ldw	r3,-576(fp)
   1be74:	e0bf7417 	ldw	r2,-560(fp)
   1be78:	1885c83a 	sub	r2,r3,r2
   1be7c:	e0bf7615 	stw	r2,-552(fp)
		tmp13 = z1 + tmp11;
   1be80:	e0ff7017 	ldw	r3,-576(fp)
   1be84:	e0bf7517 	ldw	r2,-556(fp)
   1be88:	1885883a 	add	r2,r3,r2
   1be8c:	e0bf7715 	stw	r2,-548(fp)
		z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
   1be90:	e0ff7517 	ldw	r3,-556(fp)
   1be94:	e0bf7417 	ldw	r2,-560(fp)
   1be98:	1885c83a 	sub	r2,r3,r2
   1be9c:	1085883a 	add	r2,r2,r2
   1bea0:	e0ff7017 	ldw	r3,-576(fp)
   1bea4:	1885c83a 	sub	r2,r3,r2
   1bea8:	e0bf7015 	stw	r2,-576(fp)

		z4 = z2 - z3;
   1beac:	e0ff7117 	ldw	r3,-572(fp)
   1beb0:	e0bf7217 	ldw	r2,-568(fp)
   1beb4:	1885c83a 	sub	r2,r3,r2
   1beb8:	e0bf7315 	stw	r2,-564(fp)
		z3 += z2;
   1bebc:	e0ff7217 	ldw	r3,-568(fp)
   1bec0:	e0bf7117 	ldw	r2,-572(fp)
   1bec4:	1885883a 	add	r2,r3,r2
   1bec8:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
   1becc:	e13f7217 	ldw	r4,-568(fp)
   1bed0:	014ab384 	movi	r5,10958
   1bed4:	002c1540 	call	2c154 <__mulsi3>
   1bed8:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
   1bedc:	e13f7317 	ldw	r4,-564(fp)
   1bee0:	01405d84 	movi	r5,374
   1bee4:	002c1540 	call	2c154 <__mulsi3>
   1bee8:	e0bf7515 	stw	r2,-556(fp)
		z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
   1beec:	e13f7117 	ldw	r4,-572(fp)
   1bef0:	014b84c4 	movi	r5,11795
   1bef4:	002c1540 	call	2c154 <__mulsi3>
   1bef8:	e0bf7115 	stw	r2,-572(fp)

		tmp20 = tmp13 + tmp10 + tmp11;
   1befc:	e0ff7717 	ldw	r3,-548(fp)
   1bf00:	e0bf7417 	ldw	r2,-560(fp)
   1bf04:	1887883a 	add	r3,r3,r2
   1bf08:	e0bf7517 	ldw	r2,-556(fp)
   1bf0c:	1885883a 	add	r2,r3,r2
   1bf10:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp12 - tmp10 + tmp11 + z2;
   1bf14:	e0ff7617 	ldw	r3,-552(fp)
   1bf18:	e0bf7417 	ldw	r2,-560(fp)
   1bf1c:	1887c83a 	sub	r3,r3,r2
   1bf20:	e0bf7517 	ldw	r2,-556(fp)
   1bf24:	1887883a 	add	r3,r3,r2
   1bf28:	e0bf7117 	ldw	r2,-572(fp)
   1bf2c:	1885883a 	add	r2,r3,r2
   1bf30:	e0bf7915 	stw	r2,-540(fp)

		tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
   1bf34:	e13f7217 	ldw	r4,-568(fp)
   1bf38:	01446084 	movi	r5,4482
   1bf3c:	002c1540 	call	2c154 <__mulsi3>
   1bf40:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
   1bf44:	e13f7317 	ldw	r4,-564(fp)
   1bf48:	014331c4 	movi	r5,3271
   1bf4c:	002c1540 	call	2c154 <__mulsi3>
   1bf50:	e0bf7515 	stw	r2,-556(fp)

		tmp25 = tmp13 - tmp10 - tmp11;
   1bf54:	e0ff7717 	ldw	r3,-548(fp)
   1bf58:	e0bf7417 	ldw	r2,-560(fp)
   1bf5c:	1887c83a 	sub	r3,r3,r2
   1bf60:	e0bf7517 	ldw	r2,-556(fp)
   1bf64:	1885c83a 	sub	r2,r3,r2
   1bf68:	e0bf7a15 	stw	r2,-536(fp)
		tmp26 = tmp12 + tmp10 - tmp11 - z2;
   1bf6c:	e0ff7617 	ldw	r3,-552(fp)
   1bf70:	e0bf7417 	ldw	r2,-560(fp)
   1bf74:	1887883a 	add	r3,r3,r2
   1bf78:	e0bf7517 	ldw	r2,-556(fp)
   1bf7c:	1887c83a 	sub	r3,r3,r2
   1bf80:	e0bf7117 	ldw	r2,-572(fp)
   1bf84:	1885c83a 	sub	r2,r3,r2
   1bf88:	e0bf7b15 	stw	r2,-532(fp)

		tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
   1bf8c:	e13f7217 	ldw	r4,-568(fp)
   1bf90:	01465304 	movi	r5,6476
   1bf94:	002c1540 	call	2c154 <__mulsi3>
   1bf98:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
   1bf9c:	e13f7317 	ldw	r4,-564(fp)
   1bfa0:	0142d404 	movi	r5,2896
   1bfa4:	002c1540 	call	2c154 <__mulsi3>
   1bfa8:	e0bf7515 	stw	r2,-556(fp)

		tmp21 = tmp12 + tmp10 + tmp11;
   1bfac:	e0ff7617 	ldw	r3,-552(fp)
   1bfb0:	e0bf7417 	ldw	r2,-560(fp)
   1bfb4:	1887883a 	add	r3,r3,r2
   1bfb8:	e0bf7517 	ldw	r2,-556(fp)
   1bfbc:	1885883a 	add	r2,r3,r2
   1bfc0:	e0bf7c15 	stw	r2,-528(fp)
		tmp24 = tmp13 - tmp10 + tmp11;
   1bfc4:	e0ff7717 	ldw	r3,-548(fp)
   1bfc8:	e0bf7417 	ldw	r2,-560(fp)
   1bfcc:	1887c83a 	sub	r3,r3,r2
   1bfd0:	e0bf7517 	ldw	r2,-556(fp)
   1bfd4:	1885883a 	add	r2,r3,r2
   1bfd8:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 += tmp11;
   1bfdc:	e0ff7517 	ldw	r3,-556(fp)
   1bfe0:	e0bf7517 	ldw	r2,-556(fp)
   1bfe4:	1885883a 	add	r2,r3,r2
   1bfe8:	e0bf7515 	stw	r2,-556(fp)
		tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
   1bfec:	e0ff7017 	ldw	r3,-576(fp)
   1bff0:	e0bf7517 	ldw	r2,-556(fp)
   1bff4:	1885883a 	add	r2,r3,r2
   1bff8:	e0bf7e15 	stw	r2,-520(fp)
		tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
   1bffc:	e0ff7017 	ldw	r3,-576(fp)
   1c000:	e0bf7517 	ldw	r2,-556(fp)
   1c004:	1887c83a 	sub	r3,r3,r2
   1c008:	e0bf7517 	ldw	r2,-556(fp)
   1c00c:	1885c83a 	sub	r2,r3,r2
   1c010:	e0bf7f15 	stw	r2,-516(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1c014:	e0bf6b17 	ldw	r2,-596(fp)
   1c018:	10800404 	addi	r2,r2,16
   1c01c:	1080000b 	ldhu	r2,0(r2)
   1c020:	10ffffcc 	andi	r3,r2,65535
   1c024:	18e0001c 	xori	r3,r3,32768
   1c028:	18e00004 	addi	r3,r3,-32768
   1c02c:	e0bf6c17 	ldw	r2,-592(fp)
   1c030:	10800804 	addi	r2,r2,32
   1c034:	10800017 	ldw	r2,0(r2)
   1c038:	1809883a 	mov	r4,r3
   1c03c:	100b883a 	mov	r5,r2
   1c040:	002c1540 	call	2c154 <__mulsi3>
   1c044:	e0bf7015 	stw	r2,-576(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1c048:	e0bf6b17 	ldw	r2,-596(fp)
   1c04c:	10800c04 	addi	r2,r2,48
   1c050:	1080000b 	ldhu	r2,0(r2)
   1c054:	10ffffcc 	andi	r3,r2,65535
   1c058:	18e0001c 	xori	r3,r3,32768
   1c05c:	18e00004 	addi	r3,r3,-32768
   1c060:	e0bf6c17 	ldw	r2,-592(fp)
   1c064:	10801804 	addi	r2,r2,96
   1c068:	10800017 	ldw	r2,0(r2)
   1c06c:	1809883a 	mov	r4,r3
   1c070:	100b883a 	mov	r5,r2
   1c074:	002c1540 	call	2c154 <__mulsi3>
   1c078:	e0bf7115 	stw	r2,-572(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1c07c:	e0bf6b17 	ldw	r2,-596(fp)
   1c080:	10801404 	addi	r2,r2,80
   1c084:	1080000b 	ldhu	r2,0(r2)
   1c088:	10ffffcc 	andi	r3,r2,65535
   1c08c:	18e0001c 	xori	r3,r3,32768
   1c090:	18e00004 	addi	r3,r3,-32768
   1c094:	e0bf6c17 	ldw	r2,-592(fp)
   1c098:	10802804 	addi	r2,r2,160
   1c09c:	10800017 	ldw	r2,0(r2)
   1c0a0:	1809883a 	mov	r4,r3
   1c0a4:	100b883a 	mov	r5,r2
   1c0a8:	002c1540 	call	2c154 <__mulsi3>
   1c0ac:	e0bf7315 	stw	r2,-564(fp)
		z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
   1c0b0:	e13f7317 	ldw	r4,-564(fp)
   1c0b4:	0149cc44 	movi	r5,10033
   1c0b8:	002c1540 	call	2c154 <__mulsi3>
   1c0bc:	e0bf7215 	stw	r2,-568(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1c0c0:	e0bf6b17 	ldw	r2,-596(fp)
   1c0c4:	10801c04 	addi	r2,r2,112
   1c0c8:	1080000b 	ldhu	r2,0(r2)
   1c0cc:	10ffffcc 	andi	r3,r2,65535
   1c0d0:	18e0001c 	xori	r3,r3,32768
   1c0d4:	18e00004 	addi	r3,r3,-32768
   1c0d8:	e0bf6c17 	ldw	r2,-592(fp)
   1c0dc:	10803804 	addi	r2,r2,224
   1c0e0:	10800017 	ldw	r2,0(r2)
   1c0e4:	1809883a 	mov	r4,r3
   1c0e8:	100b883a 	mov	r5,r2
   1c0ec:	002c1540 	call	2c154 <__mulsi3>
   1c0f0:	e0bf7315 	stw	r2,-564(fp)

		tmp13 = z2 - z4;
   1c0f4:	e0ff7117 	ldw	r3,-572(fp)
   1c0f8:	e0bf7317 	ldw	r2,-564(fp)
   1c0fc:	1885c83a 	sub	r2,r3,r2
   1c100:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
   1c104:	e0ff7017 	ldw	r3,-576(fp)
   1c108:	e0bf7717 	ldw	r2,-548(fp)
   1c10c:	1885883a 	add	r2,r3,r2
   1c110:	1009883a 	mov	r4,r2
   1c114:	0146a684 	movi	r5,6810
   1c118:	002c1540 	call	2c154 <__mulsi3>
   1c11c:	e0bf8015 	stw	r2,-512(fp)
		tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
   1c120:	e13f7017 	ldw	r4,-576(fp)
   1c124:	01441c44 	movi	r5,4209
   1c128:	002c1540 	call	2c154 <__mulsi3>
   1c12c:	1007883a 	mov	r3,r2
   1c130:	e0bf8017 	ldw	r2,-512(fp)
   1c134:	1885883a 	add	r2,r3,r2
   1c138:	e0bf7515 	stw	r2,-556(fp)
		tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
   1c13c:	e13f7717 	ldw	r4,-548(fp)
   1c140:	016e9704 	movi	r5,-17828
   1c144:	002c1540 	call	2c154 <__mulsi3>
   1c148:	1007883a 	mov	r3,r2
   1c14c:	e0bf8017 	ldw	r2,-512(fp)
   1c150:	1885883a 	add	r2,r3,r2
   1c154:	e0bf8115 	stw	r2,-508(fp)

		tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
   1c158:	e13f7117 	ldw	r4,-572(fp)
   1c15c:	01795984 	movi	r5,-6810
   1c160:	002c1540 	call	2c154 <__mulsi3>
   1c164:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
   1c168:	e13f7117 	ldw	r4,-572(fp)
   1c16c:	01753d84 	movi	r5,-11018
   1c170:	002c1540 	call	2c154 <__mulsi3>
   1c174:	e0bf8015 	stw	r2,-512(fp)
		z2 = z1 - z4;
   1c178:	e0ff7017 	ldw	r3,-576(fp)
   1c17c:	e0bf7317 	ldw	r2,-564(fp)
   1c180:	1885c83a 	sub	r2,r3,r2
   1c184:	e0bf7115 	stw	r2,-572(fp)
		tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
   1c188:	e13f7117 	ldw	r4,-572(fp)
   1c18c:	014b4084 	movi	r5,11522
   1c190:	002c1540 	call	2c154 <__mulsi3>
   1c194:	1007883a 	mov	r3,r2
   1c198:	e0bf7217 	ldw	r2,-568(fp)
   1c19c:	1885883a 	add	r2,r3,r2
   1c1a0:	e0bf7615 	stw	r2,-552(fp)

		tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
   1c1a4:	e13f7317 	ldw	r4,-564(fp)
   1c1a8:	0153a8c4 	movi	r5,20131
   1c1ac:	002c1540 	call	2c154 <__mulsi3>
   1c1b0:	1007883a 	mov	r3,r2
   1c1b4:	e0bf7617 	ldw	r2,-552(fp)
   1c1b8:	1887883a 	add	r3,r3,r2
   1c1bc:	e0bf8017 	ldw	r2,-512(fp)
   1c1c0:	1885c83a 	sub	r2,r3,r2
   1c1c4:	e0bf7415 	stw	r2,-560(fp)
		tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
   1c1c8:	e13f7017 	ldw	r4,-576(fp)
   1c1cc:	017719c4 	movi	r5,-9113
   1c1d0:	002c1540 	call	2c154 <__mulsi3>
   1c1d4:	1007883a 	mov	r3,r2
   1c1d8:	e0bf7617 	ldw	r2,-552(fp)
   1c1dc:	1887883a 	add	r3,r3,r2
   1c1e0:	e0bf7717 	ldw	r2,-548(fp)
   1c1e4:	1885883a 	add	r2,r3,r2
   1c1e8:	e0bf8215 	stw	r2,-504(fp)
		tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
   1c1ec:	e13f7117 	ldw	r4,-572(fp)
   1c1f0:	0149cc44 	movi	r5,10033
   1c1f4:	002c1540 	call	2c154 <__mulsi3>
   1c1f8:	1007883a 	mov	r3,r2
   1c1fc:	e0bf7217 	ldw	r2,-568(fp)
   1c200:	1885c83a 	sub	r2,r3,r2
   1c204:	e0bf7615 	stw	r2,-552(fp)
		z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
   1c208:	e0ff7017 	ldw	r3,-576(fp)
   1c20c:	e0bf7317 	ldw	r2,-564(fp)
   1c210:	1885883a 	add	r2,r3,r2
   1c214:	1009883a 	mov	r4,r2
   1c218:	01449a04 	movi	r5,4712
   1c21c:	002c1540 	call	2c154 <__mulsi3>
   1c220:	e0bf7115 	stw	r2,-572(fp)
		tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
   1c224:	e13f7017 	ldw	r4,-576(fp)
   1c228:	0143ce44 	movi	r5,3897
   1c22c:	002c1540 	call	2c154 <__mulsi3>
   1c230:	1007883a 	mov	r3,r2
   1c234:	e0bf7117 	ldw	r2,-572(fp)
   1c238:	1887883a 	add	r3,r3,r2
   1c23c:	e0bf7217 	ldw	r2,-568(fp)
   1c240:	1885c83a 	sub	r2,r3,r2
   1c244:	e0ff7717 	ldw	r3,-548(fp)
   1c248:	1885883a 	add	r2,r3,r2
   1c24c:	e0bf7715 	stw	r2,-548(fp)
		tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
   1c250:	e13f7317 	ldw	r4,-564(fp)
   1c254:	01790bc4 	movi	r5,-7121
   1c258:	002c1540 	call	2c154 <__mulsi3>
   1c25c:	1007883a 	mov	r3,r2
   1c260:	e0bf7117 	ldw	r2,-572(fp)
   1c264:	1887883a 	add	r3,r3,r2
   1c268:	e0bf7217 	ldw	r2,-568(fp)
   1c26c:	1885883a 	add	r2,r3,r2
   1c270:	e0ff8017 	ldw	r3,-512(fp)
   1c274:	1885883a 	add	r2,r3,r2
   1c278:	e0bf8015 	stw	r2,-512(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1c27c:	e0ff7817 	ldw	r3,-544(fp)
   1c280:	e0bf7417 	ldw	r2,-560(fp)
   1c284:	1885883a 	add	r2,r3,r2
   1c288:	1007d2fa 	srai	r3,r2,11
   1c28c:	e0bf6d17 	ldw	r2,-588(fp)
   1c290:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   1c294:	e0bf6d17 	ldw	r2,-588(fp)
   1c298:	10807004 	addi	r2,r2,448
   1c29c:	e13f7817 	ldw	r4,-544(fp)
   1c2a0:	e0ff7417 	ldw	r3,-560(fp)
   1c2a4:	20c7c83a 	sub	r3,r4,r3
   1c2a8:	1807d2fa 	srai	r3,r3,11
   1c2ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   1c2b0:	e0bf6d17 	ldw	r2,-588(fp)
   1c2b4:	10800804 	addi	r2,r2,32
   1c2b8:	e13f7c17 	ldw	r4,-528(fp)
   1c2bc:	e0ff7517 	ldw	r3,-556(fp)
   1c2c0:	20c7883a 	add	r3,r4,r3
   1c2c4:	1807d2fa 	srai	r3,r3,11
   1c2c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   1c2cc:	e0bf6d17 	ldw	r2,-588(fp)
   1c2d0:	10806804 	addi	r2,r2,416
   1c2d4:	e13f7c17 	ldw	r4,-528(fp)
   1c2d8:	e0ff7517 	ldw	r3,-556(fp)
   1c2dc:	20c7c83a 	sub	r3,r4,r3
   1c2e0:	1807d2fa 	srai	r3,r3,11
   1c2e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   1c2e8:	e0bf6d17 	ldw	r2,-588(fp)
   1c2ec:	10801004 	addi	r2,r2,64
   1c2f0:	e13f7e17 	ldw	r4,-520(fp)
   1c2f4:	e0ff7617 	ldw	r3,-552(fp)
   1c2f8:	20c7883a 	add	r3,r4,r3
   1c2fc:	1807d2fa 	srai	r3,r3,11
   1c300:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   1c304:	e0bf6d17 	ldw	r2,-588(fp)
   1c308:	10806004 	addi	r2,r2,384
   1c30c:	e13f7e17 	ldw	r4,-520(fp)
   1c310:	e0ff7617 	ldw	r3,-552(fp)
   1c314:	20c7c83a 	sub	r3,r4,r3
   1c318:	1807d2fa 	srai	r3,r3,11
   1c31c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   1c320:	e0bf6d17 	ldw	r2,-588(fp)
   1c324:	10801804 	addi	r2,r2,96
   1c328:	e13f7917 	ldw	r4,-540(fp)
   1c32c:	e0ff7717 	ldw	r3,-548(fp)
   1c330:	20c7883a 	add	r3,r4,r3
   1c334:	1807d2fa 	srai	r3,r3,11
   1c338:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   1c33c:	e0bf6d17 	ldw	r2,-588(fp)
   1c340:	10805804 	addi	r2,r2,352
   1c344:	e13f7917 	ldw	r4,-540(fp)
   1c348:	e0ff7717 	ldw	r3,-548(fp)
   1c34c:	20c7c83a 	sub	r3,r4,r3
   1c350:	1807d2fa 	srai	r3,r3,11
   1c354:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   1c358:	e0bf6d17 	ldw	r2,-588(fp)
   1c35c:	10802004 	addi	r2,r2,128
   1c360:	e13f7d17 	ldw	r4,-524(fp)
   1c364:	e0ff8117 	ldw	r3,-508(fp)
   1c368:	20c7883a 	add	r3,r4,r3
   1c36c:	1807d2fa 	srai	r3,r3,11
   1c370:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   1c374:	e0bf6d17 	ldw	r2,-588(fp)
   1c378:	10805004 	addi	r2,r2,320
   1c37c:	e13f7d17 	ldw	r4,-524(fp)
   1c380:	e0ff8117 	ldw	r3,-508(fp)
   1c384:	20c7c83a 	sub	r3,r4,r3
   1c388:	1807d2fa 	srai	r3,r3,11
   1c38c:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   1c390:	e0bf6d17 	ldw	r2,-588(fp)
   1c394:	10802804 	addi	r2,r2,160
   1c398:	e13f7a17 	ldw	r4,-536(fp)
   1c39c:	e0ff8017 	ldw	r3,-512(fp)
   1c3a0:	20c7883a 	add	r3,r4,r3
   1c3a4:	1807d2fa 	srai	r3,r3,11
   1c3a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   1c3ac:	e0bf6d17 	ldw	r2,-588(fp)
   1c3b0:	10804804 	addi	r2,r2,288
   1c3b4:	e13f7a17 	ldw	r4,-536(fp)
   1c3b8:	e0ff8017 	ldw	r3,-512(fp)
   1c3bc:	20c7c83a 	sub	r3,r4,r3
   1c3c0:	1807d2fa 	srai	r3,r3,11
   1c3c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
   1c3c8:	e0bf6d17 	ldw	r2,-588(fp)
   1c3cc:	10803004 	addi	r2,r2,192
   1c3d0:	e13f7b17 	ldw	r4,-532(fp)
   1c3d4:	e0ff8217 	ldw	r3,-504(fp)
   1c3d8:	20c7883a 	add	r3,r4,r3
   1c3dc:	1807d2fa 	srai	r3,r3,11
   1c3e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
   1c3e4:	e0bf6d17 	ldw	r2,-588(fp)
   1c3e8:	10804004 	addi	r2,r2,256
   1c3ec:	e13f7b17 	ldw	r4,-532(fp)
   1c3f0:	e0ff8217 	ldw	r3,-504(fp)
   1c3f4:	20c7c83a 	sub	r3,r4,r3
   1c3f8:	1807d2fa 	srai	r3,r3,11
   1c3fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
   1c400:	e0bf6d17 	ldw	r2,-588(fp)
   1c404:	10803804 	addi	r2,r2,224
   1c408:	e0ff7f17 	ldw	r3,-516(fp)
   1c40c:	1807d2fa 	srai	r3,r3,11
   1c410:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1c414:	e0bf6e17 	ldw	r2,-584(fp)
   1c418:	10800044 	addi	r2,r2,1
   1c41c:	e0bf6e15 	stw	r2,-584(fp)
   1c420:	e0bf6b17 	ldw	r2,-596(fp)
   1c424:	10800084 	addi	r2,r2,2
   1c428:	e0bf6b15 	stw	r2,-596(fp)
   1c42c:	e0bf6c17 	ldw	r2,-592(fp)
   1c430:	10800104 	addi	r2,r2,4
   1c434:	e0bf6c15 	stw	r2,-592(fp)
   1c438:	e0bf6d17 	ldw	r2,-588(fp)
   1c43c:	10800104 	addi	r2,r2,4
   1c440:	e0bf6d15 	stw	r2,-588(fp)
   1c444:	e0bf6e17 	ldw	r2,-584(fp)
   1c448:	10800210 	cmplti	r2,r2,8
   1c44c:	103e481e 	bne	r2,zero,1bd70 <jpeg_idct_15x15+0x54>
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 15 rows from work array, store into output array. */

	wsptr = workspace;
   1c450:	e0bf8404 	addi	r2,fp,-496
   1c454:	e0bf6d15 	stw	r2,-588(fp)
	for (ctr = 0; ctr < 15; ctr++) {
   1c458:	e03f6e15 	stw	zero,-584(fp)
   1c45c:	0001ab06 	br	1cb0c <jpeg_idct_15x15+0xdf0>
		outptr = output_buf[ctr] + output_col;
   1c460:	e0bf6e17 	ldw	r2,-584(fp)
   1c464:	1085883a 	add	r2,r2,r2
   1c468:	1085883a 	add	r2,r2,r2
   1c46c:	e0ffff17 	ldw	r3,-4(fp)
   1c470:	1885883a 	add	r2,r3,r2
   1c474:	10c00017 	ldw	r3,0(r2)
   1c478:	e0800217 	ldw	r2,8(fp)
   1c47c:	1885883a 	add	r2,r3,r2
   1c480:	e0bf8315 	stw	r2,-500(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1c484:	e0bf6d17 	ldw	r2,-588(fp)
   1c488:	10800017 	ldw	r2,0(r2)
   1c48c:	10800404 	addi	r2,r2,16
   1c490:	e0bf7015 	stw	r2,-576(fp)
		z1 <<= CONST_BITS;
   1c494:	e0bf7017 	ldw	r2,-576(fp)
   1c498:	1004937a 	slli	r2,r2,13
   1c49c:	e0bf7015 	stw	r2,-576(fp)

		z2 = (INT32) wsptr[2];
   1c4a0:	e0bf6d17 	ldw	r2,-588(fp)
   1c4a4:	10800204 	addi	r2,r2,8
   1c4a8:	10800017 	ldw	r2,0(r2)
   1c4ac:	e0bf7115 	stw	r2,-572(fp)
		z3 = (INT32) wsptr[4];
   1c4b0:	e0bf6d17 	ldw	r2,-588(fp)
   1c4b4:	10800404 	addi	r2,r2,16
   1c4b8:	10800017 	ldw	r2,0(r2)
   1c4bc:	e0bf7215 	stw	r2,-568(fp)
		z4 = (INT32) wsptr[6];
   1c4c0:	e0bf6d17 	ldw	r2,-588(fp)
   1c4c4:	10800604 	addi	r2,r2,24
   1c4c8:	10800017 	ldw	r2,0(r2)
   1c4cc:	e0bf7315 	stw	r2,-564(fp)

		tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
   1c4d0:	e13f7317 	ldw	r4,-564(fp)
   1c4d4:	01437f04 	movi	r5,3580
   1c4d8:	002c1540 	call	2c154 <__mulsi3>
   1c4dc:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
   1c4e0:	e13f7317 	ldw	r4,-564(fp)
   1c4e4:	01492744 	movi	r5,9373
   1c4e8:	002c1540 	call	2c154 <__mulsi3>
   1c4ec:	e0bf7515 	stw	r2,-556(fp)

		tmp12 = z1 - tmp10;
   1c4f0:	e0ff7017 	ldw	r3,-576(fp)
   1c4f4:	e0bf7417 	ldw	r2,-560(fp)
   1c4f8:	1885c83a 	sub	r2,r3,r2
   1c4fc:	e0bf7615 	stw	r2,-552(fp)
		tmp13 = z1 + tmp11;
   1c500:	e0ff7017 	ldw	r3,-576(fp)
   1c504:	e0bf7517 	ldw	r2,-556(fp)
   1c508:	1885883a 	add	r2,r3,r2
   1c50c:	e0bf7715 	stw	r2,-548(fp)
		z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
   1c510:	e0ff7517 	ldw	r3,-556(fp)
   1c514:	e0bf7417 	ldw	r2,-560(fp)
   1c518:	1885c83a 	sub	r2,r3,r2
   1c51c:	1085883a 	add	r2,r2,r2
   1c520:	e0ff7017 	ldw	r3,-576(fp)
   1c524:	1885c83a 	sub	r2,r3,r2
   1c528:	e0bf7015 	stw	r2,-576(fp)

		z4 = z2 - z3;
   1c52c:	e0ff7117 	ldw	r3,-572(fp)
   1c530:	e0bf7217 	ldw	r2,-568(fp)
   1c534:	1885c83a 	sub	r2,r3,r2
   1c538:	e0bf7315 	stw	r2,-564(fp)
		z3 += z2;
   1c53c:	e0ff7217 	ldw	r3,-568(fp)
   1c540:	e0bf7117 	ldw	r2,-572(fp)
   1c544:	1885883a 	add	r2,r3,r2
   1c548:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
   1c54c:	e13f7217 	ldw	r4,-568(fp)
   1c550:	014ab384 	movi	r5,10958
   1c554:	002c1540 	call	2c154 <__mulsi3>
   1c558:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
   1c55c:	e13f7317 	ldw	r4,-564(fp)
   1c560:	01405d84 	movi	r5,374
   1c564:	002c1540 	call	2c154 <__mulsi3>
   1c568:	e0bf7515 	stw	r2,-556(fp)
		z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
   1c56c:	e13f7117 	ldw	r4,-572(fp)
   1c570:	014b84c4 	movi	r5,11795
   1c574:	002c1540 	call	2c154 <__mulsi3>
   1c578:	e0bf7115 	stw	r2,-572(fp)

		tmp20 = tmp13 + tmp10 + tmp11;
   1c57c:	e0ff7717 	ldw	r3,-548(fp)
   1c580:	e0bf7417 	ldw	r2,-560(fp)
   1c584:	1887883a 	add	r3,r3,r2
   1c588:	e0bf7517 	ldw	r2,-556(fp)
   1c58c:	1885883a 	add	r2,r3,r2
   1c590:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp12 - tmp10 + tmp11 + z2;
   1c594:	e0ff7617 	ldw	r3,-552(fp)
   1c598:	e0bf7417 	ldw	r2,-560(fp)
   1c59c:	1887c83a 	sub	r3,r3,r2
   1c5a0:	e0bf7517 	ldw	r2,-556(fp)
   1c5a4:	1887883a 	add	r3,r3,r2
   1c5a8:	e0bf7117 	ldw	r2,-572(fp)
   1c5ac:	1885883a 	add	r2,r3,r2
   1c5b0:	e0bf7915 	stw	r2,-540(fp)

		tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
   1c5b4:	e13f7217 	ldw	r4,-568(fp)
   1c5b8:	01446084 	movi	r5,4482
   1c5bc:	002c1540 	call	2c154 <__mulsi3>
   1c5c0:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
   1c5c4:	e13f7317 	ldw	r4,-564(fp)
   1c5c8:	014331c4 	movi	r5,3271
   1c5cc:	002c1540 	call	2c154 <__mulsi3>
   1c5d0:	e0bf7515 	stw	r2,-556(fp)

		tmp25 = tmp13 - tmp10 - tmp11;
   1c5d4:	e0ff7717 	ldw	r3,-548(fp)
   1c5d8:	e0bf7417 	ldw	r2,-560(fp)
   1c5dc:	1887c83a 	sub	r3,r3,r2
   1c5e0:	e0bf7517 	ldw	r2,-556(fp)
   1c5e4:	1885c83a 	sub	r2,r3,r2
   1c5e8:	e0bf7a15 	stw	r2,-536(fp)
		tmp26 = tmp12 + tmp10 - tmp11 - z2;
   1c5ec:	e0ff7617 	ldw	r3,-552(fp)
   1c5f0:	e0bf7417 	ldw	r2,-560(fp)
   1c5f4:	1887883a 	add	r3,r3,r2
   1c5f8:	e0bf7517 	ldw	r2,-556(fp)
   1c5fc:	1887c83a 	sub	r3,r3,r2
   1c600:	e0bf7117 	ldw	r2,-572(fp)
   1c604:	1885c83a 	sub	r2,r3,r2
   1c608:	e0bf7b15 	stw	r2,-532(fp)

		tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
   1c60c:	e13f7217 	ldw	r4,-568(fp)
   1c610:	01465304 	movi	r5,6476
   1c614:	002c1540 	call	2c154 <__mulsi3>
   1c618:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
   1c61c:	e13f7317 	ldw	r4,-564(fp)
   1c620:	0142d404 	movi	r5,2896
   1c624:	002c1540 	call	2c154 <__mulsi3>
   1c628:	e0bf7515 	stw	r2,-556(fp)

		tmp21 = tmp12 + tmp10 + tmp11;
   1c62c:	e0ff7617 	ldw	r3,-552(fp)
   1c630:	e0bf7417 	ldw	r2,-560(fp)
   1c634:	1887883a 	add	r3,r3,r2
   1c638:	e0bf7517 	ldw	r2,-556(fp)
   1c63c:	1885883a 	add	r2,r3,r2
   1c640:	e0bf7c15 	stw	r2,-528(fp)
		tmp24 = tmp13 - tmp10 + tmp11;
   1c644:	e0ff7717 	ldw	r3,-548(fp)
   1c648:	e0bf7417 	ldw	r2,-560(fp)
   1c64c:	1887c83a 	sub	r3,r3,r2
   1c650:	e0bf7517 	ldw	r2,-556(fp)
   1c654:	1885883a 	add	r2,r3,r2
   1c658:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 += tmp11;
   1c65c:	e0ff7517 	ldw	r3,-556(fp)
   1c660:	e0bf7517 	ldw	r2,-556(fp)
   1c664:	1885883a 	add	r2,r3,r2
   1c668:	e0bf7515 	stw	r2,-556(fp)
		tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
   1c66c:	e0ff7017 	ldw	r3,-576(fp)
   1c670:	e0bf7517 	ldw	r2,-556(fp)
   1c674:	1885883a 	add	r2,r3,r2
   1c678:	e0bf7e15 	stw	r2,-520(fp)
		tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
   1c67c:	e0ff7017 	ldw	r3,-576(fp)
   1c680:	e0bf7517 	ldw	r2,-556(fp)
   1c684:	1887c83a 	sub	r3,r3,r2
   1c688:	e0bf7517 	ldw	r2,-556(fp)
   1c68c:	1885c83a 	sub	r2,r3,r2
   1c690:	e0bf7f15 	stw	r2,-516(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1c694:	e0bf6d17 	ldw	r2,-588(fp)
   1c698:	10800104 	addi	r2,r2,4
   1c69c:	10800017 	ldw	r2,0(r2)
   1c6a0:	e0bf7015 	stw	r2,-576(fp)
		z2 = (INT32) wsptr[3];
   1c6a4:	e0bf6d17 	ldw	r2,-588(fp)
   1c6a8:	10800304 	addi	r2,r2,12
   1c6ac:	10800017 	ldw	r2,0(r2)
   1c6b0:	e0bf7115 	stw	r2,-572(fp)
		z4 = (INT32) wsptr[5];
   1c6b4:	e0bf6d17 	ldw	r2,-588(fp)
   1c6b8:	10800504 	addi	r2,r2,20
   1c6bc:	10800017 	ldw	r2,0(r2)
   1c6c0:	e0bf7315 	stw	r2,-564(fp)
		z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
   1c6c4:	e13f7317 	ldw	r4,-564(fp)
   1c6c8:	0149cc44 	movi	r5,10033
   1c6cc:	002c1540 	call	2c154 <__mulsi3>
   1c6d0:	e0bf7215 	stw	r2,-568(fp)
		z4 = (INT32) wsptr[7];
   1c6d4:	e0bf6d17 	ldw	r2,-588(fp)
   1c6d8:	10800704 	addi	r2,r2,28
   1c6dc:	10800017 	ldw	r2,0(r2)
   1c6e0:	e0bf7315 	stw	r2,-564(fp)

		tmp13 = z2 - z4;
   1c6e4:	e0ff7117 	ldw	r3,-572(fp)
   1c6e8:	e0bf7317 	ldw	r2,-564(fp)
   1c6ec:	1885c83a 	sub	r2,r3,r2
   1c6f0:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
   1c6f4:	e0ff7017 	ldw	r3,-576(fp)
   1c6f8:	e0bf7717 	ldw	r2,-548(fp)
   1c6fc:	1885883a 	add	r2,r3,r2
   1c700:	1009883a 	mov	r4,r2
   1c704:	0146a684 	movi	r5,6810
   1c708:	002c1540 	call	2c154 <__mulsi3>
   1c70c:	e0bf8015 	stw	r2,-512(fp)
		tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
   1c710:	e13f7017 	ldw	r4,-576(fp)
   1c714:	01441c44 	movi	r5,4209
   1c718:	002c1540 	call	2c154 <__mulsi3>
   1c71c:	1007883a 	mov	r3,r2
   1c720:	e0bf8017 	ldw	r2,-512(fp)
   1c724:	1885883a 	add	r2,r3,r2
   1c728:	e0bf7515 	stw	r2,-556(fp)
		tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
   1c72c:	e13f7717 	ldw	r4,-548(fp)
   1c730:	016e9704 	movi	r5,-17828
   1c734:	002c1540 	call	2c154 <__mulsi3>
   1c738:	1007883a 	mov	r3,r2
   1c73c:	e0bf8017 	ldw	r2,-512(fp)
   1c740:	1885883a 	add	r2,r3,r2
   1c744:	e0bf8115 	stw	r2,-508(fp)

		tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
   1c748:	e13f7117 	ldw	r4,-572(fp)
   1c74c:	01795984 	movi	r5,-6810
   1c750:	002c1540 	call	2c154 <__mulsi3>
   1c754:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
   1c758:	e13f7117 	ldw	r4,-572(fp)
   1c75c:	01753d84 	movi	r5,-11018
   1c760:	002c1540 	call	2c154 <__mulsi3>
   1c764:	e0bf8015 	stw	r2,-512(fp)
		z2 = z1 - z4;
   1c768:	e0ff7017 	ldw	r3,-576(fp)
   1c76c:	e0bf7317 	ldw	r2,-564(fp)
   1c770:	1885c83a 	sub	r2,r3,r2
   1c774:	e0bf7115 	stw	r2,-572(fp)
		tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
   1c778:	e13f7117 	ldw	r4,-572(fp)
   1c77c:	014b4084 	movi	r5,11522
   1c780:	002c1540 	call	2c154 <__mulsi3>
   1c784:	1007883a 	mov	r3,r2
   1c788:	e0bf7217 	ldw	r2,-568(fp)
   1c78c:	1885883a 	add	r2,r3,r2
   1c790:	e0bf7615 	stw	r2,-552(fp)

		tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
   1c794:	e13f7317 	ldw	r4,-564(fp)
   1c798:	0153a8c4 	movi	r5,20131
   1c79c:	002c1540 	call	2c154 <__mulsi3>
   1c7a0:	1007883a 	mov	r3,r2
   1c7a4:	e0bf7617 	ldw	r2,-552(fp)
   1c7a8:	1887883a 	add	r3,r3,r2
   1c7ac:	e0bf8017 	ldw	r2,-512(fp)
   1c7b0:	1885c83a 	sub	r2,r3,r2
   1c7b4:	e0bf7415 	stw	r2,-560(fp)
		tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
   1c7b8:	e13f7017 	ldw	r4,-576(fp)
   1c7bc:	017719c4 	movi	r5,-9113
   1c7c0:	002c1540 	call	2c154 <__mulsi3>
   1c7c4:	1007883a 	mov	r3,r2
   1c7c8:	e0bf7617 	ldw	r2,-552(fp)
   1c7cc:	1887883a 	add	r3,r3,r2
   1c7d0:	e0bf7717 	ldw	r2,-548(fp)
   1c7d4:	1885883a 	add	r2,r3,r2
   1c7d8:	e0bf8215 	stw	r2,-504(fp)
		tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
   1c7dc:	e13f7117 	ldw	r4,-572(fp)
   1c7e0:	0149cc44 	movi	r5,10033
   1c7e4:	002c1540 	call	2c154 <__mulsi3>
   1c7e8:	1007883a 	mov	r3,r2
   1c7ec:	e0bf7217 	ldw	r2,-568(fp)
   1c7f0:	1885c83a 	sub	r2,r3,r2
   1c7f4:	e0bf7615 	stw	r2,-552(fp)
		z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
   1c7f8:	e0ff7017 	ldw	r3,-576(fp)
   1c7fc:	e0bf7317 	ldw	r2,-564(fp)
   1c800:	1885883a 	add	r2,r3,r2
   1c804:	1009883a 	mov	r4,r2
   1c808:	01449a04 	movi	r5,4712
   1c80c:	002c1540 	call	2c154 <__mulsi3>
   1c810:	e0bf7115 	stw	r2,-572(fp)
		tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
   1c814:	e13f7017 	ldw	r4,-576(fp)
   1c818:	0143ce44 	movi	r5,3897
   1c81c:	002c1540 	call	2c154 <__mulsi3>
   1c820:	1007883a 	mov	r3,r2
   1c824:	e0bf7117 	ldw	r2,-572(fp)
   1c828:	1887883a 	add	r3,r3,r2
   1c82c:	e0bf7217 	ldw	r2,-568(fp)
   1c830:	1885c83a 	sub	r2,r3,r2
   1c834:	e0ff7717 	ldw	r3,-548(fp)
   1c838:	1885883a 	add	r2,r3,r2
   1c83c:	e0bf7715 	stw	r2,-548(fp)
		tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
   1c840:	e13f7317 	ldw	r4,-564(fp)
   1c844:	01790bc4 	movi	r5,-7121
   1c848:	002c1540 	call	2c154 <__mulsi3>
   1c84c:	1007883a 	mov	r3,r2
   1c850:	e0bf7117 	ldw	r2,-572(fp)
   1c854:	1887883a 	add	r3,r3,r2
   1c858:	e0bf7217 	ldw	r2,-568(fp)
   1c85c:	1885883a 	add	r2,r3,r2
   1c860:	e0ff8017 	ldw	r3,-512(fp)
   1c864:	1885883a 	add	r2,r3,r2
   1c868:	e0bf8015 	stw	r2,-512(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   1c86c:	e0ff7817 	ldw	r3,-544(fp)
   1c870:	e0bf7417 	ldw	r2,-560(fp)
   1c874:	1885883a 	add	r2,r3,r2
   1c878:	1005d4ba 	srai	r2,r2,18
   1c87c:	1080ffcc 	andi	r2,r2,1023
   1c880:	e0ff6f17 	ldw	r3,-580(fp)
   1c884:	1885883a 	add	r2,r3,r2
   1c888:	10c00003 	ldbu	r3,0(r2)
   1c88c:	e0bf8317 	ldw	r2,-500(fp)
   1c890:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   1c894:	e0bf8317 	ldw	r2,-500(fp)
   1c898:	10800384 	addi	r2,r2,14
   1c89c:	e13f7817 	ldw	r4,-544(fp)
   1c8a0:	e0ff7417 	ldw	r3,-560(fp)
   1c8a4:	20c7c83a 	sub	r3,r4,r3
   1c8a8:	1807d4ba 	srai	r3,r3,18
   1c8ac:	18c0ffcc 	andi	r3,r3,1023
   1c8b0:	e13f6f17 	ldw	r4,-580(fp)
   1c8b4:	20c7883a 	add	r3,r4,r3
   1c8b8:	18c00003 	ldbu	r3,0(r3)
   1c8bc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   1c8c0:	e0bf8317 	ldw	r2,-500(fp)
   1c8c4:	10800044 	addi	r2,r2,1
   1c8c8:	e13f7c17 	ldw	r4,-528(fp)
   1c8cc:	e0ff7517 	ldw	r3,-556(fp)
   1c8d0:	20c7883a 	add	r3,r4,r3
   1c8d4:	1807d4ba 	srai	r3,r3,18
   1c8d8:	18c0ffcc 	andi	r3,r3,1023
   1c8dc:	e13f6f17 	ldw	r4,-580(fp)
   1c8e0:	20c7883a 	add	r3,r4,r3
   1c8e4:	18c00003 	ldbu	r3,0(r3)
   1c8e8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   1c8ec:	e0bf8317 	ldw	r2,-500(fp)
   1c8f0:	10800344 	addi	r2,r2,13
   1c8f4:	e13f7c17 	ldw	r4,-528(fp)
   1c8f8:	e0ff7517 	ldw	r3,-556(fp)
   1c8fc:	20c7c83a 	sub	r3,r4,r3
   1c900:	1807d4ba 	srai	r3,r3,18
   1c904:	18c0ffcc 	andi	r3,r3,1023
   1c908:	e13f6f17 	ldw	r4,-580(fp)
   1c90c:	20c7883a 	add	r3,r4,r3
   1c910:	18c00003 	ldbu	r3,0(r3)
   1c914:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   1c918:	e0bf8317 	ldw	r2,-500(fp)
   1c91c:	10800084 	addi	r2,r2,2
   1c920:	e13f7e17 	ldw	r4,-520(fp)
   1c924:	e0ff7617 	ldw	r3,-552(fp)
   1c928:	20c7883a 	add	r3,r4,r3
   1c92c:	1807d4ba 	srai	r3,r3,18
   1c930:	18c0ffcc 	andi	r3,r3,1023
   1c934:	e13f6f17 	ldw	r4,-580(fp)
   1c938:	20c7883a 	add	r3,r4,r3
   1c93c:	18c00003 	ldbu	r3,0(r3)
   1c940:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   1c944:	e0bf8317 	ldw	r2,-500(fp)
   1c948:	10800304 	addi	r2,r2,12
   1c94c:	e13f7e17 	ldw	r4,-520(fp)
   1c950:	e0ff7617 	ldw	r3,-552(fp)
   1c954:	20c7c83a 	sub	r3,r4,r3
   1c958:	1807d4ba 	srai	r3,r3,18
   1c95c:	18c0ffcc 	andi	r3,r3,1023
   1c960:	e13f6f17 	ldw	r4,-580(fp)
   1c964:	20c7883a 	add	r3,r4,r3
   1c968:	18c00003 	ldbu	r3,0(r3)
   1c96c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1c970:	e0bf8317 	ldw	r2,-500(fp)
   1c974:	108000c4 	addi	r2,r2,3
   1c978:	e13f7917 	ldw	r4,-540(fp)
   1c97c:	e0ff7717 	ldw	r3,-548(fp)
   1c980:	20c7883a 	add	r3,r4,r3
   1c984:	1807d4ba 	srai	r3,r3,18
   1c988:	18c0ffcc 	andi	r3,r3,1023
   1c98c:	e13f6f17 	ldw	r4,-580(fp)
   1c990:	20c7883a 	add	r3,r4,r3
   1c994:	18c00003 	ldbu	r3,0(r3)
   1c998:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1c99c:	e0bf8317 	ldw	r2,-500(fp)
   1c9a0:	108002c4 	addi	r2,r2,11
   1c9a4:	e13f7917 	ldw	r4,-540(fp)
   1c9a8:	e0ff7717 	ldw	r3,-548(fp)
   1c9ac:	20c7c83a 	sub	r3,r4,r3
   1c9b0:	1807d4ba 	srai	r3,r3,18
   1c9b4:	18c0ffcc 	andi	r3,r3,1023
   1c9b8:	e13f6f17 	ldw	r4,-580(fp)
   1c9bc:	20c7883a 	add	r3,r4,r3
   1c9c0:	18c00003 	ldbu	r3,0(r3)
   1c9c4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1c9c8:	e0bf8317 	ldw	r2,-500(fp)
   1c9cc:	10800104 	addi	r2,r2,4
   1c9d0:	e13f7d17 	ldw	r4,-524(fp)
   1c9d4:	e0ff8117 	ldw	r3,-508(fp)
   1c9d8:	20c7883a 	add	r3,r4,r3
   1c9dc:	1807d4ba 	srai	r3,r3,18
   1c9e0:	18c0ffcc 	andi	r3,r3,1023
   1c9e4:	e13f6f17 	ldw	r4,-580(fp)
   1c9e8:	20c7883a 	add	r3,r4,r3
   1c9ec:	18c00003 	ldbu	r3,0(r3)
   1c9f0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1c9f4:	e0bf8317 	ldw	r2,-500(fp)
   1c9f8:	10800284 	addi	r2,r2,10
   1c9fc:	e13f7d17 	ldw	r4,-524(fp)
   1ca00:	e0ff8117 	ldw	r3,-508(fp)
   1ca04:	20c7c83a 	sub	r3,r4,r3
   1ca08:	1807d4ba 	srai	r3,r3,18
   1ca0c:	18c0ffcc 	andi	r3,r3,1023
   1ca10:	e13f6f17 	ldw	r4,-580(fp)
   1ca14:	20c7883a 	add	r3,r4,r3
   1ca18:	18c00003 	ldbu	r3,0(r3)
   1ca1c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1ca20:	e0bf8317 	ldw	r2,-500(fp)
   1ca24:	10800144 	addi	r2,r2,5
   1ca28:	e13f7a17 	ldw	r4,-536(fp)
   1ca2c:	e0ff8017 	ldw	r3,-512(fp)
   1ca30:	20c7883a 	add	r3,r4,r3
   1ca34:	1807d4ba 	srai	r3,r3,18
   1ca38:	18c0ffcc 	andi	r3,r3,1023
   1ca3c:	e13f6f17 	ldw	r4,-580(fp)
   1ca40:	20c7883a 	add	r3,r4,r3
   1ca44:	18c00003 	ldbu	r3,0(r3)
   1ca48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1ca4c:	e0bf8317 	ldw	r2,-500(fp)
   1ca50:	10800244 	addi	r2,r2,9
   1ca54:	e13f7a17 	ldw	r4,-536(fp)
   1ca58:	e0ff8017 	ldw	r3,-512(fp)
   1ca5c:	20c7c83a 	sub	r3,r4,r3
   1ca60:	1807d4ba 	srai	r3,r3,18
   1ca64:	18c0ffcc 	andi	r3,r3,1023
   1ca68:	e13f6f17 	ldw	r4,-580(fp)
   1ca6c:	20c7883a 	add	r3,r4,r3
   1ca70:	18c00003 	ldbu	r3,0(r3)
   1ca74:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
   1ca78:	e0bf8317 	ldw	r2,-500(fp)
   1ca7c:	10800184 	addi	r2,r2,6
   1ca80:	e13f7b17 	ldw	r4,-532(fp)
   1ca84:	e0ff8217 	ldw	r3,-504(fp)
   1ca88:	20c7883a 	add	r3,r4,r3
   1ca8c:	1807d4ba 	srai	r3,r3,18
   1ca90:	18c0ffcc 	andi	r3,r3,1023
   1ca94:	e13f6f17 	ldw	r4,-580(fp)
   1ca98:	20c7883a 	add	r3,r4,r3
   1ca9c:	18c00003 	ldbu	r3,0(r3)
   1caa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
   1caa4:	e0bf8317 	ldw	r2,-500(fp)
   1caa8:	10800204 	addi	r2,r2,8
   1caac:	e13f7b17 	ldw	r4,-532(fp)
   1cab0:	e0ff8217 	ldw	r3,-504(fp)
   1cab4:	20c7c83a 	sub	r3,r4,r3
   1cab8:	1807d4ba 	srai	r3,r3,18
   1cabc:	18c0ffcc 	andi	r3,r3,1023
   1cac0:	e13f6f17 	ldw	r4,-580(fp)
   1cac4:	20c7883a 	add	r3,r4,r3
   1cac8:	18c00003 	ldbu	r3,0(r3)
   1cacc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
   1cad0:	e0bf8317 	ldw	r2,-500(fp)
   1cad4:	108001c4 	addi	r2,r2,7
   1cad8:	e0ff7f17 	ldw	r3,-516(fp)
   1cadc:	1807d4ba 	srai	r3,r3,18
   1cae0:	18c0ffcc 	andi	r3,r3,1023
   1cae4:	e13f6f17 	ldw	r4,-580(fp)
   1cae8:	20c7883a 	add	r3,r4,r3
   1caec:	18c00003 	ldbu	r3,0(r3)
   1caf0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1caf4:	e0bf6d17 	ldw	r2,-588(fp)
   1caf8:	10800804 	addi	r2,r2,32
   1cafc:	e0bf6d15 	stw	r2,-588(fp)
	}

	/* Pass 2: process 15 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 15; ctr++) {
   1cb00:	e0bf6e17 	ldw	r2,-584(fp)
   1cb04:	10800044 	addi	r2,r2,1
   1cb08:	e0bf6e15 	stw	r2,-584(fp)
   1cb0c:	e0bf6e17 	ldw	r2,-584(fp)
   1cb10:	108003d0 	cmplti	r2,r2,15
   1cb14:	103e521e 	bne	r2,zero,1c460 <jpeg_idct_15x15+0x744>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1cb18:	e037883a 	mov	sp,fp
   1cb1c:	dfc00117 	ldw	ra,4(sp)
   1cb20:	df000017 	ldw	fp,0(sp)
   1cb24:	dec00204 	addi	sp,sp,8
   1cb28:	f800283a 	ret

0001cb2c <jpeg_idct_16x16>:

GLOBAL(void)
	jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1cb2c:	deff5f04 	addi	sp,sp,-644
   1cb30:	dfc0a015 	stw	ra,640(sp)
   1cb34:	df009f15 	stw	fp,636(sp)
   1cb38:	dc009e15 	stw	r16,632(sp)
   1cb3c:	df009e04 	addi	fp,sp,632
   1cb40:	e13ffc15 	stw	r4,-16(fp)
   1cb44:	e17ffd15 	stw	r5,-12(fp)
   1cb48:	e1bffe15 	stw	r6,-8(fp)
   1cb4c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1cb50:	e0bffc17 	ldw	r2,-16(fp)
   1cb54:	10804917 	ldw	r2,292(r2)
   1cb58:	10802004 	addi	r2,r2,128
   1cb5c:	e0bf6615 	stw	r2,-616(fp)
	int workspace[8*16];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   1cb60:	e0bffe17 	ldw	r2,-8(fp)
   1cb64:	e0bf6215 	stw	r2,-632(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1cb68:	e0bffd17 	ldw	r2,-12(fp)
   1cb6c:	10801517 	ldw	r2,84(r2)
   1cb70:	e0bf6315 	stw	r2,-628(fp)
	wsptr = workspace;
   1cb74:	e0bf7c04 	addi	r2,fp,-528
   1cb78:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1cb7c:	e03f6515 	stw	zero,-620(fp)
   1cb80:	0001f906 	br	1d368 <jpeg_idct_16x16+0x83c>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1cb84:	e0bf6217 	ldw	r2,-632(fp)
   1cb88:	1080000b 	ldhu	r2,0(r2)
   1cb8c:	10ffffcc 	andi	r3,r2,65535
   1cb90:	18e0001c 	xori	r3,r3,32768
   1cb94:	18e00004 	addi	r3,r3,-32768
   1cb98:	e0bf6317 	ldw	r2,-628(fp)
   1cb9c:	10800017 	ldw	r2,0(r2)
   1cba0:	1809883a 	mov	r4,r3
   1cba4:	100b883a 	mov	r5,r2
   1cba8:	002c1540 	call	2c154 <__mulsi3>
   1cbac:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
   1cbb0:	e0bf6717 	ldw	r2,-612(fp)
   1cbb4:	1004937a 	slli	r2,r2,13
   1cbb8:	e0bf6715 	stw	r2,-612(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
   1cbbc:	e0bf6717 	ldw	r2,-612(fp)
   1cbc0:	10810004 	addi	r2,r2,1024
   1cbc4:	e0bf6715 	stw	r2,-612(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1cbc8:	e0bf6217 	ldw	r2,-632(fp)
   1cbcc:	10801004 	addi	r2,r2,64
   1cbd0:	1080000b 	ldhu	r2,0(r2)
   1cbd4:	10ffffcc 	andi	r3,r2,65535
   1cbd8:	18e0001c 	xori	r3,r3,32768
   1cbdc:	18e00004 	addi	r3,r3,-32768
   1cbe0:	e0bf6317 	ldw	r2,-628(fp)
   1cbe4:	10802004 	addi	r2,r2,128
   1cbe8:	10800017 	ldw	r2,0(r2)
   1cbec:	1809883a 	mov	r4,r3
   1cbf0:	100b883a 	mov	r5,r2
   1cbf4:	002c1540 	call	2c154 <__mulsi3>
   1cbf8:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
   1cbfc:	e13f6817 	ldw	r4,-608(fp)
   1cc00:	014a73c4 	movi	r5,10703
   1cc04:	002c1540 	call	2c154 <__mulsi3>
   1cc08:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
   1cc0c:	e13f6817 	ldw	r4,-608(fp)
   1cc10:	01445444 	movi	r5,4433
   1cc14:	002c1540 	call	2c154 <__mulsi3>
   1cc18:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
   1cc1c:	e0ff6717 	ldw	r3,-612(fp)
   1cc20:	e0bf6917 	ldw	r2,-604(fp)
   1cc24:	1885883a 	add	r2,r3,r2
   1cc28:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
   1cc2c:	e0ff6717 	ldw	r3,-612(fp)
   1cc30:	e0bf6917 	ldw	r2,-604(fp)
   1cc34:	1885c83a 	sub	r2,r3,r2
   1cc38:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
   1cc3c:	e0ff6717 	ldw	r3,-612(fp)
   1cc40:	e0bf6a17 	ldw	r2,-600(fp)
   1cc44:	1885883a 	add	r2,r3,r2
   1cc48:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
   1cc4c:	e0ff6717 	ldw	r3,-612(fp)
   1cc50:	e0bf6a17 	ldw	r2,-600(fp)
   1cc54:	1885c83a 	sub	r2,r3,r2
   1cc58:	e0bf6e15 	stw	r2,-584(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1cc5c:	e0bf6217 	ldw	r2,-632(fp)
   1cc60:	10800804 	addi	r2,r2,32
   1cc64:	1080000b 	ldhu	r2,0(r2)
   1cc68:	10ffffcc 	andi	r3,r2,65535
   1cc6c:	18e0001c 	xori	r3,r3,32768
   1cc70:	18e00004 	addi	r3,r3,-32768
   1cc74:	e0bf6317 	ldw	r2,-628(fp)
   1cc78:	10801004 	addi	r2,r2,64
   1cc7c:	10800017 	ldw	r2,0(r2)
   1cc80:	1809883a 	mov	r4,r3
   1cc84:	100b883a 	mov	r5,r2
   1cc88:	002c1540 	call	2c154 <__mulsi3>
   1cc8c:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1cc90:	e0bf6217 	ldw	r2,-632(fp)
   1cc94:	10801804 	addi	r2,r2,96
   1cc98:	1080000b 	ldhu	r2,0(r2)
   1cc9c:	10ffffcc 	andi	r3,r2,65535
   1cca0:	18e0001c 	xori	r3,r3,32768
   1cca4:	18e00004 	addi	r3,r3,-32768
   1cca8:	e0bf6317 	ldw	r2,-628(fp)
   1ccac:	10803004 	addi	r2,r2,192
   1ccb0:	10800017 	ldw	r2,0(r2)
   1ccb4:	1809883a 	mov	r4,r3
   1ccb8:	100b883a 	mov	r5,r2
   1ccbc:	002c1540 	call	2c154 <__mulsi3>
   1ccc0:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
   1ccc4:	e0ff6817 	ldw	r3,-608(fp)
   1ccc8:	e0bf6f17 	ldw	r2,-580(fp)
   1cccc:	1885c83a 	sub	r2,r3,r2
   1ccd0:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
   1ccd4:	e13f7017 	ldw	r4,-576(fp)
   1ccd8:	01423504 	movi	r5,2260
   1ccdc:	002c1540 	call	2c154 <__mulsi3>
   1cce0:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
   1cce4:	e13f7017 	ldw	r4,-576(fp)
   1cce8:	014b18c4 	movi	r5,11363
   1ccec:	002c1540 	call	2c154 <__mulsi3>
   1ccf0:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
   1ccf4:	e13f6f17 	ldw	r4,-580(fp)
   1ccf8:	015480c4 	movi	r5,20995
   1ccfc:	002c1540 	call	2c154 <__mulsi3>
   1cd00:	1007883a 	mov	r3,r2
   1cd04:	e0bf7017 	ldw	r2,-576(fp)
   1cd08:	1885883a 	add	r2,r3,r2
   1cd0c:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
   1cd10:	e13f6817 	ldw	r4,-608(fp)
   1cd14:	01473344 	movi	r5,7373
   1cd18:	002c1540 	call	2c154 <__mulsi3>
   1cd1c:	1007883a 	mov	r3,r2
   1cd20:	e0bf7117 	ldw	r2,-572(fp)
   1cd24:	1885883a 	add	r2,r3,r2
   1cd28:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
   1cd2c:	e13f6817 	ldw	r4,-608(fp)
   1cd30:	017b3084 	movi	r5,-4926
   1cd34:	002c1540 	call	2c154 <__mulsi3>
   1cd38:	1007883a 	mov	r3,r2
   1cd3c:	e0bf7017 	ldw	r2,-576(fp)
   1cd40:	1885883a 	add	r2,r3,r2
   1cd44:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
   1cd48:	e13f6f17 	ldw	r4,-580(fp)
   1cd4c:	017bec04 	movi	r5,-4176
   1cd50:	002c1540 	call	2c154 <__mulsi3>
   1cd54:	1007883a 	mov	r3,r2
   1cd58:	e0bf7117 	ldw	r2,-572(fp)
   1cd5c:	1885883a 	add	r2,r3,r2
   1cd60:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
   1cd64:	e0ff6b17 	ldw	r3,-596(fp)
   1cd68:	e0bf6717 	ldw	r2,-612(fp)
   1cd6c:	1885883a 	add	r2,r3,r2
   1cd70:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
   1cd74:	e0ff6b17 	ldw	r3,-596(fp)
   1cd78:	e0bf6717 	ldw	r2,-612(fp)
   1cd7c:	1885c83a 	sub	r2,r3,r2
   1cd80:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
   1cd84:	e0ff6d17 	ldw	r3,-588(fp)
   1cd88:	e0bf6917 	ldw	r2,-604(fp)
   1cd8c:	1885883a 	add	r2,r3,r2
   1cd90:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
   1cd94:	e0ff6d17 	ldw	r3,-588(fp)
   1cd98:	e0bf6917 	ldw	r2,-604(fp)
   1cd9c:	1885c83a 	sub	r2,r3,r2
   1cda0:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
   1cda4:	e0ff6e17 	ldw	r3,-584(fp)
   1cda8:	e0bf6a17 	ldw	r2,-600(fp)
   1cdac:	1885883a 	add	r2,r3,r2
   1cdb0:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
   1cdb4:	e0ff6e17 	ldw	r3,-584(fp)
   1cdb8:	e0bf6a17 	ldw	r2,-600(fp)
   1cdbc:	1885c83a 	sub	r2,r3,r2
   1cdc0:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
   1cdc4:	e0ff6c17 	ldw	r3,-592(fp)
   1cdc8:	e0bf7217 	ldw	r2,-568(fp)
   1cdcc:	1885883a 	add	r2,r3,r2
   1cdd0:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
   1cdd4:	e0ff6c17 	ldw	r3,-592(fp)
   1cdd8:	e0bf7217 	ldw	r2,-568(fp)
   1cddc:	1885c83a 	sub	r2,r3,r2
   1cde0:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1cde4:	e0bf6217 	ldw	r2,-632(fp)
   1cde8:	10800404 	addi	r2,r2,16
   1cdec:	1080000b 	ldhu	r2,0(r2)
   1cdf0:	10ffffcc 	andi	r3,r2,65535
   1cdf4:	18e0001c 	xori	r3,r3,32768
   1cdf8:	18e00004 	addi	r3,r3,-32768
   1cdfc:	e0bf6317 	ldw	r2,-628(fp)
   1ce00:	10800804 	addi	r2,r2,32
   1ce04:	10800017 	ldw	r2,0(r2)
   1ce08:	1809883a 	mov	r4,r3
   1ce0c:	100b883a 	mov	r5,r2
   1ce10:	002c1540 	call	2c154 <__mulsi3>
   1ce14:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1ce18:	e0bf6217 	ldw	r2,-632(fp)
   1ce1c:	10800c04 	addi	r2,r2,48
   1ce20:	1080000b 	ldhu	r2,0(r2)
   1ce24:	10ffffcc 	andi	r3,r2,65535
   1ce28:	18e0001c 	xori	r3,r3,32768
   1ce2c:	18e00004 	addi	r3,r3,-32768
   1ce30:	e0bf6317 	ldw	r2,-628(fp)
   1ce34:	10801804 	addi	r2,r2,96
   1ce38:	10800017 	ldw	r2,0(r2)
   1ce3c:	1809883a 	mov	r4,r3
   1ce40:	100b883a 	mov	r5,r2
   1ce44:	002c1540 	call	2c154 <__mulsi3>
   1ce48:	e0bf6f15 	stw	r2,-580(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1ce4c:	e0bf6217 	ldw	r2,-632(fp)
   1ce50:	10801404 	addi	r2,r2,80
   1ce54:	1080000b 	ldhu	r2,0(r2)
   1ce58:	10ffffcc 	andi	r3,r2,65535
   1ce5c:	18e0001c 	xori	r3,r3,32768
   1ce60:	18e00004 	addi	r3,r3,-32768
   1ce64:	e0bf6317 	ldw	r2,-628(fp)
   1ce68:	10802804 	addi	r2,r2,160
   1ce6c:	10800017 	ldw	r2,0(r2)
   1ce70:	1809883a 	mov	r4,r3
   1ce74:	100b883a 	mov	r5,r2
   1ce78:	002c1540 	call	2c154 <__mulsi3>
   1ce7c:	e0bf7015 	stw	r2,-576(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1ce80:	e0bf6217 	ldw	r2,-632(fp)
   1ce84:	10801c04 	addi	r2,r2,112
   1ce88:	1080000b 	ldhu	r2,0(r2)
   1ce8c:	10ffffcc 	andi	r3,r2,65535
   1ce90:	18e0001c 	xori	r3,r3,32768
   1ce94:	18e00004 	addi	r3,r3,-32768
   1ce98:	e0bf6317 	ldw	r2,-628(fp)
   1ce9c:	10803804 	addi	r2,r2,224
   1cea0:	10800017 	ldw	r2,0(r2)
   1cea4:	1809883a 	mov	r4,r3
   1cea8:	100b883a 	mov	r5,r2
   1ceac:	002c1540 	call	2c154 <__mulsi3>
   1ceb0:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
   1ceb4:	e0ff6817 	ldw	r3,-608(fp)
   1ceb8:	e0bf7017 	ldw	r2,-576(fp)
   1cebc:	1885883a 	add	r2,r3,r2
   1cec0:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
   1cec4:	e0ff6817 	ldw	r3,-608(fp)
   1cec8:	e0bf6f17 	ldw	r2,-580(fp)
   1cecc:	1885883a 	add	r2,r3,r2
   1ced0:	1009883a 	mov	r4,r2
   1ced4:	014ad384 	movi	r5,11086
   1ced8:	002c1540 	call	2c154 <__mulsi3>
   1cedc:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
   1cee0:	e13f6c17 	ldw	r4,-592(fp)
   1cee4:	0149fa44 	movi	r5,10217
   1cee8:	002c1540 	call	2c154 <__mulsi3>
   1ceec:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
   1cef0:	e0ff6817 	ldw	r3,-608(fp)
   1cef4:	e0bf7117 	ldw	r2,-572(fp)
   1cef8:	1885883a 	add	r2,r3,r2
   1cefc:	1009883a 	mov	r4,r2
   1cf00:	0148bf04 	movi	r5,8956
   1cf04:	002c1540 	call	2c154 <__mulsi3>
   1cf08:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
   1cf0c:	e0ff6817 	ldw	r3,-608(fp)
   1cf10:	e0bf7117 	ldw	r2,-572(fp)
   1cf14:	1885c83a 	sub	r2,r3,r2
   1cf18:	1009883a 	mov	r4,r2
   1cf1c:	01472d84 	movi	r5,7350
   1cf20:	002c1540 	call	2c154 <__mulsi3>
   1cf24:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
   1cf28:	e13f6c17 	ldw	r4,-592(fp)
   1cf2c:	01455544 	movi	r5,5461
   1cf30:	002c1540 	call	2c154 <__mulsi3>
   1cf34:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
   1cf38:	e0ff6817 	ldw	r3,-608(fp)
   1cf3c:	e0bf6f17 	ldw	r2,-580(fp)
   1cf40:	1885c83a 	sub	r2,r3,r2
   1cf44:	1009883a 	mov	r4,r2
   1cf48:	014348c4 	movi	r5,3363
   1cf4c:	002c1540 	call	2c154 <__mulsi3>
   1cf50:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
   1cf54:	e0ff6917 	ldw	r3,-604(fp)
   1cf58:	e0bf6a17 	ldw	r2,-600(fp)
   1cf5c:	1887883a 	add	r3,r3,r2
   1cf60:	e0bf7217 	ldw	r2,-568(fp)
   1cf64:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
   1cf68:	e13f6817 	ldw	r4,-608(fp)
   1cf6c:	016db584 	movi	r5,-18730
   1cf70:	002c1540 	call	2c154 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
   1cf74:	8085883a 	add	r2,r16,r2
   1cf78:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1cf7c:	e0ff6b17 	ldw	r3,-596(fp)
   1cf80:	e0bf6c17 	ldw	r2,-592(fp)
   1cf84:	1887883a 	add	r3,r3,r2
   1cf88:	e0bf6d17 	ldw	r2,-588(fp)
   1cf8c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
   1cf90:	e13f6817 	ldw	r4,-608(fp)
   1cf94:	01715084 	movi	r5,-15038
   1cf98:	002c1540 	call	2c154 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1cf9c:	8085883a 	add	r2,r16,r2
   1cfa0:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
   1cfa4:	e0ff6f17 	ldw	r3,-580(fp)
   1cfa8:	e0bf7017 	ldw	r2,-576(fp)
   1cfac:	1885883a 	add	r2,r3,r2
   1cfb0:	1009883a 	mov	r4,r2
   1cfb4:	01411c04 	movi	r5,1136
   1cfb8:	002c1540 	call	2c154 <__mulsi3>
   1cfbc:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
   1cfc0:	e13f6f17 	ldw	r4,-580(fp)
   1cfc4:	01409344 	movi	r5,589
   1cfc8:	002c1540 	call	2c154 <__mulsi3>
   1cfcc:	1007883a 	mov	r3,r2
   1cfd0:	e0bf6817 	ldw	r2,-608(fp)
   1cfd4:	1885883a 	add	r2,r3,r2
   1cfd8:	e0ff6917 	ldw	r3,-604(fp)
   1cfdc:	1885883a 	add	r2,r3,r2
   1cfe0:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
   1cfe4:	e13f7017 	ldw	r4,-576(fp)
   1cfe8:	0176fe84 	movi	r5,-9222
   1cfec:	002c1540 	call	2c154 <__mulsi3>
   1cff0:	1007883a 	mov	r3,r2
   1cff4:	e0bf6817 	ldw	r2,-608(fp)
   1cff8:	1885883a 	add	r2,r3,r2
   1cffc:	e0ff6a17 	ldw	r3,-600(fp)
   1d000:	1885883a 	add	r2,r3,r2
   1d004:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
   1d008:	e0ff7017 	ldw	r3,-576(fp)
   1d00c:	e0bf6f17 	ldw	r2,-580(fp)
   1d010:	1885c83a 	sub	r2,r3,r2
   1d014:	1009883a 	mov	r4,r2
   1d018:	014b4244 	movi	r5,11529
   1d01c:	002c1540 	call	2c154 <__mulsi3>
   1d020:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
   1d024:	e13f7017 	ldw	r4,-576(fp)
   1d028:	0179de84 	movi	r5,-6278
   1d02c:	002c1540 	call	2c154 <__mulsi3>
   1d030:	1007883a 	mov	r3,r2
   1d034:	e0bf6817 	ldw	r2,-608(fp)
   1d038:	1885883a 	add	r2,r3,r2
   1d03c:	e0ff6c17 	ldw	r3,-592(fp)
   1d040:	1885883a 	add	r2,r3,r2
   1d044:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
   1d048:	e13f6f17 	ldw	r4,-580(fp)
   1d04c:	014fc684 	movi	r5,16154
   1d050:	002c1540 	call	2c154 <__mulsi3>
   1d054:	1007883a 	mov	r3,r2
   1d058:	e0bf6817 	ldw	r2,-608(fp)
   1d05c:	1885883a 	add	r2,r3,r2
   1d060:	e0ff6d17 	ldw	r3,-588(fp)
   1d064:	1885883a 	add	r2,r3,r2
   1d068:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
   1d06c:	e0ff6f17 	ldw	r3,-580(fp)
   1d070:	e0bf7117 	ldw	r2,-572(fp)
   1d074:	1885883a 	add	r2,r3,r2
   1d078:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
   1d07c:	e13f6f17 	ldw	r4,-580(fp)
   1d080:	017aaac4 	movi	r5,-5461
   1d084:	002c1540 	call	2c154 <__mulsi3>
   1d088:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
   1d08c:	e0ff6917 	ldw	r3,-604(fp)
   1d090:	e0bf6817 	ldw	r2,-608(fp)
   1d094:	1885883a 	add	r2,r3,r2
   1d098:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
   1d09c:	e13f7117 	ldw	r4,-572(fp)
   1d0a0:	01488604 	movi	r5,8728
   1d0a4:	002c1540 	call	2c154 <__mulsi3>
   1d0a8:	1007883a 	mov	r3,r2
   1d0ac:	e0bf6817 	ldw	r2,-608(fp)
   1d0b0:	1885883a 	add	r2,r3,r2
   1d0b4:	e0ff7217 	ldw	r3,-568(fp)
   1d0b8:	1885883a 	add	r2,r3,r2
   1d0bc:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
   1d0c0:	e13f6f17 	ldw	r4,-580(fp)
   1d0c4:	017605c4 	movi	r5,-10217
   1d0c8:	002c1540 	call	2c154 <__mulsi3>
   1d0cc:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
   1d0d0:	e13f7117 	ldw	r4,-572(fp)
   1d0d4:	01592144 	movi	r5,25733
   1d0d8:	002c1540 	call	2c154 <__mulsi3>
   1d0dc:	1007883a 	mov	r3,r2
   1d0e0:	e0bf6f17 	ldw	r2,-580(fp)
   1d0e4:	1885883a 	add	r2,r3,r2
   1d0e8:	e0ff6b17 	ldw	r3,-596(fp)
   1d0ec:	1885883a 	add	r2,r3,r2
   1d0f0:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
   1d0f4:	e0ff6d17 	ldw	r3,-588(fp)
   1d0f8:	e0bf6f17 	ldw	r2,-580(fp)
   1d0fc:	1885883a 	add	r2,r3,r2
   1d100:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
   1d104:	e0ff7017 	ldw	r3,-576(fp)
   1d108:	e0bf7117 	ldw	r2,-572(fp)
   1d10c:	1885883a 	add	r2,r3,r2
   1d110:	1009883a 	mov	r4,r2
   1d114:	01752c84 	movi	r5,-11086
   1d118:	002c1540 	call	2c154 <__mulsi3>
   1d11c:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
   1d120:	e0ff6a17 	ldw	r3,-600(fp)
   1d124:	e0bf6f17 	ldw	r2,-580(fp)
   1d128:	1885883a 	add	r2,r3,r2
   1d12c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
   1d130:	e0ff7217 	ldw	r3,-568(fp)
   1d134:	e0bf6f17 	ldw	r2,-580(fp)
   1d138:	1885883a 	add	r2,r3,r2
   1d13c:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
   1d140:	e0ff7117 	ldw	r3,-572(fp)
   1d144:	e0bf7017 	ldw	r2,-576(fp)
   1d148:	1885c83a 	sub	r2,r3,r2
   1d14c:	1009883a 	mov	r4,r2
   1d150:	014348c4 	movi	r5,3363
   1d154:	002c1540 	call	2c154 <__mulsi3>
   1d158:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
   1d15c:	e0ff6b17 	ldw	r3,-596(fp)
   1d160:	e0bf6f17 	ldw	r2,-580(fp)
   1d164:	1885883a 	add	r2,r3,r2
   1d168:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
   1d16c:	e0ff6c17 	ldw	r3,-592(fp)
   1d170:	e0bf6f17 	ldw	r2,-580(fp)
   1d174:	1885883a 	add	r2,r3,r2
   1d178:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
   1d17c:	e0ff7317 	ldw	r3,-564(fp)
   1d180:	e0bf6717 	ldw	r2,-612(fp)
   1d184:	1885883a 	add	r2,r3,r2
   1d188:	1007d2fa 	srai	r3,r2,11
   1d18c:	e0bf6417 	ldw	r2,-624(fp)
   1d190:	10c00015 	stw	r3,0(r2)
		wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
   1d194:	e0bf6417 	ldw	r2,-624(fp)
   1d198:	10807804 	addi	r2,r2,480
   1d19c:	e13f7317 	ldw	r4,-564(fp)
   1d1a0:	e0ff6717 	ldw	r3,-612(fp)
   1d1a4:	20c7c83a 	sub	r3,r4,r3
   1d1a8:	1807d2fa 	srai	r3,r3,11
   1d1ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
   1d1b0:	e0bf6417 	ldw	r2,-624(fp)
   1d1b4:	10800804 	addi	r2,r2,32
   1d1b8:	e13f7517 	ldw	r4,-556(fp)
   1d1bc:	e0ff6917 	ldw	r3,-604(fp)
   1d1c0:	20c7883a 	add	r3,r4,r3
   1d1c4:	1807d2fa 	srai	r3,r3,11
   1d1c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
   1d1cc:	e0bf6417 	ldw	r2,-624(fp)
   1d1d0:	10807004 	addi	r2,r2,448
   1d1d4:	e13f7517 	ldw	r4,-556(fp)
   1d1d8:	e0ff6917 	ldw	r3,-604(fp)
   1d1dc:	20c7c83a 	sub	r3,r4,r3
   1d1e0:	1807d2fa 	srai	r3,r3,11
   1d1e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
   1d1e8:	e0bf6417 	ldw	r2,-624(fp)
   1d1ec:	10801004 	addi	r2,r2,64
   1d1f0:	e13f7717 	ldw	r4,-548(fp)
   1d1f4:	e0ff6a17 	ldw	r3,-600(fp)
   1d1f8:	20c7883a 	add	r3,r4,r3
   1d1fc:	1807d2fa 	srai	r3,r3,11
   1d200:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
   1d204:	e0bf6417 	ldw	r2,-624(fp)
   1d208:	10806804 	addi	r2,r2,416
   1d20c:	e13f7717 	ldw	r4,-548(fp)
   1d210:	e0ff6a17 	ldw	r3,-600(fp)
   1d214:	20c7c83a 	sub	r3,r4,r3
   1d218:	1807d2fa 	srai	r3,r3,11
   1d21c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
   1d220:	e0bf6417 	ldw	r2,-624(fp)
   1d224:	10801804 	addi	r2,r2,96
   1d228:	e13f7917 	ldw	r4,-540(fp)
   1d22c:	e0ff7217 	ldw	r3,-568(fp)
   1d230:	20c7883a 	add	r3,r4,r3
   1d234:	1807d2fa 	srai	r3,r3,11
   1d238:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
   1d23c:	e0bf6417 	ldw	r2,-624(fp)
   1d240:	10806004 	addi	r2,r2,384
   1d244:	e13f7917 	ldw	r4,-540(fp)
   1d248:	e0ff7217 	ldw	r3,-568(fp)
   1d24c:	20c7c83a 	sub	r3,r4,r3
   1d250:	1807d2fa 	srai	r3,r3,11
   1d254:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
   1d258:	e0bf6417 	ldw	r2,-624(fp)
   1d25c:	10802004 	addi	r2,r2,128
   1d260:	e13f7a17 	ldw	r4,-536(fp)
   1d264:	e0ff6b17 	ldw	r3,-596(fp)
   1d268:	20c7883a 	add	r3,r4,r3
   1d26c:	1807d2fa 	srai	r3,r3,11
   1d270:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
   1d274:	e0bf6417 	ldw	r2,-624(fp)
   1d278:	10805804 	addi	r2,r2,352
   1d27c:	e13f7a17 	ldw	r4,-536(fp)
   1d280:	e0ff6b17 	ldw	r3,-596(fp)
   1d284:	20c7c83a 	sub	r3,r4,r3
   1d288:	1807d2fa 	srai	r3,r3,11
   1d28c:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
   1d290:	e0bf6417 	ldw	r2,-624(fp)
   1d294:	10802804 	addi	r2,r2,160
   1d298:	e13f7817 	ldw	r4,-544(fp)
   1d29c:	e0ff6c17 	ldw	r3,-592(fp)
   1d2a0:	20c7883a 	add	r3,r4,r3
   1d2a4:	1807d2fa 	srai	r3,r3,11
   1d2a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
   1d2ac:	e0bf6417 	ldw	r2,-624(fp)
   1d2b0:	10805004 	addi	r2,r2,320
   1d2b4:	e13f7817 	ldw	r4,-544(fp)
   1d2b8:	e0ff6c17 	ldw	r3,-592(fp)
   1d2bc:	20c7c83a 	sub	r3,r4,r3
   1d2c0:	1807d2fa 	srai	r3,r3,11
   1d2c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
   1d2c8:	e0bf6417 	ldw	r2,-624(fp)
   1d2cc:	10803004 	addi	r2,r2,192
   1d2d0:	e13f7617 	ldw	r4,-552(fp)
   1d2d4:	e0ff6d17 	ldw	r3,-588(fp)
   1d2d8:	20c7883a 	add	r3,r4,r3
   1d2dc:	1807d2fa 	srai	r3,r3,11
   1d2e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
   1d2e4:	e0bf6417 	ldw	r2,-624(fp)
   1d2e8:	10804804 	addi	r2,r2,288
   1d2ec:	e13f7617 	ldw	r4,-552(fp)
   1d2f0:	e0ff6d17 	ldw	r3,-588(fp)
   1d2f4:	20c7c83a 	sub	r3,r4,r3
   1d2f8:	1807d2fa 	srai	r3,r3,11
   1d2fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
   1d300:	e0bf6417 	ldw	r2,-624(fp)
   1d304:	10803804 	addi	r2,r2,224
   1d308:	e13f7417 	ldw	r4,-560(fp)
   1d30c:	e0ff6e17 	ldw	r3,-584(fp)
   1d310:	20c7883a 	add	r3,r4,r3
   1d314:	1807d2fa 	srai	r3,r3,11
   1d318:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
   1d31c:	e0bf6417 	ldw	r2,-624(fp)
   1d320:	10804004 	addi	r2,r2,256
   1d324:	e13f7417 	ldw	r4,-560(fp)
   1d328:	e0ff6e17 	ldw	r3,-584(fp)
   1d32c:	20c7c83a 	sub	r3,r4,r3
   1d330:	1807d2fa 	srai	r3,r3,11
   1d334:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1d338:	e0bf6517 	ldw	r2,-620(fp)
   1d33c:	10800044 	addi	r2,r2,1
   1d340:	e0bf6515 	stw	r2,-620(fp)
   1d344:	e0bf6217 	ldw	r2,-632(fp)
   1d348:	10800084 	addi	r2,r2,2
   1d34c:	e0bf6215 	stw	r2,-632(fp)
   1d350:	e0bf6317 	ldw	r2,-628(fp)
   1d354:	10800104 	addi	r2,r2,4
   1d358:	e0bf6315 	stw	r2,-628(fp)
   1d35c:	e0bf6417 	ldw	r2,-624(fp)
   1d360:	10800104 	addi	r2,r2,4
   1d364:	e0bf6415 	stw	r2,-624(fp)
   1d368:	e0bf6517 	ldw	r2,-620(fp)
   1d36c:	10800210 	cmplti	r2,r2,8
   1d370:	103e041e 	bne	r2,zero,1cb84 <jpeg_idct_16x16+0x58>
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 16 rows from work array, store into output array. */

	wsptr = workspace;
   1d374:	e0bf7c04 	addi	r2,fp,-528
   1d378:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 16; ctr++) {
   1d37c:	e03f6515 	stw	zero,-620(fp)
   1d380:	0001f306 	br	1db50 <jpeg_idct_16x16+0x1024>
		outptr = output_buf[ctr] + output_col;
   1d384:	e0bf6517 	ldw	r2,-620(fp)
   1d388:	1085883a 	add	r2,r2,r2
   1d38c:	1085883a 	add	r2,r2,r2
   1d390:	e0ffff17 	ldw	r3,-4(fp)
   1d394:	1885883a 	add	r2,r3,r2
   1d398:	10c00017 	ldw	r3,0(r2)
   1d39c:	e0800317 	ldw	r2,12(fp)
   1d3a0:	1885883a 	add	r2,r3,r2
   1d3a4:	e0bf7b15 	stw	r2,-532(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1d3a8:	e0bf6417 	ldw	r2,-624(fp)
   1d3ac:	10800017 	ldw	r2,0(r2)
   1d3b0:	10800404 	addi	r2,r2,16
   1d3b4:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
   1d3b8:	e0bf6717 	ldw	r2,-612(fp)
   1d3bc:	1004937a 	slli	r2,r2,13
   1d3c0:	e0bf6715 	stw	r2,-612(fp)

		z1 = (INT32) wsptr[4];
   1d3c4:	e0bf6417 	ldw	r2,-624(fp)
   1d3c8:	10800404 	addi	r2,r2,16
   1d3cc:	10800017 	ldw	r2,0(r2)
   1d3d0:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
   1d3d4:	e13f6817 	ldw	r4,-608(fp)
   1d3d8:	014a73c4 	movi	r5,10703
   1d3dc:	002c1540 	call	2c154 <__mulsi3>
   1d3e0:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
   1d3e4:	e13f6817 	ldw	r4,-608(fp)
   1d3e8:	01445444 	movi	r5,4433
   1d3ec:	002c1540 	call	2c154 <__mulsi3>
   1d3f0:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
   1d3f4:	e0ff6717 	ldw	r3,-612(fp)
   1d3f8:	e0bf6917 	ldw	r2,-604(fp)
   1d3fc:	1885883a 	add	r2,r3,r2
   1d400:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
   1d404:	e0ff6717 	ldw	r3,-612(fp)
   1d408:	e0bf6917 	ldw	r2,-604(fp)
   1d40c:	1885c83a 	sub	r2,r3,r2
   1d410:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
   1d414:	e0ff6717 	ldw	r3,-612(fp)
   1d418:	e0bf6a17 	ldw	r2,-600(fp)
   1d41c:	1885883a 	add	r2,r3,r2
   1d420:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
   1d424:	e0ff6717 	ldw	r3,-612(fp)
   1d428:	e0bf6a17 	ldw	r2,-600(fp)
   1d42c:	1885c83a 	sub	r2,r3,r2
   1d430:	e0bf6e15 	stw	r2,-584(fp)

		z1 = (INT32) wsptr[2];
   1d434:	e0bf6417 	ldw	r2,-624(fp)
   1d438:	10800204 	addi	r2,r2,8
   1d43c:	10800017 	ldw	r2,0(r2)
   1d440:	e0bf6815 	stw	r2,-608(fp)
		z2 = (INT32) wsptr[6];
   1d444:	e0bf6417 	ldw	r2,-624(fp)
   1d448:	10800604 	addi	r2,r2,24
   1d44c:	10800017 	ldw	r2,0(r2)
   1d450:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
   1d454:	e0ff6817 	ldw	r3,-608(fp)
   1d458:	e0bf6f17 	ldw	r2,-580(fp)
   1d45c:	1885c83a 	sub	r2,r3,r2
   1d460:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
   1d464:	e13f7017 	ldw	r4,-576(fp)
   1d468:	01423504 	movi	r5,2260
   1d46c:	002c1540 	call	2c154 <__mulsi3>
   1d470:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
   1d474:	e13f7017 	ldw	r4,-576(fp)
   1d478:	014b18c4 	movi	r5,11363
   1d47c:	002c1540 	call	2c154 <__mulsi3>
   1d480:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
   1d484:	e13f6f17 	ldw	r4,-580(fp)
   1d488:	015480c4 	movi	r5,20995
   1d48c:	002c1540 	call	2c154 <__mulsi3>
   1d490:	1007883a 	mov	r3,r2
   1d494:	e0bf7017 	ldw	r2,-576(fp)
   1d498:	1885883a 	add	r2,r3,r2
   1d49c:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
   1d4a0:	e13f6817 	ldw	r4,-608(fp)
   1d4a4:	01473344 	movi	r5,7373
   1d4a8:	002c1540 	call	2c154 <__mulsi3>
   1d4ac:	1007883a 	mov	r3,r2
   1d4b0:	e0bf7117 	ldw	r2,-572(fp)
   1d4b4:	1885883a 	add	r2,r3,r2
   1d4b8:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
   1d4bc:	e13f6817 	ldw	r4,-608(fp)
   1d4c0:	017b3084 	movi	r5,-4926
   1d4c4:	002c1540 	call	2c154 <__mulsi3>
   1d4c8:	1007883a 	mov	r3,r2
   1d4cc:	e0bf7017 	ldw	r2,-576(fp)
   1d4d0:	1885883a 	add	r2,r3,r2
   1d4d4:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
   1d4d8:	e13f6f17 	ldw	r4,-580(fp)
   1d4dc:	017bec04 	movi	r5,-4176
   1d4e0:	002c1540 	call	2c154 <__mulsi3>
   1d4e4:	1007883a 	mov	r3,r2
   1d4e8:	e0bf7117 	ldw	r2,-572(fp)
   1d4ec:	1885883a 	add	r2,r3,r2
   1d4f0:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
   1d4f4:	e0ff6b17 	ldw	r3,-596(fp)
   1d4f8:	e0bf6717 	ldw	r2,-612(fp)
   1d4fc:	1885883a 	add	r2,r3,r2
   1d500:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
   1d504:	e0ff6b17 	ldw	r3,-596(fp)
   1d508:	e0bf6717 	ldw	r2,-612(fp)
   1d50c:	1885c83a 	sub	r2,r3,r2
   1d510:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
   1d514:	e0ff6d17 	ldw	r3,-588(fp)
   1d518:	e0bf6917 	ldw	r2,-604(fp)
   1d51c:	1885883a 	add	r2,r3,r2
   1d520:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
   1d524:	e0ff6d17 	ldw	r3,-588(fp)
   1d528:	e0bf6917 	ldw	r2,-604(fp)
   1d52c:	1885c83a 	sub	r2,r3,r2
   1d530:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
   1d534:	e0ff6e17 	ldw	r3,-584(fp)
   1d538:	e0bf6a17 	ldw	r2,-600(fp)
   1d53c:	1885883a 	add	r2,r3,r2
   1d540:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
   1d544:	e0ff6e17 	ldw	r3,-584(fp)
   1d548:	e0bf6a17 	ldw	r2,-600(fp)
   1d54c:	1885c83a 	sub	r2,r3,r2
   1d550:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
   1d554:	e0ff6c17 	ldw	r3,-592(fp)
   1d558:	e0bf7217 	ldw	r2,-568(fp)
   1d55c:	1885883a 	add	r2,r3,r2
   1d560:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
   1d564:	e0ff6c17 	ldw	r3,-592(fp)
   1d568:	e0bf7217 	ldw	r2,-568(fp)
   1d56c:	1885c83a 	sub	r2,r3,r2
   1d570:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1d574:	e0bf6417 	ldw	r2,-624(fp)
   1d578:	10800104 	addi	r2,r2,4
   1d57c:	10800017 	ldw	r2,0(r2)
   1d580:	e0bf6815 	stw	r2,-608(fp)
		z2 = (INT32) wsptr[3];
   1d584:	e0bf6417 	ldw	r2,-624(fp)
   1d588:	10800304 	addi	r2,r2,12
   1d58c:	10800017 	ldw	r2,0(r2)
   1d590:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[5];
   1d594:	e0bf6417 	ldw	r2,-624(fp)
   1d598:	10800504 	addi	r2,r2,20
   1d59c:	10800017 	ldw	r2,0(r2)
   1d5a0:	e0bf7015 	stw	r2,-576(fp)
		z4 = (INT32) wsptr[7];
   1d5a4:	e0bf6417 	ldw	r2,-624(fp)
   1d5a8:	10800704 	addi	r2,r2,28
   1d5ac:	10800017 	ldw	r2,0(r2)
   1d5b0:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
   1d5b4:	e0ff6817 	ldw	r3,-608(fp)
   1d5b8:	e0bf7017 	ldw	r2,-576(fp)
   1d5bc:	1885883a 	add	r2,r3,r2
   1d5c0:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
   1d5c4:	e0ff6817 	ldw	r3,-608(fp)
   1d5c8:	e0bf6f17 	ldw	r2,-580(fp)
   1d5cc:	1885883a 	add	r2,r3,r2
   1d5d0:	1009883a 	mov	r4,r2
   1d5d4:	014ad384 	movi	r5,11086
   1d5d8:	002c1540 	call	2c154 <__mulsi3>
   1d5dc:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
   1d5e0:	e13f6c17 	ldw	r4,-592(fp)
   1d5e4:	0149fa44 	movi	r5,10217
   1d5e8:	002c1540 	call	2c154 <__mulsi3>
   1d5ec:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
   1d5f0:	e0ff6817 	ldw	r3,-608(fp)
   1d5f4:	e0bf7117 	ldw	r2,-572(fp)
   1d5f8:	1885883a 	add	r2,r3,r2
   1d5fc:	1009883a 	mov	r4,r2
   1d600:	0148bf04 	movi	r5,8956
   1d604:	002c1540 	call	2c154 <__mulsi3>
   1d608:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
   1d60c:	e0ff6817 	ldw	r3,-608(fp)
   1d610:	e0bf7117 	ldw	r2,-572(fp)
   1d614:	1885c83a 	sub	r2,r3,r2
   1d618:	1009883a 	mov	r4,r2
   1d61c:	01472d84 	movi	r5,7350
   1d620:	002c1540 	call	2c154 <__mulsi3>
   1d624:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
   1d628:	e13f6c17 	ldw	r4,-592(fp)
   1d62c:	01455544 	movi	r5,5461
   1d630:	002c1540 	call	2c154 <__mulsi3>
   1d634:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
   1d638:	e0ff6817 	ldw	r3,-608(fp)
   1d63c:	e0bf6f17 	ldw	r2,-580(fp)
   1d640:	1885c83a 	sub	r2,r3,r2
   1d644:	1009883a 	mov	r4,r2
   1d648:	014348c4 	movi	r5,3363
   1d64c:	002c1540 	call	2c154 <__mulsi3>
   1d650:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
   1d654:	e0ff6917 	ldw	r3,-604(fp)
   1d658:	e0bf6a17 	ldw	r2,-600(fp)
   1d65c:	1887883a 	add	r3,r3,r2
   1d660:	e0bf7217 	ldw	r2,-568(fp)
   1d664:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
   1d668:	e13f6817 	ldw	r4,-608(fp)
   1d66c:	016db584 	movi	r5,-18730
   1d670:	002c1540 	call	2c154 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
   1d674:	8085883a 	add	r2,r16,r2
   1d678:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1d67c:	e0ff6b17 	ldw	r3,-596(fp)
   1d680:	e0bf6c17 	ldw	r2,-592(fp)
   1d684:	1887883a 	add	r3,r3,r2
   1d688:	e0bf6d17 	ldw	r2,-588(fp)
   1d68c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
   1d690:	e13f6817 	ldw	r4,-608(fp)
   1d694:	01715084 	movi	r5,-15038
   1d698:	002c1540 	call	2c154 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1d69c:	8085883a 	add	r2,r16,r2
   1d6a0:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
   1d6a4:	e0ff6f17 	ldw	r3,-580(fp)
   1d6a8:	e0bf7017 	ldw	r2,-576(fp)
   1d6ac:	1885883a 	add	r2,r3,r2
   1d6b0:	1009883a 	mov	r4,r2
   1d6b4:	01411c04 	movi	r5,1136
   1d6b8:	002c1540 	call	2c154 <__mulsi3>
   1d6bc:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
   1d6c0:	e13f6f17 	ldw	r4,-580(fp)
   1d6c4:	01409344 	movi	r5,589
   1d6c8:	002c1540 	call	2c154 <__mulsi3>
   1d6cc:	1007883a 	mov	r3,r2
   1d6d0:	e0bf6817 	ldw	r2,-608(fp)
   1d6d4:	1885883a 	add	r2,r3,r2
   1d6d8:	e0ff6917 	ldw	r3,-604(fp)
   1d6dc:	1885883a 	add	r2,r3,r2
   1d6e0:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
   1d6e4:	e13f7017 	ldw	r4,-576(fp)
   1d6e8:	0176fe84 	movi	r5,-9222
   1d6ec:	002c1540 	call	2c154 <__mulsi3>
   1d6f0:	1007883a 	mov	r3,r2
   1d6f4:	e0bf6817 	ldw	r2,-608(fp)
   1d6f8:	1885883a 	add	r2,r3,r2
   1d6fc:	e0ff6a17 	ldw	r3,-600(fp)
   1d700:	1885883a 	add	r2,r3,r2
   1d704:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
   1d708:	e0ff7017 	ldw	r3,-576(fp)
   1d70c:	e0bf6f17 	ldw	r2,-580(fp)
   1d710:	1885c83a 	sub	r2,r3,r2
   1d714:	1009883a 	mov	r4,r2
   1d718:	014b4244 	movi	r5,11529
   1d71c:	002c1540 	call	2c154 <__mulsi3>
   1d720:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
   1d724:	e13f7017 	ldw	r4,-576(fp)
   1d728:	0179de84 	movi	r5,-6278
   1d72c:	002c1540 	call	2c154 <__mulsi3>
   1d730:	1007883a 	mov	r3,r2
   1d734:	e0bf6817 	ldw	r2,-608(fp)
   1d738:	1885883a 	add	r2,r3,r2
   1d73c:	e0ff6c17 	ldw	r3,-592(fp)
   1d740:	1885883a 	add	r2,r3,r2
   1d744:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
   1d748:	e13f6f17 	ldw	r4,-580(fp)
   1d74c:	014fc684 	movi	r5,16154
   1d750:	002c1540 	call	2c154 <__mulsi3>
   1d754:	1007883a 	mov	r3,r2
   1d758:	e0bf6817 	ldw	r2,-608(fp)
   1d75c:	1885883a 	add	r2,r3,r2
   1d760:	e0ff6d17 	ldw	r3,-588(fp)
   1d764:	1885883a 	add	r2,r3,r2
   1d768:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
   1d76c:	e0ff6f17 	ldw	r3,-580(fp)
   1d770:	e0bf7117 	ldw	r2,-572(fp)
   1d774:	1885883a 	add	r2,r3,r2
   1d778:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
   1d77c:	e13f6f17 	ldw	r4,-580(fp)
   1d780:	017aaac4 	movi	r5,-5461
   1d784:	002c1540 	call	2c154 <__mulsi3>
   1d788:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
   1d78c:	e0ff6917 	ldw	r3,-604(fp)
   1d790:	e0bf6817 	ldw	r2,-608(fp)
   1d794:	1885883a 	add	r2,r3,r2
   1d798:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
   1d79c:	e13f7117 	ldw	r4,-572(fp)
   1d7a0:	01488604 	movi	r5,8728
   1d7a4:	002c1540 	call	2c154 <__mulsi3>
   1d7a8:	1007883a 	mov	r3,r2
   1d7ac:	e0bf6817 	ldw	r2,-608(fp)
   1d7b0:	1885883a 	add	r2,r3,r2
   1d7b4:	e0ff7217 	ldw	r3,-568(fp)
   1d7b8:	1885883a 	add	r2,r3,r2
   1d7bc:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
   1d7c0:	e13f6f17 	ldw	r4,-580(fp)
   1d7c4:	017605c4 	movi	r5,-10217
   1d7c8:	002c1540 	call	2c154 <__mulsi3>
   1d7cc:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
   1d7d0:	e13f7117 	ldw	r4,-572(fp)
   1d7d4:	01592144 	movi	r5,25733
   1d7d8:	002c1540 	call	2c154 <__mulsi3>
   1d7dc:	1007883a 	mov	r3,r2
   1d7e0:	e0bf6f17 	ldw	r2,-580(fp)
   1d7e4:	1885883a 	add	r2,r3,r2
   1d7e8:	e0ff6b17 	ldw	r3,-596(fp)
   1d7ec:	1885883a 	add	r2,r3,r2
   1d7f0:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
   1d7f4:	e0ff6d17 	ldw	r3,-588(fp)
   1d7f8:	e0bf6f17 	ldw	r2,-580(fp)
   1d7fc:	1885883a 	add	r2,r3,r2
   1d800:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
   1d804:	e0ff7017 	ldw	r3,-576(fp)
   1d808:	e0bf7117 	ldw	r2,-572(fp)
   1d80c:	1885883a 	add	r2,r3,r2
   1d810:	1009883a 	mov	r4,r2
   1d814:	01752c84 	movi	r5,-11086
   1d818:	002c1540 	call	2c154 <__mulsi3>
   1d81c:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
   1d820:	e0ff6a17 	ldw	r3,-600(fp)
   1d824:	e0bf6f17 	ldw	r2,-580(fp)
   1d828:	1885883a 	add	r2,r3,r2
   1d82c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
   1d830:	e0ff7217 	ldw	r3,-568(fp)
   1d834:	e0bf6f17 	ldw	r2,-580(fp)
   1d838:	1885883a 	add	r2,r3,r2
   1d83c:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
   1d840:	e0ff7117 	ldw	r3,-572(fp)
   1d844:	e0bf7017 	ldw	r2,-576(fp)
   1d848:	1885c83a 	sub	r2,r3,r2
   1d84c:	1009883a 	mov	r4,r2
   1d850:	014348c4 	movi	r5,3363
   1d854:	002c1540 	call	2c154 <__mulsi3>
   1d858:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
   1d85c:	e0ff6b17 	ldw	r3,-596(fp)
   1d860:	e0bf6f17 	ldw	r2,-580(fp)
   1d864:	1885883a 	add	r2,r3,r2
   1d868:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
   1d86c:	e0ff6c17 	ldw	r3,-592(fp)
   1d870:	e0bf6f17 	ldw	r2,-580(fp)
   1d874:	1885883a 	add	r2,r3,r2
   1d878:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
   1d87c:	e0ff7317 	ldw	r3,-564(fp)
   1d880:	e0bf6717 	ldw	r2,-612(fp)
   1d884:	1885883a 	add	r2,r3,r2
   1d888:	1005d4ba 	srai	r2,r2,18
   1d88c:	1080ffcc 	andi	r2,r2,1023
   1d890:	e0ff6617 	ldw	r3,-616(fp)
   1d894:	1885883a 	add	r2,r3,r2
   1d898:	10c00003 	ldbu	r3,0(r2)
   1d89c:	e0bf7b17 	ldw	r2,-532(fp)
   1d8a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
   1d8a4:	e0bf7b17 	ldw	r2,-532(fp)
   1d8a8:	108003c4 	addi	r2,r2,15
   1d8ac:	e13f7317 	ldw	r4,-564(fp)
   1d8b0:	e0ff6717 	ldw	r3,-612(fp)
   1d8b4:	20c7c83a 	sub	r3,r4,r3
   1d8b8:	1807d4ba 	srai	r3,r3,18
   1d8bc:	18c0ffcc 	andi	r3,r3,1023
   1d8c0:	e13f6617 	ldw	r4,-616(fp)
   1d8c4:	20c7883a 	add	r3,r4,r3
   1d8c8:	18c00003 	ldbu	r3,0(r3)
   1d8cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
   1d8d0:	e0bf7b17 	ldw	r2,-532(fp)
   1d8d4:	10800044 	addi	r2,r2,1
   1d8d8:	e13f7517 	ldw	r4,-556(fp)
   1d8dc:	e0ff6917 	ldw	r3,-604(fp)
   1d8e0:	20c7883a 	add	r3,r4,r3
   1d8e4:	1807d4ba 	srai	r3,r3,18
   1d8e8:	18c0ffcc 	andi	r3,r3,1023
   1d8ec:	e13f6617 	ldw	r4,-616(fp)
   1d8f0:	20c7883a 	add	r3,r4,r3
   1d8f4:	18c00003 	ldbu	r3,0(r3)
   1d8f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
   1d8fc:	e0bf7b17 	ldw	r2,-532(fp)
   1d900:	10800384 	addi	r2,r2,14
   1d904:	e13f7517 	ldw	r4,-556(fp)
   1d908:	e0ff6917 	ldw	r3,-604(fp)
   1d90c:	20c7c83a 	sub	r3,r4,r3
   1d910:	1807d4ba 	srai	r3,r3,18
   1d914:	18c0ffcc 	andi	r3,r3,1023
   1d918:	e13f6617 	ldw	r4,-616(fp)
   1d91c:	20c7883a 	add	r3,r4,r3
   1d920:	18c00003 	ldbu	r3,0(r3)
   1d924:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
   1d928:	e0bf7b17 	ldw	r2,-532(fp)
   1d92c:	10800084 	addi	r2,r2,2
   1d930:	e13f7717 	ldw	r4,-548(fp)
   1d934:	e0ff6a17 	ldw	r3,-600(fp)
   1d938:	20c7883a 	add	r3,r4,r3
   1d93c:	1807d4ba 	srai	r3,r3,18
   1d940:	18c0ffcc 	andi	r3,r3,1023
   1d944:	e13f6617 	ldw	r4,-616(fp)
   1d948:	20c7883a 	add	r3,r4,r3
   1d94c:	18c00003 	ldbu	r3,0(r3)
   1d950:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
   1d954:	e0bf7b17 	ldw	r2,-532(fp)
   1d958:	10800344 	addi	r2,r2,13
   1d95c:	e13f7717 	ldw	r4,-548(fp)
   1d960:	e0ff6a17 	ldw	r3,-600(fp)
   1d964:	20c7c83a 	sub	r3,r4,r3
   1d968:	1807d4ba 	srai	r3,r3,18
   1d96c:	18c0ffcc 	andi	r3,r3,1023
   1d970:	e13f6617 	ldw	r4,-616(fp)
   1d974:	20c7883a 	add	r3,r4,r3
   1d978:	18c00003 	ldbu	r3,0(r3)
   1d97c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
   1d980:	e0bf7b17 	ldw	r2,-532(fp)
   1d984:	108000c4 	addi	r2,r2,3
   1d988:	e13f7917 	ldw	r4,-540(fp)
   1d98c:	e0ff7217 	ldw	r3,-568(fp)
   1d990:	20c7883a 	add	r3,r4,r3
   1d994:	1807d4ba 	srai	r3,r3,18
   1d998:	18c0ffcc 	andi	r3,r3,1023
   1d99c:	e13f6617 	ldw	r4,-616(fp)
   1d9a0:	20c7883a 	add	r3,r4,r3
   1d9a4:	18c00003 	ldbu	r3,0(r3)
   1d9a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
   1d9ac:	e0bf7b17 	ldw	r2,-532(fp)
   1d9b0:	10800304 	addi	r2,r2,12
   1d9b4:	e13f7917 	ldw	r4,-540(fp)
   1d9b8:	e0ff7217 	ldw	r3,-568(fp)
   1d9bc:	20c7c83a 	sub	r3,r4,r3
   1d9c0:	1807d4ba 	srai	r3,r3,18
   1d9c4:	18c0ffcc 	andi	r3,r3,1023
   1d9c8:	e13f6617 	ldw	r4,-616(fp)
   1d9cc:	20c7883a 	add	r3,r4,r3
   1d9d0:	18c00003 	ldbu	r3,0(r3)
   1d9d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
   1d9d8:	e0bf7b17 	ldw	r2,-532(fp)
   1d9dc:	10800104 	addi	r2,r2,4
   1d9e0:	e13f7a17 	ldw	r4,-536(fp)
   1d9e4:	e0ff6b17 	ldw	r3,-596(fp)
   1d9e8:	20c7883a 	add	r3,r4,r3
   1d9ec:	1807d4ba 	srai	r3,r3,18
   1d9f0:	18c0ffcc 	andi	r3,r3,1023
   1d9f4:	e13f6617 	ldw	r4,-616(fp)
   1d9f8:	20c7883a 	add	r3,r4,r3
   1d9fc:	18c00003 	ldbu	r3,0(r3)
   1da00:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
   1da04:	e0bf7b17 	ldw	r2,-532(fp)
   1da08:	108002c4 	addi	r2,r2,11
   1da0c:	e13f7a17 	ldw	r4,-536(fp)
   1da10:	e0ff6b17 	ldw	r3,-596(fp)
   1da14:	20c7c83a 	sub	r3,r4,r3
   1da18:	1807d4ba 	srai	r3,r3,18
   1da1c:	18c0ffcc 	andi	r3,r3,1023
   1da20:	e13f6617 	ldw	r4,-616(fp)
   1da24:	20c7883a 	add	r3,r4,r3
   1da28:	18c00003 	ldbu	r3,0(r3)
   1da2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
   1da30:	e0bf7b17 	ldw	r2,-532(fp)
   1da34:	10800144 	addi	r2,r2,5
   1da38:	e13f7817 	ldw	r4,-544(fp)
   1da3c:	e0ff6c17 	ldw	r3,-592(fp)
   1da40:	20c7883a 	add	r3,r4,r3
   1da44:	1807d4ba 	srai	r3,r3,18
   1da48:	18c0ffcc 	andi	r3,r3,1023
   1da4c:	e13f6617 	ldw	r4,-616(fp)
   1da50:	20c7883a 	add	r3,r4,r3
   1da54:	18c00003 	ldbu	r3,0(r3)
   1da58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
   1da5c:	e0bf7b17 	ldw	r2,-532(fp)
   1da60:	10800284 	addi	r2,r2,10
   1da64:	e13f7817 	ldw	r4,-544(fp)
   1da68:	e0ff6c17 	ldw	r3,-592(fp)
   1da6c:	20c7c83a 	sub	r3,r4,r3
   1da70:	1807d4ba 	srai	r3,r3,18
   1da74:	18c0ffcc 	andi	r3,r3,1023
   1da78:	e13f6617 	ldw	r4,-616(fp)
   1da7c:	20c7883a 	add	r3,r4,r3
   1da80:	18c00003 	ldbu	r3,0(r3)
   1da84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
   1da88:	e0bf7b17 	ldw	r2,-532(fp)
   1da8c:	10800184 	addi	r2,r2,6
   1da90:	e13f7617 	ldw	r4,-552(fp)
   1da94:	e0ff6d17 	ldw	r3,-588(fp)
   1da98:	20c7883a 	add	r3,r4,r3
   1da9c:	1807d4ba 	srai	r3,r3,18
   1daa0:	18c0ffcc 	andi	r3,r3,1023
   1daa4:	e13f6617 	ldw	r4,-616(fp)
   1daa8:	20c7883a 	add	r3,r4,r3
   1daac:	18c00003 	ldbu	r3,0(r3)
   1dab0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
   1dab4:	e0bf7b17 	ldw	r2,-532(fp)
   1dab8:	10800244 	addi	r2,r2,9
   1dabc:	e13f7617 	ldw	r4,-552(fp)
   1dac0:	e0ff6d17 	ldw	r3,-588(fp)
   1dac4:	20c7c83a 	sub	r3,r4,r3
   1dac8:	1807d4ba 	srai	r3,r3,18
   1dacc:	18c0ffcc 	andi	r3,r3,1023
   1dad0:	e13f6617 	ldw	r4,-616(fp)
   1dad4:	20c7883a 	add	r3,r4,r3
   1dad8:	18c00003 	ldbu	r3,0(r3)
   1dadc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
   1dae0:	e0bf7b17 	ldw	r2,-532(fp)
   1dae4:	108001c4 	addi	r2,r2,7
   1dae8:	e13f7417 	ldw	r4,-560(fp)
   1daec:	e0ff6e17 	ldw	r3,-584(fp)
   1daf0:	20c7883a 	add	r3,r4,r3
   1daf4:	1807d4ba 	srai	r3,r3,18
   1daf8:	18c0ffcc 	andi	r3,r3,1023
   1dafc:	e13f6617 	ldw	r4,-616(fp)
   1db00:	20c7883a 	add	r3,r4,r3
   1db04:	18c00003 	ldbu	r3,0(r3)
   1db08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
   1db0c:	e0bf7b17 	ldw	r2,-532(fp)
   1db10:	10800204 	addi	r2,r2,8
   1db14:	e13f7417 	ldw	r4,-560(fp)
   1db18:	e0ff6e17 	ldw	r3,-584(fp)
   1db1c:	20c7c83a 	sub	r3,r4,r3
   1db20:	1807d4ba 	srai	r3,r3,18
   1db24:	18c0ffcc 	andi	r3,r3,1023
   1db28:	e13f6617 	ldw	r4,-616(fp)
   1db2c:	20c7883a 	add	r3,r4,r3
   1db30:	18c00003 	ldbu	r3,0(r3)
   1db34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1db38:	e0bf6417 	ldw	r2,-624(fp)
   1db3c:	10800804 	addi	r2,r2,32
   1db40:	e0bf6415 	stw	r2,-624(fp)
	}

	/* Pass 2: process 16 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 16; ctr++) {
   1db44:	e0bf6517 	ldw	r2,-620(fp)
   1db48:	10800044 	addi	r2,r2,1
   1db4c:	e0bf6515 	stw	r2,-620(fp)
   1db50:	e0bf6517 	ldw	r2,-620(fp)
   1db54:	10800410 	cmplti	r2,r2,16
   1db58:	103e0a1e 	bne	r2,zero,1d384 <jpeg_idct_16x16+0x858>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1db5c:	e037883a 	mov	sp,fp
   1db60:	dfc00217 	ldw	ra,8(sp)
   1db64:	df000117 	ldw	fp,4(sp)
   1db68:	dc000017 	ldw	r16,0(sp)
   1db6c:	dec00304 	addi	sp,sp,12
   1db70:	f800283a 	ret

0001db74 <jpeg_idct_16x8>:

GLOBAL(void)
	jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1db74:	deff9e04 	addi	sp,sp,-392
   1db78:	dfc06115 	stw	ra,388(sp)
   1db7c:	df006015 	stw	fp,384(sp)
   1db80:	dc005f15 	stw	r16,380(sp)
   1db84:	df005f04 	addi	fp,sp,380
   1db88:	e13ffc15 	stw	r4,-16(fp)
   1db8c:	e17ffd15 	stw	r5,-12(fp)
   1db90:	e1bffe15 	stw	r6,-8(fp)
   1db94:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1db98:	e0bffc17 	ldw	r2,-16(fp)
   1db9c:	10804917 	ldw	r2,292(r2)
   1dba0:	10802004 	addi	r2,r2,128
   1dba4:	e0bfa515 	stw	r2,-364(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
   1dba8:	e0bffe17 	ldw	r2,-8(fp)
   1dbac:	e0bfa115 	stw	r2,-380(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1dbb0:	e0bffd17 	ldw	r2,-12(fp)
   1dbb4:	10801517 	ldw	r2,84(r2)
   1dbb8:	e0bfa215 	stw	r2,-376(fp)
	wsptr = workspace;
   1dbbc:	e0bfbc04 	addi	r2,fp,-272
   1dbc0:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   1dbc4:	00800204 	movi	r2,8
   1dbc8:	e0bfa415 	stw	r2,-368(fp)
   1dbcc:	00019b06 	br	1e23c <jpeg_idct_16x8+0x6c8>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   1dbd0:	e0bfa117 	ldw	r2,-380(fp)
   1dbd4:	10800404 	addi	r2,r2,16
   1dbd8:	1080000b 	ldhu	r2,0(r2)
   1dbdc:	10bfffcc 	andi	r2,r2,65535
   1dbe0:	10a0001c 	xori	r2,r2,32768
   1dbe4:	10a00004 	addi	r2,r2,-32768
   1dbe8:	1000601e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
   1dbec:	e0bfa117 	ldw	r2,-380(fp)
   1dbf0:	10800804 	addi	r2,r2,32
   1dbf4:	1080000b 	ldhu	r2,0(r2)
   1dbf8:	10bfffcc 	andi	r2,r2,65535
   1dbfc:	10a0001c 	xori	r2,r2,32768
   1dc00:	10a00004 	addi	r2,r2,-32768
   1dc04:	1000591e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   1dc08:	e0bfa117 	ldw	r2,-380(fp)
   1dc0c:	10800c04 	addi	r2,r2,48
   1dc10:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   1dc14:	10bfffcc 	andi	r2,r2,65535
   1dc18:	10a0001c 	xori	r2,r2,32768
   1dc1c:	10a00004 	addi	r2,r2,-32768
   1dc20:	1000521e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   1dc24:	e0bfa117 	ldw	r2,-380(fp)
   1dc28:	10801004 	addi	r2,r2,64
   1dc2c:	1080000b 	ldhu	r2,0(r2)
   1dc30:	10bfffcc 	andi	r2,r2,65535
   1dc34:	10a0001c 	xori	r2,r2,32768
   1dc38:	10a00004 	addi	r2,r2,-32768
   1dc3c:	10004b1e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   1dc40:	e0bfa117 	ldw	r2,-380(fp)
   1dc44:	10801404 	addi	r2,r2,80
   1dc48:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   1dc4c:	10bfffcc 	andi	r2,r2,65535
   1dc50:	10a0001c 	xori	r2,r2,32768
   1dc54:	10a00004 	addi	r2,r2,-32768
   1dc58:	1000441e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   1dc5c:	e0bfa117 	ldw	r2,-380(fp)
   1dc60:	10801804 	addi	r2,r2,96
   1dc64:	1080000b 	ldhu	r2,0(r2)
   1dc68:	10bfffcc 	andi	r2,r2,65535
   1dc6c:	10a0001c 	xori	r2,r2,32768
   1dc70:	10a00004 	addi	r2,r2,-32768
   1dc74:	10003d1e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*7] == 0) {
   1dc78:	e0bfa117 	ldw	r2,-380(fp)
   1dc7c:	10801c04 	addi	r2,r2,112
   1dc80:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   1dc84:	10bfffcc 	andi	r2,r2,65535
   1dc88:	10a0001c 	xori	r2,r2,32768
   1dc8c:	10a00004 	addi	r2,r2,-32768
   1dc90:	1000361e 	bne	r2,zero,1dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
   1dc94:	e0bfa117 	ldw	r2,-380(fp)
   1dc98:	1080000b 	ldhu	r2,0(r2)
   1dc9c:	10ffffcc 	andi	r3,r2,65535
   1dca0:	18e0001c 	xori	r3,r3,32768
   1dca4:	18e00004 	addi	r3,r3,-32768
   1dca8:	e0bfa217 	ldw	r2,-376(fp)
   1dcac:	10800017 	ldw	r2,0(r2)
   1dcb0:	1809883a 	mov	r4,r3
   1dcb4:	100b883a 	mov	r5,r2
   1dcb8:	002c1540 	call	2c154 <__mulsi3>
   1dcbc:	1085883a 	add	r2,r2,r2
   1dcc0:	1085883a 	add	r2,r2,r2
   1dcc4:	e0bfa615 	stw	r2,-360(fp)

				wsptr[DCTSIZE*0] = dcval;
   1dcc8:	e0bfa317 	ldw	r2,-372(fp)
   1dccc:	e0ffa617 	ldw	r3,-360(fp)
   1dcd0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
   1dcd4:	e0bfa317 	ldw	r2,-372(fp)
   1dcd8:	10800804 	addi	r2,r2,32
   1dcdc:	e0ffa617 	ldw	r3,-360(fp)
   1dce0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
   1dce4:	e0bfa317 	ldw	r2,-372(fp)
   1dce8:	10801004 	addi	r2,r2,64
   1dcec:	e0ffa617 	ldw	r3,-360(fp)
   1dcf0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
   1dcf4:	e0bfa317 	ldw	r2,-372(fp)
   1dcf8:	10801804 	addi	r2,r2,96
   1dcfc:	e0ffa617 	ldw	r3,-360(fp)
   1dd00:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
   1dd04:	e0bfa317 	ldw	r2,-372(fp)
   1dd08:	10802004 	addi	r2,r2,128
   1dd0c:	e0ffa617 	ldw	r3,-360(fp)
   1dd10:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
   1dd14:	e0bfa317 	ldw	r2,-372(fp)
   1dd18:	10802804 	addi	r2,r2,160
   1dd1c:	e0ffa617 	ldw	r3,-360(fp)
   1dd20:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
   1dd24:	e0bfa317 	ldw	r2,-372(fp)
   1dd28:	10803004 	addi	r2,r2,192
   1dd2c:	e0ffa617 	ldw	r3,-360(fp)
   1dd30:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
   1dd34:	e0bfa317 	ldw	r2,-372(fp)
   1dd38:	10803804 	addi	r2,r2,224
   1dd3c:	e0ffa617 	ldw	r3,-360(fp)
   1dd40:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
   1dd44:	e0bfa117 	ldw	r2,-380(fp)
   1dd48:	10800084 	addi	r2,r2,2
   1dd4c:	e0bfa115 	stw	r2,-380(fp)
				quantptr++;
   1dd50:	e0bfa217 	ldw	r2,-376(fp)
   1dd54:	10800104 	addi	r2,r2,4
   1dd58:	e0bfa215 	stw	r2,-376(fp)
				wsptr++;
   1dd5c:	e0bfa317 	ldw	r2,-372(fp)
   1dd60:	10800104 	addi	r2,r2,4
   1dd64:	e0bfa315 	stw	r2,-372(fp)
				continue;
   1dd68:	00013106 	br	1e230 <jpeg_idct_16x8+0x6bc>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1dd6c:	e0bfa117 	ldw	r2,-380(fp)
   1dd70:	10800804 	addi	r2,r2,32
   1dd74:	1080000b 	ldhu	r2,0(r2)
   1dd78:	10ffffcc 	andi	r3,r2,65535
   1dd7c:	18e0001c 	xori	r3,r3,32768
   1dd80:	18e00004 	addi	r3,r3,-32768
   1dd84:	e0bfa217 	ldw	r2,-376(fp)
   1dd88:	10801004 	addi	r2,r2,64
   1dd8c:	10800017 	ldw	r2,0(r2)
   1dd90:	1809883a 	mov	r4,r3
   1dd94:	100b883a 	mov	r5,r2
   1dd98:	002c1540 	call	2c154 <__mulsi3>
   1dd9c:	e0bfa715 	stw	r2,-356(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1dda0:	e0bfa117 	ldw	r2,-380(fp)
   1dda4:	10801804 	addi	r2,r2,96
   1dda8:	1080000b 	ldhu	r2,0(r2)
   1ddac:	10ffffcc 	andi	r3,r2,65535
   1ddb0:	18e0001c 	xori	r3,r3,32768
   1ddb4:	18e00004 	addi	r3,r3,-32768
   1ddb8:	e0bfa217 	ldw	r2,-376(fp)
   1ddbc:	10803004 	addi	r2,r2,192
   1ddc0:	10800017 	ldw	r2,0(r2)
   1ddc4:	1809883a 	mov	r4,r3
   1ddc8:	100b883a 	mov	r5,r2
   1ddcc:	002c1540 	call	2c154 <__mulsi3>
   1ddd0:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   1ddd4:	e0ffa717 	ldw	r3,-356(fp)
   1ddd8:	e0bfa817 	ldw	r2,-352(fp)
   1dddc:	1885883a 	add	r2,r3,r2
   1dde0:	1009883a 	mov	r4,r2
   1dde4:	01445444 	movi	r5,4433
   1dde8:	002c1540 	call	2c154 <__mulsi3>
   1ddec:	e0bfa915 	stw	r2,-348(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   1ddf0:	e13fa717 	ldw	r4,-356(fp)
   1ddf4:	01461f84 	movi	r5,6270
   1ddf8:	002c1540 	call	2c154 <__mulsi3>
   1ddfc:	1007883a 	mov	r3,r2
   1de00:	e0bfa917 	ldw	r2,-348(fp)
   1de04:	1885883a 	add	r2,r3,r2
   1de08:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   1de0c:	e13fa817 	ldw	r4,-352(fp)
   1de10:	017137c4 	movi	r5,-15137
   1de14:	002c1540 	call	2c154 <__mulsi3>
   1de18:	1007883a 	mov	r3,r2
   1de1c:	e0bfa917 	ldw	r2,-348(fp)
   1de20:	1885883a 	add	r2,r3,r2
   1de24:	e0bfab15 	stw	r2,-340(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1de28:	e0bfa117 	ldw	r2,-380(fp)
   1de2c:	1080000b 	ldhu	r2,0(r2)
   1de30:	10ffffcc 	andi	r3,r2,65535
   1de34:	18e0001c 	xori	r3,r3,32768
   1de38:	18e00004 	addi	r3,r3,-32768
   1de3c:	e0bfa217 	ldw	r2,-376(fp)
   1de40:	10800017 	ldw	r2,0(r2)
   1de44:	1809883a 	mov	r4,r3
   1de48:	100b883a 	mov	r5,r2
   1de4c:	002c1540 	call	2c154 <__mulsi3>
   1de50:	e0bfa715 	stw	r2,-356(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1de54:	e0bfa117 	ldw	r2,-380(fp)
   1de58:	10801004 	addi	r2,r2,64
   1de5c:	1080000b 	ldhu	r2,0(r2)
   1de60:	10ffffcc 	andi	r3,r2,65535
   1de64:	18e0001c 	xori	r3,r3,32768
   1de68:	18e00004 	addi	r3,r3,-32768
   1de6c:	e0bfa217 	ldw	r2,-376(fp)
   1de70:	10802004 	addi	r2,r2,128
   1de74:	10800017 	ldw	r2,0(r2)
   1de78:	1809883a 	mov	r4,r3
   1de7c:	100b883a 	mov	r5,r2
   1de80:	002c1540 	call	2c154 <__mulsi3>
   1de84:	e0bfa815 	stw	r2,-352(fp)
		z2 <<= CONST_BITS;
   1de88:	e0bfa717 	ldw	r2,-356(fp)
   1de8c:	1004937a 	slli	r2,r2,13
   1de90:	e0bfa715 	stw	r2,-356(fp)
		z3 <<= CONST_BITS;
   1de94:	e0bfa817 	ldw	r2,-352(fp)
   1de98:	1004937a 	slli	r2,r2,13
   1de9c:	e0bfa815 	stw	r2,-352(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
   1dea0:	e0bfa717 	ldw	r2,-356(fp)
   1dea4:	10810004 	addi	r2,r2,1024
   1dea8:	e0bfa715 	stw	r2,-356(fp)

		tmp0 = z2 + z3;
   1deac:	e0ffa717 	ldw	r3,-356(fp)
   1deb0:	e0bfa817 	ldw	r2,-352(fp)
   1deb4:	1885883a 	add	r2,r3,r2
   1deb8:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = z2 - z3;
   1debc:	e0ffa717 	ldw	r3,-356(fp)
   1dec0:	e0bfa817 	ldw	r2,-352(fp)
   1dec4:	1885c83a 	sub	r2,r3,r2
   1dec8:	e0bfad15 	stw	r2,-332(fp)

		tmp10 = tmp0 + tmp2;
   1decc:	e0ffac17 	ldw	r3,-336(fp)
   1ded0:	e0bfaa17 	ldw	r2,-344(fp)
   1ded4:	1885883a 	add	r2,r3,r2
   1ded8:	e0bfae15 	stw	r2,-328(fp)
		tmp13 = tmp0 - tmp2;
   1dedc:	e0ffac17 	ldw	r3,-336(fp)
   1dee0:	e0bfaa17 	ldw	r2,-344(fp)
   1dee4:	1885c83a 	sub	r2,r3,r2
   1dee8:	e0bfaf15 	stw	r2,-324(fp)
		tmp11 = tmp1 + tmp3;
   1deec:	e0ffad17 	ldw	r3,-332(fp)
   1def0:	e0bfab17 	ldw	r2,-340(fp)
   1def4:	1885883a 	add	r2,r3,r2
   1def8:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = tmp1 - tmp3;
   1defc:	e0ffad17 	ldw	r3,-332(fp)
   1df00:	e0bfab17 	ldw	r2,-340(fp)
   1df04:	1885c83a 	sub	r2,r3,r2
   1df08:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   1df0c:	e0bfa117 	ldw	r2,-380(fp)
   1df10:	10801c04 	addi	r2,r2,112
   1df14:	1080000b 	ldhu	r2,0(r2)
   1df18:	10ffffcc 	andi	r3,r2,65535
   1df1c:	18e0001c 	xori	r3,r3,32768
   1df20:	18e00004 	addi	r3,r3,-32768
   1df24:	e0bfa217 	ldw	r2,-376(fp)
   1df28:	10803804 	addi	r2,r2,224
   1df2c:	10800017 	ldw	r2,0(r2)
   1df30:	1809883a 	mov	r4,r3
   1df34:	100b883a 	mov	r5,r2
   1df38:	002c1540 	call	2c154 <__mulsi3>
   1df3c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1df40:	e0bfa117 	ldw	r2,-380(fp)
   1df44:	10801404 	addi	r2,r2,80
   1df48:	1080000b 	ldhu	r2,0(r2)
   1df4c:	10ffffcc 	andi	r3,r2,65535
   1df50:	18e0001c 	xori	r3,r3,32768
   1df54:	18e00004 	addi	r3,r3,-32768
   1df58:	e0bfa217 	ldw	r2,-376(fp)
   1df5c:	10802804 	addi	r2,r2,160
   1df60:	10800017 	ldw	r2,0(r2)
   1df64:	1809883a 	mov	r4,r3
   1df68:	100b883a 	mov	r5,r2
   1df6c:	002c1540 	call	2c154 <__mulsi3>
   1df70:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1df74:	e0bfa117 	ldw	r2,-380(fp)
   1df78:	10800c04 	addi	r2,r2,48
   1df7c:	1080000b 	ldhu	r2,0(r2)
   1df80:	10ffffcc 	andi	r3,r2,65535
   1df84:	18e0001c 	xori	r3,r3,32768
   1df88:	18e00004 	addi	r3,r3,-32768
   1df8c:	e0bfa217 	ldw	r2,-376(fp)
   1df90:	10801804 	addi	r2,r2,96
   1df94:	10800017 	ldw	r2,0(r2)
   1df98:	1809883a 	mov	r4,r3
   1df9c:	100b883a 	mov	r5,r2
   1dfa0:	002c1540 	call	2c154 <__mulsi3>
   1dfa4:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1dfa8:	e0bfa117 	ldw	r2,-380(fp)
   1dfac:	10800404 	addi	r2,r2,16
   1dfb0:	1080000b 	ldhu	r2,0(r2)
   1dfb4:	10ffffcc 	andi	r3,r2,65535
   1dfb8:	18e0001c 	xori	r3,r3,32768
   1dfbc:	18e00004 	addi	r3,r3,-32768
   1dfc0:	e0bfa217 	ldw	r2,-376(fp)
   1dfc4:	10800804 	addi	r2,r2,32
   1dfc8:	10800017 	ldw	r2,0(r2)
   1dfcc:	1809883a 	mov	r4,r3
   1dfd0:	100b883a 	mov	r5,r2
   1dfd4:	002c1540 	call	2c154 <__mulsi3>
   1dfd8:	e0bfab15 	stw	r2,-340(fp)

		z2 = tmp0 + tmp2;
   1dfdc:	e0ffac17 	ldw	r3,-336(fp)
   1dfe0:	e0bfaa17 	ldw	r2,-344(fp)
   1dfe4:	1885883a 	add	r2,r3,r2
   1dfe8:	e0bfa715 	stw	r2,-356(fp)
		z3 = tmp1 + tmp3;
   1dfec:	e0ffad17 	ldw	r3,-332(fp)
   1dff0:	e0bfab17 	ldw	r2,-340(fp)
   1dff4:	1885883a 	add	r2,r3,r2
   1dff8:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   1dffc:	e0ffa717 	ldw	r3,-356(fp)
   1e000:	e0bfa817 	ldw	r2,-352(fp)
   1e004:	1885883a 	add	r2,r3,r2
   1e008:	1009883a 	mov	r4,r2
   1e00c:	01496844 	movi	r5,9633
   1e010:	002c1540 	call	2c154 <__mulsi3>
   1e014:	e0bfa915 	stw	r2,-348(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   1e018:	e13fa717 	ldw	r4,-356(fp)
   1e01c:	01704ec4 	movi	r5,-16069
   1e020:	002c1540 	call	2c154 <__mulsi3>
   1e024:	e0bfa715 	stw	r2,-356(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   1e028:	e13fa817 	ldw	r4,-352(fp)
   1e02c:	017ce104 	movi	r5,-3196
   1e030:	002c1540 	call	2c154 <__mulsi3>
   1e034:	e0bfa815 	stw	r2,-352(fp)
		z2 += z1;
   1e038:	e0ffa717 	ldw	r3,-356(fp)
   1e03c:	e0bfa917 	ldw	r2,-348(fp)
   1e040:	1885883a 	add	r2,r3,r2
   1e044:	e0bfa715 	stw	r2,-356(fp)
		z3 += z1;
   1e048:	e0ffa817 	ldw	r3,-352(fp)
   1e04c:	e0bfa917 	ldw	r2,-348(fp)
   1e050:	1885883a 	add	r2,r3,r2
   1e054:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   1e058:	e0ffac17 	ldw	r3,-336(fp)
   1e05c:	e0bfab17 	ldw	r2,-340(fp)
   1e060:	1885883a 	add	r2,r3,r2
   1e064:	1009883a 	mov	r4,r2
   1e068:	0178ccc4 	movi	r5,-7373
   1e06c:	002c1540 	call	2c154 <__mulsi3>
   1e070:	e0bfa915 	stw	r2,-348(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   1e074:	e13fac17 	ldw	r4,-336(fp)
   1e078:	01426384 	movi	r5,2446
   1e07c:	002c1540 	call	2c154 <__mulsi3>
   1e080:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   1e084:	e13fab17 	ldw	r4,-340(fp)
   1e088:	014c02c4 	movi	r5,12299
   1e08c:	002c1540 	call	2c154 <__mulsi3>
   1e090:	e0bfab15 	stw	r2,-340(fp)
		tmp0 += z1 + z2;
   1e094:	e0ffa917 	ldw	r3,-348(fp)
   1e098:	e0bfa717 	ldw	r2,-356(fp)
   1e09c:	1885883a 	add	r2,r3,r2
   1e0a0:	e0ffac17 	ldw	r3,-336(fp)
   1e0a4:	1885883a 	add	r2,r3,r2
   1e0a8:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z1 + z3;
   1e0ac:	e0ffa917 	ldw	r3,-348(fp)
   1e0b0:	e0bfa817 	ldw	r2,-352(fp)
   1e0b4:	1885883a 	add	r2,r3,r2
   1e0b8:	e0ffab17 	ldw	r3,-340(fp)
   1e0bc:	1885883a 	add	r2,r3,r2
   1e0c0:	e0bfab15 	stw	r2,-340(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   1e0c4:	e0ffad17 	ldw	r3,-332(fp)
   1e0c8:	e0bfaa17 	ldw	r2,-344(fp)
   1e0cc:	1885883a 	add	r2,r3,r2
   1e0d0:	1009883a 	mov	r4,r2
   1e0d4:	016b7f44 	movi	r5,-20995
   1e0d8:	002c1540 	call	2c154 <__mulsi3>
   1e0dc:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   1e0e0:	e13fad17 	ldw	r4,-332(fp)
   1e0e4:	01506cc4 	movi	r5,16819
   1e0e8:	002c1540 	call	2c154 <__mulsi3>
   1e0ec:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   1e0f0:	e13faa17 	ldw	r4,-344(fp)
   1e0f4:	01589504 	movi	r5,25172
   1e0f8:	002c1540 	call	2c154 <__mulsi3>
   1e0fc:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 += z1 + z3;
   1e100:	e0ffa917 	ldw	r3,-348(fp)
   1e104:	e0bfa817 	ldw	r2,-352(fp)
   1e108:	1885883a 	add	r2,r3,r2
   1e10c:	e0ffad17 	ldw	r3,-332(fp)
   1e110:	1885883a 	add	r2,r3,r2
   1e114:	e0bfad15 	stw	r2,-332(fp)
		tmp2 += z1 + z2;
   1e118:	e0ffa917 	ldw	r3,-348(fp)
   1e11c:	e0bfa717 	ldw	r2,-356(fp)
   1e120:	1885883a 	add	r2,r3,r2
   1e124:	e0ffaa17 	ldw	r3,-344(fp)
   1e128:	1885883a 	add	r2,r3,r2
   1e12c:	e0bfaa15 	stw	r2,-344(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
   1e130:	e0ffae17 	ldw	r3,-328(fp)
   1e134:	e0bfab17 	ldw	r2,-340(fp)
   1e138:	1885883a 	add	r2,r3,r2
   1e13c:	1007d2fa 	srai	r3,r2,11
   1e140:	e0bfa317 	ldw	r2,-372(fp)
   1e144:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
   1e148:	e0bfa317 	ldw	r2,-372(fp)
   1e14c:	10803804 	addi	r2,r2,224
   1e150:	e13fae17 	ldw	r4,-328(fp)
   1e154:	e0ffab17 	ldw	r3,-340(fp)
   1e158:	20c7c83a 	sub	r3,r4,r3
   1e15c:	1807d2fa 	srai	r3,r3,11
   1e160:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
   1e164:	e0bfa317 	ldw	r2,-372(fp)
   1e168:	10800804 	addi	r2,r2,32
   1e16c:	e13fb017 	ldw	r4,-320(fp)
   1e170:	e0ffaa17 	ldw	r3,-344(fp)
   1e174:	20c7883a 	add	r3,r4,r3
   1e178:	1807d2fa 	srai	r3,r3,11
   1e17c:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
   1e180:	e0bfa317 	ldw	r2,-372(fp)
   1e184:	10803004 	addi	r2,r2,192
   1e188:	e13fb017 	ldw	r4,-320(fp)
   1e18c:	e0ffaa17 	ldw	r3,-344(fp)
   1e190:	20c7c83a 	sub	r3,r4,r3
   1e194:	1807d2fa 	srai	r3,r3,11
   1e198:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
   1e19c:	e0bfa317 	ldw	r2,-372(fp)
   1e1a0:	10801004 	addi	r2,r2,64
   1e1a4:	e13fb117 	ldw	r4,-316(fp)
   1e1a8:	e0ffad17 	ldw	r3,-332(fp)
   1e1ac:	20c7883a 	add	r3,r4,r3
   1e1b0:	1807d2fa 	srai	r3,r3,11
   1e1b4:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
   1e1b8:	e0bfa317 	ldw	r2,-372(fp)
   1e1bc:	10802804 	addi	r2,r2,160
   1e1c0:	e13fb117 	ldw	r4,-316(fp)
   1e1c4:	e0ffad17 	ldw	r3,-332(fp)
   1e1c8:	20c7c83a 	sub	r3,r4,r3
   1e1cc:	1807d2fa 	srai	r3,r3,11
   1e1d0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
   1e1d4:	e0bfa317 	ldw	r2,-372(fp)
   1e1d8:	10801804 	addi	r2,r2,96
   1e1dc:	e13faf17 	ldw	r4,-324(fp)
   1e1e0:	e0ffac17 	ldw	r3,-336(fp)
   1e1e4:	20c7883a 	add	r3,r4,r3
   1e1e8:	1807d2fa 	srai	r3,r3,11
   1e1ec:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
   1e1f0:	e0bfa317 	ldw	r2,-372(fp)
   1e1f4:	10802004 	addi	r2,r2,128
   1e1f8:	e13faf17 	ldw	r4,-324(fp)
   1e1fc:	e0ffac17 	ldw	r3,-336(fp)
   1e200:	20c7c83a 	sub	r3,r4,r3
   1e204:	1807d2fa 	srai	r3,r3,11
   1e208:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
   1e20c:	e0bfa117 	ldw	r2,-380(fp)
   1e210:	10800084 	addi	r2,r2,2
   1e214:	e0bfa115 	stw	r2,-380(fp)
		quantptr++;
   1e218:	e0bfa217 	ldw	r2,-376(fp)
   1e21c:	10800104 	addi	r2,r2,4
   1e220:	e0bfa215 	stw	r2,-376(fp)
		wsptr++;
   1e224:	e0bfa317 	ldw	r2,-372(fp)
   1e228:	10800104 	addi	r2,r2,4
   1e22c:	e0bfa315 	stw	r2,-372(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
   1e230:	e0bfa417 	ldw	r2,-368(fp)
   1e234:	10bfffc4 	addi	r2,r2,-1
   1e238:	e0bfa415 	stw	r2,-368(fp)
   1e23c:	e0bfa417 	ldw	r2,-368(fp)
   1e240:	00be6316 	blt	zero,r2,1dbd0 <jpeg_idct_16x8+0x5c>
	}

	/* Pass 2: process 8 rows from work array, store into output array.
	* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
	*/
	wsptr = workspace;
   1e244:	e0bfbc04 	addi	r2,fp,-272
   1e248:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 8; ctr++) {
   1e24c:	e03fa415 	stw	zero,-368(fp)
   1e250:	0001f306 	br	1ea20 <jpeg_idct_16x8+0xeac>
		outptr = output_buf[ctr] + output_col;
   1e254:	e0bfa417 	ldw	r2,-368(fp)
   1e258:	1085883a 	add	r2,r2,r2
   1e25c:	1085883a 	add	r2,r2,r2
   1e260:	e0ffff17 	ldw	r3,-4(fp)
   1e264:	1885883a 	add	r2,r3,r2
   1e268:	10c00017 	ldw	r3,0(r2)
   1e26c:	e0800317 	ldw	r2,12(fp)
   1e270:	1885883a 	add	r2,r3,r2
   1e274:	e0bfb215 	stw	r2,-312(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1e278:	e0bfa317 	ldw	r2,-372(fp)
   1e27c:	10800017 	ldw	r2,0(r2)
   1e280:	10800404 	addi	r2,r2,16
   1e284:	e0bfac15 	stw	r2,-336(fp)
		tmp0 <<= CONST_BITS;
   1e288:	e0bfac17 	ldw	r2,-336(fp)
   1e28c:	1004937a 	slli	r2,r2,13
   1e290:	e0bfac15 	stw	r2,-336(fp)

		z1 = (INT32) wsptr[4];
   1e294:	e0bfa317 	ldw	r2,-372(fp)
   1e298:	10800404 	addi	r2,r2,16
   1e29c:	10800017 	ldw	r2,0(r2)
   1e2a0:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
   1e2a4:	e13fa917 	ldw	r4,-348(fp)
   1e2a8:	014a73c4 	movi	r5,10703
   1e2ac:	002c1540 	call	2c154 <__mulsi3>
   1e2b0:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
   1e2b4:	e13fa917 	ldw	r4,-348(fp)
   1e2b8:	01445444 	movi	r5,4433
   1e2bc:	002c1540 	call	2c154 <__mulsi3>
   1e2c0:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp0 + tmp1;
   1e2c4:	e0ffac17 	ldw	r3,-336(fp)
   1e2c8:	e0bfad17 	ldw	r2,-332(fp)
   1e2cc:	1885883a 	add	r2,r3,r2
   1e2d0:	e0bfae15 	stw	r2,-328(fp)
		tmp11 = tmp0 - tmp1;
   1e2d4:	e0ffac17 	ldw	r3,-336(fp)
   1e2d8:	e0bfad17 	ldw	r2,-332(fp)
   1e2dc:	1885c83a 	sub	r2,r3,r2
   1e2e0:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = tmp0 + tmp2;
   1e2e4:	e0ffac17 	ldw	r3,-336(fp)
   1e2e8:	e0bfaa17 	ldw	r2,-344(fp)
   1e2ec:	1885883a 	add	r2,r3,r2
   1e2f0:	e0bfb115 	stw	r2,-316(fp)
		tmp13 = tmp0 - tmp2;
   1e2f4:	e0ffac17 	ldw	r3,-336(fp)
   1e2f8:	e0bfaa17 	ldw	r2,-344(fp)
   1e2fc:	1885c83a 	sub	r2,r3,r2
   1e300:	e0bfaf15 	stw	r2,-324(fp)

		z1 = (INT32) wsptr[2];
   1e304:	e0bfa317 	ldw	r2,-372(fp)
   1e308:	10800204 	addi	r2,r2,8
   1e30c:	10800017 	ldw	r2,0(r2)
   1e310:	e0bfa915 	stw	r2,-348(fp)
		z2 = (INT32) wsptr[6];
   1e314:	e0bfa317 	ldw	r2,-372(fp)
   1e318:	10800604 	addi	r2,r2,24
   1e31c:	10800017 	ldw	r2,0(r2)
   1e320:	e0bfa715 	stw	r2,-356(fp)
		z3 = z1 - z2;
   1e324:	e0ffa917 	ldw	r3,-348(fp)
   1e328:	e0bfa717 	ldw	r2,-356(fp)
   1e32c:	1885c83a 	sub	r2,r3,r2
   1e330:	e0bfa815 	stw	r2,-352(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
   1e334:	e13fa817 	ldw	r4,-352(fp)
   1e338:	01423504 	movi	r5,2260
   1e33c:	002c1540 	call	2c154 <__mulsi3>
   1e340:	e0bfb315 	stw	r2,-308(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
   1e344:	e13fa817 	ldw	r4,-352(fp)
   1e348:	014b18c4 	movi	r5,11363
   1e34c:	002c1540 	call	2c154 <__mulsi3>
   1e350:	e0bfa815 	stw	r2,-352(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
   1e354:	e13fa717 	ldw	r4,-356(fp)
   1e358:	015480c4 	movi	r5,20995
   1e35c:	002c1540 	call	2c154 <__mulsi3>
   1e360:	1007883a 	mov	r3,r2
   1e364:	e0bfa817 	ldw	r2,-352(fp)
   1e368:	1885883a 	add	r2,r3,r2
   1e36c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
   1e370:	e13fa917 	ldw	r4,-348(fp)
   1e374:	01473344 	movi	r5,7373
   1e378:	002c1540 	call	2c154 <__mulsi3>
   1e37c:	1007883a 	mov	r3,r2
   1e380:	e0bfb317 	ldw	r2,-308(fp)
   1e384:	1885883a 	add	r2,r3,r2
   1e388:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
   1e38c:	e13fa917 	ldw	r4,-348(fp)
   1e390:	017b3084 	movi	r5,-4926
   1e394:	002c1540 	call	2c154 <__mulsi3>
   1e398:	1007883a 	mov	r3,r2
   1e39c:	e0bfa817 	ldw	r2,-352(fp)
   1e3a0:	1885883a 	add	r2,r3,r2
   1e3a4:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
   1e3a8:	e13fa717 	ldw	r4,-356(fp)
   1e3ac:	017bec04 	movi	r5,-4176
   1e3b0:	002c1540 	call	2c154 <__mulsi3>
   1e3b4:	1007883a 	mov	r3,r2
   1e3b8:	e0bfb317 	ldw	r2,-308(fp)
   1e3bc:	1885883a 	add	r2,r3,r2
   1e3c0:	e0bfab15 	stw	r2,-340(fp)

		tmp20 = tmp10 + tmp0;
   1e3c4:	e0ffae17 	ldw	r3,-328(fp)
   1e3c8:	e0bfac17 	ldw	r2,-336(fp)
   1e3cc:	1885883a 	add	r2,r3,r2
   1e3d0:	e0bfb415 	stw	r2,-304(fp)
		tmp27 = tmp10 - tmp0;
   1e3d4:	e0ffae17 	ldw	r3,-328(fp)
   1e3d8:	e0bfac17 	ldw	r2,-336(fp)
   1e3dc:	1885c83a 	sub	r2,r3,r2
   1e3e0:	e0bfb515 	stw	r2,-300(fp)
		tmp21 = tmp12 + tmp1;
   1e3e4:	e0ffb117 	ldw	r3,-316(fp)
   1e3e8:	e0bfad17 	ldw	r2,-332(fp)
   1e3ec:	1885883a 	add	r2,r3,r2
   1e3f0:	e0bfb615 	stw	r2,-296(fp)
		tmp26 = tmp12 - tmp1;
   1e3f4:	e0ffb117 	ldw	r3,-316(fp)
   1e3f8:	e0bfad17 	ldw	r2,-332(fp)
   1e3fc:	1885c83a 	sub	r2,r3,r2
   1e400:	e0bfb715 	stw	r2,-292(fp)
		tmp22 = tmp13 + tmp2;
   1e404:	e0ffaf17 	ldw	r3,-324(fp)
   1e408:	e0bfaa17 	ldw	r2,-344(fp)
   1e40c:	1885883a 	add	r2,r3,r2
   1e410:	e0bfb815 	stw	r2,-288(fp)
		tmp25 = tmp13 - tmp2;
   1e414:	e0ffaf17 	ldw	r3,-324(fp)
   1e418:	e0bfaa17 	ldw	r2,-344(fp)
   1e41c:	1885c83a 	sub	r2,r3,r2
   1e420:	e0bfb915 	stw	r2,-284(fp)
		tmp23 = tmp11 + tmp3;
   1e424:	e0ffb017 	ldw	r3,-320(fp)
   1e428:	e0bfab17 	ldw	r2,-340(fp)
   1e42c:	1885883a 	add	r2,r3,r2
   1e430:	e0bfba15 	stw	r2,-280(fp)
		tmp24 = tmp11 - tmp3;
   1e434:	e0ffb017 	ldw	r3,-320(fp)
   1e438:	e0bfab17 	ldw	r2,-340(fp)
   1e43c:	1885c83a 	sub	r2,r3,r2
   1e440:	e0bfbb15 	stw	r2,-276(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1e444:	e0bfa317 	ldw	r2,-372(fp)
   1e448:	10800104 	addi	r2,r2,4
   1e44c:	10800017 	ldw	r2,0(r2)
   1e450:	e0bfa915 	stw	r2,-348(fp)
		z2 = (INT32) wsptr[3];
   1e454:	e0bfa317 	ldw	r2,-372(fp)
   1e458:	10800304 	addi	r2,r2,12
   1e45c:	10800017 	ldw	r2,0(r2)
   1e460:	e0bfa715 	stw	r2,-356(fp)
		z3 = (INT32) wsptr[5];
   1e464:	e0bfa317 	ldw	r2,-372(fp)
   1e468:	10800504 	addi	r2,r2,20
   1e46c:	10800017 	ldw	r2,0(r2)
   1e470:	e0bfa815 	stw	r2,-352(fp)
		z4 = (INT32) wsptr[7];
   1e474:	e0bfa317 	ldw	r2,-372(fp)
   1e478:	10800704 	addi	r2,r2,28
   1e47c:	10800017 	ldw	r2,0(r2)
   1e480:	e0bfb315 	stw	r2,-308(fp)

		tmp11 = z1 + z3;
   1e484:	e0ffa917 	ldw	r3,-348(fp)
   1e488:	e0bfa817 	ldw	r2,-352(fp)
   1e48c:	1885883a 	add	r2,r3,r2
   1e490:	e0bfb015 	stw	r2,-320(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
   1e494:	e0ffa917 	ldw	r3,-348(fp)
   1e498:	e0bfa717 	ldw	r2,-356(fp)
   1e49c:	1885883a 	add	r2,r3,r2
   1e4a0:	1009883a 	mov	r4,r2
   1e4a4:	014ad384 	movi	r5,11086
   1e4a8:	002c1540 	call	2c154 <__mulsi3>
   1e4ac:	e0bfad15 	stw	r2,-332(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
   1e4b0:	e13fb017 	ldw	r4,-320(fp)
   1e4b4:	0149fa44 	movi	r5,10217
   1e4b8:	002c1540 	call	2c154 <__mulsi3>
   1e4bc:	e0bfaa15 	stw	r2,-344(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
   1e4c0:	e0ffa917 	ldw	r3,-348(fp)
   1e4c4:	e0bfb317 	ldw	r2,-308(fp)
   1e4c8:	1885883a 	add	r2,r3,r2
   1e4cc:	1009883a 	mov	r4,r2
   1e4d0:	0148bf04 	movi	r5,8956
   1e4d4:	002c1540 	call	2c154 <__mulsi3>
   1e4d8:	e0bfab15 	stw	r2,-340(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
   1e4dc:	e0ffa917 	ldw	r3,-348(fp)
   1e4e0:	e0bfb317 	ldw	r2,-308(fp)
   1e4e4:	1885c83a 	sub	r2,r3,r2
   1e4e8:	1009883a 	mov	r4,r2
   1e4ec:	01472d84 	movi	r5,7350
   1e4f0:	002c1540 	call	2c154 <__mulsi3>
   1e4f4:	e0bfae15 	stw	r2,-328(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
   1e4f8:	e13fb017 	ldw	r4,-320(fp)
   1e4fc:	01455544 	movi	r5,5461
   1e500:	002c1540 	call	2c154 <__mulsi3>
   1e504:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
   1e508:	e0ffa917 	ldw	r3,-348(fp)
   1e50c:	e0bfa717 	ldw	r2,-356(fp)
   1e510:	1885c83a 	sub	r2,r3,r2
   1e514:	1009883a 	mov	r4,r2
   1e518:	014348c4 	movi	r5,3363
   1e51c:	002c1540 	call	2c154 <__mulsi3>
   1e520:	e0bfb115 	stw	r2,-316(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
   1e524:	e0ffad17 	ldw	r3,-332(fp)
   1e528:	e0bfaa17 	ldw	r2,-344(fp)
   1e52c:	1887883a 	add	r3,r3,r2
   1e530:	e0bfab17 	ldw	r2,-340(fp)
   1e534:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
   1e538:	e13fa917 	ldw	r4,-348(fp)
   1e53c:	016db584 	movi	r5,-18730
   1e540:	002c1540 	call	2c154 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
   1e544:	8085883a 	add	r2,r16,r2
   1e548:	e0bfac15 	stw	r2,-336(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1e54c:	e0ffae17 	ldw	r3,-328(fp)
   1e550:	e0bfb017 	ldw	r2,-320(fp)
   1e554:	1887883a 	add	r3,r3,r2
   1e558:	e0bfb117 	ldw	r2,-316(fp)
   1e55c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
   1e560:	e13fa917 	ldw	r4,-348(fp)
   1e564:	01715084 	movi	r5,-15038
   1e568:	002c1540 	call	2c154 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   1e56c:	8085883a 	add	r2,r16,r2
   1e570:	e0bfaf15 	stw	r2,-324(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
   1e574:	e0ffa717 	ldw	r3,-356(fp)
   1e578:	e0bfa817 	ldw	r2,-352(fp)
   1e57c:	1885883a 	add	r2,r3,r2
   1e580:	1009883a 	mov	r4,r2
   1e584:	01411c04 	movi	r5,1136
   1e588:	002c1540 	call	2c154 <__mulsi3>
   1e58c:	e0bfa915 	stw	r2,-348(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
   1e590:	e13fa717 	ldw	r4,-356(fp)
   1e594:	01409344 	movi	r5,589
   1e598:	002c1540 	call	2c154 <__mulsi3>
   1e59c:	1007883a 	mov	r3,r2
   1e5a0:	e0bfa917 	ldw	r2,-348(fp)
   1e5a4:	1885883a 	add	r2,r3,r2
   1e5a8:	e0ffad17 	ldw	r3,-332(fp)
   1e5ac:	1885883a 	add	r2,r3,r2
   1e5b0:	e0bfad15 	stw	r2,-332(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
   1e5b4:	e13fa817 	ldw	r4,-352(fp)
   1e5b8:	0176fe84 	movi	r5,-9222
   1e5bc:	002c1540 	call	2c154 <__mulsi3>
   1e5c0:	1007883a 	mov	r3,r2
   1e5c4:	e0bfa917 	ldw	r2,-348(fp)
   1e5c8:	1885883a 	add	r2,r3,r2
   1e5cc:	e0ffaa17 	ldw	r3,-344(fp)
   1e5d0:	1885883a 	add	r2,r3,r2
   1e5d4:	e0bfaa15 	stw	r2,-344(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
   1e5d8:	e0ffa817 	ldw	r3,-352(fp)
   1e5dc:	e0bfa717 	ldw	r2,-356(fp)
   1e5e0:	1885c83a 	sub	r2,r3,r2
   1e5e4:	1009883a 	mov	r4,r2
   1e5e8:	014b4244 	movi	r5,11529
   1e5ec:	002c1540 	call	2c154 <__mulsi3>
   1e5f0:	e0bfa915 	stw	r2,-348(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
   1e5f4:	e13fa817 	ldw	r4,-352(fp)
   1e5f8:	0179de84 	movi	r5,-6278
   1e5fc:	002c1540 	call	2c154 <__mulsi3>
   1e600:	1007883a 	mov	r3,r2
   1e604:	e0bfa917 	ldw	r2,-348(fp)
   1e608:	1885883a 	add	r2,r3,r2
   1e60c:	e0ffb017 	ldw	r3,-320(fp)
   1e610:	1885883a 	add	r2,r3,r2
   1e614:	e0bfb015 	stw	r2,-320(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
   1e618:	e13fa717 	ldw	r4,-356(fp)
   1e61c:	014fc684 	movi	r5,16154
   1e620:	002c1540 	call	2c154 <__mulsi3>
   1e624:	1007883a 	mov	r3,r2
   1e628:	e0bfa917 	ldw	r2,-348(fp)
   1e62c:	1885883a 	add	r2,r3,r2
   1e630:	e0ffb117 	ldw	r3,-316(fp)
   1e634:	1885883a 	add	r2,r3,r2
   1e638:	e0bfb115 	stw	r2,-316(fp)
		z2    += z4;
   1e63c:	e0ffa717 	ldw	r3,-356(fp)
   1e640:	e0bfb317 	ldw	r2,-308(fp)
   1e644:	1885883a 	add	r2,r3,r2
   1e648:	e0bfa715 	stw	r2,-356(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
   1e64c:	e13fa717 	ldw	r4,-356(fp)
   1e650:	017aaac4 	movi	r5,-5461
   1e654:	002c1540 	call	2c154 <__mulsi3>
   1e658:	e0bfa915 	stw	r2,-348(fp)
		tmp1  += z1;
   1e65c:	e0ffad17 	ldw	r3,-332(fp)
   1e660:	e0bfa917 	ldw	r2,-348(fp)
   1e664:	1885883a 	add	r2,r3,r2
   1e668:	e0bfad15 	stw	r2,-332(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
   1e66c:	e13fb317 	ldw	r4,-308(fp)
   1e670:	01488604 	movi	r5,8728
   1e674:	002c1540 	call	2c154 <__mulsi3>
   1e678:	1007883a 	mov	r3,r2
   1e67c:	e0bfa917 	ldw	r2,-348(fp)
   1e680:	1885883a 	add	r2,r3,r2
   1e684:	e0ffab17 	ldw	r3,-340(fp)
   1e688:	1885883a 	add	r2,r3,r2
   1e68c:	e0bfab15 	stw	r2,-340(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
   1e690:	e13fa717 	ldw	r4,-356(fp)
   1e694:	017605c4 	movi	r5,-10217
   1e698:	002c1540 	call	2c154 <__mulsi3>
   1e69c:	e0bfa715 	stw	r2,-356(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
   1e6a0:	e13fb317 	ldw	r4,-308(fp)
   1e6a4:	01592144 	movi	r5,25733
   1e6a8:	002c1540 	call	2c154 <__mulsi3>
   1e6ac:	1007883a 	mov	r3,r2
   1e6b0:	e0bfa717 	ldw	r2,-356(fp)
   1e6b4:	1885883a 	add	r2,r3,r2
   1e6b8:	e0ffae17 	ldw	r3,-328(fp)
   1e6bc:	1885883a 	add	r2,r3,r2
   1e6c0:	e0bfae15 	stw	r2,-328(fp)
		tmp12 += z2;
   1e6c4:	e0ffb117 	ldw	r3,-316(fp)
   1e6c8:	e0bfa717 	ldw	r2,-356(fp)
   1e6cc:	1885883a 	add	r2,r3,r2
   1e6d0:	e0bfb115 	stw	r2,-316(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
   1e6d4:	e0ffa817 	ldw	r3,-352(fp)
   1e6d8:	e0bfb317 	ldw	r2,-308(fp)
   1e6dc:	1885883a 	add	r2,r3,r2
   1e6e0:	1009883a 	mov	r4,r2
   1e6e4:	01752c84 	movi	r5,-11086
   1e6e8:	002c1540 	call	2c154 <__mulsi3>
   1e6ec:	e0bfa715 	stw	r2,-356(fp)
		tmp2  += z2;
   1e6f0:	e0ffaa17 	ldw	r3,-344(fp)
   1e6f4:	e0bfa717 	ldw	r2,-356(fp)
   1e6f8:	1885883a 	add	r2,r3,r2
   1e6fc:	e0bfaa15 	stw	r2,-344(fp)
		tmp3  += z2;
   1e700:	e0ffab17 	ldw	r3,-340(fp)
   1e704:	e0bfa717 	ldw	r2,-356(fp)
   1e708:	1885883a 	add	r2,r3,r2
   1e70c:	e0bfab15 	stw	r2,-340(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
   1e710:	e0ffb317 	ldw	r3,-308(fp)
   1e714:	e0bfa817 	ldw	r2,-352(fp)
   1e718:	1885c83a 	sub	r2,r3,r2
   1e71c:	1009883a 	mov	r4,r2
   1e720:	014348c4 	movi	r5,3363
   1e724:	002c1540 	call	2c154 <__mulsi3>
   1e728:	e0bfa715 	stw	r2,-356(fp)
		tmp10 += z2;
   1e72c:	e0ffae17 	ldw	r3,-328(fp)
   1e730:	e0bfa717 	ldw	r2,-356(fp)
   1e734:	1885883a 	add	r2,r3,r2
   1e738:	e0bfae15 	stw	r2,-328(fp)
		tmp11 += z2;
   1e73c:	e0ffb017 	ldw	r3,-320(fp)
   1e740:	e0bfa717 	ldw	r2,-356(fp)
   1e744:	1885883a 	add	r2,r3,r2
   1e748:	e0bfb015 	stw	r2,-320(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
   1e74c:	e0ffb417 	ldw	r3,-304(fp)
   1e750:	e0bfac17 	ldw	r2,-336(fp)
   1e754:	1885883a 	add	r2,r3,r2
   1e758:	1005d4ba 	srai	r2,r2,18
   1e75c:	1080ffcc 	andi	r2,r2,1023
   1e760:	e0ffa517 	ldw	r3,-364(fp)
   1e764:	1885883a 	add	r2,r3,r2
   1e768:	10c00003 	ldbu	r3,0(r2)
   1e76c:	e0bfb217 	ldw	r2,-312(fp)
   1e770:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
   1e774:	e0bfb217 	ldw	r2,-312(fp)
   1e778:	108003c4 	addi	r2,r2,15
   1e77c:	e13fb417 	ldw	r4,-304(fp)
   1e780:	e0ffac17 	ldw	r3,-336(fp)
   1e784:	20c7c83a 	sub	r3,r4,r3
   1e788:	1807d4ba 	srai	r3,r3,18
   1e78c:	18c0ffcc 	andi	r3,r3,1023
   1e790:	e13fa517 	ldw	r4,-364(fp)
   1e794:	20c7883a 	add	r3,r4,r3
   1e798:	18c00003 	ldbu	r3,0(r3)
   1e79c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
   1e7a0:	e0bfb217 	ldw	r2,-312(fp)
   1e7a4:	10800044 	addi	r2,r2,1
   1e7a8:	e13fb617 	ldw	r4,-296(fp)
   1e7ac:	e0ffad17 	ldw	r3,-332(fp)
   1e7b0:	20c7883a 	add	r3,r4,r3
   1e7b4:	1807d4ba 	srai	r3,r3,18
   1e7b8:	18c0ffcc 	andi	r3,r3,1023
   1e7bc:	e13fa517 	ldw	r4,-364(fp)
   1e7c0:	20c7883a 	add	r3,r4,r3
   1e7c4:	18c00003 	ldbu	r3,0(r3)
   1e7c8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
   1e7cc:	e0bfb217 	ldw	r2,-312(fp)
   1e7d0:	10800384 	addi	r2,r2,14
   1e7d4:	e13fb617 	ldw	r4,-296(fp)
   1e7d8:	e0ffad17 	ldw	r3,-332(fp)
   1e7dc:	20c7c83a 	sub	r3,r4,r3
   1e7e0:	1807d4ba 	srai	r3,r3,18
   1e7e4:	18c0ffcc 	andi	r3,r3,1023
   1e7e8:	e13fa517 	ldw	r4,-364(fp)
   1e7ec:	20c7883a 	add	r3,r4,r3
   1e7f0:	18c00003 	ldbu	r3,0(r3)
   1e7f4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
   1e7f8:	e0bfb217 	ldw	r2,-312(fp)
   1e7fc:	10800084 	addi	r2,r2,2
   1e800:	e13fb817 	ldw	r4,-288(fp)
   1e804:	e0ffaa17 	ldw	r3,-344(fp)
   1e808:	20c7883a 	add	r3,r4,r3
   1e80c:	1807d4ba 	srai	r3,r3,18
   1e810:	18c0ffcc 	andi	r3,r3,1023
   1e814:	e13fa517 	ldw	r4,-364(fp)
   1e818:	20c7883a 	add	r3,r4,r3
   1e81c:	18c00003 	ldbu	r3,0(r3)
   1e820:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
   1e824:	e0bfb217 	ldw	r2,-312(fp)
   1e828:	10800344 	addi	r2,r2,13
   1e82c:	e13fb817 	ldw	r4,-288(fp)
   1e830:	e0ffaa17 	ldw	r3,-344(fp)
   1e834:	20c7c83a 	sub	r3,r4,r3
   1e838:	1807d4ba 	srai	r3,r3,18
   1e83c:	18c0ffcc 	andi	r3,r3,1023
   1e840:	e13fa517 	ldw	r4,-364(fp)
   1e844:	20c7883a 	add	r3,r4,r3
   1e848:	18c00003 	ldbu	r3,0(r3)
   1e84c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
   1e850:	e0bfb217 	ldw	r2,-312(fp)
   1e854:	108000c4 	addi	r2,r2,3
   1e858:	e13fba17 	ldw	r4,-280(fp)
   1e85c:	e0ffab17 	ldw	r3,-340(fp)
   1e860:	20c7883a 	add	r3,r4,r3
   1e864:	1807d4ba 	srai	r3,r3,18
   1e868:	18c0ffcc 	andi	r3,r3,1023
   1e86c:	e13fa517 	ldw	r4,-364(fp)
   1e870:	20c7883a 	add	r3,r4,r3
   1e874:	18c00003 	ldbu	r3,0(r3)
   1e878:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
   1e87c:	e0bfb217 	ldw	r2,-312(fp)
   1e880:	10800304 	addi	r2,r2,12
   1e884:	e13fba17 	ldw	r4,-280(fp)
   1e888:	e0ffab17 	ldw	r3,-340(fp)
   1e88c:	20c7c83a 	sub	r3,r4,r3
   1e890:	1807d4ba 	srai	r3,r3,18
   1e894:	18c0ffcc 	andi	r3,r3,1023
   1e898:	e13fa517 	ldw	r4,-364(fp)
   1e89c:	20c7883a 	add	r3,r4,r3
   1e8a0:	18c00003 	ldbu	r3,0(r3)
   1e8a4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
   1e8a8:	e0bfb217 	ldw	r2,-312(fp)
   1e8ac:	10800104 	addi	r2,r2,4
   1e8b0:	e13fbb17 	ldw	r4,-276(fp)
   1e8b4:	e0ffae17 	ldw	r3,-328(fp)
   1e8b8:	20c7883a 	add	r3,r4,r3
   1e8bc:	1807d4ba 	srai	r3,r3,18
   1e8c0:	18c0ffcc 	andi	r3,r3,1023
   1e8c4:	e13fa517 	ldw	r4,-364(fp)
   1e8c8:	20c7883a 	add	r3,r4,r3
   1e8cc:	18c00003 	ldbu	r3,0(r3)
   1e8d0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
   1e8d4:	e0bfb217 	ldw	r2,-312(fp)
   1e8d8:	108002c4 	addi	r2,r2,11
   1e8dc:	e13fbb17 	ldw	r4,-276(fp)
   1e8e0:	e0ffae17 	ldw	r3,-328(fp)
   1e8e4:	20c7c83a 	sub	r3,r4,r3
   1e8e8:	1807d4ba 	srai	r3,r3,18
   1e8ec:	18c0ffcc 	andi	r3,r3,1023
   1e8f0:	e13fa517 	ldw	r4,-364(fp)
   1e8f4:	20c7883a 	add	r3,r4,r3
   1e8f8:	18c00003 	ldbu	r3,0(r3)
   1e8fc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
   1e900:	e0bfb217 	ldw	r2,-312(fp)
   1e904:	10800144 	addi	r2,r2,5
   1e908:	e13fb917 	ldw	r4,-284(fp)
   1e90c:	e0ffb017 	ldw	r3,-320(fp)
   1e910:	20c7883a 	add	r3,r4,r3
   1e914:	1807d4ba 	srai	r3,r3,18
   1e918:	18c0ffcc 	andi	r3,r3,1023
   1e91c:	e13fa517 	ldw	r4,-364(fp)
   1e920:	20c7883a 	add	r3,r4,r3
   1e924:	18c00003 	ldbu	r3,0(r3)
   1e928:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
   1e92c:	e0bfb217 	ldw	r2,-312(fp)
   1e930:	10800284 	addi	r2,r2,10
   1e934:	e13fb917 	ldw	r4,-284(fp)
   1e938:	e0ffb017 	ldw	r3,-320(fp)
   1e93c:	20c7c83a 	sub	r3,r4,r3
   1e940:	1807d4ba 	srai	r3,r3,18
   1e944:	18c0ffcc 	andi	r3,r3,1023
   1e948:	e13fa517 	ldw	r4,-364(fp)
   1e94c:	20c7883a 	add	r3,r4,r3
   1e950:	18c00003 	ldbu	r3,0(r3)
   1e954:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
   1e958:	e0bfb217 	ldw	r2,-312(fp)
   1e95c:	10800184 	addi	r2,r2,6
   1e960:	e13fb717 	ldw	r4,-292(fp)
   1e964:	e0ffb117 	ldw	r3,-316(fp)
   1e968:	20c7883a 	add	r3,r4,r3
   1e96c:	1807d4ba 	srai	r3,r3,18
   1e970:	18c0ffcc 	andi	r3,r3,1023
   1e974:	e13fa517 	ldw	r4,-364(fp)
   1e978:	20c7883a 	add	r3,r4,r3
   1e97c:	18c00003 	ldbu	r3,0(r3)
   1e980:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
   1e984:	e0bfb217 	ldw	r2,-312(fp)
   1e988:	10800244 	addi	r2,r2,9
   1e98c:	e13fb717 	ldw	r4,-292(fp)
   1e990:	e0ffb117 	ldw	r3,-316(fp)
   1e994:	20c7c83a 	sub	r3,r4,r3
   1e998:	1807d4ba 	srai	r3,r3,18
   1e99c:	18c0ffcc 	andi	r3,r3,1023
   1e9a0:	e13fa517 	ldw	r4,-364(fp)
   1e9a4:	20c7883a 	add	r3,r4,r3
   1e9a8:	18c00003 	ldbu	r3,0(r3)
   1e9ac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
   1e9b0:	e0bfb217 	ldw	r2,-312(fp)
   1e9b4:	108001c4 	addi	r2,r2,7
   1e9b8:	e13fb517 	ldw	r4,-300(fp)
   1e9bc:	e0ffaf17 	ldw	r3,-324(fp)
   1e9c0:	20c7883a 	add	r3,r4,r3
   1e9c4:	1807d4ba 	srai	r3,r3,18
   1e9c8:	18c0ffcc 	andi	r3,r3,1023
   1e9cc:	e13fa517 	ldw	r4,-364(fp)
   1e9d0:	20c7883a 	add	r3,r4,r3
   1e9d4:	18c00003 	ldbu	r3,0(r3)
   1e9d8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
   1e9dc:	e0bfb217 	ldw	r2,-312(fp)
   1e9e0:	10800204 	addi	r2,r2,8
   1e9e4:	e13fb517 	ldw	r4,-300(fp)
   1e9e8:	e0ffaf17 	ldw	r3,-324(fp)
   1e9ec:	20c7c83a 	sub	r3,r4,r3
   1e9f0:	1807d4ba 	srai	r3,r3,18
   1e9f4:	18c0ffcc 	andi	r3,r3,1023
   1e9f8:	e13fa517 	ldw	r4,-364(fp)
   1e9fc:	20c7883a 	add	r3,r4,r3
   1ea00:	18c00003 	ldbu	r3,0(r3)
   1ea04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1ea08:	e0bfa317 	ldw	r2,-372(fp)
   1ea0c:	10800804 	addi	r2,r2,32
   1ea10:	e0bfa315 	stw	r2,-372(fp)

	/* Pass 2: process 8 rows from work array, store into output array.
	* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++) {
   1ea14:	e0bfa417 	ldw	r2,-368(fp)
   1ea18:	10800044 	addi	r2,r2,1
   1ea1c:	e0bfa415 	stw	r2,-368(fp)
   1ea20:	e0bfa417 	ldw	r2,-368(fp)
   1ea24:	10800210 	cmplti	r2,r2,8
   1ea28:	103e0a1e 	bne	r2,zero,1e254 <jpeg_idct_16x8+0x6e0>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1ea2c:	e037883a 	mov	sp,fp
   1ea30:	dfc00217 	ldw	ra,8(sp)
   1ea34:	df000117 	ldw	fp,4(sp)
   1ea38:	dc000017 	ldw	r16,0(sp)
   1ea3c:	dec00304 	addi	sp,sp,12
   1ea40:	f800283a 	ret

0001ea44 <jpeg_idct_14x7>:

GLOBAL(void)
	jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1ea44:	deffa904 	addi	sp,sp,-348
   1ea48:	dfc05615 	stw	ra,344(sp)
   1ea4c:	df005515 	stw	fp,340(sp)
   1ea50:	dc005415 	stw	r16,336(sp)
   1ea54:	df005404 	addi	fp,sp,336
   1ea58:	e13ffc15 	stw	r4,-16(fp)
   1ea5c:	e17ffd15 	stw	r5,-12(fp)
   1ea60:	e1bffe15 	stw	r6,-8(fp)
   1ea64:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1ea68:	e0bffc17 	ldw	r2,-16(fp)
   1ea6c:	10804917 	ldw	r2,292(r2)
   1ea70:	10802004 	addi	r2,r2,128
   1ea74:	e0bfb015 	stw	r2,-320(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
		*/
		inptr = coef_block;
   1ea78:	e0bffe17 	ldw	r2,-8(fp)
   1ea7c:	e0bfac15 	stw	r2,-336(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1ea80:	e0bffd17 	ldw	r2,-12(fp)
   1ea84:	10801517 	ldw	r2,84(r2)
   1ea88:	e0bfad15 	stw	r2,-332(fp)
	wsptr = workspace;
   1ea8c:	e0bfc404 	addi	r2,fp,-240
   1ea90:	e0bfae15 	stw	r2,-328(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1ea94:	e03faf15 	stw	zero,-324(fp)
   1ea98:	00010d06 	br	1eed0 <jpeg_idct_14x7+0x48c>
		/* Even part */

		tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1ea9c:	e0bfac17 	ldw	r2,-336(fp)
   1eaa0:	1080000b 	ldhu	r2,0(r2)
   1eaa4:	10ffffcc 	andi	r3,r2,65535
   1eaa8:	18e0001c 	xori	r3,r3,32768
   1eaac:	18e00004 	addi	r3,r3,-32768
   1eab0:	e0bfad17 	ldw	r2,-332(fp)
   1eab4:	10800017 	ldw	r2,0(r2)
   1eab8:	1809883a 	mov	r4,r3
   1eabc:	100b883a 	mov	r5,r2
   1eac0:	002c1540 	call	2c154 <__mulsi3>
   1eac4:	e0bfb115 	stw	r2,-316(fp)
		tmp23 <<= CONST_BITS;
   1eac8:	e0bfb117 	ldw	r2,-316(fp)
   1eacc:	1004937a 	slli	r2,r2,13
   1ead0:	e0bfb115 	stw	r2,-316(fp)
		/* Add fudge factor here for final descale. */
		tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
   1ead4:	e0bfb117 	ldw	r2,-316(fp)
   1ead8:	10810004 	addi	r2,r2,1024
   1eadc:	e0bfb115 	stw	r2,-316(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1eae0:	e0bfac17 	ldw	r2,-336(fp)
   1eae4:	10800804 	addi	r2,r2,32
   1eae8:	1080000b 	ldhu	r2,0(r2)
   1eaec:	10ffffcc 	andi	r3,r2,65535
   1eaf0:	18e0001c 	xori	r3,r3,32768
   1eaf4:	18e00004 	addi	r3,r3,-32768
   1eaf8:	e0bfad17 	ldw	r2,-332(fp)
   1eafc:	10801004 	addi	r2,r2,64
   1eb00:	10800017 	ldw	r2,0(r2)
   1eb04:	1809883a 	mov	r4,r3
   1eb08:	100b883a 	mov	r5,r2
   1eb0c:	002c1540 	call	2c154 <__mulsi3>
   1eb10:	e0bfb215 	stw	r2,-312(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1eb14:	e0bfac17 	ldw	r2,-336(fp)
   1eb18:	10801004 	addi	r2,r2,64
   1eb1c:	1080000b 	ldhu	r2,0(r2)
   1eb20:	10ffffcc 	andi	r3,r2,65535
   1eb24:	18e0001c 	xori	r3,r3,32768
   1eb28:	18e00004 	addi	r3,r3,-32768
   1eb2c:	e0bfad17 	ldw	r2,-332(fp)
   1eb30:	10802004 	addi	r2,r2,128
   1eb34:	10800017 	ldw	r2,0(r2)
   1eb38:	1809883a 	mov	r4,r3
   1eb3c:	100b883a 	mov	r5,r2
   1eb40:	002c1540 	call	2c154 <__mulsi3>
   1eb44:	e0bfb315 	stw	r2,-308(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   1eb48:	e0bfac17 	ldw	r2,-336(fp)
   1eb4c:	10801804 	addi	r2,r2,96
   1eb50:	1080000b 	ldhu	r2,0(r2)
   1eb54:	10ffffcc 	andi	r3,r2,65535
   1eb58:	18e0001c 	xori	r3,r3,32768
   1eb5c:	18e00004 	addi	r3,r3,-32768
   1eb60:	e0bfad17 	ldw	r2,-332(fp)
   1eb64:	10803004 	addi	r2,r2,192
   1eb68:	10800017 	ldw	r2,0(r2)
   1eb6c:	1809883a 	mov	r4,r3
   1eb70:	100b883a 	mov	r5,r2
   1eb74:	002c1540 	call	2c154 <__mulsi3>
   1eb78:	e0bfb415 	stw	r2,-304(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
   1eb7c:	e0ffb317 	ldw	r3,-308(fp)
   1eb80:	e0bfb417 	ldw	r2,-304(fp)
   1eb84:	1885c83a 	sub	r2,r3,r2
   1eb88:	1009883a 	mov	r4,r2
   1eb8c:	01470dc4 	movi	r5,7223
   1eb90:	002c1540 	call	2c154 <__mulsi3>
   1eb94:	e0bfb515 	stw	r2,-300(fp)
		tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
   1eb98:	e0ffb217 	ldw	r3,-312(fp)
   1eb9c:	e0bfb317 	ldw	r2,-308(fp)
   1eba0:	1885c83a 	sub	r2,r3,r2
   1eba4:	1009883a 	mov	r4,r2
   1eba8:	01428484 	movi	r5,2578
   1ebac:	002c1540 	call	2c154 <__mulsi3>
   1ebb0:	e0bfb615 	stw	r2,-296(fp)
		tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
   1ebb4:	e0ffb517 	ldw	r3,-300(fp)
   1ebb8:	e0bfb617 	ldw	r2,-296(fp)
   1ebbc:	1887883a 	add	r3,r3,r2
   1ebc0:	e0bfb117 	ldw	r2,-316(fp)
   1ebc4:	18a1883a 	add	r16,r3,r2
   1ebc8:	e13fb317 	ldw	r4,-308(fp)
   1ebcc:	01714544 	movi	r5,-15083
   1ebd0:	002c1540 	call	2c154 <__mulsi3>
   1ebd4:	8085883a 	add	r2,r16,r2
   1ebd8:	e0bfb715 	stw	r2,-292(fp)
		tmp10 = z1 + z3;
   1ebdc:	e0ffb217 	ldw	r3,-312(fp)
   1ebe0:	e0bfb417 	ldw	r2,-304(fp)
   1ebe4:	1885883a 	add	r2,r3,r2
   1ebe8:	e0bfb815 	stw	r2,-288(fp)
		z2 -= tmp10;
   1ebec:	e0ffb317 	ldw	r3,-308(fp)
   1ebf0:	e0bfb817 	ldw	r2,-288(fp)
   1ebf4:	1885c83a 	sub	r2,r3,r2
   1ebf8:	e0bfb315 	stw	r2,-308(fp)
		tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
   1ebfc:	e13fb817 	ldw	r4,-288(fp)
   1ec00:	014a3184 	movi	r5,10438
   1ec04:	002c1540 	call	2c154 <__mulsi3>
   1ec08:	1007883a 	mov	r3,r2
   1ec0c:	e0bfb117 	ldw	r2,-316(fp)
   1ec10:	1885883a 	add	r2,r3,r2
   1ec14:	e0bfb815 	stw	r2,-288(fp)
		tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
   1ec18:	e13fb417 	ldw	r4,-304(fp)
   1ec1c:	017f60c4 	movi	r5,-637
   1ec20:	002c1540 	call	2c154 <__mulsi3>
   1ec24:	1007883a 	mov	r3,r2
   1ec28:	e0bfb817 	ldw	r2,-288(fp)
   1ec2c:	1885883a 	add	r2,r3,r2
   1ec30:	e0ffb517 	ldw	r3,-300(fp)
   1ec34:	1885883a 	add	r2,r3,r2
   1ec38:	e0bfb515 	stw	r2,-300(fp)
		tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
   1ec3c:	e13fb217 	ldw	r4,-312(fp)
   1ec40:	016c3c44 	movi	r5,-20239
   1ec44:	002c1540 	call	2c154 <__mulsi3>
   1ec48:	1007883a 	mov	r3,r2
   1ec4c:	e0bfb817 	ldw	r2,-288(fp)
   1ec50:	1885883a 	add	r2,r3,r2
   1ec54:	e0ffb617 	ldw	r3,-296(fp)
   1ec58:	1885883a 	add	r2,r3,r2
   1ec5c:	e0bfb615 	stw	r2,-296(fp)
		tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
   1ec60:	e13fb317 	ldw	r4,-308(fp)
   1ec64:	014b5044 	movi	r5,11585
   1ec68:	002c1540 	call	2c154 <__mulsi3>
   1ec6c:	e0ffb117 	ldw	r3,-316(fp)
   1ec70:	1885883a 	add	r2,r3,r2
   1ec74:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1ec78:	e0bfac17 	ldw	r2,-336(fp)
   1ec7c:	10800404 	addi	r2,r2,16
   1ec80:	1080000b 	ldhu	r2,0(r2)
   1ec84:	10ffffcc 	andi	r3,r2,65535
   1ec88:	18e0001c 	xori	r3,r3,32768
   1ec8c:	18e00004 	addi	r3,r3,-32768
   1ec90:	e0bfad17 	ldw	r2,-332(fp)
   1ec94:	10800804 	addi	r2,r2,32
   1ec98:	10800017 	ldw	r2,0(r2)
   1ec9c:	1809883a 	mov	r4,r3
   1eca0:	100b883a 	mov	r5,r2
   1eca4:	002c1540 	call	2c154 <__mulsi3>
   1eca8:	e0bfb215 	stw	r2,-312(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1ecac:	e0bfac17 	ldw	r2,-336(fp)
   1ecb0:	10800c04 	addi	r2,r2,48
   1ecb4:	1080000b 	ldhu	r2,0(r2)
   1ecb8:	10ffffcc 	andi	r3,r2,65535
   1ecbc:	18e0001c 	xori	r3,r3,32768
   1ecc0:	18e00004 	addi	r3,r3,-32768
   1ecc4:	e0bfad17 	ldw	r2,-332(fp)
   1ecc8:	10801804 	addi	r2,r2,96
   1eccc:	10800017 	ldw	r2,0(r2)
   1ecd0:	1809883a 	mov	r4,r3
   1ecd4:	100b883a 	mov	r5,r2
   1ecd8:	002c1540 	call	2c154 <__mulsi3>
   1ecdc:	e0bfb315 	stw	r2,-308(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1ece0:	e0bfac17 	ldw	r2,-336(fp)
   1ece4:	10801404 	addi	r2,r2,80
   1ece8:	1080000b 	ldhu	r2,0(r2)
   1ecec:	10ffffcc 	andi	r3,r2,65535
   1ecf0:	18e0001c 	xori	r3,r3,32768
   1ecf4:	18e00004 	addi	r3,r3,-32768
   1ecf8:	e0bfad17 	ldw	r2,-332(fp)
   1ecfc:	10802804 	addi	r2,r2,160
   1ed00:	10800017 	ldw	r2,0(r2)
   1ed04:	1809883a 	mov	r4,r3
   1ed08:	100b883a 	mov	r5,r2
   1ed0c:	002c1540 	call	2c154 <__mulsi3>
   1ed10:	e0bfb415 	stw	r2,-304(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
   1ed14:	e0ffb217 	ldw	r3,-312(fp)
   1ed18:	e0bfb317 	ldw	r2,-308(fp)
   1ed1c:	1885883a 	add	r2,r3,r2
   1ed20:	1009883a 	mov	r4,r2
   1ed24:	01477bc4 	movi	r5,7663
   1ed28:	002c1540 	call	2c154 <__mulsi3>
   1ed2c:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
   1ed30:	e0ffb217 	ldw	r3,-312(fp)
   1ed34:	e0bfb317 	ldw	r2,-308(fp)
   1ed38:	1885c83a 	sub	r2,r3,r2
   1ed3c:	1009883a 	mov	r4,r2
   1ed40:	01415cc4 	movi	r5,1395
   1ed44:	002c1540 	call	2c154 <__mulsi3>
   1ed48:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = tmp11 - tmp12;
   1ed4c:	e0ffb917 	ldw	r3,-284(fp)
   1ed50:	e0bfba17 	ldw	r2,-280(fp)
   1ed54:	1885c83a 	sub	r2,r3,r2
   1ed58:	e0bfb815 	stw	r2,-288(fp)
		tmp11 += tmp12;
   1ed5c:	e0ffb917 	ldw	r3,-284(fp)
   1ed60:	e0bfba17 	ldw	r2,-280(fp)
   1ed64:	1885883a 	add	r2,r3,r2
   1ed68:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
   1ed6c:	e0ffb317 	ldw	r3,-308(fp)
   1ed70:	e0bfb417 	ldw	r2,-304(fp)
   1ed74:	1885883a 	add	r2,r3,r2
   1ed78:	1009883a 	mov	r4,r2
   1ed7c:	0174f844 	movi	r5,-11295
   1ed80:	002c1540 	call	2c154 <__mulsi3>
   1ed84:	e0bfba15 	stw	r2,-280(fp)
		tmp11 += tmp12;
   1ed88:	e0ffb917 	ldw	r3,-284(fp)
   1ed8c:	e0bfba17 	ldw	r2,-280(fp)
   1ed90:	1885883a 	add	r2,r3,r2
   1ed94:	e0bfb915 	stw	r2,-284(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
   1ed98:	e0ffb217 	ldw	r3,-312(fp)
   1ed9c:	e0bfb417 	ldw	r2,-304(fp)
   1eda0:	1885883a 	add	r2,r3,r2
   1eda4:	1009883a 	mov	r4,r2
   1eda8:	0144e8c4 	movi	r5,5027
   1edac:	002c1540 	call	2c154 <__mulsi3>
   1edb0:	e0bfb315 	stw	r2,-308(fp)
		tmp10 += z2;
   1edb4:	e0ffb817 	ldw	r3,-288(fp)
   1edb8:	e0bfb317 	ldw	r2,-308(fp)
   1edbc:	1885883a 	add	r2,r3,r2
   1edc0:	e0bfb815 	stw	r2,-288(fp)
		tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
   1edc4:	e13fb417 	ldw	r4,-304(fp)
   1edc8:	014ef784 	movi	r5,15326
   1edcc:	002c1540 	call	2c154 <__mulsi3>
   1edd0:	1007883a 	mov	r3,r2
   1edd4:	e0bfb317 	ldw	r2,-308(fp)
   1edd8:	1885883a 	add	r2,r3,r2
   1eddc:	e0ffba17 	ldw	r3,-280(fp)
   1ede0:	1885883a 	add	r2,r3,r2
   1ede4:	e0bfba15 	stw	r2,-280(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1ede8:	e0ffb517 	ldw	r3,-300(fp)
   1edec:	e0bfb817 	ldw	r2,-288(fp)
   1edf0:	1885883a 	add	r2,r3,r2
   1edf4:	1007d2fa 	srai	r3,r2,11
   1edf8:	e0bfae17 	ldw	r2,-328(fp)
   1edfc:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   1ee00:	e0bfae17 	ldw	r2,-328(fp)
   1ee04:	10803004 	addi	r2,r2,192
   1ee08:	e13fb517 	ldw	r4,-300(fp)
   1ee0c:	e0ffb817 	ldw	r3,-288(fp)
   1ee10:	20c7c83a 	sub	r3,r4,r3
   1ee14:	1807d2fa 	srai	r3,r3,11
   1ee18:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   1ee1c:	e0bfae17 	ldw	r2,-328(fp)
   1ee20:	10800804 	addi	r2,r2,32
   1ee24:	e13fb717 	ldw	r4,-292(fp)
   1ee28:	e0ffb917 	ldw	r3,-284(fp)
   1ee2c:	20c7883a 	add	r3,r4,r3
   1ee30:	1807d2fa 	srai	r3,r3,11
   1ee34:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   1ee38:	e0bfae17 	ldw	r2,-328(fp)
   1ee3c:	10802804 	addi	r2,r2,160
   1ee40:	e13fb717 	ldw	r4,-292(fp)
   1ee44:	e0ffb917 	ldw	r3,-284(fp)
   1ee48:	20c7c83a 	sub	r3,r4,r3
   1ee4c:	1807d2fa 	srai	r3,r3,11
   1ee50:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   1ee54:	e0bfae17 	ldw	r2,-328(fp)
   1ee58:	10801004 	addi	r2,r2,64
   1ee5c:	e13fb617 	ldw	r4,-296(fp)
   1ee60:	e0ffba17 	ldw	r3,-280(fp)
   1ee64:	20c7883a 	add	r3,r4,r3
   1ee68:	1807d2fa 	srai	r3,r3,11
   1ee6c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   1ee70:	e0bfae17 	ldw	r2,-328(fp)
   1ee74:	10802004 	addi	r2,r2,128
   1ee78:	e13fb617 	ldw	r4,-296(fp)
   1ee7c:	e0ffba17 	ldw	r3,-280(fp)
   1ee80:	20c7c83a 	sub	r3,r4,r3
   1ee84:	1807d2fa 	srai	r3,r3,11
   1ee88:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
   1ee8c:	e0bfae17 	ldw	r2,-328(fp)
   1ee90:	10801804 	addi	r2,r2,96
   1ee94:	e0ffb117 	ldw	r3,-316(fp)
   1ee98:	1807d2fa 	srai	r3,r3,11
   1ee9c:	10c00015 	stw	r3,0(r2)
		* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1eea0:	e0bfaf17 	ldw	r2,-324(fp)
   1eea4:	10800044 	addi	r2,r2,1
   1eea8:	e0bfaf15 	stw	r2,-324(fp)
   1eeac:	e0bfac17 	ldw	r2,-336(fp)
   1eeb0:	10800084 	addi	r2,r2,2
   1eeb4:	e0bfac15 	stw	r2,-336(fp)
   1eeb8:	e0bfad17 	ldw	r2,-332(fp)
   1eebc:	10800104 	addi	r2,r2,4
   1eec0:	e0bfad15 	stw	r2,-332(fp)
   1eec4:	e0bfae17 	ldw	r2,-328(fp)
   1eec8:	10800104 	addi	r2,r2,4
   1eecc:	e0bfae15 	stw	r2,-328(fp)
   1eed0:	e0bfaf17 	ldw	r2,-324(fp)
   1eed4:	10800210 	cmplti	r2,r2,8
   1eed8:	103ef01e 	bne	r2,zero,1ea9c <jpeg_idct_14x7+0x58>
	}

	/* Pass 2: process 7 rows from work array, store into output array.
	* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
	*/
	wsptr = workspace;
   1eedc:	e0bfc404 	addi	r2,fp,-240
   1eee0:	e0bfae15 	stw	r2,-328(fp)
	for (ctr = 0; ctr < 7; ctr++) {
   1eee4:	e03faf15 	stw	zero,-324(fp)
   1eee8:	00019506 	br	1f540 <jpeg_idct_14x7+0xafc>
		outptr = output_buf[ctr] + output_col;
   1eeec:	e0bfaf17 	ldw	r2,-324(fp)
   1eef0:	1085883a 	add	r2,r2,r2
   1eef4:	1085883a 	add	r2,r2,r2
   1eef8:	e0ffff17 	ldw	r3,-4(fp)
   1eefc:	1885883a 	add	r2,r3,r2
   1ef00:	10c00017 	ldw	r3,0(r2)
   1ef04:	e0800317 	ldw	r2,12(fp)
   1ef08:	1885883a 	add	r2,r3,r2
   1ef0c:	e0bfbb15 	stw	r2,-276(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1ef10:	e0bfae17 	ldw	r2,-328(fp)
   1ef14:	10800017 	ldw	r2,0(r2)
   1ef18:	10800404 	addi	r2,r2,16
   1ef1c:	e0bfb215 	stw	r2,-312(fp)
		z1 <<= CONST_BITS;
   1ef20:	e0bfb217 	ldw	r2,-312(fp)
   1ef24:	1004937a 	slli	r2,r2,13
   1ef28:	e0bfb215 	stw	r2,-312(fp)
		z4 = (INT32) wsptr[4];
   1ef2c:	e0bfae17 	ldw	r2,-328(fp)
   1ef30:	10800404 	addi	r2,r2,16
   1ef34:	10800017 	ldw	r2,0(r2)
   1ef38:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
   1ef3c:	e13fbc17 	ldw	r4,-272(fp)
   1ef40:	014a3184 	movi	r5,10438
   1ef44:	002c1540 	call	2c154 <__mulsi3>
   1ef48:	e0bfb315 	stw	r2,-308(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
   1ef4c:	e13fbc17 	ldw	r4,-272(fp)
   1ef50:	01428484 	movi	r5,2578
   1ef54:	002c1540 	call	2c154 <__mulsi3>
   1ef58:	e0bfb415 	stw	r2,-304(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
   1ef5c:	e13fbc17 	ldw	r4,-272(fp)
   1ef60:	01470dc4 	movi	r5,7223
   1ef64:	002c1540 	call	2c154 <__mulsi3>
   1ef68:	e0bfbc15 	stw	r2,-272(fp)

		tmp10 = z1 + z2;
   1ef6c:	e0ffb217 	ldw	r3,-312(fp)
   1ef70:	e0bfb317 	ldw	r2,-308(fp)
   1ef74:	1885883a 	add	r2,r3,r2
   1ef78:	e0bfb815 	stw	r2,-288(fp)
		tmp11 = z1 + z3;
   1ef7c:	e0ffb217 	ldw	r3,-312(fp)
   1ef80:	e0bfb417 	ldw	r2,-304(fp)
   1ef84:	1885883a 	add	r2,r3,r2
   1ef88:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = z1 - z4;
   1ef8c:	e0ffb217 	ldw	r3,-312(fp)
   1ef90:	e0bfbc17 	ldw	r2,-272(fp)
   1ef94:	1885c83a 	sub	r2,r3,r2
   1ef98:	e0bfba15 	stw	r2,-280(fp)

		tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
   1ef9c:	e0ffb317 	ldw	r3,-308(fp)
   1efa0:	e0bfb417 	ldw	r2,-304(fp)
   1efa4:	1887883a 	add	r3,r3,r2
   1efa8:	e0bfbc17 	ldw	r2,-272(fp)
   1efac:	1885c83a 	sub	r2,r3,r2
   1efb0:	1085883a 	add	r2,r2,r2
   1efb4:	e0ffb217 	ldw	r3,-312(fp)
   1efb8:	1885c83a 	sub	r2,r3,r2
   1efbc:	e0bfb115 	stw	r2,-316(fp)

		z1 = (INT32) wsptr[2];
   1efc0:	e0bfae17 	ldw	r2,-328(fp)
   1efc4:	10800204 	addi	r2,r2,8
   1efc8:	10800017 	ldw	r2,0(r2)
   1efcc:	e0bfb215 	stw	r2,-312(fp)
		z2 = (INT32) wsptr[6];
   1efd0:	e0bfae17 	ldw	r2,-328(fp)
   1efd4:	10800604 	addi	r2,r2,24
   1efd8:	10800017 	ldw	r2,0(r2)
   1efdc:	e0bfb315 	stw	r2,-308(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
   1efe0:	e0ffb217 	ldw	r3,-312(fp)
   1efe4:	e0bfb317 	ldw	r2,-308(fp)
   1efe8:	1885883a 	add	r2,r3,r2
   1efec:	1009883a 	mov	r4,r2
   1eff0:	0148d884 	movi	r5,9058
   1eff4:	002c1540 	call	2c154 <__mulsi3>
   1eff8:	e0bfb415 	stw	r2,-304(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
   1effc:	e13fb217 	ldw	r4,-312(fp)
   1f000:	01422f44 	movi	r5,2237
   1f004:	002c1540 	call	2c154 <__mulsi3>
   1f008:	1007883a 	mov	r3,r2
   1f00c:	e0bfb417 	ldw	r2,-304(fp)
   1f010:	1885883a 	add	r2,r3,r2
   1f014:	e0bfbd15 	stw	r2,-268(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
   1f018:	e13fb317 	ldw	r4,-308(fp)
   1f01c:	01723f04 	movi	r5,-14084
   1f020:	002c1540 	call	2c154 <__mulsi3>
   1f024:	1007883a 	mov	r3,r2
   1f028:	e0bfb417 	ldw	r2,-304(fp)
   1f02c:	1885883a 	add	r2,r3,r2
   1f030:	e0bfbe15 	stw	r2,-264(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1f034:	e13fb217 	ldw	r4,-312(fp)
   1f038:	0144e8c4 	movi	r5,5027
   1f03c:	002c1540 	call	2c154 <__mulsi3>
   1f040:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
   1f044:	e13fb317 	ldw	r4,-308(fp)
   1f048:	0174f844 	movi	r5,-11295
   1f04c:	002c1540 	call	2c154 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   1f050:	8085883a 	add	r2,r16,r2
   1f054:	e0bfbf15 	stw	r2,-260(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
   1f058:	e0ffb817 	ldw	r3,-288(fp)
   1f05c:	e0bfbd17 	ldw	r2,-268(fp)
   1f060:	1885883a 	add	r2,r3,r2
   1f064:	e0bfb515 	stw	r2,-300(fp)
		tmp26 = tmp10 - tmp13;
   1f068:	e0ffb817 	ldw	r3,-288(fp)
   1f06c:	e0bfbd17 	ldw	r2,-268(fp)
   1f070:	1885c83a 	sub	r2,r3,r2
   1f074:	e0bfc015 	stw	r2,-256(fp)
		tmp21 = tmp11 + tmp14;
   1f078:	e0ffb917 	ldw	r3,-284(fp)
   1f07c:	e0bfbe17 	ldw	r2,-264(fp)
   1f080:	1885883a 	add	r2,r3,r2
   1f084:	e0bfb715 	stw	r2,-292(fp)
		tmp25 = tmp11 - tmp14;
   1f088:	e0ffb917 	ldw	r3,-284(fp)
   1f08c:	e0bfbe17 	ldw	r2,-264(fp)
   1f090:	1885c83a 	sub	r2,r3,r2
   1f094:	e0bfc115 	stw	r2,-252(fp)
		tmp22 = tmp12 + tmp15;
   1f098:	e0ffba17 	ldw	r3,-280(fp)
   1f09c:	e0bfbf17 	ldw	r2,-260(fp)
   1f0a0:	1885883a 	add	r2,r3,r2
   1f0a4:	e0bfb615 	stw	r2,-296(fp)
		tmp24 = tmp12 - tmp15;
   1f0a8:	e0ffba17 	ldw	r3,-280(fp)
   1f0ac:	e0bfbf17 	ldw	r2,-260(fp)
   1f0b0:	1885c83a 	sub	r2,r3,r2
   1f0b4:	e0bfc215 	stw	r2,-248(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1f0b8:	e0bfae17 	ldw	r2,-328(fp)
   1f0bc:	10800104 	addi	r2,r2,4
   1f0c0:	10800017 	ldw	r2,0(r2)
   1f0c4:	e0bfb215 	stw	r2,-312(fp)
		z2 = (INT32) wsptr[3];
   1f0c8:	e0bfae17 	ldw	r2,-328(fp)
   1f0cc:	10800304 	addi	r2,r2,12
   1f0d0:	10800017 	ldw	r2,0(r2)
   1f0d4:	e0bfb315 	stw	r2,-308(fp)
		z3 = (INT32) wsptr[5];
   1f0d8:	e0bfae17 	ldw	r2,-328(fp)
   1f0dc:	10800504 	addi	r2,r2,20
   1f0e0:	10800017 	ldw	r2,0(r2)
   1f0e4:	e0bfb415 	stw	r2,-304(fp)
		z4 = (INT32) wsptr[7];
   1f0e8:	e0bfae17 	ldw	r2,-328(fp)
   1f0ec:	10800704 	addi	r2,r2,28
   1f0f0:	10800017 	ldw	r2,0(r2)
   1f0f4:	e0bfbc15 	stw	r2,-272(fp)
		z4 <<= CONST_BITS;
   1f0f8:	e0bfbc17 	ldw	r2,-272(fp)
   1f0fc:	1004937a 	slli	r2,r2,13
   1f100:	e0bfbc15 	stw	r2,-272(fp)

		tmp14 = z1 + z3;
   1f104:	e0ffb217 	ldw	r3,-312(fp)
   1f108:	e0bfb417 	ldw	r2,-304(fp)
   1f10c:	1885883a 	add	r2,r3,r2
   1f110:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
   1f114:	e0ffb217 	ldw	r3,-312(fp)
   1f118:	e0bfb317 	ldw	r2,-308(fp)
   1f11c:	1885883a 	add	r2,r3,r2
   1f120:	1009883a 	mov	r4,r2
   1f124:	014aadc4 	movi	r5,10935
   1f128:	002c1540 	call	2c154 <__mulsi3>
   1f12c:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
   1f130:	e13fbe17 	ldw	r4,-264(fp)
   1f134:	01499484 	movi	r5,9810
   1f138:	002c1540 	call	2c154 <__mulsi3>
   1f13c:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
   1f140:	e0ffb917 	ldw	r3,-284(fp)
   1f144:	e0bfba17 	ldw	r2,-280(fp)
   1f148:	1887883a 	add	r3,r3,r2
   1f14c:	e0bfbc17 	ldw	r2,-272(fp)
   1f150:	18a1883a 	add	r16,r3,r2
   1f154:	e13fb217 	ldw	r4,-312(fp)
   1f158:	0176fc04 	movi	r5,-9232
   1f15c:	002c1540 	call	2c154 <__mulsi3>
   1f160:	8085883a 	add	r2,r16,r2
   1f164:	e0bfb815 	stw	r2,-288(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
   1f168:	e13fbe17 	ldw	r4,-264(fp)
   1f16c:	01460504 	movi	r5,6164
   1f170:	002c1540 	call	2c154 <__mulsi3>
   1f174:	e0bfbe15 	stw	r2,-264(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
   1f178:	e13fb217 	ldw	r4,-312(fp)
   1f17c:	017782c4 	movi	r5,-8693
   1f180:	002c1540 	call	2c154 <__mulsi3>
   1f184:	1007883a 	mov	r3,r2
   1f188:	e0bfbe17 	ldw	r2,-264(fp)
   1f18c:	1885883a 	add	r2,r3,r2
   1f190:	e0bfc315 	stw	r2,-244(fp)
		z1    -= z2;
   1f194:	e0ffb217 	ldw	r3,-312(fp)
   1f198:	e0bfb317 	ldw	r2,-308(fp)
   1f19c:	1885c83a 	sub	r2,r3,r2
   1f1a0:	e0bfb215 	stw	r2,-312(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
   1f1a4:	e13fb217 	ldw	r4,-312(fp)
   1f1a8:	0143bc84 	movi	r5,3826
   1f1ac:	002c1540 	call	2c154 <__mulsi3>
   1f1b0:	1007883a 	mov	r3,r2
   1f1b4:	e0bfbc17 	ldw	r2,-272(fp)
   1f1b8:	1885c83a 	sub	r2,r3,r2
   1f1bc:	e0bfbf15 	stw	r2,-260(fp)
		tmp16 += tmp15;
   1f1c0:	e0ffc317 	ldw	r3,-244(fp)
   1f1c4:	e0bfbf17 	ldw	r2,-260(fp)
   1f1c8:	1885883a 	add	r2,r3,r2
   1f1cc:	e0bfc315 	stw	r2,-244(fp)
		tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
   1f1d0:	e0ffb317 	ldw	r3,-308(fp)
   1f1d4:	e0bfb417 	ldw	r2,-304(fp)
   1f1d8:	1885883a 	add	r2,r3,r2
   1f1dc:	1009883a 	mov	r4,r2
   1f1e0:	017ebbc4 	movi	r5,-1297
   1f1e4:	002c1540 	call	2c154 <__mulsi3>
   1f1e8:	1007883a 	mov	r3,r2
   1f1ec:	e0bfbc17 	ldw	r2,-272(fp)
   1f1f0:	1885c83a 	sub	r2,r3,r2
   1f1f4:	e0bfbd15 	stw	r2,-268(fp)
		tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
   1f1f8:	e13fb317 	ldw	r4,-308(fp)
   1f1fc:	017c9b84 	movi	r5,-3474
   1f200:	002c1540 	call	2c154 <__mulsi3>
   1f204:	1007883a 	mov	r3,r2
   1f208:	e0bfbd17 	ldw	r2,-268(fp)
   1f20c:	1885883a 	add	r2,r3,r2
   1f210:	e0ffb917 	ldw	r3,-284(fp)
   1f214:	1885883a 	add	r2,r3,r2
   1f218:	e0bfb915 	stw	r2,-284(fp)
		tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
   1f21c:	e13fb417 	ldw	r4,-304(fp)
   1f220:	016d0244 	movi	r5,-19447
   1f224:	002c1540 	call	2c154 <__mulsi3>
   1f228:	1007883a 	mov	r3,r2
   1f22c:	e0bfbd17 	ldw	r2,-268(fp)
   1f230:	1885883a 	add	r2,r3,r2
   1f234:	e0ffba17 	ldw	r3,-280(fp)
   1f238:	1885883a 	add	r2,r3,r2
   1f23c:	e0bfba15 	stw	r2,-280(fp)
		tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
   1f240:	e0ffb417 	ldw	r3,-304(fp)
   1f244:	e0bfb317 	ldw	r2,-308(fp)
   1f248:	1885c83a 	sub	r2,r3,r2
   1f24c:	1009883a 	mov	r4,r2
   1f250:	014b3e04 	movi	r5,11512
   1f254:	002c1540 	call	2c154 <__mulsi3>
   1f258:	e0bfbd15 	stw	r2,-268(fp)
		tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
   1f25c:	e0ffbd17 	ldw	r3,-268(fp)
   1f260:	e0bfbc17 	ldw	r2,-272(fp)
   1f264:	18a1883a 	add	r16,r3,r2
   1f268:	e13fb417 	ldw	r4,-304(fp)
   1f26c:	01727984 	movi	r5,-13850
   1f270:	002c1540 	call	2c154 <__mulsi3>
   1f274:	8085883a 	add	r2,r16,r2
   1f278:	e0ffbe17 	ldw	r3,-264(fp)
   1f27c:	1885883a 	add	r2,r3,r2
   1f280:	e0bfbe15 	stw	r2,-264(fp)
		tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
   1f284:	e13fb317 	ldw	r4,-308(fp)
   1f288:	01456644 	movi	r5,5529
   1f28c:	002c1540 	call	2c154 <__mulsi3>
   1f290:	1007883a 	mov	r3,r2
   1f294:	e0bfbd17 	ldw	r2,-268(fp)
   1f298:	1885883a 	add	r2,r3,r2
   1f29c:	e0ffbf17 	ldw	r3,-260(fp)
   1f2a0:	1885883a 	add	r2,r3,r2
   1f2a4:	e0bfbf15 	stw	r2,-260(fp)

		tmp13 = ((z1 - z3) << CONST_BITS) + z4;
   1f2a8:	e0ffb217 	ldw	r3,-312(fp)
   1f2ac:	e0bfb417 	ldw	r2,-304(fp)
   1f2b0:	1885c83a 	sub	r2,r3,r2
   1f2b4:	1006937a 	slli	r3,r2,13
   1f2b8:	e0bfbc17 	ldw	r2,-272(fp)
   1f2bc:	1885883a 	add	r2,r3,r2
   1f2c0:	e0bfbd15 	stw	r2,-268(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   1f2c4:	e0ffb517 	ldw	r3,-300(fp)
   1f2c8:	e0bfb817 	ldw	r2,-288(fp)
   1f2cc:	1885883a 	add	r2,r3,r2
   1f2d0:	1005d4ba 	srai	r2,r2,18
   1f2d4:	1080ffcc 	andi	r2,r2,1023
   1f2d8:	e0ffb017 	ldw	r3,-320(fp)
   1f2dc:	1885883a 	add	r2,r3,r2
   1f2e0:	10c00003 	ldbu	r3,0(r2)
   1f2e4:	e0bfbb17 	ldw	r2,-276(fp)
   1f2e8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   1f2ec:	e0bfbb17 	ldw	r2,-276(fp)
   1f2f0:	10800344 	addi	r2,r2,13
   1f2f4:	e13fb517 	ldw	r4,-300(fp)
   1f2f8:	e0ffb817 	ldw	r3,-288(fp)
   1f2fc:	20c7c83a 	sub	r3,r4,r3
   1f300:	1807d4ba 	srai	r3,r3,18
   1f304:	18c0ffcc 	andi	r3,r3,1023
   1f308:	e13fb017 	ldw	r4,-320(fp)
   1f30c:	20c7883a 	add	r3,r4,r3
   1f310:	18c00003 	ldbu	r3,0(r3)
   1f314:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   1f318:	e0bfbb17 	ldw	r2,-276(fp)
   1f31c:	10800044 	addi	r2,r2,1
   1f320:	e13fb717 	ldw	r4,-292(fp)
   1f324:	e0ffb917 	ldw	r3,-284(fp)
   1f328:	20c7883a 	add	r3,r4,r3
   1f32c:	1807d4ba 	srai	r3,r3,18
   1f330:	18c0ffcc 	andi	r3,r3,1023
   1f334:	e13fb017 	ldw	r4,-320(fp)
   1f338:	20c7883a 	add	r3,r4,r3
   1f33c:	18c00003 	ldbu	r3,0(r3)
   1f340:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   1f344:	e0bfbb17 	ldw	r2,-276(fp)
   1f348:	10800304 	addi	r2,r2,12
   1f34c:	e13fb717 	ldw	r4,-292(fp)
   1f350:	e0ffb917 	ldw	r3,-284(fp)
   1f354:	20c7c83a 	sub	r3,r4,r3
   1f358:	1807d4ba 	srai	r3,r3,18
   1f35c:	18c0ffcc 	andi	r3,r3,1023
   1f360:	e13fb017 	ldw	r4,-320(fp)
   1f364:	20c7883a 	add	r3,r4,r3
   1f368:	18c00003 	ldbu	r3,0(r3)
   1f36c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   1f370:	e0bfbb17 	ldw	r2,-276(fp)
   1f374:	10800084 	addi	r2,r2,2
   1f378:	e13fb617 	ldw	r4,-296(fp)
   1f37c:	e0ffba17 	ldw	r3,-280(fp)
   1f380:	20c7883a 	add	r3,r4,r3
   1f384:	1807d4ba 	srai	r3,r3,18
   1f388:	18c0ffcc 	andi	r3,r3,1023
   1f38c:	e13fb017 	ldw	r4,-320(fp)
   1f390:	20c7883a 	add	r3,r4,r3
   1f394:	18c00003 	ldbu	r3,0(r3)
   1f398:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   1f39c:	e0bfbb17 	ldw	r2,-276(fp)
   1f3a0:	108002c4 	addi	r2,r2,11
   1f3a4:	e13fb617 	ldw	r4,-296(fp)
   1f3a8:	e0ffba17 	ldw	r3,-280(fp)
   1f3ac:	20c7c83a 	sub	r3,r4,r3
   1f3b0:	1807d4ba 	srai	r3,r3,18
   1f3b4:	18c0ffcc 	andi	r3,r3,1023
   1f3b8:	e13fb017 	ldw	r4,-320(fp)
   1f3bc:	20c7883a 	add	r3,r4,r3
   1f3c0:	18c00003 	ldbu	r3,0(r3)
   1f3c4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1f3c8:	e0bfbb17 	ldw	r2,-276(fp)
   1f3cc:	108000c4 	addi	r2,r2,3
   1f3d0:	e13fb117 	ldw	r4,-316(fp)
   1f3d4:	e0ffbd17 	ldw	r3,-268(fp)
   1f3d8:	20c7883a 	add	r3,r4,r3
   1f3dc:	1807d4ba 	srai	r3,r3,18
   1f3e0:	18c0ffcc 	andi	r3,r3,1023
   1f3e4:	e13fb017 	ldw	r4,-320(fp)
   1f3e8:	20c7883a 	add	r3,r4,r3
   1f3ec:	18c00003 	ldbu	r3,0(r3)
   1f3f0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1f3f4:	e0bfbb17 	ldw	r2,-276(fp)
   1f3f8:	10800284 	addi	r2,r2,10
   1f3fc:	e13fb117 	ldw	r4,-316(fp)
   1f400:	e0ffbd17 	ldw	r3,-268(fp)
   1f404:	20c7c83a 	sub	r3,r4,r3
   1f408:	1807d4ba 	srai	r3,r3,18
   1f40c:	18c0ffcc 	andi	r3,r3,1023
   1f410:	e13fb017 	ldw	r4,-320(fp)
   1f414:	20c7883a 	add	r3,r4,r3
   1f418:	18c00003 	ldbu	r3,0(r3)
   1f41c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1f420:	e0bfbb17 	ldw	r2,-276(fp)
   1f424:	10800104 	addi	r2,r2,4
   1f428:	e13fc217 	ldw	r4,-248(fp)
   1f42c:	e0ffbe17 	ldw	r3,-264(fp)
   1f430:	20c7883a 	add	r3,r4,r3
   1f434:	1807d4ba 	srai	r3,r3,18
   1f438:	18c0ffcc 	andi	r3,r3,1023
   1f43c:	e13fb017 	ldw	r4,-320(fp)
   1f440:	20c7883a 	add	r3,r4,r3
   1f444:	18c00003 	ldbu	r3,0(r3)
   1f448:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1f44c:	e0bfbb17 	ldw	r2,-276(fp)
   1f450:	10800244 	addi	r2,r2,9
   1f454:	e13fc217 	ldw	r4,-248(fp)
   1f458:	e0ffbe17 	ldw	r3,-264(fp)
   1f45c:	20c7c83a 	sub	r3,r4,r3
   1f460:	1807d4ba 	srai	r3,r3,18
   1f464:	18c0ffcc 	andi	r3,r3,1023
   1f468:	e13fb017 	ldw	r4,-320(fp)
   1f46c:	20c7883a 	add	r3,r4,r3
   1f470:	18c00003 	ldbu	r3,0(r3)
   1f474:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1f478:	e0bfbb17 	ldw	r2,-276(fp)
   1f47c:	10800144 	addi	r2,r2,5
   1f480:	e13fc117 	ldw	r4,-252(fp)
   1f484:	e0ffbf17 	ldw	r3,-260(fp)
   1f488:	20c7883a 	add	r3,r4,r3
   1f48c:	1807d4ba 	srai	r3,r3,18
   1f490:	18c0ffcc 	andi	r3,r3,1023
   1f494:	e13fb017 	ldw	r4,-320(fp)
   1f498:	20c7883a 	add	r3,r4,r3
   1f49c:	18c00003 	ldbu	r3,0(r3)
   1f4a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1f4a4:	e0bfbb17 	ldw	r2,-276(fp)
   1f4a8:	10800204 	addi	r2,r2,8
   1f4ac:	e13fc117 	ldw	r4,-252(fp)
   1f4b0:	e0ffbf17 	ldw	r3,-260(fp)
   1f4b4:	20c7c83a 	sub	r3,r4,r3
   1f4b8:	1807d4ba 	srai	r3,r3,18
   1f4bc:	18c0ffcc 	andi	r3,r3,1023
   1f4c0:	e13fb017 	ldw	r4,-320(fp)
   1f4c4:	20c7883a 	add	r3,r4,r3
   1f4c8:	18c00003 	ldbu	r3,0(r3)
   1f4cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
   1f4d0:	e0bfbb17 	ldw	r2,-276(fp)
   1f4d4:	10800184 	addi	r2,r2,6
   1f4d8:	e13fc017 	ldw	r4,-256(fp)
   1f4dc:	e0ffc317 	ldw	r3,-244(fp)
   1f4e0:	20c7883a 	add	r3,r4,r3
   1f4e4:	1807d4ba 	srai	r3,r3,18
   1f4e8:	18c0ffcc 	andi	r3,r3,1023
   1f4ec:	e13fb017 	ldw	r4,-320(fp)
   1f4f0:	20c7883a 	add	r3,r4,r3
   1f4f4:	18c00003 	ldbu	r3,0(r3)
   1f4f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
   1f4fc:	e0bfbb17 	ldw	r2,-276(fp)
   1f500:	108001c4 	addi	r2,r2,7
   1f504:	e13fc017 	ldw	r4,-256(fp)
   1f508:	e0ffc317 	ldw	r3,-244(fp)
   1f50c:	20c7c83a 	sub	r3,r4,r3
   1f510:	1807d4ba 	srai	r3,r3,18
   1f514:	18c0ffcc 	andi	r3,r3,1023
   1f518:	e13fb017 	ldw	r4,-320(fp)
   1f51c:	20c7883a 	add	r3,r4,r3
   1f520:	18c00003 	ldbu	r3,0(r3)
   1f524:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1f528:	e0bfae17 	ldw	r2,-328(fp)
   1f52c:	10800804 	addi	r2,r2,32
   1f530:	e0bfae15 	stw	r2,-328(fp)

	/* Pass 2: process 7 rows from work array, store into output array.
	* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++) {
   1f534:	e0bfaf17 	ldw	r2,-324(fp)
   1f538:	10800044 	addi	r2,r2,1
   1f53c:	e0bfaf15 	stw	r2,-324(fp)
   1f540:	e0bfaf17 	ldw	r2,-324(fp)
   1f544:	108001d0 	cmplti	r2,r2,7
   1f548:	103e681e 	bne	r2,zero,1eeec <jpeg_idct_14x7+0x4a8>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1f54c:	e037883a 	mov	sp,fp
   1f550:	dfc00217 	ldw	ra,8(sp)
   1f554:	df000117 	ldw	fp,4(sp)
   1f558:	dc000017 	ldw	r16,0(sp)
   1f55c:	dec00304 	addi	sp,sp,12
   1f560:	f800283a 	ret

0001f564 <jpeg_idct_12x6>:

GLOBAL(void)
	jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1f564:	deffb304 	addi	sp,sp,-308
   1f568:	dfc04c15 	stw	ra,304(sp)
   1f56c:	df004b15 	stw	fp,300(sp)
   1f570:	dc004a15 	stw	r16,296(sp)
   1f574:	df004a04 	addi	fp,sp,296
   1f578:	e13ffc15 	stw	r4,-16(fp)
   1f57c:	e17ffd15 	stw	r5,-12(fp)
   1f580:	e1bffe15 	stw	r6,-8(fp)
   1f584:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1f588:	e0bffc17 	ldw	r2,-16(fp)
   1f58c:	10804917 	ldw	r2,292(r2)
   1f590:	10802004 	addi	r2,r2,128
   1f594:	e0bfba15 	stw	r2,-280(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
   1f598:	e0bffe17 	ldw	r2,-8(fp)
   1f59c:	e0bfb615 	stw	r2,-296(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1f5a0:	e0bffd17 	ldw	r2,-12(fp)
   1f5a4:	10801517 	ldw	r2,84(r2)
   1f5a8:	e0bfb715 	stw	r2,-292(fp)
	wsptr = workspace;
   1f5ac:	e0bfcc04 	addi	r2,fp,-208
   1f5b0:	e0bfb815 	stw	r2,-288(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1f5b4:	e03fb915 	stw	zero,-284(fp)
   1f5b8:	0000bd06 	br	1f8b0 <jpeg_idct_12x6+0x34c>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1f5bc:	e0bfb617 	ldw	r2,-296(fp)
   1f5c0:	1080000b 	ldhu	r2,0(r2)
   1f5c4:	10ffffcc 	andi	r3,r2,65535
   1f5c8:	18e0001c 	xori	r3,r3,32768
   1f5cc:	18e00004 	addi	r3,r3,-32768
   1f5d0:	e0bfb717 	ldw	r2,-292(fp)
   1f5d4:	10800017 	ldw	r2,0(r2)
   1f5d8:	1809883a 	mov	r4,r3
   1f5dc:	100b883a 	mov	r5,r2
   1f5e0:	002c1540 	call	2c154 <__mulsi3>
   1f5e4:	e0bfbb15 	stw	r2,-276(fp)
		tmp10 <<= CONST_BITS;
   1f5e8:	e0bfbb17 	ldw	r2,-276(fp)
   1f5ec:	1004937a 	slli	r2,r2,13
   1f5f0:	e0bfbb15 	stw	r2,-276(fp)
		/* Add fudge factor here for final descale. */
		tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
   1f5f4:	e0bfbb17 	ldw	r2,-276(fp)
   1f5f8:	10810004 	addi	r2,r2,1024
   1f5fc:	e0bfbb15 	stw	r2,-276(fp)
		tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1f600:	e0bfb617 	ldw	r2,-296(fp)
   1f604:	10801004 	addi	r2,r2,64
   1f608:	1080000b 	ldhu	r2,0(r2)
   1f60c:	10ffffcc 	andi	r3,r2,65535
   1f610:	18e0001c 	xori	r3,r3,32768
   1f614:	18e00004 	addi	r3,r3,-32768
   1f618:	e0bfb717 	ldw	r2,-292(fp)
   1f61c:	10802004 	addi	r2,r2,128
   1f620:	10800017 	ldw	r2,0(r2)
   1f624:	1809883a 	mov	r4,r3
   1f628:	100b883a 	mov	r5,r2
   1f62c:	002c1540 	call	2c154 <__mulsi3>
   1f630:	e0bfbc15 	stw	r2,-272(fp)
		tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
   1f634:	e13fbc17 	ldw	r4,-272(fp)
   1f638:	0145a844 	movi	r5,5793
   1f63c:	002c1540 	call	2c154 <__mulsi3>
   1f640:	e0bfbd15 	stw	r2,-268(fp)
		tmp11 = tmp10 + tmp20;
   1f644:	e0ffbb17 	ldw	r3,-276(fp)
   1f648:	e0bfbd17 	ldw	r2,-268(fp)
   1f64c:	1885883a 	add	r2,r3,r2
   1f650:	e0bfbe15 	stw	r2,-264(fp)
		tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
   1f654:	e0ffbb17 	ldw	r3,-276(fp)
   1f658:	e0bfbd17 	ldw	r2,-268(fp)
   1f65c:	1887c83a 	sub	r3,r3,r2
   1f660:	e0bfbd17 	ldw	r2,-268(fp)
   1f664:	1885c83a 	sub	r2,r3,r2
   1f668:	1005d2fa 	srai	r2,r2,11
   1f66c:	e0bfbf15 	stw	r2,-260(fp)
		tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1f670:	e0bfb617 	ldw	r2,-296(fp)
   1f674:	10800804 	addi	r2,r2,32
   1f678:	1080000b 	ldhu	r2,0(r2)
   1f67c:	10ffffcc 	andi	r3,r2,65535
   1f680:	18e0001c 	xori	r3,r3,32768
   1f684:	18e00004 	addi	r3,r3,-32768
   1f688:	e0bfb717 	ldw	r2,-292(fp)
   1f68c:	10801004 	addi	r2,r2,64
   1f690:	10800017 	ldw	r2,0(r2)
   1f694:	1809883a 	mov	r4,r3
   1f698:	100b883a 	mov	r5,r2
   1f69c:	002c1540 	call	2c154 <__mulsi3>
   1f6a0:	e0bfbd15 	stw	r2,-268(fp)
		tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
   1f6a4:	e13fbd17 	ldw	r4,-268(fp)
   1f6a8:	0149cc44 	movi	r5,10033
   1f6ac:	002c1540 	call	2c154 <__mulsi3>
   1f6b0:	e0bfbb15 	stw	r2,-276(fp)
		tmp20 = tmp11 + tmp10;
   1f6b4:	e0ffbe17 	ldw	r3,-264(fp)
   1f6b8:	e0bfbb17 	ldw	r2,-276(fp)
   1f6bc:	1885883a 	add	r2,r3,r2
   1f6c0:	e0bfbd15 	stw	r2,-268(fp)
		tmp22 = tmp11 - tmp10;
   1f6c4:	e0ffbe17 	ldw	r3,-264(fp)
   1f6c8:	e0bfbb17 	ldw	r2,-276(fp)
   1f6cc:	1885c83a 	sub	r2,r3,r2
   1f6d0:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1f6d4:	e0bfb617 	ldw	r2,-296(fp)
   1f6d8:	10800404 	addi	r2,r2,16
   1f6dc:	1080000b 	ldhu	r2,0(r2)
   1f6e0:	10ffffcc 	andi	r3,r2,65535
   1f6e4:	18e0001c 	xori	r3,r3,32768
   1f6e8:	18e00004 	addi	r3,r3,-32768
   1f6ec:	e0bfb717 	ldw	r2,-292(fp)
   1f6f0:	10800804 	addi	r2,r2,32
   1f6f4:	10800017 	ldw	r2,0(r2)
   1f6f8:	1809883a 	mov	r4,r3
   1f6fc:	100b883a 	mov	r5,r2
   1f700:	002c1540 	call	2c154 <__mulsi3>
   1f704:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   1f708:	e0bfb617 	ldw	r2,-296(fp)
   1f70c:	10800c04 	addi	r2,r2,48
   1f710:	1080000b 	ldhu	r2,0(r2)
   1f714:	10ffffcc 	andi	r3,r2,65535
   1f718:	18e0001c 	xori	r3,r3,32768
   1f71c:	18e00004 	addi	r3,r3,-32768
   1f720:	e0bfb717 	ldw	r2,-292(fp)
   1f724:	10801804 	addi	r2,r2,96
   1f728:	10800017 	ldw	r2,0(r2)
   1f72c:	1809883a 	mov	r4,r3
   1f730:	100b883a 	mov	r5,r2
   1f734:	002c1540 	call	2c154 <__mulsi3>
   1f738:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   1f73c:	e0bfb617 	ldw	r2,-296(fp)
   1f740:	10801404 	addi	r2,r2,80
   1f744:	1080000b 	ldhu	r2,0(r2)
   1f748:	10ffffcc 	andi	r3,r2,65535
   1f74c:	18e0001c 	xori	r3,r3,32768
   1f750:	18e00004 	addi	r3,r3,-32768
   1f754:	e0bfb717 	ldw	r2,-292(fp)
   1f758:	10802804 	addi	r2,r2,160
   1f75c:	10800017 	ldw	r2,0(r2)
   1f760:	1809883a 	mov	r4,r3
   1f764:	100b883a 	mov	r5,r2
   1f768:	002c1540 	call	2c154 <__mulsi3>
   1f76c:	e0bfc315 	stw	r2,-244(fp)
		tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   1f770:	e0ffc117 	ldw	r3,-252(fp)
   1f774:	e0bfc317 	ldw	r2,-244(fp)
   1f778:	1885883a 	add	r2,r3,r2
   1f77c:	1009883a 	mov	r4,r2
   1f780:	0142ed84 	movi	r5,2998
   1f784:	002c1540 	call	2c154 <__mulsi3>
   1f788:	e0bfbe15 	stw	r2,-264(fp)
		tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
   1f78c:	e0ffc117 	ldw	r3,-252(fp)
   1f790:	e0bfc217 	ldw	r2,-248(fp)
   1f794:	1885883a 	add	r2,r3,r2
   1f798:	1006937a 	slli	r3,r2,13
   1f79c:	e0bfbe17 	ldw	r2,-264(fp)
   1f7a0:	1885883a 	add	r2,r3,r2
   1f7a4:	e0bfbb15 	stw	r2,-276(fp)
		tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
   1f7a8:	e0ffc317 	ldw	r3,-244(fp)
   1f7ac:	e0bfc217 	ldw	r2,-248(fp)
   1f7b0:	1885c83a 	sub	r2,r3,r2
   1f7b4:	1006937a 	slli	r3,r2,13
   1f7b8:	e0bfbe17 	ldw	r2,-264(fp)
   1f7bc:	1885883a 	add	r2,r3,r2
   1f7c0:	e0bfbc15 	stw	r2,-272(fp)
		tmp11 = (z1 - z2 - z3) << PASS1_BITS;
   1f7c4:	e0ffc117 	ldw	r3,-252(fp)
   1f7c8:	e0bfc217 	ldw	r2,-248(fp)
   1f7cc:	1887c83a 	sub	r3,r3,r2
   1f7d0:	e0bfc317 	ldw	r2,-244(fp)
   1f7d4:	1885c83a 	sub	r2,r3,r2
   1f7d8:	1085883a 	add	r2,r2,r2
   1f7dc:	1085883a 	add	r2,r2,r2
   1f7e0:	e0bfbe15 	stw	r2,-264(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   1f7e4:	e0ffbd17 	ldw	r3,-268(fp)
   1f7e8:	e0bfbb17 	ldw	r2,-276(fp)
   1f7ec:	1885883a 	add	r2,r3,r2
   1f7f0:	1007d2fa 	srai	r3,r2,11
   1f7f4:	e0bfb817 	ldw	r2,-288(fp)
   1f7f8:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   1f7fc:	e0bfb817 	ldw	r2,-288(fp)
   1f800:	10802804 	addi	r2,r2,160
   1f804:	e13fbd17 	ldw	r4,-268(fp)
   1f808:	e0ffbb17 	ldw	r3,-276(fp)
   1f80c:	20c7c83a 	sub	r3,r4,r3
   1f810:	1807d2fa 	srai	r3,r3,11
   1f814:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) (tmp21 + tmp11);
   1f818:	e0bfb817 	ldw	r2,-288(fp)
   1f81c:	10800804 	addi	r2,r2,32
   1f820:	e13fbf17 	ldw	r4,-260(fp)
   1f824:	e0ffbe17 	ldw	r3,-264(fp)
   1f828:	20c7883a 	add	r3,r4,r3
   1f82c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) (tmp21 - tmp11);
   1f830:	e0bfb817 	ldw	r2,-288(fp)
   1f834:	10802004 	addi	r2,r2,128
   1f838:	e13fbf17 	ldw	r4,-260(fp)
   1f83c:	e0ffbe17 	ldw	r3,-264(fp)
   1f840:	20c7c83a 	sub	r3,r4,r3
   1f844:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   1f848:	e0bfb817 	ldw	r2,-288(fp)
   1f84c:	10801004 	addi	r2,r2,64
   1f850:	e13fc017 	ldw	r4,-256(fp)
   1f854:	e0ffbc17 	ldw	r3,-272(fp)
   1f858:	20c7883a 	add	r3,r4,r3
   1f85c:	1807d2fa 	srai	r3,r3,11
   1f860:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   1f864:	e0bfb817 	ldw	r2,-288(fp)
   1f868:	10801804 	addi	r2,r2,96
   1f86c:	e13fc017 	ldw	r4,-256(fp)
   1f870:	e0ffbc17 	ldw	r3,-272(fp)
   1f874:	20c7c83a 	sub	r3,r4,r3
   1f878:	1807d2fa 	srai	r3,r3,11
   1f87c:	10c00015 	stw	r3,0(r2)
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1f880:	e0bfb917 	ldw	r2,-284(fp)
   1f884:	10800044 	addi	r2,r2,1
   1f888:	e0bfb915 	stw	r2,-284(fp)
   1f88c:	e0bfb617 	ldw	r2,-296(fp)
   1f890:	10800084 	addi	r2,r2,2
   1f894:	e0bfb615 	stw	r2,-296(fp)
   1f898:	e0bfb717 	ldw	r2,-292(fp)
   1f89c:	10800104 	addi	r2,r2,4
   1f8a0:	e0bfb715 	stw	r2,-292(fp)
   1f8a4:	e0bfb817 	ldw	r2,-288(fp)
   1f8a8:	10800104 	addi	r2,r2,4
   1f8ac:	e0bfb815 	stw	r2,-288(fp)
   1f8b0:	e0bfb917 	ldw	r2,-284(fp)
   1f8b4:	10800210 	cmplti	r2,r2,8
   1f8b8:	103f401e 	bne	r2,zero,1f5bc <jpeg_idct_12x6+0x58>
	}

	/* Pass 2: process 6 rows from work array, store into output array.
	* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
	*/
	wsptr = workspace;
   1f8bc:	e0bfcc04 	addi	r2,fp,-208
   1f8c0:	e0bfb815 	stw	r2,-288(fp)
	for (ctr = 0; ctr < 6; ctr++) {
   1f8c4:	e03fb915 	stw	zero,-284(fp)
   1f8c8:	00015806 	br	1fe2c <jpeg_idct_12x6+0x8c8>
		outptr = output_buf[ctr] + output_col;
   1f8cc:	e0bfb917 	ldw	r2,-284(fp)
   1f8d0:	1085883a 	add	r2,r2,r2
   1f8d4:	1085883a 	add	r2,r2,r2
   1f8d8:	e0ffff17 	ldw	r3,-4(fp)
   1f8dc:	1885883a 	add	r2,r3,r2
   1f8e0:	10c00017 	ldw	r3,0(r2)
   1f8e4:	e0800317 	ldw	r2,12(fp)
   1f8e8:	1885883a 	add	r2,r3,r2
   1f8ec:	e0bfc415 	stw	r2,-240(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   1f8f0:	e0bfb817 	ldw	r2,-288(fp)
   1f8f4:	10800017 	ldw	r2,0(r2)
   1f8f8:	10800404 	addi	r2,r2,16
   1f8fc:	e0bfc315 	stw	r2,-244(fp)
		z3 <<= CONST_BITS;
   1f900:	e0bfc317 	ldw	r2,-244(fp)
   1f904:	1004937a 	slli	r2,r2,13
   1f908:	e0bfc315 	stw	r2,-244(fp)

		z4 = (INT32) wsptr[4];
   1f90c:	e0bfb817 	ldw	r2,-288(fp)
   1f910:	10800404 	addi	r2,r2,16
   1f914:	10800017 	ldw	r2,0(r2)
   1f918:	e0bfc515 	stw	r2,-236(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
   1f91c:	e13fc517 	ldw	r4,-236(fp)
   1f920:	0149cc44 	movi	r5,10033
   1f924:	002c1540 	call	2c154 <__mulsi3>
   1f928:	e0bfc515 	stw	r2,-236(fp)

		tmp10 = z3 + z4;
   1f92c:	e0ffc317 	ldw	r3,-244(fp)
   1f930:	e0bfc517 	ldw	r2,-236(fp)
   1f934:	1885883a 	add	r2,r3,r2
   1f938:	e0bfbb15 	stw	r2,-276(fp)
		tmp11 = z3 - z4;
   1f93c:	e0ffc317 	ldw	r3,-244(fp)
   1f940:	e0bfc517 	ldw	r2,-236(fp)
   1f944:	1885c83a 	sub	r2,r3,r2
   1f948:	e0bfbe15 	stw	r2,-264(fp)

		z1 = (INT32) wsptr[2];
   1f94c:	e0bfb817 	ldw	r2,-288(fp)
   1f950:	10800204 	addi	r2,r2,8
   1f954:	10800017 	ldw	r2,0(r2)
   1f958:	e0bfc115 	stw	r2,-252(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
   1f95c:	e13fc117 	ldw	r4,-252(fp)
   1f960:	014aed84 	movi	r5,11190
   1f964:	002c1540 	call	2c154 <__mulsi3>
   1f968:	e0bfc515 	stw	r2,-236(fp)
		z1 <<= CONST_BITS;
   1f96c:	e0bfc117 	ldw	r2,-252(fp)
   1f970:	1004937a 	slli	r2,r2,13
   1f974:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[6];
   1f978:	e0bfb817 	ldw	r2,-288(fp)
   1f97c:	10800604 	addi	r2,r2,24
   1f980:	10800017 	ldw	r2,0(r2)
   1f984:	e0bfc215 	stw	r2,-248(fp)
		z2 <<= CONST_BITS;
   1f988:	e0bfc217 	ldw	r2,-248(fp)
   1f98c:	1004937a 	slli	r2,r2,13
   1f990:	e0bfc215 	stw	r2,-248(fp)

		tmp12 = z1 - z2;
   1f994:	e0ffc117 	ldw	r3,-252(fp)
   1f998:	e0bfc217 	ldw	r2,-248(fp)
   1f99c:	1885c83a 	sub	r2,r3,r2
   1f9a0:	e0bfbc15 	stw	r2,-272(fp)

		tmp21 = z3 + tmp12;
   1f9a4:	e0ffc317 	ldw	r3,-244(fp)
   1f9a8:	e0bfbc17 	ldw	r2,-272(fp)
   1f9ac:	1885883a 	add	r2,r3,r2
   1f9b0:	e0bfbf15 	stw	r2,-260(fp)
		tmp24 = z3 - tmp12;
   1f9b4:	e0ffc317 	ldw	r3,-244(fp)
   1f9b8:	e0bfbc17 	ldw	r2,-272(fp)
   1f9bc:	1885c83a 	sub	r2,r3,r2
   1f9c0:	e0bfc615 	stw	r2,-232(fp)

		tmp12 = z4 + z2;
   1f9c4:	e0ffc517 	ldw	r3,-236(fp)
   1f9c8:	e0bfc217 	ldw	r2,-248(fp)
   1f9cc:	1885883a 	add	r2,r3,r2
   1f9d0:	e0bfbc15 	stw	r2,-272(fp)

		tmp20 = tmp10 + tmp12;
   1f9d4:	e0ffbb17 	ldw	r3,-276(fp)
   1f9d8:	e0bfbc17 	ldw	r2,-272(fp)
   1f9dc:	1885883a 	add	r2,r3,r2
   1f9e0:	e0bfbd15 	stw	r2,-268(fp)
		tmp25 = tmp10 - tmp12;
   1f9e4:	e0ffbb17 	ldw	r3,-276(fp)
   1f9e8:	e0bfbc17 	ldw	r2,-272(fp)
   1f9ec:	1885c83a 	sub	r2,r3,r2
   1f9f0:	e0bfc715 	stw	r2,-228(fp)

		tmp12 = z4 - z1 - z2;
   1f9f4:	e0ffc517 	ldw	r3,-236(fp)
   1f9f8:	e0bfc117 	ldw	r2,-252(fp)
   1f9fc:	1887c83a 	sub	r3,r3,r2
   1fa00:	e0bfc217 	ldw	r2,-248(fp)
   1fa04:	1885c83a 	sub	r2,r3,r2
   1fa08:	e0bfbc15 	stw	r2,-272(fp)

		tmp22 = tmp11 + tmp12;
   1fa0c:	e0ffbe17 	ldw	r3,-264(fp)
   1fa10:	e0bfbc17 	ldw	r2,-272(fp)
   1fa14:	1885883a 	add	r2,r3,r2
   1fa18:	e0bfc015 	stw	r2,-256(fp)
		tmp23 = tmp11 - tmp12;
   1fa1c:	e0ffbe17 	ldw	r3,-264(fp)
   1fa20:	e0bfbc17 	ldw	r2,-272(fp)
   1fa24:	1885c83a 	sub	r2,r3,r2
   1fa28:	e0bfc815 	stw	r2,-224(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   1fa2c:	e0bfb817 	ldw	r2,-288(fp)
   1fa30:	10800104 	addi	r2,r2,4
   1fa34:	10800017 	ldw	r2,0(r2)
   1fa38:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[3];
   1fa3c:	e0bfb817 	ldw	r2,-288(fp)
   1fa40:	10800304 	addi	r2,r2,12
   1fa44:	10800017 	ldw	r2,0(r2)
   1fa48:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[5];
   1fa4c:	e0bfb817 	ldw	r2,-288(fp)
   1fa50:	10800504 	addi	r2,r2,20
   1fa54:	10800017 	ldw	r2,0(r2)
   1fa58:	e0bfc315 	stw	r2,-244(fp)
		z4 = (INT32) wsptr[7];
   1fa5c:	e0bfb817 	ldw	r2,-288(fp)
   1fa60:	10800704 	addi	r2,r2,28
   1fa64:	10800017 	ldw	r2,0(r2)
   1fa68:	e0bfc515 	stw	r2,-236(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
   1fa6c:	e13fc217 	ldw	r4,-248(fp)
   1fa70:	014a73c4 	movi	r5,10703
   1fa74:	002c1540 	call	2c154 <__mulsi3>
   1fa78:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
   1fa7c:	e13fc217 	ldw	r4,-248(fp)
   1fa80:	017babc4 	movi	r5,-4433
   1fa84:	002c1540 	call	2c154 <__mulsi3>
   1fa88:	e0bfc915 	stw	r2,-220(fp)

		tmp10 = z1 + z3;
   1fa8c:	e0ffc117 	ldw	r3,-252(fp)
   1fa90:	e0bfc317 	ldw	r2,-244(fp)
   1fa94:	1885883a 	add	r2,r3,r2
   1fa98:	e0bfbb15 	stw	r2,-276(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
   1fa9c:	e0ffbb17 	ldw	r3,-276(fp)
   1faa0:	e0bfc517 	ldw	r2,-236(fp)
   1faa4:	1885883a 	add	r2,r3,r2
   1faa8:	1009883a 	mov	r4,r2
   1faac:	0146e344 	movi	r5,7053
   1fab0:	002c1540 	call	2c154 <__mulsi3>
   1fab4:	e0bfca15 	stw	r2,-216(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
   1fab8:	e13fbb17 	ldw	r4,-276(fp)
   1fabc:	014216c4 	movi	r5,2139
   1fac0:	002c1540 	call	2c154 <__mulsi3>
   1fac4:	1007883a 	mov	r3,r2
   1fac8:	e0bfca17 	ldw	r2,-216(fp)
   1facc:	1885883a 	add	r2,r3,r2
   1fad0:	e0bfbc15 	stw	r2,-272(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
   1fad4:	e0ffbc17 	ldw	r3,-272(fp)
   1fad8:	e0bfbe17 	ldw	r2,-264(fp)
   1fadc:	18a1883a 	add	r16,r3,r2
   1fae0:	e13fc117 	ldw	r4,-252(fp)
   1fae4:	01423dc4 	movi	r5,2295
   1fae8:	002c1540 	call	2c154 <__mulsi3>
   1faec:	8085883a 	add	r2,r16,r2
   1faf0:	e0bfbb15 	stw	r2,-276(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
   1faf4:	e0ffc317 	ldw	r3,-244(fp)
   1faf8:	e0bfc517 	ldw	r2,-236(fp)
   1fafc:	1885883a 	add	r2,r3,r2
   1fb00:	1009883a 	mov	r4,r2
   1fb04:	0177a2c4 	movi	r5,-8565
   1fb08:	002c1540 	call	2c154 <__mulsi3>
   1fb0c:	e0bfcb15 	stw	r2,-212(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
   1fb10:	e0ffcb17 	ldw	r3,-212(fp)
   1fb14:	e0bfc917 	ldw	r2,-220(fp)
   1fb18:	18a1883a 	add	r16,r3,r2
   1fb1c:	e13fc317 	ldw	r4,-244(fp)
   1fb20:	01742c04 	movi	r5,-12112
   1fb24:	002c1540 	call	2c154 <__mulsi3>
   1fb28:	8085883a 	add	r2,r16,r2
   1fb2c:	e0ffbc17 	ldw	r3,-272(fp)
   1fb30:	1885883a 	add	r2,r3,r2
   1fb34:	e0bfbc15 	stw	r2,-272(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
   1fb38:	e0ffca17 	ldw	r3,-216(fp)
   1fb3c:	e0bfbe17 	ldw	r2,-264(fp)
   1fb40:	18a1c83a 	sub	r16,r3,r2
   1fb44:	e13fc517 	ldw	r4,-236(fp)
   1fb48:	014cb184 	movi	r5,12998
   1fb4c:	002c1540 	call	2c154 <__mulsi3>
   1fb50:	8085883a 	add	r2,r16,r2
   1fb54:	e0ffcb17 	ldw	r3,-212(fp)
   1fb58:	1885883a 	add	r2,r3,r2
   1fb5c:	e0bfcb15 	stw	r2,-212(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   1fb60:	e13fc117 	ldw	r4,-252(fp)
   1fb64:	017a9704 	movi	r5,-5540
   1fb68:	002c1540 	call	2c154 <__mulsi3>
   1fb6c:	1007883a 	mov	r3,r2
   1fb70:	e0bfc917 	ldw	r2,-220(fp)
   1fb74:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
   1fb78:	e13fc517 	ldw	r4,-236(fp)
   1fb7c:	01702304 	movi	r5,-16244
   1fb80:	002c1540 	call	2c154 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   1fb84:	8085883a 	add	r2,r16,r2
   1fb88:	e0ffca17 	ldw	r3,-216(fp)
   1fb8c:	1885883a 	add	r2,r3,r2
   1fb90:	e0bfca15 	stw	r2,-216(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
   1fb94:	e0ffc117 	ldw	r3,-252(fp)
   1fb98:	e0bfc517 	ldw	r2,-236(fp)
   1fb9c:	1885c83a 	sub	r2,r3,r2
   1fba0:	e0bfc115 	stw	r2,-252(fp)
		z2 -= z3;
   1fba4:	e0ffc217 	ldw	r3,-248(fp)
   1fba8:	e0bfc317 	ldw	r2,-244(fp)
   1fbac:	1885c83a 	sub	r2,r3,r2
   1fbb0:	e0bfc215 	stw	r2,-248(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
   1fbb4:	e0ffc117 	ldw	r3,-252(fp)
   1fbb8:	e0bfc217 	ldw	r2,-248(fp)
   1fbbc:	1885883a 	add	r2,r3,r2
   1fbc0:	1009883a 	mov	r4,r2
   1fbc4:	01445444 	movi	r5,4433
   1fbc8:	002c1540 	call	2c154 <__mulsi3>
   1fbcc:	e0bfc315 	stw	r2,-244(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
   1fbd0:	e13fc117 	ldw	r4,-252(fp)
   1fbd4:	01461f84 	movi	r5,6270
   1fbd8:	002c1540 	call	2c154 <__mulsi3>
   1fbdc:	1007883a 	mov	r3,r2
   1fbe0:	e0bfc317 	ldw	r2,-244(fp)
   1fbe4:	1885883a 	add	r2,r3,r2
   1fbe8:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
   1fbec:	e13fc217 	ldw	r4,-248(fp)
   1fbf0:	017137c4 	movi	r5,-15137
   1fbf4:	002c1540 	call	2c154 <__mulsi3>
   1fbf8:	1007883a 	mov	r3,r2
   1fbfc:	e0bfc317 	ldw	r2,-244(fp)
   1fc00:	1885883a 	add	r2,r3,r2
   1fc04:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   1fc08:	e0ffbd17 	ldw	r3,-268(fp)
   1fc0c:	e0bfbb17 	ldw	r2,-276(fp)
   1fc10:	1885883a 	add	r2,r3,r2
   1fc14:	1005d4ba 	srai	r2,r2,18
   1fc18:	1080ffcc 	andi	r2,r2,1023
   1fc1c:	e0ffba17 	ldw	r3,-280(fp)
   1fc20:	1885883a 	add	r2,r3,r2
   1fc24:	10c00003 	ldbu	r3,0(r2)
   1fc28:	e0bfc417 	ldw	r2,-240(fp)
   1fc2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   1fc30:	e0bfc417 	ldw	r2,-240(fp)
   1fc34:	108002c4 	addi	r2,r2,11
   1fc38:	e13fbd17 	ldw	r4,-268(fp)
   1fc3c:	e0ffbb17 	ldw	r3,-276(fp)
   1fc40:	20c7c83a 	sub	r3,r4,r3
   1fc44:	1807d4ba 	srai	r3,r3,18
   1fc48:	18c0ffcc 	andi	r3,r3,1023
   1fc4c:	e13fba17 	ldw	r4,-280(fp)
   1fc50:	20c7883a 	add	r3,r4,r3
   1fc54:	18c00003 	ldbu	r3,0(r3)
   1fc58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   1fc5c:	e0bfc417 	ldw	r2,-240(fp)
   1fc60:	10800044 	addi	r2,r2,1
   1fc64:	e13fbf17 	ldw	r4,-260(fp)
   1fc68:	e0ffbe17 	ldw	r3,-264(fp)
   1fc6c:	20c7883a 	add	r3,r4,r3
   1fc70:	1807d4ba 	srai	r3,r3,18
   1fc74:	18c0ffcc 	andi	r3,r3,1023
   1fc78:	e13fba17 	ldw	r4,-280(fp)
   1fc7c:	20c7883a 	add	r3,r4,r3
   1fc80:	18c00003 	ldbu	r3,0(r3)
   1fc84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   1fc88:	e0bfc417 	ldw	r2,-240(fp)
   1fc8c:	10800284 	addi	r2,r2,10
   1fc90:	e13fbf17 	ldw	r4,-260(fp)
   1fc94:	e0ffbe17 	ldw	r3,-264(fp)
   1fc98:	20c7c83a 	sub	r3,r4,r3
   1fc9c:	1807d4ba 	srai	r3,r3,18
   1fca0:	18c0ffcc 	andi	r3,r3,1023
   1fca4:	e13fba17 	ldw	r4,-280(fp)
   1fca8:	20c7883a 	add	r3,r4,r3
   1fcac:	18c00003 	ldbu	r3,0(r3)
   1fcb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   1fcb4:	e0bfc417 	ldw	r2,-240(fp)
   1fcb8:	10800084 	addi	r2,r2,2
   1fcbc:	e13fc017 	ldw	r4,-256(fp)
   1fcc0:	e0ffbc17 	ldw	r3,-272(fp)
   1fcc4:	20c7883a 	add	r3,r4,r3
   1fcc8:	1807d4ba 	srai	r3,r3,18
   1fccc:	18c0ffcc 	andi	r3,r3,1023
   1fcd0:	e13fba17 	ldw	r4,-280(fp)
   1fcd4:	20c7883a 	add	r3,r4,r3
   1fcd8:	18c00003 	ldbu	r3,0(r3)
   1fcdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   1fce0:	e0bfc417 	ldw	r2,-240(fp)
   1fce4:	10800244 	addi	r2,r2,9
   1fce8:	e13fc017 	ldw	r4,-256(fp)
   1fcec:	e0ffbc17 	ldw	r3,-272(fp)
   1fcf0:	20c7c83a 	sub	r3,r4,r3
   1fcf4:	1807d4ba 	srai	r3,r3,18
   1fcf8:	18c0ffcc 	andi	r3,r3,1023
   1fcfc:	e13fba17 	ldw	r4,-280(fp)
   1fd00:	20c7883a 	add	r3,r4,r3
   1fd04:	18c00003 	ldbu	r3,0(r3)
   1fd08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   1fd0c:	e0bfc417 	ldw	r2,-240(fp)
   1fd10:	108000c4 	addi	r2,r2,3
   1fd14:	e13fc817 	ldw	r4,-224(fp)
   1fd18:	e0ffcb17 	ldw	r3,-212(fp)
   1fd1c:	20c7883a 	add	r3,r4,r3
   1fd20:	1807d4ba 	srai	r3,r3,18
   1fd24:	18c0ffcc 	andi	r3,r3,1023
   1fd28:	e13fba17 	ldw	r4,-280(fp)
   1fd2c:	20c7883a 	add	r3,r4,r3
   1fd30:	18c00003 	ldbu	r3,0(r3)
   1fd34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   1fd38:	e0bfc417 	ldw	r2,-240(fp)
   1fd3c:	10800204 	addi	r2,r2,8
   1fd40:	e13fc817 	ldw	r4,-224(fp)
   1fd44:	e0ffcb17 	ldw	r3,-212(fp)
   1fd48:	20c7c83a 	sub	r3,r4,r3
   1fd4c:	1807d4ba 	srai	r3,r3,18
   1fd50:	18c0ffcc 	andi	r3,r3,1023
   1fd54:	e13fba17 	ldw	r4,-280(fp)
   1fd58:	20c7883a 	add	r3,r4,r3
   1fd5c:	18c00003 	ldbu	r3,0(r3)
   1fd60:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   1fd64:	e0bfc417 	ldw	r2,-240(fp)
   1fd68:	10800104 	addi	r2,r2,4
   1fd6c:	e13fc617 	ldw	r4,-232(fp)
   1fd70:	e0ffc917 	ldw	r3,-220(fp)
   1fd74:	20c7883a 	add	r3,r4,r3
   1fd78:	1807d4ba 	srai	r3,r3,18
   1fd7c:	18c0ffcc 	andi	r3,r3,1023
   1fd80:	e13fba17 	ldw	r4,-280(fp)
   1fd84:	20c7883a 	add	r3,r4,r3
   1fd88:	18c00003 	ldbu	r3,0(r3)
   1fd8c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   1fd90:	e0bfc417 	ldw	r2,-240(fp)
   1fd94:	108001c4 	addi	r2,r2,7
   1fd98:	e13fc617 	ldw	r4,-232(fp)
   1fd9c:	e0ffc917 	ldw	r3,-220(fp)
   1fda0:	20c7c83a 	sub	r3,r4,r3
   1fda4:	1807d4ba 	srai	r3,r3,18
   1fda8:	18c0ffcc 	andi	r3,r3,1023
   1fdac:	e13fba17 	ldw	r4,-280(fp)
   1fdb0:	20c7883a 	add	r3,r4,r3
   1fdb4:	18c00003 	ldbu	r3,0(r3)
   1fdb8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
   1fdbc:	e0bfc417 	ldw	r2,-240(fp)
   1fdc0:	10800144 	addi	r2,r2,5
   1fdc4:	e13fc717 	ldw	r4,-228(fp)
   1fdc8:	e0ffca17 	ldw	r3,-216(fp)
   1fdcc:	20c7883a 	add	r3,r4,r3
   1fdd0:	1807d4ba 	srai	r3,r3,18
   1fdd4:	18c0ffcc 	andi	r3,r3,1023
   1fdd8:	e13fba17 	ldw	r4,-280(fp)
   1fddc:	20c7883a 	add	r3,r4,r3
   1fde0:	18c00003 	ldbu	r3,0(r3)
   1fde4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
   1fde8:	e0bfc417 	ldw	r2,-240(fp)
   1fdec:	10800184 	addi	r2,r2,6
   1fdf0:	e13fc717 	ldw	r4,-228(fp)
   1fdf4:	e0ffca17 	ldw	r3,-216(fp)
   1fdf8:	20c7c83a 	sub	r3,r4,r3
   1fdfc:	1807d4ba 	srai	r3,r3,18
   1fe00:	18c0ffcc 	andi	r3,r3,1023
   1fe04:	e13fba17 	ldw	r4,-280(fp)
   1fe08:	20c7883a 	add	r3,r4,r3
   1fe0c:	18c00003 	ldbu	r3,0(r3)
   1fe10:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   1fe14:	e0bfb817 	ldw	r2,-288(fp)
   1fe18:	10800804 	addi	r2,r2,32
   1fe1c:	e0bfb815 	stw	r2,-288(fp)

	/* Pass 2: process 6 rows from work array, store into output array.
	* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
   1fe20:	e0bfb917 	ldw	r2,-284(fp)
   1fe24:	10800044 	addi	r2,r2,1
   1fe28:	e0bfb915 	stw	r2,-284(fp)
   1fe2c:	e0bfb917 	ldw	r2,-284(fp)
   1fe30:	10800190 	cmplti	r2,r2,6
   1fe34:	103ea51e 	bne	r2,zero,1f8cc <jpeg_idct_12x6+0x368>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   1fe38:	e037883a 	mov	sp,fp
   1fe3c:	dfc00217 	ldw	ra,8(sp)
   1fe40:	df000117 	ldw	fp,4(sp)
   1fe44:	dc000017 	ldw	r16,0(sp)
   1fe48:	dec00304 	addi	sp,sp,12
   1fe4c:	f800283a 	ret

0001fe50 <jpeg_idct_10x5>:

GLOBAL(void)
	jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   1fe50:	deffbe04 	addi	sp,sp,-264
   1fe54:	dfc04115 	stw	ra,260(sp)
   1fe58:	df004015 	stw	fp,256(sp)
   1fe5c:	df004004 	addi	fp,sp,256
   1fe60:	e13ffc15 	stw	r4,-16(fp)
   1fe64:	e17ffd15 	stw	r5,-12(fp)
   1fe68:	e1bffe15 	stw	r6,-8(fp)
   1fe6c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   1fe70:	e0bffc17 	ldw	r2,-16(fp)
   1fe74:	10804917 	ldw	r2,292(r2)
   1fe78:	10802004 	addi	r2,r2,128
   1fe7c:	e0bfc415 	stw	r2,-240(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
		*/
		inptr = coef_block;
   1fe80:	e0bffe17 	ldw	r2,-8(fp)
   1fe84:	e0bfc015 	stw	r2,-256(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   1fe88:	e0bffd17 	ldw	r2,-12(fp)
   1fe8c:	10801517 	ldw	r2,84(r2)
   1fe90:	e0bfc115 	stw	r2,-252(fp)
	wsptr = workspace;
   1fe94:	e0bfd404 	addi	r2,fp,-176
   1fe98:	e0bfc215 	stw	r2,-248(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   1fe9c:	e03fc315 	stw	zero,-244(fp)
   1fea0:	0000a606 	br	2013c <jpeg_idct_10x5+0x2ec>
		/* Even part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   1fea4:	e0bfc017 	ldw	r2,-256(fp)
   1fea8:	1080000b 	ldhu	r2,0(r2)
   1feac:	10ffffcc 	andi	r3,r2,65535
   1feb0:	18e0001c 	xori	r3,r3,32768
   1feb4:	18e00004 	addi	r3,r3,-32768
   1feb8:	e0bfc117 	ldw	r2,-252(fp)
   1febc:	10800017 	ldw	r2,0(r2)
   1fec0:	1809883a 	mov	r4,r3
   1fec4:	100b883a 	mov	r5,r2
   1fec8:	002c1540 	call	2c154 <__mulsi3>
   1fecc:	e0bfc515 	stw	r2,-236(fp)
		tmp12 <<= CONST_BITS;
   1fed0:	e0bfc517 	ldw	r2,-236(fp)
   1fed4:	1004937a 	slli	r2,r2,13
   1fed8:	e0bfc515 	stw	r2,-236(fp)
		/* Add fudge factor here for final descale. */
		tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
   1fedc:	e0bfc517 	ldw	r2,-236(fp)
   1fee0:	10810004 	addi	r2,r2,1024
   1fee4:	e0bfc515 	stw	r2,-236(fp)
		tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   1fee8:	e0bfc017 	ldw	r2,-256(fp)
   1feec:	10800804 	addi	r2,r2,32
   1fef0:	1080000b 	ldhu	r2,0(r2)
   1fef4:	10ffffcc 	andi	r3,r2,65535
   1fef8:	18e0001c 	xori	r3,r3,32768
   1fefc:	18e00004 	addi	r3,r3,-32768
   1ff00:	e0bfc117 	ldw	r2,-252(fp)
   1ff04:	10801004 	addi	r2,r2,64
   1ff08:	10800017 	ldw	r2,0(r2)
   1ff0c:	1809883a 	mov	r4,r3
   1ff10:	100b883a 	mov	r5,r2
   1ff14:	002c1540 	call	2c154 <__mulsi3>
   1ff18:	e0bfc615 	stw	r2,-232(fp)
		tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   1ff1c:	e0bfc017 	ldw	r2,-256(fp)
   1ff20:	10801004 	addi	r2,r2,64
   1ff24:	1080000b 	ldhu	r2,0(r2)
   1ff28:	10ffffcc 	andi	r3,r2,65535
   1ff2c:	18e0001c 	xori	r3,r3,32768
   1ff30:	18e00004 	addi	r3,r3,-32768
   1ff34:	e0bfc117 	ldw	r2,-252(fp)
   1ff38:	10802004 	addi	r2,r2,128
   1ff3c:	10800017 	ldw	r2,0(r2)
   1ff40:	1809883a 	mov	r4,r3
   1ff44:	100b883a 	mov	r5,r2
   1ff48:	002c1540 	call	2c154 <__mulsi3>
   1ff4c:	e0bfc715 	stw	r2,-228(fp)
		z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
   1ff50:	e0ffc617 	ldw	r3,-232(fp)
   1ff54:	e0bfc717 	ldw	r2,-228(fp)
   1ff58:	1885883a 	add	r2,r3,r2
   1ff5c:	1009883a 	mov	r4,r2
   1ff60:	01465304 	movi	r5,6476
   1ff64:	002c1540 	call	2c154 <__mulsi3>
   1ff68:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
   1ff6c:	e0ffc617 	ldw	r3,-232(fp)
   1ff70:	e0bfc717 	ldw	r2,-228(fp)
   1ff74:	1885c83a 	sub	r2,r3,r2
   1ff78:	1009883a 	mov	r4,r2
   1ff7c:	0142d404 	movi	r5,2896
   1ff80:	002c1540 	call	2c154 <__mulsi3>
   1ff84:	e0bfc915 	stw	r2,-220(fp)
		z3 = tmp12 + z2;
   1ff88:	e0ffc517 	ldw	r3,-236(fp)
   1ff8c:	e0bfc917 	ldw	r2,-220(fp)
   1ff90:	1885883a 	add	r2,r3,r2
   1ff94:	e0bfca15 	stw	r2,-216(fp)
		tmp10 = z3 + z1;
   1ff98:	e0ffca17 	ldw	r3,-216(fp)
   1ff9c:	e0bfc817 	ldw	r2,-224(fp)
   1ffa0:	1885883a 	add	r2,r3,r2
   1ffa4:	e0bfcb15 	stw	r2,-212(fp)
		tmp11 = z3 - z1;
   1ffa8:	e0ffca17 	ldw	r3,-216(fp)
   1ffac:	e0bfc817 	ldw	r2,-224(fp)
   1ffb0:	1885c83a 	sub	r2,r3,r2
   1ffb4:	e0bfcc15 	stw	r2,-208(fp)
		tmp12 -= z2 << 2;
   1ffb8:	e0bfc917 	ldw	r2,-220(fp)
   1ffbc:	1085883a 	add	r2,r2,r2
   1ffc0:	1085883a 	add	r2,r2,r2
   1ffc4:	e0ffc517 	ldw	r3,-236(fp)
   1ffc8:	1885c83a 	sub	r2,r3,r2
   1ffcc:	e0bfc515 	stw	r2,-236(fp)

		/* Odd part */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   1ffd0:	e0bfc017 	ldw	r2,-256(fp)
   1ffd4:	10800404 	addi	r2,r2,16
   1ffd8:	1080000b 	ldhu	r2,0(r2)
   1ffdc:	10ffffcc 	andi	r3,r2,65535
   1ffe0:	18e0001c 	xori	r3,r3,32768
   1ffe4:	18e00004 	addi	r3,r3,-32768
   1ffe8:	e0bfc117 	ldw	r2,-252(fp)
   1ffec:	10800804 	addi	r2,r2,32
   1fff0:	10800017 	ldw	r2,0(r2)
   1fff4:	1809883a 	mov	r4,r3
   1fff8:	100b883a 	mov	r5,r2
   1fffc:	002c1540 	call	2c154 <__mulsi3>
   20000:	e0bfc915 	stw	r2,-220(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   20004:	e0bfc017 	ldw	r2,-256(fp)
   20008:	10800c04 	addi	r2,r2,48
   2000c:	1080000b 	ldhu	r2,0(r2)
   20010:	10ffffcc 	andi	r3,r2,65535
   20014:	18e0001c 	xori	r3,r3,32768
   20018:	18e00004 	addi	r3,r3,-32768
   2001c:	e0bfc117 	ldw	r2,-252(fp)
   20020:	10801804 	addi	r2,r2,96
   20024:	10800017 	ldw	r2,0(r2)
   20028:	1809883a 	mov	r4,r3
   2002c:	100b883a 	mov	r5,r2
   20030:	002c1540 	call	2c154 <__mulsi3>
   20034:	e0bfca15 	stw	r2,-216(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
   20038:	e0ffc917 	ldw	r3,-220(fp)
   2003c:	e0bfca17 	ldw	r2,-216(fp)
   20040:	1885883a 	add	r2,r3,r2
   20044:	1009883a 	mov	r4,r2
   20048:	0146a684 	movi	r5,6810
   2004c:	002c1540 	call	2c154 <__mulsi3>
   20050:	e0bfc815 	stw	r2,-224(fp)
		tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
   20054:	e13fc917 	ldw	r4,-220(fp)
   20058:	01441c44 	movi	r5,4209
   2005c:	002c1540 	call	2c154 <__mulsi3>
   20060:	1007883a 	mov	r3,r2
   20064:	e0bfc817 	ldw	r2,-224(fp)
   20068:	1885883a 	add	r2,r3,r2
   2006c:	e0bfc615 	stw	r2,-232(fp)
		tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
   20070:	e13fca17 	ldw	r4,-216(fp)
   20074:	016e9704 	movi	r5,-17828
   20078:	002c1540 	call	2c154 <__mulsi3>
   2007c:	1007883a 	mov	r3,r2
   20080:	e0bfc817 	ldw	r2,-224(fp)
   20084:	1885883a 	add	r2,r3,r2
   20088:	e0bfc715 	stw	r2,-228(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
   2008c:	e0ffcb17 	ldw	r3,-212(fp)
   20090:	e0bfc617 	ldw	r2,-232(fp)
   20094:	1885883a 	add	r2,r3,r2
   20098:	1007d2fa 	srai	r3,r2,11
   2009c:	e0bfc217 	ldw	r2,-248(fp)
   200a0:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
   200a4:	e0bfc217 	ldw	r2,-248(fp)
   200a8:	10802004 	addi	r2,r2,128
   200ac:	e13fcb17 	ldw	r4,-212(fp)
   200b0:	e0ffc617 	ldw	r3,-232(fp)
   200b4:	20c7c83a 	sub	r3,r4,r3
   200b8:	1807d2fa 	srai	r3,r3,11
   200bc:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
   200c0:	e0bfc217 	ldw	r2,-248(fp)
   200c4:	10800804 	addi	r2,r2,32
   200c8:	e13fcc17 	ldw	r4,-208(fp)
   200cc:	e0ffc717 	ldw	r3,-228(fp)
   200d0:	20c7883a 	add	r3,r4,r3
   200d4:	1807d2fa 	srai	r3,r3,11
   200d8:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
   200dc:	e0bfc217 	ldw	r2,-248(fp)
   200e0:	10801804 	addi	r2,r2,96
   200e4:	e13fcc17 	ldw	r4,-208(fp)
   200e8:	e0ffc717 	ldw	r3,-228(fp)
   200ec:	20c7c83a 	sub	r3,r4,r3
   200f0:	1807d2fa 	srai	r3,r3,11
   200f4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
   200f8:	e0bfc217 	ldw	r2,-248(fp)
   200fc:	10801004 	addi	r2,r2,64
   20100:	e0ffc517 	ldw	r3,-236(fp)
   20104:	1807d2fa 	srai	r3,r3,11
   20108:	10c00015 	stw	r3,0(r2)
		* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   2010c:	e0bfc317 	ldw	r2,-244(fp)
   20110:	10800044 	addi	r2,r2,1
   20114:	e0bfc315 	stw	r2,-244(fp)
   20118:	e0bfc017 	ldw	r2,-256(fp)
   2011c:	10800084 	addi	r2,r2,2
   20120:	e0bfc015 	stw	r2,-256(fp)
   20124:	e0bfc117 	ldw	r2,-252(fp)
   20128:	10800104 	addi	r2,r2,4
   2012c:	e0bfc115 	stw	r2,-252(fp)
   20130:	e0bfc217 	ldw	r2,-248(fp)
   20134:	10800104 	addi	r2,r2,4
   20138:	e0bfc215 	stw	r2,-248(fp)
   2013c:	e0bfc317 	ldw	r2,-244(fp)
   20140:	10800210 	cmplti	r2,r2,8
   20144:	103f571e 	bne	r2,zero,1fea4 <jpeg_idct_10x5+0x54>
	}

	/* Pass 2: process 5 rows from work array, store into output array.
	* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
	*/
	wsptr = workspace;
   20148:	e0bfd404 	addi	r2,fp,-176
   2014c:	e0bfc215 	stw	r2,-248(fp)
	for (ctr = 0; ctr < 5; ctr++) {
   20150:	e03fc315 	stw	zero,-244(fp)
   20154:	00012806 	br	205f8 <jpeg_idct_10x5+0x7a8>
		outptr = output_buf[ctr] + output_col;
   20158:	e0bfc317 	ldw	r2,-244(fp)
   2015c:	1085883a 	add	r2,r2,r2
   20160:	1085883a 	add	r2,r2,r2
   20164:	e0ffff17 	ldw	r3,-4(fp)
   20168:	1885883a 	add	r2,r3,r2
   2016c:	10c00017 	ldw	r3,0(r2)
   20170:	e0800217 	ldw	r2,8(fp)
   20174:	1885883a 	add	r2,r3,r2
   20178:	e0bfcd15 	stw	r2,-204(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   2017c:	e0bfc217 	ldw	r2,-248(fp)
   20180:	10800017 	ldw	r2,0(r2)
   20184:	10800404 	addi	r2,r2,16
   20188:	e0bfca15 	stw	r2,-216(fp)
		z3 <<= CONST_BITS;
   2018c:	e0bfca17 	ldw	r2,-216(fp)
   20190:	1004937a 	slli	r2,r2,13
   20194:	e0bfca15 	stw	r2,-216(fp)
		z4 = (INT32) wsptr[4];
   20198:	e0bfc217 	ldw	r2,-248(fp)
   2019c:	10800404 	addi	r2,r2,16
   201a0:	10800017 	ldw	r2,0(r2)
   201a4:	e0bfce15 	stw	r2,-200(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
   201a8:	e13fce17 	ldw	r4,-200(fp)
   201ac:	01492744 	movi	r5,9373
   201b0:	002c1540 	call	2c154 <__mulsi3>
   201b4:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
   201b8:	e13fce17 	ldw	r4,-200(fp)
   201bc:	01437f04 	movi	r5,3580
   201c0:	002c1540 	call	2c154 <__mulsi3>
   201c4:	e0bfc915 	stw	r2,-220(fp)
		tmp10 = z3 + z1;
   201c8:	e0ffca17 	ldw	r3,-216(fp)
   201cc:	e0bfc817 	ldw	r2,-224(fp)
   201d0:	1885883a 	add	r2,r3,r2
   201d4:	e0bfcb15 	stw	r2,-212(fp)
		tmp11 = z3 - z2;
   201d8:	e0ffca17 	ldw	r3,-216(fp)
   201dc:	e0bfc917 	ldw	r2,-220(fp)
   201e0:	1885c83a 	sub	r2,r3,r2
   201e4:	e0bfcc15 	stw	r2,-208(fp)

		tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
   201e8:	e0ffc817 	ldw	r3,-224(fp)
   201ec:	e0bfc917 	ldw	r2,-220(fp)
   201f0:	1885c83a 	sub	r2,r3,r2
   201f4:	1085883a 	add	r2,r2,r2
   201f8:	e0ffca17 	ldw	r3,-216(fp)
   201fc:	1885c83a 	sub	r2,r3,r2
   20200:	e0bfcf15 	stw	r2,-196(fp)

		z2 = (INT32) wsptr[2];
   20204:	e0bfc217 	ldw	r2,-248(fp)
   20208:	10800204 	addi	r2,r2,8
   2020c:	10800017 	ldw	r2,0(r2)
   20210:	e0bfc915 	stw	r2,-220(fp)
		z3 = (INT32) wsptr[6];
   20214:	e0bfc217 	ldw	r2,-248(fp)
   20218:	10800604 	addi	r2,r2,24
   2021c:	10800017 	ldw	r2,0(r2)
   20220:	e0bfca15 	stw	r2,-216(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
   20224:	e0ffc917 	ldw	r3,-220(fp)
   20228:	e0bfca17 	ldw	r2,-216(fp)
   2022c:	1885883a 	add	r2,r3,r2
   20230:	1009883a 	mov	r4,r2
   20234:	0146a684 	movi	r5,6810
   20238:	002c1540 	call	2c154 <__mulsi3>
   2023c:	e0bfc815 	stw	r2,-224(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
   20240:	e13fc917 	ldw	r4,-220(fp)
   20244:	01441c44 	movi	r5,4209
   20248:	002c1540 	call	2c154 <__mulsi3>
   2024c:	1007883a 	mov	r3,r2
   20250:	e0bfc817 	ldw	r2,-224(fp)
   20254:	1885883a 	add	r2,r3,r2
   20258:	e0bfc515 	stw	r2,-236(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
   2025c:	e13fca17 	ldw	r4,-216(fp)
   20260:	016e9704 	movi	r5,-17828
   20264:	002c1540 	call	2c154 <__mulsi3>
   20268:	1007883a 	mov	r3,r2
   2026c:	e0bfc817 	ldw	r2,-224(fp)
   20270:	1885883a 	add	r2,r3,r2
   20274:	e0bfc615 	stw	r2,-232(fp)

		tmp20 = tmp10 + tmp12;
   20278:	e0ffcb17 	ldw	r3,-212(fp)
   2027c:	e0bfc517 	ldw	r2,-236(fp)
   20280:	1885883a 	add	r2,r3,r2
   20284:	e0bfd015 	stw	r2,-192(fp)
		tmp24 = tmp10 - tmp12;
   20288:	e0ffcb17 	ldw	r3,-212(fp)
   2028c:	e0bfc517 	ldw	r2,-236(fp)
   20290:	1885c83a 	sub	r2,r3,r2
   20294:	e0bfd115 	stw	r2,-188(fp)
		tmp21 = tmp11 + tmp13;
   20298:	e0ffcc17 	ldw	r3,-208(fp)
   2029c:	e0bfc617 	ldw	r2,-232(fp)
   202a0:	1885883a 	add	r2,r3,r2
   202a4:	e0bfd215 	stw	r2,-184(fp)
		tmp23 = tmp11 - tmp13;
   202a8:	e0ffcc17 	ldw	r3,-208(fp)
   202ac:	e0bfc617 	ldw	r2,-232(fp)
   202b0:	1885c83a 	sub	r2,r3,r2
   202b4:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   202b8:	e0bfc217 	ldw	r2,-248(fp)
   202bc:	10800104 	addi	r2,r2,4
   202c0:	10800017 	ldw	r2,0(r2)
   202c4:	e0bfc815 	stw	r2,-224(fp)
		z2 = (INT32) wsptr[3];
   202c8:	e0bfc217 	ldw	r2,-248(fp)
   202cc:	10800304 	addi	r2,r2,12
   202d0:	10800017 	ldw	r2,0(r2)
   202d4:	e0bfc915 	stw	r2,-220(fp)
		z3 = (INT32) wsptr[5];
   202d8:	e0bfc217 	ldw	r2,-248(fp)
   202dc:	10800504 	addi	r2,r2,20
   202e0:	10800017 	ldw	r2,0(r2)
   202e4:	e0bfca15 	stw	r2,-216(fp)
		z3 <<= CONST_BITS;
   202e8:	e0bfca17 	ldw	r2,-216(fp)
   202ec:	1004937a 	slli	r2,r2,13
   202f0:	e0bfca15 	stw	r2,-216(fp)
		z4 = (INT32) wsptr[7];
   202f4:	e0bfc217 	ldw	r2,-248(fp)
   202f8:	10800704 	addi	r2,r2,28
   202fc:	10800017 	ldw	r2,0(r2)
   20300:	e0bfce15 	stw	r2,-200(fp)

		tmp11 = z2 + z4;
   20304:	e0ffc917 	ldw	r3,-220(fp)
   20308:	e0bfce17 	ldw	r2,-200(fp)
   2030c:	1885883a 	add	r2,r3,r2
   20310:	e0bfcc15 	stw	r2,-208(fp)
		tmp13 = z2 - z4;
   20314:	e0ffc917 	ldw	r3,-220(fp)
   20318:	e0bfce17 	ldw	r2,-200(fp)
   2031c:	1885c83a 	sub	r2,r3,r2
   20320:	e0bfc615 	stw	r2,-232(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
   20324:	e13fc617 	ldw	r4,-232(fp)
   20328:	014278c4 	movi	r5,2531
   2032c:	002c1540 	call	2c154 <__mulsi3>
   20330:	e0bfc515 	stw	r2,-236(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
   20334:	e13fcc17 	ldw	r4,-208(fp)
   20338:	01479bc4 	movi	r5,7791
   2033c:	002c1540 	call	2c154 <__mulsi3>
   20340:	e0bfc915 	stw	r2,-220(fp)
		z4 = z3 + tmp12;
   20344:	e0ffca17 	ldw	r3,-216(fp)
   20348:	e0bfc517 	ldw	r2,-236(fp)
   2034c:	1885883a 	add	r2,r3,r2
   20350:	e0bfce15 	stw	r2,-200(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
   20354:	e13fc817 	ldw	r4,-224(fp)
   20358:	014b2cc4 	movi	r5,11443
   2035c:	002c1540 	call	2c154 <__mulsi3>
   20360:	1007883a 	mov	r3,r2
   20364:	e0bfc917 	ldw	r2,-220(fp)
   20368:	1887883a 	add	r3,r3,r2
   2036c:	e0bfce17 	ldw	r2,-200(fp)
   20370:	1885883a 	add	r2,r3,r2
   20374:	e0bfcb15 	stw	r2,-212(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
   20378:	e13fc817 	ldw	r4,-224(fp)
   2037c:	0141c504 	movi	r5,1812
   20380:	002c1540 	call	2c154 <__mulsi3>
   20384:	1007883a 	mov	r3,r2
   20388:	e0bfc917 	ldw	r2,-220(fp)
   2038c:	1887c83a 	sub	r3,r3,r2
   20390:	e0bfce17 	ldw	r2,-200(fp)
   20394:	1885883a 	add	r2,r3,r2
   20398:	e0bfc715 	stw	r2,-228(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
   2039c:	e13fcc17 	ldw	r4,-208(fp)
   203a0:	0144b3c4 	movi	r5,4815
   203a4:	002c1540 	call	2c154 <__mulsi3>
   203a8:	e0bfc915 	stw	r2,-220(fp)
		z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
   203ac:	e0ffca17 	ldw	r3,-216(fp)
   203b0:	e0bfc517 	ldw	r2,-236(fp)
   203b4:	1887c83a 	sub	r3,r3,r2
   203b8:	e0bfc617 	ldw	r2,-232(fp)
   203bc:	1004933a 	slli	r2,r2,12
   203c0:	1885c83a 	sub	r2,r3,r2
   203c4:	e0bfce15 	stw	r2,-200(fp)

		tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
   203c8:	e0ffc817 	ldw	r3,-224(fp)
   203cc:	e0bfc617 	ldw	r2,-232(fp)
   203d0:	1885c83a 	sub	r2,r3,r2
   203d4:	1006937a 	slli	r3,r2,13
   203d8:	e0bfca17 	ldw	r2,-216(fp)
   203dc:	1885c83a 	sub	r2,r3,r2
   203e0:	e0bfc515 	stw	r2,-236(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
   203e4:	e13fc817 	ldw	r4,-224(fp)
   203e8:	014a14c4 	movi	r5,10323
   203ec:	002c1540 	call	2c154 <__mulsi3>
   203f0:	1007883a 	mov	r3,r2
   203f4:	e0bfc917 	ldw	r2,-220(fp)
   203f8:	1887c83a 	sub	r3,r3,r2
   203fc:	e0bfce17 	ldw	r2,-200(fp)
   20400:	1885c83a 	sub	r2,r3,r2
   20404:	e0bfcc15 	stw	r2,-208(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
   20408:	e13fc817 	ldw	r4,-224(fp)
   2040c:	01452304 	movi	r5,5260
   20410:	002c1540 	call	2c154 <__mulsi3>
   20414:	1007883a 	mov	r3,r2
   20418:	e0bfc917 	ldw	r2,-220(fp)
   2041c:	1887c83a 	sub	r3,r3,r2
   20420:	e0bfce17 	ldw	r2,-200(fp)
   20424:	1885883a 	add	r2,r3,r2
   20428:	e0bfc615 	stw	r2,-232(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   2042c:	e0ffd017 	ldw	r3,-192(fp)
   20430:	e0bfcb17 	ldw	r2,-212(fp)
   20434:	1885883a 	add	r2,r3,r2
   20438:	1005d4ba 	srai	r2,r2,18
   2043c:	1080ffcc 	andi	r2,r2,1023
   20440:	e0ffc417 	ldw	r3,-240(fp)
   20444:	1885883a 	add	r2,r3,r2
   20448:	10c00003 	ldbu	r3,0(r2)
   2044c:	e0bfcd17 	ldw	r2,-204(fp)
   20450:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   20454:	e0bfcd17 	ldw	r2,-204(fp)
   20458:	10800244 	addi	r2,r2,9
   2045c:	e13fd017 	ldw	r4,-192(fp)
   20460:	e0ffcb17 	ldw	r3,-212(fp)
   20464:	20c7c83a 	sub	r3,r4,r3
   20468:	1807d4ba 	srai	r3,r3,18
   2046c:	18c0ffcc 	andi	r3,r3,1023
   20470:	e13fc417 	ldw	r4,-240(fp)
   20474:	20c7883a 	add	r3,r4,r3
   20478:	18c00003 	ldbu	r3,0(r3)
   2047c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   20480:	e0bfcd17 	ldw	r2,-204(fp)
   20484:	10800044 	addi	r2,r2,1
   20488:	e13fd217 	ldw	r4,-184(fp)
   2048c:	e0ffcc17 	ldw	r3,-208(fp)
   20490:	20c7883a 	add	r3,r4,r3
   20494:	1807d4ba 	srai	r3,r3,18
   20498:	18c0ffcc 	andi	r3,r3,1023
   2049c:	e13fc417 	ldw	r4,-240(fp)
   204a0:	20c7883a 	add	r3,r4,r3
   204a4:	18c00003 	ldbu	r3,0(r3)
   204a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   204ac:	e0bfcd17 	ldw	r2,-204(fp)
   204b0:	10800204 	addi	r2,r2,8
   204b4:	e13fd217 	ldw	r4,-184(fp)
   204b8:	e0ffcc17 	ldw	r3,-208(fp)
   204bc:	20c7c83a 	sub	r3,r4,r3
   204c0:	1807d4ba 	srai	r3,r3,18
   204c4:	18c0ffcc 	andi	r3,r3,1023
   204c8:	e13fc417 	ldw	r4,-240(fp)
   204cc:	20c7883a 	add	r3,r4,r3
   204d0:	18c00003 	ldbu	r3,0(r3)
   204d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   204d8:	e0bfcd17 	ldw	r2,-204(fp)
   204dc:	10800084 	addi	r2,r2,2
   204e0:	e13fcf17 	ldw	r4,-196(fp)
   204e4:	e0ffc517 	ldw	r3,-236(fp)
   204e8:	20c7883a 	add	r3,r4,r3
   204ec:	1807d4ba 	srai	r3,r3,18
   204f0:	18c0ffcc 	andi	r3,r3,1023
   204f4:	e13fc417 	ldw	r4,-240(fp)
   204f8:	20c7883a 	add	r3,r4,r3
   204fc:	18c00003 	ldbu	r3,0(r3)
   20500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   20504:	e0bfcd17 	ldw	r2,-204(fp)
   20508:	108001c4 	addi	r2,r2,7
   2050c:	e13fcf17 	ldw	r4,-196(fp)
   20510:	e0ffc517 	ldw	r3,-236(fp)
   20514:	20c7c83a 	sub	r3,r4,r3
   20518:	1807d4ba 	srai	r3,r3,18
   2051c:	18c0ffcc 	andi	r3,r3,1023
   20520:	e13fc417 	ldw	r4,-240(fp)
   20524:	20c7883a 	add	r3,r4,r3
   20528:	18c00003 	ldbu	r3,0(r3)
   2052c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
   20530:	e0bfcd17 	ldw	r2,-204(fp)
   20534:	108000c4 	addi	r2,r2,3
   20538:	e13fd317 	ldw	r4,-180(fp)
   2053c:	e0ffc617 	ldw	r3,-232(fp)
   20540:	20c7883a 	add	r3,r4,r3
   20544:	1807d4ba 	srai	r3,r3,18
   20548:	18c0ffcc 	andi	r3,r3,1023
   2054c:	e13fc417 	ldw	r4,-240(fp)
   20550:	20c7883a 	add	r3,r4,r3
   20554:	18c00003 	ldbu	r3,0(r3)
   20558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
   2055c:	e0bfcd17 	ldw	r2,-204(fp)
   20560:	10800184 	addi	r2,r2,6
   20564:	e13fd317 	ldw	r4,-180(fp)
   20568:	e0ffc617 	ldw	r3,-232(fp)
   2056c:	20c7c83a 	sub	r3,r4,r3
   20570:	1807d4ba 	srai	r3,r3,18
   20574:	18c0ffcc 	andi	r3,r3,1023
   20578:	e13fc417 	ldw	r4,-240(fp)
   2057c:	20c7883a 	add	r3,r4,r3
   20580:	18c00003 	ldbu	r3,0(r3)
   20584:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
   20588:	e0bfcd17 	ldw	r2,-204(fp)
   2058c:	10800104 	addi	r2,r2,4
   20590:	e13fd117 	ldw	r4,-188(fp)
   20594:	e0ffc717 	ldw	r3,-228(fp)
   20598:	20c7883a 	add	r3,r4,r3
   2059c:	1807d4ba 	srai	r3,r3,18
   205a0:	18c0ffcc 	andi	r3,r3,1023
   205a4:	e13fc417 	ldw	r4,-240(fp)
   205a8:	20c7883a 	add	r3,r4,r3
   205ac:	18c00003 	ldbu	r3,0(r3)
   205b0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
   205b4:	e0bfcd17 	ldw	r2,-204(fp)
   205b8:	10800144 	addi	r2,r2,5
   205bc:	e13fd117 	ldw	r4,-188(fp)
   205c0:	e0ffc717 	ldw	r3,-228(fp)
   205c4:	20c7c83a 	sub	r3,r4,r3
   205c8:	1807d4ba 	srai	r3,r3,18
   205cc:	18c0ffcc 	andi	r3,r3,1023
   205d0:	e13fc417 	ldw	r4,-240(fp)
   205d4:	20c7883a 	add	r3,r4,r3
   205d8:	18c00003 	ldbu	r3,0(r3)
   205dc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
   205e0:	e0bfc217 	ldw	r2,-248(fp)
   205e4:	10800804 	addi	r2,r2,32
   205e8:	e0bfc215 	stw	r2,-248(fp)

	/* Pass 2: process 5 rows from work array, store into output array.
	* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++) {
   205ec:	e0bfc317 	ldw	r2,-244(fp)
   205f0:	10800044 	addi	r2,r2,1
   205f4:	e0bfc315 	stw	r2,-244(fp)
   205f8:	e0bfc317 	ldw	r2,-244(fp)
   205fc:	10800150 	cmplti	r2,r2,5
   20600:	103ed51e 	bne	r2,zero,20158 <jpeg_idct_10x5+0x308>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
   20604:	e037883a 	mov	sp,fp
   20608:	dfc00117 	ldw	ra,4(sp)
   2060c:	df000017 	ldw	fp,0(sp)
   20610:	dec00204 	addi	sp,sp,8
   20614:	f800283a 	ret

00020618 <jpeg_idct_8x4>:

GLOBAL(void)
	jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   20618:	deffc904 	addi	sp,sp,-220
   2061c:	dfc03615 	stw	ra,216(sp)
   20620:	df003515 	stw	fp,212(sp)
   20624:	df003504 	addi	fp,sp,212
   20628:	e13ffc15 	stw	r4,-16(fp)
   2062c:	e17ffd15 	stw	r5,-12(fp)
   20630:	e1bffe15 	stw	r6,-8(fp)
   20634:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   20638:	e0bffc17 	ldw	r2,-16(fp)
   2063c:	10804917 	ldw	r2,292(r2)
   20640:	10802004 	addi	r2,r2,128
   20644:	e0bfcf15 	stw	r2,-196(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
		*/
		inptr = coef_block;
   20648:	e0bffe17 	ldw	r2,-8(fp)
   2064c:	e0bfcb15 	stw	r2,-212(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   20650:	e0bffd17 	ldw	r2,-12(fp)
   20654:	10801517 	ldw	r2,84(r2)
   20658:	e0bfcc15 	stw	r2,-208(fp)
	wsptr = workspace;
   2065c:	e0bfdc04 	addi	r2,fp,-144
   20660:	e0bfcd15 	stw	r2,-204(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   20664:	e03fce15 	stw	zero,-200(fp)
   20668:	00007b06 	br	20858 <jpeg_idct_8x4+0x240>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   2066c:	e0bfcb17 	ldw	r2,-212(fp)
   20670:	1080000b 	ldhu	r2,0(r2)
   20674:	10ffffcc 	andi	r3,r2,65535
   20678:	18e0001c 	xori	r3,r3,32768
   2067c:	18e00004 	addi	r3,r3,-32768
   20680:	e0bfcc17 	ldw	r2,-208(fp)
   20684:	10800017 	ldw	r2,0(r2)
   20688:	1809883a 	mov	r4,r3
   2068c:	100b883a 	mov	r5,r2
   20690:	002c1540 	call	2c154 <__mulsi3>
   20694:	e0bfd015 	stw	r2,-192(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   20698:	e0bfcb17 	ldw	r2,-212(fp)
   2069c:	10800804 	addi	r2,r2,32
   206a0:	1080000b 	ldhu	r2,0(r2)
   206a4:	10ffffcc 	andi	r3,r2,65535
   206a8:	18e0001c 	xori	r3,r3,32768
   206ac:	18e00004 	addi	r3,r3,-32768
   206b0:	e0bfcc17 	ldw	r2,-208(fp)
   206b4:	10801004 	addi	r2,r2,64
   206b8:	10800017 	ldw	r2,0(r2)
   206bc:	1809883a 	mov	r4,r3
   206c0:	100b883a 	mov	r5,r2
   206c4:	002c1540 	call	2c154 <__mulsi3>
   206c8:	e0bfd115 	stw	r2,-188(fp)

		tmp10 = (tmp0 + tmp2) << PASS1_BITS;
   206cc:	e0ffd017 	ldw	r3,-192(fp)
   206d0:	e0bfd117 	ldw	r2,-188(fp)
   206d4:	1885883a 	add	r2,r3,r2
   206d8:	1085883a 	add	r2,r2,r2
   206dc:	1085883a 	add	r2,r2,r2
   206e0:	e0bfd215 	stw	r2,-184(fp)
		tmp12 = (tmp0 - tmp2) << PASS1_BITS;
   206e4:	e0ffd017 	ldw	r3,-192(fp)
   206e8:	e0bfd117 	ldw	r2,-188(fp)
   206ec:	1885c83a 	sub	r2,r3,r2
   206f0:	1085883a 	add	r2,r2,r2
   206f4:	1085883a 	add	r2,r2,r2
   206f8:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   206fc:	e0bfcb17 	ldw	r2,-212(fp)
   20700:	10800404 	addi	r2,r2,16
   20704:	1080000b 	ldhu	r2,0(r2)
   20708:	10ffffcc 	andi	r3,r2,65535
   2070c:	18e0001c 	xori	r3,r3,32768
   20710:	18e00004 	addi	r3,r3,-32768
   20714:	e0bfcc17 	ldw	r2,-208(fp)
   20718:	10800804 	addi	r2,r2,32
   2071c:	10800017 	ldw	r2,0(r2)
   20720:	1809883a 	mov	r4,r3
   20724:	100b883a 	mov	r5,r2
   20728:	002c1540 	call	2c154 <__mulsi3>
   2072c:	e0bfd415 	stw	r2,-176(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   20730:	e0bfcb17 	ldw	r2,-212(fp)
   20734:	10800c04 	addi	r2,r2,48
   20738:	1080000b 	ldhu	r2,0(r2)
   2073c:	10ffffcc 	andi	r3,r2,65535
   20740:	18e0001c 	xori	r3,r3,32768
   20744:	18e00004 	addi	r3,r3,-32768
   20748:	e0bfcc17 	ldw	r2,-208(fp)
   2074c:	10801804 	addi	r2,r2,96
   20750:	10800017 	ldw	r2,0(r2)
   20754:	1809883a 	mov	r4,r3
   20758:	100b883a 	mov	r5,r2
   2075c:	002c1540 	call	2c154 <__mulsi3>
   20760:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
   20764:	e0ffd417 	ldw	r3,-176(fp)
   20768:	e0bfd517 	ldw	r2,-172(fp)
   2076c:	1885883a 	add	r2,r3,r2
   20770:	1009883a 	mov	r4,r2
   20774:	01445444 	movi	r5,4433
   20778:	002c1540 	call	2c154 <__mulsi3>
   2077c:	e0bfd615 	stw	r2,-168(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   20780:	e0bfd617 	ldw	r2,-168(fp)
   20784:	10810004 	addi	r2,r2,1024
   20788:	e0bfd615 	stw	r2,-168(fp)
		tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
   2078c:	e13fd417 	ldw	r4,-176(fp)
   20790:	01461f84 	movi	r5,6270
   20794:	002c1540 	call	2c154 <__mulsi3>
   20798:	1007883a 	mov	r3,r2
   2079c:	e0bfd617 	ldw	r2,-168(fp)
   207a0:	1885883a 	add	r2,r3,r2
   207a4:	1005d2fa 	srai	r2,r2,11
   207a8:	e0bfd015 	stw	r2,-192(fp)
			CONST_BITS-PASS1_BITS);
		tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
   207ac:	e13fd517 	ldw	r4,-172(fp)
   207b0:	017137c4 	movi	r5,-15137
   207b4:	002c1540 	call	2c154 <__mulsi3>
   207b8:	1007883a 	mov	r3,r2
   207bc:	e0bfd617 	ldw	r2,-168(fp)
   207c0:	1885883a 	add	r2,r3,r2
   207c4:	1005d2fa 	srai	r2,r2,11
   207c8:	e0bfd115 	stw	r2,-188(fp)
			CONST_BITS-PASS1_BITS);

		/* Final output stage */

		wsptr[8*0] = (int) (tmp10 + tmp0);
   207cc:	e0ffd217 	ldw	r3,-184(fp)
   207d0:	e0bfd017 	ldw	r2,-192(fp)
   207d4:	1887883a 	add	r3,r3,r2
   207d8:	e0bfcd17 	ldw	r2,-204(fp)
   207dc:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) (tmp10 - tmp0);
   207e0:	e0bfcd17 	ldw	r2,-204(fp)
   207e4:	10801804 	addi	r2,r2,96
   207e8:	e13fd217 	ldw	r4,-184(fp)
   207ec:	e0ffd017 	ldw	r3,-192(fp)
   207f0:	20c7c83a 	sub	r3,r4,r3
   207f4:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) (tmp12 + tmp2);
   207f8:	e0bfcd17 	ldw	r2,-204(fp)
   207fc:	10800804 	addi	r2,r2,32
   20800:	e13fd317 	ldw	r4,-180(fp)
   20804:	e0ffd117 	ldw	r3,-188(fp)
   20808:	20c7883a 	add	r3,r4,r3
   2080c:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) (tmp12 - tmp2);
   20810:	e0bfcd17 	ldw	r2,-204(fp)
   20814:	10801004 	addi	r2,r2,64
   20818:	e13fd317 	ldw	r4,-180(fp)
   2081c:	e0ffd117 	ldw	r3,-188(fp)
   20820:	20c7c83a 	sub	r3,r4,r3
   20824:	10c00015 	stw	r3,0(r2)
		* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   20828:	e0bfce17 	ldw	r2,-200(fp)
   2082c:	10800044 	addi	r2,r2,1
   20830:	e0bfce15 	stw	r2,-200(fp)
   20834:	e0bfcb17 	ldw	r2,-212(fp)
   20838:	10800084 	addi	r2,r2,2
   2083c:	e0bfcb15 	stw	r2,-212(fp)
   20840:	e0bfcc17 	ldw	r2,-208(fp)
   20844:	10800104 	addi	r2,r2,4
   20848:	e0bfcc15 	stw	r2,-208(fp)
   2084c:	e0bfcd17 	ldw	r2,-204(fp)
   20850:	10800104 	addi	r2,r2,4
   20854:	e0bfcd15 	stw	r2,-204(fp)
   20858:	e0bfce17 	ldw	r2,-200(fp)
   2085c:	10800210 	cmplti	r2,r2,8
   20860:	103f821e 	bne	r2,zero,2066c <jpeg_idct_8x4+0x54>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
   20864:	e0bfdc04 	addi	r2,fp,-144
   20868:	e0bfcd15 	stw	r2,-204(fp)
	for (ctr = 0; ctr < 4; ctr++) {
   2086c:	e03fce15 	stw	zero,-200(fp)
   20870:	00010a06 	br	20c9c <jpeg_idct_8x4+0x684>
		outptr = output_buf[ctr] + output_col;
   20874:	e0bfce17 	ldw	r2,-200(fp)
   20878:	1085883a 	add	r2,r2,r2
   2087c:	1085883a 	add	r2,r2,r2
   20880:	e0ffff17 	ldw	r3,-4(fp)
   20884:	1885883a 	add	r2,r3,r2
   20888:	10c00017 	ldw	r3,0(r2)
   2088c:	e0800217 	ldw	r2,8(fp)
   20890:	1885883a 	add	r2,r3,r2
   20894:	e0bfd715 	stw	r2,-164(fp)

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
   20898:	e0bfcd17 	ldw	r2,-204(fp)
   2089c:	10800204 	addi	r2,r2,8
   208a0:	10800017 	ldw	r2,0(r2)
   208a4:	e0bfd415 	stw	r2,-176(fp)
		z3 = (INT32) wsptr[6];
   208a8:	e0bfcd17 	ldw	r2,-204(fp)
   208ac:	10800604 	addi	r2,r2,24
   208b0:	10800017 	ldw	r2,0(r2)
   208b4:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   208b8:	e0ffd417 	ldw	r3,-176(fp)
   208bc:	e0bfd517 	ldw	r2,-172(fp)
   208c0:	1885883a 	add	r2,r3,r2
   208c4:	1009883a 	mov	r4,r2
   208c8:	01445444 	movi	r5,4433
   208cc:	002c1540 	call	2c154 <__mulsi3>
   208d0:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   208d4:	e13fd417 	ldw	r4,-176(fp)
   208d8:	01461f84 	movi	r5,6270
   208dc:	002c1540 	call	2c154 <__mulsi3>
   208e0:	1007883a 	mov	r3,r2
   208e4:	e0bfd617 	ldw	r2,-168(fp)
   208e8:	1885883a 	add	r2,r3,r2
   208ec:	e0bfd115 	stw	r2,-188(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   208f0:	e13fd517 	ldw	r4,-172(fp)
   208f4:	017137c4 	movi	r5,-15137
   208f8:	002c1540 	call	2c154 <__mulsi3>
   208fc:	1007883a 	mov	r3,r2
   20900:	e0bfd617 	ldw	r2,-168(fp)
   20904:	1885883a 	add	r2,r3,r2
   20908:	e0bfd815 	stw	r2,-160(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   2090c:	e0bfcd17 	ldw	r2,-204(fp)
   20910:	10800017 	ldw	r2,0(r2)
   20914:	10800404 	addi	r2,r2,16
   20918:	e0bfd415 	stw	r2,-176(fp)
		z3 = (INT32) wsptr[4];
   2091c:	e0bfcd17 	ldw	r2,-204(fp)
   20920:	10800404 	addi	r2,r2,16
   20924:	10800017 	ldw	r2,0(r2)
   20928:	e0bfd515 	stw	r2,-172(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
   2092c:	e0ffd417 	ldw	r3,-176(fp)
   20930:	e0bfd517 	ldw	r2,-172(fp)
   20934:	1885883a 	add	r2,r3,r2
   20938:	1004937a 	slli	r2,r2,13
   2093c:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
   20940:	e0ffd417 	ldw	r3,-176(fp)
   20944:	e0bfd517 	ldw	r2,-172(fp)
   20948:	1885c83a 	sub	r2,r3,r2
   2094c:	1004937a 	slli	r2,r2,13
   20950:	e0bfd915 	stw	r2,-156(fp)

		tmp10 = tmp0 + tmp2;
   20954:	e0ffd017 	ldw	r3,-192(fp)
   20958:	e0bfd117 	ldw	r2,-188(fp)
   2095c:	1885883a 	add	r2,r3,r2
   20960:	e0bfd215 	stw	r2,-184(fp)
		tmp13 = tmp0 - tmp2;
   20964:	e0ffd017 	ldw	r3,-192(fp)
   20968:	e0bfd117 	ldw	r2,-188(fp)
   2096c:	1885c83a 	sub	r2,r3,r2
   20970:	e0bfda15 	stw	r2,-152(fp)
		tmp11 = tmp1 + tmp3;
   20974:	e0ffd917 	ldw	r3,-156(fp)
   20978:	e0bfd817 	ldw	r2,-160(fp)
   2097c:	1885883a 	add	r2,r3,r2
   20980:	e0bfdb15 	stw	r2,-148(fp)
		tmp12 = tmp1 - tmp3;
   20984:	e0ffd917 	ldw	r3,-156(fp)
   20988:	e0bfd817 	ldw	r2,-160(fp)
   2098c:	1885c83a 	sub	r2,r3,r2
   20990:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
   20994:	e0bfcd17 	ldw	r2,-204(fp)
   20998:	10800704 	addi	r2,r2,28
   2099c:	10800017 	ldw	r2,0(r2)
   209a0:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = (INT32) wsptr[5];
   209a4:	e0bfcd17 	ldw	r2,-204(fp)
   209a8:	10800504 	addi	r2,r2,20
   209ac:	10800017 	ldw	r2,0(r2)
   209b0:	e0bfd915 	stw	r2,-156(fp)
		tmp2 = (INT32) wsptr[3];
   209b4:	e0bfcd17 	ldw	r2,-204(fp)
   209b8:	10800304 	addi	r2,r2,12
   209bc:	10800017 	ldw	r2,0(r2)
   209c0:	e0bfd115 	stw	r2,-188(fp)
		tmp3 = (INT32) wsptr[1];
   209c4:	e0bfcd17 	ldw	r2,-204(fp)
   209c8:	10800104 	addi	r2,r2,4
   209cc:	10800017 	ldw	r2,0(r2)
   209d0:	e0bfd815 	stw	r2,-160(fp)

		z2 = tmp0 + tmp2;
   209d4:	e0ffd017 	ldw	r3,-192(fp)
   209d8:	e0bfd117 	ldw	r2,-188(fp)
   209dc:	1885883a 	add	r2,r3,r2
   209e0:	e0bfd415 	stw	r2,-176(fp)
		z3 = tmp1 + tmp3;
   209e4:	e0ffd917 	ldw	r3,-156(fp)
   209e8:	e0bfd817 	ldw	r2,-160(fp)
   209ec:	1885883a 	add	r2,r3,r2
   209f0:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   209f4:	e0ffd417 	ldw	r3,-176(fp)
   209f8:	e0bfd517 	ldw	r2,-172(fp)
   209fc:	1885883a 	add	r2,r3,r2
   20a00:	1009883a 	mov	r4,r2
   20a04:	01496844 	movi	r5,9633
   20a08:	002c1540 	call	2c154 <__mulsi3>
   20a0c:	e0bfd615 	stw	r2,-168(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   20a10:	e13fd417 	ldw	r4,-176(fp)
   20a14:	01704ec4 	movi	r5,-16069
   20a18:	002c1540 	call	2c154 <__mulsi3>
   20a1c:	e0bfd415 	stw	r2,-176(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   20a20:	e13fd517 	ldw	r4,-172(fp)
   20a24:	017ce104 	movi	r5,-3196
   20a28:	002c1540 	call	2c154 <__mulsi3>
   20a2c:	e0bfd515 	stw	r2,-172(fp)
		z2 += z1;
   20a30:	e0ffd417 	ldw	r3,-176(fp)
   20a34:	e0bfd617 	ldw	r2,-168(fp)
   20a38:	1885883a 	add	r2,r3,r2
   20a3c:	e0bfd415 	stw	r2,-176(fp)
		z3 += z1;
   20a40:	e0ffd517 	ldw	r3,-172(fp)
   20a44:	e0bfd617 	ldw	r2,-168(fp)
   20a48:	1885883a 	add	r2,r3,r2
   20a4c:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   20a50:	e0ffd017 	ldw	r3,-192(fp)
   20a54:	e0bfd817 	ldw	r2,-160(fp)
   20a58:	1885883a 	add	r2,r3,r2
   20a5c:	1009883a 	mov	r4,r2
   20a60:	0178ccc4 	movi	r5,-7373
   20a64:	002c1540 	call	2c154 <__mulsi3>
   20a68:	e0bfd615 	stw	r2,-168(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   20a6c:	e13fd017 	ldw	r4,-192(fp)
   20a70:	01426384 	movi	r5,2446
   20a74:	002c1540 	call	2c154 <__mulsi3>
   20a78:	e0bfd015 	stw	r2,-192(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   20a7c:	e13fd817 	ldw	r4,-160(fp)
   20a80:	014c02c4 	movi	r5,12299
   20a84:	002c1540 	call	2c154 <__mulsi3>
   20a88:	e0bfd815 	stw	r2,-160(fp)
		tmp0 += z1 + z2;
   20a8c:	e0ffd617 	ldw	r3,-168(fp)
   20a90:	e0bfd417 	ldw	r2,-176(fp)
   20a94:	1885883a 	add	r2,r3,r2
   20a98:	e0ffd017 	ldw	r3,-192(fp)
   20a9c:	1885883a 	add	r2,r3,r2
   20aa0:	e0bfd015 	stw	r2,-192(fp)
		tmp3 += z1 + z3;
   20aa4:	e0ffd617 	ldw	r3,-168(fp)
   20aa8:	e0bfd517 	ldw	r2,-172(fp)
   20aac:	1885883a 	add	r2,r3,r2
   20ab0:	e0ffd817 	ldw	r3,-160(fp)
   20ab4:	1885883a 	add	r2,r3,r2
   20ab8:	e0bfd815 	stw	r2,-160(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   20abc:	e0ffd917 	ldw	r3,-156(fp)
   20ac0:	e0bfd117 	ldw	r2,-188(fp)
   20ac4:	1885883a 	add	r2,r3,r2
   20ac8:	1009883a 	mov	r4,r2
   20acc:	016b7f44 	movi	r5,-20995
   20ad0:	002c1540 	call	2c154 <__mulsi3>
   20ad4:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   20ad8:	e13fd917 	ldw	r4,-156(fp)
   20adc:	01506cc4 	movi	r5,16819
   20ae0:	002c1540 	call	2c154 <__mulsi3>
   20ae4:	e0bfd915 	stw	r2,-156(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   20ae8:	e13fd117 	ldw	r4,-188(fp)
   20aec:	01589504 	movi	r5,25172
   20af0:	002c1540 	call	2c154 <__mulsi3>
   20af4:	e0bfd115 	stw	r2,-188(fp)
		tmp1 += z1 + z3;
   20af8:	e0ffd617 	ldw	r3,-168(fp)
   20afc:	e0bfd517 	ldw	r2,-172(fp)
   20b00:	1885883a 	add	r2,r3,r2
   20b04:	e0ffd917 	ldw	r3,-156(fp)
   20b08:	1885883a 	add	r2,r3,r2
   20b0c:	e0bfd915 	stw	r2,-156(fp)
		tmp2 += z1 + z2;
   20b10:	e0ffd617 	ldw	r3,-168(fp)
   20b14:	e0bfd417 	ldw	r2,-176(fp)
   20b18:	1885883a 	add	r2,r3,r2
   20b1c:	e0ffd117 	ldw	r3,-188(fp)
   20b20:	1885883a 	add	r2,r3,r2
   20b24:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
   20b28:	e0ffd217 	ldw	r3,-184(fp)
   20b2c:	e0bfd817 	ldw	r2,-160(fp)
   20b30:	1885883a 	add	r2,r3,r2
   20b34:	1005d4ba 	srai	r2,r2,18
   20b38:	1080ffcc 	andi	r2,r2,1023
   20b3c:	e0ffcf17 	ldw	r3,-196(fp)
   20b40:	1885883a 	add	r2,r3,r2
   20b44:	10c00003 	ldbu	r3,0(r2)
   20b48:	e0bfd717 	ldw	r2,-164(fp)
   20b4c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
   20b50:	e0bfd717 	ldw	r2,-164(fp)
   20b54:	108001c4 	addi	r2,r2,7
   20b58:	e13fd217 	ldw	r4,-184(fp)
   20b5c:	e0ffd817 	ldw	r3,-160(fp)
   20b60:	20c7c83a 	sub	r3,r4,r3
   20b64:	1807d4ba 	srai	r3,r3,18
   20b68:	18c0ffcc 	andi	r3,r3,1023
   20b6c:	e13fcf17 	ldw	r4,-196(fp)
   20b70:	20c7883a 	add	r3,r4,r3
   20b74:	18c00003 	ldbu	r3,0(r3)
   20b78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
   20b7c:	e0bfd717 	ldw	r2,-164(fp)
   20b80:	10800044 	addi	r2,r2,1
   20b84:	e13fdb17 	ldw	r4,-148(fp)
   20b88:	e0ffd117 	ldw	r3,-188(fp)
   20b8c:	20c7883a 	add	r3,r4,r3
   20b90:	1807d4ba 	srai	r3,r3,18
   20b94:	18c0ffcc 	andi	r3,r3,1023
   20b98:	e13fcf17 	ldw	r4,-196(fp)
   20b9c:	20c7883a 	add	r3,r4,r3
   20ba0:	18c00003 	ldbu	r3,0(r3)
   20ba4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
   20ba8:	e0bfd717 	ldw	r2,-164(fp)
   20bac:	10800184 	addi	r2,r2,6
   20bb0:	e13fdb17 	ldw	r4,-148(fp)
   20bb4:	e0ffd117 	ldw	r3,-188(fp)
   20bb8:	20c7c83a 	sub	r3,r4,r3
   20bbc:	1807d4ba 	srai	r3,r3,18
   20bc0:	18c0ffcc 	andi	r3,r3,1023
   20bc4:	e13fcf17 	ldw	r4,-196(fp)
   20bc8:	20c7883a 	add	r3,r4,r3
   20bcc:	18c00003 	ldbu	r3,0(r3)
   20bd0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
   20bd4:	e0bfd717 	ldw	r2,-164(fp)
   20bd8:	10800084 	addi	r2,r2,2
   20bdc:	e13fd317 	ldw	r4,-180(fp)
   20be0:	e0ffd917 	ldw	r3,-156(fp)
   20be4:	20c7883a 	add	r3,r4,r3
   20be8:	1807d4ba 	srai	r3,r3,18
   20bec:	18c0ffcc 	andi	r3,r3,1023
   20bf0:	e13fcf17 	ldw	r4,-196(fp)
   20bf4:	20c7883a 	add	r3,r4,r3
   20bf8:	18c00003 	ldbu	r3,0(r3)
   20bfc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
   20c00:	e0bfd717 	ldw	r2,-164(fp)
   20c04:	10800144 	addi	r2,r2,5
   20c08:	e13fd317 	ldw	r4,-180(fp)
   20c0c:	e0ffd917 	ldw	r3,-156(fp)
   20c10:	20c7c83a 	sub	r3,r4,r3
   20c14:	1807d4ba 	srai	r3,r3,18
   20c18:	18c0ffcc 	andi	r3,r3,1023
   20c1c:	e13fcf17 	ldw	r4,-196(fp)
   20c20:	20c7883a 	add	r3,r4,r3
   20c24:	18c00003 	ldbu	r3,0(r3)
   20c28:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
   20c2c:	e0bfd717 	ldw	r2,-164(fp)
   20c30:	108000c4 	addi	r2,r2,3
   20c34:	e13fda17 	ldw	r4,-152(fp)
   20c38:	e0ffd017 	ldw	r3,-192(fp)
   20c3c:	20c7883a 	add	r3,r4,r3
   20c40:	1807d4ba 	srai	r3,r3,18
   20c44:	18c0ffcc 	andi	r3,r3,1023
   20c48:	e13fcf17 	ldw	r4,-196(fp)
   20c4c:	20c7883a 	add	r3,r4,r3
   20c50:	18c00003 	ldbu	r3,0(r3)
   20c54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
   20c58:	e0bfd717 	ldw	r2,-164(fp)
   20c5c:	10800104 	addi	r2,r2,4
   20c60:	e13fda17 	ldw	r4,-152(fp)
   20c64:	e0ffd017 	ldw	r3,-192(fp)
   20c68:	20c7c83a 	sub	r3,r4,r3
   20c6c:	1807d4ba 	srai	r3,r3,18
   20c70:	18c0ffcc 	andi	r3,r3,1023
   20c74:	e13fcf17 	ldw	r4,-196(fp)
   20c78:	20c7883a 	add	r3,r4,r3
   20c7c:	18c00003 	ldbu	r3,0(r3)
   20c80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
   20c84:	e0bfcd17 	ldw	r2,-204(fp)
   20c88:	10800804 	addi	r2,r2,32
   20c8c:	e0bfcd15 	stw	r2,-204(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
   20c90:	e0bfce17 	ldw	r2,-200(fp)
   20c94:	10800044 	addi	r2,r2,1
   20c98:	e0bfce15 	stw	r2,-200(fp)
   20c9c:	e0bfce17 	ldw	r2,-200(fp)
   20ca0:	10800110 	cmplti	r2,r2,4
   20ca4:	103ef31e 	bne	r2,zero,20874 <jpeg_idct_8x4+0x25c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
   20ca8:	e037883a 	mov	sp,fp
   20cac:	dfc00117 	ldw	ra,4(sp)
   20cb0:	df000017 	ldw	fp,0(sp)
   20cb4:	dec00204 	addi	sp,sp,8
   20cb8:	f800283a 	ret

00020cbc <jpeg_idct_6x3>:

GLOBAL(void)
	jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   20cbc:	deffd904 	addi	sp,sp,-156
   20cc0:	dfc02615 	stw	ra,152(sp)
   20cc4:	df002515 	stw	fp,148(sp)
   20cc8:	df002504 	addi	fp,sp,148
   20ccc:	e13ffc15 	stw	r4,-16(fp)
   20cd0:	e17ffd15 	stw	r5,-12(fp)
   20cd4:	e1bffe15 	stw	r6,-8(fp)
   20cd8:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   20cdc:	e0bffc17 	ldw	r2,-16(fp)
   20ce0:	10804917 	ldw	r2,292(r2)
   20ce4:	10802004 	addi	r2,r2,128
   20ce8:	e0bfdf15 	stw	r2,-132(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
		*/
		inptr = coef_block;
   20cec:	e0bffe17 	ldw	r2,-8(fp)
   20cf0:	e0bfdb15 	stw	r2,-148(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   20cf4:	e0bffd17 	ldw	r2,-12(fp)
   20cf8:	10801517 	ldw	r2,84(r2)
   20cfc:	e0bfdc15 	stw	r2,-144(fp)
	wsptr = workspace;
   20d00:	e0bfea04 	addi	r2,fp,-88
   20d04:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   20d08:	e03fde15 	stw	zero,-136(fp)
   20d0c:	00005b06 	br	20e7c <jpeg_idct_6x3+0x1c0>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   20d10:	e0bfdb17 	ldw	r2,-148(fp)
   20d14:	1080000b 	ldhu	r2,0(r2)
   20d18:	10ffffcc 	andi	r3,r2,65535
   20d1c:	18e0001c 	xori	r3,r3,32768
   20d20:	18e00004 	addi	r3,r3,-32768
   20d24:	e0bfdc17 	ldw	r2,-144(fp)
   20d28:	10800017 	ldw	r2,0(r2)
   20d2c:	1809883a 	mov	r4,r3
   20d30:	100b883a 	mov	r5,r2
   20d34:	002c1540 	call	2c154 <__mulsi3>
   20d38:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
   20d3c:	e0bfe017 	ldw	r2,-128(fp)
   20d40:	1004937a 	slli	r2,r2,13
   20d44:	e0bfe015 	stw	r2,-128(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   20d48:	e0bfe017 	ldw	r2,-128(fp)
   20d4c:	10810004 	addi	r2,r2,1024
   20d50:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   20d54:	e0bfdb17 	ldw	r2,-148(fp)
   20d58:	10800804 	addi	r2,r2,32
   20d5c:	1080000b 	ldhu	r2,0(r2)
   20d60:	10ffffcc 	andi	r3,r2,65535
   20d64:	18e0001c 	xori	r3,r3,32768
   20d68:	18e00004 	addi	r3,r3,-32768
   20d6c:	e0bfdc17 	ldw	r2,-144(fp)
   20d70:	10801004 	addi	r2,r2,64
   20d74:	10800017 	ldw	r2,0(r2)
   20d78:	1809883a 	mov	r4,r3
   20d7c:	100b883a 	mov	r5,r2
   20d80:	002c1540 	call	2c154 <__mulsi3>
   20d84:	e0bfe115 	stw	r2,-124(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
   20d88:	e13fe117 	ldw	r4,-124(fp)
   20d8c:	0145a844 	movi	r5,5793
   20d90:	002c1540 	call	2c154 <__mulsi3>
   20d94:	e0bfe215 	stw	r2,-120(fp)
		tmp10 = tmp0 + tmp12;
   20d98:	e0ffe017 	ldw	r3,-128(fp)
   20d9c:	e0bfe217 	ldw	r2,-120(fp)
   20da0:	1885883a 	add	r2,r3,r2
   20da4:	e0bfe315 	stw	r2,-116(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
   20da8:	e0ffe017 	ldw	r3,-128(fp)
   20dac:	e0bfe217 	ldw	r2,-120(fp)
   20db0:	1887c83a 	sub	r3,r3,r2
   20db4:	e0bfe217 	ldw	r2,-120(fp)
   20db8:	1885c83a 	sub	r2,r3,r2
   20dbc:	e0bfe115 	stw	r2,-124(fp)

		/* Odd part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   20dc0:	e0bfdb17 	ldw	r2,-148(fp)
   20dc4:	10800404 	addi	r2,r2,16
   20dc8:	1080000b 	ldhu	r2,0(r2)
   20dcc:	10ffffcc 	andi	r3,r2,65535
   20dd0:	18e0001c 	xori	r3,r3,32768
   20dd4:	18e00004 	addi	r3,r3,-32768
   20dd8:	e0bfdc17 	ldw	r2,-144(fp)
   20ddc:	10800804 	addi	r2,r2,32
   20de0:	10800017 	ldw	r2,0(r2)
   20de4:	1809883a 	mov	r4,r3
   20de8:	100b883a 	mov	r5,r2
   20dec:	002c1540 	call	2c154 <__mulsi3>
   20df0:	e0bfe215 	stw	r2,-120(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
   20df4:	e13fe217 	ldw	r4,-120(fp)
   20df8:	0149cc44 	movi	r5,10033
   20dfc:	002c1540 	call	2c154 <__mulsi3>
   20e00:	e0bfe015 	stw	r2,-128(fp)

		/* Final output stage */

		wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   20e04:	e0ffe317 	ldw	r3,-116(fp)
   20e08:	e0bfe017 	ldw	r2,-128(fp)
   20e0c:	1885883a 	add	r2,r3,r2
   20e10:	1007d2fa 	srai	r3,r2,11
   20e14:	e0bfdd17 	ldw	r2,-140(fp)
   20e18:	10c00015 	stw	r3,0(r2)
		wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   20e1c:	e0bfdd17 	ldw	r2,-140(fp)
   20e20:	10800c04 	addi	r2,r2,48
   20e24:	e13fe317 	ldw	r4,-116(fp)
   20e28:	e0ffe017 	ldw	r3,-128(fp)
   20e2c:	20c7c83a 	sub	r3,r4,r3
   20e30:	1807d2fa 	srai	r3,r3,11
   20e34:	10c00015 	stw	r3,0(r2)
		wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
   20e38:	e0bfdd17 	ldw	r2,-140(fp)
   20e3c:	10800604 	addi	r2,r2,24
   20e40:	e0ffe117 	ldw	r3,-124(fp)
   20e44:	1807d2fa 	srai	r3,r3,11
   20e48:	10c00015 	stw	r3,0(r2)
		* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   20e4c:	e0bfde17 	ldw	r2,-136(fp)
   20e50:	10800044 	addi	r2,r2,1
   20e54:	e0bfde15 	stw	r2,-136(fp)
   20e58:	e0bfdb17 	ldw	r2,-148(fp)
   20e5c:	10800084 	addi	r2,r2,2
   20e60:	e0bfdb15 	stw	r2,-148(fp)
   20e64:	e0bfdc17 	ldw	r2,-144(fp)
   20e68:	10800104 	addi	r2,r2,4
   20e6c:	e0bfdc15 	stw	r2,-144(fp)
   20e70:	e0bfdd17 	ldw	r2,-140(fp)
   20e74:	10800104 	addi	r2,r2,4
   20e78:	e0bfdd15 	stw	r2,-140(fp)
   20e7c:	e0bfde17 	ldw	r2,-136(fp)
   20e80:	10800190 	cmplti	r2,r2,6
   20e84:	103fa21e 	bne	r2,zero,20d10 <jpeg_idct_6x3+0x54>
	}

	/* Pass 2: process 3 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
   20e88:	e0bfea04 	addi	r2,fp,-88
   20e8c:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 3; ctr++) {
   20e90:	e03fde15 	stw	zero,-136(fp)
   20e94:	0000a106 	br	2111c <jpeg_idct_6x3+0x460>
		outptr = output_buf[ctr] + output_col;
   20e98:	e0bfde17 	ldw	r2,-136(fp)
   20e9c:	1085883a 	add	r2,r2,r2
   20ea0:	1085883a 	add	r2,r2,r2
   20ea4:	e0ffff17 	ldw	r3,-4(fp)
   20ea8:	1885883a 	add	r2,r3,r2
   20eac:	10c00017 	ldw	r3,0(r2)
   20eb0:	e0800217 	ldw	r2,8(fp)
   20eb4:	1885883a 	add	r2,r3,r2
   20eb8:	e0bfe415 	stw	r2,-112(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   20ebc:	e0bfdd17 	ldw	r2,-140(fp)
   20ec0:	10800017 	ldw	r2,0(r2)
   20ec4:	10800404 	addi	r2,r2,16
   20ec8:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
   20ecc:	e0bfe017 	ldw	r2,-128(fp)
   20ed0:	1004937a 	slli	r2,r2,13
   20ed4:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = (INT32) wsptr[4];
   20ed8:	e0bfdd17 	ldw	r2,-140(fp)
   20edc:	10800404 	addi	r2,r2,16
   20ee0:	10800017 	ldw	r2,0(r2)
   20ee4:	e0bfe115 	stw	r2,-124(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
   20ee8:	e13fe117 	ldw	r4,-124(fp)
   20eec:	0145a844 	movi	r5,5793
   20ef0:	002c1540 	call	2c154 <__mulsi3>
   20ef4:	e0bfe315 	stw	r2,-116(fp)
		tmp1 = tmp0 + tmp10;
   20ef8:	e0ffe017 	ldw	r3,-128(fp)
   20efc:	e0bfe317 	ldw	r2,-116(fp)
   20f00:	1885883a 	add	r2,r3,r2
   20f04:	e0bfe515 	stw	r2,-108(fp)
		tmp11 = tmp0 - tmp10 - tmp10;
   20f08:	e0ffe017 	ldw	r3,-128(fp)
   20f0c:	e0bfe317 	ldw	r2,-116(fp)
   20f10:	1887c83a 	sub	r3,r3,r2
   20f14:	e0bfe317 	ldw	r2,-116(fp)
   20f18:	1885c83a 	sub	r2,r3,r2
   20f1c:	e0bfe615 	stw	r2,-104(fp)
		tmp10 = (INT32) wsptr[2];
   20f20:	e0bfdd17 	ldw	r2,-140(fp)
   20f24:	10800204 	addi	r2,r2,8
   20f28:	10800017 	ldw	r2,0(r2)
   20f2c:	e0bfe315 	stw	r2,-116(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
   20f30:	e13fe317 	ldw	r4,-116(fp)
   20f34:	0149cc44 	movi	r5,10033
   20f38:	002c1540 	call	2c154 <__mulsi3>
   20f3c:	e0bfe015 	stw	r2,-128(fp)
		tmp10 = tmp1 + tmp0;
   20f40:	e0ffe517 	ldw	r3,-108(fp)
   20f44:	e0bfe017 	ldw	r2,-128(fp)
   20f48:	1885883a 	add	r2,r3,r2
   20f4c:	e0bfe315 	stw	r2,-116(fp)
		tmp12 = tmp1 - tmp0;
   20f50:	e0ffe517 	ldw	r3,-108(fp)
   20f54:	e0bfe017 	ldw	r2,-128(fp)
   20f58:	1885c83a 	sub	r2,r3,r2
   20f5c:	e0bfe215 	stw	r2,-120(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   20f60:	e0bfdd17 	ldw	r2,-140(fp)
   20f64:	10800104 	addi	r2,r2,4
   20f68:	10800017 	ldw	r2,0(r2)
   20f6c:	e0bfe715 	stw	r2,-100(fp)
		z2 = (INT32) wsptr[3];
   20f70:	e0bfdd17 	ldw	r2,-140(fp)
   20f74:	10800304 	addi	r2,r2,12
   20f78:	10800017 	ldw	r2,0(r2)
   20f7c:	e0bfe815 	stw	r2,-96(fp)
		z3 = (INT32) wsptr[5];
   20f80:	e0bfdd17 	ldw	r2,-140(fp)
   20f84:	10800504 	addi	r2,r2,20
   20f88:	10800017 	ldw	r2,0(r2)
   20f8c:	e0bfe915 	stw	r2,-92(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   20f90:	e0ffe717 	ldw	r3,-100(fp)
   20f94:	e0bfe917 	ldw	r2,-92(fp)
   20f98:	1885883a 	add	r2,r3,r2
   20f9c:	1009883a 	mov	r4,r2
   20fa0:	0142ed84 	movi	r5,2998
   20fa4:	002c1540 	call	2c154 <__mulsi3>
   20fa8:	e0bfe515 	stw	r2,-108(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
   20fac:	e0ffe717 	ldw	r3,-100(fp)
   20fb0:	e0bfe817 	ldw	r2,-96(fp)
   20fb4:	1885883a 	add	r2,r3,r2
   20fb8:	1006937a 	slli	r3,r2,13
   20fbc:	e0bfe517 	ldw	r2,-108(fp)
   20fc0:	1885883a 	add	r2,r3,r2
   20fc4:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
   20fc8:	e0ffe917 	ldw	r3,-92(fp)
   20fcc:	e0bfe817 	ldw	r2,-96(fp)
   20fd0:	1885c83a 	sub	r2,r3,r2
   20fd4:	1006937a 	slli	r3,r2,13
   20fd8:	e0bfe517 	ldw	r2,-108(fp)
   20fdc:	1885883a 	add	r2,r3,r2
   20fe0:	e0bfe115 	stw	r2,-124(fp)
		tmp1 = (z1 - z2 - z3) << CONST_BITS;
   20fe4:	e0ffe717 	ldw	r3,-100(fp)
   20fe8:	e0bfe817 	ldw	r2,-96(fp)
   20fec:	1887c83a 	sub	r3,r3,r2
   20ff0:	e0bfe917 	ldw	r2,-92(fp)
   20ff4:	1885c83a 	sub	r2,r3,r2
   20ff8:	1004937a 	slli	r2,r2,13
   20ffc:	e0bfe515 	stw	r2,-108(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   21000:	e0ffe317 	ldw	r3,-116(fp)
   21004:	e0bfe017 	ldw	r2,-128(fp)
   21008:	1885883a 	add	r2,r3,r2
   2100c:	1005d4ba 	srai	r2,r2,18
   21010:	1080ffcc 	andi	r2,r2,1023
   21014:	e0ffdf17 	ldw	r3,-132(fp)
   21018:	1885883a 	add	r2,r3,r2
   2101c:	10c00003 	ldbu	r3,0(r2)
   21020:	e0bfe417 	ldw	r2,-112(fp)
   21024:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   21028:	e0bfe417 	ldw	r2,-112(fp)
   2102c:	10800144 	addi	r2,r2,5
   21030:	e13fe317 	ldw	r4,-116(fp)
   21034:	e0ffe017 	ldw	r3,-128(fp)
   21038:	20c7c83a 	sub	r3,r4,r3
   2103c:	1807d4ba 	srai	r3,r3,18
   21040:	18c0ffcc 	andi	r3,r3,1023
   21044:	e13fdf17 	ldw	r4,-132(fp)
   21048:	20c7883a 	add	r3,r4,r3
   2104c:	18c00003 	ldbu	r3,0(r3)
   21050:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
   21054:	e0bfe417 	ldw	r2,-112(fp)
   21058:	10800044 	addi	r2,r2,1
   2105c:	e13fe617 	ldw	r4,-104(fp)
   21060:	e0ffe517 	ldw	r3,-108(fp)
   21064:	20c7883a 	add	r3,r4,r3
   21068:	1807d4ba 	srai	r3,r3,18
   2106c:	18c0ffcc 	andi	r3,r3,1023
   21070:	e13fdf17 	ldw	r4,-132(fp)
   21074:	20c7883a 	add	r3,r4,r3
   21078:	18c00003 	ldbu	r3,0(r3)
   2107c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
   21080:	e0bfe417 	ldw	r2,-112(fp)
   21084:	10800104 	addi	r2,r2,4
   21088:	e13fe617 	ldw	r4,-104(fp)
   2108c:	e0ffe517 	ldw	r3,-108(fp)
   21090:	20c7c83a 	sub	r3,r4,r3
   21094:	1807d4ba 	srai	r3,r3,18
   21098:	18c0ffcc 	andi	r3,r3,1023
   2109c:	e13fdf17 	ldw	r4,-132(fp)
   210a0:	20c7883a 	add	r3,r4,r3
   210a4:	18c00003 	ldbu	r3,0(r3)
   210a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   210ac:	e0bfe417 	ldw	r2,-112(fp)
   210b0:	10800084 	addi	r2,r2,2
   210b4:	e13fe217 	ldw	r4,-120(fp)
   210b8:	e0ffe117 	ldw	r3,-124(fp)
   210bc:	20c7883a 	add	r3,r4,r3
   210c0:	1807d4ba 	srai	r3,r3,18
   210c4:	18c0ffcc 	andi	r3,r3,1023
   210c8:	e13fdf17 	ldw	r4,-132(fp)
   210cc:	20c7883a 	add	r3,r4,r3
   210d0:	18c00003 	ldbu	r3,0(r3)
   210d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   210d8:	e0bfe417 	ldw	r2,-112(fp)
   210dc:	108000c4 	addi	r2,r2,3
   210e0:	e13fe217 	ldw	r4,-120(fp)
   210e4:	e0ffe117 	ldw	r3,-124(fp)
   210e8:	20c7c83a 	sub	r3,r4,r3
   210ec:	1807d4ba 	srai	r3,r3,18
   210f0:	18c0ffcc 	andi	r3,r3,1023
   210f4:	e13fdf17 	ldw	r4,-132(fp)
   210f8:	20c7883a 	add	r3,r4,r3
   210fc:	18c00003 	ldbu	r3,0(r3)
   21100:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
   21104:	e0bfdd17 	ldw	r2,-140(fp)
   21108:	10800604 	addi	r2,r2,24
   2110c:	e0bfdd15 	stw	r2,-140(fp)

	/* Pass 2: process 3 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++) {
   21110:	e0bfde17 	ldw	r2,-136(fp)
   21114:	10800044 	addi	r2,r2,1
   21118:	e0bfde15 	stw	r2,-136(fp)
   2111c:	e0bfde17 	ldw	r2,-136(fp)
   21120:	108000d0 	cmplti	r2,r2,3
   21124:	103f5c1e 	bne	r2,zero,20e98 <jpeg_idct_6x3+0x1dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
   21128:	e037883a 	mov	sp,fp
   2112c:	dfc00117 	ldw	ra,4(sp)
   21130:	df000017 	ldw	fp,0(sp)
   21134:	dec00204 	addi	sp,sp,8
   21138:	f800283a 	ret

0002113c <jpeg_idct_4x2>:

GLOBAL(void)
	jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   2113c:	deffe504 	addi	sp,sp,-108
   21140:	dfc01a15 	stw	ra,104(sp)
   21144:	df001915 	stw	fp,100(sp)
   21148:	df001904 	addi	fp,sp,100
   2114c:	e13ffc15 	stw	r4,-16(fp)
   21150:	e17ffd15 	stw	r5,-12(fp)
   21154:	e1bffe15 	stw	r6,-8(fp)
   21158:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	INT32 * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   2115c:	e0bffc17 	ldw	r2,-16(fp)
   21160:	10804917 	ldw	r2,292(r2)
   21164:	10802004 	addi	r2,r2,128
   21168:	e0bfeb15 	stw	r2,-84(fp)
	INT32 workspace[4*2];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
   2116c:	e0bffe17 	ldw	r2,-8(fp)
   21170:	e0bfe715 	stw	r2,-100(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   21174:	e0bffd17 	ldw	r2,-12(fp)
   21178:	10801517 	ldw	r2,84(r2)
   2117c:	e0bfe815 	stw	r2,-96(fp)
	wsptr = workspace;
   21180:	e0bff404 	addi	r2,fp,-48
   21184:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
   21188:	e03fea15 	stw	zero,-88(fp)
   2118c:	00002f06 	br	2124c <jpeg_idct_4x2+0x110>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   21190:	e0bfe717 	ldw	r2,-100(fp)
   21194:	1080000b 	ldhu	r2,0(r2)
   21198:	10ffffcc 	andi	r3,r2,65535
   2119c:	18e0001c 	xori	r3,r3,32768
   211a0:	18e00004 	addi	r3,r3,-32768
   211a4:	e0bfe817 	ldw	r2,-96(fp)
   211a8:	10800017 	ldw	r2,0(r2)
   211ac:	1809883a 	mov	r4,r3
   211b0:	100b883a 	mov	r5,r2
   211b4:	002c1540 	call	2c154 <__mulsi3>
   211b8:	e0bfec15 	stw	r2,-80(fp)

		/* Odd part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   211bc:	e0bfe717 	ldw	r2,-100(fp)
   211c0:	10800404 	addi	r2,r2,16
   211c4:	1080000b 	ldhu	r2,0(r2)
   211c8:	10ffffcc 	andi	r3,r2,65535
   211cc:	18e0001c 	xori	r3,r3,32768
   211d0:	18e00004 	addi	r3,r3,-32768
   211d4:	e0bfe817 	ldw	r2,-96(fp)
   211d8:	10800804 	addi	r2,r2,32
   211dc:	10800017 	ldw	r2,0(r2)
   211e0:	1809883a 	mov	r4,r3
   211e4:	100b883a 	mov	r5,r2
   211e8:	002c1540 	call	2c154 <__mulsi3>
   211ec:	e0bfed15 	stw	r2,-76(fp)

		/* Final output stage */

		wsptr[4*0] = tmp10 + tmp0;
   211f0:	e0ffec17 	ldw	r3,-80(fp)
   211f4:	e0bfed17 	ldw	r2,-76(fp)
   211f8:	1887883a 	add	r3,r3,r2
   211fc:	e0bfe917 	ldw	r2,-92(fp)
   21200:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = tmp10 - tmp0;
   21204:	e0bfe917 	ldw	r2,-92(fp)
   21208:	10800404 	addi	r2,r2,16
   2120c:	e13fec17 	ldw	r4,-80(fp)
   21210:	e0ffed17 	ldw	r3,-76(fp)
   21214:	20c7c83a 	sub	r3,r4,r3
   21218:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
   2121c:	e0bfea17 	ldw	r2,-88(fp)
   21220:	10800044 	addi	r2,r2,1
   21224:	e0bfea15 	stw	r2,-88(fp)
   21228:	e0bfe717 	ldw	r2,-100(fp)
   2122c:	10800084 	addi	r2,r2,2
   21230:	e0bfe715 	stw	r2,-100(fp)
   21234:	e0bfe817 	ldw	r2,-96(fp)
   21238:	10800104 	addi	r2,r2,4
   2123c:	e0bfe815 	stw	r2,-96(fp)
   21240:	e0bfe917 	ldw	r2,-92(fp)
   21244:	10800104 	addi	r2,r2,4
   21248:	e0bfe915 	stw	r2,-92(fp)
   2124c:	e0bfea17 	ldw	r2,-88(fp)
   21250:	10800110 	cmplti	r2,r2,4
   21254:	103fce1e 	bne	r2,zero,21190 <jpeg_idct_4x2+0x54>

	/* Pass 2: process 2 rows from work array, store into output array.
	* 4-point IDCT kernel,
	* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
	*/
	wsptr = workspace;
   21258:	e0bff404 	addi	r2,fp,-48
   2125c:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 2; ctr++) {
   21260:	e03fea15 	stw	zero,-88(fp)
   21264:	00006606 	br	21400 <jpeg_idct_4x2+0x2c4>
		outptr = output_buf[ctr] + output_col;
   21268:	e0bfea17 	ldw	r2,-88(fp)
   2126c:	1085883a 	add	r2,r2,r2
   21270:	1085883a 	add	r2,r2,r2
   21274:	e0ffff17 	ldw	r3,-4(fp)
   21278:	1885883a 	add	r2,r3,r2
   2127c:	10c00017 	ldw	r3,0(r2)
   21280:	e0800217 	ldw	r2,8(fp)
   21284:	1885883a 	add	r2,r3,r2
   21288:	e0bfee15 	stw	r2,-72(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = wsptr[0] + (ONE << 2);
   2128c:	e0bfe917 	ldw	r2,-92(fp)
   21290:	10800017 	ldw	r2,0(r2)
   21294:	10800104 	addi	r2,r2,4
   21298:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = wsptr[2];
   2129c:	e0bfe917 	ldw	r2,-92(fp)
   212a0:	10800217 	ldw	r2,8(r2)
   212a4:	e0bfef15 	stw	r2,-68(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
   212a8:	e0ffed17 	ldw	r3,-76(fp)
   212ac:	e0bfef17 	ldw	r2,-68(fp)
   212b0:	1885883a 	add	r2,r3,r2
   212b4:	1004937a 	slli	r2,r2,13
   212b8:	e0bfec15 	stw	r2,-80(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
   212bc:	e0ffed17 	ldw	r3,-76(fp)
   212c0:	e0bfef17 	ldw	r2,-68(fp)
   212c4:	1885c83a 	sub	r2,r3,r2
   212c8:	1004937a 	slli	r2,r2,13
   212cc:	e0bff015 	stw	r2,-64(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = wsptr[1];
   212d0:	e0bfe917 	ldw	r2,-92(fp)
   212d4:	10800117 	ldw	r2,4(r2)
   212d8:	e0bff115 	stw	r2,-60(fp)
		z3 = wsptr[3];
   212dc:	e0bfe917 	ldw	r2,-92(fp)
   212e0:	10800317 	ldw	r2,12(r2)
   212e4:	e0bff215 	stw	r2,-56(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
   212e8:	e0fff117 	ldw	r3,-60(fp)
   212ec:	e0bff217 	ldw	r2,-56(fp)
   212f0:	1885883a 	add	r2,r3,r2
   212f4:	1009883a 	mov	r4,r2
   212f8:	01445444 	movi	r5,4433
   212fc:	002c1540 	call	2c154 <__mulsi3>
   21300:	e0bff315 	stw	r2,-52(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
   21304:	e13ff117 	ldw	r4,-60(fp)
   21308:	01461f84 	movi	r5,6270
   2130c:	002c1540 	call	2c154 <__mulsi3>
   21310:	1007883a 	mov	r3,r2
   21314:	e0bff317 	ldw	r2,-52(fp)
   21318:	1885883a 	add	r2,r3,r2
   2131c:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
   21320:	e13ff217 	ldw	r4,-56(fp)
   21324:	017137c4 	movi	r5,-15137
   21328:	002c1540 	call	2c154 <__mulsi3>
   2132c:	1007883a 	mov	r3,r2
   21330:	e0bff317 	ldw	r2,-52(fp)
   21334:	1885883a 	add	r2,r3,r2
   21338:	e0bfef15 	stw	r2,-68(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   2133c:	e0ffec17 	ldw	r3,-80(fp)
   21340:	e0bfed17 	ldw	r2,-76(fp)
   21344:	1885883a 	add	r2,r3,r2
   21348:	1005d43a 	srai	r2,r2,16
   2134c:	1080ffcc 	andi	r2,r2,1023
   21350:	e0ffeb17 	ldw	r3,-84(fp)
   21354:	1885883a 	add	r2,r3,r2
   21358:	10c00003 	ldbu	r3,0(r2)
   2135c:	e0bfee17 	ldw	r2,-72(fp)
   21360:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   21364:	e0bfee17 	ldw	r2,-72(fp)
   21368:	108000c4 	addi	r2,r2,3
   2136c:	e13fec17 	ldw	r4,-80(fp)
   21370:	e0ffed17 	ldw	r3,-76(fp)
   21374:	20c7c83a 	sub	r3,r4,r3
   21378:	1807d43a 	srai	r3,r3,16
   2137c:	18c0ffcc 	andi	r3,r3,1023
   21380:	e13feb17 	ldw	r4,-84(fp)
   21384:	20c7883a 	add	r3,r4,r3
   21388:	18c00003 	ldbu	r3,0(r3)
   2138c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   21390:	e0bfee17 	ldw	r2,-72(fp)
   21394:	10800044 	addi	r2,r2,1
   21398:	e13ff017 	ldw	r4,-64(fp)
   2139c:	e0ffef17 	ldw	r3,-68(fp)
   213a0:	20c7883a 	add	r3,r4,r3
   213a4:	1807d43a 	srai	r3,r3,16
   213a8:	18c0ffcc 	andi	r3,r3,1023
   213ac:	e13feb17 	ldw	r4,-84(fp)
   213b0:	20c7883a 	add	r3,r4,r3
   213b4:	18c00003 	ldbu	r3,0(r3)
   213b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   213bc:	e0bfee17 	ldw	r2,-72(fp)
   213c0:	10800084 	addi	r2,r2,2
   213c4:	e13ff017 	ldw	r4,-64(fp)
   213c8:	e0ffef17 	ldw	r3,-68(fp)
   213cc:	20c7c83a 	sub	r3,r4,r3
   213d0:	1807d43a 	srai	r3,r3,16
   213d4:	18c0ffcc 	andi	r3,r3,1023
   213d8:	e13feb17 	ldw	r4,-84(fp)
   213dc:	20c7883a 	add	r3,r4,r3
   213e0:	18c00003 	ldbu	r3,0(r3)
   213e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
   213e8:	e0bfe917 	ldw	r2,-92(fp)
   213ec:	10800404 	addi	r2,r2,16
   213f0:	e0bfe915 	stw	r2,-92(fp)
	/* Pass 2: process 2 rows from work array, store into output array.
	* 4-point IDCT kernel,
	* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 2; ctr++) {
   213f4:	e0bfea17 	ldw	r2,-88(fp)
   213f8:	10800044 	addi	r2,r2,1
   213fc:	e0bfea15 	stw	r2,-88(fp)
   21400:	e0bfea17 	ldw	r2,-88(fp)
   21404:	10800090 	cmplti	r2,r2,2
   21408:	103f971e 	bne	r2,zero,21268 <jpeg_idct_4x2+0x12c>
			CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
   2140c:	e037883a 	mov	sp,fp
   21410:	dfc00117 	ldw	ra,4(sp)
   21414:	df000017 	ldw	fp,0(sp)
   21418:	dec00204 	addi	sp,sp,8
   2141c:	f800283a 	ret

00021420 <jpeg_idct_2x1>:

GLOBAL(void)
	jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   21420:	defff504 	addi	sp,sp,-44
   21424:	dfc00a15 	stw	ra,40(sp)
   21428:	df000915 	stw	fp,36(sp)
   2142c:	df000904 	addi	fp,sp,36
   21430:	e13ffc15 	stw	r4,-16(fp)
   21434:	e17ffd15 	stw	r5,-12(fp)
   21438:	e1bffe15 	stw	r6,-8(fp)
   2143c:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp10;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   21440:	e0bffc17 	ldw	r2,-16(fp)
   21444:	10804917 	ldw	r2,292(r2)
   21448:	10802004 	addi	r2,r2,128
   2144c:	e0bff715 	stw	r2,-36(fp)

		/* Pass 1: empty. */

		/* Pass 2: process 1 row from input, store into output array. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   21450:	e0bffd17 	ldw	r2,-12(fp)
   21454:	10801517 	ldw	r2,84(r2)
   21458:	e0bff815 	stw	r2,-32(fp)
	outptr = output_buf[0] + output_col;
   2145c:	e0bfff17 	ldw	r2,-4(fp)
   21460:	10c00017 	ldw	r3,0(r2)
   21464:	e0800217 	ldw	r2,8(fp)
   21468:	1885883a 	add	r2,r3,r2
   2146c:	e0bff915 	stw	r2,-28(fp)

	/* Even part */

	tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
   21470:	e0bffe17 	ldw	r2,-8(fp)
   21474:	1080000b 	ldhu	r2,0(r2)
   21478:	10ffffcc 	andi	r3,r2,65535
   2147c:	18e0001c 	xori	r3,r3,32768
   21480:	18e00004 	addi	r3,r3,-32768
   21484:	e0bff817 	ldw	r2,-32(fp)
   21488:	10800017 	ldw	r2,0(r2)
   2148c:	1809883a 	mov	r4,r3
   21490:	100b883a 	mov	r5,r2
   21494:	002c1540 	call	2c154 <__mulsi3>
   21498:	e0bffa15 	stw	r2,-24(fp)
	/* Add fudge factor here for final descale. */
	tmp10 += ONE << 2;
   2149c:	e0bffa17 	ldw	r2,-24(fp)
   214a0:	10800104 	addi	r2,r2,4
   214a4:	e0bffa15 	stw	r2,-24(fp)

	/* Odd part */

	tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
   214a8:	e0bffe17 	ldw	r2,-8(fp)
   214ac:	10800084 	addi	r2,r2,2
   214b0:	1080000b 	ldhu	r2,0(r2)
   214b4:	10ffffcc 	andi	r3,r2,65535
   214b8:	18e0001c 	xori	r3,r3,32768
   214bc:	18e00004 	addi	r3,r3,-32768
   214c0:	e0bff817 	ldw	r2,-32(fp)
   214c4:	10800104 	addi	r2,r2,4
   214c8:	10800017 	ldw	r2,0(r2)
   214cc:	1809883a 	mov	r4,r3
   214d0:	100b883a 	mov	r5,r2
   214d4:	002c1540 	call	2c154 <__mulsi3>
   214d8:	e0bffb15 	stw	r2,-20(fp)

	/* Final output stage */

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
   214dc:	e0fffa17 	ldw	r3,-24(fp)
   214e0:	e0bffb17 	ldw	r2,-20(fp)
   214e4:	1885883a 	add	r2,r3,r2
   214e8:	1005d0fa 	srai	r2,r2,3
   214ec:	1080ffcc 	andi	r2,r2,1023
   214f0:	e0fff717 	ldw	r3,-36(fp)
   214f4:	1885883a 	add	r2,r3,r2
   214f8:	10c00003 	ldbu	r3,0(r2)
   214fc:	e0bff917 	ldw	r2,-28(fp)
   21500:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
   21504:	e0bff917 	ldw	r2,-28(fp)
   21508:	10800044 	addi	r2,r2,1
   2150c:	e13ffa17 	ldw	r4,-24(fp)
   21510:	e0fffb17 	ldw	r3,-20(fp)
   21514:	20c7c83a 	sub	r3,r4,r3
   21518:	1807d0fa 	srai	r3,r3,3
   2151c:	18c0ffcc 	andi	r3,r3,1023
   21520:	e13ff717 	ldw	r4,-36(fp)
   21524:	20c7883a 	add	r3,r4,r3
   21528:	18c00003 	ldbu	r3,0(r3)
   2152c:	10c00005 	stb	r3,0(r2)
}
   21530:	e037883a 	mov	sp,fp
   21534:	dfc00117 	ldw	ra,4(sp)
   21538:	df000017 	ldw	fp,0(sp)
   2153c:	dec00204 	addi	sp,sp,8
   21540:	f800283a 	ret

00021544 <jpeg_idct_8x16>:

GLOBAL(void)
	jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   21544:	deff5f04 	addi	sp,sp,-644
   21548:	dfc0a015 	stw	ra,640(sp)
   2154c:	df009f15 	stw	fp,636(sp)
   21550:	dc009e15 	stw	r16,632(sp)
   21554:	df009e04 	addi	fp,sp,632
   21558:	e13ffc15 	stw	r4,-16(fp)
   2155c:	e17ffd15 	stw	r5,-12(fp)
   21560:	e1bffe15 	stw	r6,-8(fp)
   21564:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   21568:	e0bffc17 	ldw	r2,-16(fp)
   2156c:	10804917 	ldw	r2,292(r2)
   21570:	10802004 	addi	r2,r2,128
   21574:	e0bf6615 	stw	r2,-616(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
		*/
		inptr = coef_block;
   21578:	e0bffe17 	ldw	r2,-8(fp)
   2157c:	e0bf6215 	stw	r2,-632(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   21580:	e0bffd17 	ldw	r2,-12(fp)
   21584:	10801517 	ldw	r2,84(r2)
   21588:	e0bf6315 	stw	r2,-628(fp)
	wsptr = workspace;
   2158c:	e0bf7c04 	addi	r2,fp,-528
   21590:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   21594:	e03f6515 	stw	zero,-620(fp)
   21598:	0001f906 	br	21d80 <jpeg_idct_8x16+0x83c>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   2159c:	e0bf6217 	ldw	r2,-632(fp)
   215a0:	1080000b 	ldhu	r2,0(r2)
   215a4:	10ffffcc 	andi	r3,r2,65535
   215a8:	18e0001c 	xori	r3,r3,32768
   215ac:	18e00004 	addi	r3,r3,-32768
   215b0:	e0bf6317 	ldw	r2,-628(fp)
   215b4:	10800017 	ldw	r2,0(r2)
   215b8:	1809883a 	mov	r4,r3
   215bc:	100b883a 	mov	r5,r2
   215c0:	002c1540 	call	2c154 <__mulsi3>
   215c4:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
   215c8:	e0bf6717 	ldw	r2,-612(fp)
   215cc:	1004937a 	slli	r2,r2,13
   215d0:	e0bf6715 	stw	r2,-612(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   215d4:	e0bf6717 	ldw	r2,-612(fp)
   215d8:	10810004 	addi	r2,r2,1024
   215dc:	e0bf6715 	stw	r2,-612(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   215e0:	e0bf6217 	ldw	r2,-632(fp)
   215e4:	10801004 	addi	r2,r2,64
   215e8:	1080000b 	ldhu	r2,0(r2)
   215ec:	10ffffcc 	andi	r3,r2,65535
   215f0:	18e0001c 	xori	r3,r3,32768
   215f4:	18e00004 	addi	r3,r3,-32768
   215f8:	e0bf6317 	ldw	r2,-628(fp)
   215fc:	10802004 	addi	r2,r2,128
   21600:	10800017 	ldw	r2,0(r2)
   21604:	1809883a 	mov	r4,r3
   21608:	100b883a 	mov	r5,r2
   2160c:	002c1540 	call	2c154 <__mulsi3>
   21610:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
   21614:	e13f6817 	ldw	r4,-608(fp)
   21618:	014a73c4 	movi	r5,10703
   2161c:	002c1540 	call	2c154 <__mulsi3>
   21620:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
   21624:	e13f6817 	ldw	r4,-608(fp)
   21628:	01445444 	movi	r5,4433
   2162c:	002c1540 	call	2c154 <__mulsi3>
   21630:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
   21634:	e0ff6717 	ldw	r3,-612(fp)
   21638:	e0bf6917 	ldw	r2,-604(fp)
   2163c:	1885883a 	add	r2,r3,r2
   21640:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
   21644:	e0ff6717 	ldw	r3,-612(fp)
   21648:	e0bf6917 	ldw	r2,-604(fp)
   2164c:	1885c83a 	sub	r2,r3,r2
   21650:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
   21654:	e0ff6717 	ldw	r3,-612(fp)
   21658:	e0bf6a17 	ldw	r2,-600(fp)
   2165c:	1885883a 	add	r2,r3,r2
   21660:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
   21664:	e0ff6717 	ldw	r3,-612(fp)
   21668:	e0bf6a17 	ldw	r2,-600(fp)
   2166c:	1885c83a 	sub	r2,r3,r2
   21670:	e0bf6e15 	stw	r2,-584(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   21674:	e0bf6217 	ldw	r2,-632(fp)
   21678:	10800804 	addi	r2,r2,32
   2167c:	1080000b 	ldhu	r2,0(r2)
   21680:	10ffffcc 	andi	r3,r2,65535
   21684:	18e0001c 	xori	r3,r3,32768
   21688:	18e00004 	addi	r3,r3,-32768
   2168c:	e0bf6317 	ldw	r2,-628(fp)
   21690:	10801004 	addi	r2,r2,64
   21694:	10800017 	ldw	r2,0(r2)
   21698:	1809883a 	mov	r4,r3
   2169c:	100b883a 	mov	r5,r2
   216a0:	002c1540 	call	2c154 <__mulsi3>
   216a4:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   216a8:	e0bf6217 	ldw	r2,-632(fp)
   216ac:	10801804 	addi	r2,r2,96
   216b0:	1080000b 	ldhu	r2,0(r2)
   216b4:	10ffffcc 	andi	r3,r2,65535
   216b8:	18e0001c 	xori	r3,r3,32768
   216bc:	18e00004 	addi	r3,r3,-32768
   216c0:	e0bf6317 	ldw	r2,-628(fp)
   216c4:	10803004 	addi	r2,r2,192
   216c8:	10800017 	ldw	r2,0(r2)
   216cc:	1809883a 	mov	r4,r3
   216d0:	100b883a 	mov	r5,r2
   216d4:	002c1540 	call	2c154 <__mulsi3>
   216d8:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
   216dc:	e0ff6817 	ldw	r3,-608(fp)
   216e0:	e0bf6f17 	ldw	r2,-580(fp)
   216e4:	1885c83a 	sub	r2,r3,r2
   216e8:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
   216ec:	e13f7017 	ldw	r4,-576(fp)
   216f0:	01423504 	movi	r5,2260
   216f4:	002c1540 	call	2c154 <__mulsi3>
   216f8:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
   216fc:	e13f7017 	ldw	r4,-576(fp)
   21700:	014b18c4 	movi	r5,11363
   21704:	002c1540 	call	2c154 <__mulsi3>
   21708:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
   2170c:	e13f6f17 	ldw	r4,-580(fp)
   21710:	015480c4 	movi	r5,20995
   21714:	002c1540 	call	2c154 <__mulsi3>
   21718:	1007883a 	mov	r3,r2
   2171c:	e0bf7017 	ldw	r2,-576(fp)
   21720:	1885883a 	add	r2,r3,r2
   21724:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
   21728:	e13f6817 	ldw	r4,-608(fp)
   2172c:	01473344 	movi	r5,7373
   21730:	002c1540 	call	2c154 <__mulsi3>
   21734:	1007883a 	mov	r3,r2
   21738:	e0bf7117 	ldw	r2,-572(fp)
   2173c:	1885883a 	add	r2,r3,r2
   21740:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
   21744:	e13f6817 	ldw	r4,-608(fp)
   21748:	017b3084 	movi	r5,-4926
   2174c:	002c1540 	call	2c154 <__mulsi3>
   21750:	1007883a 	mov	r3,r2
   21754:	e0bf7017 	ldw	r2,-576(fp)
   21758:	1885883a 	add	r2,r3,r2
   2175c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
   21760:	e13f6f17 	ldw	r4,-580(fp)
   21764:	017bec04 	movi	r5,-4176
   21768:	002c1540 	call	2c154 <__mulsi3>
   2176c:	1007883a 	mov	r3,r2
   21770:	e0bf7117 	ldw	r2,-572(fp)
   21774:	1885883a 	add	r2,r3,r2
   21778:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
   2177c:	e0ff6b17 	ldw	r3,-596(fp)
   21780:	e0bf6717 	ldw	r2,-612(fp)
   21784:	1885883a 	add	r2,r3,r2
   21788:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
   2178c:	e0ff6b17 	ldw	r3,-596(fp)
   21790:	e0bf6717 	ldw	r2,-612(fp)
   21794:	1885c83a 	sub	r2,r3,r2
   21798:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
   2179c:	e0ff6d17 	ldw	r3,-588(fp)
   217a0:	e0bf6917 	ldw	r2,-604(fp)
   217a4:	1885883a 	add	r2,r3,r2
   217a8:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
   217ac:	e0ff6d17 	ldw	r3,-588(fp)
   217b0:	e0bf6917 	ldw	r2,-604(fp)
   217b4:	1885c83a 	sub	r2,r3,r2
   217b8:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
   217bc:	e0ff6e17 	ldw	r3,-584(fp)
   217c0:	e0bf6a17 	ldw	r2,-600(fp)
   217c4:	1885883a 	add	r2,r3,r2
   217c8:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
   217cc:	e0ff6e17 	ldw	r3,-584(fp)
   217d0:	e0bf6a17 	ldw	r2,-600(fp)
   217d4:	1885c83a 	sub	r2,r3,r2
   217d8:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
   217dc:	e0ff6c17 	ldw	r3,-592(fp)
   217e0:	e0bf7217 	ldw	r2,-568(fp)
   217e4:	1885883a 	add	r2,r3,r2
   217e8:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
   217ec:	e0ff6c17 	ldw	r3,-592(fp)
   217f0:	e0bf7217 	ldw	r2,-568(fp)
   217f4:	1885c83a 	sub	r2,r3,r2
   217f8:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   217fc:	e0bf6217 	ldw	r2,-632(fp)
   21800:	10800404 	addi	r2,r2,16
   21804:	1080000b 	ldhu	r2,0(r2)
   21808:	10ffffcc 	andi	r3,r2,65535
   2180c:	18e0001c 	xori	r3,r3,32768
   21810:	18e00004 	addi	r3,r3,-32768
   21814:	e0bf6317 	ldw	r2,-628(fp)
   21818:	10800804 	addi	r2,r2,32
   2181c:	10800017 	ldw	r2,0(r2)
   21820:	1809883a 	mov	r4,r3
   21824:	100b883a 	mov	r5,r2
   21828:	002c1540 	call	2c154 <__mulsi3>
   2182c:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   21830:	e0bf6217 	ldw	r2,-632(fp)
   21834:	10800c04 	addi	r2,r2,48
   21838:	1080000b 	ldhu	r2,0(r2)
   2183c:	10ffffcc 	andi	r3,r2,65535
   21840:	18e0001c 	xori	r3,r3,32768
   21844:	18e00004 	addi	r3,r3,-32768
   21848:	e0bf6317 	ldw	r2,-628(fp)
   2184c:	10801804 	addi	r2,r2,96
   21850:	10800017 	ldw	r2,0(r2)
   21854:	1809883a 	mov	r4,r3
   21858:	100b883a 	mov	r5,r2
   2185c:	002c1540 	call	2c154 <__mulsi3>
   21860:	e0bf6f15 	stw	r2,-580(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   21864:	e0bf6217 	ldw	r2,-632(fp)
   21868:	10801404 	addi	r2,r2,80
   2186c:	1080000b 	ldhu	r2,0(r2)
   21870:	10ffffcc 	andi	r3,r2,65535
   21874:	18e0001c 	xori	r3,r3,32768
   21878:	18e00004 	addi	r3,r3,-32768
   2187c:	e0bf6317 	ldw	r2,-628(fp)
   21880:	10802804 	addi	r2,r2,160
   21884:	10800017 	ldw	r2,0(r2)
   21888:	1809883a 	mov	r4,r3
   2188c:	100b883a 	mov	r5,r2
   21890:	002c1540 	call	2c154 <__mulsi3>
   21894:	e0bf7015 	stw	r2,-576(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   21898:	e0bf6217 	ldw	r2,-632(fp)
   2189c:	10801c04 	addi	r2,r2,112
   218a0:	1080000b 	ldhu	r2,0(r2)
   218a4:	10ffffcc 	andi	r3,r2,65535
   218a8:	18e0001c 	xori	r3,r3,32768
   218ac:	18e00004 	addi	r3,r3,-32768
   218b0:	e0bf6317 	ldw	r2,-628(fp)
   218b4:	10803804 	addi	r2,r2,224
   218b8:	10800017 	ldw	r2,0(r2)
   218bc:	1809883a 	mov	r4,r3
   218c0:	100b883a 	mov	r5,r2
   218c4:	002c1540 	call	2c154 <__mulsi3>
   218c8:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
   218cc:	e0ff6817 	ldw	r3,-608(fp)
   218d0:	e0bf7017 	ldw	r2,-576(fp)
   218d4:	1885883a 	add	r2,r3,r2
   218d8:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
   218dc:	e0ff6817 	ldw	r3,-608(fp)
   218e0:	e0bf6f17 	ldw	r2,-580(fp)
   218e4:	1885883a 	add	r2,r3,r2
   218e8:	1009883a 	mov	r4,r2
   218ec:	014ad384 	movi	r5,11086
   218f0:	002c1540 	call	2c154 <__mulsi3>
   218f4:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
   218f8:	e13f6c17 	ldw	r4,-592(fp)
   218fc:	0149fa44 	movi	r5,10217
   21900:	002c1540 	call	2c154 <__mulsi3>
   21904:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
   21908:	e0ff6817 	ldw	r3,-608(fp)
   2190c:	e0bf7117 	ldw	r2,-572(fp)
   21910:	1885883a 	add	r2,r3,r2
   21914:	1009883a 	mov	r4,r2
   21918:	0148bf04 	movi	r5,8956
   2191c:	002c1540 	call	2c154 <__mulsi3>
   21920:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
   21924:	e0ff6817 	ldw	r3,-608(fp)
   21928:	e0bf7117 	ldw	r2,-572(fp)
   2192c:	1885c83a 	sub	r2,r3,r2
   21930:	1009883a 	mov	r4,r2
   21934:	01472d84 	movi	r5,7350
   21938:	002c1540 	call	2c154 <__mulsi3>
   2193c:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
   21940:	e13f6c17 	ldw	r4,-592(fp)
   21944:	01455544 	movi	r5,5461
   21948:	002c1540 	call	2c154 <__mulsi3>
   2194c:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
   21950:	e0ff6817 	ldw	r3,-608(fp)
   21954:	e0bf6f17 	ldw	r2,-580(fp)
   21958:	1885c83a 	sub	r2,r3,r2
   2195c:	1009883a 	mov	r4,r2
   21960:	014348c4 	movi	r5,3363
   21964:	002c1540 	call	2c154 <__mulsi3>
   21968:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
   2196c:	e0ff6917 	ldw	r3,-604(fp)
   21970:	e0bf6a17 	ldw	r2,-600(fp)
   21974:	1887883a 	add	r3,r3,r2
   21978:	e0bf7217 	ldw	r2,-568(fp)
   2197c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
   21980:	e13f6817 	ldw	r4,-608(fp)
   21984:	016db584 	movi	r5,-18730
   21988:	002c1540 	call	2c154 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
   2198c:	8085883a 	add	r2,r16,r2
   21990:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   21994:	e0ff6b17 	ldw	r3,-596(fp)
   21998:	e0bf6c17 	ldw	r2,-592(fp)
   2199c:	1887883a 	add	r3,r3,r2
   219a0:	e0bf6d17 	ldw	r2,-588(fp)
   219a4:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
   219a8:	e13f6817 	ldw	r4,-608(fp)
   219ac:	01715084 	movi	r5,-15038
   219b0:	002c1540 	call	2c154 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
   219b4:	8085883a 	add	r2,r16,r2
   219b8:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
   219bc:	e0ff6f17 	ldw	r3,-580(fp)
   219c0:	e0bf7017 	ldw	r2,-576(fp)
   219c4:	1885883a 	add	r2,r3,r2
   219c8:	1009883a 	mov	r4,r2
   219cc:	01411c04 	movi	r5,1136
   219d0:	002c1540 	call	2c154 <__mulsi3>
   219d4:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
   219d8:	e13f6f17 	ldw	r4,-580(fp)
   219dc:	01409344 	movi	r5,589
   219e0:	002c1540 	call	2c154 <__mulsi3>
   219e4:	1007883a 	mov	r3,r2
   219e8:	e0bf6817 	ldw	r2,-608(fp)
   219ec:	1885883a 	add	r2,r3,r2
   219f0:	e0ff6917 	ldw	r3,-604(fp)
   219f4:	1885883a 	add	r2,r3,r2
   219f8:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
   219fc:	e13f7017 	ldw	r4,-576(fp)
   21a00:	0176fe84 	movi	r5,-9222
   21a04:	002c1540 	call	2c154 <__mulsi3>
   21a08:	1007883a 	mov	r3,r2
   21a0c:	e0bf6817 	ldw	r2,-608(fp)
   21a10:	1885883a 	add	r2,r3,r2
   21a14:	e0ff6a17 	ldw	r3,-600(fp)
   21a18:	1885883a 	add	r2,r3,r2
   21a1c:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
   21a20:	e0ff7017 	ldw	r3,-576(fp)
   21a24:	e0bf6f17 	ldw	r2,-580(fp)
   21a28:	1885c83a 	sub	r2,r3,r2
   21a2c:	1009883a 	mov	r4,r2
   21a30:	014b4244 	movi	r5,11529
   21a34:	002c1540 	call	2c154 <__mulsi3>
   21a38:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
   21a3c:	e13f7017 	ldw	r4,-576(fp)
   21a40:	0179de84 	movi	r5,-6278
   21a44:	002c1540 	call	2c154 <__mulsi3>
   21a48:	1007883a 	mov	r3,r2
   21a4c:	e0bf6817 	ldw	r2,-608(fp)
   21a50:	1885883a 	add	r2,r3,r2
   21a54:	e0ff6c17 	ldw	r3,-592(fp)
   21a58:	1885883a 	add	r2,r3,r2
   21a5c:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
   21a60:	e13f6f17 	ldw	r4,-580(fp)
   21a64:	014fc684 	movi	r5,16154
   21a68:	002c1540 	call	2c154 <__mulsi3>
   21a6c:	1007883a 	mov	r3,r2
   21a70:	e0bf6817 	ldw	r2,-608(fp)
   21a74:	1885883a 	add	r2,r3,r2
   21a78:	e0ff6d17 	ldw	r3,-588(fp)
   21a7c:	1885883a 	add	r2,r3,r2
   21a80:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
   21a84:	e0ff6f17 	ldw	r3,-580(fp)
   21a88:	e0bf7117 	ldw	r2,-572(fp)
   21a8c:	1885883a 	add	r2,r3,r2
   21a90:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
   21a94:	e13f6f17 	ldw	r4,-580(fp)
   21a98:	017aaac4 	movi	r5,-5461
   21a9c:	002c1540 	call	2c154 <__mulsi3>
   21aa0:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
   21aa4:	e0ff6917 	ldw	r3,-604(fp)
   21aa8:	e0bf6817 	ldw	r2,-608(fp)
   21aac:	1885883a 	add	r2,r3,r2
   21ab0:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
   21ab4:	e13f7117 	ldw	r4,-572(fp)
   21ab8:	01488604 	movi	r5,8728
   21abc:	002c1540 	call	2c154 <__mulsi3>
   21ac0:	1007883a 	mov	r3,r2
   21ac4:	e0bf6817 	ldw	r2,-608(fp)
   21ac8:	1885883a 	add	r2,r3,r2
   21acc:	e0ff7217 	ldw	r3,-568(fp)
   21ad0:	1885883a 	add	r2,r3,r2
   21ad4:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
   21ad8:	e13f6f17 	ldw	r4,-580(fp)
   21adc:	017605c4 	movi	r5,-10217
   21ae0:	002c1540 	call	2c154 <__mulsi3>
   21ae4:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
   21ae8:	e13f7117 	ldw	r4,-572(fp)
   21aec:	01592144 	movi	r5,25733
   21af0:	002c1540 	call	2c154 <__mulsi3>
   21af4:	1007883a 	mov	r3,r2
   21af8:	e0bf6f17 	ldw	r2,-580(fp)
   21afc:	1885883a 	add	r2,r3,r2
   21b00:	e0ff6b17 	ldw	r3,-596(fp)
   21b04:	1885883a 	add	r2,r3,r2
   21b08:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
   21b0c:	e0ff6d17 	ldw	r3,-588(fp)
   21b10:	e0bf6f17 	ldw	r2,-580(fp)
   21b14:	1885883a 	add	r2,r3,r2
   21b18:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
   21b1c:	e0ff7017 	ldw	r3,-576(fp)
   21b20:	e0bf7117 	ldw	r2,-572(fp)
   21b24:	1885883a 	add	r2,r3,r2
   21b28:	1009883a 	mov	r4,r2
   21b2c:	01752c84 	movi	r5,-11086
   21b30:	002c1540 	call	2c154 <__mulsi3>
   21b34:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
   21b38:	e0ff6a17 	ldw	r3,-600(fp)
   21b3c:	e0bf6f17 	ldw	r2,-580(fp)
   21b40:	1885883a 	add	r2,r3,r2
   21b44:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
   21b48:	e0ff7217 	ldw	r3,-568(fp)
   21b4c:	e0bf6f17 	ldw	r2,-580(fp)
   21b50:	1885883a 	add	r2,r3,r2
   21b54:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
   21b58:	e0ff7117 	ldw	r3,-572(fp)
   21b5c:	e0bf7017 	ldw	r2,-576(fp)
   21b60:	1885c83a 	sub	r2,r3,r2
   21b64:	1009883a 	mov	r4,r2
   21b68:	014348c4 	movi	r5,3363
   21b6c:	002c1540 	call	2c154 <__mulsi3>
   21b70:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
   21b74:	e0ff6b17 	ldw	r3,-596(fp)
   21b78:	e0bf6f17 	ldw	r2,-580(fp)
   21b7c:	1885883a 	add	r2,r3,r2
   21b80:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
   21b84:	e0ff6c17 	ldw	r3,-592(fp)
   21b88:	e0bf6f17 	ldw	r2,-580(fp)
   21b8c:	1885883a 	add	r2,r3,r2
   21b90:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
   21b94:	e0ff7317 	ldw	r3,-564(fp)
   21b98:	e0bf6717 	ldw	r2,-612(fp)
   21b9c:	1885883a 	add	r2,r3,r2
   21ba0:	1007d2fa 	srai	r3,r2,11
   21ba4:	e0bf6417 	ldw	r2,-624(fp)
   21ba8:	10c00015 	stw	r3,0(r2)
		wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
   21bac:	e0bf6417 	ldw	r2,-624(fp)
   21bb0:	10807804 	addi	r2,r2,480
   21bb4:	e13f7317 	ldw	r4,-564(fp)
   21bb8:	e0ff6717 	ldw	r3,-612(fp)
   21bbc:	20c7c83a 	sub	r3,r4,r3
   21bc0:	1807d2fa 	srai	r3,r3,11
   21bc4:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
   21bc8:	e0bf6417 	ldw	r2,-624(fp)
   21bcc:	10800804 	addi	r2,r2,32
   21bd0:	e13f7517 	ldw	r4,-556(fp)
   21bd4:	e0ff6917 	ldw	r3,-604(fp)
   21bd8:	20c7883a 	add	r3,r4,r3
   21bdc:	1807d2fa 	srai	r3,r3,11
   21be0:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
   21be4:	e0bf6417 	ldw	r2,-624(fp)
   21be8:	10807004 	addi	r2,r2,448
   21bec:	e13f7517 	ldw	r4,-556(fp)
   21bf0:	e0ff6917 	ldw	r3,-604(fp)
   21bf4:	20c7c83a 	sub	r3,r4,r3
   21bf8:	1807d2fa 	srai	r3,r3,11
   21bfc:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
   21c00:	e0bf6417 	ldw	r2,-624(fp)
   21c04:	10801004 	addi	r2,r2,64
   21c08:	e13f7717 	ldw	r4,-548(fp)
   21c0c:	e0ff6a17 	ldw	r3,-600(fp)
   21c10:	20c7883a 	add	r3,r4,r3
   21c14:	1807d2fa 	srai	r3,r3,11
   21c18:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
   21c1c:	e0bf6417 	ldw	r2,-624(fp)
   21c20:	10806804 	addi	r2,r2,416
   21c24:	e13f7717 	ldw	r4,-548(fp)
   21c28:	e0ff6a17 	ldw	r3,-600(fp)
   21c2c:	20c7c83a 	sub	r3,r4,r3
   21c30:	1807d2fa 	srai	r3,r3,11
   21c34:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
   21c38:	e0bf6417 	ldw	r2,-624(fp)
   21c3c:	10801804 	addi	r2,r2,96
   21c40:	e13f7917 	ldw	r4,-540(fp)
   21c44:	e0ff7217 	ldw	r3,-568(fp)
   21c48:	20c7883a 	add	r3,r4,r3
   21c4c:	1807d2fa 	srai	r3,r3,11
   21c50:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
   21c54:	e0bf6417 	ldw	r2,-624(fp)
   21c58:	10806004 	addi	r2,r2,384
   21c5c:	e13f7917 	ldw	r4,-540(fp)
   21c60:	e0ff7217 	ldw	r3,-568(fp)
   21c64:	20c7c83a 	sub	r3,r4,r3
   21c68:	1807d2fa 	srai	r3,r3,11
   21c6c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
   21c70:	e0bf6417 	ldw	r2,-624(fp)
   21c74:	10802004 	addi	r2,r2,128
   21c78:	e13f7a17 	ldw	r4,-536(fp)
   21c7c:	e0ff6b17 	ldw	r3,-596(fp)
   21c80:	20c7883a 	add	r3,r4,r3
   21c84:	1807d2fa 	srai	r3,r3,11
   21c88:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
   21c8c:	e0bf6417 	ldw	r2,-624(fp)
   21c90:	10805804 	addi	r2,r2,352
   21c94:	e13f7a17 	ldw	r4,-536(fp)
   21c98:	e0ff6b17 	ldw	r3,-596(fp)
   21c9c:	20c7c83a 	sub	r3,r4,r3
   21ca0:	1807d2fa 	srai	r3,r3,11
   21ca4:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
   21ca8:	e0bf6417 	ldw	r2,-624(fp)
   21cac:	10802804 	addi	r2,r2,160
   21cb0:	e13f7817 	ldw	r4,-544(fp)
   21cb4:	e0ff6c17 	ldw	r3,-592(fp)
   21cb8:	20c7883a 	add	r3,r4,r3
   21cbc:	1807d2fa 	srai	r3,r3,11
   21cc0:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
   21cc4:	e0bf6417 	ldw	r2,-624(fp)
   21cc8:	10805004 	addi	r2,r2,320
   21ccc:	e13f7817 	ldw	r4,-544(fp)
   21cd0:	e0ff6c17 	ldw	r3,-592(fp)
   21cd4:	20c7c83a 	sub	r3,r4,r3
   21cd8:	1807d2fa 	srai	r3,r3,11
   21cdc:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
   21ce0:	e0bf6417 	ldw	r2,-624(fp)
   21ce4:	10803004 	addi	r2,r2,192
   21ce8:	e13f7617 	ldw	r4,-552(fp)
   21cec:	e0ff6d17 	ldw	r3,-588(fp)
   21cf0:	20c7883a 	add	r3,r4,r3
   21cf4:	1807d2fa 	srai	r3,r3,11
   21cf8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
   21cfc:	e0bf6417 	ldw	r2,-624(fp)
   21d00:	10804804 	addi	r2,r2,288
   21d04:	e13f7617 	ldw	r4,-552(fp)
   21d08:	e0ff6d17 	ldw	r3,-588(fp)
   21d0c:	20c7c83a 	sub	r3,r4,r3
   21d10:	1807d2fa 	srai	r3,r3,11
   21d14:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
   21d18:	e0bf6417 	ldw	r2,-624(fp)
   21d1c:	10803804 	addi	r2,r2,224
   21d20:	e13f7417 	ldw	r4,-560(fp)
   21d24:	e0ff6e17 	ldw	r3,-584(fp)
   21d28:	20c7883a 	add	r3,r4,r3
   21d2c:	1807d2fa 	srai	r3,r3,11
   21d30:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
   21d34:	e0bf6417 	ldw	r2,-624(fp)
   21d38:	10804004 	addi	r2,r2,256
   21d3c:	e13f7417 	ldw	r4,-560(fp)
   21d40:	e0ff6e17 	ldw	r3,-584(fp)
   21d44:	20c7c83a 	sub	r3,r4,r3
   21d48:	1807d2fa 	srai	r3,r3,11
   21d4c:	10c00015 	stw	r3,0(r2)
		* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
   21d50:	e0bf6517 	ldw	r2,-620(fp)
   21d54:	10800044 	addi	r2,r2,1
   21d58:	e0bf6515 	stw	r2,-620(fp)
   21d5c:	e0bf6217 	ldw	r2,-632(fp)
   21d60:	10800084 	addi	r2,r2,2
   21d64:	e0bf6215 	stw	r2,-632(fp)
   21d68:	e0bf6317 	ldw	r2,-628(fp)
   21d6c:	10800104 	addi	r2,r2,4
   21d70:	e0bf6315 	stw	r2,-628(fp)
   21d74:	e0bf6417 	ldw	r2,-624(fp)
   21d78:	10800104 	addi	r2,r2,4
   21d7c:	e0bf6415 	stw	r2,-624(fp)
   21d80:	e0bf6517 	ldw	r2,-620(fp)
   21d84:	10800210 	cmplti	r2,r2,8
   21d88:	103e041e 	bne	r2,zero,2159c <jpeg_idct_8x16+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
   21d8c:	e0bf7c04 	addi	r2,fp,-528
   21d90:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 16; ctr++) {
   21d94:	e03f6515 	stw	zero,-620(fp)
   21d98:	00010a06 	br	221c4 <jpeg_idct_8x16+0xc80>
		outptr = output_buf[ctr] + output_col;
   21d9c:	e0bf6517 	ldw	r2,-620(fp)
   21da0:	1085883a 	add	r2,r2,r2
   21da4:	1085883a 	add	r2,r2,r2
   21da8:	e0ffff17 	ldw	r3,-4(fp)
   21dac:	1885883a 	add	r2,r3,r2
   21db0:	10c00017 	ldw	r3,0(r2)
   21db4:	e0800317 	ldw	r2,12(fp)
   21db8:	1885883a 	add	r2,r3,r2
   21dbc:	e0bf7b15 	stw	r2,-532(fp)

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
   21dc0:	e0bf6417 	ldw	r2,-624(fp)
   21dc4:	10800204 	addi	r2,r2,8
   21dc8:	10800017 	ldw	r2,0(r2)
   21dcc:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[6];
   21dd0:	e0bf6417 	ldw	r2,-624(fp)
   21dd4:	10800604 	addi	r2,r2,24
   21dd8:	10800017 	ldw	r2,0(r2)
   21ddc:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   21de0:	e0ff6f17 	ldw	r3,-580(fp)
   21de4:	e0bf7017 	ldw	r2,-576(fp)
   21de8:	1885883a 	add	r2,r3,r2
   21dec:	1009883a 	mov	r4,r2
   21df0:	01445444 	movi	r5,4433
   21df4:	002c1540 	call	2c154 <__mulsi3>
   21df8:	e0bf6815 	stw	r2,-608(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   21dfc:	e13f6f17 	ldw	r4,-580(fp)
   21e00:	01461f84 	movi	r5,6270
   21e04:	002c1540 	call	2c154 <__mulsi3>
   21e08:	1007883a 	mov	r3,r2
   21e0c:	e0bf6817 	ldw	r2,-608(fp)
   21e10:	1885883a 	add	r2,r3,r2
   21e14:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   21e18:	e13f7017 	ldw	r4,-576(fp)
   21e1c:	017137c4 	movi	r5,-15137
   21e20:	002c1540 	call	2c154 <__mulsi3>
   21e24:	1007883a 	mov	r3,r2
   21e28:	e0bf6817 	ldw	r2,-608(fp)
   21e2c:	1885883a 	add	r2,r3,r2
   21e30:	e0bf7215 	stw	r2,-568(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   21e34:	e0bf6417 	ldw	r2,-624(fp)
   21e38:	10800017 	ldw	r2,0(r2)
   21e3c:	10800404 	addi	r2,r2,16
   21e40:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[4];
   21e44:	e0bf6417 	ldw	r2,-624(fp)
   21e48:	10800404 	addi	r2,r2,16
   21e4c:	10800017 	ldw	r2,0(r2)
   21e50:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
   21e54:	e0ff6f17 	ldw	r3,-580(fp)
   21e58:	e0bf7017 	ldw	r2,-576(fp)
   21e5c:	1885883a 	add	r2,r3,r2
   21e60:	1004937a 	slli	r2,r2,13
   21e64:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
   21e68:	e0ff6f17 	ldw	r3,-580(fp)
   21e6c:	e0bf7017 	ldw	r2,-576(fp)
   21e70:	1885c83a 	sub	r2,r3,r2
   21e74:	1004937a 	slli	r2,r2,13
   21e78:	e0bf6915 	stw	r2,-604(fp)

		tmp10 = tmp0 + tmp2;
   21e7c:	e0ff6717 	ldw	r3,-612(fp)
   21e80:	e0bf6a17 	ldw	r2,-600(fp)
   21e84:	1885883a 	add	r2,r3,r2
   21e88:	e0bf6b15 	stw	r2,-596(fp)
		tmp13 = tmp0 - tmp2;
   21e8c:	e0ff6717 	ldw	r3,-612(fp)
   21e90:	e0bf6a17 	ldw	r2,-600(fp)
   21e94:	1885c83a 	sub	r2,r3,r2
   21e98:	e0bf6e15 	stw	r2,-584(fp)
		tmp11 = tmp1 + tmp3;
   21e9c:	e0ff6917 	ldw	r3,-604(fp)
   21ea0:	e0bf7217 	ldw	r2,-568(fp)
   21ea4:	1885883a 	add	r2,r3,r2
   21ea8:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp1 - tmp3;
   21eac:	e0ff6917 	ldw	r3,-604(fp)
   21eb0:	e0bf7217 	ldw	r2,-568(fp)
   21eb4:	1885c83a 	sub	r2,r3,r2
   21eb8:	e0bf6d15 	stw	r2,-588(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
   21ebc:	e0bf6417 	ldw	r2,-624(fp)
   21ec0:	10800704 	addi	r2,r2,28
   21ec4:	10800017 	ldw	r2,0(r2)
   21ec8:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = (INT32) wsptr[5];
   21ecc:	e0bf6417 	ldw	r2,-624(fp)
   21ed0:	10800504 	addi	r2,r2,20
   21ed4:	10800017 	ldw	r2,0(r2)
   21ed8:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = (INT32) wsptr[3];
   21edc:	e0bf6417 	ldw	r2,-624(fp)
   21ee0:	10800304 	addi	r2,r2,12
   21ee4:	10800017 	ldw	r2,0(r2)
   21ee8:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = (INT32) wsptr[1];
   21eec:	e0bf6417 	ldw	r2,-624(fp)
   21ef0:	10800104 	addi	r2,r2,4
   21ef4:	10800017 	ldw	r2,0(r2)
   21ef8:	e0bf7215 	stw	r2,-568(fp)

		z2 = tmp0 + tmp2;
   21efc:	e0ff6717 	ldw	r3,-612(fp)
   21f00:	e0bf6a17 	ldw	r2,-600(fp)
   21f04:	1885883a 	add	r2,r3,r2
   21f08:	e0bf6f15 	stw	r2,-580(fp)
		z3 = tmp1 + tmp3;
   21f0c:	e0ff6917 	ldw	r3,-604(fp)
   21f10:	e0bf7217 	ldw	r2,-568(fp)
   21f14:	1885883a 	add	r2,r3,r2
   21f18:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   21f1c:	e0ff6f17 	ldw	r3,-580(fp)
   21f20:	e0bf7017 	ldw	r2,-576(fp)
   21f24:	1885883a 	add	r2,r3,r2
   21f28:	1009883a 	mov	r4,r2
   21f2c:	01496844 	movi	r5,9633
   21f30:	002c1540 	call	2c154 <__mulsi3>
   21f34:	e0bf6815 	stw	r2,-608(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   21f38:	e13f6f17 	ldw	r4,-580(fp)
   21f3c:	01704ec4 	movi	r5,-16069
   21f40:	002c1540 	call	2c154 <__mulsi3>
   21f44:	e0bf6f15 	stw	r2,-580(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   21f48:	e13f7017 	ldw	r4,-576(fp)
   21f4c:	017ce104 	movi	r5,-3196
   21f50:	002c1540 	call	2c154 <__mulsi3>
   21f54:	e0bf7015 	stw	r2,-576(fp)
		z2 += z1;
   21f58:	e0ff6f17 	ldw	r3,-580(fp)
   21f5c:	e0bf6817 	ldw	r2,-608(fp)
   21f60:	1885883a 	add	r2,r3,r2
   21f64:	e0bf6f15 	stw	r2,-580(fp)
		z3 += z1;
   21f68:	e0ff7017 	ldw	r3,-576(fp)
   21f6c:	e0bf6817 	ldw	r2,-608(fp)
   21f70:	1885883a 	add	r2,r3,r2
   21f74:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   21f78:	e0ff6717 	ldw	r3,-612(fp)
   21f7c:	e0bf7217 	ldw	r2,-568(fp)
   21f80:	1885883a 	add	r2,r3,r2
   21f84:	1009883a 	mov	r4,r2
   21f88:	0178ccc4 	movi	r5,-7373
   21f8c:	002c1540 	call	2c154 <__mulsi3>
   21f90:	e0bf6815 	stw	r2,-608(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   21f94:	e13f6717 	ldw	r4,-612(fp)
   21f98:	01426384 	movi	r5,2446
   21f9c:	002c1540 	call	2c154 <__mulsi3>
   21fa0:	e0bf6715 	stw	r2,-612(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   21fa4:	e13f7217 	ldw	r4,-568(fp)
   21fa8:	014c02c4 	movi	r5,12299
   21fac:	002c1540 	call	2c154 <__mulsi3>
   21fb0:	e0bf7215 	stw	r2,-568(fp)
		tmp0 += z1 + z2;
   21fb4:	e0ff6817 	ldw	r3,-608(fp)
   21fb8:	e0bf6f17 	ldw	r2,-580(fp)
   21fbc:	1885883a 	add	r2,r3,r2
   21fc0:	e0ff6717 	ldw	r3,-612(fp)
   21fc4:	1885883a 	add	r2,r3,r2
   21fc8:	e0bf6715 	stw	r2,-612(fp)
		tmp3 += z1 + z3;
   21fcc:	e0ff6817 	ldw	r3,-608(fp)
   21fd0:	e0bf7017 	ldw	r2,-576(fp)
   21fd4:	1885883a 	add	r2,r3,r2
   21fd8:	e0ff7217 	ldw	r3,-568(fp)
   21fdc:	1885883a 	add	r2,r3,r2
   21fe0:	e0bf7215 	stw	r2,-568(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   21fe4:	e0ff6917 	ldw	r3,-604(fp)
   21fe8:	e0bf6a17 	ldw	r2,-600(fp)
   21fec:	1885883a 	add	r2,r3,r2
   21ff0:	1009883a 	mov	r4,r2
   21ff4:	016b7f44 	movi	r5,-20995
   21ff8:	002c1540 	call	2c154 <__mulsi3>
   21ffc:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   22000:	e13f6917 	ldw	r4,-604(fp)
   22004:	01506cc4 	movi	r5,16819
   22008:	002c1540 	call	2c154 <__mulsi3>
   2200c:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   22010:	e13f6a17 	ldw	r4,-600(fp)
   22014:	01589504 	movi	r5,25172
   22018:	002c1540 	call	2c154 <__mulsi3>
   2201c:	e0bf6a15 	stw	r2,-600(fp)
		tmp1 += z1 + z3;
   22020:	e0ff6817 	ldw	r3,-608(fp)
   22024:	e0bf7017 	ldw	r2,-576(fp)
   22028:	1885883a 	add	r2,r3,r2
   2202c:	e0ff6917 	ldw	r3,-604(fp)
   22030:	1885883a 	add	r2,r3,r2
   22034:	e0bf6915 	stw	r2,-604(fp)
		tmp2 += z1 + z2;
   22038:	e0ff6817 	ldw	r3,-608(fp)
   2203c:	e0bf6f17 	ldw	r2,-580(fp)
   22040:	1885883a 	add	r2,r3,r2
   22044:	e0ff6a17 	ldw	r3,-600(fp)
   22048:	1885883a 	add	r2,r3,r2
   2204c:	e0bf6a15 	stw	r2,-600(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
   22050:	e0ff6b17 	ldw	r3,-596(fp)
   22054:	e0bf7217 	ldw	r2,-568(fp)
   22058:	1885883a 	add	r2,r3,r2
   2205c:	1005d4ba 	srai	r2,r2,18
   22060:	1080ffcc 	andi	r2,r2,1023
   22064:	e0ff6617 	ldw	r3,-616(fp)
   22068:	1885883a 	add	r2,r3,r2
   2206c:	10c00003 	ldbu	r3,0(r2)
   22070:	e0bf7b17 	ldw	r2,-532(fp)
   22074:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
   22078:	e0bf7b17 	ldw	r2,-532(fp)
   2207c:	108001c4 	addi	r2,r2,7
   22080:	e13f6b17 	ldw	r4,-596(fp)
   22084:	e0ff7217 	ldw	r3,-568(fp)
   22088:	20c7c83a 	sub	r3,r4,r3
   2208c:	1807d4ba 	srai	r3,r3,18
   22090:	18c0ffcc 	andi	r3,r3,1023
   22094:	e13f6617 	ldw	r4,-616(fp)
   22098:	20c7883a 	add	r3,r4,r3
   2209c:	18c00003 	ldbu	r3,0(r3)
   220a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
   220a4:	e0bf7b17 	ldw	r2,-532(fp)
   220a8:	10800044 	addi	r2,r2,1
   220ac:	e13f6c17 	ldw	r4,-592(fp)
   220b0:	e0ff6a17 	ldw	r3,-600(fp)
   220b4:	20c7883a 	add	r3,r4,r3
   220b8:	1807d4ba 	srai	r3,r3,18
   220bc:	18c0ffcc 	andi	r3,r3,1023
   220c0:	e13f6617 	ldw	r4,-616(fp)
   220c4:	20c7883a 	add	r3,r4,r3
   220c8:	18c00003 	ldbu	r3,0(r3)
   220cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
   220d0:	e0bf7b17 	ldw	r2,-532(fp)
   220d4:	10800184 	addi	r2,r2,6
   220d8:	e13f6c17 	ldw	r4,-592(fp)
   220dc:	e0ff6a17 	ldw	r3,-600(fp)
   220e0:	20c7c83a 	sub	r3,r4,r3
   220e4:	1807d4ba 	srai	r3,r3,18
   220e8:	18c0ffcc 	andi	r3,r3,1023
   220ec:	e13f6617 	ldw	r4,-616(fp)
   220f0:	20c7883a 	add	r3,r4,r3
   220f4:	18c00003 	ldbu	r3,0(r3)
   220f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
   220fc:	e0bf7b17 	ldw	r2,-532(fp)
   22100:	10800084 	addi	r2,r2,2
   22104:	e13f6d17 	ldw	r4,-588(fp)
   22108:	e0ff6917 	ldw	r3,-604(fp)
   2210c:	20c7883a 	add	r3,r4,r3
   22110:	1807d4ba 	srai	r3,r3,18
   22114:	18c0ffcc 	andi	r3,r3,1023
   22118:	e13f6617 	ldw	r4,-616(fp)
   2211c:	20c7883a 	add	r3,r4,r3
   22120:	18c00003 	ldbu	r3,0(r3)
   22124:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
   22128:	e0bf7b17 	ldw	r2,-532(fp)
   2212c:	10800144 	addi	r2,r2,5
   22130:	e13f6d17 	ldw	r4,-588(fp)
   22134:	e0ff6917 	ldw	r3,-604(fp)
   22138:	20c7c83a 	sub	r3,r4,r3
   2213c:	1807d4ba 	srai	r3,r3,18
   22140:	18c0ffcc 	andi	r3,r3,1023
   22144:	e13f6617 	ldw	r4,-616(fp)
   22148:	20c7883a 	add	r3,r4,r3
   2214c:	18c00003 	ldbu	r3,0(r3)
   22150:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
   22154:	e0bf7b17 	ldw	r2,-532(fp)
   22158:	108000c4 	addi	r2,r2,3
   2215c:	e13f6e17 	ldw	r4,-584(fp)
   22160:	e0ff6717 	ldw	r3,-612(fp)
   22164:	20c7883a 	add	r3,r4,r3
   22168:	1807d4ba 	srai	r3,r3,18
   2216c:	18c0ffcc 	andi	r3,r3,1023
   22170:	e13f6617 	ldw	r4,-616(fp)
   22174:	20c7883a 	add	r3,r4,r3
   22178:	18c00003 	ldbu	r3,0(r3)
   2217c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
   22180:	e0bf7b17 	ldw	r2,-532(fp)
   22184:	10800104 	addi	r2,r2,4
   22188:	e13f6e17 	ldw	r4,-584(fp)
   2218c:	e0ff6717 	ldw	r3,-612(fp)
   22190:	20c7c83a 	sub	r3,r4,r3
   22194:	1807d4ba 	srai	r3,r3,18
   22198:	18c0ffcc 	andi	r3,r3,1023
   2219c:	e13f6617 	ldw	r4,-616(fp)
   221a0:	20c7883a 	add	r3,r4,r3
   221a4:	18c00003 	ldbu	r3,0(r3)
   221a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
   221ac:	e0bf6417 	ldw	r2,-624(fp)
   221b0:	10800804 	addi	r2,r2,32
   221b4:	e0bf6415 	stw	r2,-624(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < 16; ctr++) {
   221b8:	e0bf6517 	ldw	r2,-620(fp)
   221bc:	10800044 	addi	r2,r2,1
   221c0:	e0bf6515 	stw	r2,-620(fp)
   221c4:	e0bf6517 	ldw	r2,-620(fp)
   221c8:	10800410 	cmplti	r2,r2,16
   221cc:	103ef31e 	bne	r2,zero,21d9c <jpeg_idct_8x16+0x858>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
   221d0:	e037883a 	mov	sp,fp
   221d4:	dfc00217 	ldw	ra,8(sp)
   221d8:	df000117 	ldw	fp,4(sp)
   221dc:	dc000017 	ldw	r16,0(sp)
   221e0:	dec00304 	addi	sp,sp,12
   221e4:	f800283a 	ret

000221e8 <jpeg_idct_7x14>:

GLOBAL(void)
	jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   221e8:	deff7f04 	addi	sp,sp,-516
   221ec:	dfc08015 	stw	ra,512(sp)
   221f0:	df007f15 	stw	fp,508(sp)
   221f4:	dc007e15 	stw	r16,504(sp)
   221f8:	df007e04 	addi	fp,sp,504
   221fc:	e13ffc15 	stw	r4,-16(fp)
   22200:	e17ffd15 	stw	r5,-12(fp)
   22204:	e1bffe15 	stw	r6,-8(fp)
   22208:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   2220c:	e0bffc17 	ldw	r2,-16(fp)
   22210:	10804917 	ldw	r2,292(r2)
   22214:	10802004 	addi	r2,r2,128
   22218:	e0bf8615 	stw	r2,-488(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
		*/
		inptr = coef_block;
   2221c:	e0bffe17 	ldw	r2,-8(fp)
   22220:	e0bf8215 	stw	r2,-504(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   22224:	e0bffd17 	ldw	r2,-12(fp)
   22228:	10801517 	ldw	r2,84(r2)
   2222c:	e0bf8315 	stw	r2,-500(fp)
	wsptr = workspace;
   22230:	e0bf9a04 	addi	r2,fp,-408
   22234:	e0bf8415 	stw	r2,-496(fp)
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
   22238:	e03f8515 	stw	zero,-492(fp)
   2223c:	0001a506 	br	228d4 <jpeg_idct_7x14+0x6ec>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   22240:	e0bf8217 	ldw	r2,-504(fp)
   22244:	1080000b 	ldhu	r2,0(r2)
   22248:	10ffffcc 	andi	r3,r2,65535
   2224c:	18e0001c 	xori	r3,r3,32768
   22250:	18e00004 	addi	r3,r3,-32768
   22254:	e0bf8317 	ldw	r2,-500(fp)
   22258:	10800017 	ldw	r2,0(r2)
   2225c:	1809883a 	mov	r4,r3
   22260:	100b883a 	mov	r5,r2
   22264:	002c1540 	call	2c154 <__mulsi3>
   22268:	e0bf8715 	stw	r2,-484(fp)
		z1 <<= CONST_BITS;
   2226c:	e0bf8717 	ldw	r2,-484(fp)
   22270:	1004937a 	slli	r2,r2,13
   22274:	e0bf8715 	stw	r2,-484(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
   22278:	e0bf8717 	ldw	r2,-484(fp)
   2227c:	10810004 	addi	r2,r2,1024
   22280:	e0bf8715 	stw	r2,-484(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   22284:	e0bf8217 	ldw	r2,-504(fp)
   22288:	10801004 	addi	r2,r2,64
   2228c:	1080000b 	ldhu	r2,0(r2)
   22290:	10ffffcc 	andi	r3,r2,65535
   22294:	18e0001c 	xori	r3,r3,32768
   22298:	18e00004 	addi	r3,r3,-32768
   2229c:	e0bf8317 	ldw	r2,-500(fp)
   222a0:	10802004 	addi	r2,r2,128
   222a4:	10800017 	ldw	r2,0(r2)
   222a8:	1809883a 	mov	r4,r3
   222ac:	100b883a 	mov	r5,r2
   222b0:	002c1540 	call	2c154 <__mulsi3>
   222b4:	e0bf8815 	stw	r2,-480(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
   222b8:	e13f8817 	ldw	r4,-480(fp)
   222bc:	014a3184 	movi	r5,10438
   222c0:	002c1540 	call	2c154 <__mulsi3>
   222c4:	e0bf8915 	stw	r2,-476(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
   222c8:	e13f8817 	ldw	r4,-480(fp)
   222cc:	01428484 	movi	r5,2578
   222d0:	002c1540 	call	2c154 <__mulsi3>
   222d4:	e0bf8a15 	stw	r2,-472(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
   222d8:	e13f8817 	ldw	r4,-480(fp)
   222dc:	01470dc4 	movi	r5,7223
   222e0:	002c1540 	call	2c154 <__mulsi3>
   222e4:	e0bf8815 	stw	r2,-480(fp)

		tmp10 = z1 + z2;
   222e8:	e0ff8717 	ldw	r3,-484(fp)
   222ec:	e0bf8917 	ldw	r2,-476(fp)
   222f0:	1885883a 	add	r2,r3,r2
   222f4:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z1 + z3;
   222f8:	e0ff8717 	ldw	r3,-484(fp)
   222fc:	e0bf8a17 	ldw	r2,-472(fp)
   22300:	1885883a 	add	r2,r3,r2
   22304:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = z1 - z4;
   22308:	e0ff8717 	ldw	r3,-484(fp)
   2230c:	e0bf8817 	ldw	r2,-480(fp)
   22310:	1885c83a 	sub	r2,r3,r2
   22314:	e0bf8d15 	stw	r2,-460(fp)

		tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
   22318:	e0ff8917 	ldw	r3,-476(fp)
   2231c:	e0bf8a17 	ldw	r2,-472(fp)
   22320:	1887883a 	add	r3,r3,r2
   22324:	e0bf8817 	ldw	r2,-480(fp)
   22328:	1885c83a 	sub	r2,r3,r2
   2232c:	1085883a 	add	r2,r2,r2
   22330:	e0ff8717 	ldw	r3,-484(fp)
   22334:	1885c83a 	sub	r2,r3,r2
   22338:	1005d2fa 	srai	r2,r2,11
   2233c:	e0bf8e15 	stw	r2,-456(fp)
			CONST_BITS-PASS1_BITS);

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   22340:	e0bf8217 	ldw	r2,-504(fp)
   22344:	10800804 	addi	r2,r2,32
   22348:	1080000b 	ldhu	r2,0(r2)
   2234c:	10ffffcc 	andi	r3,r2,65535
   22350:	18e0001c 	xori	r3,r3,32768
   22354:	18e00004 	addi	r3,r3,-32768
   22358:	e0bf8317 	ldw	r2,-500(fp)
   2235c:	10801004 	addi	r2,r2,64
   22360:	10800017 	ldw	r2,0(r2)
   22364:	1809883a 	mov	r4,r3
   22368:	100b883a 	mov	r5,r2
   2236c:	002c1540 	call	2c154 <__mulsi3>
   22370:	e0bf8715 	stw	r2,-484(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   22374:	e0bf8217 	ldw	r2,-504(fp)
   22378:	10801804 	addi	r2,r2,96
   2237c:	1080000b 	ldhu	r2,0(r2)
   22380:	10ffffcc 	andi	r3,r2,65535
   22384:	18e0001c 	xori	r3,r3,32768
   22388:	18e00004 	addi	r3,r3,-32768
   2238c:	e0bf8317 	ldw	r2,-500(fp)
   22390:	10803004 	addi	r2,r2,192
   22394:	10800017 	ldw	r2,0(r2)
   22398:	1809883a 	mov	r4,r3
   2239c:	100b883a 	mov	r5,r2
   223a0:	002c1540 	call	2c154 <__mulsi3>
   223a4:	e0bf8915 	stw	r2,-476(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
   223a8:	e0ff8717 	ldw	r3,-484(fp)
   223ac:	e0bf8917 	ldw	r2,-476(fp)
   223b0:	1885883a 	add	r2,r3,r2
   223b4:	1009883a 	mov	r4,r2
   223b8:	0148d884 	movi	r5,9058
   223bc:	002c1540 	call	2c154 <__mulsi3>
   223c0:	e0bf8a15 	stw	r2,-472(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
   223c4:	e13f8717 	ldw	r4,-484(fp)
   223c8:	01422f44 	movi	r5,2237
   223cc:	002c1540 	call	2c154 <__mulsi3>
   223d0:	1007883a 	mov	r3,r2
   223d4:	e0bf8a17 	ldw	r2,-472(fp)
   223d8:	1885883a 	add	r2,r3,r2
   223dc:	e0bf8f15 	stw	r2,-452(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
   223e0:	e13f8917 	ldw	r4,-476(fp)
   223e4:	01723f04 	movi	r5,-14084
   223e8:	002c1540 	call	2c154 <__mulsi3>
   223ec:	1007883a 	mov	r3,r2
   223f0:	e0bf8a17 	ldw	r2,-472(fp)
   223f4:	1885883a 	add	r2,r3,r2
   223f8:	e0bf9015 	stw	r2,-448(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   223fc:	e13f8717 	ldw	r4,-484(fp)
   22400:	0144e8c4 	movi	r5,5027
   22404:	002c1540 	call	2c154 <__mulsi3>
   22408:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
   2240c:	e13f8917 	ldw	r4,-476(fp)
   22410:	0174f844 	movi	r5,-11295
   22414:	002c1540 	call	2c154 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
   22418:	8085883a 	add	r2,r16,r2
   2241c:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
   22420:	e0ff8b17 	ldw	r3,-468(fp)
   22424:	e0bf8f17 	ldw	r2,-452(fp)
   22428:	1885883a 	add	r2,r3,r2
   2242c:	e0bf9215 	stw	r2,-440(fp)
		tmp26 = tmp10 - tmp13;
   22430:	e0ff8b17 	ldw	r3,-468(fp)
   22434:	e0bf8f17 	ldw	r2,-452(fp)
   22438:	1885c83a 	sub	r2,r3,r2
   2243c:	e0bf9315 	stw	r2,-436(fp)
		tmp21 = tmp11 + tmp14;
   22440:	e0ff8c17 	ldw	r3,-464(fp)
   22444:	e0bf9017 	ldw	r2,-448(fp)
   22448:	1885883a 	add	r2,r3,r2
   2244c:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp11 - tmp14;
   22450:	e0ff8c17 	ldw	r3,-464(fp)
   22454:	e0bf9017 	ldw	r2,-448(fp)
   22458:	1885c83a 	sub	r2,r3,r2
   2245c:	e0bf9515 	stw	r2,-428(fp)
		tmp22 = tmp12 + tmp15;
   22460:	e0ff8d17 	ldw	r3,-460(fp)
   22464:	e0bf9117 	ldw	r2,-444(fp)
   22468:	1885883a 	add	r2,r3,r2
   2246c:	e0bf9615 	stw	r2,-424(fp)
		tmp24 = tmp12 - tmp15;
   22470:	e0ff8d17 	ldw	r3,-460(fp)
   22474:	e0bf9117 	ldw	r2,-444(fp)
   22478:	1885c83a 	sub	r2,r3,r2
   2247c:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   22480:	e0bf8217 	ldw	r2,-504(fp)
   22484:	10800404 	addi	r2,r2,16
   22488:	1080000b 	ldhu	r2,0(r2)
   2248c:	10ffffcc 	andi	r3,r2,65535
   22490:	18e0001c 	xori	r3,r3,32768
   22494:	18e00004 	addi	r3,r3,-32768
   22498:	e0bf8317 	ldw	r2,-500(fp)
   2249c:	10800804 	addi	r2,r2,32
   224a0:	10800017 	ldw	r2,0(r2)
   224a4:	1809883a 	mov	r4,r3
   224a8:	100b883a 	mov	r5,r2
   224ac:	002c1540 	call	2c154 <__mulsi3>
   224b0:	e0bf8715 	stw	r2,-484(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   224b4:	e0bf8217 	ldw	r2,-504(fp)
   224b8:	10800c04 	addi	r2,r2,48
   224bc:	1080000b 	ldhu	r2,0(r2)
   224c0:	10ffffcc 	andi	r3,r2,65535
   224c4:	18e0001c 	xori	r3,r3,32768
   224c8:	18e00004 	addi	r3,r3,-32768
   224cc:	e0bf8317 	ldw	r2,-500(fp)
   224d0:	10801804 	addi	r2,r2,96
   224d4:	10800017 	ldw	r2,0(r2)
   224d8:	1809883a 	mov	r4,r3
   224dc:	100b883a 	mov	r5,r2
   224e0:	002c1540 	call	2c154 <__mulsi3>
   224e4:	e0bf8915 	stw	r2,-476(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   224e8:	e0bf8217 	ldw	r2,-504(fp)
   224ec:	10801404 	addi	r2,r2,80
   224f0:	1080000b 	ldhu	r2,0(r2)
   224f4:	10ffffcc 	andi	r3,r2,65535
   224f8:	18e0001c 	xori	r3,r3,32768
   224fc:	18e00004 	addi	r3,r3,-32768
   22500:	e0bf8317 	ldw	r2,-500(fp)
   22504:	10802804 	addi	r2,r2,160
   22508:	10800017 	ldw	r2,0(r2)
   2250c:	1809883a 	mov	r4,r3
   22510:	100b883a 	mov	r5,r2
   22514:	002c1540 	call	2c154 <__mulsi3>
   22518:	e0bf8a15 	stw	r2,-472(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   2251c:	e0bf8217 	ldw	r2,-504(fp)
   22520:	10801c04 	addi	r2,r2,112
   22524:	1080000b 	ldhu	r2,0(r2)
   22528:	10ffffcc 	andi	r3,r2,65535
   2252c:	18e0001c 	xori	r3,r3,32768
   22530:	18e00004 	addi	r3,r3,-32768
   22534:	e0bf8317 	ldw	r2,-500(fp)
   22538:	10803804 	addi	r2,r2,224
   2253c:	10800017 	ldw	r2,0(r2)
   22540:	1809883a 	mov	r4,r3
   22544:	100b883a 	mov	r5,r2
   22548:	002c1540 	call	2c154 <__mulsi3>
   2254c:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = z4 << CONST_BITS;
   22550:	e0bf8817 	ldw	r2,-480(fp)
   22554:	1004937a 	slli	r2,r2,13
   22558:	e0bf8f15 	stw	r2,-452(fp)

		tmp14 = z1 + z3;
   2255c:	e0ff8717 	ldw	r3,-484(fp)
   22560:	e0bf8a17 	ldw	r2,-472(fp)
   22564:	1885883a 	add	r2,r3,r2
   22568:	e0bf9015 	stw	r2,-448(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
   2256c:	e0ff8717 	ldw	r3,-484(fp)
   22570:	e0bf8917 	ldw	r2,-476(fp)
   22574:	1885883a 	add	r2,r3,r2
   22578:	1009883a 	mov	r4,r2
   2257c:	014aadc4 	movi	r5,10935
   22580:	002c1540 	call	2c154 <__mulsi3>
   22584:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
   22588:	e13f9017 	ldw	r4,-448(fp)
   2258c:	01499484 	movi	r5,9810
   22590:	002c1540 	call	2c154 <__mulsi3>
   22594:	e0bf8d15 	stw	r2,-460(fp)
		tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
   22598:	e0ff8c17 	ldw	r3,-464(fp)
   2259c:	e0bf8d17 	ldw	r2,-460(fp)
   225a0:	1887883a 	add	r3,r3,r2
   225a4:	e0bf8f17 	ldw	r2,-452(fp)
   225a8:	18a1883a 	add	r16,r3,r2
   225ac:	e13f8717 	ldw	r4,-484(fp)
   225b0:	0176fc04 	movi	r5,-9232
   225b4:	002c1540 	call	2c154 <__mulsi3>
   225b8:	8085883a 	add	r2,r16,r2
   225bc:	e0bf8b15 	stw	r2,-468(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
   225c0:	e13f9017 	ldw	r4,-448(fp)
   225c4:	01460504 	movi	r5,6164
   225c8:	002c1540 	call	2c154 <__mulsi3>
   225cc:	e0bf9015 	stw	r2,-448(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
   225d0:	e13f8717 	ldw	r4,-484(fp)
   225d4:	017782c4 	movi	r5,-8693
   225d8:	002c1540 	call	2c154 <__mulsi3>
   225dc:	1007883a 	mov	r3,r2
   225e0:	e0bf9017 	ldw	r2,-448(fp)
   225e4:	1885883a 	add	r2,r3,r2
   225e8:	e0bf9815 	stw	r2,-416(fp)
		z1    -= z2;
   225ec:	e0ff8717 	ldw	r3,-484(fp)
   225f0:	e0bf8917 	ldw	r2,-476(fp)
   225f4:	1885c83a 	sub	r2,r3,r2
   225f8:	e0bf8715 	stw	r2,-484(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
   225fc:	e13f8717 	ldw	r4,-484(fp)
   22600:	0143bc84 	movi	r5,3826
   22604:	002c1540 	call	2c154 <__mulsi3>
   22608:	1007883a 	mov	r3,r2
   2260c:	e0bf8f17 	ldw	r2,-452(fp)
   22610:	1885c83a 	sub	r2,r3,r2
   22614:	e0bf9115 	stw	r2,-444(fp)
		tmp16 += tmp15;
   22618:	e0ff9817 	ldw	r3,-416(fp)
   2261c:	e0bf9117 	ldw	r2,-444(fp)
   22620:	1885883a 	add	r2,r3,r2
   22624:	e0bf9815 	stw	r2,-416(fp)
		z1    += z4;
   22628:	e0ff8717 	ldw	r3,-484(fp)
   2262c:	e0bf8817 	ldw	r2,-480(fp)
   22630:	1885883a 	add	r2,r3,r2
   22634:	e0bf8715 	stw	r2,-484(fp)
		z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
   22638:	e0ff8917 	ldw	r3,-476(fp)
   2263c:	e0bf8a17 	ldw	r2,-472(fp)
   22640:	1885883a 	add	r2,r3,r2
   22644:	1009883a 	mov	r4,r2
   22648:	017ebbc4 	movi	r5,-1297
   2264c:	002c1540 	call	2c154 <__mulsi3>
   22650:	1007883a 	mov	r3,r2
   22654:	e0bf8f17 	ldw	r2,-452(fp)
   22658:	1885c83a 	sub	r2,r3,r2
   2265c:	e0bf8815 	stw	r2,-480(fp)
		tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
   22660:	e13f8917 	ldw	r4,-476(fp)
   22664:	017c9b84 	movi	r5,-3474
   22668:	002c1540 	call	2c154 <__mulsi3>
   2266c:	1007883a 	mov	r3,r2
   22670:	e0bf8817 	ldw	r2,-480(fp)
   22674:	1885883a 	add	r2,r3,r2
   22678:	e0ff8c17 	ldw	r3,-464(fp)
   2267c:	1885883a 	add	r2,r3,r2
   22680:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
   22684:	e13f8a17 	ldw	r4,-472(fp)
   22688:	016d0244 	movi	r5,-19447
   2268c:	002c1540 	call	2c154 <__mulsi3>
   22690:	1007883a 	mov	r3,r2
   22694:	e0bf8817 	ldw	r2,-480(fp)
   22698:	1885883a 	add	r2,r3,r2
   2269c:	e0ff8d17 	ldw	r3,-460(fp)
   226a0:	1885883a 	add	r2,r3,r2
   226a4:	e0bf8d15 	stw	r2,-460(fp)
		z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
   226a8:	e0ff8a17 	ldw	r3,-472(fp)
   226ac:	e0bf8917 	ldw	r2,-476(fp)
   226b0:	1885c83a 	sub	r2,r3,r2
   226b4:	1009883a 	mov	r4,r2
   226b8:	014b3e04 	movi	r5,11512
   226bc:	002c1540 	call	2c154 <__mulsi3>
   226c0:	e0bf8815 	stw	r2,-480(fp)
		tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
   226c4:	e0ff8817 	ldw	r3,-480(fp)
   226c8:	e0bf8f17 	ldw	r2,-452(fp)
   226cc:	18a1883a 	add	r16,r3,r2
   226d0:	e13f8a17 	ldw	r4,-472(fp)
   226d4:	01727984 	movi	r5,-13850
   226d8:	002c1540 	call	2c154 <__mulsi3>
   226dc:	8085883a 	add	r2,r16,r2
   226e0:	e0ff9017 	ldw	r3,-448(fp)
   226e4:	1885883a 	add	r2,r3,r2
   226e8:	e0bf9015 	stw	r2,-448(fp)
		tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
   226ec:	e13f8917 	ldw	r4,-476(fp)
   226f0:	01456644 	movi	r5,5529
   226f4:	002c1540 	call	2c154 <__mulsi3>
   226f8:	1007883a 	mov	r3,r2
   226fc:	e0bf8817 	ldw	r2,-480(fp)
   22700:	1885883a 	add	r2,r3,r2
   22704:	e0ff9117 	ldw	r3,-444(fp)
   22708:	1885883a 	add	r2,r3,r2
   2270c:	e0bf9115 	stw	r2,-444(fp)

		tmp13 = (z1 - z3) << PASS1_BITS;
   22710:	e0ff8717 	ldw	r3,-484(fp)
   22714:	e0bf8a17 	ldw	r2,-472(fp)
   22718:	1885c83a 	sub	r2,r3,r2
   2271c:	1085883a 	add	r2,r2,r2
   22720:	1085883a 	add	r2,r2,r2
   22724:	e0bf8f15 	stw	r2,-452(fp)

		/* Final output stage */

		wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   22728:	e0ff9217 	ldw	r3,-440(fp)
   2272c:	e0bf8b17 	ldw	r2,-468(fp)
   22730:	1885883a 	add	r2,r3,r2
   22734:	1007d2fa 	srai	r3,r2,11
   22738:	e0bf8417 	ldw	r2,-496(fp)
   2273c:	10c00015 	stw	r3,0(r2)
		wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   22740:	e0bf8417 	ldw	r2,-496(fp)
   22744:	10805b04 	addi	r2,r2,364
   22748:	e13f9217 	ldw	r4,-440(fp)
   2274c:	e0ff8b17 	ldw	r3,-468(fp)
   22750:	20c7c83a 	sub	r3,r4,r3
   22754:	1807d2fa 	srai	r3,r3,11
   22758:	10c00015 	stw	r3,0(r2)
		wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   2275c:	e0bf8417 	ldw	r2,-496(fp)
   22760:	10800704 	addi	r2,r2,28
   22764:	e13f9417 	ldw	r4,-432(fp)
   22768:	e0ff8c17 	ldw	r3,-464(fp)
   2276c:	20c7883a 	add	r3,r4,r3
   22770:	1807d2fa 	srai	r3,r3,11
   22774:	10c00015 	stw	r3,0(r2)
		wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   22778:	e0bf8417 	ldw	r2,-496(fp)
   2277c:	10805404 	addi	r2,r2,336
   22780:	e13f9417 	ldw	r4,-432(fp)
   22784:	e0ff8c17 	ldw	r3,-464(fp)
   22788:	20c7c83a 	sub	r3,r4,r3
   2278c:	1807d2fa 	srai	r3,r3,11
   22790:	10c00015 	stw	r3,0(r2)
		wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   22794:	e0bf8417 	ldw	r2,-496(fp)
   22798:	10800e04 	addi	r2,r2,56
   2279c:	e13f9617 	ldw	r4,-424(fp)
   227a0:	e0ff8d17 	ldw	r3,-460(fp)
   227a4:	20c7883a 	add	r3,r4,r3
   227a8:	1807d2fa 	srai	r3,r3,11
   227ac:	10c00015 	stw	r3,0(r2)
		wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   227b0:	e0bf8417 	ldw	r2,-496(fp)
   227b4:	10804d04 	addi	r2,r2,308
   227b8:	e13f9617 	ldw	r4,-424(fp)
   227bc:	e0ff8d17 	ldw	r3,-460(fp)
   227c0:	20c7c83a 	sub	r3,r4,r3
   227c4:	1807d2fa 	srai	r3,r3,11
   227c8:	10c00015 	stw	r3,0(r2)
		wsptr[7*3]  = (int) (tmp23 + tmp13);
   227cc:	e0bf8417 	ldw	r2,-496(fp)
   227d0:	10801504 	addi	r2,r2,84
   227d4:	e13f8e17 	ldw	r4,-456(fp)
   227d8:	e0ff8f17 	ldw	r3,-452(fp)
   227dc:	20c7883a 	add	r3,r4,r3
   227e0:	10c00015 	stw	r3,0(r2)
		wsptr[7*10] = (int) (tmp23 - tmp13);
   227e4:	e0bf8417 	ldw	r2,-496(fp)
   227e8:	10804604 	addi	r2,r2,280
   227ec:	e13f8e17 	ldw	r4,-456(fp)
   227f0:	e0ff8f17 	ldw	r3,-452(fp)
   227f4:	20c7c83a 	sub	r3,r4,r3
   227f8:	10c00015 	stw	r3,0(r2)
		wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   227fc:	e0bf8417 	ldw	r2,-496(fp)
   22800:	10801c04 	addi	r2,r2,112
   22804:	e13f9717 	ldw	r4,-420(fp)
   22808:	e0ff9017 	ldw	r3,-448(fp)
   2280c:	20c7883a 	add	r3,r4,r3
   22810:	1807d2fa 	srai	r3,r3,11
   22814:	10c00015 	stw	r3,0(r2)
		wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   22818:	e0bf8417 	ldw	r2,-496(fp)
   2281c:	10803f04 	addi	r2,r2,252
   22820:	e13f9717 	ldw	r4,-420(fp)
   22824:	e0ff9017 	ldw	r3,-448(fp)
   22828:	20c7c83a 	sub	r3,r4,r3
   2282c:	1807d2fa 	srai	r3,r3,11
   22830:	10c00015 	stw	r3,0(r2)
		wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   22834:	e0bf8417 	ldw	r2,-496(fp)
   22838:	10802304 	addi	r2,r2,140
   2283c:	e13f9517 	ldw	r4,-428(fp)
   22840:	e0ff9117 	ldw	r3,-444(fp)
   22844:	20c7883a 	add	r3,r4,r3
   22848:	1807d2fa 	srai	r3,r3,11
   2284c:	10c00015 	stw	r3,0(r2)
		wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   22850:	e0bf8417 	ldw	r2,-496(fp)
   22854:	10803804 	addi	r2,r2,224
   22858:	e13f9517 	ldw	r4,-428(fp)
   2285c:	e0ff9117 	ldw	r3,-444(fp)
   22860:	20c7c83a 	sub	r3,r4,r3
   22864:	1807d2fa 	srai	r3,r3,11
   22868:	10c00015 	stw	r3,0(r2)
		wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
   2286c:	e0bf8417 	ldw	r2,-496(fp)
   22870:	10802a04 	addi	r2,r2,168
   22874:	e13f9317 	ldw	r4,-436(fp)
   22878:	e0ff9817 	ldw	r3,-416(fp)
   2287c:	20c7883a 	add	r3,r4,r3
   22880:	1807d2fa 	srai	r3,r3,11
   22884:	10c00015 	stw	r3,0(r2)
		wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
   22888:	e0bf8417 	ldw	r2,-496(fp)
   2288c:	10803104 	addi	r2,r2,196
   22890:	e13f9317 	ldw	r4,-436(fp)
   22894:	e0ff9817 	ldw	r3,-416(fp)
   22898:	20c7c83a 	sub	r3,r4,r3
   2289c:	1807d2fa 	srai	r3,r3,11
   228a0:	10c00015 	stw	r3,0(r2)
		* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
   228a4:	e0bf8517 	ldw	r2,-492(fp)
   228a8:	10800044 	addi	r2,r2,1
   228ac:	e0bf8515 	stw	r2,-492(fp)
   228b0:	e0bf8217 	ldw	r2,-504(fp)
   228b4:	10800084 	addi	r2,r2,2
   228b8:	e0bf8215 	stw	r2,-504(fp)
   228bc:	e0bf8317 	ldw	r2,-500(fp)
   228c0:	10800104 	addi	r2,r2,4
   228c4:	e0bf8315 	stw	r2,-500(fp)
   228c8:	e0bf8417 	ldw	r2,-496(fp)
   228cc:	10800104 	addi	r2,r2,4
   228d0:	e0bf8415 	stw	r2,-496(fp)
   228d4:	e0bf8517 	ldw	r2,-492(fp)
   228d8:	108001d0 	cmplti	r2,r2,7
   228dc:	103e581e 	bne	r2,zero,22240 <jpeg_idct_7x14+0x58>
	}

	/* Pass 2: process 14 rows from work array, store into output array.
	* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
	*/
	wsptr = workspace;
   228e0:	e0bf9a04 	addi	r2,fp,-408
   228e4:	e0bf8415 	stw	r2,-496(fp)
	for (ctr = 0; ctr < 14; ctr++) {
   228e8:	e03f8515 	stw	zero,-492(fp)
   228ec:	0000ec06 	br	22ca0 <jpeg_idct_7x14+0xab8>
		outptr = output_buf[ctr] + output_col;
   228f0:	e0bf8517 	ldw	r2,-492(fp)
   228f4:	1085883a 	add	r2,r2,r2
   228f8:	1085883a 	add	r2,r2,r2
   228fc:	e0ffff17 	ldw	r3,-4(fp)
   22900:	1885883a 	add	r2,r3,r2
   22904:	10c00017 	ldw	r3,0(r2)
   22908:	e0800317 	ldw	r2,12(fp)
   2290c:	1885883a 	add	r2,r3,r2
   22910:	e0bf9915 	stw	r2,-412(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   22914:	e0bf8417 	ldw	r2,-496(fp)
   22918:	10800017 	ldw	r2,0(r2)
   2291c:	10800404 	addi	r2,r2,16
   22920:	e0bf8e15 	stw	r2,-456(fp)
		tmp23 <<= CONST_BITS;
   22924:	e0bf8e17 	ldw	r2,-456(fp)
   22928:	1004937a 	slli	r2,r2,13
   2292c:	e0bf8e15 	stw	r2,-456(fp)

		z1 = (INT32) wsptr[2];
   22930:	e0bf8417 	ldw	r2,-496(fp)
   22934:	10800204 	addi	r2,r2,8
   22938:	10800017 	ldw	r2,0(r2)
   2293c:	e0bf8715 	stw	r2,-484(fp)
		z2 = (INT32) wsptr[4];
   22940:	e0bf8417 	ldw	r2,-496(fp)
   22944:	10800404 	addi	r2,r2,16
   22948:	10800017 	ldw	r2,0(r2)
   2294c:	e0bf8915 	stw	r2,-476(fp)
		z3 = (INT32) wsptr[6];
   22950:	e0bf8417 	ldw	r2,-496(fp)
   22954:	10800604 	addi	r2,r2,24
   22958:	10800017 	ldw	r2,0(r2)
   2295c:	e0bf8a15 	stw	r2,-472(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
   22960:	e0ff8917 	ldw	r3,-476(fp)
   22964:	e0bf8a17 	ldw	r2,-472(fp)
   22968:	1885c83a 	sub	r2,r3,r2
   2296c:	1009883a 	mov	r4,r2
   22970:	01470dc4 	movi	r5,7223
   22974:	002c1540 	call	2c154 <__mulsi3>
   22978:	e0bf9215 	stw	r2,-440(fp)
		tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
   2297c:	e0ff8717 	ldw	r3,-484(fp)
   22980:	e0bf8917 	ldw	r2,-476(fp)
   22984:	1885c83a 	sub	r2,r3,r2
   22988:	1009883a 	mov	r4,r2
   2298c:	01428484 	movi	r5,2578
   22990:	002c1540 	call	2c154 <__mulsi3>
   22994:	e0bf9615 	stw	r2,-424(fp)
		tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
   22998:	e0ff9217 	ldw	r3,-440(fp)
   2299c:	e0bf9617 	ldw	r2,-424(fp)
   229a0:	1887883a 	add	r3,r3,r2
   229a4:	e0bf8e17 	ldw	r2,-456(fp)
   229a8:	18a1883a 	add	r16,r3,r2
   229ac:	e13f8917 	ldw	r4,-476(fp)
   229b0:	01714544 	movi	r5,-15083
   229b4:	002c1540 	call	2c154 <__mulsi3>
   229b8:	8085883a 	add	r2,r16,r2
   229bc:	e0bf9415 	stw	r2,-432(fp)
		tmp10 = z1 + z3;
   229c0:	e0ff8717 	ldw	r3,-484(fp)
   229c4:	e0bf8a17 	ldw	r2,-472(fp)
   229c8:	1885883a 	add	r2,r3,r2
   229cc:	e0bf8b15 	stw	r2,-468(fp)
		z2 -= tmp10;
   229d0:	e0ff8917 	ldw	r3,-476(fp)
   229d4:	e0bf8b17 	ldw	r2,-468(fp)
   229d8:	1885c83a 	sub	r2,r3,r2
   229dc:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
   229e0:	e13f8b17 	ldw	r4,-468(fp)
   229e4:	014a3184 	movi	r5,10438
   229e8:	002c1540 	call	2c154 <__mulsi3>
   229ec:	1007883a 	mov	r3,r2
   229f0:	e0bf8e17 	ldw	r2,-456(fp)
   229f4:	1885883a 	add	r2,r3,r2
   229f8:	e0bf8b15 	stw	r2,-468(fp)
		tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
   229fc:	e13f8a17 	ldw	r4,-472(fp)
   22a00:	017f60c4 	movi	r5,-637
   22a04:	002c1540 	call	2c154 <__mulsi3>
   22a08:	1007883a 	mov	r3,r2
   22a0c:	e0bf8b17 	ldw	r2,-468(fp)
   22a10:	1885883a 	add	r2,r3,r2
   22a14:	e0ff9217 	ldw	r3,-440(fp)
   22a18:	1885883a 	add	r2,r3,r2
   22a1c:	e0bf9215 	stw	r2,-440(fp)
		tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
   22a20:	e13f8717 	ldw	r4,-484(fp)
   22a24:	016c3c44 	movi	r5,-20239
   22a28:	002c1540 	call	2c154 <__mulsi3>
   22a2c:	1007883a 	mov	r3,r2
   22a30:	e0bf8b17 	ldw	r2,-468(fp)
   22a34:	1885883a 	add	r2,r3,r2
   22a38:	e0ff9617 	ldw	r3,-424(fp)
   22a3c:	1885883a 	add	r2,r3,r2
   22a40:	e0bf9615 	stw	r2,-424(fp)
		tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
   22a44:	e13f8917 	ldw	r4,-476(fp)
   22a48:	014b5044 	movi	r5,11585
   22a4c:	002c1540 	call	2c154 <__mulsi3>
   22a50:	e0ff8e17 	ldw	r3,-456(fp)
   22a54:	1885883a 	add	r2,r3,r2
   22a58:	e0bf8e15 	stw	r2,-456(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   22a5c:	e0bf8417 	ldw	r2,-496(fp)
   22a60:	10800104 	addi	r2,r2,4
   22a64:	10800017 	ldw	r2,0(r2)
   22a68:	e0bf8715 	stw	r2,-484(fp)
		z2 = (INT32) wsptr[3];
   22a6c:	e0bf8417 	ldw	r2,-496(fp)
   22a70:	10800304 	addi	r2,r2,12
   22a74:	10800017 	ldw	r2,0(r2)
   22a78:	e0bf8915 	stw	r2,-476(fp)
		z3 = (INT32) wsptr[5];
   22a7c:	e0bf8417 	ldw	r2,-496(fp)
   22a80:	10800504 	addi	r2,r2,20
   22a84:	10800017 	ldw	r2,0(r2)
   22a88:	e0bf8a15 	stw	r2,-472(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
   22a8c:	e0ff8717 	ldw	r3,-484(fp)
   22a90:	e0bf8917 	ldw	r2,-476(fp)
   22a94:	1885883a 	add	r2,r3,r2
   22a98:	1009883a 	mov	r4,r2
   22a9c:	01477bc4 	movi	r5,7663
   22aa0:	002c1540 	call	2c154 <__mulsi3>
   22aa4:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
   22aa8:	e0ff8717 	ldw	r3,-484(fp)
   22aac:	e0bf8917 	ldw	r2,-476(fp)
   22ab0:	1885c83a 	sub	r2,r3,r2
   22ab4:	1009883a 	mov	r4,r2
   22ab8:	01415cc4 	movi	r5,1395
   22abc:	002c1540 	call	2c154 <__mulsi3>
   22ac0:	e0bf8d15 	stw	r2,-460(fp)
		tmp10 = tmp11 - tmp12;
   22ac4:	e0ff8c17 	ldw	r3,-464(fp)
   22ac8:	e0bf8d17 	ldw	r2,-460(fp)
   22acc:	1885c83a 	sub	r2,r3,r2
   22ad0:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 += tmp12;
   22ad4:	e0ff8c17 	ldw	r3,-464(fp)
   22ad8:	e0bf8d17 	ldw	r2,-460(fp)
   22adc:	1885883a 	add	r2,r3,r2
   22ae0:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
   22ae4:	e0ff8917 	ldw	r3,-476(fp)
   22ae8:	e0bf8a17 	ldw	r2,-472(fp)
   22aec:	1885883a 	add	r2,r3,r2
   22af0:	1009883a 	mov	r4,r2
   22af4:	0174f844 	movi	r5,-11295
   22af8:	002c1540 	call	2c154 <__mulsi3>
   22afc:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 += tmp12;
   22b00:	e0ff8c17 	ldw	r3,-464(fp)
   22b04:	e0bf8d17 	ldw	r2,-460(fp)
   22b08:	1885883a 	add	r2,r3,r2
   22b0c:	e0bf8c15 	stw	r2,-464(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
   22b10:	e0ff8717 	ldw	r3,-484(fp)
   22b14:	e0bf8a17 	ldw	r2,-472(fp)
   22b18:	1885883a 	add	r2,r3,r2
   22b1c:	1009883a 	mov	r4,r2
   22b20:	0144e8c4 	movi	r5,5027
   22b24:	002c1540 	call	2c154 <__mulsi3>
   22b28:	e0bf8915 	stw	r2,-476(fp)
		tmp10 += z2;
   22b2c:	e0ff8b17 	ldw	r3,-468(fp)
   22b30:	e0bf8917 	ldw	r2,-476(fp)
   22b34:	1885883a 	add	r2,r3,r2
   22b38:	e0bf8b15 	stw	r2,-468(fp)
		tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
   22b3c:	e13f8a17 	ldw	r4,-472(fp)
   22b40:	014ef784 	movi	r5,15326
   22b44:	002c1540 	call	2c154 <__mulsi3>
   22b48:	1007883a 	mov	r3,r2
   22b4c:	e0bf8917 	ldw	r2,-476(fp)
   22b50:	1885883a 	add	r2,r3,r2
   22b54:	e0ff8d17 	ldw	r3,-460(fp)
   22b58:	1885883a 	add	r2,r3,r2
   22b5c:	e0bf8d15 	stw	r2,-460(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   22b60:	e0ff9217 	ldw	r3,-440(fp)
   22b64:	e0bf8b17 	ldw	r2,-468(fp)
   22b68:	1885883a 	add	r2,r3,r2
   22b6c:	1005d4ba 	srai	r2,r2,18
   22b70:	1080ffcc 	andi	r2,r2,1023
   22b74:	e0ff8617 	ldw	r3,-488(fp)
   22b78:	1885883a 	add	r2,r3,r2
   22b7c:	10c00003 	ldbu	r3,0(r2)
   22b80:	e0bf9917 	ldw	r2,-412(fp)
   22b84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   22b88:	e0bf9917 	ldw	r2,-412(fp)
   22b8c:	10800184 	addi	r2,r2,6
   22b90:	e13f9217 	ldw	r4,-440(fp)
   22b94:	e0ff8b17 	ldw	r3,-468(fp)
   22b98:	20c7c83a 	sub	r3,r4,r3
   22b9c:	1807d4ba 	srai	r3,r3,18
   22ba0:	18c0ffcc 	andi	r3,r3,1023
   22ba4:	e13f8617 	ldw	r4,-488(fp)
   22ba8:	20c7883a 	add	r3,r4,r3
   22bac:	18c00003 	ldbu	r3,0(r3)
   22bb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   22bb4:	e0bf9917 	ldw	r2,-412(fp)
   22bb8:	10800044 	addi	r2,r2,1
   22bbc:	e13f9417 	ldw	r4,-432(fp)
   22bc0:	e0ff8c17 	ldw	r3,-464(fp)
   22bc4:	20c7883a 	add	r3,r4,r3
   22bc8:	1807d4ba 	srai	r3,r3,18
   22bcc:	18c0ffcc 	andi	r3,r3,1023
   22bd0:	e13f8617 	ldw	r4,-488(fp)
   22bd4:	20c7883a 	add	r3,r4,r3
   22bd8:	18c00003 	ldbu	r3,0(r3)
   22bdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   22be0:	e0bf9917 	ldw	r2,-412(fp)
   22be4:	10800144 	addi	r2,r2,5
   22be8:	e13f9417 	ldw	r4,-432(fp)
   22bec:	e0ff8c17 	ldw	r3,-464(fp)
   22bf0:	20c7c83a 	sub	r3,r4,r3
   22bf4:	1807d4ba 	srai	r3,r3,18
   22bf8:	18c0ffcc 	andi	r3,r3,1023
   22bfc:	e13f8617 	ldw	r4,-488(fp)
   22c00:	20c7883a 	add	r3,r4,r3
   22c04:	18c00003 	ldbu	r3,0(r3)
   22c08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   22c0c:	e0bf9917 	ldw	r2,-412(fp)
   22c10:	10800084 	addi	r2,r2,2
   22c14:	e13f9617 	ldw	r4,-424(fp)
   22c18:	e0ff8d17 	ldw	r3,-460(fp)
   22c1c:	20c7883a 	add	r3,r4,r3
   22c20:	1807d4ba 	srai	r3,r3,18
   22c24:	18c0ffcc 	andi	r3,r3,1023
   22c28:	e13f8617 	ldw	r4,-488(fp)
   22c2c:	20c7883a 	add	r3,r4,r3
   22c30:	18c00003 	ldbu	r3,0(r3)
   22c34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   22c38:	e0bf9917 	ldw	r2,-412(fp)
   22c3c:	10800104 	addi	r2,r2,4
   22c40:	e13f9617 	ldw	r4,-424(fp)
   22c44:	e0ff8d17 	ldw	r3,-460(fp)
   22c48:	20c7c83a 	sub	r3,r4,r3
   22c4c:	1807d4ba 	srai	r3,r3,18
   22c50:	18c0ffcc 	andi	r3,r3,1023
   22c54:	e13f8617 	ldw	r4,-488(fp)
   22c58:	20c7883a 	add	r3,r4,r3
   22c5c:	18c00003 	ldbu	r3,0(r3)
   22c60:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
   22c64:	e0bf9917 	ldw	r2,-412(fp)
   22c68:	108000c4 	addi	r2,r2,3
   22c6c:	e0ff8e17 	ldw	r3,-456(fp)
   22c70:	1807d4ba 	srai	r3,r3,18
   22c74:	18c0ffcc 	andi	r3,r3,1023
   22c78:	e13f8617 	ldw	r4,-488(fp)
   22c7c:	20c7883a 	add	r3,r4,r3
   22c80:	18c00003 	ldbu	r3,0(r3)
   22c84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
   22c88:	e0bf8417 	ldw	r2,-496(fp)
   22c8c:	10800704 	addi	r2,r2,28
   22c90:	e0bf8415 	stw	r2,-496(fp)

	/* Pass 2: process 14 rows from work array, store into output array.
	* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 14; ctr++) {
   22c94:	e0bf8517 	ldw	r2,-492(fp)
   22c98:	10800044 	addi	r2,r2,1
   22c9c:	e0bf8515 	stw	r2,-492(fp)
   22ca0:	e0bf8517 	ldw	r2,-492(fp)
   22ca4:	10800390 	cmplti	r2,r2,14
   22ca8:	103f111e 	bne	r2,zero,228f0 <jpeg_idct_7x14+0x708>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
	}
}
   22cac:	e037883a 	mov	sp,fp
   22cb0:	dfc00217 	ldw	ra,8(sp)
   22cb4:	df000117 	ldw	fp,4(sp)
   22cb8:	dc000017 	ldw	r16,0(sp)
   22cbc:	dec00304 	addi	sp,sp,12
   22cc0:	f800283a 	ret

00022cc4 <jpeg_idct_6x12>:

GLOBAL(void)
	jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   22cc4:	deff9b04 	addi	sp,sp,-404
   22cc8:	dfc06415 	stw	ra,400(sp)
   22ccc:	df006315 	stw	fp,396(sp)
   22cd0:	dc006215 	stw	r16,392(sp)
   22cd4:	df006204 	addi	fp,sp,392
   22cd8:	e13ffc15 	stw	r4,-16(fp)
   22cdc:	e17ffd15 	stw	r5,-12(fp)
   22ce0:	e1bffe15 	stw	r6,-8(fp)
   22ce4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   22ce8:	e0bffc17 	ldw	r2,-16(fp)
   22cec:	10804917 	ldw	r2,292(r2)
   22cf0:	10802004 	addi	r2,r2,128
   22cf4:	e0bfa215 	stw	r2,-376(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
		*/
		inptr = coef_block;
   22cf8:	e0bffe17 	ldw	r2,-8(fp)
   22cfc:	e0bf9e15 	stw	r2,-392(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   22d00:	e0bffd17 	ldw	r2,-12(fp)
   22d04:	10801517 	ldw	r2,84(r2)
   22d08:	e0bf9f15 	stw	r2,-388(fp)
	wsptr = workspace;
   22d0c:	e0bfb404 	addi	r2,fp,-304
   22d10:	e0bfa015 	stw	r2,-384(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   22d14:	e03fa115 	stw	zero,-380(fp)
   22d18:	00016e06 	br	232d4 <jpeg_idct_6x12+0x610>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   22d1c:	e0bf9e17 	ldw	r2,-392(fp)
   22d20:	1080000b 	ldhu	r2,0(r2)
   22d24:	10ffffcc 	andi	r3,r2,65535
   22d28:	18e0001c 	xori	r3,r3,32768
   22d2c:	18e00004 	addi	r3,r3,-32768
   22d30:	e0bf9f17 	ldw	r2,-388(fp)
   22d34:	10800017 	ldw	r2,0(r2)
   22d38:	1809883a 	mov	r4,r3
   22d3c:	100b883a 	mov	r5,r2
   22d40:	002c1540 	call	2c154 <__mulsi3>
   22d44:	e0bfa315 	stw	r2,-372(fp)
		z3 <<= CONST_BITS;
   22d48:	e0bfa317 	ldw	r2,-372(fp)
   22d4c:	1004937a 	slli	r2,r2,13
   22d50:	e0bfa315 	stw	r2,-372(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
   22d54:	e0bfa317 	ldw	r2,-372(fp)
   22d58:	10810004 	addi	r2,r2,1024
   22d5c:	e0bfa315 	stw	r2,-372(fp)

		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   22d60:	e0bf9e17 	ldw	r2,-392(fp)
   22d64:	10801004 	addi	r2,r2,64
   22d68:	1080000b 	ldhu	r2,0(r2)
   22d6c:	10ffffcc 	andi	r3,r2,65535
   22d70:	18e0001c 	xori	r3,r3,32768
   22d74:	18e00004 	addi	r3,r3,-32768
   22d78:	e0bf9f17 	ldw	r2,-388(fp)
   22d7c:	10802004 	addi	r2,r2,128
   22d80:	10800017 	ldw	r2,0(r2)
   22d84:	1809883a 	mov	r4,r3
   22d88:	100b883a 	mov	r5,r2
   22d8c:	002c1540 	call	2c154 <__mulsi3>
   22d90:	e0bfa415 	stw	r2,-368(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
   22d94:	e13fa417 	ldw	r4,-368(fp)
   22d98:	0149cc44 	movi	r5,10033
   22d9c:	002c1540 	call	2c154 <__mulsi3>
   22da0:	e0bfa415 	stw	r2,-368(fp)

		tmp10 = z3 + z4;
   22da4:	e0ffa317 	ldw	r3,-372(fp)
   22da8:	e0bfa417 	ldw	r2,-368(fp)
   22dac:	1885883a 	add	r2,r3,r2
   22db0:	e0bfa515 	stw	r2,-364(fp)
		tmp11 = z3 - z4;
   22db4:	e0ffa317 	ldw	r3,-372(fp)
   22db8:	e0bfa417 	ldw	r2,-368(fp)
   22dbc:	1885c83a 	sub	r2,r3,r2
   22dc0:	e0bfa615 	stw	r2,-360(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   22dc4:	e0bf9e17 	ldw	r2,-392(fp)
   22dc8:	10800804 	addi	r2,r2,32
   22dcc:	1080000b 	ldhu	r2,0(r2)
   22dd0:	10ffffcc 	andi	r3,r2,65535
   22dd4:	18e0001c 	xori	r3,r3,32768
   22dd8:	18e00004 	addi	r3,r3,-32768
   22ddc:	e0bf9f17 	ldw	r2,-388(fp)
   22de0:	10801004 	addi	r2,r2,64
   22de4:	10800017 	ldw	r2,0(r2)
   22de8:	1809883a 	mov	r4,r3
   22dec:	100b883a 	mov	r5,r2
   22df0:	002c1540 	call	2c154 <__mulsi3>
   22df4:	e0bfa715 	stw	r2,-356(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
   22df8:	e13fa717 	ldw	r4,-356(fp)
   22dfc:	014aed84 	movi	r5,11190
   22e00:	002c1540 	call	2c154 <__mulsi3>
   22e04:	e0bfa415 	stw	r2,-368(fp)
		z1 <<= CONST_BITS;
   22e08:	e0bfa717 	ldw	r2,-356(fp)
   22e0c:	1004937a 	slli	r2,r2,13
   22e10:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   22e14:	e0bf9e17 	ldw	r2,-392(fp)
   22e18:	10801804 	addi	r2,r2,96
   22e1c:	1080000b 	ldhu	r2,0(r2)
   22e20:	10ffffcc 	andi	r3,r2,65535
   22e24:	18e0001c 	xori	r3,r3,32768
   22e28:	18e00004 	addi	r3,r3,-32768
   22e2c:	e0bf9f17 	ldw	r2,-388(fp)
   22e30:	10803004 	addi	r2,r2,192
   22e34:	10800017 	ldw	r2,0(r2)
   22e38:	1809883a 	mov	r4,r3
   22e3c:	100b883a 	mov	r5,r2
   22e40:	002c1540 	call	2c154 <__mulsi3>
   22e44:	e0bfa815 	stw	r2,-352(fp)
		z2 <<= CONST_BITS;
   22e48:	e0bfa817 	ldw	r2,-352(fp)
   22e4c:	1004937a 	slli	r2,r2,13
   22e50:	e0bfa815 	stw	r2,-352(fp)

		tmp12 = z1 - z2;
   22e54:	e0ffa717 	ldw	r3,-356(fp)
   22e58:	e0bfa817 	ldw	r2,-352(fp)
   22e5c:	1885c83a 	sub	r2,r3,r2
   22e60:	e0bfa915 	stw	r2,-348(fp)

		tmp21 = z3 + tmp12;
   22e64:	e0ffa317 	ldw	r3,-372(fp)
   22e68:	e0bfa917 	ldw	r2,-348(fp)
   22e6c:	1885883a 	add	r2,r3,r2
   22e70:	e0bfaa15 	stw	r2,-344(fp)
		tmp24 = z3 - tmp12;
   22e74:	e0ffa317 	ldw	r3,-372(fp)
   22e78:	e0bfa917 	ldw	r2,-348(fp)
   22e7c:	1885c83a 	sub	r2,r3,r2
   22e80:	e0bfab15 	stw	r2,-340(fp)

		tmp12 = z4 + z2;
   22e84:	e0ffa417 	ldw	r3,-368(fp)
   22e88:	e0bfa817 	ldw	r2,-352(fp)
   22e8c:	1885883a 	add	r2,r3,r2
   22e90:	e0bfa915 	stw	r2,-348(fp)

		tmp20 = tmp10 + tmp12;
   22e94:	e0ffa517 	ldw	r3,-364(fp)
   22e98:	e0bfa917 	ldw	r2,-348(fp)
   22e9c:	1885883a 	add	r2,r3,r2
   22ea0:	e0bfac15 	stw	r2,-336(fp)
		tmp25 = tmp10 - tmp12;
   22ea4:	e0ffa517 	ldw	r3,-364(fp)
   22ea8:	e0bfa917 	ldw	r2,-348(fp)
   22eac:	1885c83a 	sub	r2,r3,r2
   22eb0:	e0bfad15 	stw	r2,-332(fp)

		tmp12 = z4 - z1 - z2;
   22eb4:	e0ffa417 	ldw	r3,-368(fp)
   22eb8:	e0bfa717 	ldw	r2,-356(fp)
   22ebc:	1887c83a 	sub	r3,r3,r2
   22ec0:	e0bfa817 	ldw	r2,-352(fp)
   22ec4:	1885c83a 	sub	r2,r3,r2
   22ec8:	e0bfa915 	stw	r2,-348(fp)

		tmp22 = tmp11 + tmp12;
   22ecc:	e0ffa617 	ldw	r3,-360(fp)
   22ed0:	e0bfa917 	ldw	r2,-348(fp)
   22ed4:	1885883a 	add	r2,r3,r2
   22ed8:	e0bfae15 	stw	r2,-328(fp)
		tmp23 = tmp11 - tmp12;
   22edc:	e0ffa617 	ldw	r3,-360(fp)
   22ee0:	e0bfa917 	ldw	r2,-348(fp)
   22ee4:	1885c83a 	sub	r2,r3,r2
   22ee8:	e0bfaf15 	stw	r2,-324(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   22eec:	e0bf9e17 	ldw	r2,-392(fp)
   22ef0:	10800404 	addi	r2,r2,16
   22ef4:	1080000b 	ldhu	r2,0(r2)
   22ef8:	10ffffcc 	andi	r3,r2,65535
   22efc:	18e0001c 	xori	r3,r3,32768
   22f00:	18e00004 	addi	r3,r3,-32768
   22f04:	e0bf9f17 	ldw	r2,-388(fp)
   22f08:	10800804 	addi	r2,r2,32
   22f0c:	10800017 	ldw	r2,0(r2)
   22f10:	1809883a 	mov	r4,r3
   22f14:	100b883a 	mov	r5,r2
   22f18:	002c1540 	call	2c154 <__mulsi3>
   22f1c:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   22f20:	e0bf9e17 	ldw	r2,-392(fp)
   22f24:	10800c04 	addi	r2,r2,48
   22f28:	1080000b 	ldhu	r2,0(r2)
   22f2c:	10ffffcc 	andi	r3,r2,65535
   22f30:	18e0001c 	xori	r3,r3,32768
   22f34:	18e00004 	addi	r3,r3,-32768
   22f38:	e0bf9f17 	ldw	r2,-388(fp)
   22f3c:	10801804 	addi	r2,r2,96
   22f40:	10800017 	ldw	r2,0(r2)
   22f44:	1809883a 	mov	r4,r3
   22f48:	100b883a 	mov	r5,r2
   22f4c:	002c1540 	call	2c154 <__mulsi3>
   22f50:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   22f54:	e0bf9e17 	ldw	r2,-392(fp)
   22f58:	10801404 	addi	r2,r2,80
   22f5c:	1080000b 	ldhu	r2,0(r2)
   22f60:	10ffffcc 	andi	r3,r2,65535
   22f64:	18e0001c 	xori	r3,r3,32768
   22f68:	18e00004 	addi	r3,r3,-32768
   22f6c:	e0bf9f17 	ldw	r2,-388(fp)
   22f70:	10802804 	addi	r2,r2,160
   22f74:	10800017 	ldw	r2,0(r2)
   22f78:	1809883a 	mov	r4,r3
   22f7c:	100b883a 	mov	r5,r2
   22f80:	002c1540 	call	2c154 <__mulsi3>
   22f84:	e0bfa315 	stw	r2,-372(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   22f88:	e0bf9e17 	ldw	r2,-392(fp)
   22f8c:	10801c04 	addi	r2,r2,112
   22f90:	1080000b 	ldhu	r2,0(r2)
   22f94:	10ffffcc 	andi	r3,r2,65535
   22f98:	18e0001c 	xori	r3,r3,32768
   22f9c:	18e00004 	addi	r3,r3,-32768
   22fa0:	e0bf9f17 	ldw	r2,-388(fp)
   22fa4:	10803804 	addi	r2,r2,224
   22fa8:	10800017 	ldw	r2,0(r2)
   22fac:	1809883a 	mov	r4,r3
   22fb0:	100b883a 	mov	r5,r2
   22fb4:	002c1540 	call	2c154 <__mulsi3>
   22fb8:	e0bfa415 	stw	r2,-368(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
   22fbc:	e13fa817 	ldw	r4,-352(fp)
   22fc0:	014a73c4 	movi	r5,10703
   22fc4:	002c1540 	call	2c154 <__mulsi3>
   22fc8:	e0bfa615 	stw	r2,-360(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
   22fcc:	e13fa817 	ldw	r4,-352(fp)
   22fd0:	017babc4 	movi	r5,-4433
   22fd4:	002c1540 	call	2c154 <__mulsi3>
   22fd8:	e0bfb015 	stw	r2,-320(fp)

		tmp10 = z1 + z3;
   22fdc:	e0ffa717 	ldw	r3,-356(fp)
   22fe0:	e0bfa317 	ldw	r2,-372(fp)
   22fe4:	1885883a 	add	r2,r3,r2
   22fe8:	e0bfa515 	stw	r2,-364(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
   22fec:	e0ffa517 	ldw	r3,-364(fp)
   22ff0:	e0bfa417 	ldw	r2,-368(fp)
   22ff4:	1885883a 	add	r2,r3,r2
   22ff8:	1009883a 	mov	r4,r2
   22ffc:	0146e344 	movi	r5,7053
   23000:	002c1540 	call	2c154 <__mulsi3>
   23004:	e0bfb115 	stw	r2,-316(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
   23008:	e13fa517 	ldw	r4,-364(fp)
   2300c:	014216c4 	movi	r5,2139
   23010:	002c1540 	call	2c154 <__mulsi3>
   23014:	1007883a 	mov	r3,r2
   23018:	e0bfb117 	ldw	r2,-316(fp)
   2301c:	1885883a 	add	r2,r3,r2
   23020:	e0bfa915 	stw	r2,-348(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
   23024:	e0ffa917 	ldw	r3,-348(fp)
   23028:	e0bfa617 	ldw	r2,-360(fp)
   2302c:	18a1883a 	add	r16,r3,r2
   23030:	e13fa717 	ldw	r4,-356(fp)
   23034:	01423dc4 	movi	r5,2295
   23038:	002c1540 	call	2c154 <__mulsi3>
   2303c:	8085883a 	add	r2,r16,r2
   23040:	e0bfa515 	stw	r2,-364(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
   23044:	e0ffa317 	ldw	r3,-372(fp)
   23048:	e0bfa417 	ldw	r2,-368(fp)
   2304c:	1885883a 	add	r2,r3,r2
   23050:	1009883a 	mov	r4,r2
   23054:	0177a2c4 	movi	r5,-8565
   23058:	002c1540 	call	2c154 <__mulsi3>
   2305c:	e0bfb215 	stw	r2,-312(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
   23060:	e0ffb217 	ldw	r3,-312(fp)
   23064:	e0bfb017 	ldw	r2,-320(fp)
   23068:	18a1883a 	add	r16,r3,r2
   2306c:	e13fa317 	ldw	r4,-372(fp)
   23070:	01742c04 	movi	r5,-12112
   23074:	002c1540 	call	2c154 <__mulsi3>
   23078:	8085883a 	add	r2,r16,r2
   2307c:	e0ffa917 	ldw	r3,-348(fp)
   23080:	1885883a 	add	r2,r3,r2
   23084:	e0bfa915 	stw	r2,-348(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
   23088:	e0ffb117 	ldw	r3,-316(fp)
   2308c:	e0bfa617 	ldw	r2,-360(fp)
   23090:	18a1c83a 	sub	r16,r3,r2
   23094:	e13fa417 	ldw	r4,-368(fp)
   23098:	014cb184 	movi	r5,12998
   2309c:	002c1540 	call	2c154 <__mulsi3>
   230a0:	8085883a 	add	r2,r16,r2
   230a4:	e0ffb217 	ldw	r3,-312(fp)
   230a8:	1885883a 	add	r2,r3,r2
   230ac:	e0bfb215 	stw	r2,-312(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   230b0:	e13fa717 	ldw	r4,-356(fp)
   230b4:	017a9704 	movi	r5,-5540
   230b8:	002c1540 	call	2c154 <__mulsi3>
   230bc:	1007883a 	mov	r3,r2
   230c0:	e0bfb017 	ldw	r2,-320(fp)
   230c4:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
   230c8:	e13fa417 	ldw	r4,-368(fp)
   230cc:	01702304 	movi	r5,-16244
   230d0:	002c1540 	call	2c154 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
   230d4:	8085883a 	add	r2,r16,r2
   230d8:	e0ffb117 	ldw	r3,-316(fp)
   230dc:	1885883a 	add	r2,r3,r2
   230e0:	e0bfb115 	stw	r2,-316(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
   230e4:	e0ffa717 	ldw	r3,-356(fp)
   230e8:	e0bfa417 	ldw	r2,-368(fp)
   230ec:	1885c83a 	sub	r2,r3,r2
   230f0:	e0bfa715 	stw	r2,-356(fp)
		z2 -= z3;
   230f4:	e0ffa817 	ldw	r3,-352(fp)
   230f8:	e0bfa317 	ldw	r2,-372(fp)
   230fc:	1885c83a 	sub	r2,r3,r2
   23100:	e0bfa815 	stw	r2,-352(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
   23104:	e0ffa717 	ldw	r3,-356(fp)
   23108:	e0bfa817 	ldw	r2,-352(fp)
   2310c:	1885883a 	add	r2,r3,r2
   23110:	1009883a 	mov	r4,r2
   23114:	01445444 	movi	r5,4433
   23118:	002c1540 	call	2c154 <__mulsi3>
   2311c:	e0bfa315 	stw	r2,-372(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
   23120:	e13fa717 	ldw	r4,-356(fp)
   23124:	01461f84 	movi	r5,6270
   23128:	002c1540 	call	2c154 <__mulsi3>
   2312c:	1007883a 	mov	r3,r2
   23130:	e0bfa317 	ldw	r2,-372(fp)
   23134:	1885883a 	add	r2,r3,r2
   23138:	e0bfa615 	stw	r2,-360(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
   2313c:	e13fa817 	ldw	r4,-352(fp)
   23140:	017137c4 	movi	r5,-15137
   23144:	002c1540 	call	2c154 <__mulsi3>
   23148:	1007883a 	mov	r3,r2
   2314c:	e0bfa317 	ldw	r2,-372(fp)
   23150:	1885883a 	add	r2,r3,r2
   23154:	e0bfb015 	stw	r2,-320(fp)

		/* Final output stage */

		wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   23158:	e0ffac17 	ldw	r3,-336(fp)
   2315c:	e0bfa517 	ldw	r2,-364(fp)
   23160:	1885883a 	add	r2,r3,r2
   23164:	1007d2fa 	srai	r3,r2,11
   23168:	e0bfa017 	ldw	r2,-384(fp)
   2316c:	10c00015 	stw	r3,0(r2)
		wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   23170:	e0bfa017 	ldw	r2,-384(fp)
   23174:	10804204 	addi	r2,r2,264
   23178:	e13fac17 	ldw	r4,-336(fp)
   2317c:	e0ffa517 	ldw	r3,-364(fp)
   23180:	20c7c83a 	sub	r3,r4,r3
   23184:	1807d2fa 	srai	r3,r3,11
   23188:	10c00015 	stw	r3,0(r2)
		wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   2318c:	e0bfa017 	ldw	r2,-384(fp)
   23190:	10800604 	addi	r2,r2,24
   23194:	e13faa17 	ldw	r4,-344(fp)
   23198:	e0ffa617 	ldw	r3,-360(fp)
   2319c:	20c7883a 	add	r3,r4,r3
   231a0:	1807d2fa 	srai	r3,r3,11
   231a4:	10c00015 	stw	r3,0(r2)
		wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   231a8:	e0bfa017 	ldw	r2,-384(fp)
   231ac:	10803c04 	addi	r2,r2,240
   231b0:	e13faa17 	ldw	r4,-344(fp)
   231b4:	e0ffa617 	ldw	r3,-360(fp)
   231b8:	20c7c83a 	sub	r3,r4,r3
   231bc:	1807d2fa 	srai	r3,r3,11
   231c0:	10c00015 	stw	r3,0(r2)
		wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
   231c4:	e0bfa017 	ldw	r2,-384(fp)
   231c8:	10800c04 	addi	r2,r2,48
   231cc:	e13fae17 	ldw	r4,-328(fp)
   231d0:	e0ffa917 	ldw	r3,-348(fp)
   231d4:	20c7883a 	add	r3,r4,r3
   231d8:	1807d2fa 	srai	r3,r3,11
   231dc:	10c00015 	stw	r3,0(r2)
		wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
   231e0:	e0bfa017 	ldw	r2,-384(fp)
   231e4:	10803604 	addi	r2,r2,216
   231e8:	e13fae17 	ldw	r4,-328(fp)
   231ec:	e0ffa917 	ldw	r3,-348(fp)
   231f0:	20c7c83a 	sub	r3,r4,r3
   231f4:	1807d2fa 	srai	r3,r3,11
   231f8:	10c00015 	stw	r3,0(r2)
		wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   231fc:	e0bfa017 	ldw	r2,-384(fp)
   23200:	10801204 	addi	r2,r2,72
   23204:	e13faf17 	ldw	r4,-324(fp)
   23208:	e0ffb217 	ldw	r3,-312(fp)
   2320c:	20c7883a 	add	r3,r4,r3
   23210:	1807d2fa 	srai	r3,r3,11
   23214:	10c00015 	stw	r3,0(r2)
		wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   23218:	e0bfa017 	ldw	r2,-384(fp)
   2321c:	10803004 	addi	r2,r2,192
   23220:	e13faf17 	ldw	r4,-324(fp)
   23224:	e0ffb217 	ldw	r3,-312(fp)
   23228:	20c7c83a 	sub	r3,r4,r3
   2322c:	1807d2fa 	srai	r3,r3,11
   23230:	10c00015 	stw	r3,0(r2)
		wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   23234:	e0bfa017 	ldw	r2,-384(fp)
   23238:	10801804 	addi	r2,r2,96
   2323c:	e13fab17 	ldw	r4,-340(fp)
   23240:	e0ffb017 	ldw	r3,-320(fp)
   23244:	20c7883a 	add	r3,r4,r3
   23248:	1807d2fa 	srai	r3,r3,11
   2324c:	10c00015 	stw	r3,0(r2)
		wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   23250:	e0bfa017 	ldw	r2,-384(fp)
   23254:	10802a04 	addi	r2,r2,168
   23258:	e13fab17 	ldw	r4,-340(fp)
   2325c:	e0ffb017 	ldw	r3,-320(fp)
   23260:	20c7c83a 	sub	r3,r4,r3
   23264:	1807d2fa 	srai	r3,r3,11
   23268:	10c00015 	stw	r3,0(r2)
		wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
   2326c:	e0bfa017 	ldw	r2,-384(fp)
   23270:	10801e04 	addi	r2,r2,120
   23274:	e13fad17 	ldw	r4,-332(fp)
   23278:	e0ffb117 	ldw	r3,-316(fp)
   2327c:	20c7883a 	add	r3,r4,r3
   23280:	1807d2fa 	srai	r3,r3,11
   23284:	10c00015 	stw	r3,0(r2)
		wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
   23288:	e0bfa017 	ldw	r2,-384(fp)
   2328c:	10802404 	addi	r2,r2,144
   23290:	e13fad17 	ldw	r4,-332(fp)
   23294:	e0ffb117 	ldw	r3,-316(fp)
   23298:	20c7c83a 	sub	r3,r4,r3
   2329c:	1807d2fa 	srai	r3,r3,11
   232a0:	10c00015 	stw	r3,0(r2)
		* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
   232a4:	e0bfa117 	ldw	r2,-380(fp)
   232a8:	10800044 	addi	r2,r2,1
   232ac:	e0bfa115 	stw	r2,-380(fp)
   232b0:	e0bf9e17 	ldw	r2,-392(fp)
   232b4:	10800084 	addi	r2,r2,2
   232b8:	e0bf9e15 	stw	r2,-392(fp)
   232bc:	e0bf9f17 	ldw	r2,-388(fp)
   232c0:	10800104 	addi	r2,r2,4
   232c4:	e0bf9f15 	stw	r2,-388(fp)
   232c8:	e0bfa017 	ldw	r2,-384(fp)
   232cc:	10800104 	addi	r2,r2,4
   232d0:	e0bfa015 	stw	r2,-384(fp)
   232d4:	e0bfa117 	ldw	r2,-380(fp)
   232d8:	10800190 	cmplti	r2,r2,6
   232dc:	103e8f1e 	bne	r2,zero,22d1c <jpeg_idct_6x12+0x58>
	}

	/* Pass 2: process 12 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
   232e0:	e0bfb404 	addi	r2,fp,-304
   232e4:	e0bfa015 	stw	r2,-384(fp)
	for (ctr = 0; ctr < 12; ctr++) {
   232e8:	e03fa115 	stw	zero,-380(fp)
   232ec:	0000a106 	br	23574 <jpeg_idct_6x12+0x8b0>
		outptr = output_buf[ctr] + output_col;
   232f0:	e0bfa117 	ldw	r2,-380(fp)
   232f4:	1085883a 	add	r2,r2,r2
   232f8:	1085883a 	add	r2,r2,r2
   232fc:	e0ffff17 	ldw	r3,-4(fp)
   23300:	1885883a 	add	r2,r3,r2
   23304:	10c00017 	ldw	r3,0(r2)
   23308:	e0800317 	ldw	r2,12(fp)
   2330c:	1885883a 	add	r2,r3,r2
   23310:	e0bfb315 	stw	r2,-308(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   23314:	e0bfa017 	ldw	r2,-384(fp)
   23318:	10800017 	ldw	r2,0(r2)
   2331c:	10800404 	addi	r2,r2,16
   23320:	e0bfa515 	stw	r2,-364(fp)
		tmp10 <<= CONST_BITS;
   23324:	e0bfa517 	ldw	r2,-364(fp)
   23328:	1004937a 	slli	r2,r2,13
   2332c:	e0bfa515 	stw	r2,-364(fp)
		tmp12 = (INT32) wsptr[4];
   23330:	e0bfa017 	ldw	r2,-384(fp)
   23334:	10800404 	addi	r2,r2,16
   23338:	10800017 	ldw	r2,0(r2)
   2333c:	e0bfa915 	stw	r2,-348(fp)
		tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
   23340:	e13fa917 	ldw	r4,-348(fp)
   23344:	0145a844 	movi	r5,5793
   23348:	002c1540 	call	2c154 <__mulsi3>
   2334c:	e0bfac15 	stw	r2,-336(fp)
		tmp11 = tmp10 + tmp20;
   23350:	e0ffa517 	ldw	r3,-364(fp)
   23354:	e0bfac17 	ldw	r2,-336(fp)
   23358:	1885883a 	add	r2,r3,r2
   2335c:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp10 - tmp20 - tmp20;
   23360:	e0ffa517 	ldw	r3,-364(fp)
   23364:	e0bfac17 	ldw	r2,-336(fp)
   23368:	1887c83a 	sub	r3,r3,r2
   2336c:	e0bfac17 	ldw	r2,-336(fp)
   23370:	1885c83a 	sub	r2,r3,r2
   23374:	e0bfaa15 	stw	r2,-344(fp)
		tmp20 = (INT32) wsptr[2];
   23378:	e0bfa017 	ldw	r2,-384(fp)
   2337c:	10800204 	addi	r2,r2,8
   23380:	10800017 	ldw	r2,0(r2)
   23384:	e0bfac15 	stw	r2,-336(fp)
		tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
   23388:	e13fac17 	ldw	r4,-336(fp)
   2338c:	0149cc44 	movi	r5,10033
   23390:	002c1540 	call	2c154 <__mulsi3>
   23394:	e0bfa515 	stw	r2,-364(fp)
		tmp20 = tmp11 + tmp10;
   23398:	e0ffa617 	ldw	r3,-360(fp)
   2339c:	e0bfa517 	ldw	r2,-364(fp)
   233a0:	1885883a 	add	r2,r3,r2
   233a4:	e0bfac15 	stw	r2,-336(fp)
		tmp22 = tmp11 - tmp10;
   233a8:	e0ffa617 	ldw	r3,-360(fp)
   233ac:	e0bfa517 	ldw	r2,-364(fp)
   233b0:	1885c83a 	sub	r2,r3,r2
   233b4:	e0bfae15 	stw	r2,-328(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
   233b8:	e0bfa017 	ldw	r2,-384(fp)
   233bc:	10800104 	addi	r2,r2,4
   233c0:	10800017 	ldw	r2,0(r2)
   233c4:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[3];
   233c8:	e0bfa017 	ldw	r2,-384(fp)
   233cc:	10800304 	addi	r2,r2,12
   233d0:	10800017 	ldw	r2,0(r2)
   233d4:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[5];
   233d8:	e0bfa017 	ldw	r2,-384(fp)
   233dc:	10800504 	addi	r2,r2,20
   233e0:	10800017 	ldw	r2,0(r2)
   233e4:	e0bfa315 	stw	r2,-372(fp)
		tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   233e8:	e0ffa717 	ldw	r3,-356(fp)
   233ec:	e0bfa317 	ldw	r2,-372(fp)
   233f0:	1885883a 	add	r2,r3,r2
   233f4:	1009883a 	mov	r4,r2
   233f8:	0142ed84 	movi	r5,2998
   233fc:	002c1540 	call	2c154 <__mulsi3>
   23400:	e0bfa615 	stw	r2,-360(fp)
		tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
   23404:	e0ffa717 	ldw	r3,-356(fp)
   23408:	e0bfa817 	ldw	r2,-352(fp)
   2340c:	1885883a 	add	r2,r3,r2
   23410:	1006937a 	slli	r3,r2,13
   23414:	e0bfa617 	ldw	r2,-360(fp)
   23418:	1885883a 	add	r2,r3,r2
   2341c:	e0bfa515 	stw	r2,-364(fp)
		tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
   23420:	e0ffa317 	ldw	r3,-372(fp)
   23424:	e0bfa817 	ldw	r2,-352(fp)
   23428:	1885c83a 	sub	r2,r3,r2
   2342c:	1006937a 	slli	r3,r2,13
   23430:	e0bfa617 	ldw	r2,-360(fp)
   23434:	1885883a 	add	r2,r3,r2
   23438:	e0bfa915 	stw	r2,-348(fp)
		tmp11 = (z1 - z2 - z3) << CONST_BITS;
   2343c:	e0ffa717 	ldw	r3,-356(fp)
   23440:	e0bfa817 	ldw	r2,-352(fp)
   23444:	1887c83a 	sub	r3,r3,r2
   23448:	e0bfa317 	ldw	r2,-372(fp)
   2344c:	1885c83a 	sub	r2,r3,r2
   23450:	1004937a 	slli	r2,r2,13
   23454:	e0bfa615 	stw	r2,-360(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
   23458:	e0ffac17 	ldw	r3,-336(fp)
   2345c:	e0bfa517 	ldw	r2,-364(fp)
   23460:	1885883a 	add	r2,r3,r2
   23464:	1005d4ba 	srai	r2,r2,18
   23468:	1080ffcc 	andi	r2,r2,1023
   2346c:	e0ffa217 	ldw	r3,-376(fp)
   23470:	1885883a 	add	r2,r3,r2
   23474:	10c00003 	ldbu	r3,0(r2)
   23478:	e0bfb317 	ldw	r2,-308(fp)
   2347c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
   23480:	e0bfb317 	ldw	r2,-308(fp)
   23484:	10800144 	addi	r2,r2,5
   23488:	e13fac17 	ldw	r4,-336(fp)
   2348c:	e0ffa517 	ldw	r3,-364(fp)
   23490:	20c7c83a 	sub	r3,r4,r3
   23494:	1807d4ba 	srai	r3,r3,18
   23498:	18c0ffcc 	andi	r3,r3,1023
   2349c:	e13fa217 	ldw	r4,-376(fp)
   234a0:	20c7883a 	add	r3,r4,r3
   234a4:	18c00003 	ldbu	r3,0(r3)
   234a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
   234ac:	e0bfb317 	ldw	r2,-308(fp)
   234b0:	10800044 	addi	r2,r2,1
   234b4:	e13faa17 	ldw	r4,-344(fp)
   234b8:	e0ffa617 	ldw	r3,-360(fp)
   234bc:	20c7883a 	add	r3,r4,r3
   234c0:	1807d4ba 	srai	r3,r3,18
   234c4:	18c0ffcc 	andi	r3,r3,1023
   234c8:	e13fa217 	ldw	r4,-376(fp)
   234cc:	20c7883a 	add	r3,r4,r3
   234d0:	18c00003 	ldbu	r3,0(r3)
   234d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
   234d8:	e0bfb317 	ldw	r2,-308(fp)
   234dc:	10800104 	addi	r2,r2,4
   234e0:	e13faa17 	ldw	r4,-344(fp)
   234e4:	e0ffa617 	ldw	r3,-360(fp)
   234e8:	20c7c83a 	sub	r3,r4,r3
   234ec:	1807d4ba 	srai	r3,r3,18
   234f0:	18c0ffcc 	andi	r3,r3,1023
   234f4:	e13fa217 	ldw	r4,-376(fp)
   234f8:	20c7883a 	add	r3,r4,r3
   234fc:	18c00003 	ldbu	r3,0(r3)
   23500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
   23504:	e0bfb317 	ldw	r2,-308(fp)
   23508:	10800084 	addi	r2,r2,2
   2350c:	e13fae17 	ldw	r4,-328(fp)
   23510:	e0ffa917 	ldw	r3,-348(fp)
   23514:	20c7883a 	add	r3,r4,r3
   23518:	1807d4ba 	srai	r3,r3,18
   2351c:	18c0ffcc 	andi	r3,r3,1023
   23520:	e13fa217 	ldw	r4,-376(fp)
   23524:	20c7883a 	add	r3,r4,r3
   23528:	18c00003 	ldbu	r3,0(r3)
   2352c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
   23530:	e0bfb317 	ldw	r2,-308(fp)
   23534:	108000c4 	addi	r2,r2,3
   23538:	e13fae17 	ldw	r4,-328(fp)
   2353c:	e0ffa917 	ldw	r3,-348(fp)
   23540:	20c7c83a 	sub	r3,r4,r3
   23544:	1807d4ba 	srai	r3,r3,18
   23548:	18c0ffcc 	andi	r3,r3,1023
   2354c:	e13fa217 	ldw	r4,-376(fp)
   23550:	20c7883a 	add	r3,r4,r3
   23554:	18c00003 	ldbu	r3,0(r3)
   23558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
   2355c:	e0bfa017 	ldw	r2,-384(fp)
   23560:	10800604 	addi	r2,r2,24
   23564:	e0bfa015 	stw	r2,-384(fp)

	/* Pass 2: process 12 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 12; ctr++) {
   23568:	e0bfa117 	ldw	r2,-380(fp)
   2356c:	10800044 	addi	r2,r2,1
   23570:	e0bfa115 	stw	r2,-380(fp)
   23574:	e0bfa117 	ldw	r2,-380(fp)
   23578:	10800310 	cmplti	r2,r2,12
   2357c:	103f5c1e 	bne	r2,zero,232f0 <jpeg_idct_6x12+0x62c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
   23580:	e037883a 	mov	sp,fp
   23584:	dfc00217 	ldw	ra,8(sp)
   23588:	df000117 	ldw	fp,4(sp)
   2358c:	dc000017 	ldw	r16,0(sp)
   23590:	dec00304 	addi	sp,sp,12
   23594:	f800283a 	ret

00023598 <jpeg_idct_5x10>:

GLOBAL(void)
	jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   23598:	deffb304 	addi	sp,sp,-308
   2359c:	dfc04c15 	stw	ra,304(sp)
   235a0:	df004b15 	stw	fp,300(sp)
   235a4:	df004b04 	addi	fp,sp,300
   235a8:	e13ffc15 	stw	r4,-16(fp)
   235ac:	e17ffd15 	stw	r5,-12(fp)
   235b0:	e1bffe15 	stw	r6,-8(fp)
   235b4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4, z5;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   235b8:	e0bffc17 	ldw	r2,-16(fp)
   235bc:	10804917 	ldw	r2,292(r2)
   235c0:	10802004 	addi	r2,r2,128
   235c4:	e0bfb915 	stw	r2,-284(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
		*/
		inptr = coef_block;
   235c8:	e0bffe17 	ldw	r2,-8(fp)
   235cc:	e0bfb515 	stw	r2,-300(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   235d0:	e0bffd17 	ldw	r2,-12(fp)
   235d4:	10801517 	ldw	r2,84(r2)
   235d8:	e0bfb615 	stw	r2,-296(fp)
	wsptr = workspace;
   235dc:	e0bfca04 	addi	r2,fp,-216
   235e0:	e0bfb715 	stw	r2,-292(fp)
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
   235e4:	e03fb815 	stw	zero,-288(fp)
   235e8:	00014606 	br	23b04 <jpeg_idct_5x10+0x56c>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   235ec:	e0bfb517 	ldw	r2,-300(fp)
   235f0:	1080000b 	ldhu	r2,0(r2)
   235f4:	10ffffcc 	andi	r3,r2,65535
   235f8:	18e0001c 	xori	r3,r3,32768
   235fc:	18e00004 	addi	r3,r3,-32768
   23600:	e0bfb617 	ldw	r2,-296(fp)
   23604:	10800017 	ldw	r2,0(r2)
   23608:	1809883a 	mov	r4,r3
   2360c:	100b883a 	mov	r5,r2
   23610:	002c1540 	call	2c154 <__mulsi3>
   23614:	e0bfba15 	stw	r2,-280(fp)
		z3 <<= CONST_BITS;
   23618:	e0bfba17 	ldw	r2,-280(fp)
   2361c:	1004937a 	slli	r2,r2,13
   23620:	e0bfba15 	stw	r2,-280(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
   23624:	e0bfba17 	ldw	r2,-280(fp)
   23628:	10810004 	addi	r2,r2,1024
   2362c:	e0bfba15 	stw	r2,-280(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   23630:	e0bfb517 	ldw	r2,-300(fp)
   23634:	10801004 	addi	r2,r2,64
   23638:	1080000b 	ldhu	r2,0(r2)
   2363c:	10ffffcc 	andi	r3,r2,65535
   23640:	18e0001c 	xori	r3,r3,32768
   23644:	18e00004 	addi	r3,r3,-32768
   23648:	e0bfb617 	ldw	r2,-296(fp)
   2364c:	10802004 	addi	r2,r2,128
   23650:	10800017 	ldw	r2,0(r2)
   23654:	1809883a 	mov	r4,r3
   23658:	100b883a 	mov	r5,r2
   2365c:	002c1540 	call	2c154 <__mulsi3>
   23660:	e0bfbb15 	stw	r2,-276(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
   23664:	e13fbb17 	ldw	r4,-276(fp)
   23668:	01492744 	movi	r5,9373
   2366c:	002c1540 	call	2c154 <__mulsi3>
   23670:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
   23674:	e13fbb17 	ldw	r4,-276(fp)
   23678:	01437f04 	movi	r5,3580
   2367c:	002c1540 	call	2c154 <__mulsi3>
   23680:	e0bfbd15 	stw	r2,-268(fp)
		tmp10 = z3 + z1;
   23684:	e0ffba17 	ldw	r3,-280(fp)
   23688:	e0bfbc17 	ldw	r2,-272(fp)
   2368c:	1885883a 	add	r2,r3,r2
   23690:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = z3 - z2;
   23694:	e0ffba17 	ldw	r3,-280(fp)
   23698:	e0bfbd17 	ldw	r2,-268(fp)
   2369c:	1885c83a 	sub	r2,r3,r2
   236a0:	e0bfbf15 	stw	r2,-260(fp)

		tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
   236a4:	e0ffbc17 	ldw	r3,-272(fp)
   236a8:	e0bfbd17 	ldw	r2,-268(fp)
   236ac:	1885c83a 	sub	r2,r3,r2
   236b0:	1085883a 	add	r2,r2,r2
   236b4:	e0ffba17 	ldw	r3,-280(fp)
   236b8:	1885c83a 	sub	r2,r3,r2
   236bc:	1005d2fa 	srai	r2,r2,11
   236c0:	e0bfc015 	stw	r2,-256(fp)
			CONST_BITS-PASS1_BITS);

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   236c4:	e0bfb517 	ldw	r2,-300(fp)
   236c8:	10800804 	addi	r2,r2,32
   236cc:	1080000b 	ldhu	r2,0(r2)
   236d0:	10ffffcc 	andi	r3,r2,65535
   236d4:	18e0001c 	xori	r3,r3,32768
   236d8:	18e00004 	addi	r3,r3,-32768
   236dc:	e0bfb617 	ldw	r2,-296(fp)
   236e0:	10801004 	addi	r2,r2,64
   236e4:	10800017 	ldw	r2,0(r2)
   236e8:	1809883a 	mov	r4,r3
   236ec:	100b883a 	mov	r5,r2
   236f0:	002c1540 	call	2c154 <__mulsi3>
   236f4:	e0bfbd15 	stw	r2,-268(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   236f8:	e0bfb517 	ldw	r2,-300(fp)
   236fc:	10801804 	addi	r2,r2,96
   23700:	1080000b 	ldhu	r2,0(r2)
   23704:	10ffffcc 	andi	r3,r2,65535
   23708:	18e0001c 	xori	r3,r3,32768
   2370c:	18e00004 	addi	r3,r3,-32768
   23710:	e0bfb617 	ldw	r2,-296(fp)
   23714:	10803004 	addi	r2,r2,192
   23718:	10800017 	ldw	r2,0(r2)
   2371c:	1809883a 	mov	r4,r3
   23720:	100b883a 	mov	r5,r2
   23724:	002c1540 	call	2c154 <__mulsi3>
   23728:	e0bfba15 	stw	r2,-280(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
   2372c:	e0ffbd17 	ldw	r3,-268(fp)
   23730:	e0bfba17 	ldw	r2,-280(fp)
   23734:	1885883a 	add	r2,r3,r2
   23738:	1009883a 	mov	r4,r2
   2373c:	0146a684 	movi	r5,6810
   23740:	002c1540 	call	2c154 <__mulsi3>
   23744:	e0bfbc15 	stw	r2,-272(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
   23748:	e13fbd17 	ldw	r4,-268(fp)
   2374c:	01441c44 	movi	r5,4209
   23750:	002c1540 	call	2c154 <__mulsi3>
   23754:	1007883a 	mov	r3,r2
   23758:	e0bfbc17 	ldw	r2,-272(fp)
   2375c:	1885883a 	add	r2,r3,r2
   23760:	e0bfc115 	stw	r2,-252(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
   23764:	e13fba17 	ldw	r4,-280(fp)
   23768:	016e9704 	movi	r5,-17828
   2376c:	002c1540 	call	2c154 <__mulsi3>
   23770:	1007883a 	mov	r3,r2
   23774:	e0bfbc17 	ldw	r2,-272(fp)
   23778:	1885883a 	add	r2,r3,r2
   2377c:	e0bfc215 	stw	r2,-248(fp)

		tmp20 = tmp10 + tmp12;
   23780:	e0ffbe17 	ldw	r3,-264(fp)
   23784:	e0bfc117 	ldw	r2,-252(fp)
   23788:	1885883a 	add	r2,r3,r2
   2378c:	e0bfc315 	stw	r2,-244(fp)
		tmp24 = tmp10 - tmp12;
   23790:	e0ffbe17 	ldw	r3,-264(fp)
   23794:	e0bfc117 	ldw	r2,-252(fp)
   23798:	1885c83a 	sub	r2,r3,r2
   2379c:	e0bfc415 	stw	r2,-240(fp)
		tmp21 = tmp11 + tmp13;
   237a0:	e0ffbf17 	ldw	r3,-260(fp)
   237a4:	e0bfc217 	ldw	r2,-248(fp)
   237a8:	1885883a 	add	r2,r3,r2
   237ac:	e0bfc515 	stw	r2,-236(fp)
		tmp23 = tmp11 - tmp13;
   237b0:	e0ffbf17 	ldw	r3,-260(fp)
   237b4:	e0bfc217 	ldw	r2,-248(fp)
   237b8:	1885c83a 	sub	r2,r3,r2
   237bc:	e0bfc615 	stw	r2,-232(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   237c0:	e0bfb517 	ldw	r2,-300(fp)
   237c4:	10800404 	addi	r2,r2,16
   237c8:	1080000b 	ldhu	r2,0(r2)
   237cc:	10ffffcc 	andi	r3,r2,65535
   237d0:	18e0001c 	xori	r3,r3,32768
   237d4:	18e00004 	addi	r3,r3,-32768
   237d8:	e0bfb617 	ldw	r2,-296(fp)
   237dc:	10800804 	addi	r2,r2,32
   237e0:	10800017 	ldw	r2,0(r2)
   237e4:	1809883a 	mov	r4,r3
   237e8:	100b883a 	mov	r5,r2
   237ec:	002c1540 	call	2c154 <__mulsi3>
   237f0:	e0bfbc15 	stw	r2,-272(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   237f4:	e0bfb517 	ldw	r2,-300(fp)
   237f8:	10800c04 	addi	r2,r2,48
   237fc:	1080000b 	ldhu	r2,0(r2)
   23800:	10ffffcc 	andi	r3,r2,65535
   23804:	18e0001c 	xori	r3,r3,32768
   23808:	18e00004 	addi	r3,r3,-32768
   2380c:	e0bfb617 	ldw	r2,-296(fp)
   23810:	10801804 	addi	r2,r2,96
   23814:	10800017 	ldw	r2,0(r2)
   23818:	1809883a 	mov	r4,r3
   2381c:	100b883a 	mov	r5,r2
   23820:	002c1540 	call	2c154 <__mulsi3>
   23824:	e0bfbd15 	stw	r2,-268(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   23828:	e0bfb517 	ldw	r2,-300(fp)
   2382c:	10801404 	addi	r2,r2,80
   23830:	1080000b 	ldhu	r2,0(r2)
   23834:	10ffffcc 	andi	r3,r2,65535
   23838:	18e0001c 	xori	r3,r3,32768
   2383c:	18e00004 	addi	r3,r3,-32768
   23840:	e0bfb617 	ldw	r2,-296(fp)
   23844:	10802804 	addi	r2,r2,160
   23848:	10800017 	ldw	r2,0(r2)
   2384c:	1809883a 	mov	r4,r3
   23850:	100b883a 	mov	r5,r2
   23854:	002c1540 	call	2c154 <__mulsi3>
   23858:	e0bfba15 	stw	r2,-280(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   2385c:	e0bfb517 	ldw	r2,-300(fp)
   23860:	10801c04 	addi	r2,r2,112
   23864:	1080000b 	ldhu	r2,0(r2)
   23868:	10ffffcc 	andi	r3,r2,65535
   2386c:	18e0001c 	xori	r3,r3,32768
   23870:	18e00004 	addi	r3,r3,-32768
   23874:	e0bfb617 	ldw	r2,-296(fp)
   23878:	10803804 	addi	r2,r2,224
   2387c:	10800017 	ldw	r2,0(r2)
   23880:	1809883a 	mov	r4,r3
   23884:	100b883a 	mov	r5,r2
   23888:	002c1540 	call	2c154 <__mulsi3>
   2388c:	e0bfbb15 	stw	r2,-276(fp)

		tmp11 = z2 + z4;
   23890:	e0ffbd17 	ldw	r3,-268(fp)
   23894:	e0bfbb17 	ldw	r2,-276(fp)
   23898:	1885883a 	add	r2,r3,r2
   2389c:	e0bfbf15 	stw	r2,-260(fp)
		tmp13 = z2 - z4;
   238a0:	e0ffbd17 	ldw	r3,-268(fp)
   238a4:	e0bfbb17 	ldw	r2,-276(fp)
   238a8:	1885c83a 	sub	r2,r3,r2
   238ac:	e0bfc215 	stw	r2,-248(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
   238b0:	e13fc217 	ldw	r4,-248(fp)
   238b4:	014278c4 	movi	r5,2531
   238b8:	002c1540 	call	2c154 <__mulsi3>
   238bc:	e0bfc115 	stw	r2,-252(fp)
		z5 = z3 << CONST_BITS;
   238c0:	e0bfba17 	ldw	r2,-280(fp)
   238c4:	1004937a 	slli	r2,r2,13
   238c8:	e0bfc715 	stw	r2,-228(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
   238cc:	e13fbf17 	ldw	r4,-260(fp)
   238d0:	01479bc4 	movi	r5,7791
   238d4:	002c1540 	call	2c154 <__mulsi3>
   238d8:	e0bfbd15 	stw	r2,-268(fp)
		z4 = z5 + tmp12;
   238dc:	e0ffc717 	ldw	r3,-228(fp)
   238e0:	e0bfc117 	ldw	r2,-252(fp)
   238e4:	1885883a 	add	r2,r3,r2
   238e8:	e0bfbb15 	stw	r2,-276(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
   238ec:	e13fbc17 	ldw	r4,-272(fp)
   238f0:	014b2cc4 	movi	r5,11443
   238f4:	002c1540 	call	2c154 <__mulsi3>
   238f8:	1007883a 	mov	r3,r2
   238fc:	e0bfbd17 	ldw	r2,-268(fp)
   23900:	1887883a 	add	r3,r3,r2
   23904:	e0bfbb17 	ldw	r2,-276(fp)
   23908:	1885883a 	add	r2,r3,r2
   2390c:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
   23910:	e13fbc17 	ldw	r4,-272(fp)
   23914:	0141c504 	movi	r5,1812
   23918:	002c1540 	call	2c154 <__mulsi3>
   2391c:	1007883a 	mov	r3,r2
   23920:	e0bfbd17 	ldw	r2,-268(fp)
   23924:	1887c83a 	sub	r3,r3,r2
   23928:	e0bfbb17 	ldw	r2,-276(fp)
   2392c:	1885883a 	add	r2,r3,r2
   23930:	e0bfc815 	stw	r2,-224(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
   23934:	e13fbf17 	ldw	r4,-260(fp)
   23938:	0144b3c4 	movi	r5,4815
   2393c:	002c1540 	call	2c154 <__mulsi3>
   23940:	e0bfbd15 	stw	r2,-268(fp)
		z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
   23944:	e0ffc717 	ldw	r3,-228(fp)
   23948:	e0bfc117 	ldw	r2,-252(fp)
   2394c:	1887c83a 	sub	r3,r3,r2
   23950:	e0bfc217 	ldw	r2,-248(fp)
   23954:	1004933a 	slli	r2,r2,12
   23958:	1885c83a 	sub	r2,r3,r2
   2395c:	e0bfbb15 	stw	r2,-276(fp)

		tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
   23960:	e0ffbc17 	ldw	r3,-272(fp)
   23964:	e0bfc217 	ldw	r2,-248(fp)
   23968:	1887c83a 	sub	r3,r3,r2
   2396c:	e0bfba17 	ldw	r2,-280(fp)
   23970:	1885c83a 	sub	r2,r3,r2
   23974:	1085883a 	add	r2,r2,r2
   23978:	1085883a 	add	r2,r2,r2
   2397c:	e0bfc115 	stw	r2,-252(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
   23980:	e13fbc17 	ldw	r4,-272(fp)
   23984:	014a14c4 	movi	r5,10323
   23988:	002c1540 	call	2c154 <__mulsi3>
   2398c:	1007883a 	mov	r3,r2
   23990:	e0bfbd17 	ldw	r2,-268(fp)
   23994:	1887c83a 	sub	r3,r3,r2
   23998:	e0bfbb17 	ldw	r2,-276(fp)
   2399c:	1885c83a 	sub	r2,r3,r2
   239a0:	e0bfbf15 	stw	r2,-260(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
   239a4:	e13fbc17 	ldw	r4,-272(fp)
   239a8:	01452304 	movi	r5,5260
   239ac:	002c1540 	call	2c154 <__mulsi3>
   239b0:	1007883a 	mov	r3,r2
   239b4:	e0bfbd17 	ldw	r2,-268(fp)
   239b8:	1887c83a 	sub	r3,r3,r2
   239bc:	e0bfbb17 	ldw	r2,-276(fp)
   239c0:	1885883a 	add	r2,r3,r2
   239c4:	e0bfc215 	stw	r2,-248(fp)

		/* Final output stage */

		wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
   239c8:	e0ffc317 	ldw	r3,-244(fp)
   239cc:	e0bfbe17 	ldw	r2,-264(fp)
   239d0:	1885883a 	add	r2,r3,r2
   239d4:	1007d2fa 	srai	r3,r2,11
   239d8:	e0bfb717 	ldw	r2,-292(fp)
   239dc:	10c00015 	stw	r3,0(r2)
		wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
   239e0:	e0bfb717 	ldw	r2,-292(fp)
   239e4:	10802d04 	addi	r2,r2,180
   239e8:	e13fc317 	ldw	r4,-244(fp)
   239ec:	e0ffbe17 	ldw	r3,-264(fp)
   239f0:	20c7c83a 	sub	r3,r4,r3
   239f4:	1807d2fa 	srai	r3,r3,11
   239f8:	10c00015 	stw	r3,0(r2)
		wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
   239fc:	e0bfb717 	ldw	r2,-292(fp)
   23a00:	10800504 	addi	r2,r2,20
   23a04:	e13fc517 	ldw	r4,-236(fp)
   23a08:	e0ffbf17 	ldw	r3,-260(fp)
   23a0c:	20c7883a 	add	r3,r4,r3
   23a10:	1807d2fa 	srai	r3,r3,11
   23a14:	10c00015 	stw	r3,0(r2)
		wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
   23a18:	e0bfb717 	ldw	r2,-292(fp)
   23a1c:	10802804 	addi	r2,r2,160
   23a20:	e13fc517 	ldw	r4,-236(fp)
   23a24:	e0ffbf17 	ldw	r3,-260(fp)
   23a28:	20c7c83a 	sub	r3,r4,r3
   23a2c:	1807d2fa 	srai	r3,r3,11
   23a30:	10c00015 	stw	r3,0(r2)
		wsptr[5*2] = (int) (tmp22 + tmp12);
   23a34:	e0bfb717 	ldw	r2,-292(fp)
   23a38:	10800a04 	addi	r2,r2,40
   23a3c:	e13fc017 	ldw	r4,-256(fp)
   23a40:	e0ffc117 	ldw	r3,-252(fp)
   23a44:	20c7883a 	add	r3,r4,r3
   23a48:	10c00015 	stw	r3,0(r2)
		wsptr[5*7] = (int) (tmp22 - tmp12);
   23a4c:	e0bfb717 	ldw	r2,-292(fp)
   23a50:	10802304 	addi	r2,r2,140
   23a54:	e13fc017 	ldw	r4,-256(fp)
   23a58:	e0ffc117 	ldw	r3,-252(fp)
   23a5c:	20c7c83a 	sub	r3,r4,r3
   23a60:	10c00015 	stw	r3,0(r2)
		wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
   23a64:	e0bfb717 	ldw	r2,-292(fp)
   23a68:	10800f04 	addi	r2,r2,60
   23a6c:	e13fc617 	ldw	r4,-232(fp)
   23a70:	e0ffc217 	ldw	r3,-248(fp)
   23a74:	20c7883a 	add	r3,r4,r3
   23a78:	1807d2fa 	srai	r3,r3,11
   23a7c:	10c00015 	stw	r3,0(r2)
		wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
   23a80:	e0bfb717 	ldw	r2,-292(fp)
   23a84:	10801e04 	addi	r2,r2,120
   23a88:	e13fc617 	ldw	r4,-232(fp)
   23a8c:	e0ffc217 	ldw	r3,-248(fp)
   23a90:	20c7c83a 	sub	r3,r4,r3
   23a94:	1807d2fa 	srai	r3,r3,11
   23a98:	10c00015 	stw	r3,0(r2)
		wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
   23a9c:	e0bfb717 	ldw	r2,-292(fp)
   23aa0:	10801404 	addi	r2,r2,80
   23aa4:	e13fc417 	ldw	r4,-240(fp)
   23aa8:	e0ffc817 	ldw	r3,-224(fp)
   23aac:	20c7883a 	add	r3,r4,r3
   23ab0:	1807d2fa 	srai	r3,r3,11
   23ab4:	10c00015 	stw	r3,0(r2)
		wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
   23ab8:	e0bfb717 	ldw	r2,-292(fp)
   23abc:	10801904 	addi	r2,r2,100
   23ac0:	e13fc417 	ldw	r4,-240(fp)
   23ac4:	e0ffc817 	ldw	r3,-224(fp)
   23ac8:	20c7c83a 	sub	r3,r4,r3
   23acc:	1807d2fa 	srai	r3,r3,11
   23ad0:	10c00015 	stw	r3,0(r2)
		* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
   23ad4:	e0bfb817 	ldw	r2,-288(fp)
   23ad8:	10800044 	addi	r2,r2,1
   23adc:	e0bfb815 	stw	r2,-288(fp)
   23ae0:	e0bfb517 	ldw	r2,-300(fp)
   23ae4:	10800084 	addi	r2,r2,2
   23ae8:	e0bfb515 	stw	r2,-300(fp)
   23aec:	e0bfb617 	ldw	r2,-296(fp)
   23af0:	10800104 	addi	r2,r2,4
   23af4:	e0bfb615 	stw	r2,-296(fp)
   23af8:	e0bfb717 	ldw	r2,-292(fp)
   23afc:	10800104 	addi	r2,r2,4
   23b00:	e0bfb715 	stw	r2,-292(fp)
   23b04:	e0bfb817 	ldw	r2,-288(fp)
   23b08:	10800150 	cmplti	r2,r2,5
   23b0c:	103eb71e 	bne	r2,zero,235ec <jpeg_idct_5x10+0x54>
	}

	/* Pass 2: process 10 rows from work array, store into output array.
	* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
	*/
	wsptr = workspace;
   23b10:	e0bfca04 	addi	r2,fp,-216
   23b14:	e0bfb715 	stw	r2,-292(fp)
	for (ctr = 0; ctr < 10; ctr++) {
   23b18:	e03fb815 	stw	zero,-288(fp)
   23b1c:	00008f06 	br	23d5c <jpeg_idct_5x10+0x7c4>
		outptr = output_buf[ctr] + output_col;
   23b20:	e0bfb817 	ldw	r2,-288(fp)
   23b24:	1085883a 	add	r2,r2,r2
   23b28:	1085883a 	add	r2,r2,r2
   23b2c:	e0ffff17 	ldw	r3,-4(fp)
   23b30:	1885883a 	add	r2,r3,r2
   23b34:	10c00017 	ldw	r3,0(r2)
   23b38:	e0800217 	ldw	r2,8(fp)
   23b3c:	1885883a 	add	r2,r3,r2
   23b40:	e0bfc915 	stw	r2,-220(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   23b44:	e0bfb717 	ldw	r2,-292(fp)
   23b48:	10800017 	ldw	r2,0(r2)
   23b4c:	10800404 	addi	r2,r2,16
   23b50:	e0bfc115 	stw	r2,-252(fp)
		tmp12 <<= CONST_BITS;
   23b54:	e0bfc117 	ldw	r2,-252(fp)
   23b58:	1004937a 	slli	r2,r2,13
   23b5c:	e0bfc115 	stw	r2,-252(fp)
		tmp13 = (INT32) wsptr[2];
   23b60:	e0bfb717 	ldw	r2,-292(fp)
   23b64:	10800204 	addi	r2,r2,8
   23b68:	10800017 	ldw	r2,0(r2)
   23b6c:	e0bfc215 	stw	r2,-248(fp)
		tmp14 = (INT32) wsptr[4];
   23b70:	e0bfb717 	ldw	r2,-292(fp)
   23b74:	10800404 	addi	r2,r2,16
   23b78:	10800017 	ldw	r2,0(r2)
   23b7c:	e0bfc815 	stw	r2,-224(fp)
		z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
   23b80:	e0ffc217 	ldw	r3,-248(fp)
   23b84:	e0bfc817 	ldw	r2,-224(fp)
   23b88:	1885883a 	add	r2,r3,r2
   23b8c:	1009883a 	mov	r4,r2
   23b90:	01465304 	movi	r5,6476
   23b94:	002c1540 	call	2c154 <__mulsi3>
   23b98:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
   23b9c:	e0ffc217 	ldw	r3,-248(fp)
   23ba0:	e0bfc817 	ldw	r2,-224(fp)
   23ba4:	1885c83a 	sub	r2,r3,r2
   23ba8:	1009883a 	mov	r4,r2
   23bac:	0142d404 	movi	r5,2896
   23bb0:	002c1540 	call	2c154 <__mulsi3>
   23bb4:	e0bfbd15 	stw	r2,-268(fp)
		z3 = tmp12 + z2;
   23bb8:	e0ffc117 	ldw	r3,-252(fp)
   23bbc:	e0bfbd17 	ldw	r2,-268(fp)
   23bc0:	1885883a 	add	r2,r3,r2
   23bc4:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = z3 + z1;
   23bc8:	e0ffba17 	ldw	r3,-280(fp)
   23bcc:	e0bfbc17 	ldw	r2,-272(fp)
   23bd0:	1885883a 	add	r2,r3,r2
   23bd4:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = z3 - z1;
   23bd8:	e0ffba17 	ldw	r3,-280(fp)
   23bdc:	e0bfbc17 	ldw	r2,-272(fp)
   23be0:	1885c83a 	sub	r2,r3,r2
   23be4:	e0bfbf15 	stw	r2,-260(fp)
		tmp12 -= z2 << 2;
   23be8:	e0bfbd17 	ldw	r2,-268(fp)
   23bec:	1085883a 	add	r2,r2,r2
   23bf0:	1085883a 	add	r2,r2,r2
   23bf4:	e0ffc117 	ldw	r3,-252(fp)
   23bf8:	1885c83a 	sub	r2,r3,r2
   23bfc:	e0bfc115 	stw	r2,-252(fp)

		/* Odd part */

		z2 = (INT32) wsptr[1];
   23c00:	e0bfb717 	ldw	r2,-292(fp)
   23c04:	10800104 	addi	r2,r2,4
   23c08:	10800017 	ldw	r2,0(r2)
   23c0c:	e0bfbd15 	stw	r2,-268(fp)
		z3 = (INT32) wsptr[3];
   23c10:	e0bfb717 	ldw	r2,-292(fp)
   23c14:	10800304 	addi	r2,r2,12
   23c18:	10800017 	ldw	r2,0(r2)
   23c1c:	e0bfba15 	stw	r2,-280(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
   23c20:	e0ffbd17 	ldw	r3,-268(fp)
   23c24:	e0bfba17 	ldw	r2,-280(fp)
   23c28:	1885883a 	add	r2,r3,r2
   23c2c:	1009883a 	mov	r4,r2
   23c30:	0146a684 	movi	r5,6810
   23c34:	002c1540 	call	2c154 <__mulsi3>
   23c38:	e0bfbc15 	stw	r2,-272(fp)
		tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
   23c3c:	e13fbd17 	ldw	r4,-268(fp)
   23c40:	01441c44 	movi	r5,4209
   23c44:	002c1540 	call	2c154 <__mulsi3>
   23c48:	1007883a 	mov	r3,r2
   23c4c:	e0bfbc17 	ldw	r2,-272(fp)
   23c50:	1885883a 	add	r2,r3,r2
   23c54:	e0bfc215 	stw	r2,-248(fp)
		tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
   23c58:	e13fba17 	ldw	r4,-280(fp)
   23c5c:	016e9704 	movi	r5,-17828
   23c60:	002c1540 	call	2c154 <__mulsi3>
   23c64:	1007883a 	mov	r3,r2
   23c68:	e0bfbc17 	ldw	r2,-272(fp)
   23c6c:	1885883a 	add	r2,r3,r2
   23c70:	e0bfc815 	stw	r2,-224(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
   23c74:	e0ffbe17 	ldw	r3,-264(fp)
   23c78:	e0bfc217 	ldw	r2,-248(fp)
   23c7c:	1885883a 	add	r2,r3,r2
   23c80:	1005d4ba 	srai	r2,r2,18
   23c84:	1080ffcc 	andi	r2,r2,1023
   23c88:	e0ffb917 	ldw	r3,-284(fp)
   23c8c:	1885883a 	add	r2,r3,r2
   23c90:	10c00003 	ldbu	r3,0(r2)
   23c94:	e0bfc917 	ldw	r2,-220(fp)
   23c98:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
   23c9c:	e0bfc917 	ldw	r2,-220(fp)
   23ca0:	10800104 	addi	r2,r2,4
   23ca4:	e13fbe17 	ldw	r4,-264(fp)
   23ca8:	e0ffc217 	ldw	r3,-248(fp)
   23cac:	20c7c83a 	sub	r3,r4,r3
   23cb0:	1807d4ba 	srai	r3,r3,18
   23cb4:	18c0ffcc 	andi	r3,r3,1023
   23cb8:	e13fb917 	ldw	r4,-284(fp)
   23cbc:	20c7883a 	add	r3,r4,r3
   23cc0:	18c00003 	ldbu	r3,0(r3)
   23cc4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
   23cc8:	e0bfc917 	ldw	r2,-220(fp)
   23ccc:	10800044 	addi	r2,r2,1
   23cd0:	e13fbf17 	ldw	r4,-260(fp)
   23cd4:	e0ffc817 	ldw	r3,-224(fp)
   23cd8:	20c7883a 	add	r3,r4,r3
   23cdc:	1807d4ba 	srai	r3,r3,18
   23ce0:	18c0ffcc 	andi	r3,r3,1023
   23ce4:	e13fb917 	ldw	r4,-284(fp)
   23ce8:	20c7883a 	add	r3,r4,r3
   23cec:	18c00003 	ldbu	r3,0(r3)
   23cf0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
   23cf4:	e0bfc917 	ldw	r2,-220(fp)
   23cf8:	108000c4 	addi	r2,r2,3
   23cfc:	e13fbf17 	ldw	r4,-260(fp)
   23d00:	e0ffc817 	ldw	r3,-224(fp)
   23d04:	20c7c83a 	sub	r3,r4,r3
   23d08:	1807d4ba 	srai	r3,r3,18
   23d0c:	18c0ffcc 	andi	r3,r3,1023
   23d10:	e13fb917 	ldw	r4,-284(fp)
   23d14:	20c7883a 	add	r3,r4,r3
   23d18:	18c00003 	ldbu	r3,0(r3)
   23d1c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
   23d20:	e0bfc917 	ldw	r2,-220(fp)
   23d24:	10800084 	addi	r2,r2,2
   23d28:	e0ffc117 	ldw	r3,-252(fp)
   23d2c:	1807d4ba 	srai	r3,r3,18
   23d30:	18c0ffcc 	andi	r3,r3,1023
   23d34:	e13fb917 	ldw	r4,-284(fp)
   23d38:	20c7883a 	add	r3,r4,r3
   23d3c:	18c00003 	ldbu	r3,0(r3)
   23d40:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
   23d44:	e0bfb717 	ldw	r2,-292(fp)
   23d48:	10800504 	addi	r2,r2,20
   23d4c:	e0bfb715 	stw	r2,-292(fp)

	/* Pass 2: process 10 rows from work array, store into output array.
	* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 10; ctr++) {
   23d50:	e0bfb817 	ldw	r2,-288(fp)
   23d54:	10800044 	addi	r2,r2,1
   23d58:	e0bfb815 	stw	r2,-288(fp)
   23d5c:	e0bfb817 	ldw	r2,-288(fp)
   23d60:	10800290 	cmplti	r2,r2,10
   23d64:	103f6e1e 	bne	r2,zero,23b20 <jpeg_idct_5x10+0x588>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
	}
}
   23d68:	e037883a 	mov	sp,fp
   23d6c:	dfc00117 	ldw	ra,4(sp)
   23d70:	df000017 	ldw	fp,0(sp)
   23d74:	dec00204 	addi	sp,sp,8
   23d78:	f800283a 	ret

00023d7c <jpeg_idct_4x8>:

GLOBAL(void)
	jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   23d7c:	deffc804 	addi	sp,sp,-224
   23d80:	dfc03715 	stw	ra,220(sp)
   23d84:	df003615 	stw	fp,216(sp)
   23d88:	df003604 	addi	fp,sp,216
   23d8c:	e13ffc15 	stw	r4,-16(fp)
   23d90:	e17ffd15 	stw	r5,-12(fp)
   23d94:	e1bffe15 	stw	r6,-8(fp)
   23d98:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   23d9c:	e0bffc17 	ldw	r2,-16(fp)
   23da0:	10804917 	ldw	r2,292(r2)
   23da4:	10802004 	addi	r2,r2,128
   23da8:	e0bfce15 	stw	r2,-200(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
   23dac:	e0bffe17 	ldw	r2,-8(fp)
   23db0:	e0bfca15 	stw	r2,-216(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   23db4:	e0bffd17 	ldw	r2,-12(fp)
   23db8:	10801517 	ldw	r2,84(r2)
   23dbc:	e0bfcb15 	stw	r2,-212(fp)
	wsptr = workspace;
   23dc0:	e0bfdc04 	addi	r2,fp,-144
   23dc4:	e0bfcc15 	stw	r2,-208(fp)
	for (ctr = 4; ctr > 0; ctr--) {
   23dc8:	00800104 	movi	r2,4
   23dcc:	e0bfcd15 	stw	r2,-204(fp)
   23dd0:	00019b06 	br	24440 <jpeg_idct_4x8+0x6c4>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   23dd4:	e0bfca17 	ldw	r2,-216(fp)
   23dd8:	10800404 	addi	r2,r2,16
   23ddc:	1080000b 	ldhu	r2,0(r2)
   23de0:	10bfffcc 	andi	r2,r2,65535
   23de4:	10a0001c 	xori	r2,r2,32768
   23de8:	10a00004 	addi	r2,r2,-32768
   23dec:	1000601e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
   23df0:	e0bfca17 	ldw	r2,-216(fp)
   23df4:	10800804 	addi	r2,r2,32
   23df8:	1080000b 	ldhu	r2,0(r2)
   23dfc:	10bfffcc 	andi	r2,r2,65535
   23e00:	10a0001c 	xori	r2,r2,32768
   23e04:	10a00004 	addi	r2,r2,-32768
   23e08:	1000591e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   23e0c:	e0bfca17 	ldw	r2,-216(fp)
   23e10:	10800c04 	addi	r2,r2,48
   23e14:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
   23e18:	10bfffcc 	andi	r2,r2,65535
   23e1c:	10a0001c 	xori	r2,r2,32768
   23e20:	10a00004 	addi	r2,r2,-32768
   23e24:	1000521e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   23e28:	e0bfca17 	ldw	r2,-216(fp)
   23e2c:	10801004 	addi	r2,r2,64
   23e30:	1080000b 	ldhu	r2,0(r2)
   23e34:	10bfffcc 	andi	r2,r2,65535
   23e38:	10a0001c 	xori	r2,r2,32768
   23e3c:	10a00004 	addi	r2,r2,-32768
   23e40:	10004b1e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   23e44:	e0bfca17 	ldw	r2,-216(fp)
   23e48:	10801404 	addi	r2,r2,80
   23e4c:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
   23e50:	10bfffcc 	andi	r2,r2,65535
   23e54:	10a0001c 	xori	r2,r2,32768
   23e58:	10a00004 	addi	r2,r2,-32768
   23e5c:	1000441e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   23e60:	e0bfca17 	ldw	r2,-216(fp)
   23e64:	10801804 	addi	r2,r2,96
   23e68:	1080000b 	ldhu	r2,0(r2)
   23e6c:	10bfffcc 	andi	r2,r2,65535
   23e70:	10a0001c 	xori	r2,r2,32768
   23e74:	10a00004 	addi	r2,r2,-32768
   23e78:	10003d1e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*7] == 0) {
   23e7c:	e0bfca17 	ldw	r2,-216(fp)
   23e80:	10801c04 	addi	r2,r2,112
   23e84:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
   23e88:	10bfffcc 	andi	r2,r2,65535
   23e8c:	10a0001c 	xori	r2,r2,32768
   23e90:	10a00004 	addi	r2,r2,-32768
   23e94:	1000361e 	bne	r2,zero,23f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
   23e98:	e0bfca17 	ldw	r2,-216(fp)
   23e9c:	1080000b 	ldhu	r2,0(r2)
   23ea0:	10ffffcc 	andi	r3,r2,65535
   23ea4:	18e0001c 	xori	r3,r3,32768
   23ea8:	18e00004 	addi	r3,r3,-32768
   23eac:	e0bfcb17 	ldw	r2,-212(fp)
   23eb0:	10800017 	ldw	r2,0(r2)
   23eb4:	1809883a 	mov	r4,r3
   23eb8:	100b883a 	mov	r5,r2
   23ebc:	002c1540 	call	2c154 <__mulsi3>
   23ec0:	1085883a 	add	r2,r2,r2
   23ec4:	1085883a 	add	r2,r2,r2
   23ec8:	e0bfcf15 	stw	r2,-196(fp)

				wsptr[4*0] = dcval;
   23ecc:	e0bfcc17 	ldw	r2,-208(fp)
   23ed0:	e0ffcf17 	ldw	r3,-196(fp)
   23ed4:	10c00015 	stw	r3,0(r2)
				wsptr[4*1] = dcval;
   23ed8:	e0bfcc17 	ldw	r2,-208(fp)
   23edc:	10800404 	addi	r2,r2,16
   23ee0:	e0ffcf17 	ldw	r3,-196(fp)
   23ee4:	10c00015 	stw	r3,0(r2)
				wsptr[4*2] = dcval;
   23ee8:	e0bfcc17 	ldw	r2,-208(fp)
   23eec:	10800804 	addi	r2,r2,32
   23ef0:	e0ffcf17 	ldw	r3,-196(fp)
   23ef4:	10c00015 	stw	r3,0(r2)
				wsptr[4*3] = dcval;
   23ef8:	e0bfcc17 	ldw	r2,-208(fp)
   23efc:	10800c04 	addi	r2,r2,48
   23f00:	e0ffcf17 	ldw	r3,-196(fp)
   23f04:	10c00015 	stw	r3,0(r2)
				wsptr[4*4] = dcval;
   23f08:	e0bfcc17 	ldw	r2,-208(fp)
   23f0c:	10801004 	addi	r2,r2,64
   23f10:	e0ffcf17 	ldw	r3,-196(fp)
   23f14:	10c00015 	stw	r3,0(r2)
				wsptr[4*5] = dcval;
   23f18:	e0bfcc17 	ldw	r2,-208(fp)
   23f1c:	10801404 	addi	r2,r2,80
   23f20:	e0ffcf17 	ldw	r3,-196(fp)
   23f24:	10c00015 	stw	r3,0(r2)
				wsptr[4*6] = dcval;
   23f28:	e0bfcc17 	ldw	r2,-208(fp)
   23f2c:	10801804 	addi	r2,r2,96
   23f30:	e0ffcf17 	ldw	r3,-196(fp)
   23f34:	10c00015 	stw	r3,0(r2)
				wsptr[4*7] = dcval;
   23f38:	e0bfcc17 	ldw	r2,-208(fp)
   23f3c:	10801c04 	addi	r2,r2,112
   23f40:	e0ffcf17 	ldw	r3,-196(fp)
   23f44:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
   23f48:	e0bfca17 	ldw	r2,-216(fp)
   23f4c:	10800084 	addi	r2,r2,2
   23f50:	e0bfca15 	stw	r2,-216(fp)
				quantptr++;
   23f54:	e0bfcb17 	ldw	r2,-212(fp)
   23f58:	10800104 	addi	r2,r2,4
   23f5c:	e0bfcb15 	stw	r2,-212(fp)
				wsptr++;
   23f60:	e0bfcc17 	ldw	r2,-208(fp)
   23f64:	10800104 	addi	r2,r2,4
   23f68:	e0bfcc15 	stw	r2,-208(fp)
				continue;
   23f6c:	00013106 	br	24434 <jpeg_idct_4x8+0x6b8>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   23f70:	e0bfca17 	ldw	r2,-216(fp)
   23f74:	10800804 	addi	r2,r2,32
   23f78:	1080000b 	ldhu	r2,0(r2)
   23f7c:	10ffffcc 	andi	r3,r2,65535
   23f80:	18e0001c 	xori	r3,r3,32768
   23f84:	18e00004 	addi	r3,r3,-32768
   23f88:	e0bfcb17 	ldw	r2,-212(fp)
   23f8c:	10801004 	addi	r2,r2,64
   23f90:	10800017 	ldw	r2,0(r2)
   23f94:	1809883a 	mov	r4,r3
   23f98:	100b883a 	mov	r5,r2
   23f9c:	002c1540 	call	2c154 <__mulsi3>
   23fa0:	e0bfd015 	stw	r2,-192(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
   23fa4:	e0bfca17 	ldw	r2,-216(fp)
   23fa8:	10801804 	addi	r2,r2,96
   23fac:	1080000b 	ldhu	r2,0(r2)
   23fb0:	10ffffcc 	andi	r3,r2,65535
   23fb4:	18e0001c 	xori	r3,r3,32768
   23fb8:	18e00004 	addi	r3,r3,-32768
   23fbc:	e0bfcb17 	ldw	r2,-212(fp)
   23fc0:	10803004 	addi	r2,r2,192
   23fc4:	10800017 	ldw	r2,0(r2)
   23fc8:	1809883a 	mov	r4,r3
   23fcc:	100b883a 	mov	r5,r2
   23fd0:	002c1540 	call	2c154 <__mulsi3>
   23fd4:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   23fd8:	e0ffd017 	ldw	r3,-192(fp)
   23fdc:	e0bfd117 	ldw	r2,-188(fp)
   23fe0:	1885883a 	add	r2,r3,r2
   23fe4:	1009883a 	mov	r4,r2
   23fe8:	01445444 	movi	r5,4433
   23fec:	002c1540 	call	2c154 <__mulsi3>
   23ff0:	e0bfd215 	stw	r2,-184(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
   23ff4:	e13fd017 	ldw	r4,-192(fp)
   23ff8:	01461f84 	movi	r5,6270
   23ffc:	002c1540 	call	2c154 <__mulsi3>
   24000:	1007883a 	mov	r3,r2
   24004:	e0bfd217 	ldw	r2,-184(fp)
   24008:	1885883a 	add	r2,r3,r2
   2400c:	e0bfd315 	stw	r2,-180(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
   24010:	e13fd117 	ldw	r4,-188(fp)
   24014:	017137c4 	movi	r5,-15137
   24018:	002c1540 	call	2c154 <__mulsi3>
   2401c:	1007883a 	mov	r3,r2
   24020:	e0bfd217 	ldw	r2,-184(fp)
   24024:	1885883a 	add	r2,r3,r2
   24028:	e0bfd415 	stw	r2,-176(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   2402c:	e0bfca17 	ldw	r2,-216(fp)
   24030:	1080000b 	ldhu	r2,0(r2)
   24034:	10ffffcc 	andi	r3,r2,65535
   24038:	18e0001c 	xori	r3,r3,32768
   2403c:	18e00004 	addi	r3,r3,-32768
   24040:	e0bfcb17 	ldw	r2,-212(fp)
   24044:	10800017 	ldw	r2,0(r2)
   24048:	1809883a 	mov	r4,r3
   2404c:	100b883a 	mov	r5,r2
   24050:	002c1540 	call	2c154 <__mulsi3>
   24054:	e0bfd015 	stw	r2,-192(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   24058:	e0bfca17 	ldw	r2,-216(fp)
   2405c:	10801004 	addi	r2,r2,64
   24060:	1080000b 	ldhu	r2,0(r2)
   24064:	10ffffcc 	andi	r3,r2,65535
   24068:	18e0001c 	xori	r3,r3,32768
   2406c:	18e00004 	addi	r3,r3,-32768
   24070:	e0bfcb17 	ldw	r2,-212(fp)
   24074:	10802004 	addi	r2,r2,128
   24078:	10800017 	ldw	r2,0(r2)
   2407c:	1809883a 	mov	r4,r3
   24080:	100b883a 	mov	r5,r2
   24084:	002c1540 	call	2c154 <__mulsi3>
   24088:	e0bfd115 	stw	r2,-188(fp)
		z2 <<= CONST_BITS;
   2408c:	e0bfd017 	ldw	r2,-192(fp)
   24090:	1004937a 	slli	r2,r2,13
   24094:	e0bfd015 	stw	r2,-192(fp)
		z3 <<= CONST_BITS;
   24098:	e0bfd117 	ldw	r2,-188(fp)
   2409c:	1004937a 	slli	r2,r2,13
   240a0:	e0bfd115 	stw	r2,-188(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
   240a4:	e0bfd017 	ldw	r2,-192(fp)
   240a8:	10810004 	addi	r2,r2,1024
   240ac:	e0bfd015 	stw	r2,-192(fp)

		tmp0 = z2 + z3;
   240b0:	e0ffd017 	ldw	r3,-192(fp)
   240b4:	e0bfd117 	ldw	r2,-188(fp)
   240b8:	1885883a 	add	r2,r3,r2
   240bc:	e0bfd515 	stw	r2,-172(fp)
		tmp1 = z2 - z3;
   240c0:	e0ffd017 	ldw	r3,-192(fp)
   240c4:	e0bfd117 	ldw	r2,-188(fp)
   240c8:	1885c83a 	sub	r2,r3,r2
   240cc:	e0bfd615 	stw	r2,-168(fp)

		tmp10 = tmp0 + tmp2;
   240d0:	e0ffd517 	ldw	r3,-172(fp)
   240d4:	e0bfd317 	ldw	r2,-180(fp)
   240d8:	1885883a 	add	r2,r3,r2
   240dc:	e0bfd715 	stw	r2,-164(fp)
		tmp13 = tmp0 - tmp2;
   240e0:	e0ffd517 	ldw	r3,-172(fp)
   240e4:	e0bfd317 	ldw	r2,-180(fp)
   240e8:	1885c83a 	sub	r2,r3,r2
   240ec:	e0bfd815 	stw	r2,-160(fp)
		tmp11 = tmp1 + tmp3;
   240f0:	e0ffd617 	ldw	r3,-168(fp)
   240f4:	e0bfd417 	ldw	r2,-176(fp)
   240f8:	1885883a 	add	r2,r3,r2
   240fc:	e0bfd915 	stw	r2,-156(fp)
		tmp12 = tmp1 - tmp3;
   24100:	e0ffd617 	ldw	r3,-168(fp)
   24104:	e0bfd417 	ldw	r2,-176(fp)
   24108:	1885c83a 	sub	r2,r3,r2
   2410c:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
   24110:	e0bfca17 	ldw	r2,-216(fp)
   24114:	10801c04 	addi	r2,r2,112
   24118:	1080000b 	ldhu	r2,0(r2)
   2411c:	10ffffcc 	andi	r3,r2,65535
   24120:	18e0001c 	xori	r3,r3,32768
   24124:	18e00004 	addi	r3,r3,-32768
   24128:	e0bfcb17 	ldw	r2,-212(fp)
   2412c:	10803804 	addi	r2,r2,224
   24130:	10800017 	ldw	r2,0(r2)
   24134:	1809883a 	mov	r4,r3
   24138:	100b883a 	mov	r5,r2
   2413c:	002c1540 	call	2c154 <__mulsi3>
   24140:	e0bfd515 	stw	r2,-172(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   24144:	e0bfca17 	ldw	r2,-216(fp)
   24148:	10801404 	addi	r2,r2,80
   2414c:	1080000b 	ldhu	r2,0(r2)
   24150:	10ffffcc 	andi	r3,r2,65535
   24154:	18e0001c 	xori	r3,r3,32768
   24158:	18e00004 	addi	r3,r3,-32768
   2415c:	e0bfcb17 	ldw	r2,-212(fp)
   24160:	10802804 	addi	r2,r2,160
   24164:	10800017 	ldw	r2,0(r2)
   24168:	1809883a 	mov	r4,r3
   2416c:	100b883a 	mov	r5,r2
   24170:	002c1540 	call	2c154 <__mulsi3>
   24174:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   24178:	e0bfca17 	ldw	r2,-216(fp)
   2417c:	10800c04 	addi	r2,r2,48
   24180:	1080000b 	ldhu	r2,0(r2)
   24184:	10ffffcc 	andi	r3,r2,65535
   24188:	18e0001c 	xori	r3,r3,32768
   2418c:	18e00004 	addi	r3,r3,-32768
   24190:	e0bfcb17 	ldw	r2,-212(fp)
   24194:	10801804 	addi	r2,r2,96
   24198:	10800017 	ldw	r2,0(r2)
   2419c:	1809883a 	mov	r4,r3
   241a0:	100b883a 	mov	r5,r2
   241a4:	002c1540 	call	2c154 <__mulsi3>
   241a8:	e0bfd315 	stw	r2,-180(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   241ac:	e0bfca17 	ldw	r2,-216(fp)
   241b0:	10800404 	addi	r2,r2,16
   241b4:	1080000b 	ldhu	r2,0(r2)
   241b8:	10ffffcc 	andi	r3,r2,65535
   241bc:	18e0001c 	xori	r3,r3,32768
   241c0:	18e00004 	addi	r3,r3,-32768
   241c4:	e0bfcb17 	ldw	r2,-212(fp)
   241c8:	10800804 	addi	r2,r2,32
   241cc:	10800017 	ldw	r2,0(r2)
   241d0:	1809883a 	mov	r4,r3
   241d4:	100b883a 	mov	r5,r2
   241d8:	002c1540 	call	2c154 <__mulsi3>
   241dc:	e0bfd415 	stw	r2,-176(fp)

		z2 = tmp0 + tmp2;
   241e0:	e0ffd517 	ldw	r3,-172(fp)
   241e4:	e0bfd317 	ldw	r2,-180(fp)
   241e8:	1885883a 	add	r2,r3,r2
   241ec:	e0bfd015 	stw	r2,-192(fp)
		z3 = tmp1 + tmp3;
   241f0:	e0ffd617 	ldw	r3,-168(fp)
   241f4:	e0bfd417 	ldw	r2,-176(fp)
   241f8:	1885883a 	add	r2,r3,r2
   241fc:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
   24200:	e0ffd017 	ldw	r3,-192(fp)
   24204:	e0bfd117 	ldw	r2,-188(fp)
   24208:	1885883a 	add	r2,r3,r2
   2420c:	1009883a 	mov	r4,r2
   24210:	01496844 	movi	r5,9633
   24214:	002c1540 	call	2c154 <__mulsi3>
   24218:	e0bfd215 	stw	r2,-184(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
   2421c:	e13fd017 	ldw	r4,-192(fp)
   24220:	01704ec4 	movi	r5,-16069
   24224:	002c1540 	call	2c154 <__mulsi3>
   24228:	e0bfd015 	stw	r2,-192(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
   2422c:	e13fd117 	ldw	r4,-188(fp)
   24230:	017ce104 	movi	r5,-3196
   24234:	002c1540 	call	2c154 <__mulsi3>
   24238:	e0bfd115 	stw	r2,-188(fp)
		z2 += z1;
   2423c:	e0ffd017 	ldw	r3,-192(fp)
   24240:	e0bfd217 	ldw	r2,-184(fp)
   24244:	1885883a 	add	r2,r3,r2
   24248:	e0bfd015 	stw	r2,-192(fp)
		z3 += z1;
   2424c:	e0ffd117 	ldw	r3,-188(fp)
   24250:	e0bfd217 	ldw	r2,-184(fp)
   24254:	1885883a 	add	r2,r3,r2
   24258:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
   2425c:	e0ffd517 	ldw	r3,-172(fp)
   24260:	e0bfd417 	ldw	r2,-176(fp)
   24264:	1885883a 	add	r2,r3,r2
   24268:	1009883a 	mov	r4,r2
   2426c:	0178ccc4 	movi	r5,-7373
   24270:	002c1540 	call	2c154 <__mulsi3>
   24274:	e0bfd215 	stw	r2,-184(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
   24278:	e13fd517 	ldw	r4,-172(fp)
   2427c:	01426384 	movi	r5,2446
   24280:	002c1540 	call	2c154 <__mulsi3>
   24284:	e0bfd515 	stw	r2,-172(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
   24288:	e13fd417 	ldw	r4,-176(fp)
   2428c:	014c02c4 	movi	r5,12299
   24290:	002c1540 	call	2c154 <__mulsi3>
   24294:	e0bfd415 	stw	r2,-176(fp)
		tmp0 += z1 + z2;
   24298:	e0ffd217 	ldw	r3,-184(fp)
   2429c:	e0bfd017 	ldw	r2,-192(fp)
   242a0:	1885883a 	add	r2,r3,r2
   242a4:	e0ffd517 	ldw	r3,-172(fp)
   242a8:	1885883a 	add	r2,r3,r2
   242ac:	e0bfd515 	stw	r2,-172(fp)
		tmp3 += z1 + z3;
   242b0:	e0ffd217 	ldw	r3,-184(fp)
   242b4:	e0bfd117 	ldw	r2,-188(fp)
   242b8:	1885883a 	add	r2,r3,r2
   242bc:	e0ffd417 	ldw	r3,-176(fp)
   242c0:	1885883a 	add	r2,r3,r2
   242c4:	e0bfd415 	stw	r2,-176(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
   242c8:	e0ffd617 	ldw	r3,-168(fp)
   242cc:	e0bfd317 	ldw	r2,-180(fp)
   242d0:	1885883a 	add	r2,r3,r2
   242d4:	1009883a 	mov	r4,r2
   242d8:	016b7f44 	movi	r5,-20995
   242dc:	002c1540 	call	2c154 <__mulsi3>
   242e0:	e0bfd215 	stw	r2,-184(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
   242e4:	e13fd617 	ldw	r4,-168(fp)
   242e8:	01506cc4 	movi	r5,16819
   242ec:	002c1540 	call	2c154 <__mulsi3>
   242f0:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
   242f4:	e13fd317 	ldw	r4,-180(fp)
   242f8:	01589504 	movi	r5,25172
   242fc:	002c1540 	call	2c154 <__mulsi3>
   24300:	e0bfd315 	stw	r2,-180(fp)
		tmp1 += z1 + z3;
   24304:	e0ffd217 	ldw	r3,-184(fp)
   24308:	e0bfd117 	ldw	r2,-188(fp)
   2430c:	1885883a 	add	r2,r3,r2
   24310:	e0ffd617 	ldw	r3,-168(fp)
   24314:	1885883a 	add	r2,r3,r2
   24318:	e0bfd615 	stw	r2,-168(fp)
		tmp2 += z1 + z2;
   2431c:	e0ffd217 	ldw	r3,-184(fp)
   24320:	e0bfd017 	ldw	r2,-192(fp)
   24324:	1885883a 	add	r2,r3,r2
   24328:	e0ffd317 	ldw	r3,-180(fp)
   2432c:	1885883a 	add	r2,r3,r2
   24330:	e0bfd315 	stw	r2,-180(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
   24334:	e0ffd717 	ldw	r3,-164(fp)
   24338:	e0bfd417 	ldw	r2,-176(fp)
   2433c:	1885883a 	add	r2,r3,r2
   24340:	1007d2fa 	srai	r3,r2,11
   24344:	e0bfcc17 	ldw	r2,-208(fp)
   24348:	10c00015 	stw	r3,0(r2)
		wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
   2434c:	e0bfcc17 	ldw	r2,-208(fp)
   24350:	10801c04 	addi	r2,r2,112
   24354:	e13fd717 	ldw	r4,-164(fp)
   24358:	e0ffd417 	ldw	r3,-176(fp)
   2435c:	20c7c83a 	sub	r3,r4,r3
   24360:	1807d2fa 	srai	r3,r3,11
   24364:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
   24368:	e0bfcc17 	ldw	r2,-208(fp)
   2436c:	10800404 	addi	r2,r2,16
   24370:	e13fd917 	ldw	r4,-156(fp)
   24374:	e0ffd317 	ldw	r3,-180(fp)
   24378:	20c7883a 	add	r3,r4,r3
   2437c:	1807d2fa 	srai	r3,r3,11
   24380:	10c00015 	stw	r3,0(r2)
		wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
   24384:	e0bfcc17 	ldw	r2,-208(fp)
   24388:	10801804 	addi	r2,r2,96
   2438c:	e13fd917 	ldw	r4,-156(fp)
   24390:	e0ffd317 	ldw	r3,-180(fp)
   24394:	20c7c83a 	sub	r3,r4,r3
   24398:	1807d2fa 	srai	r3,r3,11
   2439c:	10c00015 	stw	r3,0(r2)
		wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
   243a0:	e0bfcc17 	ldw	r2,-208(fp)
   243a4:	10800804 	addi	r2,r2,32
   243a8:	e13fda17 	ldw	r4,-152(fp)
   243ac:	e0ffd617 	ldw	r3,-168(fp)
   243b0:	20c7883a 	add	r3,r4,r3
   243b4:	1807d2fa 	srai	r3,r3,11
   243b8:	10c00015 	stw	r3,0(r2)
		wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
   243bc:	e0bfcc17 	ldw	r2,-208(fp)
   243c0:	10801404 	addi	r2,r2,80
   243c4:	e13fda17 	ldw	r4,-152(fp)
   243c8:	e0ffd617 	ldw	r3,-168(fp)
   243cc:	20c7c83a 	sub	r3,r4,r3
   243d0:	1807d2fa 	srai	r3,r3,11
   243d4:	10c00015 	stw	r3,0(r2)
		wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
   243d8:	e0bfcc17 	ldw	r2,-208(fp)
   243dc:	10800c04 	addi	r2,r2,48
   243e0:	e13fd817 	ldw	r4,-160(fp)
   243e4:	e0ffd517 	ldw	r3,-172(fp)
   243e8:	20c7883a 	add	r3,r4,r3
   243ec:	1807d2fa 	srai	r3,r3,11
   243f0:	10c00015 	stw	r3,0(r2)
		wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
   243f4:	e0bfcc17 	ldw	r2,-208(fp)
   243f8:	10801004 	addi	r2,r2,64
   243fc:	e13fd817 	ldw	r4,-160(fp)
   24400:	e0ffd517 	ldw	r3,-172(fp)
   24404:	20c7c83a 	sub	r3,r4,r3
   24408:	1807d2fa 	srai	r3,r3,11
   2440c:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
   24410:	e0bfca17 	ldw	r2,-216(fp)
   24414:	10800084 	addi	r2,r2,2
   24418:	e0bfca15 	stw	r2,-216(fp)
		quantptr++;
   2441c:	e0bfcb17 	ldw	r2,-212(fp)
   24420:	10800104 	addi	r2,r2,4
   24424:	e0bfcb15 	stw	r2,-212(fp)
		wsptr++;
   24428:	e0bfcc17 	ldw	r2,-208(fp)
   2442c:	10800104 	addi	r2,r2,4
   24430:	e0bfcc15 	stw	r2,-208(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 4; ctr > 0; ctr--) {
   24434:	e0bfcd17 	ldw	r2,-204(fp)
   24438:	10bfffc4 	addi	r2,r2,-1
   2443c:	e0bfcd15 	stw	r2,-204(fp)
   24440:	e0bfcd17 	ldw	r2,-204(fp)
   24444:	00be6316 	blt	zero,r2,23dd4 <jpeg_idct_4x8+0x58>
	}

	/* Pass 2: process 8 rows from work array, store into output array.
	* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
	*/
	wsptr = workspace;
   24448:	e0bfdc04 	addi	r2,fp,-144
   2444c:	e0bfcc15 	stw	r2,-208(fp)
	for (ctr = 0; ctr < 8; ctr++) {
   24450:	e03fcd15 	stw	zero,-204(fp)
   24454:	00006906 	br	245fc <jpeg_idct_4x8+0x880>
		outptr = output_buf[ctr] + output_col;
   24458:	e0bfcd17 	ldw	r2,-204(fp)
   2445c:	1085883a 	add	r2,r2,r2
   24460:	1085883a 	add	r2,r2,r2
   24464:	e0ffff17 	ldw	r3,-4(fp)
   24468:	1885883a 	add	r2,r3,r2
   2446c:	10c00017 	ldw	r3,0(r2)
   24470:	e0800217 	ldw	r2,8(fp)
   24474:	1885883a 	add	r2,r3,r2
   24478:	e0bfdb15 	stw	r2,-148(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   2447c:	e0bfcc17 	ldw	r2,-208(fp)
   24480:	10800017 	ldw	r2,0(r2)
   24484:	10800404 	addi	r2,r2,16
   24488:	e0bfd515 	stw	r2,-172(fp)
		tmp2 = (INT32) wsptr[2];
   2448c:	e0bfcc17 	ldw	r2,-208(fp)
   24490:	10800204 	addi	r2,r2,8
   24494:	10800017 	ldw	r2,0(r2)
   24498:	e0bfd315 	stw	r2,-180(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
   2449c:	e0ffd517 	ldw	r3,-172(fp)
   244a0:	e0bfd317 	ldw	r2,-180(fp)
   244a4:	1885883a 	add	r2,r3,r2
   244a8:	1004937a 	slli	r2,r2,13
   244ac:	e0bfd715 	stw	r2,-164(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
   244b0:	e0ffd517 	ldw	r3,-172(fp)
   244b4:	e0bfd317 	ldw	r2,-180(fp)
   244b8:	1885c83a 	sub	r2,r3,r2
   244bc:	1004937a 	slli	r2,r2,13
   244c0:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = (INT32) wsptr[1];
   244c4:	e0bfcc17 	ldw	r2,-208(fp)
   244c8:	10800104 	addi	r2,r2,4
   244cc:	10800017 	ldw	r2,0(r2)
   244d0:	e0bfd015 	stw	r2,-192(fp)
		z3 = (INT32) wsptr[3];
   244d4:	e0bfcc17 	ldw	r2,-208(fp)
   244d8:	10800304 	addi	r2,r2,12
   244dc:	10800017 	ldw	r2,0(r2)
   244e0:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
   244e4:	e0ffd017 	ldw	r3,-192(fp)
   244e8:	e0bfd117 	ldw	r2,-188(fp)
   244ec:	1885883a 	add	r2,r3,r2
   244f0:	1009883a 	mov	r4,r2
   244f4:	01445444 	movi	r5,4433
   244f8:	002c1540 	call	2c154 <__mulsi3>
   244fc:	e0bfd215 	stw	r2,-184(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
   24500:	e13fd017 	ldw	r4,-192(fp)
   24504:	01461f84 	movi	r5,6270
   24508:	002c1540 	call	2c154 <__mulsi3>
   2450c:	1007883a 	mov	r3,r2
   24510:	e0bfd217 	ldw	r2,-184(fp)
   24514:	1885883a 	add	r2,r3,r2
   24518:	e0bfd515 	stw	r2,-172(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
   2451c:	e13fd117 	ldw	r4,-188(fp)
   24520:	017137c4 	movi	r5,-15137
   24524:	002c1540 	call	2c154 <__mulsi3>
   24528:	1007883a 	mov	r3,r2
   2452c:	e0bfd217 	ldw	r2,-184(fp)
   24530:	1885883a 	add	r2,r3,r2
   24534:	e0bfd315 	stw	r2,-180(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   24538:	e0ffd717 	ldw	r3,-164(fp)
   2453c:	e0bfd517 	ldw	r2,-172(fp)
   24540:	1885883a 	add	r2,r3,r2
   24544:	1005d4ba 	srai	r2,r2,18
   24548:	1080ffcc 	andi	r2,r2,1023
   2454c:	e0ffce17 	ldw	r3,-200(fp)
   24550:	1885883a 	add	r2,r3,r2
   24554:	10c00003 	ldbu	r3,0(r2)
   24558:	e0bfdb17 	ldw	r2,-148(fp)
   2455c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   24560:	e0bfdb17 	ldw	r2,-148(fp)
   24564:	108000c4 	addi	r2,r2,3
   24568:	e13fd717 	ldw	r4,-164(fp)
   2456c:	e0ffd517 	ldw	r3,-172(fp)
   24570:	20c7c83a 	sub	r3,r4,r3
   24574:	1807d4ba 	srai	r3,r3,18
   24578:	18c0ffcc 	andi	r3,r3,1023
   2457c:	e13fce17 	ldw	r4,-200(fp)
   24580:	20c7883a 	add	r3,r4,r3
   24584:	18c00003 	ldbu	r3,0(r3)
   24588:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
   2458c:	e0bfdb17 	ldw	r2,-148(fp)
   24590:	10800044 	addi	r2,r2,1
   24594:	e13fda17 	ldw	r4,-152(fp)
   24598:	e0ffd317 	ldw	r3,-180(fp)
   2459c:	20c7883a 	add	r3,r4,r3
   245a0:	1807d4ba 	srai	r3,r3,18
   245a4:	18c0ffcc 	andi	r3,r3,1023
   245a8:	e13fce17 	ldw	r4,-200(fp)
   245ac:	20c7883a 	add	r3,r4,r3
   245b0:	18c00003 	ldbu	r3,0(r3)
   245b4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
   245b8:	e0bfdb17 	ldw	r2,-148(fp)
   245bc:	10800084 	addi	r2,r2,2
   245c0:	e13fda17 	ldw	r4,-152(fp)
   245c4:	e0ffd317 	ldw	r3,-180(fp)
   245c8:	20c7c83a 	sub	r3,r4,r3
   245cc:	1807d4ba 	srai	r3,r3,18
   245d0:	18c0ffcc 	andi	r3,r3,1023
   245d4:	e13fce17 	ldw	r4,-200(fp)
   245d8:	20c7883a 	add	r3,r4,r3
   245dc:	18c00003 	ldbu	r3,0(r3)
   245e0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
   245e4:	e0bfcc17 	ldw	r2,-208(fp)
   245e8:	10800404 	addi	r2,r2,16
   245ec:	e0bfcc15 	stw	r2,-208(fp)

	/* Pass 2: process 8 rows from work array, store into output array.
	* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++) {
   245f0:	e0bfcd17 	ldw	r2,-204(fp)
   245f4:	10800044 	addi	r2,r2,1
   245f8:	e0bfcd15 	stw	r2,-204(fp)
   245fc:	e0bfcd17 	ldw	r2,-204(fp)
   24600:	10800210 	cmplti	r2,r2,8
   24604:	103f941e 	bne	r2,zero,24458 <jpeg_idct_4x8+0x6dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
   24608:	e037883a 	mov	sp,fp
   2460c:	dfc00117 	ldw	ra,4(sp)
   24610:	df000017 	ldw	fp,0(sp)
   24614:	dec00204 	addi	sp,sp,8
   24618:	f800283a 	ret

0002461c <jpeg_idct_3x6>:

GLOBAL(void)
	jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   2461c:	deffd904 	addi	sp,sp,-156
   24620:	dfc02615 	stw	ra,152(sp)
   24624:	df002515 	stw	fp,148(sp)
   24628:	df002504 	addi	fp,sp,148
   2462c:	e13ffc15 	stw	r4,-16(fp)
   24630:	e17ffd15 	stw	r5,-12(fp)
   24634:	e1bffe15 	stw	r6,-8(fp)
   24638:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   2463c:	e0bffc17 	ldw	r2,-16(fp)
   24640:	10804917 	ldw	r2,292(r2)
   24644:	10802004 	addi	r2,r2,128
   24648:	e0bfdf15 	stw	r2,-132(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
   2464c:	e0bffe17 	ldw	r2,-8(fp)
   24650:	e0bfdb15 	stw	r2,-148(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   24654:	e0bffd17 	ldw	r2,-12(fp)
   24658:	10801517 	ldw	r2,84(r2)
   2465c:	e0bfdc15 	stw	r2,-144(fp)
	wsptr = workspace;
   24660:	e0bfea04 	addi	r2,fp,-88
   24664:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
   24668:	e03fde15 	stw	zero,-136(fp)
   2466c:	0000bd06 	br	24964 <jpeg_idct_3x6+0x348>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   24670:	e0bfdb17 	ldw	r2,-148(fp)
   24674:	1080000b 	ldhu	r2,0(r2)
   24678:	10ffffcc 	andi	r3,r2,65535
   2467c:	18e0001c 	xori	r3,r3,32768
   24680:	18e00004 	addi	r3,r3,-32768
   24684:	e0bfdc17 	ldw	r2,-144(fp)
   24688:	10800017 	ldw	r2,0(r2)
   2468c:	1809883a 	mov	r4,r3
   24690:	100b883a 	mov	r5,r2
   24694:	002c1540 	call	2c154 <__mulsi3>
   24698:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
   2469c:	e0bfe017 	ldw	r2,-128(fp)
   246a0:	1004937a 	slli	r2,r2,13
   246a4:	e0bfe015 	stw	r2,-128(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
   246a8:	e0bfe017 	ldw	r2,-128(fp)
   246ac:	10810004 	addi	r2,r2,1024
   246b0:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
   246b4:	e0bfdb17 	ldw	r2,-148(fp)
   246b8:	10801004 	addi	r2,r2,64
   246bc:	1080000b 	ldhu	r2,0(r2)
   246c0:	10ffffcc 	andi	r3,r2,65535
   246c4:	18e0001c 	xori	r3,r3,32768
   246c8:	18e00004 	addi	r3,r3,-32768
   246cc:	e0bfdc17 	ldw	r2,-144(fp)
   246d0:	10802004 	addi	r2,r2,128
   246d4:	10800017 	ldw	r2,0(r2)
   246d8:	1809883a 	mov	r4,r3
   246dc:	100b883a 	mov	r5,r2
   246e0:	002c1540 	call	2c154 <__mulsi3>
   246e4:	e0bfe115 	stw	r2,-124(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
   246e8:	e13fe117 	ldw	r4,-124(fp)
   246ec:	0145a844 	movi	r5,5793
   246f0:	002c1540 	call	2c154 <__mulsi3>
   246f4:	e0bfe215 	stw	r2,-120(fp)
		tmp1 = tmp0 + tmp10;
   246f8:	e0ffe017 	ldw	r3,-128(fp)
   246fc:	e0bfe217 	ldw	r2,-120(fp)
   24700:	1885883a 	add	r2,r3,r2
   24704:	e0bfe315 	stw	r2,-116(fp)
		tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
   24708:	e0ffe017 	ldw	r3,-128(fp)
   2470c:	e0bfe217 	ldw	r2,-120(fp)
   24710:	1887c83a 	sub	r3,r3,r2
   24714:	e0bfe217 	ldw	r2,-120(fp)
   24718:	1885c83a 	sub	r2,r3,r2
   2471c:	1005d2fa 	srai	r2,r2,11
   24720:	e0bfe415 	stw	r2,-112(fp)
		tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   24724:	e0bfdb17 	ldw	r2,-148(fp)
   24728:	10800804 	addi	r2,r2,32
   2472c:	1080000b 	ldhu	r2,0(r2)
   24730:	10ffffcc 	andi	r3,r2,65535
   24734:	18e0001c 	xori	r3,r3,32768
   24738:	18e00004 	addi	r3,r3,-32768
   2473c:	e0bfdc17 	ldw	r2,-144(fp)
   24740:	10801004 	addi	r2,r2,64
   24744:	10800017 	ldw	r2,0(r2)
   24748:	1809883a 	mov	r4,r3
   2474c:	100b883a 	mov	r5,r2
   24750:	002c1540 	call	2c154 <__mulsi3>
   24754:	e0bfe215 	stw	r2,-120(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
   24758:	e13fe217 	ldw	r4,-120(fp)
   2475c:	0149cc44 	movi	r5,10033
   24760:	002c1540 	call	2c154 <__mulsi3>
   24764:	e0bfe015 	stw	r2,-128(fp)
		tmp10 = tmp1 + tmp0;
   24768:	e0ffe317 	ldw	r3,-116(fp)
   2476c:	e0bfe017 	ldw	r2,-128(fp)
   24770:	1885883a 	add	r2,r3,r2
   24774:	e0bfe215 	stw	r2,-120(fp)
		tmp12 = tmp1 - tmp0;
   24778:	e0ffe317 	ldw	r3,-116(fp)
   2477c:	e0bfe017 	ldw	r2,-128(fp)
   24780:	1885c83a 	sub	r2,r3,r2
   24784:	e0bfe515 	stw	r2,-108(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   24788:	e0bfdb17 	ldw	r2,-148(fp)
   2478c:	10800404 	addi	r2,r2,16
   24790:	1080000b 	ldhu	r2,0(r2)
   24794:	10ffffcc 	andi	r3,r2,65535
   24798:	18e0001c 	xori	r3,r3,32768
   2479c:	18e00004 	addi	r3,r3,-32768
   247a0:	e0bfdc17 	ldw	r2,-144(fp)
   247a4:	10800804 	addi	r2,r2,32
   247a8:	10800017 	ldw	r2,0(r2)
   247ac:	1809883a 	mov	r4,r3
   247b0:	100b883a 	mov	r5,r2
   247b4:	002c1540 	call	2c154 <__mulsi3>
   247b8:	e0bfe615 	stw	r2,-104(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   247bc:	e0bfdb17 	ldw	r2,-148(fp)
   247c0:	10800c04 	addi	r2,r2,48
   247c4:	1080000b 	ldhu	r2,0(r2)
   247c8:	10ffffcc 	andi	r3,r2,65535
   247cc:	18e0001c 	xori	r3,r3,32768
   247d0:	18e00004 	addi	r3,r3,-32768
   247d4:	e0bfdc17 	ldw	r2,-144(fp)
   247d8:	10801804 	addi	r2,r2,96
   247dc:	10800017 	ldw	r2,0(r2)
   247e0:	1809883a 	mov	r4,r3
   247e4:	100b883a 	mov	r5,r2
   247e8:	002c1540 	call	2c154 <__mulsi3>
   247ec:	e0bfe715 	stw	r2,-100(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
   247f0:	e0bfdb17 	ldw	r2,-148(fp)
   247f4:	10801404 	addi	r2,r2,80
   247f8:	1080000b 	ldhu	r2,0(r2)
   247fc:	10ffffcc 	andi	r3,r2,65535
   24800:	18e0001c 	xori	r3,r3,32768
   24804:	18e00004 	addi	r3,r3,-32768
   24808:	e0bfdc17 	ldw	r2,-144(fp)
   2480c:	10802804 	addi	r2,r2,160
   24810:	10800017 	ldw	r2,0(r2)
   24814:	1809883a 	mov	r4,r3
   24818:	100b883a 	mov	r5,r2
   2481c:	002c1540 	call	2c154 <__mulsi3>
   24820:	e0bfe815 	stw	r2,-96(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
   24824:	e0ffe617 	ldw	r3,-104(fp)
   24828:	e0bfe817 	ldw	r2,-96(fp)
   2482c:	1885883a 	add	r2,r3,r2
   24830:	1009883a 	mov	r4,r2
   24834:	0142ed84 	movi	r5,2998
   24838:	002c1540 	call	2c154 <__mulsi3>
   2483c:	e0bfe315 	stw	r2,-116(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
   24840:	e0ffe617 	ldw	r3,-104(fp)
   24844:	e0bfe717 	ldw	r2,-100(fp)
   24848:	1885883a 	add	r2,r3,r2
   2484c:	1006937a 	slli	r3,r2,13
   24850:	e0bfe317 	ldw	r2,-116(fp)
   24854:	1885883a 	add	r2,r3,r2
   24858:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
   2485c:	e0ffe817 	ldw	r3,-96(fp)
   24860:	e0bfe717 	ldw	r2,-100(fp)
   24864:	1885c83a 	sub	r2,r3,r2
   24868:	1006937a 	slli	r3,r2,13
   2486c:	e0bfe317 	ldw	r2,-116(fp)
   24870:	1885883a 	add	r2,r3,r2
   24874:	e0bfe115 	stw	r2,-124(fp)
		tmp1 = (z1 - z2 - z3) << PASS1_BITS;
   24878:	e0ffe617 	ldw	r3,-104(fp)
   2487c:	e0bfe717 	ldw	r2,-100(fp)
   24880:	1887c83a 	sub	r3,r3,r2
   24884:	e0bfe817 	ldw	r2,-96(fp)
   24888:	1885c83a 	sub	r2,r3,r2
   2488c:	1085883a 	add	r2,r2,r2
   24890:	1085883a 	add	r2,r2,r2
   24894:	e0bfe315 	stw	r2,-116(fp)

		/* Final output stage */

		wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
   24898:	e0ffe217 	ldw	r3,-120(fp)
   2489c:	e0bfe017 	ldw	r2,-128(fp)
   248a0:	1885883a 	add	r2,r3,r2
   248a4:	1007d2fa 	srai	r3,r2,11
   248a8:	e0bfdd17 	ldw	r2,-140(fp)
   248ac:	10c00015 	stw	r3,0(r2)
		wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
   248b0:	e0bfdd17 	ldw	r2,-140(fp)
   248b4:	10800f04 	addi	r2,r2,60
   248b8:	e13fe217 	ldw	r4,-120(fp)
   248bc:	e0ffe017 	ldw	r3,-128(fp)
   248c0:	20c7c83a 	sub	r3,r4,r3
   248c4:	1807d2fa 	srai	r3,r3,11
   248c8:	10c00015 	stw	r3,0(r2)
		wsptr[3*1] = (int) (tmp11 + tmp1);
   248cc:	e0bfdd17 	ldw	r2,-140(fp)
   248d0:	10800304 	addi	r2,r2,12
   248d4:	e13fe417 	ldw	r4,-112(fp)
   248d8:	e0ffe317 	ldw	r3,-116(fp)
   248dc:	20c7883a 	add	r3,r4,r3
   248e0:	10c00015 	stw	r3,0(r2)
		wsptr[3*4] = (int) (tmp11 - tmp1);
   248e4:	e0bfdd17 	ldw	r2,-140(fp)
   248e8:	10800c04 	addi	r2,r2,48
   248ec:	e13fe417 	ldw	r4,-112(fp)
   248f0:	e0ffe317 	ldw	r3,-116(fp)
   248f4:	20c7c83a 	sub	r3,r4,r3
   248f8:	10c00015 	stw	r3,0(r2)
		wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
   248fc:	e0bfdd17 	ldw	r2,-140(fp)
   24900:	10800604 	addi	r2,r2,24
   24904:	e13fe517 	ldw	r4,-108(fp)
   24908:	e0ffe117 	ldw	r3,-124(fp)
   2490c:	20c7883a 	add	r3,r4,r3
   24910:	1807d2fa 	srai	r3,r3,11
   24914:	10c00015 	stw	r3,0(r2)
		wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
   24918:	e0bfdd17 	ldw	r2,-140(fp)
   2491c:	10800904 	addi	r2,r2,36
   24920:	e13fe517 	ldw	r4,-108(fp)
   24924:	e0ffe117 	ldw	r3,-124(fp)
   24928:	20c7c83a 	sub	r3,r4,r3
   2492c:	1807d2fa 	srai	r3,r3,11
   24930:	10c00015 	stw	r3,0(r2)
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
   24934:	e0bfde17 	ldw	r2,-136(fp)
   24938:	10800044 	addi	r2,r2,1
   2493c:	e0bfde15 	stw	r2,-136(fp)
   24940:	e0bfdb17 	ldw	r2,-148(fp)
   24944:	10800084 	addi	r2,r2,2
   24948:	e0bfdb15 	stw	r2,-148(fp)
   2494c:	e0bfdc17 	ldw	r2,-144(fp)
   24950:	10800104 	addi	r2,r2,4
   24954:	e0bfdc15 	stw	r2,-144(fp)
   24958:	e0bfdd17 	ldw	r2,-140(fp)
   2495c:	10800104 	addi	r2,r2,4
   24960:	e0bfdd15 	stw	r2,-140(fp)
   24964:	e0bfde17 	ldw	r2,-136(fp)
   24968:	108000d0 	cmplti	r2,r2,3
   2496c:	103f401e 	bne	r2,zero,24670 <jpeg_idct_3x6+0x54>
	}

	/* Pass 2: process 6 rows from work array, store into output array.
	* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
	*/
	wsptr = workspace;
   24970:	e0bfea04 	addi	r2,fp,-88
   24974:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 6; ctr++) {
   24978:	e03fde15 	stw	zero,-136(fp)
   2497c:	00004e06 	br	24ab8 <jpeg_idct_3x6+0x49c>
		outptr = output_buf[ctr] + output_col;
   24980:	e0bfde17 	ldw	r2,-136(fp)
   24984:	1085883a 	add	r2,r2,r2
   24988:	1085883a 	add	r2,r2,r2
   2498c:	e0ffff17 	ldw	r3,-4(fp)
   24990:	1885883a 	add	r2,r3,r2
   24994:	10c00017 	ldw	r3,0(r2)
   24998:	e0800217 	ldw	r2,8(fp)
   2499c:	1885883a 	add	r2,r3,r2
   249a0:	e0bfe915 	stw	r2,-92(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
   249a4:	e0bfdd17 	ldw	r2,-140(fp)
   249a8:	10800017 	ldw	r2,0(r2)
   249ac:	10800404 	addi	r2,r2,16
   249b0:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
   249b4:	e0bfe017 	ldw	r2,-128(fp)
   249b8:	1004937a 	slli	r2,r2,13
   249bc:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = (INT32) wsptr[2];
   249c0:	e0bfdd17 	ldw	r2,-140(fp)
   249c4:	10800204 	addi	r2,r2,8
   249c8:	10800017 	ldw	r2,0(r2)
   249cc:	e0bfe115 	stw	r2,-124(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
   249d0:	e13fe117 	ldw	r4,-124(fp)
   249d4:	0145a844 	movi	r5,5793
   249d8:	002c1540 	call	2c154 <__mulsi3>
   249dc:	e0bfe515 	stw	r2,-108(fp)
		tmp10 = tmp0 + tmp12;
   249e0:	e0ffe017 	ldw	r3,-128(fp)
   249e4:	e0bfe517 	ldw	r2,-108(fp)
   249e8:	1885883a 	add	r2,r3,r2
   249ec:	e0bfe215 	stw	r2,-120(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
   249f0:	e0ffe017 	ldw	r3,-128(fp)
   249f4:	e0bfe517 	ldw	r2,-108(fp)
   249f8:	1887c83a 	sub	r3,r3,r2
   249fc:	e0bfe517 	ldw	r2,-108(fp)
   24a00:	1885c83a 	sub	r2,r3,r2
   24a04:	e0bfe115 	stw	r2,-124(fp)

		/* Odd part */

		tmp12 = (INT32) wsptr[1];
   24a08:	e0bfdd17 	ldw	r2,-140(fp)
   24a0c:	10800104 	addi	r2,r2,4
   24a10:	10800017 	ldw	r2,0(r2)
   24a14:	e0bfe515 	stw	r2,-108(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
   24a18:	e13fe517 	ldw	r4,-108(fp)
   24a1c:	0149cc44 	movi	r5,10033
   24a20:	002c1540 	call	2c154 <__mulsi3>
   24a24:	e0bfe015 	stw	r2,-128(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
   24a28:	e0ffe217 	ldw	r3,-120(fp)
   24a2c:	e0bfe017 	ldw	r2,-128(fp)
   24a30:	1885883a 	add	r2,r3,r2
   24a34:	1005d4ba 	srai	r2,r2,18
   24a38:	1080ffcc 	andi	r2,r2,1023
   24a3c:	e0ffdf17 	ldw	r3,-132(fp)
   24a40:	1885883a 	add	r2,r3,r2
   24a44:	10c00003 	ldbu	r3,0(r2)
   24a48:	e0bfe917 	ldw	r2,-92(fp)
   24a4c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
   24a50:	e0bfe917 	ldw	r2,-92(fp)
   24a54:	10800084 	addi	r2,r2,2
   24a58:	e13fe217 	ldw	r4,-120(fp)
   24a5c:	e0ffe017 	ldw	r3,-128(fp)
   24a60:	20c7c83a 	sub	r3,r4,r3
   24a64:	1807d4ba 	srai	r3,r3,18
   24a68:	18c0ffcc 	andi	r3,r3,1023
   24a6c:	e13fdf17 	ldw	r4,-132(fp)
   24a70:	20c7883a 	add	r3,r4,r3
   24a74:	18c00003 	ldbu	r3,0(r3)
   24a78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
   24a7c:	e0bfe917 	ldw	r2,-92(fp)
   24a80:	10800044 	addi	r2,r2,1
   24a84:	e0ffe117 	ldw	r3,-124(fp)
   24a88:	1807d4ba 	srai	r3,r3,18
   24a8c:	18c0ffcc 	andi	r3,r3,1023
   24a90:	e13fdf17 	ldw	r4,-132(fp)
   24a94:	20c7883a 	add	r3,r4,r3
   24a98:	18c00003 	ldbu	r3,0(r3)
   24a9c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
   24aa0:	e0bfdd17 	ldw	r2,-140(fp)
   24aa4:	10800304 	addi	r2,r2,12
   24aa8:	e0bfdd15 	stw	r2,-140(fp)

	/* Pass 2: process 6 rows from work array, store into output array.
	* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
   24aac:	e0bfde17 	ldw	r2,-136(fp)
   24ab0:	10800044 	addi	r2,r2,1
   24ab4:	e0bfde15 	stw	r2,-136(fp)
   24ab8:	e0bfde17 	ldw	r2,-136(fp)
   24abc:	10800190 	cmplti	r2,r2,6
   24ac0:	103faf1e 	bne	r2,zero,24980 <jpeg_idct_3x6+0x364>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
	}
}
   24ac4:	e037883a 	mov	sp,fp
   24ac8:	dfc00117 	ldw	ra,4(sp)
   24acc:	df000017 	ldw	fp,0(sp)
   24ad0:	dec00204 	addi	sp,sp,8
   24ad4:	f800283a 	ret

00024ad8 <jpeg_idct_2x4>:

GLOBAL(void)
	jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   24ad8:	deffe504 	addi	sp,sp,-108
   24adc:	dfc01a15 	stw	ra,104(sp)
   24ae0:	df001915 	stw	fp,100(sp)
   24ae4:	df001904 	addi	fp,sp,100
   24ae8:	e13ffc15 	stw	r4,-16(fp)
   24aec:	e17ffd15 	stw	r5,-12(fp)
   24af0:	e1bffe15 	stw	r6,-8(fp)
   24af4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	INT32 * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   24af8:	e0bffc17 	ldw	r2,-16(fp)
   24afc:	10804917 	ldw	r2,292(r2)
   24b00:	10802004 	addi	r2,r2,128
   24b04:	e0bfeb15 	stw	r2,-84(fp)

		/* Pass 1: process columns from input, store into work array.
		* 4-point IDCT kernel,
		* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
		*/
		inptr = coef_block;
   24b08:	e0bffe17 	ldw	r2,-8(fp)
   24b0c:	e0bfe715 	stw	r2,-100(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   24b10:	e0bffd17 	ldw	r2,-12(fp)
   24b14:	10801517 	ldw	r2,84(r2)
   24b18:	e0bfe815 	stw	r2,-96(fp)
	wsptr = workspace;
   24b1c:	e0bff404 	addi	r2,fp,-48
   24b20:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
   24b24:	e03fea15 	stw	zero,-88(fp)
   24b28:	00007406 	br	24cfc <jpeg_idct_2x4+0x224>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
   24b2c:	e0bfe717 	ldw	r2,-100(fp)
   24b30:	1080000b 	ldhu	r2,0(r2)
   24b34:	10ffffcc 	andi	r3,r2,65535
   24b38:	18e0001c 	xori	r3,r3,32768
   24b3c:	18e00004 	addi	r3,r3,-32768
   24b40:	e0bfe817 	ldw	r2,-96(fp)
   24b44:	10800017 	ldw	r2,0(r2)
   24b48:	1809883a 	mov	r4,r3
   24b4c:	100b883a 	mov	r5,r2
   24b50:	002c1540 	call	2c154 <__mulsi3>
   24b54:	e0bfec15 	stw	r2,-80(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
   24b58:	e0bfe717 	ldw	r2,-100(fp)
   24b5c:	10800804 	addi	r2,r2,32
   24b60:	1080000b 	ldhu	r2,0(r2)
   24b64:	10ffffcc 	andi	r3,r2,65535
   24b68:	18e0001c 	xori	r3,r3,32768
   24b6c:	18e00004 	addi	r3,r3,-32768
   24b70:	e0bfe817 	ldw	r2,-96(fp)
   24b74:	10801004 	addi	r2,r2,64
   24b78:	10800017 	ldw	r2,0(r2)
   24b7c:	1809883a 	mov	r4,r3
   24b80:	100b883a 	mov	r5,r2
   24b84:	002c1540 	call	2c154 <__mulsi3>
   24b88:	e0bfed15 	stw	r2,-76(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
   24b8c:	e0ffec17 	ldw	r3,-80(fp)
   24b90:	e0bfed17 	ldw	r2,-76(fp)
   24b94:	1885883a 	add	r2,r3,r2
   24b98:	1004937a 	slli	r2,r2,13
   24b9c:	e0bfee15 	stw	r2,-72(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
   24ba0:	e0ffec17 	ldw	r3,-80(fp)
   24ba4:	e0bfed17 	ldw	r2,-76(fp)
   24ba8:	1885c83a 	sub	r2,r3,r2
   24bac:	1004937a 	slli	r2,r2,13
   24bb0:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
   24bb4:	e0bfe717 	ldw	r2,-100(fp)
   24bb8:	10800404 	addi	r2,r2,16
   24bbc:	1080000b 	ldhu	r2,0(r2)
   24bc0:	10ffffcc 	andi	r3,r2,65535
   24bc4:	18e0001c 	xori	r3,r3,32768
   24bc8:	18e00004 	addi	r3,r3,-32768
   24bcc:	e0bfe817 	ldw	r2,-96(fp)
   24bd0:	10800804 	addi	r2,r2,32
   24bd4:	10800017 	ldw	r2,0(r2)
   24bd8:	1809883a 	mov	r4,r3
   24bdc:	100b883a 	mov	r5,r2
   24be0:	002c1540 	call	2c154 <__mulsi3>
   24be4:	e0bff015 	stw	r2,-64(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
   24be8:	e0bfe717 	ldw	r2,-100(fp)
   24bec:	10800c04 	addi	r2,r2,48
   24bf0:	1080000b 	ldhu	r2,0(r2)
   24bf4:	10ffffcc 	andi	r3,r2,65535
   24bf8:	18e0001c 	xori	r3,r3,32768
   24bfc:	18e00004 	addi	r3,r3,-32768
   24c00:	e0bfe817 	ldw	r2,-96(fp)
   24c04:	10801804 	addi	r2,r2,96
   24c08:	10800017 	ldw	r2,0(r2)
   24c0c:	1809883a 	mov	r4,r3
   24c10:	100b883a 	mov	r5,r2
   24c14:	002c1540 	call	2c154 <__mulsi3>
   24c18:	e0bff115 	stw	r2,-60(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
   24c1c:	e0fff017 	ldw	r3,-64(fp)
   24c20:	e0bff117 	ldw	r2,-60(fp)
   24c24:	1885883a 	add	r2,r3,r2
   24c28:	1009883a 	mov	r4,r2
   24c2c:	01445444 	movi	r5,4433
   24c30:	002c1540 	call	2c154 <__mulsi3>
   24c34:	e0bff215 	stw	r2,-56(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
   24c38:	e13ff017 	ldw	r4,-64(fp)
   24c3c:	01461f84 	movi	r5,6270
   24c40:	002c1540 	call	2c154 <__mulsi3>
   24c44:	1007883a 	mov	r3,r2
   24c48:	e0bff217 	ldw	r2,-56(fp)
   24c4c:	1885883a 	add	r2,r3,r2
   24c50:	e0bfec15 	stw	r2,-80(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
   24c54:	e13ff117 	ldw	r4,-60(fp)
   24c58:	017137c4 	movi	r5,-15137
   24c5c:	002c1540 	call	2c154 <__mulsi3>
   24c60:	1007883a 	mov	r3,r2
   24c64:	e0bff217 	ldw	r2,-56(fp)
   24c68:	1885883a 	add	r2,r3,r2
   24c6c:	e0bfed15 	stw	r2,-76(fp)

		/* Final output stage */

		wsptr[2*0] = tmp10 + tmp0;
   24c70:	e0ffee17 	ldw	r3,-72(fp)
   24c74:	e0bfec17 	ldw	r2,-80(fp)
   24c78:	1887883a 	add	r3,r3,r2
   24c7c:	e0bfe917 	ldw	r2,-92(fp)
   24c80:	10c00015 	stw	r3,0(r2)
		wsptr[2*3] = tmp10 - tmp0;
   24c84:	e0bfe917 	ldw	r2,-92(fp)
   24c88:	10800604 	addi	r2,r2,24
   24c8c:	e13fee17 	ldw	r4,-72(fp)
   24c90:	e0ffec17 	ldw	r3,-80(fp)
   24c94:	20c7c83a 	sub	r3,r4,r3
   24c98:	10c00015 	stw	r3,0(r2)
		wsptr[2*1] = tmp12 + tmp2;
   24c9c:	e0bfe917 	ldw	r2,-92(fp)
   24ca0:	10800204 	addi	r2,r2,8
   24ca4:	e13fef17 	ldw	r4,-68(fp)
   24ca8:	e0ffed17 	ldw	r3,-76(fp)
   24cac:	20c7883a 	add	r3,r4,r3
   24cb0:	10c00015 	stw	r3,0(r2)
		wsptr[2*2] = tmp12 - tmp2;
   24cb4:	e0bfe917 	ldw	r2,-92(fp)
   24cb8:	10800404 	addi	r2,r2,16
   24cbc:	e13fef17 	ldw	r4,-68(fp)
   24cc0:	e0ffed17 	ldw	r3,-76(fp)
   24cc4:	20c7c83a 	sub	r3,r4,r3
   24cc8:	10c00015 	stw	r3,0(r2)
		* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
   24ccc:	e0bfea17 	ldw	r2,-88(fp)
   24cd0:	10800044 	addi	r2,r2,1
   24cd4:	e0bfea15 	stw	r2,-88(fp)
   24cd8:	e0bfe717 	ldw	r2,-100(fp)
   24cdc:	10800084 	addi	r2,r2,2
   24ce0:	e0bfe715 	stw	r2,-100(fp)
   24ce4:	e0bfe817 	ldw	r2,-96(fp)
   24ce8:	10800104 	addi	r2,r2,4
   24cec:	e0bfe815 	stw	r2,-96(fp)
   24cf0:	e0bfe917 	ldw	r2,-92(fp)
   24cf4:	10800104 	addi	r2,r2,4
   24cf8:	e0bfe915 	stw	r2,-92(fp)
   24cfc:	e0bfea17 	ldw	r2,-88(fp)
   24d00:	10800090 	cmplti	r2,r2,2
   24d04:	103f891e 	bne	r2,zero,24b2c <jpeg_idct_2x4+0x54>
		wsptr[2*2] = tmp12 - tmp2;
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
   24d08:	e0bff404 	addi	r2,fp,-48
   24d0c:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 4; ctr++) {
   24d10:	e03fea15 	stw	zero,-88(fp)
   24d14:	00002c06 	br	24dc8 <jpeg_idct_2x4+0x2f0>
		outptr = output_buf[ctr] + output_col;
   24d18:	e0bfea17 	ldw	r2,-88(fp)
   24d1c:	1085883a 	add	r2,r2,r2
   24d20:	1085883a 	add	r2,r2,r2
   24d24:	e0ffff17 	ldw	r3,-4(fp)
   24d28:	1885883a 	add	r2,r3,r2
   24d2c:	10c00017 	ldw	r3,0(r2)
   24d30:	e0800217 	ldw	r2,8(fp)
   24d34:	1885883a 	add	r2,r3,r2
   24d38:	e0bff315 	stw	r2,-52(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
   24d3c:	e0bfe917 	ldw	r2,-92(fp)
   24d40:	10c00017 	ldw	r3,0(r2)
   24d44:	00a00014 	movui	r2,32768
   24d48:	1885883a 	add	r2,r3,r2
   24d4c:	e0bfee15 	stw	r2,-72(fp)

		/* Odd part */

		tmp0 = wsptr[1];
   24d50:	e0bfe917 	ldw	r2,-92(fp)
   24d54:	10800117 	ldw	r2,4(r2)
   24d58:	e0bfec15 	stw	r2,-80(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
   24d5c:	e0ffee17 	ldw	r3,-72(fp)
   24d60:	e0bfec17 	ldw	r2,-80(fp)
   24d64:	1885883a 	add	r2,r3,r2
   24d68:	1005d43a 	srai	r2,r2,16
   24d6c:	1080ffcc 	andi	r2,r2,1023
   24d70:	e0ffeb17 	ldw	r3,-84(fp)
   24d74:	1885883a 	add	r2,r3,r2
   24d78:	10c00003 	ldbu	r3,0(r2)
   24d7c:	e0bff317 	ldw	r2,-52(fp)
   24d80:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
   24d84:	e0bff317 	ldw	r2,-52(fp)
   24d88:	10800044 	addi	r2,r2,1
   24d8c:	e13fee17 	ldw	r4,-72(fp)
   24d90:	e0ffec17 	ldw	r3,-80(fp)
   24d94:	20c7c83a 	sub	r3,r4,r3
   24d98:	1807d43a 	srai	r3,r3,16
   24d9c:	18c0ffcc 	andi	r3,r3,1023
   24da0:	e13feb17 	ldw	r4,-84(fp)
   24da4:	20c7883a 	add	r3,r4,r3
   24da8:	18c00003 	ldbu	r3,0(r3)
   24dac:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];

		wsptr += 2;		/* advance pointer to next row */
   24db0:	e0bfe917 	ldw	r2,-92(fp)
   24db4:	10800204 	addi	r2,r2,8
   24db8:	e0bfe915 	stw	r2,-92(fp)
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
   24dbc:	e0bfea17 	ldw	r2,-88(fp)
   24dc0:	10800044 	addi	r2,r2,1
   24dc4:	e0bfea15 	stw	r2,-88(fp)
   24dc8:	e0bfea17 	ldw	r2,-88(fp)
   24dcc:	10800110 	cmplti	r2,r2,4
   24dd0:	103fd11e 	bne	r2,zero,24d18 <jpeg_idct_2x4+0x240>
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 2;		/* advance pointer to next row */
	}
}
   24dd4:	e037883a 	mov	sp,fp
   24dd8:	dfc00117 	ldw	ra,4(sp)
   24ddc:	df000017 	ldw	fp,0(sp)
   24de0:	dec00204 	addi	sp,sp,8
   24de4:	f800283a 	ret

00024de8 <jpeg_idct_1x2>:

GLOBAL(void)
	jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
   24de8:	defff604 	addi	sp,sp,-40
   24dec:	dfc00915 	stw	ra,36(sp)
   24df0:	df000815 	stw	fp,32(sp)
   24df4:	df000804 	addi	fp,sp,32
   24df8:	e13ffc15 	stw	r4,-16(fp)
   24dfc:	e17ffd15 	stw	r5,-12(fp)
   24e00:	e1bffe15 	stw	r6,-8(fp)
   24e04:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp10;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
   24e08:	e0bffc17 	ldw	r2,-16(fp)
   24e0c:	10804917 	ldw	r2,292(r2)
   24e10:	10802004 	addi	r2,r2,128
   24e14:	e0bff815 	stw	r2,-32(fp)
	SHIFT_TEMPS

		/* Process 1 column from input, store into output array. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
   24e18:	e0bffd17 	ldw	r2,-12(fp)
   24e1c:	10801517 	ldw	r2,84(r2)
   24e20:	e0bff915 	stw	r2,-28(fp)

	/* Even part */

	tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
   24e24:	e0bffe17 	ldw	r2,-8(fp)
   24e28:	1080000b 	ldhu	r2,0(r2)
   24e2c:	10ffffcc 	andi	r3,r2,65535
   24e30:	18e0001c 	xori	r3,r3,32768
   24e34:	18e00004 	addi	r3,r3,-32768
   24e38:	e0bff917 	ldw	r2,-28(fp)
   24e3c:	10800017 	ldw	r2,0(r2)
   24e40:	1809883a 	mov	r4,r3
   24e44:	100b883a 	mov	r5,r2
   24e48:	002c1540 	call	2c154 <__mulsi3>
   24e4c:	e0bffa15 	stw	r2,-24(fp)
	/* Add fudge factor here for final descale. */
	tmp10 += ONE << 2;
   24e50:	e0bffa17 	ldw	r2,-24(fp)
   24e54:	10800104 	addi	r2,r2,4
   24e58:	e0bffa15 	stw	r2,-24(fp)

	/* Odd part */

	tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
   24e5c:	e0bffe17 	ldw	r2,-8(fp)
   24e60:	10800404 	addi	r2,r2,16
   24e64:	1080000b 	ldhu	r2,0(r2)
   24e68:	10ffffcc 	andi	r3,r2,65535
   24e6c:	18e0001c 	xori	r3,r3,32768
   24e70:	18e00004 	addi	r3,r3,-32768
   24e74:	e0bff917 	ldw	r2,-28(fp)
   24e78:	10800804 	addi	r2,r2,32
   24e7c:	10800017 	ldw	r2,0(r2)
   24e80:	1809883a 	mov	r4,r3
   24e84:	100b883a 	mov	r5,r2
   24e88:	002c1540 	call	2c154 <__mulsi3>
   24e8c:	e0bffb15 	stw	r2,-20(fp)

	/* Final output stage */

	output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
   24e90:	e0bfff17 	ldw	r2,-4(fp)
   24e94:	10c00017 	ldw	r3,0(r2)
   24e98:	e0800217 	ldw	r2,8(fp)
   24e9c:	1885883a 	add	r2,r3,r2
   24ea0:	e13ffa17 	ldw	r4,-24(fp)
   24ea4:	e0fffb17 	ldw	r3,-20(fp)
   24ea8:	20c7883a 	add	r3,r4,r3
   24eac:	1807d0fa 	srai	r3,r3,3
   24eb0:	18c0ffcc 	andi	r3,r3,1023
   24eb4:	e13ff817 	ldw	r4,-32(fp)
   24eb8:	20c7883a 	add	r3,r4,r3
   24ebc:	18c00003 	ldbu	r3,0(r3)
   24ec0:	10c00005 	stb	r3,0(r2)
		& RANGE_MASK];
	output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
   24ec4:	e0bfff17 	ldw	r2,-4(fp)
   24ec8:	10800104 	addi	r2,r2,4
   24ecc:	10c00017 	ldw	r3,0(r2)
   24ed0:	e0800217 	ldw	r2,8(fp)
   24ed4:	1885883a 	add	r2,r3,r2
   24ed8:	e13ffa17 	ldw	r4,-24(fp)
   24edc:	e0fffb17 	ldw	r3,-20(fp)
   24ee0:	20c7c83a 	sub	r3,r4,r3
   24ee4:	1807d0fa 	srai	r3,r3,3
   24ee8:	18c0ffcc 	andi	r3,r3,1023
   24eec:	e13ff817 	ldw	r4,-32(fp)
   24ef0:	20c7883a 	add	r3,r4,r3
   24ef4:	18c00003 	ldbu	r3,0(r3)
   24ef8:	10c00005 	stb	r3,0(r2)
		& RANGE_MASK];
}
   24efc:	e037883a 	mov	sp,fp
   24f00:	dfc00117 	ldw	ra,4(sp)
   24f04:	df000017 	ldw	fp,0(sp)
   24f08:	dec00204 	addi	sp,sp,8
   24f0c:	f800283a 	ret

00024f10 <jpeg_get_small>:
* routines malloc() and free().
*/

GLOBAL(void *)
	jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
   24f10:	defffc04 	addi	sp,sp,-16
   24f14:	dfc00315 	stw	ra,12(sp)
   24f18:	df000215 	stw	fp,8(sp)
   24f1c:	df000204 	addi	fp,sp,8
   24f20:	e13ffe15 	stw	r4,-8(fp)
   24f24:	e17fff15 	stw	r5,-4(fp)
	return (void *) malloc(sizeofobject);
   24f28:	e13fff17 	ldw	r4,-4(fp)
   24f2c:	002e3400 	call	2e340 <malloc>
}
   24f30:	e037883a 	mov	sp,fp
   24f34:	dfc00117 	ldw	ra,4(sp)
   24f38:	df000017 	ldw	fp,0(sp)
   24f3c:	dec00204 	addi	sp,sp,8
   24f40:	f800283a 	ret

00024f44 <jpeg_free_small>:

GLOBAL(void)
	jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
   24f44:	defffb04 	addi	sp,sp,-20
   24f48:	dfc00415 	stw	ra,16(sp)
   24f4c:	df000315 	stw	fp,12(sp)
   24f50:	df000304 	addi	fp,sp,12
   24f54:	e13ffd15 	stw	r4,-12(fp)
   24f58:	e17ffe15 	stw	r5,-8(fp)
   24f5c:	e1bfff15 	stw	r6,-4(fp)
	free(object);
   24f60:	e13ffe17 	ldw	r4,-8(fp)
   24f64:	002e3540 	call	2e354 <free>
}
   24f68:	e037883a 	mov	sp,fp
   24f6c:	dfc00117 	ldw	ra,4(sp)
   24f70:	df000017 	ldw	fp,0(sp)
   24f74:	dec00204 	addi	sp,sp,8
   24f78:	f800283a 	ret

00024f7c <jpeg_get_large>:
* you probably won't be able to process useful-size images in only 64KB.
*/

GLOBAL(void FAR *)
	jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
   24f7c:	defffc04 	addi	sp,sp,-16
   24f80:	dfc00315 	stw	ra,12(sp)
   24f84:	df000215 	stw	fp,8(sp)
   24f88:	df000204 	addi	fp,sp,8
   24f8c:	e13ffe15 	stw	r4,-8(fp)
   24f90:	e17fff15 	stw	r5,-4(fp)
	return (void FAR *) malloc(sizeofobject);
   24f94:	e13fff17 	ldw	r4,-4(fp)
   24f98:	002e3400 	call	2e340 <malloc>
}
   24f9c:	e037883a 	mov	sp,fp
   24fa0:	dfc00117 	ldw	ra,4(sp)
   24fa4:	df000017 	ldw	fp,0(sp)
   24fa8:	dec00204 	addi	sp,sp,8
   24fac:	f800283a 	ret

00024fb0 <jpeg_free_large>:

GLOBAL(void)
	jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
   24fb0:	defffb04 	addi	sp,sp,-20
   24fb4:	dfc00415 	stw	ra,16(sp)
   24fb8:	df000315 	stw	fp,12(sp)
   24fbc:	df000304 	addi	fp,sp,12
   24fc0:	e13ffd15 	stw	r4,-12(fp)
   24fc4:	e17ffe15 	stw	r5,-8(fp)
   24fc8:	e1bfff15 	stw	r6,-4(fp)
	free(object);
   24fcc:	e13ffe17 	ldw	r4,-8(fp)
   24fd0:	002e3540 	call	2e354 <free>
}
   24fd4:	e037883a 	mov	sp,fp
   24fd8:	dfc00117 	ldw	ra,4(sp)
   24fdc:	df000017 	ldw	fp,0(sp)
   24fe0:	dec00204 	addi	sp,sp,8
   24fe4:	f800283a 	ret

00024fe8 <jpeg_mem_available>:
#endif

GLOBAL(long)
	jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
	long max_bytes_needed, long already_allocated)
{
   24fe8:	defffb04 	addi	sp,sp,-20
   24fec:	df000415 	stw	fp,16(sp)
   24ff0:	df000404 	addi	fp,sp,16
   24ff4:	e13ffc15 	stw	r4,-16(fp)
   24ff8:	e17ffd15 	stw	r5,-12(fp)
   24ffc:	e1bffe15 	stw	r6,-8(fp)
   25000:	e1ffff15 	stw	r7,-4(fp)
	return cinfo->mem->max_memory_to_use - already_allocated;
   25004:	e0bffc17 	ldw	r2,-16(fp)
   25008:	10800117 	ldw	r2,4(r2)
   2500c:	10c00b17 	ldw	r3,44(r2)
   25010:	e0bfff17 	ldw	r2,-4(fp)
   25014:	1885c83a 	sub	r2,r3,r2
}
   25018:	e037883a 	mov	sp,fp
   2501c:	df000017 	ldw	fp,0(sp)
   25020:	dec00104 	addi	sp,sp,4
   25024:	f800283a 	ret

00025028 <read_backing_store>:

METHODDEF(void)
	read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
   25028:	defffa04 	addi	sp,sp,-24
   2502c:	dfc00515 	stw	ra,20(sp)
   25030:	df000415 	stw	fp,16(sp)
   25034:	df000404 	addi	fp,sp,16
   25038:	e13ffc15 	stw	r4,-16(fp)
   2503c:	e17ffd15 	stw	r5,-12(fp)
   25040:	e1bffe15 	stw	r6,-8(fp)
   25044:	e1ffff15 	stw	r7,-4(fp)
	if (fseek(info->temp_file, file_offset, SEEK_SET))
   25048:	e0bffd17 	ldw	r2,-12(fp)
   2504c:	10800317 	ldw	r2,12(r2)
   25050:	1009883a 	mov	r4,r2
   25054:	e17fff17 	ldw	r5,-4(fp)
   25058:	000d883a 	mov	r6,zero
   2505c:	002dc280 	call	2dc28 <fseek>
   25060:	10000926 	beq	r2,zero,25088 <read_backing_store+0x60>
		ERREXIT(cinfo, JERR_TFILE_SEEK);
   25064:	e0bffc17 	ldw	r2,-16(fp)
   25068:	10800017 	ldw	r2,0(r2)
   2506c:	00c010c4 	movi	r3,67
   25070:	10c00515 	stw	r3,20(r2)
   25074:	e0bffc17 	ldw	r2,-16(fp)
   25078:	10800017 	ldw	r2,0(r2)
   2507c:	10800017 	ldw	r2,0(r2)
   25080:	e13ffc17 	ldw	r4,-16(fp)
   25084:	103ee83a 	callr	r2
	if (JFREAD(info->temp_file, buffer_address, byte_count)
   25088:	e0c00217 	ldw	r3,8(fp)
   2508c:	e0bffd17 	ldw	r2,-12(fp)
   25090:	10800317 	ldw	r2,12(r2)
   25094:	e13ffe17 	ldw	r4,-8(fp)
   25098:	01400044 	movi	r5,1
   2509c:	180d883a 	mov	r6,r3
   250a0:	100f883a 	mov	r7,r2
   250a4:	002d3680 	call	2d368 <fread>
		!= (size_t) byte_count)
   250a8:	e0c00217 	ldw	r3,8(fp)
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
	if (fseek(info->temp_file, file_offset, SEEK_SET))
		ERREXIT(cinfo, JERR_TFILE_SEEK);
	if (JFREAD(info->temp_file, buffer_address, byte_count)
   250ac:	10c00926 	beq	r2,r3,250d4 <read_backing_store+0xac>
		!= (size_t) byte_count)
		ERREXIT(cinfo, JERR_TFILE_READ);
   250b0:	e0bffc17 	ldw	r2,-16(fp)
   250b4:	10800017 	ldw	r2,0(r2)
   250b8:	00c01084 	movi	r3,66
   250bc:	10c00515 	stw	r3,20(r2)
   250c0:	e0bffc17 	ldw	r2,-16(fp)
   250c4:	10800017 	ldw	r2,0(r2)
   250c8:	10800017 	ldw	r2,0(r2)
   250cc:	e13ffc17 	ldw	r4,-16(fp)
   250d0:	103ee83a 	callr	r2
}
   250d4:	e037883a 	mov	sp,fp
   250d8:	dfc00117 	ldw	ra,4(sp)
   250dc:	df000017 	ldw	fp,0(sp)
   250e0:	dec00204 	addi	sp,sp,8
   250e4:	f800283a 	ret

000250e8 <write_backing_store>:

METHODDEF(void)
	write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
   250e8:	defffa04 	addi	sp,sp,-24
   250ec:	dfc00515 	stw	ra,20(sp)
   250f0:	df000415 	stw	fp,16(sp)
   250f4:	df000404 	addi	fp,sp,16
   250f8:	e13ffc15 	stw	r4,-16(fp)
   250fc:	e17ffd15 	stw	r5,-12(fp)
   25100:	e1bffe15 	stw	r6,-8(fp)
   25104:	e1ffff15 	stw	r7,-4(fp)
	if (fseek(info->temp_file, file_offset, SEEK_SET))
   25108:	e0bffd17 	ldw	r2,-12(fp)
   2510c:	10800317 	ldw	r2,12(r2)
   25110:	1009883a 	mov	r4,r2
   25114:	e17fff17 	ldw	r5,-4(fp)
   25118:	000d883a 	mov	r6,zero
   2511c:	002dc280 	call	2dc28 <fseek>
   25120:	10000926 	beq	r2,zero,25148 <write_backing_store+0x60>
		ERREXIT(cinfo, JERR_TFILE_SEEK);
   25124:	e0bffc17 	ldw	r2,-16(fp)
   25128:	10800017 	ldw	r2,0(r2)
   2512c:	00c010c4 	movi	r3,67
   25130:	10c00515 	stw	r3,20(r2)
   25134:	e0bffc17 	ldw	r2,-16(fp)
   25138:	10800017 	ldw	r2,0(r2)
   2513c:	10800017 	ldw	r2,0(r2)
   25140:	e13ffc17 	ldw	r4,-16(fp)
   25144:	103ee83a 	callr	r2
	if (JFWRITE(info->temp_file, buffer_address, byte_count)
   25148:	e0c00217 	ldw	r3,8(fp)
   2514c:	e0bffd17 	ldw	r2,-12(fp)
   25150:	10800317 	ldw	r2,12(r2)
   25154:	e13ffe17 	ldw	r4,-8(fp)
   25158:	01400044 	movi	r5,1
   2515c:	180d883a 	mov	r6,r3
   25160:	100f883a 	mov	r7,r2
   25164:	002dfe80 	call	2dfe8 <fwrite>
		!= (size_t) byte_count)
   25168:	e0c00217 	ldw	r3,8(fp)
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
	if (fseek(info->temp_file, file_offset, SEEK_SET))
		ERREXIT(cinfo, JERR_TFILE_SEEK);
	if (JFWRITE(info->temp_file, buffer_address, byte_count)
   2516c:	10c00926 	beq	r2,r3,25194 <write_backing_store+0xac>
		!= (size_t) byte_count)
		ERREXIT(cinfo, JERR_TFILE_WRITE);
   25170:	e0bffc17 	ldw	r2,-16(fp)
   25174:	10800017 	ldw	r2,0(r2)
   25178:	00c01104 	movi	r3,68
   2517c:	10c00515 	stw	r3,20(r2)
   25180:	e0bffc17 	ldw	r2,-16(fp)
   25184:	10800017 	ldw	r2,0(r2)
   25188:	10800017 	ldw	r2,0(r2)
   2518c:	e13ffc17 	ldw	r4,-16(fp)
   25190:	103ee83a 	callr	r2
}
   25194:	e037883a 	mov	sp,fp
   25198:	dfc00117 	ldw	ra,4(sp)
   2519c:	df000017 	ldw	fp,0(sp)
   251a0:	dec00204 	addi	sp,sp,8
   251a4:	f800283a 	ret

000251a8 <close_backing_store>:


METHODDEF(void)
	close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
{
   251a8:	defffc04 	addi	sp,sp,-16
   251ac:	dfc00315 	stw	ra,12(sp)
   251b0:	df000215 	stw	fp,8(sp)
   251b4:	df000204 	addi	fp,sp,8
   251b8:	e13ffe15 	stw	r4,-8(fp)
   251bc:	e17fff15 	stw	r5,-4(fp)
	fclose(info->temp_file);
   251c0:	e0bfff17 	ldw	r2,-4(fp)
   251c4:	10800317 	ldw	r2,12(r2)
   251c8:	1009883a 	mov	r4,r2
   251cc:	002ca7c0 	call	2ca7c <fclose>
	/* Since this implementation uses tmpfile() to create the file,
	* no explicit file deletion is needed.
	*/
}
   251d0:	e037883a 	mov	sp,fp
   251d4:	dfc00117 	ldw	ra,4(sp)
   251d8:	df000017 	ldw	fp,0(sp)
   251dc:	dec00204 	addi	sp,sp,8
   251e0:	f800283a 	ret

000251e4 <jpeg_open_backing_store>:
*/

GLOBAL(void)
	jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	long total_bytes_needed)
{
   251e4:	defffb04 	addi	sp,sp,-20
   251e8:	dfc00415 	stw	ra,16(sp)
   251ec:	df000315 	stw	fp,12(sp)
   251f0:	df000304 	addi	fp,sp,12
   251f4:	e13ffd15 	stw	r4,-12(fp)
   251f8:	e17ffe15 	stw	r5,-8(fp)
   251fc:	e1bfff15 	stw	r6,-4(fp)
	if ((info->temp_file = tmpfile()) == NULL)
   25200:	002f9700 	call	2f970 <tmpfile>
   25204:	e0fffe17 	ldw	r3,-8(fp)
   25208:	18800315 	stw	r2,12(r3)
   2520c:	e0bffe17 	ldw	r2,-8(fp)
   25210:	10800317 	ldw	r2,12(r2)
   25214:	1000111e 	bne	r2,zero,2525c <jpeg_open_backing_store+0x78>
		ERREXITS(cinfo, JERR_TFILE_CREATE, "");
   25218:	e0bffd17 	ldw	r2,-12(fp)
   2521c:	10800017 	ldw	r2,0(r2)
   25220:	00c01044 	movi	r3,65
   25224:	10c00515 	stw	r3,20(r2)
   25228:	e0bffd17 	ldw	r2,-12(fp)
   2522c:	10800017 	ldw	r2,0(r2)
   25230:	10800604 	addi	r2,r2,24
   25234:	1009883a 	mov	r4,r2
   25238:	01400134 	movhi	r5,4
   2523c:	2941e904 	addi	r5,r5,1956
   25240:	01801404 	movi	r6,80
   25244:	002f7f00 	call	2f7f0 <strncpy>
   25248:	e0bffd17 	ldw	r2,-12(fp)
   2524c:	10800017 	ldw	r2,0(r2)
   25250:	10800017 	ldw	r2,0(r2)
   25254:	e13ffd17 	ldw	r4,-12(fp)
   25258:	103ee83a 	callr	r2
	info->read_backing_store = read_backing_store;
   2525c:	e0bffe17 	ldw	r2,-8(fp)
   25260:	00c000b4 	movhi	r3,2
   25264:	18d40a04 	addi	r3,r3,20520
   25268:	10c00015 	stw	r3,0(r2)
	info->write_backing_store = write_backing_store;
   2526c:	e0bffe17 	ldw	r2,-8(fp)
   25270:	00c000b4 	movhi	r3,2
   25274:	18d43a04 	addi	r3,r3,20712
   25278:	10c00115 	stw	r3,4(r2)
	info->close_backing_store = close_backing_store;
   2527c:	e0bffe17 	ldw	r2,-8(fp)
   25280:	00c000b4 	movhi	r3,2
   25284:	18d46a04 	addi	r3,r3,20904
   25288:	10c00215 	stw	r3,8(r2)
}
   2528c:	e037883a 	mov	sp,fp
   25290:	dfc00117 	ldw	ra,4(sp)
   25294:	df000017 	ldw	fp,0(sp)
   25298:	dec00204 	addi	sp,sp,8
   2529c:	f800283a 	ret

000252a0 <jpeg_mem_init>:
* cleanup required.
*/

GLOBAL(long)
	jpeg_mem_init (j_common_ptr cinfo)
{
   252a0:	defffe04 	addi	sp,sp,-8
   252a4:	df000115 	stw	fp,4(sp)
   252a8:	df000104 	addi	fp,sp,4
   252ac:	e13fff15 	stw	r4,-4(fp)
	return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
   252b0:	00802674 	movhi	r2,153
   252b4:	10a5a004 	addi	r2,r2,-27008
}
   252b8:	e037883a 	mov	sp,fp
   252bc:	df000017 	ldw	fp,0(sp)
   252c0:	dec00104 	addi	sp,sp,4
   252c4:	f800283a 	ret

000252c8 <jpeg_mem_term>:

GLOBAL(void)
	jpeg_mem_term (j_common_ptr cinfo)
{
   252c8:	defffe04 	addi	sp,sp,-8
   252cc:	df000115 	stw	fp,4(sp)
   252d0:	df000104 	addi	fp,sp,4
   252d4:	e13fff15 	stw	r4,-4(fp)
	/* no work */
}
   252d8:	e037883a 	mov	sp,fp
   252dc:	df000017 	ldw	fp,0(sp)
   252e0:	dec00104 	addi	sp,sp,4
   252e4:	f800283a 	ret

000252e8 <out_of_memory>:

LOCAL(void)
	out_of_memory (j_common_ptr cinfo, int which)
	/* Report an out-of-memory error and stop execution */
	/* If we compiled MEM_STATS support, report alloc requests before dying */
{
   252e8:	defffc04 	addi	sp,sp,-16
   252ec:	dfc00315 	stw	ra,12(sp)
   252f0:	df000215 	stw	fp,8(sp)
   252f4:	df000204 	addi	fp,sp,8
   252f8:	e13ffe15 	stw	r4,-8(fp)
   252fc:	e17fff15 	stw	r5,-4(fp)
#ifdef MEM_STATS
	cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
	ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
   25300:	e0bffe17 	ldw	r2,-8(fp)
   25304:	10800017 	ldw	r2,0(r2)
   25308:	00c00e04 	movi	r3,56
   2530c:	10c00515 	stw	r3,20(r2)
   25310:	e0bffe17 	ldw	r2,-8(fp)
   25314:	10800017 	ldw	r2,0(r2)
   25318:	e0ffff17 	ldw	r3,-4(fp)
   2531c:	10c00615 	stw	r3,24(r2)
   25320:	e0bffe17 	ldw	r2,-8(fp)
   25324:	10800017 	ldw	r2,0(r2)
   25328:	10800017 	ldw	r2,0(r2)
   2532c:	e13ffe17 	ldw	r4,-8(fp)
   25330:	103ee83a 	callr	r2
}
   25334:	e037883a 	mov	sp,fp
   25338:	dfc00117 	ldw	ra,4(sp)
   2533c:	df000017 	ldw	fp,0(sp)
   25340:	dec00204 	addi	sp,sp,8
   25344:	f800283a 	ret

00025348 <alloc_small>:


METHODDEF(void *)
	alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
	/* Allocate a "small" object */
{
   25348:	defff404 	addi	sp,sp,-48
   2534c:	dfc00b15 	stw	ra,44(sp)
   25350:	df000a15 	stw	fp,40(sp)
   25354:	df000a04 	addi	fp,sp,40
   25358:	e13ffd15 	stw	r4,-12(fp)
   2535c:	e17ffe15 	stw	r5,-8(fp)
   25360:	e1bfff15 	stw	r6,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   25364:	e0bffd17 	ldw	r2,-12(fp)
   25368:	10800117 	ldw	r2,4(r2)
   2536c:	e0bff915 	stw	r2,-28(fp)
	small_pool_ptr hdr_ptr, prev_hdr_ptr;
	char * data_ptr;
	size_t odd_bytes, min_request, slop;

	/* Check for unsatisfiable request (do now to ensure no overflow below) */
	if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
   25370:	e0bfff17 	ldw	r2,-4(fp)
   25374:	00cee6f4 	movhi	r3,15259
   25378:	18f27d04 	addi	r3,r3,-13836
   2537c:	1880032e 	bgeu	r3,r2,2538c <alloc_small+0x44>
		out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
   25380:	e13ffd17 	ldw	r4,-12(fp)
   25384:	01400044 	movi	r5,1
   25388:	00252e80 	call	252e8 <out_of_memory>

	/* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
	odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
   2538c:	e0bfff17 	ldw	r2,-4(fp)
   25390:	108001cc 	andi	r2,r2,7
   25394:	e0bffa15 	stw	r2,-24(fp)
	if (odd_bytes > 0)
   25398:	e0bffa17 	ldw	r2,-24(fp)
   2539c:	10000526 	beq	r2,zero,253b4 <alloc_small+0x6c>
		sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
   253a0:	e0ffff17 	ldw	r3,-4(fp)
   253a4:	e0bffa17 	ldw	r2,-24(fp)
   253a8:	1885c83a 	sub	r2,r3,r2
   253ac:	10800204 	addi	r2,r2,8
   253b0:	e0bfff15 	stw	r2,-4(fp)

	/* See if space is available in any existing pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
   253b4:	e0bffe17 	ldw	r2,-8(fp)
   253b8:	10000316 	blt	r2,zero,253c8 <alloc_small+0x80>
   253bc:	e0bffe17 	ldw	r2,-8(fp)
   253c0:	10800090 	cmplti	r2,r2,2
   253c4:	10000d1e 	bne	r2,zero,253fc <alloc_small+0xb4>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
   253c8:	e0bffd17 	ldw	r2,-12(fp)
   253cc:	10800017 	ldw	r2,0(r2)
   253d0:	00c003c4 	movi	r3,15
   253d4:	10c00515 	stw	r3,20(r2)
   253d8:	e0bffd17 	ldw	r2,-12(fp)
   253dc:	10800017 	ldw	r2,0(r2)
   253e0:	e0fffe17 	ldw	r3,-8(fp)
   253e4:	10c00615 	stw	r3,24(r2)
   253e8:	e0bffd17 	ldw	r2,-12(fp)
   253ec:	10800017 	ldw	r2,0(r2)
   253f0:	10800017 	ldw	r2,0(r2)
   253f4:	e13ffd17 	ldw	r4,-12(fp)
   253f8:	103ee83a 	callr	r2
	prev_hdr_ptr = NULL;
   253fc:	e03ff715 	stw	zero,-36(fp)
	hdr_ptr = mem->small_list[pool_id];
   25400:	e0fff917 	ldw	r3,-28(fp)
   25404:	e0bffe17 	ldw	r2,-8(fp)
   25408:	10800344 	addi	r2,r2,13
   2540c:	1085883a 	add	r2,r2,r2
   25410:	1085883a 	add	r2,r2,r2
   25414:	1885883a 	add	r2,r3,r2
   25418:	10800017 	ldw	r2,0(r2)
   2541c:	e0bff615 	stw	r2,-40(fp)
	while (hdr_ptr != NULL) {
   25420:	00000906 	br	25448 <alloc_small+0x100>
		if (hdr_ptr->hdr.bytes_left >= sizeofobject)
   25424:	e0bff617 	ldw	r2,-40(fp)
   25428:	10c00217 	ldw	r3,8(r2)
   2542c:	e0bfff17 	ldw	r2,-4(fp)
   25430:	1880082e 	bgeu	r3,r2,25454 <alloc_small+0x10c>
			break;			/* found pool with enough space */
		prev_hdr_ptr = hdr_ptr;
   25434:	e0bff617 	ldw	r2,-40(fp)
   25438:	e0bff715 	stw	r2,-36(fp)
		hdr_ptr = hdr_ptr->hdr.next;
   2543c:	e0bff617 	ldw	r2,-40(fp)
   25440:	10800017 	ldw	r2,0(r2)
   25444:	e0bff615 	stw	r2,-40(fp)
	/* See if space is available in any existing pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
	prev_hdr_ptr = NULL;
	hdr_ptr = mem->small_list[pool_id];
	while (hdr_ptr != NULL) {
   25448:	e0bff617 	ldw	r2,-40(fp)
   2544c:	103ff51e 	bne	r2,zero,25424 <alloc_small+0xdc>
   25450:	00000106 	br	25458 <alloc_small+0x110>
		if (hdr_ptr->hdr.bytes_left >= sizeofobject)
			break;			/* found pool with enough space */
   25454:	0001883a 	nop
		prev_hdr_ptr = hdr_ptr;
		hdr_ptr = hdr_ptr->hdr.next;
	}

	/* Time to make a new pool? */
	if (hdr_ptr == NULL) {
   25458:	e0bff617 	ldw	r2,-40(fp)
   2545c:	1000561e 	bne	r2,zero,255b8 <alloc_small+0x270>
		/* min_request is what we need now, slop is what will be leftover */
		min_request = sizeofobject + SIZEOF(small_pool_hdr);
   25460:	e0bfff17 	ldw	r2,-4(fp)
   25464:	10800304 	addi	r2,r2,12
   25468:	e0bffb15 	stw	r2,-20(fp)
		if (prev_hdr_ptr == NULL)	/* first pool in class? */
   2546c:	e0bff717 	ldw	r2,-36(fp)
   25470:	1000081e 	bne	r2,zero,25494 <alloc_small+0x14c>
			slop = first_pool_slop[pool_id];
   25474:	e0bffe17 	ldw	r2,-8(fp)
   25478:	1085883a 	add	r2,r2,r2
   2547c:	1087883a 	add	r3,r2,r2
   25480:	d0a00004 	addi	r2,gp,-32768
   25484:	1885883a 	add	r2,r3,r2
   25488:	10800017 	ldw	r2,0(r2)
   2548c:	e0bff815 	stw	r2,-32(fp)
   25490:	00000706 	br	254b0 <alloc_small+0x168>
		else
			slop = extra_pool_slop[pool_id];
   25494:	e0bffe17 	ldw	r2,-8(fp)
   25498:	1085883a 	add	r2,r2,r2
   2549c:	1087883a 	add	r3,r2,r2
   254a0:	d0a00204 	addi	r2,gp,-32760
   254a4:	1885883a 	add	r2,r3,r2
   254a8:	10800017 	ldw	r2,0(r2)
   254ac:	e0bff815 	stw	r2,-32(fp)
		/* Don't ask for more than MAX_ALLOC_CHUNK */
		if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
   254b0:	00cee6f4 	movhi	r3,15259
   254b4:	18f28004 	addi	r3,r3,-13824
   254b8:	e0bffb17 	ldw	r2,-20(fp)
   254bc:	1887c83a 	sub	r3,r3,r2
   254c0:	e0bff817 	ldw	r2,-32(fp)
   254c4:	1880072e 	bgeu	r3,r2,254e4 <alloc_small+0x19c>
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
   254c8:	00cee6f4 	movhi	r3,15259
   254cc:	18f28004 	addi	r3,r3,-13824
   254d0:	e0bffb17 	ldw	r2,-20(fp)
   254d4:	1885c83a 	sub	r2,r3,r2
   254d8:	e0bff815 	stw	r2,-32(fp)
   254dc:	00000106 	br	254e4 <alloc_small+0x19c>
			if (hdr_ptr != NULL)
				break;
			slop /= 2;
			if (slop < MIN_SLOP)	/* give up when it gets real small */
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
		}
   254e0:	0001883a 	nop
		/* Don't ask for more than MAX_ALLOC_CHUNK */
		if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
		/* Try to get space, if fail reduce slop and try again */
		for (;;) {
			hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
   254e4:	e0fffb17 	ldw	r3,-20(fp)
   254e8:	e0bff817 	ldw	r2,-32(fp)
   254ec:	1885883a 	add	r2,r3,r2
   254f0:	e13ffd17 	ldw	r4,-12(fp)
   254f4:	100b883a 	mov	r5,r2
   254f8:	0024f100 	call	24f10 <jpeg_get_small>
   254fc:	e0bff615 	stw	r2,-40(fp)
			if (hdr_ptr != NULL)
   25500:	e0bff617 	ldw	r2,-40(fp)
   25504:	10000a1e 	bne	r2,zero,25530 <alloc_small+0x1e8>
				break;
			slop /= 2;
   25508:	e0bff817 	ldw	r2,-32(fp)
   2550c:	1004d07a 	srli	r2,r2,1
   25510:	e0bff815 	stw	r2,-32(fp)
			if (slop < MIN_SLOP)	/* give up when it gets real small */
   25514:	e0bff817 	ldw	r2,-32(fp)
   25518:	10800ca8 	cmpgeui	r2,r2,50
   2551c:	103ff01e 	bne	r2,zero,254e0 <alloc_small+0x198>
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
   25520:	e13ffd17 	ldw	r4,-12(fp)
   25524:	01400084 	movi	r5,2
   25528:	00252e80 	call	252e8 <out_of_memory>
		}
   2552c:	003fec06 	br	254e0 <alloc_small+0x198>
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
		/* Try to get space, if fail reduce slop and try again */
		for (;;) {
			hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
			if (hdr_ptr != NULL)
				break;
   25530:	0001883a 	nop
			slop /= 2;
			if (slop < MIN_SLOP)	/* give up when it gets real small */
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
		}
		mem->total_space_allocated += min_request + slop;
   25534:	e0bff917 	ldw	r2,-28(fp)
   25538:	10801317 	ldw	r2,76(r2)
   2553c:	1007883a 	mov	r3,r2
   25540:	e13ffb17 	ldw	r4,-20(fp)
   25544:	e0bff817 	ldw	r2,-32(fp)
   25548:	2085883a 	add	r2,r4,r2
   2554c:	1885883a 	add	r2,r3,r2
   25550:	1007883a 	mov	r3,r2
   25554:	e0bff917 	ldw	r2,-28(fp)
   25558:	10c01315 	stw	r3,76(r2)
		/* Success, initialize the new pool header and add to end of list */
		hdr_ptr->hdr.next = NULL;
   2555c:	e0bff617 	ldw	r2,-40(fp)
   25560:	10000015 	stw	zero,0(r2)
		hdr_ptr->hdr.bytes_used = 0;
   25564:	e0bff617 	ldw	r2,-40(fp)
   25568:	10000115 	stw	zero,4(r2)
		hdr_ptr->hdr.bytes_left = sizeofobject + slop;
   2556c:	e0ffff17 	ldw	r3,-4(fp)
   25570:	e0bff817 	ldw	r2,-32(fp)
   25574:	1887883a 	add	r3,r3,r2
   25578:	e0bff617 	ldw	r2,-40(fp)
   2557c:	10c00215 	stw	r3,8(r2)
		if (prev_hdr_ptr == NULL)	/* first pool in class? */
   25580:	e0bff717 	ldw	r2,-36(fp)
   25584:	1000091e 	bne	r2,zero,255ac <alloc_small+0x264>
			mem->small_list[pool_id] = hdr_ptr;
   25588:	e0fff917 	ldw	r3,-28(fp)
   2558c:	e0bffe17 	ldw	r2,-8(fp)
   25590:	10800344 	addi	r2,r2,13
   25594:	1085883a 	add	r2,r2,r2
   25598:	1085883a 	add	r2,r2,r2
   2559c:	1885883a 	add	r2,r3,r2
   255a0:	e0fff617 	ldw	r3,-40(fp)
   255a4:	10c00015 	stw	r3,0(r2)
   255a8:	00000306 	br	255b8 <alloc_small+0x270>
		else
			prev_hdr_ptr->hdr.next = hdr_ptr;
   255ac:	e0bff717 	ldw	r2,-36(fp)
   255b0:	e0fff617 	ldw	r3,-40(fp)
   255b4:	10c00015 	stw	r3,0(r2)
	}

	/* OK, allocate the object from the current pool */
	data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
   255b8:	e0bff617 	ldw	r2,-40(fp)
   255bc:	10800304 	addi	r2,r2,12
   255c0:	e0bffc15 	stw	r2,-16(fp)
	data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
   255c4:	e0bff617 	ldw	r2,-40(fp)
   255c8:	10800117 	ldw	r2,4(r2)
   255cc:	e0fffc17 	ldw	r3,-16(fp)
   255d0:	1885883a 	add	r2,r3,r2
   255d4:	e0bffc15 	stw	r2,-16(fp)
	hdr_ptr->hdr.bytes_used += sizeofobject;
   255d8:	e0bff617 	ldw	r2,-40(fp)
   255dc:	10c00117 	ldw	r3,4(r2)
   255e0:	e0bfff17 	ldw	r2,-4(fp)
   255e4:	1887883a 	add	r3,r3,r2
   255e8:	e0bff617 	ldw	r2,-40(fp)
   255ec:	10c00115 	stw	r3,4(r2)
	hdr_ptr->hdr.bytes_left -= sizeofobject;
   255f0:	e0bff617 	ldw	r2,-40(fp)
   255f4:	10c00217 	ldw	r3,8(r2)
   255f8:	e0bfff17 	ldw	r2,-4(fp)
   255fc:	1887c83a 	sub	r3,r3,r2
   25600:	e0bff617 	ldw	r2,-40(fp)
   25604:	10c00215 	stw	r3,8(r2)

	return (void *) data_ptr;
   25608:	e0bffc17 	ldw	r2,-16(fp)
}
   2560c:	e037883a 	mov	sp,fp
   25610:	dfc00117 	ldw	ra,4(sp)
   25614:	df000017 	ldw	fp,0(sp)
   25618:	dec00204 	addi	sp,sp,8
   2561c:	f800283a 	ret

00025620 <alloc_large>:
*/

METHODDEF(void FAR *)
	alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
	/* Allocate a "large" object */
{
   25620:	defff804 	addi	sp,sp,-32
   25624:	dfc00715 	stw	ra,28(sp)
   25628:	df000615 	stw	fp,24(sp)
   2562c:	df000604 	addi	fp,sp,24
   25630:	e13ffd15 	stw	r4,-12(fp)
   25634:	e17ffe15 	stw	r5,-8(fp)
   25638:	e1bfff15 	stw	r6,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   2563c:	e0bffd17 	ldw	r2,-12(fp)
   25640:	10800117 	ldw	r2,4(r2)
   25644:	e0bffa15 	stw	r2,-24(fp)
	large_pool_ptr hdr_ptr;
	size_t odd_bytes;

	/* Check for unsatisfiable request (do now to ensure no overflow below) */
	if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
   25648:	e0bfff17 	ldw	r2,-4(fp)
   2564c:	00cee6f4 	movhi	r3,15259
   25650:	18f27d04 	addi	r3,r3,-13836
   25654:	1880032e 	bgeu	r3,r2,25664 <alloc_large+0x44>
		out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
   25658:	e13ffd17 	ldw	r4,-12(fp)
   2565c:	014000c4 	movi	r5,3
   25660:	00252e80 	call	252e8 <out_of_memory>

	/* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
	odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
   25664:	e0bfff17 	ldw	r2,-4(fp)
   25668:	108001cc 	andi	r2,r2,7
   2566c:	e0bffb15 	stw	r2,-20(fp)
	if (odd_bytes > 0)
   25670:	e0bffb17 	ldw	r2,-20(fp)
   25674:	10000526 	beq	r2,zero,2568c <alloc_large+0x6c>
		sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
   25678:	e0ffff17 	ldw	r3,-4(fp)
   2567c:	e0bffb17 	ldw	r2,-20(fp)
   25680:	1885c83a 	sub	r2,r3,r2
   25684:	10800204 	addi	r2,r2,8
   25688:	e0bfff15 	stw	r2,-4(fp)

	/* Always make a new pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
   2568c:	e0bffe17 	ldw	r2,-8(fp)
   25690:	10000316 	blt	r2,zero,256a0 <alloc_large+0x80>
   25694:	e0bffe17 	ldw	r2,-8(fp)
   25698:	10800090 	cmplti	r2,r2,2
   2569c:	10000d1e 	bne	r2,zero,256d4 <alloc_large+0xb4>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
   256a0:	e0bffd17 	ldw	r2,-12(fp)
   256a4:	10800017 	ldw	r2,0(r2)
   256a8:	00c003c4 	movi	r3,15
   256ac:	10c00515 	stw	r3,20(r2)
   256b0:	e0bffd17 	ldw	r2,-12(fp)
   256b4:	10800017 	ldw	r2,0(r2)
   256b8:	e0fffe17 	ldw	r3,-8(fp)
   256bc:	10c00615 	stw	r3,24(r2)
   256c0:	e0bffd17 	ldw	r2,-12(fp)
   256c4:	10800017 	ldw	r2,0(r2)
   256c8:	10800017 	ldw	r2,0(r2)
   256cc:	e13ffd17 	ldw	r4,-12(fp)
   256d0:	103ee83a 	callr	r2

	hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
   256d4:	e0bfff17 	ldw	r2,-4(fp)
   256d8:	10800304 	addi	r2,r2,12
   256dc:	e13ffd17 	ldw	r4,-12(fp)
   256e0:	100b883a 	mov	r5,r2
   256e4:	0024f7c0 	call	24f7c <jpeg_get_large>
   256e8:	e0bffc15 	stw	r2,-16(fp)
		SIZEOF(large_pool_hdr));
	if (hdr_ptr == NULL)
   256ec:	e0bffc17 	ldw	r2,-16(fp)
   256f0:	1000031e 	bne	r2,zero,25700 <alloc_large+0xe0>
		out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
   256f4:	e13ffd17 	ldw	r4,-12(fp)
   256f8:	01400104 	movi	r5,4
   256fc:	00252e80 	call	252e8 <out_of_memory>
	mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
   25700:	e0bffa17 	ldw	r2,-24(fp)
   25704:	10801317 	ldw	r2,76(r2)
   25708:	1007883a 	mov	r3,r2
   2570c:	e0bfff17 	ldw	r2,-4(fp)
   25710:	1885883a 	add	r2,r3,r2
   25714:	10800304 	addi	r2,r2,12
   25718:	1007883a 	mov	r3,r2
   2571c:	e0bffa17 	ldw	r2,-24(fp)
   25720:	10c01315 	stw	r3,76(r2)

	/* Success, initialize the new pool header and add to list */
	hdr_ptr->hdr.next = mem->large_list[pool_id];
   25724:	e0fffa17 	ldw	r3,-24(fp)
   25728:	e0bffe17 	ldw	r2,-8(fp)
   2572c:	108003c4 	addi	r2,r2,15
   25730:	1085883a 	add	r2,r2,r2
   25734:	1085883a 	add	r2,r2,r2
   25738:	1885883a 	add	r2,r3,r2
   2573c:	10c00017 	ldw	r3,0(r2)
   25740:	e0bffc17 	ldw	r2,-16(fp)
   25744:	10c00015 	stw	r3,0(r2)
	/* We maintain space counts in each pool header for statistical purposes,
	* even though they are not needed for allocation.
	*/
	hdr_ptr->hdr.bytes_used = sizeofobject;
   25748:	e0bffc17 	ldw	r2,-16(fp)
   2574c:	e0ffff17 	ldw	r3,-4(fp)
   25750:	10c00115 	stw	r3,4(r2)
	hdr_ptr->hdr.bytes_left = 0;
   25754:	e0bffc17 	ldw	r2,-16(fp)
   25758:	10000215 	stw	zero,8(r2)
	mem->large_list[pool_id] = hdr_ptr;
   2575c:	e0fffa17 	ldw	r3,-24(fp)
   25760:	e0bffe17 	ldw	r2,-8(fp)
   25764:	108003c4 	addi	r2,r2,15
   25768:	1085883a 	add	r2,r2,r2
   2576c:	1085883a 	add	r2,r2,r2
   25770:	1885883a 	add	r2,r3,r2
   25774:	e0fffc17 	ldw	r3,-16(fp)
   25778:	10c00015 	stw	r3,0(r2)

	return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
   2577c:	e0bffc17 	ldw	r2,-16(fp)
   25780:	10800304 	addi	r2,r2,12
}
   25784:	e037883a 	mov	sp,fp
   25788:	dfc00117 	ldw	ra,4(sp)
   2578c:	df000017 	ldw	fp,0(sp)
   25790:	dec00204 	addi	sp,sp,8
   25794:	f800283a 	ret

00025798 <alloc_sarray>:

METHODDEF(JSAMPARRAY)
	alloc_sarray (j_common_ptr cinfo, int pool_id,
	JDIMENSION samplesperrow, JDIMENSION numrows)
	/* Allocate a 2-D sample array */
{
   25798:	defff304 	addi	sp,sp,-52
   2579c:	dfc00c15 	stw	ra,48(sp)
   257a0:	df000b15 	stw	fp,44(sp)
   257a4:	df000b04 	addi	fp,sp,44
   257a8:	e13ffc15 	stw	r4,-16(fp)
   257ac:	e17ffd15 	stw	r5,-12(fp)
   257b0:	e1bffe15 	stw	r6,-8(fp)
   257b4:	e1ffff15 	stw	r7,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   257b8:	e0bffc17 	ldw	r2,-16(fp)
   257bc:	10800117 	ldw	r2,4(r2)
   257c0:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW workspace;
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
   257c4:	010ee6f4 	movhi	r4,15259
   257c8:	21327d04 	addi	r4,r4,-13836
   257cc:	e17ffe17 	ldw	r5,-8(fp)
   257d0:	002c1440 	call	2c144 <__udivsi3>
   257d4:	e0bffa15 	stw	r2,-24(fp)
		((long) samplesperrow * SIZEOF(JSAMPLE));
	if (ltemp <= 0)
   257d8:	e0bffa17 	ldw	r2,-24(fp)
   257dc:	00800916 	blt	zero,r2,25804 <alloc_sarray+0x6c>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
   257e0:	e0bffc17 	ldw	r2,-16(fp)
   257e4:	10800017 	ldw	r2,0(r2)
   257e8:	00c01204 	movi	r3,72
   257ec:	10c00515 	stw	r3,20(r2)
   257f0:	e0bffc17 	ldw	r2,-16(fp)
   257f4:	10800017 	ldw	r2,0(r2)
   257f8:	10800017 	ldw	r2,0(r2)
   257fc:	e13ffc17 	ldw	r4,-16(fp)
   25800:	103ee83a 	callr	r2
	if (ltemp < (long) numrows)
   25804:	e0bfff17 	ldw	r2,-4(fp)
   25808:	e0fffa17 	ldw	r3,-24(fp)
   2580c:	1880030e 	bge	r3,r2,2581c <alloc_sarray+0x84>
		rowsperchunk = (JDIMENSION) ltemp;
   25810:	e0bffa17 	ldw	r2,-24(fp)
   25814:	e0bff615 	stw	r2,-40(fp)
   25818:	00000206 	br	25824 <alloc_sarray+0x8c>
	else
		rowsperchunk = numrows;
   2581c:	e0bfff17 	ldw	r2,-4(fp)
   25820:	e0bff615 	stw	r2,-40(fp)
	mem->last_rowsperchunk = rowsperchunk;
   25824:	e0bff917 	ldw	r2,-28(fp)
   25828:	e0fff617 	ldw	r3,-40(fp)
   2582c:	10c01415 	stw	r3,80(r2)

	/* Get space for row pointers (small object) */
	result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
   25830:	e0bfff17 	ldw	r2,-4(fp)
   25834:	1085883a 	add	r2,r2,r2
   25838:	1085883a 	add	r2,r2,r2
   2583c:	e13ffc17 	ldw	r4,-16(fp)
   25840:	e17ffd17 	ldw	r5,-12(fp)
   25844:	100d883a 	mov	r6,r2
   25848:	00253480 	call	25348 <alloc_small>
   2584c:	e0bffb15 	stw	r2,-20(fp)
		(size_t) (numrows * SIZEOF(JSAMPROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
   25850:	e03ff715 	stw	zero,-36(fp)
	while (currow < numrows) {
   25854:	00002506 	br	258ec <alloc_sarray+0x154>
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
   25858:	e0ffff17 	ldw	r3,-4(fp)
   2585c:	e0bff717 	ldw	r2,-36(fp)
   25860:	1885c83a 	sub	r2,r3,r2
   25864:	e0fff617 	ldw	r3,-40(fp)
   25868:	1880012e 	bgeu	r3,r2,25870 <alloc_sarray+0xd8>
   2586c:	1805883a 	mov	r2,r3
   25870:	e0bff615 	stw	r2,-40(fp)
		workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
   25874:	e13ff617 	ldw	r4,-40(fp)
   25878:	e17ffe17 	ldw	r5,-8(fp)
   2587c:	002c1540 	call	2c154 <__mulsi3>
   25880:	e13ffc17 	ldw	r4,-16(fp)
   25884:	e17ffd17 	ldw	r5,-12(fp)
   25888:	100d883a 	mov	r6,r2
   2588c:	00256200 	call	25620 <alloc_large>
   25890:	e0bff515 	stw	r2,-44(fp)
			(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
			* SIZEOF(JSAMPLE)));
		for (i = rowsperchunk; i > 0; i--) {
   25894:	e0bff617 	ldw	r2,-40(fp)
   25898:	e0bff815 	stw	r2,-32(fp)
   2589c:	00001106 	br	258e4 <alloc_sarray+0x14c>
			result[currow++] = workspace;
   258a0:	e0bff717 	ldw	r2,-36(fp)
   258a4:	1085883a 	add	r2,r2,r2
   258a8:	1085883a 	add	r2,r2,r2
   258ac:	e0fffb17 	ldw	r3,-20(fp)
   258b0:	1885883a 	add	r2,r3,r2
   258b4:	e0fff517 	ldw	r3,-44(fp)
   258b8:	10c00015 	stw	r3,0(r2)
   258bc:	e0bff717 	ldw	r2,-36(fp)
   258c0:	10800044 	addi	r2,r2,1
   258c4:	e0bff715 	stw	r2,-36(fp)
			workspace += samplesperrow;
   258c8:	e0fff517 	ldw	r3,-44(fp)
   258cc:	e0bffe17 	ldw	r2,-8(fp)
   258d0:	1885883a 	add	r2,r3,r2
   258d4:	e0bff515 	stw	r2,-44(fp)
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
			* SIZEOF(JSAMPLE)));
		for (i = rowsperchunk; i > 0; i--) {
   258d8:	e0bff817 	ldw	r2,-32(fp)
   258dc:	10bfffc4 	addi	r2,r2,-1
   258e0:	e0bff815 	stw	r2,-32(fp)
   258e4:	e0bff817 	ldw	r2,-32(fp)
   258e8:	103fed1e 	bne	r2,zero,258a0 <alloc_sarray+0x108>
	result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
		(size_t) (numrows * SIZEOF(JSAMPROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
   258ec:	e0fff717 	ldw	r3,-36(fp)
   258f0:	e0bfff17 	ldw	r2,-4(fp)
   258f4:	18bfd836 	bltu	r3,r2,25858 <alloc_sarray+0xc0>
			result[currow++] = workspace;
			workspace += samplesperrow;
		}
	}

	return result;
   258f8:	e0bffb17 	ldw	r2,-20(fp)
}
   258fc:	e037883a 	mov	sp,fp
   25900:	dfc00117 	ldw	ra,4(sp)
   25904:	df000017 	ldw	fp,0(sp)
   25908:	dec00204 	addi	sp,sp,8
   2590c:	f800283a 	ret

00025910 <alloc_barray>:

METHODDEF(JBLOCKARRAY)
	alloc_barray (j_common_ptr cinfo, int pool_id,
	JDIMENSION blocksperrow, JDIMENSION numrows)
	/* Allocate a 2-D coefficient-block array */
{
   25910:	defff304 	addi	sp,sp,-52
   25914:	dfc00c15 	stw	ra,48(sp)
   25918:	df000b15 	stw	fp,44(sp)
   2591c:	df000b04 	addi	fp,sp,44
   25920:	e13ffc15 	stw	r4,-16(fp)
   25924:	e17ffd15 	stw	r5,-12(fp)
   25928:	e1bffe15 	stw	r6,-8(fp)
   2592c:	e1ffff15 	stw	r7,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   25930:	e0bffc17 	ldw	r2,-16(fp)
   25934:	10800117 	ldw	r2,4(r2)
   25938:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
		((long) blocksperrow * SIZEOF(JBLOCK));
   2593c:	e0bffe17 	ldw	r2,-8(fp)
   25940:	100491fa 	slli	r2,r2,7
	JBLOCKROW workspace;
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
   25944:	010ee6f4 	movhi	r4,15259
   25948:	21327d04 	addi	r4,r4,-13836
   2594c:	100b883a 	mov	r5,r2
   25950:	002c1440 	call	2c144 <__udivsi3>
   25954:	e0bffa15 	stw	r2,-24(fp)
		((long) blocksperrow * SIZEOF(JBLOCK));
	if (ltemp <= 0)
   25958:	e0bffa17 	ldw	r2,-24(fp)
   2595c:	00800916 	blt	zero,r2,25984 <alloc_barray+0x74>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
   25960:	e0bffc17 	ldw	r2,-16(fp)
   25964:	10800017 	ldw	r2,0(r2)
   25968:	00c01204 	movi	r3,72
   2596c:	10c00515 	stw	r3,20(r2)
   25970:	e0bffc17 	ldw	r2,-16(fp)
   25974:	10800017 	ldw	r2,0(r2)
   25978:	10800017 	ldw	r2,0(r2)
   2597c:	e13ffc17 	ldw	r4,-16(fp)
   25980:	103ee83a 	callr	r2
	if (ltemp < (long) numrows)
   25984:	e0bfff17 	ldw	r2,-4(fp)
   25988:	e0fffa17 	ldw	r3,-24(fp)
   2598c:	1880030e 	bge	r3,r2,2599c <alloc_barray+0x8c>
		rowsperchunk = (JDIMENSION) ltemp;
   25990:	e0bffa17 	ldw	r2,-24(fp)
   25994:	e0bff615 	stw	r2,-40(fp)
   25998:	00000206 	br	259a4 <alloc_barray+0x94>
	else
		rowsperchunk = numrows;
   2599c:	e0bfff17 	ldw	r2,-4(fp)
   259a0:	e0bff615 	stw	r2,-40(fp)
	mem->last_rowsperchunk = rowsperchunk;
   259a4:	e0bff917 	ldw	r2,-28(fp)
   259a8:	e0fff617 	ldw	r3,-40(fp)
   259ac:	10c01415 	stw	r3,80(r2)

	/* Get space for row pointers (small object) */
	result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
   259b0:	e0bfff17 	ldw	r2,-4(fp)
   259b4:	1085883a 	add	r2,r2,r2
   259b8:	1085883a 	add	r2,r2,r2
   259bc:	e13ffc17 	ldw	r4,-16(fp)
   259c0:	e17ffd17 	ldw	r5,-12(fp)
   259c4:	100d883a 	mov	r6,r2
   259c8:	00253480 	call	25348 <alloc_small>
   259cc:	e0bffb15 	stw	r2,-20(fp)
		(size_t) (numrows * SIZEOF(JBLOCKROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
   259d0:	e03ff715 	stw	zero,-36(fp)
	while (currow < numrows) {
   259d4:	00002706 	br	25a74 <alloc_barray+0x164>
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
   259d8:	e0ffff17 	ldw	r3,-4(fp)
   259dc:	e0bff717 	ldw	r2,-36(fp)
   259e0:	1885c83a 	sub	r2,r3,r2
   259e4:	e0fff617 	ldw	r3,-40(fp)
   259e8:	1880012e 	bgeu	r3,r2,259f0 <alloc_barray+0xe0>
   259ec:	1805883a 	mov	r2,r3
   259f0:	e0bff615 	stw	r2,-40(fp)
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
   259f4:	e13ff617 	ldw	r4,-40(fp)
   259f8:	e17ffe17 	ldw	r5,-8(fp)
   259fc:	002c1540 	call	2c154 <__mulsi3>

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
   25a00:	100491fa 	slli	r2,r2,7
   25a04:	e13ffc17 	ldw	r4,-16(fp)
   25a08:	e17ffd17 	ldw	r5,-12(fp)
   25a0c:	100d883a 	mov	r6,r2
   25a10:	00256200 	call	25620 <alloc_large>
   25a14:	e0bff515 	stw	r2,-44(fp)
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
			* SIZEOF(JBLOCK)));
		for (i = rowsperchunk; i > 0; i--) {
   25a18:	e0bff617 	ldw	r2,-40(fp)
   25a1c:	e0bff815 	stw	r2,-32(fp)
   25a20:	00001206 	br	25a6c <alloc_barray+0x15c>
			result[currow++] = workspace;
   25a24:	e0bff717 	ldw	r2,-36(fp)
   25a28:	1085883a 	add	r2,r2,r2
   25a2c:	1085883a 	add	r2,r2,r2
   25a30:	e0fffb17 	ldw	r3,-20(fp)
   25a34:	1885883a 	add	r2,r3,r2
   25a38:	e0fff517 	ldw	r3,-44(fp)
   25a3c:	10c00015 	stw	r3,0(r2)
   25a40:	e0bff717 	ldw	r2,-36(fp)
   25a44:	10800044 	addi	r2,r2,1
   25a48:	e0bff715 	stw	r2,-36(fp)
			workspace += blocksperrow;
   25a4c:	e0bffe17 	ldw	r2,-8(fp)
   25a50:	100491fa 	slli	r2,r2,7
   25a54:	e0fff517 	ldw	r3,-44(fp)
   25a58:	1885883a 	add	r2,r3,r2
   25a5c:	e0bff515 	stw	r2,-44(fp)
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
			* SIZEOF(JBLOCK)));
		for (i = rowsperchunk; i > 0; i--) {
   25a60:	e0bff817 	ldw	r2,-32(fp)
   25a64:	10bfffc4 	addi	r2,r2,-1
   25a68:	e0bff815 	stw	r2,-32(fp)
   25a6c:	e0bff817 	ldw	r2,-32(fp)
   25a70:	103fec1e 	bne	r2,zero,25a24 <alloc_barray+0x114>
	result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
		(size_t) (numrows * SIZEOF(JBLOCKROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
   25a74:	e0fff717 	ldw	r3,-36(fp)
   25a78:	e0bfff17 	ldw	r2,-4(fp)
   25a7c:	18bfd636 	bltu	r3,r2,259d8 <alloc_barray+0xc8>
			result[currow++] = workspace;
			workspace += blocksperrow;
		}
	}

	return result;
   25a80:	e0bffb17 	ldw	r2,-20(fp)
}
   25a84:	e037883a 	mov	sp,fp
   25a88:	dfc00117 	ldw	ra,4(sp)
   25a8c:	df000017 	ldw	fp,0(sp)
   25a90:	dec00204 	addi	sp,sp,8
   25a94:	f800283a 	ret

00025a98 <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
	request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
	JDIMENSION samplesperrow, JDIMENSION numrows,
	JDIMENSION maxaccess)
	/* Request a virtual 2-D sample array */
{
   25a98:	defff804 	addi	sp,sp,-32
   25a9c:	dfc00715 	stw	ra,28(sp)
   25aa0:	df000615 	stw	fp,24(sp)
   25aa4:	df000604 	addi	fp,sp,24
   25aa8:	e13ffc15 	stw	r4,-16(fp)
   25aac:	e17ffd15 	stw	r5,-12(fp)
   25ab0:	3005883a 	mov	r2,r6
   25ab4:	e1ffff15 	stw	r7,-4(fp)
   25ab8:	e0bffe05 	stb	r2,-8(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   25abc:	e0bffc17 	ldw	r2,-16(fp)
   25ac0:	10800117 	ldw	r2,4(r2)
   25ac4:	e0bffa15 	stw	r2,-24(fp)
	jvirt_sarray_ptr result;

	/* Only IMAGE-lifetime virtual arrays are currently supported */
	if (pool_id != JPOOL_IMAGE)
   25ac8:	e0bffd17 	ldw	r2,-12(fp)
   25acc:	10800060 	cmpeqi	r2,r2,1
   25ad0:	10000d1e 	bne	r2,zero,25b08 <request_virt_sarray+0x70>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
   25ad4:	e0bffc17 	ldw	r2,-16(fp)
   25ad8:	10800017 	ldw	r2,0(r2)
   25adc:	00c003c4 	movi	r3,15
   25ae0:	10c00515 	stw	r3,20(r2)
   25ae4:	e0bffc17 	ldw	r2,-16(fp)
   25ae8:	10800017 	ldw	r2,0(r2)
   25aec:	e0fffd17 	ldw	r3,-12(fp)
   25af0:	10c00615 	stw	r3,24(r2)
   25af4:	e0bffc17 	ldw	r2,-16(fp)
   25af8:	10800017 	ldw	r2,0(r2)
   25afc:	10800017 	ldw	r2,0(r2)
   25b00:	e13ffc17 	ldw	r4,-16(fp)
   25b04:	103ee83a 	callr	r2

	/* get control block */
	result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
   25b08:	e13ffc17 	ldw	r4,-16(fp)
   25b0c:	e17ffd17 	ldw	r5,-12(fp)
   25b10:	01801e04 	movi	r6,120
   25b14:	00253480 	call	25348 <alloc_small>
   25b18:	e0bffb15 	stw	r2,-20(fp)
		SIZEOF(struct jvirt_sarray_control));

	result->mem_buffer = NULL;	/* marks array not yet realized */
   25b1c:	e0bffb17 	ldw	r2,-20(fp)
   25b20:	10000015 	stw	zero,0(r2)
	result->rows_in_array = numrows;
   25b24:	e0bffb17 	ldw	r2,-20(fp)
   25b28:	e0c00217 	ldw	r3,8(fp)
   25b2c:	10c00115 	stw	r3,4(r2)
	result->samplesperrow = samplesperrow;
   25b30:	e0bffb17 	ldw	r2,-20(fp)
   25b34:	e0ffff17 	ldw	r3,-4(fp)
   25b38:	10c00215 	stw	r3,8(r2)
	result->maxaccess = maxaccess;
   25b3c:	e0bffb17 	ldw	r2,-20(fp)
   25b40:	e0c00317 	ldw	r3,12(fp)
   25b44:	10c00315 	stw	r3,12(r2)
	result->pre_zero = pre_zero;
   25b48:	e0bffb17 	ldw	r2,-20(fp)
   25b4c:	e0fffe03 	ldbu	r3,-8(fp)
   25b50:	10c00805 	stb	r3,32(r2)
	result->b_s_open = FALSE;	/* no associated backing-store object */
   25b54:	e0bffb17 	ldw	r2,-20(fp)
   25b58:	10000885 	stb	zero,34(r2)
	result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
   25b5c:	e0bffa17 	ldw	r2,-24(fp)
   25b60:	10c01117 	ldw	r3,68(r2)
   25b64:	e0bffb17 	ldw	r2,-20(fp)
   25b68:	10c00915 	stw	r3,36(r2)
	mem->virt_sarray_list = result;
   25b6c:	e0bffa17 	ldw	r2,-24(fp)
   25b70:	e0fffb17 	ldw	r3,-20(fp)
   25b74:	10c01115 	stw	r3,68(r2)

	return result;
   25b78:	e0bffb17 	ldw	r2,-20(fp)
}
   25b7c:	e037883a 	mov	sp,fp
   25b80:	dfc00117 	ldw	ra,4(sp)
   25b84:	df000017 	ldw	fp,0(sp)
   25b88:	dec00204 	addi	sp,sp,8
   25b8c:	f800283a 	ret

00025b90 <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
	request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
	JDIMENSION blocksperrow, JDIMENSION numrows,
	JDIMENSION maxaccess)
	/* Request a virtual 2-D coefficient-block array */
{
   25b90:	defff804 	addi	sp,sp,-32
   25b94:	dfc00715 	stw	ra,28(sp)
   25b98:	df000615 	stw	fp,24(sp)
   25b9c:	df000604 	addi	fp,sp,24
   25ba0:	e13ffc15 	stw	r4,-16(fp)
   25ba4:	e17ffd15 	stw	r5,-12(fp)
   25ba8:	3005883a 	mov	r2,r6
   25bac:	e1ffff15 	stw	r7,-4(fp)
   25bb0:	e0bffe05 	stb	r2,-8(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   25bb4:	e0bffc17 	ldw	r2,-16(fp)
   25bb8:	10800117 	ldw	r2,4(r2)
   25bbc:	e0bffa15 	stw	r2,-24(fp)
	jvirt_barray_ptr result;

	/* Only IMAGE-lifetime virtual arrays are currently supported */
	if (pool_id != JPOOL_IMAGE)
   25bc0:	e0bffd17 	ldw	r2,-12(fp)
   25bc4:	10800060 	cmpeqi	r2,r2,1
   25bc8:	10000d1e 	bne	r2,zero,25c00 <request_virt_barray+0x70>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
   25bcc:	e0bffc17 	ldw	r2,-16(fp)
   25bd0:	10800017 	ldw	r2,0(r2)
   25bd4:	00c003c4 	movi	r3,15
   25bd8:	10c00515 	stw	r3,20(r2)
   25bdc:	e0bffc17 	ldw	r2,-16(fp)
   25be0:	10800017 	ldw	r2,0(r2)
   25be4:	e0fffd17 	ldw	r3,-12(fp)
   25be8:	10c00615 	stw	r3,24(r2)
   25bec:	e0bffc17 	ldw	r2,-16(fp)
   25bf0:	10800017 	ldw	r2,0(r2)
   25bf4:	10800017 	ldw	r2,0(r2)
   25bf8:	e13ffc17 	ldw	r4,-16(fp)
   25bfc:	103ee83a 	callr	r2

	/* get control block */
	result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
   25c00:	e13ffc17 	ldw	r4,-16(fp)
   25c04:	e17ffd17 	ldw	r5,-12(fp)
   25c08:	01801e04 	movi	r6,120
   25c0c:	00253480 	call	25348 <alloc_small>
   25c10:	e0bffb15 	stw	r2,-20(fp)
		SIZEOF(struct jvirt_barray_control));

	result->mem_buffer = NULL;	/* marks array not yet realized */
   25c14:	e0bffb17 	ldw	r2,-20(fp)
   25c18:	10000015 	stw	zero,0(r2)
	result->rows_in_array = numrows;
   25c1c:	e0bffb17 	ldw	r2,-20(fp)
   25c20:	e0c00217 	ldw	r3,8(fp)
   25c24:	10c00115 	stw	r3,4(r2)
	result->blocksperrow = blocksperrow;
   25c28:	e0bffb17 	ldw	r2,-20(fp)
   25c2c:	e0ffff17 	ldw	r3,-4(fp)
   25c30:	10c00215 	stw	r3,8(r2)
	result->maxaccess = maxaccess;
   25c34:	e0bffb17 	ldw	r2,-20(fp)
   25c38:	e0c00317 	ldw	r3,12(fp)
   25c3c:	10c00315 	stw	r3,12(r2)
	result->pre_zero = pre_zero;
   25c40:	e0bffb17 	ldw	r2,-20(fp)
   25c44:	e0fffe03 	ldbu	r3,-8(fp)
   25c48:	10c00805 	stb	r3,32(r2)
	result->b_s_open = FALSE;	/* no associated backing-store object */
   25c4c:	e0bffb17 	ldw	r2,-20(fp)
   25c50:	10000885 	stb	zero,34(r2)
	result->next = mem->virt_barray_list; /* add to list of virtual arrays */
   25c54:	e0bffa17 	ldw	r2,-24(fp)
   25c58:	10c01217 	ldw	r3,72(r2)
   25c5c:	e0bffb17 	ldw	r2,-20(fp)
   25c60:	10c00915 	stw	r3,36(r2)
	mem->virt_barray_list = result;
   25c64:	e0bffa17 	ldw	r2,-24(fp)
   25c68:	e0fffb17 	ldw	r3,-20(fp)
   25c6c:	10c01215 	stw	r3,72(r2)

	return result;
   25c70:	e0bffb17 	ldw	r2,-20(fp)
}
   25c74:	e037883a 	mov	sp,fp
   25c78:	dfc00117 	ldw	ra,4(sp)
   25c7c:	df000017 	ldw	fp,0(sp)
   25c80:	dec00204 	addi	sp,sp,8
   25c84:	f800283a 	ret

00025c88 <realize_virt_arrays>:


METHODDEF(void)
	realize_virt_arrays (j_common_ptr cinfo)
	/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
   25c88:	defff404 	addi	sp,sp,-48
   25c8c:	dfc00b15 	stw	ra,44(sp)
   25c90:	df000a15 	stw	fp,40(sp)
   25c94:	dc000915 	stw	r16,36(sp)
   25c98:	df000904 	addi	fp,sp,36
   25c9c:	e13fff15 	stw	r4,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   25ca0:	e0bfff17 	ldw	r2,-4(fp)
   25ca4:	10800117 	ldw	r2,4(r2)
   25ca8:	e0bffc15 	stw	r2,-16(fp)

	/* Compute the minimum space needed (maxaccess rows in each buffer)
	* and the maximum space needed (full image height in each buffer).
	* These may be of use to the system-dependent jpeg_mem_available routine.
	*/
	space_per_minheight = 0;
   25cac:	e03ff715 	stw	zero,-36(fp)
	maximum_space = 0;
   25cb0:	e03ff815 	stw	zero,-32(fp)
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   25cb4:	e0bffc17 	ldw	r2,-16(fp)
   25cb8:	10801117 	ldw	r2,68(r2)
   25cbc:	e0bffa15 	stw	r2,-24(fp)
   25cc0:	00001e06 	br	25d3c <realize_virt_arrays+0xb4>
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
   25cc4:	e0bffa17 	ldw	r2,-24(fp)
   25cc8:	10800017 	ldw	r2,0(r2)
   25ccc:	1000181e 	bne	r2,zero,25d30 <realize_virt_arrays+0xa8>
			space_per_minheight += (long) sptr->maxaccess *
   25cd0:	e0bffa17 	ldw	r2,-24(fp)
   25cd4:	10800317 	ldw	r2,12(r2)
   25cd8:	1007883a 	mov	r3,r2
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
   25cdc:	e0bffa17 	ldw	r2,-24(fp)
   25ce0:	10800217 	ldw	r2,8(r2)
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
   25ce4:	1809883a 	mov	r4,r3
   25ce8:	100b883a 	mov	r5,r2
   25cec:	002c1540 	call	2c154 <__mulsi3>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
   25cf0:	1007883a 	mov	r3,r2
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
   25cf4:	e0bff717 	ldw	r2,-36(fp)
   25cf8:	1885883a 	add	r2,r3,r2
   25cfc:	e0bff715 	stw	r2,-36(fp)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
   25d00:	e0bffa17 	ldw	r2,-24(fp)
   25d04:	10800117 	ldw	r2,4(r2)
   25d08:	1007883a 	mov	r3,r2
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
   25d0c:	e0bffa17 	ldw	r2,-24(fp)
   25d10:	10800217 	ldw	r2,8(r2)
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
   25d14:	1809883a 	mov	r4,r3
   25d18:	100b883a 	mov	r5,r2
   25d1c:	002c1540 	call	2c154 <__mulsi3>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
   25d20:	1007883a 	mov	r3,r2
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
   25d24:	e0bff817 	ldw	r2,-32(fp)
   25d28:	1885883a 	add	r2,r3,r2
   25d2c:	e0bff815 	stw	r2,-32(fp)
	* and the maximum space needed (full image height in each buffer).
	* These may be of use to the system-dependent jpeg_mem_available routine.
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   25d30:	e0bffa17 	ldw	r2,-24(fp)
   25d34:	10800917 	ldw	r2,36(r2)
   25d38:	e0bffa15 	stw	r2,-24(fp)
   25d3c:	e0bffa17 	ldw	r2,-24(fp)
   25d40:	103fe01e 	bne	r2,zero,25cc4 <realize_virt_arrays+0x3c>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   25d44:	e0bffc17 	ldw	r2,-16(fp)
   25d48:	10801217 	ldw	r2,72(r2)
   25d4c:	e0bffb15 	stw	r2,-20(fp)
   25d50:	00001e06 	br	25dcc <realize_virt_arrays+0x144>
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
   25d54:	e0bffb17 	ldw	r2,-20(fp)
   25d58:	10800017 	ldw	r2,0(r2)
   25d5c:	1000181e 	bne	r2,zero,25dc0 <realize_virt_arrays+0x138>
			space_per_minheight += (long) bptr->maxaccess *
   25d60:	e0bffb17 	ldw	r2,-20(fp)
   25d64:	10800317 	ldw	r2,12(r2)
   25d68:	1007883a 	mov	r3,r2
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
   25d6c:	e0bffb17 	ldw	r2,-20(fp)
   25d70:	10800217 	ldw	r2,8(r2)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
   25d74:	1809883a 	mov	r4,r3
   25d78:	100b883a 	mov	r5,r2
   25d7c:	002c1540 	call	2c154 <__mulsi3>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
   25d80:	100691fa 	slli	r3,r2,7
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
   25d84:	e0bff717 	ldw	r2,-36(fp)
   25d88:	1885883a 	add	r2,r3,r2
   25d8c:	e0bff715 	stw	r2,-36(fp)
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
   25d90:	e0bffb17 	ldw	r2,-20(fp)
   25d94:	10800117 	ldw	r2,4(r2)
   25d98:	1007883a 	mov	r3,r2
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
   25d9c:	e0bffb17 	ldw	r2,-20(fp)
   25da0:	10800217 	ldw	r2,8(r2)
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
   25da4:	1809883a 	mov	r4,r3
   25da8:	100b883a 	mov	r5,r2
   25dac:	002c1540 	call	2c154 <__mulsi3>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
   25db0:	100691fa 	slli	r3,r2,7
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
   25db4:	e0bff817 	ldw	r2,-32(fp)
   25db8:	1885883a 	add	r2,r3,r2
   25dbc:	e0bff815 	stw	r2,-32(fp)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   25dc0:	e0bffb17 	ldw	r2,-20(fp)
   25dc4:	10800917 	ldw	r2,36(r2)
   25dc8:	e0bffb15 	stw	r2,-20(fp)
   25dcc:	e0bffb17 	ldw	r2,-20(fp)
   25dd0:	103fe01e 	bne	r2,zero,25d54 <realize_virt_arrays+0xcc>
			maximum_space += (long) bptr->rows_in_array *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
		}
	}

	if (space_per_minheight <= 0)
   25dd4:	e0bff717 	ldw	r2,-36(fp)
   25dd8:	0080b50e 	bge	zero,r2,260b0 <realize_virt_arrays+0x428>
		return;			/* no unrealized arrays, no work */

	/* Determine amount of memory to actually use; this is system-dependent. */
	avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
		mem->total_space_allocated);
   25ddc:	e0bffc17 	ldw	r2,-16(fp)

	if (space_per_minheight <= 0)
		return;			/* no unrealized arrays, no work */

	/* Determine amount of memory to actually use; this is system-dependent. */
	avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
   25de0:	10801317 	ldw	r2,76(r2)
   25de4:	e13fff17 	ldw	r4,-4(fp)
   25de8:	e17ff717 	ldw	r5,-36(fp)
   25dec:	e1bff817 	ldw	r6,-32(fp)
   25df0:	100f883a 	mov	r7,r2
   25df4:	0024fe80 	call	24fe8 <jpeg_mem_available>
   25df8:	e0bffd15 	stw	r2,-12(fp)

	/* If the maximum space needed is available, make all the buffers full
	* height; otherwise parcel it out with the same number of minheights
	* in each buffer.
	*/
	if (avail_mem >= maximum_space)
   25dfc:	e0fffd17 	ldw	r3,-12(fp)
   25e00:	e0bff817 	ldw	r2,-32(fp)
   25e04:	18800416 	blt	r3,r2,25e18 <realize_virt_arrays+0x190>
		max_minheights = 1000000000L;
   25e08:	008ee6f4 	movhi	r2,15259
   25e0c:	10b28004 	addi	r2,r2,-13824
   25e10:	e0bff915 	stw	r2,-28(fp)
   25e14:	00000806 	br	25e38 <realize_virt_arrays+0x1b0>
	else {
		max_minheights = avail_mem / space_per_minheight;
   25e18:	e13ffd17 	ldw	r4,-12(fp)
   25e1c:	e17ff717 	ldw	r5,-36(fp)
   25e20:	002c0980 	call	2c098 <__divsi3>
   25e24:	e0bff915 	stw	r2,-28(fp)
		/* If there doesn't seem to be enough space, try to get the minimum
		* anyway.  This allows a "stub" implementation of jpeg_mem_available().
		*/
		if (max_minheights <= 0)
   25e28:	e0bff917 	ldw	r2,-28(fp)
   25e2c:	00800216 	blt	zero,r2,25e38 <realize_virt_arrays+0x1b0>
			max_minheights = 1;
   25e30:	00800044 	movi	r2,1
   25e34:	e0bff915 	stw	r2,-28(fp)
	}

	/* Allocate the in-memory buffers and initialize backing store as needed. */

	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   25e38:	e0bffc17 	ldw	r2,-16(fp)
   25e3c:	10801117 	ldw	r2,68(r2)
   25e40:	e0bffa15 	stw	r2,-24(fp)
   25e44:	00004806 	br	25f68 <realize_virt_arrays+0x2e0>
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
   25e48:	e0bffa17 	ldw	r2,-24(fp)
   25e4c:	10800017 	ldw	r2,0(r2)
   25e50:	1000421e 	bne	r2,zero,25f5c <realize_virt_arrays+0x2d4>
			minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
   25e54:	e0bffa17 	ldw	r2,-24(fp)
   25e58:	10800117 	ldw	r2,4(r2)
   25e5c:	10bfffc4 	addi	r2,r2,-1
   25e60:	1007883a 	mov	r3,r2
   25e64:	e0bffa17 	ldw	r2,-24(fp)
   25e68:	10800317 	ldw	r2,12(r2)
   25e6c:	1809883a 	mov	r4,r3
   25e70:	100b883a 	mov	r5,r2
   25e74:	002c1440 	call	2c144 <__udivsi3>
   25e78:	10800044 	addi	r2,r2,1
   25e7c:	e0bffe15 	stw	r2,-8(fp)
			if (minheights <= max_minheights) {
   25e80:	e0bffe17 	ldw	r2,-8(fp)
   25e84:	e0fff917 	ldw	r3,-28(fp)
   25e88:	18800516 	blt	r3,r2,25ea0 <realize_virt_arrays+0x218>
				/* This buffer fits in memory */
				sptr->rows_in_mem = sptr->rows_in_array;
   25e8c:	e0bffa17 	ldw	r2,-24(fp)
   25e90:	10c00117 	ldw	r3,4(r2)
   25e94:	e0bffa17 	ldw	r2,-24(fp)
   25e98:	10c00415 	stw	r3,16(r2)
   25e9c:	00001a06 	br	25f08 <realize_virt_arrays+0x280>
			} else {
				/* It doesn't fit in memory, create backing store. */
				sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
   25ea0:	e0bffa17 	ldw	r2,-24(fp)
   25ea4:	10c00317 	ldw	r3,12(r2)
   25ea8:	e0bff917 	ldw	r2,-28(fp)
   25eac:	1809883a 	mov	r4,r3
   25eb0:	100b883a 	mov	r5,r2
   25eb4:	002c1540 	call	2c154 <__mulsi3>
   25eb8:	1007883a 	mov	r3,r2
   25ebc:	e0bffa17 	ldw	r2,-24(fp)
   25ec0:	10c00415 	stw	r3,16(r2)
				jpeg_open_backing_store(cinfo, & sptr->b_s_info,
   25ec4:	e0bffa17 	ldw	r2,-24(fp)
   25ec8:	14000a04 	addi	r16,r2,40
					(long) sptr->rows_in_array *
   25ecc:	e0bffa17 	ldw	r2,-24(fp)
   25ed0:	10800117 	ldw	r2,4(r2)
   25ed4:	1007883a 	mov	r3,r2
					(long) sptr->samplesperrow *
   25ed8:	e0bffa17 	ldw	r2,-24(fp)
   25edc:	10800217 	ldw	r2,8(r2)
				/* This buffer fits in memory */
				sptr->rows_in_mem = sptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
				jpeg_open_backing_store(cinfo, & sptr->b_s_info,
   25ee0:	1809883a 	mov	r4,r3
   25ee4:	100b883a 	mov	r5,r2
   25ee8:	002c1540 	call	2c154 <__mulsi3>
   25eec:	e13fff17 	ldw	r4,-4(fp)
   25ef0:	800b883a 	mov	r5,r16
   25ef4:	100d883a 	mov	r6,r2
   25ef8:	00251e40 	call	251e4 <jpeg_open_backing_store>
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
   25efc:	e0bffa17 	ldw	r2,-24(fp)
   25f00:	00c00044 	movi	r3,1
   25f04:	10c00885 	stb	r3,34(r2)
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				sptr->samplesperrow, sptr->rows_in_mem);
   25f08:	e0bffa17 	ldw	r2,-24(fp)
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
   25f0c:	10c00217 	ldw	r3,8(r2)
				sptr->samplesperrow, sptr->rows_in_mem);
   25f10:	e0bffa17 	ldw	r2,-24(fp)
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
   25f14:	10800417 	ldw	r2,16(r2)
   25f18:	e13fff17 	ldw	r4,-4(fp)
   25f1c:	01400044 	movi	r5,1
   25f20:	180d883a 	mov	r6,r3
   25f24:	100f883a 	mov	r7,r2
   25f28:	00257980 	call	25798 <alloc_sarray>
   25f2c:	e0fffa17 	ldw	r3,-24(fp)
   25f30:	18800015 	stw	r2,0(r3)
				sptr->samplesperrow, sptr->rows_in_mem);
			sptr->rowsperchunk = mem->last_rowsperchunk;
   25f34:	e0bffc17 	ldw	r2,-16(fp)
   25f38:	10c01417 	ldw	r3,80(r2)
   25f3c:	e0bffa17 	ldw	r2,-24(fp)
   25f40:	10c00515 	stw	r3,20(r2)
			sptr->cur_start_row = 0;
   25f44:	e0bffa17 	ldw	r2,-24(fp)
   25f48:	10000615 	stw	zero,24(r2)
			sptr->first_undef_row = 0;
   25f4c:	e0bffa17 	ldw	r2,-24(fp)
   25f50:	10000715 	stw	zero,28(r2)
			sptr->dirty = FALSE;
   25f54:	e0bffa17 	ldw	r2,-24(fp)
   25f58:	10000845 	stb	zero,33(r2)
			max_minheights = 1;
	}

	/* Allocate the in-memory buffers and initialize backing store as needed. */

	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   25f5c:	e0bffa17 	ldw	r2,-24(fp)
   25f60:	10800917 	ldw	r2,36(r2)
   25f64:	e0bffa15 	stw	r2,-24(fp)
   25f68:	e0bffa17 	ldw	r2,-24(fp)
   25f6c:	103fb61e 	bne	r2,zero,25e48 <realize_virt_arrays+0x1c0>
			sptr->first_undef_row = 0;
			sptr->dirty = FALSE;
		}
	}

	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   25f70:	e0bffc17 	ldw	r2,-16(fp)
   25f74:	10801217 	ldw	r2,72(r2)
   25f78:	e0bffb15 	stw	r2,-20(fp)
   25f7c:	00004906 	br	260a4 <realize_virt_arrays+0x41c>
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
   25f80:	e0bffb17 	ldw	r2,-20(fp)
   25f84:	10800017 	ldw	r2,0(r2)
   25f88:	1000431e 	bne	r2,zero,26098 <realize_virt_arrays+0x410>
			minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
   25f8c:	e0bffb17 	ldw	r2,-20(fp)
   25f90:	10800117 	ldw	r2,4(r2)
   25f94:	10bfffc4 	addi	r2,r2,-1
   25f98:	1007883a 	mov	r3,r2
   25f9c:	e0bffb17 	ldw	r2,-20(fp)
   25fa0:	10800317 	ldw	r2,12(r2)
   25fa4:	1809883a 	mov	r4,r3
   25fa8:	100b883a 	mov	r5,r2
   25fac:	002c1440 	call	2c144 <__udivsi3>
   25fb0:	10800044 	addi	r2,r2,1
   25fb4:	e0bffe15 	stw	r2,-8(fp)
			if (minheights <= max_minheights) {
   25fb8:	e0bffe17 	ldw	r2,-8(fp)
   25fbc:	e0fff917 	ldw	r3,-28(fp)
   25fc0:	18800516 	blt	r3,r2,25fd8 <realize_virt_arrays+0x350>
				/* This buffer fits in memory */
				bptr->rows_in_mem = bptr->rows_in_array;
   25fc4:	e0bffb17 	ldw	r2,-20(fp)
   25fc8:	10c00117 	ldw	r3,4(r2)
   25fcc:	e0bffb17 	ldw	r2,-20(fp)
   25fd0:	10c00415 	stw	r3,16(r2)
   25fd4:	00001b06 	br	26044 <realize_virt_arrays+0x3bc>
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
   25fd8:	e0bffb17 	ldw	r2,-20(fp)
   25fdc:	10c00317 	ldw	r3,12(r2)
   25fe0:	e0bff917 	ldw	r2,-28(fp)
   25fe4:	1809883a 	mov	r4,r3
   25fe8:	100b883a 	mov	r5,r2
   25fec:	002c1540 	call	2c154 <__mulsi3>
   25ff0:	1007883a 	mov	r3,r2
   25ff4:	e0bffb17 	ldw	r2,-20(fp)
   25ff8:	10c00415 	stw	r3,16(r2)
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
   25ffc:	e0bffb17 	ldw	r2,-20(fp)
   26000:	14000a04 	addi	r16,r2,40
					(long) bptr->rows_in_array *
   26004:	e0bffb17 	ldw	r2,-20(fp)
   26008:	10800117 	ldw	r2,4(r2)
   2600c:	1007883a 	mov	r3,r2
					(long) bptr->blocksperrow *
   26010:	e0bffb17 	ldw	r2,-20(fp)
   26014:	10800217 	ldw	r2,8(r2)
				bptr->rows_in_mem = bptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
					(long) bptr->rows_in_array *
   26018:	1809883a 	mov	r4,r3
   2601c:	100b883a 	mov	r5,r2
   26020:	002c1540 	call	2c154 <__mulsi3>
				/* This buffer fits in memory */
				bptr->rows_in_mem = bptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
   26024:	100491fa 	slli	r2,r2,7
   26028:	e13fff17 	ldw	r4,-4(fp)
   2602c:	800b883a 	mov	r5,r16
   26030:	100d883a 	mov	r6,r2
   26034:	00251e40 	call	251e4 <jpeg_open_backing_store>
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
   26038:	e0bffb17 	ldw	r2,-20(fp)
   2603c:	00c00044 	movi	r3,1
   26040:	10c00885 	stb	r3,34(r2)
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				bptr->blocksperrow, bptr->rows_in_mem);
   26044:	e0bffb17 	ldw	r2,-20(fp)
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
   26048:	10c00217 	ldw	r3,8(r2)
				bptr->blocksperrow, bptr->rows_in_mem);
   2604c:	e0bffb17 	ldw	r2,-20(fp)
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
   26050:	10800417 	ldw	r2,16(r2)
   26054:	e13fff17 	ldw	r4,-4(fp)
   26058:	01400044 	movi	r5,1
   2605c:	180d883a 	mov	r6,r3
   26060:	100f883a 	mov	r7,r2
   26064:	00259100 	call	25910 <alloc_barray>
   26068:	e0fffb17 	ldw	r3,-20(fp)
   2606c:	18800015 	stw	r2,0(r3)
				bptr->blocksperrow, bptr->rows_in_mem);
			bptr->rowsperchunk = mem->last_rowsperchunk;
   26070:	e0bffc17 	ldw	r2,-16(fp)
   26074:	10c01417 	ldw	r3,80(r2)
   26078:	e0bffb17 	ldw	r2,-20(fp)
   2607c:	10c00515 	stw	r3,20(r2)
			bptr->cur_start_row = 0;
   26080:	e0bffb17 	ldw	r2,-20(fp)
   26084:	10000615 	stw	zero,24(r2)
			bptr->first_undef_row = 0;
   26088:	e0bffb17 	ldw	r2,-20(fp)
   2608c:	10000715 	stw	zero,28(r2)
			bptr->dirty = FALSE;
   26090:	e0bffb17 	ldw	r2,-20(fp)
   26094:	10000845 	stb	zero,33(r2)
			sptr->first_undef_row = 0;
			sptr->dirty = FALSE;
		}
	}

	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   26098:	e0bffb17 	ldw	r2,-20(fp)
   2609c:	10800917 	ldw	r2,36(r2)
   260a0:	e0bffb15 	stw	r2,-20(fp)
   260a4:	e0bffb17 	ldw	r2,-20(fp)
   260a8:	103fb51e 	bne	r2,zero,25f80 <realize_virt_arrays+0x2f8>
   260ac:	00000106 	br	260b4 <realize_virt_arrays+0x42c>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
		}
	}

	if (space_per_minheight <= 0)
		return;			/* no unrealized arrays, no work */
   260b0:	0001883a 	nop
			bptr->cur_start_row = 0;
			bptr->first_undef_row = 0;
			bptr->dirty = FALSE;
		}
	}
}
   260b4:	e037883a 	mov	sp,fp
   260b8:	dfc00217 	ldw	ra,8(sp)
   260bc:	df000117 	ldw	fp,4(sp)
   260c0:	dc000017 	ldw	r16,0(sp)
   260c4:	dec00304 	addi	sp,sp,12
   260c8:	f800283a 	ret

000260cc <do_sarray_io>:


LOCAL(void)
	do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
	/* Do backing store read or write of a virtual sample array */
{
   260cc:	defff404 	addi	sp,sp,-48
   260d0:	dfc00b15 	stw	ra,44(sp)
   260d4:	df000a15 	stw	fp,40(sp)
   260d8:	df000a04 	addi	fp,sp,40
   260dc:	e13ffd15 	stw	r4,-12(fp)
   260e0:	e17ffe15 	stw	r5,-8(fp)
   260e4:	3005883a 	mov	r2,r6
   260e8:	e0bfff05 	stb	r2,-4(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
   260ec:	e0bffe17 	ldw	r2,-8(fp)
   260f0:	10800217 	ldw	r2,8(r2)
   260f4:	e0bff915 	stw	r2,-28(fp)
	file_offset = ptr->cur_start_row * bytesperrow;
   260f8:	e0bffe17 	ldw	r2,-8(fp)
   260fc:	10c00617 	ldw	r3,24(r2)
   26100:	e0bff917 	ldw	r2,-28(fp)
   26104:	1809883a 	mov	r4,r3
   26108:	100b883a 	mov	r5,r2
   2610c:	002c1540 	call	2c154 <__mulsi3>
   26110:	e0bff715 	stw	r2,-36(fp)
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
   26114:	e03ff815 	stw	zero,-32(fp)
   26118:	00005806 	br	2627c <do_sarray_io+0x1b0>
		/* One chunk, but check for short chunk at end of buffer */
		rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
   2611c:	e0bffe17 	ldw	r2,-8(fp)
   26120:	10800417 	ldw	r2,16(r2)
   26124:	1007883a 	mov	r3,r2
   26128:	e0bff817 	ldw	r2,-32(fp)
   2612c:	1885c83a 	sub	r2,r3,r2
   26130:	e0fffe17 	ldw	r3,-8(fp)
   26134:	18c00517 	ldw	r3,20(r3)
   26138:	1880010e 	bge	r3,r2,26140 <do_sarray_io+0x74>
   2613c:	1805883a 	mov	r2,r3
   26140:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than is currently defined */
		thisrow = (long) ptr->cur_start_row + i;
   26144:	e0bffe17 	ldw	r2,-8(fp)
   26148:	10800617 	ldw	r2,24(r2)
   2614c:	1007883a 	mov	r3,r2
   26150:	e0bff817 	ldw	r2,-32(fp)
   26154:	1885883a 	add	r2,r3,r2
   26158:	e0bffb15 	stw	r2,-20(fp)
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
   2615c:	e0bffe17 	ldw	r2,-8(fp)
   26160:	10800717 	ldw	r2,28(r2)
   26164:	1007883a 	mov	r3,r2
   26168:	e0bffb17 	ldw	r2,-20(fp)
   2616c:	1885c83a 	sub	r2,r3,r2
   26170:	e0fffa17 	ldw	r3,-24(fp)
   26174:	1880010e 	bge	r3,r2,2617c <do_sarray_io+0xb0>
   26178:	1805883a 	mov	r2,r3
   2617c:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
   26180:	e0bffe17 	ldw	r2,-8(fp)
   26184:	10800117 	ldw	r2,4(r2)
   26188:	1007883a 	mov	r3,r2
   2618c:	e0bffb17 	ldw	r2,-20(fp)
   26190:	1885c83a 	sub	r2,r3,r2
   26194:	e0fffa17 	ldw	r3,-24(fp)
   26198:	1880010e 	bge	r3,r2,261a0 <do_sarray_io+0xd4>
   2619c:	1805883a 	mov	r2,r3
   261a0:	e0bffa15 	stw	r2,-24(fp)
		if (rows <= 0)		/* this chunk might be past end of file! */
   261a4:	e0bffa17 	ldw	r2,-24(fp)
   261a8:	0080390e 	bge	zero,r2,26290 <do_sarray_io+0x1c4>
			break;
		byte_count = rows * bytesperrow;
   261ac:	e13ffa17 	ldw	r4,-24(fp)
   261b0:	e17ff917 	ldw	r5,-28(fp)
   261b4:	002c1540 	call	2c154 <__mulsi3>
   261b8:	e0bffc15 	stw	r2,-16(fp)
		if (writing)
   261bc:	e0bfff03 	ldbu	r2,-4(fp)
   261c0:	10001326 	beq	r2,zero,26210 <do_sarray_io+0x144>
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
   261c4:	e0bffe17 	ldw	r2,-8(fp)
   261c8:	12000b17 	ldw	r8,44(r2)
   261cc:	e0bffe17 	ldw	r2,-8(fp)
   261d0:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
   261d4:	e0bffe17 	ldw	r2,-8(fp)
   261d8:	11000017 	ldw	r4,0(r2)
   261dc:	e0bff817 	ldw	r2,-32(fp)
   261e0:	1085883a 	add	r2,r2,r2
   261e4:	1085883a 	add	r2,r2,r2
   261e8:	2085883a 	add	r2,r4,r2
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
		byte_count = rows * bytesperrow;
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
   261ec:	10800017 	ldw	r2,0(r2)
   261f0:	e13ffc17 	ldw	r4,-16(fp)
   261f4:	d9000015 	stw	r4,0(sp)
   261f8:	e13ffd17 	ldw	r4,-12(fp)
   261fc:	180b883a 	mov	r5,r3
   26200:	100d883a 	mov	r6,r2
   26204:	e1fff717 	ldw	r7,-36(fp)
   26208:	403ee83a 	callr	r8
   2620c:	00001206 	br	26258 <do_sarray_io+0x18c>
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
   26210:	e0bffe17 	ldw	r2,-8(fp)
   26214:	12000a17 	ldw	r8,40(r2)
   26218:	e0bffe17 	ldw	r2,-8(fp)
   2621c:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
   26220:	e0bffe17 	ldw	r2,-8(fp)
   26224:	11000017 	ldw	r4,0(r2)
   26228:	e0bff817 	ldw	r2,-32(fp)
   2622c:	1085883a 	add	r2,r2,r2
   26230:	1085883a 	add	r2,r2,r2
   26234:	2085883a 	add	r2,r4,r2
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
   26238:	10800017 	ldw	r2,0(r2)
   2623c:	e13ffc17 	ldw	r4,-16(fp)
   26240:	d9000015 	stw	r4,0(sp)
   26244:	e13ffd17 	ldw	r4,-12(fp)
   26248:	180b883a 	mov	r5,r3
   2624c:	100d883a 	mov	r6,r2
   26250:	e1fff717 	ldw	r7,-36(fp)
   26254:	403ee83a 	callr	r8
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
   26258:	e0fff717 	ldw	r3,-36(fp)
   2625c:	e0bffc17 	ldw	r2,-16(fp)
   26260:	1885883a 	add	r2,r3,r2
   26264:	e0bff715 	stw	r2,-36(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
	file_offset = ptr->cur_start_row * bytesperrow;
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
   26268:	e0bffe17 	ldw	r2,-8(fp)
   2626c:	10c00517 	ldw	r3,20(r2)
   26270:	e0bff817 	ldw	r2,-32(fp)
   26274:	1885883a 	add	r2,r3,r2
   26278:	e0bff815 	stw	r2,-32(fp)
   2627c:	e0bffe17 	ldw	r2,-8(fp)
   26280:	10800417 	ldw	r2,16(r2)
   26284:	e0fff817 	ldw	r3,-32(fp)
   26288:	18bfa416 	blt	r3,r2,2611c <do_sarray_io+0x50>
   2628c:	00000106 	br	26294 <do_sarray_io+0x1c8>
		thisrow = (long) ptr->cur_start_row + i;
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
   26290:	0001883a 	nop
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
	}
}
   26294:	e037883a 	mov	sp,fp
   26298:	dfc00117 	ldw	ra,4(sp)
   2629c:	df000017 	ldw	fp,0(sp)
   262a0:	dec00204 	addi	sp,sp,8
   262a4:	f800283a 	ret

000262a8 <do_barray_io>:


LOCAL(void)
	do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
	/* Do backing store read or write of a virtual coefficient-block array */
{
   262a8:	defff404 	addi	sp,sp,-48
   262ac:	dfc00b15 	stw	ra,44(sp)
   262b0:	df000a15 	stw	fp,40(sp)
   262b4:	df000a04 	addi	fp,sp,40
   262b8:	e13ffd15 	stw	r4,-12(fp)
   262bc:	e17ffe15 	stw	r5,-8(fp)
   262c0:	3005883a 	mov	r2,r6
   262c4:	e0bfff05 	stb	r2,-4(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
   262c8:	e0bffe17 	ldw	r2,-8(fp)
   262cc:	10800217 	ldw	r2,8(r2)
   262d0:	100491fa 	slli	r2,r2,7
   262d4:	e0bff915 	stw	r2,-28(fp)
	file_offset = ptr->cur_start_row * bytesperrow;
   262d8:	e0bffe17 	ldw	r2,-8(fp)
   262dc:	10c00617 	ldw	r3,24(r2)
   262e0:	e0bff917 	ldw	r2,-28(fp)
   262e4:	1809883a 	mov	r4,r3
   262e8:	100b883a 	mov	r5,r2
   262ec:	002c1540 	call	2c154 <__mulsi3>
   262f0:	e0bff715 	stw	r2,-36(fp)
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
   262f4:	e03ff815 	stw	zero,-32(fp)
   262f8:	00005806 	br	2645c <do_barray_io+0x1b4>
		/* One chunk, but check for short chunk at end of buffer */
		rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
   262fc:	e0bffe17 	ldw	r2,-8(fp)
   26300:	10800417 	ldw	r2,16(r2)
   26304:	1007883a 	mov	r3,r2
   26308:	e0bff817 	ldw	r2,-32(fp)
   2630c:	1885c83a 	sub	r2,r3,r2
   26310:	e0fffe17 	ldw	r3,-8(fp)
   26314:	18c00517 	ldw	r3,20(r3)
   26318:	1880010e 	bge	r3,r2,26320 <do_barray_io+0x78>
   2631c:	1805883a 	mov	r2,r3
   26320:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than is currently defined */
		thisrow = (long) ptr->cur_start_row + i;
   26324:	e0bffe17 	ldw	r2,-8(fp)
   26328:	10800617 	ldw	r2,24(r2)
   2632c:	1007883a 	mov	r3,r2
   26330:	e0bff817 	ldw	r2,-32(fp)
   26334:	1885883a 	add	r2,r3,r2
   26338:	e0bffb15 	stw	r2,-20(fp)
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
   2633c:	e0bffe17 	ldw	r2,-8(fp)
   26340:	10800717 	ldw	r2,28(r2)
   26344:	1007883a 	mov	r3,r2
   26348:	e0bffb17 	ldw	r2,-20(fp)
   2634c:	1885c83a 	sub	r2,r3,r2
   26350:	e0fffa17 	ldw	r3,-24(fp)
   26354:	1880010e 	bge	r3,r2,2635c <do_barray_io+0xb4>
   26358:	1805883a 	mov	r2,r3
   2635c:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
   26360:	e0bffe17 	ldw	r2,-8(fp)
   26364:	10800117 	ldw	r2,4(r2)
   26368:	1007883a 	mov	r3,r2
   2636c:	e0bffb17 	ldw	r2,-20(fp)
   26370:	1885c83a 	sub	r2,r3,r2
   26374:	e0fffa17 	ldw	r3,-24(fp)
   26378:	1880010e 	bge	r3,r2,26380 <do_barray_io+0xd8>
   2637c:	1805883a 	mov	r2,r3
   26380:	e0bffa15 	stw	r2,-24(fp)
		if (rows <= 0)		/* this chunk might be past end of file! */
   26384:	e0bffa17 	ldw	r2,-24(fp)
   26388:	0080390e 	bge	zero,r2,26470 <do_barray_io+0x1c8>
			break;
		byte_count = rows * bytesperrow;
   2638c:	e13ffa17 	ldw	r4,-24(fp)
   26390:	e17ff917 	ldw	r5,-28(fp)
   26394:	002c1540 	call	2c154 <__mulsi3>
   26398:	e0bffc15 	stw	r2,-16(fp)
		if (writing)
   2639c:	e0bfff03 	ldbu	r2,-4(fp)
   263a0:	10001326 	beq	r2,zero,263f0 <do_barray_io+0x148>
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
   263a4:	e0bffe17 	ldw	r2,-8(fp)
   263a8:	12000b17 	ldw	r8,44(r2)
   263ac:	e0bffe17 	ldw	r2,-8(fp)
   263b0:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
   263b4:	e0bffe17 	ldw	r2,-8(fp)
   263b8:	11000017 	ldw	r4,0(r2)
   263bc:	e0bff817 	ldw	r2,-32(fp)
   263c0:	1085883a 	add	r2,r2,r2
   263c4:	1085883a 	add	r2,r2,r2
   263c8:	2085883a 	add	r2,r4,r2
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
		byte_count = rows * bytesperrow;
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
   263cc:	10800017 	ldw	r2,0(r2)
   263d0:	e13ffc17 	ldw	r4,-16(fp)
   263d4:	d9000015 	stw	r4,0(sp)
   263d8:	e13ffd17 	ldw	r4,-12(fp)
   263dc:	180b883a 	mov	r5,r3
   263e0:	100d883a 	mov	r6,r2
   263e4:	e1fff717 	ldw	r7,-36(fp)
   263e8:	403ee83a 	callr	r8
   263ec:	00001206 	br	26438 <do_barray_io+0x190>
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
   263f0:	e0bffe17 	ldw	r2,-8(fp)
   263f4:	12000a17 	ldw	r8,40(r2)
   263f8:	e0bffe17 	ldw	r2,-8(fp)
   263fc:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
   26400:	e0bffe17 	ldw	r2,-8(fp)
   26404:	11000017 	ldw	r4,0(r2)
   26408:	e0bff817 	ldw	r2,-32(fp)
   2640c:	1085883a 	add	r2,r2,r2
   26410:	1085883a 	add	r2,r2,r2
   26414:	2085883a 	add	r2,r4,r2
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
   26418:	10800017 	ldw	r2,0(r2)
   2641c:	e13ffc17 	ldw	r4,-16(fp)
   26420:	d9000015 	stw	r4,0(sp)
   26424:	e13ffd17 	ldw	r4,-12(fp)
   26428:	180b883a 	mov	r5,r3
   2642c:	100d883a 	mov	r6,r2
   26430:	e1fff717 	ldw	r7,-36(fp)
   26434:	403ee83a 	callr	r8
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
   26438:	e0fff717 	ldw	r3,-36(fp)
   2643c:	e0bffc17 	ldw	r2,-16(fp)
   26440:	1885883a 	add	r2,r3,r2
   26444:	e0bff715 	stw	r2,-36(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
	file_offset = ptr->cur_start_row * bytesperrow;
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
   26448:	e0bffe17 	ldw	r2,-8(fp)
   2644c:	10c00517 	ldw	r3,20(r2)
   26450:	e0bff817 	ldw	r2,-32(fp)
   26454:	1885883a 	add	r2,r3,r2
   26458:	e0bff815 	stw	r2,-32(fp)
   2645c:	e0bffe17 	ldw	r2,-8(fp)
   26460:	10800417 	ldw	r2,16(r2)
   26464:	e0fff817 	ldw	r3,-32(fp)
   26468:	18bfa416 	blt	r3,r2,262fc <do_barray_io+0x54>
   2646c:	00000106 	br	26474 <do_barray_io+0x1cc>
		thisrow = (long) ptr->cur_start_row + i;
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
   26470:	0001883a 	nop
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
	}
}
   26474:	e037883a 	mov	sp,fp
   26478:	dfc00117 	ldw	ra,4(sp)
   2647c:	df000017 	ldw	fp,0(sp)
   26480:	dec00204 	addi	sp,sp,8
   26484:	f800283a 	ret

00026488 <access_virt_sarray>:
	JDIMENSION start_row, JDIMENSION num_rows,
	boolean writable)
	/* Access the part of a virtual sample array starting at start_row */
	/* and extending for num_rows rows.  writable is true if  */
	/* caller intends to modify the accessed area. */
{
   26488:	defff504 	addi	sp,sp,-44
   2648c:	dfc00a15 	stw	ra,40(sp)
   26490:	df000915 	stw	fp,36(sp)
   26494:	df000904 	addi	fp,sp,36
   26498:	e13ffb15 	stw	r4,-20(fp)
   2649c:	e17ffc15 	stw	r5,-16(fp)
   264a0:	e1bffd15 	stw	r6,-12(fp)
   264a4:	e1fffe15 	stw	r7,-8(fp)
   264a8:	e0800217 	ldw	r2,8(fp)
   264ac:	e0bfff05 	stb	r2,-4(fp)
	JDIMENSION end_row = start_row + num_rows;
   264b0:	e0fffd17 	ldw	r3,-12(fp)
   264b4:	e0bffe17 	ldw	r2,-8(fp)
   264b8:	1885883a 	add	r2,r3,r2
   264bc:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
   264c0:	e0bffc17 	ldw	r2,-16(fp)
   264c4:	10c00117 	ldw	r3,4(r2)
   264c8:	e0bff917 	ldw	r2,-28(fp)
   264cc:	18800736 	bltu	r3,r2,264ec <access_virt_sarray+0x64>
   264d0:	e0bffc17 	ldw	r2,-16(fp)
   264d4:	10c00317 	ldw	r3,12(r2)
   264d8:	e0bffe17 	ldw	r2,-8(fp)
   264dc:	18800336 	bltu	r3,r2,264ec <access_virt_sarray+0x64>
		ptr->mem_buffer == NULL)
   264e0:	e0bffc17 	ldw	r2,-16(fp)
   264e4:	10800017 	ldw	r2,0(r2)
{
	JDIMENSION end_row = start_row + num_rows;
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
   264e8:	1000091e 	bne	r2,zero,26510 <access_virt_sarray+0x88>
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   264ec:	e0bffb17 	ldw	r2,-20(fp)
   264f0:	10800017 	ldw	r2,0(r2)
   264f4:	00c005c4 	movi	r3,23
   264f8:	10c00515 	stw	r3,20(r2)
   264fc:	e0bffb17 	ldw	r2,-20(fp)
   26500:	10800017 	ldw	r2,0(r2)
   26504:	10800017 	ldw	r2,0(r2)
   26508:	e13ffb17 	ldw	r4,-20(fp)
   2650c:	103ee83a 	callr	r2

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
   26510:	e0bffc17 	ldw	r2,-16(fp)
   26514:	10800617 	ldw	r2,24(r2)
   26518:	e0fffd17 	ldw	r3,-12(fp)
   2651c:	18800736 	bltu	r3,r2,2653c <access_virt_sarray+0xb4>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
   26520:	e0bffc17 	ldw	r2,-16(fp)
   26524:	10c00617 	ldw	r3,24(r2)
   26528:	e0bffc17 	ldw	r2,-16(fp)
   2652c:	10800417 	ldw	r2,16(r2)
   26530:	1887883a 	add	r3,r3,r2
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
   26534:	e0bff917 	ldw	r2,-28(fp)
   26538:	18802e2e 	bgeu	r3,r2,265f4 <access_virt_sarray+0x16c>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
			if (! ptr->b_s_open)
   2653c:	e0bffc17 	ldw	r2,-16(fp)
   26540:	10800883 	ldbu	r2,34(r2)
   26544:	10803fcc 	andi	r2,r2,255
   26548:	1000091e 	bne	r2,zero,26570 <access_virt_sarray+0xe8>
				ERREXIT(cinfo, JERR_VIRTUAL_BUG);
   2654c:	e0bffb17 	ldw	r2,-20(fp)
   26550:	10800017 	ldw	r2,0(r2)
   26554:	00c011c4 	movi	r3,71
   26558:	10c00515 	stw	r3,20(r2)
   2655c:	e0bffb17 	ldw	r2,-20(fp)
   26560:	10800017 	ldw	r2,0(r2)
   26564:	10800017 	ldw	r2,0(r2)
   26568:	e13ffb17 	ldw	r4,-20(fp)
   2656c:	103ee83a 	callr	r2
			/* Flush old buffer contents if necessary */
			if (ptr->dirty) {
   26570:	e0bffc17 	ldw	r2,-16(fp)
   26574:	10800843 	ldbu	r2,33(r2)
   26578:	10803fcc 	andi	r2,r2,255
   2657c:	10000626 	beq	r2,zero,26598 <access_virt_sarray+0x110>
				do_sarray_io(cinfo, ptr, TRUE);
   26580:	e13ffb17 	ldw	r4,-20(fp)
   26584:	e17ffc17 	ldw	r5,-16(fp)
   26588:	01800044 	movi	r6,1
   2658c:	00260cc0 	call	260cc <do_sarray_io>
				ptr->dirty = FALSE;
   26590:	e0bffc17 	ldw	r2,-16(fp)
   26594:	10000845 	stb	zero,33(r2)
			* load starting at target address.  If target address < current window,
			* assume backward scan, load so that target area is top of window.
			* Note that when switching from forward write to forward read, will have
			* start_row = 0, so the limiting case applies and we load from 0 anyway.
			*/
			if (start_row > ptr->cur_start_row) {
   26598:	e0bffc17 	ldw	r2,-16(fp)
   2659c:	10c00617 	ldw	r3,24(r2)
   265a0:	e0bffd17 	ldw	r2,-12(fp)
   265a4:	1880042e 	bgeu	r3,r2,265b8 <access_virt_sarray+0x130>
				ptr->cur_start_row = start_row;
   265a8:	e0bffc17 	ldw	r2,-16(fp)
   265ac:	e0fffd17 	ldw	r3,-12(fp)
   265b0:	10c00615 	stw	r3,24(r2)
   265b4:	00000b06 	br	265e4 <access_virt_sarray+0x15c>
			} else {
				/* use long arithmetic here to avoid overflow & unsigned problems */
				long ltemp;

				ltemp = (long) end_row - (long) ptr->rows_in_mem;
   265b8:	e0fff917 	ldw	r3,-28(fp)
   265bc:	e0bffc17 	ldw	r2,-16(fp)
   265c0:	10800417 	ldw	r2,16(r2)
   265c4:	1885c83a 	sub	r2,r3,r2
   265c8:	e0bff815 	stw	r2,-32(fp)
				if (ltemp < 0)
   265cc:	e0bff817 	ldw	r2,-32(fp)
   265d0:	1000010e 	bge	r2,zero,265d8 <access_virt_sarray+0x150>
					ltemp = 0;		/* don't fall off front end of file */
   265d4:	e03ff815 	stw	zero,-32(fp)
				ptr->cur_start_row = (JDIMENSION) ltemp;
   265d8:	e0fff817 	ldw	r3,-32(fp)
   265dc:	e0bffc17 	ldw	r2,-16(fp)
   265e0:	10c00615 	stw	r3,24(r2)
			}
			/* Read in the selected part of the array.
			* During the initial write pass, we will do no actual read
			* because the selected part is all undefined.
			*/
			do_sarray_io(cinfo, ptr, FALSE);
   265e4:	e13ffb17 	ldw	r4,-20(fp)
   265e8:	e17ffc17 	ldw	r5,-16(fp)
   265ec:	000d883a 	mov	r6,zero
   265f0:	00260cc0 	call	260cc <do_sarray_io>
	}
	/* Ensure the accessed part of the array is defined; prezero if needed.
	* To improve locality of access, we only prezero the part of the array
	* that the caller is about to access, not the entire in-memory array.
	*/
	if (ptr->first_undef_row < end_row) {
   265f4:	e0bffc17 	ldw	r2,-16(fp)
   265f8:	10c00717 	ldw	r3,28(r2)
   265fc:	e0bff917 	ldw	r2,-28(fp)
   26600:	1880482e 	bgeu	r3,r2,26724 <access_virt_sarray+0x29c>
		if (ptr->first_undef_row < start_row) {
   26604:	e0bffc17 	ldw	r2,-16(fp)
   26608:	10c00717 	ldw	r3,28(r2)
   2660c:	e0bffd17 	ldw	r2,-12(fp)
   26610:	18800e2e 	bgeu	r3,r2,2664c <access_virt_sarray+0x1c4>
			if (writable)		/* writer skipped over a section of array */
   26614:	e0bfff03 	ldbu	r2,-4(fp)
   26618:	10000926 	beq	r2,zero,26640 <access_virt_sarray+0x1b8>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   2661c:	e0bffb17 	ldw	r2,-20(fp)
   26620:	10800017 	ldw	r2,0(r2)
   26624:	00c005c4 	movi	r3,23
   26628:	10c00515 	stw	r3,20(r2)
   2662c:	e0bffb17 	ldw	r2,-20(fp)
   26630:	10800017 	ldw	r2,0(r2)
   26634:	10800017 	ldw	r2,0(r2)
   26638:	e13ffb17 	ldw	r4,-20(fp)
   2663c:	103ee83a 	callr	r2
			undef_row = start_row;	/* but reader is allowed to read ahead */
   26640:	e0bffd17 	ldw	r2,-12(fp)
   26644:	e0bff715 	stw	r2,-36(fp)
   26648:	00000306 	br	26658 <access_virt_sarray+0x1d0>
		} else {
			undef_row = ptr->first_undef_row;
   2664c:	e0bffc17 	ldw	r2,-16(fp)
   26650:	10800717 	ldw	r2,28(r2)
   26654:	e0bff715 	stw	r2,-36(fp)
		}
		if (writable)
   26658:	e0bfff03 	ldbu	r2,-4(fp)
   2665c:	10000326 	beq	r2,zero,2666c <access_virt_sarray+0x1e4>
			ptr->first_undef_row = end_row;
   26660:	e0bffc17 	ldw	r2,-16(fp)
   26664:	e0fff917 	ldw	r3,-28(fp)
   26668:	10c00715 	stw	r3,28(r2)
		if (ptr->pre_zero) {
   2666c:	e0bffc17 	ldw	r2,-16(fp)
   26670:	10800803 	ldbu	r2,32(r2)
   26674:	10803fcc 	andi	r2,r2,255
   26678:	10001f26 	beq	r2,zero,266f8 <access_virt_sarray+0x270>
			size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
   2667c:	e0bffc17 	ldw	r2,-16(fp)
   26680:	10800217 	ldw	r2,8(r2)
   26684:	e0bffa15 	stw	r2,-24(fp)
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
   26688:	e0bffc17 	ldw	r2,-16(fp)
   2668c:	10800617 	ldw	r2,24(r2)
   26690:	e0fff717 	ldw	r3,-36(fp)
   26694:	1885c83a 	sub	r2,r3,r2
   26698:	e0bff715 	stw	r2,-36(fp)
			end_row -= ptr->cur_start_row;
   2669c:	e0bffc17 	ldw	r2,-16(fp)
   266a0:	10800617 	ldw	r2,24(r2)
   266a4:	e0fff917 	ldw	r3,-28(fp)
   266a8:	1885c83a 	sub	r2,r3,r2
   266ac:	e0bff915 	stw	r2,-28(fp)
			while (undef_row < end_row) {
   266b0:	00000d06 	br	266e8 <access_virt_sarray+0x260>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
   266b4:	e0bffc17 	ldw	r2,-16(fp)
   266b8:	10c00017 	ldw	r3,0(r2)
   266bc:	e0bff717 	ldw	r2,-36(fp)
   266c0:	1085883a 	add	r2,r2,r2
   266c4:	1085883a 	add	r2,r2,r2
   266c8:	1885883a 	add	r2,r3,r2
   266cc:	10800017 	ldw	r2,0(r2)
   266d0:	1009883a 	mov	r4,r2
   266d4:	e17ffa17 	ldw	r5,-24(fp)
   266d8:	002b23c0 	call	2b23c <jzero_far>
				undef_row++;
   266dc:	e0bff717 	ldw	r2,-36(fp)
   266e0:	10800044 	addi	r2,r2,1
   266e4:	e0bff715 	stw	r2,-36(fp)
			ptr->first_undef_row = end_row;
		if (ptr->pre_zero) {
			size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
			end_row -= ptr->cur_start_row;
			while (undef_row < end_row) {
   266e8:	e0fff717 	ldw	r3,-36(fp)
   266ec:	e0bff917 	ldw	r2,-28(fp)
   266f0:	18bff036 	bltu	r3,r2,266b4 <access_virt_sarray+0x22c>
   266f4:	00000b06 	br	26724 <access_virt_sarray+0x29c>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
				undef_row++;
			}
		} else {
			if (! writable)		/* reader looking at undefined data */
   266f8:	e0bfff03 	ldbu	r2,-4(fp)
   266fc:	1000091e 	bne	r2,zero,26724 <access_virt_sarray+0x29c>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   26700:	e0bffb17 	ldw	r2,-20(fp)
   26704:	10800017 	ldw	r2,0(r2)
   26708:	00c005c4 	movi	r3,23
   2670c:	10c00515 	stw	r3,20(r2)
   26710:	e0bffb17 	ldw	r2,-20(fp)
   26714:	10800017 	ldw	r2,0(r2)
   26718:	10800017 	ldw	r2,0(r2)
   2671c:	e13ffb17 	ldw	r4,-20(fp)
   26720:	103ee83a 	callr	r2
		}
	}
	/* Flag the buffer dirty if caller will write in it */
	if (writable)
   26724:	e0bfff03 	ldbu	r2,-4(fp)
   26728:	10000326 	beq	r2,zero,26738 <access_virt_sarray+0x2b0>
		ptr->dirty = TRUE;
   2672c:	e0bffc17 	ldw	r2,-16(fp)
   26730:	00c00044 	movi	r3,1
   26734:	10c00845 	stb	r3,33(r2)
	/* Return address of proper part of the buffer */
	return ptr->mem_buffer + (start_row - ptr->cur_start_row);
   26738:	e0bffc17 	ldw	r2,-16(fp)
   2673c:	10c00017 	ldw	r3,0(r2)
   26740:	e0bffc17 	ldw	r2,-16(fp)
   26744:	10800617 	ldw	r2,24(r2)
   26748:	e13ffd17 	ldw	r4,-12(fp)
   2674c:	2085c83a 	sub	r2,r4,r2
   26750:	1085883a 	add	r2,r2,r2
   26754:	1085883a 	add	r2,r2,r2
   26758:	1885883a 	add	r2,r3,r2
}
   2675c:	e037883a 	mov	sp,fp
   26760:	dfc00117 	ldw	ra,4(sp)
   26764:	df000017 	ldw	fp,0(sp)
   26768:	dec00204 	addi	sp,sp,8
   2676c:	f800283a 	ret

00026770 <access_virt_barray>:
	JDIMENSION start_row, JDIMENSION num_rows,
	boolean writable)
	/* Access the part of a virtual block array starting at start_row */
	/* and extending for num_rows rows.  writable is true if  */
	/* caller intends to modify the accessed area. */
{
   26770:	defff504 	addi	sp,sp,-44
   26774:	dfc00a15 	stw	ra,40(sp)
   26778:	df000915 	stw	fp,36(sp)
   2677c:	df000904 	addi	fp,sp,36
   26780:	e13ffb15 	stw	r4,-20(fp)
   26784:	e17ffc15 	stw	r5,-16(fp)
   26788:	e1bffd15 	stw	r6,-12(fp)
   2678c:	e1fffe15 	stw	r7,-8(fp)
   26790:	e0800217 	ldw	r2,8(fp)
   26794:	e0bfff05 	stb	r2,-4(fp)
	JDIMENSION end_row = start_row + num_rows;
   26798:	e0fffd17 	ldw	r3,-12(fp)
   2679c:	e0bffe17 	ldw	r2,-8(fp)
   267a0:	1885883a 	add	r2,r3,r2
   267a4:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
   267a8:	e0bffc17 	ldw	r2,-16(fp)
   267ac:	10c00117 	ldw	r3,4(r2)
   267b0:	e0bff917 	ldw	r2,-28(fp)
   267b4:	18800736 	bltu	r3,r2,267d4 <access_virt_barray+0x64>
   267b8:	e0bffc17 	ldw	r2,-16(fp)
   267bc:	10c00317 	ldw	r3,12(r2)
   267c0:	e0bffe17 	ldw	r2,-8(fp)
   267c4:	18800336 	bltu	r3,r2,267d4 <access_virt_barray+0x64>
		ptr->mem_buffer == NULL)
   267c8:	e0bffc17 	ldw	r2,-16(fp)
   267cc:	10800017 	ldw	r2,0(r2)
{
	JDIMENSION end_row = start_row + num_rows;
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
   267d0:	1000091e 	bne	r2,zero,267f8 <access_virt_barray+0x88>
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   267d4:	e0bffb17 	ldw	r2,-20(fp)
   267d8:	10800017 	ldw	r2,0(r2)
   267dc:	00c005c4 	movi	r3,23
   267e0:	10c00515 	stw	r3,20(r2)
   267e4:	e0bffb17 	ldw	r2,-20(fp)
   267e8:	10800017 	ldw	r2,0(r2)
   267ec:	10800017 	ldw	r2,0(r2)
   267f0:	e13ffb17 	ldw	r4,-20(fp)
   267f4:	103ee83a 	callr	r2

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
   267f8:	e0bffc17 	ldw	r2,-16(fp)
   267fc:	10800617 	ldw	r2,24(r2)
   26800:	e0fffd17 	ldw	r3,-12(fp)
   26804:	18800736 	bltu	r3,r2,26824 <access_virt_barray+0xb4>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
   26808:	e0bffc17 	ldw	r2,-16(fp)
   2680c:	10c00617 	ldw	r3,24(r2)
   26810:	e0bffc17 	ldw	r2,-16(fp)
   26814:	10800417 	ldw	r2,16(r2)
   26818:	1887883a 	add	r3,r3,r2
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
   2681c:	e0bff917 	ldw	r2,-28(fp)
   26820:	18802e2e 	bgeu	r3,r2,268dc <access_virt_barray+0x16c>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
			if (! ptr->b_s_open)
   26824:	e0bffc17 	ldw	r2,-16(fp)
   26828:	10800883 	ldbu	r2,34(r2)
   2682c:	10803fcc 	andi	r2,r2,255
   26830:	1000091e 	bne	r2,zero,26858 <access_virt_barray+0xe8>
				ERREXIT(cinfo, JERR_VIRTUAL_BUG);
   26834:	e0bffb17 	ldw	r2,-20(fp)
   26838:	10800017 	ldw	r2,0(r2)
   2683c:	00c011c4 	movi	r3,71
   26840:	10c00515 	stw	r3,20(r2)
   26844:	e0bffb17 	ldw	r2,-20(fp)
   26848:	10800017 	ldw	r2,0(r2)
   2684c:	10800017 	ldw	r2,0(r2)
   26850:	e13ffb17 	ldw	r4,-20(fp)
   26854:	103ee83a 	callr	r2
			/* Flush old buffer contents if necessary */
			if (ptr->dirty) {
   26858:	e0bffc17 	ldw	r2,-16(fp)
   2685c:	10800843 	ldbu	r2,33(r2)
   26860:	10803fcc 	andi	r2,r2,255
   26864:	10000626 	beq	r2,zero,26880 <access_virt_barray+0x110>
				do_barray_io(cinfo, ptr, TRUE);
   26868:	e13ffb17 	ldw	r4,-20(fp)
   2686c:	e17ffc17 	ldw	r5,-16(fp)
   26870:	01800044 	movi	r6,1
   26874:	00262a80 	call	262a8 <do_barray_io>
				ptr->dirty = FALSE;
   26878:	e0bffc17 	ldw	r2,-16(fp)
   2687c:	10000845 	stb	zero,33(r2)
			* load starting at target address.  If target address < current window,
			* assume backward scan, load so that target area is top of window.
			* Note that when switching from forward write to forward read, will have
			* start_row = 0, so the limiting case applies and we load from 0 anyway.
			*/
			if (start_row > ptr->cur_start_row) {
   26880:	e0bffc17 	ldw	r2,-16(fp)
   26884:	10c00617 	ldw	r3,24(r2)
   26888:	e0bffd17 	ldw	r2,-12(fp)
   2688c:	1880042e 	bgeu	r3,r2,268a0 <access_virt_barray+0x130>
				ptr->cur_start_row = start_row;
   26890:	e0bffc17 	ldw	r2,-16(fp)
   26894:	e0fffd17 	ldw	r3,-12(fp)
   26898:	10c00615 	stw	r3,24(r2)
   2689c:	00000b06 	br	268cc <access_virt_barray+0x15c>
			} else {
				/* use long arithmetic here to avoid overflow & unsigned problems */
				long ltemp;

				ltemp = (long) end_row - (long) ptr->rows_in_mem;
   268a0:	e0fff917 	ldw	r3,-28(fp)
   268a4:	e0bffc17 	ldw	r2,-16(fp)
   268a8:	10800417 	ldw	r2,16(r2)
   268ac:	1885c83a 	sub	r2,r3,r2
   268b0:	e0bff815 	stw	r2,-32(fp)
				if (ltemp < 0)
   268b4:	e0bff817 	ldw	r2,-32(fp)
   268b8:	1000010e 	bge	r2,zero,268c0 <access_virt_barray+0x150>
					ltemp = 0;		/* don't fall off front end of file */
   268bc:	e03ff815 	stw	zero,-32(fp)
				ptr->cur_start_row = (JDIMENSION) ltemp;
   268c0:	e0fff817 	ldw	r3,-32(fp)
   268c4:	e0bffc17 	ldw	r2,-16(fp)
   268c8:	10c00615 	stw	r3,24(r2)
			}
			/* Read in the selected part of the array.
			* During the initial write pass, we will do no actual read
			* because the selected part is all undefined.
			*/
			do_barray_io(cinfo, ptr, FALSE);
   268cc:	e13ffb17 	ldw	r4,-20(fp)
   268d0:	e17ffc17 	ldw	r5,-16(fp)
   268d4:	000d883a 	mov	r6,zero
   268d8:	00262a80 	call	262a8 <do_barray_io>
	}
	/* Ensure the accessed part of the array is defined; prezero if needed.
	* To improve locality of access, we only prezero the part of the array
	* that the caller is about to access, not the entire in-memory array.
	*/
	if (ptr->first_undef_row < end_row) {
   268dc:	e0bffc17 	ldw	r2,-16(fp)
   268e0:	10c00717 	ldw	r3,28(r2)
   268e4:	e0bff917 	ldw	r2,-28(fp)
   268e8:	1880492e 	bgeu	r3,r2,26a10 <access_virt_barray+0x2a0>
		if (ptr->first_undef_row < start_row) {
   268ec:	e0bffc17 	ldw	r2,-16(fp)
   268f0:	10c00717 	ldw	r3,28(r2)
   268f4:	e0bffd17 	ldw	r2,-12(fp)
   268f8:	18800e2e 	bgeu	r3,r2,26934 <access_virt_barray+0x1c4>
			if (writable)		/* writer skipped over a section of array */
   268fc:	e0bfff03 	ldbu	r2,-4(fp)
   26900:	10000926 	beq	r2,zero,26928 <access_virt_barray+0x1b8>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   26904:	e0bffb17 	ldw	r2,-20(fp)
   26908:	10800017 	ldw	r2,0(r2)
   2690c:	00c005c4 	movi	r3,23
   26910:	10c00515 	stw	r3,20(r2)
   26914:	e0bffb17 	ldw	r2,-20(fp)
   26918:	10800017 	ldw	r2,0(r2)
   2691c:	10800017 	ldw	r2,0(r2)
   26920:	e13ffb17 	ldw	r4,-20(fp)
   26924:	103ee83a 	callr	r2
			undef_row = start_row;	/* but reader is allowed to read ahead */
   26928:	e0bffd17 	ldw	r2,-12(fp)
   2692c:	e0bff715 	stw	r2,-36(fp)
   26930:	00000306 	br	26940 <access_virt_barray+0x1d0>
		} else {
			undef_row = ptr->first_undef_row;
   26934:	e0bffc17 	ldw	r2,-16(fp)
   26938:	10800717 	ldw	r2,28(r2)
   2693c:	e0bff715 	stw	r2,-36(fp)
		}
		if (writable)
   26940:	e0bfff03 	ldbu	r2,-4(fp)
   26944:	10000326 	beq	r2,zero,26954 <access_virt_barray+0x1e4>
			ptr->first_undef_row = end_row;
   26948:	e0bffc17 	ldw	r2,-16(fp)
   2694c:	e0fff917 	ldw	r3,-28(fp)
   26950:	10c00715 	stw	r3,28(r2)
		if (ptr->pre_zero) {
   26954:	e0bffc17 	ldw	r2,-16(fp)
   26958:	10800803 	ldbu	r2,32(r2)
   2695c:	10803fcc 	andi	r2,r2,255
   26960:	10002026 	beq	r2,zero,269e4 <access_virt_barray+0x274>
			size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
   26964:	e0bffc17 	ldw	r2,-16(fp)
   26968:	10800217 	ldw	r2,8(r2)
   2696c:	100491fa 	slli	r2,r2,7
   26970:	e0bffa15 	stw	r2,-24(fp)
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
   26974:	e0bffc17 	ldw	r2,-16(fp)
   26978:	10800617 	ldw	r2,24(r2)
   2697c:	e0fff717 	ldw	r3,-36(fp)
   26980:	1885c83a 	sub	r2,r3,r2
   26984:	e0bff715 	stw	r2,-36(fp)
			end_row -= ptr->cur_start_row;
   26988:	e0bffc17 	ldw	r2,-16(fp)
   2698c:	10800617 	ldw	r2,24(r2)
   26990:	e0fff917 	ldw	r3,-28(fp)
   26994:	1885c83a 	sub	r2,r3,r2
   26998:	e0bff915 	stw	r2,-28(fp)
			while (undef_row < end_row) {
   2699c:	00000d06 	br	269d4 <access_virt_barray+0x264>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
   269a0:	e0bffc17 	ldw	r2,-16(fp)
   269a4:	10c00017 	ldw	r3,0(r2)
   269a8:	e0bff717 	ldw	r2,-36(fp)
   269ac:	1085883a 	add	r2,r2,r2
   269b0:	1085883a 	add	r2,r2,r2
   269b4:	1885883a 	add	r2,r3,r2
   269b8:	10800017 	ldw	r2,0(r2)
   269bc:	1009883a 	mov	r4,r2
   269c0:	e17ffa17 	ldw	r5,-24(fp)
   269c4:	002b23c0 	call	2b23c <jzero_far>
				undef_row++;
   269c8:	e0bff717 	ldw	r2,-36(fp)
   269cc:	10800044 	addi	r2,r2,1
   269d0:	e0bff715 	stw	r2,-36(fp)
			ptr->first_undef_row = end_row;
		if (ptr->pre_zero) {
			size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
			end_row -= ptr->cur_start_row;
			while (undef_row < end_row) {
   269d4:	e0fff717 	ldw	r3,-36(fp)
   269d8:	e0bff917 	ldw	r2,-28(fp)
   269dc:	18bff036 	bltu	r3,r2,269a0 <access_virt_barray+0x230>
   269e0:	00000b06 	br	26a10 <access_virt_barray+0x2a0>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
				undef_row++;
			}
		} else {
			if (! writable)		/* reader looking at undefined data */
   269e4:	e0bfff03 	ldbu	r2,-4(fp)
   269e8:	1000091e 	bne	r2,zero,26a10 <access_virt_barray+0x2a0>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
   269ec:	e0bffb17 	ldw	r2,-20(fp)
   269f0:	10800017 	ldw	r2,0(r2)
   269f4:	00c005c4 	movi	r3,23
   269f8:	10c00515 	stw	r3,20(r2)
   269fc:	e0bffb17 	ldw	r2,-20(fp)
   26a00:	10800017 	ldw	r2,0(r2)
   26a04:	10800017 	ldw	r2,0(r2)
   26a08:	e13ffb17 	ldw	r4,-20(fp)
   26a0c:	103ee83a 	callr	r2
		}
	}
	/* Flag the buffer dirty if caller will write in it */
	if (writable)
   26a10:	e0bfff03 	ldbu	r2,-4(fp)
   26a14:	10000326 	beq	r2,zero,26a24 <access_virt_barray+0x2b4>
		ptr->dirty = TRUE;
   26a18:	e0bffc17 	ldw	r2,-16(fp)
   26a1c:	00c00044 	movi	r3,1
   26a20:	10c00845 	stb	r3,33(r2)
	/* Return address of proper part of the buffer */
	return ptr->mem_buffer + (start_row - ptr->cur_start_row);
   26a24:	e0bffc17 	ldw	r2,-16(fp)
   26a28:	10c00017 	ldw	r3,0(r2)
   26a2c:	e0bffc17 	ldw	r2,-16(fp)
   26a30:	10800617 	ldw	r2,24(r2)
   26a34:	e13ffd17 	ldw	r4,-12(fp)
   26a38:	2085c83a 	sub	r2,r4,r2
   26a3c:	1085883a 	add	r2,r2,r2
   26a40:	1085883a 	add	r2,r2,r2
   26a44:	1885883a 	add	r2,r3,r2
}
   26a48:	e037883a 	mov	sp,fp
   26a4c:	dfc00117 	ldw	ra,4(sp)
   26a50:	df000017 	ldw	fp,0(sp)
   26a54:	dec00204 	addi	sp,sp,8
   26a58:	f800283a 	ret

00026a5c <free_pool>:
* Release all objects belonging to a specified pool.
*/

METHODDEF(void)
	free_pool (j_common_ptr cinfo, int pool_id)
{
   26a5c:	defff404 	addi	sp,sp,-48
   26a60:	dfc00b15 	stw	ra,44(sp)
   26a64:	df000a15 	stw	fp,40(sp)
   26a68:	df000a04 	addi	fp,sp,40
   26a6c:	e13ffe15 	stw	r4,-8(fp)
   26a70:	e17fff15 	stw	r5,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
   26a74:	e0bffe17 	ldw	r2,-8(fp)
   26a78:	10800117 	ldw	r2,4(r2)
   26a7c:	e0bffa15 	stw	r2,-24(fp)
	small_pool_ptr shdr_ptr;
	large_pool_ptr lhdr_ptr;
	size_t space_freed;

	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
   26a80:	e0bfff17 	ldw	r2,-4(fp)
   26a84:	10000316 	blt	r2,zero,26a94 <free_pool+0x38>
   26a88:	e0bfff17 	ldw	r2,-4(fp)
   26a8c:	10800090 	cmplti	r2,r2,2
   26a90:	10000d1e 	bne	r2,zero,26ac8 <free_pool+0x6c>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
   26a94:	e0bffe17 	ldw	r2,-8(fp)
   26a98:	10800017 	ldw	r2,0(r2)
   26a9c:	00c003c4 	movi	r3,15
   26aa0:	10c00515 	stw	r3,20(r2)
   26aa4:	e0bffe17 	ldw	r2,-8(fp)
   26aa8:	10800017 	ldw	r2,0(r2)
   26aac:	e0ffff17 	ldw	r3,-4(fp)
   26ab0:	10c00615 	stw	r3,24(r2)
   26ab4:	e0bffe17 	ldw	r2,-8(fp)
   26ab8:	10800017 	ldw	r2,0(r2)
   26abc:	10800017 	ldw	r2,0(r2)
   26ac0:	e13ffe17 	ldw	r4,-8(fp)
   26ac4:	103ee83a 	callr	r2
	if (cinfo->err->trace_level > 1)
		print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

	/* If freeing IMAGE pool, close any virtual arrays first */
	if (pool_id == JPOOL_IMAGE) {
   26ac8:	e0bfff17 	ldw	r2,-4(fp)
   26acc:	10800058 	cmpnei	r2,r2,1
   26ad0:	1000301e 	bne	r2,zero,26b94 <free_pool+0x138>
		jvirt_sarray_ptr sptr;
		jvirt_barray_ptr bptr;

		for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   26ad4:	e0bffa17 	ldw	r2,-24(fp)
   26ad8:	10801117 	ldw	r2,68(r2)
   26adc:	e0bff815 	stw	r2,-32(fp)
   26ae0:	00001006 	br	26b24 <free_pool+0xc8>
			if (sptr->b_s_open) {	/* there may be no backing store */
   26ae4:	e0bff817 	ldw	r2,-32(fp)
   26ae8:	10800883 	ldbu	r2,34(r2)
   26aec:	10803fcc 	andi	r2,r2,255
   26af0:	10000926 	beq	r2,zero,26b18 <free_pool+0xbc>
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
   26af4:	e0bff817 	ldw	r2,-32(fp)
   26af8:	10000885 	stb	zero,34(r2)
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
   26afc:	e0bff817 	ldw	r2,-32(fp)
   26b00:	10c00c17 	ldw	r3,48(r2)
   26b04:	e0bff817 	ldw	r2,-32(fp)
   26b08:	10800a04 	addi	r2,r2,40
   26b0c:	e13ffe17 	ldw	r4,-8(fp)
   26b10:	100b883a 	mov	r5,r2
   26b14:	183ee83a 	callr	r3
	/* If freeing IMAGE pool, close any virtual arrays first */
	if (pool_id == JPOOL_IMAGE) {
		jvirt_sarray_ptr sptr;
		jvirt_barray_ptr bptr;

		for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
   26b18:	e0bff817 	ldw	r2,-32(fp)
   26b1c:	10800917 	ldw	r2,36(r2)
   26b20:	e0bff815 	stw	r2,-32(fp)
   26b24:	e0bff817 	ldw	r2,-32(fp)
   26b28:	103fee1e 	bne	r2,zero,26ae4 <free_pool+0x88>
			if (sptr->b_s_open) {	/* there may be no backing store */
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
			}
		}
		mem->virt_sarray_list = NULL;
   26b2c:	e0bffa17 	ldw	r2,-24(fp)
   26b30:	10001115 	stw	zero,68(r2)
		for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   26b34:	e0bffa17 	ldw	r2,-24(fp)
   26b38:	10801217 	ldw	r2,72(r2)
   26b3c:	e0bff915 	stw	r2,-28(fp)
   26b40:	00001006 	br	26b84 <free_pool+0x128>
			if (bptr->b_s_open) {	/* there may be no backing store */
   26b44:	e0bff917 	ldw	r2,-28(fp)
   26b48:	10800883 	ldbu	r2,34(r2)
   26b4c:	10803fcc 	andi	r2,r2,255
   26b50:	10000926 	beq	r2,zero,26b78 <free_pool+0x11c>
				bptr->b_s_open = FALSE;	/* prevent recursive close if error */
   26b54:	e0bff917 	ldw	r2,-28(fp)
   26b58:	10000885 	stb	zero,34(r2)
				(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
   26b5c:	e0bff917 	ldw	r2,-28(fp)
   26b60:	10c00c17 	ldw	r3,48(r2)
   26b64:	e0bff917 	ldw	r2,-28(fp)
   26b68:	10800a04 	addi	r2,r2,40
   26b6c:	e13ffe17 	ldw	r4,-8(fp)
   26b70:	100b883a 	mov	r5,r2
   26b74:	183ee83a 	callr	r3
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
			}
		}
		mem->virt_sarray_list = NULL;
		for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
   26b78:	e0bff917 	ldw	r2,-28(fp)
   26b7c:	10800917 	ldw	r2,36(r2)
   26b80:	e0bff915 	stw	r2,-28(fp)
   26b84:	e0bff917 	ldw	r2,-28(fp)
   26b88:	103fee1e 	bne	r2,zero,26b44 <free_pool+0xe8>
			if (bptr->b_s_open) {	/* there may be no backing store */
				bptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
			}
		}
		mem->virt_barray_list = NULL;
   26b8c:	e0bffa17 	ldw	r2,-24(fp)
   26b90:	10001215 	stw	zero,72(r2)
	}

	/* Release large objects */
	lhdr_ptr = mem->large_list[pool_id];
   26b94:	e0fffa17 	ldw	r3,-24(fp)
   26b98:	e0bfff17 	ldw	r2,-4(fp)
   26b9c:	108003c4 	addi	r2,r2,15
   26ba0:	1085883a 	add	r2,r2,r2
   26ba4:	1085883a 	add	r2,r2,r2
   26ba8:	1885883a 	add	r2,r3,r2
   26bac:	10800017 	ldw	r2,0(r2)
   26bb0:	e0bff715 	stw	r2,-36(fp)
	mem->large_list[pool_id] = NULL;
   26bb4:	e0fffa17 	ldw	r3,-24(fp)
   26bb8:	e0bfff17 	ldw	r2,-4(fp)
   26bbc:	108003c4 	addi	r2,r2,15
   26bc0:	1085883a 	add	r2,r2,r2
   26bc4:	1085883a 	add	r2,r2,r2
   26bc8:	1885883a 	add	r2,r3,r2
   26bcc:	10000015 	stw	zero,0(r2)

	while (lhdr_ptr != NULL) {
   26bd0:	00001806 	br	26c34 <free_pool+0x1d8>
		large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
   26bd4:	e0bff717 	ldw	r2,-36(fp)
   26bd8:	10800017 	ldw	r2,0(r2)
   26bdc:	e0bffb15 	stw	r2,-20(fp)
		space_freed = lhdr_ptr->hdr.bytes_used +
   26be0:	e0bff717 	ldw	r2,-36(fp)
   26be4:	10c00117 	ldw	r3,4(r2)
			lhdr_ptr->hdr.bytes_left +
   26be8:	e0bff717 	ldw	r2,-36(fp)
   26bec:	10800217 	ldw	r2,8(r2)
	lhdr_ptr = mem->large_list[pool_id];
	mem->large_list[pool_id] = NULL;

	while (lhdr_ptr != NULL) {
		large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
		space_freed = lhdr_ptr->hdr.bytes_used +
   26bf0:	1885883a 	add	r2,r3,r2
   26bf4:	10800304 	addi	r2,r2,12
   26bf8:	e0bffc15 	stw	r2,-16(fp)
			lhdr_ptr->hdr.bytes_left +
			SIZEOF(large_pool_hdr);
		jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
   26bfc:	e13ffe17 	ldw	r4,-8(fp)
   26c00:	e17ff717 	ldw	r5,-36(fp)
   26c04:	e1bffc17 	ldw	r6,-16(fp)
   26c08:	0024fb00 	call	24fb0 <jpeg_free_large>
		mem->total_space_allocated -= space_freed;
   26c0c:	e0bffa17 	ldw	r2,-24(fp)
   26c10:	10801317 	ldw	r2,76(r2)
   26c14:	1007883a 	mov	r3,r2
   26c18:	e0bffc17 	ldw	r2,-16(fp)
   26c1c:	1885c83a 	sub	r2,r3,r2
   26c20:	1007883a 	mov	r3,r2
   26c24:	e0bffa17 	ldw	r2,-24(fp)
   26c28:	10c01315 	stw	r3,76(r2)
		lhdr_ptr = next_lhdr_ptr;
   26c2c:	e0bffb17 	ldw	r2,-20(fp)
   26c30:	e0bff715 	stw	r2,-36(fp)

	/* Release large objects */
	lhdr_ptr = mem->large_list[pool_id];
	mem->large_list[pool_id] = NULL;

	while (lhdr_ptr != NULL) {
   26c34:	e0bff717 	ldw	r2,-36(fp)
   26c38:	103fe61e 	bne	r2,zero,26bd4 <free_pool+0x178>
		mem->total_space_allocated -= space_freed;
		lhdr_ptr = next_lhdr_ptr;
	}

	/* Release small objects */
	shdr_ptr = mem->small_list[pool_id];
   26c3c:	e0fffa17 	ldw	r3,-24(fp)
   26c40:	e0bfff17 	ldw	r2,-4(fp)
   26c44:	10800344 	addi	r2,r2,13
   26c48:	1085883a 	add	r2,r2,r2
   26c4c:	1085883a 	add	r2,r2,r2
   26c50:	1885883a 	add	r2,r3,r2
   26c54:	10800017 	ldw	r2,0(r2)
   26c58:	e0bff615 	stw	r2,-40(fp)
	mem->small_list[pool_id] = NULL;
   26c5c:	e0fffa17 	ldw	r3,-24(fp)
   26c60:	e0bfff17 	ldw	r2,-4(fp)
   26c64:	10800344 	addi	r2,r2,13
   26c68:	1085883a 	add	r2,r2,r2
   26c6c:	1085883a 	add	r2,r2,r2
   26c70:	1885883a 	add	r2,r3,r2
   26c74:	10000015 	stw	zero,0(r2)

	while (shdr_ptr != NULL) {
   26c78:	00001806 	br	26cdc <free_pool+0x280>
		small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
   26c7c:	e0bff617 	ldw	r2,-40(fp)
   26c80:	10800017 	ldw	r2,0(r2)
   26c84:	e0bffd15 	stw	r2,-12(fp)
		space_freed = shdr_ptr->hdr.bytes_used +
   26c88:	e0bff617 	ldw	r2,-40(fp)
   26c8c:	10c00117 	ldw	r3,4(r2)
			shdr_ptr->hdr.bytes_left +
   26c90:	e0bff617 	ldw	r2,-40(fp)
   26c94:	10800217 	ldw	r2,8(r2)
	shdr_ptr = mem->small_list[pool_id];
	mem->small_list[pool_id] = NULL;

	while (shdr_ptr != NULL) {
		small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
		space_freed = shdr_ptr->hdr.bytes_used +
   26c98:	1885883a 	add	r2,r3,r2
   26c9c:	10800304 	addi	r2,r2,12
   26ca0:	e0bffc15 	stw	r2,-16(fp)
			shdr_ptr->hdr.bytes_left +
			SIZEOF(small_pool_hdr);
		jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
   26ca4:	e13ffe17 	ldw	r4,-8(fp)
   26ca8:	e17ff617 	ldw	r5,-40(fp)
   26cac:	e1bffc17 	ldw	r6,-16(fp)
   26cb0:	0024f440 	call	24f44 <jpeg_free_small>
		mem->total_space_allocated -= space_freed;
   26cb4:	e0bffa17 	ldw	r2,-24(fp)
   26cb8:	10801317 	ldw	r2,76(r2)
   26cbc:	1007883a 	mov	r3,r2
   26cc0:	e0bffc17 	ldw	r2,-16(fp)
   26cc4:	1885c83a 	sub	r2,r3,r2
   26cc8:	1007883a 	mov	r3,r2
   26ccc:	e0bffa17 	ldw	r2,-24(fp)
   26cd0:	10c01315 	stw	r3,76(r2)
		shdr_ptr = next_shdr_ptr;
   26cd4:	e0bffd17 	ldw	r2,-12(fp)
   26cd8:	e0bff615 	stw	r2,-40(fp)

	/* Release small objects */
	shdr_ptr = mem->small_list[pool_id];
	mem->small_list[pool_id] = NULL;

	while (shdr_ptr != NULL) {
   26cdc:	e0bff617 	ldw	r2,-40(fp)
   26ce0:	103fe61e 	bne	r2,zero,26c7c <free_pool+0x220>
			SIZEOF(small_pool_hdr);
		jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
		mem->total_space_allocated -= space_freed;
		shdr_ptr = next_shdr_ptr;
	}
}
   26ce4:	e037883a 	mov	sp,fp
   26ce8:	dfc00117 	ldw	ra,4(sp)
   26cec:	df000017 	ldw	fp,0(sp)
   26cf0:	dec00204 	addi	sp,sp,8
   26cf4:	f800283a 	ret

00026cf8 <self_destruct>:
* Note that this cannot be called unless cinfo->mem is non-NULL.
*/

METHODDEF(void)
	self_destruct (j_common_ptr cinfo)
{
   26cf8:	defffc04 	addi	sp,sp,-16
   26cfc:	dfc00315 	stw	ra,12(sp)
   26d00:	df000215 	stw	fp,8(sp)
   26d04:	df000204 	addi	fp,sp,8
   26d08:	e13fff15 	stw	r4,-4(fp)

	/* Close all backing store, release all memory.
	* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
   26d0c:	00800044 	movi	r2,1
   26d10:	e0bffe15 	stw	r2,-8(fp)
   26d14:	00000606 	br	26d30 <self_destruct+0x38>
		free_pool(cinfo, pool);
   26d18:	e13fff17 	ldw	r4,-4(fp)
   26d1c:	e17ffe17 	ldw	r5,-8(fp)
   26d20:	0026a5c0 	call	26a5c <free_pool>

	/* Close all backing store, release all memory.
	* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
   26d24:	e0bffe17 	ldw	r2,-8(fp)
   26d28:	10bfffc4 	addi	r2,r2,-1
   26d2c:	e0bffe15 	stw	r2,-8(fp)
   26d30:	e0bffe17 	ldw	r2,-8(fp)
   26d34:	103ff80e 	bge	r2,zero,26d18 <self_destruct+0x20>
		free_pool(cinfo, pool);
	}

	/* Release the memory manager control block too. */
	jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
   26d38:	e0bfff17 	ldw	r2,-4(fp)
   26d3c:	10800117 	ldw	r2,4(r2)
   26d40:	e13fff17 	ldw	r4,-4(fp)
   26d44:	100b883a 	mov	r5,r2
   26d48:	01801504 	movi	r6,84
   26d4c:	0024f440 	call	24f44 <jpeg_free_small>
	cinfo->mem = NULL;		/* ensures I will be called only once */
   26d50:	e0bfff17 	ldw	r2,-4(fp)
   26d54:	10000115 	stw	zero,4(r2)

	jpeg_mem_term(cinfo);		/* system-dependent cleanup */
   26d58:	e13fff17 	ldw	r4,-4(fp)
   26d5c:	00252c80 	call	252c8 <jpeg_mem_term>
}
   26d60:	e037883a 	mov	sp,fp
   26d64:	dfc00117 	ldw	ra,4(sp)
   26d68:	df000017 	ldw	fp,0(sp)
   26d6c:	dec00204 	addi	sp,sp,8
   26d70:	f800283a 	ret

00026d74 <jinit_memory_mgr>:
* When this is called, only the error manager pointer is valid in cinfo!
*/

GLOBAL(void)
	jinit_memory_mgr (j_common_ptr cinfo)
{
   26d74:	defff704 	addi	sp,sp,-36
   26d78:	dfc00815 	stw	ra,32(sp)
   26d7c:	df000715 	stw	fp,28(sp)
   26d80:	df000704 	addi	fp,sp,28
   26d84:	e13fff15 	stw	r4,-4(fp)
	my_mem_ptr mem;
	long max_to_use;
	int pool;
	size_t test_mac;

	cinfo->mem = NULL;		/* for safety if init fails */
   26d88:	e0bfff17 	ldw	r2,-4(fp)
   26d8c:	10000115 	stw	zero,4(r2)
	/* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
	* a multiple of SIZEOF(ALIGN_TYPE).
	* Again, an "unreachable code" warning may be ignored here.
	* But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
	*/
	test_mac = (size_t) MAX_ALLOC_CHUNK;
   26d90:	008ee6f4 	movhi	r2,15259
   26d94:	10b28004 	addi	r2,r2,-13824
   26d98:	e0bffa15 	stw	r2,-24(fp)
	if ((long) test_mac != MAX_ALLOC_CHUNK ||
   26d9c:	e0fffa17 	ldw	r3,-24(fp)
   26da0:	008ee6f4 	movhi	r2,15259
   26da4:	10b28004 	addi	r2,r2,-13824
   26da8:	18800926 	beq	r3,r2,26dd0 <jinit_memory_mgr+0x5c>
		(MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
		ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
   26dac:	e0bfff17 	ldw	r2,-4(fp)
   26db0:	10800017 	ldw	r2,0(r2)
   26db4:	00c00084 	movi	r3,2
   26db8:	10c00515 	stw	r3,20(r2)
   26dbc:	e0bfff17 	ldw	r2,-4(fp)
   26dc0:	10800017 	ldw	r2,0(r2)
   26dc4:	10800017 	ldw	r2,0(r2)
   26dc8:	e13fff17 	ldw	r4,-4(fp)
   26dcc:	103ee83a 	callr	r2

	max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
   26dd0:	e13fff17 	ldw	r4,-4(fp)
   26dd4:	00252a00 	call	252a0 <jpeg_mem_init>
   26dd8:	e0bffd15 	stw	r2,-12(fp)

	/* Attempt to allocate memory manager's control block */
	mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
   26ddc:	e13fff17 	ldw	r4,-4(fp)
   26de0:	01401504 	movi	r5,84
   26de4:	0024f100 	call	24f10 <jpeg_get_small>
   26de8:	e0bffb15 	stw	r2,-20(fp)

	if (mem == NULL) {
   26dec:	e0bffb17 	ldw	r2,-20(fp)
   26df0:	10000e1e 	bne	r2,zero,26e2c <jinit_memory_mgr+0xb8>
		jpeg_mem_term(cinfo);	/* system-dependent cleanup */
   26df4:	e13fff17 	ldw	r4,-4(fp)
   26df8:	00252c80 	call	252c8 <jpeg_mem_term>
		ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
   26dfc:	e0bfff17 	ldw	r2,-4(fp)
   26e00:	10800017 	ldw	r2,0(r2)
   26e04:	00c00e04 	movi	r3,56
   26e08:	10c00515 	stw	r3,20(r2)
   26e0c:	e0bfff17 	ldw	r2,-4(fp)
   26e10:	10800017 	ldw	r2,0(r2)
   26e14:	10000615 	stw	zero,24(r2)
   26e18:	e0bfff17 	ldw	r2,-4(fp)
   26e1c:	10800017 	ldw	r2,0(r2)
   26e20:	10800017 	ldw	r2,0(r2)
   26e24:	e13fff17 	ldw	r4,-4(fp)
   26e28:	103ee83a 	callr	r2
	}

	/* OK, fill in the method pointers */
	mem->pub.alloc_small = alloc_small;
   26e2c:	e0bffb17 	ldw	r2,-20(fp)
   26e30:	00c000b4 	movhi	r3,2
   26e34:	18d4d204 	addi	r3,r3,21320
   26e38:	10c00015 	stw	r3,0(r2)
	mem->pub.alloc_large = alloc_large;
   26e3c:	e0bffb17 	ldw	r2,-20(fp)
   26e40:	00c000b4 	movhi	r3,2
   26e44:	18d58804 	addi	r3,r3,22048
   26e48:	10c00115 	stw	r3,4(r2)
	mem->pub.alloc_sarray = alloc_sarray;
   26e4c:	e0bffb17 	ldw	r2,-20(fp)
   26e50:	00c000b4 	movhi	r3,2
   26e54:	18d5e604 	addi	r3,r3,22424
   26e58:	10c00215 	stw	r3,8(r2)
	mem->pub.alloc_barray = alloc_barray;
   26e5c:	e0bffb17 	ldw	r2,-20(fp)
   26e60:	00c000b4 	movhi	r3,2
   26e64:	18d64404 	addi	r3,r3,22800
   26e68:	10c00315 	stw	r3,12(r2)
	mem->pub.request_virt_sarray = request_virt_sarray;
   26e6c:	e0bffb17 	ldw	r2,-20(fp)
   26e70:	00c000b4 	movhi	r3,2
   26e74:	18d6a604 	addi	r3,r3,23192
   26e78:	10c00415 	stw	r3,16(r2)
	mem->pub.request_virt_barray = request_virt_barray;
   26e7c:	e0bffb17 	ldw	r2,-20(fp)
   26e80:	00c000b4 	movhi	r3,2
   26e84:	18d6e404 	addi	r3,r3,23440
   26e88:	10c00515 	stw	r3,20(r2)
	mem->pub.realize_virt_arrays = realize_virt_arrays;
   26e8c:	e0bffb17 	ldw	r2,-20(fp)
   26e90:	00c000b4 	movhi	r3,2
   26e94:	18d72204 	addi	r3,r3,23688
   26e98:	10c00615 	stw	r3,24(r2)
	mem->pub.access_virt_sarray = access_virt_sarray;
   26e9c:	e0bffb17 	ldw	r2,-20(fp)
   26ea0:	00c000b4 	movhi	r3,2
   26ea4:	18d92204 	addi	r3,r3,25736
   26ea8:	10c00715 	stw	r3,28(r2)
	mem->pub.access_virt_barray = access_virt_barray;
   26eac:	e0bffb17 	ldw	r2,-20(fp)
   26eb0:	00c000b4 	movhi	r3,2
   26eb4:	18d9dc04 	addi	r3,r3,26480
   26eb8:	10c00815 	stw	r3,32(r2)
	mem->pub.free_pool = free_pool;
   26ebc:	e0bffb17 	ldw	r2,-20(fp)
   26ec0:	00c000b4 	movhi	r3,2
   26ec4:	18da9704 	addi	r3,r3,27228
   26ec8:	10c00915 	stw	r3,36(r2)
	mem->pub.self_destruct = self_destruct;
   26ecc:	e0bffb17 	ldw	r2,-20(fp)
   26ed0:	00c000b4 	movhi	r3,2
   26ed4:	18db3e04 	addi	r3,r3,27896
   26ed8:	10c00a15 	stw	r3,40(r2)

	/* Make MAX_ALLOC_CHUNK accessible to other modules */
	mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
   26edc:	e0bffb17 	ldw	r2,-20(fp)
   26ee0:	00cee6f4 	movhi	r3,15259
   26ee4:	18f28004 	addi	r3,r3,-13824
   26ee8:	10c00c15 	stw	r3,48(r2)

	/* Initialize working state */
	mem->pub.max_memory_to_use = max_to_use;
   26eec:	e0fffd17 	ldw	r3,-12(fp)
   26ef0:	e0bffb17 	ldw	r2,-20(fp)
   26ef4:	10c00b15 	stw	r3,44(r2)

	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
   26ef8:	00800044 	movi	r2,1
   26efc:	e0bff915 	stw	r2,-28(fp)
   26f00:	00001106 	br	26f48 <jinit_memory_mgr+0x1d4>
		mem->small_list[pool] = NULL;
   26f04:	e0fffb17 	ldw	r3,-20(fp)
   26f08:	e0bff917 	ldw	r2,-28(fp)
   26f0c:	10800344 	addi	r2,r2,13
   26f10:	1085883a 	add	r2,r2,r2
   26f14:	1085883a 	add	r2,r2,r2
   26f18:	1885883a 	add	r2,r3,r2
   26f1c:	10000015 	stw	zero,0(r2)
		mem->large_list[pool] = NULL;
   26f20:	e0fffb17 	ldw	r3,-20(fp)
   26f24:	e0bff917 	ldw	r2,-28(fp)
   26f28:	108003c4 	addi	r2,r2,15
   26f2c:	1085883a 	add	r2,r2,r2
   26f30:	1085883a 	add	r2,r2,r2
   26f34:	1885883a 	add	r2,r3,r2
   26f38:	10000015 	stw	zero,0(r2)
	mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;

	/* Initialize working state */
	mem->pub.max_memory_to_use = max_to_use;

	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
   26f3c:	e0bff917 	ldw	r2,-28(fp)
   26f40:	10bfffc4 	addi	r2,r2,-1
   26f44:	e0bff915 	stw	r2,-28(fp)
   26f48:	e0bff917 	ldw	r2,-28(fp)
   26f4c:	103fed0e 	bge	r2,zero,26f04 <jinit_memory_mgr+0x190>
		mem->small_list[pool] = NULL;
		mem->large_list[pool] = NULL;
	}
	mem->virt_sarray_list = NULL;
   26f50:	e0bffb17 	ldw	r2,-20(fp)
   26f54:	10001115 	stw	zero,68(r2)
	mem->virt_barray_list = NULL;
   26f58:	e0bffb17 	ldw	r2,-20(fp)
   26f5c:	10001215 	stw	zero,72(r2)

	mem->total_space_allocated = SIZEOF(my_memory_mgr);
   26f60:	e0bffb17 	ldw	r2,-20(fp)
   26f64:	00c01504 	movi	r3,84
   26f68:	10c01315 	stw	r3,76(r2)

	/* Declare ourselves open for business */
	cinfo->mem = & mem->pub;
   26f6c:	e0fffb17 	ldw	r3,-20(fp)
   26f70:	e0bfff17 	ldw	r2,-4(fp)
   26f74:	10c00115 	stw	r3,4(r2)
	* this feature.
	*/
#ifndef NO_GETENV
	{ char * memenv;

	if ((memenv = getenv("JPEGMEM")) != NULL) {
   26f78:	01000134 	movhi	r4,4
   26f7c:	2101ea04 	addi	r4,r4,1960
   26f80:	002e0440 	call	2e044 <getenv>
   26f84:	e0bffc15 	stw	r2,-16(fp)
   26f88:	e0bffc17 	ldw	r2,-16(fp)
   26f8c:	10002326 	beq	r2,zero,2701c <jinit_memory_mgr+0x2a8>
		char ch = 'x';
   26f90:	00801e04 	movi	r2,120
   26f94:	e0bffe05 	stb	r2,-8(fp)

		if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
   26f98:	e0fffd04 	addi	r3,fp,-12
   26f9c:	e0bffe04 	addi	r2,fp,-8
   26fa0:	e13ffc17 	ldw	r4,-16(fp)
   26fa4:	01400134 	movhi	r5,4
   26fa8:	2941ec04 	addi	r5,r5,1968
   26fac:	180d883a 	mov	r6,r3
   26fb0:	100f883a 	mov	r7,r2
   26fb4:	002f2640 	call	2f264 <sscanf>
   26fb8:	0080180e 	bge	zero,r2,2701c <jinit_memory_mgr+0x2a8>
			if (ch == 'm' || ch == 'M')
   26fbc:	e0bffe03 	ldbu	r2,-8(fp)
   26fc0:	10803fcc 	andi	r2,r2,255
   26fc4:	1080201c 	xori	r2,r2,128
   26fc8:	10bfe004 	addi	r2,r2,-128
   26fcc:	10801b60 	cmpeqi	r2,r2,109
   26fd0:	1000061e 	bne	r2,zero,26fec <jinit_memory_mgr+0x278>
   26fd4:	e0bffe03 	ldbu	r2,-8(fp)
   26fd8:	10803fcc 	andi	r2,r2,255
   26fdc:	1080201c 	xori	r2,r2,128
   26fe0:	10bfe004 	addi	r2,r2,-128
   26fe4:	10801358 	cmpnei	r2,r2,77
   26fe8:	1000051e 	bne	r2,zero,27000 <jinit_memory_mgr+0x28c>
				max_to_use *= 1000L;
   26fec:	e0bffd17 	ldw	r2,-12(fp)
   26ff0:	1009883a 	mov	r4,r2
   26ff4:	0140fa04 	movi	r5,1000
   26ff8:	002c1540 	call	2c154 <__mulsi3>
   26ffc:	e0bffd15 	stw	r2,-12(fp)
			mem->pub.max_memory_to_use = max_to_use * 1000L;
   27000:	e0bffd17 	ldw	r2,-12(fp)
   27004:	1009883a 	mov	r4,r2
   27008:	0140fa04 	movi	r5,1000
   2700c:	002c1540 	call	2c154 <__mulsi3>
   27010:	1007883a 	mov	r3,r2
   27014:	e0bffb17 	ldw	r2,-20(fp)
   27018:	10c00b15 	stw	r3,44(r2)
		}
	}
	}
#endif

}
   2701c:	e037883a 	mov	sp,fp
   27020:	dfc00117 	ldw	ra,4(sp)
   27024:	df000017 	ldw	fp,0(sp)
   27028:	dec00204 	addi	sp,sp,8
   2702c:	f800283a 	ret

00027030 <select_ncolors>:
LOCAL(int)
	select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
	/* Determine allocation of desired colors to components, */
	/* and fill in Ncolors[] array to indicate choice. */
	/* Return value is total number of colors (product of Ncolors[] values). */
{
   27030:	defff404 	addi	sp,sp,-48
   27034:	dfc00b15 	stw	ra,44(sp)
   27038:	df000a15 	stw	fp,40(sp)
   2703c:	df000a04 	addi	fp,sp,40
   27040:	e13ffe15 	stw	r4,-8(fp)
   27044:	e17fff15 	stw	r5,-4(fp)
	int nc = cinfo->out_color_components; /* number of color components */
   27048:	e0bffe17 	ldw	r2,-8(fp)
   2704c:	10801917 	ldw	r2,100(r2)
   27050:	e0bffb15 	stw	r2,-20(fp)
	int max_colors = cinfo->desired_number_of_colors;
   27054:	e0bffe17 	ldw	r2,-8(fp)
   27058:	10801517 	ldw	r2,84(r2)
   2705c:	e0bffc15 	stw	r2,-16(fp)
	long temp;
	static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

	/* We can allocate at least the nc'th root of max_colors per component. */
	/* Compute floor(nc'th root of max_colors). */
	iroot = 1;
   27060:	00800044 	movi	r2,1
   27064:	e0bff715 	stw	r2,-36(fp)
	do {
		iroot++;
   27068:	e0bff717 	ldw	r2,-36(fp)
   2706c:	10800044 	addi	r2,r2,1
   27070:	e0bff715 	stw	r2,-36(fp)
		temp = iroot;		/* set temp = iroot ** nc */
   27074:	e0bff717 	ldw	r2,-36(fp)
   27078:	e0bffa15 	stw	r2,-24(fp)
		for (i = 1; i < nc; i++)
   2707c:	00800044 	movi	r2,1
   27080:	e0bff815 	stw	r2,-32(fp)
   27084:	00000706 	br	270a4 <select_ncolors+0x74>
			temp *= iroot;
   27088:	e13ffa17 	ldw	r4,-24(fp)
   2708c:	e17ff717 	ldw	r5,-36(fp)
   27090:	002c1540 	call	2c154 <__mulsi3>
   27094:	e0bffa15 	stw	r2,-24(fp)
	/* Compute floor(nc'th root of max_colors). */
	iroot = 1;
	do {
		iroot++;
		temp = iroot;		/* set temp = iroot ** nc */
		for (i = 1; i < nc; i++)
   27098:	e0bff817 	ldw	r2,-32(fp)
   2709c:	10800044 	addi	r2,r2,1
   270a0:	e0bff815 	stw	r2,-32(fp)
   270a4:	e0fff817 	ldw	r3,-32(fp)
   270a8:	e0bffb17 	ldw	r2,-20(fp)
   270ac:	18bff616 	blt	r3,r2,27088 <select_ncolors+0x58>
			temp *= iroot;
	} while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
   270b0:	e0bffa17 	ldw	r2,-24(fp)
   270b4:	e0fffc17 	ldw	r3,-16(fp)
   270b8:	18bfeb0e 	bge	r3,r2,27068 <select_ncolors+0x38>
	iroot--;			/* now iroot = floor(root) */
   270bc:	e0bff717 	ldw	r2,-36(fp)
   270c0:	10bfffc4 	addi	r2,r2,-1
   270c4:	e0bff715 	stw	r2,-36(fp)

	/* Must have at least 2 color values per component */
	if (iroot < 2)
   270c8:	e0bff717 	ldw	r2,-36(fp)
   270cc:	10800088 	cmpgei	r2,r2,2
   270d0:	10000d1e 	bne	r2,zero,27108 <select_ncolors+0xd8>
		ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
   270d4:	e0bffe17 	ldw	r2,-8(fp)
   270d8:	10800017 	ldw	r2,0(r2)
   270dc:	00c00e84 	movi	r3,58
   270e0:	10c00515 	stw	r3,20(r2)
   270e4:	e0bffe17 	ldw	r2,-8(fp)
   270e8:	10800017 	ldw	r2,0(r2)
   270ec:	e0fffa17 	ldw	r3,-24(fp)
   270f0:	10c00615 	stw	r3,24(r2)
   270f4:	e0bffe17 	ldw	r2,-8(fp)
   270f8:	10800017 	ldw	r2,0(r2)
   270fc:	10800017 	ldw	r2,0(r2)
   27100:	e13ffe17 	ldw	r4,-8(fp)
   27104:	103ee83a 	callr	r2

	/* Initialize to iroot color values for each component */
	total_colors = 1;
   27108:	00800044 	movi	r2,1
   2710c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < nc; i++) {
   27110:	e03ff815 	stw	zero,-32(fp)
   27114:	00000e06 	br	27150 <select_ncolors+0x120>
		Ncolors[i] = iroot;
   27118:	e0bff817 	ldw	r2,-32(fp)
   2711c:	1085883a 	add	r2,r2,r2
   27120:	1085883a 	add	r2,r2,r2
   27124:	e0ffff17 	ldw	r3,-4(fp)
   27128:	1885883a 	add	r2,r3,r2
   2712c:	e0fff717 	ldw	r3,-36(fp)
   27130:	10c00015 	stw	r3,0(r2)
		total_colors *= iroot;
   27134:	e13ff617 	ldw	r4,-40(fp)
   27138:	e17ff717 	ldw	r5,-36(fp)
   2713c:	002c1540 	call	2c154 <__mulsi3>
   27140:	e0bff615 	stw	r2,-40(fp)
	if (iroot < 2)
		ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

	/* Initialize to iroot color values for each component */
	total_colors = 1;
	for (i = 0; i < nc; i++) {
   27144:	e0bff817 	ldw	r2,-32(fp)
   27148:	10800044 	addi	r2,r2,1
   2714c:	e0bff815 	stw	r2,-32(fp)
   27150:	e0fff817 	ldw	r3,-32(fp)
   27154:	e0bffb17 	ldw	r2,-20(fp)
   27158:	18bfef16 	blt	r3,r2,27118 <select_ncolors+0xe8>
	* Sometimes, the first component can be incremented more than once!
	* (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
	* In RGB colorspace, try to increment G first, then R, then B.
	*/
	do {
		changed = FALSE;
   2715c:	e03ff905 	stb	zero,-28(fp)
		for (i = 0; i < nc; i++) {
   27160:	e03ff815 	stw	zero,-32(fp)
   27164:	00003506 	br	2723c <select_ncolors+0x20c>
			j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
   27168:	e0bffe17 	ldw	r2,-8(fp)
   2716c:	10800b17 	ldw	r2,44(r2)
   27170:	10800098 	cmpnei	r2,r2,2
   27174:	1000081e 	bne	r2,zero,27198 <select_ncolors+0x168>
   27178:	00c00134 	movhi	r3,4
   2717c:	18c22e04 	addi	r3,r3,2232
   27180:	e0bff817 	ldw	r2,-32(fp)
   27184:	1085883a 	add	r2,r2,r2
   27188:	1085883a 	add	r2,r2,r2
   2718c:	1885883a 	add	r2,r3,r2
   27190:	10800017 	ldw	r2,0(r2)
   27194:	00000106 	br	2719c <select_ncolors+0x16c>
   27198:	e0bff817 	ldw	r2,-32(fp)
   2719c:	e0bffd15 	stw	r2,-12(fp)
			/* calculate new total_colors if Ncolors[j] is incremented */
			temp = total_colors / Ncolors[j];
   271a0:	e0bffd17 	ldw	r2,-12(fp)
   271a4:	1085883a 	add	r2,r2,r2
   271a8:	1085883a 	add	r2,r2,r2
   271ac:	e0ffff17 	ldw	r3,-4(fp)
   271b0:	1885883a 	add	r2,r3,r2
   271b4:	10800017 	ldw	r2,0(r2)
   271b8:	e13ff617 	ldw	r4,-40(fp)
   271bc:	100b883a 	mov	r5,r2
   271c0:	002c0980 	call	2c098 <__divsi3>
   271c4:	e0bffa15 	stw	r2,-24(fp)
			temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
   271c8:	e0bffd17 	ldw	r2,-12(fp)
   271cc:	1085883a 	add	r2,r2,r2
   271d0:	1085883a 	add	r2,r2,r2
   271d4:	e0ffff17 	ldw	r3,-4(fp)
   271d8:	1885883a 	add	r2,r3,r2
   271dc:	10800017 	ldw	r2,0(r2)
   271e0:	10800044 	addi	r2,r2,1
   271e4:	e13ffa17 	ldw	r4,-24(fp)
   271e8:	100b883a 	mov	r5,r2
   271ec:	002c1540 	call	2c154 <__mulsi3>
   271f0:	e0bffa15 	stw	r2,-24(fp)
			if (temp > (long) max_colors)
   271f4:	e0bffa17 	ldw	r2,-24(fp)
   271f8:	e0fffc17 	ldw	r3,-16(fp)
   271fc:	18801316 	blt	r3,r2,2724c <select_ncolors+0x21c>
				break;			/* won't fit, done with this pass */
			Ncolors[j]++;		/* OK, apply the increment */
   27200:	e0bffd17 	ldw	r2,-12(fp)
   27204:	1085883a 	add	r2,r2,r2
   27208:	1085883a 	add	r2,r2,r2
   2720c:	e0ffff17 	ldw	r3,-4(fp)
   27210:	1885883a 	add	r2,r3,r2
   27214:	10c00017 	ldw	r3,0(r2)
   27218:	18c00044 	addi	r3,r3,1
   2721c:	10c00015 	stw	r3,0(r2)
			total_colors = (int) temp;
   27220:	e0bffa17 	ldw	r2,-24(fp)
   27224:	e0bff615 	stw	r2,-40(fp)
			changed = TRUE;
   27228:	00800044 	movi	r2,1
   2722c:	e0bff905 	stb	r2,-28(fp)
	* (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
	* In RGB colorspace, try to increment G first, then R, then B.
	*/
	do {
		changed = FALSE;
		for (i = 0; i < nc; i++) {
   27230:	e0bff817 	ldw	r2,-32(fp)
   27234:	10800044 	addi	r2,r2,1
   27238:	e0bff815 	stw	r2,-32(fp)
   2723c:	e0fff817 	ldw	r3,-32(fp)
   27240:	e0bffb17 	ldw	r2,-20(fp)
   27244:	18bfc816 	blt	r3,r2,27168 <select_ncolors+0x138>
   27248:	00000106 	br	27250 <select_ncolors+0x220>
			j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
			/* calculate new total_colors if Ncolors[j] is incremented */
			temp = total_colors / Ncolors[j];
			temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
			if (temp > (long) max_colors)
				break;			/* won't fit, done with this pass */
   2724c:	0001883a 	nop
			Ncolors[j]++;		/* OK, apply the increment */
			total_colors = (int) temp;
			changed = TRUE;
		}
	} while (changed);
   27250:	e0bff903 	ldbu	r2,-28(fp)
   27254:	103fc11e 	bne	r2,zero,2715c <select_ncolors+0x12c>

	return total_colors;
   27258:	e0bff617 	ldw	r2,-40(fp)
}
   2725c:	e037883a 	mov	sp,fp
   27260:	dfc00117 	ldw	ra,4(sp)
   27264:	df000017 	ldw	fp,0(sp)
   27268:	dec00204 	addi	sp,sp,8
   2726c:	f800283a 	ret

00027270 <output_value>:

LOCAL(int)
	output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
	/* Return j'th output value, where j will range from 0 to maxj */
	/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
   27270:	defffa04 	addi	sp,sp,-24
   27274:	dfc00515 	stw	ra,20(sp)
   27278:	df000415 	stw	fp,16(sp)
   2727c:	df000404 	addi	fp,sp,16
   27280:	e13ffc15 	stw	r4,-16(fp)
   27284:	e17ffd15 	stw	r5,-12(fp)
   27288:	e1bffe15 	stw	r6,-8(fp)
   2728c:	e1ffff15 	stw	r7,-4(fp)
	/* We always provide values 0 and MAXJSAMPLE for each component;
	* any additional values are equally spaced between these limits.
	* (Forcing the upper and lower values to the limits ensures that
	* dithering can't produce a color outside the selected gamut.)
	*/
	return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
   27290:	e13ffe17 	ldw	r4,-8(fp)
   27294:	01403fc4 	movi	r5,255
   27298:	002c1540 	call	2c154 <__mulsi3>
   2729c:	1007883a 	mov	r3,r2
   272a0:	e0bfff17 	ldw	r2,-4(fp)
   272a4:	1008d7fa 	srli	r4,r2,31
   272a8:	2085883a 	add	r2,r4,r2
   272ac:	1005d07a 	srai	r2,r2,1
   272b0:	1885883a 	add	r2,r3,r2
   272b4:	1009883a 	mov	r4,r2
   272b8:	e17fff17 	ldw	r5,-4(fp)
   272bc:	002c0980 	call	2c098 <__divsi3>
}
   272c0:	e037883a 	mov	sp,fp
   272c4:	dfc00117 	ldw	ra,4(sp)
   272c8:	df000017 	ldw	fp,0(sp)
   272cc:	dec00204 	addi	sp,sp,8
   272d0:	f800283a 	ret

000272d4 <largest_input_value>:

LOCAL(int)
	largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
	/* Return largest input value that should map to j'th output value */
	/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
   272d4:	defffa04 	addi	sp,sp,-24
   272d8:	dfc00515 	stw	ra,20(sp)
   272dc:	df000415 	stw	fp,16(sp)
   272e0:	df000404 	addi	fp,sp,16
   272e4:	e13ffc15 	stw	r4,-16(fp)
   272e8:	e17ffd15 	stw	r5,-12(fp)
   272ec:	e1bffe15 	stw	r6,-8(fp)
   272f0:	e1ffff15 	stw	r7,-4(fp)
	/* Breakpoints are halfway between values returned by output_value */
	return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
   272f4:	e13ffe17 	ldw	r4,-8(fp)
   272f8:	01407f84 	movi	r5,510
   272fc:	002c1540 	call	2c154 <__mulsi3>
   27300:	10c03fc4 	addi	r3,r2,255
   27304:	e0bfff17 	ldw	r2,-4(fp)
   27308:	1887883a 	add	r3,r3,r2
   2730c:	e0bfff17 	ldw	r2,-4(fp)
   27310:	1085883a 	add	r2,r2,r2
   27314:	1809883a 	mov	r4,r3
   27318:	100b883a 	mov	r5,r2
   2731c:	002c0980 	call	2c098 <__divsi3>
}
   27320:	e037883a 	mov	sp,fp
   27324:	dfc00117 	ldw	ra,4(sp)
   27328:	df000017 	ldw	fp,0(sp)
   2732c:	dec00204 	addi	sp,sp,8
   27330:	f800283a 	ret

00027334 <create_colormap>:
* Create the colormap.
*/

LOCAL(void)
	create_colormap (j_decompress_ptr cinfo)
{
   27334:	defff104 	addi	sp,sp,-60
   27338:	dfc00e15 	stw	ra,56(sp)
   2733c:	df000d15 	stw	fp,52(sp)
   27340:	df000d04 	addi	fp,sp,52
   27344:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27348:	e0bfff17 	ldw	r2,-4(fp)
   2734c:	10806e17 	ldw	r2,440(r2)
   27350:	e0bff815 	stw	r2,-32(fp)
	JSAMPARRAY colormap;		/* Created colormap */
	int total_colors;		/* Number of distinct output colors */
	int i,j,k, nci, blksize, blkdist, ptr, val;

	/* Select number of colors for each component */
	total_colors = select_ncolors(cinfo, cquantize->Ncolors);
   27354:	e0bff817 	ldw	r2,-32(fp)
   27358:	10800804 	addi	r2,r2,32
   2735c:	e13fff17 	ldw	r4,-4(fp)
   27360:	100b883a 	mov	r5,r2
   27364:	00270300 	call	27030 <select_ncolors>
   27368:	e0bff915 	stw	r2,-28(fp)

	/* Report selected color counts */
	if (cinfo->out_color_components == 3)
   2736c:	e0bfff17 	ldw	r2,-4(fp)
   27370:	10801917 	ldw	r2,100(r2)
   27374:	108000d8 	cmpnei	r2,r2,3
   27378:	1000211e 	bne	r2,zero,27400 <create_colormap+0xcc>
		TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
   2737c:	e0bfff17 	ldw	r2,-4(fp)
   27380:	10800017 	ldw	r2,0(r2)
   27384:	10800604 	addi	r2,r2,24
   27388:	e0bffa15 	stw	r2,-24(fp)
   2738c:	e0bffa17 	ldw	r2,-24(fp)
   27390:	e0fff917 	ldw	r3,-28(fp)
   27394:	10c00015 	stw	r3,0(r2)
   27398:	e0bffa17 	ldw	r2,-24(fp)
   2739c:	10800104 	addi	r2,r2,4
   273a0:	e0fff817 	ldw	r3,-32(fp)
   273a4:	18c00817 	ldw	r3,32(r3)
   273a8:	10c00015 	stw	r3,0(r2)
   273ac:	e0bffa17 	ldw	r2,-24(fp)
   273b0:	10800204 	addi	r2,r2,8
   273b4:	e0fff817 	ldw	r3,-32(fp)
   273b8:	18c00917 	ldw	r3,36(r3)
   273bc:	10c00015 	stw	r3,0(r2)
   273c0:	e0bffa17 	ldw	r2,-24(fp)
   273c4:	10800304 	addi	r2,r2,12
   273c8:	e0fff817 	ldw	r3,-32(fp)
   273cc:	18c00a17 	ldw	r3,40(r3)
   273d0:	10c00015 	stw	r3,0(r2)
   273d4:	e0bfff17 	ldw	r2,-4(fp)
   273d8:	10800017 	ldw	r2,0(r2)
   273dc:	00c01804 	movi	r3,96
   273e0:	10c00515 	stw	r3,20(r2)
   273e4:	e0bfff17 	ldw	r2,-4(fp)
   273e8:	10800017 	ldw	r2,0(r2)
   273ec:	10800117 	ldw	r2,4(r2)
   273f0:	e13fff17 	ldw	r4,-4(fp)
   273f4:	01400044 	movi	r5,1
   273f8:	103ee83a 	callr	r2
   273fc:	00000e06 	br	27438 <create_colormap+0x104>
		total_colors, cquantize->Ncolors[0],
		cquantize->Ncolors[1], cquantize->Ncolors[2]);
	else
		TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
   27400:	e0bfff17 	ldw	r2,-4(fp)
   27404:	10800017 	ldw	r2,0(r2)
   27408:	00c01844 	movi	r3,97
   2740c:	10c00515 	stw	r3,20(r2)
   27410:	e0bfff17 	ldw	r2,-4(fp)
   27414:	10800017 	ldw	r2,0(r2)
   27418:	e0fff917 	ldw	r3,-28(fp)
   2741c:	10c00615 	stw	r3,24(r2)
   27420:	e0bfff17 	ldw	r2,-4(fp)
   27424:	10800017 	ldw	r2,0(r2)
   27428:	10800117 	ldw	r2,4(r2)
   2742c:	e13fff17 	ldw	r4,-4(fp)
   27430:	01400044 	movi	r5,1
   27434:	103ee83a 	callr	r2

	/* Allocate and fill in the colormap. */
	/* The colors are ordered in the map in standard row-major order, */
	/* i.e. rightmost (highest-indexed) color changes most rapidly. */

	colormap = (*cinfo->mem->alloc_sarray)
   27438:	e0bfff17 	ldw	r2,-4(fp)
   2743c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
   27440:	12000217 	ldw	r8,8(r2)
   27444:	e0fff917 	ldw	r3,-28(fp)
		(JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
   27448:	e0bfff17 	ldw	r2,-4(fp)
   2744c:	10801917 	ldw	r2,100(r2)

	/* Allocate and fill in the colormap. */
	/* The colors are ordered in the map in standard row-major order, */
	/* i.e. rightmost (highest-indexed) color changes most rapidly. */

	colormap = (*cinfo->mem->alloc_sarray)
   27450:	e13fff17 	ldw	r4,-4(fp)
   27454:	01400044 	movi	r5,1
   27458:	180d883a 	mov	r6,r3
   2745c:	100f883a 	mov	r7,r2
   27460:	403ee83a 	callr	r8
   27464:	e0bffb15 	stw	r2,-20(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
		(JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	/* blkdist is distance between groups of identical entries for a component */
	blkdist = total_colors;
   27468:	e0bff917 	ldw	r2,-28(fp)
   2746c:	e0bff615 	stw	r2,-40(fp)

	for (i = 0; i < cinfo->out_color_components; i++) {
   27470:	e03ff315 	stw	zero,-52(fp)
   27474:	00004106 	br	2757c <create_colormap+0x248>
		/* fill in colormap entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
   27478:	e0fff817 	ldw	r3,-32(fp)
   2747c:	e0bff317 	ldw	r2,-52(fp)
   27480:	10800204 	addi	r2,r2,8
   27484:	1085883a 	add	r2,r2,r2
   27488:	1085883a 	add	r2,r2,r2
   2748c:	1885883a 	add	r2,r3,r2
   27490:	10800017 	ldw	r2,0(r2)
   27494:	e0bffc15 	stw	r2,-16(fp)
		blksize = blkdist / nci;
   27498:	e13ff617 	ldw	r4,-40(fp)
   2749c:	e17ffc17 	ldw	r5,-16(fp)
   274a0:	002c0980 	call	2c098 <__divsi3>
   274a4:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < nci; j++) {
   274a8:	e03ff415 	stw	zero,-48(fp)
   274ac:	00002b06 	br	2755c <create_colormap+0x228>
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
   274b0:	e0bffc17 	ldw	r2,-16(fp)
   274b4:	10bfffc4 	addi	r2,r2,-1
   274b8:	e13fff17 	ldw	r4,-4(fp)
   274bc:	e17ff317 	ldw	r5,-52(fp)
   274c0:	e1bff417 	ldw	r6,-48(fp)
   274c4:	100f883a 	mov	r7,r2
   274c8:	00272700 	call	27270 <output_value>
   274cc:	e0bffe15 	stw	r2,-8(fp)
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
   274d0:	e13ff417 	ldw	r4,-48(fp)
   274d4:	e17ffd17 	ldw	r5,-12(fp)
   274d8:	002c1540 	call	2c154 <__mulsi3>
   274dc:	e0bff715 	stw	r2,-36(fp)
   274e0:	00001806 	br	27544 <create_colormap+0x210>
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
   274e4:	e03ff515 	stw	zero,-44(fp)
   274e8:	00000f06 	br	27528 <create_colormap+0x1f4>
					colormap[i][ptr+k] = (JSAMPLE) val;
   274ec:	e0bff317 	ldw	r2,-52(fp)
   274f0:	1085883a 	add	r2,r2,r2
   274f4:	1085883a 	add	r2,r2,r2
   274f8:	e0fffb17 	ldw	r3,-20(fp)
   274fc:	1885883a 	add	r2,r3,r2
   27500:	10c00017 	ldw	r3,0(r2)
   27504:	e13ff717 	ldw	r4,-36(fp)
   27508:	e0bff517 	ldw	r2,-44(fp)
   2750c:	2085883a 	add	r2,r4,r2
   27510:	1885883a 	add	r2,r3,r2
   27514:	e0fffe17 	ldw	r3,-8(fp)
   27518:	10c00005 	stb	r3,0(r2)
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
   2751c:	e0bff517 	ldw	r2,-44(fp)
   27520:	10800044 	addi	r2,r2,1
   27524:	e0bff515 	stw	r2,-44(fp)
   27528:	e0fff517 	ldw	r3,-44(fp)
   2752c:	e0bffd17 	ldw	r2,-12(fp)
   27530:	18bfee16 	blt	r3,r2,274ec <create_colormap+0x1b8>
		blksize = blkdist / nci;
		for (j = 0; j < nci; j++) {
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
   27534:	e0fff717 	ldw	r3,-36(fp)
   27538:	e0bff617 	ldw	r2,-40(fp)
   2753c:	1885883a 	add	r2,r3,r2
   27540:	e0bff715 	stw	r2,-36(fp)
   27544:	e0fff717 	ldw	r3,-36(fp)
   27548:	e0bff917 	ldw	r2,-28(fp)
   2754c:	18bfe516 	blt	r3,r2,274e4 <create_colormap+0x1b0>

	for (i = 0; i < cinfo->out_color_components; i++) {
		/* fill in colormap entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
		blksize = blkdist / nci;
		for (j = 0; j < nci; j++) {
   27550:	e0bff417 	ldw	r2,-48(fp)
   27554:	10800044 	addi	r2,r2,1
   27558:	e0bff415 	stw	r2,-48(fp)
   2755c:	e0fff417 	ldw	r3,-48(fp)
   27560:	e0bffc17 	ldw	r2,-16(fp)
   27564:	18bfd216 	blt	r3,r2,274b0 <create_colormap+0x17c>
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
					colormap[i][ptr+k] = (JSAMPLE) val;
			}
		}
		blkdist = blksize;		/* blksize of this color is blkdist of next */
   27568:	e0bffd17 	ldw	r2,-12(fp)
   2756c:	e0bff615 	stw	r2,-40(fp)

	/* blksize is number of adjacent repeated entries for a component */
	/* blkdist is distance between groups of identical entries for a component */
	blkdist = total_colors;

	for (i = 0; i < cinfo->out_color_components; i++) {
   27570:	e0bff317 	ldw	r2,-52(fp)
   27574:	10800044 	addi	r2,r2,1
   27578:	e0bff315 	stw	r2,-52(fp)
   2757c:	e0bfff17 	ldw	r2,-4(fp)
   27580:	10801917 	ldw	r2,100(r2)
   27584:	e0fff317 	ldw	r3,-52(fp)
   27588:	18bfbb16 	blt	r3,r2,27478 <create_colormap+0x144>
	}

	/* Save the colormap in private storage,
	* where it will survive color quantization mode changes.
	*/
	cquantize->sv_colormap = colormap;
   2758c:	e0bff817 	ldw	r2,-32(fp)
   27590:	e0fffb17 	ldw	r3,-20(fp)
   27594:	10c00415 	stw	r3,16(r2)
	cquantize->sv_actual = total_colors;
   27598:	e0bff817 	ldw	r2,-32(fp)
   2759c:	e0fff917 	ldw	r3,-28(fp)
   275a0:	10c00515 	stw	r3,20(r2)
}
   275a4:	e037883a 	mov	sp,fp
   275a8:	dfc00117 	ldw	ra,4(sp)
   275ac:	df000017 	ldw	fp,0(sp)
   275b0:	dec00204 	addi	sp,sp,8
   275b4:	f800283a 	ret

000275b8 <create_colorindex>:
* Create the color index table.
*/

LOCAL(void)
	create_colorindex (j_decompress_ptr cinfo)
{
   275b8:	defff304 	addi	sp,sp,-52
   275bc:	dfc00c15 	stw	ra,48(sp)
   275c0:	df000b15 	stw	fp,44(sp)
   275c4:	dc000a15 	stw	r16,40(sp)
   275c8:	df000a04 	addi	fp,sp,40
   275cc:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   275d0:	e0bfff17 	ldw	r2,-4(fp)
   275d4:	10806e17 	ldw	r2,440(r2)
   275d8:	e0bffc15 	stw	r2,-16(fp)
	/* For ordered dither, we pad the color index tables by MAXJSAMPLE in
	* each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
	* This is not necessary in the other dithering modes.  However, we
	* flag whether it was done in case user changes dithering mode.
	*/
	if (cinfo->dither_mode == JDITHER_ORDERED) {
   275dc:	e0bfff17 	ldw	r2,-4(fp)
   275e0:	10801317 	ldw	r2,76(r2)
   275e4:	10800058 	cmpnei	r2,r2,1
   275e8:	1000061e 	bne	r2,zero,27604 <create_colorindex+0x4c>
		pad = MAXJSAMPLE*2;
   275ec:	00807f84 	movi	r2,510
   275f0:	e0bffb15 	stw	r2,-20(fp)
		cquantize->is_padded = TRUE;
   275f4:	e0bffc17 	ldw	r2,-16(fp)
   275f8:	00c00044 	movi	r3,1
   275fc:	10c00705 	stb	r3,28(r2)
   27600:	00000306 	br	27610 <create_colorindex+0x58>
	} else {
		pad = 0;
   27604:	e03ffb15 	stw	zero,-20(fp)
		cquantize->is_padded = FALSE;
   27608:	e0bffc17 	ldw	r2,-16(fp)
   2760c:	10000705 	stb	zero,28(r2)
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
   27610:	e0bfff17 	ldw	r2,-4(fp)
   27614:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
   27618:	12000217 	ldw	r8,8(r2)
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
   2761c:	e0bffb17 	ldw	r2,-20(fp)
   27620:	10804004 	addi	r2,r2,256
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
   27624:	1007883a 	mov	r3,r2
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
		(JDIMENSION) cinfo->out_color_components);
   27628:	e0bfff17 	ldw	r2,-4(fp)
   2762c:	10801917 	ldw	r2,100(r2)
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
   27630:	e13fff17 	ldw	r4,-4(fp)
   27634:	01400044 	movi	r5,1
   27638:	180d883a 	mov	r6,r3
   2763c:	100f883a 	mov	r7,r2
   27640:	403ee83a 	callr	r8
	} else {
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
   27644:	e0fffc17 	ldw	r3,-16(fp)
   27648:	18800615 	stw	r2,24(r3)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
		(JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	blksize = cquantize->sv_actual;
   2764c:	e0bffc17 	ldw	r2,-16(fp)
   27650:	10800517 	ldw	r2,20(r2)
   27654:	e0bff915 	stw	r2,-28(fp)

	for (i = 0; i < cinfo->out_color_components; i++) {
   27658:	e03ff615 	stw	zero,-40(fp)
   2765c:	00006a06 	br	27808 <create_colorindex+0x250>
		/* fill in colorindex entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
   27660:	e0fffc17 	ldw	r3,-16(fp)
   27664:	e0bff617 	ldw	r2,-40(fp)
   27668:	10800204 	addi	r2,r2,8
   2766c:	1085883a 	add	r2,r2,r2
   27670:	1085883a 	add	r2,r2,r2
   27674:	1885883a 	add	r2,r3,r2
   27678:	10800017 	ldw	r2,0(r2)
   2767c:	e0bffd15 	stw	r2,-12(fp)
		blksize = blksize / nci;
   27680:	e13ff917 	ldw	r4,-28(fp)
   27684:	e17ffd17 	ldw	r5,-12(fp)
   27688:	002c0980 	call	2c098 <__divsi3>
   2768c:	e0bff915 	stw	r2,-28(fp)

		/* adjust colorindex pointers to provide padding at negative indexes. */
		if (pad)
   27690:	e0bffb17 	ldw	r2,-20(fp)
   27694:	10000f26 	beq	r2,zero,276d4 <create_colorindex+0x11c>
			cquantize->colorindex[i] += MAXJSAMPLE;
   27698:	e0bffc17 	ldw	r2,-16(fp)
   2769c:	10c00617 	ldw	r3,24(r2)
   276a0:	e0bff617 	ldw	r2,-40(fp)
   276a4:	1085883a 	add	r2,r2,r2
   276a8:	1085883a 	add	r2,r2,r2
   276ac:	1887883a 	add	r3,r3,r2
   276b0:	e0bffc17 	ldw	r2,-16(fp)
   276b4:	11000617 	ldw	r4,24(r2)
   276b8:	e0bff617 	ldw	r2,-40(fp)
   276bc:	1085883a 	add	r2,r2,r2
   276c0:	1085883a 	add	r2,r2,r2
   276c4:	2085883a 	add	r2,r4,r2
   276c8:	10800017 	ldw	r2,0(r2)
   276cc:	10803fc4 	addi	r2,r2,255
   276d0:	18800015 	stw	r2,0(r3)

		/* in loop, val = index of current output value, */
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
   276d4:	e0bffc17 	ldw	r2,-16(fp)
   276d8:	10c00617 	ldw	r3,24(r2)
   276dc:	e0bff617 	ldw	r2,-40(fp)
   276e0:	1085883a 	add	r2,r2,r2
   276e4:	1085883a 	add	r2,r2,r2
   276e8:	1885883a 	add	r2,r3,r2
   276ec:	10800017 	ldw	r2,0(r2)
   276f0:	e0bffe15 	stw	r2,-8(fp)
		val = 0;
   276f4:	e03ffa15 	stw	zero,-24(fp)
		k = largest_input_value(cinfo, i, 0, nci-1);
   276f8:	e0bffd17 	ldw	r2,-12(fp)
   276fc:	10bfffc4 	addi	r2,r2,-1
   27700:	e13fff17 	ldw	r4,-4(fp)
   27704:	e17ff617 	ldw	r5,-40(fp)
   27708:	000d883a 	mov	r6,zero
   2770c:	100f883a 	mov	r7,r2
   27710:	00272d40 	call	272d4 <largest_input_value>
   27714:	e0bff815 	stw	r2,-32(fp)
		for (j = 0; j <= MAXJSAMPLE; j++) {
   27718:	e03ff715 	stw	zero,-36(fp)
   2771c:	00001b06 	br	2778c <create_colorindex+0x1d4>
			while (j > k)		/* advance val if past boundary */
				k = largest_input_value(cinfo, i, ++val, nci-1);
   27720:	e0bffa17 	ldw	r2,-24(fp)
   27724:	10800044 	addi	r2,r2,1
   27728:	e0bffa15 	stw	r2,-24(fp)
   2772c:	e0bffd17 	ldw	r2,-12(fp)
   27730:	10bfffc4 	addi	r2,r2,-1
   27734:	e13fff17 	ldw	r4,-4(fp)
   27738:	e17ff617 	ldw	r5,-40(fp)
   2773c:	e1bffa17 	ldw	r6,-24(fp)
   27740:	100f883a 	mov	r7,r2
   27744:	00272d40 	call	272d4 <largest_input_value>
   27748:	e0bff815 	stw	r2,-32(fp)
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
		val = 0;
		k = largest_input_value(cinfo, i, 0, nci-1);
		for (j = 0; j <= MAXJSAMPLE; j++) {
			while (j > k)		/* advance val if past boundary */
   2774c:	e0bff717 	ldw	r2,-36(fp)
   27750:	e0fff817 	ldw	r3,-32(fp)
   27754:	18bff216 	blt	r3,r2,27720 <create_colorindex+0x168>
				k = largest_input_value(cinfo, i, ++val, nci-1);
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
   27758:	e0bff717 	ldw	r2,-36(fp)
   2775c:	e0fffe17 	ldw	r3,-8(fp)
   27760:	18a1883a 	add	r16,r3,r2
   27764:	e0bffa17 	ldw	r2,-24(fp)
   27768:	1007883a 	mov	r3,r2
   2776c:	e0bff917 	ldw	r2,-28(fp)
   27770:	1809883a 	mov	r4,r3
   27774:	100b883a 	mov	r5,r2
   27778:	002c1540 	call	2c154 <__mulsi3>
   2777c:	80800005 	stb	r2,0(r16)
		/* in loop, val = index of current output value, */
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
		val = 0;
		k = largest_input_value(cinfo, i, 0, nci-1);
		for (j = 0; j <= MAXJSAMPLE; j++) {
   27780:	e0bff717 	ldw	r2,-36(fp)
   27784:	10800044 	addi	r2,r2,1
   27788:	e0bff715 	stw	r2,-36(fp)
   2778c:	e0bff717 	ldw	r2,-36(fp)
   27790:	10804010 	cmplti	r2,r2,256
   27794:	103fed1e 	bne	r2,zero,2774c <create_colorindex+0x194>
				k = largest_input_value(cinfo, i, ++val, nci-1);
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
		}
		/* Pad at both ends if necessary */
		if (pad)
   27798:	e0bffb17 	ldw	r2,-20(fp)
   2779c:	10001726 	beq	r2,zero,277fc <create_colorindex+0x244>
			for (j = 1; j <= MAXJSAMPLE; j++) {
   277a0:	00800044 	movi	r2,1
   277a4:	e0bff715 	stw	r2,-36(fp)
   277a8:	00001106 	br	277f0 <create_colorindex+0x238>
				indexptr[-j] = indexptr[0];
   277ac:	e0bff717 	ldw	r2,-36(fp)
   277b0:	0085c83a 	sub	r2,zero,r2
   277b4:	e0fffe17 	ldw	r3,-8(fp)
   277b8:	1885883a 	add	r2,r3,r2
   277bc:	e0fffe17 	ldw	r3,-8(fp)
   277c0:	18c00003 	ldbu	r3,0(r3)
   277c4:	10c00005 	stb	r3,0(r2)
				indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
   277c8:	e0bff717 	ldw	r2,-36(fp)
   277cc:	10803fc4 	addi	r2,r2,255
   277d0:	e0fffe17 	ldw	r3,-8(fp)
   277d4:	1885883a 	add	r2,r3,r2
   277d8:	e0fffe17 	ldw	r3,-8(fp)
   277dc:	18c03fc3 	ldbu	r3,255(r3)
   277e0:	10c00005 	stb	r3,0(r2)
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
		}
		/* Pad at both ends if necessary */
		if (pad)
			for (j = 1; j <= MAXJSAMPLE; j++) {
   277e4:	e0bff717 	ldw	r2,-36(fp)
   277e8:	10800044 	addi	r2,r2,1
   277ec:	e0bff715 	stw	r2,-36(fp)
   277f0:	e0bff717 	ldw	r2,-36(fp)
   277f4:	10804010 	cmplti	r2,r2,256
   277f8:	103fec1e 	bne	r2,zero,277ac <create_colorindex+0x1f4>
		(JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	blksize = cquantize->sv_actual;

	for (i = 0; i < cinfo->out_color_components; i++) {
   277fc:	e0bff617 	ldw	r2,-40(fp)
   27800:	10800044 	addi	r2,r2,1
   27804:	e0bff615 	stw	r2,-40(fp)
   27808:	e0bfff17 	ldw	r2,-4(fp)
   2780c:	10801917 	ldw	r2,100(r2)
   27810:	e0fff617 	ldw	r3,-40(fp)
   27814:	18bf9216 	blt	r3,r2,27660 <create_colorindex+0xa8>
			for (j = 1; j <= MAXJSAMPLE; j++) {
				indexptr[-j] = indexptr[0];
				indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
			}
	}
}
   27818:	e037883a 	mov	sp,fp
   2781c:	dfc00217 	ldw	ra,8(sp)
   27820:	df000117 	ldw	fp,4(sp)
   27824:	dc000017 	ldw	r16,0(sp)
   27828:	dec00304 	addi	sp,sp,12
   2782c:	f800283a 	ret

00027830 <make_odither_array>:
* distinct output values.
*/

LOCAL(ODITHER_MATRIX_PTR)
	make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
   27830:	defff604 	addi	sp,sp,-40
   27834:	dfc00915 	stw	ra,36(sp)
   27838:	df000815 	stw	fp,32(sp)
   2783c:	dc000715 	stw	r16,28(sp)
   27840:	df000704 	addi	fp,sp,28
   27844:	e13ffe15 	stw	r4,-8(fp)
   27848:	e17fff15 	stw	r5,-4(fp)
	ODITHER_MATRIX_PTR odither;
	int j,k;
	INT32 num,den;

	odither = (ODITHER_MATRIX_PTR)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   2784c:	e0bffe17 	ldw	r2,-8(fp)
   27850:	10800117 	ldw	r2,4(r2)
   27854:	10800017 	ldw	r2,0(r2)
{
	ODITHER_MATRIX_PTR odither;
	int j,k;
	INT32 num,den;

	odither = (ODITHER_MATRIX_PTR)
   27858:	e13ffe17 	ldw	r4,-8(fp)
   2785c:	01400044 	movi	r5,1
   27860:	01810004 	movi	r6,1024
   27864:	103ee83a 	callr	r2
   27868:	e0bffb15 	stw	r2,-20(fp)
	/* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
	* Hence the dither value for the matrix cell with fill order f
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
   2786c:	e0bfff17 	ldw	r2,-4(fp)
   27870:	10bfffc4 	addi	r2,r2,-1
   27874:	1004927a 	slli	r2,r2,9
   27878:	e0bffc15 	stw	r2,-16(fp)
	for (j = 0; j < ODITHER_SIZE; j++) {
   2787c:	e03ff915 	stw	zero,-28(fp)
   27880:	00003006 	br	27944 <make_odither_array+0x114>
		for (k = 0; k < ODITHER_SIZE; k++) {
   27884:	e03ffa15 	stw	zero,-24(fp)
   27888:	00002806 	br	2792c <make_odither_array+0xfc>
			num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
   2788c:	00c00134 	movhi	r3,4
   27890:	18c1ee04 	addi	r3,r3,1976
   27894:	e0bff917 	ldw	r2,-28(fp)
   27898:	1008913a 	slli	r4,r2,4
   2789c:	e0bffa17 	ldw	r2,-24(fp)
   278a0:	2085883a 	add	r2,r4,r2
   278a4:	1885883a 	add	r2,r3,r2
   278a8:	10800003 	ldbu	r2,0(r2)
   278ac:	10803fcc 	andi	r2,r2,255
				* MAXJSAMPLE;
   278b0:	1009883a 	mov	r4,r2
   278b4:	017f8084 	movi	r5,-510
   278b8:	002c1540 	call	2c154 <__mulsi3>
   278bc:	1007883a 	mov	r3,r2
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
		for (k = 0; k < ODITHER_SIZE; k++) {
			num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
   278c0:	00bf8054 	movui	r2,65025
   278c4:	1885883a 	add	r2,r3,r2
   278c8:	e0bffd15 	stw	r2,-12(fp)
				* MAXJSAMPLE;
			/* Ensure round towards zero despite C's lack of consistency
			* about rounding negative values in integer division...
			*/
			odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
   278cc:	e0bff917 	ldw	r2,-28(fp)
   278d0:	100491ba 	slli	r2,r2,6
   278d4:	e0fffb17 	ldw	r3,-20(fp)
   278d8:	18a1883a 	add	r16,r3,r2
   278dc:	e0bffd17 	ldw	r2,-12(fp)
   278e0:	1000070e 	bge	r2,zero,27900 <make_odither_array+0xd0>
   278e4:	e0bffd17 	ldw	r2,-12(fp)
   278e8:	0085c83a 	sub	r2,zero,r2
   278ec:	1009883a 	mov	r4,r2
   278f0:	e17ffc17 	ldw	r5,-16(fp)
   278f4:	002c0980 	call	2c098 <__divsi3>
   278f8:	0085c83a 	sub	r2,zero,r2
   278fc:	00000306 	br	2790c <make_odither_array+0xdc>
   27900:	e13ffd17 	ldw	r4,-12(fp)
   27904:	e17ffc17 	ldw	r5,-16(fp)
   27908:	002c0980 	call	2c098 <__divsi3>
   2790c:	e0fffa17 	ldw	r3,-24(fp)
   27910:	18c7883a 	add	r3,r3,r3
   27914:	18c7883a 	add	r3,r3,r3
   27918:	80c7883a 	add	r3,r16,r3
   2791c:	18800015 	stw	r2,0(r3)
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
		for (k = 0; k < ODITHER_SIZE; k++) {
   27920:	e0bffa17 	ldw	r2,-24(fp)
   27924:	10800044 	addi	r2,r2,1
   27928:	e0bffa15 	stw	r2,-24(fp)
   2792c:	e0bffa17 	ldw	r2,-24(fp)
   27930:	10800410 	cmplti	r2,r2,16
   27934:	103fd51e 	bne	r2,zero,2788c <make_odither_array+0x5c>
	* Hence the dither value for the matrix cell with fill order f
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
   27938:	e0bff917 	ldw	r2,-28(fp)
   2793c:	10800044 	addi	r2,r2,1
   27940:	e0bff915 	stw	r2,-28(fp)
   27944:	e0bff917 	ldw	r2,-28(fp)
   27948:	10800410 	cmplti	r2,r2,16
   2794c:	103fcd1e 	bne	r2,zero,27884 <make_odither_array+0x54>
			* about rounding negative values in integer division...
			*/
			odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
		}
	}
	return odither;
   27950:	e0bffb17 	ldw	r2,-20(fp)
}
   27954:	e037883a 	mov	sp,fp
   27958:	dfc00217 	ldw	ra,8(sp)
   2795c:	df000117 	ldw	fp,4(sp)
   27960:	dc000017 	ldw	r16,0(sp)
   27964:	dec00304 	addi	sp,sp,12
   27968:	f800283a 	ret

0002796c <create_odither_tables>:
* share a dither table.
*/

LOCAL(void)
	create_odither_tables (j_decompress_ptr cinfo)
{
   2796c:	defff804 	addi	sp,sp,-32
   27970:	dfc00715 	stw	ra,28(sp)
   27974:	df000615 	stw	fp,24(sp)
   27978:	df000604 	addi	fp,sp,24
   2797c:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27980:	e0bfff17 	ldw	r2,-4(fp)
   27984:	10806e17 	ldw	r2,440(r2)
   27988:	e0bffd15 	stw	r2,-12(fp)
	ODITHER_MATRIX_PTR odither;
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
   2798c:	e03ffb15 	stw	zero,-20(fp)
   27990:	00003406 	br	27a64 <create_odither_tables+0xf8>
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
   27994:	e0fffd17 	ldw	r3,-12(fp)
   27998:	e0bffb17 	ldw	r2,-20(fp)
   2799c:	10800204 	addi	r2,r2,8
   279a0:	1085883a 	add	r2,r2,r2
   279a4:	1085883a 	add	r2,r2,r2
   279a8:	1885883a 	add	r2,r3,r2
   279ac:	10800017 	ldw	r2,0(r2)
   279b0:	e0bffe15 	stw	r2,-8(fp)
		odither = NULL;		/* search for matching prior component */
   279b4:	e03ffa15 	stw	zero,-24(fp)
		for (j = 0; j < i; j++) {
   279b8:	e03ffc15 	stw	zero,-16(fp)
   279bc:	00001506 	br	27a14 <create_odither_tables+0xa8>
			if (nci == cquantize->Ncolors[j]) {
   279c0:	e0fffd17 	ldw	r3,-12(fp)
   279c4:	e0bffc17 	ldw	r2,-16(fp)
   279c8:	10800204 	addi	r2,r2,8
   279cc:	1085883a 	add	r2,r2,r2
   279d0:	1085883a 	add	r2,r2,r2
   279d4:	1885883a 	add	r2,r3,r2
   279d8:	10c00017 	ldw	r3,0(r2)
   279dc:	e0bffe17 	ldw	r2,-8(fp)
   279e0:	1880091e 	bne	r3,r2,27a08 <create_odither_tables+0x9c>
				odither = cquantize->odither[j];
   279e4:	e0fffd17 	ldw	r3,-12(fp)
   279e8:	e0bffc17 	ldw	r2,-16(fp)
   279ec:	10800344 	addi	r2,r2,13
   279f0:	1085883a 	add	r2,r2,r2
   279f4:	1085883a 	add	r2,r2,r2
   279f8:	1885883a 	add	r2,r3,r2
   279fc:	10800017 	ldw	r2,0(r2)
   27a00:	e0bffa15 	stw	r2,-24(fp)
				break;
   27a04:	00000606 	br	27a20 <create_odither_tables+0xb4>
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
		odither = NULL;		/* search for matching prior component */
		for (j = 0; j < i; j++) {
   27a08:	e0bffc17 	ldw	r2,-16(fp)
   27a0c:	10800044 	addi	r2,r2,1
   27a10:	e0bffc15 	stw	r2,-16(fp)
   27a14:	e0fffc17 	ldw	r3,-16(fp)
   27a18:	e0bffb17 	ldw	r2,-20(fp)
   27a1c:	18bfe816 	blt	r3,r2,279c0 <create_odither_tables+0x54>
			if (nci == cquantize->Ncolors[j]) {
				odither = cquantize->odither[j];
				break;
			}
		}
		if (odither == NULL)	/* need a new table? */
   27a20:	e0bffa17 	ldw	r2,-24(fp)
   27a24:	1000041e 	bne	r2,zero,27a38 <create_odither_tables+0xcc>
			odither = make_odither_array(cinfo, nci);
   27a28:	e13fff17 	ldw	r4,-4(fp)
   27a2c:	e17ffe17 	ldw	r5,-8(fp)
   27a30:	00278300 	call	27830 <make_odither_array>
   27a34:	e0bffa15 	stw	r2,-24(fp)
		cquantize->odither[i] = odither;
   27a38:	e0fffd17 	ldw	r3,-12(fp)
   27a3c:	e0bffb17 	ldw	r2,-20(fp)
   27a40:	10800344 	addi	r2,r2,13
   27a44:	1085883a 	add	r2,r2,r2
   27a48:	1085883a 	add	r2,r2,r2
   27a4c:	1885883a 	add	r2,r3,r2
   27a50:	e0fffa17 	ldw	r3,-24(fp)
   27a54:	10c00015 	stw	r3,0(r2)
{
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	ODITHER_MATRIX_PTR odither;
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
   27a58:	e0bffb17 	ldw	r2,-20(fp)
   27a5c:	10800044 	addi	r2,r2,1
   27a60:	e0bffb15 	stw	r2,-20(fp)
   27a64:	e0bfff17 	ldw	r2,-4(fp)
   27a68:	10801917 	ldw	r2,100(r2)
   27a6c:	e0fffb17 	ldw	r3,-20(fp)
   27a70:	18bfc816 	blt	r3,r2,27994 <create_odither_tables+0x28>
		}
		if (odither == NULL)	/* need a new table? */
			odither = make_odither_array(cinfo, nci);
		cquantize->odither[i] = odither;
	}
}
   27a74:	e037883a 	mov	sp,fp
   27a78:	dfc00117 	ldw	ra,4(sp)
   27a7c:	df000017 	ldw	fp,0(sp)
   27a80:	dec00204 	addi	sp,sp,8
   27a84:	f800283a 	ret

00027a88 <color_quantize>:

METHODDEF(void)
	color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, no dithering */
{
   27a88:	defff104 	addi	sp,sp,-60
   27a8c:	df000e15 	stw	fp,56(sp)
   27a90:	dd000d15 	stw	r20,52(sp)
   27a94:	dcc00c15 	stw	r19,48(sp)
   27a98:	dc800b15 	stw	r18,44(sp)
   27a9c:	dc400a15 	stw	r17,40(sp)
   27aa0:	dc000915 	stw	r16,36(sp)
   27aa4:	df000904 	addi	fp,sp,36
   27aa8:	e13ffc15 	stw	r4,-16(fp)
   27aac:	e17ffd15 	stw	r5,-12(fp)
   27ab0:	e1bffe15 	stw	r6,-8(fp)
   27ab4:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27ab8:	e0bffc17 	ldw	r2,-16(fp)
   27abc:	10806e17 	ldw	r2,440(r2)
   27ac0:	e0bff915 	stw	r2,-28(fp)
	JSAMPARRAY colorindex = cquantize->colorindex;
   27ac4:	e0bff917 	ldw	r2,-28(fp)
   27ac8:	10800617 	ldw	r2,24(r2)
   27acc:	e0bffa15 	stw	r2,-24(fp)
	register int pixcode, ci;
	register JSAMPROW ptrin, ptrout;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   27ad0:	e0bffc17 	ldw	r2,-16(fp)
   27ad4:	10801717 	ldw	r2,92(r2)
   27ad8:	e0bffb15 	stw	r2,-20(fp)
	register int nc = cinfo->out_color_components;
   27adc:	e0bffc17 	ldw	r2,-16(fp)
   27ae0:	15001917 	ldw	r20,100(r2)

	for (row = 0; row < num_rows; row++) {
   27ae4:	e03ff715 	stw	zero,-36(fp)
   27ae8:	00002c06 	br	27b9c <color_quantize+0x114>
		ptrin = input_buf[row];
   27aec:	e0bff717 	ldw	r2,-36(fp)
   27af0:	1085883a 	add	r2,r2,r2
   27af4:	1085883a 	add	r2,r2,r2
   27af8:	e0fffd17 	ldw	r3,-12(fp)
   27afc:	1885883a 	add	r2,r3,r2
   27b00:	14400017 	ldw	r17,0(r2)
		ptrout = output_buf[row];
   27b04:	e0bff717 	ldw	r2,-36(fp)
   27b08:	1085883a 	add	r2,r2,r2
   27b0c:	1085883a 	add	r2,r2,r2
   27b10:	e0fffe17 	ldw	r3,-8(fp)
   27b14:	1885883a 	add	r2,r3,r2
   27b18:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
   27b1c:	e0bffb17 	ldw	r2,-20(fp)
   27b20:	e0bff815 	stw	r2,-32(fp)
   27b24:	00001806 	br	27b88 <color_quantize+0x100>
			pixcode = 0;
   27b28:	0027883a 	mov	r19,zero
			for (ci = 0; ci < nc; ci++) {
   27b2c:	0021883a 	mov	r16,zero
   27b30:	00000e06 	br	27b6c <color_quantize+0xe4>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
   27b34:	8005883a 	mov	r2,r16
   27b38:	1085883a 	add	r2,r2,r2
   27b3c:	1085883a 	add	r2,r2,r2
   27b40:	e0fffa17 	ldw	r3,-24(fp)
   27b44:	1885883a 	add	r2,r3,r2
   27b48:	10c00017 	ldw	r3,0(r2)
   27b4c:	88800003 	ldbu	r2,0(r17)
   27b50:	10803fcc 	andi	r2,r2,255
   27b54:	1885883a 	add	r2,r3,r2
   27b58:	10800003 	ldbu	r2,0(r2)
   27b5c:	10803fcc 	andi	r2,r2,255
   27b60:	98a7883a 	add	r19,r19,r2
   27b64:	8c400044 	addi	r17,r17,1
	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
			pixcode = 0;
			for (ci = 0; ci < nc; ci++) {
   27b68:	84000044 	addi	r16,r16,1
   27b6c:	853ff116 	blt	r16,r20,27b34 <color_quantize+0xac>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
			}
			*ptrout++ = (JSAMPLE) pixcode;
   27b70:	9805883a 	mov	r2,r19
   27b74:	90800005 	stb	r2,0(r18)
   27b78:	94800044 	addi	r18,r18,1
	register int nc = cinfo->out_color_components;

	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
   27b7c:	e0bff817 	ldw	r2,-32(fp)
   27b80:	10bfffc4 	addi	r2,r2,-1
   27b84:	e0bff815 	stw	r2,-32(fp)
   27b88:	e0bff817 	ldw	r2,-32(fp)
   27b8c:	103fe61e 	bne	r2,zero,27b28 <color_quantize+0xa0>
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
	register int nc = cinfo->out_color_components;

	for (row = 0; row < num_rows; row++) {
   27b90:	e0bff717 	ldw	r2,-36(fp)
   27b94:	10800044 	addi	r2,r2,1
   27b98:	e0bff715 	stw	r2,-36(fp)
   27b9c:	e0fff717 	ldw	r3,-36(fp)
   27ba0:	e0bfff17 	ldw	r2,-4(fp)
   27ba4:	18bfd116 	blt	r3,r2,27aec <color_quantize+0x64>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
			}
			*ptrout++ = (JSAMPLE) pixcode;
		}
	}
}
   27ba8:	e037883a 	mov	sp,fp
   27bac:	df000517 	ldw	fp,20(sp)
   27bb0:	dd000417 	ldw	r20,16(sp)
   27bb4:	dcc00317 	ldw	r19,12(sp)
   27bb8:	dc800217 	ldw	r18,8(sp)
   27bbc:	dc400117 	ldw	r17,4(sp)
   27bc0:	dc000017 	ldw	r16,0(sp)
   27bc4:	dec00604 	addi	sp,sp,24
   27bc8:	f800283a 	ret

00027bcc <color_quantize3>:

METHODDEF(void)
	color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* Fast path for out_color_components==3, no dithering */
{
   27bcc:	defff104 	addi	sp,sp,-60
   27bd0:	df000e15 	stw	fp,56(sp)
   27bd4:	dc800d15 	stw	r18,52(sp)
   27bd8:	dc400c15 	stw	r17,48(sp)
   27bdc:	dc000b15 	stw	r16,44(sp)
   27be0:	df000b04 	addi	fp,sp,44
   27be4:	e13ffc15 	stw	r4,-16(fp)
   27be8:	e17ffd15 	stw	r5,-12(fp)
   27bec:	e1bffe15 	stw	r6,-8(fp)
   27bf0:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27bf4:	e0bffc17 	ldw	r2,-16(fp)
   27bf8:	10806e17 	ldw	r2,440(r2)
   27bfc:	e0bff715 	stw	r2,-36(fp)
	register int pixcode;
	register JSAMPROW ptrin, ptrout;
	JSAMPROW colorindex0 = cquantize->colorindex[0];
   27c00:	e0bff717 	ldw	r2,-36(fp)
   27c04:	10800617 	ldw	r2,24(r2)
   27c08:	10800017 	ldw	r2,0(r2)
   27c0c:	e0bff815 	stw	r2,-32(fp)
	JSAMPROW colorindex1 = cquantize->colorindex[1];
   27c10:	e0bff717 	ldw	r2,-36(fp)
   27c14:	10800617 	ldw	r2,24(r2)
   27c18:	10800117 	ldw	r2,4(r2)
   27c1c:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW colorindex2 = cquantize->colorindex[2];
   27c20:	e0bff717 	ldw	r2,-36(fp)
   27c24:	10800617 	ldw	r2,24(r2)
   27c28:	10800217 	ldw	r2,8(r2)
   27c2c:	e0bffa15 	stw	r2,-24(fp)
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   27c30:	e0bffc17 	ldw	r2,-16(fp)
   27c34:	10801717 	ldw	r2,92(r2)
   27c38:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
   27c3c:	e03ff515 	stw	zero,-44(fp)
   27c40:	00003106 	br	27d08 <color_quantize3+0x13c>
		ptrin = input_buf[row];
   27c44:	e0bff517 	ldw	r2,-44(fp)
   27c48:	1085883a 	add	r2,r2,r2
   27c4c:	1085883a 	add	r2,r2,r2
   27c50:	e0fffd17 	ldw	r3,-12(fp)
   27c54:	1885883a 	add	r2,r3,r2
   27c58:	14000017 	ldw	r16,0(r2)
		ptrout = output_buf[row];
   27c5c:	e0bff517 	ldw	r2,-44(fp)
   27c60:	1085883a 	add	r2,r2,r2
   27c64:	1085883a 	add	r2,r2,r2
   27c68:	e0fffe17 	ldw	r3,-8(fp)
   27c6c:	1885883a 	add	r2,r3,r2
   27c70:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
   27c74:	e0bffb17 	ldw	r2,-20(fp)
   27c78:	e0bff615 	stw	r2,-40(fp)
   27c7c:	00001d06 	br	27cf4 <color_quantize3+0x128>
			pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
   27c80:	80800003 	ldbu	r2,0(r16)
   27c84:	10803fcc 	andi	r2,r2,255
   27c88:	e0fff817 	ldw	r3,-32(fp)
   27c8c:	1885883a 	add	r2,r3,r2
   27c90:	10800003 	ldbu	r2,0(r2)
   27c94:	14403fcc 	andi	r17,r2,255
   27c98:	84000044 	addi	r16,r16,1
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
   27c9c:	80800003 	ldbu	r2,0(r16)
   27ca0:	10803fcc 	andi	r2,r2,255
   27ca4:	e0fff917 	ldw	r3,-28(fp)
   27ca8:	1885883a 	add	r2,r3,r2
   27cac:	10800003 	ldbu	r2,0(r2)
   27cb0:	10803fcc 	andi	r2,r2,255
   27cb4:	88a3883a 	add	r17,r17,r2
   27cb8:	84000044 	addi	r16,r16,1
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
   27cbc:	80800003 	ldbu	r2,0(r16)
   27cc0:	10803fcc 	andi	r2,r2,255
   27cc4:	e0fffa17 	ldw	r3,-24(fp)
   27cc8:	1885883a 	add	r2,r3,r2
   27ccc:	10800003 	ldbu	r2,0(r2)
   27cd0:	10803fcc 	andi	r2,r2,255
   27cd4:	88a3883a 	add	r17,r17,r2
   27cd8:	84000044 	addi	r16,r16,1
			*ptrout++ = (JSAMPLE) pixcode;
   27cdc:	8805883a 	mov	r2,r17
   27ce0:	90800005 	stb	r2,0(r18)
   27ce4:	94800044 	addi	r18,r18,1
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
   27ce8:	e0bff617 	ldw	r2,-40(fp)
   27cec:	10bfffc4 	addi	r2,r2,-1
   27cf0:	e0bff615 	stw	r2,-40(fp)
   27cf4:	e0bff617 	ldw	r2,-40(fp)
   27cf8:	103fe11e 	bne	r2,zero,27c80 <color_quantize3+0xb4>
	JSAMPROW colorindex2 = cquantize->colorindex[2];
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
   27cfc:	e0bff517 	ldw	r2,-44(fp)
   27d00:	10800044 	addi	r2,r2,1
   27d04:	e0bff515 	stw	r2,-44(fp)
   27d08:	e0fff517 	ldw	r3,-44(fp)
   27d0c:	e0bfff17 	ldw	r2,-4(fp)
   27d10:	18bfcc16 	blt	r3,r2,27c44 <color_quantize3+0x78>
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
			*ptrout++ = (JSAMPLE) pixcode;
		}
	}
}
   27d14:	e037883a 	mov	sp,fp
   27d18:	df000317 	ldw	fp,12(sp)
   27d1c:	dc800217 	ldw	r18,8(sp)
   27d20:	dc400117 	ldw	r17,4(sp)
   27d24:	dc000017 	ldw	r16,0(sp)
   27d28:	dec00404 	addi	sp,sp,16
   27d2c:	f800283a 	ret

00027d30 <quantize_ord_dither>:

METHODDEF(void)
	quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, with ordered dithering */
{
   27d30:	deffee04 	addi	sp,sp,-72
   27d34:	dfc01115 	stw	ra,68(sp)
   27d38:	df001015 	stw	fp,64(sp)
   27d3c:	dc400f15 	stw	r17,60(sp)
   27d40:	dc000e15 	stw	r16,56(sp)
   27d44:	df000e04 	addi	fp,sp,56
   27d48:	e13ffc15 	stw	r4,-16(fp)
   27d4c:	e17ffd15 	stw	r5,-12(fp)
   27d50:	e1bffe15 	stw	r6,-8(fp)
   27d54:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27d58:	e0bffc17 	ldw	r2,-16(fp)
   27d5c:	10806e17 	ldw	r2,440(r2)
   27d60:	e0bff615 	stw	r2,-40(fp)
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex_ci;
	int * dither;			/* points to active row of dither matrix */
	int row_index, col_index;	/* current indexes into dither matrix */
	int nc = cinfo->out_color_components;
   27d64:	e0bffc17 	ldw	r2,-16(fp)
   27d68:	10801917 	ldw	r2,100(r2)
   27d6c:	e0bff715 	stw	r2,-36(fp)
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   27d70:	e0bffc17 	ldw	r2,-16(fp)
   27d74:	10801717 	ldw	r2,92(r2)
   27d78:	e0bff815 	stw	r2,-32(fp)

	for (row = 0; row < num_rows; row++) {
   27d7c:	e03ff415 	stw	zero,-48(fp)
   27d80:	00005e06 	br	27efc <quantize_ord_dither+0x1cc>
		/* Initialize output values to 0 so can process components separately */
		jzero_far((void FAR *) output_buf[row],
   27d84:	e0bff417 	ldw	r2,-48(fp)
   27d88:	1085883a 	add	r2,r2,r2
   27d8c:	1085883a 	add	r2,r2,r2
   27d90:	e0fffe17 	ldw	r3,-8(fp)
   27d94:	1885883a 	add	r2,r3,r2
   27d98:	10800017 	ldw	r2,0(r2)
   27d9c:	1009883a 	mov	r4,r2
   27da0:	e17ff817 	ldw	r5,-32(fp)
   27da4:	002b23c0 	call	2b23c <jzero_far>
			(size_t) (width * SIZEOF(JSAMPLE)));
		row_index = cquantize->row_index;
   27da8:	e0bff617 	ldw	r2,-40(fp)
   27dac:	10800c17 	ldw	r2,48(r2)
   27db0:	e0bff915 	stw	r2,-28(fp)
		for (ci = 0; ci < nc; ci++) {
   27db4:	e03ff315 	stw	zero,-52(fp)
   27db8:	00004306 	br	27ec8 <quantize_ord_dither+0x198>
			input_ptr = input_buf[row] + ci;
   27dbc:	e0bff417 	ldw	r2,-48(fp)
   27dc0:	1085883a 	add	r2,r2,r2
   27dc4:	1085883a 	add	r2,r2,r2
   27dc8:	e0fffd17 	ldw	r3,-12(fp)
   27dcc:	1885883a 	add	r2,r3,r2
   27dd0:	10c00017 	ldw	r3,0(r2)
   27dd4:	e0bff317 	ldw	r2,-52(fp)
   27dd8:	18a3883a 	add	r17,r3,r2
			output_ptr = output_buf[row];
   27ddc:	e0bff417 	ldw	r2,-48(fp)
   27de0:	1085883a 	add	r2,r2,r2
   27de4:	1085883a 	add	r2,r2,r2
   27de8:	e0fffe17 	ldw	r3,-8(fp)
   27dec:	1885883a 	add	r2,r3,r2
   27df0:	14000017 	ldw	r16,0(r2)
			colorindex_ci = cquantize->colorindex[ci];
   27df4:	e0bff617 	ldw	r2,-40(fp)
   27df8:	10c00617 	ldw	r3,24(r2)
   27dfc:	e0bff317 	ldw	r2,-52(fp)
   27e00:	1085883a 	add	r2,r2,r2
   27e04:	1085883a 	add	r2,r2,r2
   27e08:	1885883a 	add	r2,r3,r2
   27e0c:	10800017 	ldw	r2,0(r2)
   27e10:	e0bffa15 	stw	r2,-24(fp)
			dither = cquantize->odither[ci][row_index];
   27e14:	e0fff617 	ldw	r3,-40(fp)
   27e18:	e0bff317 	ldw	r2,-52(fp)
   27e1c:	10800344 	addi	r2,r2,13
   27e20:	1085883a 	add	r2,r2,r2
   27e24:	1085883a 	add	r2,r2,r2
   27e28:	1885883a 	add	r2,r3,r2
   27e2c:	10c00017 	ldw	r3,0(r2)
   27e30:	e0bff917 	ldw	r2,-28(fp)
   27e34:	100491ba 	slli	r2,r2,6
   27e38:	1885883a 	add	r2,r3,r2
   27e3c:	e0bffb15 	stw	r2,-20(fp)
			col_index = 0;
   27e40:	e03ff215 	stw	zero,-56(fp)

			for (col = width; col > 0; col--) {
   27e44:	e0bff817 	ldw	r2,-32(fp)
   27e48:	e0bff515 	stw	r2,-44(fp)
   27e4c:	00001906 	br	27eb4 <quantize_ord_dither+0x184>
				* Range-limiting need not be done explicitly, as we have extended
				* the colorindex table to produce the right answers for out-of-range
				* inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
				* required amount of padding.
				*/
				*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
   27e50:	80c00003 	ldbu	r3,0(r16)
   27e54:	88800003 	ldbu	r2,0(r17)
   27e58:	11003fcc 	andi	r4,r2,255
   27e5c:	e0bff217 	ldw	r2,-56(fp)
   27e60:	1085883a 	add	r2,r2,r2
   27e64:	1085883a 	add	r2,r2,r2
   27e68:	e17ffb17 	ldw	r5,-20(fp)
   27e6c:	2885883a 	add	r2,r5,r2
   27e70:	10800017 	ldw	r2,0(r2)
   27e74:	2085883a 	add	r2,r4,r2
   27e78:	e13ffa17 	ldw	r4,-24(fp)
   27e7c:	2085883a 	add	r2,r4,r2
   27e80:	10800003 	ldbu	r2,0(r2)
   27e84:	1885883a 	add	r2,r3,r2
   27e88:	80800005 	stb	r2,0(r16)
				input_ptr += nc;
   27e8c:	e0bff717 	ldw	r2,-36(fp)
   27e90:	88a3883a 	add	r17,r17,r2
				output_ptr++;
   27e94:	84000044 	addi	r16,r16,1
				col_index = (col_index + 1) & ODITHER_MASK;
   27e98:	e0bff217 	ldw	r2,-56(fp)
   27e9c:	10800044 	addi	r2,r2,1
   27ea0:	108003cc 	andi	r2,r2,15
   27ea4:	e0bff215 	stw	r2,-56(fp)
			output_ptr = output_buf[row];
			colorindex_ci = cquantize->colorindex[ci];
			dither = cquantize->odither[ci][row_index];
			col_index = 0;

			for (col = width; col > 0; col--) {
   27ea8:	e0bff517 	ldw	r2,-44(fp)
   27eac:	10bfffc4 	addi	r2,r2,-1
   27eb0:	e0bff515 	stw	r2,-44(fp)
   27eb4:	e0bff517 	ldw	r2,-44(fp)
   27eb8:	103fe51e 	bne	r2,zero,27e50 <quantize_ord_dither+0x120>
	for (row = 0; row < num_rows; row++) {
		/* Initialize output values to 0 so can process components separately */
		jzero_far((void FAR *) output_buf[row],
			(size_t) (width * SIZEOF(JSAMPLE)));
		row_index = cquantize->row_index;
		for (ci = 0; ci < nc; ci++) {
   27ebc:	e0bff317 	ldw	r2,-52(fp)
   27ec0:	10800044 	addi	r2,r2,1
   27ec4:	e0bff315 	stw	r2,-52(fp)
   27ec8:	e0fff317 	ldw	r3,-52(fp)
   27ecc:	e0bff717 	ldw	r2,-36(fp)
   27ed0:	18bfba16 	blt	r3,r2,27dbc <quantize_ord_dither+0x8c>
				output_ptr++;
				col_index = (col_index + 1) & ODITHER_MASK;
			}
		}
		/* Advance row index for next row */
		row_index = (row_index + 1) & ODITHER_MASK;
   27ed4:	e0bff917 	ldw	r2,-28(fp)
   27ed8:	10800044 	addi	r2,r2,1
   27edc:	108003cc 	andi	r2,r2,15
   27ee0:	e0bff915 	stw	r2,-28(fp)
		cquantize->row_index = row_index;
   27ee4:	e0bff617 	ldw	r2,-40(fp)
   27ee8:	e0fff917 	ldw	r3,-28(fp)
   27eec:	10c00c15 	stw	r3,48(r2)
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
   27ef0:	e0bff417 	ldw	r2,-48(fp)
   27ef4:	10800044 	addi	r2,r2,1
   27ef8:	e0bff415 	stw	r2,-48(fp)
   27efc:	e0fff417 	ldw	r3,-48(fp)
   27f00:	e0bfff17 	ldw	r2,-4(fp)
   27f04:	18bf9f16 	blt	r3,r2,27d84 <quantize_ord_dither+0x54>
		}
		/* Advance row index for next row */
		row_index = (row_index + 1) & ODITHER_MASK;
		cquantize->row_index = row_index;
	}
}
   27f08:	e037883a 	mov	sp,fp
   27f0c:	dfc00317 	ldw	ra,12(sp)
   27f10:	df000217 	ldw	fp,8(sp)
   27f14:	dc400117 	ldw	r17,4(sp)
   27f18:	dc000017 	ldw	r16,0(sp)
   27f1c:	dec00404 	addi	sp,sp,16
   27f20:	f800283a 	ret

00027f24 <quantize3_ord_dither>:

METHODDEF(void)
	quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* Fast path for out_color_components==3, with ordered dithering */
{
   27f24:	deffec04 	addi	sp,sp,-80
   27f28:	df001315 	stw	fp,76(sp)
   27f2c:	dc801215 	stw	r18,72(sp)
   27f30:	dc401115 	stw	r17,68(sp)
   27f34:	dc001015 	stw	r16,64(sp)
   27f38:	df001004 	addi	fp,sp,64
   27f3c:	e13ffc15 	stw	r4,-16(fp)
   27f40:	e17ffd15 	stw	r5,-12(fp)
   27f44:	e1bffe15 	stw	r6,-8(fp)
   27f48:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   27f4c:	e0bffc17 	ldw	r2,-16(fp)
   27f50:	10806e17 	ldw	r2,440(r2)
   27f54:	e0bff315 	stw	r2,-52(fp)
	register int pixcode;
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex0 = cquantize->colorindex[0];
   27f58:	e0bff317 	ldw	r2,-52(fp)
   27f5c:	10800617 	ldw	r2,24(r2)
   27f60:	10800017 	ldw	r2,0(r2)
   27f64:	e0bff415 	stw	r2,-48(fp)
	JSAMPROW colorindex1 = cquantize->colorindex[1];
   27f68:	e0bff317 	ldw	r2,-52(fp)
   27f6c:	10800617 	ldw	r2,24(r2)
   27f70:	10800117 	ldw	r2,4(r2)
   27f74:	e0bff515 	stw	r2,-44(fp)
	JSAMPROW colorindex2 = cquantize->colorindex[2];
   27f78:	e0bff317 	ldw	r2,-52(fp)
   27f7c:	10800617 	ldw	r2,24(r2)
   27f80:	10800217 	ldw	r2,8(r2)
   27f84:	e0bff615 	stw	r2,-40(fp)
	int * dither1;
	int * dither2;
	int row_index, col_index;	/* current indexes into dither matrix */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   27f88:	e0bffc17 	ldw	r2,-16(fp)
   27f8c:	10801717 	ldw	r2,92(r2)
   27f90:	e0bff715 	stw	r2,-36(fp)

	for (row = 0; row < num_rows; row++) {
   27f94:	e03ff115 	stw	zero,-60(fp)
   27f98:	00006706 	br	28138 <quantize3_ord_dither+0x214>
		row_index = cquantize->row_index;
   27f9c:	e0bff317 	ldw	r2,-52(fp)
   27fa0:	10800c17 	ldw	r2,48(r2)
   27fa4:	e0bff815 	stw	r2,-32(fp)
		input_ptr = input_buf[row];
   27fa8:	e0bff117 	ldw	r2,-60(fp)
   27fac:	1085883a 	add	r2,r2,r2
   27fb0:	1085883a 	add	r2,r2,r2
   27fb4:	e0fffd17 	ldw	r3,-12(fp)
   27fb8:	1885883a 	add	r2,r3,r2
   27fbc:	14000017 	ldw	r16,0(r2)
		output_ptr = output_buf[row];
   27fc0:	e0bff117 	ldw	r2,-60(fp)
   27fc4:	1085883a 	add	r2,r2,r2
   27fc8:	1085883a 	add	r2,r2,r2
   27fcc:	e0fffe17 	ldw	r3,-8(fp)
   27fd0:	1885883a 	add	r2,r3,r2
   27fd4:	14800017 	ldw	r18,0(r2)
		dither0 = cquantize->odither[0][row_index];
   27fd8:	e0bff317 	ldw	r2,-52(fp)
   27fdc:	10c00d17 	ldw	r3,52(r2)
   27fe0:	e0bff817 	ldw	r2,-32(fp)
   27fe4:	100491ba 	slli	r2,r2,6
   27fe8:	1885883a 	add	r2,r3,r2
   27fec:	e0bff915 	stw	r2,-28(fp)
		dither1 = cquantize->odither[1][row_index];
   27ff0:	e0bff317 	ldw	r2,-52(fp)
   27ff4:	10c00e17 	ldw	r3,56(r2)
   27ff8:	e0bff817 	ldw	r2,-32(fp)
   27ffc:	100491ba 	slli	r2,r2,6
   28000:	1885883a 	add	r2,r3,r2
   28004:	e0bffa15 	stw	r2,-24(fp)
		dither2 = cquantize->odither[2][row_index];
   28008:	e0bff317 	ldw	r2,-52(fp)
   2800c:	10c00f17 	ldw	r3,60(r2)
   28010:	e0bff817 	ldw	r2,-32(fp)
   28014:	100491ba 	slli	r2,r2,6
   28018:	1885883a 	add	r2,r3,r2
   2801c:	e0bffb15 	stw	r2,-20(fp)
		col_index = 0;
   28020:	e03ff015 	stw	zero,-64(fp)

		for (col = width; col > 0; col--) {
   28024:	e0bff717 	ldw	r2,-36(fp)
   28028:	e0bff215 	stw	r2,-56(fp)
   2802c:	00003606 	br	28108 <quantize3_ord_dither+0x1e4>
			pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
   28030:	80800003 	ldbu	r2,0(r16)
   28034:	10c03fcc 	andi	r3,r2,255
   28038:	e0bff017 	ldw	r2,-64(fp)
   2803c:	1085883a 	add	r2,r2,r2
   28040:	1085883a 	add	r2,r2,r2
   28044:	e13ff917 	ldw	r4,-28(fp)
   28048:	2085883a 	add	r2,r4,r2
   2804c:	10800017 	ldw	r2,0(r2)
   28050:	1885883a 	add	r2,r3,r2
   28054:	e0fff417 	ldw	r3,-48(fp)
   28058:	1885883a 	add	r2,r3,r2
   2805c:	10800003 	ldbu	r2,0(r2)
   28060:	14403fcc 	andi	r17,r2,255
   28064:	84000044 	addi	r16,r16,1
				dither0[col_index]]);
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
   28068:	80800003 	ldbu	r2,0(r16)
   2806c:	10c03fcc 	andi	r3,r2,255
   28070:	e0bff017 	ldw	r2,-64(fp)
   28074:	1085883a 	add	r2,r2,r2
   28078:	1085883a 	add	r2,r2,r2
   2807c:	e13ffa17 	ldw	r4,-24(fp)
   28080:	2085883a 	add	r2,r4,r2
   28084:	10800017 	ldw	r2,0(r2)
   28088:	1885883a 	add	r2,r3,r2
   2808c:	e0fff517 	ldw	r3,-44(fp)
   28090:	1885883a 	add	r2,r3,r2
   28094:	10800003 	ldbu	r2,0(r2)
   28098:	10803fcc 	andi	r2,r2,255
   2809c:	88a3883a 	add	r17,r17,r2
   280a0:	84000044 	addi	r16,r16,1
				dither1[col_index]]);
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
   280a4:	80800003 	ldbu	r2,0(r16)
   280a8:	10c03fcc 	andi	r3,r2,255
   280ac:	e0bff017 	ldw	r2,-64(fp)
   280b0:	1085883a 	add	r2,r2,r2
   280b4:	1085883a 	add	r2,r2,r2
   280b8:	e13ffb17 	ldw	r4,-20(fp)
   280bc:	2085883a 	add	r2,r4,r2
   280c0:	10800017 	ldw	r2,0(r2)
   280c4:	1885883a 	add	r2,r3,r2
   280c8:	e0fff617 	ldw	r3,-40(fp)
   280cc:	1885883a 	add	r2,r3,r2
   280d0:	10800003 	ldbu	r2,0(r2)
   280d4:	10803fcc 	andi	r2,r2,255
   280d8:	88a3883a 	add	r17,r17,r2
   280dc:	84000044 	addi	r16,r16,1
				dither2[col_index]]);
			*output_ptr++ = (JSAMPLE) pixcode;
   280e0:	8805883a 	mov	r2,r17
   280e4:	90800005 	stb	r2,0(r18)
   280e8:	94800044 	addi	r18,r18,1
			col_index = (col_index + 1) & ODITHER_MASK;
   280ec:	e0bff017 	ldw	r2,-64(fp)
   280f0:	10800044 	addi	r2,r2,1
   280f4:	108003cc 	andi	r2,r2,15
   280f8:	e0bff015 	stw	r2,-64(fp)
		dither0 = cquantize->odither[0][row_index];
		dither1 = cquantize->odither[1][row_index];
		dither2 = cquantize->odither[2][row_index];
		col_index = 0;

		for (col = width; col > 0; col--) {
   280fc:	e0bff217 	ldw	r2,-56(fp)
   28100:	10bfffc4 	addi	r2,r2,-1
   28104:	e0bff215 	stw	r2,-56(fp)
   28108:	e0bff217 	ldw	r2,-56(fp)
   2810c:	103fc81e 	bne	r2,zero,28030 <quantize3_ord_dither+0x10c>
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
				dither2[col_index]]);
			*output_ptr++ = (JSAMPLE) pixcode;
			col_index = (col_index + 1) & ODITHER_MASK;
		}
		row_index = (row_index + 1) & ODITHER_MASK;
   28110:	e0bff817 	ldw	r2,-32(fp)
   28114:	10800044 	addi	r2,r2,1
   28118:	108003cc 	andi	r2,r2,15
   2811c:	e0bff815 	stw	r2,-32(fp)
		cquantize->row_index = row_index;
   28120:	e0bff317 	ldw	r2,-52(fp)
   28124:	e0fff817 	ldw	r3,-32(fp)
   28128:	10c00c15 	stw	r3,48(r2)
	int row_index, col_index;	/* current indexes into dither matrix */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
   2812c:	e0bff117 	ldw	r2,-60(fp)
   28130:	10800044 	addi	r2,r2,1
   28134:	e0bff115 	stw	r2,-60(fp)
   28138:	e0fff117 	ldw	r3,-60(fp)
   2813c:	e0bfff17 	ldw	r2,-4(fp)
   28140:	18bf9616 	blt	r3,r2,27f9c <quantize3_ord_dither+0x78>
			col_index = (col_index + 1) & ODITHER_MASK;
		}
		row_index = (row_index + 1) & ODITHER_MASK;
		cquantize->row_index = row_index;
	}
}
   28144:	e037883a 	mov	sp,fp
   28148:	df000317 	ldw	fp,12(sp)
   2814c:	dc800217 	ldw	r18,8(sp)
   28150:	dc400117 	ldw	r17,4(sp)
   28154:	dc000017 	ldw	r16,0(sp)
   28158:	dec00404 	addi	sp,sp,16
   2815c:	f800283a 	ret

00028160 <quantize_fs_dither>:

METHODDEF(void)
	quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, with Floyd-Steinberg dithering */
{
   28160:	deffe604 	addi	sp,sp,-104
   28164:	dfc01915 	stw	ra,100(sp)
   28168:	df001815 	stw	fp,96(sp)
   2816c:	dcc01715 	stw	r19,92(sp)
   28170:	dc801615 	stw	r18,88(sp)
   28174:	dc401515 	stw	r17,84(sp)
   28178:	dc001415 	stw	r16,80(sp)
   2817c:	df001404 	addi	fp,sp,80
   28180:	e13ffc15 	stw	r4,-16(fp)
   28184:	e17ffd15 	stw	r5,-12(fp)
   28188:	e1bffe15 	stw	r6,-8(fp)
   2818c:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   28190:	e0bffc17 	ldw	r2,-16(fp)
   28194:	10806e17 	ldw	r2,440(r2)
   28198:	e0bff315 	stw	r2,-52(fp)
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex_ci;
	JSAMPROW colormap_ci;
	int pixcode;
	int nc = cinfo->out_color_components;
   2819c:	e0bffc17 	ldw	r2,-16(fp)
   281a0:	10801917 	ldw	r2,100(r2)
   281a4:	e0bff415 	stw	r2,-48(fp)
	int dir;			/* 1 for left-to-right, -1 for right-to-left */
	int dirnc;			/* dir * nc */
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   281a8:	e0bffc17 	ldw	r2,-16(fp)
   281ac:	10801717 	ldw	r2,92(r2)
   281b0:	e0bff515 	stw	r2,-44(fp)
	JSAMPLE *range_limit = cinfo->sample_range_limit;
   281b4:	e0bffc17 	ldw	r2,-16(fp)
   281b8:	10804917 	ldw	r2,292(r2)
   281bc:	e0bff615 	stw	r2,-40(fp)
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
   281c0:	e03ff115 	stw	zero,-60(fp)
   281c4:	0000ad06 	br	2847c <quantize_fs_dither+0x31c>
			/* Initialize output values to 0 so can process components separately */
			jzero_far((void FAR *) output_buf[row],
   281c8:	e0bff117 	ldw	r2,-60(fp)
   281cc:	1085883a 	add	r2,r2,r2
   281d0:	1085883a 	add	r2,r2,r2
   281d4:	e0fffe17 	ldw	r3,-8(fp)
   281d8:	1885883a 	add	r2,r3,r2
   281dc:	10800017 	ldw	r2,0(r2)
   281e0:	1009883a 	mov	r4,r2
   281e4:	e17ff517 	ldw	r5,-44(fp)
   281e8:	002b23c0 	call	2b23c <jzero_far>
				(size_t) (width * SIZEOF(JSAMPLE)));
			for (ci = 0; ci < nc; ci++) {
   281ec:	e03ff015 	stw	zero,-64(fp)
   281f0:	00009506 	br	28448 <quantize_fs_dither+0x2e8>
				input_ptr = input_buf[row] + ci;
   281f4:	e0bff117 	ldw	r2,-60(fp)
   281f8:	1085883a 	add	r2,r2,r2
   281fc:	1085883a 	add	r2,r2,r2
   28200:	e0fffd17 	ldw	r3,-12(fp)
   28204:	1885883a 	add	r2,r3,r2
   28208:	10c00017 	ldw	r3,0(r2)
   2820c:	e0bff017 	ldw	r2,-64(fp)
   28210:	18a7883a 	add	r19,r3,r2
				output_ptr = output_buf[row];
   28214:	e0bff117 	ldw	r2,-60(fp)
   28218:	1085883a 	add	r2,r2,r2
   2821c:	1085883a 	add	r2,r2,r2
   28220:	e0fffe17 	ldw	r3,-8(fp)
   28224:	1885883a 	add	r2,r3,r2
   28228:	14800017 	ldw	r18,0(r2)
				if (cquantize->on_odd_row) {
   2822c:	e0bff317 	ldw	r2,-52(fp)
   28230:	10801503 	ldbu	r2,84(r2)
   28234:	10803fcc 	andi	r2,r2,255
   28238:	10001b26 	beq	r2,zero,282a8 <quantize_fs_dither+0x148>
					/* work right to left in this row */
					input_ptr += (width-1) * nc; /* so point to rightmost pixel */
   2823c:	e0bff517 	ldw	r2,-44(fp)
   28240:	10ffffc4 	addi	r3,r2,-1
   28244:	e0bff417 	ldw	r2,-48(fp)
   28248:	1809883a 	mov	r4,r3
   2824c:	100b883a 	mov	r5,r2
   28250:	002c1540 	call	2c154 <__mulsi3>
   28254:	98a7883a 	add	r19,r19,r2
					output_ptr += width-1;
   28258:	e0bff517 	ldw	r2,-44(fp)
   2825c:	10bfffc4 	addi	r2,r2,-1
   28260:	90a5883a 	add	r18,r18,r2
					dir = -1;
   28264:	00bfffc4 	movi	r2,-1
   28268:	e0bfee15 	stw	r2,-72(fp)
					dirnc = -nc;
   2826c:	e0bff417 	ldw	r2,-48(fp)
   28270:	0085c83a 	sub	r2,zero,r2
   28274:	e0bfef15 	stw	r2,-68(fp)
					errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
   28278:	e0fff317 	ldw	r3,-52(fp)
   2827c:	e0bff017 	ldw	r2,-64(fp)
   28280:	10800444 	addi	r2,r2,17
   28284:	1085883a 	add	r2,r2,r2
   28288:	1085883a 	add	r2,r2,r2
   2828c:	1885883a 	add	r2,r3,r2
   28290:	10c00017 	ldw	r3,0(r2)
   28294:	e0bff517 	ldw	r2,-44(fp)
   28298:	10800044 	addi	r2,r2,1
   2829c:	1085883a 	add	r2,r2,r2
   282a0:	18a3883a 	add	r17,r3,r2
   282a4:	00000b06 	br	282d4 <quantize_fs_dither+0x174>
				} else {
					/* work left to right in this row */
					dir = 1;
   282a8:	00800044 	movi	r2,1
   282ac:	e0bfee15 	stw	r2,-72(fp)
					dirnc = nc;
   282b0:	e0bff417 	ldw	r2,-48(fp)
   282b4:	e0bfef15 	stw	r2,-68(fp)
					errorptr = cquantize->fserrors[ci]; /* => entry before first column */
   282b8:	e0fff317 	ldw	r3,-52(fp)
   282bc:	e0bff017 	ldw	r2,-64(fp)
   282c0:	10800444 	addi	r2,r2,17
   282c4:	1085883a 	add	r2,r2,r2
   282c8:	1085883a 	add	r2,r2,r2
   282cc:	1885883a 	add	r2,r3,r2
   282d0:	14400017 	ldw	r17,0(r2)
				}
				colorindex_ci = cquantize->colorindex[ci];
   282d4:	e0bff317 	ldw	r2,-52(fp)
   282d8:	10c00617 	ldw	r3,24(r2)
   282dc:	e0bff017 	ldw	r2,-64(fp)
   282e0:	1085883a 	add	r2,r2,r2
   282e4:	1085883a 	add	r2,r2,r2
   282e8:	1885883a 	add	r2,r3,r2
   282ec:	10800017 	ldw	r2,0(r2)
   282f0:	e0bff715 	stw	r2,-36(fp)
				colormap_ci = cquantize->sv_colormap[ci];
   282f4:	e0bff317 	ldw	r2,-52(fp)
   282f8:	10c00417 	ldw	r3,16(r2)
   282fc:	e0bff017 	ldw	r2,-64(fp)
   28300:	1085883a 	add	r2,r2,r2
   28304:	1085883a 	add	r2,r2,r2
   28308:	1885883a 	add	r2,r3,r2
   2830c:	10800017 	ldw	r2,0(r2)
   28310:	e0bff815 	stw	r2,-32(fp)
				/* Preset error values: no error propagated to first pixel from left */
				cur = 0;
   28314:	0021883a 	mov	r16,zero
				/* and no error propagated to row below yet */
				belowerr = bpreverr = 0;
   28318:	e03fed15 	stw	zero,-76(fp)
   2831c:	e0bfed17 	ldw	r2,-76(fp)
   28320:	e0bfec15 	stw	r2,-80(fp)

				for (col = width; col > 0; col--) {
   28324:	e0bff517 	ldw	r2,-44(fp)
   28328:	e0bff215 	stw	r2,-56(fp)
   2832c:	00003f06 	br	2842c <quantize_fs_dither+0x2cc>
					* round the error term (which is expressed * 16) to an integer.
					* RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
					* for either sign of the error value.
					* Note: errorptr points to *previous* column's array entry.
					*/
					cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
   28330:	e0bfee17 	ldw	r2,-72(fp)
   28334:	1085883a 	add	r2,r2,r2
   28338:	8885883a 	add	r2,r17,r2
   2833c:	1080000b 	ldhu	r2,0(r2)
   28340:	10bfffcc 	andi	r2,r2,65535
   28344:	10a0001c 	xori	r2,r2,32768
   28348:	10a00004 	addi	r2,r2,-32768
   2834c:	1405883a 	add	r2,r2,r16
   28350:	10800204 	addi	r2,r2,8
   28354:	1021d13a 	srai	r16,r2,4
					/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
					* The maximum error is +- MAXJSAMPLE; this sets the required size
					* of the range_limit array.
					*/
					cur += GETJSAMPLE(*input_ptr);
   28358:	98800003 	ldbu	r2,0(r19)
   2835c:	10803fcc 	andi	r2,r2,255
   28360:	80a1883a 	add	r16,r16,r2
					cur = GETJSAMPLE(range_limit[cur]);
   28364:	8005883a 	mov	r2,r16
   28368:	e0fff617 	ldw	r3,-40(fp)
   2836c:	1885883a 	add	r2,r3,r2
   28370:	10800003 	ldbu	r2,0(r2)
   28374:	14003fcc 	andi	r16,r2,255
					/* Select output value, accumulate into output code for this pixel */
					pixcode = GETJSAMPLE(colorindex_ci[cur]);
   28378:	8005883a 	mov	r2,r16
   2837c:	e0fff717 	ldw	r3,-36(fp)
   28380:	1885883a 	add	r2,r3,r2
   28384:	10800003 	ldbu	r2,0(r2)
   28388:	10803fcc 	andi	r2,r2,255
   2838c:	e0bff915 	stw	r2,-28(fp)
					*output_ptr += (JSAMPLE) pixcode;
   28390:	90c00003 	ldbu	r3,0(r18)
   28394:	e0bff917 	ldw	r2,-28(fp)
   28398:	1885883a 	add	r2,r3,r2
   2839c:	90800005 	stb	r2,0(r18)
					/* Compute actual representation error at this pixel */
					/* Note: we can do this even though we don't have the final */
					/* pixel code, because the colormap is orthogonal. */
					cur -= GETJSAMPLE(colormap_ci[pixcode]);
   283a0:	e0bff917 	ldw	r2,-28(fp)
   283a4:	e0fff817 	ldw	r3,-32(fp)
   283a8:	1885883a 	add	r2,r3,r2
   283ac:	10800003 	ldbu	r2,0(r2)
   283b0:	10803fcc 	andi	r2,r2,255
   283b4:	80a1c83a 	sub	r16,r16,r2
					/* Compute error fractions to be propagated to adjacent pixels.
					* Add these into the running sums, and simultaneously shift the
					* next-line error sums left by 1 column.
					*/
					bnexterr = cur;
   283b8:	e43ffa15 	stw	r16,-24(fp)
					delta = cur * 2;
   283bc:	8405883a 	add	r2,r16,r16
   283c0:	e0bffb15 	stw	r2,-20(fp)
					cur += delta;		/* form error * 3 */
   283c4:	e0bffb17 	ldw	r2,-20(fp)
   283c8:	80a1883a 	add	r16,r16,r2
					errorptr[0] = (FSERROR) (bpreverr + cur);
   283cc:	e0bfed17 	ldw	r2,-76(fp)
   283d0:	1007883a 	mov	r3,r2
   283d4:	8005883a 	mov	r2,r16
   283d8:	1885883a 	add	r2,r3,r2
   283dc:	8880000d 	sth	r2,0(r17)
					cur += delta;		/* form error * 5 */
   283e0:	e0bffb17 	ldw	r2,-20(fp)
   283e4:	80a1883a 	add	r16,r16,r2
					bpreverr = belowerr + cur;
   283e8:	e0bfec17 	ldw	r2,-80(fp)
   283ec:	1405883a 	add	r2,r2,r16
   283f0:	e0bfed15 	stw	r2,-76(fp)
					belowerr = bnexterr;
   283f4:	e0bffa17 	ldw	r2,-24(fp)
   283f8:	e0bfec15 	stw	r2,-80(fp)
					cur += delta;		/* form error * 7 */
   283fc:	e0bffb17 	ldw	r2,-20(fp)
   28400:	80a1883a 	add	r16,r16,r2
					/* At this point cur contains the 7/16 error value to be propagated
					* to the next pixel on the current line, and all the errors for the
					* next line have been shifted over. We are therefore ready to move on.
					*/
					input_ptr += dirnc;	/* advance input ptr to next column */
   28404:	e0bfef17 	ldw	r2,-68(fp)
   28408:	98a7883a 	add	r19,r19,r2
					output_ptr += dir;	/* advance output ptr to next column */
   2840c:	e0bfee17 	ldw	r2,-72(fp)
   28410:	90a5883a 	add	r18,r18,r2
					errorptr += dir;	/* advance errorptr to current column */
   28414:	e0bfee17 	ldw	r2,-72(fp)
   28418:	1085883a 	add	r2,r2,r2
   2841c:	88a3883a 	add	r17,r17,r2
				/* Preset error values: no error propagated to first pixel from left */
				cur = 0;
				/* and no error propagated to row below yet */
				belowerr = bpreverr = 0;

				for (col = width; col > 0; col--) {
   28420:	e0bff217 	ldw	r2,-56(fp)
   28424:	10bfffc4 	addi	r2,r2,-1
   28428:	e0bff215 	stw	r2,-56(fp)
   2842c:	e0bff217 	ldw	r2,-56(fp)
   28430:	103fbf1e 	bne	r2,zero,28330 <quantize_fs_dither+0x1d0>
				}
				/* Post-loop cleanup: we must unload the final error value into the
				* final fserrors[] entry.  Note we need not unload belowerr because
				* it is for the dummy column before or after the actual array.
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
   28434:	e0bfed17 	ldw	r2,-76(fp)
   28438:	8880000d 	sth	r2,0(r17)

		for (row = 0; row < num_rows; row++) {
			/* Initialize output values to 0 so can process components separately */
			jzero_far((void FAR *) output_buf[row],
				(size_t) (width * SIZEOF(JSAMPLE)));
			for (ci = 0; ci < nc; ci++) {
   2843c:	e0bff017 	ldw	r2,-64(fp)
   28440:	10800044 	addi	r2,r2,1
   28444:	e0bff015 	stw	r2,-64(fp)
   28448:	e0fff017 	ldw	r3,-64(fp)
   2844c:	e0bff417 	ldw	r2,-48(fp)
   28450:	18bf6816 	blt	r3,r2,281f4 <quantize_fs_dither+0x94>
				* final fserrors[] entry.  Note we need not unload belowerr because
				* it is for the dummy column before or after the actual array.
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
			}
			cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
   28454:	e0bff317 	ldw	r2,-52(fp)
   28458:	10801503 	ldbu	r2,84(r2)
   2845c:	10803fcc 	andi	r2,r2,255
   28460:	1005003a 	cmpeq	r2,r2,zero
   28464:	1007883a 	mov	r3,r2
   28468:	e0bff317 	ldw	r2,-52(fp)
   2846c:	10c01505 	stb	r3,84(r2)
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
	JSAMPLE *range_limit = cinfo->sample_range_limit;
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
   28470:	e0bff117 	ldw	r2,-60(fp)
   28474:	10800044 	addi	r2,r2,1
   28478:	e0bff115 	stw	r2,-60(fp)
   2847c:	e0fff117 	ldw	r3,-60(fp)
   28480:	e0bfff17 	ldw	r2,-4(fp)
   28484:	18bf5016 	blt	r3,r2,281c8 <quantize_fs_dither+0x68>
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
			}
			cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
		}
}
   28488:	e037883a 	mov	sp,fp
   2848c:	dfc00517 	ldw	ra,20(sp)
   28490:	df000417 	ldw	fp,16(sp)
   28494:	dcc00317 	ldw	r19,12(sp)
   28498:	dc800217 	ldw	r18,8(sp)
   2849c:	dc400117 	ldw	r17,4(sp)
   284a0:	dc000017 	ldw	r16,0(sp)
   284a4:	dec00604 	addi	sp,sp,24
   284a8:	f800283a 	ret

000284ac <alloc_fs_workspace>:
* Allocate workspace for Floyd-Steinberg errors.
*/

LOCAL(void)
	alloc_fs_workspace (j_decompress_ptr cinfo)
{
   284ac:	defffa04 	addi	sp,sp,-24
   284b0:	dfc00515 	stw	ra,20(sp)
   284b4:	df000415 	stw	fp,16(sp)
   284b8:	df000404 	addi	fp,sp,16
   284bc:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   284c0:	e0bfff17 	ldw	r2,-4(fp)
   284c4:	10806e17 	ldw	r2,440(r2)
   284c8:	e0bffd15 	stw	r2,-12(fp)
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
   284cc:	e0bfff17 	ldw	r2,-4(fp)
   284d0:	10801717 	ldw	r2,92(r2)
   284d4:	10800084 	addi	r2,r2,2
   284d8:	1085883a 	add	r2,r2,r2
   284dc:	e0bffe15 	stw	r2,-8(fp)
	for (i = 0; i < cinfo->out_color_components; i++) {
   284e0:	e03ffc15 	stw	zero,-16(fp)
   284e4:	00001206 	br	28530 <alloc_fs_workspace+0x84>
		cquantize->fserrors[i] = (FSERRPTR)
			(*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
   284e8:	e0bfff17 	ldw	r2,-4(fp)
   284ec:	10800117 	ldw	r2,4(r2)
   284f0:	10800117 	ldw	r2,4(r2)
   284f4:	e13fff17 	ldw	r4,-4(fp)
   284f8:	01400044 	movi	r5,1
   284fc:	e1bffe17 	ldw	r6,-8(fp)
   28500:	103ee83a 	callr	r2
   28504:	1007883a 	mov	r3,r2
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
	for (i = 0; i < cinfo->out_color_components; i++) {
		cquantize->fserrors[i] = (FSERRPTR)
   28508:	e13ffd17 	ldw	r4,-12(fp)
   2850c:	e0bffc17 	ldw	r2,-16(fp)
   28510:	10800444 	addi	r2,r2,17
   28514:	1085883a 	add	r2,r2,r2
   28518:	1085883a 	add	r2,r2,r2
   2851c:	2085883a 	add	r2,r4,r2
   28520:	10c00015 	stw	r3,0(r2)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
	for (i = 0; i < cinfo->out_color_components; i++) {
   28524:	e0bffc17 	ldw	r2,-16(fp)
   28528:	10800044 	addi	r2,r2,1
   2852c:	e0bffc15 	stw	r2,-16(fp)
   28530:	e0bfff17 	ldw	r2,-4(fp)
   28534:	10801917 	ldw	r2,100(r2)
   28538:	e0fffc17 	ldw	r3,-16(fp)
   2853c:	18bfea16 	blt	r3,r2,284e8 <alloc_fs_workspace+0x3c>
		cquantize->fserrors[i] = (FSERRPTR)
			(*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
	}
}
   28540:	e037883a 	mov	sp,fp
   28544:	dfc00117 	ldw	ra,4(sp)
   28548:	df000017 	ldw	fp,0(sp)
   2854c:	dec00204 	addi	sp,sp,8
   28550:	f800283a 	ret

00028554 <start_pass_1_quant>:
* Initialize for one-pass color quantization.
*/

METHODDEF(void)
	start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
   28554:	defff904 	addi	sp,sp,-28
   28558:	dfc00615 	stw	ra,24(sp)
   2855c:	df000515 	stw	fp,20(sp)
   28560:	df000504 	addi	fp,sp,20
   28564:	e13ffe15 	stw	r4,-8(fp)
   28568:	2805883a 	mov	r2,r5
   2856c:	e0bfff05 	stb	r2,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   28570:	e0bffe17 	ldw	r2,-8(fp)
   28574:	10806e17 	ldw	r2,440(r2)
   28578:	e0bffc15 	stw	r2,-16(fp)
	size_t arraysize;
	int i;

	/* Install my colormap. */
	cinfo->colormap = cquantize->sv_colormap;
   2857c:	e0bffc17 	ldw	r2,-16(fp)
   28580:	10c00417 	ldw	r3,16(r2)
   28584:	e0bffe17 	ldw	r2,-8(fp)
   28588:	10c01d15 	stw	r3,116(r2)
	cinfo->actual_number_of_colors = cquantize->sv_actual;
   2858c:	e0bffc17 	ldw	r2,-16(fp)
   28590:	10c00517 	ldw	r3,20(r2)
   28594:	e0bffe17 	ldw	r2,-8(fp)
   28598:	10c01c15 	stw	r3,112(r2)

	/* Initialize for desired dithering mode. */
	switch (cinfo->dither_mode) {
   2859c:	e0bffe17 	ldw	r2,-8(fp)
   285a0:	10801317 	ldw	r2,76(r2)
   285a4:	10c00060 	cmpeqi	r3,r2,1
   285a8:	1800121e 	bne	r3,zero,285f4 <start_pass_1_quant+0xa0>
   285ac:	0080032e 	bgeu	zero,r2,285bc <start_pass_1_quant+0x68>
   285b0:	108000a0 	cmpeqi	r2,r2,2
   285b4:	10002a1e 	bne	r2,zero,28660 <start_pass_1_quant+0x10c>
   285b8:	00004d06 	br	286f0 <start_pass_1_quant+0x19c>
	case JDITHER_NONE:
		if (cinfo->out_color_components == 3)
   285bc:	e0bffe17 	ldw	r2,-8(fp)
   285c0:	10801917 	ldw	r2,100(r2)
   285c4:	108000d8 	cmpnei	r2,r2,3
   285c8:	1000051e 	bne	r2,zero,285e0 <start_pass_1_quant+0x8c>
			cquantize->pub.color_quantize = color_quantize3;
   285cc:	e0bffc17 	ldw	r2,-16(fp)
   285d0:	00c000b4 	movhi	r3,2
   285d4:	18def304 	addi	r3,r3,31692
   285d8:	10c00115 	stw	r3,4(r2)
		else
			cquantize->pub.color_quantize = color_quantize;
		break;
   285dc:	00005006 	br	28720 <start_pass_1_quant+0x1cc>
	switch (cinfo->dither_mode) {
	case JDITHER_NONE:
		if (cinfo->out_color_components == 3)
			cquantize->pub.color_quantize = color_quantize3;
		else
			cquantize->pub.color_quantize = color_quantize;
   285e0:	e0bffc17 	ldw	r2,-16(fp)
   285e4:	00c000b4 	movhi	r3,2
   285e8:	18dea204 	addi	r3,r3,31368
   285ec:	10c00115 	stw	r3,4(r2)
		break;
   285f0:	00004b06 	br	28720 <start_pass_1_quant+0x1cc>
	case JDITHER_ORDERED:
		if (cinfo->out_color_components == 3)
   285f4:	e0bffe17 	ldw	r2,-8(fp)
   285f8:	10801917 	ldw	r2,100(r2)
   285fc:	108000d8 	cmpnei	r2,r2,3
   28600:	1000051e 	bne	r2,zero,28618 <start_pass_1_quant+0xc4>
			cquantize->pub.color_quantize = quantize3_ord_dither;
   28604:	e0bffc17 	ldw	r2,-16(fp)
   28608:	00c000b4 	movhi	r3,2
   2860c:	18dfc904 	addi	r3,r3,32548
   28610:	10c00115 	stw	r3,4(r2)
   28614:	00000406 	br	28628 <start_pass_1_quant+0xd4>
		else
			cquantize->pub.color_quantize = quantize_ord_dither;
   28618:	e0bffc17 	ldw	r2,-16(fp)
   2861c:	00c000b4 	movhi	r3,2
   28620:	18df4c04 	addi	r3,r3,32048
   28624:	10c00115 	stw	r3,4(r2)
		cquantize->row_index = 0;	/* initialize state for ordered dither */
   28628:	e0bffc17 	ldw	r2,-16(fp)
   2862c:	10000c15 	stw	zero,48(r2)
		/* If user changed to ordered dither from another mode,
		* we must recreate the color index table with padding.
		* This will cost extra space, but probably isn't very likely.
		*/
		if (! cquantize->is_padded)
   28630:	e0bffc17 	ldw	r2,-16(fp)
   28634:	10800703 	ldbu	r2,28(r2)
   28638:	10803fcc 	andi	r2,r2,255
   2863c:	1000021e 	bne	r2,zero,28648 <start_pass_1_quant+0xf4>
			create_colorindex(cinfo);
   28640:	e13ffe17 	ldw	r4,-8(fp)
   28644:	00275b80 	call	275b8 <create_colorindex>
		/* Create ordered-dither tables if we didn't already. */
		if (cquantize->odither[0] == NULL)
   28648:	e0bffc17 	ldw	r2,-16(fp)
   2864c:	10800d17 	ldw	r2,52(r2)
   28650:	1000321e 	bne	r2,zero,2871c <start_pass_1_quant+0x1c8>
			create_odither_tables(cinfo);
   28654:	e13ffe17 	ldw	r4,-8(fp)
   28658:	002796c0 	call	2796c <create_odither_tables>
		break;
   2865c:	00002f06 	br	2871c <start_pass_1_quant+0x1c8>
	case JDITHER_FS:
		cquantize->pub.color_quantize = quantize_fs_dither;
   28660:	e0bffc17 	ldw	r2,-16(fp)
   28664:	00c000f4 	movhi	r3,3
   28668:	18e05804 	addi	r3,r3,-32416
   2866c:	10c00115 	stw	r3,4(r2)
		cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
   28670:	e0bffc17 	ldw	r2,-16(fp)
   28674:	10001505 	stb	zero,84(r2)
		/* Allocate Floyd-Steinberg workspace if didn't already. */
		if (cquantize->fserrors[0] == NULL)
   28678:	e0bffc17 	ldw	r2,-16(fp)
   2867c:	10801117 	ldw	r2,68(r2)
   28680:	1000021e 	bne	r2,zero,2868c <start_pass_1_quant+0x138>
			alloc_fs_workspace(cinfo);
   28684:	e13ffe17 	ldw	r4,-8(fp)
   28688:	00284ac0 	call	284ac <alloc_fs_workspace>
		/* Initialize the propagated errors to zero. */
		arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
   2868c:	e0bffe17 	ldw	r2,-8(fp)
   28690:	10801717 	ldw	r2,92(r2)
   28694:	10800084 	addi	r2,r2,2
   28698:	1085883a 	add	r2,r2,r2
   2869c:	e0bffd15 	stw	r2,-12(fp)
		for (i = 0; i < cinfo->out_color_components; i++)
   286a0:	e03ffb15 	stw	zero,-20(fp)
   286a4:	00000d06 	br	286dc <start_pass_1_quant+0x188>
			jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
   286a8:	e0fffc17 	ldw	r3,-16(fp)
   286ac:	e0bffb17 	ldw	r2,-20(fp)
   286b0:	10800444 	addi	r2,r2,17
   286b4:	1085883a 	add	r2,r2,r2
   286b8:	1085883a 	add	r2,r2,r2
   286bc:	1885883a 	add	r2,r3,r2
   286c0:	10800017 	ldw	r2,0(r2)
   286c4:	1009883a 	mov	r4,r2
   286c8:	e17ffd17 	ldw	r5,-12(fp)
   286cc:	002b23c0 	call	2b23c <jzero_far>
		/* Allocate Floyd-Steinberg workspace if didn't already. */
		if (cquantize->fserrors[0] == NULL)
			alloc_fs_workspace(cinfo);
		/* Initialize the propagated errors to zero. */
		arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
		for (i = 0; i < cinfo->out_color_components; i++)
   286d0:	e0bffb17 	ldw	r2,-20(fp)
   286d4:	10800044 	addi	r2,r2,1
   286d8:	e0bffb15 	stw	r2,-20(fp)
   286dc:	e0bffe17 	ldw	r2,-8(fp)
   286e0:	10801917 	ldw	r2,100(r2)
   286e4:	e0fffb17 	ldw	r3,-20(fp)
   286e8:	18bfef16 	blt	r3,r2,286a8 <start_pass_1_quant+0x154>
			jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
		break;
   286ec:	00000c06 	br	28720 <start_pass_1_quant+0x1cc>
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
   286f0:	e0bffe17 	ldw	r2,-8(fp)
   286f4:	10800017 	ldw	r2,0(r2)
   286f8:	00c00c44 	movi	r3,49
   286fc:	10c00515 	stw	r3,20(r2)
   28700:	e0bffe17 	ldw	r2,-8(fp)
   28704:	10800017 	ldw	r2,0(r2)
   28708:	10800017 	ldw	r2,0(r2)
   2870c:	e13ffe17 	ldw	r4,-8(fp)
   28710:	103ee83a 	callr	r2
		break;
   28714:	0001883a 	nop
   28718:	00000106 	br	28720 <start_pass_1_quant+0x1cc>
		if (! cquantize->is_padded)
			create_colorindex(cinfo);
		/* Create ordered-dither tables if we didn't already. */
		if (cquantize->odither[0] == NULL)
			create_odither_tables(cinfo);
		break;
   2871c:	0001883a 	nop
		break;
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
		break;
	}
}
   28720:	e037883a 	mov	sp,fp
   28724:	dfc00117 	ldw	ra,4(sp)
   28728:	df000017 	ldw	fp,0(sp)
   2872c:	dec00204 	addi	sp,sp,8
   28730:	f800283a 	ret

00028734 <finish_pass_1_quant>:
* Finish up at the end of the pass.
*/

METHODDEF(void)
	finish_pass_1_quant (j_decompress_ptr cinfo)
{
   28734:	defffe04 	addi	sp,sp,-8
   28738:	df000115 	stw	fp,4(sp)
   2873c:	df000104 	addi	fp,sp,4
   28740:	e13fff15 	stw	r4,-4(fp)
	/* no work in 1-pass case */
}
   28744:	e037883a 	mov	sp,fp
   28748:	df000017 	ldw	fp,0(sp)
   2874c:	dec00104 	addi	sp,sp,4
   28750:	f800283a 	ret

00028754 <new_color_map_1_quant>:
* Shouldn't get to this module!
*/

METHODDEF(void)
	new_color_map_1_quant (j_decompress_ptr cinfo)
{
   28754:	defffd04 	addi	sp,sp,-12
   28758:	dfc00215 	stw	ra,8(sp)
   2875c:	df000115 	stw	fp,4(sp)
   28760:	df000104 	addi	fp,sp,4
   28764:	e13fff15 	stw	r4,-4(fp)
	ERREXIT(cinfo, JERR_MODE_CHANGE);
   28768:	e0bfff17 	ldw	r2,-4(fp)
   2876c:	10800017 	ldw	r2,0(r2)
   28770:	00c00bc4 	movi	r3,47
   28774:	10c00515 	stw	r3,20(r2)
   28778:	e0bfff17 	ldw	r2,-4(fp)
   2877c:	10800017 	ldw	r2,0(r2)
   28780:	10800017 	ldw	r2,0(r2)
   28784:	e13fff17 	ldw	r4,-4(fp)
   28788:	103ee83a 	callr	r2
}
   2878c:	e037883a 	mov	sp,fp
   28790:	dfc00117 	ldw	ra,4(sp)
   28794:	df000017 	ldw	fp,0(sp)
   28798:	dec00204 	addi	sp,sp,8
   2879c:	f800283a 	ret

000287a0 <jinit_1pass_quantizer>:
* Module initialization routine for 1-pass color quantization.
*/

GLOBAL(void)
	jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
   287a0:	defffc04 	addi	sp,sp,-16
   287a4:	dfc00315 	stw	ra,12(sp)
   287a8:	df000215 	stw	fp,8(sp)
   287ac:	df000204 	addi	fp,sp,8
   287b0:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize;

	cquantize = (my_cquantize_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   287b4:	e0bfff17 	ldw	r2,-4(fp)
   287b8:	10800117 	ldw	r2,4(r2)
   287bc:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
	my_cquantize_ptr cquantize;

	cquantize = (my_cquantize_ptr)
   287c0:	e13fff17 	ldw	r4,-4(fp)
   287c4:	01400044 	movi	r5,1
   287c8:	01801604 	movi	r6,88
   287cc:	103ee83a 	callr	r2
   287d0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_cquantizer));
	cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
   287d4:	e0bfff17 	ldw	r2,-4(fp)
   287d8:	e0fffe17 	ldw	r3,-8(fp)
   287dc:	10c06e15 	stw	r3,440(r2)
	cquantize->pub.start_pass = start_pass_1_quant;
   287e0:	e0bffe17 	ldw	r2,-8(fp)
   287e4:	00c000f4 	movhi	r3,3
   287e8:	18e15504 	addi	r3,r3,-31404
   287ec:	10c00015 	stw	r3,0(r2)
	cquantize->pub.finish_pass = finish_pass_1_quant;
   287f0:	e0bffe17 	ldw	r2,-8(fp)
   287f4:	00c000f4 	movhi	r3,3
   287f8:	18e1cd04 	addi	r3,r3,-30924
   287fc:	10c00215 	stw	r3,8(r2)
	cquantize->pub.new_color_map = new_color_map_1_quant;
   28800:	e0bffe17 	ldw	r2,-8(fp)
   28804:	00c000f4 	movhi	r3,3
   28808:	18e1d504 	addi	r3,r3,-30892
   2880c:	10c00315 	stw	r3,12(r2)
	cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
   28810:	e0bffe17 	ldw	r2,-8(fp)
   28814:	10001115 	stw	zero,68(r2)
	cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
   28818:	e0bffe17 	ldw	r2,-8(fp)
   2881c:	10000d15 	stw	zero,52(r2)

	/* Make sure my internal arrays won't overflow */
	if (cinfo->out_color_components > MAX_Q_COMPS)
   28820:	e0bfff17 	ldw	r2,-4(fp)
   28824:	10801917 	ldw	r2,100(r2)
   28828:	10800150 	cmplti	r2,r2,5
   2882c:	10000d1e 	bne	r2,zero,28864 <jinit_1pass_quantizer+0xc4>
		ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
   28830:	e0bfff17 	ldw	r2,-4(fp)
   28834:	10800017 	ldw	r2,0(r2)
   28838:	00c00e44 	movi	r3,57
   2883c:	10c00515 	stw	r3,20(r2)
   28840:	e0bfff17 	ldw	r2,-4(fp)
   28844:	10800017 	ldw	r2,0(r2)
   28848:	00c00104 	movi	r3,4
   2884c:	10c00615 	stw	r3,24(r2)
   28850:	e0bfff17 	ldw	r2,-4(fp)
   28854:	10800017 	ldw	r2,0(r2)
   28858:	10800017 	ldw	r2,0(r2)
   2885c:	e13fff17 	ldw	r4,-4(fp)
   28860:	103ee83a 	callr	r2
	/* Make sure colormap indexes can be represented by JSAMPLEs */
	if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
   28864:	e0bfff17 	ldw	r2,-4(fp)
   28868:	10801517 	ldw	r2,84(r2)
   2886c:	10804050 	cmplti	r2,r2,257
   28870:	10000d1e 	bne	r2,zero,288a8 <jinit_1pass_quantizer+0x108>
		ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
   28874:	e0bfff17 	ldw	r2,-4(fp)
   28878:	10800017 	ldw	r2,0(r2)
   2887c:	00c00ec4 	movi	r3,59
   28880:	10c00515 	stw	r3,20(r2)
   28884:	e0bfff17 	ldw	r2,-4(fp)
   28888:	10800017 	ldw	r2,0(r2)
   2888c:	00c04004 	movi	r3,256
   28890:	10c00615 	stw	r3,24(r2)
   28894:	e0bfff17 	ldw	r2,-4(fp)
   28898:	10800017 	ldw	r2,0(r2)
   2889c:	10800017 	ldw	r2,0(r2)
   288a0:	e13fff17 	ldw	r4,-4(fp)
   288a4:	103ee83a 	callr	r2

	/* Create the colormap and color index table. */
	create_colormap(cinfo);
   288a8:	e13fff17 	ldw	r4,-4(fp)
   288ac:	00273340 	call	27334 <create_colormap>
	create_colorindex(cinfo);
   288b0:	e13fff17 	ldw	r4,-4(fp)
   288b4:	00275b80 	call	275b8 <create_colorindex>
	* We do this now since it is FAR storage and may affect the memory
	* manager's space calculations.  If the user changes to FS dither
	* mode in a later pass, we will allocate the space then, and will
	* possibly overrun the max_memory_to_use setting.
	*/
	if (cinfo->dither_mode == JDITHER_FS)
   288b8:	e0bfff17 	ldw	r2,-4(fp)
   288bc:	10801317 	ldw	r2,76(r2)
   288c0:	10800098 	cmpnei	r2,r2,2
   288c4:	1000021e 	bne	r2,zero,288d0 <jinit_1pass_quantizer+0x130>
		alloc_fs_workspace(cinfo);
   288c8:	e13fff17 	ldw	r4,-4(fp)
   288cc:	00284ac0 	call	284ac <alloc_fs_workspace>
}
   288d0:	e037883a 	mov	sp,fp
   288d4:	dfc00117 	ldw	ra,4(sp)
   288d8:	df000017 	ldw	fp,0(sp)
   288dc:	dec00204 	addi	sp,sp,8
   288e0:	f800283a 	ret

000288e4 <prescan_quantize>:
*/

METHODDEF(void)
	prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
{
   288e4:	defff404 	addi	sp,sp,-48
   288e8:	df000b15 	stw	fp,44(sp)
   288ec:	dc800a15 	stw	r18,40(sp)
   288f0:	dc400915 	stw	r17,36(sp)
   288f4:	dc000815 	stw	r16,32(sp)
   288f8:	df000804 	addi	fp,sp,32
   288fc:	e13ffc15 	stw	r4,-16(fp)
   28900:	e17ffd15 	stw	r5,-12(fp)
   28904:	e1bffe15 	stw	r6,-8(fp)
   28908:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2890c:	e0bffc17 	ldw	r2,-16(fp)
   28910:	10806e17 	ldw	r2,440(r2)
   28914:	e0bffa15 	stw	r2,-24(fp)
	register JSAMPROW ptr;
	register histptr histp;
	register hist3d histogram = cquantize->histogram;
   28918:	e0bffa17 	ldw	r2,-24(fp)
   2891c:	14800617 	ldw	r18,24(r2)
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   28920:	e0bffc17 	ldw	r2,-16(fp)
   28924:	10801717 	ldw	r2,92(r2)
   28928:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
   2892c:	e03ff815 	stw	zero,-32(fp)
   28930:	00003106 	br	289f8 <prescan_quantize+0x114>
		ptr = input_buf[row];
   28934:	e0bff817 	ldw	r2,-32(fp)
   28938:	1085883a 	add	r2,r2,r2
   2893c:	1085883a 	add	r2,r2,r2
   28940:	e0fffd17 	ldw	r3,-12(fp)
   28944:	1885883a 	add	r2,r3,r2
   28948:	14000017 	ldw	r16,0(r2)
		for (col = width; col > 0; col--) {
   2894c:	e0bffb17 	ldw	r2,-20(fp)
   28950:	e0bff915 	stw	r2,-28(fp)
   28954:	00002306 	br	289e4 <prescan_quantize+0x100>
			/* get pixel value and index into the histogram */
			histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
   28958:	80800003 	ldbu	r2,0(r16)
   2895c:	10803fcc 	andi	r2,r2,255
   28960:	1004d0fa 	srli	r2,r2,3
   28964:	10803fcc 	andi	r2,r2,255
   28968:	1085883a 	add	r2,r2,r2
   2896c:	1085883a 	add	r2,r2,r2
   28970:	9085883a 	add	r2,r18,r2
   28974:	10c00017 	ldw	r3,0(r2)
			[GETJSAMPLE(ptr[1]) >> C1_SHIFT]
   28978:	80800044 	addi	r2,r16,1
   2897c:	10800003 	ldbu	r2,0(r2)
   28980:	10803fcc 	andi	r2,r2,255
   28984:	1004d0ba 	srli	r2,r2,2
   28988:	10803fcc 	andi	r2,r2,255
   2898c:	100491ba 	slli	r2,r2,6
   28990:	1887883a 	add	r3,r3,r2
			[GETJSAMPLE(ptr[2]) >> C2_SHIFT];
   28994:	80800084 	addi	r2,r16,2
   28998:	10800003 	ldbu	r2,0(r2)
   2899c:	10803fcc 	andi	r2,r2,255
   289a0:	1004d0fa 	srli	r2,r2,3
   289a4:	10803fcc 	andi	r2,r2,255

	for (row = 0; row < num_rows; row++) {
		ptr = input_buf[row];
		for (col = width; col > 0; col--) {
			/* get pixel value and index into the histogram */
			histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
   289a8:	1085883a 	add	r2,r2,r2
   289ac:	18a3883a 	add	r17,r3,r2
			[GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			[GETJSAMPLE(ptr[2]) >> C2_SHIFT];
			/* increment, check for overflow and undo increment if so. */
			if (++(*histp) <= 0)
   289b0:	8880000b 	ldhu	r2,0(r17)
   289b4:	10800044 	addi	r2,r2,1
   289b8:	8880000d 	sth	r2,0(r17)
   289bc:	8880000b 	ldhu	r2,0(r17)
   289c0:	10bfffcc 	andi	r2,r2,65535
   289c4:	1000031e 	bne	r2,zero,289d4 <prescan_quantize+0xf0>
				(*histp)--;
   289c8:	8880000b 	ldhu	r2,0(r17)
   289cc:	10bfffc4 	addi	r2,r2,-1
   289d0:	8880000d 	sth	r2,0(r17)
			ptr += 3;
   289d4:	840000c4 	addi	r16,r16,3
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		ptr = input_buf[row];
		for (col = width; col > 0; col--) {
   289d8:	e0bff917 	ldw	r2,-28(fp)
   289dc:	10bfffc4 	addi	r2,r2,-1
   289e0:	e0bff915 	stw	r2,-28(fp)
   289e4:	e0bff917 	ldw	r2,-28(fp)
   289e8:	103fdb1e 	bne	r2,zero,28958 <prescan_quantize+0x74>
	register hist3d histogram = cquantize->histogram;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
   289ec:	e0bff817 	ldw	r2,-32(fp)
   289f0:	10800044 	addi	r2,r2,1
   289f4:	e0bff815 	stw	r2,-32(fp)
   289f8:	e0fff817 	ldw	r3,-32(fp)
   289fc:	e0bfff17 	ldw	r2,-4(fp)
   28a00:	18bfcc16 	blt	r3,r2,28934 <prescan_quantize+0x50>
			if (++(*histp) <= 0)
				(*histp)--;
			ptr += 3;
		}
	}
}
   28a04:	e037883a 	mov	sp,fp
   28a08:	df000317 	ldw	fp,12(sp)
   28a0c:	dc800217 	ldw	r18,8(sp)
   28a10:	dc400117 	ldw	r17,4(sp)
   28a14:	dc000017 	ldw	r16,0(sp)
   28a18:	dec00404 	addi	sp,sp,16
   28a1c:	f800283a 	ret

00028a20 <find_biggest_color_pop>:

LOCAL(boxptr)
	find_biggest_color_pop (boxptr boxlist, int numboxes)
	/* Find the splittable box with the largest color population */
	/* Returns NULL if no splittable boxes remain */
{
   28a20:	defff904 	addi	sp,sp,-28
   28a24:	df000615 	stw	fp,24(sp)
   28a28:	dc800515 	stw	r18,20(sp)
   28a2c:	dc400415 	stw	r17,16(sp)
   28a30:	dc000315 	stw	r16,12(sp)
   28a34:	df000304 	addi	fp,sp,12
   28a38:	e13ffe15 	stw	r4,-8(fp)
   28a3c:	e17fff15 	stw	r5,-4(fp)
	register boxptr boxp;
	register int i;
	register long maxc = 0;
   28a40:	0025883a 	mov	r18,zero
	boxptr which = NULL;
   28a44:	e03ffd15 	stw	zero,-12(fp)

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
   28a48:	0023883a 	mov	r17,zero
   28a4c:	e43ffe17 	ldw	r16,-8(fp)
   28a50:	00000806 	br	28a74 <find_biggest_color_pop+0x54>
		if (boxp->colorcount > maxc && boxp->volume > 0) {
   28a54:	80800717 	ldw	r2,28(r16)
   28a58:	9080040e 	bge	r18,r2,28a6c <find_biggest_color_pop+0x4c>
   28a5c:	80800617 	ldw	r2,24(r16)
   28a60:	0080020e 	bge	zero,r2,28a6c <find_biggest_color_pop+0x4c>
			which = boxp;
   28a64:	e43ffd15 	stw	r16,-12(fp)
			maxc = boxp->colorcount;
   28a68:	84800717 	ldw	r18,28(r16)
	register boxptr boxp;
	register int i;
	register long maxc = 0;
	boxptr which = NULL;

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
   28a6c:	8c400044 	addi	r17,r17,1
   28a70:	84000804 	addi	r16,r16,32
   28a74:	e0bfff17 	ldw	r2,-4(fp)
   28a78:	88bff616 	blt	r17,r2,28a54 <find_biggest_color_pop+0x34>
		if (boxp->colorcount > maxc && boxp->volume > 0) {
			which = boxp;
			maxc = boxp->colorcount;
		}
	}
	return which;
   28a7c:	e0bffd17 	ldw	r2,-12(fp)
}
   28a80:	e037883a 	mov	sp,fp
   28a84:	df000317 	ldw	fp,12(sp)
   28a88:	dc800217 	ldw	r18,8(sp)
   28a8c:	dc400117 	ldw	r17,4(sp)
   28a90:	dc000017 	ldw	r16,0(sp)
   28a94:	dec00404 	addi	sp,sp,16
   28a98:	f800283a 	ret

00028a9c <find_biggest_volume>:

LOCAL(boxptr)
	find_biggest_volume (boxptr boxlist, int numboxes)
	/* Find the splittable box with the largest (scaled) volume */
	/* Returns NULL if no splittable boxes remain */
{
   28a9c:	defff904 	addi	sp,sp,-28
   28aa0:	df000615 	stw	fp,24(sp)
   28aa4:	dc800515 	stw	r18,20(sp)
   28aa8:	dc400415 	stw	r17,16(sp)
   28aac:	dc000315 	stw	r16,12(sp)
   28ab0:	df000304 	addi	fp,sp,12
   28ab4:	e13ffe15 	stw	r4,-8(fp)
   28ab8:	e17fff15 	stw	r5,-4(fp)
	register boxptr boxp;
	register int i;
	register INT32 maxv = 0;
   28abc:	0025883a 	mov	r18,zero
	boxptr which = NULL;
   28ac0:	e03ffd15 	stw	zero,-12(fp)

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
   28ac4:	0023883a 	mov	r17,zero
   28ac8:	e43ffe17 	ldw	r16,-8(fp)
   28acc:	00000606 	br	28ae8 <find_biggest_volume+0x4c>
		if (boxp->volume > maxv) {
   28ad0:	80800617 	ldw	r2,24(r16)
   28ad4:	9080020e 	bge	r18,r2,28ae0 <find_biggest_volume+0x44>
			which = boxp;
   28ad8:	e43ffd15 	stw	r16,-12(fp)
			maxv = boxp->volume;
   28adc:	84800617 	ldw	r18,24(r16)
	register boxptr boxp;
	register int i;
	register INT32 maxv = 0;
	boxptr which = NULL;

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
   28ae0:	8c400044 	addi	r17,r17,1
   28ae4:	84000804 	addi	r16,r16,32
   28ae8:	e0bfff17 	ldw	r2,-4(fp)
   28aec:	88bff816 	blt	r17,r2,28ad0 <find_biggest_volume+0x34>
		if (boxp->volume > maxv) {
			which = boxp;
			maxv = boxp->volume;
		}
	}
	return which;
   28af0:	e0bffd17 	ldw	r2,-12(fp)
}
   28af4:	e037883a 	mov	sp,fp
   28af8:	df000317 	ldw	fp,12(sp)
   28afc:	dc800217 	ldw	r18,8(sp)
   28b00:	dc400117 	ldw	r17,4(sp)
   28b04:	dc000017 	ldw	r16,0(sp)
   28b08:	dec00404 	addi	sp,sp,16
   28b0c:	f800283a 	ret

00028b10 <update_box>:

LOCAL(void)
	update_box (j_decompress_ptr cinfo, boxptr boxp)
	/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
	/* and recompute its volume and population */
{
   28b10:	deffeb04 	addi	sp,sp,-84
   28b14:	dfc01415 	stw	ra,80(sp)
   28b18:	df001315 	stw	fp,76(sp)
   28b1c:	dc001215 	stw	r16,72(sp)
   28b20:	df001204 	addi	fp,sp,72
   28b24:	e13ffe15 	stw	r4,-8(fp)
   28b28:	e17fff15 	stw	r5,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   28b2c:	e0bffe17 	ldw	r2,-8(fp)
   28b30:	10806e17 	ldw	r2,440(r2)
   28b34:	e0bff915 	stw	r2,-28(fp)
	hist3d histogram = cquantize->histogram;
   28b38:	e0bff917 	ldw	r2,-28(fp)
   28b3c:	10800617 	ldw	r2,24(r2)
   28b40:	e0bffa15 	stw	r2,-24(fp)
	int c0,c1,c2;
	int c0min,c0max,c1min,c1max,c2min,c2max;
	INT32 dist0,dist1,dist2;
	long ccount;

	c0min = boxp->c0min;  c0max = boxp->c0max;
   28b44:	e0bfff17 	ldw	r2,-4(fp)
   28b48:	10800017 	ldw	r2,0(r2)
   28b4c:	e0bff215 	stw	r2,-56(fp)
   28b50:	e0bfff17 	ldw	r2,-4(fp)
   28b54:	10800117 	ldw	r2,4(r2)
   28b58:	e0bff315 	stw	r2,-52(fp)
	c1min = boxp->c1min;  c1max = boxp->c1max;
   28b5c:	e0bfff17 	ldw	r2,-4(fp)
   28b60:	10800217 	ldw	r2,8(r2)
   28b64:	e0bff415 	stw	r2,-48(fp)
   28b68:	e0bfff17 	ldw	r2,-4(fp)
   28b6c:	10800317 	ldw	r2,12(r2)
   28b70:	e0bff515 	stw	r2,-44(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;
   28b74:	e0bfff17 	ldw	r2,-4(fp)
   28b78:	10800417 	ldw	r2,16(r2)
   28b7c:	e0bff615 	stw	r2,-40(fp)
   28b80:	e0bfff17 	ldw	r2,-4(fp)
   28b84:	10800517 	ldw	r2,20(r2)
   28b88:	e0bff715 	stw	r2,-36(fp)

	if (c0max > c0min)
   28b8c:	e0bff317 	ldw	r2,-52(fp)
   28b90:	e0fff217 	ldw	r3,-56(fp)
   28b94:	1880370e 	bge	r3,r2,28c74 <update_box+0x164>
		for (c0 = c0min; c0 <= c0max; c0++)
   28b98:	e0bff217 	ldw	r2,-56(fp)
   28b9c:	e0bfef15 	stw	r2,-68(fp)
   28ba0:	00003106 	br	28c68 <update_box+0x158>
			for (c1 = c1min; c1 <= c1max; c1++) {
   28ba4:	e0bff417 	ldw	r2,-48(fp)
   28ba8:	e0bff015 	stw	r2,-64(fp)
   28bac:	00002806 	br	28c50 <update_box+0x140>
				histp = & histogram[c0][c1][c2min];
   28bb0:	e0bfef17 	ldw	r2,-68(fp)
   28bb4:	1085883a 	add	r2,r2,r2
   28bb8:	1085883a 	add	r2,r2,r2
   28bbc:	e0fffa17 	ldw	r3,-24(fp)
   28bc0:	1885883a 	add	r2,r3,r2
   28bc4:	10c00017 	ldw	r3,0(r2)
   28bc8:	e0bff017 	ldw	r2,-64(fp)
   28bcc:	100491ba 	slli	r2,r2,6
   28bd0:	1887883a 	add	r3,r3,r2
   28bd4:	e0bff617 	ldw	r2,-40(fp)
   28bd8:	1085883a 	add	r2,r2,r2
   28bdc:	1885883a 	add	r2,r3,r2
   28be0:	e0bfee15 	stw	r2,-72(fp)
				for (c2 = c2min; c2 <= c2max; c2++)
   28be4:	e0bff617 	ldw	r2,-40(fp)
   28be8:	e0bff115 	stw	r2,-60(fp)
   28bec:	00001206 	br	28c38 <update_box+0x128>
					if (*histp++ != 0) {
   28bf0:	e0bfee17 	ldw	r2,-72(fp)
   28bf4:	1080000b 	ldhu	r2,0(r2)
   28bf8:	10bfffcc 	andi	r2,r2,65535
   28bfc:	1004c03a 	cmpne	r2,r2,zero
   28c00:	e0ffee17 	ldw	r3,-72(fp)
   28c04:	18c00084 	addi	r3,r3,2
   28c08:	e0ffee15 	stw	r3,-72(fp)
   28c0c:	10803fcc 	andi	r2,r2,255
   28c10:	10000626 	beq	r2,zero,28c2c <update_box+0x11c>
						boxp->c0min = c0min = c0;
   28c14:	e0bfef17 	ldw	r2,-68(fp)
   28c18:	e0bff215 	stw	r2,-56(fp)
   28c1c:	e0bfff17 	ldw	r2,-4(fp)
   28c20:	e0fff217 	ldw	r3,-56(fp)
   28c24:	10c00015 	stw	r3,0(r2)
						goto have_c0min;
   28c28:	00001206 	br	28c74 <update_box+0x164>

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
			for (c1 = c1min; c1 <= c1max; c1++) {
				histp = & histogram[c0][c1][c2min];
				for (c2 = c2min; c2 <= c2max; c2++)
   28c2c:	e0bff117 	ldw	r2,-60(fp)
   28c30:	10800044 	addi	r2,r2,1
   28c34:	e0bff115 	stw	r2,-60(fp)
   28c38:	e0bff117 	ldw	r2,-60(fp)
   28c3c:	e0fff717 	ldw	r3,-36(fp)
   28c40:	18bfeb0e 	bge	r3,r2,28bf0 <update_box+0xe0>
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
			for (c1 = c1min; c1 <= c1max; c1++) {
   28c44:	e0bff017 	ldw	r2,-64(fp)
   28c48:	10800044 	addi	r2,r2,1
   28c4c:	e0bff015 	stw	r2,-64(fp)
   28c50:	e0bff017 	ldw	r2,-64(fp)
   28c54:	e0fff517 	ldw	r3,-44(fp)
   28c58:	18bfd50e 	bge	r3,r2,28bb0 <update_box+0xa0>
	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
   28c5c:	e0bfef17 	ldw	r2,-68(fp)
   28c60:	10800044 	addi	r2,r2,1
   28c64:	e0bfef15 	stw	r2,-68(fp)
   28c68:	e0bfef17 	ldw	r2,-68(fp)
   28c6c:	e0fff317 	ldw	r3,-52(fp)
   28c70:	18bfcc0e 	bge	r3,r2,28ba4 <update_box+0x94>
						boxp->c0min = c0min = c0;
						goto have_c0min;
					}
			}
have_c0min:
			if (c0max > c0min)
   28c74:	e0bff317 	ldw	r2,-52(fp)
   28c78:	e0fff217 	ldw	r3,-56(fp)
   28c7c:	1880370e 	bge	r3,r2,28d5c <update_box+0x24c>
				for (c0 = c0max; c0 >= c0min; c0--)
   28c80:	e0bff317 	ldw	r2,-52(fp)
   28c84:	e0bfef15 	stw	r2,-68(fp)
   28c88:	00003106 	br	28d50 <update_box+0x240>
					for (c1 = c1min; c1 <= c1max; c1++) {
   28c8c:	e0bff417 	ldw	r2,-48(fp)
   28c90:	e0bff015 	stw	r2,-64(fp)
   28c94:	00002806 	br	28d38 <update_box+0x228>
						histp = & histogram[c0][c1][c2min];
   28c98:	e0bfef17 	ldw	r2,-68(fp)
   28c9c:	1085883a 	add	r2,r2,r2
   28ca0:	1085883a 	add	r2,r2,r2
   28ca4:	e0fffa17 	ldw	r3,-24(fp)
   28ca8:	1885883a 	add	r2,r3,r2
   28cac:	10c00017 	ldw	r3,0(r2)
   28cb0:	e0bff017 	ldw	r2,-64(fp)
   28cb4:	100491ba 	slli	r2,r2,6
   28cb8:	1887883a 	add	r3,r3,r2
   28cbc:	e0bff617 	ldw	r2,-40(fp)
   28cc0:	1085883a 	add	r2,r2,r2
   28cc4:	1885883a 	add	r2,r3,r2
   28cc8:	e0bfee15 	stw	r2,-72(fp)
						for (c2 = c2min; c2 <= c2max; c2++)
   28ccc:	e0bff617 	ldw	r2,-40(fp)
   28cd0:	e0bff115 	stw	r2,-60(fp)
   28cd4:	00001206 	br	28d20 <update_box+0x210>
							if (*histp++ != 0) {
   28cd8:	e0bfee17 	ldw	r2,-72(fp)
   28cdc:	1080000b 	ldhu	r2,0(r2)
   28ce0:	10bfffcc 	andi	r2,r2,65535
   28ce4:	1004c03a 	cmpne	r2,r2,zero
   28ce8:	e0ffee17 	ldw	r3,-72(fp)
   28cec:	18c00084 	addi	r3,r3,2
   28cf0:	e0ffee15 	stw	r3,-72(fp)
   28cf4:	10803fcc 	andi	r2,r2,255
   28cf8:	10000626 	beq	r2,zero,28d14 <update_box+0x204>
								boxp->c0max = c0max = c0;
   28cfc:	e0bfef17 	ldw	r2,-68(fp)
   28d00:	e0bff315 	stw	r2,-52(fp)
   28d04:	e0bfff17 	ldw	r2,-4(fp)
   28d08:	e0fff317 	ldw	r3,-52(fp)
   28d0c:	10c00115 	stw	r3,4(r2)
								goto have_c0max;
   28d10:	00001206 	br	28d5c <update_box+0x24c>
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
					for (c1 = c1min; c1 <= c1max; c1++) {
						histp = & histogram[c0][c1][c2min];
						for (c2 = c2min; c2 <= c2max; c2++)
   28d14:	e0bff117 	ldw	r2,-60(fp)
   28d18:	10800044 	addi	r2,r2,1
   28d1c:	e0bff115 	stw	r2,-60(fp)
   28d20:	e0bff117 	ldw	r2,-60(fp)
   28d24:	e0fff717 	ldw	r3,-36(fp)
   28d28:	18bfeb0e 	bge	r3,r2,28cd8 <update_box+0x1c8>
					}
			}
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
					for (c1 = c1min; c1 <= c1max; c1++) {
   28d2c:	e0bff017 	ldw	r2,-64(fp)
   28d30:	10800044 	addi	r2,r2,1
   28d34:	e0bff015 	stw	r2,-64(fp)
   28d38:	e0bff017 	ldw	r2,-64(fp)
   28d3c:	e0fff517 	ldw	r3,-44(fp)
   28d40:	18bfd50e 	bge	r3,r2,28c98 <update_box+0x188>
						goto have_c0min;
					}
			}
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
   28d44:	e0bfef17 	ldw	r2,-68(fp)
   28d48:	10bfffc4 	addi	r2,r2,-1
   28d4c:	e0bfef15 	stw	r2,-68(fp)
   28d50:	e0ffef17 	ldw	r3,-68(fp)
   28d54:	e0bff217 	ldw	r2,-56(fp)
   28d58:	18bfcc0e 	bge	r3,r2,28c8c <update_box+0x17c>
								boxp->c0max = c0max = c0;
								goto have_c0max;
							}
					}
have_c0max:
					if (c1max > c1min)
   28d5c:	e0bff517 	ldw	r2,-44(fp)
   28d60:	e0fff417 	ldw	r3,-48(fp)
   28d64:	1880370e 	bge	r3,r2,28e44 <update_box+0x334>
						for (c1 = c1min; c1 <= c1max; c1++)
   28d68:	e0bff417 	ldw	r2,-48(fp)
   28d6c:	e0bff015 	stw	r2,-64(fp)
   28d70:	00003106 	br	28e38 <update_box+0x328>
							for (c0 = c0min; c0 <= c0max; c0++) {
   28d74:	e0bff217 	ldw	r2,-56(fp)
   28d78:	e0bfef15 	stw	r2,-68(fp)
   28d7c:	00002806 	br	28e20 <update_box+0x310>
								histp = & histogram[c0][c1][c2min];
   28d80:	e0bfef17 	ldw	r2,-68(fp)
   28d84:	1085883a 	add	r2,r2,r2
   28d88:	1085883a 	add	r2,r2,r2
   28d8c:	e0fffa17 	ldw	r3,-24(fp)
   28d90:	1885883a 	add	r2,r3,r2
   28d94:	10c00017 	ldw	r3,0(r2)
   28d98:	e0bff017 	ldw	r2,-64(fp)
   28d9c:	100491ba 	slli	r2,r2,6
   28da0:	1887883a 	add	r3,r3,r2
   28da4:	e0bff617 	ldw	r2,-40(fp)
   28da8:	1085883a 	add	r2,r2,r2
   28dac:	1885883a 	add	r2,r3,r2
   28db0:	e0bfee15 	stw	r2,-72(fp)
								for (c2 = c2min; c2 <= c2max; c2++)
   28db4:	e0bff617 	ldw	r2,-40(fp)
   28db8:	e0bff115 	stw	r2,-60(fp)
   28dbc:	00001206 	br	28e08 <update_box+0x2f8>
									if (*histp++ != 0) {
   28dc0:	e0bfee17 	ldw	r2,-72(fp)
   28dc4:	1080000b 	ldhu	r2,0(r2)
   28dc8:	10bfffcc 	andi	r2,r2,65535
   28dcc:	1004c03a 	cmpne	r2,r2,zero
   28dd0:	e0ffee17 	ldw	r3,-72(fp)
   28dd4:	18c00084 	addi	r3,r3,2
   28dd8:	e0ffee15 	stw	r3,-72(fp)
   28ddc:	10803fcc 	andi	r2,r2,255
   28de0:	10000626 	beq	r2,zero,28dfc <update_box+0x2ec>
										boxp->c1min = c1min = c1;
   28de4:	e0bff017 	ldw	r2,-64(fp)
   28de8:	e0bff415 	stw	r2,-48(fp)
   28dec:	e0bfff17 	ldw	r2,-4(fp)
   28df0:	e0fff417 	ldw	r3,-48(fp)
   28df4:	10c00215 	stw	r3,8(r2)
										goto have_c1min;
   28df8:	00001206 	br	28e44 <update_box+0x334>
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
							for (c0 = c0min; c0 <= c0max; c0++) {
								histp = & histogram[c0][c1][c2min];
								for (c2 = c2min; c2 <= c2max; c2++)
   28dfc:	e0bff117 	ldw	r2,-60(fp)
   28e00:	10800044 	addi	r2,r2,1
   28e04:	e0bff115 	stw	r2,-60(fp)
   28e08:	e0bff117 	ldw	r2,-60(fp)
   28e0c:	e0fff717 	ldw	r3,-36(fp)
   28e10:	18bfeb0e 	bge	r3,r2,28dc0 <update_box+0x2b0>
							}
					}
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
							for (c0 = c0min; c0 <= c0max; c0++) {
   28e14:	e0bfef17 	ldw	r2,-68(fp)
   28e18:	10800044 	addi	r2,r2,1
   28e1c:	e0bfef15 	stw	r2,-68(fp)
   28e20:	e0bfef17 	ldw	r2,-68(fp)
   28e24:	e0fff317 	ldw	r3,-52(fp)
   28e28:	18bfd50e 	bge	r3,r2,28d80 <update_box+0x270>
								goto have_c0max;
							}
					}
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
   28e2c:	e0bff017 	ldw	r2,-64(fp)
   28e30:	10800044 	addi	r2,r2,1
   28e34:	e0bff015 	stw	r2,-64(fp)
   28e38:	e0bff017 	ldw	r2,-64(fp)
   28e3c:	e0fff517 	ldw	r3,-44(fp)
   28e40:	18bfcc0e 	bge	r3,r2,28d74 <update_box+0x264>
										boxp->c1min = c1min = c1;
										goto have_c1min;
									}
							}
have_c1min:
							if (c1max > c1min)
   28e44:	e0bff517 	ldw	r2,-44(fp)
   28e48:	e0fff417 	ldw	r3,-48(fp)
   28e4c:	1880370e 	bge	r3,r2,28f2c <update_box+0x41c>
								for (c1 = c1max; c1 >= c1min; c1--)
   28e50:	e0bff517 	ldw	r2,-44(fp)
   28e54:	e0bff015 	stw	r2,-64(fp)
   28e58:	00003106 	br	28f20 <update_box+0x410>
									for (c0 = c0min; c0 <= c0max; c0++) {
   28e5c:	e0bff217 	ldw	r2,-56(fp)
   28e60:	e0bfef15 	stw	r2,-68(fp)
   28e64:	00002806 	br	28f08 <update_box+0x3f8>
										histp = & histogram[c0][c1][c2min];
   28e68:	e0bfef17 	ldw	r2,-68(fp)
   28e6c:	1085883a 	add	r2,r2,r2
   28e70:	1085883a 	add	r2,r2,r2
   28e74:	e0fffa17 	ldw	r3,-24(fp)
   28e78:	1885883a 	add	r2,r3,r2
   28e7c:	10c00017 	ldw	r3,0(r2)
   28e80:	e0bff017 	ldw	r2,-64(fp)
   28e84:	100491ba 	slli	r2,r2,6
   28e88:	1887883a 	add	r3,r3,r2
   28e8c:	e0bff617 	ldw	r2,-40(fp)
   28e90:	1085883a 	add	r2,r2,r2
   28e94:	1885883a 	add	r2,r3,r2
   28e98:	e0bfee15 	stw	r2,-72(fp)
										for (c2 = c2min; c2 <= c2max; c2++)
   28e9c:	e0bff617 	ldw	r2,-40(fp)
   28ea0:	e0bff115 	stw	r2,-60(fp)
   28ea4:	00001206 	br	28ef0 <update_box+0x3e0>
											if (*histp++ != 0) {
   28ea8:	e0bfee17 	ldw	r2,-72(fp)
   28eac:	1080000b 	ldhu	r2,0(r2)
   28eb0:	10bfffcc 	andi	r2,r2,65535
   28eb4:	1004c03a 	cmpne	r2,r2,zero
   28eb8:	e0ffee17 	ldw	r3,-72(fp)
   28ebc:	18c00084 	addi	r3,r3,2
   28ec0:	e0ffee15 	stw	r3,-72(fp)
   28ec4:	10803fcc 	andi	r2,r2,255
   28ec8:	10000626 	beq	r2,zero,28ee4 <update_box+0x3d4>
												boxp->c1max = c1max = c1;
   28ecc:	e0bff017 	ldw	r2,-64(fp)
   28ed0:	e0bff515 	stw	r2,-44(fp)
   28ed4:	e0bfff17 	ldw	r2,-4(fp)
   28ed8:	e0fff517 	ldw	r3,-44(fp)
   28edc:	10c00315 	stw	r3,12(r2)
												goto have_c1max;
   28ee0:	00001206 	br	28f2c <update_box+0x41c>
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
									for (c0 = c0min; c0 <= c0max; c0++) {
										histp = & histogram[c0][c1][c2min];
										for (c2 = c2min; c2 <= c2max; c2++)
   28ee4:	e0bff117 	ldw	r2,-60(fp)
   28ee8:	10800044 	addi	r2,r2,1
   28eec:	e0bff115 	stw	r2,-60(fp)
   28ef0:	e0bff117 	ldw	r2,-60(fp)
   28ef4:	e0fff717 	ldw	r3,-36(fp)
   28ef8:	18bfeb0e 	bge	r3,r2,28ea8 <update_box+0x398>
									}
							}
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
									for (c0 = c0min; c0 <= c0max; c0++) {
   28efc:	e0bfef17 	ldw	r2,-68(fp)
   28f00:	10800044 	addi	r2,r2,1
   28f04:	e0bfef15 	stw	r2,-68(fp)
   28f08:	e0bfef17 	ldw	r2,-68(fp)
   28f0c:	e0fff317 	ldw	r3,-52(fp)
   28f10:	18bfd50e 	bge	r3,r2,28e68 <update_box+0x358>
										goto have_c1min;
									}
							}
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
   28f14:	e0bff017 	ldw	r2,-64(fp)
   28f18:	10bfffc4 	addi	r2,r2,-1
   28f1c:	e0bff015 	stw	r2,-64(fp)
   28f20:	e0fff017 	ldw	r3,-64(fp)
   28f24:	e0bff417 	ldw	r2,-48(fp)
   28f28:	18bfcc0e 	bge	r3,r2,28e5c <update_box+0x34c>
												boxp->c1max = c1max = c1;
												goto have_c1max;
											}
									}
have_c1max:
									if (c2max > c2min)
   28f2c:	e0bff717 	ldw	r2,-36(fp)
   28f30:	e0fff617 	ldw	r3,-40(fp)
   28f34:	1880350e 	bge	r3,r2,2900c <update_box+0x4fc>
										for (c2 = c2min; c2 <= c2max; c2++)
   28f38:	e0bff617 	ldw	r2,-40(fp)
   28f3c:	e0bff115 	stw	r2,-60(fp)
   28f40:	00002f06 	br	29000 <update_box+0x4f0>
											for (c0 = c0min; c0 <= c0max; c0++) {
   28f44:	e0bff217 	ldw	r2,-56(fp)
   28f48:	e0bfef15 	stw	r2,-68(fp)
   28f4c:	00002606 	br	28fe8 <update_box+0x4d8>
												histp = & histogram[c0][c1min][c2];
   28f50:	e0bfef17 	ldw	r2,-68(fp)
   28f54:	1085883a 	add	r2,r2,r2
   28f58:	1085883a 	add	r2,r2,r2
   28f5c:	e0fffa17 	ldw	r3,-24(fp)
   28f60:	1885883a 	add	r2,r3,r2
   28f64:	10c00017 	ldw	r3,0(r2)
   28f68:	e0bff417 	ldw	r2,-48(fp)
   28f6c:	100491ba 	slli	r2,r2,6
   28f70:	1887883a 	add	r3,r3,r2
   28f74:	e0bff117 	ldw	r2,-60(fp)
   28f78:	1085883a 	add	r2,r2,r2
   28f7c:	1885883a 	add	r2,r3,r2
   28f80:	e0bfee15 	stw	r2,-72(fp)
												for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
   28f84:	e0bff417 	ldw	r2,-48(fp)
   28f88:	e0bff015 	stw	r2,-64(fp)
   28f8c:	00001006 	br	28fd0 <update_box+0x4c0>
													if (*histp != 0) {
   28f90:	e0bfee17 	ldw	r2,-72(fp)
   28f94:	1080000b 	ldhu	r2,0(r2)
   28f98:	10bfffcc 	andi	r2,r2,65535
   28f9c:	10000626 	beq	r2,zero,28fb8 <update_box+0x4a8>
														boxp->c2min = c2min = c2;
   28fa0:	e0bff117 	ldw	r2,-60(fp)
   28fa4:	e0bff615 	stw	r2,-40(fp)
   28fa8:	e0bfff17 	ldw	r2,-4(fp)
   28fac:	e0fff617 	ldw	r3,-40(fp)
   28fb0:	10c00415 	stw	r3,16(r2)
														goto have_c2min;
   28fb4:	00001506 	br	2900c <update_box+0x4fc>
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
											for (c0 = c0min; c0 <= c0max; c0++) {
												histp = & histogram[c0][c1min][c2];
												for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
   28fb8:	e0bff017 	ldw	r2,-64(fp)
   28fbc:	10800044 	addi	r2,r2,1
   28fc0:	e0bff015 	stw	r2,-64(fp)
   28fc4:	e0bfee17 	ldw	r2,-72(fp)
   28fc8:	10801004 	addi	r2,r2,64
   28fcc:	e0bfee15 	stw	r2,-72(fp)
   28fd0:	e0bff017 	ldw	r2,-64(fp)
   28fd4:	e0fff517 	ldw	r3,-44(fp)
   28fd8:	18bfed0e 	bge	r3,r2,28f90 <update_box+0x480>
											}
									}
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
											for (c0 = c0min; c0 <= c0max; c0++) {
   28fdc:	e0bfef17 	ldw	r2,-68(fp)
   28fe0:	10800044 	addi	r2,r2,1
   28fe4:	e0bfef15 	stw	r2,-68(fp)
   28fe8:	e0bfef17 	ldw	r2,-68(fp)
   28fec:	e0fff317 	ldw	r3,-52(fp)
   28ff0:	18bfd70e 	bge	r3,r2,28f50 <update_box+0x440>
												goto have_c1max;
											}
									}
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
   28ff4:	e0bff117 	ldw	r2,-60(fp)
   28ff8:	10800044 	addi	r2,r2,1
   28ffc:	e0bff115 	stw	r2,-60(fp)
   29000:	e0bff117 	ldw	r2,-60(fp)
   29004:	e0fff717 	ldw	r3,-36(fp)
   29008:	18bfce0e 	bge	r3,r2,28f44 <update_box+0x434>
														boxp->c2min = c2min = c2;
														goto have_c2min;
													}
											}
have_c2min:
											if (c2max > c2min)
   2900c:	e0bff717 	ldw	r2,-36(fp)
   29010:	e0fff617 	ldw	r3,-40(fp)
   29014:	1880350e 	bge	r3,r2,290ec <update_box+0x5dc>
												for (c2 = c2max; c2 >= c2min; c2--)
   29018:	e0bff717 	ldw	r2,-36(fp)
   2901c:	e0bff115 	stw	r2,-60(fp)
   29020:	00002f06 	br	290e0 <update_box+0x5d0>
													for (c0 = c0min; c0 <= c0max; c0++) {
   29024:	e0bff217 	ldw	r2,-56(fp)
   29028:	e0bfef15 	stw	r2,-68(fp)
   2902c:	00002606 	br	290c8 <update_box+0x5b8>
														histp = & histogram[c0][c1min][c2];
   29030:	e0bfef17 	ldw	r2,-68(fp)
   29034:	1085883a 	add	r2,r2,r2
   29038:	1085883a 	add	r2,r2,r2
   2903c:	e0fffa17 	ldw	r3,-24(fp)
   29040:	1885883a 	add	r2,r3,r2
   29044:	10c00017 	ldw	r3,0(r2)
   29048:	e0bff417 	ldw	r2,-48(fp)
   2904c:	100491ba 	slli	r2,r2,6
   29050:	1887883a 	add	r3,r3,r2
   29054:	e0bff117 	ldw	r2,-60(fp)
   29058:	1085883a 	add	r2,r2,r2
   2905c:	1885883a 	add	r2,r3,r2
   29060:	e0bfee15 	stw	r2,-72(fp)
														for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
   29064:	e0bff417 	ldw	r2,-48(fp)
   29068:	e0bff015 	stw	r2,-64(fp)
   2906c:	00001006 	br	290b0 <update_box+0x5a0>
															if (*histp != 0) {
   29070:	e0bfee17 	ldw	r2,-72(fp)
   29074:	1080000b 	ldhu	r2,0(r2)
   29078:	10bfffcc 	andi	r2,r2,65535
   2907c:	10000626 	beq	r2,zero,29098 <update_box+0x588>
																boxp->c2max = c2max = c2;
   29080:	e0bff117 	ldw	r2,-60(fp)
   29084:	e0bff715 	stw	r2,-36(fp)
   29088:	e0bfff17 	ldw	r2,-4(fp)
   2908c:	e0fff717 	ldw	r3,-36(fp)
   29090:	10c00515 	stw	r3,20(r2)
																goto have_c2max;
   29094:	00001506 	br	290ec <update_box+0x5dc>
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
													for (c0 = c0min; c0 <= c0max; c0++) {
														histp = & histogram[c0][c1min][c2];
														for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
   29098:	e0bff017 	ldw	r2,-64(fp)
   2909c:	10800044 	addi	r2,r2,1
   290a0:	e0bff015 	stw	r2,-64(fp)
   290a4:	e0bfee17 	ldw	r2,-72(fp)
   290a8:	10801004 	addi	r2,r2,64
   290ac:	e0bfee15 	stw	r2,-72(fp)
   290b0:	e0bff017 	ldw	r2,-64(fp)
   290b4:	e0fff517 	ldw	r3,-44(fp)
   290b8:	18bfed0e 	bge	r3,r2,29070 <update_box+0x560>
													}
											}
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
													for (c0 = c0min; c0 <= c0max; c0++) {
   290bc:	e0bfef17 	ldw	r2,-68(fp)
   290c0:	10800044 	addi	r2,r2,1
   290c4:	e0bfef15 	stw	r2,-68(fp)
   290c8:	e0bfef17 	ldw	r2,-68(fp)
   290cc:	e0fff317 	ldw	r3,-52(fp)
   290d0:	18bfd70e 	bge	r3,r2,29030 <update_box+0x520>
														goto have_c2min;
													}
											}
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
   290d4:	e0bff117 	ldw	r2,-60(fp)
   290d8:	10bfffc4 	addi	r2,r2,-1
   290dc:	e0bff115 	stw	r2,-60(fp)
   290e0:	e0fff117 	ldw	r3,-60(fp)
   290e4:	e0bff617 	ldw	r2,-40(fp)
   290e8:	18bfce0e 	bge	r3,r2,29024 <update_box+0x514>
													* a box is splittable iff norm > 0.
													* Since the differences are expressed in histogram-cell units,
													* we have to shift back to JSAMPLE units to get consistent distances;
													* after which, we scale according to the selected distance scale factors.
													*/
													dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
   290ec:	e0fff317 	ldw	r3,-52(fp)
   290f0:	e0bff217 	ldw	r2,-56(fp)
   290f4:	1885c83a 	sub	r2,r3,r2
   290f8:	100490fa 	slli	r2,r2,3
   290fc:	1085883a 	add	r2,r2,r2
   29100:	e0bffb15 	stw	r2,-20(fp)
													dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
   29104:	e0fff517 	ldw	r3,-44(fp)
   29108:	e0bff417 	ldw	r2,-48(fp)
   2910c:	1885c83a 	sub	r2,r3,r2
   29110:	1085883a 	add	r2,r2,r2
   29114:	1085883a 	add	r2,r2,r2
   29118:	1007883a 	mov	r3,r2
   2911c:	1805883a 	mov	r2,r3
   29120:	1085883a 	add	r2,r2,r2
   29124:	10c5883a 	add	r2,r2,r3
   29128:	e0bffc15 	stw	r2,-16(fp)
													dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
   2912c:	e0fff717 	ldw	r3,-36(fp)
   29130:	e0bff617 	ldw	r2,-40(fp)
   29134:	1885c83a 	sub	r2,r3,r2
   29138:	100490fa 	slli	r2,r2,3
   2913c:	e0bffd15 	stw	r2,-12(fp)
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
   29140:	e13ffb17 	ldw	r4,-20(fp)
   29144:	e17ffb17 	ldw	r5,-20(fp)
   29148:	002c1540 	call	2c154 <__mulsi3>
   2914c:	1021883a 	mov	r16,r2
   29150:	e13ffc17 	ldw	r4,-16(fp)
   29154:	e17ffc17 	ldw	r5,-16(fp)
   29158:	002c1540 	call	2c154 <__mulsi3>
   2915c:	80a1883a 	add	r16,r16,r2
   29160:	e13ffd17 	ldw	r4,-12(fp)
   29164:	e17ffd17 	ldw	r5,-12(fp)
   29168:	002c1540 	call	2c154 <__mulsi3>
   2916c:	8087883a 	add	r3,r16,r2
   29170:	e0bfff17 	ldw	r2,-4(fp)
   29174:	10c00615 	stw	r3,24(r2)

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
   29178:	e03ff815 	stw	zero,-32(fp)
													for (c0 = c0min; c0 <= c0max; c0++)
   2917c:	e0bff217 	ldw	r2,-56(fp)
   29180:	e0bfef15 	stw	r2,-68(fp)
   29184:	00002c06 	br	29238 <update_box+0x728>
														for (c1 = c1min; c1 <= c1max; c1++) {
   29188:	e0bff417 	ldw	r2,-48(fp)
   2918c:	e0bff015 	stw	r2,-64(fp)
   29190:	00002306 	br	29220 <update_box+0x710>
															histp = & histogram[c0][c1][c2min];
   29194:	e0bfef17 	ldw	r2,-68(fp)
   29198:	1085883a 	add	r2,r2,r2
   2919c:	1085883a 	add	r2,r2,r2
   291a0:	e0fffa17 	ldw	r3,-24(fp)
   291a4:	1885883a 	add	r2,r3,r2
   291a8:	10c00017 	ldw	r3,0(r2)
   291ac:	e0bff017 	ldw	r2,-64(fp)
   291b0:	100491ba 	slli	r2,r2,6
   291b4:	1887883a 	add	r3,r3,r2
   291b8:	e0bff617 	ldw	r2,-40(fp)
   291bc:	1085883a 	add	r2,r2,r2
   291c0:	1885883a 	add	r2,r3,r2
   291c4:	e0bfee15 	stw	r2,-72(fp)
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
   291c8:	e0bff617 	ldw	r2,-40(fp)
   291cc:	e0bff115 	stw	r2,-60(fp)
   291d0:	00000d06 	br	29208 <update_box+0x6f8>
																if (*histp != 0) {
   291d4:	e0bfee17 	ldw	r2,-72(fp)
   291d8:	1080000b 	ldhu	r2,0(r2)
   291dc:	10bfffcc 	andi	r2,r2,65535
   291e0:	10000326 	beq	r2,zero,291f0 <update_box+0x6e0>
																	ccount++;
   291e4:	e0bff817 	ldw	r2,-32(fp)
   291e8:	10800044 	addi	r2,r2,1
   291ec:	e0bff815 	stw	r2,-32(fp)
													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
														for (c1 = c1min; c1 <= c1max; c1++) {
															histp = & histogram[c0][c1][c2min];
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
   291f0:	e0bff117 	ldw	r2,-60(fp)
   291f4:	10800044 	addi	r2,r2,1
   291f8:	e0bff115 	stw	r2,-60(fp)
   291fc:	e0bfee17 	ldw	r2,-72(fp)
   29200:	10800084 	addi	r2,r2,2
   29204:	e0bfee15 	stw	r2,-72(fp)
   29208:	e0bff117 	ldw	r2,-60(fp)
   2920c:	e0fff717 	ldw	r3,-36(fp)
   29210:	18bff00e 	bge	r3,r2,291d4 <update_box+0x6c4>
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
														for (c1 = c1min; c1 <= c1max; c1++) {
   29214:	e0bff017 	ldw	r2,-64(fp)
   29218:	10800044 	addi	r2,r2,1
   2921c:	e0bff015 	stw	r2,-64(fp)
   29220:	e0bff017 	ldw	r2,-64(fp)
   29224:	e0fff517 	ldw	r3,-44(fp)
   29228:	18bfda0e 	bge	r3,r2,29194 <update_box+0x684>
													dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
   2922c:	e0bfef17 	ldw	r2,-68(fp)
   29230:	10800044 	addi	r2,r2,1
   29234:	e0bfef15 	stw	r2,-68(fp)
   29238:	e0bfef17 	ldw	r2,-68(fp)
   2923c:	e0fff317 	ldw	r3,-52(fp)
   29240:	18bfd10e 	bge	r3,r2,29188 <update_box+0x678>
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
																if (*histp != 0) {
																	ccount++;
																}
														}
														boxp->colorcount = ccount;
   29244:	e0bfff17 	ldw	r2,-4(fp)
   29248:	e0fff817 	ldw	r3,-32(fp)
   2924c:	10c00715 	stw	r3,28(r2)
}
   29250:	e037883a 	mov	sp,fp
   29254:	dfc00217 	ldw	ra,8(sp)
   29258:	df000117 	ldw	fp,4(sp)
   2925c:	dc000017 	ldw	r16,0(sp)
   29260:	dec00304 	addi	sp,sp,12
   29264:	f800283a 	ret

00029268 <median_cut>:

LOCAL(int)
	median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	int desired_colors)
	/* Repeatedly select and split the largest box until we have enough boxes */
{
   29268:	defff204 	addi	sp,sp,-56
   2926c:	dfc00d15 	stw	ra,52(sp)
   29270:	df000c15 	stw	fp,48(sp)
   29274:	dc400b15 	stw	r17,44(sp)
   29278:	dc000a15 	stw	r16,40(sp)
   2927c:	df000a04 	addi	fp,sp,40
   29280:	e13ffc15 	stw	r4,-16(fp)
   29284:	e17ffd15 	stw	r5,-12(fp)
   29288:	e1bffe15 	stw	r6,-8(fp)
   2928c:	e1ffff15 	stw	r7,-4(fp)
	int n,lb;
	int c0,c1,c2,cmax;
	register boxptr b1,b2;

	while (numboxes < desired_colors) {
   29290:	00007806 	br	29474 <median_cut+0x20c>
		/* Select box to split.
		* Current algorithm: by population for first half, then by volume.
		*/
		if (numboxes*2 <= desired_colors) {
   29294:	e0bffe17 	ldw	r2,-8(fp)
   29298:	1085883a 	add	r2,r2,r2
   2929c:	e0ffff17 	ldw	r3,-4(fp)
   292a0:	18800516 	blt	r3,r2,292b8 <median_cut+0x50>
			b1 = find_biggest_color_pop(boxlist, numboxes);
   292a4:	e13ffd17 	ldw	r4,-12(fp)
   292a8:	e17ffe17 	ldw	r5,-8(fp)
   292ac:	0028a200 	call	28a20 <find_biggest_color_pop>
   292b0:	1021883a 	mov	r16,r2
   292b4:	00000406 	br	292c8 <median_cut+0x60>
		} else {
			b1 = find_biggest_volume(boxlist, numboxes);
   292b8:	e13ffd17 	ldw	r4,-12(fp)
   292bc:	e17ffe17 	ldw	r5,-8(fp)
   292c0:	0028a9c0 	call	28a9c <find_biggest_volume>
   292c4:	1021883a 	mov	r16,r2
		}
		if (b1 == NULL)		/* no splittable boxes left! */
   292c8:	80006e26 	beq	r16,zero,29484 <median_cut+0x21c>
			break;
		b2 = &boxlist[numboxes];	/* where new box will go */
   292cc:	e0bffe17 	ldw	r2,-8(fp)
   292d0:	1004917a 	slli	r2,r2,5
   292d4:	e0fffd17 	ldw	r3,-12(fp)
   292d8:	18a3883a 	add	r17,r3,r2
		/* Copy the color bounds to the new box. */
		b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
   292dc:	80800117 	ldw	r2,4(r16)
   292e0:	88800115 	stw	r2,4(r17)
   292e4:	80800317 	ldw	r2,12(r16)
   292e8:	88800315 	stw	r2,12(r17)
   292ec:	80800517 	ldw	r2,20(r16)
   292f0:	88800515 	stw	r2,20(r17)
		b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
   292f4:	80800017 	ldw	r2,0(r16)
   292f8:	88800015 	stw	r2,0(r17)
   292fc:	80800217 	ldw	r2,8(r16)
   29300:	88800215 	stw	r2,8(r17)
   29304:	80800417 	ldw	r2,16(r16)
   29308:	88800415 	stw	r2,16(r17)
		/* Choose which axis to split the box on.
		* Current algorithm: longest scaled axis.
		* See notes in update_box about scaling distances.
		*/
		c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
   2930c:	80c00117 	ldw	r3,4(r16)
   29310:	80800017 	ldw	r2,0(r16)
   29314:	1885c83a 	sub	r2,r3,r2
   29318:	100490fa 	slli	r2,r2,3
   2931c:	1085883a 	add	r2,r2,r2
   29320:	e0bff815 	stw	r2,-32(fp)
		c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
   29324:	80c00317 	ldw	r3,12(r16)
   29328:	80800217 	ldw	r2,8(r16)
   2932c:	1885c83a 	sub	r2,r3,r2
   29330:	1085883a 	add	r2,r2,r2
   29334:	1085883a 	add	r2,r2,r2
   29338:	1007883a 	mov	r3,r2
   2933c:	1805883a 	mov	r2,r3
   29340:	1085883a 	add	r2,r2,r2
   29344:	10c5883a 	add	r2,r2,r3
   29348:	e0bff915 	stw	r2,-28(fp)
		c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
   2934c:	80c00517 	ldw	r3,20(r16)
   29350:	80800417 	ldw	r2,16(r16)
   29354:	1885c83a 	sub	r2,r3,r2
   29358:	100490fa 	slli	r2,r2,3
   2935c:	e0bffa15 	stw	r2,-24(fp)
		/* We want to break any ties in favor of green, then red, blue last.
		* This code does the right thing for R,G,B or B,G,R color orders only.
		*/
#if RGB_RED == 0
		cmax = c1; n = 1;
   29360:	e0bff917 	ldw	r2,-28(fp)
   29364:	e0bff715 	stw	r2,-36(fp)
   29368:	00800044 	movi	r2,1
   2936c:	e0bff615 	stw	r2,-40(fp)
		if (c0 > cmax) { cmax = c0; n = 0; }
   29370:	e0bff817 	ldw	r2,-32(fp)
   29374:	e0fff717 	ldw	r3,-36(fp)
   29378:	1880030e 	bge	r3,r2,29388 <median_cut+0x120>
   2937c:	e0bff817 	ldw	r2,-32(fp)
   29380:	e0bff715 	stw	r2,-36(fp)
   29384:	e03ff615 	stw	zero,-40(fp)
		if (c2 > cmax) { n = 2; }
   29388:	e0bffa17 	ldw	r2,-24(fp)
   2938c:	e0fff717 	ldw	r3,-36(fp)
   29390:	1880020e 	bge	r3,r2,2939c <median_cut+0x134>
   29394:	00800084 	movi	r2,2
   29398:	e0bff615 	stw	r2,-40(fp)
		* Current algorithm: split at halfway point.
		* (Since the box has been shrunk to minimum volume,
		* any split will produce two nonempty subboxes.)
		* Note that lb value is max for lower box, so must be < old max.
		*/
		switch (n) {
   2939c:	e0bff617 	ldw	r2,-40(fp)
   293a0:	10c00060 	cmpeqi	r3,r2,1
   293a4:	1800101e 	bne	r3,zero,293e8 <median_cut+0x180>
   293a8:	10c000a0 	cmpeqi	r3,r2,2
   293ac:	18001b1e 	bne	r3,zero,2941c <median_cut+0x1b4>
   293b0:	1000271e 	bne	r2,zero,29450 <median_cut+0x1e8>
		case 0:
			lb = (b1->c0max + b1->c0min) / 2;
   293b4:	80c00117 	ldw	r3,4(r16)
   293b8:	80800017 	ldw	r2,0(r16)
   293bc:	1885883a 	add	r2,r3,r2
   293c0:	1006d7fa 	srli	r3,r2,31
   293c4:	1885883a 	add	r2,r3,r2
   293c8:	1005d07a 	srai	r2,r2,1
   293cc:	e0bffb15 	stw	r2,-20(fp)
			b1->c0max = lb;
   293d0:	e0bffb17 	ldw	r2,-20(fp)
   293d4:	80800115 	stw	r2,4(r16)
			b2->c0min = lb+1;
   293d8:	e0bffb17 	ldw	r2,-20(fp)
   293dc:	10800044 	addi	r2,r2,1
   293e0:	88800015 	stw	r2,0(r17)
			break;
   293e4:	00001a06 	br	29450 <median_cut+0x1e8>
		case 1:
			lb = (b1->c1max + b1->c1min) / 2;
   293e8:	80c00317 	ldw	r3,12(r16)
   293ec:	80800217 	ldw	r2,8(r16)
   293f0:	1885883a 	add	r2,r3,r2
   293f4:	1006d7fa 	srli	r3,r2,31
   293f8:	1885883a 	add	r2,r3,r2
   293fc:	1005d07a 	srai	r2,r2,1
   29400:	e0bffb15 	stw	r2,-20(fp)
			b1->c1max = lb;
   29404:	e0bffb17 	ldw	r2,-20(fp)
   29408:	80800315 	stw	r2,12(r16)
			b2->c1min = lb+1;
   2940c:	e0bffb17 	ldw	r2,-20(fp)
   29410:	10800044 	addi	r2,r2,1
   29414:	88800215 	stw	r2,8(r17)
			break;
   29418:	00000d06 	br	29450 <median_cut+0x1e8>
		case 2:
			lb = (b1->c2max + b1->c2min) / 2;
   2941c:	80c00517 	ldw	r3,20(r16)
   29420:	80800417 	ldw	r2,16(r16)
   29424:	1885883a 	add	r2,r3,r2
   29428:	1006d7fa 	srli	r3,r2,31
   2942c:	1885883a 	add	r2,r3,r2
   29430:	1005d07a 	srai	r2,r2,1
   29434:	e0bffb15 	stw	r2,-20(fp)
			b1->c2max = lb;
   29438:	e0bffb17 	ldw	r2,-20(fp)
   2943c:	80800515 	stw	r2,20(r16)
			b2->c2min = lb+1;
   29440:	e0bffb17 	ldw	r2,-20(fp)
   29444:	10800044 	addi	r2,r2,1
   29448:	88800415 	stw	r2,16(r17)
			break;
   2944c:	0001883a 	nop
		}
		/* Update stats for boxes */
		update_box(cinfo, b1);
   29450:	e13ffc17 	ldw	r4,-16(fp)
   29454:	800b883a 	mov	r5,r16
   29458:	0028b100 	call	28b10 <update_box>
		update_box(cinfo, b2);
   2945c:	e13ffc17 	ldw	r4,-16(fp)
   29460:	880b883a 	mov	r5,r17
   29464:	0028b100 	call	28b10 <update_box>
		numboxes++;
   29468:	e0bffe17 	ldw	r2,-8(fp)
   2946c:	10800044 	addi	r2,r2,1
   29470:	e0bffe15 	stw	r2,-8(fp)
{
	int n,lb;
	int c0,c1,c2,cmax;
	register boxptr b1,b2;

	while (numboxes < desired_colors) {
   29474:	e0fffe17 	ldw	r3,-8(fp)
   29478:	e0bfff17 	ldw	r2,-4(fp)
   2947c:	18bf8516 	blt	r3,r2,29294 <median_cut+0x2c>
   29480:	00000106 	br	29488 <median_cut+0x220>
			b1 = find_biggest_color_pop(boxlist, numboxes);
		} else {
			b1 = find_biggest_volume(boxlist, numboxes);
		}
		if (b1 == NULL)		/* no splittable boxes left! */
			break;
   29484:	0001883a 	nop
		/* Update stats for boxes */
		update_box(cinfo, b1);
		update_box(cinfo, b2);
		numboxes++;
	}
	return numboxes;
   29488:	e0bffe17 	ldw	r2,-8(fp)
}
   2948c:	e037883a 	mov	sp,fp
   29490:	dfc00317 	ldw	ra,12(sp)
   29494:	df000217 	ldw	fp,8(sp)
   29498:	dc400117 	ldw	r17,4(sp)
   2949c:	dc000017 	ldw	r16,0(sp)
   294a0:	dec00404 	addi	sp,sp,16
   294a4:	f800283a 	ret

000294a8 <compute_color>:


LOCAL(void)
	compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
	/* Compute representative color for a box, put it in colormap[icolor] */
{
   294a8:	deffe904 	addi	sp,sp,-92
   294ac:	dfc01615 	stw	ra,88(sp)
   294b0:	df001515 	stw	fp,84(sp)
   294b4:	dc001415 	stw	r16,80(sp)
   294b8:	df001404 	addi	fp,sp,80
   294bc:	e13ffd15 	stw	r4,-12(fp)
   294c0:	e17ffe15 	stw	r5,-8(fp)
   294c4:	e1bfff15 	stw	r6,-4(fp)
	/* Current algorithm: mean weighted by pixels (not colors) */
	/* Note it is important to get the rounding correct! */
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   294c8:	e0bffd17 	ldw	r2,-12(fp)
   294cc:	10806e17 	ldw	r2,440(r2)
   294d0:	e0bff415 	stw	r2,-48(fp)
	hist3d histogram = cquantize->histogram;
   294d4:	e0bff417 	ldw	r2,-48(fp)
   294d8:	10800617 	ldw	r2,24(r2)
   294dc:	e0bff515 	stw	r2,-44(fp)
	histptr histp;
	int c0,c1,c2;
	int c0min,c0max,c1min,c1max,c2min,c2max;
	long count;
	long total = 0;
   294e0:	e03ff015 	stw	zero,-64(fp)
	long c0total = 0;
   294e4:	e03ff115 	stw	zero,-60(fp)
	long c1total = 0;
   294e8:	e03ff215 	stw	zero,-56(fp)
	long c2total = 0;
   294ec:	e03ff315 	stw	zero,-52(fp)

	c0min = boxp->c0min;  c0max = boxp->c0max;
   294f0:	e0bffe17 	ldw	r2,-8(fp)
   294f4:	10800017 	ldw	r2,0(r2)
   294f8:	e0bff615 	stw	r2,-40(fp)
   294fc:	e0bffe17 	ldw	r2,-8(fp)
   29500:	10800117 	ldw	r2,4(r2)
   29504:	e0bff715 	stw	r2,-36(fp)
	c1min = boxp->c1min;  c1max = boxp->c1max;
   29508:	e0bffe17 	ldw	r2,-8(fp)
   2950c:	10800217 	ldw	r2,8(r2)
   29510:	e0bff815 	stw	r2,-32(fp)
   29514:	e0bffe17 	ldw	r2,-8(fp)
   29518:	10800317 	ldw	r2,12(r2)
   2951c:	e0bff915 	stw	r2,-28(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;
   29520:	e0bffe17 	ldw	r2,-8(fp)
   29524:	10800417 	ldw	r2,16(r2)
   29528:	e0bffa15 	stw	r2,-24(fp)
   2952c:	e0bffe17 	ldw	r2,-8(fp)
   29530:	10800517 	ldw	r2,20(r2)
   29534:	e0bffb15 	stw	r2,-20(fp)

	for (c0 = c0min; c0 <= c0max; c0++)
   29538:	e0bff617 	ldw	r2,-40(fp)
   2953c:	e0bfed15 	stw	r2,-76(fp)
   29540:	00004d06 	br	29678 <compute_color+0x1d0>
		for (c1 = c1min; c1 <= c1max; c1++) {
   29544:	e0bff817 	ldw	r2,-32(fp)
   29548:	e0bfee15 	stw	r2,-72(fp)
   2954c:	00004406 	br	29660 <compute_color+0x1b8>
			histp = & histogram[c0][c1][c2min];
   29550:	e0bfed17 	ldw	r2,-76(fp)
   29554:	1085883a 	add	r2,r2,r2
   29558:	1085883a 	add	r2,r2,r2
   2955c:	e0fff517 	ldw	r3,-44(fp)
   29560:	1885883a 	add	r2,r3,r2
   29564:	10c00017 	ldw	r3,0(r2)
   29568:	e0bfee17 	ldw	r2,-72(fp)
   2956c:	100491ba 	slli	r2,r2,6
   29570:	1887883a 	add	r3,r3,r2
   29574:	e0bffa17 	ldw	r2,-24(fp)
   29578:	1085883a 	add	r2,r2,r2
   2957c:	1885883a 	add	r2,r3,r2
   29580:	e0bfec15 	stw	r2,-80(fp)
			for (c2 = c2min; c2 <= c2max; c2++) {
   29584:	e0bffa17 	ldw	r2,-24(fp)
   29588:	e0bfef15 	stw	r2,-68(fp)
   2958c:	00002e06 	br	29648 <compute_color+0x1a0>
				if ((count = *histp++) != 0) {
   29590:	e0bfec17 	ldw	r2,-80(fp)
   29594:	1080000b 	ldhu	r2,0(r2)
   29598:	10bfffcc 	andi	r2,r2,65535
   2959c:	e0bffc15 	stw	r2,-16(fp)
   295a0:	e0bffc17 	ldw	r2,-16(fp)
   295a4:	1004c03a 	cmpne	r2,r2,zero
   295a8:	e0ffec17 	ldw	r3,-80(fp)
   295ac:	18c00084 	addi	r3,r3,2
   295b0:	e0ffec15 	stw	r3,-80(fp)
   295b4:	10803fcc 	andi	r2,r2,255
   295b8:	10002026 	beq	r2,zero,2963c <compute_color+0x194>
					total += count;
   295bc:	e0fff017 	ldw	r3,-64(fp)
   295c0:	e0bffc17 	ldw	r2,-16(fp)
   295c4:	1885883a 	add	r2,r3,r2
   295c8:	e0bff015 	stw	r2,-64(fp)
					c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
   295cc:	e0bfed17 	ldw	r2,-76(fp)
   295d0:	100490fa 	slli	r2,r2,3
   295d4:	10800104 	addi	r2,r2,4
   295d8:	1009883a 	mov	r4,r2
   295dc:	e17ffc17 	ldw	r5,-16(fp)
   295e0:	002c1540 	call	2c154 <__mulsi3>
   295e4:	e0fff117 	ldw	r3,-60(fp)
   295e8:	1885883a 	add	r2,r3,r2
   295ec:	e0bff115 	stw	r2,-60(fp)
					c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
   295f0:	e0bfee17 	ldw	r2,-72(fp)
   295f4:	1085883a 	add	r2,r2,r2
   295f8:	1085883a 	add	r2,r2,r2
   295fc:	10800084 	addi	r2,r2,2
   29600:	1009883a 	mov	r4,r2
   29604:	e17ffc17 	ldw	r5,-16(fp)
   29608:	002c1540 	call	2c154 <__mulsi3>
   2960c:	e0fff217 	ldw	r3,-56(fp)
   29610:	1885883a 	add	r2,r3,r2
   29614:	e0bff215 	stw	r2,-56(fp)
					c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
   29618:	e0bfef17 	ldw	r2,-68(fp)
   2961c:	100490fa 	slli	r2,r2,3
   29620:	10800104 	addi	r2,r2,4
   29624:	1009883a 	mov	r4,r2
   29628:	e17ffc17 	ldw	r5,-16(fp)
   2962c:	002c1540 	call	2c154 <__mulsi3>
   29630:	e0fff317 	ldw	r3,-52(fp)
   29634:	1885883a 	add	r2,r3,r2
   29638:	e0bff315 	stw	r2,-52(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
		for (c1 = c1min; c1 <= c1max; c1++) {
			histp = & histogram[c0][c1][c2min];
			for (c2 = c2min; c2 <= c2max; c2++) {
   2963c:	e0bfef17 	ldw	r2,-68(fp)
   29640:	10800044 	addi	r2,r2,1
   29644:	e0bfef15 	stw	r2,-68(fp)
   29648:	e0bfef17 	ldw	r2,-68(fp)
   2964c:	e0fffb17 	ldw	r3,-20(fp)
   29650:	18bfcf0e 	bge	r3,r2,29590 <compute_color+0xe8>
	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
		for (c1 = c1min; c1 <= c1max; c1++) {
   29654:	e0bfee17 	ldw	r2,-72(fp)
   29658:	10800044 	addi	r2,r2,1
   2965c:	e0bfee15 	stw	r2,-72(fp)
   29660:	e0bfee17 	ldw	r2,-72(fp)
   29664:	e0fff917 	ldw	r3,-28(fp)
   29668:	18bfb90e 	bge	r3,r2,29550 <compute_color+0xa8>

	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
   2966c:	e0bfed17 	ldw	r2,-76(fp)
   29670:	10800044 	addi	r2,r2,1
   29674:	e0bfed15 	stw	r2,-76(fp)
   29678:	e0bfed17 	ldw	r2,-76(fp)
   2967c:	e0fff717 	ldw	r3,-36(fp)
   29680:	18bfb00e 	bge	r3,r2,29544 <compute_color+0x9c>
					c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
				}
			}
		}

		cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
   29684:	e0bffd17 	ldw	r2,-12(fp)
   29688:	10801d17 	ldw	r2,116(r2)
   2968c:	10c00017 	ldw	r3,0(r2)
   29690:	e0bfff17 	ldw	r2,-4(fp)
   29694:	18a1883a 	add	r16,r3,r2
   29698:	e0bff017 	ldw	r2,-64(fp)
   2969c:	1007d07a 	srai	r3,r2,1
   296a0:	e0bff117 	ldw	r2,-60(fp)
   296a4:	1885883a 	add	r2,r3,r2
   296a8:	1009883a 	mov	r4,r2
   296ac:	e17ff017 	ldw	r5,-64(fp)
   296b0:	002c0980 	call	2c098 <__divsi3>
   296b4:	80800005 	stb	r2,0(r16)
		cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
   296b8:	e0bffd17 	ldw	r2,-12(fp)
   296bc:	10801d17 	ldw	r2,116(r2)
   296c0:	10800104 	addi	r2,r2,4
   296c4:	10c00017 	ldw	r3,0(r2)
   296c8:	e0bfff17 	ldw	r2,-4(fp)
   296cc:	18a1883a 	add	r16,r3,r2
   296d0:	e0bff017 	ldw	r2,-64(fp)
   296d4:	1007d07a 	srai	r3,r2,1
   296d8:	e0bff217 	ldw	r2,-56(fp)
   296dc:	1885883a 	add	r2,r3,r2
   296e0:	1009883a 	mov	r4,r2
   296e4:	e17ff017 	ldw	r5,-64(fp)
   296e8:	002c0980 	call	2c098 <__divsi3>
   296ec:	80800005 	stb	r2,0(r16)
		cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
   296f0:	e0bffd17 	ldw	r2,-12(fp)
   296f4:	10801d17 	ldw	r2,116(r2)
   296f8:	10800204 	addi	r2,r2,8
   296fc:	10c00017 	ldw	r3,0(r2)
   29700:	e0bfff17 	ldw	r2,-4(fp)
   29704:	18a1883a 	add	r16,r3,r2
   29708:	e0bff017 	ldw	r2,-64(fp)
   2970c:	1007d07a 	srai	r3,r2,1
   29710:	e0bff317 	ldw	r2,-52(fp)
   29714:	1885883a 	add	r2,r3,r2
   29718:	1009883a 	mov	r4,r2
   2971c:	e17ff017 	ldw	r5,-64(fp)
   29720:	002c0980 	call	2c098 <__divsi3>
   29724:	80800005 	stb	r2,0(r16)
}
   29728:	e037883a 	mov	sp,fp
   2972c:	dfc00217 	ldw	ra,8(sp)
   29730:	df000117 	ldw	fp,4(sp)
   29734:	dc000017 	ldw	r16,0(sp)
   29738:	dec00304 	addi	sp,sp,12
   2973c:	f800283a 	ret

00029740 <select_colors>:


LOCAL(void)
	select_colors (j_decompress_ptr cinfo, int desired_colors)
	/* Master routine for color selection */
{
   29740:	defff904 	addi	sp,sp,-28
   29744:	dfc00615 	stw	ra,24(sp)
   29748:	df000515 	stw	fp,20(sp)
   2974c:	df000504 	addi	fp,sp,20
   29750:	e13ffe15 	stw	r4,-8(fp)
   29754:	e17fff15 	stw	r5,-4(fp)
	boxptr boxlist;
	int numboxes;
	int i;

	/* Allocate workspace for box list */
	boxlist = (boxptr) (*cinfo->mem->alloc_small)
   29758:	e0bffe17 	ldw	r2,-8(fp)
   2975c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
   29760:	10c00017 	ldw	r3,0(r2)
   29764:	e0bfff17 	ldw	r2,-4(fp)
   29768:	1004917a 	slli	r2,r2,5
	boxptr boxlist;
	int numboxes;
	int i;

	/* Allocate workspace for box list */
	boxlist = (boxptr) (*cinfo->mem->alloc_small)
   2976c:	e13ffe17 	ldw	r4,-8(fp)
   29770:	01400044 	movi	r5,1
   29774:	100d883a 	mov	r6,r2
   29778:	183ee83a 	callr	r3
   2977c:	e0bffc15 	stw	r2,-16(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
	/* Initialize one box containing whole space */
	numboxes = 1;
   29780:	00800044 	movi	r2,1
   29784:	e0bffd15 	stw	r2,-12(fp)
	boxlist[0].c0min = 0;
   29788:	e0bffc17 	ldw	r2,-16(fp)
   2978c:	10000015 	stw	zero,0(r2)
	boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
   29790:	e0bffc17 	ldw	r2,-16(fp)
   29794:	00c007c4 	movi	r3,31
   29798:	10c00115 	stw	r3,4(r2)
	boxlist[0].c1min = 0;
   2979c:	e0bffc17 	ldw	r2,-16(fp)
   297a0:	10000215 	stw	zero,8(r2)
	boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
   297a4:	e0bffc17 	ldw	r2,-16(fp)
   297a8:	00c00fc4 	movi	r3,63
   297ac:	10c00315 	stw	r3,12(r2)
	boxlist[0].c2min = 0;
   297b0:	e0bffc17 	ldw	r2,-16(fp)
   297b4:	10000415 	stw	zero,16(r2)
	boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
   297b8:	e0bffc17 	ldw	r2,-16(fp)
   297bc:	00c007c4 	movi	r3,31
   297c0:	10c00515 	stw	r3,20(r2)
	/* Shrink it to actually-used volume and set its statistics */
	update_box(cinfo, & boxlist[0]);
   297c4:	e13ffe17 	ldw	r4,-8(fp)
   297c8:	e17ffc17 	ldw	r5,-16(fp)
   297cc:	0028b100 	call	28b10 <update_box>
	/* Perform median-cut to produce final box list */
	numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
   297d0:	e13ffe17 	ldw	r4,-8(fp)
   297d4:	e17ffc17 	ldw	r5,-16(fp)
   297d8:	e1bffd17 	ldw	r6,-12(fp)
   297dc:	e1ffff17 	ldw	r7,-4(fp)
   297e0:	00292680 	call	29268 <median_cut>
   297e4:	e0bffd15 	stw	r2,-12(fp)
	/* Compute the representative color for each box, fill colormap */
	for (i = 0; i < numboxes; i++)
   297e8:	e03ffb15 	stw	zero,-20(fp)
   297ec:	00000b06 	br	2981c <select_colors+0xdc>
		compute_color(cinfo, & boxlist[i], i);
   297f0:	e0bffb17 	ldw	r2,-20(fp)
   297f4:	1004917a 	slli	r2,r2,5
   297f8:	e0fffc17 	ldw	r3,-16(fp)
   297fc:	1885883a 	add	r2,r3,r2
   29800:	e13ffe17 	ldw	r4,-8(fp)
   29804:	100b883a 	mov	r5,r2
   29808:	e1bffb17 	ldw	r6,-20(fp)
   2980c:	00294a80 	call	294a8 <compute_color>
	/* Shrink it to actually-used volume and set its statistics */
	update_box(cinfo, & boxlist[0]);
	/* Perform median-cut to produce final box list */
	numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
	/* Compute the representative color for each box, fill colormap */
	for (i = 0; i < numboxes; i++)
   29810:	e0bffb17 	ldw	r2,-20(fp)
   29814:	10800044 	addi	r2,r2,1
   29818:	e0bffb15 	stw	r2,-20(fp)
   2981c:	e0fffb17 	ldw	r3,-20(fp)
   29820:	e0bffd17 	ldw	r2,-12(fp)
   29824:	18bff216 	blt	r3,r2,297f0 <select_colors+0xb0>
		compute_color(cinfo, & boxlist[i], i);
	cinfo->actual_number_of_colors = numboxes;
   29828:	e0bffe17 	ldw	r2,-8(fp)
   2982c:	e0fffd17 	ldw	r3,-12(fp)
   29830:	10c01c15 	stw	r3,112(r2)
	TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
   29834:	e0bffe17 	ldw	r2,-8(fp)
   29838:	10800017 	ldw	r2,0(r2)
   2983c:	00c01884 	movi	r3,98
   29840:	10c00515 	stw	r3,20(r2)
   29844:	e0bffe17 	ldw	r2,-8(fp)
   29848:	10800017 	ldw	r2,0(r2)
   2984c:	e0fffd17 	ldw	r3,-12(fp)
   29850:	10c00615 	stw	r3,24(r2)
   29854:	e0bffe17 	ldw	r2,-8(fp)
   29858:	10800017 	ldw	r2,0(r2)
   2985c:	10800117 	ldw	r2,4(r2)
   29860:	e13ffe17 	ldw	r4,-8(fp)
   29864:	01400044 	movi	r5,1
   29868:	103ee83a 	callr	r2
}
   2986c:	e037883a 	mov	sp,fp
   29870:	dfc00117 	ldw	ra,4(sp)
   29874:	df000017 	ldw	fp,0(sp)
   29878:	dec00204 	addi	sp,sp,8
   2987c:	f800283a 	ret

00029880 <find_nearby_colors>:
	* candidate colormap entries is returned, and their colormap indexes are
	* placed in colorlist[].
	* This routine uses Heckbert's "locally sorted search" criterion to select
	* the colors that need further consideration.
	*/
{
   29880:	defeec04 	addi	sp,sp,-1104
   29884:	dfc11315 	stw	ra,1100(sp)
   29888:	df011215 	stw	fp,1096(sp)
   2988c:	df011204 	addi	fp,sp,1096
   29890:	e13ffc15 	stw	r4,-16(fp)
   29894:	e17ffd15 	stw	r5,-12(fp)
   29898:	e1bffe15 	stw	r6,-8(fp)
   2989c:	e1ffff15 	stw	r7,-4(fp)
	int numcolors = cinfo->actual_number_of_colors;
   298a0:	e0bffc17 	ldw	r2,-16(fp)
   298a4:	10801c17 	ldw	r2,112(r2)
   298a8:	e0bef315 	stw	r2,-1076(fp)
	* Actually we compute the coordinates of the center of the upper-corner
	* histogram cell, which are the upper bounds of the volume we care about.
	* Note that since ">>" rounds down, the "center" values may be closer to
	* min than to max; hence comparisons to them must be "<=", not "<".
	*/
	maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
   298ac:	e0bffd17 	ldw	r2,-12(fp)
   298b0:	10800604 	addi	r2,r2,24
   298b4:	e0bef415 	stw	r2,-1072(fp)
	centerc0 = (minc0 + maxc0) >> 1;
   298b8:	e0fffd17 	ldw	r3,-12(fp)
   298bc:	e0bef417 	ldw	r2,-1072(fp)
   298c0:	1885883a 	add	r2,r3,r2
   298c4:	1005d07a 	srai	r2,r2,1
   298c8:	e0bef515 	stw	r2,-1068(fp)
	maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
   298cc:	e0bffe17 	ldw	r2,-8(fp)
   298d0:	10800704 	addi	r2,r2,28
   298d4:	e0bef615 	stw	r2,-1064(fp)
	centerc1 = (minc1 + maxc1) >> 1;
   298d8:	e0fffe17 	ldw	r3,-8(fp)
   298dc:	e0bef617 	ldw	r2,-1064(fp)
   298e0:	1885883a 	add	r2,r3,r2
   298e4:	1005d07a 	srai	r2,r2,1
   298e8:	e0bef715 	stw	r2,-1060(fp)
	maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
   298ec:	e0bfff17 	ldw	r2,-4(fp)
   298f0:	10800604 	addi	r2,r2,24
   298f4:	e0bef815 	stw	r2,-1056(fp)
	centerc2 = (minc2 + maxc2) >> 1;
   298f8:	e0ffff17 	ldw	r3,-4(fp)
   298fc:	e0bef817 	ldw	r2,-1056(fp)
   29900:	1885883a 	add	r2,r3,r2
   29904:	1005d07a 	srai	r2,r2,1
   29908:	e0bef915 	stw	r2,-1052(fp)
	*  2. its maximum squared-distance to any point in the update box.
	* Both of these can be found by considering only the corners of the box.
	* We save the minimum distance for each color in mindist[];
	* only the smallest maximum distance is of interest.
	*/
	minmaxdist = 0x7FFFFFFFL;
   2990c:	00a00034 	movhi	r2,32768
   29910:	10bfffc4 	addi	r2,r2,-1
   29914:	e0bef015 	stw	r2,-1088(fp)

	for (i = 0; i < numcolors; i++) {
   29918:	e03eee15 	stw	zero,-1096(fp)
   2991c:	00010f06 	br	29d5c <find_nearby_colors+0x4dc>
		/* We compute the squared-c0-distance term, then add in the other two. */
		x = GETJSAMPLE(cinfo->colormap[0][i]);
   29920:	e0bffc17 	ldw	r2,-16(fp)
   29924:	10801d17 	ldw	r2,116(r2)
   29928:	10c00017 	ldw	r3,0(r2)
   2992c:	e0beee17 	ldw	r2,-1096(fp)
   29930:	1885883a 	add	r2,r3,r2
   29934:	10800003 	ldbu	r2,0(r2)
   29938:	10803fcc 	andi	r2,r2,255
   2993c:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc0) {
   29940:	e0fefa17 	ldw	r3,-1048(fp)
   29944:	e0bffd17 	ldw	r2,-12(fp)
   29948:	1880130e 	bge	r3,r2,29998 <find_nearby_colors+0x118>
			tdist = (x - minc0) * C0_SCALE;
   2994c:	e0fefa17 	ldw	r3,-1048(fp)
   29950:	e0bffd17 	ldw	r2,-12(fp)
   29954:	1885c83a 	sub	r2,r3,r2
   29958:	1085883a 	add	r2,r2,r2
   2995c:	e0befb15 	stw	r2,-1044(fp)
			min_dist = tdist*tdist;
   29960:	e13efb17 	ldw	r4,-1044(fp)
   29964:	e17efb17 	ldw	r5,-1044(fp)
   29968:	002c1540 	call	2c154 <__mulsi3>
   2996c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc0) * C0_SCALE;
   29970:	e0fefa17 	ldw	r3,-1048(fp)
   29974:	e0bef417 	ldw	r2,-1072(fp)
   29978:	1885c83a 	sub	r2,r3,r2
   2997c:	1085883a 	add	r2,r2,r2
   29980:	e0befb15 	stw	r2,-1044(fp)
			max_dist = tdist*tdist;
   29984:	e13efb17 	ldw	r4,-1044(fp)
   29988:	e17efb17 	ldw	r5,-1044(fp)
   2998c:	002c1540 	call	2c154 <__mulsi3>
   29990:	e0bef215 	stw	r2,-1080(fp)
   29994:	00002d06 	br	29a4c <find_nearby_colors+0x1cc>
		} else if (x > maxc0) {
   29998:	e0befa17 	ldw	r2,-1048(fp)
   2999c:	e0fef417 	ldw	r3,-1072(fp)
   299a0:	1880130e 	bge	r3,r2,299f0 <find_nearby_colors+0x170>
			tdist = (x - maxc0) * C0_SCALE;
   299a4:	e0fefa17 	ldw	r3,-1048(fp)
   299a8:	e0bef417 	ldw	r2,-1072(fp)
   299ac:	1885c83a 	sub	r2,r3,r2
   299b0:	1085883a 	add	r2,r2,r2
   299b4:	e0befb15 	stw	r2,-1044(fp)
			min_dist = tdist*tdist;
   299b8:	e13efb17 	ldw	r4,-1044(fp)
   299bc:	e17efb17 	ldw	r5,-1044(fp)
   299c0:	002c1540 	call	2c154 <__mulsi3>
   299c4:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc0) * C0_SCALE;
   299c8:	e0fefa17 	ldw	r3,-1048(fp)
   299cc:	e0bffd17 	ldw	r2,-12(fp)
   299d0:	1885c83a 	sub	r2,r3,r2
   299d4:	1085883a 	add	r2,r2,r2
   299d8:	e0befb15 	stw	r2,-1044(fp)
			max_dist = tdist*tdist;
   299dc:	e13efb17 	ldw	r4,-1044(fp)
   299e0:	e17efb17 	ldw	r5,-1044(fp)
   299e4:	002c1540 	call	2c154 <__mulsi3>
   299e8:	e0bef215 	stw	r2,-1080(fp)
   299ec:	00001706 	br	29a4c <find_nearby_colors+0x1cc>
		} else {
			/* within cell range so no contribution to min_dist */
			min_dist = 0;
   299f0:	e03ef115 	stw	zero,-1084(fp)
			if (x <= centerc0) {
   299f4:	e0befa17 	ldw	r2,-1048(fp)
   299f8:	e0fef517 	ldw	r3,-1068(fp)
   299fc:	18800a16 	blt	r3,r2,29a28 <find_nearby_colors+0x1a8>
				tdist = (x - maxc0) * C0_SCALE;
   29a00:	e0fefa17 	ldw	r3,-1048(fp)
   29a04:	e0bef417 	ldw	r2,-1072(fp)
   29a08:	1885c83a 	sub	r2,r3,r2
   29a0c:	1085883a 	add	r2,r2,r2
   29a10:	e0befb15 	stw	r2,-1044(fp)
				max_dist = tdist*tdist;
   29a14:	e13efb17 	ldw	r4,-1044(fp)
   29a18:	e17efb17 	ldw	r5,-1044(fp)
   29a1c:	002c1540 	call	2c154 <__mulsi3>
   29a20:	e0bef215 	stw	r2,-1080(fp)
   29a24:	00000906 	br	29a4c <find_nearby_colors+0x1cc>
			} else {
				tdist = (x - minc0) * C0_SCALE;
   29a28:	e0fefa17 	ldw	r3,-1048(fp)
   29a2c:	e0bffd17 	ldw	r2,-12(fp)
   29a30:	1885c83a 	sub	r2,r3,r2
   29a34:	1085883a 	add	r2,r2,r2
   29a38:	e0befb15 	stw	r2,-1044(fp)
				max_dist = tdist*tdist;
   29a3c:	e13efb17 	ldw	r4,-1044(fp)
   29a40:	e17efb17 	ldw	r5,-1044(fp)
   29a44:	002c1540 	call	2c154 <__mulsi3>
   29a48:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		x = GETJSAMPLE(cinfo->colormap[1][i]);
   29a4c:	e0bffc17 	ldw	r2,-16(fp)
   29a50:	10801d17 	ldw	r2,116(r2)
   29a54:	10800104 	addi	r2,r2,4
   29a58:	10c00017 	ldw	r3,0(r2)
   29a5c:	e0beee17 	ldw	r2,-1096(fp)
   29a60:	1885883a 	add	r2,r3,r2
   29a64:	10800003 	ldbu	r2,0(r2)
   29a68:	10803fcc 	andi	r2,r2,255
   29a6c:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc1) {
   29a70:	e0fefa17 	ldw	r3,-1048(fp)
   29a74:	e0bffe17 	ldw	r2,-8(fp)
   29a78:	18801b0e 	bge	r3,r2,29ae8 <find_nearby_colors+0x268>
			tdist = (x - minc1) * C1_SCALE;
   29a7c:	e0fefa17 	ldw	r3,-1048(fp)
   29a80:	e0bffe17 	ldw	r2,-8(fp)
   29a84:	1887c83a 	sub	r3,r3,r2
   29a88:	1805883a 	mov	r2,r3
   29a8c:	1085883a 	add	r2,r2,r2
   29a90:	10c5883a 	add	r2,r2,r3
   29a94:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
   29a98:	e13efb17 	ldw	r4,-1044(fp)
   29a9c:	e17efb17 	ldw	r5,-1044(fp)
   29aa0:	002c1540 	call	2c154 <__mulsi3>
   29aa4:	e0fef117 	ldw	r3,-1084(fp)
   29aa8:	1885883a 	add	r2,r3,r2
   29aac:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc1) * C1_SCALE;
   29ab0:	e0fefa17 	ldw	r3,-1048(fp)
   29ab4:	e0bef617 	ldw	r2,-1064(fp)
   29ab8:	1887c83a 	sub	r3,r3,r2
   29abc:	1805883a 	mov	r2,r3
   29ac0:	1085883a 	add	r2,r2,r2
   29ac4:	10c5883a 	add	r2,r2,r3
   29ac8:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
   29acc:	e13efb17 	ldw	r4,-1044(fp)
   29ad0:	e17efb17 	ldw	r5,-1044(fp)
   29ad4:	002c1540 	call	2c154 <__mulsi3>
   29ad8:	e0fef217 	ldw	r3,-1080(fp)
   29adc:	1885883a 	add	r2,r3,r2
   29ae0:	e0bef215 	stw	r2,-1080(fp)
   29ae4:	00003c06 	br	29bd8 <find_nearby_colors+0x358>
		} else if (x > maxc1) {
   29ae8:	e0befa17 	ldw	r2,-1048(fp)
   29aec:	e0fef617 	ldw	r3,-1064(fp)
   29af0:	18801b0e 	bge	r3,r2,29b60 <find_nearby_colors+0x2e0>
			tdist = (x - maxc1) * C1_SCALE;
   29af4:	e0fefa17 	ldw	r3,-1048(fp)
   29af8:	e0bef617 	ldw	r2,-1064(fp)
   29afc:	1887c83a 	sub	r3,r3,r2
   29b00:	1805883a 	mov	r2,r3
   29b04:	1085883a 	add	r2,r2,r2
   29b08:	10c5883a 	add	r2,r2,r3
   29b0c:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
   29b10:	e13efb17 	ldw	r4,-1044(fp)
   29b14:	e17efb17 	ldw	r5,-1044(fp)
   29b18:	002c1540 	call	2c154 <__mulsi3>
   29b1c:	e0fef117 	ldw	r3,-1084(fp)
   29b20:	1885883a 	add	r2,r3,r2
   29b24:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc1) * C1_SCALE;
   29b28:	e0fefa17 	ldw	r3,-1048(fp)
   29b2c:	e0bffe17 	ldw	r2,-8(fp)
   29b30:	1887c83a 	sub	r3,r3,r2
   29b34:	1805883a 	mov	r2,r3
   29b38:	1085883a 	add	r2,r2,r2
   29b3c:	10c5883a 	add	r2,r2,r3
   29b40:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
   29b44:	e13efb17 	ldw	r4,-1044(fp)
   29b48:	e17efb17 	ldw	r5,-1044(fp)
   29b4c:	002c1540 	call	2c154 <__mulsi3>
   29b50:	e0fef217 	ldw	r3,-1080(fp)
   29b54:	1885883a 	add	r2,r3,r2
   29b58:	e0bef215 	stw	r2,-1080(fp)
   29b5c:	00001e06 	br	29bd8 <find_nearby_colors+0x358>
		} else {
			/* within cell range so no contribution to min_dist */
			if (x <= centerc1) {
   29b60:	e0befa17 	ldw	r2,-1048(fp)
   29b64:	e0fef717 	ldw	r3,-1060(fp)
   29b68:	18800e16 	blt	r3,r2,29ba4 <find_nearby_colors+0x324>
				tdist = (x - maxc1) * C1_SCALE;
   29b6c:	e0fefa17 	ldw	r3,-1048(fp)
   29b70:	e0bef617 	ldw	r2,-1064(fp)
   29b74:	1887c83a 	sub	r3,r3,r2
   29b78:	1805883a 	mov	r2,r3
   29b7c:	1085883a 	add	r2,r2,r2
   29b80:	10c5883a 	add	r2,r2,r3
   29b84:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
   29b88:	e13efb17 	ldw	r4,-1044(fp)
   29b8c:	e17efb17 	ldw	r5,-1044(fp)
   29b90:	002c1540 	call	2c154 <__mulsi3>
   29b94:	e0fef217 	ldw	r3,-1080(fp)
   29b98:	1885883a 	add	r2,r3,r2
   29b9c:	e0bef215 	stw	r2,-1080(fp)
   29ba0:	00000d06 	br	29bd8 <find_nearby_colors+0x358>
			} else {
				tdist = (x - minc1) * C1_SCALE;
   29ba4:	e0fefa17 	ldw	r3,-1048(fp)
   29ba8:	e0bffe17 	ldw	r2,-8(fp)
   29bac:	1887c83a 	sub	r3,r3,r2
   29bb0:	1805883a 	mov	r2,r3
   29bb4:	1085883a 	add	r2,r2,r2
   29bb8:	10c5883a 	add	r2,r2,r3
   29bbc:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
   29bc0:	e13efb17 	ldw	r4,-1044(fp)
   29bc4:	e17efb17 	ldw	r5,-1044(fp)
   29bc8:	002c1540 	call	2c154 <__mulsi3>
   29bcc:	e0fef217 	ldw	r3,-1080(fp)
   29bd0:	1885883a 	add	r2,r3,r2
   29bd4:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		x = GETJSAMPLE(cinfo->colormap[2][i]);
   29bd8:	e0bffc17 	ldw	r2,-16(fp)
   29bdc:	10801d17 	ldw	r2,116(r2)
   29be0:	10800204 	addi	r2,r2,8
   29be4:	10c00017 	ldw	r3,0(r2)
   29be8:	e0beee17 	ldw	r2,-1096(fp)
   29bec:	1885883a 	add	r2,r3,r2
   29bf0:	10800003 	ldbu	r2,0(r2)
   29bf4:	10803fcc 	andi	r2,r2,255
   29bf8:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc2) {
   29bfc:	e0fefa17 	ldw	r3,-1048(fp)
   29c00:	e0bfff17 	ldw	r2,-4(fp)
   29c04:	1880150e 	bge	r3,r2,29c5c <find_nearby_colors+0x3dc>
			tdist = (x - minc2) * C2_SCALE;
   29c08:	e0fefa17 	ldw	r3,-1048(fp)
   29c0c:	e0bfff17 	ldw	r2,-4(fp)
   29c10:	1885c83a 	sub	r2,r3,r2
   29c14:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
   29c18:	e13efb17 	ldw	r4,-1044(fp)
   29c1c:	e17efb17 	ldw	r5,-1044(fp)
   29c20:	002c1540 	call	2c154 <__mulsi3>
   29c24:	e0fef117 	ldw	r3,-1084(fp)
   29c28:	1885883a 	add	r2,r3,r2
   29c2c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc2) * C2_SCALE;
   29c30:	e0fefa17 	ldw	r3,-1048(fp)
   29c34:	e0bef817 	ldw	r2,-1056(fp)
   29c38:	1885c83a 	sub	r2,r3,r2
   29c3c:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
   29c40:	e13efb17 	ldw	r4,-1044(fp)
   29c44:	e17efb17 	ldw	r5,-1044(fp)
   29c48:	002c1540 	call	2c154 <__mulsi3>
   29c4c:	e0fef217 	ldw	r3,-1080(fp)
   29c50:	1885883a 	add	r2,r3,r2
   29c54:	e0bef215 	stw	r2,-1080(fp)
   29c58:	00003006 	br	29d1c <find_nearby_colors+0x49c>
		} else if (x > maxc2) {
   29c5c:	e0befa17 	ldw	r2,-1048(fp)
   29c60:	e0fef817 	ldw	r3,-1056(fp)
   29c64:	1880150e 	bge	r3,r2,29cbc <find_nearby_colors+0x43c>
			tdist = (x - maxc2) * C2_SCALE;
   29c68:	e0fefa17 	ldw	r3,-1048(fp)
   29c6c:	e0bef817 	ldw	r2,-1056(fp)
   29c70:	1885c83a 	sub	r2,r3,r2
   29c74:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
   29c78:	e13efb17 	ldw	r4,-1044(fp)
   29c7c:	e17efb17 	ldw	r5,-1044(fp)
   29c80:	002c1540 	call	2c154 <__mulsi3>
   29c84:	e0fef117 	ldw	r3,-1084(fp)
   29c88:	1885883a 	add	r2,r3,r2
   29c8c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc2) * C2_SCALE;
   29c90:	e0fefa17 	ldw	r3,-1048(fp)
   29c94:	e0bfff17 	ldw	r2,-4(fp)
   29c98:	1885c83a 	sub	r2,r3,r2
   29c9c:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
   29ca0:	e13efb17 	ldw	r4,-1044(fp)
   29ca4:	e17efb17 	ldw	r5,-1044(fp)
   29ca8:	002c1540 	call	2c154 <__mulsi3>
   29cac:	e0fef217 	ldw	r3,-1080(fp)
   29cb0:	1885883a 	add	r2,r3,r2
   29cb4:	e0bef215 	stw	r2,-1080(fp)
   29cb8:	00001806 	br	29d1c <find_nearby_colors+0x49c>
		} else {
			/* within cell range so no contribution to min_dist */
			if (x <= centerc2) {
   29cbc:	e0befa17 	ldw	r2,-1048(fp)
   29cc0:	e0fef917 	ldw	r3,-1052(fp)
   29cc4:	18800b16 	blt	r3,r2,29cf4 <find_nearby_colors+0x474>
				tdist = (x - maxc2) * C2_SCALE;
   29cc8:	e0fefa17 	ldw	r3,-1048(fp)
   29ccc:	e0bef817 	ldw	r2,-1056(fp)
   29cd0:	1885c83a 	sub	r2,r3,r2
   29cd4:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
   29cd8:	e13efb17 	ldw	r4,-1044(fp)
   29cdc:	e17efb17 	ldw	r5,-1044(fp)
   29ce0:	002c1540 	call	2c154 <__mulsi3>
   29ce4:	e0fef217 	ldw	r3,-1080(fp)
   29ce8:	1885883a 	add	r2,r3,r2
   29cec:	e0bef215 	stw	r2,-1080(fp)
   29cf0:	00000a06 	br	29d1c <find_nearby_colors+0x49c>
			} else {
				tdist = (x - minc2) * C2_SCALE;
   29cf4:	e0fefa17 	ldw	r3,-1048(fp)
   29cf8:	e0bfff17 	ldw	r2,-4(fp)
   29cfc:	1885c83a 	sub	r2,r3,r2
   29d00:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
   29d04:	e13efb17 	ldw	r4,-1044(fp)
   29d08:	e17efb17 	ldw	r5,-1044(fp)
   29d0c:	002c1540 	call	2c154 <__mulsi3>
   29d10:	e0fef217 	ldw	r3,-1080(fp)
   29d14:	1885883a 	add	r2,r3,r2
   29d18:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		mindist[i] = min_dist;	/* save away the results */
   29d1c:	e0beee17 	ldw	r2,-1096(fp)
   29d20:	1085883a 	add	r2,r2,r2
   29d24:	1085883a 	add	r2,r2,r2
   29d28:	e0feee04 	addi	r3,fp,-1096
   29d2c:	1885883a 	add	r2,r3,r2
   29d30:	10800e04 	addi	r2,r2,56
   29d34:	e0fef117 	ldw	r3,-1084(fp)
   29d38:	10c00015 	stw	r3,0(r2)
		if (max_dist < minmaxdist)
   29d3c:	e0fef217 	ldw	r3,-1080(fp)
   29d40:	e0bef017 	ldw	r2,-1088(fp)
   29d44:	1880020e 	bge	r3,r2,29d50 <find_nearby_colors+0x4d0>
			minmaxdist = max_dist;
   29d48:	e0bef217 	ldw	r2,-1080(fp)
   29d4c:	e0bef015 	stw	r2,-1088(fp)
	* We save the minimum distance for each color in mindist[];
	* only the smallest maximum distance is of interest.
	*/
	minmaxdist = 0x7FFFFFFFL;

	for (i = 0; i < numcolors; i++) {
   29d50:	e0beee17 	ldw	r2,-1096(fp)
   29d54:	10800044 	addi	r2,r2,1
   29d58:	e0beee15 	stw	r2,-1096(fp)
   29d5c:	e0feee17 	ldw	r3,-1096(fp)
   29d60:	e0bef317 	ldw	r2,-1076(fp)
   29d64:	18beee16 	blt	r3,r2,29920 <find_nearby_colors+0xa0>

	/* Now we know that no cell in the update box is more than minmaxdist
	* away from some colormap entry.  Therefore, only colors that are
	* within minmaxdist of some part of the box need be considered.
	*/
	ncolors = 0;
   29d68:	e03eef15 	stw	zero,-1092(fp)
	for (i = 0; i < numcolors; i++) {
   29d6c:	e03eee15 	stw	zero,-1096(fp)
   29d70:	00001406 	br	29dc4 <find_nearby_colors+0x544>
		if (mindist[i] <= minmaxdist)
   29d74:	e0beee17 	ldw	r2,-1096(fp)
   29d78:	1085883a 	add	r2,r2,r2
   29d7c:	1085883a 	add	r2,r2,r2
   29d80:	e0feee04 	addi	r3,fp,-1096
   29d84:	1885883a 	add	r2,r3,r2
   29d88:	10800e04 	addi	r2,r2,56
   29d8c:	10800017 	ldw	r2,0(r2)
   29d90:	e0fef017 	ldw	r3,-1088(fp)
   29d94:	18800816 	blt	r3,r2,29db8 <find_nearby_colors+0x538>
			colorlist[ncolors++] = (JSAMPLE) i;
   29d98:	e0beef17 	ldw	r2,-1092(fp)
   29d9c:	e0c00217 	ldw	r3,8(fp)
   29da0:	1885883a 	add	r2,r3,r2
   29da4:	e0feee17 	ldw	r3,-1096(fp)
   29da8:	10c00005 	stb	r3,0(r2)
   29dac:	e0beef17 	ldw	r2,-1092(fp)
   29db0:	10800044 	addi	r2,r2,1
   29db4:	e0beef15 	stw	r2,-1092(fp)
	/* Now we know that no cell in the update box is more than minmaxdist
	* away from some colormap entry.  Therefore, only colors that are
	* within minmaxdist of some part of the box need be considered.
	*/
	ncolors = 0;
	for (i = 0; i < numcolors; i++) {
   29db8:	e0beee17 	ldw	r2,-1096(fp)
   29dbc:	10800044 	addi	r2,r2,1
   29dc0:	e0beee15 	stw	r2,-1096(fp)
   29dc4:	e0feee17 	ldw	r3,-1096(fp)
   29dc8:	e0bef317 	ldw	r2,-1076(fp)
   29dcc:	18bfe916 	blt	r3,r2,29d74 <find_nearby_colors+0x4f4>
		if (mindist[i] <= minmaxdist)
			colorlist[ncolors++] = (JSAMPLE) i;
	}
	return ncolors;
   29dd0:	e0beef17 	ldw	r2,-1092(fp)
}
   29dd4:	e037883a 	mov	sp,fp
   29dd8:	dfc00117 	ldw	ra,4(sp)
   29ddc:	df000017 	ldw	fp,0(sp)
   29de0:	dec00204 	addi	sp,sp,8
   29de4:	f800283a 	ret

00029de8 <find_best_colors>:
	* given the list of candidate colors prepared by find_nearby_colors.
	* Return the indexes of the closest entries in the bestcolor[] array.
	* This routine uses Thomas' incremental distance calculation method to
	* find the distance from a colormap entry to successive cells in the box.
	*/
{
   29de8:	deff6a04 	addi	sp,sp,-600
   29dec:	dfc09515 	stw	ra,596(sp)
   29df0:	df009415 	stw	fp,592(sp)
   29df4:	dc809315 	stw	r18,588(sp)
   29df8:	dc409215 	stw	r17,584(sp)
   29dfc:	dc009115 	stw	r16,580(sp)
   29e00:	df009104 	addi	fp,sp,580
   29e04:	e13ffc15 	stw	r4,-16(fp)
   29e08:	e17ffd15 	stw	r5,-12(fp)
   29e0c:	e1bffe15 	stw	r6,-8(fp)
   29e10:	e1ffff15 	stw	r7,-4(fp)
	INT32 inc0, inc1, inc2;	/* initial values for increments */
	/* This array holds the distance to the nearest-so-far color for each cell */
	INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Initialize best-distance for each cell of the update box */
	bptr = bestdist;
   29e14:	e43f7c04 	addi	r16,fp,-528
	for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
   29e18:	00801fc4 	movi	r2,127
   29e1c:	e0bf7215 	stw	r2,-568(fp)
   29e20:	00000706 	br	29e40 <find_best_colors+0x58>
		*bptr++ = 0x7FFFFFFFL;
   29e24:	00a00034 	movhi	r2,32768
   29e28:	10bfffc4 	addi	r2,r2,-1
   29e2c:	80800015 	stw	r2,0(r16)
   29e30:	84000104 	addi	r16,r16,4
	/* This array holds the distance to the nearest-so-far color for each cell */
	INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Initialize best-distance for each cell of the update box */
	bptr = bestdist;
	for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
   29e34:	e0bf7217 	ldw	r2,-568(fp)
   29e38:	10bfffc4 	addi	r2,r2,-1
   29e3c:	e0bf7215 	stw	r2,-568(fp)
   29e40:	e0bf7217 	ldw	r2,-568(fp)
   29e44:	103ff70e 	bge	r2,zero,29e24 <find_best_colors+0x3c>
	/* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)

	for (i = 0; i < numcolors; i++) {
   29e48:	e03f7215 	stw	zero,-568(fp)
   29e4c:	00008806 	br	2a070 <find_best_colors+0x288>
		icolor = GETJSAMPLE(colorlist[i]);
   29e50:	e0bf7217 	ldw	r2,-568(fp)
   29e54:	e0c00617 	ldw	r3,24(fp)
   29e58:	1885883a 	add	r2,r3,r2
   29e5c:	10800003 	ldbu	r2,0(r2)
   29e60:	10803fcc 	andi	r2,r2,255
   29e64:	e0bf7815 	stw	r2,-544(fp)
		/* Compute (square of) distance from minc0/c1/c2 to this color */
		inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
   29e68:	e0bffc17 	ldw	r2,-16(fp)
   29e6c:	10801d17 	ldw	r2,116(r2)
   29e70:	10c00017 	ldw	r3,0(r2)
   29e74:	e0bf7817 	ldw	r2,-544(fp)
   29e78:	1885883a 	add	r2,r3,r2
   29e7c:	10800003 	ldbu	r2,0(r2)
   29e80:	10803fcc 	andi	r2,r2,255
   29e84:	e0fffd17 	ldw	r3,-12(fp)
   29e88:	1885c83a 	sub	r2,r3,r2
   29e8c:	1085883a 	add	r2,r2,r2
   29e90:	e0bf7915 	stw	r2,-540(fp)
		dist0 = inc0*inc0;
   29e94:	e13f7917 	ldw	r4,-540(fp)
   29e98:	e17f7917 	ldw	r5,-540(fp)
   29e9c:	002c1540 	call	2c154 <__mulsi3>
   29ea0:	e0bf7415 	stw	r2,-560(fp)
		inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
   29ea4:	e0bffc17 	ldw	r2,-16(fp)
   29ea8:	10801d17 	ldw	r2,116(r2)
   29eac:	10800104 	addi	r2,r2,4
   29eb0:	10c00017 	ldw	r3,0(r2)
   29eb4:	e0bf7817 	ldw	r2,-544(fp)
   29eb8:	1885883a 	add	r2,r3,r2
   29ebc:	10800003 	ldbu	r2,0(r2)
   29ec0:	10803fcc 	andi	r2,r2,255
   29ec4:	e0fffe17 	ldw	r3,-8(fp)
   29ec8:	1887c83a 	sub	r3,r3,r2
   29ecc:	1805883a 	mov	r2,r3
   29ed0:	1085883a 	add	r2,r2,r2
   29ed4:	10c5883a 	add	r2,r2,r3
   29ed8:	e0bf7a15 	stw	r2,-536(fp)
		dist0 += inc1*inc1;
   29edc:	e13f7a17 	ldw	r4,-536(fp)
   29ee0:	e17f7a17 	ldw	r5,-536(fp)
   29ee4:	002c1540 	call	2c154 <__mulsi3>
   29ee8:	e0ff7417 	ldw	r3,-560(fp)
   29eec:	1885883a 	add	r2,r3,r2
   29ef0:	e0bf7415 	stw	r2,-560(fp)
		inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
   29ef4:	e0bffc17 	ldw	r2,-16(fp)
   29ef8:	10801d17 	ldw	r2,116(r2)
   29efc:	10800204 	addi	r2,r2,8
   29f00:	10c00017 	ldw	r3,0(r2)
   29f04:	e0bf7817 	ldw	r2,-544(fp)
   29f08:	1885883a 	add	r2,r3,r2
   29f0c:	10800003 	ldbu	r2,0(r2)
   29f10:	10803fcc 	andi	r2,r2,255
   29f14:	e0ffff17 	ldw	r3,-4(fp)
   29f18:	1885c83a 	sub	r2,r3,r2
   29f1c:	e0bf7b15 	stw	r2,-532(fp)
		dist0 += inc2*inc2;
   29f20:	e13f7b17 	ldw	r4,-532(fp)
   29f24:	e17f7b17 	ldw	r5,-532(fp)
   29f28:	002c1540 	call	2c154 <__mulsi3>
   29f2c:	e0ff7417 	ldw	r3,-560(fp)
   29f30:	1885883a 	add	r2,r3,r2
   29f34:	e0bf7415 	stw	r2,-560(fp)
		/* Form the initial difference increments */
		inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
   29f38:	e0bf7917 	ldw	r2,-540(fp)
   29f3c:	10800204 	addi	r2,r2,8
   29f40:	1004917a 	slli	r2,r2,5
   29f44:	e0bf7915 	stw	r2,-540(fp)
		inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
   29f48:	e13f7a17 	ldw	r4,-536(fp)
   29f4c:	01400604 	movi	r5,24
   29f50:	002c1540 	call	2c154 <__mulsi3>
   29f54:	10802404 	addi	r2,r2,144
   29f58:	e0bf7a15 	stw	r2,-536(fp)
		inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
   29f5c:	e0bf7b17 	ldw	r2,-532(fp)
   29f60:	10800104 	addi	r2,r2,4
   29f64:	1004913a 	slli	r2,r2,4
   29f68:	e0bf7b15 	stw	r2,-532(fp)
		/* Now loop over all cells in box, updating distance per Thomas method */
		bptr = bestdist;
   29f6c:	e43f7c04 	addi	r16,fp,-528
		cptr = bestcolor;
   29f70:	e0800717 	ldw	r2,28(fp)
   29f74:	e0bf7315 	stw	r2,-564(fp)
		xx0 = inc0;
   29f78:	e0bf7917 	ldw	r2,-540(fp)
   29f7c:	e0bf7615 	stw	r2,-552(fp)
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
   29f80:	008000c4 	movi	r2,3
   29f84:	e0bf6f15 	stw	r2,-580(fp)
   29f88:	00003406 	br	2a05c <find_best_colors+0x274>
			dist1 = dist0;
   29f8c:	e0bf7417 	ldw	r2,-560(fp)
   29f90:	e0bf7515 	stw	r2,-556(fp)
			xx1 = inc1;
   29f94:	e0bf7a17 	ldw	r2,-536(fp)
   29f98:	e0bf7715 	stw	r2,-548(fp)
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
   29f9c:	008001c4 	movi	r2,7
   29fa0:	e0bf7015 	stw	r2,-576(fp)
   29fa4:	00002106 	br	2a02c <find_best_colors+0x244>
				dist2 = dist1;
   29fa8:	e47f7517 	ldw	r17,-556(fp)
				xx2 = inc2;
   29fac:	e4bf7b17 	ldw	r18,-532(fp)
				for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
   29fb0:	008000c4 	movi	r2,3
   29fb4:	e0bf7115 	stw	r2,-572(fp)
   29fb8:	00001006 	br	29ffc <find_best_colors+0x214>
					if (dist2 < *bptr) {
   29fbc:	80800017 	ldw	r2,0(r16)
   29fc0:	8880050e 	bge	r17,r2,29fd8 <find_best_colors+0x1f0>
						*bptr = dist2;
   29fc4:	84400015 	stw	r17,0(r16)
						*cptr = (JSAMPLE) icolor;
   29fc8:	e0bf7817 	ldw	r2,-544(fp)
   29fcc:	1007883a 	mov	r3,r2
   29fd0:	e0bf7317 	ldw	r2,-564(fp)
   29fd4:	10c00005 	stb	r3,0(r2)
					}
					dist2 += xx2;
   29fd8:	8ca3883a 	add	r17,r17,r18
					xx2 += 2 * STEP_C2 * STEP_C2;
   29fdc:	94802004 	addi	r18,r18,128
					bptr++;
   29fe0:	84000104 	addi	r16,r16,4
					cptr++;
   29fe4:	e0bf7317 	ldw	r2,-564(fp)
   29fe8:	10800044 	addi	r2,r2,1
   29fec:	e0bf7315 	stw	r2,-564(fp)
			dist1 = dist0;
			xx1 = inc1;
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
				dist2 = dist1;
				xx2 = inc2;
				for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
   29ff0:	e0bf7117 	ldw	r2,-572(fp)
   29ff4:	10bfffc4 	addi	r2,r2,-1
   29ff8:	e0bf7115 	stw	r2,-572(fp)
   29ffc:	e0bf7117 	ldw	r2,-572(fp)
   2a000:	103fee0e 	bge	r2,zero,29fbc <find_best_colors+0x1d4>
					dist2 += xx2;
					xx2 += 2 * STEP_C2 * STEP_C2;
					bptr++;
					cptr++;
				}
				dist1 += xx1;
   2a004:	e0ff7517 	ldw	r3,-556(fp)
   2a008:	e0bf7717 	ldw	r2,-548(fp)
   2a00c:	1885883a 	add	r2,r3,r2
   2a010:	e0bf7515 	stw	r2,-556(fp)
				xx1 += 2 * STEP_C1 * STEP_C1;
   2a014:	e0bf7717 	ldw	r2,-548(fp)
   2a018:	10804804 	addi	r2,r2,288
   2a01c:	e0bf7715 	stw	r2,-548(fp)
		cptr = bestcolor;
		xx0 = inc0;
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
			dist1 = dist0;
			xx1 = inc1;
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
   2a020:	e0bf7017 	ldw	r2,-576(fp)
   2a024:	10bfffc4 	addi	r2,r2,-1
   2a028:	e0bf7015 	stw	r2,-576(fp)
   2a02c:	e0bf7017 	ldw	r2,-576(fp)
   2a030:	103fdd0e 	bge	r2,zero,29fa8 <find_best_colors+0x1c0>
					cptr++;
				}
				dist1 += xx1;
				xx1 += 2 * STEP_C1 * STEP_C1;
			}
			dist0 += xx0;
   2a034:	e0ff7417 	ldw	r3,-560(fp)
   2a038:	e0bf7617 	ldw	r2,-552(fp)
   2a03c:	1885883a 	add	r2,r3,r2
   2a040:	e0bf7415 	stw	r2,-560(fp)
			xx0 += 2 * STEP_C0 * STEP_C0;
   2a044:	e0bf7617 	ldw	r2,-552(fp)
   2a048:	10808004 	addi	r2,r2,512
   2a04c:	e0bf7615 	stw	r2,-552(fp)
		inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
		/* Now loop over all cells in box, updating distance per Thomas method */
		bptr = bestdist;
		cptr = bestcolor;
		xx0 = inc0;
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
   2a050:	e0bf6f17 	ldw	r2,-580(fp)
   2a054:	10bfffc4 	addi	r2,r2,-1
   2a058:	e0bf6f15 	stw	r2,-580(fp)
   2a05c:	e0bf6f17 	ldw	r2,-580(fp)
   2a060:	103fca0e 	bge	r2,zero,29f8c <find_best_colors+0x1a4>
	/* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)

	for (i = 0; i < numcolors; i++) {
   2a064:	e0bf7217 	ldw	r2,-568(fp)
   2a068:	10800044 	addi	r2,r2,1
   2a06c:	e0bf7215 	stw	r2,-568(fp)
   2a070:	e0ff7217 	ldw	r3,-568(fp)
   2a074:	e0800517 	ldw	r2,20(fp)
   2a078:	18bf7516 	blt	r3,r2,29e50 <find_best_colors+0x68>
			}
			dist0 += xx0;
			xx0 += 2 * STEP_C0 * STEP_C0;
		}
	}
}
   2a07c:	e037883a 	mov	sp,fp
   2a080:	dfc00417 	ldw	ra,16(sp)
   2a084:	df000317 	ldw	fp,12(sp)
   2a088:	dc800217 	ldw	r18,8(sp)
   2a08c:	dc400117 	ldw	r17,4(sp)
   2a090:	dc000017 	ldw	r16,0(sp)
   2a094:	dec00504 	addi	sp,sp,20
   2a098:	f800283a 	ret

0002a09c <fill_inverse_cmap>:
LOCAL(void)
	fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
	/* Fill the inverse-colormap entries in the update box that contains */
	/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
	/* we can fill as many others as we wish.) */
{
   2a09c:	deff8c04 	addi	sp,sp,-464
   2a0a0:	dfc07315 	stw	ra,460(sp)
   2a0a4:	df007215 	stw	fp,456(sp)
   2a0a8:	dc407115 	stw	r17,452(sp)
   2a0ac:	dc007015 	stw	r16,448(sp)
   2a0b0:	df007004 	addi	fp,sp,448
   2a0b4:	e13ffc15 	stw	r4,-16(fp)
   2a0b8:	e17ffd15 	stw	r5,-12(fp)
   2a0bc:	e1bffe15 	stw	r6,-8(fp)
   2a0c0:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2a0c4:	e0bffc17 	ldw	r2,-16(fp)
   2a0c8:	10806e17 	ldw	r2,440(r2)
   2a0cc:	e0bf9615 	stw	r2,-424(fp)
	hist3d histogram = cquantize->histogram;
   2a0d0:	e0bf9617 	ldw	r2,-424(fp)
   2a0d4:	10800617 	ldw	r2,24(r2)
   2a0d8:	e0bf9715 	stw	r2,-420(fp)
	int numcolors;		/* number of candidate colors */
	/* This array holds the actually closest colormap index for each cell. */
	JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Convert cell coordinates to update box ID */
	c0 >>= BOX_C0_LOG;
   2a0dc:	e0bffd17 	ldw	r2,-12(fp)
   2a0e0:	1005d0ba 	srai	r2,r2,2
   2a0e4:	e0bffd15 	stw	r2,-12(fp)
	c1 >>= BOX_C1_LOG;
   2a0e8:	e0bffe17 	ldw	r2,-8(fp)
   2a0ec:	1005d0fa 	srai	r2,r2,3
   2a0f0:	e0bffe15 	stw	r2,-8(fp)
	c2 >>= BOX_C2_LOG;
   2a0f4:	e0bfff17 	ldw	r2,-4(fp)
   2a0f8:	1005d0ba 	srai	r2,r2,2
   2a0fc:	e0bfff15 	stw	r2,-4(fp)

	/* Compute true coordinates of update box's origin corner.
	* Actually we compute the coordinates of the center of the corner
	* histogram cell, which are the lower bounds of the volume we care about.
	*/
	minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
   2a100:	e0bffd17 	ldw	r2,-12(fp)
   2a104:	1004917a 	slli	r2,r2,5
   2a108:	10800104 	addi	r2,r2,4
   2a10c:	e0bf9815 	stw	r2,-416(fp)
	minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
   2a110:	e0bffe17 	ldw	r2,-8(fp)
   2a114:	1004917a 	slli	r2,r2,5
   2a118:	10800084 	addi	r2,r2,2
   2a11c:	e0bf9915 	stw	r2,-412(fp)
	minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
   2a120:	e0bfff17 	ldw	r2,-4(fp)
   2a124:	1004917a 	slli	r2,r2,5
   2a128:	10800104 	addi	r2,r2,4
   2a12c:	e0bf9a15 	stw	r2,-408(fp)

	/* Determine which colormap entries are close enough to be candidates
	* for the nearest entry to some cell in the update box.
	*/
	numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
   2a130:	e0bf9c04 	addi	r2,fp,-400
   2a134:	d8800015 	stw	r2,0(sp)
   2a138:	e13ffc17 	ldw	r4,-16(fp)
   2a13c:	e17f9817 	ldw	r5,-416(fp)
   2a140:	e1bf9917 	ldw	r6,-412(fp)
   2a144:	e1ff9a17 	ldw	r7,-408(fp)
   2a148:	00298800 	call	29880 <find_nearby_colors>
   2a14c:	e0bf9b15 	stw	r2,-404(fp)

	/* Determine the actually nearest colors. */
	find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
   2a150:	e0bf9b17 	ldw	r2,-404(fp)
   2a154:	d8800015 	stw	r2,0(sp)
   2a158:	e0bf9c04 	addi	r2,fp,-400
   2a15c:	d8800115 	stw	r2,4(sp)
		bestcolor);
   2a160:	e0bfdc04 	addi	r2,fp,-144
	* for the nearest entry to some cell in the update box.
	*/
	numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

	/* Determine the actually nearest colors. */
	find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
   2a164:	d8800215 	stw	r2,8(sp)
   2a168:	e13ffc17 	ldw	r4,-16(fp)
   2a16c:	e17f9817 	ldw	r5,-416(fp)
   2a170:	e1bf9917 	ldw	r6,-412(fp)
   2a174:	e1ff9a17 	ldw	r7,-408(fp)
   2a178:	0029de80 	call	29de8 <find_best_colors>
		bestcolor);

	/* Save the best color numbers (plus 1) in the main cache array */
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
   2a17c:	e0bffd17 	ldw	r2,-12(fp)
   2a180:	1085883a 	add	r2,r2,r2
   2a184:	1085883a 	add	r2,r2,r2
   2a188:	e0bffd15 	stw	r2,-12(fp)
	c1 <<= BOX_C1_LOG;
   2a18c:	e0bffe17 	ldw	r2,-8(fp)
   2a190:	100490fa 	slli	r2,r2,3
   2a194:	e0bffe15 	stw	r2,-8(fp)
	c2 <<= BOX_C2_LOG;
   2a198:	e0bfff17 	ldw	r2,-4(fp)
   2a19c:	1085883a 	add	r2,r2,r2
   2a1a0:	1085883a 	add	r2,r2,r2
   2a1a4:	e0bfff15 	stw	r2,-4(fp)
	cptr = bestcolor;
   2a1a8:	e43fdc04 	addi	r16,fp,-144
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
   2a1ac:	e03f9315 	stw	zero,-436(fp)
   2a1b0:	00002906 	br	2a258 <fill_inverse_cmap+0x1bc>
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
   2a1b4:	e03f9415 	stw	zero,-432(fp)
   2a1b8:	00002106 	br	2a240 <fill_inverse_cmap+0x1a4>
			cachep = & histogram[c0+ic0][c1+ic1][c2];
   2a1bc:	e0fffd17 	ldw	r3,-12(fp)
   2a1c0:	e0bf9317 	ldw	r2,-436(fp)
   2a1c4:	1885883a 	add	r2,r3,r2
   2a1c8:	1085883a 	add	r2,r2,r2
   2a1cc:	1085883a 	add	r2,r2,r2
   2a1d0:	e0ff9717 	ldw	r3,-420(fp)
   2a1d4:	1885883a 	add	r2,r3,r2
   2a1d8:	10c00017 	ldw	r3,0(r2)
   2a1dc:	e13ffe17 	ldw	r4,-8(fp)
   2a1e0:	e0bf9417 	ldw	r2,-432(fp)
   2a1e4:	2085883a 	add	r2,r4,r2
   2a1e8:	100491ba 	slli	r2,r2,6
   2a1ec:	1887883a 	add	r3,r3,r2
   2a1f0:	e0bfff17 	ldw	r2,-4(fp)
   2a1f4:	1085883a 	add	r2,r2,r2
   2a1f8:	18a3883a 	add	r17,r3,r2
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
   2a1fc:	e03f9515 	stw	zero,-428(fp)
   2a200:	00000906 	br	2a228 <fill_inverse_cmap+0x18c>
				*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
   2a204:	80800003 	ldbu	r2,0(r16)
   2a208:	10803fcc 	andi	r2,r2,255
   2a20c:	10800044 	addi	r2,r2,1
   2a210:	8880000d 	sth	r2,0(r17)
   2a214:	8c400084 	addi	r17,r17,2
   2a218:	84000044 	addi	r16,r16,1
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
			cachep = & histogram[c0+ic0][c1+ic1][c2];
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
   2a21c:	e0bf9517 	ldw	r2,-428(fp)
   2a220:	10800044 	addi	r2,r2,1
   2a224:	e0bf9515 	stw	r2,-428(fp)
   2a228:	e0bf9517 	ldw	r2,-428(fp)
   2a22c:	10800110 	cmplti	r2,r2,4
   2a230:	103ff41e 	bne	r2,zero,2a204 <fill_inverse_cmap+0x168>
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
	c1 <<= BOX_C1_LOG;
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
   2a234:	e0bf9417 	ldw	r2,-432(fp)
   2a238:	10800044 	addi	r2,r2,1
   2a23c:	e0bf9415 	stw	r2,-432(fp)
   2a240:	e0bf9417 	ldw	r2,-432(fp)
   2a244:	10800210 	cmplti	r2,r2,8
   2a248:	103fdc1e 	bne	r2,zero,2a1bc <fill_inverse_cmap+0x120>
	/* Save the best color numbers (plus 1) in the main cache array */
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
	c1 <<= BOX_C1_LOG;
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
   2a24c:	e0bf9317 	ldw	r2,-436(fp)
   2a250:	10800044 	addi	r2,r2,1
   2a254:	e0bf9315 	stw	r2,-436(fp)
   2a258:	e0bf9317 	ldw	r2,-436(fp)
   2a25c:	10800110 	cmplti	r2,r2,4
   2a260:	103fd41e 	bne	r2,zero,2a1b4 <fill_inverse_cmap+0x118>
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
				*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
			}
		}
	}
}
   2a264:	e037883a 	mov	sp,fp
   2a268:	dfc00317 	ldw	ra,12(sp)
   2a26c:	df000217 	ldw	fp,8(sp)
   2a270:	dc400117 	ldw	r17,4(sp)
   2a274:	dc000017 	ldw	r16,0(sp)
   2a278:	dec00404 	addi	sp,sp,16
   2a27c:	f800283a 	ret

0002a280 <pass2_no_dither>:

METHODDEF(void)
	pass2_no_dither (j_decompress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
	/* This version performs no dithering */
{
   2a280:	deffef04 	addi	sp,sp,-68
   2a284:	dfc01015 	stw	ra,64(sp)
   2a288:	df000f15 	stw	fp,60(sp)
   2a28c:	dd400e15 	stw	r21,56(sp)
   2a290:	dd000d15 	stw	r20,52(sp)
   2a294:	dcc00c15 	stw	r19,48(sp)
   2a298:	dc800b15 	stw	r18,44(sp)
   2a29c:	dc400a15 	stw	r17,40(sp)
   2a2a0:	dc000915 	stw	r16,36(sp)
   2a2a4:	df000904 	addi	fp,sp,36
   2a2a8:	e13ffc15 	stw	r4,-16(fp)
   2a2ac:	e17ffd15 	stw	r5,-12(fp)
   2a2b0:	e1bffe15 	stw	r6,-8(fp)
   2a2b4:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2a2b8:	e0bffc17 	ldw	r2,-16(fp)
   2a2bc:	10806e17 	ldw	r2,440(r2)
   2a2c0:	e0bff915 	stw	r2,-28(fp)
	hist3d histogram = cquantize->histogram;
   2a2c4:	e0bff917 	ldw	r2,-28(fp)
   2a2c8:	10800617 	ldw	r2,24(r2)
   2a2cc:	e0bffa15 	stw	r2,-24(fp)
	register JSAMPROW inptr, outptr;
	register histptr cachep;
	register int c0, c1, c2;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   2a2d0:	e0bffc17 	ldw	r2,-16(fp)
   2a2d4:	10801717 	ldw	r2,92(r2)
   2a2d8:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
   2a2dc:	e03ff715 	stw	zero,-36(fp)
   2a2e0:	00003d06 	br	2a3d8 <pass2_no_dither+0x158>
		inptr = input_buf[row];
   2a2e4:	e0bff717 	ldw	r2,-36(fp)
   2a2e8:	1085883a 	add	r2,r2,r2
   2a2ec:	1085883a 	add	r2,r2,r2
   2a2f0:	e0fffd17 	ldw	r3,-12(fp)
   2a2f4:	1885883a 	add	r2,r3,r2
   2a2f8:	14000017 	ldw	r16,0(r2)
		outptr = output_buf[row];
   2a2fc:	e0bff717 	ldw	r2,-36(fp)
   2a300:	1085883a 	add	r2,r2,r2
   2a304:	1085883a 	add	r2,r2,r2
   2a308:	e0fffe17 	ldw	r3,-8(fp)
   2a30c:	1885883a 	add	r2,r3,r2
   2a310:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
   2a314:	e0bffb17 	ldw	r2,-20(fp)
   2a318:	e0bff815 	stw	r2,-32(fp)
   2a31c:	00002906 	br	2a3c4 <pass2_no_dither+0x144>
			/* get pixel value and index into the cache */
			c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
   2a320:	80800003 	ldbu	r2,0(r16)
   2a324:	10803fcc 	andi	r2,r2,255
   2a328:	1004d0fa 	srli	r2,r2,3
   2a32c:	15003fcc 	andi	r20,r2,255
   2a330:	84000044 	addi	r16,r16,1
			c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
   2a334:	80800003 	ldbu	r2,0(r16)
   2a338:	10803fcc 	andi	r2,r2,255
   2a33c:	1004d0ba 	srli	r2,r2,2
   2a340:	14c03fcc 	andi	r19,r2,255
   2a344:	84000044 	addi	r16,r16,1
			c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
   2a348:	80800003 	ldbu	r2,0(r16)
   2a34c:	10803fcc 	andi	r2,r2,255
   2a350:	1004d0fa 	srli	r2,r2,3
   2a354:	14403fcc 	andi	r17,r2,255
   2a358:	84000044 	addi	r16,r16,1
			cachep = & histogram[c0][c1][c2];
   2a35c:	a005883a 	mov	r2,r20
   2a360:	1085883a 	add	r2,r2,r2
   2a364:	1085883a 	add	r2,r2,r2
   2a368:	e0fffa17 	ldw	r3,-24(fp)
   2a36c:	1885883a 	add	r2,r3,r2
   2a370:	10c00017 	ldw	r3,0(r2)
   2a374:	9805883a 	mov	r2,r19
   2a378:	100491ba 	slli	r2,r2,6
   2a37c:	1887883a 	add	r3,r3,r2
   2a380:	8c45883a 	add	r2,r17,r17
   2a384:	18ab883a 	add	r21,r3,r2
			/* If we have not seen this color before, find nearest colormap entry */
			/* and update the cache */
			if (*cachep == 0)
   2a388:	a880000b 	ldhu	r2,0(r21)
   2a38c:	10bfffcc 	andi	r2,r2,65535
   2a390:	1000051e 	bne	r2,zero,2a3a8 <pass2_no_dither+0x128>
				fill_inverse_cmap(cinfo, c0,c1,c2);
   2a394:	e13ffc17 	ldw	r4,-16(fp)
   2a398:	a00b883a 	mov	r5,r20
   2a39c:	980d883a 	mov	r6,r19
   2a3a0:	880f883a 	mov	r7,r17
   2a3a4:	002a09c0 	call	2a09c <fill_inverse_cmap>
			/* Now emit the colormap index for this cell */
			*outptr++ = (JSAMPLE) (*cachep - 1);
   2a3a8:	a880000b 	ldhu	r2,0(r21)
   2a3ac:	10bfffc4 	addi	r2,r2,-1
   2a3b0:	90800005 	stb	r2,0(r18)
   2a3b4:	94800044 	addi	r18,r18,1
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		inptr = input_buf[row];
		outptr = output_buf[row];
		for (col = width; col > 0; col--) {
   2a3b8:	e0bff817 	ldw	r2,-32(fp)
   2a3bc:	10bfffc4 	addi	r2,r2,-1
   2a3c0:	e0bff815 	stw	r2,-32(fp)
   2a3c4:	e0bff817 	ldw	r2,-32(fp)
   2a3c8:	103fd51e 	bne	r2,zero,2a320 <pass2_no_dither+0xa0>
	register int c0, c1, c2;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
   2a3cc:	e0bff717 	ldw	r2,-36(fp)
   2a3d0:	10800044 	addi	r2,r2,1
   2a3d4:	e0bff715 	stw	r2,-36(fp)
   2a3d8:	e0fff717 	ldw	r3,-36(fp)
   2a3dc:	e0bfff17 	ldw	r2,-4(fp)
   2a3e0:	18bfc016 	blt	r3,r2,2a2e4 <pass2_no_dither+0x64>
				fill_inverse_cmap(cinfo, c0,c1,c2);
			/* Now emit the colormap index for this cell */
			*outptr++ = (JSAMPLE) (*cachep - 1);
		}
	}
}
   2a3e4:	e037883a 	mov	sp,fp
   2a3e8:	dfc00717 	ldw	ra,28(sp)
   2a3ec:	df000617 	ldw	fp,24(sp)
   2a3f0:	dd400517 	ldw	r21,20(sp)
   2a3f4:	dd000417 	ldw	r20,16(sp)
   2a3f8:	dcc00317 	ldw	r19,12(sp)
   2a3fc:	dc800217 	ldw	r18,8(sp)
   2a400:	dc400117 	ldw	r17,4(sp)
   2a404:	dc000017 	ldw	r16,0(sp)
   2a408:	dec00804 	addi	sp,sp,32
   2a40c:	f800283a 	ret

0002a410 <pass2_fs_dither>:

METHODDEF(void)
	pass2_fs_dither (j_decompress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
	/* This version performs Floyd-Steinberg dithering */
{
   2a410:	deffdf04 	addi	sp,sp,-132
   2a414:	dfc02015 	stw	ra,128(sp)
   2a418:	df001f15 	stw	fp,124(sp)
   2a41c:	dd401e15 	stw	r21,120(sp)
   2a420:	dd001d15 	stw	r20,116(sp)
   2a424:	dcc01c15 	stw	r19,112(sp)
   2a428:	dc801b15 	stw	r18,108(sp)
   2a42c:	dc401a15 	stw	r17,104(sp)
   2a430:	dc001915 	stw	r16,100(sp)
   2a434:	df001904 	addi	fp,sp,100
   2a438:	e13ffc15 	stw	r4,-16(fp)
   2a43c:	e17ffd15 	stw	r5,-12(fp)
   2a440:	e1bffe15 	stw	r6,-8(fp)
   2a444:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2a448:	e0bffc17 	ldw	r2,-16(fp)
   2a44c:	10806e17 	ldw	r2,440(r2)
   2a450:	e0bff315 	stw	r2,-52(fp)
	hist3d histogram = cquantize->histogram;
   2a454:	e0bff317 	ldw	r2,-52(fp)
   2a458:	10800617 	ldw	r2,24(r2)
   2a45c:	e0bff415 	stw	r2,-48(fp)
	histptr cachep;
	int dir;			/* +1 or -1 depending on direction */
	int dir3;			/* 3*dir, for advancing inptr & errorptr */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
   2a460:	e0bffc17 	ldw	r2,-16(fp)
   2a464:	10801717 	ldw	r2,92(r2)
   2a468:	e0bff515 	stw	r2,-44(fp)
	JSAMPLE *range_limit = cinfo->sample_range_limit;
   2a46c:	e0bffc17 	ldw	r2,-16(fp)
   2a470:	10804917 	ldw	r2,292(r2)
   2a474:	e0bff615 	stw	r2,-40(fp)
	int *error_limit = cquantize->error_limiter;
   2a478:	e0bff317 	ldw	r2,-52(fp)
   2a47c:	10800a17 	ldw	r2,40(r2)
   2a480:	e0bff715 	stw	r2,-36(fp)
	JSAMPROW colormap0 = cinfo->colormap[0];
   2a484:	e0bffc17 	ldw	r2,-16(fp)
   2a488:	10801d17 	ldw	r2,116(r2)
   2a48c:	10800017 	ldw	r2,0(r2)
   2a490:	e0bff815 	stw	r2,-32(fp)
	JSAMPROW colormap1 = cinfo->colormap[1];
   2a494:	e0bffc17 	ldw	r2,-16(fp)
   2a498:	10801d17 	ldw	r2,116(r2)
   2a49c:	10800117 	ldw	r2,4(r2)
   2a4a0:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW colormap2 = cinfo->colormap[2];
   2a4a4:	e0bffc17 	ldw	r2,-16(fp)
   2a4a8:	10801d17 	ldw	r2,116(r2)
   2a4ac:	10800217 	ldw	r2,8(r2)
   2a4b0:	e0bffa15 	stw	r2,-24(fp)
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
   2a4b4:	e03ff115 	stw	zero,-60(fp)
   2a4b8:	00011106 	br	2a900 <pass2_fs_dither+0x4f0>
			inptr = input_buf[row];
   2a4bc:	e0bff117 	ldw	r2,-60(fp)
   2a4c0:	1085883a 	add	r2,r2,r2
   2a4c4:	1085883a 	add	r2,r2,r2
   2a4c8:	e0fffd17 	ldw	r3,-12(fp)
   2a4cc:	1885883a 	add	r2,r3,r2
   2a4d0:	10800017 	ldw	r2,0(r2)
   2a4d4:	e0bfed15 	stw	r2,-76(fp)
			outptr = output_buf[row];
   2a4d8:	e0bff117 	ldw	r2,-60(fp)
   2a4dc:	1085883a 	add	r2,r2,r2
   2a4e0:	1085883a 	add	r2,r2,r2
   2a4e4:	e0fffe17 	ldw	r3,-8(fp)
   2a4e8:	1885883a 	add	r2,r3,r2
   2a4ec:	10800017 	ldw	r2,0(r2)
   2a4f0:	e0bfee15 	stw	r2,-72(fp)
			if (cquantize->on_odd_row) {
   2a4f4:	e0bff317 	ldw	r2,-52(fp)
   2a4f8:	10800903 	ldbu	r2,36(r2)
   2a4fc:	10803fcc 	andi	r2,r2,255
   2a500:	10001c26 	beq	r2,zero,2a574 <pass2_fs_dither+0x164>
				/* work right to left in this row */
				inptr += (width-1) * 3;	/* so point to rightmost pixel */
   2a504:	e0fff517 	ldw	r3,-44(fp)
   2a508:	1805883a 	mov	r2,r3
   2a50c:	1085883a 	add	r2,r2,r2
   2a510:	10c5883a 	add	r2,r2,r3
   2a514:	10bfff44 	addi	r2,r2,-3
   2a518:	e0ffed17 	ldw	r3,-76(fp)
   2a51c:	1885883a 	add	r2,r3,r2
   2a520:	e0bfed15 	stw	r2,-76(fp)
				outptr += width-1;
   2a524:	e0bff517 	ldw	r2,-44(fp)
   2a528:	10bfffc4 	addi	r2,r2,-1
   2a52c:	e0ffee17 	ldw	r3,-72(fp)
   2a530:	1885883a 	add	r2,r3,r2
   2a534:	e0bfee15 	stw	r2,-72(fp)
				dir = -1;
   2a538:	00bfffc4 	movi	r2,-1
   2a53c:	e0bfef15 	stw	r2,-68(fp)
				dir3 = -3;
   2a540:	00bfff44 	movi	r2,-3
   2a544:	e0bff015 	stw	r2,-64(fp)
				errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
   2a548:	e0bff317 	ldw	r2,-52(fp)
   2a54c:	14000817 	ldw	r16,32(r2)
   2a550:	e0bff517 	ldw	r2,-44(fp)
   2a554:	10800044 	addi	r2,r2,1
   2a558:	1009883a 	mov	r4,r2
   2a55c:	01400184 	movi	r5,6
   2a560:	002c1540 	call	2c154 <__mulsi3>
   2a564:	80a7883a 	add	r19,r16,r2
				cquantize->on_odd_row = FALSE; /* flip for next time */
   2a568:	e0bff317 	ldw	r2,-52(fp)
   2a56c:	10000905 	stb	zero,36(r2)
   2a570:	00000906 	br	2a598 <pass2_fs_dither+0x188>
			} else {
				/* work left to right in this row */
				dir = 1;
   2a574:	00800044 	movi	r2,1
   2a578:	e0bfef15 	stw	r2,-68(fp)
				dir3 = 3;
   2a57c:	008000c4 	movi	r2,3
   2a580:	e0bff015 	stw	r2,-64(fp)
				errorptr = cquantize->fserrors; /* => entry before first real column */
   2a584:	e0bff317 	ldw	r2,-52(fp)
   2a588:	14c00817 	ldw	r19,32(r2)
				cquantize->on_odd_row = TRUE; /* flip for next time */
   2a58c:	e0bff317 	ldw	r2,-52(fp)
   2a590:	00c00044 	movi	r3,1
   2a594:	10c00905 	stb	r3,36(r2)
			}
			/* Preset error values: no error propagated to first pixel from left */
			cur0 = cur1 = cur2 = 0;
   2a598:	0023883a 	mov	r17,zero
   2a59c:	8821883a 	mov	r16,r17
   2a5a0:	8025883a 	mov	r18,r16
			/* and no error propagated to row below yet */
			belowerr0 = belowerr1 = belowerr2 = 0;
   2a5a4:	e03fe915 	stw	zero,-92(fp)
   2a5a8:	e0bfe917 	ldw	r2,-92(fp)
   2a5ac:	e0bfe815 	stw	r2,-96(fp)
   2a5b0:	e0bfe817 	ldw	r2,-96(fp)
   2a5b4:	e0bfe715 	stw	r2,-100(fp)
			bpreverr0 = bpreverr1 = bpreverr2 = 0;
   2a5b8:	e03fec15 	stw	zero,-80(fp)
   2a5bc:	e0bfec17 	ldw	r2,-80(fp)
   2a5c0:	e0bfeb15 	stw	r2,-84(fp)
   2a5c4:	e0bfeb17 	ldw	r2,-84(fp)
   2a5c8:	e0bfea15 	stw	r2,-88(fp)

			for (col = width; col > 0; col--) {
   2a5cc:	e0bff517 	ldw	r2,-44(fp)
   2a5d0:	e0bff215 	stw	r2,-56(fp)
   2a5d4:	0000bd06 	br	2a8cc <pass2_fs_dither+0x4bc>
				* round the error term (which is expressed * 16) to an integer.
				* RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
				* for either sign of the error value.
				* Note: errorptr points to *previous* column's array entry.
				*/
				cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
   2a5d8:	e0bff017 	ldw	r2,-64(fp)
   2a5dc:	1085883a 	add	r2,r2,r2
   2a5e0:	9885883a 	add	r2,r19,r2
   2a5e4:	1080000b 	ldhu	r2,0(r2)
   2a5e8:	10bfffcc 	andi	r2,r2,65535
   2a5ec:	10a0001c 	xori	r2,r2,32768
   2a5f0:	10a00004 	addi	r2,r2,-32768
   2a5f4:	1485883a 	add	r2,r2,r18
   2a5f8:	10800204 	addi	r2,r2,8
   2a5fc:	1025d13a 	srai	r18,r2,4
				cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
   2a600:	e0bff017 	ldw	r2,-64(fp)
   2a604:	10800044 	addi	r2,r2,1
   2a608:	1085883a 	add	r2,r2,r2
   2a60c:	9885883a 	add	r2,r19,r2
   2a610:	1080000b 	ldhu	r2,0(r2)
   2a614:	10bfffcc 	andi	r2,r2,65535
   2a618:	10a0001c 	xori	r2,r2,32768
   2a61c:	10a00004 	addi	r2,r2,-32768
   2a620:	1405883a 	add	r2,r2,r16
   2a624:	10800204 	addi	r2,r2,8
   2a628:	1021d13a 	srai	r16,r2,4
				cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
   2a62c:	e0bff017 	ldw	r2,-64(fp)
   2a630:	10800084 	addi	r2,r2,2
   2a634:	1085883a 	add	r2,r2,r2
   2a638:	9885883a 	add	r2,r19,r2
   2a63c:	1080000b 	ldhu	r2,0(r2)
   2a640:	10bfffcc 	andi	r2,r2,65535
   2a644:	10a0001c 	xori	r2,r2,32768
   2a648:	10a00004 	addi	r2,r2,-32768
   2a64c:	1445883a 	add	r2,r2,r17
   2a650:	10800204 	addi	r2,r2,8
   2a654:	1023d13a 	srai	r17,r2,4
				/* Limit the error using transfer function set by init_error_limit.
				* See comments with init_error_limit for rationale.
				*/
				cur0 = error_limit[cur0];
   2a658:	9005883a 	mov	r2,r18
   2a65c:	1085883a 	add	r2,r2,r2
   2a660:	1085883a 	add	r2,r2,r2
   2a664:	e0fff717 	ldw	r3,-36(fp)
   2a668:	1885883a 	add	r2,r3,r2
   2a66c:	14800017 	ldw	r18,0(r2)
				cur1 = error_limit[cur1];
   2a670:	8005883a 	mov	r2,r16
   2a674:	1085883a 	add	r2,r2,r2
   2a678:	1085883a 	add	r2,r2,r2
   2a67c:	e0fff717 	ldw	r3,-36(fp)
   2a680:	1885883a 	add	r2,r3,r2
   2a684:	14000017 	ldw	r16,0(r2)
				cur2 = error_limit[cur2];
   2a688:	8805883a 	mov	r2,r17
   2a68c:	1085883a 	add	r2,r2,r2
   2a690:	1085883a 	add	r2,r2,r2
   2a694:	e0fff717 	ldw	r3,-36(fp)
   2a698:	1885883a 	add	r2,r3,r2
   2a69c:	14400017 	ldw	r17,0(r2)
				/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
				* The maximum error is +- MAXJSAMPLE (or less with error limiting);
				* this sets the required size of the range_limit array.
				*/
				cur0 += GETJSAMPLE(inptr[0]);
   2a6a0:	e0bfed17 	ldw	r2,-76(fp)
   2a6a4:	10800003 	ldbu	r2,0(r2)
   2a6a8:	10803fcc 	andi	r2,r2,255
   2a6ac:	90a5883a 	add	r18,r18,r2
				cur1 += GETJSAMPLE(inptr[1]);
   2a6b0:	e0bfed17 	ldw	r2,-76(fp)
   2a6b4:	10800044 	addi	r2,r2,1
   2a6b8:	10800003 	ldbu	r2,0(r2)
   2a6bc:	10803fcc 	andi	r2,r2,255
   2a6c0:	80a1883a 	add	r16,r16,r2
				cur2 += GETJSAMPLE(inptr[2]);
   2a6c4:	e0bfed17 	ldw	r2,-76(fp)
   2a6c8:	10800084 	addi	r2,r2,2
   2a6cc:	10800003 	ldbu	r2,0(r2)
   2a6d0:	10803fcc 	andi	r2,r2,255
   2a6d4:	88a3883a 	add	r17,r17,r2
				cur0 = GETJSAMPLE(range_limit[cur0]);
   2a6d8:	9005883a 	mov	r2,r18
   2a6dc:	e0fff617 	ldw	r3,-40(fp)
   2a6e0:	1885883a 	add	r2,r3,r2
   2a6e4:	10800003 	ldbu	r2,0(r2)
   2a6e8:	14803fcc 	andi	r18,r2,255
				cur1 = GETJSAMPLE(range_limit[cur1]);
   2a6ec:	8005883a 	mov	r2,r16
   2a6f0:	e0fff617 	ldw	r3,-40(fp)
   2a6f4:	1885883a 	add	r2,r3,r2
   2a6f8:	10800003 	ldbu	r2,0(r2)
   2a6fc:	14003fcc 	andi	r16,r2,255
				cur2 = GETJSAMPLE(range_limit[cur2]);
   2a700:	8805883a 	mov	r2,r17
   2a704:	e0fff617 	ldw	r3,-40(fp)
   2a708:	1885883a 	add	r2,r3,r2
   2a70c:	10800003 	ldbu	r2,0(r2)
   2a710:	14403fcc 	andi	r17,r2,255
				/* Index into the cache with adjusted pixel value */
				cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
   2a714:	9005d0fa 	srai	r2,r18,3
   2a718:	1085883a 	add	r2,r2,r2
   2a71c:	1085883a 	add	r2,r2,r2
   2a720:	e0fff417 	ldw	r3,-48(fp)
   2a724:	1885883a 	add	r2,r3,r2
   2a728:	10c00017 	ldw	r3,0(r2)
   2a72c:	8005d0ba 	srai	r2,r16,2
   2a730:	100491ba 	slli	r2,r2,6
   2a734:	1887883a 	add	r3,r3,r2
   2a738:	8805d0fa 	srai	r2,r17,3
   2a73c:	1085883a 	add	r2,r2,r2
   2a740:	1885883a 	add	r2,r3,r2
   2a744:	e0bffb15 	stw	r2,-20(fp)
				/* If we have not seen this color before, find nearest colormap */
				/* entry and update the cache */
				if (*cachep == 0)
   2a748:	e0bffb17 	ldw	r2,-20(fp)
   2a74c:	1080000b 	ldhu	r2,0(r2)
   2a750:	10bfffcc 	andi	r2,r2,65535
   2a754:	1000071e 	bne	r2,zero,2a774 <pass2_fs_dither+0x364>
					fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
   2a758:	900bd0fa 	srai	r5,r18,3
   2a75c:	8007d0ba 	srai	r3,r16,2
   2a760:	8805d0fa 	srai	r2,r17,3
   2a764:	e13ffc17 	ldw	r4,-16(fp)
   2a768:	180d883a 	mov	r6,r3
   2a76c:	100f883a 	mov	r7,r2
   2a770:	002a09c0 	call	2a09c <fill_inverse_cmap>
				/* Now emit the colormap index for this cell */
				{ register int pixcode = *cachep - 1;
   2a774:	e0bffb17 	ldw	r2,-20(fp)
   2a778:	1080000b 	ldhu	r2,0(r2)
   2a77c:	10bfffcc 	andi	r2,r2,65535
   2a780:	153fffc4 	addi	r20,r2,-1
				*outptr = (JSAMPLE) pixcode;
   2a784:	a007883a 	mov	r3,r20
   2a788:	e0bfee17 	ldw	r2,-72(fp)
   2a78c:	10c00005 	stb	r3,0(r2)
				/* Compute representation error for this pixel */
				cur0 -= GETJSAMPLE(colormap0[pixcode]);
   2a790:	a005883a 	mov	r2,r20
   2a794:	e0fff817 	ldw	r3,-32(fp)
   2a798:	1885883a 	add	r2,r3,r2
   2a79c:	10800003 	ldbu	r2,0(r2)
   2a7a0:	10803fcc 	andi	r2,r2,255
   2a7a4:	90a5c83a 	sub	r18,r18,r2
				cur1 -= GETJSAMPLE(colormap1[pixcode]);
   2a7a8:	a005883a 	mov	r2,r20
   2a7ac:	e0fff917 	ldw	r3,-28(fp)
   2a7b0:	1885883a 	add	r2,r3,r2
   2a7b4:	10800003 	ldbu	r2,0(r2)
   2a7b8:	10803fcc 	andi	r2,r2,255
   2a7bc:	80a1c83a 	sub	r16,r16,r2
				cur2 -= GETJSAMPLE(colormap2[pixcode]);
   2a7c0:	a005883a 	mov	r2,r20
   2a7c4:	e0fffa17 	ldw	r3,-24(fp)
   2a7c8:	1885883a 	add	r2,r3,r2
   2a7cc:	10800003 	ldbu	r2,0(r2)
   2a7d0:	10803fcc 	andi	r2,r2,255
   2a7d4:	88a3c83a 	sub	r17,r17,r2
				* Add these into the running sums, and simultaneously shift the
				* next-line error sums left by 1 column.
				*/
				{ register LOCFSERROR bnexterr, delta;

				bnexterr = cur0;	/* Process component 0 */
   2a7d8:	902b883a 	mov	r21,r18
				delta = cur0 * 2;
   2a7dc:	9485883a 	add	r2,r18,r18
   2a7e0:	1029883a 	mov	r20,r2
				cur0 += delta;		/* form error * 3 */
   2a7e4:	9525883a 	add	r18,r18,r20
				errorptr[0] = (FSERROR) (bpreverr0 + cur0);
   2a7e8:	e0bfea17 	ldw	r2,-88(fp)
   2a7ec:	1007883a 	mov	r3,r2
   2a7f0:	9005883a 	mov	r2,r18
   2a7f4:	1885883a 	add	r2,r3,r2
   2a7f8:	9880000d 	sth	r2,0(r19)
				cur0 += delta;		/* form error * 5 */
   2a7fc:	9525883a 	add	r18,r18,r20
				bpreverr0 = belowerr0 + cur0;
   2a800:	e0bfe717 	ldw	r2,-100(fp)
   2a804:	1485883a 	add	r2,r2,r18
   2a808:	e0bfea15 	stw	r2,-88(fp)
				belowerr0 = bnexterr;
   2a80c:	e57fe715 	stw	r21,-100(fp)
				cur0 += delta;		/* form error * 7 */
   2a810:	9525883a 	add	r18,r18,r20
				bnexterr = cur1;	/* Process component 1 */
   2a814:	802b883a 	mov	r21,r16
				delta = cur1 * 2;
   2a818:	8405883a 	add	r2,r16,r16
   2a81c:	1029883a 	mov	r20,r2
				cur1 += delta;		/* form error * 3 */
   2a820:	8521883a 	add	r16,r16,r20
				errorptr[1] = (FSERROR) (bpreverr1 + cur1);
   2a824:	98800084 	addi	r2,r19,2
   2a828:	e0ffeb17 	ldw	r3,-84(fp)
   2a82c:	1809883a 	mov	r4,r3
   2a830:	8007883a 	mov	r3,r16
   2a834:	20c7883a 	add	r3,r4,r3
   2a838:	10c0000d 	sth	r3,0(r2)
				cur1 += delta;		/* form error * 5 */
   2a83c:	8521883a 	add	r16,r16,r20
				bpreverr1 = belowerr1 + cur1;
   2a840:	e0bfe817 	ldw	r2,-96(fp)
   2a844:	1405883a 	add	r2,r2,r16
   2a848:	e0bfeb15 	stw	r2,-84(fp)
				belowerr1 = bnexterr;
   2a84c:	e57fe815 	stw	r21,-96(fp)
				cur1 += delta;		/* form error * 7 */
   2a850:	8521883a 	add	r16,r16,r20
				bnexterr = cur2;	/* Process component 2 */
   2a854:	882b883a 	mov	r21,r17
				delta = cur2 * 2;
   2a858:	8c45883a 	add	r2,r17,r17
   2a85c:	1029883a 	mov	r20,r2
				cur2 += delta;		/* form error * 3 */
   2a860:	8d23883a 	add	r17,r17,r20
				errorptr[2] = (FSERROR) (bpreverr2 + cur2);
   2a864:	98800104 	addi	r2,r19,4
   2a868:	e0ffec17 	ldw	r3,-80(fp)
   2a86c:	1809883a 	mov	r4,r3
   2a870:	8807883a 	mov	r3,r17
   2a874:	20c7883a 	add	r3,r4,r3
   2a878:	10c0000d 	sth	r3,0(r2)
				cur2 += delta;		/* form error * 5 */
   2a87c:	8d23883a 	add	r17,r17,r20
				bpreverr2 = belowerr2 + cur2;
   2a880:	e0bfe917 	ldw	r2,-92(fp)
   2a884:	1445883a 	add	r2,r2,r17
   2a888:	e0bfec15 	stw	r2,-80(fp)
				belowerr2 = bnexterr;
   2a88c:	e57fe915 	stw	r21,-92(fp)
				cur2 += delta;		/* form error * 7 */
   2a890:	8d23883a 	add	r17,r17,r20
				}
				/* At this point curN contains the 7/16 error value to be propagated
				* to the next pixel on the current line, and all the errors for the
				* next line have been shifted over.  We are therefore ready to move on.
				*/
				inptr += dir3;		/* Advance pixel pointers to next column */
   2a894:	e0bff017 	ldw	r2,-64(fp)
   2a898:	e0ffed17 	ldw	r3,-76(fp)
   2a89c:	1885883a 	add	r2,r3,r2
   2a8a0:	e0bfed15 	stw	r2,-76(fp)
				outptr += dir;
   2a8a4:	e0bfef17 	ldw	r2,-68(fp)
   2a8a8:	e0ffee17 	ldw	r3,-72(fp)
   2a8ac:	1885883a 	add	r2,r3,r2
   2a8b0:	e0bfee15 	stw	r2,-72(fp)
				errorptr += dir3;		/* advance errorptr to current column */
   2a8b4:	e0bff017 	ldw	r2,-64(fp)
   2a8b8:	1085883a 	add	r2,r2,r2
   2a8bc:	98a7883a 	add	r19,r19,r2
			cur0 = cur1 = cur2 = 0;
			/* and no error propagated to row below yet */
			belowerr0 = belowerr1 = belowerr2 = 0;
			bpreverr0 = bpreverr1 = bpreverr2 = 0;

			for (col = width; col > 0; col--) {
   2a8c0:	e0bff217 	ldw	r2,-56(fp)
   2a8c4:	10bfffc4 	addi	r2,r2,-1
   2a8c8:	e0bff215 	stw	r2,-56(fp)
   2a8cc:	e0bff217 	ldw	r2,-56(fp)
   2a8d0:	103f411e 	bne	r2,zero,2a5d8 <pass2_fs_dither+0x1c8>
			}
			/* Post-loop cleanup: we must unload the final error values into the
			* final fserrors[] entry.  Note we need not unload belowerrN because
			* it is for the dummy column before or after the actual array.
			*/
			errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
   2a8d4:	e0bfea17 	ldw	r2,-88(fp)
   2a8d8:	9880000d 	sth	r2,0(r19)
			errorptr[1] = (FSERROR) bpreverr1;
   2a8dc:	98800084 	addi	r2,r19,2
   2a8e0:	e0ffeb17 	ldw	r3,-84(fp)
   2a8e4:	10c0000d 	sth	r3,0(r2)
			errorptr[2] = (FSERROR) bpreverr2;
   2a8e8:	98800104 	addi	r2,r19,4
   2a8ec:	e0ffec17 	ldw	r3,-80(fp)
   2a8f0:	10c0000d 	sth	r3,0(r2)
	JSAMPROW colormap0 = cinfo->colormap[0];
	JSAMPROW colormap1 = cinfo->colormap[1];
	JSAMPROW colormap2 = cinfo->colormap[2];
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
   2a8f4:	e0bff117 	ldw	r2,-60(fp)
   2a8f8:	10800044 	addi	r2,r2,1
   2a8fc:	e0bff115 	stw	r2,-60(fp)
   2a900:	e0fff117 	ldw	r3,-60(fp)
   2a904:	e0bfff17 	ldw	r2,-4(fp)
   2a908:	18beec16 	blt	r3,r2,2a4bc <pass2_fs_dither+0xac>
			*/
			errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
			errorptr[1] = (FSERROR) bpreverr1;
			errorptr[2] = (FSERROR) bpreverr2;
		}
}
   2a90c:	e037883a 	mov	sp,fp
   2a910:	dfc00717 	ldw	ra,28(sp)
   2a914:	df000617 	ldw	fp,24(sp)
   2a918:	dd400517 	ldw	r21,20(sp)
   2a91c:	dd000417 	ldw	r20,16(sp)
   2a920:	dcc00317 	ldw	r19,12(sp)
   2a924:	dc800217 	ldw	r18,8(sp)
   2a928:	dc400117 	ldw	r17,4(sp)
   2a92c:	dc000017 	ldw	r16,0(sp)
   2a930:	dec00804 	addi	sp,sp,32
   2a934:	f800283a 	ret

0002a938 <init_error_limit>:
*/

LOCAL(void)
	init_error_limit (j_decompress_ptr cinfo)
	/* Allocate and fill in the error_limiter table */
{
   2a938:	defff904 	addi	sp,sp,-28
   2a93c:	dfc00615 	stw	ra,24(sp)
   2a940:	df000515 	stw	fp,20(sp)
   2a944:	df000504 	addi	fp,sp,20
   2a948:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2a94c:	e0bfff17 	ldw	r2,-4(fp)
   2a950:	10806e17 	ldw	r2,440(r2)
   2a954:	e0bffd15 	stw	r2,-12(fp)
	int * table;
	int in, out;

	table = (int *) (*cinfo->mem->alloc_small)
   2a958:	e0bfff17 	ldw	r2,-4(fp)
   2a95c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
   2a960:	10800017 	ldw	r2,0(r2)
{
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	int * table;
	int in, out;

	table = (int *) (*cinfo->mem->alloc_small)
   2a964:	e13fff17 	ldw	r4,-4(fp)
   2a968:	01400044 	movi	r5,1
   2a96c:	0181ff04 	movi	r6,2044
   2a970:	103ee83a 	callr	r2
   2a974:	e0bffe15 	stw	r2,-8(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
	table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
   2a978:	e0bffe17 	ldw	r2,-8(fp)
   2a97c:	1080ff04 	addi	r2,r2,1020
   2a980:	e0bffe15 	stw	r2,-8(fp)
	cquantize->error_limiter = table;
   2a984:	e0bffd17 	ldw	r2,-12(fp)
   2a988:	e0fffe17 	ldw	r3,-8(fp)
   2a98c:	10c00a15 	stw	r3,40(r2)

#define STEPSIZE ((MAXJSAMPLE+1)/16)
	/* Map errors 1:1 up to +- MAXJSAMPLE/16 */
	out = 0;
   2a990:	e03ffc15 	stw	zero,-16(fp)
	for (in = 0; in < STEPSIZE; in++, out++) {
   2a994:	e03ffb15 	stw	zero,-20(fp)
   2a998:	00001606 	br	2a9f4 <init_error_limit+0xbc>
		table[in] = out; table[-in] = -out;
   2a99c:	e0bffb17 	ldw	r2,-20(fp)
   2a9a0:	1085883a 	add	r2,r2,r2
   2a9a4:	1085883a 	add	r2,r2,r2
   2a9a8:	e0fffe17 	ldw	r3,-8(fp)
   2a9ac:	1885883a 	add	r2,r3,r2
   2a9b0:	e0fffc17 	ldw	r3,-16(fp)
   2a9b4:	10c00015 	stw	r3,0(r2)
   2a9b8:	e0bffb17 	ldw	r2,-20(fp)
   2a9bc:	1009883a 	mov	r4,r2
   2a9c0:	017fff04 	movi	r5,-4
   2a9c4:	002c1540 	call	2c154 <__mulsi3>
   2a9c8:	e0fffe17 	ldw	r3,-8(fp)
   2a9cc:	1885883a 	add	r2,r3,r2
   2a9d0:	e0fffc17 	ldw	r3,-16(fp)
   2a9d4:	00c7c83a 	sub	r3,zero,r3
   2a9d8:	10c00015 	stw	r3,0(r2)
	cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
	/* Map errors 1:1 up to +- MAXJSAMPLE/16 */
	out = 0;
	for (in = 0; in < STEPSIZE; in++, out++) {
   2a9dc:	e0bffb17 	ldw	r2,-20(fp)
   2a9e0:	10800044 	addi	r2,r2,1
   2a9e4:	e0bffb15 	stw	r2,-20(fp)
   2a9e8:	e0bffc17 	ldw	r2,-16(fp)
   2a9ec:	10800044 	addi	r2,r2,1
   2a9f0:	e0bffc15 	stw	r2,-16(fp)
   2a9f4:	e0bffb17 	ldw	r2,-20(fp)
   2a9f8:	10800410 	cmplti	r2,r2,16
   2a9fc:	103fe71e 	bne	r2,zero,2a99c <init_error_limit+0x64>
		table[in] = out; table[-in] = -out;
	}
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
   2aa00:	00001a06 	br	2aa6c <init_error_limit+0x134>
		table[in] = out; table[-in] = -out;
   2aa04:	e0bffb17 	ldw	r2,-20(fp)
   2aa08:	1085883a 	add	r2,r2,r2
   2aa0c:	1085883a 	add	r2,r2,r2
   2aa10:	e0fffe17 	ldw	r3,-8(fp)
   2aa14:	1885883a 	add	r2,r3,r2
   2aa18:	e0fffc17 	ldw	r3,-16(fp)
   2aa1c:	10c00015 	stw	r3,0(r2)
   2aa20:	e0bffb17 	ldw	r2,-20(fp)
   2aa24:	1009883a 	mov	r4,r2
   2aa28:	017fff04 	movi	r5,-4
   2aa2c:	002c1540 	call	2c154 <__mulsi3>
   2aa30:	e0fffe17 	ldw	r3,-8(fp)
   2aa34:	1885883a 	add	r2,r3,r2
   2aa38:	e0fffc17 	ldw	r3,-16(fp)
   2aa3c:	00c7c83a 	sub	r3,zero,r3
   2aa40:	10c00015 	stw	r3,0(r2)
	out = 0;
	for (in = 0; in < STEPSIZE; in++, out++) {
		table[in] = out; table[-in] = -out;
	}
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
   2aa44:	e0bffb17 	ldw	r2,-20(fp)
   2aa48:	10800044 	addi	r2,r2,1
   2aa4c:	e0bffb15 	stw	r2,-20(fp)
   2aa50:	e0bffb17 	ldw	r2,-20(fp)
   2aa54:	1080004c 	andi	r2,r2,1
   2aa58:	1005003a 	cmpeq	r2,r2,zero
   2aa5c:	10803fcc 	andi	r2,r2,255
   2aa60:	e0fffc17 	ldw	r3,-16(fp)
   2aa64:	1885883a 	add	r2,r3,r2
   2aa68:	e0bffc15 	stw	r2,-16(fp)
   2aa6c:	e0bffb17 	ldw	r2,-20(fp)
   2aa70:	10800c10 	cmplti	r2,r2,48
   2aa74:	103fe31e 	bne	r2,zero,2aa04 <init_error_limit+0xcc>
		table[in] = out; table[-in] = -out;
	}
	/* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
	for (; in <= MAXJSAMPLE; in++) {
   2aa78:	00001306 	br	2aac8 <init_error_limit+0x190>
		table[in] = out; table[-in] = -out;
   2aa7c:	e0bffb17 	ldw	r2,-20(fp)
   2aa80:	1085883a 	add	r2,r2,r2
   2aa84:	1085883a 	add	r2,r2,r2
   2aa88:	e0fffe17 	ldw	r3,-8(fp)
   2aa8c:	1885883a 	add	r2,r3,r2
   2aa90:	e0fffc17 	ldw	r3,-16(fp)
   2aa94:	10c00015 	stw	r3,0(r2)
   2aa98:	e0bffb17 	ldw	r2,-20(fp)
   2aa9c:	1009883a 	mov	r4,r2
   2aaa0:	017fff04 	movi	r5,-4
   2aaa4:	002c1540 	call	2c154 <__mulsi3>
   2aaa8:	e0fffe17 	ldw	r3,-8(fp)
   2aaac:	1885883a 	add	r2,r3,r2
   2aab0:	e0fffc17 	ldw	r3,-16(fp)
   2aab4:	00c7c83a 	sub	r3,zero,r3
   2aab8:	10c00015 	stw	r3,0(r2)
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
		table[in] = out; table[-in] = -out;
	}
	/* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
	for (; in <= MAXJSAMPLE; in++) {
   2aabc:	e0bffb17 	ldw	r2,-20(fp)
   2aac0:	10800044 	addi	r2,r2,1
   2aac4:	e0bffb15 	stw	r2,-20(fp)
   2aac8:	e0bffb17 	ldw	r2,-20(fp)
   2aacc:	10804010 	cmplti	r2,r2,256
   2aad0:	103fea1e 	bne	r2,zero,2aa7c <init_error_limit+0x144>
		table[in] = out; table[-in] = -out;
	}
#undef STEPSIZE
}
   2aad4:	e037883a 	mov	sp,fp
   2aad8:	dfc00117 	ldw	ra,4(sp)
   2aadc:	df000017 	ldw	fp,0(sp)
   2aae0:	dec00204 	addi	sp,sp,8
   2aae4:	f800283a 	ret

0002aae8 <finish_pass1>:
* Finish up at the end of each pass.
*/

METHODDEF(void)
	finish_pass1 (j_decompress_ptr cinfo)
{
   2aae8:	defffc04 	addi	sp,sp,-16
   2aaec:	dfc00315 	stw	ra,12(sp)
   2aaf0:	df000215 	stw	fp,8(sp)
   2aaf4:	df000204 	addi	fp,sp,8
   2aaf8:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2aafc:	e0bfff17 	ldw	r2,-4(fp)
   2ab00:	10806e17 	ldw	r2,440(r2)
   2ab04:	e0bffe15 	stw	r2,-8(fp)

	/* Select the representative colors and fill in cinfo->colormap */
	cinfo->colormap = cquantize->sv_colormap;
   2ab08:	e0bffe17 	ldw	r2,-8(fp)
   2ab0c:	10c00417 	ldw	r3,16(r2)
   2ab10:	e0bfff17 	ldw	r2,-4(fp)
   2ab14:	10c01d15 	stw	r3,116(r2)
	select_colors(cinfo, cquantize->desired);
   2ab18:	e0bffe17 	ldw	r2,-8(fp)
   2ab1c:	10800517 	ldw	r2,20(r2)
   2ab20:	e13fff17 	ldw	r4,-4(fp)
   2ab24:	100b883a 	mov	r5,r2
   2ab28:	00297400 	call	29740 <select_colors>
	/* Force next pass to zero the color index table */
	cquantize->needs_zeroed = TRUE;
   2ab2c:	e0bffe17 	ldw	r2,-8(fp)
   2ab30:	00c00044 	movi	r3,1
   2ab34:	10c00705 	stb	r3,28(r2)
}
   2ab38:	e037883a 	mov	sp,fp
   2ab3c:	dfc00117 	ldw	ra,4(sp)
   2ab40:	df000017 	ldw	fp,0(sp)
   2ab44:	dec00204 	addi	sp,sp,8
   2ab48:	f800283a 	ret

0002ab4c <finish_pass2>:


METHODDEF(void)
	finish_pass2 (j_decompress_ptr cinfo)
{
   2ab4c:	defffe04 	addi	sp,sp,-8
   2ab50:	df000115 	stw	fp,4(sp)
   2ab54:	df000104 	addi	fp,sp,4
   2ab58:	e13fff15 	stw	r4,-4(fp)
	/* no work */
}
   2ab5c:	e037883a 	mov	sp,fp
   2ab60:	df000017 	ldw	fp,0(sp)
   2ab64:	dec00104 	addi	sp,sp,4
   2ab68:	f800283a 	ret

0002ab6c <start_pass_2_quant>:
* Initialize for each processing pass.
*/

METHODDEF(void)
	start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
   2ab6c:	defff804 	addi	sp,sp,-32
   2ab70:	dfc00715 	stw	ra,28(sp)
   2ab74:	df000615 	stw	fp,24(sp)
   2ab78:	df000604 	addi	fp,sp,24
   2ab7c:	e13ffe15 	stw	r4,-8(fp)
   2ab80:	2805883a 	mov	r2,r5
   2ab84:	e0bfff05 	stb	r2,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2ab88:	e0bffe17 	ldw	r2,-8(fp)
   2ab8c:	10806e17 	ldw	r2,440(r2)
   2ab90:	e0bffb15 	stw	r2,-20(fp)
	hist3d histogram = cquantize->histogram;
   2ab94:	e0bffb17 	ldw	r2,-20(fp)
   2ab98:	10800617 	ldw	r2,24(r2)
   2ab9c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	/* Only F-S dithering or no dithering is supported. */
	/* If user asks for ordered dither, give him F-S. */
	if (cinfo->dither_mode != JDITHER_NONE)
   2aba0:	e0bffe17 	ldw	r2,-8(fp)
   2aba4:	10801317 	ldw	r2,76(r2)
   2aba8:	10000326 	beq	r2,zero,2abb8 <start_pass_2_quant+0x4c>
		cinfo->dither_mode = JDITHER_FS;
   2abac:	e0bffe17 	ldw	r2,-8(fp)
   2abb0:	00c00084 	movi	r3,2
   2abb4:	10c01315 	stw	r3,76(r2)

	if (is_pre_scan) {
   2abb8:	e0bfff03 	ldbu	r2,-4(fp)
   2abbc:	10000c26 	beq	r2,zero,2abf0 <start_pass_2_quant+0x84>
		/* Set up method pointers */
		cquantize->pub.color_quantize = prescan_quantize;
   2abc0:	e0bffb17 	ldw	r2,-20(fp)
   2abc4:	00c000f4 	movhi	r3,3
   2abc8:	18e23904 	addi	r3,r3,-30492
   2abcc:	10c00115 	stw	r3,4(r2)
		cquantize->pub.finish_pass = finish_pass1;
   2abd0:	e0bffb17 	ldw	r2,-20(fp)
   2abd4:	00c000f4 	movhi	r3,3
   2abd8:	18eaba04 	addi	r3,r3,-21784
   2abdc:	10c00215 	stw	r3,8(r2)
		cquantize->needs_zeroed = TRUE; /* Always zero histogram */
   2abe0:	e0bffb17 	ldw	r2,-20(fp)
   2abe4:	00c00044 	movi	r3,1
   2abe8:	10c00705 	stb	r3,28(r2)
   2abec:	00005606 	br	2ad48 <start_pass_2_quant+0x1dc>
	} else {
		/* Set up method pointers */
		if (cinfo->dither_mode == JDITHER_FS)
   2abf0:	e0bffe17 	ldw	r2,-8(fp)
   2abf4:	10801317 	ldw	r2,76(r2)
   2abf8:	10800098 	cmpnei	r2,r2,2
   2abfc:	1000051e 	bne	r2,zero,2ac14 <start_pass_2_quant+0xa8>
			cquantize->pub.color_quantize = pass2_fs_dither;
   2ac00:	e0bffb17 	ldw	r2,-20(fp)
   2ac04:	00c000f4 	movhi	r3,3
   2ac08:	18e90404 	addi	r3,r3,-23536
   2ac0c:	10c00115 	stw	r3,4(r2)
   2ac10:	00000406 	br	2ac24 <start_pass_2_quant+0xb8>
		else
			cquantize->pub.color_quantize = pass2_no_dither;
   2ac14:	e0bffb17 	ldw	r2,-20(fp)
   2ac18:	00c000f4 	movhi	r3,3
   2ac1c:	18e8a004 	addi	r3,r3,-23936
   2ac20:	10c00115 	stw	r3,4(r2)
		cquantize->pub.finish_pass = finish_pass2;
   2ac24:	e0bffb17 	ldw	r2,-20(fp)
   2ac28:	00c000f4 	movhi	r3,3
   2ac2c:	18ead304 	addi	r3,r3,-21684
   2ac30:	10c00215 	stw	r3,8(r2)

		/* Make sure color count is acceptable */
		i = cinfo->actual_number_of_colors;
   2ac34:	e0bffe17 	ldw	r2,-8(fp)
   2ac38:	10801c17 	ldw	r2,112(r2)
   2ac3c:	e0bffa15 	stw	r2,-24(fp)
		if (i < 1)
   2ac40:	e0bffa17 	ldw	r2,-24(fp)
   2ac44:	00800d16 	blt	zero,r2,2ac7c <start_pass_2_quant+0x110>
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
   2ac48:	e0bffe17 	ldw	r2,-8(fp)
   2ac4c:	10800017 	ldw	r2,0(r2)
   2ac50:	00c00e84 	movi	r3,58
   2ac54:	10c00515 	stw	r3,20(r2)
   2ac58:	e0bffe17 	ldw	r2,-8(fp)
   2ac5c:	10800017 	ldw	r2,0(r2)
   2ac60:	00c00044 	movi	r3,1
   2ac64:	10c00615 	stw	r3,24(r2)
   2ac68:	e0bffe17 	ldw	r2,-8(fp)
   2ac6c:	10800017 	ldw	r2,0(r2)
   2ac70:	10800017 	ldw	r2,0(r2)
   2ac74:	e13ffe17 	ldw	r4,-8(fp)
   2ac78:	103ee83a 	callr	r2
		if (i > MAXNUMCOLORS)
   2ac7c:	e0bffa17 	ldw	r2,-24(fp)
   2ac80:	10804050 	cmplti	r2,r2,257
   2ac84:	10000d1e 	bne	r2,zero,2acbc <start_pass_2_quant+0x150>
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
   2ac88:	e0bffe17 	ldw	r2,-8(fp)
   2ac8c:	10800017 	ldw	r2,0(r2)
   2ac90:	00c00ec4 	movi	r3,59
   2ac94:	10c00515 	stw	r3,20(r2)
   2ac98:	e0bffe17 	ldw	r2,-8(fp)
   2ac9c:	10800017 	ldw	r2,0(r2)
   2aca0:	00c04004 	movi	r3,256
   2aca4:	10c00615 	stw	r3,24(r2)
   2aca8:	e0bffe17 	ldw	r2,-8(fp)
   2acac:	10800017 	ldw	r2,0(r2)
   2acb0:	10800017 	ldw	r2,0(r2)
   2acb4:	e13ffe17 	ldw	r4,-8(fp)
   2acb8:	103ee83a 	callr	r2

		if (cinfo->dither_mode == JDITHER_FS) {
   2acbc:	e0bffe17 	ldw	r2,-8(fp)
   2acc0:	10801317 	ldw	r2,76(r2)
   2acc4:	10800098 	cmpnei	r2,r2,2
   2acc8:	10001f1e 	bne	r2,zero,2ad48 <start_pass_2_quant+0x1dc>
			size_t arraysize = (size_t) ((cinfo->output_width + 2) *
   2accc:	e0bffe17 	ldw	r2,-8(fp)
   2acd0:	10801717 	ldw	r2,92(r2)
   2acd4:	1009883a 	mov	r4,r2
   2acd8:	01400184 	movi	r5,6
   2acdc:	002c1540 	call	2c154 <__mulsi3>
   2ace0:	10800304 	addi	r2,r2,12
   2ace4:	e0bffd15 	stw	r2,-12(fp)
				(3 * SIZEOF(FSERROR)));
			/* Allocate Floyd-Steinberg workspace if we didn't already. */
			if (cquantize->fserrors == NULL)
   2ace8:	e0bffb17 	ldw	r2,-20(fp)
   2acec:	10800817 	ldw	r2,32(r2)
   2acf0:	1000091e 	bne	r2,zero,2ad18 <start_pass_2_quant+0x1ac>
				cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
   2acf4:	e0bffe17 	ldw	r2,-8(fp)
   2acf8:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
   2acfc:	10800117 	ldw	r2,4(r2)
   2ad00:	e13ffe17 	ldw	r4,-8(fp)
   2ad04:	01400044 	movi	r5,1
   2ad08:	e1bffd17 	ldw	r6,-12(fp)
   2ad0c:	103ee83a 	callr	r2
		if (cinfo->dither_mode == JDITHER_FS) {
			size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				(3 * SIZEOF(FSERROR)));
			/* Allocate Floyd-Steinberg workspace if we didn't already. */
			if (cquantize->fserrors == NULL)
				cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
   2ad10:	e0fffb17 	ldw	r3,-20(fp)
   2ad14:	18800815 	stw	r2,32(r3)
				((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
			/* Initialize the propagated errors to zero. */
			jzero_far((void FAR *) cquantize->fserrors, arraysize);
   2ad18:	e0bffb17 	ldw	r2,-20(fp)
   2ad1c:	10800817 	ldw	r2,32(r2)
   2ad20:	1009883a 	mov	r4,r2
   2ad24:	e17ffd17 	ldw	r5,-12(fp)
   2ad28:	002b23c0 	call	2b23c <jzero_far>
			/* Make the error-limit table if we didn't already. */
			if (cquantize->error_limiter == NULL)
   2ad2c:	e0bffb17 	ldw	r2,-20(fp)
   2ad30:	10800a17 	ldw	r2,40(r2)
   2ad34:	1000021e 	bne	r2,zero,2ad40 <start_pass_2_quant+0x1d4>
				init_error_limit(cinfo);
   2ad38:	e13ffe17 	ldw	r4,-8(fp)
   2ad3c:	002a9380 	call	2a938 <init_error_limit>
			cquantize->on_odd_row = FALSE;
   2ad40:	e0bffb17 	ldw	r2,-20(fp)
   2ad44:	10000905 	stb	zero,36(r2)
		}

	}
	/* Zero the histogram or inverse color map, if necessary */
	if (cquantize->needs_zeroed) {
   2ad48:	e0bffb17 	ldw	r2,-20(fp)
   2ad4c:	10800703 	ldbu	r2,28(r2)
   2ad50:	10803fcc 	andi	r2,r2,255
   2ad54:	10001326 	beq	r2,zero,2ada4 <start_pass_2_quant+0x238>
		for (i = 0; i < HIST_C0_ELEMS; i++) {
   2ad58:	e03ffa15 	stw	zero,-24(fp)
   2ad5c:	00000c06 	br	2ad90 <start_pass_2_quant+0x224>
			jzero_far((void FAR *) histogram[i],
   2ad60:	e0bffa17 	ldw	r2,-24(fp)
   2ad64:	1085883a 	add	r2,r2,r2
   2ad68:	1085883a 	add	r2,r2,r2
   2ad6c:	e0fffc17 	ldw	r3,-16(fp)
   2ad70:	1885883a 	add	r2,r3,r2
   2ad74:	10800017 	ldw	r2,0(r2)
   2ad78:	1009883a 	mov	r4,r2
   2ad7c:	01440004 	movi	r5,4096
   2ad80:	002b23c0 	call	2b23c <jzero_far>
		}

	}
	/* Zero the histogram or inverse color map, if necessary */
	if (cquantize->needs_zeroed) {
		for (i = 0; i < HIST_C0_ELEMS; i++) {
   2ad84:	e0bffa17 	ldw	r2,-24(fp)
   2ad88:	10800044 	addi	r2,r2,1
   2ad8c:	e0bffa15 	stw	r2,-24(fp)
   2ad90:	e0bffa17 	ldw	r2,-24(fp)
   2ad94:	10800810 	cmplti	r2,r2,32
   2ad98:	103ff11e 	bne	r2,zero,2ad60 <start_pass_2_quant+0x1f4>
			jzero_far((void FAR *) histogram[i],
				HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
		}
		cquantize->needs_zeroed = FALSE;
   2ad9c:	e0bffb17 	ldw	r2,-20(fp)
   2ada0:	10000705 	stb	zero,28(r2)
	}
}
   2ada4:	e037883a 	mov	sp,fp
   2ada8:	dfc00117 	ldw	ra,4(sp)
   2adac:	df000017 	ldw	fp,0(sp)
   2adb0:	dec00204 	addi	sp,sp,8
   2adb4:	f800283a 	ret

0002adb8 <new_color_map_2_quant>:
* Switch to a new external colormap between output passes.
*/

METHODDEF(void)
	new_color_map_2_quant (j_decompress_ptr cinfo)
{
   2adb8:	defffd04 	addi	sp,sp,-12
   2adbc:	df000215 	stw	fp,8(sp)
   2adc0:	df000204 	addi	fp,sp,8
   2adc4:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   2adc8:	e0bfff17 	ldw	r2,-4(fp)
   2adcc:	10806e17 	ldw	r2,440(r2)
   2add0:	e0bffe15 	stw	r2,-8(fp)

	/* Reset the inverse color map */
	cquantize->needs_zeroed = TRUE;
   2add4:	e0bffe17 	ldw	r2,-8(fp)
   2add8:	00c00044 	movi	r3,1
   2addc:	10c00705 	stb	r3,28(r2)
}
   2ade0:	e037883a 	mov	sp,fp
   2ade4:	df000017 	ldw	fp,0(sp)
   2ade8:	dec00104 	addi	sp,sp,4
   2adec:	f800283a 	ret

0002adf0 <jinit_2pass_quantizer>:
* Module initialization routine for 2-pass color quantization.
*/

GLOBAL(void)
	jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
   2adf0:	defff904 	addi	sp,sp,-28
   2adf4:	dfc00615 	stw	ra,24(sp)
   2adf8:	df000515 	stw	fp,20(sp)
   2adfc:	dc000415 	stw	r16,16(sp)
   2ae00:	df000404 	addi	fp,sp,16
   2ae04:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize;
	int i;

	cquantize = (my_cquantize_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
   2ae08:	e0bfff17 	ldw	r2,-4(fp)
   2ae0c:	10800117 	ldw	r2,4(r2)
   2ae10:	10800017 	ldw	r2,0(r2)
	jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
	my_cquantize_ptr cquantize;
	int i;

	cquantize = (my_cquantize_ptr)
   2ae14:	e13fff17 	ldw	r4,-4(fp)
   2ae18:	01400044 	movi	r5,1
   2ae1c:	01800b04 	movi	r6,44
   2ae20:	103ee83a 	callr	r2
   2ae24:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_cquantizer));
	cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
   2ae28:	e0bfff17 	ldw	r2,-4(fp)
   2ae2c:	e0fffd17 	ldw	r3,-12(fp)
   2ae30:	10c06e15 	stw	r3,440(r2)
	cquantize->pub.start_pass = start_pass_2_quant;
   2ae34:	e0bffd17 	ldw	r2,-12(fp)
   2ae38:	00c000f4 	movhi	r3,3
   2ae3c:	18eadb04 	addi	r3,r3,-21652
   2ae40:	10c00015 	stw	r3,0(r2)
	cquantize->pub.new_color_map = new_color_map_2_quant;
   2ae44:	e0bffd17 	ldw	r2,-12(fp)
   2ae48:	00c000f4 	movhi	r3,3
   2ae4c:	18eb6e04 	addi	r3,r3,-21064
   2ae50:	10c00315 	stw	r3,12(r2)
	cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
   2ae54:	e0bffd17 	ldw	r2,-12(fp)
   2ae58:	10000815 	stw	zero,32(r2)
	cquantize->error_limiter = NULL;
   2ae5c:	e0bffd17 	ldw	r2,-12(fp)
   2ae60:	10000a15 	stw	zero,40(r2)

	/* Make sure jdmaster didn't give me a case I can't handle */
	if (cinfo->out_color_components != 3)
   2ae64:	e0bfff17 	ldw	r2,-4(fp)
   2ae68:	10801917 	ldw	r2,100(r2)
   2ae6c:	108000e0 	cmpeqi	r2,r2,3
   2ae70:	1000091e 	bne	r2,zero,2ae98 <jinit_2pass_quantizer+0xa8>
		ERREXIT(cinfo, JERR_NOTIMPL);
   2ae74:	e0bfff17 	ldw	r2,-4(fp)
   2ae78:	10800017 	ldw	r2,0(r2)
   2ae7c:	00c00c04 	movi	r3,48
   2ae80:	10c00515 	stw	r3,20(r2)
   2ae84:	e0bfff17 	ldw	r2,-4(fp)
   2ae88:	10800017 	ldw	r2,0(r2)
   2ae8c:	10800017 	ldw	r2,0(r2)
   2ae90:	e13fff17 	ldw	r4,-4(fp)
   2ae94:	103ee83a 	callr	r2

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
   2ae98:	e0bfff17 	ldw	r2,-4(fp)
   2ae9c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
   2aea0:	10800017 	ldw	r2,0(r2)
   2aea4:	e13fff17 	ldw	r4,-4(fp)
   2aea8:	01400044 	movi	r5,1
   2aeac:	01802004 	movi	r6,128
   2aeb0:	103ee83a 	callr	r2
	/* Make sure jdmaster didn't give me a case I can't handle */
	if (cinfo->out_color_components != 3)
		ERREXIT(cinfo, JERR_NOTIMPL);

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
   2aeb4:	e0fffd17 	ldw	r3,-12(fp)
   2aeb8:	18800615 	stw	r2,24(r3)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
   2aebc:	e03ffc15 	stw	zero,-16(fp)
   2aec0:	00001106 	br	2af08 <jinit_2pass_quantizer+0x118>
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
   2aec4:	e0bffd17 	ldw	r2,-12(fp)
   2aec8:	10c00617 	ldw	r3,24(r2)
   2aecc:	e0bffc17 	ldw	r2,-16(fp)
   2aed0:	1085883a 	add	r2,r2,r2
   2aed4:	1085883a 	add	r2,r2,r2
   2aed8:	18a1883a 	add	r16,r3,r2
   2aedc:	e0bfff17 	ldw	r2,-4(fp)
   2aee0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
   2aee4:	10800117 	ldw	r2,4(r2)
   2aee8:	e13fff17 	ldw	r4,-4(fp)
   2aeec:	01400044 	movi	r5,1
   2aef0:	01840004 	movi	r6,4096
   2aef4:	103ee83a 	callr	r2

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
   2aef8:	80800015 	stw	r2,0(r16)
		ERREXIT(cinfo, JERR_NOTIMPL);

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
   2aefc:	e0bffc17 	ldw	r2,-16(fp)
   2af00:	10800044 	addi	r2,r2,1
   2af04:	e0bffc15 	stw	r2,-16(fp)
   2af08:	e0bffc17 	ldw	r2,-16(fp)
   2af0c:	10800810 	cmplti	r2,r2,32
   2af10:	103fec1e 	bne	r2,zero,2aec4 <jinit_2pass_quantizer+0xd4>
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
	}
	cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
   2af14:	e0bffd17 	ldw	r2,-12(fp)
   2af18:	00c00044 	movi	r3,1
   2af1c:	10c00705 	stb	r3,28(r2)

	/* Allocate storage for the completed colormap, if required.
	* We do this now since it is FAR storage and may affect
	* the memory manager's space calculations.
	*/
	if (cinfo->enable_2pass_quant) {
   2af20:	e0bfff17 	ldw	r2,-4(fp)
   2af24:	10801683 	ldbu	r2,90(r2)
   2af28:	10803fcc 	andi	r2,r2,255
   2af2c:	10003226 	beq	r2,zero,2aff8 <jinit_2pass_quantizer+0x208>
		/* Make sure color count is acceptable */
		int desired = cinfo->desired_number_of_colors;
   2af30:	e0bfff17 	ldw	r2,-4(fp)
   2af34:	10801517 	ldw	r2,84(r2)
   2af38:	e0bffe15 	stw	r2,-8(fp)
		/* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
		if (desired < 8)
   2af3c:	e0bffe17 	ldw	r2,-8(fp)
   2af40:	10800208 	cmpgei	r2,r2,8
   2af44:	10000d1e 	bne	r2,zero,2af7c <jinit_2pass_quantizer+0x18c>
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
   2af48:	e0bfff17 	ldw	r2,-4(fp)
   2af4c:	10800017 	ldw	r2,0(r2)
   2af50:	00c00e84 	movi	r3,58
   2af54:	10c00515 	stw	r3,20(r2)
   2af58:	e0bfff17 	ldw	r2,-4(fp)
   2af5c:	10800017 	ldw	r2,0(r2)
   2af60:	00c00204 	movi	r3,8
   2af64:	10c00615 	stw	r3,24(r2)
   2af68:	e0bfff17 	ldw	r2,-4(fp)
   2af6c:	10800017 	ldw	r2,0(r2)
   2af70:	10800017 	ldw	r2,0(r2)
   2af74:	e13fff17 	ldw	r4,-4(fp)
   2af78:	103ee83a 	callr	r2
		/* Make sure colormap indexes can be represented by JSAMPLEs */
		if (desired > MAXNUMCOLORS)
   2af7c:	e0bffe17 	ldw	r2,-8(fp)
   2af80:	10804050 	cmplti	r2,r2,257
   2af84:	10000d1e 	bne	r2,zero,2afbc <jinit_2pass_quantizer+0x1cc>
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
   2af88:	e0bfff17 	ldw	r2,-4(fp)
   2af8c:	10800017 	ldw	r2,0(r2)
   2af90:	00c00ec4 	movi	r3,59
   2af94:	10c00515 	stw	r3,20(r2)
   2af98:	e0bfff17 	ldw	r2,-4(fp)
   2af9c:	10800017 	ldw	r2,0(r2)
   2afa0:	00c04004 	movi	r3,256
   2afa4:	10c00615 	stw	r3,24(r2)
   2afa8:	e0bfff17 	ldw	r2,-4(fp)
   2afac:	10800017 	ldw	r2,0(r2)
   2afb0:	10800017 	ldw	r2,0(r2)
   2afb4:	e13fff17 	ldw	r4,-4(fp)
   2afb8:	103ee83a 	callr	r2
		cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
   2afbc:	e0bfff17 	ldw	r2,-4(fp)
   2afc0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
   2afc4:	10c00217 	ldw	r3,8(r2)
   2afc8:	e0bffe17 	ldw	r2,-8(fp)
   2afcc:	e13fff17 	ldw	r4,-4(fp)
   2afd0:	01400044 	movi	r5,1
   2afd4:	100d883a 	mov	r6,r2
   2afd8:	01c000c4 	movi	r7,3
   2afdc:	183ee83a 	callr	r3
		if (desired < 8)
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
		/* Make sure colormap indexes can be represented by JSAMPLEs */
		if (desired > MAXNUMCOLORS)
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
		cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
   2afe0:	e0fffd17 	ldw	r3,-12(fp)
   2afe4:	18800415 	stw	r2,16(r3)
			((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
		cquantize->desired = desired;
   2afe8:	e0bffd17 	ldw	r2,-12(fp)
   2afec:	e0fffe17 	ldw	r3,-8(fp)
   2aff0:	10c00515 	stw	r3,20(r2)
   2aff4:	00000206 	br	2b000 <jinit_2pass_quantizer+0x210>
	} else
		cquantize->sv_colormap = NULL;
   2aff8:	e0bffd17 	ldw	r2,-12(fp)
   2affc:	10000415 	stw	zero,16(r2)

	/* Only F-S dithering or no dithering is supported. */
	/* If user asks for ordered dither, give him F-S. */
	if (cinfo->dither_mode != JDITHER_NONE)
   2b000:	e0bfff17 	ldw	r2,-4(fp)
   2b004:	10801317 	ldw	r2,76(r2)
   2b008:	10000326 	beq	r2,zero,2b018 <jinit_2pass_quantizer+0x228>
		cinfo->dither_mode = JDITHER_FS;
   2b00c:	e0bfff17 	ldw	r2,-4(fp)
   2b010:	00c00084 	movi	r3,2
   2b014:	10c01315 	stw	r3,76(r2)
	/* Allocate Floyd-Steinberg workspace if necessary.
	* This isn't really needed until pass 2, but again it is FAR storage.
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
   2b018:	e0bfff17 	ldw	r2,-4(fp)
   2b01c:	10801317 	ldw	r2,76(r2)
   2b020:	10800098 	cmpnei	r2,r2,2
   2b024:	1000111e 	bne	r2,zero,2b06c <jinit_2pass_quantizer+0x27c>
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
   2b028:	e0bfff17 	ldw	r2,-4(fp)
   2b02c:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
   2b030:	14000117 	ldw	r16,4(r2)
			(size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
   2b034:	e0bfff17 	ldw	r2,-4(fp)
   2b038:	10801717 	ldw	r2,92(r2)
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
   2b03c:	1009883a 	mov	r4,r2
   2b040:	01400184 	movi	r5,6
   2b044:	002c1540 	call	2c154 <__mulsi3>
   2b048:	10800304 	addi	r2,r2,12
   2b04c:	e13fff17 	ldw	r4,-4(fp)
   2b050:	01400044 	movi	r5,1
   2b054:	100d883a 	mov	r6,r2
   2b058:	803ee83a 	callr	r16
	* This isn't really needed until pass 2, but again it is FAR storage.
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
   2b05c:	e0fffd17 	ldw	r3,-12(fp)
   2b060:	18800815 	stw	r2,32(r3)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			(size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
		/* Might as well create the error-limiting table too. */
		init_error_limit(cinfo);
   2b064:	e13fff17 	ldw	r4,-4(fp)
   2b068:	002a9380 	call	2a938 <init_error_limit>
	}
}
   2b06c:	e037883a 	mov	sp,fp
   2b070:	dfc00217 	ldw	ra,8(sp)
   2b074:	df000117 	ldw	fp,4(sp)
   2b078:	dc000017 	ldw	r16,0(sp)
   2b07c:	dec00304 	addi	sp,sp,12
   2b080:	f800283a 	ret

0002b084 <jdiv_round_up>:

GLOBAL(long)
	jdiv_round_up (long a, long b)
	/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
	/* Assumes a >= 0, b > 0 */
{
   2b084:	defffc04 	addi	sp,sp,-16
   2b088:	dfc00315 	stw	ra,12(sp)
   2b08c:	df000215 	stw	fp,8(sp)
   2b090:	df000204 	addi	fp,sp,8
   2b094:	e13ffe15 	stw	r4,-8(fp)
   2b098:	e17fff15 	stw	r5,-4(fp)
	return (a + b - 1L) / b;
   2b09c:	e0fffe17 	ldw	r3,-8(fp)
   2b0a0:	e0bfff17 	ldw	r2,-4(fp)
   2b0a4:	1885883a 	add	r2,r3,r2
   2b0a8:	10bfffc4 	addi	r2,r2,-1
   2b0ac:	1009883a 	mov	r4,r2
   2b0b0:	e17fff17 	ldw	r5,-4(fp)
   2b0b4:	002c0980 	call	2c098 <__divsi3>
}
   2b0b8:	e037883a 	mov	sp,fp
   2b0bc:	dfc00117 	ldw	ra,4(sp)
   2b0c0:	df000017 	ldw	fp,0(sp)
   2b0c4:	dec00204 	addi	sp,sp,8
   2b0c8:	f800283a 	ret

0002b0cc <jround_up>:

GLOBAL(long)
	jround_up (long a, long b)
	/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
	/* Assumes a >= 0, b > 0 */
{
   2b0cc:	defffc04 	addi	sp,sp,-16
   2b0d0:	dfc00315 	stw	ra,12(sp)
   2b0d4:	df000215 	stw	fp,8(sp)
   2b0d8:	df000204 	addi	fp,sp,8
   2b0dc:	e13ffe15 	stw	r4,-8(fp)
   2b0e0:	e17fff15 	stw	r5,-4(fp)
	a += b - 1L;
   2b0e4:	e0bfff17 	ldw	r2,-4(fp)
   2b0e8:	10bfffc4 	addi	r2,r2,-1
   2b0ec:	e0fffe17 	ldw	r3,-8(fp)
   2b0f0:	1885883a 	add	r2,r3,r2
   2b0f4:	e0bffe15 	stw	r2,-8(fp)
	return a - (a % b);
   2b0f8:	e0bffe17 	ldw	r2,-8(fp)
   2b0fc:	1009883a 	mov	r4,r2
   2b100:	e17fff17 	ldw	r5,-4(fp)
   2b104:	002c0e80 	call	2c0e8 <__modsi3>
   2b108:	e0fffe17 	ldw	r3,-8(fp)
   2b10c:	1885c83a 	sub	r2,r3,r2
}
   2b110:	e037883a 	mov	sp,fp
   2b114:	dfc00117 	ldw	ra,4(sp)
   2b118:	df000017 	ldw	fp,0(sp)
   2b11c:	dec00204 	addi	sp,sp,8
   2b120:	f800283a 	ret

0002b124 <jcopy_sample_rows>:
	/* Copy some rows of samples from one place to another.
	* num_rows rows are copied from input_array[source_row++]
	* to output_array[dest_row++]; these areas may overlap for duplication.
	* The source and destination arrays must be at least as wide as num_cols.
	*/
{
   2b124:	defff604 	addi	sp,sp,-40
   2b128:	dfc00915 	stw	ra,36(sp)
   2b12c:	df000815 	stw	fp,32(sp)
   2b130:	dcc00715 	stw	r19,28(sp)
   2b134:	dc800615 	stw	r18,24(sp)
   2b138:	dc400515 	stw	r17,20(sp)
   2b13c:	dc000415 	stw	r16,16(sp)
   2b140:	df000404 	addi	fp,sp,16
   2b144:	e13ffc15 	stw	r4,-16(fp)
   2b148:	e17ffd15 	stw	r5,-12(fp)
   2b14c:	e1bffe15 	stw	r6,-8(fp)
   2b150:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
	register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
   2b154:	e4c00717 	ldw	r19,28(fp)
#else
	register JDIMENSION count;
#endif
	register int row;

	input_array += source_row;
   2b158:	e0bffd17 	ldw	r2,-12(fp)
   2b15c:	1085883a 	add	r2,r2,r2
   2b160:	1085883a 	add	r2,r2,r2
   2b164:	e0fffc17 	ldw	r3,-16(fp)
   2b168:	1885883a 	add	r2,r3,r2
   2b16c:	e0bffc15 	stw	r2,-16(fp)
	output_array += dest_row;
   2b170:	e0bfff17 	ldw	r2,-4(fp)
   2b174:	1085883a 	add	r2,r2,r2
   2b178:	1085883a 	add	r2,r2,r2
   2b17c:	e0fffe17 	ldw	r3,-8(fp)
   2b180:	1885883a 	add	r2,r3,r2
   2b184:	e0bffe15 	stw	r2,-8(fp)

	for (row = num_rows; row > 0; row--) {
   2b188:	e4000617 	ldw	r16,24(fp)
   2b18c:	00000f06 	br	2b1cc <jcopy_sample_rows+0xa8>
		inptr = *input_array++;
   2b190:	e0bffc17 	ldw	r2,-16(fp)
   2b194:	14400017 	ldw	r17,0(r2)
   2b198:	e0bffc17 	ldw	r2,-16(fp)
   2b19c:	10800104 	addi	r2,r2,4
   2b1a0:	e0bffc15 	stw	r2,-16(fp)
		outptr = *output_array++;
   2b1a4:	e0bffe17 	ldw	r2,-8(fp)
   2b1a8:	14800017 	ldw	r18,0(r2)
   2b1ac:	e0bffe17 	ldw	r2,-8(fp)
   2b1b0:	10800104 	addi	r2,r2,4
   2b1b4:	e0bffe15 	stw	r2,-8(fp)
#ifdef FMEMCOPY
		FMEMCOPY(outptr, inptr, count);
   2b1b8:	9009883a 	mov	r4,r18
   2b1bc:	880b883a 	mov	r5,r17
   2b1c0:	980d883a 	mov	r6,r19
   2b1c4:	002eaec0 	call	2eaec <memcpy>
	register int row;

	input_array += source_row;
	output_array += dest_row;

	for (row = num_rows; row > 0; row--) {
   2b1c8:	843fffc4 	addi	r16,r16,-1
   2b1cc:	043ff016 	blt	zero,r16,2b190 <jcopy_sample_rows+0x6c>
#else
		for (count = num_cols; count > 0; count--)
			*outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
	}
}
   2b1d0:	e037883a 	mov	sp,fp
   2b1d4:	dfc00517 	ldw	ra,20(sp)
   2b1d8:	df000417 	ldw	fp,16(sp)
   2b1dc:	dcc00317 	ldw	r19,12(sp)
   2b1e0:	dc800217 	ldw	r18,8(sp)
   2b1e4:	dc400117 	ldw	r17,4(sp)
   2b1e8:	dc000017 	ldw	r16,0(sp)
   2b1ec:	dec00604 	addi	sp,sp,24
   2b1f0:	f800283a 	ret

0002b1f4 <jcopy_block_row>:

GLOBAL(void)
	jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
	JDIMENSION num_blocks)
	/* Copy a row of coefficient blocks from one place to another. */
{
   2b1f4:	defffb04 	addi	sp,sp,-20
   2b1f8:	dfc00415 	stw	ra,16(sp)
   2b1fc:	df000315 	stw	fp,12(sp)
   2b200:	df000304 	addi	fp,sp,12
   2b204:	e13ffd15 	stw	r4,-12(fp)
   2b208:	e17ffe15 	stw	r5,-8(fp)
   2b20c:	e1bfff15 	stw	r6,-4(fp)
#ifdef FMEMCOPY
	FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
   2b210:	e0bfff17 	ldw	r2,-4(fp)
   2b214:	100491fa 	slli	r2,r2,7
   2b218:	e13ffe17 	ldw	r4,-8(fp)
   2b21c:	e17ffd17 	ldw	r5,-12(fp)
   2b220:	100d883a 	mov	r6,r2
   2b224:	002eaec0 	call	2eaec <memcpy>
	outptr = (JCOEFPTR) output_row;
	for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
		*outptr++ = *inptr++;
	}
#endif
}
   2b228:	e037883a 	mov	sp,fp
   2b22c:	dfc00117 	ldw	ra,4(sp)
   2b230:	df000017 	ldw	fp,0(sp)
   2b234:	dec00204 	addi	sp,sp,8
   2b238:	f800283a 	ret

0002b23c <jzero_far>:

GLOBAL(void)
	jzero_far (void FAR * target, size_t bytestozero)
	/* Zero out a chunk of FAR memory. */
	/* This might be sample-array data, block-array data, or alloc_large data. */
{
   2b23c:	defffc04 	addi	sp,sp,-16
   2b240:	dfc00315 	stw	ra,12(sp)
   2b244:	df000215 	stw	fp,8(sp)
   2b248:	df000204 	addi	fp,sp,8
   2b24c:	e13ffe15 	stw	r4,-8(fp)
   2b250:	e17fff15 	stw	r5,-4(fp)
#ifdef FMEMZERO
	FMEMZERO(target, bytestozero);
   2b254:	e13ffe17 	ldw	r4,-8(fp)
   2b258:	000b883a 	mov	r5,zero
   2b25c:	e1bfff17 	ldw	r6,-4(fp)
   2b260:	002ec2c0 	call	2ec2c <memset>

	for (count = bytestozero; count > 0; count--) {
		*ptr++ = 0;
	}
#endif
}
   2b264:	e037883a 	mov	sp,fp
   2b268:	dfc00117 	ldw	ra,4(sp)
   2b26c:	df000017 	ldw	fp,0(sp)
   2b270:	dec00204 	addi	sp,sp,8
   2b274:	f800283a 	ret

0002b278 <main>:

void convert_picture(const char *jtag_input);
static uint8_t count;

int main()
{
   2b278:	defff904 	addi	sp,sp,-28
   2b27c:	dfc00615 	stw	ra,24(sp)
   2b280:	df000515 	stw	fp,20(sp)
   2b284:	df000504 	addi	fp,sp,20
	char jtag_input[20];
	count = 0;
   2b288:	d026e905 	stb	zero,-25692(gp)
	// Print that welcome message. Programmers looove welcome messages! ;)
	printf("CO503 JPEG Encoder \n\n");
   2b28c:	01000134 	movhi	r4,4
   2b290:	21036c04 	addi	r4,r4,3504
   2b294:	002ee600 	call	2ee60 <puts>

	while(count < NO_OF_FILES) {
   2b298:	00001e06 	br	2b314 <main+0x9c>
		printf("Input file: ");
   2b29c:	01000134 	movhi	r4,4
   2b2a0:	21037204 	addi	r4,r4,3528
   2b2a4:	002eda00 	call	2eda0 <printf>
		scanf("%s", jtag_input); // Ask for the input BMP file
   2b2a8:	01000134 	movhi	r4,4
   2b2ac:	21037604 	addi	r4,r4,3544
   2b2b0:	e17ffb04 	addi	r5,fp,-20
   2b2b4:	002f12c0 	call	2f12c <scanf>

		// Check if the filename ends in '.bmp'
		if(strcmp(&jtag_input[strlen(jtag_input) - 4], ".bmp") == 0) {
   2b2b8:	e13ffb04 	addi	r4,fp,-20
   2b2bc:	002f6680 	call	2f668 <strlen>
   2b2c0:	10bfff04 	addi	r2,r2,-4
   2b2c4:	e0fffb04 	addi	r3,fp,-20
   2b2c8:	1885883a 	add	r2,r3,r2
   2b2cc:	1009883a 	mov	r4,r2
   2b2d0:	01400134 	movhi	r5,4
   2b2d4:	29437704 	addi	r5,r5,3548
   2b2d8:	002f5300 	call	2f530 <strcmp>
   2b2dc:	10000a1e 	bne	r2,zero,2b308 <main+0x90>
			IOWR_8DIRECT(LED_BASE,OFFSET,count);
   2b2e0:	d0a6e903 	ldbu	r2,-25692(gp)
   2b2e4:	10c03fcc 	andi	r3,r2,255
   2b2e8:	00844034 	movhi	r2,4352
   2b2ec:	10840404 	addi	r2,r2,4112
   2b2f0:	10c00025 	stbio	r3,0(r2)
			convert_picture(jtag_input); // See function at the bottom
   2b2f4:	e13ffb04 	addi	r4,fp,-20
   2b2f8:	002b34c0 	call	2b34c <convert_picture>
			count++;
   2b2fc:	d0a6e903 	ldbu	r2,-25692(gp)
   2b300:	10800044 	addi	r2,r2,1
   2b304:	d0a6e905 	stb	r2,-25692(gp)
		}

		printf("\n\n");
   2b308:	01000134 	movhi	r4,4
   2b30c:	21037904 	addi	r4,r4,3556
   2b310:	002ee600 	call	2ee60 <puts>
	char jtag_input[20];
	count = 0;
	// Print that welcome message. Programmers looove welcome messages! ;)
	printf("CO503 JPEG Encoder \n\n");

	while(count < NO_OF_FILES) {
   2b314:	d0a6e903 	ldbu	r2,-25692(gp)
   2b318:	10803fcc 	andi	r2,r2,255
   2b31c:	108001f0 	cmpltui	r2,r2,7
   2b320:	103fde1e 	bne	r2,zero,2b29c <main+0x24>
			count++;
		}

		printf("\n\n");
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,0xFF);
   2b324:	00ffffc4 	movi	r3,-1
   2b328:	00844034 	movhi	r2,4352
   2b32c:	10840404 	addi	r2,r2,4112
   2b330:	10c00025 	stbio	r3,0(r2)
	return 0;
   2b334:	0005883a 	mov	r2,zero
}
   2b338:	e037883a 	mov	sp,fp
   2b33c:	dfc00117 	ldw	ra,4(sp)
   2b340:	df000017 	ldw	fp,0(sp)
   2b344:	dec00204 	addi	sp,sp,8
   2b348:	f800283a 	ret

0002b34c <convert_picture>:

/*
 * Convert a BMP picture of name <jtag_input> into JPEG.
 */
void convert_picture(const char *jtag_input)
{
   2b34c:	deffd104 	addi	sp,sp,-188
   2b350:	dfc02e15 	stw	ra,184(sp)
   2b354:	df002d15 	stw	fp,180(sp)
   2b358:	df002d04 	addi	fp,sp,180
   2b35c:	e13fff15 	stw	r4,-4(fp)
	char file_name[80] = "/mnt/host/files/";
   2b360:	009d1bb4 	movhi	r2,29806
   2b364:	109b4bc4 	addi	r2,r2,27951
   2b368:	e0bfd415 	stw	r2,-176(fp)
   2b36c:	009cdbf4 	movhi	r2,29551
   2b370:	109a0bc4 	addi	r2,r2,26671
   2b374:	e0bfd515 	stw	r2,-172(fp)
   2b378:	009a59b4 	movhi	r2,26982
   2b37c:	108bdd04 	addi	r2,r2,12148
   2b380:	e0bfd615 	stw	r2,-168(fp)
   2b384:	008bdcf4 	movhi	r2,12147
   2b388:	10995b04 	addi	r2,r2,25964
   2b38c:	e0bfd715 	stw	r2,-164(fp)
   2b390:	e03fd815 	stw	zero,-160(fp)
   2b394:	e0ffd904 	addi	r3,fp,-156
   2b398:	00800f04 	movi	r2,60
   2b39c:	1809883a 	mov	r4,r3
   2b3a0:	000b883a 	mov	r5,zero
   2b3a4:	100d883a 	mov	r6,r2
   2b3a8:	002ec2c0 	call	2ec2c <memset>
	char destination[80] = "/mnt/host/files/";
   2b3ac:	009d1bb4 	movhi	r2,29806
   2b3b0:	109b4bc4 	addi	r2,r2,27951
   2b3b4:	e0bfe815 	stw	r2,-96(fp)
   2b3b8:	009cdbf4 	movhi	r2,29551
   2b3bc:	109a0bc4 	addi	r2,r2,26671
   2b3c0:	e0bfe915 	stw	r2,-92(fp)
   2b3c4:	009a59b4 	movhi	r2,26982
   2b3c8:	108bdd04 	addi	r2,r2,12148
   2b3cc:	e0bfea15 	stw	r2,-88(fp)
   2b3d0:	008bdcf4 	movhi	r2,12147
   2b3d4:	10995b04 	addi	r2,r2,25964
   2b3d8:	e0bfeb15 	stw	r2,-84(fp)
   2b3dc:	e03fec15 	stw	zero,-80(fp)
   2b3e0:	e0ffed04 	addi	r3,fp,-76
   2b3e4:	00800f04 	movi	r2,60
   2b3e8:	1809883a 	mov	r4,r3
   2b3ec:	000b883a 	mov	r5,zero
   2b3f0:	100d883a 	mov	r6,r2
   2b3f4:	002ec2c0 	call	2ec2c <memset>
	Bmp_data pic_data;

	strcat(file_name, jtag_input);
   2b3f8:	e13fd404 	addi	r4,fp,-176
   2b3fc:	e17fff17 	ldw	r5,-4(fp)
   2b400:	002f4980 	call	2f498 <strcat>
	strcat(destination, jtag_input);
   2b404:	e0bfe804 	addi	r2,fp,-96
   2b408:	1009883a 	mov	r4,r2
   2b40c:	e17fff17 	ldw	r5,-4(fp)
   2b410:	002f4980 	call	2f498 <strcat>

	// Replace the '.bmp' with '.jpg'
	strcpy(&destination[strlen(destination) - 3], "jpg");
   2b414:	e0bfe804 	addi	r2,fp,-96
   2b418:	1009883a 	mov	r4,r2
   2b41c:	002f6680 	call	2f668 <strlen>
   2b420:	10bfff44 	addi	r2,r2,-3
   2b424:	e0ffe804 	addi	r3,fp,-96
   2b428:	1885883a 	add	r2,r3,r2
   2b42c:	00c01a84 	movi	r3,106
   2b430:	10c00005 	stb	r3,0(r2)
   2b434:	00c01c04 	movi	r3,112
   2b438:	10c00045 	stb	r3,1(r2)
   2b43c:	00c019c4 	movi	r3,103
   2b440:	10c00085 	stb	r3,2(r2)
   2b444:	100000c5 	stb	zero,3(r2)

	if(bmp_extract(file_name, &pic_data) == 0) {
   2b448:	e0bffc04 	addi	r2,fp,-16
   2b44c:	e13fd404 	addi	r4,fp,-176
   2b450:	100b883a 	mov	r5,r2
   2b454:	00004fc0 	call	4fc <bmp_extract>
   2b458:	10000c1e 	bne	r2,zero,2b48c <convert_picture+0x140>
		// Convert to JPEG. This is where the magic happens!
		jpeg_encode(destination, pic_data.bitmap, pic_data.header->BMPHeight, pic_data.header->BMPWidth, 90);
   2b45c:	e17ffe17 	ldw	r5,-8(fp)
   2b460:	e0bffc17 	ldw	r2,-16(fp)
   2b464:	10800517 	ldw	r2,20(r2)
   2b468:	1007883a 	mov	r3,r2
   2b46c:	e0bffc17 	ldw	r2,-16(fp)
   2b470:	10800417 	ldw	r2,16(r2)
   2b474:	e13fe804 	addi	r4,fp,-96
   2b478:	01801684 	movi	r6,90
   2b47c:	d9800015 	stw	r6,0(sp)
   2b480:	180d883a 	mov	r6,r3
   2b484:	100f883a 	mov	r7,r2
   2b488:	000068c0 	call	68c <jpeg_encode>
	} else {
		// An error has happened
	}
}
   2b48c:	e037883a 	mov	sp,fp
   2b490:	dfc00117 	ldw	ra,4(sp)
   2b494:	df000017 	ldw	fp,0(sp)
   2b498:	dec00204 	addi	sp,sp,8
   2b49c:	f800283a 	ret

0002b4a0 <_fpadd_parts>:
   2b4a0:	2005883a 	mov	r2,r4
   2b4a4:	21000017 	ldw	r4,0(r4)
   2b4a8:	01c00044 	movi	r7,1
   2b4ac:	3900332e 	bgeu	r7,r4,2b57c <_fpadd_parts+0xdc>
   2b4b0:	28c00017 	ldw	r3,0(r5)
   2b4b4:	38c0642e 	bgeu	r7,r3,2b648 <_fpadd_parts+0x1a8>
   2b4b8:	01c00104 	movi	r7,4
   2b4bc:	21c06e26 	beq	r4,r7,2b678 <_fpadd_parts+0x1d8>
   2b4c0:	19c06126 	beq	r3,r7,2b648 <_fpadd_parts+0x1a8>
   2b4c4:	01c00084 	movi	r7,2
   2b4c8:	19c04226 	beq	r3,r7,2b5d4 <_fpadd_parts+0x134>
   2b4cc:	21c05e26 	beq	r4,r7,2b648 <_fpadd_parts+0x1a8>
   2b4d0:	11000217 	ldw	r4,8(r2)
   2b4d4:	2a400217 	ldw	r9,8(r5)
   2b4d8:	12800317 	ldw	r10,12(r2)
   2b4dc:	29c00317 	ldw	r7,12(r5)
   2b4e0:	2247c83a 	sub	r3,r4,r9
   2b4e4:	1811883a 	mov	r8,r3
   2b4e8:	18005316 	blt	r3,zero,2b638 <_fpadd_parts+0x198>
   2b4ec:	02c007c4 	movi	r11,31
   2b4f0:	5a002316 	blt	r11,r8,2b580 <_fpadd_parts+0xe0>
   2b4f4:	00c0560e 	bge	zero,r3,2b650 <_fpadd_parts+0x1b0>
   2b4f8:	00c00044 	movi	r3,1
   2b4fc:	1a06983a 	sll	r3,r3,r8
   2b500:	3a10d83a 	srl	r8,r7,r8
   2b504:	18ffffc4 	addi	r3,r3,-1
   2b508:	19ce703a 	and	r7,r3,r7
   2b50c:	380ec03a 	cmpne	r7,r7,zero
   2b510:	3a0eb03a 	or	r7,r7,r8
   2b514:	10c00117 	ldw	r3,4(r2)
   2b518:	28800117 	ldw	r2,4(r5)
   2b51c:	18801d26 	beq	r3,r2,2b594 <_fpadd_parts+0xf4>
   2b520:	18003a26 	beq	r3,zero,2b60c <_fpadd_parts+0x16c>
   2b524:	3a85c83a 	sub	r2,r7,r10
   2b528:	10003a16 	blt	r2,zero,2b614 <_fpadd_parts+0x174>
   2b52c:	30000115 	stw	zero,4(r6)
   2b530:	31000215 	stw	r4,8(r6)
   2b534:	30800315 	stw	r2,12(r6)
   2b538:	10ffffc4 	addi	r3,r2,-1
   2b53c:	01d00034 	movhi	r7,16384
   2b540:	39ffff84 	addi	r7,r7,-2
   2b544:	38c00936 	bltu	r7,r3,2b56c <_fpadd_parts+0xcc>
   2b548:	30c00217 	ldw	r3,8(r6)
   2b54c:	18ffffc4 	addi	r3,r3,-1
   2b550:	1085883a 	add	r2,r2,r2
   2b554:	113fffc4 	addi	r4,r2,-1
   2b558:	180b883a 	mov	r5,r3
   2b55c:	18ffffc4 	addi	r3,r3,-1
   2b560:	393ffb2e 	bgeu	r7,r4,2b550 <_fpadd_parts+0xb0>
   2b564:	30800315 	stw	r2,12(r6)
   2b568:	31400215 	stw	r5,8(r6)
   2b56c:	00c000c4 	movi	r3,3
   2b570:	30c00015 	stw	r3,0(r6)
   2b574:	10000e16 	blt	r2,zero,2b5b0 <_fpadd_parts+0x110>
   2b578:	3005883a 	mov	r2,r6
   2b57c:	f800283a 	ret
   2b580:	49002a0e 	bge	r9,r4,2b62c <_fpadd_parts+0x18c>
   2b584:	10c00117 	ldw	r3,4(r2)
   2b588:	28800117 	ldw	r2,4(r5)
   2b58c:	000f883a 	mov	r7,zero
   2b590:	18bfe31e 	bne	r3,r2,2b520 <_fpadd_parts+0x80>
   2b594:	3a85883a 	add	r2,r7,r10
   2b598:	30c00115 	stw	r3,4(r6)
   2b59c:	00c000c4 	movi	r3,3
   2b5a0:	31000215 	stw	r4,8(r6)
   2b5a4:	30800315 	stw	r2,12(r6)
   2b5a8:	30c00015 	stw	r3,0(r6)
   2b5ac:	103ff20e 	bge	r2,zero,2b578 <_fpadd_parts+0xd8>
   2b5b0:	30c00217 	ldw	r3,8(r6)
   2b5b4:	1008d07a 	srli	r4,r2,1
   2b5b8:	1080004c 	andi	r2,r2,1
   2b5bc:	18c00044 	addi	r3,r3,1
   2b5c0:	1104b03a 	or	r2,r2,r4
   2b5c4:	30800315 	stw	r2,12(r6)
   2b5c8:	30c00215 	stw	r3,8(r6)
   2b5cc:	3005883a 	mov	r2,r6
   2b5d0:	f800283a 	ret
   2b5d4:	20ffe91e 	bne	r4,r3,2b57c <_fpadd_parts+0xdc>
   2b5d8:	31000015 	stw	r4,0(r6)
   2b5dc:	10c00117 	ldw	r3,4(r2)
   2b5e0:	30c00115 	stw	r3,4(r6)
   2b5e4:	11c00217 	ldw	r7,8(r2)
   2b5e8:	10c00117 	ldw	r3,4(r2)
   2b5ec:	29000117 	ldw	r4,4(r5)
   2b5f0:	31c00215 	stw	r7,8(r6)
   2b5f4:	10800317 	ldw	r2,12(r2)
   2b5f8:	20c6703a 	and	r3,r4,r3
   2b5fc:	30c00115 	stw	r3,4(r6)
   2b600:	30800315 	stw	r2,12(r6)
   2b604:	3005883a 	mov	r2,r6
   2b608:	f800283a 	ret
   2b60c:	51c5c83a 	sub	r2,r10,r7
   2b610:	103fc60e 	bge	r2,zero,2b52c <_fpadd_parts+0x8c>
   2b614:	0085c83a 	sub	r2,zero,r2
   2b618:	00c00044 	movi	r3,1
   2b61c:	30c00115 	stw	r3,4(r6)
   2b620:	31000215 	stw	r4,8(r6)
   2b624:	30800315 	stw	r2,12(r6)
   2b628:	003fc306 	br	2b538 <_fpadd_parts+0x98>
   2b62c:	4809883a 	mov	r4,r9
   2b630:	0015883a 	mov	r10,zero
   2b634:	003fb706 	br	2b514 <_fpadd_parts+0x74>
   2b638:	00d1c83a 	sub	r8,zero,r3
   2b63c:	02c007c4 	movi	r11,31
   2b640:	5a3fcf16 	blt	r11,r8,2b580 <_fpadd_parts+0xe0>
   2b644:	003fab06 	br	2b4f4 <_fpadd_parts+0x54>
   2b648:	2805883a 	mov	r2,r5
   2b64c:	f800283a 	ret
   2b650:	183fb026 	beq	r3,zero,2b514 <_fpadd_parts+0x74>
   2b654:	02400044 	movi	r9,1
   2b658:	4a12983a 	sll	r9,r9,r8
   2b65c:	5206d83a 	srl	r3,r10,r8
   2b660:	2209883a 	add	r4,r4,r8
   2b664:	4a3fffc4 	addi	r8,r9,-1
   2b668:	4294703a 	and	r10,r8,r10
   2b66c:	5014c03a 	cmpne	r10,r10,zero
   2b670:	50d4b03a 	or	r10,r10,r3
   2b674:	003fa706 	br	2b514 <_fpadd_parts+0x74>
   2b678:	193fc01e 	bne	r3,r4,2b57c <_fpadd_parts+0xdc>
   2b67c:	11000117 	ldw	r4,4(r2)
   2b680:	28c00117 	ldw	r3,4(r5)
   2b684:	20ffbd26 	beq	r4,r3,2b57c <_fpadd_parts+0xdc>
   2b688:	00800134 	movhi	r2,4
   2b68c:	10837a04 	addi	r2,r2,3560
   2b690:	f800283a 	ret

0002b694 <__addsf3>:
   2b694:	defff104 	addi	sp,sp,-60
   2b698:	d9000d15 	stw	r4,52(sp)
   2b69c:	d9400c15 	stw	r5,48(sp)
   2b6a0:	d9000d04 	addi	r4,sp,52
   2b6a4:	d9400804 	addi	r5,sp,32
   2b6a8:	dfc00e15 	stw	ra,56(sp)
   2b6ac:	002c4640 	call	2c464 <__unpack_f>
   2b6b0:	d9000c04 	addi	r4,sp,48
   2b6b4:	d9400404 	addi	r5,sp,16
   2b6b8:	002c4640 	call	2c464 <__unpack_f>
   2b6bc:	d9000804 	addi	r4,sp,32
   2b6c0:	d9400404 	addi	r5,sp,16
   2b6c4:	d80d883a 	mov	r6,sp
   2b6c8:	002b4a00 	call	2b4a0 <_fpadd_parts>
   2b6cc:	1009883a 	mov	r4,r2
   2b6d0:	002c3380 	call	2c338 <__pack_f>
   2b6d4:	dfc00e17 	ldw	ra,56(sp)
   2b6d8:	dec00f04 	addi	sp,sp,60
   2b6dc:	f800283a 	ret

0002b6e0 <__subsf3>:
   2b6e0:	defff104 	addi	sp,sp,-60
   2b6e4:	d9000d15 	stw	r4,52(sp)
   2b6e8:	d9400c15 	stw	r5,48(sp)
   2b6ec:	d9000d04 	addi	r4,sp,52
   2b6f0:	d9400804 	addi	r5,sp,32
   2b6f4:	dfc00e15 	stw	ra,56(sp)
   2b6f8:	002c4640 	call	2c464 <__unpack_f>
   2b6fc:	d9000c04 	addi	r4,sp,48
   2b700:	d9400404 	addi	r5,sp,16
   2b704:	002c4640 	call	2c464 <__unpack_f>
   2b708:	d8800517 	ldw	r2,20(sp)
   2b70c:	d9000804 	addi	r4,sp,32
   2b710:	d9400404 	addi	r5,sp,16
   2b714:	d80d883a 	mov	r6,sp
   2b718:	1080005c 	xori	r2,r2,1
   2b71c:	d8800515 	stw	r2,20(sp)
   2b720:	002b4a00 	call	2b4a0 <_fpadd_parts>
   2b724:	1009883a 	mov	r4,r2
   2b728:	002c3380 	call	2c338 <__pack_f>
   2b72c:	dfc00e17 	ldw	ra,56(sp)
   2b730:	dec00f04 	addi	sp,sp,60
   2b734:	f800283a 	ret

0002b738 <__mulsf3>:
   2b738:	defff104 	addi	sp,sp,-60
   2b73c:	d9000d15 	stw	r4,52(sp)
   2b740:	d9400c15 	stw	r5,48(sp)
   2b744:	d9000d04 	addi	r4,sp,52
   2b748:	d9400804 	addi	r5,sp,32
   2b74c:	dfc00e15 	stw	ra,56(sp)
   2b750:	002c4640 	call	2c464 <__unpack_f>
   2b754:	d9000c04 	addi	r4,sp,48
   2b758:	d9400404 	addi	r5,sp,16
   2b75c:	002c4640 	call	2c464 <__unpack_f>
   2b760:	d8c00817 	ldw	r3,32(sp)
   2b764:	00800044 	movi	r2,1
   2b768:	10c00936 	bltu	r2,r3,2b790 <__mulsf3+0x58>
   2b76c:	d8c00917 	ldw	r3,36(sp)
   2b770:	d8800517 	ldw	r2,20(sp)
   2b774:	d9000804 	addi	r4,sp,32
   2b778:	1884c03a 	cmpne	r2,r3,r2
   2b77c:	d8800915 	stw	r2,36(sp)
   2b780:	002c3380 	call	2c338 <__pack_f>
   2b784:	dfc00e17 	ldw	ra,56(sp)
   2b788:	dec00f04 	addi	sp,sp,60
   2b78c:	f800283a 	ret
   2b790:	d9000417 	ldw	r4,16(sp)
   2b794:	11000936 	bltu	r2,r4,2b7bc <__mulsf3+0x84>
   2b798:	d8800517 	ldw	r2,20(sp)
   2b79c:	d8c00917 	ldw	r3,36(sp)
   2b7a0:	d9000404 	addi	r4,sp,16
   2b7a4:	1884c03a 	cmpne	r2,r3,r2
   2b7a8:	d8800515 	stw	r2,20(sp)
   2b7ac:	002c3380 	call	2c338 <__pack_f>
   2b7b0:	dfc00e17 	ldw	ra,56(sp)
   2b7b4:	dec00f04 	addi	sp,sp,60
   2b7b8:	f800283a 	ret
   2b7bc:	00800104 	movi	r2,4
   2b7c0:	1880051e 	bne	r3,r2,2b7d8 <__mulsf3+0xa0>
   2b7c4:	00800084 	movi	r2,2
   2b7c8:	20bfe81e 	bne	r4,r2,2b76c <__mulsf3+0x34>
   2b7cc:	01000134 	movhi	r4,4
   2b7d0:	21037a04 	addi	r4,r4,3560
   2b7d4:	003fea06 	br	2b780 <__mulsf3+0x48>
   2b7d8:	2080031e 	bne	r4,r2,2b7e8 <__mulsf3+0xb0>
   2b7dc:	00800084 	movi	r2,2
   2b7e0:	18bffa26 	beq	r3,r2,2b7cc <__mulsf3+0x94>
   2b7e4:	003fec06 	br	2b798 <__mulsf3+0x60>
   2b7e8:	00800084 	movi	r2,2
   2b7ec:	18bfdf26 	beq	r3,r2,2b76c <__mulsf3+0x34>
   2b7f0:	20bfe926 	beq	r4,r2,2b798 <__mulsf3+0x60>
   2b7f4:	d9000717 	ldw	r4,28(sp)
   2b7f8:	d9800b17 	ldw	r6,44(sp)
   2b7fc:	000b883a 	mov	r5,zero
   2b800:	000f883a 	mov	r7,zero
   2b804:	002c17c0 	call	2c17c <__muldi3>
   2b808:	d9000617 	ldw	r4,24(sp)
   2b80c:	d9400a17 	ldw	r5,40(sp)
   2b810:	d9c00917 	ldw	r7,36(sp)
   2b814:	290b883a 	add	r5,r5,r4
   2b818:	d9000517 	ldw	r4,20(sp)
   2b81c:	29800084 	addi	r6,r5,2
   2b820:	d9800215 	stw	r6,8(sp)
   2b824:	3908c03a 	cmpne	r4,r7,r4
   2b828:	d9000115 	stw	r4,4(sp)
   2b82c:	1809883a 	mov	r4,r3
   2b830:	1800070e 	bge	r3,zero,2b850 <__mulsf3+0x118>
   2b834:	1900004c 	andi	r4,r3,1
   2b838:	294000c4 	addi	r5,r5,3
   2b83c:	20000226 	beq	r4,zero,2b848 <__mulsf3+0x110>
   2b840:	1004d07a 	srli	r2,r2,1
   2b844:	10a00034 	orhi	r2,r2,32768
   2b848:	1808d07a 	srli	r4,r3,1
   2b84c:	d9400215 	stw	r5,8(sp)
   2b850:	01900034 	movhi	r6,16384
   2b854:	31bfffc4 	addi	r6,r6,-1
   2b858:	31000c36 	bltu	r6,r4,2b88c <__mulsf3+0x154>
   2b85c:	d8c00217 	ldw	r3,8(sp)
   2b860:	18ffffc4 	addi	r3,r3,-1
   2b864:	00000306 	br	2b874 <__mulsf3+0x13c>
   2b868:	1085883a 	add	r2,r2,r2
   2b86c:	18ffffc4 	addi	r3,r3,-1
   2b870:	31000536 	bltu	r6,r4,2b888 <__mulsf3+0x150>
   2b874:	2109883a 	add	r4,r4,r4
   2b878:	180b883a 	mov	r5,r3
   2b87c:	103ffa0e 	bge	r2,zero,2b868 <__mulsf3+0x130>
   2b880:	21000054 	ori	r4,r4,1
   2b884:	003ff806 	br	2b868 <__mulsf3+0x130>
   2b888:	d9400215 	stw	r5,8(sp)
   2b88c:	21401fcc 	andi	r5,r4,127
   2b890:	00c01004 	movi	r3,64
   2b894:	28c00526 	beq	r5,r3,2b8ac <__mulsf3+0x174>
   2b898:	008000c4 	movi	r2,3
   2b89c:	d9000315 	stw	r4,12(sp)
   2b8a0:	d8800015 	stw	r2,0(sp)
   2b8a4:	d809883a 	mov	r4,sp
   2b8a8:	003fb506 	br	2b780 <__mulsf3+0x48>
   2b8ac:	20c0200c 	andi	r3,r4,128
   2b8b0:	183ff91e 	bne	r3,zero,2b898 <__mulsf3+0x160>
   2b8b4:	103ff826 	beq	r2,zero,2b898 <__mulsf3+0x160>
   2b8b8:	21001004 	addi	r4,r4,64
   2b8bc:	00bfe004 	movi	r2,-128
   2b8c0:	2088703a 	and	r4,r4,r2
   2b8c4:	003ff406 	br	2b898 <__mulsf3+0x160>

0002b8c8 <__floatsisf>:
   2b8c8:	2004d7fa 	srli	r2,r4,31
   2b8cc:	defffa04 	addi	sp,sp,-24
   2b8d0:	00c000c4 	movi	r3,3
   2b8d4:	dfc00515 	stw	ra,20(sp)
   2b8d8:	dc000415 	stw	r16,16(sp)
   2b8dc:	d8c00015 	stw	r3,0(sp)
   2b8e0:	d8800115 	stw	r2,4(sp)
   2b8e4:	2000081e 	bne	r4,zero,2b908 <__floatsisf+0x40>
   2b8e8:	00800084 	movi	r2,2
   2b8ec:	d8800015 	stw	r2,0(sp)
   2b8f0:	d809883a 	mov	r4,sp
   2b8f4:	002c3380 	call	2c338 <__pack_f>
   2b8f8:	dfc00517 	ldw	ra,20(sp)
   2b8fc:	dc000417 	ldw	r16,16(sp)
   2b900:	dec00604 	addi	sp,sp,24
   2b904:	f800283a 	ret
   2b908:	00c00784 	movi	r3,30
   2b90c:	d8c00215 	stw	r3,8(sp)
   2b910:	10000b1e 	bne	r2,zero,2b940 <__floatsisf+0x78>
   2b914:	2021883a 	mov	r16,r4
   2b918:	8009883a 	mov	r4,r16
   2b91c:	002c28c0 	call	2c28c <__clzsi2>
   2b920:	113fffc4 	addi	r4,r2,-1
   2b924:	01000d0e 	bge	zero,r4,2b95c <__floatsisf+0x94>
   2b928:	8108983a 	sll	r4,r16,r4
   2b92c:	00c007c4 	movi	r3,31
   2b930:	1885c83a 	sub	r2,r3,r2
   2b934:	d9000315 	stw	r4,12(sp)
   2b938:	d8800215 	stw	r2,8(sp)
   2b93c:	003fec06 	br	2b8f0 <__floatsisf+0x28>
   2b940:	00a00034 	movhi	r2,32768
   2b944:	20800726 	beq	r4,r2,2b964 <__floatsisf+0x9c>
   2b948:	0121c83a 	sub	r16,zero,r4
   2b94c:	8009883a 	mov	r4,r16
   2b950:	002c28c0 	call	2c28c <__clzsi2>
   2b954:	113fffc4 	addi	r4,r2,-1
   2b958:	013ff316 	blt	zero,r4,2b928 <__floatsisf+0x60>
   2b95c:	dc000315 	stw	r16,12(sp)
   2b960:	003fe306 	br	2b8f0 <__floatsisf+0x28>
   2b964:	00b3c034 	movhi	r2,52992
   2b968:	003fe306 	br	2b8f8 <__floatsisf+0x30>

0002b96c <__fixsfsi>:
   2b96c:	defffa04 	addi	sp,sp,-24
   2b970:	d9000415 	stw	r4,16(sp)
   2b974:	d80b883a 	mov	r5,sp
   2b978:	d9000404 	addi	r4,sp,16
   2b97c:	dfc00515 	stw	ra,20(sp)
   2b980:	002c4640 	call	2c464 <__unpack_f>
   2b984:	d8800017 	ldw	r2,0(sp)
   2b988:	00c00084 	movi	r3,2
   2b98c:	10c01826 	beq	r2,r3,2b9f0 <__fixsfsi+0x84>
   2b990:	00c00044 	movi	r3,1
   2b994:	1880162e 	bgeu	r3,r2,2b9f0 <__fixsfsi+0x84>
   2b998:	00c00104 	movi	r3,4
   2b99c:	10c00426 	beq	r2,r3,2b9b0 <__fixsfsi+0x44>
   2b9a0:	d8800217 	ldw	r2,8(sp)
   2b9a4:	10001216 	blt	r2,zero,2b9f0 <__fixsfsi+0x84>
   2b9a8:	00c00784 	movi	r3,30
   2b9ac:	1880070e 	bge	r3,r2,2b9cc <__fixsfsi+0x60>
   2b9b0:	d8800117 	ldw	r2,4(sp)
   2b9b4:	1000121e 	bne	r2,zero,2ba00 <__fixsfsi+0x94>
   2b9b8:	00a00034 	movhi	r2,32768
   2b9bc:	10bfffc4 	addi	r2,r2,-1
   2b9c0:	dfc00517 	ldw	ra,20(sp)
   2b9c4:	dec00604 	addi	sp,sp,24
   2b9c8:	f800283a 	ret
   2b9cc:	1885c83a 	sub	r2,r3,r2
   2b9d0:	d8c00317 	ldw	r3,12(sp)
   2b9d4:	1884d83a 	srl	r2,r3,r2
   2b9d8:	d8c00117 	ldw	r3,4(sp)
   2b9dc:	183ff826 	beq	r3,zero,2b9c0 <__fixsfsi+0x54>
   2b9e0:	0085c83a 	sub	r2,zero,r2
   2b9e4:	dfc00517 	ldw	ra,20(sp)
   2b9e8:	dec00604 	addi	sp,sp,24
   2b9ec:	f800283a 	ret
   2b9f0:	0005883a 	mov	r2,zero
   2b9f4:	dfc00517 	ldw	ra,20(sp)
   2b9f8:	dec00604 	addi	sp,sp,24
   2b9fc:	f800283a 	ret
   2ba00:	00a00034 	movhi	r2,32768
   2ba04:	dfc00517 	ldw	ra,20(sp)
   2ba08:	dec00604 	addi	sp,sp,24
   2ba0c:	f800283a 	ret

0002ba10 <__muldf3>:
   2ba10:	deffe404 	addi	sp,sp,-112
   2ba14:	d9001115 	stw	r4,68(sp)
   2ba18:	d9401215 	stw	r5,72(sp)
   2ba1c:	d9001104 	addi	r4,sp,68
   2ba20:	d9400a04 	addi	r5,sp,40
   2ba24:	dfc01b15 	stw	ra,108(sp)
   2ba28:	d9800f15 	stw	r6,60(sp)
   2ba2c:	d9c01015 	stw	r7,64(sp)
   2ba30:	ddc01a15 	stw	r23,104(sp)
   2ba34:	dd801915 	stw	r22,100(sp)
   2ba38:	dd401815 	stw	r21,96(sp)
   2ba3c:	dd001715 	stw	r20,92(sp)
   2ba40:	dcc01615 	stw	r19,88(sp)
   2ba44:	dc801515 	stw	r18,84(sp)
   2ba48:	dc401415 	stw	r17,80(sp)
   2ba4c:	dc001315 	stw	r16,76(sp)
   2ba50:	002c77c0 	call	2c77c <__unpack_d>
   2ba54:	d9000f04 	addi	r4,sp,60
   2ba58:	d9400504 	addi	r5,sp,20
   2ba5c:	002c77c0 	call	2c77c <__unpack_d>
   2ba60:	d8c00a17 	ldw	r3,40(sp)
   2ba64:	00800044 	movi	r2,1
   2ba68:	10c01136 	bltu	r2,r3,2bab0 <__muldf3+0xa0>
   2ba6c:	d8c00b17 	ldw	r3,44(sp)
   2ba70:	d8800617 	ldw	r2,24(sp)
   2ba74:	d9000a04 	addi	r4,sp,40
   2ba78:	1884c03a 	cmpne	r2,r3,r2
   2ba7c:	d8800b15 	stw	r2,44(sp)
   2ba80:	002c5580 	call	2c558 <__pack_d>
   2ba84:	dfc01b17 	ldw	ra,108(sp)
   2ba88:	ddc01a17 	ldw	r23,104(sp)
   2ba8c:	dd801917 	ldw	r22,100(sp)
   2ba90:	dd401817 	ldw	r21,96(sp)
   2ba94:	dd001717 	ldw	r20,92(sp)
   2ba98:	dcc01617 	ldw	r19,88(sp)
   2ba9c:	dc801517 	ldw	r18,84(sp)
   2baa0:	dc401417 	ldw	r17,80(sp)
   2baa4:	dc001317 	ldw	r16,76(sp)
   2baa8:	dec01c04 	addi	sp,sp,112
   2baac:	f800283a 	ret
   2bab0:	d9000517 	ldw	r4,20(sp)
   2bab4:	11000636 	bltu	r2,r4,2bad0 <__muldf3+0xc0>
   2bab8:	d8800617 	ldw	r2,24(sp)
   2babc:	d8c00b17 	ldw	r3,44(sp)
   2bac0:	d9000504 	addi	r4,sp,20
   2bac4:	1884c03a 	cmpne	r2,r3,r2
   2bac8:	d8800615 	stw	r2,24(sp)
   2bacc:	003fec06 	br	2ba80 <__muldf3+0x70>
   2bad0:	00800104 	movi	r2,4
   2bad4:	1880051e 	bne	r3,r2,2baec <__muldf3+0xdc>
   2bad8:	00800084 	movi	r2,2
   2badc:	20bfe31e 	bne	r4,r2,2ba6c <__muldf3+0x5c>
   2bae0:	01000134 	movhi	r4,4
   2bae4:	21037e04 	addi	r4,r4,3576
   2bae8:	003fe506 	br	2ba80 <__muldf3+0x70>
   2baec:	2080031e 	bne	r4,r2,2bafc <__muldf3+0xec>
   2baf0:	00800084 	movi	r2,2
   2baf4:	18bffa26 	beq	r3,r2,2bae0 <__muldf3+0xd0>
   2baf8:	003fef06 	br	2bab8 <__muldf3+0xa8>
   2bafc:	00800084 	movi	r2,2
   2bb00:	18bfda26 	beq	r3,r2,2ba6c <__muldf3+0x5c>
   2bb04:	20bfec26 	beq	r4,r2,2bab8 <__muldf3+0xa8>
   2bb08:	dc000d17 	ldw	r16,52(sp)
   2bb0c:	dd000817 	ldw	r20,32(sp)
   2bb10:	dc800917 	ldw	r18,36(sp)
   2bb14:	8009883a 	mov	r4,r16
   2bb18:	000b883a 	mov	r5,zero
   2bb1c:	a00d883a 	mov	r6,r20
   2bb20:	000f883a 	mov	r7,zero
   2bb24:	002c17c0 	call	2c17c <__muldi3>
   2bb28:	dc400e17 	ldw	r17,56(sp)
   2bb2c:	9009883a 	mov	r4,r18
   2bb30:	800d883a 	mov	r6,r16
   2bb34:	000b883a 	mov	r5,zero
   2bb38:	000f883a 	mov	r7,zero
   2bb3c:	102f883a 	mov	r23,r2
   2bb40:	1827883a 	mov	r19,r3
   2bb44:	002c17c0 	call	2c17c <__muldi3>
   2bb48:	900d883a 	mov	r6,r18
   2bb4c:	8809883a 	mov	r4,r17
   2bb50:	000b883a 	mov	r5,zero
   2bb54:	000f883a 	mov	r7,zero
   2bb58:	102b883a 	mov	r21,r2
   2bb5c:	1821883a 	mov	r16,r3
   2bb60:	002c17c0 	call	2c17c <__muldi3>
   2bb64:	8809883a 	mov	r4,r17
   2bb68:	000b883a 	mov	r5,zero
   2bb6c:	a00d883a 	mov	r6,r20
   2bb70:	000f883a 	mov	r7,zero
   2bb74:	102d883a 	mov	r22,r2
   2bb78:	1825883a 	mov	r18,r3
   2bb7c:	002c17c0 	call	2c17c <__muldi3>
   2bb80:	154b883a 	add	r5,r2,r21
   2bb84:	2889803a 	cmpltu	r4,r5,r2
   2bb88:	1c07883a 	add	r3,r3,r16
   2bb8c:	20c9883a 	add	r4,r4,r3
   2bb90:	24004b36 	bltu	r4,r16,2bcc0 <__muldf3+0x2b0>
   2bb94:	8100011e 	bne	r16,r4,2bb9c <__muldf3+0x18c>
   2bb98:	2d404936 	bltu	r5,r21,2bcc0 <__muldf3+0x2b0>
   2bb9c:	0011883a 	mov	r8,zero
   2bba0:	0007883a 	mov	r3,zero
   2bba4:	2ccb883a 	add	r5,r5,r19
   2bba8:	b80d883a 	mov	r6,r23
   2bbac:	2cc0012e 	bgeu	r5,r19,2bbb4 <__muldf3+0x1a4>
   2bbb0:	02000044 	movi	r8,1
   2bbb4:	258f883a 	add	r7,r4,r22
   2bbb8:	3909803a 	cmpltu	r4,r7,r4
   2bbbc:	da400c17 	ldw	r9,48(sp)
   2bbc0:	2489883a 	add	r4,r4,r18
   2bbc4:	d8800717 	ldw	r2,28(sp)
   2bbc8:	20c9883a 	add	r4,r4,r3
   2bbcc:	da800b17 	ldw	r10,44(sp)
   2bbd0:	d8c00617 	ldw	r3,24(sp)
   2bbd4:	3a11883a 	add	r8,r7,r8
   2bbd8:	4885883a 	add	r2,r9,r2
   2bbdc:	50c6c03a 	cmpne	r3,r10,r3
   2bbe0:	41cf803a 	cmpltu	r7,r8,r7
   2bbe4:	12400104 	addi	r9,r2,4
   2bbe8:	d8c00115 	stw	r3,4(sp)
   2bbec:	3909883a 	add	r4,r7,r4
   2bbf0:	da400215 	stw	r9,8(sp)
   2bbf4:	03480034 	movhi	r13,8192
   2bbf8:	6b7fffc4 	addi	r13,r13,-1
   2bbfc:	4007883a 	mov	r3,r8
   2bc00:	6900102e 	bgeu	r13,r4,2bc44 <__muldf3+0x234>
   2bc04:	10800144 	addi	r2,r2,5
   2bc08:	180ed07a 	srli	r7,r3,1
   2bc0c:	18c0004c 	andi	r3,r3,1
   2bc10:	201097fa 	slli	r8,r4,31
   2bc14:	281697fa 	slli	r11,r5,31
   2bc18:	2008d07a 	srli	r4,r4,1
   2bc1c:	3014d07a 	srli	r10,r6,1
   2bc20:	2812d07a 	srli	r9,r5,1
   2bc24:	1019883a 	mov	r12,r2
   2bc28:	18000226 	beq	r3,zero,2bc34 <__muldf3+0x224>
   2bc2c:	5a8cb03a 	or	r6,r11,r10
   2bc30:	49600034 	orhi	r5,r9,32768
   2bc34:	41c6b03a 	or	r3,r8,r7
   2bc38:	10800044 	addi	r2,r2,1
   2bc3c:	693ff236 	bltu	r13,r4,2bc08 <__muldf3+0x1f8>
   2bc40:	db000215 	stw	r12,8(sp)
   2bc44:	03440034 	movhi	r13,4096
   2bc48:	6b7fffc4 	addi	r13,r13,-1
   2bc4c:	69001336 	bltu	r13,r4,2bc9c <__muldf3+0x28c>
   2bc50:	d8800217 	ldw	r2,8(sp)
   2bc54:	10bfffc4 	addi	r2,r2,-1
   2bc58:	18d3883a 	add	r9,r3,r3
   2bc5c:	48c7803a 	cmpltu	r3,r9,r3
   2bc60:	2109883a 	add	r4,r4,r4
   2bc64:	190f883a 	add	r7,r3,r4
   2bc68:	3191883a 	add	r8,r6,r6
   2bc6c:	4197803a 	cmpltu	r11,r8,r6
   2bc70:	2955883a 	add	r10,r5,r5
   2bc74:	1019883a 	mov	r12,r2
   2bc78:	4807883a 	mov	r3,r9
   2bc7c:	3809883a 	mov	r4,r7
   2bc80:	2800010e 	bge	r5,zero,2bc88 <__muldf3+0x278>
   2bc84:	48c00054 	ori	r3,r9,1
   2bc88:	400d883a 	mov	r6,r8
   2bc8c:	5a8b883a 	add	r5,r11,r10
   2bc90:	10bfffc4 	addi	r2,r2,-1
   2bc94:	69fff02e 	bgeu	r13,r7,2bc58 <__muldf3+0x248>
   2bc98:	db000215 	stw	r12,8(sp)
   2bc9c:	18803fcc 	andi	r2,r3,255
   2bca0:	01c02004 	movi	r7,128
   2bca4:	11c00926 	beq	r2,r7,2bccc <__muldf3+0x2bc>
   2bca8:	008000c4 	movi	r2,3
   2bcac:	d9000415 	stw	r4,16(sp)
   2bcb0:	d8c00315 	stw	r3,12(sp)
   2bcb4:	d8800015 	stw	r2,0(sp)
   2bcb8:	d809883a 	mov	r4,sp
   2bcbc:	003f7006 	br	2ba80 <__muldf3+0x70>
   2bcc0:	0011883a 	mov	r8,zero
   2bcc4:	00c00044 	movi	r3,1
   2bcc8:	003fb606 	br	2bba4 <__muldf3+0x194>
   2bccc:	19c0400c 	andi	r7,r3,256
   2bcd0:	383ff51e 	bne	r7,zero,2bca8 <__muldf3+0x298>
   2bcd4:	314ab03a 	or	r5,r6,r5
   2bcd8:	283ff326 	beq	r5,zero,2bca8 <__muldf3+0x298>
   2bcdc:	1885883a 	add	r2,r3,r2
   2bce0:	10cb803a 	cmpltu	r5,r2,r3
   2bce4:	00ffc004 	movi	r3,-256
   2bce8:	10c6703a 	and	r3,r2,r3
   2bcec:	2909883a 	add	r4,r5,r4
   2bcf0:	003fed06 	br	2bca8 <__muldf3+0x298>

0002bcf4 <__divdf3>:
   2bcf4:	defff104 	addi	sp,sp,-60
   2bcf8:	d9000c15 	stw	r4,48(sp)
   2bcfc:	d9400d15 	stw	r5,52(sp)
   2bd00:	d9000c04 	addi	r4,sp,48
   2bd04:	d9400504 	addi	r5,sp,20
   2bd08:	dfc00e15 	stw	ra,56(sp)
   2bd0c:	d9800a15 	stw	r6,40(sp)
   2bd10:	d9c00b15 	stw	r7,44(sp)
   2bd14:	002c77c0 	call	2c77c <__unpack_d>
   2bd18:	d9000a04 	addi	r4,sp,40
   2bd1c:	d80b883a 	mov	r5,sp
   2bd20:	002c77c0 	call	2c77c <__unpack_d>
   2bd24:	d8c00517 	ldw	r3,20(sp)
   2bd28:	00800044 	movi	r2,1
   2bd2c:	10c00536 	bltu	r2,r3,2bd44 <__divdf3+0x50>
   2bd30:	d9000504 	addi	r4,sp,20
   2bd34:	002c5580 	call	2c558 <__pack_d>
   2bd38:	dfc00e17 	ldw	ra,56(sp)
   2bd3c:	dec00f04 	addi	sp,sp,60
   2bd40:	f800283a 	ret
   2bd44:	d9000017 	ldw	r4,0(sp)
   2bd48:	11000536 	bltu	r2,r4,2bd60 <__divdf3+0x6c>
   2bd4c:	d809883a 	mov	r4,sp
   2bd50:	002c5580 	call	2c558 <__pack_d>
   2bd54:	dfc00e17 	ldw	ra,56(sp)
   2bd58:	dec00f04 	addi	sp,sp,60
   2bd5c:	f800283a 	ret
   2bd60:	d9800617 	ldw	r6,24(sp)
   2bd64:	d9400117 	ldw	r5,4(sp)
   2bd68:	00800104 	movi	r2,4
   2bd6c:	314af03a 	xor	r5,r6,r5
   2bd70:	d9400615 	stw	r5,24(sp)
   2bd74:	18800226 	beq	r3,r2,2bd80 <__divdf3+0x8c>
   2bd78:	01400084 	movi	r5,2
   2bd7c:	1940041e 	bne	r3,r5,2bd90 <__divdf3+0x9c>
   2bd80:	193feb1e 	bne	r3,r4,2bd30 <__divdf3+0x3c>
   2bd84:	01000134 	movhi	r4,4
   2bd88:	21037e04 	addi	r4,r4,3576
   2bd8c:	003fe906 	br	2bd34 <__divdf3+0x40>
   2bd90:	20803326 	beq	r4,r2,2be60 <__divdf3+0x16c>
   2bd94:	21403726 	beq	r4,r5,2be74 <__divdf3+0x180>
   2bd98:	d8800217 	ldw	r2,8(sp)
   2bd9c:	d9000717 	ldw	r4,28(sp)
   2bda0:	d8c00917 	ldw	r3,36(sp)
   2bda4:	da000417 	ldw	r8,16(sp)
   2bda8:	2089c83a 	sub	r4,r4,r2
   2bdac:	d9000715 	stw	r4,28(sp)
   2bdb0:	d8800817 	ldw	r2,32(sp)
   2bdb4:	dbc00317 	ldw	r15,12(sp)
   2bdb8:	1a000236 	bltu	r3,r8,2bdc4 <__divdf3+0xd0>
   2bdbc:	40c0081e 	bne	r8,r3,2bde0 <__divdf3+0xec>
   2bdc0:	13c0072e 	bgeu	r2,r15,2bde0 <__divdf3+0xec>
   2bdc4:	108b883a 	add	r5,r2,r2
   2bdc8:	288d803a 	cmpltu	r6,r5,r2
   2bdcc:	18c7883a 	add	r3,r3,r3
   2bdd0:	213fffc4 	addi	r4,r4,-1
   2bdd4:	2805883a 	mov	r2,r5
   2bdd8:	30c7883a 	add	r3,r6,r3
   2bddc:	d9000715 	stw	r4,28(sp)
   2bde0:	01400f44 	movi	r5,61
   2bde4:	000f883a 	mov	r7,zero
   2bde8:	01040034 	movhi	r4,4096
   2bdec:	0019883a 	mov	r12,zero
   2bdf0:	001b883a 	mov	r13,zero
   2bdf4:	201697fa 	slli	r11,r4,31
   2bdf8:	3814d07a 	srli	r10,r7,1
   2bdfc:	297fffc4 	addi	r5,r5,-1
   2be00:	1a000936 	bltu	r3,r8,2be28 <__divdf3+0x134>
   2be04:	13cdc83a 	sub	r6,r2,r15
   2be08:	1193803a 	cmpltu	r9,r2,r6
   2be0c:	1a1dc83a 	sub	r14,r3,r8
   2be10:	40c0011e 	bne	r8,r3,2be18 <__divdf3+0x124>
   2be14:	13c00436 	bltu	r2,r15,2be28 <__divdf3+0x134>
   2be18:	3005883a 	mov	r2,r6
   2be1c:	7247c83a 	sub	r3,r14,r9
   2be20:	61d8b03a 	or	r12,r12,r7
   2be24:	691ab03a 	or	r13,r13,r4
   2be28:	108d883a 	add	r6,r2,r2
   2be2c:	3093803a 	cmpltu	r9,r6,r2
   2be30:	18c7883a 	add	r3,r3,r3
   2be34:	5a8eb03a 	or	r7,r11,r10
   2be38:	2008d07a 	srli	r4,r4,1
   2be3c:	3005883a 	mov	r2,r6
   2be40:	48c7883a 	add	r3,r9,r3
   2be44:	283feb1e 	bne	r5,zero,2bdf4 <__divdf3+0x100>
   2be48:	61003fcc 	andi	r4,r12,255
   2be4c:	01402004 	movi	r5,128
   2be50:	21400b26 	beq	r4,r5,2be80 <__divdf3+0x18c>
   2be54:	db000815 	stw	r12,32(sp)
   2be58:	db400915 	stw	r13,36(sp)
   2be5c:	003fb406 	br	2bd30 <__divdf3+0x3c>
   2be60:	d8000815 	stw	zero,32(sp)
   2be64:	d8000915 	stw	zero,36(sp)
   2be68:	d8000715 	stw	zero,28(sp)
   2be6c:	d9000504 	addi	r4,sp,20
   2be70:	003fb006 	br	2bd34 <__divdf3+0x40>
   2be74:	d8800515 	stw	r2,20(sp)
   2be78:	d9000504 	addi	r4,sp,20
   2be7c:	003fad06 	br	2bd34 <__divdf3+0x40>
   2be80:	6140400c 	andi	r5,r12,256
   2be84:	283ff31e 	bne	r5,zero,2be54 <__divdf3+0x160>
   2be88:	30c4b03a 	or	r2,r6,r3
   2be8c:	103ff126 	beq	r2,zero,2be54 <__divdf3+0x160>
   2be90:	6109883a 	add	r4,r12,r4
   2be94:	2305803a 	cmpltu	r2,r4,r12
   2be98:	033fc004 	movi	r12,-256
   2be9c:	2318703a 	and	r12,r4,r12
   2bea0:	135b883a 	add	r13,r2,r13
   2bea4:	003feb06 	br	2be54 <__divdf3+0x160>

0002bea8 <__truncdfsf2>:
   2bea8:	defff804 	addi	sp,sp,-32
   2beac:	d9000515 	stw	r4,20(sp)
   2beb0:	d9400615 	stw	r5,24(sp)
   2beb4:	d9000504 	addi	r4,sp,20
   2beb8:	d80b883a 	mov	r5,sp
   2bebc:	dfc00715 	stw	ra,28(sp)
   2bec0:	002c77c0 	call	2c77c <__unpack_d>
   2bec4:	d8800317 	ldw	r2,12(sp)
   2bec8:	d8c00417 	ldw	r3,16(sp)
   2becc:	01100034 	movhi	r4,16384
   2bed0:	213fffc4 	addi	r4,r4,-1
   2bed4:	100ed7ba 	srli	r7,r2,30
   2bed8:	180690ba 	slli	r3,r3,2
   2bedc:	1104703a 	and	r2,r2,r4
   2bee0:	19ceb03a 	or	r7,r3,r7
   2bee4:	10000126 	beq	r2,zero,2beec <__truncdfsf2+0x44>
   2bee8:	39c00054 	ori	r7,r7,1
   2beec:	d9000017 	ldw	r4,0(sp)
   2bef0:	d9400117 	ldw	r5,4(sp)
   2bef4:	d9800217 	ldw	r6,8(sp)
   2bef8:	002c52c0 	call	2c52c <__make_fp>
   2befc:	dfc00717 	ldw	ra,28(sp)
   2bf00:	dec00804 	addi	sp,sp,32
   2bf04:	f800283a 	ret

0002bf08 <__floatunsidf>:
   2bf08:	defff904 	addi	sp,sp,-28
   2bf0c:	dc000515 	stw	r16,20(sp)
   2bf10:	dfc00615 	stw	ra,24(sp)
   2bf14:	d8000115 	stw	zero,4(sp)
   2bf18:	2021883a 	mov	r16,r4
   2bf1c:	20001726 	beq	r4,zero,2bf7c <__floatunsidf+0x74>
   2bf20:	008000c4 	movi	r2,3
   2bf24:	d8800015 	stw	r2,0(sp)
   2bf28:	00800f04 	movi	r2,60
   2bf2c:	d8800215 	stw	r2,8(sp)
   2bf30:	002c28c0 	call	2c28c <__clzsi2>
   2bf34:	10c00744 	addi	r3,r2,29
   2bf38:	18001816 	blt	r3,zero,2bf9c <__floatunsidf+0x94>
   2bf3c:	18002d26 	beq	r3,zero,2bff4 <__floatunsidf+0xec>
   2bf40:	113fff44 	addi	r4,r2,-3
   2bf44:	20002e16 	blt	r4,zero,2c000 <__floatunsidf+0xf8>
   2bf48:	8108983a 	sll	r4,r16,r4
   2bf4c:	0021883a 	mov	r16,zero
   2bf50:	014007c4 	movi	r5,31
   2bf54:	2885c83a 	sub	r2,r5,r2
   2bf58:	dc000315 	stw	r16,12(sp)
   2bf5c:	d9000415 	stw	r4,16(sp)
   2bf60:	d8800215 	stw	r2,8(sp)
   2bf64:	d809883a 	mov	r4,sp
   2bf68:	002c5580 	call	2c558 <__pack_d>
   2bf6c:	dfc00617 	ldw	ra,24(sp)
   2bf70:	dc000517 	ldw	r16,20(sp)
   2bf74:	dec00704 	addi	sp,sp,28
   2bf78:	f800283a 	ret
   2bf7c:	00800084 	movi	r2,2
   2bf80:	d809883a 	mov	r4,sp
   2bf84:	d8800015 	stw	r2,0(sp)
   2bf88:	002c5580 	call	2c558 <__pack_d>
   2bf8c:	dfc00617 	ldw	ra,24(sp)
   2bf90:	dc000517 	ldw	r16,20(sp)
   2bf94:	dec00704 	addi	sp,sp,28
   2bf98:	f800283a 	ret
   2bf9c:	00c7c83a 	sub	r3,zero,r3
   2bfa0:	193ff804 	addi	r4,r3,-32
   2bfa4:	20001c16 	blt	r4,zero,2c018 <__floatunsidf+0x110>
   2bfa8:	000b883a 	mov	r5,zero
   2bfac:	2009d7fa 	srai	r4,r4,31
   2bfb0:	80c6d83a 	srl	r3,r16,r3
   2bfb4:	297fffc4 	addi	r5,r5,-1
   2bfb8:	2c20703a 	and	r16,r5,r16
   2bfbc:	8020c03a 	cmpne	r16,r16,zero
   2bfc0:	1906703a 	and	r3,r3,r4
   2bfc4:	010007c4 	movi	r4,31
   2bfc8:	80c6b03a 	or	r3,r16,r3
   2bfcc:	2085c83a 	sub	r2,r4,r2
   2bfd0:	d809883a 	mov	r4,sp
   2bfd4:	d8c00315 	stw	r3,12(sp)
   2bfd8:	d8000415 	stw	zero,16(sp)
   2bfdc:	d8800215 	stw	r2,8(sp)
   2bfe0:	002c5580 	call	2c558 <__pack_d>
   2bfe4:	dfc00617 	ldw	ra,24(sp)
   2bfe8:	dc000517 	ldw	r16,20(sp)
   2bfec:	dec00704 	addi	sp,sp,28
   2bff0:	f800283a 	ret
   2bff4:	dc000315 	stw	r16,12(sp)
   2bff8:	d8000415 	stw	zero,16(sp)
   2bffc:	003fd906 	br	2bf64 <__floatunsidf+0x5c>
   2c000:	800ad07a 	srli	r5,r16,1
   2c004:	010007c4 	movi	r4,31
   2c008:	20c9c83a 	sub	r4,r4,r3
   2c00c:	2908d83a 	srl	r4,r5,r4
   2c010:	80e0983a 	sll	r16,r16,r3
   2c014:	003fce06 	br	2bf50 <__floatunsidf+0x48>
   2c018:	01400044 	movi	r5,1
   2c01c:	28ca983a 	sll	r5,r5,r3
   2c020:	003fe206 	br	2bfac <__floatunsidf+0xa4>

0002c024 <udivmodsi4>:
   2c024:	2005883a 	mov	r2,r4
   2c028:	2900182e 	bgeu	r5,r4,2c08c <udivmodsi4+0x68>
   2c02c:	28001716 	blt	r5,zero,2c08c <udivmodsi4+0x68>
   2c030:	01000804 	movi	r4,32
   2c034:	00c00044 	movi	r3,1
   2c038:	00000206 	br	2c044 <udivmodsi4+0x20>
   2c03c:	20001126 	beq	r4,zero,2c084 <udivmodsi4+0x60>
   2c040:	28000516 	blt	r5,zero,2c058 <udivmodsi4+0x34>
   2c044:	294b883a 	add	r5,r5,r5
   2c048:	213fffc4 	addi	r4,r4,-1
   2c04c:	18c7883a 	add	r3,r3,r3
   2c050:	28bffa36 	bltu	r5,r2,2c03c <udivmodsi4+0x18>
   2c054:	18000b26 	beq	r3,zero,2c084 <udivmodsi4+0x60>
   2c058:	0009883a 	mov	r4,zero
   2c05c:	11400236 	bltu	r2,r5,2c068 <udivmodsi4+0x44>
   2c060:	1145c83a 	sub	r2,r2,r5
   2c064:	20c8b03a 	or	r4,r4,r3
   2c068:	1806d07a 	srli	r3,r3,1
   2c06c:	280ad07a 	srli	r5,r5,1
   2c070:	183ffa1e 	bne	r3,zero,2c05c <udivmodsi4+0x38>
   2c074:	3000021e 	bne	r6,zero,2c080 <udivmodsi4+0x5c>
   2c078:	2005883a 	mov	r2,r4
   2c07c:	f800283a 	ret
   2c080:	f800283a 	ret
   2c084:	0009883a 	mov	r4,zero
   2c088:	003ffa06 	br	2c074 <udivmodsi4+0x50>
   2c08c:	00c00044 	movi	r3,1
   2c090:	0009883a 	mov	r4,zero
   2c094:	003ff106 	br	2c05c <udivmodsi4+0x38>

0002c098 <__divsi3>:
   2c098:	defffe04 	addi	sp,sp,-8
   2c09c:	dfc00115 	stw	ra,4(sp)
   2c0a0:	dc000015 	stw	r16,0(sp)
   2c0a4:	20000a16 	blt	r4,zero,2c0d0 <__divsi3+0x38>
   2c0a8:	0021883a 	mov	r16,zero
   2c0ac:	28000b16 	blt	r5,zero,2c0dc <__divsi3+0x44>
   2c0b0:	000d883a 	mov	r6,zero
   2c0b4:	002c0240 	call	2c024 <udivmodsi4>
   2c0b8:	80000126 	beq	r16,zero,2c0c0 <__divsi3+0x28>
   2c0bc:	0085c83a 	sub	r2,zero,r2
   2c0c0:	dfc00117 	ldw	ra,4(sp)
   2c0c4:	dc000017 	ldw	r16,0(sp)
   2c0c8:	dec00204 	addi	sp,sp,8
   2c0cc:	f800283a 	ret
   2c0d0:	0109c83a 	sub	r4,zero,r4
   2c0d4:	04000044 	movi	r16,1
   2c0d8:	283ff50e 	bge	r5,zero,2c0b0 <__divsi3+0x18>
   2c0dc:	014bc83a 	sub	r5,zero,r5
   2c0e0:	8400005c 	xori	r16,r16,1
   2c0e4:	003ff206 	br	2c0b0 <__divsi3+0x18>

0002c0e8 <__modsi3>:
   2c0e8:	deffff04 	addi	sp,sp,-4
   2c0ec:	dfc00015 	stw	ra,0(sp)
   2c0f0:	20000516 	blt	r4,zero,2c108 <__modsi3+0x20>
   2c0f4:	28000c16 	blt	r5,zero,2c128 <__modsi3+0x40>
   2c0f8:	01800044 	movi	r6,1
   2c0fc:	dfc00017 	ldw	ra,0(sp)
   2c100:	dec00104 	addi	sp,sp,4
   2c104:	002c0241 	jmpi	2c024 <udivmodsi4>
   2c108:	0109c83a 	sub	r4,zero,r4
   2c10c:	28000b16 	blt	r5,zero,2c13c <__modsi3+0x54>
   2c110:	01800044 	movi	r6,1
   2c114:	002c0240 	call	2c024 <udivmodsi4>
   2c118:	0085c83a 	sub	r2,zero,r2
   2c11c:	dfc00017 	ldw	ra,0(sp)
   2c120:	dec00104 	addi	sp,sp,4
   2c124:	f800283a 	ret
   2c128:	014bc83a 	sub	r5,zero,r5
   2c12c:	01800044 	movi	r6,1
   2c130:	dfc00017 	ldw	ra,0(sp)
   2c134:	dec00104 	addi	sp,sp,4
   2c138:	002c0241 	jmpi	2c024 <udivmodsi4>
   2c13c:	014bc83a 	sub	r5,zero,r5
   2c140:	003ff306 	br	2c110 <__modsi3+0x28>

0002c144 <__udivsi3>:
   2c144:	000d883a 	mov	r6,zero
   2c148:	002c0241 	jmpi	2c024 <udivmodsi4>

0002c14c <__umodsi3>:
   2c14c:	01800044 	movi	r6,1
   2c150:	002c0241 	jmpi	2c024 <udivmodsi4>

0002c154 <__mulsi3>:
   2c154:	0005883a 	mov	r2,zero
   2c158:	20000726 	beq	r4,zero,2c178 <__mulsi3+0x24>
   2c15c:	20c0004c 	andi	r3,r4,1
   2c160:	2008d07a 	srli	r4,r4,1
   2c164:	18000126 	beq	r3,zero,2c16c <__mulsi3+0x18>
   2c168:	1145883a 	add	r2,r2,r5
   2c16c:	294b883a 	add	r5,r5,r5
   2c170:	203ffa1e 	bne	r4,zero,2c15c <__mulsi3+0x8>
   2c174:	f800283a 	ret
   2c178:	f800283a 	ret

0002c17c <__muldi3>:
   2c17c:	defff604 	addi	sp,sp,-40
   2c180:	dd400515 	stw	r21,20(sp)
   2c184:	dd000415 	stw	r20,16(sp)
   2c188:	257fffcc 	andi	r21,r4,65535
   2c18c:	353fffcc 	andi	r20,r6,65535
   2c190:	dcc00315 	stw	r19,12(sp)
   2c194:	3026d43a 	srli	r19,r6,16
   2c198:	dd800615 	stw	r22,24(sp)
   2c19c:	dc800215 	stw	r18,8(sp)
   2c1a0:	dc400115 	stw	r17,4(sp)
   2c1a4:	2024d43a 	srli	r18,r4,16
   2c1a8:	2023883a 	mov	r17,r4
   2c1ac:	282d883a 	mov	r22,r5
   2c1b0:	a009883a 	mov	r4,r20
   2c1b4:	a80b883a 	mov	r5,r21
   2c1b8:	dfc00915 	stw	ra,36(sp)
   2c1bc:	df000815 	stw	fp,32(sp)
   2c1c0:	ddc00715 	stw	r23,28(sp)
   2c1c4:	3839883a 	mov	fp,r7
   2c1c8:	dc000015 	stw	r16,0(sp)
   2c1cc:	3021883a 	mov	r16,r6
   2c1d0:	002c1540 	call	2c154 <__mulsi3>
   2c1d4:	a80b883a 	mov	r5,r21
   2c1d8:	9809883a 	mov	r4,r19
   2c1dc:	102f883a 	mov	r23,r2
   2c1e0:	002c1540 	call	2c154 <__mulsi3>
   2c1e4:	a009883a 	mov	r4,r20
   2c1e8:	900b883a 	mov	r5,r18
   2c1ec:	102b883a 	mov	r21,r2
   2c1f0:	002c1540 	call	2c154 <__mulsi3>
   2c1f4:	9809883a 	mov	r4,r19
   2c1f8:	900b883a 	mov	r5,r18
   2c1fc:	1029883a 	mov	r20,r2
   2c200:	002c1540 	call	2c154 <__mulsi3>
   2c204:	1007883a 	mov	r3,r2
   2c208:	b804d43a 	srli	r2,r23,16
   2c20c:	a549883a 	add	r4,r20,r21
   2c210:	2089883a 	add	r4,r4,r2
   2c214:	2500022e 	bgeu	r4,r20,2c220 <__muldi3+0xa4>
   2c218:	00800074 	movhi	r2,1
   2c21c:	1887883a 	add	r3,r3,r2
   2c220:	200cd43a 	srli	r6,r4,16
   2c224:	2004943a 	slli	r2,r4,16
   2c228:	e00b883a 	mov	r5,fp
   2c22c:	8809883a 	mov	r4,r17
   2c230:	bdffffcc 	andi	r23,r23,65535
   2c234:	19a3883a 	add	r17,r3,r6
   2c238:	15ef883a 	add	r23,r2,r23
   2c23c:	002c1540 	call	2c154 <__mulsi3>
   2c240:	8009883a 	mov	r4,r16
   2c244:	b00b883a 	mov	r5,r22
   2c248:	1025883a 	mov	r18,r2
   2c24c:	002c1540 	call	2c154 <__mulsi3>
   2c250:	9085883a 	add	r2,r18,r2
   2c254:	1447883a 	add	r3,r2,r17
   2c258:	b805883a 	mov	r2,r23
   2c25c:	dfc00917 	ldw	ra,36(sp)
   2c260:	df000817 	ldw	fp,32(sp)
   2c264:	ddc00717 	ldw	r23,28(sp)
   2c268:	dd800617 	ldw	r22,24(sp)
   2c26c:	dd400517 	ldw	r21,20(sp)
   2c270:	dd000417 	ldw	r20,16(sp)
   2c274:	dcc00317 	ldw	r19,12(sp)
   2c278:	dc800217 	ldw	r18,8(sp)
   2c27c:	dc400117 	ldw	r17,4(sp)
   2c280:	dc000017 	ldw	r16,0(sp)
   2c284:	dec00a04 	addi	sp,sp,40
   2c288:	f800283a 	ret

0002c28c <__clzsi2>:
   2c28c:	00bfffd4 	movui	r2,65535
   2c290:	11000b36 	bltu	r2,r4,2c2c0 <__clzsi2+0x34>
   2c294:	00803fc4 	movi	r2,255
   2c298:	11001e2e 	bgeu	r2,r4,2c314 <__clzsi2+0x88>
   2c29c:	00c00204 	movi	r3,8
   2c2a0:	20c8d83a 	srl	r4,r4,r3
   2c2a4:	00c00134 	movhi	r3,4
   2c2a8:	18c38304 	addi	r3,r3,3596
   2c2ac:	00800604 	movi	r2,24
   2c2b0:	1909883a 	add	r4,r3,r4
   2c2b4:	20c00003 	ldbu	r3,0(r4)
   2c2b8:	10c5c83a 	sub	r2,r2,r3
   2c2bc:	f800283a 	ret
   2c2c0:	00804034 	movhi	r2,256
   2c2c4:	10bfffc4 	addi	r2,r2,-1
   2c2c8:	11000936 	bltu	r2,r4,2c2f0 <__clzsi2+0x64>
   2c2cc:	00800404 	movi	r2,16
   2c2d0:	1007883a 	mov	r3,r2
   2c2d4:	20c8d83a 	srl	r4,r4,r3
   2c2d8:	00c00134 	movhi	r3,4
   2c2dc:	18c38304 	addi	r3,r3,3596
   2c2e0:	1909883a 	add	r4,r3,r4
   2c2e4:	20c00003 	ldbu	r3,0(r4)
   2c2e8:	10c5c83a 	sub	r2,r2,r3
   2c2ec:	f800283a 	ret
   2c2f0:	00c00604 	movi	r3,24
   2c2f4:	20c8d83a 	srl	r4,r4,r3
   2c2f8:	00c00134 	movhi	r3,4
   2c2fc:	18c38304 	addi	r3,r3,3596
   2c300:	00800204 	movi	r2,8
   2c304:	1909883a 	add	r4,r3,r4
   2c308:	20c00003 	ldbu	r3,0(r4)
   2c30c:	10c5c83a 	sub	r2,r2,r3
   2c310:	f800283a 	ret
   2c314:	0007883a 	mov	r3,zero
   2c318:	20c8d83a 	srl	r4,r4,r3
   2c31c:	00c00134 	movhi	r3,4
   2c320:	18c38304 	addi	r3,r3,3596
   2c324:	00800804 	movi	r2,32
   2c328:	1909883a 	add	r4,r3,r4
   2c32c:	20c00003 	ldbu	r3,0(r4)
   2c330:	10c5c83a 	sub	r2,r2,r3
   2c334:	f800283a 	ret

0002c338 <__pack_f>:
   2c338:	21400017 	ldw	r5,0(r4)
   2c33c:	01800044 	movi	r6,1
   2c340:	20c00317 	ldw	r3,12(r4)
   2c344:	21c00117 	ldw	r7,4(r4)
   2c348:	3140282e 	bgeu	r6,r5,2c3ec <__pack_f+0xb4>
   2c34c:	00800104 	movi	r2,4
   2c350:	28802326 	beq	r5,r2,2c3e0 <__pack_f+0xa8>
   2c354:	00800084 	movi	r2,2
   2c358:	28800f26 	beq	r5,r2,2c398 <__pack_f+0x60>
   2c35c:	18000e26 	beq	r3,zero,2c398 <__pack_f+0x60>
   2c360:	21000217 	ldw	r4,8(r4)
   2c364:	00bfe084 	movi	r2,-126
   2c368:	20802616 	blt	r4,r2,2c404 <__pack_f+0xcc>
   2c36c:	00801fc4 	movi	r2,127
   2c370:	11001b16 	blt	r2,r4,2c3e0 <__pack_f+0xa8>
   2c374:	188a703a 	and	r5,r3,r2
   2c378:	00801004 	movi	r2,64
   2c37c:	28801126 	beq	r5,r2,2c3c4 <__pack_f+0x8c>
   2c380:	18c00fc4 	addi	r3,r3,63
   2c384:	18001316 	blt	r3,zero,2c3d4 <__pack_f+0x9c>
   2c388:	21001fc4 	addi	r4,r4,127
   2c38c:	180690ba 	slli	r3,r3,2
   2c390:	1806d27a 	srli	r3,r3,9
   2c394:	00000206 	br	2c3a0 <__pack_f+0x68>
   2c398:	0009883a 	mov	r4,zero
   2c39c:	0007883a 	mov	r3,zero
   2c3a0:	21003fcc 	andi	r4,r4,255
   2c3a4:	200895fa 	slli	r4,r4,23
   2c3a8:	380a97fa 	slli	r5,r7,31
   2c3ac:	00802034 	movhi	r2,128
   2c3b0:	10bfffc4 	addi	r2,r2,-1
   2c3b4:	1886703a 	and	r3,r3,r2
   2c3b8:	1904b03a 	or	r2,r3,r4
   2c3bc:	1144b03a 	or	r2,r2,r5
   2c3c0:	f800283a 	ret
   2c3c4:	1880200c 	andi	r2,r3,128
   2c3c8:	103fee26 	beq	r2,zero,2c384 <__pack_f+0x4c>
   2c3cc:	18c01004 	addi	r3,r3,64
   2c3d0:	183fed0e 	bge	r3,zero,2c388 <__pack_f+0x50>
   2c3d4:	1806d07a 	srli	r3,r3,1
   2c3d8:	21002004 	addi	r4,r4,128
   2c3dc:	003feb06 	br	2c38c <__pack_f+0x54>
   2c3e0:	013fffc4 	movi	r4,-1
   2c3e4:	0007883a 	mov	r3,zero
   2c3e8:	003fed06 	br	2c3a0 <__pack_f+0x68>
   2c3ec:	18c00434 	orhi	r3,r3,16
   2c3f0:	00802034 	movhi	r2,128
   2c3f4:	10bfffc4 	addi	r2,r2,-1
   2c3f8:	1886703a 	and	r3,r3,r2
   2c3fc:	013fffc4 	movi	r4,-1
   2c400:	003fe706 	br	2c3a0 <__pack_f+0x68>
   2c404:	1105c83a 	sub	r2,r2,r4
   2c408:	01000644 	movi	r4,25
   2c40c:	20801216 	blt	r4,r2,2c458 <__pack_f+0x120>
   2c410:	3088983a 	sll	r4,r6,r2
   2c414:	1884d83a 	srl	r2,r3,r2
   2c418:	213fffc4 	addi	r4,r4,-1
   2c41c:	20c6703a 	and	r3,r4,r3
   2c420:	1806c03a 	cmpne	r3,r3,zero
   2c424:	1884b03a 	or	r2,r3,r2
   2c428:	11001fcc 	andi	r4,r2,127
   2c42c:	00c01004 	movi	r3,64
   2c430:	20c00a1e 	bne	r4,r3,2c45c <__pack_f+0x124>
   2c434:	10c0200c 	andi	r3,r2,128
   2c438:	18000126 	beq	r3,zero,2c440 <__pack_f+0x108>
   2c43c:	10801004 	addi	r2,r2,64
   2c440:	100690ba 	slli	r3,r2,2
   2c444:	01100034 	movhi	r4,16384
   2c448:	1105403a 	cmpgeu	r2,r2,r4
   2c44c:	1806d27a 	srli	r3,r3,9
   2c450:	1009883a 	mov	r4,r2
   2c454:	003fd206 	br	2c3a0 <__pack_f+0x68>
   2c458:	0005883a 	mov	r2,zero
   2c45c:	10800fc4 	addi	r2,r2,63
   2c460:	003ff706 	br	2c440 <__pack_f+0x108>

0002c464 <__unpack_f>:
   2c464:	20c00017 	ldw	r3,0(r4)
   2c468:	00802034 	movhi	r2,128
   2c46c:	10bfffc4 	addi	r2,r2,-1
   2c470:	1808d5fa 	srli	r4,r3,23
   2c474:	180cd7fa 	srli	r6,r3,31
   2c478:	1884703a 	and	r2,r3,r2
   2c47c:	21003fcc 	andi	r4,r4,255
   2c480:	29800115 	stw	r6,4(r5)
   2c484:	2000111e 	bne	r4,zero,2c4cc <__unpack_f+0x68>
   2c488:	10001a26 	beq	r2,zero,2c4f4 <__unpack_f+0x90>
   2c48c:	00ffe084 	movi	r3,-126
   2c490:	100491fa 	slli	r2,r2,7
   2c494:	28c00215 	stw	r3,8(r5)
   2c498:	00c000c4 	movi	r3,3
   2c49c:	28c00015 	stw	r3,0(r5)
   2c4a0:	01900034 	movhi	r6,16384
   2c4a4:	31bfffc4 	addi	r6,r6,-1
   2c4a8:	30801036 	bltu	r6,r2,2c4ec <__unpack_f+0x88>
   2c4ac:	00ffe044 	movi	r3,-127
   2c4b0:	1085883a 	add	r2,r2,r2
   2c4b4:	1809883a 	mov	r4,r3
   2c4b8:	18ffffc4 	addi	r3,r3,-1
   2c4bc:	30bffc2e 	bgeu	r6,r2,2c4b0 <__unpack_f+0x4c>
   2c4c0:	29000215 	stw	r4,8(r5)
   2c4c4:	28800315 	stw	r2,12(r5)
   2c4c8:	f800283a 	ret
   2c4cc:	01803fc4 	movi	r6,255
   2c4d0:	21800b26 	beq	r4,r6,2c500 <__unpack_f+0x9c>
   2c4d4:	100491fa 	slli	r2,r2,7
   2c4d8:	213fe044 	addi	r4,r4,-127
   2c4dc:	00c000c4 	movi	r3,3
   2c4e0:	10900034 	orhi	r2,r2,16384
   2c4e4:	29000215 	stw	r4,8(r5)
   2c4e8:	28c00015 	stw	r3,0(r5)
   2c4ec:	28800315 	stw	r2,12(r5)
   2c4f0:	f800283a 	ret
   2c4f4:	00800084 	movi	r2,2
   2c4f8:	28800015 	stw	r2,0(r5)
   2c4fc:	f800283a 	ret
   2c500:	10000526 	beq	r2,zero,2c518 <__unpack_f+0xb4>
   2c504:	18c0042c 	andhi	r3,r3,16
   2c508:	18000626 	beq	r3,zero,2c524 <__unpack_f+0xc0>
   2c50c:	00c00044 	movi	r3,1
   2c510:	28c00015 	stw	r3,0(r5)
   2c514:	003ff506 	br	2c4ec <__unpack_f+0x88>
   2c518:	00800104 	movi	r2,4
   2c51c:	28800015 	stw	r2,0(r5)
   2c520:	f800283a 	ret
   2c524:	28000015 	stw	zero,0(r5)
   2c528:	003ff006 	br	2c4ec <__unpack_f+0x88>

0002c52c <__make_fp>:
   2c52c:	defffb04 	addi	sp,sp,-20
   2c530:	d9000015 	stw	r4,0(sp)
   2c534:	d809883a 	mov	r4,sp
   2c538:	dfc00415 	stw	ra,16(sp)
   2c53c:	d9400115 	stw	r5,4(sp)
   2c540:	d9800215 	stw	r6,8(sp)
   2c544:	d9c00315 	stw	r7,12(sp)
   2c548:	002c3380 	call	2c338 <__pack_f>
   2c54c:	dfc00417 	ldw	ra,16(sp)
   2c550:	dec00504 	addi	sp,sp,20
   2c554:	f800283a 	ret

0002c558 <__pack_d>:
   2c558:	20800017 	ldw	r2,0(r4)
   2c55c:	defff804 	addi	sp,sp,-32
   2c560:	dcc00315 	stw	r19,12(sp)
   2c564:	dc800215 	stw	r18,8(sp)
   2c568:	dfc00715 	stw	ra,28(sp)
   2c56c:	dd800615 	stw	r22,24(sp)
   2c570:	dd400515 	stw	r21,20(sp)
   2c574:	dd000415 	stw	r20,16(sp)
   2c578:	dc400115 	stw	r17,4(sp)
   2c57c:	dc000015 	stw	r16,0(sp)
   2c580:	04800044 	movi	r18,1
   2c584:	24400317 	ldw	r17,12(r4)
   2c588:	24000417 	ldw	r16,16(r4)
   2c58c:	24c00117 	ldw	r19,4(r4)
   2c590:	9080422e 	bgeu	r18,r2,2c69c <__pack_d+0x144>
   2c594:	00c00104 	movi	r3,4
   2c598:	10c03c26 	beq	r2,r3,2c68c <__pack_d+0x134>
   2c59c:	00c00084 	movi	r3,2
   2c5a0:	10c01926 	beq	r2,r3,2c608 <__pack_d+0xb0>
   2c5a4:	8c04b03a 	or	r2,r17,r16
   2c5a8:	10001726 	beq	r2,zero,2c608 <__pack_d+0xb0>
   2c5ac:	21000217 	ldw	r4,8(r4)
   2c5b0:	00bf0084 	movi	r2,-1022
   2c5b4:	20804016 	blt	r4,r2,2c6b8 <__pack_d+0x160>
   2c5b8:	0080ffc4 	movi	r2,1023
   2c5bc:	11003316 	blt	r2,r4,2c68c <__pack_d+0x134>
   2c5c0:	88803fcc 	andi	r2,r17,255
   2c5c4:	00c02004 	movi	r3,128
   2c5c8:	10c02926 	beq	r2,r3,2c670 <__pack_d+0x118>
   2c5cc:	88801fc4 	addi	r2,r17,127
   2c5d0:	1463803a 	cmpltu	r17,r2,r17
   2c5d4:	8c21883a 	add	r16,r17,r16
   2c5d8:	1023883a 	mov	r17,r2
   2c5dc:	00880034 	movhi	r2,8192
   2c5e0:	10bfffc4 	addi	r2,r2,-1
   2c5e4:	14001c36 	bltu	r2,r16,2c658 <__pack_d+0x100>
   2c5e8:	2100ffc4 	addi	r4,r4,1023
   2c5ec:	8006963a 	slli	r3,r16,24
   2c5f0:	8804d23a 	srli	r2,r17,8
   2c5f4:	8020913a 	slli	r16,r16,4
   2c5f8:	2101ffcc 	andi	r4,r4,2047
   2c5fc:	1884b03a 	or	r2,r3,r2
   2c600:	8020d33a 	srli	r16,r16,12
   2c604:	00000306 	br	2c614 <__pack_d+0xbc>
   2c608:	0009883a 	mov	r4,zero
   2c60c:	0005883a 	mov	r2,zero
   2c610:	0021883a 	mov	r16,zero
   2c614:	2008953a 	slli	r4,r4,20
   2c618:	982697fa 	slli	r19,r19,31
   2c61c:	00c00434 	movhi	r3,16
   2c620:	18ffffc4 	addi	r3,r3,-1
   2c624:	80e0703a 	and	r16,r16,r3
   2c628:	8106b03a 	or	r3,r16,r4
   2c62c:	1cc6b03a 	or	r3,r3,r19
   2c630:	dfc00717 	ldw	ra,28(sp)
   2c634:	dd800617 	ldw	r22,24(sp)
   2c638:	dd400517 	ldw	r21,20(sp)
   2c63c:	dd000417 	ldw	r20,16(sp)
   2c640:	dcc00317 	ldw	r19,12(sp)
   2c644:	dc800217 	ldw	r18,8(sp)
   2c648:	dc400117 	ldw	r17,4(sp)
   2c64c:	dc000017 	ldw	r16,0(sp)
   2c650:	dec00804 	addi	sp,sp,32
   2c654:	f800283a 	ret
   2c658:	800697fa 	slli	r3,r16,31
   2c65c:	8804d07a 	srli	r2,r17,1
   2c660:	21010004 	addi	r4,r4,1024
   2c664:	8020d07a 	srli	r16,r16,1
   2c668:	18a2b03a 	or	r17,r3,r2
   2c66c:	003fdf06 	br	2c5ec <__pack_d+0x94>
   2c670:	88c0400c 	andi	r3,r17,256
   2c674:	183fd926 	beq	r3,zero,2c5dc <__pack_d+0x84>
   2c678:	8885883a 	add	r2,r17,r2
   2c67c:	1463803a 	cmpltu	r17,r2,r17
   2c680:	8c21883a 	add	r16,r17,r16
   2c684:	1023883a 	mov	r17,r2
   2c688:	003fd406 	br	2c5dc <__pack_d+0x84>
   2c68c:	0101ffc4 	movi	r4,2047
   2c690:	0005883a 	mov	r2,zero
   2c694:	0021883a 	mov	r16,zero
   2c698:	003fde06 	br	2c614 <__pack_d+0xbc>
   2c69c:	84000234 	orhi	r16,r16,8
   2c6a0:	00c00434 	movhi	r3,16
   2c6a4:	18ffffc4 	addi	r3,r3,-1
   2c6a8:	8805883a 	mov	r2,r17
   2c6ac:	80e0703a 	and	r16,r16,r3
   2c6b0:	0101ffc4 	movi	r4,2047
   2c6b4:	003fd706 	br	2c614 <__pack_d+0xbc>
   2c6b8:	1129c83a 	sub	r20,r2,r4
   2c6bc:	00800e04 	movi	r2,56
   2c6c0:	15002716 	blt	r2,r20,2c760 <__pack_d+0x208>
   2c6c4:	800b883a 	mov	r5,r16
   2c6c8:	a00d883a 	mov	r6,r20
   2c6cc:	8809883a 	mov	r4,r17
   2c6d0:	002c8800 	call	2c880 <__lshrdi3>
   2c6d4:	9009883a 	mov	r4,r18
   2c6d8:	000b883a 	mov	r5,zero
   2c6dc:	a00d883a 	mov	r6,r20
   2c6e0:	102d883a 	mov	r22,r2
   2c6e4:	182b883a 	mov	r21,r3
   2c6e8:	002c8c40 	call	2c8c4 <__ashldi3>
   2c6ec:	1009003a 	cmpeq	r4,r2,zero
   2c6f0:	1907c83a 	sub	r3,r3,r4
   2c6f4:	10bfffc4 	addi	r2,r2,-1
   2c6f8:	1c20703a 	and	r16,r3,r16
   2c6fc:	1444703a 	and	r2,r2,r17
   2c700:	1404b03a 	or	r2,r2,r16
   2c704:	1004c03a 	cmpne	r2,r2,zero
   2c708:	1584b03a 	or	r2,r2,r22
   2c70c:	11003fcc 	andi	r4,r2,255
   2c710:	01402004 	movi	r5,128
   2c714:	a807883a 	mov	r3,r21
   2c718:	2140131e 	bne	r4,r5,2c768 <__pack_d+0x210>
   2c71c:	1140400c 	andi	r5,r2,256
   2c720:	28000426 	beq	r5,zero,2c734 <__pack_d+0x1dc>
   2c724:	1109883a 	add	r4,r2,r4
   2c728:	2085803a 	cmpltu	r2,r4,r2
   2c72c:	1547883a 	add	r3,r2,r21
   2c730:	2005883a 	mov	r2,r4
   2c734:	1808963a 	slli	r4,r3,24
   2c738:	1004d23a 	srli	r2,r2,8
   2c73c:	1820913a 	slli	r16,r3,4
   2c740:	01440034 	movhi	r5,4096
   2c744:	297fffc4 	addi	r5,r5,-1
   2c748:	2084b03a 	or	r2,r4,r2
   2c74c:	8020d33a 	srli	r16,r16,12
   2c750:	01000044 	movi	r4,1
   2c754:	28ffaf36 	bltu	r5,r3,2c614 <__pack_d+0xbc>
   2c758:	0009883a 	mov	r4,zero
   2c75c:	003fad06 	br	2c614 <__pack_d+0xbc>
   2c760:	0005883a 	mov	r2,zero
   2c764:	0007883a 	mov	r3,zero
   2c768:	11001fc4 	addi	r4,r2,127
   2c76c:	2085803a 	cmpltu	r2,r4,r2
   2c770:	10c7883a 	add	r3,r2,r3
   2c774:	2005883a 	mov	r2,r4
   2c778:	003fee06 	br	2c734 <__pack_d+0x1dc>

0002c77c <__unpack_d>:
   2c77c:	21800117 	ldw	r6,4(r4)
   2c780:	20c00017 	ldw	r3,0(r4)
   2c784:	3004d7fa 	srli	r2,r6,31
   2c788:	3008d53a 	srli	r4,r6,20
   2c78c:	28800115 	stw	r2,4(r5)
   2c790:	2101ffcc 	andi	r4,r4,2047
   2c794:	00800434 	movhi	r2,16
   2c798:	10bfffc4 	addi	r2,r2,-1
   2c79c:	3084703a 	and	r2,r6,r2
   2c7a0:	20001a1e 	bne	r4,zero,2c80c <__unpack_d+0x90>
   2c7a4:	1888b03a 	or	r4,r3,r2
   2c7a8:	20002626 	beq	r4,zero,2c844 <__unpack_d+0xc8>
   2c7ac:	1808d63a 	srli	r4,r3,24
   2c7b0:	1004923a 	slli	r2,r2,8
   2c7b4:	01bf0084 	movi	r6,-1022
   2c7b8:	29800215 	stw	r6,8(r5)
   2c7bc:	2084b03a 	or	r2,r4,r2
   2c7c0:	010000c4 	movi	r4,3
   2c7c4:	29000015 	stw	r4,0(r5)
   2c7c8:	02040034 	movhi	r8,4096
   2c7cc:	423fffc4 	addi	r8,r8,-1
   2c7d0:	1806923a 	slli	r3,r3,8
   2c7d4:	40801836 	bltu	r8,r2,2c838 <__unpack_d+0xbc>
   2c7d8:	013f0044 	movi	r4,-1023
   2c7dc:	18cd883a 	add	r6,r3,r3
   2c7e0:	30c7803a 	cmpltu	r3,r6,r3
   2c7e4:	1085883a 	add	r2,r2,r2
   2c7e8:	1885883a 	add	r2,r3,r2
   2c7ec:	200f883a 	mov	r7,r4
   2c7f0:	3007883a 	mov	r3,r6
   2c7f4:	213fffc4 	addi	r4,r4,-1
   2c7f8:	40bff82e 	bgeu	r8,r2,2c7dc <__unpack_d+0x60>
   2c7fc:	29c00215 	stw	r7,8(r5)
   2c800:	28c00315 	stw	r3,12(r5)
   2c804:	28800415 	stw	r2,16(r5)
   2c808:	f800283a 	ret
   2c80c:	01c1ffc4 	movi	r7,2047
   2c810:	21c00f26 	beq	r4,r7,2c850 <__unpack_d+0xd4>
   2c814:	180cd63a 	srli	r6,r3,24
   2c818:	1004923a 	slli	r2,r2,8
   2c81c:	213f0044 	addi	r4,r4,-1023
   2c820:	1806923a 	slli	r3,r3,8
   2c824:	3084b03a 	or	r2,r6,r2
   2c828:	29000215 	stw	r4,8(r5)
   2c82c:	010000c4 	movi	r4,3
   2c830:	10840034 	orhi	r2,r2,4096
   2c834:	29000015 	stw	r4,0(r5)
   2c838:	28c00315 	stw	r3,12(r5)
   2c83c:	28800415 	stw	r2,16(r5)
   2c840:	f800283a 	ret
   2c844:	00800084 	movi	r2,2
   2c848:	28800015 	stw	r2,0(r5)
   2c84c:	f800283a 	ret
   2c850:	1888b03a 	or	r4,r3,r2
   2c854:	20000526 	beq	r4,zero,2c86c <__unpack_d+0xf0>
   2c858:	3180022c 	andhi	r6,r6,8
   2c85c:	30000626 	beq	r6,zero,2c878 <__unpack_d+0xfc>
   2c860:	01000044 	movi	r4,1
   2c864:	29000015 	stw	r4,0(r5)
   2c868:	003ff306 	br	2c838 <__unpack_d+0xbc>
   2c86c:	00800104 	movi	r2,4
   2c870:	28800015 	stw	r2,0(r5)
   2c874:	f800283a 	ret
   2c878:	28000015 	stw	zero,0(r5)
   2c87c:	003fee06 	br	2c838 <__unpack_d+0xbc>

0002c880 <__lshrdi3>:
   2c880:	2005883a 	mov	r2,r4
   2c884:	2807883a 	mov	r3,r5
   2c888:	30000826 	beq	r6,zero,2c8ac <__lshrdi3+0x2c>
   2c88c:	01000804 	movi	r4,32
   2c890:	2189c83a 	sub	r4,r4,r6
   2c894:	0100060e 	bge	zero,r4,2c8b0 <__lshrdi3+0x30>
   2c898:	1184d83a 	srl	r2,r2,r6
   2c89c:	2908983a 	sll	r4,r5,r4
   2c8a0:	298cd83a 	srl	r6,r5,r6
   2c8a4:	2084b03a 	or	r2,r4,r2
   2c8a8:	3007883a 	mov	r3,r6
   2c8ac:	f800283a 	ret
   2c8b0:	0105c83a 	sub	r2,zero,r4
   2c8b4:	000d883a 	mov	r6,zero
   2c8b8:	2884d83a 	srl	r2,r5,r2
   2c8bc:	3007883a 	mov	r3,r6
   2c8c0:	003ffa06 	br	2c8ac <__lshrdi3+0x2c>

0002c8c4 <__ashldi3>:
   2c8c4:	2005883a 	mov	r2,r4
   2c8c8:	2807883a 	mov	r3,r5
   2c8cc:	30000826 	beq	r6,zero,2c8f0 <__ashldi3+0x2c>
   2c8d0:	01000804 	movi	r4,32
   2c8d4:	2189c83a 	sub	r4,r4,r6
   2c8d8:	0100060e 	bge	zero,r4,2c8f4 <__ashldi3+0x30>
   2c8dc:	1108d83a 	srl	r4,r2,r4
   2c8e0:	2986983a 	sll	r3,r5,r6
   2c8e4:	118c983a 	sll	r6,r2,r6
   2c8e8:	20c6b03a 	or	r3,r4,r3
   2c8ec:	3005883a 	mov	r2,r6
   2c8f0:	f800283a 	ret
   2c8f4:	0107c83a 	sub	r3,zero,r4
   2c8f8:	000d883a 	mov	r6,zero
   2c8fc:	10c6983a 	sll	r3,r2,r3
   2c900:	3005883a 	mov	r2,r6
   2c904:	003ffa06 	br	2c8f0 <__ashldi3+0x2c>

0002c908 <exit>:
   2c908:	defffe04 	addi	sp,sp,-8
   2c90c:	000b883a 	mov	r5,zero
   2c910:	dc000015 	stw	r16,0(sp)
   2c914:	dfc00115 	stw	ra,4(sp)
   2c918:	2021883a 	mov	r16,r4
   2c91c:	003345c0 	call	3345c <__call_exitprocs>
   2c920:	00800134 	movhi	r2,4
   2c924:	108bb204 	addi	r2,r2,11976
   2c928:	11000017 	ldw	r4,0(r2)
   2c92c:	20800f17 	ldw	r2,60(r4)
   2c930:	10000126 	beq	r2,zero,2c938 <exit+0x30>
   2c934:	103ee83a 	callr	r2
   2c938:	8009883a 	mov	r4,r16
   2c93c:	003be140 	call	3be14 <_exit>

0002c940 <_fclose_r>:
   2c940:	defffc04 	addi	sp,sp,-16
   2c944:	dc400115 	stw	r17,4(sp)
   2c948:	dc000015 	stw	r16,0(sp)
   2c94c:	dfc00315 	stw	ra,12(sp)
   2c950:	dc800215 	stw	r18,8(sp)
   2c954:	2821883a 	mov	r16,r5
   2c958:	2023883a 	mov	r17,r4
   2c95c:	28003426 	beq	r5,zero,2ca30 <_fclose_r+0xf0>
   2c960:	002cf540 	call	2cf54 <__sfp_lock_acquire>
   2c964:	88000226 	beq	r17,zero,2c970 <_fclose_r+0x30>
   2c968:	88800e17 	ldw	r2,56(r17)
   2c96c:	10003826 	beq	r2,zero,2ca50 <_fclose_r+0x110>
   2c970:	8080030f 	ldh	r2,12(r16)
   2c974:	10002526 	beq	r2,zero,2ca0c <_fclose_r+0xcc>
   2c978:	8809883a 	mov	r4,r17
   2c97c:	800b883a 	mov	r5,r16
   2c980:	002ca900 	call	2ca90 <_fflush_r>
   2c984:	1025883a 	mov	r18,r2
   2c988:	80800b17 	ldw	r2,44(r16)
   2c98c:	10000426 	beq	r2,zero,2c9a0 <_fclose_r+0x60>
   2c990:	81400717 	ldw	r5,28(r16)
   2c994:	8809883a 	mov	r4,r17
   2c998:	103ee83a 	callr	r2
   2c99c:	10003516 	blt	r2,zero,2ca74 <_fclose_r+0x134>
   2c9a0:	8080030b 	ldhu	r2,12(r16)
   2c9a4:	1080200c 	andi	r2,r2,128
   2c9a8:	10bfffcc 	andi	r2,r2,65535
   2c9ac:	10a0001c 	xori	r2,r2,32768
   2c9b0:	10a00004 	addi	r2,r2,-32768
   2c9b4:	10002b1e 	bne	r2,zero,2ca64 <_fclose_r+0x124>
   2c9b8:	81400c17 	ldw	r5,48(r16)
   2c9bc:	28000526 	beq	r5,zero,2c9d4 <_fclose_r+0x94>
   2c9c0:	80801004 	addi	r2,r16,64
   2c9c4:	28800226 	beq	r5,r2,2c9d0 <_fclose_r+0x90>
   2c9c8:	8809883a 	mov	r4,r17
   2c9cc:	002d4e40 	call	2d4e4 <_free_r>
   2c9d0:	80000c15 	stw	zero,48(r16)
   2c9d4:	81401117 	ldw	r5,68(r16)
   2c9d8:	28000326 	beq	r5,zero,2c9e8 <_fclose_r+0xa8>
   2c9dc:	8809883a 	mov	r4,r17
   2c9e0:	002d4e40 	call	2d4e4 <_free_r>
   2c9e4:	80001115 	stw	zero,68(r16)
   2c9e8:	8000030d 	sth	zero,12(r16)
   2c9ec:	002cf580 	call	2cf58 <__sfp_lock_release>
   2c9f0:	9005883a 	mov	r2,r18
   2c9f4:	dfc00317 	ldw	ra,12(sp)
   2c9f8:	dc800217 	ldw	r18,8(sp)
   2c9fc:	dc400117 	ldw	r17,4(sp)
   2ca00:	dc000017 	ldw	r16,0(sp)
   2ca04:	dec00404 	addi	sp,sp,16
   2ca08:	f800283a 	ret
   2ca0c:	002cf580 	call	2cf58 <__sfp_lock_release>
   2ca10:	0025883a 	mov	r18,zero
   2ca14:	9005883a 	mov	r2,r18
   2ca18:	dfc00317 	ldw	ra,12(sp)
   2ca1c:	dc800217 	ldw	r18,8(sp)
   2ca20:	dc400117 	ldw	r17,4(sp)
   2ca24:	dc000017 	ldw	r16,0(sp)
   2ca28:	dec00404 	addi	sp,sp,16
   2ca2c:	f800283a 	ret
   2ca30:	0025883a 	mov	r18,zero
   2ca34:	9005883a 	mov	r2,r18
   2ca38:	dfc00317 	ldw	ra,12(sp)
   2ca3c:	dc800217 	ldw	r18,8(sp)
   2ca40:	dc400117 	ldw	r17,4(sp)
   2ca44:	dc000017 	ldw	r16,0(sp)
   2ca48:	dec00404 	addi	sp,sp,16
   2ca4c:	f800283a 	ret
   2ca50:	8809883a 	mov	r4,r17
   2ca54:	002cd4c0 	call	2cd4c <__sinit>
   2ca58:	8080030f 	ldh	r2,12(r16)
   2ca5c:	103fc61e 	bne	r2,zero,2c978 <_fclose_r+0x38>
   2ca60:	003fea06 	br	2ca0c <_fclose_r+0xcc>
   2ca64:	81400417 	ldw	r5,16(r16)
   2ca68:	8809883a 	mov	r4,r17
   2ca6c:	002d4e40 	call	2d4e4 <_free_r>
   2ca70:	003fd106 	br	2c9b8 <_fclose_r+0x78>
   2ca74:	04bfffc4 	movi	r18,-1
   2ca78:	003fc906 	br	2c9a0 <_fclose_r+0x60>

0002ca7c <fclose>:
   2ca7c:	00800134 	movhi	r2,4
   2ca80:	108bb304 	addi	r2,r2,11980
   2ca84:	200b883a 	mov	r5,r4
   2ca88:	11000017 	ldw	r4,0(r2)
   2ca8c:	002c9401 	jmpi	2c940 <_fclose_r>

0002ca90 <_fflush_r>:
   2ca90:	defffb04 	addi	sp,sp,-20
   2ca94:	dcc00315 	stw	r19,12(sp)
   2ca98:	dc400115 	stw	r17,4(sp)
   2ca9c:	dfc00415 	stw	ra,16(sp)
   2caa0:	dc800215 	stw	r18,8(sp)
   2caa4:	dc000015 	stw	r16,0(sp)
   2caa8:	2027883a 	mov	r19,r4
   2caac:	2823883a 	mov	r17,r5
   2cab0:	20000226 	beq	r4,zero,2cabc <_fflush_r+0x2c>
   2cab4:	20800e17 	ldw	r2,56(r4)
   2cab8:	10005726 	beq	r2,zero,2cc18 <_fflush_r+0x188>
   2cabc:	8880030b 	ldhu	r2,12(r17)
   2cac0:	10c0020c 	andi	r3,r2,8
   2cac4:	18ffffcc 	andi	r3,r3,65535
   2cac8:	18e0001c 	xori	r3,r3,32768
   2cacc:	18e00004 	addi	r3,r3,-32768
   2cad0:	1800311e 	bne	r3,zero,2cb98 <_fflush_r+0x108>
   2cad4:	89000117 	ldw	r4,4(r17)
   2cad8:	10c20014 	ori	r3,r2,2048
   2cadc:	88c0030d 	sth	r3,12(r17)
   2cae0:	180b883a 	mov	r5,r3
   2cae4:	0100520e 	bge	zero,r4,2cc30 <_fflush_r+0x1a0>
   2cae8:	88c00a17 	ldw	r3,40(r17)
   2caec:	18002226 	beq	r3,zero,2cb78 <_fflush_r+0xe8>
   2caf0:	1084000c 	andi	r2,r2,4096
   2caf4:	10bfffcc 	andi	r2,r2,65535
   2caf8:	10a0001c 	xori	r2,r2,32768
   2cafc:	10a00004 	addi	r2,r2,-32768
   2cb00:	10004e26 	beq	r2,zero,2cc3c <_fflush_r+0x1ac>
   2cb04:	8c001417 	ldw	r16,80(r17)
   2cb08:	2940010c 	andi	r5,r5,4
   2cb0c:	297fffcc 	andi	r5,r5,65535
   2cb10:	2960001c 	xori	r5,r5,32768
   2cb14:	29600004 	addi	r5,r5,-32768
   2cb18:	28000626 	beq	r5,zero,2cb34 <_fflush_r+0xa4>
   2cb1c:	89000117 	ldw	r4,4(r17)
   2cb20:	88800c17 	ldw	r2,48(r17)
   2cb24:	8121c83a 	sub	r16,r16,r4
   2cb28:	10000226 	beq	r2,zero,2cb34 <_fflush_r+0xa4>
   2cb2c:	88800f17 	ldw	r2,60(r17)
   2cb30:	80a1c83a 	sub	r16,r16,r2
   2cb34:	89400717 	ldw	r5,28(r17)
   2cb38:	9809883a 	mov	r4,r19
   2cb3c:	800d883a 	mov	r6,r16
   2cb40:	000f883a 	mov	r7,zero
   2cb44:	183ee83a 	callr	r3
   2cb48:	8080281e 	bne	r16,r2,2cbec <_fflush_r+0x15c>
   2cb4c:	8880030b 	ldhu	r2,12(r17)
   2cb50:	88c00417 	ldw	r3,16(r17)
   2cb54:	88000115 	stw	zero,4(r17)
   2cb58:	113dffcc 	andi	r4,r2,63487
   2cb5c:	1084000c 	andi	r2,r2,4096
   2cb60:	10bfffcc 	andi	r2,r2,65535
   2cb64:	10a0001c 	xori	r2,r2,32768
   2cb68:	8900030d 	sth	r4,12(r17)
   2cb6c:	88c00015 	stw	r3,0(r17)
   2cb70:	10a00004 	addi	r2,r2,-32768
   2cb74:	10002c1e 	bne	r2,zero,2cc28 <_fflush_r+0x198>
   2cb78:	0005883a 	mov	r2,zero
   2cb7c:	dfc00417 	ldw	ra,16(sp)
   2cb80:	dcc00317 	ldw	r19,12(sp)
   2cb84:	dc800217 	ldw	r18,8(sp)
   2cb88:	dc400117 	ldw	r17,4(sp)
   2cb8c:	dc000017 	ldw	r16,0(sp)
   2cb90:	dec00504 	addi	sp,sp,20
   2cb94:	f800283a 	ret
   2cb98:	8c800417 	ldw	r18,16(r17)
   2cb9c:	903ff626 	beq	r18,zero,2cb78 <_fflush_r+0xe8>
   2cba0:	8c000017 	ldw	r16,0(r17)
   2cba4:	108000cc 	andi	r2,r2,3
   2cba8:	8c800015 	stw	r18,0(r17)
   2cbac:	84a1c83a 	sub	r16,r16,r18
   2cbb0:	10001b1e 	bne	r2,zero,2cc20 <_fflush_r+0x190>
   2cbb4:	88800517 	ldw	r2,20(r17)
   2cbb8:	88800215 	stw	r2,8(r17)
   2cbbc:	04000316 	blt	zero,r16,2cbcc <_fflush_r+0x13c>
   2cbc0:	003fed06 	br	2cb78 <_fflush_r+0xe8>
   2cbc4:	90a5883a 	add	r18,r18,r2
   2cbc8:	043feb0e 	bge	zero,r16,2cb78 <_fflush_r+0xe8>
   2cbcc:	88800917 	ldw	r2,36(r17)
   2cbd0:	89400717 	ldw	r5,28(r17)
   2cbd4:	800f883a 	mov	r7,r16
   2cbd8:	900d883a 	mov	r6,r18
   2cbdc:	9809883a 	mov	r4,r19
   2cbe0:	103ee83a 	callr	r2
   2cbe4:	80a1c83a 	sub	r16,r16,r2
   2cbe8:	00bff616 	blt	zero,r2,2cbc4 <_fflush_r+0x134>
   2cbec:	88c0030b 	ldhu	r3,12(r17)
   2cbf0:	00bfffc4 	movi	r2,-1
   2cbf4:	18c01014 	ori	r3,r3,64
   2cbf8:	88c0030d 	sth	r3,12(r17)
   2cbfc:	dfc00417 	ldw	ra,16(sp)
   2cc00:	dcc00317 	ldw	r19,12(sp)
   2cc04:	dc800217 	ldw	r18,8(sp)
   2cc08:	dc400117 	ldw	r17,4(sp)
   2cc0c:	dc000017 	ldw	r16,0(sp)
   2cc10:	dec00504 	addi	sp,sp,20
   2cc14:	f800283a 	ret
   2cc18:	002cd4c0 	call	2cd4c <__sinit>
   2cc1c:	003fa706 	br	2cabc <_fflush_r+0x2c>
   2cc20:	0005883a 	mov	r2,zero
   2cc24:	003fe406 	br	2cbb8 <_fflush_r+0x128>
   2cc28:	8c001415 	stw	r16,80(r17)
   2cc2c:	003fd206 	br	2cb78 <_fflush_r+0xe8>
   2cc30:	88c00f17 	ldw	r3,60(r17)
   2cc34:	00ffac16 	blt	zero,r3,2cae8 <_fflush_r+0x58>
   2cc38:	003fcf06 	br	2cb78 <_fflush_r+0xe8>
   2cc3c:	89400717 	ldw	r5,28(r17)
   2cc40:	9809883a 	mov	r4,r19
   2cc44:	000d883a 	mov	r6,zero
   2cc48:	01c00044 	movi	r7,1
   2cc4c:	183ee83a 	callr	r3
   2cc50:	1021883a 	mov	r16,r2
   2cc54:	00bfffc4 	movi	r2,-1
   2cc58:	80800326 	beq	r16,r2,2cc68 <_fflush_r+0x1d8>
   2cc5c:	8940030b 	ldhu	r5,12(r17)
   2cc60:	88c00a17 	ldw	r3,40(r17)
   2cc64:	003fa806 	br	2cb08 <_fflush_r+0x78>
   2cc68:	98c00017 	ldw	r3,0(r19)
   2cc6c:	00800744 	movi	r2,29
   2cc70:	18bfde1e 	bne	r3,r2,2cbec <_fflush_r+0x15c>
   2cc74:	003fc006 	br	2cb78 <_fflush_r+0xe8>

0002cc78 <fflush>:
   2cc78:	200b883a 	mov	r5,r4
   2cc7c:	20000426 	beq	r4,zero,2cc90 <fflush+0x18>
   2cc80:	00800134 	movhi	r2,4
   2cc84:	108bb304 	addi	r2,r2,11980
   2cc88:	11000017 	ldw	r4,0(r2)
   2cc8c:	002ca901 	jmpi	2ca90 <_fflush_r>
   2cc90:	00800134 	movhi	r2,4
   2cc94:	108bb204 	addi	r2,r2,11976
   2cc98:	11000017 	ldw	r4,0(r2)
   2cc9c:	014000f4 	movhi	r5,3
   2cca0:	2972a404 	addi	r5,r5,-13680
   2cca4:	002de801 	jmpi	2de80 <_fwalk_reent>

0002cca8 <__fp_lock>:
   2cca8:	0005883a 	mov	r2,zero
   2ccac:	f800283a 	ret

0002ccb0 <__fp_unlock>:
   2ccb0:	0005883a 	mov	r2,zero
   2ccb4:	f800283a 	ret

0002ccb8 <_cleanup_r>:
   2ccb8:	014000f4 	movhi	r5,3
   2ccbc:	29729f04 	addi	r5,r5,-13700
   2ccc0:	002ddd81 	jmpi	2ddd8 <_fwalk>

0002ccc4 <__sfmoreglue>:
   2ccc4:	defffc04 	addi	sp,sp,-16
   2ccc8:	dc800215 	stw	r18,8(sp)
   2cccc:	2825883a 	mov	r18,r5
   2ccd0:	dc000015 	stw	r16,0(sp)
   2ccd4:	01401704 	movi	r5,92
   2ccd8:	2021883a 	mov	r16,r4
   2ccdc:	9009883a 	mov	r4,r18
   2cce0:	dfc00315 	stw	ra,12(sp)
   2cce4:	dc400115 	stw	r17,4(sp)
   2cce8:	002c1540 	call	2c154 <__mulsi3>
   2ccec:	8009883a 	mov	r4,r16
   2ccf0:	11400304 	addi	r5,r2,12
   2ccf4:	1023883a 	mov	r17,r2
   2ccf8:	002e3680 	call	2e368 <_malloc_r>
   2ccfc:	1021883a 	mov	r16,r2
   2cd00:	10000726 	beq	r2,zero,2cd20 <__sfmoreglue+0x5c>
   2cd04:	11000304 	addi	r4,r2,12
   2cd08:	10000015 	stw	zero,0(r2)
   2cd0c:	14800115 	stw	r18,4(r2)
   2cd10:	11000215 	stw	r4,8(r2)
   2cd14:	000b883a 	mov	r5,zero
   2cd18:	880d883a 	mov	r6,r17
   2cd1c:	002ec2c0 	call	2ec2c <memset>
   2cd20:	8005883a 	mov	r2,r16
   2cd24:	dfc00317 	ldw	ra,12(sp)
   2cd28:	dc800217 	ldw	r18,8(sp)
   2cd2c:	dc400117 	ldw	r17,4(sp)
   2cd30:	dc000017 	ldw	r16,0(sp)
   2cd34:	dec00404 	addi	sp,sp,16
   2cd38:	f800283a 	ret

0002cd3c <_cleanup>:
   2cd3c:	00800134 	movhi	r2,4
   2cd40:	108bb204 	addi	r2,r2,11976
   2cd44:	11000017 	ldw	r4,0(r2)
   2cd48:	002ccb81 	jmpi	2ccb8 <_cleanup_r>

0002cd4c <__sinit>:
   2cd4c:	20800e17 	ldw	r2,56(r4)
   2cd50:	1000401e 	bne	r2,zero,2ce54 <__sinit+0x108>
   2cd54:	21400117 	ldw	r5,4(r4)
   2cd58:	018000f4 	movhi	r6,3
   2cd5c:	31b32e04 	addi	r6,r6,-13128
   2cd60:	20c00217 	ldw	r3,8(r4)
   2cd64:	21800f15 	stw	r6,60(r4)
   2cd68:	2080bb04 	addi	r2,r4,748
   2cd6c:	02400044 	movi	r9,1
   2cd70:	018000c4 	movi	r6,3
   2cd74:	2180b915 	stw	r6,740(r4)
   2cd78:	2080ba15 	stw	r2,744(r4)
   2cd7c:	22400e15 	stw	r9,56(r4)
   2cd80:	20800317 	ldw	r2,12(r4)
   2cd84:	2000b815 	stw	zero,736(r4)
   2cd88:	020000f4 	movhi	r8,3
   2cd8c:	423cd604 	addi	r8,r8,-3240
   2cd90:	01c000f4 	movhi	r7,3
   2cd94:	39fceb04 	addi	r7,r7,-3156
   2cd98:	018000f4 	movhi	r6,3
   2cd9c:	31bd0d04 	addi	r6,r6,-3020
   2cda0:	010000f4 	movhi	r4,3
   2cda4:	213d2404 	addi	r4,r4,-2928
   2cda8:	02800104 	movi	r10,4
   2cdac:	28000015 	stw	zero,0(r5)
   2cdb0:	28000115 	stw	zero,4(r5)
   2cdb4:	28000215 	stw	zero,8(r5)
   2cdb8:	2a80030d 	sth	r10,12(r5)
   2cdbc:	2800038d 	sth	zero,14(r5)
   2cdc0:	28000415 	stw	zero,16(r5)
   2cdc4:	28000515 	stw	zero,20(r5)
   2cdc8:	28000615 	stw	zero,24(r5)
   2cdcc:	29400715 	stw	r5,28(r5)
   2cdd0:	2a000815 	stw	r8,32(r5)
   2cdd4:	29c00915 	stw	r7,36(r5)
   2cdd8:	29800a15 	stw	r6,40(r5)
   2cddc:	29000b15 	stw	r4,44(r5)
   2cde0:	01400284 	movi	r5,10
   2cde4:	18000015 	stw	zero,0(r3)
   2cde8:	18000115 	stw	zero,4(r3)
   2cdec:	18000215 	stw	zero,8(r3)
   2cdf0:	1940030d 	sth	r5,12(r3)
   2cdf4:	1a40038d 	sth	r9,14(r3)
   2cdf8:	18000415 	stw	zero,16(r3)
   2cdfc:	18000515 	stw	zero,20(r3)
   2ce00:	18000615 	stw	zero,24(r3)
   2ce04:	18c00715 	stw	r3,28(r3)
   2ce08:	1a000815 	stw	r8,32(r3)
   2ce0c:	19c00915 	stw	r7,36(r3)
   2ce10:	19800a15 	stw	r6,40(r3)
   2ce14:	19000b15 	stw	r4,44(r3)
   2ce18:	00c00484 	movi	r3,18
   2ce1c:	10c0030d 	sth	r3,12(r2)
   2ce20:	00c00084 	movi	r3,2
   2ce24:	10000015 	stw	zero,0(r2)
   2ce28:	10000115 	stw	zero,4(r2)
   2ce2c:	10000215 	stw	zero,8(r2)
   2ce30:	10c0038d 	sth	r3,14(r2)
   2ce34:	10000415 	stw	zero,16(r2)
   2ce38:	10000515 	stw	zero,20(r2)
   2ce3c:	10000615 	stw	zero,24(r2)
   2ce40:	10800715 	stw	r2,28(r2)
   2ce44:	12000815 	stw	r8,32(r2)
   2ce48:	11c00915 	stw	r7,36(r2)
   2ce4c:	11800a15 	stw	r6,40(r2)
   2ce50:	11000b15 	stw	r4,44(r2)
   2ce54:	f800283a 	ret

0002ce58 <__sfp>:
   2ce58:	defffc04 	addi	sp,sp,-16
   2ce5c:	00800134 	movhi	r2,4
   2ce60:	108bb204 	addi	r2,r2,11976
   2ce64:	dc400115 	stw	r17,4(sp)
   2ce68:	14400017 	ldw	r17,0(r2)
   2ce6c:	dc800215 	stw	r18,8(sp)
   2ce70:	dfc00315 	stw	ra,12(sp)
   2ce74:	88800e17 	ldw	r2,56(r17)
   2ce78:	dc000015 	stw	r16,0(sp)
   2ce7c:	2025883a 	mov	r18,r4
   2ce80:	10002826 	beq	r2,zero,2cf24 <__sfp+0xcc>
   2ce84:	8c40b804 	addi	r17,r17,736
   2ce88:	043fffc4 	movi	r16,-1
   2ce8c:	89400117 	ldw	r5,4(r17)
   2ce90:	88800217 	ldw	r2,8(r17)
   2ce94:	297fffc4 	addi	r5,r5,-1
   2ce98:	28000a16 	blt	r5,zero,2cec4 <__sfp+0x6c>
   2ce9c:	10c0030f 	ldh	r3,12(r2)
   2cea0:	18000c26 	beq	r3,zero,2ced4 <__sfp+0x7c>
   2cea4:	10c01a04 	addi	r3,r2,104
   2cea8:	00000206 	br	2ceb4 <__sfp+0x5c>
   2ceac:	19bfe90f 	ldh	r6,-92(r3)
   2ceb0:	30000826 	beq	r6,zero,2ced4 <__sfp+0x7c>
   2ceb4:	297fffc4 	addi	r5,r5,-1
   2ceb8:	18bffd04 	addi	r2,r3,-12
   2cebc:	18c01704 	addi	r3,r3,92
   2cec0:	2c3ffa1e 	bne	r5,r16,2ceac <__sfp+0x54>
   2cec4:	88800017 	ldw	r2,0(r17)
   2cec8:	10001926 	beq	r2,zero,2cf30 <__sfp+0xd8>
   2cecc:	1023883a 	mov	r17,r2
   2ced0:	003fee06 	br	2ce8c <__sfp+0x34>
   2ced4:	00ffffc4 	movi	r3,-1
   2ced8:	10c0038d 	sth	r3,14(r2)
   2cedc:	00c00044 	movi	r3,1
   2cee0:	10c0030d 	sth	r3,12(r2)
   2cee4:	10000015 	stw	zero,0(r2)
   2cee8:	10000215 	stw	zero,8(r2)
   2ceec:	10000115 	stw	zero,4(r2)
   2cef0:	10000415 	stw	zero,16(r2)
   2cef4:	10000515 	stw	zero,20(r2)
   2cef8:	10000615 	stw	zero,24(r2)
   2cefc:	10000c15 	stw	zero,48(r2)
   2cf00:	10000d15 	stw	zero,52(r2)
   2cf04:	10001115 	stw	zero,68(r2)
   2cf08:	10001215 	stw	zero,72(r2)
   2cf0c:	dfc00317 	ldw	ra,12(sp)
   2cf10:	dc800217 	ldw	r18,8(sp)
   2cf14:	dc400117 	ldw	r17,4(sp)
   2cf18:	dc000017 	ldw	r16,0(sp)
   2cf1c:	dec00404 	addi	sp,sp,16
   2cf20:	f800283a 	ret
   2cf24:	8809883a 	mov	r4,r17
   2cf28:	002cd4c0 	call	2cd4c <__sinit>
   2cf2c:	003fd506 	br	2ce84 <__sfp+0x2c>
   2cf30:	9009883a 	mov	r4,r18
   2cf34:	01400104 	movi	r5,4
   2cf38:	002ccc40 	call	2ccc4 <__sfmoreglue>
   2cf3c:	88800015 	stw	r2,0(r17)
   2cf40:	103fe21e 	bne	r2,zero,2cecc <__sfp+0x74>
   2cf44:	00800304 	movi	r2,12
   2cf48:	90800015 	stw	r2,0(r18)
   2cf4c:	0005883a 	mov	r2,zero
   2cf50:	003fee06 	br	2cf0c <__sfp+0xb4>

0002cf54 <__sfp_lock_acquire>:
   2cf54:	f800283a 	ret

0002cf58 <__sfp_lock_release>:
   2cf58:	f800283a 	ret

0002cf5c <__sinit_lock_acquire>:
   2cf5c:	f800283a 	ret

0002cf60 <__sinit_lock_release>:
   2cf60:	f800283a 	ret

0002cf64 <__fp_lock_all>:
   2cf64:	00800134 	movhi	r2,4
   2cf68:	108bb304 	addi	r2,r2,11980
   2cf6c:	11000017 	ldw	r4,0(r2)
   2cf70:	014000f4 	movhi	r5,3
   2cf74:	29732a04 	addi	r5,r5,-13144
   2cf78:	002ddd81 	jmpi	2ddd8 <_fwalk>

0002cf7c <__fp_unlock_all>:
   2cf7c:	00800134 	movhi	r2,4
   2cf80:	108bb304 	addi	r2,r2,11980
   2cf84:	11000017 	ldw	r4,0(r2)
   2cf88:	014000f4 	movhi	r5,3
   2cf8c:	29732c04 	addi	r5,r5,-13136
   2cf90:	002ddd81 	jmpi	2ddd8 <_fwalk>

0002cf94 <_fopen_r>:
   2cf94:	defffa04 	addi	sp,sp,-24
   2cf98:	dcc00415 	stw	r19,16(sp)
   2cf9c:	2827883a 	mov	r19,r5
   2cfa0:	300b883a 	mov	r5,r6
   2cfa4:	d80d883a 	mov	r6,sp
   2cfa8:	dc800315 	stw	r18,12(sp)
   2cfac:	dc400215 	stw	r17,8(sp)
   2cfb0:	dfc00515 	stw	ra,20(sp)
   2cfb4:	dc000115 	stw	r16,4(sp)
   2cfb8:	2025883a 	mov	r18,r4
   2cfbc:	0034f8c0 	call	34f8c <__sflags>
   2cfc0:	1023883a 	mov	r17,r2
   2cfc4:	10002926 	beq	r2,zero,2d06c <_fopen_r+0xd8>
   2cfc8:	9009883a 	mov	r4,r18
   2cfcc:	002ce580 	call	2ce58 <__sfp>
   2cfd0:	1021883a 	mov	r16,r2
   2cfd4:	10002526 	beq	r2,zero,2d06c <_fopen_r+0xd8>
   2cfd8:	d9800017 	ldw	r6,0(sp)
   2cfdc:	9009883a 	mov	r4,r18
   2cfe0:	980b883a 	mov	r5,r19
   2cfe4:	01c06d84 	movi	r7,438
   2cfe8:	002ed080 	call	2ed08 <_open_r>
   2cfec:	10001c16 	blt	r2,zero,2d060 <_fopen_r+0xcc>
   2cff0:	8080038d 	sth	r2,14(r16)
   2cff4:	008000f4 	movhi	r2,3
   2cff8:	10bcd604 	addi	r2,r2,-3240
   2cffc:	80800815 	stw	r2,32(r16)
   2d000:	008000f4 	movhi	r2,3
   2d004:	10bceb04 	addi	r2,r2,-3156
   2d008:	80800915 	stw	r2,36(r16)
   2d00c:	008000f4 	movhi	r2,3
   2d010:	10bd0d04 	addi	r2,r2,-3020
   2d014:	88c0400c 	andi	r3,r17,256
   2d018:	80800a15 	stw	r2,40(r16)
   2d01c:	008000f4 	movhi	r2,3
   2d020:	10bd2404 	addi	r2,r2,-2928
   2d024:	80800b15 	stw	r2,44(r16)
   2d028:	18bfffcc 	andi	r2,r3,65535
   2d02c:	10a0001c 	xori	r2,r2,32768
   2d030:	8440030d 	sth	r17,12(r16)
   2d034:	84000715 	stw	r16,28(r16)
   2d038:	10a00004 	addi	r2,r2,-32768
   2d03c:	1000141e 	bne	r2,zero,2d090 <_fopen_r+0xfc>
   2d040:	8005883a 	mov	r2,r16
   2d044:	dfc00517 	ldw	ra,20(sp)
   2d048:	dcc00417 	ldw	r19,16(sp)
   2d04c:	dc800317 	ldw	r18,12(sp)
   2d050:	dc400217 	ldw	r17,8(sp)
   2d054:	dc000117 	ldw	r16,4(sp)
   2d058:	dec00604 	addi	sp,sp,24
   2d05c:	f800283a 	ret
   2d060:	002cf540 	call	2cf54 <__sfp_lock_acquire>
   2d064:	8000030d 	sth	zero,12(r16)
   2d068:	002cf580 	call	2cf58 <__sfp_lock_release>
   2d06c:	0021883a 	mov	r16,zero
   2d070:	8005883a 	mov	r2,r16
   2d074:	dfc00517 	ldw	ra,20(sp)
   2d078:	dcc00417 	ldw	r19,16(sp)
   2d07c:	dc800317 	ldw	r18,12(sp)
   2d080:	dc400217 	ldw	r17,8(sp)
   2d084:	dc000117 	ldw	r16,4(sp)
   2d088:	dec00604 	addi	sp,sp,24
   2d08c:	f800283a 	ret
   2d090:	9009883a 	mov	r4,r18
   2d094:	800b883a 	mov	r5,r16
   2d098:	000d883a 	mov	r6,zero
   2d09c:	01c00084 	movi	r7,2
   2d0a0:	002d7b40 	call	2d7b4 <_fseek_r>
   2d0a4:	8005883a 	mov	r2,r16
   2d0a8:	dfc00517 	ldw	ra,20(sp)
   2d0ac:	dcc00417 	ldw	r19,16(sp)
   2d0b0:	dc800317 	ldw	r18,12(sp)
   2d0b4:	dc400217 	ldw	r17,8(sp)
   2d0b8:	dc000117 	ldw	r16,4(sp)
   2d0bc:	dec00604 	addi	sp,sp,24
   2d0c0:	f800283a 	ret

0002d0c4 <fopen>:
   2d0c4:	00c00134 	movhi	r3,4
   2d0c8:	18cbb304 	addi	r3,r3,11980
   2d0cc:	2005883a 	mov	r2,r4
   2d0d0:	19000017 	ldw	r4,0(r3)
   2d0d4:	280d883a 	mov	r6,r5
   2d0d8:	100b883a 	mov	r5,r2
   2d0dc:	002cf941 	jmpi	2cf94 <_fopen_r>

0002d0e0 <_fprintf_r>:
   2d0e0:	defffe04 	addi	sp,sp,-8
   2d0e4:	2809883a 	mov	r4,r5
   2d0e8:	dfc00015 	stw	ra,0(sp)
   2d0ec:	d9c00115 	stw	r7,4(sp)
   2d0f0:	300b883a 	mov	r5,r6
   2d0f4:	d9800104 	addi	r6,sp,4
   2d0f8:	0031ad00 	call	31ad0 <__vfprintf_internal>
   2d0fc:	dfc00017 	ldw	ra,0(sp)
   2d100:	dec00204 	addi	sp,sp,8
   2d104:	f800283a 	ret

0002d108 <fprintf>:
   2d108:	defffd04 	addi	sp,sp,-12
   2d10c:	dfc00015 	stw	ra,0(sp)
   2d110:	d9800115 	stw	r6,4(sp)
   2d114:	d9c00215 	stw	r7,8(sp)
   2d118:	d9800104 	addi	r6,sp,4
   2d11c:	0031ad00 	call	31ad0 <__vfprintf_internal>
   2d120:	dfc00017 	ldw	ra,0(sp)
   2d124:	dec00304 	addi	sp,sp,12
   2d128:	f800283a 	ret

0002d12c <_fread_r>:
   2d12c:	defff504 	addi	sp,sp,-44
   2d130:	dd000515 	stw	r20,20(sp)
   2d134:	dcc00415 	stw	r19,16(sp)
   2d138:	2029883a 	mov	r20,r4
   2d13c:	2827883a 	mov	r19,r5
   2d140:	3809883a 	mov	r4,r7
   2d144:	300b883a 	mov	r5,r6
   2d148:	ddc00815 	stw	r23,32(sp)
   2d14c:	dd800715 	stw	r22,28(sp)
   2d150:	dd400615 	stw	r21,24(sp)
   2d154:	dc000115 	stw	r16,4(sp)
   2d158:	dfc00a15 	stw	ra,40(sp)
   2d15c:	df000915 	stw	fp,36(sp)
   2d160:	dc800315 	stw	r18,12(sp)
   2d164:	dc400215 	stw	r17,8(sp)
   2d168:	302f883a 	mov	r23,r6
   2d16c:	382b883a 	mov	r21,r7
   2d170:	002c1540 	call	2c154 <__mulsi3>
   2d174:	102d883a 	mov	r22,r2
   2d178:	dc000b17 	ldw	r16,44(sp)
   2d17c:	10002e26 	beq	r2,zero,2d238 <_fread_r+0x10c>
   2d180:	a0000226 	beq	r20,zero,2d18c <_fread_r+0x60>
   2d184:	a0800e17 	ldw	r2,56(r20)
   2d188:	10006726 	beq	r2,zero,2d328 <_fread_r+0x1fc>
   2d18c:	84400117 	ldw	r17,4(r16)
   2d190:	88002b16 	blt	r17,zero,2d240 <_fread_r+0x114>
   2d194:	8080030b 	ldhu	r2,12(r16)
   2d198:	8807883a 	mov	r3,r17
   2d19c:	1080008c 	andi	r2,r2,2
   2d1a0:	10bfffcc 	andi	r2,r2,65535
   2d1a4:	10a0001c 	xori	r2,r2,32768
   2d1a8:	10a00004 	addi	r2,r2,-32768
   2d1ac:	10002d1e 	bne	r2,zero,2d264 <_fread_r+0x138>
   2d1b0:	b025883a 	mov	r18,r22
   2d1b4:	00000106 	br	2d1bc <_fread_r+0x90>
   2d1b8:	84400117 	ldw	r17,4(r16)
   2d1bc:	9809883a 	mov	r4,r19
   2d1c0:	880d883a 	mov	r6,r17
   2d1c4:	81400017 	ldw	r5,0(r16)
   2d1c8:	8c805c2e 	bgeu	r17,r18,2d33c <_fread_r+0x210>
   2d1cc:	002eaec0 	call	2eaec <memcpy>
   2d1d0:	80800017 	ldw	r2,0(r16)
   2d1d4:	9c67883a 	add	r19,r19,r17
   2d1d8:	9465c83a 	sub	r18,r18,r17
   2d1dc:	1463883a 	add	r17,r2,r17
   2d1e0:	a009883a 	mov	r4,r20
   2d1e4:	800b883a 	mov	r5,r16
   2d1e8:	84400015 	stw	r17,0(r16)
   2d1ec:	002ee900 	call	2ee90 <__srefill_r>
   2d1f0:	103ff126 	beq	r2,zero,2d1b8 <_fread_r+0x8c>
   2d1f4:	b489c83a 	sub	r4,r22,r18
   2d1f8:	b80b883a 	mov	r5,r23
   2d1fc:	002c1440 	call	2c144 <__udivsi3>
   2d200:	102b883a 	mov	r21,r2
   2d204:	a805883a 	mov	r2,r21
   2d208:	dfc00a17 	ldw	ra,40(sp)
   2d20c:	df000917 	ldw	fp,36(sp)
   2d210:	ddc00817 	ldw	r23,32(sp)
   2d214:	dd800717 	ldw	r22,28(sp)
   2d218:	dd400617 	ldw	r21,24(sp)
   2d21c:	dd000517 	ldw	r20,20(sp)
   2d220:	dcc00417 	ldw	r19,16(sp)
   2d224:	dc800317 	ldw	r18,12(sp)
   2d228:	dc400217 	ldw	r17,8(sp)
   2d22c:	dc000117 	ldw	r16,4(sp)
   2d230:	dec00b04 	addi	sp,sp,44
   2d234:	f800283a 	ret
   2d238:	002b883a 	mov	r21,zero
   2d23c:	003ff106 	br	2d204 <_fread_r+0xd8>
   2d240:	8080030b 	ldhu	r2,12(r16)
   2d244:	80000115 	stw	zero,4(r16)
   2d248:	0007883a 	mov	r3,zero
   2d24c:	1080008c 	andi	r2,r2,2
   2d250:	10bfffcc 	andi	r2,r2,65535
   2d254:	10a0001c 	xori	r2,r2,32768
   2d258:	10a00004 	addi	r2,r2,-32768
   2d25c:	0023883a 	mov	r17,zero
   2d260:	103fd326 	beq	r2,zero,2d1b0 <_fread_r+0x84>
   2d264:	1823883a 	mov	r17,r3
   2d268:	b0c0012e 	bgeu	r22,r3,2d270 <_fread_r+0x144>
   2d26c:	b023883a 	mov	r17,r22
   2d270:	81400017 	ldw	r5,0(r16)
   2d274:	9809883a 	mov	r4,r19
   2d278:	880d883a 	mov	r6,r17
   2d27c:	002eaec0 	call	2eaec <memcpy>
   2d280:	80800117 	ldw	r2,4(r16)
   2d284:	84800017 	ldw	r18,0(r16)
   2d288:	81400c17 	ldw	r5,48(r16)
   2d28c:	1445c83a 	sub	r2,r2,r17
   2d290:	9465883a 	add	r18,r18,r17
   2d294:	84800015 	stw	r18,0(r16)
   2d298:	80800115 	stw	r2,4(r16)
   2d29c:	9c67883a 	add	r19,r19,r17
   2d2a0:	b463c83a 	sub	r17,r22,r17
   2d2a4:	28002e26 	beq	r5,zero,2d360 <_fread_r+0x234>
   2d2a8:	883fd626 	beq	r17,zero,2d204 <_fread_r+0xd8>
   2d2ac:	80801004 	addi	r2,r16,64
   2d2b0:	28800326 	beq	r5,r2,2d2c0 <_fread_r+0x194>
   2d2b4:	a009883a 	mov	r4,r20
   2d2b8:	002d4e40 	call	2d4e4 <_free_r>
   2d2bc:	84800017 	ldw	r18,0(r16)
   2d2c0:	80000c15 	stw	zero,48(r16)
   2d2c4:	80c00517 	ldw	r3,20(r16)
   2d2c8:	87000417 	ldw	fp,16(r16)
   2d2cc:	d8c00015 	stw	r3,0(sp)
   2d2d0:	00000106 	br	2d2d8 <_fread_r+0x1ac>
   2d2d4:	883fcb26 	beq	r17,zero,2d204 <_fread_r+0xd8>
   2d2d8:	84c00415 	stw	r19,16(r16)
   2d2dc:	84400515 	stw	r17,20(r16)
   2d2e0:	84c00015 	stw	r19,0(r16)
   2d2e4:	a009883a 	mov	r4,r20
   2d2e8:	800b883a 	mov	r5,r16
   2d2ec:	002ee900 	call	2ee90 <__srefill_r>
   2d2f0:	d8c00017 	ldw	r3,0(sp)
   2d2f4:	81000117 	ldw	r4,4(r16)
   2d2f8:	87000415 	stw	fp,16(r16)
   2d2fc:	80c00515 	stw	r3,20(r16)
   2d300:	84800015 	stw	r18,0(r16)
   2d304:	80000115 	stw	zero,4(r16)
   2d308:	8923c83a 	sub	r17,r17,r4
   2d30c:	9927883a 	add	r19,r19,r4
   2d310:	103ff026 	beq	r2,zero,2d2d4 <_fread_r+0x1a8>
   2d314:	b449c83a 	sub	r4,r22,r17
   2d318:	b80b883a 	mov	r5,r23
   2d31c:	002c1440 	call	2c144 <__udivsi3>
   2d320:	102b883a 	mov	r21,r2
   2d324:	003fb706 	br	2d204 <_fread_r+0xd8>
   2d328:	a009883a 	mov	r4,r20
   2d32c:	002cd4c0 	call	2cd4c <__sinit>
   2d330:	84400117 	ldw	r17,4(r16)
   2d334:	883f970e 	bge	r17,zero,2d194 <_fread_r+0x68>
   2d338:	003fc106 	br	2d240 <_fread_r+0x114>
   2d33c:	900d883a 	mov	r6,r18
   2d340:	002eaec0 	call	2eaec <memcpy>
   2d344:	80800117 	ldw	r2,4(r16)
   2d348:	80c00017 	ldw	r3,0(r16)
   2d34c:	1485c83a 	sub	r2,r2,r18
   2d350:	1ca5883a 	add	r18,r3,r18
   2d354:	80800115 	stw	r2,4(r16)
   2d358:	84800015 	stw	r18,0(r16)
   2d35c:	003fa906 	br	2d204 <_fread_r+0xd8>
   2d360:	883fd81e 	bne	r17,zero,2d2c4 <_fread_r+0x198>
   2d364:	003fa706 	br	2d204 <_fread_r+0xd8>

0002d368 <fread>:
   2d368:	00800134 	movhi	r2,4
   2d36c:	108bb304 	addi	r2,r2,11980
   2d370:	2011883a 	mov	r8,r4
   2d374:	11000017 	ldw	r4,0(r2)
   2d378:	defffe04 	addi	sp,sp,-8
   2d37c:	2807883a 	mov	r3,r5
   2d380:	3005883a 	mov	r2,r6
   2d384:	d9c00015 	stw	r7,0(sp)
   2d388:	400b883a 	mov	r5,r8
   2d38c:	180d883a 	mov	r6,r3
   2d390:	100f883a 	mov	r7,r2
   2d394:	dfc00115 	stw	ra,4(sp)
   2d398:	002d12c0 	call	2d12c <_fread_r>
   2d39c:	dfc00117 	ldw	ra,4(sp)
   2d3a0:	dec00204 	addi	sp,sp,8
   2d3a4:	f800283a 	ret

0002d3a8 <_malloc_trim_r>:
   2d3a8:	defffb04 	addi	sp,sp,-20
   2d3ac:	dcc00315 	stw	r19,12(sp)
   2d3b0:	dc800215 	stw	r18,8(sp)
   2d3b4:	dc400115 	stw	r17,4(sp)
   2d3b8:	dc000015 	stw	r16,0(sp)
   2d3bc:	2827883a 	mov	r19,r5
   2d3c0:	dfc00415 	stw	ra,16(sp)
   2d3c4:	04400134 	movhi	r17,4
   2d3c8:	8c461204 	addi	r17,r17,6216
   2d3cc:	2021883a 	mov	r16,r4
   2d3d0:	003c46c0 	call	3c46c <__malloc_lock>
   2d3d4:	88800217 	ldw	r2,8(r17)
   2d3d8:	14800117 	ldw	r18,4(r2)
   2d3dc:	00bfff04 	movi	r2,-4
   2d3e0:	90a4703a 	and	r18,r18,r2
   2d3e4:	9083fbc4 	addi	r2,r18,4079
   2d3e8:	14e7c83a 	sub	r19,r2,r19
   2d3ec:	9826d33a 	srli	r19,r19,12
   2d3f0:	0083ffc4 	movi	r2,4095
   2d3f4:	9cffffc4 	addi	r19,r19,-1
   2d3f8:	9826933a 	slli	r19,r19,12
   2d3fc:	14c0060e 	bge	r2,r19,2d418 <_malloc_trim_r+0x70>
   2d400:	8009883a 	mov	r4,r16
   2d404:	000b883a 	mov	r5,zero
   2d408:	002f0c80 	call	2f0c8 <_sbrk_r>
   2d40c:	88c00217 	ldw	r3,8(r17)
   2d410:	1c87883a 	add	r3,r3,r18
   2d414:	10c00a26 	beq	r2,r3,2d440 <_malloc_trim_r+0x98>
   2d418:	8009883a 	mov	r4,r16
   2d41c:	003c48c0 	call	3c48c <__malloc_unlock>
   2d420:	0005883a 	mov	r2,zero
   2d424:	dfc00417 	ldw	ra,16(sp)
   2d428:	dcc00317 	ldw	r19,12(sp)
   2d42c:	dc800217 	ldw	r18,8(sp)
   2d430:	dc400117 	ldw	r17,4(sp)
   2d434:	dc000017 	ldw	r16,0(sp)
   2d438:	dec00504 	addi	sp,sp,20
   2d43c:	f800283a 	ret
   2d440:	8009883a 	mov	r4,r16
   2d444:	04cbc83a 	sub	r5,zero,r19
   2d448:	002f0c80 	call	2f0c8 <_sbrk_r>
   2d44c:	00ffffc4 	movi	r3,-1
   2d450:	10c01326 	beq	r2,r3,2d4a0 <_malloc_trim_r+0xf8>
   2d454:	00800134 	movhi	r2,4
   2d458:	1092a504 	addi	r2,r2,19092
   2d45c:	11000017 	ldw	r4,0(r2)
   2d460:	88c00217 	ldw	r3,8(r17)
   2d464:	94e5c83a 	sub	r18,r18,r19
   2d468:	94800054 	ori	r18,r18,1
   2d46c:	24e7c83a 	sub	r19,r4,r19
   2d470:	1c800115 	stw	r18,4(r3)
   2d474:	8009883a 	mov	r4,r16
   2d478:	14c00015 	stw	r19,0(r2)
   2d47c:	003c48c0 	call	3c48c <__malloc_unlock>
   2d480:	00800044 	movi	r2,1
   2d484:	dfc00417 	ldw	ra,16(sp)
   2d488:	dcc00317 	ldw	r19,12(sp)
   2d48c:	dc800217 	ldw	r18,8(sp)
   2d490:	dc400117 	ldw	r17,4(sp)
   2d494:	dc000017 	ldw	r16,0(sp)
   2d498:	dec00504 	addi	sp,sp,20
   2d49c:	f800283a 	ret
   2d4a0:	8009883a 	mov	r4,r16
   2d4a4:	000b883a 	mov	r5,zero
   2d4a8:	002f0c80 	call	2f0c8 <_sbrk_r>
   2d4ac:	88c00217 	ldw	r3,8(r17)
   2d4b0:	014003c4 	movi	r5,15
   2d4b4:	10c9c83a 	sub	r4,r2,r3
   2d4b8:	293fd70e 	bge	r5,r4,2d418 <_malloc_trim_r+0x70>
   2d4bc:	01400134 	movhi	r5,4
   2d4c0:	294bb404 	addi	r5,r5,11984
   2d4c4:	29400017 	ldw	r5,0(r5)
   2d4c8:	21000054 	ori	r4,r4,1
   2d4cc:	19000115 	stw	r4,4(r3)
   2d4d0:	1145c83a 	sub	r2,r2,r5
   2d4d4:	01400134 	movhi	r5,4
   2d4d8:	2952a504 	addi	r5,r5,19092
   2d4dc:	28800015 	stw	r2,0(r5)
   2d4e0:	003fcd06 	br	2d418 <_malloc_trim_r+0x70>

0002d4e4 <_free_r>:
   2d4e4:	defffd04 	addi	sp,sp,-12
   2d4e8:	dc400115 	stw	r17,4(sp)
   2d4ec:	dc000015 	stw	r16,0(sp)
   2d4f0:	dfc00215 	stw	ra,8(sp)
   2d4f4:	2821883a 	mov	r16,r5
   2d4f8:	2023883a 	mov	r17,r4
   2d4fc:	28004b26 	beq	r5,zero,2d62c <_free_r+0x148>
   2d500:	003c46c0 	call	3c46c <__malloc_lock>
   2d504:	823fff17 	ldw	r8,-4(r16)
   2d508:	00bfff84 	movi	r2,-2
   2d50c:	81bffe04 	addi	r6,r16,-8
   2d510:	4084703a 	and	r2,r8,r2
   2d514:	3087883a 	add	r3,r6,r2
   2d518:	01400134 	movhi	r5,4
   2d51c:	29461204 	addi	r5,r5,6216
   2d520:	1a400117 	ldw	r9,4(r3)
   2d524:	29000217 	ldw	r4,8(r5)
   2d528:	01ffff04 	movi	r7,-4
   2d52c:	49ce703a 	and	r7,r9,r7
   2d530:	20c06526 	beq	r4,r3,2d6c8 <_free_r+0x1e4>
   2d534:	19c00115 	stw	r7,4(r3)
   2d538:	4200004c 	andi	r8,r8,1
   2d53c:	40003026 	beq	r8,zero,2d600 <_free_r+0x11c>
   2d540:	0009883a 	mov	r4,zero
   2d544:	19d1883a 	add	r8,r3,r7
   2d548:	42000117 	ldw	r8,4(r8)
   2d54c:	4200004c 	andi	r8,r8,1
   2d550:	4000061e 	bne	r8,zero,2d56c <_free_r+0x88>
   2d554:	11c5883a 	add	r2,r2,r7
   2d558:	19c00217 	ldw	r7,8(r3)
   2d55c:	20004e26 	beq	r4,zero,2d698 <_free_r+0x1b4>
   2d560:	18c00317 	ldw	r3,12(r3)
   2d564:	38c00315 	stw	r3,12(r7)
   2d568:	19c00215 	stw	r7,8(r3)
   2d56c:	11c00054 	ori	r7,r2,1
   2d570:	3087883a 	add	r3,r6,r2
   2d574:	31c00115 	stw	r7,4(r6)
   2d578:	18800015 	stw	r2,0(r3)
   2d57c:	20001a1e 	bne	r4,zero,2d5e8 <_free_r+0x104>
   2d580:	00c07fc4 	movi	r3,511
   2d584:	18802e2e 	bgeu	r3,r2,2d640 <_free_r+0x15c>
   2d588:	1006d27a 	srli	r3,r2,9
   2d58c:	01000104 	movi	r4,4
   2d590:	20c06636 	bltu	r4,r3,2d72c <_free_r+0x248>
   2d594:	1008d1ba 	srli	r4,r2,6
   2d598:	21000e04 	addi	r4,r4,56
   2d59c:	210f883a 	add	r7,r4,r4
   2d5a0:	39cf883a 	add	r7,r7,r7
   2d5a4:	39cf883a 	add	r7,r7,r7
   2d5a8:	29cf883a 	add	r7,r5,r7
   2d5ac:	38c00217 	ldw	r3,8(r7)
   2d5b0:	01400134 	movhi	r5,4
   2d5b4:	29461204 	addi	r5,r5,6216
   2d5b8:	19c06126 	beq	r3,r7,2d740 <_free_r+0x25c>
   2d5bc:	013fff04 	movi	r4,-4
   2d5c0:	19400117 	ldw	r5,4(r3)
   2d5c4:	290a703a 	and	r5,r5,r4
   2d5c8:	1140022e 	bgeu	r2,r5,2d5d4 <_free_r+0xf0>
   2d5cc:	18c00217 	ldw	r3,8(r3)
   2d5d0:	38fffb1e 	bne	r7,r3,2d5c0 <_free_r+0xdc>
   2d5d4:	18800317 	ldw	r2,12(r3)
   2d5d8:	30800315 	stw	r2,12(r6)
   2d5dc:	30c00215 	stw	r3,8(r6)
   2d5e0:	11800215 	stw	r6,8(r2)
   2d5e4:	19800315 	stw	r6,12(r3)
   2d5e8:	8809883a 	mov	r4,r17
   2d5ec:	dfc00217 	ldw	ra,8(sp)
   2d5f0:	dc400117 	ldw	r17,4(sp)
   2d5f4:	dc000017 	ldw	r16,0(sp)
   2d5f8:	dec00304 	addi	sp,sp,12
   2d5fc:	003c48c1 	jmpi	3c48c <__malloc_unlock>
   2d600:	813ffe17 	ldw	r4,-8(r16)
   2d604:	2a400204 	addi	r9,r5,8
   2d608:	310dc83a 	sub	r6,r6,r4
   2d60c:	32000217 	ldw	r8,8(r6)
   2d610:	1105883a 	add	r2,r2,r4
   2d614:	42404326 	beq	r8,r9,2d724 <_free_r+0x240>
   2d618:	32400317 	ldw	r9,12(r6)
   2d61c:	0009883a 	mov	r4,zero
   2d620:	42400315 	stw	r9,12(r8)
   2d624:	4a000215 	stw	r8,8(r9)
   2d628:	003fc606 	br	2d544 <_free_r+0x60>
   2d62c:	dfc00217 	ldw	ra,8(sp)
   2d630:	dc400117 	ldw	r17,4(sp)
   2d634:	dc000017 	ldw	r16,0(sp)
   2d638:	dec00304 	addi	sp,sp,12
   2d63c:	f800283a 	ret
   2d640:	1004d0fa 	srli	r2,r2,3
   2d644:	02000044 	movi	r8,1
   2d648:	29c00117 	ldw	r7,4(r5)
   2d64c:	1087883a 	add	r3,r2,r2
   2d650:	18c7883a 	add	r3,r3,r3
   2d654:	1005d0ba 	srai	r2,r2,2
   2d658:	18c7883a 	add	r3,r3,r3
   2d65c:	28c7883a 	add	r3,r5,r3
   2d660:	19000217 	ldw	r4,8(r3)
   2d664:	4084983a 	sll	r2,r8,r2
   2d668:	30c00315 	stw	r3,12(r6)
   2d66c:	31000215 	stw	r4,8(r6)
   2d670:	11c4b03a 	or	r2,r2,r7
   2d674:	21800315 	stw	r6,12(r4)
   2d678:	8809883a 	mov	r4,r17
   2d67c:	28800115 	stw	r2,4(r5)
   2d680:	19800215 	stw	r6,8(r3)
   2d684:	dfc00217 	ldw	ra,8(sp)
   2d688:	dc400117 	ldw	r17,4(sp)
   2d68c:	dc000017 	ldw	r16,0(sp)
   2d690:	dec00304 	addi	sp,sp,12
   2d694:	003c48c1 	jmpi	3c48c <__malloc_unlock>
   2d698:	02000134 	movhi	r8,4
   2d69c:	42061404 	addi	r8,r8,6224
   2d6a0:	3a3faf1e 	bne	r7,r8,2d560 <_free_r+0x7c>
   2d6a4:	29800515 	stw	r6,20(r5)
   2d6a8:	29800415 	stw	r6,16(r5)
   2d6ac:	11000054 	ori	r4,r2,1
   2d6b0:	3087883a 	add	r3,r6,r2
   2d6b4:	31c00315 	stw	r7,12(r6)
   2d6b8:	31c00215 	stw	r7,8(r6)
   2d6bc:	31000115 	stw	r4,4(r6)
   2d6c0:	18800015 	stw	r2,0(r3)
   2d6c4:	003fc806 	br	2d5e8 <_free_r+0x104>
   2d6c8:	4200004c 	andi	r8,r8,1
   2d6cc:	3885883a 	add	r2,r7,r2
   2d6d0:	4000071e 	bne	r8,zero,2d6f0 <_free_r+0x20c>
   2d6d4:	81fffe17 	ldw	r7,-8(r16)
   2d6d8:	31cdc83a 	sub	r6,r6,r7
   2d6dc:	30c00317 	ldw	r3,12(r6)
   2d6e0:	31000217 	ldw	r4,8(r6)
   2d6e4:	11c5883a 	add	r2,r2,r7
   2d6e8:	20c00315 	stw	r3,12(r4)
   2d6ec:	19000215 	stw	r4,8(r3)
   2d6f0:	00c00134 	movhi	r3,4
   2d6f4:	18cbb504 	addi	r3,r3,11988
   2d6f8:	18c00017 	ldw	r3,0(r3)
   2d6fc:	11000054 	ori	r4,r2,1
   2d700:	31000115 	stw	r4,4(r6)
   2d704:	29800215 	stw	r6,8(r5)
   2d708:	10ffb736 	bltu	r2,r3,2d5e8 <_free_r+0x104>
   2d70c:	00800134 	movhi	r2,4
   2d710:	10929a04 	addi	r2,r2,19048
   2d714:	11400017 	ldw	r5,0(r2)
   2d718:	8809883a 	mov	r4,r17
   2d71c:	002d3a80 	call	2d3a8 <_malloc_trim_r>
   2d720:	003fb106 	br	2d5e8 <_free_r+0x104>
   2d724:	01000044 	movi	r4,1
   2d728:	003f8606 	br	2d544 <_free_r+0x60>
   2d72c:	01000504 	movi	r4,20
   2d730:	20c00b36 	bltu	r4,r3,2d760 <_free_r+0x27c>
   2d734:	190016c4 	addi	r4,r3,91
   2d738:	210f883a 	add	r7,r4,r4
   2d73c:	003f9806 	br	2d5a0 <_free_r+0xbc>
   2d740:	2009d0ba 	srai	r4,r4,2
   2d744:	00800044 	movi	r2,1
   2d748:	29c00117 	ldw	r7,4(r5)
   2d74c:	1108983a 	sll	r4,r2,r4
   2d750:	1805883a 	mov	r2,r3
   2d754:	21c8b03a 	or	r4,r4,r7
   2d758:	29000115 	stw	r4,4(r5)
   2d75c:	003f9e06 	br	2d5d8 <_free_r+0xf4>
   2d760:	01001504 	movi	r4,84
   2d764:	20c00436 	bltu	r4,r3,2d778 <_free_r+0x294>
   2d768:	1008d33a 	srli	r4,r2,12
   2d76c:	21001b84 	addi	r4,r4,110
   2d770:	210f883a 	add	r7,r4,r4
   2d774:	003f8a06 	br	2d5a0 <_free_r+0xbc>
   2d778:	01005504 	movi	r4,340
   2d77c:	20c00436 	bltu	r4,r3,2d790 <_free_r+0x2ac>
   2d780:	1008d3fa 	srli	r4,r2,15
   2d784:	21001dc4 	addi	r4,r4,119
   2d788:	210f883a 	add	r7,r4,r4
   2d78c:	003f8406 	br	2d5a0 <_free_r+0xbc>
   2d790:	01015504 	movi	r4,1364
   2d794:	20c00436 	bltu	r4,r3,2d7a8 <_free_r+0x2c4>
   2d798:	1008d4ba 	srli	r4,r2,18
   2d79c:	21001f04 	addi	r4,r4,124
   2d7a0:	210f883a 	add	r7,r4,r4
   2d7a4:	003f7e06 	br	2d5a0 <_free_r+0xbc>
   2d7a8:	01c03f04 	movi	r7,252
   2d7ac:	01001f84 	movi	r4,126
   2d7b0:	003f7b06 	br	2d5a0 <_free_r+0xbc>

0002d7b4 <_fseek_r>:
   2d7b4:	deffe804 	addi	sp,sp,-96
   2d7b8:	dd001315 	stw	r20,76(sp)
   2d7bc:	dc801115 	stw	r18,68(sp)
   2d7c0:	dc401015 	stw	r17,64(sp)
   2d7c4:	dc000f15 	stw	r16,60(sp)
   2d7c8:	dfc01715 	stw	ra,92(sp)
   2d7cc:	ddc01615 	stw	r23,88(sp)
   2d7d0:	dd801515 	stw	r22,84(sp)
   2d7d4:	dd401415 	stw	r21,80(sp)
   2d7d8:	dcc01215 	stw	r19,72(sp)
   2d7dc:	2023883a 	mov	r17,r4
   2d7e0:	2821883a 	mov	r16,r5
   2d7e4:	3029883a 	mov	r20,r6
   2d7e8:	3825883a 	mov	r18,r7
   2d7ec:	20000226 	beq	r4,zero,2d7f8 <_fseek_r+0x44>
   2d7f0:	20800e17 	ldw	r2,56(r4)
   2d7f4:	10006226 	beq	r2,zero,2d980 <_fseek_r+0x1cc>
   2d7f8:	80c0030b 	ldhu	r3,12(r16)
   2d7fc:	00804204 	movi	r2,264
   2d800:	18c0420c 	andi	r3,r3,264
   2d804:	18806326 	beq	r3,r2,2d994 <_fseek_r+0x1e0>
   2d808:	84c00a17 	ldw	r19,40(r16)
   2d80c:	98010226 	beq	r19,zero,2dc18 <_fseek_r+0x464>
   2d810:	00800044 	movi	r2,1
   2d814:	90803d26 	beq	r18,r2,2d90c <_fseek_r+0x158>
   2d818:	00800084 	movi	r2,2
   2d81c:	90800126 	beq	r18,r2,2d824 <_fseek_r+0x70>
   2d820:	90002c1e 	bne	r18,zero,2d8d4 <_fseek_r+0x120>
   2d824:	80800417 	ldw	r2,16(r16)
   2d828:	002d883a 	mov	r22,zero
   2d82c:	002b883a 	mov	r21,zero
   2d830:	1000e526 	beq	r2,zero,2dbc8 <_fseek_r+0x414>
   2d834:	80c0030b 	ldhu	r3,12(r16)
   2d838:	1882068c 	andi	r2,r3,2074
   2d83c:	1809883a 	mov	r4,r3
   2d840:	10000a1e 	bne	r2,zero,2d86c <_fseek_r+0xb8>
   2d844:	1881000c 	andi	r2,r3,1024
   2d848:	10bfffcc 	andi	r2,r2,65535
   2d84c:	10a0001c 	xori	r2,r2,32768
   2d850:	10a00004 	addi	r2,r2,-32768
   2d854:	1000631e 	bne	r2,zero,2d9e4 <_fseek_r+0x230>
   2d858:	008000f4 	movhi	r2,3
   2d85c:	10bd0d04 	addi	r2,r2,-3020
   2d860:	98805026 	beq	r19,r2,2d9a4 <_fseek_r+0x1f0>
   2d864:	18c20014 	ori	r3,r3,2048
   2d868:	80c0030d 	sth	r3,12(r16)
   2d86c:	8809883a 	mov	r4,r17
   2d870:	800b883a 	mov	r5,r16
   2d874:	002ca900 	call	2ca90 <_fflush_r>
   2d878:	1000181e 	bne	r2,zero,2d8dc <_fseek_r+0x128>
   2d87c:	81400717 	ldw	r5,28(r16)
   2d880:	8809883a 	mov	r4,r17
   2d884:	a00d883a 	mov	r6,r20
   2d888:	900f883a 	mov	r7,r18
   2d88c:	983ee83a 	callr	r19
   2d890:	00ffffc4 	movi	r3,-1
   2d894:	10c01126 	beq	r2,r3,2d8dc <_fseek_r+0x128>
   2d898:	81400c17 	ldw	r5,48(r16)
   2d89c:	28000526 	beq	r5,zero,2d8b4 <_fseek_r+0x100>
   2d8a0:	80801004 	addi	r2,r16,64
   2d8a4:	28800226 	beq	r5,r2,2d8b0 <_fseek_r+0xfc>
   2d8a8:	8809883a 	mov	r4,r17
   2d8ac:	002d4e40 	call	2d4e4 <_free_r>
   2d8b0:	80000c15 	stw	zero,48(r16)
   2d8b4:	8080030b 	ldhu	r2,12(r16)
   2d8b8:	80c00417 	ldw	r3,16(r16)
   2d8bc:	80000115 	stw	zero,4(r16)
   2d8c0:	10bdf7cc 	andi	r2,r2,63455
   2d8c4:	8080030d 	sth	r2,12(r16)
   2d8c8:	80c00015 	stw	r3,0(r16)
   2d8cc:	0005883a 	mov	r2,zero
   2d8d0:	00000306 	br	2d8e0 <_fseek_r+0x12c>
   2d8d4:	00800584 	movi	r2,22
   2d8d8:	88800015 	stw	r2,0(r17)
   2d8dc:	00bfffc4 	movi	r2,-1
   2d8e0:	dfc01717 	ldw	ra,92(sp)
   2d8e4:	ddc01617 	ldw	r23,88(sp)
   2d8e8:	dd801517 	ldw	r22,84(sp)
   2d8ec:	dd401417 	ldw	r21,80(sp)
   2d8f0:	dd001317 	ldw	r20,76(sp)
   2d8f4:	dcc01217 	ldw	r19,72(sp)
   2d8f8:	dc801117 	ldw	r18,68(sp)
   2d8fc:	dc401017 	ldw	r17,64(sp)
   2d900:	dc000f17 	ldw	r16,60(sp)
   2d904:	dec01804 	addi	sp,sp,96
   2d908:	f800283a 	ret
   2d90c:	8809883a 	mov	r4,r17
   2d910:	800b883a 	mov	r5,r16
   2d914:	002ca900 	call	2ca90 <_fflush_r>
   2d918:	8080030b 	ldhu	r2,12(r16)
   2d91c:	10c4000c 	andi	r3,r2,4096
   2d920:	18ffffcc 	andi	r3,r3,65535
   2d924:	18e0001c 	xori	r3,r3,32768
   2d928:	18e00004 	addi	r3,r3,-32768
   2d92c:	18007d26 	beq	r3,zero,2db24 <_fseek_r+0x370>
   2d930:	85401417 	ldw	r21,80(r16)
   2d934:	10c0010c 	andi	r3,r2,4
   2d938:	18ffffcc 	andi	r3,r3,65535
   2d93c:	18e0001c 	xori	r3,r3,32768
   2d940:	18e00004 	addi	r3,r3,-32768
   2d944:	18005f1e 	bne	r3,zero,2dac4 <_fseek_r+0x310>
   2d948:	1080020c 	andi	r2,r2,8
   2d94c:	10bfffcc 	andi	r2,r2,65535
   2d950:	10a0001c 	xori	r2,r2,32768
   2d954:	10a00004 	addi	r2,r2,-32768
   2d958:	10007026 	beq	r2,zero,2db1c <_fseek_r+0x368>
   2d95c:	80c00017 	ldw	r3,0(r16)
   2d960:	80800417 	ldw	r2,16(r16)
   2d964:	18000226 	beq	r3,zero,2d970 <_fseek_r+0x1bc>
   2d968:	1887c83a 	sub	r3,r3,r2
   2d96c:	a8eb883a 	add	r21,r21,r3
   2d970:	a569883a 	add	r20,r20,r21
   2d974:	05800044 	movi	r22,1
   2d978:	0025883a 	mov	r18,zero
   2d97c:	003fac06 	br	2d830 <_fseek_r+0x7c>
   2d980:	002cd4c0 	call	2cd4c <__sinit>
   2d984:	80c0030b 	ldhu	r3,12(r16)
   2d988:	00804204 	movi	r2,264
   2d98c:	18c0420c 	andi	r3,r3,264
   2d990:	18bf9d1e 	bne	r3,r2,2d808 <_fseek_r+0x54>
   2d994:	8809883a 	mov	r4,r17
   2d998:	800b883a 	mov	r5,r16
   2d99c:	002ca900 	call	2ca90 <_fflush_r>
   2d9a0:	003f9906 	br	2d808 <_fseek_r+0x54>
   2d9a4:	8140038f 	ldh	r5,14(r16)
   2d9a8:	283fae16 	blt	r5,zero,2d864 <_fseek_r+0xb0>
   2d9ac:	8809883a 	mov	r4,r17
   2d9b0:	d80d883a 	mov	r6,sp
   2d9b4:	002dc4c0 	call	2dc4c <_fstat_r>
   2d9b8:	1000741e 	bne	r2,zero,2db8c <_fseek_r+0x3d8>
   2d9bc:	d8c00117 	ldw	r3,4(sp)
   2d9c0:	00a00014 	movui	r2,32768
   2d9c4:	18fc000c 	andi	r3,r3,61440
   2d9c8:	1880701e 	bne	r3,r2,2db8c <_fseek_r+0x3d8>
   2d9cc:	8100030b 	ldhu	r4,12(r16)
   2d9d0:	00810004 	movi	r2,1024
   2d9d4:	80801315 	stw	r2,76(r16)
   2d9d8:	2084b03a 	or	r2,r4,r2
   2d9dc:	1009883a 	mov	r4,r2
   2d9e0:	8080030d 	sth	r2,12(r16)
   2d9e4:	90003f1e 	bne	r18,zero,2dae4 <_fseek_r+0x330>
   2d9e8:	a02f883a 	mov	r23,r20
   2d9ec:	b000461e 	bne	r22,zero,2db08 <_fseek_r+0x354>
   2d9f0:	2084000c 	andi	r2,r4,4096
   2d9f4:	10bfffcc 	andi	r2,r2,65535
   2d9f8:	10a0001c 	xori	r2,r2,32768
   2d9fc:	10a00004 	addi	r2,r2,-32768
   2da00:	10007526 	beq	r2,zero,2dbd8 <_fseek_r+0x424>
   2da04:	80801417 	ldw	r2,80(r16)
   2da08:	80c00117 	ldw	r3,4(r16)
   2da0c:	81400c17 	ldw	r5,48(r16)
   2da10:	10ebc83a 	sub	r21,r2,r3
   2da14:	28007926 	beq	r5,zero,2dbfc <_fseek_r+0x448>
   2da18:	81c00f17 	ldw	r7,60(r16)
   2da1c:	a9ebc83a 	sub	r21,r21,r7
   2da20:	80800e17 	ldw	r2,56(r16)
   2da24:	81800417 	ldw	r6,16(r16)
   2da28:	a8eb883a 	add	r21,r21,r3
   2da2c:	1185c83a 	sub	r2,r2,r6
   2da30:	a8abc83a 	sub	r21,r21,r2
   2da34:	3885883a 	add	r2,r7,r2
   2da38:	2208000c 	andi	r8,r4,8192
   2da3c:	423fffcc 	andi	r8,r8,65535
   2da40:	4220001c 	xori	r8,r8,32768
   2da44:	42200004 	addi	r8,r8,-32768
   2da48:	4000031e 	bne	r8,zero,2da58 <_fseek_r+0x2a4>
   2da4c:	bd400216 	blt	r23,r21,2da58 <_fseek_r+0x2a4>
   2da50:	a887883a 	add	r3,r21,r2
   2da54:	b8c03d36 	bltu	r23,r3,2db4c <_fseek_r+0x398>
   2da58:	85401317 	ldw	r21,76(r16)
   2da5c:	81400717 	ldw	r5,28(r16)
   2da60:	8809883a 	mov	r4,r17
   2da64:	056bc83a 	sub	r21,zero,r21
   2da68:	bd6a703a 	and	r21,r23,r21
   2da6c:	a80d883a 	mov	r6,r21
   2da70:	000f883a 	mov	r7,zero
   2da74:	983ee83a 	callr	r19
   2da78:	00ffffc4 	movi	r3,-1
   2da7c:	10ff7b26 	beq	r2,r3,2d86c <_fseek_r+0xb8>
   2da80:	80800417 	ldw	r2,16(r16)
   2da84:	81400c17 	ldw	r5,48(r16)
   2da88:	80000115 	stw	zero,4(r16)
   2da8c:	80800015 	stw	r2,0(r16)
   2da90:	28000526 	beq	r5,zero,2daa8 <_fseek_r+0x2f4>
   2da94:	80801004 	addi	r2,r16,64
   2da98:	28800226 	beq	r5,r2,2daa4 <_fseek_r+0x2f0>
   2da9c:	8809883a 	mov	r4,r17
   2daa0:	002d4e40 	call	2d4e4 <_free_r>
   2daa4:	80000c15 	stw	zero,48(r16)
   2daa8:	8080030b 	ldhu	r2,12(r16)
   2daac:	bd6fc83a 	sub	r23,r23,r21
   2dab0:	10bff7cc 	andi	r2,r2,65503
   2dab4:	8080030d 	sth	r2,12(r16)
   2dab8:	b800361e 	bne	r23,zero,2db94 <_fseek_r+0x3e0>
   2dabc:	0005883a 	mov	r2,zero
   2dac0:	003f8706 	br	2d8e0 <_fseek_r+0x12c>
   2dac4:	80c00117 	ldw	r3,4(r16)
   2dac8:	80800c17 	ldw	r2,48(r16)
   2dacc:	a8ebc83a 	sub	r21,r21,r3
   2dad0:	10001226 	beq	r2,zero,2db1c <_fseek_r+0x368>
   2dad4:	80c00f17 	ldw	r3,60(r16)
   2dad8:	80800417 	ldw	r2,16(r16)
   2dadc:	a8ebc83a 	sub	r21,r21,r3
   2dae0:	003fa306 	br	2d970 <_fseek_r+0x1bc>
   2dae4:	8140038f 	ldh	r5,14(r16)
   2dae8:	8809883a 	mov	r4,r17
   2daec:	d80d883a 	mov	r6,sp
   2daf0:	002dc4c0 	call	2dc4c <_fstat_r>
   2daf4:	103f5d1e 	bne	r2,zero,2d86c <_fseek_r+0xb8>
   2daf8:	ddc00417 	ldw	r23,16(sp)
   2dafc:	8100030b 	ldhu	r4,12(r16)
   2db00:	a5ef883a 	add	r23,r20,r23
   2db04:	b03fba26 	beq	r22,zero,2d9f0 <_fseek_r+0x23c>
   2db08:	81400c17 	ldw	r5,48(r16)
   2db0c:	80c00117 	ldw	r3,4(r16)
   2db10:	28003a26 	beq	r5,zero,2dbfc <_fseek_r+0x448>
   2db14:	81c00f17 	ldw	r7,60(r16)
   2db18:	003fc106 	br	2da20 <_fseek_r+0x26c>
   2db1c:	80800417 	ldw	r2,16(r16)
   2db20:	003f9306 	br	2d970 <_fseek_r+0x1bc>
   2db24:	81400717 	ldw	r5,28(r16)
   2db28:	8809883a 	mov	r4,r17
   2db2c:	000d883a 	mov	r6,zero
   2db30:	900f883a 	mov	r7,r18
   2db34:	983ee83a 	callr	r19
   2db38:	102b883a 	mov	r21,r2
   2db3c:	00bfffc4 	movi	r2,-1
   2db40:	a8bf6626 	beq	r21,r2,2d8dc <_fseek_r+0x128>
   2db44:	8080030b 	ldhu	r2,12(r16)
   2db48:	003f7a06 	br	2d934 <_fseek_r+0x180>
   2db4c:	bd6bc83a 	sub	r21,r23,r21
   2db50:	354d883a 	add	r6,r6,r21
   2db54:	1545c83a 	sub	r2,r2,r21
   2db58:	81800015 	stw	r6,0(r16)
   2db5c:	80800115 	stw	r2,4(r16)
   2db60:	28000626 	beq	r5,zero,2db7c <_fseek_r+0x3c8>
   2db64:	80801004 	addi	r2,r16,64
   2db68:	28800326 	beq	r5,r2,2db78 <_fseek_r+0x3c4>
   2db6c:	8809883a 	mov	r4,r17
   2db70:	002d4e40 	call	2d4e4 <_free_r>
   2db74:	8100030b 	ldhu	r4,12(r16)
   2db78:	80000c15 	stw	zero,48(r16)
   2db7c:	213ff7cc 	andi	r4,r4,65503
   2db80:	8100030d 	sth	r4,12(r16)
   2db84:	0005883a 	mov	r2,zero
   2db88:	003f5506 	br	2d8e0 <_fseek_r+0x12c>
   2db8c:	80c0030b 	ldhu	r3,12(r16)
   2db90:	003f3406 	br	2d864 <_fseek_r+0xb0>
   2db94:	8809883a 	mov	r4,r17
   2db98:	800b883a 	mov	r5,r16
   2db9c:	002ee900 	call	2ee90 <__srefill_r>
   2dba0:	103f321e 	bne	r2,zero,2d86c <_fseek_r+0xb8>
   2dba4:	80800117 	ldw	r2,4(r16)
   2dba8:	15ff3036 	bltu	r2,r23,2d86c <_fseek_r+0xb8>
   2dbac:	80c00017 	ldw	r3,0(r16)
   2dbb0:	15c5c83a 	sub	r2,r2,r23
   2dbb4:	80800115 	stw	r2,4(r16)
   2dbb8:	1def883a 	add	r23,r3,r23
   2dbbc:	85c00015 	stw	r23,0(r16)
   2dbc0:	0005883a 	mov	r2,zero
   2dbc4:	003f4606 	br	2d8e0 <_fseek_r+0x12c>
   2dbc8:	8809883a 	mov	r4,r17
   2dbcc:	800b883a 	mov	r5,r16
   2dbd0:	002e1980 	call	2e198 <__smakebuf_r>
   2dbd4:	003f1706 	br	2d834 <_fseek_r+0x80>
   2dbd8:	81400717 	ldw	r5,28(r16)
   2dbdc:	8809883a 	mov	r4,r17
   2dbe0:	000d883a 	mov	r6,zero
   2dbe4:	01c00044 	movi	r7,1
   2dbe8:	983ee83a 	callr	r19
   2dbec:	00ffffc4 	movi	r3,-1
   2dbf0:	10ff1e26 	beq	r2,r3,2d86c <_fseek_r+0xb8>
   2dbf4:	8100030b 	ldhu	r4,12(r16)
   2dbf8:	003f8306 	br	2da08 <_fseek_r+0x254>
   2dbfc:	80800017 	ldw	r2,0(r16)
   2dc00:	81800417 	ldw	r6,16(r16)
   2dc04:	000b883a 	mov	r5,zero
   2dc08:	1185c83a 	sub	r2,r2,r6
   2dc0c:	a8abc83a 	sub	r21,r21,r2
   2dc10:	1885883a 	add	r2,r3,r2
   2dc14:	003f8806 	br	2da38 <_fseek_r+0x284>
   2dc18:	00800744 	movi	r2,29
   2dc1c:	88800015 	stw	r2,0(r17)
   2dc20:	00bfffc4 	movi	r2,-1
   2dc24:	003f2e06 	br	2d8e0 <_fseek_r+0x12c>

0002dc28 <fseek>:
   2dc28:	00800134 	movhi	r2,4
   2dc2c:	108bb304 	addi	r2,r2,11980
   2dc30:	2007883a 	mov	r3,r4
   2dc34:	11000017 	ldw	r4,0(r2)
   2dc38:	2805883a 	mov	r2,r5
   2dc3c:	300f883a 	mov	r7,r6
   2dc40:	180b883a 	mov	r5,r3
   2dc44:	100d883a 	mov	r6,r2
   2dc48:	002d7b41 	jmpi	2d7b4 <_fseek_r>

0002dc4c <_fstat_r>:
   2dc4c:	defffd04 	addi	sp,sp,-12
   2dc50:	dc400115 	stw	r17,4(sp)
   2dc54:	dc000015 	stw	r16,0(sp)
   2dc58:	2023883a 	mov	r17,r4
   2dc5c:	04000134 	movhi	r16,4
   2dc60:	84129704 	addi	r16,r16,19036
   2dc64:	2809883a 	mov	r4,r5
   2dc68:	300b883a 	mov	r5,r6
   2dc6c:	dfc00215 	stw	ra,8(sp)
   2dc70:	80000015 	stw	zero,0(r16)
   2dc74:	003bea00 	call	3bea0 <fstat>
   2dc78:	00ffffc4 	movi	r3,-1
   2dc7c:	10c00526 	beq	r2,r3,2dc94 <_fstat_r+0x48>
   2dc80:	dfc00217 	ldw	ra,8(sp)
   2dc84:	dc400117 	ldw	r17,4(sp)
   2dc88:	dc000017 	ldw	r16,0(sp)
   2dc8c:	dec00304 	addi	sp,sp,12
   2dc90:	f800283a 	ret
   2dc94:	80c00017 	ldw	r3,0(r16)
   2dc98:	183ff926 	beq	r3,zero,2dc80 <_fstat_r+0x34>
   2dc9c:	88c00015 	stw	r3,0(r17)
   2dca0:	dfc00217 	ldw	ra,8(sp)
   2dca4:	dc400117 	ldw	r17,4(sp)
   2dca8:	dc000017 	ldw	r16,0(sp)
   2dcac:	dec00304 	addi	sp,sp,12
   2dcb0:	f800283a 	ret

0002dcb4 <_ftell_r>:
   2dcb4:	defffd04 	addi	sp,sp,-12
   2dcb8:	dc400115 	stw	r17,4(sp)
   2dcbc:	dc000015 	stw	r16,0(sp)
   2dcc0:	dfc00215 	stw	ra,8(sp)
   2dcc4:	2023883a 	mov	r17,r4
   2dcc8:	2821883a 	mov	r16,r5
   2dccc:	20000226 	beq	r4,zero,2dcd8 <_ftell_r+0x24>
   2dcd0:	20800e17 	ldw	r2,56(r4)
   2dcd4:	10003526 	beq	r2,zero,2ddac <_ftell_r+0xf8>
   2dcd8:	80800a17 	ldw	r2,40(r16)
   2dcdc:	10003526 	beq	r2,zero,2ddb4 <_ftell_r+0x100>
   2dce0:	8809883a 	mov	r4,r17
   2dce4:	800b883a 	mov	r5,r16
   2dce8:	002ca900 	call	2ca90 <_fflush_r>
   2dcec:	80c0030b 	ldhu	r3,12(r16)
   2dcf0:	1884000c 	andi	r2,r3,4096
   2dcf4:	10bfffcc 	andi	r2,r2,65535
   2dcf8:	10a0001c 	xori	r2,r2,32768
   2dcfc:	10a00004 	addi	r2,r2,-32768
   2dd00:	10002026 	beq	r2,zero,2dd84 <_ftell_r+0xd0>
   2dd04:	80801417 	ldw	r2,80(r16)
   2dd08:	1900010c 	andi	r4,r3,4
   2dd0c:	213fffcc 	andi	r4,r4,65535
   2dd10:	2120001c 	xori	r4,r4,32768
   2dd14:	21200004 	addi	r4,r4,-32768
   2dd18:	20000b26 	beq	r4,zero,2dd48 <_ftell_r+0x94>
   2dd1c:	81000117 	ldw	r4,4(r16)
   2dd20:	80c00c17 	ldw	r3,48(r16)
   2dd24:	1105c83a 	sub	r2,r2,r4
   2dd28:	18000226 	beq	r3,zero,2dd34 <_ftell_r+0x80>
   2dd2c:	80c00f17 	ldw	r3,60(r16)
   2dd30:	10c5c83a 	sub	r2,r2,r3
   2dd34:	dfc00217 	ldw	ra,8(sp)
   2dd38:	dc400117 	ldw	r17,4(sp)
   2dd3c:	dc000017 	ldw	r16,0(sp)
   2dd40:	dec00304 	addi	sp,sp,12
   2dd44:	f800283a 	ret
   2dd48:	18c0020c 	andi	r3,r3,8
   2dd4c:	18ffffcc 	andi	r3,r3,65535
   2dd50:	18e0001c 	xori	r3,r3,32768
   2dd54:	18e00004 	addi	r3,r3,-32768
   2dd58:	183ff626 	beq	r3,zero,2dd34 <_ftell_r+0x80>
   2dd5c:	80c00017 	ldw	r3,0(r16)
   2dd60:	183ff426 	beq	r3,zero,2dd34 <_ftell_r+0x80>
   2dd64:	81000417 	ldw	r4,16(r16)
   2dd68:	1907c83a 	sub	r3,r3,r4
   2dd6c:	10c5883a 	add	r2,r2,r3
   2dd70:	dfc00217 	ldw	ra,8(sp)
   2dd74:	dc400117 	ldw	r17,4(sp)
   2dd78:	dc000017 	ldw	r16,0(sp)
   2dd7c:	dec00304 	addi	sp,sp,12
   2dd80:	f800283a 	ret
   2dd84:	80800a17 	ldw	r2,40(r16)
   2dd88:	81400717 	ldw	r5,28(r16)
   2dd8c:	8809883a 	mov	r4,r17
   2dd90:	000d883a 	mov	r6,zero
   2dd94:	01c00044 	movi	r7,1
   2dd98:	103ee83a 	callr	r2
   2dd9c:	00ffffc4 	movi	r3,-1
   2dda0:	10ffe426 	beq	r2,r3,2dd34 <_ftell_r+0x80>
   2dda4:	80c0030b 	ldhu	r3,12(r16)
   2dda8:	003fd706 	br	2dd08 <_ftell_r+0x54>
   2ddac:	002cd4c0 	call	2cd4c <__sinit>
   2ddb0:	003fc906 	br	2dcd8 <_ftell_r+0x24>
   2ddb4:	00800744 	movi	r2,29
   2ddb8:	88800015 	stw	r2,0(r17)
   2ddbc:	00bfffc4 	movi	r2,-1
   2ddc0:	003fdc06 	br	2dd34 <_ftell_r+0x80>

0002ddc4 <ftell>:
   2ddc4:	00800134 	movhi	r2,4
   2ddc8:	108bb304 	addi	r2,r2,11980
   2ddcc:	200b883a 	mov	r5,r4
   2ddd0:	11000017 	ldw	r4,0(r2)
   2ddd4:	002dcb41 	jmpi	2dcb4 <_ftell_r>

0002ddd8 <_fwalk>:
   2ddd8:	defff904 	addi	sp,sp,-28
   2dddc:	dcc00315 	stw	r19,12(sp)
   2dde0:	24c0b804 	addi	r19,r4,736
   2dde4:	dd400515 	stw	r21,20(sp)
   2dde8:	dd000415 	stw	r20,16(sp)
   2ddec:	dfc00615 	stw	ra,24(sp)
   2ddf0:	dc800215 	stw	r18,8(sp)
   2ddf4:	dc400115 	stw	r17,4(sp)
   2ddf8:	dc000015 	stw	r16,0(sp)
   2ddfc:	282b883a 	mov	r21,r5
   2de00:	0029883a 	mov	r20,zero
   2de04:	002cf540 	call	2cf54 <__sfp_lock_acquire>
   2de08:	98001226 	beq	r19,zero,2de54 <_fwalk+0x7c>
   2de0c:	04bfffc4 	movi	r18,-1
   2de10:	9c400117 	ldw	r17,4(r19)
   2de14:	9c000217 	ldw	r16,8(r19)
   2de18:	8c7fffc4 	addi	r17,r17,-1
   2de1c:	88000b16 	blt	r17,zero,2de4c <_fwalk+0x74>
   2de20:	84000304 	addi	r16,r16,12
   2de24:	80c0000f 	ldh	r3,0(r16)
   2de28:	8c7fffc4 	addi	r17,r17,-1
   2de2c:	813ffd04 	addi	r4,r16,-12
   2de30:	18000426 	beq	r3,zero,2de44 <_fwalk+0x6c>
   2de34:	80c0008f 	ldh	r3,2(r16)
   2de38:	1c800226 	beq	r3,r18,2de44 <_fwalk+0x6c>
   2de3c:	a83ee83a 	callr	r21
   2de40:	a0a8b03a 	or	r20,r20,r2
   2de44:	84001704 	addi	r16,r16,92
   2de48:	8cbff61e 	bne	r17,r18,2de24 <_fwalk+0x4c>
   2de4c:	9cc00017 	ldw	r19,0(r19)
   2de50:	983fef1e 	bne	r19,zero,2de10 <_fwalk+0x38>
   2de54:	002cf580 	call	2cf58 <__sfp_lock_release>
   2de58:	a005883a 	mov	r2,r20
   2de5c:	dfc00617 	ldw	ra,24(sp)
   2de60:	dd400517 	ldw	r21,20(sp)
   2de64:	dd000417 	ldw	r20,16(sp)
   2de68:	dcc00317 	ldw	r19,12(sp)
   2de6c:	dc800217 	ldw	r18,8(sp)
   2de70:	dc400117 	ldw	r17,4(sp)
   2de74:	dc000017 	ldw	r16,0(sp)
   2de78:	dec00704 	addi	sp,sp,28
   2de7c:	f800283a 	ret

0002de80 <_fwalk_reent>:
   2de80:	defff804 	addi	sp,sp,-32
   2de84:	dcc00315 	stw	r19,12(sp)
   2de88:	24c0b804 	addi	r19,r4,736
   2de8c:	dd800615 	stw	r22,24(sp)
   2de90:	dd400515 	stw	r21,20(sp)
   2de94:	dd000415 	stw	r20,16(sp)
   2de98:	dfc00715 	stw	ra,28(sp)
   2de9c:	dc800215 	stw	r18,8(sp)
   2dea0:	dc400115 	stw	r17,4(sp)
   2dea4:	dc000015 	stw	r16,0(sp)
   2dea8:	2029883a 	mov	r20,r4
   2deac:	282b883a 	mov	r21,r5
   2deb0:	002d883a 	mov	r22,zero
   2deb4:	002cf540 	call	2cf54 <__sfp_lock_acquire>
   2deb8:	98001326 	beq	r19,zero,2df08 <_fwalk_reent+0x88>
   2debc:	04bfffc4 	movi	r18,-1
   2dec0:	9c400117 	ldw	r17,4(r19)
   2dec4:	9c000217 	ldw	r16,8(r19)
   2dec8:	8c7fffc4 	addi	r17,r17,-1
   2decc:	88000c16 	blt	r17,zero,2df00 <_fwalk_reent+0x80>
   2ded0:	84000304 	addi	r16,r16,12
   2ded4:	80c0000f 	ldh	r3,0(r16)
   2ded8:	8c7fffc4 	addi	r17,r17,-1
   2dedc:	817ffd04 	addi	r5,r16,-12
   2dee0:	18000526 	beq	r3,zero,2def8 <_fwalk_reent+0x78>
   2dee4:	80c0008f 	ldh	r3,2(r16)
   2dee8:	a009883a 	mov	r4,r20
   2deec:	1c800226 	beq	r3,r18,2def8 <_fwalk_reent+0x78>
   2def0:	a83ee83a 	callr	r21
   2def4:	b0acb03a 	or	r22,r22,r2
   2def8:	84001704 	addi	r16,r16,92
   2defc:	8cbff51e 	bne	r17,r18,2ded4 <_fwalk_reent+0x54>
   2df00:	9cc00017 	ldw	r19,0(r19)
   2df04:	983fee1e 	bne	r19,zero,2dec0 <_fwalk_reent+0x40>
   2df08:	002cf580 	call	2cf58 <__sfp_lock_release>
   2df0c:	b005883a 	mov	r2,r22
   2df10:	dfc00717 	ldw	ra,28(sp)
   2df14:	dd800617 	ldw	r22,24(sp)
   2df18:	dd400517 	ldw	r21,20(sp)
   2df1c:	dd000417 	ldw	r20,16(sp)
   2df20:	dcc00317 	ldw	r19,12(sp)
   2df24:	dc800217 	ldw	r18,8(sp)
   2df28:	dc400117 	ldw	r17,4(sp)
   2df2c:	dc000017 	ldw	r16,0(sp)
   2df30:	dec00804 	addi	sp,sp,32
   2df34:	f800283a 	ret

0002df38 <_fwrite_r>:
   2df38:	defff604 	addi	sp,sp,-40
   2df3c:	dc000515 	stw	r16,20(sp)
   2df40:	d9400315 	stw	r5,12(sp)
   2df44:	2021883a 	mov	r16,r4
   2df48:	300b883a 	mov	r5,r6
   2df4c:	3809883a 	mov	r4,r7
   2df50:	dcc00815 	stw	r19,32(sp)
   2df54:	dc800715 	stw	r18,28(sp)
   2df58:	dc400615 	stw	r17,24(sp)
   2df5c:	dfc00915 	stw	ra,36(sp)
   2df60:	3027883a 	mov	r19,r6
   2df64:	3823883a 	mov	r17,r7
   2df68:	002c1540 	call	2c154 <__mulsi3>
   2df6c:	1025883a 	mov	r18,r2
   2df70:	d8800415 	stw	r2,16(sp)
   2df74:	d8800215 	stw	r2,8(sp)
   2df78:	d8800304 	addi	r2,sp,12
   2df7c:	d8800015 	stw	r2,0(sp)
   2df80:	00800044 	movi	r2,1
   2df84:	d8800115 	stw	r2,4(sp)
   2df88:	80000226 	beq	r16,zero,2df94 <_fwrite_r+0x5c>
   2df8c:	80800e17 	ldw	r2,56(r16)
   2df90:	10001226 	beq	r2,zero,2dfdc <_fwrite_r+0xa4>
   2df94:	d9400a17 	ldw	r5,40(sp)
   2df98:	8009883a 	mov	r4,r16
   2df9c:	d80d883a 	mov	r6,sp
   2dfa0:	00350240 	call	35024 <__sfvwrite_r>
   2dfa4:	10000526 	beq	r2,zero,2dfbc <_fwrite_r+0x84>
   2dfa8:	d9000217 	ldw	r4,8(sp)
   2dfac:	980b883a 	mov	r5,r19
   2dfb0:	9109c83a 	sub	r4,r18,r4
   2dfb4:	002c1440 	call	2c144 <__udivsi3>
   2dfb8:	1023883a 	mov	r17,r2
   2dfbc:	8805883a 	mov	r2,r17
   2dfc0:	dfc00917 	ldw	ra,36(sp)
   2dfc4:	dcc00817 	ldw	r19,32(sp)
   2dfc8:	dc800717 	ldw	r18,28(sp)
   2dfcc:	dc400617 	ldw	r17,24(sp)
   2dfd0:	dc000517 	ldw	r16,20(sp)
   2dfd4:	dec00a04 	addi	sp,sp,40
   2dfd8:	f800283a 	ret
   2dfdc:	8009883a 	mov	r4,r16
   2dfe0:	002cd4c0 	call	2cd4c <__sinit>
   2dfe4:	003feb06 	br	2df94 <_fwrite_r+0x5c>

0002dfe8 <fwrite>:
   2dfe8:	00800134 	movhi	r2,4
   2dfec:	108bb304 	addi	r2,r2,11980
   2dff0:	2011883a 	mov	r8,r4
   2dff4:	11000017 	ldw	r4,0(r2)
   2dff8:	defffe04 	addi	sp,sp,-8
   2dffc:	2807883a 	mov	r3,r5
   2e000:	3005883a 	mov	r2,r6
   2e004:	d9c00015 	stw	r7,0(sp)
   2e008:	400b883a 	mov	r5,r8
   2e00c:	180d883a 	mov	r6,r3
   2e010:	100f883a 	mov	r7,r2
   2e014:	dfc00115 	stw	ra,4(sp)
   2e018:	002df380 	call	2df38 <_fwrite_r>
   2e01c:	dfc00117 	ldw	ra,4(sp)
   2e020:	dec00204 	addi	sp,sp,8
   2e024:	f800283a 	ret

0002e028 <_findenv>:
   2e028:	00c00134 	movhi	r3,4
   2e02c:	18cbb304 	addi	r3,r3,11980
   2e030:	2005883a 	mov	r2,r4
   2e034:	19000017 	ldw	r4,0(r3)
   2e038:	280d883a 	mov	r6,r5
   2e03c:	100b883a 	mov	r5,r2
   2e040:	002e0701 	jmpi	2e070 <_findenv_r>

0002e044 <getenv>:
   2e044:	00800134 	movhi	r2,4
   2e048:	108bb304 	addi	r2,r2,11980
   2e04c:	200b883a 	mov	r5,r4
   2e050:	11000017 	ldw	r4,0(r2)
   2e054:	defffe04 	addi	sp,sp,-8
   2e058:	d80d883a 	mov	r6,sp
   2e05c:	dfc00115 	stw	ra,4(sp)
   2e060:	002e0700 	call	2e070 <_findenv_r>
   2e064:	dfc00117 	ldw	ra,4(sp)
   2e068:	dec00204 	addi	sp,sp,8
   2e06c:	f800283a 	ret

0002e070 <_findenv_r>:
   2e070:	defff704 	addi	sp,sp,-36
   2e074:	dcc00315 	stw	r19,12(sp)
   2e078:	04c00134 	movhi	r19,4
   2e07c:	9ccbb604 	addi	r19,r19,11992
   2e080:	dd400515 	stw	r21,20(sp)
   2e084:	dd000415 	stw	r20,16(sp)
   2e088:	dc800215 	stw	r18,8(sp)
   2e08c:	dc000015 	stw	r16,0(sp)
   2e090:	dfc00815 	stw	ra,32(sp)
   2e094:	ddc00715 	stw	r23,28(sp)
   2e098:	dd800615 	stw	r22,24(sp)
   2e09c:	dc400115 	stw	r17,4(sp)
   2e0a0:	2029883a 	mov	r20,r4
   2e0a4:	2825883a 	mov	r18,r5
   2e0a8:	302b883a 	mov	r21,r6
   2e0ac:	003bdd40 	call	3bdd4 <__env_lock>
   2e0b0:	9c000017 	ldw	r16,0(r19)
   2e0b4:	80001926 	beq	r16,zero,2e11c <_findenv_r+0xac>
   2e0b8:	90c00007 	ldb	r3,0(r18)
   2e0bc:	18002d26 	beq	r3,zero,2e174 <_findenv_r+0x104>
   2e0c0:	01000f44 	movi	r4,61
   2e0c4:	9005883a 	mov	r2,r18
   2e0c8:	1900021e 	bne	r3,r4,2e0d4 <_findenv_r+0x64>
   2e0cc:	00002906 	br	2e174 <_findenv_r+0x104>
   2e0d0:	19000426 	beq	r3,r4,2e0e4 <_findenv_r+0x74>
   2e0d4:	10800044 	addi	r2,r2,1
   2e0d8:	10c00007 	ldb	r3,0(r2)
   2e0dc:	14a3c83a 	sub	r17,r2,r18
   2e0e0:	183ffb1e 	bne	r3,zero,2e0d0 <_findenv_r+0x60>
   2e0e4:	81000017 	ldw	r4,0(r16)
   2e0e8:	20000c26 	beq	r4,zero,2e11c <_findenv_r+0xac>
   2e0ec:	05c00f44 	movi	r23,61
   2e0f0:	900b883a 	mov	r5,r18
   2e0f4:	880d883a 	mov	r6,r17
   2e0f8:	002f6f40 	call	2f6f4 <strncmp>
   2e0fc:	1000041e 	bne	r2,zero,2e110 <_findenv_r+0xa0>
   2e100:	85800017 	ldw	r22,0(r16)
   2e104:	b46d883a 	add	r22,r22,r17
   2e108:	b0800007 	ldb	r2,0(r22)
   2e10c:	15c01126 	beq	r2,r23,2e154 <_findenv_r+0xe4>
   2e110:	84000104 	addi	r16,r16,4
   2e114:	81000017 	ldw	r4,0(r16)
   2e118:	203ff51e 	bne	r4,zero,2e0f0 <_findenv_r+0x80>
   2e11c:	a009883a 	mov	r4,r20
   2e120:	003bdf40 	call	3bdf4 <__env_unlock>
   2e124:	0005883a 	mov	r2,zero
   2e128:	dfc00817 	ldw	ra,32(sp)
   2e12c:	ddc00717 	ldw	r23,28(sp)
   2e130:	dd800617 	ldw	r22,24(sp)
   2e134:	dd400517 	ldw	r21,20(sp)
   2e138:	dd000417 	ldw	r20,16(sp)
   2e13c:	dcc00317 	ldw	r19,12(sp)
   2e140:	dc800217 	ldw	r18,8(sp)
   2e144:	dc400117 	ldw	r17,4(sp)
   2e148:	dc000017 	ldw	r16,0(sp)
   2e14c:	dec00904 	addi	sp,sp,36
   2e150:	f800283a 	ret
   2e154:	98800017 	ldw	r2,0(r19)
   2e158:	a009883a 	mov	r4,r20
   2e15c:	80a1c83a 	sub	r16,r16,r2
   2e160:	8021d0ba 	srai	r16,r16,2
   2e164:	ac000015 	stw	r16,0(r21)
   2e168:	003bdf40 	call	3bdf4 <__env_unlock>
   2e16c:	b0800044 	addi	r2,r22,1
   2e170:	003fed06 	br	2e128 <_findenv_r+0xb8>
   2e174:	0023883a 	mov	r17,zero
   2e178:	003fda06 	br	2e0e4 <_findenv_r+0x74>

0002e17c <_getenv_r>:
   2e17c:	defffe04 	addi	sp,sp,-8
   2e180:	d80d883a 	mov	r6,sp
   2e184:	dfc00115 	stw	ra,4(sp)
   2e188:	002e0700 	call	2e070 <_findenv_r>
   2e18c:	dfc00117 	ldw	ra,4(sp)
   2e190:	dec00204 	addi	sp,sp,8
   2e194:	f800283a 	ret

0002e198 <__smakebuf_r>:
   2e198:	2880030b 	ldhu	r2,12(r5)
   2e19c:	deffed04 	addi	sp,sp,-76
   2e1a0:	dc401015 	stw	r17,64(sp)
   2e1a4:	10c0008c 	andi	r3,r2,2
   2e1a8:	18ffffcc 	andi	r3,r3,65535
   2e1ac:	18e0001c 	xori	r3,r3,32768
   2e1b0:	dc000f15 	stw	r16,60(sp)
   2e1b4:	dfc01215 	stw	ra,72(sp)
   2e1b8:	dc801115 	stw	r18,68(sp)
   2e1bc:	18e00004 	addi	r3,r3,-32768
   2e1c0:	2821883a 	mov	r16,r5
   2e1c4:	2023883a 	mov	r17,r4
   2e1c8:	1800381e 	bne	r3,zero,2e2ac <__smakebuf_r+0x114>
   2e1cc:	2940038f 	ldh	r5,14(r5)
   2e1d0:	28002d16 	blt	r5,zero,2e288 <__smakebuf_r+0xf0>
   2e1d4:	d80d883a 	mov	r6,sp
   2e1d8:	002dc4c0 	call	2dc4c <_fstat_r>
   2e1dc:	10002916 	blt	r2,zero,2e284 <__smakebuf_r+0xec>
   2e1e0:	d8800117 	ldw	r2,4(sp)
   2e1e4:	00e00014 	movui	r3,32768
   2e1e8:	10bc000c 	andi	r2,r2,61440
   2e1ec:	10c03c26 	beq	r2,r3,2e2e0 <__smakebuf_r+0x148>
   2e1f0:	80c0030b 	ldhu	r3,12(r16)
   2e1f4:	18c20014 	ori	r3,r3,2048
   2e1f8:	80c0030d 	sth	r3,12(r16)
   2e1fc:	00c80004 	movi	r3,8192
   2e200:	10c00c1e 	bne	r2,r3,2e234 <__smakebuf_r+0x9c>
   2e204:	8140038f 	ldh	r5,14(r16)
   2e208:	8809883a 	mov	r4,r17
   2e20c:	00355080 	call	35508 <_isatty_r>
   2e210:	10000826 	beq	r2,zero,2e234 <__smakebuf_r+0x9c>
   2e214:	80c0030b 	ldhu	r3,12(r16)
   2e218:	808010c4 	addi	r2,r16,67
   2e21c:	80800015 	stw	r2,0(r16)
   2e220:	18c00054 	ori	r3,r3,1
   2e224:	80800415 	stw	r2,16(r16)
   2e228:	00800044 	movi	r2,1
   2e22c:	80c0030d 	sth	r3,12(r16)
   2e230:	80800515 	stw	r2,20(r16)
   2e234:	04810004 	movi	r18,1024
   2e238:	8809883a 	mov	r4,r17
   2e23c:	900b883a 	mov	r5,r18
   2e240:	002e3680 	call	2e368 <_malloc_r>
   2e244:	10003026 	beq	r2,zero,2e308 <__smakebuf_r+0x170>
   2e248:	80c0030b 	ldhu	r3,12(r16)
   2e24c:	010000f4 	movhi	r4,3
   2e250:	21332e04 	addi	r4,r4,-13128
   2e254:	89000f15 	stw	r4,60(r17)
   2e258:	18c02014 	ori	r3,r3,128
   2e25c:	80c0030d 	sth	r3,12(r16)
   2e260:	80800015 	stw	r2,0(r16)
   2e264:	80800415 	stw	r2,16(r16)
   2e268:	84800515 	stw	r18,20(r16)
   2e26c:	dfc01217 	ldw	ra,72(sp)
   2e270:	dc801117 	ldw	r18,68(sp)
   2e274:	dc401017 	ldw	r17,64(sp)
   2e278:	dc000f17 	ldw	r16,60(sp)
   2e27c:	dec01304 	addi	sp,sp,76
   2e280:	f800283a 	ret
   2e284:	8080030b 	ldhu	r2,12(r16)
   2e288:	10c0200c 	andi	r3,r2,128
   2e28c:	18ffffcc 	andi	r3,r3,65535
   2e290:	18e0001c 	xori	r3,r3,32768
   2e294:	18e00004 	addi	r3,r3,-32768
   2e298:	18000f1e 	bne	r3,zero,2e2d8 <__smakebuf_r+0x140>
   2e29c:	04810004 	movi	r18,1024
   2e2a0:	10820014 	ori	r2,r2,2048
   2e2a4:	8080030d 	sth	r2,12(r16)
   2e2a8:	003fe306 	br	2e238 <__smakebuf_r+0xa0>
   2e2ac:	288010c4 	addi	r2,r5,67
   2e2b0:	28800015 	stw	r2,0(r5)
   2e2b4:	28800415 	stw	r2,16(r5)
   2e2b8:	00800044 	movi	r2,1
   2e2bc:	28800515 	stw	r2,20(r5)
   2e2c0:	dfc01217 	ldw	ra,72(sp)
   2e2c4:	dc801117 	ldw	r18,68(sp)
   2e2c8:	dc401017 	ldw	r17,64(sp)
   2e2cc:	dc000f17 	ldw	r16,60(sp)
   2e2d0:	dec01304 	addi	sp,sp,76
   2e2d4:	f800283a 	ret
   2e2d8:	04801004 	movi	r18,64
   2e2dc:	003ff006 	br	2e2a0 <__smakebuf_r+0x108>
   2e2e0:	81000a17 	ldw	r4,40(r16)
   2e2e4:	00c000f4 	movhi	r3,3
   2e2e8:	18fd0d04 	addi	r3,r3,-3020
   2e2ec:	20ffc01e 	bne	r4,r3,2e1f0 <__smakebuf_r+0x58>
   2e2f0:	8080030b 	ldhu	r2,12(r16)
   2e2f4:	00c10004 	movi	r3,1024
   2e2f8:	80c01315 	stw	r3,76(r16)
   2e2fc:	10c4b03a 	or	r2,r2,r3
   2e300:	8080030d 	sth	r2,12(r16)
   2e304:	003fcb06 	br	2e234 <__smakebuf_r+0x9c>
   2e308:	8080030b 	ldhu	r2,12(r16)
   2e30c:	10c0800c 	andi	r3,r2,512
   2e310:	18ffffcc 	andi	r3,r3,65535
   2e314:	18e0001c 	xori	r3,r3,32768
   2e318:	18e00004 	addi	r3,r3,-32768
   2e31c:	183fd31e 	bne	r3,zero,2e26c <__smakebuf_r+0xd4>
   2e320:	10800094 	ori	r2,r2,2
   2e324:	80c010c4 	addi	r3,r16,67
   2e328:	8080030d 	sth	r2,12(r16)
   2e32c:	00800044 	movi	r2,1
   2e330:	80c00015 	stw	r3,0(r16)
   2e334:	80c00415 	stw	r3,16(r16)
   2e338:	80800515 	stw	r2,20(r16)
   2e33c:	003fcb06 	br	2e26c <__smakebuf_r+0xd4>

0002e340 <malloc>:
   2e340:	00800134 	movhi	r2,4
   2e344:	108bb304 	addi	r2,r2,11980
   2e348:	200b883a 	mov	r5,r4
   2e34c:	11000017 	ldw	r4,0(r2)
   2e350:	002e3681 	jmpi	2e368 <_malloc_r>

0002e354 <free>:
   2e354:	00800134 	movhi	r2,4
   2e358:	108bb304 	addi	r2,r2,11980
   2e35c:	200b883a 	mov	r5,r4
   2e360:	11000017 	ldw	r4,0(r2)
   2e364:	002d4e41 	jmpi	2d4e4 <_free_r>

0002e368 <_malloc_r>:
   2e368:	defff604 	addi	sp,sp,-40
   2e36c:	dc800215 	stw	r18,8(sp)
   2e370:	dfc00915 	stw	ra,36(sp)
   2e374:	df000815 	stw	fp,32(sp)
   2e378:	ddc00715 	stw	r23,28(sp)
   2e37c:	dd800615 	stw	r22,24(sp)
   2e380:	dd400515 	stw	r21,20(sp)
   2e384:	dd000415 	stw	r20,16(sp)
   2e388:	dcc00315 	stw	r19,12(sp)
   2e38c:	dc400115 	stw	r17,4(sp)
   2e390:	dc000015 	stw	r16,0(sp)
   2e394:	288002c4 	addi	r2,r5,11
   2e398:	00c00584 	movi	r3,22
   2e39c:	2025883a 	mov	r18,r4
   2e3a0:	18802b2e 	bgeu	r3,r2,2e450 <_malloc_r+0xe8>
   2e3a4:	047ffe04 	movi	r17,-8
   2e3a8:	1462703a 	and	r17,r2,r17
   2e3ac:	88002a16 	blt	r17,zero,2e458 <_malloc_r+0xf0>
   2e3b0:	89402936 	bltu	r17,r5,2e458 <_malloc_r+0xf0>
   2e3b4:	9009883a 	mov	r4,r18
   2e3b8:	003c46c0 	call	3c46c <__malloc_lock>
   2e3bc:	00807dc4 	movi	r2,503
   2e3c0:	14402936 	bltu	r2,r17,2e468 <_malloc_r+0x100>
   2e3c4:	8808d0fa 	srli	r4,r17,3
   2e3c8:	04c00134 	movhi	r19,4
   2e3cc:	9cc61204 	addi	r19,r19,6216
   2e3d0:	2105883a 	add	r2,r4,r4
   2e3d4:	1085883a 	add	r2,r2,r2
   2e3d8:	1085883a 	add	r2,r2,r2
   2e3dc:	9885883a 	add	r2,r19,r2
   2e3e0:	14000317 	ldw	r16,12(r2)
   2e3e4:	80815526 	beq	r16,r2,2e93c <_malloc_r+0x5d4>
   2e3e8:	81000117 	ldw	r4,4(r16)
   2e3ec:	00bfff04 	movi	r2,-4
   2e3f0:	80c00317 	ldw	r3,12(r16)
   2e3f4:	2084703a 	and	r2,r4,r2
   2e3f8:	8085883a 	add	r2,r16,r2
   2e3fc:	11800117 	ldw	r6,4(r2)
   2e400:	81400217 	ldw	r5,8(r16)
   2e404:	9009883a 	mov	r4,r18
   2e408:	31800054 	ori	r6,r6,1
   2e40c:	11800115 	stw	r6,4(r2)
   2e410:	28c00315 	stw	r3,12(r5)
   2e414:	19400215 	stw	r5,8(r3)
   2e418:	003c48c0 	call	3c48c <__malloc_unlock>
   2e41c:	80800204 	addi	r2,r16,8
   2e420:	dfc00917 	ldw	ra,36(sp)
   2e424:	df000817 	ldw	fp,32(sp)
   2e428:	ddc00717 	ldw	r23,28(sp)
   2e42c:	dd800617 	ldw	r22,24(sp)
   2e430:	dd400517 	ldw	r21,20(sp)
   2e434:	dd000417 	ldw	r20,16(sp)
   2e438:	dcc00317 	ldw	r19,12(sp)
   2e43c:	dc800217 	ldw	r18,8(sp)
   2e440:	dc400117 	ldw	r17,4(sp)
   2e444:	dc000017 	ldw	r16,0(sp)
   2e448:	dec00a04 	addi	sp,sp,40
   2e44c:	f800283a 	ret
   2e450:	04400404 	movi	r17,16
   2e454:	897fd72e 	bgeu	r17,r5,2e3b4 <_malloc_r+0x4c>
   2e458:	00800304 	movi	r2,12
   2e45c:	90800015 	stw	r2,0(r18)
   2e460:	0005883a 	mov	r2,zero
   2e464:	003fee06 	br	2e420 <_malloc_r+0xb8>
   2e468:	8808d27a 	srli	r4,r17,9
   2e46c:	20007126 	beq	r4,zero,2e634 <_malloc_r+0x2cc>
   2e470:	00800104 	movi	r2,4
   2e474:	1100eb36 	bltu	r2,r4,2e824 <_malloc_r+0x4bc>
   2e478:	8808d1ba 	srli	r4,r17,6
   2e47c:	21000e04 	addi	r4,r4,56
   2e480:	210b883a 	add	r5,r4,r4
   2e484:	294b883a 	add	r5,r5,r5
   2e488:	294b883a 	add	r5,r5,r5
   2e48c:	04c00134 	movhi	r19,4
   2e490:	9cc61204 	addi	r19,r19,6216
   2e494:	994b883a 	add	r5,r19,r5
   2e498:	2c000317 	ldw	r16,12(r5)
   2e49c:	2c000e26 	beq	r5,r16,2e4d8 <_malloc_r+0x170>
   2e4a0:	80c00117 	ldw	r3,4(r16)
   2e4a4:	01ffff04 	movi	r7,-4
   2e4a8:	018003c4 	movi	r6,15
   2e4ac:	19c6703a 	and	r3,r3,r7
   2e4b0:	1c45c83a 	sub	r2,r3,r17
   2e4b4:	30800716 	blt	r6,r2,2e4d4 <_malloc_r+0x16c>
   2e4b8:	1000610e 	bge	r2,zero,2e640 <_malloc_r+0x2d8>
   2e4bc:	84000317 	ldw	r16,12(r16)
   2e4c0:	2c000526 	beq	r5,r16,2e4d8 <_malloc_r+0x170>
   2e4c4:	80c00117 	ldw	r3,4(r16)
   2e4c8:	19c6703a 	and	r3,r3,r7
   2e4cc:	1c45c83a 	sub	r2,r3,r17
   2e4d0:	30bff90e 	bge	r6,r2,2e4b8 <_malloc_r+0x150>
   2e4d4:	213fffc4 	addi	r4,r4,-1
   2e4d8:	21000044 	addi	r4,r4,1
   2e4dc:	9c000417 	ldw	r16,16(r19)
   2e4e0:	00c00134 	movhi	r3,4
   2e4e4:	18c61204 	addi	r3,r3,6216
   2e4e8:	1a400204 	addi	r9,r3,8
   2e4ec:	8240ff26 	beq	r16,r9,2e8ec <_malloc_r+0x584>
   2e4f0:	81400117 	ldw	r5,4(r16)
   2e4f4:	00bfff04 	movi	r2,-4
   2e4f8:	018003c4 	movi	r6,15
   2e4fc:	2884703a 	and	r2,r5,r2
   2e500:	144bc83a 	sub	r5,r2,r17
   2e504:	3140ea16 	blt	r6,r5,2e8b0 <_malloc_r+0x548>
   2e508:	1a400515 	stw	r9,20(r3)
   2e50c:	1a400415 	stw	r9,16(r3)
   2e510:	2800570e 	bge	r5,zero,2e670 <_malloc_r+0x308>
   2e514:	01407fc4 	movi	r5,511
   2e518:	2880ca36 	bltu	r5,r2,2e844 <_malloc_r+0x4dc>
   2e51c:	1004d0fa 	srli	r2,r2,3
   2e520:	02000044 	movi	r8,1
   2e524:	19c00117 	ldw	r7,4(r3)
   2e528:	108b883a 	add	r5,r2,r2
   2e52c:	294b883a 	add	r5,r5,r5
   2e530:	1005d0ba 	srai	r2,r2,2
   2e534:	294b883a 	add	r5,r5,r5
   2e538:	28cb883a 	add	r5,r5,r3
   2e53c:	29800217 	ldw	r6,8(r5)
   2e540:	4084983a 	sll	r2,r8,r2
   2e544:	81400315 	stw	r5,12(r16)
   2e548:	81800215 	stw	r6,8(r16)
   2e54c:	11c4b03a 	or	r2,r2,r7
   2e550:	18800115 	stw	r2,4(r3)
   2e554:	2c000215 	stw	r16,8(r5)
   2e558:	34000315 	stw	r16,12(r6)
   2e55c:	200bd0ba 	srai	r5,r4,2
   2e560:	00c00044 	movi	r3,1
   2e564:	194a983a 	sll	r5,r3,r5
   2e568:	11404936 	bltu	r2,r5,2e690 <_malloc_r+0x328>
   2e56c:	1146703a 	and	r3,r2,r5
   2e570:	18000a1e 	bne	r3,zero,2e59c <_malloc_r+0x234>
   2e574:	00ffff04 	movi	r3,-4
   2e578:	294b883a 	add	r5,r5,r5
   2e57c:	20c8703a 	and	r4,r4,r3
   2e580:	1146703a 	and	r3,r2,r5
   2e584:	21000104 	addi	r4,r4,4
   2e588:	1800041e 	bne	r3,zero,2e59c <_malloc_r+0x234>
   2e58c:	294b883a 	add	r5,r5,r5
   2e590:	1146703a 	and	r3,r2,r5
   2e594:	21000104 	addi	r4,r4,4
   2e598:	183ffc26 	beq	r3,zero,2e58c <_malloc_r+0x224>
   2e59c:	023fff04 	movi	r8,-4
   2e5a0:	01c003c4 	movi	r7,15
   2e5a4:	2105883a 	add	r2,r4,r4
   2e5a8:	1085883a 	add	r2,r2,r2
   2e5ac:	1085883a 	add	r2,r2,r2
   2e5b0:	9899883a 	add	r12,r19,r2
   2e5b4:	62800304 	addi	r10,r12,12
   2e5b8:	2017883a 	mov	r11,r4
   2e5bc:	54000017 	ldw	r16,0(r10)
   2e5c0:	51bffd04 	addi	r6,r10,-12
   2e5c4:	8180041e 	bne	r16,r6,2e5d8 <_malloc_r+0x270>
   2e5c8:	0000ca06 	br	2e8f4 <_malloc_r+0x58c>
   2e5cc:	10001c0e 	bge	r2,zero,2e640 <_malloc_r+0x2d8>
   2e5d0:	84000317 	ldw	r16,12(r16)
   2e5d4:	8180c726 	beq	r16,r6,2e8f4 <_malloc_r+0x58c>
   2e5d8:	80c00117 	ldw	r3,4(r16)
   2e5dc:	1a06703a 	and	r3,r3,r8
   2e5e0:	1c45c83a 	sub	r2,r3,r17
   2e5e4:	38bff90e 	bge	r7,r2,2e5cc <_malloc_r+0x264>
   2e5e8:	81000317 	ldw	r4,12(r16)
   2e5ec:	81400217 	ldw	r5,8(r16)
   2e5f0:	8447883a 	add	r3,r16,r17
   2e5f4:	8c400054 	ori	r17,r17,1
   2e5f8:	29000315 	stw	r4,12(r5)
   2e5fc:	21400215 	stw	r5,8(r4)
   2e600:	84400115 	stw	r17,4(r16)
   2e604:	1889883a 	add	r4,r3,r2
   2e608:	11400054 	ori	r5,r2,1
   2e60c:	98c00515 	stw	r3,20(r19)
   2e610:	98c00415 	stw	r3,16(r19)
   2e614:	20800015 	stw	r2,0(r4)
   2e618:	1a400315 	stw	r9,12(r3)
   2e61c:	1a400215 	stw	r9,8(r3)
   2e620:	19400115 	stw	r5,4(r3)
   2e624:	9009883a 	mov	r4,r18
   2e628:	003c48c0 	call	3c48c <__malloc_unlock>
   2e62c:	80800204 	addi	r2,r16,8
   2e630:	003f7b06 	br	2e420 <_malloc_r+0xb8>
   2e634:	8808d0fa 	srli	r4,r17,3
   2e638:	210b883a 	add	r5,r4,r4
   2e63c:	003f9106 	br	2e484 <_malloc_r+0x11c>
   2e640:	80c7883a 	add	r3,r16,r3
   2e644:	19400117 	ldw	r5,4(r3)
   2e648:	80800317 	ldw	r2,12(r16)
   2e64c:	81000217 	ldw	r4,8(r16)
   2e650:	29400054 	ori	r5,r5,1
   2e654:	19400115 	stw	r5,4(r3)
   2e658:	20800315 	stw	r2,12(r4)
   2e65c:	11000215 	stw	r4,8(r2)
   2e660:	9009883a 	mov	r4,r18
   2e664:	003c48c0 	call	3c48c <__malloc_unlock>
   2e668:	80800204 	addi	r2,r16,8
   2e66c:	003f6c06 	br	2e420 <_malloc_r+0xb8>
   2e670:	8085883a 	add	r2,r16,r2
   2e674:	10c00117 	ldw	r3,4(r2)
   2e678:	9009883a 	mov	r4,r18
   2e67c:	18c00054 	ori	r3,r3,1
   2e680:	10c00115 	stw	r3,4(r2)
   2e684:	003c48c0 	call	3c48c <__malloc_unlock>
   2e688:	80800204 	addi	r2,r16,8
   2e68c:	003f6406 	br	2e420 <_malloc_r+0xb8>
   2e690:	9c000217 	ldw	r16,8(r19)
   2e694:	00bfff04 	movi	r2,-4
   2e698:	85400117 	ldw	r21,4(r16)
   2e69c:	a8aa703a 	and	r21,r21,r2
   2e6a0:	ac400336 	bltu	r21,r17,2e6b0 <_malloc_r+0x348>
   2e6a4:	ac45c83a 	sub	r2,r21,r17
   2e6a8:	00c003c4 	movi	r3,15
   2e6ac:	18805316 	blt	r3,r2,2e7fc <_malloc_r+0x494>
   2e6b0:	d5e6ed17 	ldw	r23,-25676(gp)
   2e6b4:	d0e00717 	ldw	r3,-32740(gp)
   2e6b8:	00bfffc4 	movi	r2,-1
   2e6bc:	8579883a 	add	fp,r16,r21
   2e6c0:	8def883a 	add	r23,r17,r23
   2e6c4:	1880d226 	beq	r3,r2,2ea10 <_malloc_r+0x6a8>
   2e6c8:	bdc403c4 	addi	r23,r23,4111
   2e6cc:	00bc0004 	movi	r2,-4096
   2e6d0:	b8ae703a 	and	r23,r23,r2
   2e6d4:	9009883a 	mov	r4,r18
   2e6d8:	b80b883a 	mov	r5,r23
   2e6dc:	002f0c80 	call	2f0c8 <_sbrk_r>
   2e6e0:	1029883a 	mov	r20,r2
   2e6e4:	00bfffc4 	movi	r2,-1
   2e6e8:	a080d126 	beq	r20,r2,2ea30 <_malloc_r+0x6c8>
   2e6ec:	a7009f36 	bltu	r20,fp,2e96c <_malloc_r+0x604>
   2e6f0:	05800134 	movhi	r22,4
   2e6f4:	b592a504 	addi	r22,r22,19092
   2e6f8:	b0800017 	ldw	r2,0(r22)
   2e6fc:	b885883a 	add	r2,r23,r2
   2e700:	b0800015 	stw	r2,0(r22)
   2e704:	e500cf26 	beq	fp,r20,2ea44 <_malloc_r+0x6dc>
   2e708:	d1200717 	ldw	r4,-32740(gp)
   2e70c:	00ffffc4 	movi	r3,-1
   2e710:	20c0e026 	beq	r4,r3,2ea94 <_malloc_r+0x72c>
   2e714:	a739c83a 	sub	fp,r20,fp
   2e718:	1705883a 	add	r2,r2,fp
   2e71c:	b0800015 	stw	r2,0(r22)
   2e720:	a08001cc 	andi	r2,r20,7
   2e724:	1000a526 	beq	r2,zero,2e9bc <_malloc_r+0x654>
   2e728:	a0a9c83a 	sub	r20,r20,r2
   2e72c:	00c40204 	movi	r3,4104
   2e730:	a5000204 	addi	r20,r20,8
   2e734:	1885c83a 	sub	r2,r3,r2
   2e738:	a5c7883a 	add	r3,r20,r23
   2e73c:	18c3ffcc 	andi	r3,r3,4095
   2e740:	10efc83a 	sub	r23,r2,r3
   2e744:	9009883a 	mov	r4,r18
   2e748:	b80b883a 	mov	r5,r23
   2e74c:	002f0c80 	call	2f0c8 <_sbrk_r>
   2e750:	00ffffc4 	movi	r3,-1
   2e754:	10c0cc26 	beq	r2,r3,2ea88 <_malloc_r+0x720>
   2e758:	1505c83a 	sub	r2,r2,r20
   2e75c:	b887883a 	add	r3,r23,r2
   2e760:	18c00054 	ori	r3,r3,1
   2e764:	b0800017 	ldw	r2,0(r22)
   2e768:	9d000215 	stw	r20,8(r19)
   2e76c:	a0c00115 	stw	r3,4(r20)
   2e770:	b885883a 	add	r2,r23,r2
   2e774:	b0800015 	stw	r2,0(r22)
   2e778:	84c00e26 	beq	r16,r19,2e7b4 <_malloc_r+0x44c>
   2e77c:	00c003c4 	movi	r3,15
   2e780:	1d40902e 	bgeu	r3,r21,2e9c4 <_malloc_r+0x65c>
   2e784:	ad7ffd04 	addi	r21,r21,-12
   2e788:	013ffe04 	movi	r4,-8
   2e78c:	a908703a 	and	r4,r21,r4
   2e790:	810b883a 	add	r5,r16,r4
   2e794:	01800144 	movi	r6,5
   2e798:	29800115 	stw	r6,4(r5)
   2e79c:	29800215 	stw	r6,8(r5)
   2e7a0:	81400117 	ldw	r5,4(r16)
   2e7a4:	2940004c 	andi	r5,r5,1
   2e7a8:	214ab03a 	or	r5,r4,r5
   2e7ac:	81400115 	stw	r5,4(r16)
   2e7b0:	1900ae36 	bltu	r3,r4,2ea6c <_malloc_r+0x704>
   2e7b4:	d0e6ec17 	ldw	r3,-25680(gp)
   2e7b8:	1880012e 	bgeu	r3,r2,2e7c0 <_malloc_r+0x458>
   2e7bc:	d0a6ec15 	stw	r2,-25680(gp)
   2e7c0:	d0e6eb17 	ldw	r3,-25684(gp)
   2e7c4:	9c000217 	ldw	r16,8(r19)
   2e7c8:	1880012e 	bgeu	r3,r2,2e7d0 <_malloc_r+0x468>
   2e7cc:	d0a6eb15 	stw	r2,-25684(gp)
   2e7d0:	80c00117 	ldw	r3,4(r16)
   2e7d4:	00bfff04 	movi	r2,-4
   2e7d8:	1886703a 	and	r3,r3,r2
   2e7dc:	1c45c83a 	sub	r2,r3,r17
   2e7e0:	1c400236 	bltu	r3,r17,2e7ec <_malloc_r+0x484>
   2e7e4:	00c003c4 	movi	r3,15
   2e7e8:	18800416 	blt	r3,r2,2e7fc <_malloc_r+0x494>
   2e7ec:	9009883a 	mov	r4,r18
   2e7f0:	003c48c0 	call	3c48c <__malloc_unlock>
   2e7f4:	0005883a 	mov	r2,zero
   2e7f8:	003f0906 	br	2e420 <_malloc_r+0xb8>
   2e7fc:	88c00054 	ori	r3,r17,1
   2e800:	10800054 	ori	r2,r2,1
   2e804:	80c00115 	stw	r3,4(r16)
   2e808:	8463883a 	add	r17,r16,r17
   2e80c:	88800115 	stw	r2,4(r17)
   2e810:	9009883a 	mov	r4,r18
   2e814:	9c400215 	stw	r17,8(r19)
   2e818:	003c48c0 	call	3c48c <__malloc_unlock>
   2e81c:	80800204 	addi	r2,r16,8
   2e820:	003eff06 	br	2e420 <_malloc_r+0xb8>
   2e824:	00800504 	movi	r2,20
   2e828:	1100492e 	bgeu	r2,r4,2e950 <_malloc_r+0x5e8>
   2e82c:	00801504 	movi	r2,84
   2e830:	11005c36 	bltu	r2,r4,2e9a4 <_malloc_r+0x63c>
   2e834:	8808d33a 	srli	r4,r17,12
   2e838:	21001b84 	addi	r4,r4,110
   2e83c:	210b883a 	add	r5,r4,r4
   2e840:	003f1006 	br	2e484 <_malloc_r+0x11c>
   2e844:	1006d27a 	srli	r3,r2,9
   2e848:	01400104 	movi	r5,4
   2e84c:	28c0432e 	bgeu	r5,r3,2e95c <_malloc_r+0x5f4>
   2e850:	01400504 	movi	r5,20
   2e854:	28c07036 	bltu	r5,r3,2ea18 <_malloc_r+0x6b0>
   2e858:	194016c4 	addi	r5,r3,91
   2e85c:	294d883a 	add	r6,r5,r5
   2e860:	318d883a 	add	r6,r6,r6
   2e864:	318d883a 	add	r6,r6,r6
   2e868:	998d883a 	add	r6,r19,r6
   2e86c:	30c00217 	ldw	r3,8(r6)
   2e870:	01c00134 	movhi	r7,4
   2e874:	39c61204 	addi	r7,r7,6216
   2e878:	19805726 	beq	r3,r6,2e9d8 <_malloc_r+0x670>
   2e87c:	01ffff04 	movi	r7,-4
   2e880:	19400117 	ldw	r5,4(r3)
   2e884:	29ca703a 	and	r5,r5,r7
   2e888:	1140022e 	bgeu	r2,r5,2e894 <_malloc_r+0x52c>
   2e88c:	18c00217 	ldw	r3,8(r3)
   2e890:	30fffb1e 	bne	r6,r3,2e880 <_malloc_r+0x518>
   2e894:	19400317 	ldw	r5,12(r3)
   2e898:	98800117 	ldw	r2,4(r19)
   2e89c:	81400315 	stw	r5,12(r16)
   2e8a0:	80c00215 	stw	r3,8(r16)
   2e8a4:	2c000215 	stw	r16,8(r5)
   2e8a8:	1c000315 	stw	r16,12(r3)
   2e8ac:	003f2b06 	br	2e55c <_malloc_r+0x1f4>
   2e8b0:	8445883a 	add	r2,r16,r17
   2e8b4:	8c400054 	ori	r17,r17,1
   2e8b8:	18800515 	stw	r2,20(r3)
   2e8bc:	18800415 	stw	r2,16(r3)
   2e8c0:	29000054 	ori	r4,r5,1
   2e8c4:	1147883a 	add	r3,r2,r5
   2e8c8:	84400115 	stw	r17,4(r16)
   2e8cc:	11000115 	stw	r4,4(r2)
   2e8d0:	12400315 	stw	r9,12(r2)
   2e8d4:	12400215 	stw	r9,8(r2)
   2e8d8:	19400015 	stw	r5,0(r3)
   2e8dc:	9009883a 	mov	r4,r18
   2e8e0:	003c48c0 	call	3c48c <__malloc_unlock>
   2e8e4:	80800204 	addi	r2,r16,8
   2e8e8:	003ecd06 	br	2e420 <_malloc_r+0xb8>
   2e8ec:	18800117 	ldw	r2,4(r3)
   2e8f0:	003f1a06 	br	2e55c <_malloc_r+0x1f4>
   2e8f4:	5ac00044 	addi	r11,r11,1
   2e8f8:	588000cc 	andi	r2,r11,3
   2e8fc:	52800204 	addi	r10,r10,8
   2e900:	103f2e1e 	bne	r2,zero,2e5bc <_malloc_r+0x254>
   2e904:	20c000cc 	andi	r3,r4,3
   2e908:	60bffe04 	addi	r2,r12,-8
   2e90c:	18006f26 	beq	r3,zero,2eacc <_malloc_r+0x764>
   2e910:	63000017 	ldw	r12,0(r12)
   2e914:	213fffc4 	addi	r4,r4,-1
   2e918:	60bffa26 	beq	r12,r2,2e904 <_malloc_r+0x59c>
   2e91c:	98800117 	ldw	r2,4(r19)
   2e920:	294b883a 	add	r5,r5,r5
   2e924:	117f5a36 	bltu	r2,r5,2e690 <_malloc_r+0x328>
   2e928:	283f5926 	beq	r5,zero,2e690 <_malloc_r+0x328>
   2e92c:	1146703a 	and	r3,r2,r5
   2e930:	18001626 	beq	r3,zero,2e98c <_malloc_r+0x624>
   2e934:	5809883a 	mov	r4,r11
   2e938:	003f1a06 	br	2e5a4 <_malloc_r+0x23c>
   2e93c:	80800204 	addi	r2,r16,8
   2e940:	84000517 	ldw	r16,20(r16)
   2e944:	143ea81e 	bne	r2,r16,2e3e8 <_malloc_r+0x80>
   2e948:	21000084 	addi	r4,r4,2
   2e94c:	003ee306 	br	2e4dc <_malloc_r+0x174>
   2e950:	210016c4 	addi	r4,r4,91
   2e954:	210b883a 	add	r5,r4,r4
   2e958:	003eca06 	br	2e484 <_malloc_r+0x11c>
   2e95c:	100ad1ba 	srli	r5,r2,6
   2e960:	29400e04 	addi	r5,r5,56
   2e964:	294d883a 	add	r6,r5,r5
   2e968:	003fbd06 	br	2e860 <_malloc_r+0x4f8>
   2e96c:	84ff6026 	beq	r16,r19,2e6f0 <_malloc_r+0x388>
   2e970:	00800134 	movhi	r2,4
   2e974:	10861204 	addi	r2,r2,6216
   2e978:	14000217 	ldw	r16,8(r2)
   2e97c:	00bfff04 	movi	r2,-4
   2e980:	80c00117 	ldw	r3,4(r16)
   2e984:	1886703a 	and	r3,r3,r2
   2e988:	003f9406 	br	2e7dc <_malloc_r+0x474>
   2e98c:	294b883a 	add	r5,r5,r5
   2e990:	1146703a 	and	r3,r2,r5
   2e994:	5ac00104 	addi	r11,r11,4
   2e998:	183ffc26 	beq	r3,zero,2e98c <_malloc_r+0x624>
   2e99c:	5809883a 	mov	r4,r11
   2e9a0:	003f0006 	br	2e5a4 <_malloc_r+0x23c>
   2e9a4:	00805504 	movi	r2,340
   2e9a8:	11001336 	bltu	r2,r4,2e9f8 <_malloc_r+0x690>
   2e9ac:	8808d3fa 	srli	r4,r17,15
   2e9b0:	21001dc4 	addi	r4,r4,119
   2e9b4:	210b883a 	add	r5,r4,r4
   2e9b8:	003eb206 	br	2e484 <_malloc_r+0x11c>
   2e9bc:	00840004 	movi	r2,4096
   2e9c0:	003f5d06 	br	2e738 <_malloc_r+0x3d0>
   2e9c4:	00800044 	movi	r2,1
   2e9c8:	a0800115 	stw	r2,4(r20)
   2e9cc:	a021883a 	mov	r16,r20
   2e9d0:	0007883a 	mov	r3,zero
   2e9d4:	003f8106 	br	2e7dc <_malloc_r+0x474>
   2e9d8:	280bd0ba 	srai	r5,r5,2
   2e9dc:	01800044 	movi	r6,1
   2e9e0:	38800117 	ldw	r2,4(r7)
   2e9e4:	314c983a 	sll	r6,r6,r5
   2e9e8:	180b883a 	mov	r5,r3
   2e9ec:	3084b03a 	or	r2,r6,r2
   2e9f0:	38800115 	stw	r2,4(r7)
   2e9f4:	003fa906 	br	2e89c <_malloc_r+0x534>
   2e9f8:	00815504 	movi	r2,1364
   2e9fc:	11001836 	bltu	r2,r4,2ea60 <_malloc_r+0x6f8>
   2ea00:	8808d4ba 	srli	r4,r17,18
   2ea04:	21001f04 	addi	r4,r4,124
   2ea08:	210b883a 	add	r5,r4,r4
   2ea0c:	003e9d06 	br	2e484 <_malloc_r+0x11c>
   2ea10:	bdc00404 	addi	r23,r23,16
   2ea14:	003f2f06 	br	2e6d4 <_malloc_r+0x36c>
   2ea18:	01401504 	movi	r5,84
   2ea1c:	28c01f36 	bltu	r5,r3,2ea9c <_malloc_r+0x734>
   2ea20:	100ad33a 	srli	r5,r2,12
   2ea24:	29401b84 	addi	r5,r5,110
   2ea28:	294d883a 	add	r6,r5,r5
   2ea2c:	003f8c06 	br	2e860 <_malloc_r+0x4f8>
   2ea30:	9c000217 	ldw	r16,8(r19)
   2ea34:	00bfff04 	movi	r2,-4
   2ea38:	80c00117 	ldw	r3,4(r16)
   2ea3c:	1886703a 	and	r3,r3,r2
   2ea40:	003f6606 	br	2e7dc <_malloc_r+0x474>
   2ea44:	e0c3ffcc 	andi	r3,fp,4095
   2ea48:	183f2f1e 	bne	r3,zero,2e708 <_malloc_r+0x3a0>
   2ea4c:	98c00217 	ldw	r3,8(r19)
   2ea50:	bd49883a 	add	r4,r23,r21
   2ea54:	21000054 	ori	r4,r4,1
   2ea58:	19000115 	stw	r4,4(r3)
   2ea5c:	003f5506 	br	2e7b4 <_malloc_r+0x44c>
   2ea60:	01403f04 	movi	r5,252
   2ea64:	01001f84 	movi	r4,126
   2ea68:	003e8606 	br	2e484 <_malloc_r+0x11c>
   2ea6c:	9009883a 	mov	r4,r18
   2ea70:	81400204 	addi	r5,r16,8
   2ea74:	002d4e40 	call	2d4e4 <_free_r>
   2ea78:	00800134 	movhi	r2,4
   2ea7c:	1092a504 	addi	r2,r2,19092
   2ea80:	10800017 	ldw	r2,0(r2)
   2ea84:	003f4b06 	br	2e7b4 <_malloc_r+0x44c>
   2ea88:	00c00044 	movi	r3,1
   2ea8c:	002f883a 	mov	r23,zero
   2ea90:	003f3406 	br	2e764 <_malloc_r+0x3fc>
   2ea94:	d5200715 	stw	r20,-32740(gp)
   2ea98:	003f2106 	br	2e720 <_malloc_r+0x3b8>
   2ea9c:	01405504 	movi	r5,340
   2eaa0:	28c00436 	bltu	r5,r3,2eab4 <_malloc_r+0x74c>
   2eaa4:	100ad3fa 	srli	r5,r2,15
   2eaa8:	29401dc4 	addi	r5,r5,119
   2eaac:	294d883a 	add	r6,r5,r5
   2eab0:	003f6b06 	br	2e860 <_malloc_r+0x4f8>
   2eab4:	01415504 	movi	r5,1364
   2eab8:	28c00936 	bltu	r5,r3,2eae0 <_malloc_r+0x778>
   2eabc:	100ad4ba 	srli	r5,r2,18
   2eac0:	29401f04 	addi	r5,r5,124
   2eac4:	294d883a 	add	r6,r5,r5
   2eac8:	003f6506 	br	2e860 <_malloc_r+0x4f8>
   2eacc:	98800117 	ldw	r2,4(r19)
   2ead0:	0146303a 	nor	r3,zero,r5
   2ead4:	1884703a 	and	r2,r3,r2
   2ead8:	98800115 	stw	r2,4(r19)
   2eadc:	003f9006 	br	2e920 <_malloc_r+0x5b8>
   2eae0:	01803f04 	movi	r6,252
   2eae4:	01401f84 	movi	r5,126
   2eae8:	003f5d06 	br	2e860 <_malloc_r+0x4f8>

0002eaec <memcpy>:
   2eaec:	defffb04 	addi	sp,sp,-20
   2eaf0:	dc000015 	stw	r16,0(sp)
   2eaf4:	dfc00415 	stw	ra,16(sp)
   2eaf8:	dcc00315 	stw	r19,12(sp)
   2eafc:	dc800215 	stw	r18,8(sp)
   2eb00:	dc400115 	stw	r17,4(sp)
   2eb04:	00c003c4 	movi	r3,15
   2eb08:	2021883a 	mov	r16,r4
   2eb0c:	3005883a 	mov	r2,r6
   2eb10:	1980032e 	bgeu	r3,r6,2eb20 <memcpy+0x34>
   2eb14:	2906b03a 	or	r3,r5,r4
   2eb18:	18c000cc 	andi	r3,r3,3
   2eb1c:	18001026 	beq	r3,zero,2eb60 <memcpy+0x74>
   2eb20:	8007883a 	mov	r3,r16
   2eb24:	288f883a 	add	r7,r5,r2
   2eb28:	10000526 	beq	r2,zero,2eb40 <memcpy+0x54>
   2eb2c:	29800003 	ldbu	r6,0(r5)
   2eb30:	18c00044 	addi	r3,r3,1
   2eb34:	29400044 	addi	r5,r5,1
   2eb38:	19bfffc5 	stb	r6,-1(r3)
   2eb3c:	29fffb1e 	bne	r5,r7,2eb2c <memcpy+0x40>
   2eb40:	8005883a 	mov	r2,r16
   2eb44:	dfc00417 	ldw	ra,16(sp)
   2eb48:	dcc00317 	ldw	r19,12(sp)
   2eb4c:	dc800217 	ldw	r18,8(sp)
   2eb50:	dc400117 	ldw	r17,4(sp)
   2eb54:	dc000017 	ldw	r16,0(sp)
   2eb58:	dec00504 	addi	sp,sp,20
   2eb5c:	f800283a 	ret
   2eb60:	32bffc04 	addi	r10,r6,-16
   2eb64:	5014d13a 	srli	r10,r10,4
   2eb68:	20800404 	addi	r2,r4,16
   2eb6c:	2007883a 	mov	r3,r4
   2eb70:	5008913a 	slli	r4,r10,4
   2eb74:	280f883a 	mov	r7,r5
   2eb78:	1105883a 	add	r2,r2,r4
   2eb7c:	3a000017 	ldw	r8,0(r7)
   2eb80:	18c00404 	addi	r3,r3,16
   2eb84:	39c00404 	addi	r7,r7,16
   2eb88:	1a3ffc15 	stw	r8,-16(r3)
   2eb8c:	3a3ffd17 	ldw	r8,-12(r7)
   2eb90:	1a3ffd15 	stw	r8,-12(r3)
   2eb94:	3a3ffe17 	ldw	r8,-8(r7)
   2eb98:	1a3ffe15 	stw	r8,-8(r3)
   2eb9c:	3a3fff17 	ldw	r8,-4(r7)
   2eba0:	1a3fff15 	stw	r8,-4(r3)
   2eba4:	18bff51e 	bne	r3,r2,2eb7c <memcpy+0x90>
   2eba8:	52800044 	addi	r10,r10,1
   2ebac:	5014913a 	slli	r10,r10,4
   2ebb0:	308003cc 	andi	r2,r6,15
   2ebb4:	010000c4 	movi	r4,3
   2ebb8:	8287883a 	add	r3,r16,r10
   2ebbc:	2a95883a 	add	r10,r5,r10
   2ebc0:	2080182e 	bgeu	r4,r2,2ec24 <memcpy+0x138>
   2ebc4:	147fff04 	addi	r17,r2,-4
   2ebc8:	8808d0ba 	srli	r4,r17,2
   2ebcc:	1a400104 	addi	r9,r3,4
   2ebd0:	180d883a 	mov	r6,r3
   2ebd4:	2105883a 	add	r2,r4,r4
   2ebd8:	1085883a 	add	r2,r2,r2
   2ebdc:	4893883a 	add	r9,r9,r2
   2ebe0:	500f883a 	mov	r7,r10
   2ebe4:	3a000017 	ldw	r8,0(r7)
   2ebe8:	31800104 	addi	r6,r6,4
   2ebec:	39c00104 	addi	r7,r7,4
   2ebf0:	323fff15 	stw	r8,-4(r6)
   2ebf4:	327ffb1e 	bne	r6,r9,2ebe4 <memcpy+0xf8>
   2ebf8:	20800044 	addi	r2,r4,1
   2ebfc:	1085883a 	add	r2,r2,r2
   2ec00:	1085883a 	add	r2,r2,r2
   2ec04:	017fff04 	movi	r5,-4
   2ec08:	18a5883a 	add	r18,r3,r2
   2ec0c:	50a7883a 	add	r19,r10,r2
   2ec10:	002c1540 	call	2c154 <__mulsi3>
   2ec14:	1445883a 	add	r2,r2,r17
   2ec18:	980b883a 	mov	r5,r19
   2ec1c:	9007883a 	mov	r3,r18
   2ec20:	003fc006 	br	2eb24 <memcpy+0x38>
   2ec24:	500b883a 	mov	r5,r10
   2ec28:	003fbe06 	br	2eb24 <memcpy+0x38>

0002ec2c <memset>:
   2ec2c:	00c000c4 	movi	r3,3
   2ec30:	2005883a 	mov	r2,r4
   2ec34:	29403fcc 	andi	r5,r5,255
   2ec38:	19802d2e 	bgeu	r3,r6,2ecf0 <memset+0xc4>
   2ec3c:	20c6703a 	and	r3,r4,r3
   2ec40:	18002e1e 	bne	r3,zero,2ecfc <memset+0xd0>
   2ec44:	2806923a 	slli	r3,r5,8
   2ec48:	010003c4 	movi	r4,15
   2ec4c:	3011883a 	mov	r8,r6
   2ec50:	1946b03a 	or	r3,r3,r5
   2ec54:	180e943a 	slli	r7,r3,16
   2ec58:	38ceb03a 	or	r7,r7,r3
   2ec5c:	1007883a 	mov	r3,r2
   2ec60:	21800f2e 	bgeu	r4,r6,2eca0 <memset+0x74>
   2ec64:	19c00015 	stw	r7,0(r3)
   2ec68:	19c00115 	stw	r7,4(r3)
   2ec6c:	19c00215 	stw	r7,8(r3)
   2ec70:	19c00315 	stw	r7,12(r3)
   2ec74:	423ffc04 	addi	r8,r8,-16
   2ec78:	18c00404 	addi	r3,r3,16
   2ec7c:	223ff936 	bltu	r4,r8,2ec64 <memset+0x38>
   2ec80:	30fffc04 	addi	r3,r6,-16
   2ec84:	1806d13a 	srli	r3,r3,4
   2ec88:	318003cc 	andi	r6,r6,15
   2ec8c:	010000c4 	movi	r4,3
   2ec90:	18c00044 	addi	r3,r3,1
   2ec94:	1806913a 	slli	r3,r3,4
   2ec98:	10c7883a 	add	r3,r2,r3
   2ec9c:	21800e2e 	bgeu	r4,r6,2ecd8 <memset+0xac>
   2eca0:	1813883a 	mov	r9,r3
   2eca4:	3011883a 	mov	r8,r6
   2eca8:	010000c4 	movi	r4,3
   2ecac:	49c00015 	stw	r7,0(r9)
   2ecb0:	423fff04 	addi	r8,r8,-4
   2ecb4:	4a400104 	addi	r9,r9,4
   2ecb8:	223ffc36 	bltu	r4,r8,2ecac <memset+0x80>
   2ecbc:	313fff04 	addi	r4,r6,-4
   2ecc0:	2008d0ba 	srli	r4,r4,2
   2ecc4:	318000cc 	andi	r6,r6,3
   2ecc8:	21000044 	addi	r4,r4,1
   2eccc:	2109883a 	add	r4,r4,r4
   2ecd0:	2109883a 	add	r4,r4,r4
   2ecd4:	1907883a 	add	r3,r3,r4
   2ecd8:	30000a26 	beq	r6,zero,2ed04 <memset+0xd8>
   2ecdc:	198d883a 	add	r6,r3,r6
   2ece0:	19400005 	stb	r5,0(r3)
   2ece4:	18c00044 	addi	r3,r3,1
   2ece8:	19bffd1e 	bne	r3,r6,2ece0 <memset+0xb4>
   2ecec:	f800283a 	ret
   2ecf0:	2007883a 	mov	r3,r4
   2ecf4:	303ff91e 	bne	r6,zero,2ecdc <memset+0xb0>
   2ecf8:	00000206 	br	2ed04 <memset+0xd8>
   2ecfc:	2007883a 	mov	r3,r4
   2ed00:	003ff606 	br	2ecdc <memset+0xb0>
   2ed04:	f800283a 	ret

0002ed08 <_open_r>:
   2ed08:	defffd04 	addi	sp,sp,-12
   2ed0c:	dc400115 	stw	r17,4(sp)
   2ed10:	dc000015 	stw	r16,0(sp)
   2ed14:	2023883a 	mov	r17,r4
   2ed18:	04000134 	movhi	r16,4
   2ed1c:	84129704 	addi	r16,r16,19036
   2ed20:	2809883a 	mov	r4,r5
   2ed24:	300b883a 	mov	r5,r6
   2ed28:	380d883a 	mov	r6,r7
   2ed2c:	dfc00215 	stw	ra,8(sp)
   2ed30:	80000015 	stw	zero,0(r16)
   2ed34:	003c5ec0 	call	3c5ec <open>
   2ed38:	00ffffc4 	movi	r3,-1
   2ed3c:	10c00526 	beq	r2,r3,2ed54 <_open_r+0x4c>
   2ed40:	dfc00217 	ldw	ra,8(sp)
   2ed44:	dc400117 	ldw	r17,4(sp)
   2ed48:	dc000017 	ldw	r16,0(sp)
   2ed4c:	dec00304 	addi	sp,sp,12
   2ed50:	f800283a 	ret
   2ed54:	80c00017 	ldw	r3,0(r16)
   2ed58:	183ff926 	beq	r3,zero,2ed40 <_open_r+0x38>
   2ed5c:	88c00015 	stw	r3,0(r17)
   2ed60:	dfc00217 	ldw	ra,8(sp)
   2ed64:	dc400117 	ldw	r17,4(sp)
   2ed68:	dc000017 	ldw	r16,0(sp)
   2ed6c:	dec00304 	addi	sp,sp,12
   2ed70:	f800283a 	ret

0002ed74 <_printf_r>:
   2ed74:	defffd04 	addi	sp,sp,-12
   2ed78:	dfc00015 	stw	ra,0(sp)
   2ed7c:	d9800115 	stw	r6,4(sp)
   2ed80:	d9c00215 	stw	r7,8(sp)
   2ed84:	280d883a 	mov	r6,r5
   2ed88:	21400217 	ldw	r5,8(r4)
   2ed8c:	d9c00104 	addi	r7,sp,4
   2ed90:	002fc540 	call	2fc54 <___vfprintf_internal_r>
   2ed94:	dfc00017 	ldw	ra,0(sp)
   2ed98:	dec00304 	addi	sp,sp,12
   2ed9c:	f800283a 	ret

0002eda0 <printf>:
   2eda0:	defffc04 	addi	sp,sp,-16
   2eda4:	dfc00015 	stw	ra,0(sp)
   2eda8:	d9400115 	stw	r5,4(sp)
   2edac:	d9800215 	stw	r6,8(sp)
   2edb0:	d9c00315 	stw	r7,12(sp)
   2edb4:	00800134 	movhi	r2,4
   2edb8:	108bb304 	addi	r2,r2,11980
   2edbc:	10800017 	ldw	r2,0(r2)
   2edc0:	200b883a 	mov	r5,r4
   2edc4:	d9800104 	addi	r6,sp,4
   2edc8:	11000217 	ldw	r4,8(r2)
   2edcc:	0031ad00 	call	31ad0 <__vfprintf_internal>
   2edd0:	dfc00017 	ldw	ra,0(sp)
   2edd4:	dec00404 	addi	sp,sp,16
   2edd8:	f800283a 	ret

0002eddc <_puts_r>:
   2eddc:	defff604 	addi	sp,sp,-40
   2ede0:	dc400815 	stw	r17,32(sp)
   2ede4:	2023883a 	mov	r17,r4
   2ede8:	2809883a 	mov	r4,r5
   2edec:	dc000715 	stw	r16,28(sp)
   2edf0:	dfc00915 	stw	ra,36(sp)
   2edf4:	2821883a 	mov	r16,r5
   2edf8:	002f6680 	call	2f668 <strlen>
   2edfc:	10c00044 	addi	r3,r2,1
   2ee00:	d8800115 	stw	r2,4(sp)
   2ee04:	89400217 	ldw	r5,8(r17)
   2ee08:	00800134 	movhi	r2,4
   2ee0c:	10846504 	addi	r2,r2,4500
   2ee10:	d8800215 	stw	r2,8(sp)
   2ee14:	00800044 	movi	r2,1
   2ee18:	d8800315 	stw	r2,12(sp)
   2ee1c:	8809883a 	mov	r4,r17
   2ee20:	00800084 	movi	r2,2
   2ee24:	d9800404 	addi	r6,sp,16
   2ee28:	dc000015 	stw	r16,0(sp)
   2ee2c:	d8c00615 	stw	r3,24(sp)
   2ee30:	dec00415 	stw	sp,16(sp)
   2ee34:	d8800515 	stw	r2,20(sp)
   2ee38:	00350240 	call	35024 <__sfvwrite_r>
   2ee3c:	1000061e 	bne	r2,zero,2ee58 <_puts_r+0x7c>
   2ee40:	00800284 	movi	r2,10
   2ee44:	dfc00917 	ldw	ra,36(sp)
   2ee48:	dc400817 	ldw	r17,32(sp)
   2ee4c:	dc000717 	ldw	r16,28(sp)
   2ee50:	dec00a04 	addi	sp,sp,40
   2ee54:	f800283a 	ret
   2ee58:	00bfffc4 	movi	r2,-1
   2ee5c:	003ff906 	br	2ee44 <_puts_r+0x68>

0002ee60 <puts>:
   2ee60:	00800134 	movhi	r2,4
   2ee64:	108bb304 	addi	r2,r2,11980
   2ee68:	200b883a 	mov	r5,r4
   2ee6c:	11000017 	ldw	r4,0(r2)
   2ee70:	002eddc1 	jmpi	2eddc <_puts_r>

0002ee74 <lflush>:
   2ee74:	20c0030b 	ldhu	r3,12(r4)
   2ee78:	00800244 	movi	r2,9
   2ee7c:	18c0024c 	andi	r3,r3,9
   2ee80:	18800226 	beq	r3,r2,2ee8c <lflush+0x18>
   2ee84:	0005883a 	mov	r2,zero
   2ee88:	f800283a 	ret
   2ee8c:	002cc781 	jmpi	2cc78 <fflush>

0002ee90 <__srefill_r>:
   2ee90:	defffd04 	addi	sp,sp,-12
   2ee94:	dc400115 	stw	r17,4(sp)
   2ee98:	dc000015 	stw	r16,0(sp)
   2ee9c:	dfc00215 	stw	ra,8(sp)
   2eea0:	2023883a 	mov	r17,r4
   2eea4:	2821883a 	mov	r16,r5
   2eea8:	20000226 	beq	r4,zero,2eeb4 <__srefill_r+0x24>
   2eeac:	20800e17 	ldw	r2,56(r4)
   2eeb0:	10004426 	beq	r2,zero,2efc4 <__srefill_r+0x134>
   2eeb4:	8080030b 	ldhu	r2,12(r16)
   2eeb8:	80000115 	stw	zero,4(r16)
   2eebc:	10c0080c 	andi	r3,r2,32
   2eec0:	18ffffcc 	andi	r3,r3,65535
   2eec4:	18e0001c 	xori	r3,r3,32768
   2eec8:	18e00004 	addi	r3,r3,-32768
   2eecc:	1800371e 	bne	r3,zero,2efac <__srefill_r+0x11c>
   2eed0:	10c0010c 	andi	r3,r2,4
   2eed4:	18ffffcc 	andi	r3,r3,65535
   2eed8:	18e0001c 	xori	r3,r3,32768
   2eedc:	18e00004 	addi	r3,r3,-32768
   2eee0:	18002226 	beq	r3,zero,2ef6c <__srefill_r+0xdc>
   2eee4:	81400c17 	ldw	r5,48(r16)
   2eee8:	28000826 	beq	r5,zero,2ef0c <__srefill_r+0x7c>
   2eeec:	80801004 	addi	r2,r16,64
   2eef0:	28800226 	beq	r5,r2,2eefc <__srefill_r+0x6c>
   2eef4:	8809883a 	mov	r4,r17
   2eef8:	002d4e40 	call	2d4e4 <_free_r>
   2eefc:	80800f17 	ldw	r2,60(r16)
   2ef00:	80000c15 	stw	zero,48(r16)
   2ef04:	80800115 	stw	r2,4(r16)
   2ef08:	1000401e 	bne	r2,zero,2f00c <__srefill_r+0x17c>
   2ef0c:	80800417 	ldw	r2,16(r16)
   2ef10:	10005026 	beq	r2,zero,2f054 <__srefill_r+0x1c4>
   2ef14:	8080030b 	ldhu	r2,12(r16)
   2ef18:	108000cc 	andi	r2,r2,3
   2ef1c:	10002b1e 	bne	r2,zero,2efcc <__srefill_r+0x13c>
   2ef20:	81800417 	ldw	r6,16(r16)
   2ef24:	80800817 	ldw	r2,32(r16)
   2ef28:	81400717 	ldw	r5,28(r16)
   2ef2c:	81c00517 	ldw	r7,20(r16)
   2ef30:	8809883a 	mov	r4,r17
   2ef34:	81800015 	stw	r6,0(r16)
   2ef38:	103ee83a 	callr	r2
   2ef3c:	8100030b 	ldhu	r4,12(r16)
   2ef40:	00f7ffc4 	movi	r3,-8193
   2ef44:	80800115 	stw	r2,4(r16)
   2ef48:	20c6703a 	and	r3,r4,r3
   2ef4c:	80c0030d 	sth	r3,12(r16)
   2ef50:	0080130e 	bge	zero,r2,2efa0 <__srefill_r+0x110>
   2ef54:	0005883a 	mov	r2,zero
   2ef58:	dfc00217 	ldw	ra,8(sp)
   2ef5c:	dc400117 	ldw	r17,4(sp)
   2ef60:	dc000017 	ldw	r16,0(sp)
   2ef64:	dec00304 	addi	sp,sp,12
   2ef68:	f800283a 	ret
   2ef6c:	10c0040c 	andi	r3,r2,16
   2ef70:	18ffffcc 	andi	r3,r3,65535
   2ef74:	18e0001c 	xori	r3,r3,32768
   2ef78:	18e00004 	addi	r3,r3,-32768
   2ef7c:	18003926 	beq	r3,zero,2f064 <__srefill_r+0x1d4>
   2ef80:	10c0020c 	andi	r3,r2,8
   2ef84:	18ffffcc 	andi	r3,r3,65535
   2ef88:	18e0001c 	xori	r3,r3,32768
   2ef8c:	18e00004 	addi	r3,r3,-32768
   2ef90:	1800261e 	bne	r3,zero,2f02c <__srefill_r+0x19c>
   2ef94:	10800114 	ori	r2,r2,4
   2ef98:	8080030d 	sth	r2,12(r16)
   2ef9c:	003fdb06 	br	2ef0c <__srefill_r+0x7c>
   2efa0:	1000111e 	bne	r2,zero,2efe8 <__srefill_r+0x158>
   2efa4:	18c00814 	ori	r3,r3,32
   2efa8:	80c0030d 	sth	r3,12(r16)
   2efac:	00bfffc4 	movi	r2,-1
   2efb0:	dfc00217 	ldw	ra,8(sp)
   2efb4:	dc400117 	ldw	r17,4(sp)
   2efb8:	dc000017 	ldw	r16,0(sp)
   2efbc:	dec00304 	addi	sp,sp,12
   2efc0:	f800283a 	ret
   2efc4:	002cd4c0 	call	2cd4c <__sinit>
   2efc8:	003fba06 	br	2eeb4 <__srefill_r+0x24>
   2efcc:	00800134 	movhi	r2,4
   2efd0:	108bb204 	addi	r2,r2,11976
   2efd4:	11000017 	ldw	r4,0(r2)
   2efd8:	014000f4 	movhi	r5,3
   2efdc:	297b9d04 	addi	r5,r5,-4492
   2efe0:	002ddd80 	call	2ddd8 <_fwalk>
   2efe4:	003fce06 	br	2ef20 <__srefill_r+0x90>
   2efe8:	18c01014 	ori	r3,r3,64
   2efec:	00bfffc4 	movi	r2,-1
   2eff0:	80000115 	stw	zero,4(r16)
   2eff4:	80c0030d 	sth	r3,12(r16)
   2eff8:	dfc00217 	ldw	ra,8(sp)
   2effc:	dc400117 	ldw	r17,4(sp)
   2f000:	dc000017 	ldw	r16,0(sp)
   2f004:	dec00304 	addi	sp,sp,12
   2f008:	f800283a 	ret
   2f00c:	80c00e17 	ldw	r3,56(r16)
   2f010:	0005883a 	mov	r2,zero
   2f014:	80c00015 	stw	r3,0(r16)
   2f018:	dfc00217 	ldw	ra,8(sp)
   2f01c:	dc400117 	ldw	r17,4(sp)
   2f020:	dc000017 	ldw	r16,0(sp)
   2f024:	dec00304 	addi	sp,sp,12
   2f028:	f800283a 	ret
   2f02c:	8809883a 	mov	r4,r17
   2f030:	800b883a 	mov	r5,r16
   2f034:	002ca900 	call	2ca90 <_fflush_r>
   2f038:	103fdc1e 	bne	r2,zero,2efac <__srefill_r+0x11c>
   2f03c:	8080030b 	ldhu	r2,12(r16)
   2f040:	00fffdc4 	movi	r3,-9
   2f044:	80000215 	stw	zero,8(r16)
   2f048:	1884703a 	and	r2,r3,r2
   2f04c:	80000615 	stw	zero,24(r16)
   2f050:	003fd006 	br	2ef94 <__srefill_r+0x104>
   2f054:	8809883a 	mov	r4,r17
   2f058:	800b883a 	mov	r5,r16
   2f05c:	002e1980 	call	2e198 <__smakebuf_r>
   2f060:	003fac06 	br	2ef14 <__srefill_r+0x84>
   2f064:	00c00244 	movi	r3,9
   2f068:	10801014 	ori	r2,r2,64
   2f06c:	88c00015 	stw	r3,0(r17)
   2f070:	8080030d 	sth	r2,12(r16)
   2f074:	00bfffc4 	movi	r2,-1
   2f078:	003fb706 	br	2ef58 <__srefill_r+0xc8>

0002f07c <_rewind_r>:
   2f07c:	defffe04 	addi	sp,sp,-8
   2f080:	000d883a 	mov	r6,zero
   2f084:	000f883a 	mov	r7,zero
   2f088:	dc000015 	stw	r16,0(sp)
   2f08c:	dfc00115 	stw	ra,4(sp)
   2f090:	2821883a 	mov	r16,r5
   2f094:	002d7b40 	call	2d7b4 <_fseek_r>
   2f098:	8080030b 	ldhu	r2,12(r16)
   2f09c:	10bfe7cc 	andi	r2,r2,65439
   2f0a0:	8080030d 	sth	r2,12(r16)
   2f0a4:	dfc00117 	ldw	ra,4(sp)
   2f0a8:	dc000017 	ldw	r16,0(sp)
   2f0ac:	dec00204 	addi	sp,sp,8
   2f0b0:	f800283a 	ret

0002f0b4 <rewind>:
   2f0b4:	00800134 	movhi	r2,4
   2f0b8:	108bb304 	addi	r2,r2,11980
   2f0bc:	200b883a 	mov	r5,r4
   2f0c0:	11000017 	ldw	r4,0(r2)
   2f0c4:	002f07c1 	jmpi	2f07c <_rewind_r>

0002f0c8 <_sbrk_r>:
   2f0c8:	defffd04 	addi	sp,sp,-12
   2f0cc:	dc400115 	stw	r17,4(sp)
   2f0d0:	dc000015 	stw	r16,0(sp)
   2f0d4:	2023883a 	mov	r17,r4
   2f0d8:	04000134 	movhi	r16,4
   2f0dc:	84129704 	addi	r16,r16,19036
   2f0e0:	2809883a 	mov	r4,r5
   2f0e4:	dfc00215 	stw	ra,8(sp)
   2f0e8:	80000015 	stw	zero,0(r16)
   2f0ec:	003c9080 	call	3c908 <sbrk>
   2f0f0:	00ffffc4 	movi	r3,-1
   2f0f4:	10c00526 	beq	r2,r3,2f10c <_sbrk_r+0x44>
   2f0f8:	dfc00217 	ldw	ra,8(sp)
   2f0fc:	dc400117 	ldw	r17,4(sp)
   2f100:	dc000017 	ldw	r16,0(sp)
   2f104:	dec00304 	addi	sp,sp,12
   2f108:	f800283a 	ret
   2f10c:	80c00017 	ldw	r3,0(r16)
   2f110:	183ff926 	beq	r3,zero,2f0f8 <_sbrk_r+0x30>
   2f114:	88c00015 	stw	r3,0(r17)
   2f118:	dfc00217 	ldw	ra,8(sp)
   2f11c:	dc400117 	ldw	r17,4(sp)
   2f120:	dc000017 	ldw	r16,0(sp)
   2f124:	dec00304 	addi	sp,sp,12
   2f128:	f800283a 	ret

0002f12c <scanf>:
   2f12c:	defffc04 	addi	sp,sp,-16
   2f130:	dfc00015 	stw	ra,0(sp)
   2f134:	d9400115 	stw	r5,4(sp)
   2f138:	d9800215 	stw	r6,8(sp)
   2f13c:	d9c00315 	stw	r7,12(sp)
   2f140:	00800134 	movhi	r2,4
   2f144:	108bb304 	addi	r2,r2,11980
   2f148:	10800017 	ldw	r2,0(r2)
   2f14c:	200d883a 	mov	r6,r4
   2f150:	d9c00104 	addi	r7,sp,4
   2f154:	11400117 	ldw	r5,4(r2)
   2f158:	1009883a 	mov	r4,r2
   2f15c:	0031af40 	call	31af4 <__svfscanf_r>
   2f160:	dfc00017 	ldw	ra,0(sp)
   2f164:	dec00404 	addi	sp,sp,16
   2f168:	f800283a 	ret

0002f16c <_scanf_r>:
   2f16c:	defffd04 	addi	sp,sp,-12
   2f170:	dfc00015 	stw	ra,0(sp)
   2f174:	d9800115 	stw	r6,4(sp)
   2f178:	d9c00215 	stw	r7,8(sp)
   2f17c:	280d883a 	mov	r6,r5
   2f180:	21400117 	ldw	r5,4(r4)
   2f184:	d9c00104 	addi	r7,sp,4
   2f188:	0031af40 	call	31af4 <__svfscanf_r>
   2f18c:	dfc00017 	ldw	ra,0(sp)
   2f190:	dec00304 	addi	sp,sp,12
   2f194:	f800283a 	ret

0002f198 <_sprintf_r>:
   2f198:	deffe704 	addi	sp,sp,-100
   2f19c:	2807883a 	mov	r3,r5
   2f1a0:	dfc01715 	stw	ra,92(sp)
   2f1a4:	d9c01815 	stw	r7,96(sp)
   2f1a8:	00a00034 	movhi	r2,32768
   2f1ac:	10bfffc4 	addi	r2,r2,-1
   2f1b0:	02008204 	movi	r8,520
   2f1b4:	d8800215 	stw	r2,8(sp)
   2f1b8:	d8800515 	stw	r2,20(sp)
   2f1bc:	d80b883a 	mov	r5,sp
   2f1c0:	d9c01804 	addi	r7,sp,96
   2f1c4:	00bfffc4 	movi	r2,-1
   2f1c8:	d8c00015 	stw	r3,0(sp)
   2f1cc:	d8c00415 	stw	r3,16(sp)
   2f1d0:	da00030d 	sth	r8,12(sp)
   2f1d4:	d880038d 	sth	r2,14(sp)
   2f1d8:	002fc540 	call	2fc54 <___vfprintf_internal_r>
   2f1dc:	d8c00017 	ldw	r3,0(sp)
   2f1e0:	18000005 	stb	zero,0(r3)
   2f1e4:	dfc01717 	ldw	ra,92(sp)
   2f1e8:	dec01904 	addi	sp,sp,100
   2f1ec:	f800283a 	ret

0002f1f0 <sprintf>:
   2f1f0:	deffe604 	addi	sp,sp,-104
   2f1f4:	2007883a 	mov	r3,r4
   2f1f8:	dfc01715 	stw	ra,92(sp)
   2f1fc:	d9801815 	stw	r6,96(sp)
   2f200:	d9c01915 	stw	r7,100(sp)
   2f204:	00800134 	movhi	r2,4
   2f208:	108bb304 	addi	r2,r2,11980
   2f20c:	11000017 	ldw	r4,0(r2)
   2f210:	00a00034 	movhi	r2,32768
   2f214:	10bfffc4 	addi	r2,r2,-1
   2f218:	280d883a 	mov	r6,r5
   2f21c:	02008204 	movi	r8,520
   2f220:	d8800215 	stw	r2,8(sp)
   2f224:	d8800515 	stw	r2,20(sp)
   2f228:	d80b883a 	mov	r5,sp
   2f22c:	d9c01804 	addi	r7,sp,96
   2f230:	00bfffc4 	movi	r2,-1
   2f234:	d8c00015 	stw	r3,0(sp)
   2f238:	d8c00415 	stw	r3,16(sp)
   2f23c:	da00030d 	sth	r8,12(sp)
   2f240:	d880038d 	sth	r2,14(sp)
   2f244:	002fc540 	call	2fc54 <___vfprintf_internal_r>
   2f248:	d8c00017 	ldw	r3,0(sp)
   2f24c:	18000005 	stb	zero,0(r3)
   2f250:	dfc01717 	ldw	ra,92(sp)
   2f254:	dec01a04 	addi	sp,sp,104
   2f258:	f800283a 	ret

0002f25c <eofread>:
   2f25c:	0005883a 	mov	r2,zero
   2f260:	f800283a 	ret

0002f264 <sscanf>:
   2f264:	deffe504 	addi	sp,sp,-108
   2f268:	dfc01815 	stw	ra,96(sp)
   2f26c:	dc001715 	stw	r16,92(sp)
   2f270:	d9801915 	stw	r6,100(sp)
   2f274:	d9c01a15 	stw	r7,104(sp)
   2f278:	00c08104 	movi	r3,516
   2f27c:	2821883a 	mov	r16,r5
   2f280:	d8c0030d 	sth	r3,12(sp)
   2f284:	d9000015 	stw	r4,0(sp)
   2f288:	d9000415 	stw	r4,16(sp)
   2f28c:	002f6680 	call	2f668 <strlen>
   2f290:	00c00134 	movhi	r3,4
   2f294:	18cbb304 	addi	r3,r3,11980
   2f298:	19000017 	ldw	r4,0(r3)
   2f29c:	d8800115 	stw	r2,4(sp)
   2f2a0:	d8800515 	stw	r2,20(sp)
   2f2a4:	008000f4 	movhi	r2,3
   2f2a8:	10bc9704 	addi	r2,r2,-3492
   2f2ac:	d8800815 	stw	r2,32(sp)
   2f2b0:	d80b883a 	mov	r5,sp
   2f2b4:	800d883a 	mov	r6,r16
   2f2b8:	d9c01904 	addi	r7,sp,100
   2f2bc:	00bfffc4 	movi	r2,-1
   2f2c0:	d8000c15 	stw	zero,48(sp)
   2f2c4:	d8001115 	stw	zero,68(sp)
   2f2c8:	d880038d 	sth	r2,14(sp)
   2f2cc:	0031af40 	call	31af4 <__svfscanf_r>
   2f2d0:	dfc01817 	ldw	ra,96(sp)
   2f2d4:	dc001717 	ldw	r16,92(sp)
   2f2d8:	dec01b04 	addi	sp,sp,108
   2f2dc:	f800283a 	ret

0002f2e0 <_sscanf_r>:
   2f2e0:	deffe504 	addi	sp,sp,-108
   2f2e4:	dc001815 	stw	r16,96(sp)
   2f2e8:	2021883a 	mov	r16,r4
   2f2ec:	dfc01915 	stw	ra,100(sp)
   2f2f0:	d9c01a15 	stw	r7,104(sp)
   2f2f4:	00808104 	movi	r2,516
   2f2f8:	2809883a 	mov	r4,r5
   2f2fc:	d9400015 	stw	r5,0(sp)
   2f300:	d9400415 	stw	r5,16(sp)
   2f304:	d9801715 	stw	r6,92(sp)
   2f308:	d880030d 	sth	r2,12(sp)
   2f30c:	002f6680 	call	2f668 <strlen>
   2f310:	d9801717 	ldw	r6,92(sp)
   2f314:	d8800115 	stw	r2,4(sp)
   2f318:	d8800515 	stw	r2,20(sp)
   2f31c:	008000f4 	movhi	r2,3
   2f320:	10bc9704 	addi	r2,r2,-3492
   2f324:	d8800815 	stw	r2,32(sp)
   2f328:	8009883a 	mov	r4,r16
   2f32c:	d80b883a 	mov	r5,sp
   2f330:	d9c01a04 	addi	r7,sp,104
   2f334:	00bfffc4 	movi	r2,-1
   2f338:	d8000c15 	stw	zero,48(sp)
   2f33c:	d8001115 	stw	zero,68(sp)
   2f340:	d880038d 	sth	r2,14(sp)
   2f344:	0031af40 	call	31af4 <__svfscanf_r>
   2f348:	dfc01917 	ldw	ra,100(sp)
   2f34c:	dc001817 	ldw	r16,96(sp)
   2f350:	dec01b04 	addi	sp,sp,108
   2f354:	f800283a 	ret

0002f358 <__sread>:
   2f358:	defffe04 	addi	sp,sp,-8
   2f35c:	dc000015 	stw	r16,0(sp)
   2f360:	2821883a 	mov	r16,r5
   2f364:	2940038f 	ldh	r5,14(r5)
   2f368:	dfc00115 	stw	ra,4(sp)
   2f36c:	0036aa80 	call	36aa8 <_read_r>
   2f370:	10000716 	blt	r2,zero,2f390 <__sread+0x38>
   2f374:	80c01417 	ldw	r3,80(r16)
   2f378:	1887883a 	add	r3,r3,r2
   2f37c:	80c01415 	stw	r3,80(r16)
   2f380:	dfc00117 	ldw	ra,4(sp)
   2f384:	dc000017 	ldw	r16,0(sp)
   2f388:	dec00204 	addi	sp,sp,8
   2f38c:	f800283a 	ret
   2f390:	80c0030b 	ldhu	r3,12(r16)
   2f394:	18fbffcc 	andi	r3,r3,61439
   2f398:	80c0030d 	sth	r3,12(r16)
   2f39c:	dfc00117 	ldw	ra,4(sp)
   2f3a0:	dc000017 	ldw	r16,0(sp)
   2f3a4:	dec00204 	addi	sp,sp,8
   2f3a8:	f800283a 	ret

0002f3ac <__swrite>:
   2f3ac:	2880030b 	ldhu	r2,12(r5)
   2f3b0:	defffb04 	addi	sp,sp,-20
   2f3b4:	dcc00315 	stw	r19,12(sp)
   2f3b8:	10c0400c 	andi	r3,r2,256
   2f3bc:	18ffffcc 	andi	r3,r3,65535
   2f3c0:	18e0001c 	xori	r3,r3,32768
   2f3c4:	dc800215 	stw	r18,8(sp)
   2f3c8:	dc400115 	stw	r17,4(sp)
   2f3cc:	dc000015 	stw	r16,0(sp)
   2f3d0:	dfc00415 	stw	ra,16(sp)
   2f3d4:	18e00004 	addi	r3,r3,-32768
   2f3d8:	2821883a 	mov	r16,r5
   2f3dc:	2027883a 	mov	r19,r4
   2f3e0:	3025883a 	mov	r18,r6
   2f3e4:	3823883a 	mov	r17,r7
   2f3e8:	18000526 	beq	r3,zero,2f400 <__swrite+0x54>
   2f3ec:	2940038f 	ldh	r5,14(r5)
   2f3f0:	000d883a 	mov	r6,zero
   2f3f4:	01c00084 	movi	r7,2
   2f3f8:	00356800 	call	35680 <_lseek_r>
   2f3fc:	8080030b 	ldhu	r2,12(r16)
   2f400:	8140038f 	ldh	r5,14(r16)
   2f404:	10bbffcc 	andi	r2,r2,61439
   2f408:	9809883a 	mov	r4,r19
   2f40c:	900d883a 	mov	r6,r18
   2f410:	880f883a 	mov	r7,r17
   2f414:	8080030d 	sth	r2,12(r16)
   2f418:	dfc00417 	ldw	ra,16(sp)
   2f41c:	dcc00317 	ldw	r19,12(sp)
   2f420:	dc800217 	ldw	r18,8(sp)
   2f424:	dc400117 	ldw	r17,4(sp)
   2f428:	dc000017 	ldw	r16,0(sp)
   2f42c:	dec00504 	addi	sp,sp,20
   2f430:	003327c1 	jmpi	3327c <_write_r>

0002f434 <__sseek>:
   2f434:	defffe04 	addi	sp,sp,-8
   2f438:	dc000015 	stw	r16,0(sp)
   2f43c:	2821883a 	mov	r16,r5
   2f440:	2940038f 	ldh	r5,14(r5)
   2f444:	dfc00115 	stw	ra,4(sp)
   2f448:	00356800 	call	35680 <_lseek_r>
   2f44c:	00ffffc4 	movi	r3,-1
   2f450:	10c00826 	beq	r2,r3,2f474 <__sseek+0x40>
   2f454:	80c0030b 	ldhu	r3,12(r16)
   2f458:	80801415 	stw	r2,80(r16)
   2f45c:	18c40014 	ori	r3,r3,4096
   2f460:	80c0030d 	sth	r3,12(r16)
   2f464:	dfc00117 	ldw	ra,4(sp)
   2f468:	dc000017 	ldw	r16,0(sp)
   2f46c:	dec00204 	addi	sp,sp,8
   2f470:	f800283a 	ret
   2f474:	80c0030b 	ldhu	r3,12(r16)
   2f478:	18fbffcc 	andi	r3,r3,61439
   2f47c:	80c0030d 	sth	r3,12(r16)
   2f480:	dfc00117 	ldw	ra,4(sp)
   2f484:	dc000017 	ldw	r16,0(sp)
   2f488:	dec00204 	addi	sp,sp,8
   2f48c:	f800283a 	ret

0002f490 <__sclose>:
   2f490:	2940038f 	ldh	r5,14(r5)
   2f494:	00335fc1 	jmpi	335fc <_close_r>

0002f498 <strcat>:
   2f498:	defffe04 	addi	sp,sp,-8
   2f49c:	dc000015 	stw	r16,0(sp)
   2f4a0:	dfc00115 	stw	ra,4(sp)
   2f4a4:	208000cc 	andi	r2,r4,3
   2f4a8:	2021883a 	mov	r16,r4
   2f4ac:	1000141e 	bne	r2,zero,2f500 <strcat+0x68>
   2f4b0:	20800017 	ldw	r2,0(r4)
   2f4b4:	027fbff4 	movhi	r9,65279
   2f4b8:	4a7fbfc4 	addi	r9,r9,-257
   2f4bc:	02202074 	movhi	r8,32897
   2f4c0:	42202004 	addi	r8,r8,-32640
   2f4c4:	1247883a 	add	r3,r2,r9
   2f4c8:	0084303a 	nor	r2,zero,r2
   2f4cc:	1884703a 	and	r2,r3,r2
   2f4d0:	1204703a 	and	r2,r2,r8
   2f4d4:	2007883a 	mov	r3,r4
   2f4d8:	1000091e 	bne	r2,zero,2f500 <strcat+0x68>
   2f4dc:	18c00104 	addi	r3,r3,4
   2f4e0:	19800017 	ldw	r6,0(r3)
   2f4e4:	324f883a 	add	r7,r6,r9
   2f4e8:	018c303a 	nor	r6,zero,r6
   2f4ec:	398c703a 	and	r6,r7,r6
   2f4f0:	320c703a 	and	r6,r6,r8
   2f4f4:	303ff926 	beq	r6,zero,2f4dc <strcat+0x44>
   2f4f8:	1809883a 	mov	r4,r3
   2f4fc:	00000106 	br	2f504 <strcat+0x6c>
   2f500:	8009883a 	mov	r4,r16
   2f504:	20800007 	ldb	r2,0(r4)
   2f508:	10000326 	beq	r2,zero,2f518 <strcat+0x80>
   2f50c:	21000044 	addi	r4,r4,1
   2f510:	20c00007 	ldb	r3,0(r4)
   2f514:	183ffd1e 	bne	r3,zero,2f50c <strcat+0x74>
   2f518:	002f5d40 	call	2f5d4 <strcpy>
   2f51c:	8005883a 	mov	r2,r16
   2f520:	dfc00117 	ldw	ra,4(sp)
   2f524:	dc000017 	ldw	r16,0(sp)
   2f528:	dec00204 	addi	sp,sp,8
   2f52c:	f800283a 	ret

0002f530 <strcmp>:
   2f530:	2904b03a 	or	r2,r5,r4
   2f534:	108000cc 	andi	r2,r2,3
   2f538:	1000171e 	bne	r2,zero,2f598 <strcmp+0x68>
   2f53c:	20800017 	ldw	r2,0(r4)
   2f540:	28c00017 	ldw	r3,0(r5)
   2f544:	10c0141e 	bne	r2,r3,2f598 <strcmp+0x68>
   2f548:	027fbff4 	movhi	r9,65279
   2f54c:	4a7fbfc4 	addi	r9,r9,-257
   2f550:	1247883a 	add	r3,r2,r9
   2f554:	0084303a 	nor	r2,zero,r2
   2f558:	1884703a 	and	r2,r3,r2
   2f55c:	02202074 	movhi	r8,32897
   2f560:	42202004 	addi	r8,r8,-32640
   2f564:	1204703a 	and	r2,r2,r8
   2f568:	10000226 	beq	r2,zero,2f574 <strcmp+0x44>
   2f56c:	00001706 	br	2f5cc <strcmp+0x9c>
   2f570:	3000161e 	bne	r6,zero,2f5cc <strcmp+0x9c>
   2f574:	21000104 	addi	r4,r4,4
   2f578:	20800017 	ldw	r2,0(r4)
   2f57c:	29400104 	addi	r5,r5,4
   2f580:	28c00017 	ldw	r3,0(r5)
   2f584:	124f883a 	add	r7,r2,r9
   2f588:	008c303a 	nor	r6,zero,r2
   2f58c:	398c703a 	and	r6,r7,r6
   2f590:	320c703a 	and	r6,r6,r8
   2f594:	10fff626 	beq	r2,r3,2f570 <strcmp+0x40>
   2f598:	20800007 	ldb	r2,0(r4)
   2f59c:	1000051e 	bne	r2,zero,2f5b4 <strcmp+0x84>
   2f5a0:	00000606 	br	2f5bc <strcmp+0x8c>
   2f5a4:	21000044 	addi	r4,r4,1
   2f5a8:	20800007 	ldb	r2,0(r4)
   2f5ac:	29400044 	addi	r5,r5,1
   2f5b0:	10000226 	beq	r2,zero,2f5bc <strcmp+0x8c>
   2f5b4:	28c00007 	ldb	r3,0(r5)
   2f5b8:	10fffa26 	beq	r2,r3,2f5a4 <strcmp+0x74>
   2f5bc:	20c00003 	ldbu	r3,0(r4)
   2f5c0:	28800003 	ldbu	r2,0(r5)
   2f5c4:	1885c83a 	sub	r2,r3,r2
   2f5c8:	f800283a 	ret
   2f5cc:	0005883a 	mov	r2,zero
   2f5d0:	f800283a 	ret

0002f5d4 <strcpy>:
   2f5d4:	2906b03a 	or	r3,r5,r4
   2f5d8:	18c000cc 	andi	r3,r3,3
   2f5dc:	2005883a 	mov	r2,r4
   2f5e0:	18001a1e 	bne	r3,zero,2f64c <strcpy+0x78>
   2f5e4:	29800017 	ldw	r6,0(r5)
   2f5e8:	02bfbff4 	movhi	r10,65279
   2f5ec:	52bfbfc4 	addi	r10,r10,-257
   2f5f0:	02602074 	movhi	r9,32897
   2f5f4:	4a602004 	addi	r9,r9,-32640
   2f5f8:	0188303a 	nor	r4,zero,r6
   2f5fc:	3287883a 	add	r3,r6,r10
   2f600:	20c6703a 	and	r3,r4,r3
   2f604:	1a46703a 	and	r3,r3,r9
   2f608:	1800101e 	bne	r3,zero,2f64c <strcpy+0x78>
   2f60c:	1007883a 	mov	r3,r2
   2f610:	19800015 	stw	r6,0(r3)
   2f614:	29400104 	addi	r5,r5,4
   2f618:	29800017 	ldw	r6,0(r5)
   2f61c:	18c00104 	addi	r3,r3,4
   2f620:	0190303a 	nor	r8,zero,r6
   2f624:	328f883a 	add	r7,r6,r10
   2f628:	41ce703a 	and	r7,r8,r7
   2f62c:	3a4e703a 	and	r7,r7,r9
   2f630:	383ff726 	beq	r7,zero,2f610 <strcpy+0x3c>
   2f634:	29800007 	ldb	r6,0(r5)
   2f638:	18c00044 	addi	r3,r3,1
   2f63c:	29400044 	addi	r5,r5,1
   2f640:	19bfffc5 	stb	r6,-1(r3)
   2f644:	3000021e 	bne	r6,zero,2f650 <strcpy+0x7c>
   2f648:	f800283a 	ret
   2f64c:	1007883a 	mov	r3,r2
   2f650:	29800007 	ldb	r6,0(r5)
   2f654:	18c00044 	addi	r3,r3,1
   2f658:	29400044 	addi	r5,r5,1
   2f65c:	19bfffc5 	stb	r6,-1(r3)
   2f660:	303ffb1e 	bne	r6,zero,2f650 <strcpy+0x7c>
   2f664:	f800283a 	ret

0002f668 <strlen>:
   2f668:	208000cc 	andi	r2,r4,3
   2f66c:	10001f1e 	bne	r2,zero,2f6ec <strlen+0x84>
   2f670:	20800017 	ldw	r2,0(r4)
   2f674:	01ffbff4 	movhi	r7,65279
   2f678:	39ffbfc4 	addi	r7,r7,-257
   2f67c:	01a02074 	movhi	r6,32897
   2f680:	31a02004 	addi	r6,r6,-32640
   2f684:	11c7883a 	add	r3,r2,r7
   2f688:	0084303a 	nor	r2,zero,r2
   2f68c:	1886703a 	and	r3,r3,r2
   2f690:	1986703a 	and	r3,r3,r6
   2f694:	2005883a 	mov	r2,r4
   2f698:	1800101e 	bne	r3,zero,2f6dc <strlen+0x74>
   2f69c:	10800104 	addi	r2,r2,4
   2f6a0:	10c00017 	ldw	r3,0(r2)
   2f6a4:	19cb883a 	add	r5,r3,r7
   2f6a8:	00c6303a 	nor	r3,zero,r3
   2f6ac:	28c6703a 	and	r3,r5,r3
   2f6b0:	1986703a 	and	r3,r3,r6
   2f6b4:	1800091e 	bne	r3,zero,2f6dc <strlen+0x74>
   2f6b8:	10800104 	addi	r2,r2,4
   2f6bc:	10c00017 	ldw	r3,0(r2)
   2f6c0:	19cb883a 	add	r5,r3,r7
   2f6c4:	00c6303a 	nor	r3,zero,r3
   2f6c8:	28c6703a 	and	r3,r5,r3
   2f6cc:	1986703a 	and	r3,r3,r6
   2f6d0:	183ff226 	beq	r3,zero,2f69c <strlen+0x34>
   2f6d4:	00000106 	br	2f6dc <strlen+0x74>
   2f6d8:	10800044 	addi	r2,r2,1
   2f6dc:	10c00007 	ldb	r3,0(r2)
   2f6e0:	183ffd1e 	bne	r3,zero,2f6d8 <strlen+0x70>
   2f6e4:	1105c83a 	sub	r2,r2,r4
   2f6e8:	f800283a 	ret
   2f6ec:	2005883a 	mov	r2,r4
   2f6f0:	003ffa06 	br	2f6dc <strlen+0x74>

0002f6f4 <strncmp>:
   2f6f4:	30001826 	beq	r6,zero,2f758 <strncmp+0x64>
   2f6f8:	2904b03a 	or	r2,r5,r4
   2f6fc:	108000cc 	andi	r2,r2,3
   2f700:	10001726 	beq	r2,zero,2f760 <strncmp+0x6c>
   2f704:	31bfffc4 	addi	r6,r6,-1
   2f708:	20800007 	ldb	r2,0(r4)
   2f70c:	28c00007 	ldb	r3,0(r5)
   2f710:	10c0331e 	bne	r2,r3,2f7e0 <strncmp+0xec>
   2f714:	30001026 	beq	r6,zero,2f758 <strncmp+0x64>
   2f718:	10000f26 	beq	r2,zero,2f758 <strncmp+0x64>
   2f71c:	20800044 	addi	r2,r4,1
   2f720:	29400044 	addi	r5,r5,1
   2f724:	2189883a 	add	r4,r4,r6
   2f728:	00000406 	br	2f73c <strncmp+0x48>
   2f72c:	11000a26 	beq	r2,r4,2f758 <strncmp+0x64>
   2f730:	18000926 	beq	r3,zero,2f758 <strncmp+0x64>
   2f734:	10800044 	addi	r2,r2,1
   2f738:	29400044 	addi	r5,r5,1
   2f73c:	10c00007 	ldb	r3,0(r2)
   2f740:	29800007 	ldb	r6,0(r5)
   2f744:	19bff926 	beq	r3,r6,2f72c <strncmp+0x38>
   2f748:	10c00003 	ldbu	r3,0(r2)
   2f74c:	28800003 	ldbu	r2,0(r5)
   2f750:	1885c83a 	sub	r2,r3,r2
   2f754:	f800283a 	ret
   2f758:	0005883a 	mov	r2,zero
   2f75c:	f800283a 	ret
   2f760:	024000c4 	movi	r9,3
   2f764:	49bfe72e 	bgeu	r9,r6,2f704 <strncmp+0x10>
   2f768:	20800017 	ldw	r2,0(r4)
   2f76c:	28c00017 	ldw	r3,0(r5)
   2f770:	10ffe41e 	bne	r2,r3,2f704 <strncmp+0x10>
   2f774:	30ffff04 	addi	r3,r6,-4
   2f778:	183ff726 	beq	r3,zero,2f758 <strncmp+0x64>
   2f77c:	02ffbff4 	movhi	r11,65279
   2f780:	5affbfc4 	addi	r11,r11,-257
   2f784:	12cd883a 	add	r6,r2,r11
   2f788:	0084303a 	nor	r2,zero,r2
   2f78c:	3084703a 	and	r2,r6,r2
   2f790:	02a02074 	movhi	r10,32897
   2f794:	52a02004 	addi	r10,r10,-32640
   2f798:	1284703a 	and	r2,r2,r10
   2f79c:	10000b26 	beq	r2,zero,2f7cc <strncmp+0xd8>
   2f7a0:	003fed06 	br	2f758 <strncmp+0x64>
   2f7a4:	21800017 	ldw	r6,0(r4)
   2f7a8:	28800017 	ldw	r2,0(r5)
   2f7ac:	32d1883a 	add	r8,r6,r11
   2f7b0:	018e303a 	nor	r7,zero,r6
   2f7b4:	41ce703a 	and	r7,r8,r7
   2f7b8:	3a8e703a 	and	r7,r7,r10
   2f7bc:	30800a1e 	bne	r6,r2,2f7e8 <strncmp+0xf4>
   2f7c0:	18ffff04 	addi	r3,r3,-4
   2f7c4:	183fe426 	beq	r3,zero,2f758 <strncmp+0x64>
   2f7c8:	383fe31e 	bne	r7,zero,2f758 <strncmp+0x64>
   2f7cc:	21000104 	addi	r4,r4,4
   2f7d0:	29400104 	addi	r5,r5,4
   2f7d4:	48fff336 	bltu	r9,r3,2f7a4 <strncmp+0xb0>
   2f7d8:	19bfffc4 	addi	r6,r3,-1
   2f7dc:	183fca1e 	bne	r3,zero,2f708 <strncmp+0x14>
   2f7e0:	2005883a 	mov	r2,r4
   2f7e4:	003fd806 	br	2f748 <strncmp+0x54>
   2f7e8:	19bfffc4 	addi	r6,r3,-1
   2f7ec:	003fc606 	br	2f708 <strncmp+0x14>

0002f7f0 <strncpy>:
   2f7f0:	2906b03a 	or	r3,r5,r4
   2f7f4:	18c000cc 	andi	r3,r3,3
   2f7f8:	2005883a 	mov	r2,r4
   2f7fc:	1800261e 	bne	r3,zero,2f898 <strncpy+0xa8>
   2f800:	02c000c4 	movi	r11,3
   2f804:	200f883a 	mov	r7,r4
   2f808:	59800f2e 	bgeu	r11,r6,2f848 <strncpy+0x58>
   2f80c:	02bfbff4 	movhi	r10,65279
   2f810:	52bfbfc4 	addi	r10,r10,-257
   2f814:	01202074 	movhi	r4,32897
   2f818:	21202004 	addi	r4,r4,-32640
   2f81c:	28c00017 	ldw	r3,0(r5)
   2f820:	00d2303a 	nor	r9,zero,r3
   2f824:	1a91883a 	add	r8,r3,r10
   2f828:	4a10703a 	and	r8,r9,r8
   2f82c:	4110703a 	and	r8,r8,r4
   2f830:	4000051e 	bne	r8,zero,2f848 <strncpy+0x58>
   2f834:	38c00015 	stw	r3,0(r7)
   2f838:	31bfff04 	addi	r6,r6,-4
   2f83c:	39c00104 	addi	r7,r7,4
   2f840:	29400104 	addi	r5,r5,4
   2f844:	59bff536 	bltu	r11,r6,2f81c <strncpy+0x2c>
   2f848:	30001226 	beq	r6,zero,2f894 <strncpy+0xa4>
   2f84c:	29000007 	ldb	r4,0(r5)
   2f850:	31bfffc4 	addi	r6,r6,-1
   2f854:	38c00044 	addi	r3,r7,1
   2f858:	39000005 	stb	r4,0(r7)
   2f85c:	29400044 	addi	r5,r5,1
   2f860:	20000726 	beq	r4,zero,2f880 <strncpy+0x90>
   2f864:	30000e26 	beq	r6,zero,2f8a0 <strncpy+0xb0>
   2f868:	29c00007 	ldb	r7,0(r5)
   2f86c:	18c00044 	addi	r3,r3,1
   2f870:	31bfffc4 	addi	r6,r6,-1
   2f874:	19ffffc5 	stb	r7,-1(r3)
   2f878:	29400044 	addi	r5,r5,1
   2f87c:	383ff91e 	bne	r7,zero,2f864 <strncpy+0x74>
   2f880:	198b883a 	add	r5,r3,r6
   2f884:	30000726 	beq	r6,zero,2f8a4 <strncpy+0xb4>
   2f888:	18000005 	stb	zero,0(r3)
   2f88c:	18c00044 	addi	r3,r3,1
   2f890:	197ffd1e 	bne	r3,r5,2f888 <strncpy+0x98>
   2f894:	f800283a 	ret
   2f898:	200f883a 	mov	r7,r4
   2f89c:	003fea06 	br	2f848 <strncpy+0x58>
   2f8a0:	f800283a 	ret
   2f8a4:	f800283a 	ret

0002f8a8 <_tmpfile_r>:
   2f8a8:	defefa04 	addi	sp,sp,-1048
   2f8ac:	dcc10315 	stw	r19,1036(sp)
   2f8b0:	dc010015 	stw	r16,1024(sp)
   2f8b4:	dfc10515 	stw	ra,1044(sp)
   2f8b8:	dd010415 	stw	r20,1040(sp)
   2f8bc:	dc810215 	stw	r18,1032(sp)
   2f8c0:	dc410115 	stw	r17,1028(sp)
   2f8c4:	2021883a 	mov	r16,r4
   2f8c8:	04c00444 	movi	r19,17
   2f8cc:	8009883a 	mov	r4,r16
   2f8d0:	d80b883a 	mov	r5,sp
   2f8d4:	002fa600 	call	2fa60 <_tmpnam_r>
   2f8d8:	1023883a 	mov	r17,r2
   2f8dc:	8009883a 	mov	r4,r16
   2f8e0:	100b883a 	mov	r5,r2
   2f8e4:	01828084 	movi	r6,2562
   2f8e8:	01c06004 	movi	r7,384
   2f8ec:	10000526 	beq	r2,zero,2f904 <_tmpfile_r+0x5c>
   2f8f0:	002ed080 	call	2ed08 <_open_r>
   2f8f4:	1025883a 	mov	r18,r2
   2f8f8:	10000c0e 	bge	r2,zero,2f92c <_tmpfile_r+0x84>
   2f8fc:	80800017 	ldw	r2,0(r16)
   2f900:	14fff226 	beq	r2,r19,2f8cc <_tmpfile_r+0x24>
   2f904:	0027883a 	mov	r19,zero
   2f908:	9805883a 	mov	r2,r19
   2f90c:	dfc10517 	ldw	ra,1044(sp)
   2f910:	dd010417 	ldw	r20,1040(sp)
   2f914:	dcc10317 	ldw	r19,1036(sp)
   2f918:	dc810217 	ldw	r18,1032(sp)
   2f91c:	dc410117 	ldw	r17,1028(sp)
   2f920:	dc010017 	ldw	r16,1024(sp)
   2f924:	dec10604 	addi	sp,sp,1048
   2f928:	f800283a 	ret
   2f92c:	8009883a 	mov	r4,r16
   2f930:	100b883a 	mov	r5,r2
   2f934:	01800134 	movhi	r6,4
   2f938:	31846604 	addi	r6,r6,4504
   2f93c:	0034eb80 	call	34eb8 <_fdopen_r>
   2f940:	1027883a 	mov	r19,r2
   2f944:	85000017 	ldw	r20,0(r16)
   2f948:	10000526 	beq	r2,zero,2f960 <_tmpfile_r+0xb8>
   2f94c:	8009883a 	mov	r4,r16
   2f950:	880b883a 	mov	r5,r17
   2f954:	00371100 	call	37110 <_remove_r>
   2f958:	85000015 	stw	r20,0(r16)
   2f95c:	003fea06 	br	2f908 <_tmpfile_r+0x60>
   2f960:	8009883a 	mov	r4,r16
   2f964:	900b883a 	mov	r5,r18
   2f968:	00335fc0 	call	335fc <_close_r>
   2f96c:	003ff706 	br	2f94c <_tmpfile_r+0xa4>

0002f970 <tmpfile>:
   2f970:	00800134 	movhi	r2,4
   2f974:	108bb304 	addi	r2,r2,11980
   2f978:	11000017 	ldw	r4,0(r2)
   2f97c:	002f8a81 	jmpi	2f8a8 <_tmpfile_r>

0002f980 <worker>:
   2f980:	defff504 	addi	sp,sp,-44
   2f984:	dd800915 	stw	r22,36(sp)
   2f988:	dd400815 	stw	r21,32(sp)
   2f98c:	dd000715 	stw	r20,28(sp)
   2f990:	dcc00615 	stw	r19,24(sp)
   2f994:	dc800515 	stw	r18,20(sp)
   2f998:	dc400415 	stw	r17,16(sp)
   2f99c:	dc000315 	stw	r16,12(sp)
   2f9a0:	dfc00a15 	stw	ra,40(sp)
   2f9a4:	dd800b17 	ldw	r22,44(sp)
   2f9a8:	dc400c17 	ldw	r17,48(sp)
   2f9ac:	2021883a 	mov	r16,r4
   2f9b0:	2825883a 	mov	r18,r5
   2f9b4:	302b883a 	mov	r21,r6
   2f9b8:	3829883a 	mov	r20,r7
   2f9bc:	04ffffc4 	movi	r19,-1
   2f9c0:	00000106 	br	2f9c8 <worker+0x48>
   2f9c4:	00335fc0 	call	335fc <_close_r>
   2f9c8:	88800017 	ldw	r2,0(r17)
   2f9cc:	8009883a 	mov	r4,r16
   2f9d0:	900b883a 	mov	r5,r18
   2f9d4:	a80f883a 	mov	r7,r21
   2f9d8:	01800134 	movhi	r6,4
   2f9dc:	31846704 	addi	r6,r6,4508
   2f9e0:	dd000015 	stw	r20,0(sp)
   2f9e4:	dd800115 	stw	r22,4(sp)
   2f9e8:	d8800215 	stw	r2,8(sp)
   2f9ec:	002f1980 	call	2f198 <_sprintf_r>
   2f9f0:	88800017 	ldw	r2,0(r17)
   2f9f4:	8009883a 	mov	r4,r16
   2f9f8:	900b883a 	mov	r5,r18
   2f9fc:	10800044 	addi	r2,r2,1
   2fa00:	000d883a 	mov	r6,zero
   2fa04:	000f883a 	mov	r7,zero
   2fa08:	88800015 	stw	r2,0(r17)
   2fa0c:	002ed080 	call	2ed08 <_open_r>
   2fa10:	8009883a 	mov	r4,r16
   2fa14:	100b883a 	mov	r5,r2
   2fa18:	14ffea1e 	bne	r2,r19,2f9c4 <worker+0x44>
   2fa1c:	80c00017 	ldw	r3,0(r16)
   2fa20:	00801604 	movi	r2,88
   2fa24:	18800b26 	beq	r3,r2,2fa54 <worker+0xd4>
   2fa28:	00800044 	movi	r2,1
   2fa2c:	dfc00a17 	ldw	ra,40(sp)
   2fa30:	dd800917 	ldw	r22,36(sp)
   2fa34:	dd400817 	ldw	r21,32(sp)
   2fa38:	dd000717 	ldw	r20,28(sp)
   2fa3c:	dcc00617 	ldw	r19,24(sp)
   2fa40:	dc800517 	ldw	r18,20(sp)
   2fa44:	dc400417 	ldw	r17,16(sp)
   2fa48:	dc000317 	ldw	r16,12(sp)
   2fa4c:	dec00b04 	addi	sp,sp,44
   2fa50:	f800283a 	ret
   2fa54:	90000005 	stb	zero,0(r18)
   2fa58:	0005883a 	mov	r2,zero
   2fa5c:	003ff306 	br	2fa2c <worker+0xac>

0002fa60 <_tmpnam_r>:
   2fa60:	defffb04 	addi	sp,sp,-20
   2fa64:	dc000215 	stw	r16,8(sp)
   2fa68:	dfc00415 	stw	ra,16(sp)
   2fa6c:	dc400315 	stw	r17,12(sp)
   2fa70:	2021883a 	mov	r16,r4
   2fa74:	28001726 	beq	r5,zero,2fad4 <_tmpnam_r+0x74>
   2fa78:	2823883a 	mov	r17,r5
   2fa7c:	8009883a 	mov	r4,r16
   2fa80:	00372ec0 	call	372ec <_getpid_r>
   2fa84:	80c00404 	addi	r3,r16,16
   2fa88:	d8800015 	stw	r2,0(sp)
   2fa8c:	d8c00115 	stw	r3,4(sp)
   2fa90:	8009883a 	mov	r4,r16
   2fa94:	880b883a 	mov	r5,r17
   2fa98:	01800134 	movhi	r6,4
   2fa9c:	31846a04 	addi	r6,r6,4520
   2faa0:	01c00134 	movhi	r7,4
   2faa4:	39c46c04 	addi	r7,r7,4528
   2faa8:	002f9800 	call	2f980 <worker>
   2faac:	10000b26 	beq	r2,zero,2fadc <_tmpnam_r+0x7c>
   2fab0:	80800417 	ldw	r2,16(r16)
   2fab4:	10800044 	addi	r2,r2,1
   2fab8:	80800415 	stw	r2,16(r16)
   2fabc:	8805883a 	mov	r2,r17
   2fac0:	dfc00417 	ldw	ra,16(sp)
   2fac4:	dc400317 	ldw	r17,12(sp)
   2fac8:	dc000217 	ldw	r16,8(sp)
   2facc:	dec00504 	addi	sp,sp,20
   2fad0:	f800283a 	ret
   2fad4:	24400504 	addi	r17,r4,20
   2fad8:	003fe806 	br	2fa7c <_tmpnam_r+0x1c>
   2fadc:	0023883a 	mov	r17,zero
   2fae0:	8805883a 	mov	r2,r17
   2fae4:	dfc00417 	ldw	ra,16(sp)
   2fae8:	dc400317 	ldw	r17,12(sp)
   2faec:	dc000217 	ldw	r16,8(sp)
   2faf0:	dec00504 	addi	sp,sp,20
   2faf4:	f800283a 	ret

0002faf8 <_tempnam_r>:
   2faf8:	defff904 	addi	sp,sp,-28
   2fafc:	dc800415 	stw	r18,16(sp)
   2fb00:	dc000215 	stw	r16,8(sp)
   2fb04:	dfc00615 	stw	ra,24(sp)
   2fb08:	dcc00515 	stw	r19,20(sp)
   2fb0c:	dc400315 	stw	r17,12(sp)
   2fb10:	2021883a 	mov	r16,r4
   2fb14:	2825883a 	mov	r18,r5
   2fb18:	30002a26 	beq	r6,zero,2fbc4 <_tempnam_r+0xcc>
   2fb1c:	3027883a 	mov	r19,r6
   2fb20:	90002b26 	beq	r18,zero,2fbd0 <_tempnam_r+0xd8>
   2fb24:	9009883a 	mov	r4,r18
   2fb28:	002f6680 	call	2f668 <strlen>
   2fb2c:	9809883a 	mov	r4,r19
   2fb30:	1023883a 	mov	r17,r2
   2fb34:	002f6680 	call	2f668 <strlen>
   2fb38:	8885883a 	add	r2,r17,r2
   2fb3c:	8009883a 	mov	r4,r16
   2fb40:	114004c4 	addi	r5,r2,19
   2fb44:	002e3680 	call	2e368 <_malloc_r>
   2fb48:	1023883a 	mov	r17,r2
   2fb4c:	10001426 	beq	r2,zero,2fba0 <_tempnam_r+0xa8>
   2fb50:	8009883a 	mov	r4,r16
   2fb54:	00372ec0 	call	372ec <_getpid_r>
   2fb58:	8084f03a 	xor	r2,r16,r2
   2fb5c:	80c00404 	addi	r3,r16,16
   2fb60:	d8800015 	stw	r2,0(sp)
   2fb64:	d8c00115 	stw	r3,4(sp)
   2fb68:	8009883a 	mov	r4,r16
   2fb6c:	880b883a 	mov	r5,r17
   2fb70:	900d883a 	mov	r6,r18
   2fb74:	980f883a 	mov	r7,r19
   2fb78:	002f9800 	call	2f980 <worker>
   2fb7c:	10000826 	beq	r2,zero,2fba0 <_tempnam_r+0xa8>
   2fb80:	8805883a 	mov	r2,r17
   2fb84:	dfc00617 	ldw	ra,24(sp)
   2fb88:	dcc00517 	ldw	r19,20(sp)
   2fb8c:	dc800417 	ldw	r18,16(sp)
   2fb90:	dc400317 	ldw	r17,12(sp)
   2fb94:	dc000217 	ldw	r16,8(sp)
   2fb98:	dec00704 	addi	sp,sp,28
   2fb9c:	f800283a 	ret
   2fba0:	0023883a 	mov	r17,zero
   2fba4:	8805883a 	mov	r2,r17
   2fba8:	dfc00617 	ldw	ra,24(sp)
   2fbac:	dcc00517 	ldw	r19,20(sp)
   2fbb0:	dc800417 	ldw	r18,16(sp)
   2fbb4:	dc400317 	ldw	r17,12(sp)
   2fbb8:	dc000217 	ldw	r16,8(sp)
   2fbbc:	dec00704 	addi	sp,sp,28
   2fbc0:	f800283a 	ret
   2fbc4:	04c00134 	movhi	r19,4
   2fbc8:	9cc47704 	addi	r19,r19,4572
   2fbcc:	003fd406 	br	2fb20 <_tempnam_r+0x28>
   2fbd0:	01000134 	movhi	r4,4
   2fbd4:	21046d04 	addi	r4,r4,4532
   2fbd8:	002e0440 	call	2e044 <getenv>
   2fbdc:	1025883a 	mov	r18,r2
   2fbe0:	103fd01e 	bne	r2,zero,2fb24 <_tempnam_r+0x2c>
   2fbe4:	04800134 	movhi	r18,4
   2fbe8:	94846a04 	addi	r18,r18,4520
   2fbec:	003fcd06 	br	2fb24 <_tempnam_r+0x2c>

0002fbf0 <tempnam>:
   2fbf0:	00c00134 	movhi	r3,4
   2fbf4:	18cbb304 	addi	r3,r3,11980
   2fbf8:	2005883a 	mov	r2,r4
   2fbfc:	19000017 	ldw	r4,0(r3)
   2fc00:	280d883a 	mov	r6,r5
   2fc04:	100b883a 	mov	r5,r2
   2fc08:	002faf81 	jmpi	2faf8 <_tempnam_r>

0002fc0c <tmpnam>:
   2fc0c:	00800134 	movhi	r2,4
   2fc10:	108bb304 	addi	r2,r2,11980
   2fc14:	200b883a 	mov	r5,r4
   2fc18:	11000017 	ldw	r4,0(r2)
   2fc1c:	002fa601 	jmpi	2fa60 <_tmpnam_r>

0002fc20 <__sprint_r>:
   2fc20:	30800217 	ldw	r2,8(r6)
   2fc24:	defffe04 	addi	sp,sp,-8
   2fc28:	dc000015 	stw	r16,0(sp)
   2fc2c:	dfc00115 	stw	ra,4(sp)
   2fc30:	3021883a 	mov	r16,r6
   2fc34:	10000226 	beq	r2,zero,2fc40 <__sprint_r+0x20>
   2fc38:	00350240 	call	35024 <__sfvwrite_r>
   2fc3c:	80000215 	stw	zero,8(r16)
   2fc40:	80000115 	stw	zero,4(r16)
   2fc44:	dfc00117 	ldw	ra,4(sp)
   2fc48:	dc000017 	ldw	r16,0(sp)
   2fc4c:	dec00204 	addi	sp,sp,8
   2fc50:	f800283a 	ret

0002fc54 <___vfprintf_internal_r>:
   2fc54:	defeb904 	addi	sp,sp,-1308
   2fc58:	dc013d15 	stw	r16,1268(sp)
   2fc5c:	d9013015 	stw	r4,1216(sp)
   2fc60:	dfc14615 	stw	ra,1304(sp)
   2fc64:	df014515 	stw	fp,1300(sp)
   2fc68:	ddc14415 	stw	r23,1296(sp)
   2fc6c:	dd814315 	stw	r22,1292(sp)
   2fc70:	dd414215 	stw	r21,1288(sp)
   2fc74:	dd014115 	stw	r20,1284(sp)
   2fc78:	dcc14015 	stw	r19,1280(sp)
   2fc7c:	dc813f15 	stw	r18,1276(sp)
   2fc80:	dc413e15 	stw	r17,1272(sp)
   2fc84:	d9412915 	stw	r5,1188(sp)
   2fc88:	3021883a 	mov	r16,r6
   2fc8c:	d9c12d15 	stw	r7,1204(sp)
   2fc90:	003564c0 	call	3564c <_localeconv_r>
   2fc94:	10800017 	ldw	r2,0(r2)
   2fc98:	d9013017 	ldw	r4,1216(sp)
   2fc9c:	d8013315 	stw	zero,1228(sp)
   2fca0:	d8813715 	stw	r2,1244(sp)
   2fca4:	d8013415 	stw	zero,1232(sp)
   2fca8:	20000226 	beq	r4,zero,2fcb4 <___vfprintf_internal_r+0x60>
   2fcac:	20800e17 	ldw	r2,56(r4)
   2fcb0:	10014b26 	beq	r2,zero,301e0 <___vfprintf_internal_r+0x58c>
   2fcb4:	d8c12917 	ldw	r3,1188(sp)
   2fcb8:	1880030b 	ldhu	r2,12(r3)
   2fcbc:	10c0020c 	andi	r3,r2,8
   2fcc0:	18ffffcc 	andi	r3,r3,65535
   2fcc4:	18e0001c 	xori	r3,r3,32768
   2fcc8:	18e00004 	addi	r3,r3,-32768
   2fccc:	1800ed26 	beq	r3,zero,30084 <___vfprintf_internal_r+0x430>
   2fcd0:	d9012917 	ldw	r4,1188(sp)
   2fcd4:	20c00417 	ldw	r3,16(r4)
   2fcd8:	1800ea26 	beq	r3,zero,30084 <___vfprintf_internal_r+0x430>
   2fcdc:	1100068c 	andi	r4,r2,26
   2fce0:	00c00284 	movi	r3,10
   2fce4:	20c0f026 	beq	r4,r3,300a8 <___vfprintf_internal_r+0x454>
   2fce8:	d9010dc4 	addi	r4,sp,1079
   2fcec:	d8810e04 	addi	r2,sp,1080
   2fcf0:	dc413017 	ldw	r17,1216(sp)
   2fcf4:	d8c00404 	addi	r3,sp,16
   2fcf8:	d9012615 	stw	r4,1176(sp)
   2fcfc:	1109c83a 	sub	r4,r2,r4
   2fd00:	d8812715 	stw	r2,1180(sp)
   2fd04:	d8c11b15 	stw	r3,1132(sp)
   2fd08:	d8011d15 	stw	zero,1140(sp)
   2fd0c:	d8011c15 	stw	zero,1136(sp)
   2fd10:	802b883a 	mov	r21,r16
   2fd14:	d8013215 	stw	zero,1224(sp)
   2fd18:	d8013615 	stw	zero,1240(sp)
   2fd1c:	d8013515 	stw	zero,1236(sp)
   2fd20:	d8012c15 	stw	zero,1200(sp)
   2fd24:	1813883a 	mov	r9,r3
   2fd28:	d9013915 	stw	r4,1252(sp)
   2fd2c:	a8800007 	ldb	r2,0(r21)
   2fd30:	1002f326 	beq	r2,zero,30900 <___vfprintf_internal_r+0xcac>
   2fd34:	00c00944 	movi	r3,37
   2fd38:	a825883a 	mov	r18,r21
   2fd3c:	10c0021e 	bne	r2,r3,2fd48 <___vfprintf_internal_r+0xf4>
   2fd40:	00001406 	br	2fd94 <___vfprintf_internal_r+0x140>
   2fd44:	10c00326 	beq	r2,r3,2fd54 <___vfprintf_internal_r+0x100>
   2fd48:	94800044 	addi	r18,r18,1
   2fd4c:	90800007 	ldb	r2,0(r18)
   2fd50:	103ffc1e 	bne	r2,zero,2fd44 <___vfprintf_internal_r+0xf0>
   2fd54:	9561c83a 	sub	r16,r18,r21
   2fd58:	80000e26 	beq	r16,zero,2fd94 <___vfprintf_internal_r+0x140>
   2fd5c:	da011d17 	ldw	r8,1140(sp)
   2fd60:	d8c11c17 	ldw	r3,1136(sp)
   2fd64:	4d400015 	stw	r21,0(r9)
   2fd68:	4c000115 	stw	r16,4(r9)
   2fd6c:	4411883a 	add	r8,r8,r16
   2fd70:	18c00044 	addi	r3,r3,1
   2fd74:	da011d15 	stw	r8,1140(sp)
   2fd78:	d8c11c15 	stw	r3,1136(sp)
   2fd7c:	008001c4 	movi	r2,7
   2fd80:	10c11016 	blt	r2,r3,301c4 <___vfprintf_internal_r+0x570>
   2fd84:	4a400204 	addi	r9,r9,8
   2fd88:	d8812c17 	ldw	r2,1200(sp)
   2fd8c:	1405883a 	add	r2,r2,r16
   2fd90:	d8812c15 	stw	r2,1200(sp)
   2fd94:	90800007 	ldb	r2,0(r18)
   2fd98:	1000ee26 	beq	r2,zero,30154 <___vfprintf_internal_r+0x500>
   2fd9c:	95400044 	addi	r21,r18,1
   2fda0:	94800047 	ldb	r18,1(r18)
   2fda4:	073fffc4 	movi	fp,-1
   2fda8:	e007883a 	mov	r3,fp
   2fdac:	d8012585 	stb	zero,1174(sp)
   2fdb0:	d8012e15 	stw	zero,1208(sp)
   2fdb4:	0021883a 	mov	r16,zero
   2fdb8:	05001604 	movi	r20,88
   2fdbc:	04c00244 	movi	r19,9
   2fdc0:	4839883a 	mov	fp,r9
   2fdc4:	ad400044 	addi	r21,r21,1
   2fdc8:	90bff804 	addi	r2,r18,-32
   2fdcc:	a080462e 	bgeu	r20,r2,2fee8 <___vfprintf_internal_r+0x294>
   2fdd0:	e013883a 	mov	r9,fp
   2fdd4:	9000df26 	beq	r18,zero,30154 <___vfprintf_internal_r+0x500>
   2fdd8:	00c00044 	movi	r3,1
   2fddc:	d8c12815 	stw	r3,1184(sp)
   2fde0:	dc810405 	stb	r18,1040(sp)
   2fde4:	d8012585 	stb	zero,1174(sp)
   2fde8:	d8c12b15 	stw	r3,1196(sp)
   2fdec:	dcc10404 	addi	r19,sp,1040
   2fdf0:	d8013115 	stw	zero,1220(sp)
   2fdf4:	80c0008c 	andi	r3,r16,2
   2fdf8:	d8c12a15 	stw	r3,1192(sp)
   2fdfc:	18000326 	beq	r3,zero,2fe0c <___vfprintf_internal_r+0x1b8>
   2fe00:	d8c12817 	ldw	r3,1184(sp)
   2fe04:	18c00084 	addi	r3,r3,2
   2fe08:	d8c12815 	stw	r3,1184(sp)
   2fe0c:	80c0210c 	andi	r3,r16,132
   2fe10:	d8c12f15 	stw	r3,1212(sp)
   2fe14:	1802251e 	bne	r3,zero,306ac <___vfprintf_internal_r+0xa58>
   2fe18:	d9012e17 	ldw	r4,1208(sp)
   2fe1c:	d8c12817 	ldw	r3,1184(sp)
   2fe20:	20edc83a 	sub	r22,r4,r3
   2fe24:	0582210e 	bge	zero,r22,306ac <___vfprintf_internal_r+0xa58>
   2fe28:	02800404 	movi	r10,16
   2fe2c:	da011d17 	ldw	r8,1140(sp)
   2fe30:	d8c11c17 	ldw	r3,1136(sp)
   2fe34:	05c00134 	movhi	r23,4
   2fe38:	bdc47f84 	addi	r23,r23,4606
   2fe3c:	5580200e 	bge	r10,r22,2fec0 <___vfprintf_internal_r+0x26c>
   2fe40:	dc813815 	stw	r18,1248(sp)
   2fe44:	5039883a 	mov	fp,r10
   2fe48:	b825883a 	mov	r18,r23
   2fe4c:	050001c4 	movi	r20,7
   2fe50:	b02f883a 	mov	r23,r22
   2fe54:	802d883a 	mov	r22,r16
   2fe58:	dc012917 	ldw	r16,1188(sp)
   2fe5c:	00000306 	br	2fe6c <___vfprintf_internal_r+0x218>
   2fe60:	bdfffc04 	addi	r23,r23,-16
   2fe64:	4a400204 	addi	r9,r9,8
   2fe68:	e5c0110e 	bge	fp,r23,2feb0 <___vfprintf_internal_r+0x25c>
   2fe6c:	4c800015 	stw	r18,0(r9)
   2fe70:	4f000115 	stw	fp,4(r9)
   2fe74:	42000404 	addi	r8,r8,16
   2fe78:	18c00044 	addi	r3,r3,1
   2fe7c:	da011d15 	stw	r8,1140(sp)
   2fe80:	d8c11c15 	stw	r3,1136(sp)
   2fe84:	a0fff60e 	bge	r20,r3,2fe60 <___vfprintf_internal_r+0x20c>
   2fe88:	8809883a 	mov	r4,r17
   2fe8c:	800b883a 	mov	r5,r16
   2fe90:	d9811b04 	addi	r6,sp,1132
   2fe94:	002fc200 	call	2fc20 <__sprint_r>
   2fe98:	1000b41e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   2fe9c:	bdfffc04 	addi	r23,r23,-16
   2fea0:	da011d17 	ldw	r8,1140(sp)
   2fea4:	d8c11c17 	ldw	r3,1136(sp)
   2fea8:	da400404 	addi	r9,sp,16
   2feac:	e5ffef16 	blt	fp,r23,2fe6c <___vfprintf_internal_r+0x218>
   2feb0:	b021883a 	mov	r16,r22
   2feb4:	b82d883a 	mov	r22,r23
   2feb8:	902f883a 	mov	r23,r18
   2febc:	dc813817 	ldw	r18,1248(sp)
   2fec0:	4dc00015 	stw	r23,0(r9)
   2fec4:	4d800115 	stw	r22,4(r9)
   2fec8:	4591883a 	add	r8,r8,r22
   2fecc:	18c00044 	addi	r3,r3,1
   2fed0:	da011d15 	stw	r8,1140(sp)
   2fed4:	d8c11c15 	stw	r3,1136(sp)
   2fed8:	008001c4 	movi	r2,7
   2fedc:	10c3fe16 	blt	r2,r3,30ed8 <___vfprintf_internal_r+0x1284>
   2fee0:	4a400204 	addi	r9,r9,8
   2fee4:	0001f306 	br	306b4 <___vfprintf_internal_r+0xa60>
   2fee8:	1085883a 	add	r2,r2,r2
   2feec:	1085883a 	add	r2,r2,r2
   2fef0:	010000f4 	movhi	r4,3
   2fef4:	213fc104 	addi	r4,r4,-252
   2fef8:	1105883a 	add	r2,r2,r4
   2fefc:	10800017 	ldw	r2,0(r2)
   2ff00:	1000683a 	jmp	r2
   2ff04:	000305e0 	cmpeqi	zero,zero,3095
   2ff08:	0002fdd0 	cmplti	zero,zero,3063
   2ff0c:	0002fdd0 	cmplti	zero,zero,3063
   2ff10:	000305f8 	rdprs	zero,zero,3095
   2ff14:	0002fdd0 	cmplti	zero,zero,3063
   2ff18:	0002fdd0 	cmplti	zero,zero,3063
   2ff1c:	0002fdd0 	cmplti	zero,zero,3063
   2ff20:	0002fdd0 	cmplti	zero,zero,3063
   2ff24:	0002fdd0 	cmplti	zero,zero,3063
   2ff28:	0002fdd0 	cmplti	zero,zero,3063
   2ff2c:	000304b0 	cmpltui	zero,zero,3090
   2ff30:	00030644 	movi	zero,3097
   2ff34:	0002fdd0 	cmplti	zero,zero,3063
   2ff38:	00030078 	rdprs	zero,zero,3073
   2ff3c:	00030418 	cmpnei	zero,zero,3088
   2ff40:	0002fdd0 	cmplti	zero,zero,3063
   2ff44:	00030604 	movi	zero,3096
   2ff48:	00030610 	cmplti	zero,zero,3096
   2ff4c:	00030610 	cmplti	zero,zero,3096
   2ff50:	00030610 	cmplti	zero,zero,3096
   2ff54:	00030610 	cmplti	zero,zero,3096
   2ff58:	00030610 	cmplti	zero,zero,3096
   2ff5c:	00030610 	cmplti	zero,zero,3096
   2ff60:	00030610 	cmplti	zero,zero,3096
   2ff64:	00030610 	cmplti	zero,zero,3096
   2ff68:	00030610 	cmplti	zero,zero,3096
   2ff6c:	0002fdd0 	cmplti	zero,zero,3063
   2ff70:	0002fdd0 	cmplti	zero,zero,3063
   2ff74:	0002fdd0 	cmplti	zero,zero,3063
   2ff78:	0002fdd0 	cmplti	zero,zero,3063
   2ff7c:	0002fdd0 	cmplti	zero,zero,3063
   2ff80:	0002fdd0 	cmplti	zero,zero,3063
   2ff84:	0002fdd0 	cmplti	zero,zero,3063
   2ff88:	0002fdd0 	cmplti	zero,zero,3063
   2ff8c:	0002fdd0 	cmplti	zero,zero,3063
   2ff90:	0002fdd0 	cmplti	zero,zero,3063
   2ff94:	000301e8 	cmpgeui	zero,zero,3079
   2ff98:	000302a8 	cmpgeui	zero,zero,3082
   2ff9c:	0002fdd0 	cmplti	zero,zero,3063
   2ffa0:	000302a8 	cmpgeui	zero,zero,3082
   2ffa4:	0002fdd0 	cmplti	zero,zero,3063
   2ffa8:	0002fdd0 	cmplti	zero,zero,3063
   2ffac:	0002fdd0 	cmplti	zero,zero,3063
   2ffb0:	0002fdd0 	cmplti	zero,zero,3063
   2ffb4:	0003033c 	xorhi	zero,zero,3084
   2ffb8:	0002fdd0 	cmplti	zero,zero,3063
   2ffbc:	0002fdd0 	cmplti	zero,zero,3063
   2ffc0:	00030348 	cmpgei	zero,zero,3085
   2ffc4:	0002fdd0 	cmplti	zero,zero,3063
   2ffc8:	0002fdd0 	cmplti	zero,zero,3063
   2ffcc:	0002fdd0 	cmplti	zero,zero,3063
   2ffd0:	0002fdd0 	cmplti	zero,zero,3063
   2ffd4:	0002fdd0 	cmplti	zero,zero,3063
   2ffd8:	00030380 	call	3038 <encode_mcu+0x238>
   2ffdc:	0002fdd0 	cmplti	zero,zero,3063
   2ffe0:	0002fdd0 	cmplti	zero,zero,3063
   2ffe4:	000303bc 	xorhi	zero,zero,3086
   2ffe8:	0002fdd0 	cmplti	zero,zero,3063
   2ffec:	0002fdd0 	cmplti	zero,zero,3063
   2fff0:	0002fdd0 	cmplti	zero,zero,3063
   2fff4:	0002fdd0 	cmplti	zero,zero,3063
   2fff8:	0002fdd0 	cmplti	zero,zero,3063
   2fffc:	0002fdd0 	cmplti	zero,zero,3063
   30000:	0002fdd0 	cmplti	zero,zero,3063
   30004:	0002fdd0 	cmplti	zero,zero,3063
   30008:	0002fdd0 	cmplti	zero,zero,3063
   3000c:	0002fdd0 	cmplti	zero,zero,3063
   30010:	00030654 	movui	zero,3097
   30014:	00030688 	cmpgei	zero,zero,3098
   30018:	000302a8 	cmpgeui	zero,zero,3082
   3001c:	000302a8 	cmpgeui	zero,zero,3082
   30020:	000302a8 	cmpgeui	zero,zero,3082
   30024:	000305d4 	movui	zero,3095
   30028:	00030688 	cmpgei	zero,zero,3098
   3002c:	0002fdd0 	cmplti	zero,zero,3063
   30030:	0002fdd0 	cmplti	zero,zero,3063
   30034:	00030460 	cmpeqi	zero,zero,3089
   30038:	0002fdd0 	cmplti	zero,zero,3063
   3003c:	00030478 	rdprs	zero,zero,3089
   30040:	00030694 	movui	zero,3098
   30044:	000304d8 	cmpnei	zero,zero,3091
   30048:	00030528 	cmpgeui	zero,zero,3092
   3004c:	0002fdd0 	cmplti	zero,zero,3063
   30050:	00030534 	movhi	zero,3092
   30054:	0002fdd0 	cmplti	zero,zero,3063
   30058:	000306a0 	cmpeqi	zero,zero,3098
   3005c:	0002fdd0 	cmplti	zero,zero,3063
   30060:	0002fdd0 	cmplti	zero,zero,3063
   30064:	00030598 	cmpnei	zero,zero,3094
   30068:	d9012e17 	ldw	r4,1208(sp)
   3006c:	d8812d15 	stw	r2,1204(sp)
   30070:	0109c83a 	sub	r4,zero,r4
   30074:	d9012e15 	stw	r4,1208(sp)
   30078:	84000114 	ori	r16,r16,4
   3007c:	ac800007 	ldb	r18,0(r21)
   30080:	003f5006 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30084:	d9013017 	ldw	r4,1216(sp)
   30088:	d9412917 	ldw	r5,1188(sp)
   3008c:	00332e80 	call	332e8 <__swsetup_r>
   30090:	10003d1e 	bne	r2,zero,30188 <___vfprintf_internal_r+0x534>
   30094:	d8c12917 	ldw	r3,1188(sp)
   30098:	1880030b 	ldhu	r2,12(r3)
   3009c:	00c00284 	movi	r3,10
   300a0:	1100068c 	andi	r4,r2,26
   300a4:	20ff101e 	bne	r4,r3,2fce8 <___vfprintf_internal_r+0x94>
   300a8:	d9012917 	ldw	r4,1188(sp)
   300ac:	20c0038b 	ldhu	r3,14(r4)
   300b0:	193fffcc 	andi	r4,r3,65535
   300b4:	2120001c 	xori	r4,r4,32768
   300b8:	21200004 	addi	r4,r4,-32768
   300bc:	203f0a16 	blt	r4,zero,2fce8 <___vfprintf_internal_r+0x94>
   300c0:	d9012917 	ldw	r4,1188(sp)
   300c4:	d9c12d17 	ldw	r7,1204(sp)
   300c8:	10bfff4c 	andi	r2,r2,65533
   300cc:	22800717 	ldw	r10,28(r4)
   300d0:	22400917 	ldw	r9,36(r4)
   300d4:	d9013017 	ldw	r4,1216(sp)
   300d8:	02010004 	movi	r8,1024
   300dc:	d881070d 	sth	r2,1052(sp)
   300e0:	d9410404 	addi	r5,sp,1040
   300e4:	d8800404 	addi	r2,sp,16
   300e8:	800d883a 	mov	r6,r16
   300ec:	d8c1078d 	sth	r3,1054(sp)
   300f0:	da810b15 	stw	r10,1068(sp)
   300f4:	da410d15 	stw	r9,1076(sp)
   300f8:	d8810415 	stw	r2,1040(sp)
   300fc:	d8810815 	stw	r2,1056(sp)
   30100:	da010615 	stw	r8,1048(sp)
   30104:	da010915 	stw	r8,1060(sp)
   30108:	d8010a15 	stw	zero,1064(sp)
   3010c:	002fc540 	call	2fc54 <___vfprintf_internal_r>
   30110:	d8812c15 	stw	r2,1200(sp)
   30114:	10000416 	blt	r2,zero,30128 <___vfprintf_internal_r+0x4d4>
   30118:	d9013017 	ldw	r4,1216(sp)
   3011c:	d9410404 	addi	r5,sp,1040
   30120:	002ca900 	call	2ca90 <_fflush_r>
   30124:	1006501e 	bne	r2,zero,31a68 <___vfprintf_internal_r+0x1e14>
   30128:	d881070b 	ldhu	r2,1052(sp)
   3012c:	1080100c 	andi	r2,r2,64
   30130:	10bfffcc 	andi	r2,r2,65535
   30134:	10a0001c 	xori	r2,r2,32768
   30138:	10a00004 	addi	r2,r2,-32768
   3013c:	10001426 	beq	r2,zero,30190 <___vfprintf_internal_r+0x53c>
   30140:	d8c12917 	ldw	r3,1188(sp)
   30144:	1880030b 	ldhu	r2,12(r3)
   30148:	10801014 	ori	r2,r2,64
   3014c:	1880030d 	sth	r2,12(r3)
   30150:	00000f06 	br	30190 <___vfprintf_internal_r+0x53c>
   30154:	d8811d17 	ldw	r2,1140(sp)
   30158:	10000426 	beq	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3015c:	d9013017 	ldw	r4,1216(sp)
   30160:	d9412917 	ldw	r5,1188(sp)
   30164:	d9811b04 	addi	r6,sp,1132
   30168:	002fc200 	call	2fc20 <__sprint_r>
   3016c:	d8c12917 	ldw	r3,1188(sp)
   30170:	1880030b 	ldhu	r2,12(r3)
   30174:	1080100c 	andi	r2,r2,64
   30178:	10bfffcc 	andi	r2,r2,65535
   3017c:	10a0001c 	xori	r2,r2,32768
   30180:	10a00004 	addi	r2,r2,-32768
   30184:	10000226 	beq	r2,zero,30190 <___vfprintf_internal_r+0x53c>
   30188:	00bfffc4 	movi	r2,-1
   3018c:	d8812c15 	stw	r2,1200(sp)
   30190:	d8812c17 	ldw	r2,1200(sp)
   30194:	dfc14617 	ldw	ra,1304(sp)
   30198:	df014517 	ldw	fp,1300(sp)
   3019c:	ddc14417 	ldw	r23,1296(sp)
   301a0:	dd814317 	ldw	r22,1292(sp)
   301a4:	dd414217 	ldw	r21,1288(sp)
   301a8:	dd014117 	ldw	r20,1284(sp)
   301ac:	dcc14017 	ldw	r19,1280(sp)
   301b0:	dc813f17 	ldw	r18,1276(sp)
   301b4:	dc413e17 	ldw	r17,1272(sp)
   301b8:	dc013d17 	ldw	r16,1268(sp)
   301bc:	dec14704 	addi	sp,sp,1308
   301c0:	f800283a 	ret
   301c4:	d9412917 	ldw	r5,1188(sp)
   301c8:	8809883a 	mov	r4,r17
   301cc:	d9811b04 	addi	r6,sp,1132
   301d0:	002fc200 	call	2fc20 <__sprint_r>
   301d4:	103fe51e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   301d8:	da400404 	addi	r9,sp,16
   301dc:	003eea06 	br	2fd88 <___vfprintf_internal_r+0x134>
   301e0:	002cd4c0 	call	2cd4c <__sinit>
   301e4:	003eb306 	br	2fcb4 <___vfprintf_internal_r+0x60>
   301e8:	e013883a 	mov	r9,fp
   301ec:	84000414 	ori	r16,r16,16
   301f0:	1839883a 	mov	fp,r3
   301f4:	8080080c 	andi	r2,r16,32
   301f8:	10034426 	beq	r2,zero,30f0c <___vfprintf_internal_r+0x12b8>
   301fc:	d8c12d17 	ldw	r3,1204(sp)
   30200:	18800117 	ldw	r2,4(r3)
   30204:	1dc00017 	ldw	r23,0(r3)
   30208:	18c00204 	addi	r3,r3,8
   3020c:	d8c12d15 	stw	r3,1204(sp)
   30210:	102d883a 	mov	r22,r2
   30214:	1003020e 	bge	r2,zero,30e20 <___vfprintf_internal_r+0x11cc>
   30218:	05efc83a 	sub	r23,zero,r23
   3021c:	b804c03a 	cmpne	r2,r23,zero
   30220:	05adc83a 	sub	r22,zero,r22
   30224:	b0adc83a 	sub	r22,r22,r2
   30228:	00800b44 	movi	r2,45
   3022c:	d8812585 	stb	r2,1174(sp)
   30230:	00c00044 	movi	r3,1
   30234:	bd84b03a 	or	r2,r23,r22
   30238:	e0000216 	blt	fp,zero,30244 <___vfprintf_internal_r+0x5f0>
   3023c:	013fdfc4 	movi	r4,-129
   30240:	8120703a 	and	r16,r16,r4
   30244:	1001cc1e 	bne	r2,zero,30978 <___vfprintf_internal_r+0xd24>
   30248:	e001cb1e 	bne	fp,zero,30978 <___vfprintf_internal_r+0xd24>
   3024c:	18c03fcc 	andi	r3,r3,255
   30250:	1802ca1e 	bne	r3,zero,30d7c <___vfprintf_internal_r+0x1128>
   30254:	8080004c 	andi	r2,r16,1
   30258:	1002c826 	beq	r2,zero,30d7c <___vfprintf_internal_r+0x1128>
   3025c:	d8c13917 	ldw	r3,1252(sp)
   30260:	00800c04 	movi	r2,48
   30264:	d8810dc5 	stb	r2,1079(sp)
   30268:	d8c12b15 	stw	r3,1196(sp)
   3026c:	dcc10dc4 	addi	r19,sp,1079
   30270:	d8812b17 	ldw	r2,1196(sp)
   30274:	d8812815 	stw	r2,1184(sp)
   30278:	1700010e 	bge	r2,fp,30280 <___vfprintf_internal_r+0x62c>
   3027c:	df012815 	stw	fp,1184(sp)
   30280:	d8812583 	ldbu	r2,1174(sp)
   30284:	df013115 	stw	fp,1220(sp)
   30288:	10803fcc 	andi	r2,r2,255
   3028c:	1080201c 	xori	r2,r2,128
   30290:	10bfe004 	addi	r2,r2,-128
   30294:	103ed726 	beq	r2,zero,2fdf4 <___vfprintf_internal_r+0x1a0>
   30298:	d8c12817 	ldw	r3,1184(sp)
   3029c:	18c00044 	addi	r3,r3,1
   302a0:	d8c12815 	stw	r3,1184(sp)
   302a4:	003ed306 	br	2fdf4 <___vfprintf_internal_r+0x1a0>
   302a8:	8080020c 	andi	r2,r16,8
   302ac:	e013883a 	mov	r9,fp
   302b0:	1839883a 	mov	fp,r3
   302b4:	1003a626 	beq	r2,zero,31150 <___vfprintf_internal_r+0x14fc>
   302b8:	d9012d17 	ldw	r4,1204(sp)
   302bc:	25800017 	ldw	r22,0(r4)
   302c0:	25000117 	ldw	r20,4(r4)
   302c4:	21000204 	addi	r4,r4,8
   302c8:	d9012d15 	stw	r4,1204(sp)
   302cc:	dd813315 	stw	r22,1228(sp)
   302d0:	dd013415 	stw	r20,1232(sp)
   302d4:	b009883a 	mov	r4,r22
   302d8:	a00b883a 	mov	r5,r20
   302dc:	da413c15 	stw	r9,1264(sp)
   302e0:	00371540 	call	37154 <__isinfd>
   302e4:	da413c17 	ldw	r9,1264(sp)
   302e8:	b009883a 	mov	r4,r22
   302ec:	a00b883a 	mov	r5,r20
   302f0:	10041d26 	beq	r2,zero,31368 <___vfprintf_internal_r+0x1714>
   302f4:	000d883a 	mov	r6,zero
   302f8:	000f883a 	mov	r7,zero
   302fc:	003b8a00 	call	3b8a0 <__ltdf2>
   30300:	da413c17 	ldw	r9,1264(sp)
   30304:	1004da16 	blt	r2,zero,31670 <___vfprintf_internal_r+0x1a1c>
   30308:	d8812583 	ldbu	r2,1174(sp)
   3030c:	00c011c4 	movi	r3,71
   30310:	1c83d116 	blt	r3,r18,31258 <___vfprintf_internal_r+0x1604>
   30314:	04c00134 	movhi	r19,4
   30318:	9cc46f04 	addi	r19,r19,4540
   3031c:	00c000c4 	movi	r3,3
   30320:	d8c12815 	stw	r3,1184(sp)
   30324:	00ffdfc4 	movi	r3,-129
   30328:	80e0703a 	and	r16,r16,r3
   3032c:	d8c12817 	ldw	r3,1184(sp)
   30330:	d8013115 	stw	zero,1220(sp)
   30334:	d8c12b15 	stw	r3,1196(sp)
   30338:	003fd306 	br	30288 <___vfprintf_internal_r+0x634>
   3033c:	84000214 	ori	r16,r16,8
   30340:	ac800007 	ldb	r18,0(r21)
   30344:	003e9f06 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30348:	e013883a 	mov	r9,fp
   3034c:	84000414 	ori	r16,r16,16
   30350:	1839883a 	mov	fp,r3
   30354:	8080080c 	andi	r2,r16,32
   30358:	10031d26 	beq	r2,zero,30fd0 <___vfprintf_internal_r+0x137c>
   3035c:	d8812d17 	ldw	r2,1204(sp)
   30360:	0007883a 	mov	r3,zero
   30364:	15c00017 	ldw	r23,0(r2)
   30368:	15800117 	ldw	r22,4(r2)
   3036c:	10800204 	addi	r2,r2,8
   30370:	d8812d15 	stw	r2,1204(sp)
   30374:	d8012585 	stb	zero,1174(sp)
   30378:	bd84b03a 	or	r2,r23,r22
   3037c:	003fae06 	br	30238 <___vfprintf_internal_r+0x5e4>
   30380:	e013883a 	mov	r9,fp
   30384:	84000414 	ori	r16,r16,16
   30388:	1839883a 	mov	fp,r3
   3038c:	8080080c 	andi	r2,r16,32
   30390:	1002e726 	beq	r2,zero,30f30 <___vfprintf_internal_r+0x12dc>
   30394:	d8c12d17 	ldw	r3,1204(sp)
   30398:	d9012d17 	ldw	r4,1204(sp)
   3039c:	1dc00017 	ldw	r23,0(r3)
   303a0:	1d800117 	ldw	r22,4(r3)
   303a4:	21000204 	addi	r4,r4,8
   303a8:	00c00044 	movi	r3,1
   303ac:	d9012d15 	stw	r4,1204(sp)
   303b0:	bd84b03a 	or	r2,r23,r22
   303b4:	d8012585 	stb	zero,1174(sp)
   303b8:	003f9f06 	br	30238 <___vfprintf_internal_r+0x5e4>
   303bc:	e013883a 	mov	r9,fp
   303c0:	1839883a 	mov	fp,r3
   303c4:	00c00134 	movhi	r3,4
   303c8:	18c47304 	addi	r3,r3,4556
   303cc:	d8c13615 	stw	r3,1240(sp)
   303d0:	8080080c 	andi	r2,r16,32
   303d4:	10007726 	beq	r2,zero,305b4 <___vfprintf_internal_r+0x960>
   303d8:	d9012d17 	ldw	r4,1204(sp)
   303dc:	25c00017 	ldw	r23,0(r4)
   303e0:	25800117 	ldw	r22,4(r4)
   303e4:	21000204 	addi	r4,r4,8
   303e8:	d9012d15 	stw	r4,1204(sp)
   303ec:	8080004c 	andi	r2,r16,1
   303f0:	1002c226 	beq	r2,zero,30efc <___vfprintf_internal_r+0x12a8>
   303f4:	bd84b03a 	or	r2,r23,r22
   303f8:	10035d26 	beq	r2,zero,31170 <___vfprintf_internal_r+0x151c>
   303fc:	00c00c04 	movi	r3,48
   30400:	d8c12505 	stb	r3,1172(sp)
   30404:	dc812545 	stb	r18,1173(sp)
   30408:	84000094 	ori	r16,r16,2
   3040c:	00c00084 	movi	r3,2
   30410:	d8012585 	stb	zero,1174(sp)
   30414:	003f8806 	br	30238 <___vfprintf_internal_r+0x5e4>
   30418:	ac800007 	ldb	r18,0(r21)
   3041c:	00c00a84 	movi	r3,42
   30420:	adc00044 	addi	r23,r21,1
   30424:	90c57526 	beq	r18,r3,319fc <___vfprintf_internal_r+0x1da8>
   30428:	95bff404 	addi	r22,r18,-48
   3042c:	0009883a 	mov	r4,zero
   30430:	9d84ff36 	bltu	r19,r22,31830 <___vfprintf_internal_r+0x1bdc>
   30434:	01400284 	movi	r5,10
   30438:	002c1540 	call	2c154 <__mulsi3>
   3043c:	bc800007 	ldb	r18,0(r23)
   30440:	b089883a 	add	r4,r22,r2
   30444:	bdc00044 	addi	r23,r23,1
   30448:	95bff404 	addi	r22,r18,-48
   3044c:	9dbff92e 	bgeu	r19,r22,30434 <___vfprintf_internal_r+0x7e0>
   30450:	2007883a 	mov	r3,r4
   30454:	20044316 	blt	r4,zero,31564 <___vfprintf_internal_r+0x1910>
   30458:	b82b883a 	mov	r21,r23
   3045c:	003e5a06 	br	2fdc8 <___vfprintf_internal_r+0x174>
   30460:	ac800007 	ldb	r18,0(r21)
   30464:	01001b04 	movi	r4,108
   30468:	a805883a 	mov	r2,r21
   3046c:	91045526 	beq	r18,r4,315c4 <___vfprintf_internal_r+0x1970>
   30470:	84000414 	ori	r16,r16,16
   30474:	003e5306 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30478:	8080080c 	andi	r2,r16,32
   3047c:	e013883a 	mov	r9,fp
   30480:	10034026 	beq	r2,zero,31184 <___vfprintf_internal_r+0x1530>
   30484:	d9012d17 	ldw	r4,1204(sp)
   30488:	20800017 	ldw	r2,0(r4)
   3048c:	d9012c17 	ldw	r4,1200(sp)
   30490:	2007d7fa 	srai	r3,r4,31
   30494:	d9012d17 	ldw	r4,1204(sp)
   30498:	10c00115 	stw	r3,4(r2)
   3049c:	21000104 	addi	r4,r4,4
   304a0:	d9012d15 	stw	r4,1204(sp)
   304a4:	d9012c17 	ldw	r4,1200(sp)
   304a8:	11000015 	stw	r4,0(r2)
   304ac:	003e1f06 	br	2fd2c <___vfprintf_internal_r+0xd8>
   304b0:	d9012d17 	ldw	r4,1204(sp)
   304b4:	21000017 	ldw	r4,0(r4)
   304b8:	d9012e15 	stw	r4,1208(sp)
   304bc:	d9012d17 	ldw	r4,1204(sp)
   304c0:	20800104 	addi	r2,r4,4
   304c4:	d9012e17 	ldw	r4,1208(sp)
   304c8:	203ee716 	blt	r4,zero,30068 <___vfprintf_internal_r+0x414>
   304cc:	d8812d15 	stw	r2,1204(sp)
   304d0:	ac800007 	ldb	r18,0(r21)
   304d4:	003e3b06 	br	2fdc4 <___vfprintf_internal_r+0x170>
   304d8:	e013883a 	mov	r9,fp
   304dc:	1839883a 	mov	fp,r3
   304e0:	d8c12d17 	ldw	r3,1204(sp)
   304e4:	00800c04 	movi	r2,48
   304e8:	01000134 	movhi	r4,4
   304ec:	21047804 	addi	r4,r4,4576
   304f0:	1dc00017 	ldw	r23,0(r3)
   304f4:	18c00104 	addi	r3,r3,4
   304f8:	d8812505 	stb	r2,1172(sp)
   304fc:	00801e04 	movi	r2,120
   30500:	d8812545 	stb	r2,1173(sp)
   30504:	d8c12d15 	stw	r3,1204(sp)
   30508:	002d883a 	mov	r22,zero
   3050c:	84000094 	ori	r16,r16,2
   30510:	d9013615 	stw	r4,1240(sp)
   30514:	00c00084 	movi	r3,2
   30518:	04801e04 	movi	r18,120
   3051c:	b805883a 	mov	r2,r23
   30520:	d8012585 	stb	zero,1174(sp)
   30524:	003f4406 	br	30238 <___vfprintf_internal_r+0x5e4>
   30528:	84000814 	ori	r16,r16,32
   3052c:	ac800007 	ldb	r18,0(r21)
   30530:	003e2406 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30534:	d8812d17 	ldw	r2,1204(sp)
   30538:	d8012585 	stb	zero,1174(sp)
   3053c:	e013883a 	mov	r9,fp
   30540:	14c00017 	ldw	r19,0(r2)
   30544:	1839883a 	mov	fp,r3
   30548:	15c00104 	addi	r23,r2,4
   3054c:	98045526 	beq	r19,zero,316a4 <___vfprintf_internal_r+0x1a50>
   30550:	9809883a 	mov	r4,r19
   30554:	18043116 	blt	r3,zero,3161c <___vfprintf_internal_r+0x19c8>
   30558:	000b883a 	mov	r5,zero
   3055c:	180d883a 	mov	r6,r3
   30560:	da413c15 	stw	r9,1264(sp)
   30564:	00357d40 	call	357d4 <memchr>
   30568:	da413c17 	ldw	r9,1264(sp)
   3056c:	10047a26 	beq	r2,zero,31758 <___vfprintf_internal_r+0x1b04>
   30570:	14c5c83a 	sub	r2,r2,r19
   30574:	d8812b15 	stw	r2,1196(sp)
   30578:	e083d40e 	bge	fp,r2,314cc <___vfprintf_internal_r+0x1878>
   3057c:	df012815 	stw	fp,1184(sp)
   30580:	e004e416 	blt	fp,zero,31914 <___vfprintf_internal_r+0x1cc0>
   30584:	d8812583 	ldbu	r2,1174(sp)
   30588:	df012b15 	stw	fp,1196(sp)
   3058c:	ddc12d15 	stw	r23,1204(sp)
   30590:	d8013115 	stw	zero,1220(sp)
   30594:	003f3c06 	br	30288 <___vfprintf_internal_r+0x634>
   30598:	00800134 	movhi	r2,4
   3059c:	10847804 	addi	r2,r2,4576
   305a0:	d8813615 	stw	r2,1240(sp)
   305a4:	8080080c 	andi	r2,r16,32
   305a8:	e013883a 	mov	r9,fp
   305ac:	1839883a 	mov	fp,r3
   305b0:	103f891e 	bne	r2,zero,303d8 <___vfprintf_internal_r+0x784>
   305b4:	8080040c 	andi	r2,r16,16
   305b8:	1002c326 	beq	r2,zero,310c8 <___vfprintf_internal_r+0x1474>
   305bc:	d8812d17 	ldw	r2,1204(sp)
   305c0:	002d883a 	mov	r22,zero
   305c4:	15c00017 	ldw	r23,0(r2)
   305c8:	10800104 	addi	r2,r2,4
   305cc:	d8812d15 	stw	r2,1204(sp)
   305d0:	003f8606 	br	303ec <___vfprintf_internal_r+0x798>
   305d4:	84001014 	ori	r16,r16,64
   305d8:	ac800007 	ldb	r18,0(r21)
   305dc:	003df906 	br	2fdc4 <___vfprintf_internal_r+0x170>
   305e0:	d8812587 	ldb	r2,1174(sp)
   305e4:	1002e51e 	bne	r2,zero,3117c <___vfprintf_internal_r+0x1528>
   305e8:	00800804 	movi	r2,32
   305ec:	d8812585 	stb	r2,1174(sp)
   305f0:	ac800007 	ldb	r18,0(r21)
   305f4:	003df306 	br	2fdc4 <___vfprintf_internal_r+0x170>
   305f8:	84000054 	ori	r16,r16,1
   305fc:	ac800007 	ldb	r18,0(r21)
   30600:	003df006 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30604:	84002014 	ori	r16,r16,128
   30608:	ac800007 	ldb	r18,0(r21)
   3060c:	003ded06 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30610:	0009883a 	mov	r4,zero
   30614:	95bff404 	addi	r22,r18,-48
   30618:	182f883a 	mov	r23,r3
   3061c:	01400284 	movi	r5,10
   30620:	002c1540 	call	2c154 <__mulsi3>
   30624:	ac800007 	ldb	r18,0(r21)
   30628:	1589883a 	add	r4,r2,r22
   3062c:	ad400044 	addi	r21,r21,1
   30630:	95bff404 	addi	r22,r18,-48
   30634:	9dbff92e 	bgeu	r19,r22,3061c <___vfprintf_internal_r+0x9c8>
   30638:	b807883a 	mov	r3,r23
   3063c:	d9012e15 	stw	r4,1208(sp)
   30640:	003de106 	br	2fdc8 <___vfprintf_internal_r+0x174>
   30644:	00800ac4 	movi	r2,43
   30648:	d8812585 	stb	r2,1174(sp)
   3064c:	ac800007 	ldb	r18,0(r21)
   30650:	003ddc06 	br	2fdc4 <___vfprintf_internal_r+0x170>
   30654:	d8c12d17 	ldw	r3,1204(sp)
   30658:	d9012d17 	ldw	r4,1204(sp)
   3065c:	e013883a 	mov	r9,fp
   30660:	18800017 	ldw	r2,0(r3)
   30664:	21000104 	addi	r4,r4,4
   30668:	00c00044 	movi	r3,1
   3066c:	d8c12815 	stw	r3,1184(sp)
   30670:	d8012585 	stb	zero,1174(sp)
   30674:	d8810405 	stb	r2,1040(sp)
   30678:	d9012d15 	stw	r4,1204(sp)
   3067c:	d8c12b15 	stw	r3,1196(sp)
   30680:	dcc10404 	addi	r19,sp,1040
   30684:	003dda06 	br	2fdf0 <___vfprintf_internal_r+0x19c>
   30688:	e013883a 	mov	r9,fp
   3068c:	1839883a 	mov	fp,r3
   30690:	003ed806 	br	301f4 <___vfprintf_internal_r+0x5a0>
   30694:	e013883a 	mov	r9,fp
   30698:	1839883a 	mov	fp,r3
   3069c:	003f2d06 	br	30354 <___vfprintf_internal_r+0x700>
   306a0:	e013883a 	mov	r9,fp
   306a4:	1839883a 	mov	fp,r3
   306a8:	003f3806 	br	3038c <___vfprintf_internal_r+0x738>
   306ac:	da011d17 	ldw	r8,1140(sp)
   306b0:	d8c11c17 	ldw	r3,1136(sp)
   306b4:	d8812587 	ldb	r2,1174(sp)
   306b8:	10000b26 	beq	r2,zero,306e8 <___vfprintf_internal_r+0xa94>
   306bc:	d8812584 	addi	r2,sp,1174
   306c0:	48800015 	stw	r2,0(r9)
   306c4:	00800044 	movi	r2,1
   306c8:	48800115 	stw	r2,4(r9)
   306cc:	4091883a 	add	r8,r8,r2
   306d0:	1887883a 	add	r3,r3,r2
   306d4:	da011d15 	stw	r8,1140(sp)
   306d8:	d8c11c15 	stw	r3,1136(sp)
   306dc:	008001c4 	movi	r2,7
   306e0:	10c18e16 	blt	r2,r3,30d1c <___vfprintf_internal_r+0x10c8>
   306e4:	4a400204 	addi	r9,r9,8
   306e8:	d9012a17 	ldw	r4,1192(sp)
   306ec:	20000b26 	beq	r4,zero,3071c <___vfprintf_internal_r+0xac8>
   306f0:	d8812504 	addi	r2,sp,1172
   306f4:	48800015 	stw	r2,0(r9)
   306f8:	00800084 	movi	r2,2
   306fc:	48800115 	stw	r2,4(r9)
   30700:	4091883a 	add	r8,r8,r2
   30704:	18c00044 	addi	r3,r3,1
   30708:	da011d15 	stw	r8,1140(sp)
   3070c:	d8c11c15 	stw	r3,1136(sp)
   30710:	008001c4 	movi	r2,7
   30714:	10c17816 	blt	r2,r3,30cf8 <___vfprintf_internal_r+0x10a4>
   30718:	4a400204 	addi	r9,r9,8
   3071c:	d9012f17 	ldw	r4,1212(sp)
   30720:	00802004 	movi	r2,128
   30724:	2080fc26 	beq	r4,r2,30b18 <___vfprintf_internal_r+0xec4>
   30728:	d8813117 	ldw	r2,1220(sp)
   3072c:	d9012b17 	ldw	r4,1196(sp)
   30730:	112fc83a 	sub	r23,r2,r4
   30734:	05c02a0e 	bge	zero,r23,307e0 <___vfprintf_internal_r+0xb8c>
   30738:	07000404 	movi	fp,16
   3073c:	05000134 	movhi	r20,4
   30740:	a5048384 	addi	r20,r20,4622
   30744:	e5c01d0e 	bge	fp,r23,307bc <___vfprintf_internal_r+0xb68>
   30748:	dc812a15 	stw	r18,1192(sp)
   3074c:	058001c4 	movi	r22,7
   30750:	a025883a 	mov	r18,r20
   30754:	8029883a 	mov	r20,r16
   30758:	dc012917 	ldw	r16,1188(sp)
   3075c:	00000306 	br	3076c <___vfprintf_internal_r+0xb18>
   30760:	bdfffc04 	addi	r23,r23,-16
   30764:	4a400204 	addi	r9,r9,8
   30768:	e5c0110e 	bge	fp,r23,307b0 <___vfprintf_internal_r+0xb5c>
   3076c:	4c800015 	stw	r18,0(r9)
   30770:	4f000115 	stw	fp,4(r9)
   30774:	42000404 	addi	r8,r8,16
   30778:	18c00044 	addi	r3,r3,1
   3077c:	da011d15 	stw	r8,1140(sp)
   30780:	d8c11c15 	stw	r3,1136(sp)
   30784:	b0fff60e 	bge	r22,r3,30760 <___vfprintf_internal_r+0xb0c>
   30788:	8809883a 	mov	r4,r17
   3078c:	800b883a 	mov	r5,r16
   30790:	d9811b04 	addi	r6,sp,1132
   30794:	002fc200 	call	2fc20 <__sprint_r>
   30798:	103e741e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3079c:	bdfffc04 	addi	r23,r23,-16
   307a0:	da011d17 	ldw	r8,1140(sp)
   307a4:	d8c11c17 	ldw	r3,1136(sp)
   307a8:	da400404 	addi	r9,sp,16
   307ac:	e5ffef16 	blt	fp,r23,3076c <___vfprintf_internal_r+0xb18>
   307b0:	a021883a 	mov	r16,r20
   307b4:	9029883a 	mov	r20,r18
   307b8:	dc812a17 	ldw	r18,1192(sp)
   307bc:	4d000015 	stw	r20,0(r9)
   307c0:	4dc00115 	stw	r23,4(r9)
   307c4:	45d1883a 	add	r8,r8,r23
   307c8:	18c00044 	addi	r3,r3,1
   307cc:	da011d15 	stw	r8,1140(sp)
   307d0:	d8c11c15 	stw	r3,1136(sp)
   307d4:	008001c4 	movi	r2,7
   307d8:	10c13e16 	blt	r2,r3,30cd4 <___vfprintf_internal_r+0x1080>
   307dc:	4a400204 	addi	r9,r9,8
   307e0:	8080400c 	andi	r2,r16,256
   307e4:	1000831e 	bne	r2,zero,309f4 <___vfprintf_internal_r+0xda0>
   307e8:	d8812b17 	ldw	r2,1196(sp)
   307ec:	4cc00015 	stw	r19,0(r9)
   307f0:	48800115 	stw	r2,4(r9)
   307f4:	4091883a 	add	r8,r8,r2
   307f8:	18c00044 	addi	r3,r3,1
   307fc:	da011d15 	stw	r8,1140(sp)
   30800:	d8c11c15 	stw	r3,1136(sp)
   30804:	008001c4 	movi	r2,7
   30808:	10c05316 	blt	r2,r3,30958 <___vfprintf_internal_r+0xd04>
   3080c:	4a400204 	addi	r9,r9,8
   30810:	8400010c 	andi	r16,r16,4
   30814:	80002e26 	beq	r16,zero,308d0 <___vfprintf_internal_r+0xc7c>
   30818:	d8812e17 	ldw	r2,1208(sp)
   3081c:	d8c12817 	ldw	r3,1184(sp)
   30820:	10e1c83a 	sub	r16,r2,r3
   30824:	04002a0e 	bge	zero,r16,308d0 <___vfprintf_internal_r+0xc7c>
   30828:	04800404 	movi	r18,16
   3082c:	d8c11c17 	ldw	r3,1136(sp)
   30830:	05c00134 	movhi	r23,4
   30834:	bdc47f84 	addi	r23,r23,4606
   30838:	9400170e 	bge	r18,r16,30898 <___vfprintf_internal_r+0xc44>
   3083c:	04c001c4 	movi	r19,7
   30840:	dd012917 	ldw	r20,1188(sp)
   30844:	00000306 	br	30854 <___vfprintf_internal_r+0xc00>
   30848:	843ffc04 	addi	r16,r16,-16
   3084c:	4a400204 	addi	r9,r9,8
   30850:	9400110e 	bge	r18,r16,30898 <___vfprintf_internal_r+0xc44>
   30854:	4dc00015 	stw	r23,0(r9)
   30858:	4c800115 	stw	r18,4(r9)
   3085c:	42000404 	addi	r8,r8,16
   30860:	18c00044 	addi	r3,r3,1
   30864:	da011d15 	stw	r8,1140(sp)
   30868:	d8c11c15 	stw	r3,1136(sp)
   3086c:	98fff60e 	bge	r19,r3,30848 <___vfprintf_internal_r+0xbf4>
   30870:	8809883a 	mov	r4,r17
   30874:	a00b883a 	mov	r5,r20
   30878:	d9811b04 	addi	r6,sp,1132
   3087c:	002fc200 	call	2fc20 <__sprint_r>
   30880:	103e3a1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30884:	843ffc04 	addi	r16,r16,-16
   30888:	da011d17 	ldw	r8,1140(sp)
   3088c:	d8c11c17 	ldw	r3,1136(sp)
   30890:	da400404 	addi	r9,sp,16
   30894:	943fef16 	blt	r18,r16,30854 <___vfprintf_internal_r+0xc00>
   30898:	4dc00015 	stw	r23,0(r9)
   3089c:	4c000115 	stw	r16,4(r9)
   308a0:	8211883a 	add	r8,r16,r8
   308a4:	18c00044 	addi	r3,r3,1
   308a8:	da011d15 	stw	r8,1140(sp)
   308ac:	d8c11c15 	stw	r3,1136(sp)
   308b0:	008001c4 	movi	r2,7
   308b4:	10c0060e 	bge	r2,r3,308d0 <___vfprintf_internal_r+0xc7c>
   308b8:	d9412917 	ldw	r5,1188(sp)
   308bc:	8809883a 	mov	r4,r17
   308c0:	d9811b04 	addi	r6,sp,1132
   308c4:	002fc200 	call	2fc20 <__sprint_r>
   308c8:	103e281e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   308cc:	da011d17 	ldw	r8,1140(sp)
   308d0:	dd012817 	ldw	r20,1184(sp)
   308d4:	d9012e17 	ldw	r4,1208(sp)
   308d8:	a100010e 	bge	r20,r4,308e0 <___vfprintf_internal_r+0xc8c>
   308dc:	2029883a 	mov	r20,r4
   308e0:	d8812c17 	ldw	r2,1200(sp)
   308e4:	1505883a 	add	r2,r2,r20
   308e8:	d8812c15 	stw	r2,1200(sp)
   308ec:	4000b91e 	bne	r8,zero,30bd4 <___vfprintf_internal_r+0xf80>
   308f0:	d8011c15 	stw	zero,1136(sp)
   308f4:	a8800007 	ldb	r2,0(r21)
   308f8:	da400404 	addi	r9,sp,16
   308fc:	103d0d1e 	bne	r2,zero,2fd34 <___vfprintf_internal_r+0xe0>
   30900:	a825883a 	mov	r18,r21
   30904:	003d2306 	br	2fd94 <___vfprintf_internal_r+0x140>
   30908:	d9412917 	ldw	r5,1188(sp)
   3090c:	8809883a 	mov	r4,r17
   30910:	d9811b04 	addi	r6,sp,1132
   30914:	002fc200 	call	2fc20 <__sprint_r>
   30918:	103e141e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3091c:	da011d17 	ldw	r8,1140(sp)
   30920:	da400404 	addi	r9,sp,16
   30924:	8080004c 	andi	r2,r16,1
   30928:	103fb926 	beq	r2,zero,30810 <___vfprintf_internal_r+0xbbc>
   3092c:	d8c11c17 	ldw	r3,1136(sp)
   30930:	d9013717 	ldw	r4,1244(sp)
   30934:	00800044 	movi	r2,1
   30938:	48800115 	stw	r2,4(r9)
   3093c:	49000015 	stw	r4,0(r9)
   30940:	4091883a 	add	r8,r8,r2
   30944:	1887883a 	add	r3,r3,r2
   30948:	da011d15 	stw	r8,1140(sp)
   3094c:	d8c11c15 	stw	r3,1136(sp)
   30950:	008001c4 	movi	r2,7
   30954:	10ffad0e 	bge	r2,r3,3080c <___vfprintf_internal_r+0xbb8>
   30958:	d9412917 	ldw	r5,1188(sp)
   3095c:	8809883a 	mov	r4,r17
   30960:	d9811b04 	addi	r6,sp,1132
   30964:	002fc200 	call	2fc20 <__sprint_r>
   30968:	103e001e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3096c:	da400404 	addi	r9,sp,16
   30970:	da011d17 	ldw	r8,1140(sp)
   30974:	003fa606 	br	30810 <___vfprintf_internal_r+0xbbc>
   30978:	18803fcc 	andi	r2,r3,255
   3097c:	00c00044 	movi	r3,1
   30980:	10c10126 	beq	r2,r3,30d88 <___vfprintf_internal_r+0x1134>
   30984:	00c00084 	movi	r3,2
   30988:	10c0ed26 	beq	r2,r3,30d40 <___vfprintf_internal_r+0x10ec>
   3098c:	d8c10dc4 	addi	r3,sp,1079
   30990:	b808d0fa 	srli	r4,r23,3
   30994:	b00a977a 	slli	r5,r22,29
   30998:	b02cd0fa 	srli	r22,r22,3
   3099c:	bdc001cc 	andi	r23,r23,7
   309a0:	b8800c04 	addi	r2,r23,48
   309a4:	292eb03a 	or	r23,r5,r4
   309a8:	18800005 	stb	r2,0(r3)
   309ac:	bd88b03a 	or	r4,r23,r22
   309b0:	1827883a 	mov	r19,r3
   309b4:	18ffffc4 	addi	r3,r3,-1
   309b8:	203ff51e 	bne	r4,zero,30990 <___vfprintf_internal_r+0xd3c>
   309bc:	8100004c 	andi	r4,r16,1
   309c0:	980b883a 	mov	r5,r19
   309c4:	20000726 	beq	r4,zero,309e4 <___vfprintf_internal_r+0xd90>
   309c8:	10803fcc 	andi	r2,r2,255
   309cc:	1080201c 	xori	r2,r2,128
   309d0:	10bfe004 	addi	r2,r2,-128
   309d4:	01000c04 	movi	r4,48
   309d8:	11000226 	beq	r2,r4,309e4 <___vfprintf_internal_r+0xd90>
   309dc:	1827883a 	mov	r19,r3
   309e0:	293fffc5 	stb	r4,-1(r5)
   309e4:	d8812717 	ldw	r2,1180(sp)
   309e8:	14c5c83a 	sub	r2,r2,r19
   309ec:	d8812b15 	stw	r2,1196(sp)
   309f0:	003e1f06 	br	30270 <___vfprintf_internal_r+0x61c>
   309f4:	00801944 	movi	r2,101
   309f8:	14807c0e 	bge	r2,r18,30bec <___vfprintf_internal_r+0xf98>
   309fc:	d9013317 	ldw	r4,1228(sp)
   30a00:	d9413417 	ldw	r5,1232(sp)
   30a04:	000d883a 	mov	r6,zero
   30a08:	000f883a 	mov	r7,zero
   30a0c:	d8c13b15 	stw	r3,1260(sp)
   30a10:	da013a15 	stw	r8,1256(sp)
   30a14:	da413c15 	stw	r9,1264(sp)
   30a18:	003b7200 	call	3b720 <__eqdf2>
   30a1c:	d8c13b17 	ldw	r3,1260(sp)
   30a20:	da013a17 	ldw	r8,1256(sp)
   30a24:	da413c17 	ldw	r9,1264(sp)
   30a28:	1001001e 	bne	r2,zero,30e2c <___vfprintf_internal_r+0x11d8>
   30a2c:	00800134 	movhi	r2,4
   30a30:	10847f04 	addi	r2,r2,4604
   30a34:	48800015 	stw	r2,0(r9)
   30a38:	00800044 	movi	r2,1
   30a3c:	48800115 	stw	r2,4(r9)
   30a40:	4091883a 	add	r8,r8,r2
   30a44:	1887883a 	add	r3,r3,r2
   30a48:	da011d15 	stw	r8,1140(sp)
   30a4c:	d8c11c15 	stw	r3,1136(sp)
   30a50:	008001c4 	movi	r2,7
   30a54:	10c20316 	blt	r2,r3,31264 <___vfprintf_internal_r+0x1610>
   30a58:	4a400204 	addi	r9,r9,8
   30a5c:	d8812417 	ldw	r2,1168(sp)
   30a60:	d8c13217 	ldw	r3,1224(sp)
   30a64:	10c00216 	blt	r2,r3,30a70 <___vfprintf_internal_r+0xe1c>
   30a68:	8080004c 	andi	r2,r16,1
   30a6c:	103f6826 	beq	r2,zero,30810 <___vfprintf_internal_r+0xbbc>
   30a70:	d8c11c17 	ldw	r3,1136(sp)
   30a74:	d9013717 	ldw	r4,1244(sp)
   30a78:	00800044 	movi	r2,1
   30a7c:	48800115 	stw	r2,4(r9)
   30a80:	49000015 	stw	r4,0(r9)
   30a84:	4091883a 	add	r8,r8,r2
   30a88:	1887883a 	add	r3,r3,r2
   30a8c:	da011d15 	stw	r8,1140(sp)
   30a90:	d8c11c15 	stw	r3,1136(sp)
   30a94:	008001c4 	movi	r2,7
   30a98:	10c2ce16 	blt	r2,r3,315d4 <___vfprintf_internal_r+0x1980>
   30a9c:	4a400204 	addi	r9,r9,8
   30aa0:	d8813217 	ldw	r2,1224(sp)
   30aa4:	14bfffc4 	addi	r18,r2,-1
   30aa8:	04bf590e 	bge	zero,r18,30810 <___vfprintf_internal_r+0xbbc>
   30aac:	04c00404 	movi	r19,16
   30ab0:	d8c11c17 	ldw	r3,1136(sp)
   30ab4:	05000134 	movhi	r20,4
   30ab8:	a5048384 	addi	r20,r20,4622
   30abc:	9c818a0e 	bge	r19,r18,310e8 <___vfprintf_internal_r+0x1494>
   30ac0:	058001c4 	movi	r22,7
   30ac4:	ddc12917 	ldw	r23,1188(sp)
   30ac8:	00000306 	br	30ad8 <___vfprintf_internal_r+0xe84>
   30acc:	4a400204 	addi	r9,r9,8
   30ad0:	94bffc04 	addi	r18,r18,-16
   30ad4:	9c81840e 	bge	r19,r18,310e8 <___vfprintf_internal_r+0x1494>
   30ad8:	4d000015 	stw	r20,0(r9)
   30adc:	4cc00115 	stw	r19,4(r9)
   30ae0:	42000404 	addi	r8,r8,16
   30ae4:	18c00044 	addi	r3,r3,1
   30ae8:	da011d15 	stw	r8,1140(sp)
   30aec:	d8c11c15 	stw	r3,1136(sp)
   30af0:	b0fff60e 	bge	r22,r3,30acc <___vfprintf_internal_r+0xe78>
   30af4:	8809883a 	mov	r4,r17
   30af8:	b80b883a 	mov	r5,r23
   30afc:	d9811b04 	addi	r6,sp,1132
   30b00:	002fc200 	call	2fc20 <__sprint_r>
   30b04:	103d991e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30b08:	da011d17 	ldw	r8,1140(sp)
   30b0c:	d8c11c17 	ldw	r3,1136(sp)
   30b10:	da400404 	addi	r9,sp,16
   30b14:	003fee06 	br	30ad0 <___vfprintf_internal_r+0xe7c>
   30b18:	d8812e17 	ldw	r2,1208(sp)
   30b1c:	d9012817 	ldw	r4,1184(sp)
   30b20:	112fc83a 	sub	r23,r2,r4
   30b24:	05ff000e 	bge	zero,r23,30728 <___vfprintf_internal_r+0xad4>
   30b28:	07000404 	movi	fp,16
   30b2c:	05000134 	movhi	r20,4
   30b30:	a5048384 	addi	r20,r20,4622
   30b34:	e5c01d0e 	bge	fp,r23,30bac <___vfprintf_internal_r+0xf58>
   30b38:	dc812a15 	stw	r18,1192(sp)
   30b3c:	058001c4 	movi	r22,7
   30b40:	a025883a 	mov	r18,r20
   30b44:	8029883a 	mov	r20,r16
   30b48:	dc012917 	ldw	r16,1188(sp)
   30b4c:	00000306 	br	30b5c <___vfprintf_internal_r+0xf08>
   30b50:	bdfffc04 	addi	r23,r23,-16
   30b54:	4a400204 	addi	r9,r9,8
   30b58:	e5c0110e 	bge	fp,r23,30ba0 <___vfprintf_internal_r+0xf4c>
   30b5c:	4c800015 	stw	r18,0(r9)
   30b60:	4f000115 	stw	fp,4(r9)
   30b64:	42000404 	addi	r8,r8,16
   30b68:	18c00044 	addi	r3,r3,1
   30b6c:	da011d15 	stw	r8,1140(sp)
   30b70:	d8c11c15 	stw	r3,1136(sp)
   30b74:	b0fff60e 	bge	r22,r3,30b50 <___vfprintf_internal_r+0xefc>
   30b78:	8809883a 	mov	r4,r17
   30b7c:	800b883a 	mov	r5,r16
   30b80:	d9811b04 	addi	r6,sp,1132
   30b84:	002fc200 	call	2fc20 <__sprint_r>
   30b88:	103d781e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30b8c:	bdfffc04 	addi	r23,r23,-16
   30b90:	da011d17 	ldw	r8,1140(sp)
   30b94:	d8c11c17 	ldw	r3,1136(sp)
   30b98:	da400404 	addi	r9,sp,16
   30b9c:	e5ffef16 	blt	fp,r23,30b5c <___vfprintf_internal_r+0xf08>
   30ba0:	a021883a 	mov	r16,r20
   30ba4:	9029883a 	mov	r20,r18
   30ba8:	dc812a17 	ldw	r18,1192(sp)
   30bac:	4d000015 	stw	r20,0(r9)
   30bb0:	4dc00115 	stw	r23,4(r9)
   30bb4:	45d1883a 	add	r8,r8,r23
   30bb8:	18c00044 	addi	r3,r3,1
   30bbc:	da011d15 	stw	r8,1140(sp)
   30bc0:	d8c11c15 	stw	r3,1136(sp)
   30bc4:	008001c4 	movi	r2,7
   30bc8:	10c13616 	blt	r2,r3,310a4 <___vfprintf_internal_r+0x1450>
   30bcc:	4a400204 	addi	r9,r9,8
   30bd0:	003ed506 	br	30728 <___vfprintf_internal_r+0xad4>
   30bd4:	d9412917 	ldw	r5,1188(sp)
   30bd8:	8809883a 	mov	r4,r17
   30bdc:	d9811b04 	addi	r6,sp,1132
   30be0:	002fc200 	call	2fc20 <__sprint_r>
   30be4:	103f4226 	beq	r2,zero,308f0 <___vfprintf_internal_r+0xc9c>
   30be8:	003d6006 	br	3016c <___vfprintf_internal_r+0x518>
   30bec:	d9013217 	ldw	r4,1224(sp)
   30bf0:	00800044 	movi	r2,1
   30bf4:	4cc00015 	stw	r19,0(r9)
   30bf8:	1101000e 	bge	r2,r4,30ffc <___vfprintf_internal_r+0x13a8>
   30bfc:	00800044 	movi	r2,1
   30c00:	48800115 	stw	r2,4(r9)
   30c04:	4091883a 	add	r8,r8,r2
   30c08:	1887883a 	add	r3,r3,r2
   30c0c:	da011d15 	stw	r8,1140(sp)
   30c10:	d8c11c15 	stw	r3,1136(sp)
   30c14:	008001c4 	movi	r2,7
   30c18:	10c10c16 	blt	r2,r3,3104c <___vfprintf_internal_r+0x13f8>
   30c1c:	4a400204 	addi	r9,r9,8
   30c20:	d8813717 	ldw	r2,1244(sp)
   30c24:	48800015 	stw	r2,0(r9)
   30c28:	00800044 	movi	r2,1
   30c2c:	48800115 	stw	r2,4(r9)
   30c30:	4091883a 	add	r8,r8,r2
   30c34:	1887883a 	add	r3,r3,r2
   30c38:	da011d15 	stw	r8,1140(sp)
   30c3c:	d8c11c15 	stw	r3,1136(sp)
   30c40:	008001c4 	movi	r2,7
   30c44:	10c10a16 	blt	r2,r3,31070 <___vfprintf_internal_r+0x141c>
   30c48:	4c800204 	addi	r18,r9,8
   30c4c:	d9013317 	ldw	r4,1228(sp)
   30c50:	d9413417 	ldw	r5,1232(sp)
   30c54:	000d883a 	mov	r6,zero
   30c58:	000f883a 	mov	r7,zero
   30c5c:	d8c13b15 	stw	r3,1260(sp)
   30c60:	da013a15 	stw	r8,1256(sp)
   30c64:	003b77c0 	call	3b77c <__nedf2>
   30c68:	d8c13b17 	ldw	r3,1260(sp)
   30c6c:	da013a17 	ldw	r8,1256(sp)
   30c70:	1000ba26 	beq	r2,zero,30f5c <___vfprintf_internal_r+0x1308>
   30c74:	d9013217 	ldw	r4,1224(sp)
   30c78:	9cc00044 	addi	r19,r19,1
   30c7c:	94c00015 	stw	r19,0(r18)
   30c80:	20bfffc4 	addi	r2,r4,-1
   30c84:	90800115 	stw	r2,4(r18)
   30c88:	4091883a 	add	r8,r8,r2
   30c8c:	18c00044 	addi	r3,r3,1
   30c90:	da011d15 	stw	r8,1140(sp)
   30c94:	d8c11c15 	stw	r3,1136(sp)
   30c98:	008001c4 	movi	r2,7
   30c9c:	10c0e216 	blt	r2,r3,31028 <___vfprintf_internal_r+0x13d4>
   30ca0:	94800204 	addi	r18,r18,8
   30ca4:	d9013517 	ldw	r4,1236(sp)
   30ca8:	d8811fc4 	addi	r2,sp,1151
   30cac:	90800015 	stw	r2,0(r18)
   30cb0:	91000115 	stw	r4,4(r18)
   30cb4:	4111883a 	add	r8,r8,r4
   30cb8:	18c00044 	addi	r3,r3,1
   30cbc:	da011d15 	stw	r8,1140(sp)
   30cc0:	d8c11c15 	stw	r3,1136(sp)
   30cc4:	008001c4 	movi	r2,7
   30cc8:	10ff2316 	blt	r2,r3,30958 <___vfprintf_internal_r+0xd04>
   30ccc:	92400204 	addi	r9,r18,8
   30cd0:	003ecf06 	br	30810 <___vfprintf_internal_r+0xbbc>
   30cd4:	d9412917 	ldw	r5,1188(sp)
   30cd8:	8809883a 	mov	r4,r17
   30cdc:	d9811b04 	addi	r6,sp,1132
   30ce0:	002fc200 	call	2fc20 <__sprint_r>
   30ce4:	103d211e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30ce8:	da011d17 	ldw	r8,1140(sp)
   30cec:	d8c11c17 	ldw	r3,1136(sp)
   30cf0:	da400404 	addi	r9,sp,16
   30cf4:	003eba06 	br	307e0 <___vfprintf_internal_r+0xb8c>
   30cf8:	d9412917 	ldw	r5,1188(sp)
   30cfc:	8809883a 	mov	r4,r17
   30d00:	d9811b04 	addi	r6,sp,1132
   30d04:	002fc200 	call	2fc20 <__sprint_r>
   30d08:	103d181e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30d0c:	da011d17 	ldw	r8,1140(sp)
   30d10:	d8c11c17 	ldw	r3,1136(sp)
   30d14:	da400404 	addi	r9,sp,16
   30d18:	003e8006 	br	3071c <___vfprintf_internal_r+0xac8>
   30d1c:	d9412917 	ldw	r5,1188(sp)
   30d20:	8809883a 	mov	r4,r17
   30d24:	d9811b04 	addi	r6,sp,1132
   30d28:	002fc200 	call	2fc20 <__sprint_r>
   30d2c:	103d0f1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30d30:	da011d17 	ldw	r8,1140(sp)
   30d34:	d8c11c17 	ldw	r3,1136(sp)
   30d38:	da400404 	addi	r9,sp,16
   30d3c:	003e6a06 	br	306e8 <___vfprintf_internal_r+0xa94>
   30d40:	d9413617 	ldw	r5,1240(sp)
   30d44:	d8810dc4 	addi	r2,sp,1079
   30d48:	b8c003cc 	andi	r3,r23,15
   30d4c:	b008973a 	slli	r4,r22,28
   30d50:	28c7883a 	add	r3,r5,r3
   30d54:	b82ed13a 	srli	r23,r23,4
   30d58:	18c00003 	ldbu	r3,0(r3)
   30d5c:	b02cd13a 	srli	r22,r22,4
   30d60:	25eeb03a 	or	r23,r4,r23
   30d64:	10c00005 	stb	r3,0(r2)
   30d68:	bd86b03a 	or	r3,r23,r22
   30d6c:	1027883a 	mov	r19,r2
   30d70:	10bfffc4 	addi	r2,r2,-1
   30d74:	183ff41e 	bne	r3,zero,30d48 <___vfprintf_internal_r+0x10f4>
   30d78:	003f1a06 	br	309e4 <___vfprintf_internal_r+0xd90>
   30d7c:	d8012b15 	stw	zero,1196(sp)
   30d80:	dcc10e04 	addi	r19,sp,1080
   30d84:	003d3a06 	br	30270 <___vfprintf_internal_r+0x61c>
   30d88:	b0025426 	beq	r22,zero,316dc <___vfprintf_internal_r+0x1a88>
   30d8c:	b807883a 	mov	r3,r23
   30d90:	d8810dc4 	addi	r2,sp,1079
   30d94:	882f883a 	mov	r23,r17
   30d98:	04c00244 	movi	r19,9
   30d9c:	8023883a 	mov	r17,r16
   30da0:	da412815 	stw	r9,1184(sp)
   30da4:	1821883a 	mov	r16,r3
   30da8:	8009883a 	mov	r4,r16
   30dac:	b00b883a 	mov	r5,r22
   30db0:	01800284 	movi	r6,10
   30db4:	000f883a 	mov	r7,zero
   30db8:	1029883a 	mov	r20,r2
   30dbc:	003abec0 	call	3abec <__umoddi3>
   30dc0:	10800c04 	addi	r2,r2,48
   30dc4:	8009883a 	mov	r4,r16
   30dc8:	b00b883a 	mov	r5,r22
   30dcc:	a0800005 	stb	r2,0(r20)
   30dd0:	01800284 	movi	r6,10
   30dd4:	000f883a 	mov	r7,zero
   30dd8:	003a59c0 	call	3a59c <__udivdi3>
   30ddc:	1021883a 	mov	r16,r2
   30de0:	182d883a 	mov	r22,r3
   30de4:	a0bfffc4 	addi	r2,r20,-1
   30de8:	183fef1e 	bne	r3,zero,30da8 <___vfprintf_internal_r+0x1154>
   30dec:	9c3fee36 	bltu	r19,r16,30da8 <___vfprintf_internal_r+0x1154>
   30df0:	da412817 	ldw	r9,1184(sp)
   30df4:	8005883a 	mov	r2,r16
   30df8:	8821883a 	mov	r16,r17
   30dfc:	b823883a 	mov	r17,r23
   30e00:	102f883a 	mov	r23,r2
   30e04:	d8812717 	ldw	r2,1180(sp)
   30e08:	a4ffffc4 	addi	r19,r20,-1
   30e0c:	bdc00c04 	addi	r23,r23,48
   30e10:	14c5c83a 	sub	r2,r2,r19
   30e14:	a5ffffc5 	stb	r23,-1(r20)
   30e18:	d8812b15 	stw	r2,1196(sp)
   30e1c:	003d1406 	br	30270 <___vfprintf_internal_r+0x61c>
   30e20:	00c00044 	movi	r3,1
   30e24:	bd84b03a 	or	r2,r23,r22
   30e28:	003d0306 	br	30238 <___vfprintf_internal_r+0x5e4>
   30e2c:	dc812417 	ldw	r18,1168(sp)
   30e30:	0481140e 	bge	zero,r18,31284 <___vfprintf_internal_r+0x1630>
   30e34:	d9013217 	ldw	r4,1224(sp)
   30e38:	4cc00015 	stw	r19,0(r9)
   30e3c:	9100ec16 	blt	r18,r4,311f0 <___vfprintf_internal_r+0x159c>
   30e40:	49000115 	stw	r4,4(r9)
   30e44:	4111883a 	add	r8,r8,r4
   30e48:	18c00044 	addi	r3,r3,1
   30e4c:	da011d15 	stw	r8,1140(sp)
   30e50:	d8c11c15 	stw	r3,1136(sp)
   30e54:	008001c4 	movi	r2,7
   30e58:	10c23616 	blt	r2,r3,31734 <___vfprintf_internal_r+0x1ae0>
   30e5c:	4a400204 	addi	r9,r9,8
   30e60:	d8813217 	ldw	r2,1224(sp)
   30e64:	90a5c83a 	sub	r18,r18,r2
   30e68:	04beae0e 	bge	zero,r18,30924 <___vfprintf_internal_r+0xcd0>
   30e6c:	04c00404 	movi	r19,16
   30e70:	d8c11c17 	ldw	r3,1136(sp)
   30e74:	05000134 	movhi	r20,4
   30e78:	a5048384 	addi	r20,r20,4622
   30e7c:	9c81dd0e 	bge	r19,r18,315f4 <___vfprintf_internal_r+0x19a0>
   30e80:	058001c4 	movi	r22,7
   30e84:	ddc12917 	ldw	r23,1188(sp)
   30e88:	00000306 	br	30e98 <___vfprintf_internal_r+0x1244>
   30e8c:	4a400204 	addi	r9,r9,8
   30e90:	94bffc04 	addi	r18,r18,-16
   30e94:	9c81d70e 	bge	r19,r18,315f4 <___vfprintf_internal_r+0x19a0>
   30e98:	4d000015 	stw	r20,0(r9)
   30e9c:	4cc00115 	stw	r19,4(r9)
   30ea0:	42000404 	addi	r8,r8,16
   30ea4:	18c00044 	addi	r3,r3,1
   30ea8:	da011d15 	stw	r8,1140(sp)
   30eac:	d8c11c15 	stw	r3,1136(sp)
   30eb0:	b0fff60e 	bge	r22,r3,30e8c <___vfprintf_internal_r+0x1238>
   30eb4:	8809883a 	mov	r4,r17
   30eb8:	b80b883a 	mov	r5,r23
   30ebc:	d9811b04 	addi	r6,sp,1132
   30ec0:	002fc200 	call	2fc20 <__sprint_r>
   30ec4:	103ca91e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30ec8:	da011d17 	ldw	r8,1140(sp)
   30ecc:	d8c11c17 	ldw	r3,1136(sp)
   30ed0:	da400404 	addi	r9,sp,16
   30ed4:	003fee06 	br	30e90 <___vfprintf_internal_r+0x123c>
   30ed8:	d9412917 	ldw	r5,1188(sp)
   30edc:	8809883a 	mov	r4,r17
   30ee0:	d9811b04 	addi	r6,sp,1132
   30ee4:	002fc200 	call	2fc20 <__sprint_r>
   30ee8:	103ca01e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30eec:	da011d17 	ldw	r8,1140(sp)
   30ef0:	d8c11c17 	ldw	r3,1136(sp)
   30ef4:	da400404 	addi	r9,sp,16
   30ef8:	003dee06 	br	306b4 <___vfprintf_internal_r+0xa60>
   30efc:	00c00084 	movi	r3,2
   30f00:	bd84b03a 	or	r2,r23,r22
   30f04:	d8012585 	stb	zero,1174(sp)
   30f08:	003ccb06 	br	30238 <___vfprintf_internal_r+0x5e4>
   30f0c:	8080040c 	andi	r2,r16,16
   30f10:	1000ae26 	beq	r2,zero,311cc <___vfprintf_internal_r+0x1578>
   30f14:	d9012d17 	ldw	r4,1204(sp)
   30f18:	25c00017 	ldw	r23,0(r4)
   30f1c:	21000104 	addi	r4,r4,4
   30f20:	d9012d15 	stw	r4,1204(sp)
   30f24:	b82dd7fa 	srai	r22,r23,31
   30f28:	b005883a 	mov	r2,r22
   30f2c:	003cb906 	br	30214 <___vfprintf_internal_r+0x5c0>
   30f30:	8080040c 	andi	r2,r16,16
   30f34:	10007026 	beq	r2,zero,310f8 <___vfprintf_internal_r+0x14a4>
   30f38:	d8812d17 	ldw	r2,1204(sp)
   30f3c:	002d883a 	mov	r22,zero
   30f40:	00c00044 	movi	r3,1
   30f44:	15c00017 	ldw	r23,0(r2)
   30f48:	10800104 	addi	r2,r2,4
   30f4c:	d8812d15 	stw	r2,1204(sp)
   30f50:	d8012585 	stb	zero,1174(sp)
   30f54:	b805883a 	mov	r2,r23
   30f58:	003cb706 	br	30238 <___vfprintf_internal_r+0x5e4>
   30f5c:	d8813217 	ldw	r2,1224(sp)
   30f60:	14ffffc4 	addi	r19,r2,-1
   30f64:	04ff4f0e 	bge	zero,r19,30ca4 <___vfprintf_internal_r+0x1050>
   30f68:	05800404 	movi	r22,16
   30f6c:	05000134 	movhi	r20,4
   30f70:	a5048384 	addi	r20,r20,4622
   30f74:	b4c0470e 	bge	r22,r19,31094 <___vfprintf_internal_r+0x1440>
   30f78:	05c001c4 	movi	r23,7
   30f7c:	df012917 	ldw	fp,1188(sp)
   30f80:	00000306 	br	30f90 <___vfprintf_internal_r+0x133c>
   30f84:	94800204 	addi	r18,r18,8
   30f88:	9cfffc04 	addi	r19,r19,-16
   30f8c:	b4c0410e 	bge	r22,r19,31094 <___vfprintf_internal_r+0x1440>
   30f90:	95000015 	stw	r20,0(r18)
   30f94:	95800115 	stw	r22,4(r18)
   30f98:	42000404 	addi	r8,r8,16
   30f9c:	18c00044 	addi	r3,r3,1
   30fa0:	da011d15 	stw	r8,1140(sp)
   30fa4:	d8c11c15 	stw	r3,1136(sp)
   30fa8:	b8fff60e 	bge	r23,r3,30f84 <___vfprintf_internal_r+0x1330>
   30fac:	8809883a 	mov	r4,r17
   30fb0:	e00b883a 	mov	r5,fp
   30fb4:	d9811b04 	addi	r6,sp,1132
   30fb8:	002fc200 	call	2fc20 <__sprint_r>
   30fbc:	103c6b1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   30fc0:	da011d17 	ldw	r8,1140(sp)
   30fc4:	d8c11c17 	ldw	r3,1136(sp)
   30fc8:	dc800404 	addi	r18,sp,16
   30fcc:	003fee06 	br	30f88 <___vfprintf_internal_r+0x1334>
   30fd0:	8080040c 	andi	r2,r16,16
   30fd4:	10005326 	beq	r2,zero,31124 <___vfprintf_internal_r+0x14d0>
   30fd8:	d8c12d17 	ldw	r3,1204(sp)
   30fdc:	002d883a 	mov	r22,zero
   30fe0:	1dc00017 	ldw	r23,0(r3)
   30fe4:	18c00104 	addi	r3,r3,4
   30fe8:	d8c12d15 	stw	r3,1204(sp)
   30fec:	b805883a 	mov	r2,r23
   30ff0:	0007883a 	mov	r3,zero
   30ff4:	d8012585 	stb	zero,1174(sp)
   30ff8:	003c8f06 	br	30238 <___vfprintf_internal_r+0x5e4>
   30ffc:	8088703a 	and	r4,r16,r2
   31000:	203efe1e 	bne	r4,zero,30bfc <___vfprintf_internal_r+0xfa8>
   31004:	48800115 	stw	r2,4(r9)
   31008:	42000044 	addi	r8,r8,1
   3100c:	18c00044 	addi	r3,r3,1
   31010:	da011d15 	stw	r8,1140(sp)
   31014:	d8c11c15 	stw	r3,1136(sp)
   31018:	008001c4 	movi	r2,7
   3101c:	10c00216 	blt	r2,r3,31028 <___vfprintf_internal_r+0x13d4>
   31020:	4c800204 	addi	r18,r9,8
   31024:	003f1f06 	br	30ca4 <___vfprintf_internal_r+0x1050>
   31028:	d9412917 	ldw	r5,1188(sp)
   3102c:	8809883a 	mov	r4,r17
   31030:	d9811b04 	addi	r6,sp,1132
   31034:	002fc200 	call	2fc20 <__sprint_r>
   31038:	103c4c1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3103c:	dc800404 	addi	r18,sp,16
   31040:	da011d17 	ldw	r8,1140(sp)
   31044:	d8c11c17 	ldw	r3,1136(sp)
   31048:	003f1606 	br	30ca4 <___vfprintf_internal_r+0x1050>
   3104c:	d9412917 	ldw	r5,1188(sp)
   31050:	8809883a 	mov	r4,r17
   31054:	d9811b04 	addi	r6,sp,1132
   31058:	002fc200 	call	2fc20 <__sprint_r>
   3105c:	103c431e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31060:	da011d17 	ldw	r8,1140(sp)
   31064:	d8c11c17 	ldw	r3,1136(sp)
   31068:	da400404 	addi	r9,sp,16
   3106c:	003eec06 	br	30c20 <___vfprintf_internal_r+0xfcc>
   31070:	d9412917 	ldw	r5,1188(sp)
   31074:	8809883a 	mov	r4,r17
   31078:	d9811b04 	addi	r6,sp,1132
   3107c:	002fc200 	call	2fc20 <__sprint_r>
   31080:	103c3a1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31084:	da011d17 	ldw	r8,1140(sp)
   31088:	d8c11c17 	ldw	r3,1136(sp)
   3108c:	dc800404 	addi	r18,sp,16
   31090:	003eee06 	br	30c4c <___vfprintf_internal_r+0xff8>
   31094:	95000015 	stw	r20,0(r18)
   31098:	94c00115 	stw	r19,4(r18)
   3109c:	44d1883a 	add	r8,r8,r19
   310a0:	003efa06 	br	30c8c <___vfprintf_internal_r+0x1038>
   310a4:	d9412917 	ldw	r5,1188(sp)
   310a8:	8809883a 	mov	r4,r17
   310ac:	d9811b04 	addi	r6,sp,1132
   310b0:	002fc200 	call	2fc20 <__sprint_r>
   310b4:	103c2d1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   310b8:	da011d17 	ldw	r8,1140(sp)
   310bc:	d8c11c17 	ldw	r3,1136(sp)
   310c0:	da400404 	addi	r9,sp,16
   310c4:	003d9806 	br	30728 <___vfprintf_internal_r+0xad4>
   310c8:	8080100c 	andi	r2,r16,64
   310cc:	10011626 	beq	r2,zero,31528 <___vfprintf_internal_r+0x18d4>
   310d0:	d8c12d17 	ldw	r3,1204(sp)
   310d4:	002d883a 	mov	r22,zero
   310d8:	1dc0000b 	ldhu	r23,0(r3)
   310dc:	18c00104 	addi	r3,r3,4
   310e0:	d8c12d15 	stw	r3,1204(sp)
   310e4:	003cc106 	br	303ec <___vfprintf_internal_r+0x798>
   310e8:	4d000015 	stw	r20,0(r9)
   310ec:	4c800115 	stw	r18,4(r9)
   310f0:	4491883a 	add	r8,r8,r18
   310f4:	003dc006 	br	307f8 <___vfprintf_internal_r+0xba4>
   310f8:	8080100c 	andi	r2,r16,64
   310fc:	10010126 	beq	r2,zero,31504 <___vfprintf_internal_r+0x18b0>
   31100:	d8c12d17 	ldw	r3,1204(sp)
   31104:	002d883a 	mov	r22,zero
   31108:	1dc0000b 	ldhu	r23,0(r3)
   3110c:	18c00104 	addi	r3,r3,4
   31110:	d8c12d15 	stw	r3,1204(sp)
   31114:	b805883a 	mov	r2,r23
   31118:	00c00044 	movi	r3,1
   3111c:	d8012585 	stb	zero,1174(sp)
   31120:	003c4506 	br	30238 <___vfprintf_internal_r+0x5e4>
   31124:	8080100c 	andi	r2,r16,64
   31128:	10010526 	beq	r2,zero,31540 <___vfprintf_internal_r+0x18ec>
   3112c:	d9012d17 	ldw	r4,1204(sp)
   31130:	002d883a 	mov	r22,zero
   31134:	0007883a 	mov	r3,zero
   31138:	25c0000b 	ldhu	r23,0(r4)
   3113c:	21000104 	addi	r4,r4,4
   31140:	d9012d15 	stw	r4,1204(sp)
   31144:	b805883a 	mov	r2,r23
   31148:	d8012585 	stb	zero,1174(sp)
   3114c:	003c3a06 	br	30238 <___vfprintf_internal_r+0x5e4>
   31150:	d8812d17 	ldw	r2,1204(sp)
   31154:	15800017 	ldw	r22,0(r2)
   31158:	15000117 	ldw	r20,4(r2)
   3115c:	10800204 	addi	r2,r2,8
   31160:	d8812d15 	stw	r2,1204(sp)
   31164:	dd813315 	stw	r22,1228(sp)
   31168:	dd013415 	stw	r20,1232(sp)
   3116c:	003c5906 	br	302d4 <___vfprintf_internal_r+0x680>
   31170:	00c00084 	movi	r3,2
   31174:	d8012585 	stb	zero,1174(sp)
   31178:	003c2f06 	br	30238 <___vfprintf_internal_r+0x5e4>
   3117c:	ac800007 	ldb	r18,0(r21)
   31180:	003b1006 	br	2fdc4 <___vfprintf_internal_r+0x170>
   31184:	8080040c 	andi	r2,r16,16
   31188:	1000091e 	bne	r2,zero,311b0 <___vfprintf_internal_r+0x155c>
   3118c:	8400100c 	andi	r16,r16,64
   31190:	80000726 	beq	r16,zero,311b0 <___vfprintf_internal_r+0x155c>
   31194:	d8c12d17 	ldw	r3,1204(sp)
   31198:	d9012c17 	ldw	r4,1200(sp)
   3119c:	18800017 	ldw	r2,0(r3)
   311a0:	18c00104 	addi	r3,r3,4
   311a4:	d8c12d15 	stw	r3,1204(sp)
   311a8:	1100000d 	sth	r4,0(r2)
   311ac:	003adf06 	br	2fd2c <___vfprintf_internal_r+0xd8>
   311b0:	d8c12d17 	ldw	r3,1204(sp)
   311b4:	d9012c17 	ldw	r4,1200(sp)
   311b8:	18800017 	ldw	r2,0(r3)
   311bc:	18c00104 	addi	r3,r3,4
   311c0:	d8c12d15 	stw	r3,1204(sp)
   311c4:	11000015 	stw	r4,0(r2)
   311c8:	003ad806 	br	2fd2c <___vfprintf_internal_r+0xd8>
   311cc:	8080100c 	andi	r2,r16,64
   311d0:	1000c526 	beq	r2,zero,314e8 <___vfprintf_internal_r+0x1894>
   311d4:	d8812d17 	ldw	r2,1204(sp)
   311d8:	15c0000f 	ldh	r23,0(r2)
   311dc:	10800104 	addi	r2,r2,4
   311e0:	d8812d15 	stw	r2,1204(sp)
   311e4:	b82dd7fa 	srai	r22,r23,31
   311e8:	b005883a 	mov	r2,r22
   311ec:	003c0906 	br	30214 <___vfprintf_internal_r+0x5c0>
   311f0:	4c800115 	stw	r18,4(r9)
   311f4:	9211883a 	add	r8,r18,r8
   311f8:	18c00044 	addi	r3,r3,1
   311fc:	da011d15 	stw	r8,1140(sp)
   31200:	d8c11c15 	stw	r3,1136(sp)
   31204:	008001c4 	movi	r2,7
   31208:	10c14016 	blt	r2,r3,3170c <___vfprintf_internal_r+0x1ab8>
   3120c:	4a400204 	addi	r9,r9,8
   31210:	d8813717 	ldw	r2,1244(sp)
   31214:	9ca7883a 	add	r19,r19,r18
   31218:	48800015 	stw	r2,0(r9)
   3121c:	00800044 	movi	r2,1
   31220:	48800115 	stw	r2,4(r9)
   31224:	4091883a 	add	r8,r8,r2
   31228:	1887883a 	add	r3,r3,r2
   3122c:	da011d15 	stw	r8,1140(sp)
   31230:	d8c11c15 	stw	r3,1136(sp)
   31234:	008001c4 	movi	r2,7
   31238:	10c12c16 	blt	r2,r3,316ec <___vfprintf_internal_r+0x1a98>
   3123c:	4a400204 	addi	r9,r9,8
   31240:	d9013217 	ldw	r4,1224(sp)
   31244:	da011d17 	ldw	r8,1140(sp)
   31248:	d8c11c17 	ldw	r3,1136(sp)
   3124c:	24a5c83a 	sub	r18,r4,r18
   31250:	4cc00015 	stw	r19,0(r9)
   31254:	003fa506 	br	310ec <___vfprintf_internal_r+0x1498>
   31258:	04c00134 	movhi	r19,4
   3125c:	9cc47004 	addi	r19,r19,4544
   31260:	003c2e06 	br	3031c <___vfprintf_internal_r+0x6c8>
   31264:	d9412917 	ldw	r5,1188(sp)
   31268:	8809883a 	mov	r4,r17
   3126c:	d9811b04 	addi	r6,sp,1132
   31270:	002fc200 	call	2fc20 <__sprint_r>
   31274:	103bbd1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31278:	da011d17 	ldw	r8,1140(sp)
   3127c:	da400404 	addi	r9,sp,16
   31280:	003df606 	br	30a5c <___vfprintf_internal_r+0xe08>
   31284:	00800134 	movhi	r2,4
   31288:	10847f04 	addi	r2,r2,4604
   3128c:	48800015 	stw	r2,0(r9)
   31290:	00800044 	movi	r2,1
   31294:	48800115 	stw	r2,4(r9)
   31298:	4091883a 	add	r8,r8,r2
   3129c:	1887883a 	add	r3,r3,r2
   312a0:	da011d15 	stw	r8,1140(sp)
   312a4:	d8c11c15 	stw	r3,1136(sp)
   312a8:	008001c4 	movi	r2,7
   312ac:	10c0bc16 	blt	r2,r3,315a0 <___vfprintf_internal_r+0x194c>
   312b0:	4a400204 	addi	r9,r9,8
   312b4:	9000041e 	bne	r18,zero,312c8 <___vfprintf_internal_r+0x1674>
   312b8:	d8c13217 	ldw	r3,1224(sp)
   312bc:	1800021e 	bne	r3,zero,312c8 <___vfprintf_internal_r+0x1674>
   312c0:	8080004c 	andi	r2,r16,1
   312c4:	103d5226 	beq	r2,zero,30810 <___vfprintf_internal_r+0xbbc>
   312c8:	d8c11c17 	ldw	r3,1136(sp)
   312cc:	d9013717 	ldw	r4,1244(sp)
   312d0:	00800044 	movi	r2,1
   312d4:	48800115 	stw	r2,4(r9)
   312d8:	49000015 	stw	r4,0(r9)
   312dc:	4091883a 	add	r8,r8,r2
   312e0:	1887883a 	add	r3,r3,r2
   312e4:	da011d15 	stw	r8,1140(sp)
   312e8:	d8c11c15 	stw	r3,1136(sp)
   312ec:	008001c4 	movi	r2,7
   312f0:	10c14516 	blt	r2,r3,31808 <___vfprintf_internal_r+0x1bb4>
   312f4:	4a400204 	addi	r9,r9,8
   312f8:	04a5c83a 	sub	r18,zero,r18
   312fc:	0480d70e 	bge	zero,r18,3165c <___vfprintf_internal_r+0x1a08>
   31300:	05800404 	movi	r22,16
   31304:	05000134 	movhi	r20,4
   31308:	a5048384 	addi	r20,r20,4622
   3130c:	b480db0e 	bge	r22,r18,3167c <___vfprintf_internal_r+0x1a28>
   31310:	05c001c4 	movi	r23,7
   31314:	df012917 	ldw	fp,1188(sp)
   31318:	00000306 	br	31328 <___vfprintf_internal_r+0x16d4>
   3131c:	4a400204 	addi	r9,r9,8
   31320:	94bffc04 	addi	r18,r18,-16
   31324:	b480d50e 	bge	r22,r18,3167c <___vfprintf_internal_r+0x1a28>
   31328:	4d000015 	stw	r20,0(r9)
   3132c:	4d800115 	stw	r22,4(r9)
   31330:	42000404 	addi	r8,r8,16
   31334:	18c00044 	addi	r3,r3,1
   31338:	da011d15 	stw	r8,1140(sp)
   3133c:	d8c11c15 	stw	r3,1136(sp)
   31340:	b8fff60e 	bge	r23,r3,3131c <___vfprintf_internal_r+0x16c8>
   31344:	8809883a 	mov	r4,r17
   31348:	e00b883a 	mov	r5,fp
   3134c:	d9811b04 	addi	r6,sp,1132
   31350:	002fc200 	call	2fc20 <__sprint_r>
   31354:	103b851e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31358:	da011d17 	ldw	r8,1140(sp)
   3135c:	d8c11c17 	ldw	r3,1136(sp)
   31360:	da400404 	addi	r9,sp,16
   31364:	003fee06 	br	31320 <___vfprintf_internal_r+0x16cc>
   31368:	da413c15 	stw	r9,1264(sp)
   3136c:	003718c0 	call	3718c <__isnand>
   31370:	da413c17 	ldw	r9,1264(sp)
   31374:	10007e1e 	bne	r2,zero,31570 <___vfprintf_internal_r+0x191c>
   31378:	00bfffc4 	movi	r2,-1
   3137c:	e0816a26 	beq	fp,r2,31928 <___vfprintf_internal_r+0x1cd4>
   31380:	008019c4 	movi	r2,103
   31384:	90816526 	beq	r18,r2,3191c <___vfprintf_internal_r+0x1cc8>
   31388:	008011c4 	movi	r2,71
   3138c:	90816326 	beq	r18,r2,3191c <___vfprintf_internal_r+0x1cc8>
   31390:	80c04014 	ori	r3,r16,256
   31394:	d8c12a15 	stw	r3,1192(sp)
   31398:	a0016516 	blt	r20,zero,31930 <___vfprintf_internal_r+0x1cdc>
   3139c:	d8012f05 	stb	zero,1212(sp)
   313a0:	00801984 	movi	r2,102
   313a4:	9080f226 	beq	r18,r2,31770 <___vfprintf_internal_r+0x1b1c>
   313a8:	00801184 	movi	r2,70
   313ac:	9080f026 	beq	r18,r2,31770 <___vfprintf_internal_r+0x1b1c>
   313b0:	00801944 	movi	r2,101
   313b4:	90818d26 	beq	r18,r2,319ec <___vfprintf_internal_r+0x1d98>
   313b8:	00801144 	movi	r2,69
   313bc:	90818b26 	beq	r18,r2,319ec <___vfprintf_internal_r+0x1d98>
   313c0:	e02f883a 	mov	r23,fp
   313c4:	d8812404 	addi	r2,sp,1168
   313c8:	d8800115 	stw	r2,4(sp)
   313cc:	d8812304 	addi	r2,sp,1164
   313d0:	d8800215 	stw	r2,8(sp)
   313d4:	d8812204 	addi	r2,sp,1160
   313d8:	ddc00015 	stw	r23,0(sp)
   313dc:	d8800315 	stw	r2,12(sp)
   313e0:	8809883a 	mov	r4,r17
   313e4:	b00b883a 	mov	r5,r22
   313e8:	a00d883a 	mov	r6,r20
   313ec:	01c00084 	movi	r7,2
   313f0:	da413c15 	stw	r9,1264(sp)
   313f4:	003389c0 	call	3389c <_dtoa_r>
   313f8:	1027883a 	mov	r19,r2
   313fc:	008019c4 	movi	r2,103
   31400:	da413c17 	ldw	r9,1264(sp)
   31404:	9081951e 	bne	r18,r2,31a5c <___vfprintf_internal_r+0x1e08>
   31408:	8080004c 	andi	r2,r16,1
   3140c:	10017926 	beq	r2,zero,319f4 <___vfprintf_internal_r+0x1da0>
   31410:	00801184 	movi	r2,70
   31414:	9dc7883a 	add	r3,r19,r23
   31418:	9080e626 	beq	r18,r2,317b4 <___vfprintf_internal_r+0x1b60>
   3141c:	b009883a 	mov	r4,r22
   31420:	a00b883a 	mov	r5,r20
   31424:	000d883a 	mov	r6,zero
   31428:	000f883a 	mov	r7,zero
   3142c:	d8c13b15 	stw	r3,1260(sp)
   31430:	da413c15 	stw	r9,1264(sp)
   31434:	003b7200 	call	3b720 <__eqdf2>
   31438:	d8c13b17 	ldw	r3,1260(sp)
   3143c:	da413c17 	ldw	r9,1264(sp)
   31440:	10000726 	beq	r2,zero,31460 <___vfprintf_internal_r+0x180c>
   31444:	d8812217 	ldw	r2,1160(sp)
   31448:	10c18a2e 	bgeu	r2,r3,31a74 <___vfprintf_internal_r+0x1e20>
   3144c:	01000c04 	movi	r4,48
   31450:	11000005 	stb	r4,0(r2)
   31454:	10800044 	addi	r2,r2,1
   31458:	d8812215 	stw	r2,1160(sp)
   3145c:	10fffc1e 	bne	r2,r3,31450 <___vfprintf_internal_r+0x17fc>
   31460:	1cc7c83a 	sub	r3,r3,r19
   31464:	d8c13215 	stw	r3,1224(sp)
   31468:	008019c4 	movi	r2,103
   3146c:	9080fa26 	beq	r18,r2,31858 <___vfprintf_internal_r+0x1c04>
   31470:	008011c4 	movi	r2,71
   31474:	9080f826 	beq	r18,r2,31858 <___vfprintf_internal_r+0x1c04>
   31478:	00801984 	movi	r2,102
   3147c:	90818e1e 	bne	r18,r2,31ab8 <___vfprintf_internal_r+0x1e64>
   31480:	d8812417 	ldw	r2,1168(sp)
   31484:	d8812b15 	stw	r2,1196(sp)
   31488:	00817c0e 	bge	zero,r2,31a7c <___vfprintf_internal_r+0x1e28>
   3148c:	e000021e 	bne	fp,zero,31498 <___vfprintf_internal_r+0x1844>
   31490:	8400004c 	andi	r16,r16,1
   31494:	80000426 	beq	r16,zero,314a8 <___vfprintf_internal_r+0x1854>
   31498:	d8812b17 	ldw	r2,1196(sp)
   3149c:	e2000044 	addi	r8,fp,1
   314a0:	1205883a 	add	r2,r2,r8
   314a4:	d8812b15 	stw	r2,1196(sp)
   314a8:	d8812815 	stw	r2,1184(sp)
   314ac:	10010b16 	blt	r2,zero,318dc <___vfprintf_internal_r+0x1c88>
   314b0:	ddc12f07 	ldb	r23,1212(sp)
   314b4:	b800e426 	beq	r23,zero,31848 <___vfprintf_internal_r+0x1bf4>
   314b8:	00800b44 	movi	r2,45
   314bc:	d8812585 	stb	r2,1174(sp)
   314c0:	dc012a17 	ldw	r16,1192(sp)
   314c4:	d8013115 	stw	zero,1220(sp)
   314c8:	003b7306 	br	30298 <___vfprintf_internal_r+0x644>
   314cc:	d8812b17 	ldw	r2,1196(sp)
   314d0:	d8812815 	stw	r2,1184(sp)
   314d4:	10005716 	blt	r2,zero,31634 <___vfprintf_internal_r+0x19e0>
   314d8:	d8812583 	ldbu	r2,1174(sp)
   314dc:	ddc12d15 	stw	r23,1204(sp)
   314e0:	d8013115 	stw	zero,1220(sp)
   314e4:	003b6806 	br	30288 <___vfprintf_internal_r+0x634>
   314e8:	d8c12d17 	ldw	r3,1204(sp)
   314ec:	1dc00017 	ldw	r23,0(r3)
   314f0:	18c00104 	addi	r3,r3,4
   314f4:	d8c12d15 	stw	r3,1204(sp)
   314f8:	b82dd7fa 	srai	r22,r23,31
   314fc:	b005883a 	mov	r2,r22
   31500:	003b4406 	br	30214 <___vfprintf_internal_r+0x5c0>
   31504:	d9012d17 	ldw	r4,1204(sp)
   31508:	002d883a 	mov	r22,zero
   3150c:	00c00044 	movi	r3,1
   31510:	25c00017 	ldw	r23,0(r4)
   31514:	21000104 	addi	r4,r4,4
   31518:	d9012d15 	stw	r4,1204(sp)
   3151c:	b805883a 	mov	r2,r23
   31520:	d8012585 	stb	zero,1174(sp)
   31524:	003b4406 	br	30238 <___vfprintf_internal_r+0x5e4>
   31528:	d9012d17 	ldw	r4,1204(sp)
   3152c:	002d883a 	mov	r22,zero
   31530:	25c00017 	ldw	r23,0(r4)
   31534:	21000104 	addi	r4,r4,4
   31538:	d9012d15 	stw	r4,1204(sp)
   3153c:	003bab06 	br	303ec <___vfprintf_internal_r+0x798>
   31540:	d8812d17 	ldw	r2,1204(sp)
   31544:	002d883a 	mov	r22,zero
   31548:	0007883a 	mov	r3,zero
   3154c:	15c00017 	ldw	r23,0(r2)
   31550:	10800104 	addi	r2,r2,4
   31554:	d8812d15 	stw	r2,1204(sp)
   31558:	d8012585 	stb	zero,1174(sp)
   3155c:	b805883a 	mov	r2,r23
   31560:	003b3506 	br	30238 <___vfprintf_internal_r+0x5e4>
   31564:	00ffffc4 	movi	r3,-1
   31568:	b82b883a 	mov	r21,r23
   3156c:	003a1606 	br	2fdc8 <___vfprintf_internal_r+0x174>
   31570:	008011c4 	movi	r2,71
   31574:	1480b116 	blt	r2,r18,3183c <___vfprintf_internal_r+0x1be8>
   31578:	04c00134 	movhi	r19,4
   3157c:	9cc47104 	addi	r19,r19,4548
   31580:	00c000c4 	movi	r3,3
   31584:	00bfdfc4 	movi	r2,-129
   31588:	80a0703a 	and	r16,r16,r2
   3158c:	d8c12815 	stw	r3,1184(sp)
   31590:	d8812583 	ldbu	r2,1174(sp)
   31594:	d8c12b15 	stw	r3,1196(sp)
   31598:	d8013115 	stw	zero,1220(sp)
   3159c:	003b3a06 	br	30288 <___vfprintf_internal_r+0x634>
   315a0:	d9412917 	ldw	r5,1188(sp)
   315a4:	8809883a 	mov	r4,r17
   315a8:	d9811b04 	addi	r6,sp,1132
   315ac:	002fc200 	call	2fc20 <__sprint_r>
   315b0:	103aee1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   315b4:	dc812417 	ldw	r18,1168(sp)
   315b8:	da011d17 	ldw	r8,1140(sp)
   315bc:	da400404 	addi	r9,sp,16
   315c0:	003f3c06 	br	312b4 <___vfprintf_internal_r+0x1660>
   315c4:	ad400044 	addi	r21,r21,1
   315c8:	84000814 	ori	r16,r16,32
   315cc:	14800047 	ldb	r18,1(r2)
   315d0:	0039fc06 	br	2fdc4 <___vfprintf_internal_r+0x170>
   315d4:	d9412917 	ldw	r5,1188(sp)
   315d8:	8809883a 	mov	r4,r17
   315dc:	d9811b04 	addi	r6,sp,1132
   315e0:	002fc200 	call	2fc20 <__sprint_r>
   315e4:	103ae11e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   315e8:	da011d17 	ldw	r8,1140(sp)
   315ec:	da400404 	addi	r9,sp,16
   315f0:	003d2b06 	br	30aa0 <___vfprintf_internal_r+0xe4c>
   315f4:	4d000015 	stw	r20,0(r9)
   315f8:	4c800115 	stw	r18,4(r9)
   315fc:	4491883a 	add	r8,r8,r18
   31600:	18c00044 	addi	r3,r3,1
   31604:	da011d15 	stw	r8,1140(sp)
   31608:	d8c11c15 	stw	r3,1136(sp)
   3160c:	008001c4 	movi	r2,7
   31610:	10fcbd16 	blt	r2,r3,30908 <___vfprintf_internal_r+0xcb4>
   31614:	4a400204 	addi	r9,r9,8
   31618:	003cc206 	br	30924 <___vfprintf_internal_r+0xcd0>
   3161c:	da413c15 	stw	r9,1264(sp)
   31620:	002f6680 	call	2f668 <strlen>
   31624:	d8812b15 	stw	r2,1196(sp)
   31628:	d8812815 	stw	r2,1184(sp)
   3162c:	da413c17 	ldw	r9,1264(sp)
   31630:	103fa90e 	bge	r2,zero,314d8 <___vfprintf_internal_r+0x1884>
   31634:	d8012815 	stw	zero,1184(sp)
   31638:	003fa706 	br	314d8 <___vfprintf_internal_r+0x1884>
   3163c:	d9412917 	ldw	r5,1188(sp)
   31640:	8809883a 	mov	r4,r17
   31644:	d9811b04 	addi	r6,sp,1132
   31648:	002fc200 	call	2fc20 <__sprint_r>
   3164c:	103ac71e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31650:	da011d17 	ldw	r8,1140(sp)
   31654:	d8c11c17 	ldw	r3,1136(sp)
   31658:	da400404 	addi	r9,sp,16
   3165c:	d8813217 	ldw	r2,1224(sp)
   31660:	4cc00015 	stw	r19,0(r9)
   31664:	48800115 	stw	r2,4(r9)
   31668:	4091883a 	add	r8,r8,r2
   3166c:	003c6206 	br	307f8 <___vfprintf_internal_r+0xba4>
   31670:	00800b44 	movi	r2,45
   31674:	d8812585 	stb	r2,1174(sp)
   31678:	003b2406 	br	3030c <___vfprintf_internal_r+0x6b8>
   3167c:	4d000015 	stw	r20,0(r9)
   31680:	4c800115 	stw	r18,4(r9)
   31684:	4491883a 	add	r8,r8,r18
   31688:	18c00044 	addi	r3,r3,1
   3168c:	da011d15 	stw	r8,1140(sp)
   31690:	d8c11c15 	stw	r3,1136(sp)
   31694:	008001c4 	movi	r2,7
   31698:	10ffe816 	blt	r2,r3,3163c <___vfprintf_internal_r+0x19e8>
   3169c:	4a400204 	addi	r9,r9,8
   316a0:	003fee06 	br	3165c <___vfprintf_internal_r+0x1a08>
   316a4:	d8c12b15 	stw	r3,1196(sp)
   316a8:	00800184 	movi	r2,6
   316ac:	10c0062e 	bgeu	r2,r3,316c8 <___vfprintf_internal_r+0x1a74>
   316b0:	d8812b15 	stw	r2,1196(sp)
   316b4:	d8812815 	stw	r2,1184(sp)
   316b8:	ddc12d15 	stw	r23,1204(sp)
   316bc:	04c00134 	movhi	r19,4
   316c0:	9cc47d04 	addi	r19,r19,4596
   316c4:	0039ca06 	br	2fdf0 <___vfprintf_internal_r+0x19c>
   316c8:	d8812b17 	ldw	r2,1196(sp)
   316cc:	d8812815 	stw	r2,1184(sp)
   316d0:	103ff90e 	bge	r2,zero,316b8 <___vfprintf_internal_r+0x1a64>
   316d4:	d8012815 	stw	zero,1184(sp)
   316d8:	003ff706 	br	316b8 <___vfprintf_internal_r+0x1a64>
   316dc:	00800244 	movi	r2,9
   316e0:	15fdaa36 	bltu	r2,r23,30d8c <___vfprintf_internal_r+0x1138>
   316e4:	dd010e04 	addi	r20,sp,1080
   316e8:	003dc606 	br	30e04 <___vfprintf_internal_r+0x11b0>
   316ec:	d9412917 	ldw	r5,1188(sp)
   316f0:	8809883a 	mov	r4,r17
   316f4:	d9811b04 	addi	r6,sp,1132
   316f8:	002fc200 	call	2fc20 <__sprint_r>
   316fc:	103a9b1e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31700:	dc812417 	ldw	r18,1168(sp)
   31704:	da400404 	addi	r9,sp,16
   31708:	003ecd06 	br	31240 <___vfprintf_internal_r+0x15ec>
   3170c:	d9412917 	ldw	r5,1188(sp)
   31710:	8809883a 	mov	r4,r17
   31714:	d9811b04 	addi	r6,sp,1132
   31718:	002fc200 	call	2fc20 <__sprint_r>
   3171c:	103a931e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31720:	dc812417 	ldw	r18,1168(sp)
   31724:	da011d17 	ldw	r8,1140(sp)
   31728:	d8c11c17 	ldw	r3,1136(sp)
   3172c:	da400404 	addi	r9,sp,16
   31730:	003eb706 	br	31210 <___vfprintf_internal_r+0x15bc>
   31734:	d9412917 	ldw	r5,1188(sp)
   31738:	8809883a 	mov	r4,r17
   3173c:	d9811b04 	addi	r6,sp,1132
   31740:	002fc200 	call	2fc20 <__sprint_r>
   31744:	103a891e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   31748:	dc812417 	ldw	r18,1168(sp)
   3174c:	da011d17 	ldw	r8,1140(sp)
   31750:	da400404 	addi	r9,sp,16
   31754:	003dc206 	br	30e60 <___vfprintf_internal_r+0x120c>
   31758:	df012815 	stw	fp,1184(sp)
   3175c:	d8812583 	ldbu	r2,1174(sp)
   31760:	df012b15 	stw	fp,1196(sp)
   31764:	ddc12d15 	stw	r23,1204(sp)
   31768:	d8013115 	stw	zero,1220(sp)
   3176c:	003ac606 	br	30288 <___vfprintf_internal_r+0x634>
   31770:	d8812404 	addi	r2,sp,1168
   31774:	d8800115 	stw	r2,4(sp)
   31778:	d8812304 	addi	r2,sp,1164
   3177c:	d8800215 	stw	r2,8(sp)
   31780:	d8812204 	addi	r2,sp,1160
   31784:	df000015 	stw	fp,0(sp)
   31788:	d8800315 	stw	r2,12(sp)
   3178c:	8809883a 	mov	r4,r17
   31790:	b00b883a 	mov	r5,r22
   31794:	a00d883a 	mov	r6,r20
   31798:	01c000c4 	movi	r7,3
   3179c:	da413c15 	stw	r9,1264(sp)
   317a0:	003389c0 	call	3389c <_dtoa_r>
   317a4:	da413c17 	ldw	r9,1264(sp)
   317a8:	1027883a 	mov	r19,r2
   317ac:	1707883a 	add	r3,r2,fp
   317b0:	e02f883a 	mov	r23,fp
   317b4:	99000007 	ldb	r4,0(r19)
   317b8:	00800c04 	movi	r2,48
   317bc:	20800326 	beq	r4,r2,317cc <___vfprintf_internal_r+0x1b78>
   317c0:	da812417 	ldw	r10,1168(sp)
   317c4:	1a87883a 	add	r3,r3,r10
   317c8:	003f1406 	br	3141c <___vfprintf_internal_r+0x17c8>
   317cc:	b009883a 	mov	r4,r22
   317d0:	a00b883a 	mov	r5,r20
   317d4:	000d883a 	mov	r6,zero
   317d8:	000f883a 	mov	r7,zero
   317dc:	d8c13b15 	stw	r3,1260(sp)
   317e0:	da413c15 	stw	r9,1264(sp)
   317e4:	003b77c0 	call	3b77c <__nedf2>
   317e8:	d8c13b17 	ldw	r3,1260(sp)
   317ec:	da413c17 	ldw	r9,1264(sp)
   317f0:	103ff326 	beq	r2,zero,317c0 <___vfprintf_internal_r+0x1b6c>
   317f4:	00800044 	movi	r2,1
   317f8:	15d5c83a 	sub	r10,r2,r23
   317fc:	da812415 	stw	r10,1168(sp)
   31800:	1a87883a 	add	r3,r3,r10
   31804:	003f0506 	br	3141c <___vfprintf_internal_r+0x17c8>
   31808:	d9412917 	ldw	r5,1188(sp)
   3180c:	8809883a 	mov	r4,r17
   31810:	d9811b04 	addi	r6,sp,1132
   31814:	002fc200 	call	2fc20 <__sprint_r>
   31818:	103a541e 	bne	r2,zero,3016c <___vfprintf_internal_r+0x518>
   3181c:	dc812417 	ldw	r18,1168(sp)
   31820:	da011d17 	ldw	r8,1140(sp)
   31824:	d8c11c17 	ldw	r3,1136(sp)
   31828:	da400404 	addi	r9,sp,16
   3182c:	003eb206 	br	312f8 <___vfprintf_internal_r+0x16a4>
   31830:	b82b883a 	mov	r21,r23
   31834:	0007883a 	mov	r3,zero
   31838:	00396306 	br	2fdc8 <___vfprintf_internal_r+0x174>
   3183c:	04c00134 	movhi	r19,4
   31840:	9cc47204 	addi	r19,r19,4552
   31844:	003f4e06 	br	31580 <___vfprintf_internal_r+0x192c>
   31848:	d8812583 	ldbu	r2,1174(sp)
   3184c:	dc012a17 	ldw	r16,1192(sp)
   31850:	d8013115 	stw	zero,1220(sp)
   31854:	003a8c06 	br	30288 <___vfprintf_internal_r+0x634>
   31858:	d8812417 	ldw	r2,1168(sp)
   3185c:	d8812b15 	stw	r2,1196(sp)
   31860:	1029883a 	mov	r20,r2
   31864:	00bfff44 	movi	r2,-3
   31868:	a0800116 	blt	r20,r2,31870 <___vfprintf_internal_r+0x1c1c>
   3186c:	e5001d0e 	bge	fp,r20,318e4 <___vfprintf_internal_r+0x1c90>
   31870:	94bfff84 	addi	r18,r18,-2
   31874:	a53fffc4 	addi	r20,r20,-1
   31878:	dd012415 	stw	r20,1168(sp)
   3187c:	dc811fc5 	stb	r18,1151(sp)
   31880:	a0007216 	blt	r20,zero,31a4c <___vfprintf_internal_r+0x1df8>
   31884:	00800ac4 	movi	r2,43
   31888:	d8812005 	stb	r2,1152(sp)
   3188c:	00800244 	movi	r2,9
   31890:	15003516 	blt	r2,r20,31968 <___vfprintf_internal_r+0x1d14>
   31894:	00800c04 	movi	r2,48
   31898:	a5000c04 	addi	r20,r20,48
   3189c:	d8812045 	stb	r2,1153(sp)
   318a0:	dd012085 	stb	r20,1154(sp)
   318a4:	d8c120c4 	addi	r3,sp,1155
   318a8:	d8811fc4 	addi	r2,sp,1151
   318ac:	1885c83a 	sub	r2,r3,r2
   318b0:	d8c13217 	ldw	r3,1224(sp)
   318b4:	d8813515 	stw	r2,1236(sp)
   318b8:	1885883a 	add	r2,r3,r2
   318bc:	d8812b15 	stw	r2,1196(sp)
   318c0:	00800044 	movi	r2,1
   318c4:	10c0580e 	bge	r2,r3,31a28 <___vfprintf_internal_r+0x1dd4>
   318c8:	d8812b17 	ldw	r2,1196(sp)
   318cc:	10800044 	addi	r2,r2,1
   318d0:	d8812b15 	stw	r2,1196(sp)
   318d4:	d8812815 	stw	r2,1184(sp)
   318d8:	103ef50e 	bge	r2,zero,314b0 <___vfprintf_internal_r+0x185c>
   318dc:	d8012815 	stw	zero,1184(sp)
   318e0:	003ef306 	br	314b0 <___vfprintf_internal_r+0x185c>
   318e4:	d8812b17 	ldw	r2,1196(sp)
   318e8:	d8c13217 	ldw	r3,1224(sp)
   318ec:	10c01416 	blt	r2,r3,31940 <___vfprintf_internal_r+0x1cec>
   318f0:	8400004c 	andi	r16,r16,1
   318f4:	80000326 	beq	r16,zero,31904 <___vfprintf_internal_r+0x1cb0>
   318f8:	d8812b17 	ldw	r2,1196(sp)
   318fc:	10800044 	addi	r2,r2,1
   31900:	d8812b15 	stw	r2,1196(sp)
   31904:	d8812815 	stw	r2,1184(sp)
   31908:	10001416 	blt	r2,zero,3195c <___vfprintf_internal_r+0x1d08>
   3190c:	048019c4 	movi	r18,103
   31910:	003ee706 	br	314b0 <___vfprintf_internal_r+0x185c>
   31914:	d8012815 	stw	zero,1184(sp)
   31918:	003b1a06 	br	30584 <___vfprintf_internal_r+0x930>
   3191c:	e03e9c1e 	bne	fp,zero,31390 <___vfprintf_internal_r+0x173c>
   31920:	07000044 	movi	fp,1
   31924:	003e9a06 	br	31390 <___vfprintf_internal_r+0x173c>
   31928:	07000184 	movi	fp,6
   3192c:	003e9806 	br	31390 <___vfprintf_internal_r+0x173c>
   31930:	00c00b44 	movi	r3,45
   31934:	a520003c 	xorhi	r20,r20,32768
   31938:	d8c12f05 	stb	r3,1212(sp)
   3193c:	003e9806 	br	313a0 <___vfprintf_internal_r+0x174c>
   31940:	05003f0e 	bge	zero,r20,31a40 <___vfprintf_internal_r+0x1dec>
   31944:	05000044 	movi	r20,1
   31948:	d8c13217 	ldw	r3,1224(sp)
   3194c:	a0e9883a 	add	r20,r20,r3
   31950:	dd012b15 	stw	r20,1196(sp)
   31954:	dd012815 	stw	r20,1184(sp)
   31958:	a03fec0e 	bge	r20,zero,3190c <___vfprintf_internal_r+0x1cb8>
   3195c:	d8012815 	stw	zero,1184(sp)
   31960:	048019c4 	movi	r18,103
   31964:	003ed206 	br	314b0 <___vfprintf_internal_r+0x185c>
   31968:	d8c11f84 	addi	r3,sp,1150
   3196c:	102f883a 	mov	r23,r2
   31970:	4839883a 	mov	fp,r9
   31974:	a009883a 	mov	r4,r20
   31978:	01400284 	movi	r5,10
   3197c:	182d883a 	mov	r22,r3
   31980:	002c0e80 	call	2c0e8 <__modsi3>
   31984:	10800c04 	addi	r2,r2,48
   31988:	a009883a 	mov	r4,r20
   3198c:	b0800005 	stb	r2,0(r22)
   31990:	01400284 	movi	r5,10
   31994:	002c0980 	call	2c098 <__divsi3>
   31998:	1029883a 	mov	r20,r2
   3199c:	b0ffffc4 	addi	r3,r22,-1
   319a0:	b8bff416 	blt	r23,r2,31974 <___vfprintf_internal_r+0x1d20>
   319a4:	11400c04 	addi	r5,r2,48
   319a8:	b17fffc5 	stb	r5,-1(r22)
   319ac:	d8811fc4 	addi	r2,sp,1151
   319b0:	e013883a 	mov	r9,fp
   319b4:	18803e2e 	bgeu	r3,r2,31ab0 <___vfprintf_internal_r+0x1e5c>
   319b8:	b007883a 	mov	r3,r22
   319bc:	d9012044 	addi	r4,sp,1153
   319c0:	00000206 	br	319cc <___vfprintf_internal_r+0x1d78>
   319c4:	19400003 	ldbu	r5,0(r3)
   319c8:	18c00044 	addi	r3,r3,1
   319cc:	21400005 	stb	r5,0(r4)
   319d0:	21000044 	addi	r4,r4,1
   319d4:	10fffb1e 	bne	r2,r3,319c4 <___vfprintf_internal_r+0x1d70>
   319d8:	d8c12004 	addi	r3,sp,1152
   319dc:	1d87c83a 	sub	r3,r3,r22
   319e0:	d9012044 	addi	r4,sp,1153
   319e4:	20c7883a 	add	r3,r4,r3
   319e8:	003fb006 	br	318ac <___vfprintf_internal_r+0x1c58>
   319ec:	e5c00044 	addi	r23,fp,1
   319f0:	003e7406 	br	313c4 <___vfprintf_internal_r+0x1770>
   319f4:	d8c12217 	ldw	r3,1160(sp)
   319f8:	003e9906 	br	31460 <___vfprintf_internal_r+0x180c>
   319fc:	d9012d17 	ldw	r4,1204(sp)
   31a00:	ac800043 	ldbu	r18,1(r21)
   31a04:	b82b883a 	mov	r21,r23
   31a08:	20c00017 	ldw	r3,0(r4)
   31a0c:	20800104 	addi	r2,r4,4
   31a10:	d8812d15 	stw	r2,1204(sp)
   31a14:	18002116 	blt	r3,zero,31a9c <___vfprintf_internal_r+0x1e48>
   31a18:	94803fcc 	andi	r18,r18,255
   31a1c:	9480201c 	xori	r18,r18,128
   31a20:	94bfe004 	addi	r18,r18,-128
   31a24:	0038e706 	br	2fdc4 <___vfprintf_internal_r+0x170>
   31a28:	80a0703a 	and	r16,r16,r2
   31a2c:	803fa61e 	bne	r16,zero,318c8 <___vfprintf_internal_r+0x1c74>
   31a30:	d8812b17 	ldw	r2,1196(sp)
   31a34:	d8812815 	stw	r2,1184(sp)
   31a38:	103e9d0e 	bge	r2,zero,314b0 <___vfprintf_internal_r+0x185c>
   31a3c:	003fa706 	br	318dc <___vfprintf_internal_r+0x1c88>
   31a40:	00800084 	movi	r2,2
   31a44:	1529c83a 	sub	r20,r2,r20
   31a48:	003fbf06 	br	31948 <___vfprintf_internal_r+0x1cf4>
   31a4c:	00800b44 	movi	r2,45
   31a50:	0529c83a 	sub	r20,zero,r20
   31a54:	d8812005 	stb	r2,1152(sp)
   31a58:	003f8c06 	br	3188c <___vfprintf_internal_r+0x1c38>
   31a5c:	008011c4 	movi	r2,71
   31a60:	90be6926 	beq	r18,r2,31408 <___vfprintf_internal_r+0x17b4>
   31a64:	003e6a06 	br	31410 <___vfprintf_internal_r+0x17bc>
   31a68:	00bfffc4 	movi	r2,-1
   31a6c:	d8812c15 	stw	r2,1200(sp)
   31a70:	0039ad06 	br	30128 <___vfprintf_internal_r+0x4d4>
   31a74:	1007883a 	mov	r3,r2
   31a78:	003e7906 	br	31460 <___vfprintf_internal_r+0x180c>
   31a7c:	e000021e 	bne	fp,zero,31a88 <___vfprintf_internal_r+0x1e34>
   31a80:	8400004c 	andi	r16,r16,1
   31a84:	80000e26 	beq	r16,zero,31ac0 <___vfprintf_internal_r+0x1e6c>
   31a88:	e7000084 	addi	fp,fp,2
   31a8c:	df012b15 	stw	fp,1196(sp)
   31a90:	df012815 	stw	fp,1184(sp)
   31a94:	e03e860e 	bge	fp,zero,314b0 <___vfprintf_internal_r+0x185c>
   31a98:	003f9006 	br	318dc <___vfprintf_internal_r+0x1c88>
   31a9c:	94803fcc 	andi	r18,r18,255
   31aa0:	9480201c 	xori	r18,r18,128
   31aa4:	00ffffc4 	movi	r3,-1
   31aa8:	94bfe004 	addi	r18,r18,-128
   31aac:	0038c506 	br	2fdc4 <___vfprintf_internal_r+0x170>
   31ab0:	d8c12044 	addi	r3,sp,1153
   31ab4:	003f7d06 	br	318ac <___vfprintf_internal_r+0x1c58>
   31ab8:	dd012417 	ldw	r20,1168(sp)
   31abc:	003f6d06 	br	31874 <___vfprintf_internal_r+0x1c20>
   31ac0:	00c00044 	movi	r3,1
   31ac4:	d8c12815 	stw	r3,1184(sp)
   31ac8:	d8c12b15 	stw	r3,1196(sp)
   31acc:	003e7806 	br	314b0 <___vfprintf_internal_r+0x185c>

00031ad0 <__vfprintf_internal>:
   31ad0:	00800134 	movhi	r2,4
   31ad4:	108bb304 	addi	r2,r2,11980
   31ad8:	2007883a 	mov	r3,r4
   31adc:	11000017 	ldw	r4,0(r2)
   31ae0:	2805883a 	mov	r2,r5
   31ae4:	300f883a 	mov	r7,r6
   31ae8:	180b883a 	mov	r5,r3
   31aec:	100d883a 	mov	r6,r2
   31af0:	002fc541 	jmpi	2fc54 <___vfprintf_internal_r>

00031af4 <__svfscanf_r>:
   31af4:	deff4c04 	addi	sp,sp,-720
   31af8:	ddc0b115 	stw	r23,708(sp)
   31afc:	dd00ae15 	stw	r20,696(sp)
   31b00:	dcc0ad15 	stw	r19,692(sp)
   31b04:	dc80ac15 	stw	r18,688(sp)
   31b08:	dc40ab15 	stw	r17,684(sp)
   31b0c:	dc00aa15 	stw	r16,680(sp)
   31b10:	dfc0b315 	stw	ra,716(sp)
   31b14:	df00b215 	stw	fp,712(sp)
   31b18:	dd80b015 	stw	r22,704(sp)
   31b1c:	dd40af15 	stw	r21,700(sp)
   31b20:	30800007 	ldb	r2,0(r6)
   31b24:	002f883a 	mov	r23,zero
   31b28:	d9c09c15 	stw	r7,624(sp)
   31b2c:	d800a015 	stw	zero,640(sp)
   31b30:	d8009f15 	stw	zero,636(sp)
   31b34:	d8009e15 	stw	zero,632(sp)
   31b38:	d8809b15 	stw	r2,620(sp)
   31b3c:	2023883a 	mov	r17,r4
   31b40:	04800134 	movhi	r18,4
   31b44:	948bb104 	addi	r18,r18,11972
   31b48:	b829883a 	mov	r20,r23
   31b4c:	2827883a 	mov	r19,r5
   31b50:	34000044 	addi	r16,r6,1
   31b54:	10002426 	beq	r2,zero,31be8 <__svfscanf_r+0xf4>
   31b58:	95400017 	ldw	r21,0(r18)
   31b5c:	a887883a 	add	r3,r21,r2
   31b60:	18c00003 	ldbu	r3,0(r3)
   31b64:	18c0020c 	andi	r3,r3,8
   31b68:	18c03fcc 	andi	r3,r3,255
   31b6c:	18c0201c 	xori	r3,r3,128
   31b70:	18ffe004 	addi	r3,r3,-128
   31b74:	18002926 	beq	r3,zero,31c1c <__svfscanf_r+0x128>
   31b78:	98800117 	ldw	r2,4(r19)
   31b7c:	0080110e 	bge	zero,r2,31bc4 <__svfscanf_r+0xd0>
   31b80:	98c00017 	ldw	r3,0(r19)
   31b84:	91000017 	ldw	r4,0(r18)
   31b88:	18800003 	ldbu	r2,0(r3)
   31b8c:	2085883a 	add	r2,r4,r2
   31b90:	10800003 	ldbu	r2,0(r2)
   31b94:	1080020c 	andi	r2,r2,8
   31b98:	10803fcc 	andi	r2,r2,255
   31b9c:	1080201c 	xori	r2,r2,128
   31ba0:	10bfe004 	addi	r2,r2,-128
   31ba4:	10000b26 	beq	r2,zero,31bd4 <__svfscanf_r+0xe0>
   31ba8:	98800117 	ldw	r2,4(r19)
   31bac:	18c00044 	addi	r3,r3,1
   31bb0:	98c00015 	stw	r3,0(r19)
   31bb4:	10bfffc4 	addi	r2,r2,-1
   31bb8:	98800115 	stw	r2,4(r19)
   31bbc:	a5000044 	addi	r20,r20,1
   31bc0:	00bfef16 	blt	zero,r2,31b80 <__svfscanf_r+0x8c>
   31bc4:	8809883a 	mov	r4,r17
   31bc8:	980b883a 	mov	r5,r19
   31bcc:	002ee900 	call	2ee90 <__srefill_r>
   31bd0:	103feb26 	beq	r2,zero,31b80 <__svfscanf_r+0x8c>
   31bd4:	800d883a 	mov	r6,r16
   31bd8:	30800007 	ldb	r2,0(r6)
   31bdc:	34000044 	addi	r16,r6,1
   31be0:	d8809b15 	stw	r2,620(sp)
   31be4:	103fdc1e 	bne	r2,zero,31b58 <__svfscanf_r+0x64>
   31be8:	d8809e17 	ldw	r2,632(sp)
   31bec:	dfc0b317 	ldw	ra,716(sp)
   31bf0:	df00b217 	ldw	fp,712(sp)
   31bf4:	ddc0b117 	ldw	r23,708(sp)
   31bf8:	dd80b017 	ldw	r22,704(sp)
   31bfc:	dd40af17 	ldw	r21,700(sp)
   31c00:	dd00ae17 	ldw	r20,696(sp)
   31c04:	dcc0ad17 	ldw	r19,692(sp)
   31c08:	dc80ac17 	ldw	r18,688(sp)
   31c0c:	dc40ab17 	ldw	r17,684(sp)
   31c10:	dc00aa17 	ldw	r16,680(sp)
   31c14:	dec0b404 	addi	sp,sp,720
   31c18:	f800283a 	ret
   31c1c:	00c00944 	movi	r3,37
   31c20:	10c00e26 	beq	r2,r3,31c5c <__svfscanf_r+0x168>
   31c24:	98800117 	ldw	r2,4(r19)
   31c28:	0080e40e 	bge	zero,r2,31fbc <__svfscanf_r+0x4c8>
   31c2c:	98800017 	ldw	r2,0(r19)
   31c30:	80ffffc7 	ldb	r3,-1(r16)
   31c34:	11000003 	ldbu	r4,0(r2)
   31c38:	20ffeb1e 	bne	r4,r3,31be8 <__svfscanf_r+0xf4>
   31c3c:	98c00117 	ldw	r3,4(r19)
   31c40:	10800044 	addi	r2,r2,1
   31c44:	98800015 	stw	r2,0(r19)
   31c48:	18bfffc4 	addi	r2,r3,-1
   31c4c:	98800115 	stw	r2,4(r19)
   31c50:	a5000044 	addi	r20,r20,1
   31c54:	800d883a 	mov	r6,r16
   31c58:	003fdf06 	br	31bd8 <__svfscanf_r+0xe4>
   31c5c:	0039883a 	mov	fp,zero
   31c60:	35c00043 	ldbu	r23,1(r6)
   31c64:	002d883a 	mov	r22,zero
   31c68:	00c01e04 	movi	r3,120
   31c6c:	01801b04 	movi	r6,108
   31c70:	e009883a 	mov	r4,fp
   31c74:	b8803fcc 	andi	r2,r23,255
   31c78:	87000044 	addi	fp,r16,1
   31c7c:	18804f2e 	bgeu	r3,r2,31dbc <__svfscanf_r+0x2c8>
   31c80:	bdc03fcc 	andi	r23,r23,255
   31c84:	bdc0201c 	xori	r23,r23,128
   31c88:	bdffe004 	addi	r23,r23,-128
   31c8c:	adeb883a 	add	r21,r21,r23
   31c90:	a8800003 	ldbu	r2,0(r21)
   31c94:	df009d15 	stw	fp,628(sp)
   31c98:	2039883a 	mov	fp,r4
   31c9c:	1080004c 	andi	r2,r2,1
   31ca0:	1002d926 	beq	r2,zero,32808 <__svfscanf_r+0xd14>
   31ca4:	b5800054 	ori	r22,r22,1
   31ca8:	00800134 	movhi	r2,4
   31cac:	10a25d04 	addi	r2,r2,-30348
   31cb0:	00c00284 	movi	r3,10
   31cb4:	d880a015 	stw	r2,640(sp)
   31cb8:	d8c09f15 	stw	r3,636(sp)
   31cbc:	040000c4 	movi	r16,3
   31cc0:	98800117 	ldw	r2,4(r19)
   31cc4:	0081bd0e 	bge	zero,r2,323bc <__svfscanf_r+0x8c8>
   31cc8:	b080100c 	andi	r2,r22,64
   31ccc:	1000ce26 	beq	r2,zero,32008 <__svfscanf_r+0x514>
   31cd0:	00800084 	movi	r2,2
   31cd4:	80818426 	beq	r16,r2,322e8 <__svfscanf_r+0x7f4>
   31cd8:	1400f716 	blt	r2,r16,320b8 <__svfscanf_r+0x5c4>
   31cdc:	00800044 	movi	r2,1
   31ce0:	8080dc26 	beq	r16,r2,32054 <__svfscanf_r+0x560>
   31ce4:	e000011e 	bne	fp,zero,31cec <__svfscanf_r+0x1f8>
   31ce8:	07000044 	movi	fp,1
   31cec:	b080004c 	andi	r2,r22,1
   31cf0:	10022826 	beq	r2,zero,32594 <__svfscanf_r+0xaa0>
   31cf4:	b5c0040c 	andi	r23,r22,16
   31cf8:	b804601e 	bne	r23,zero,32e7c <__svfscanf_r+0x1388>
   31cfc:	d8c09c17 	ldw	r3,624(sp)
   31d00:	1d800017 	ldw	r22,0(r3)
   31d04:	18c00104 	addi	r3,r3,4
   31d08:	d8c09c15 	stw	r3,624(sp)
   31d0c:	0021883a 	mov	r16,zero
   31d10:	dd409904 	addi	r21,sp,612
   31d14:	01000134 	movhi	r4,4
   31d18:	210bb704 	addi	r4,r4,11996
   31d1c:	20800017 	ldw	r2,0(r4)
   31d20:	8080aa26 	beq	r16,r2,31fcc <__svfscanf_r+0x4d8>
   31d24:	98800017 	ldw	r2,0(r19)
   31d28:	9a000117 	ldw	r8,4(r19)
   31d2c:	d9400104 	addi	r5,sp,4
   31d30:	11c00003 	ldbu	r7,0(r2)
   31d34:	423fffc4 	addi	r8,r8,-1
   31d38:	10800044 	addi	r2,r2,1
   31d3c:	2c07883a 	add	r3,r5,r16
   31d40:	a809883a 	mov	r4,r21
   31d44:	000b883a 	mov	r5,zero
   31d48:	01800204 	movi	r6,8
   31d4c:	9a000115 	stw	r8,4(r19)
   31d50:	98800015 	stw	r2,0(r19)
   31d54:	19c00005 	stb	r7,0(r3)
   31d58:	84000044 	addi	r16,r16,1
   31d5c:	002ec2c0 	call	2ec2c <memset>
   31d60:	8809883a 	mov	r4,r17
   31d64:	dd400015 	stw	r21,0(sp)
   31d68:	b00b883a 	mov	r5,r22
   31d6c:	d9800104 	addi	r6,sp,4
   31d70:	800f883a 	mov	r7,r16
   31d74:	00356ec0 	call	356ec <_mbrtowc_r>
   31d78:	00ffffc4 	movi	r3,-1
   31d7c:	10c09326 	beq	r2,r3,31fcc <__svfscanf_r+0x4d8>
   31d80:	1003281e 	bne	r2,zero,32a24 <__svfscanf_r+0xf30>
   31d84:	b800011e 	bne	r23,zero,31d8c <__svfscanf_r+0x298>
   31d88:	b0000015 	stw	zero,0(r22)
   31d8c:	a429883a 	add	r20,r20,r16
   31d90:	e73fffc4 	addi	fp,fp,-1
   31d94:	b803281e 	bne	r23,zero,32a38 <__svfscanf_r+0xf44>
   31d98:	b5800104 	addi	r22,r22,4
   31d9c:	0021883a 	mov	r16,zero
   31da0:	98800117 	ldw	r2,4(r19)
   31da4:	00820b0e 	bge	zero,r2,325d4 <__svfscanf_r+0xae0>
   31da8:	e03fda1e 	bne	fp,zero,31d14 <__svfscanf_r+0x220>
   31dac:	b8012226 	beq	r23,zero,32238 <__svfscanf_r+0x744>
   31db0:	dc009d17 	ldw	r16,628(sp)
   31db4:	800d883a 	mov	r6,r16
   31db8:	003f8706 	br	31bd8 <__svfscanf_r+0xe4>
   31dbc:	1085883a 	add	r2,r2,r2
   31dc0:	1085883a 	add	r2,r2,r2
   31dc4:	014000f4 	movhi	r5,3
   31dc8:	29477604 	addi	r5,r5,7640
   31dcc:	1145883a 	add	r2,r2,r5
   31dd0:	10800017 	ldw	r2,0(r2)
   31dd4:	1000683a 	jmp	r2
   31dd8:	00031fec 	andhi	zero,zero,3199
   31ddc:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31de0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31de4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31de8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31dec:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31df0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31df4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31df8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31dfc:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e00:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e04:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e08:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e0c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e10:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e14:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e18:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e1c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e20:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e24:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e28:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e2c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e30:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e34:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e38:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e3c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e40:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e44:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e48:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e4c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e50:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e54:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e58:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e5c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e60:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e64:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e68:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e6c:	000328bc 	xorhi	zero,zero,3234
   31e70:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e74:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e78:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e7c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e80:	000328c8 	cmpgei	zero,zero,3235
   31e84:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e88:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e8c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e90:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e94:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31e98:	00032858 	cmpnei	zero,zero,3233
   31e9c:	00032858 	cmpnei	zero,zero,3233
   31ea0:	00032858 	cmpnei	zero,zero,3233
   31ea4:	00032858 	cmpnei	zero,zero,3233
   31ea8:	00032858 	cmpnei	zero,zero,3233
   31eac:	00032858 	cmpnei	zero,zero,3233
   31eb0:	00032858 	cmpnei	zero,zero,3233
   31eb4:	00032858 	cmpnei	zero,zero,3233
   31eb8:	00032858 	cmpnei	zero,zero,3233
   31ebc:	00032858 	cmpnei	zero,zero,3233
   31ec0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ec4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ec8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ecc:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ed0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ed4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ed8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31edc:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ee0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ee4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ee8:	00032890 	cmplti	zero,zero,3234
   31eec:	0003289c 	xori	zero,zero,3234
   31ef0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31ef4:	0003289c 	xori	zero,zero,3234
   31ef8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31efc:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f00:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f04:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f08:	000328ac 	andhi	zero,zero,3234
   31f0c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f10:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f14:	000328d8 	cmpnei	zero,zero,3235
   31f18:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f1c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f20:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f24:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f28:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f2c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f30:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f34:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f38:	00032900 	call	3290 <encode_mcu+0x490>
   31f3c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f40:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f44:	00032928 	cmpgeui	zero,zero,3236
   31f48:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f4c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f50:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f54:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f58:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f5c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f60:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f64:	0003294c 	andi	zero,zero,3237
   31f68:	00032960 	cmpeqi	zero,zero,3237
   31f6c:	0003289c 	xori	zero,zero,3234
   31f70:	0003289c 	xori	zero,zero,3234
   31f74:	0003289c 	xori	zero,zero,3234
   31f78:	0003296c 	andhi	zero,zero,3237
   31f7c:	0003297c 	xorhi	zero,zero,3237
   31f80:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f84:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f88:	0003299c 	xori	zero,zero,3238
   31f8c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31f90:	000329bc 	xorhi	zero,zero,3238
   31f94:	000329f0 	cmpltui	zero,zero,3239
   31f98:	000329fc 	xorhi	zero,zero,3239
   31f9c:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31fa0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31fa4:	00032824 	muli	zero,zero,3232
   31fa8:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31fac:	00032834 	movhi	zero,3232
   31fb0:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31fb4:	00031c80 	call	31c8 <encode_mcu+0x3c8>
   31fb8:	00032900 	call	3290 <encode_mcu+0x490>
   31fbc:	8809883a 	mov	r4,r17
   31fc0:	980b883a 	mov	r5,r19
   31fc4:	002ee900 	call	2ee90 <__srefill_r>
   31fc8:	103f1826 	beq	r2,zero,31c2c <__svfscanf_r+0x138>
   31fcc:	d8809e17 	ldw	r2,632(sp)
   31fd0:	10000626 	beq	r2,zero,31fec <__svfscanf_r+0x4f8>
   31fd4:	9880030b 	ldhu	r2,12(r19)
   31fd8:	1080100c 	andi	r2,r2,64
   31fdc:	10bfffcc 	andi	r2,r2,65535
   31fe0:	10a0001c 	xori	r2,r2,32768
   31fe4:	10a00004 	addi	r2,r2,-32768
   31fe8:	103eff26 	beq	r2,zero,31be8 <__svfscanf_r+0xf4>
   31fec:	00bfffc4 	movi	r2,-1
   31ff0:	d8809e15 	stw	r2,632(sp)
   31ff4:	003efc06 	br	31be8 <__svfscanf_r+0xf4>
   31ff8:	8809883a 	mov	r4,r17
   31ffc:	980b883a 	mov	r5,r19
   32000:	002ee900 	call	2ee90 <__srefill_r>
   32004:	103ff11e 	bne	r2,zero,31fcc <__svfscanf_r+0x4d8>
   32008:	91400017 	ldw	r5,0(r18)
   3200c:	98800017 	ldw	r2,0(r19)
   32010:	00000206 	br	3201c <__svfscanf_r+0x528>
   32014:	10800044 	addi	r2,r2,1
   32018:	98800015 	stw	r2,0(r19)
   3201c:	10c00003 	ldbu	r3,0(r2)
   32020:	28c7883a 	add	r3,r5,r3
   32024:	18c00003 	ldbu	r3,0(r3)
   32028:	18c0020c 	andi	r3,r3,8
   3202c:	18c03fcc 	andi	r3,r3,255
   32030:	18c0201c 	xori	r3,r3,128
   32034:	18ffe004 	addi	r3,r3,-128
   32038:	183f2526 	beq	r3,zero,31cd0 <__svfscanf_r+0x1dc>
   3203c:	98c00117 	ldw	r3,4(r19)
   32040:	a5000044 	addi	r20,r20,1
   32044:	18ffffc4 	addi	r3,r3,-1
   32048:	98c00115 	stw	r3,4(r19)
   3204c:	00fff116 	blt	zero,r3,32014 <__svfscanf_r+0x520>
   32050:	003fe906 	br	31ff8 <__svfscanf_r+0x504>
   32054:	e000011e 	bne	fp,zero,3205c <__svfscanf_r+0x568>
   32058:	073fffc4 	movi	fp,-1
   3205c:	b580040c 	andi	r22,r22,16
   32060:	b0016826 	beq	r22,zero,32604 <__svfscanf_r+0xb10>
   32064:	98800017 	ldw	r2,0(r19)
   32068:	0021883a 	mov	r16,zero
   3206c:	dd805884 	addi	r22,sp,354
   32070:	10c00003 	ldbu	r3,0(r2)
   32074:	b0c7883a 	add	r3,r22,r3
   32078:	18c00007 	ldb	r3,0(r3)
   3207c:	18039726 	beq	r3,zero,32edc <__svfscanf_r+0x13e8>
   32080:	98c00117 	ldw	r3,4(r19)
   32084:	10800044 	addi	r2,r2,1
   32088:	84000044 	addi	r16,r16,1
   3208c:	18ffffc4 	addi	r3,r3,-1
   32090:	98c00115 	stw	r3,4(r19)
   32094:	98800015 	stw	r2,0(r19)
   32098:	e4008f26 	beq	fp,r16,322d8 <__svfscanf_r+0x7e4>
   3209c:	00fff416 	blt	zero,r3,32070 <__svfscanf_r+0x57c>
   320a0:	8809883a 	mov	r4,r17
   320a4:	980b883a 	mov	r5,r19
   320a8:	002ee900 	call	2ee90 <__srefill_r>
   320ac:	10008a1e 	bne	r2,zero,322d8 <__svfscanf_r+0x7e4>
   320b0:	98800017 	ldw	r2,0(r19)
   320b4:	003fee06 	br	32070 <__svfscanf_r+0x57c>
   320b8:	008000c4 	movi	r2,3
   320bc:	80806426 	beq	r16,r2,32250 <__svfscanf_r+0x75c>
   320c0:	00800104 	movi	r2,4
   320c4:	80bf071e 	bne	r16,r2,31ce4 <__svfscanf_r+0x1f0>
   320c8:	e0bfffc4 	addi	r2,fp,-1
   320cc:	01005704 	movi	r4,348
   320d0:	20814736 	bltu	r4,r2,325f0 <__svfscanf_r+0xafc>
   320d4:	0017883a 	mov	r11,zero
   320d8:	b581e014 	ori	r22,r22,1920
   320dc:	0021883a 	mov	r16,zero
   320e0:	d800a115 	stw	zero,644(sp)
   320e4:	d800a315 	stw	zero,652(sp)
   320e8:	002b883a 	mov	r21,zero
   320ec:	d800a215 	stw	zero,648(sp)
   320f0:	ddc00104 	addi	r23,sp,4
   320f4:	000d883a 	mov	r6,zero
   320f8:	00c01384 	movi	r3,78
   320fc:	03810004 	movi	r14,1024
   32100:	033e1fc4 	movi	r12,-1921
   32104:	03ff5fc4 	movi	r15,-641
   32108:	99c00017 	ldw	r7,0(r19)
   3210c:	39400003 	ldbu	r5,0(r7)
   32110:	28bff544 	addi	r2,r5,-43
   32114:	10803fcc 	andi	r2,r2,255
   32118:	1880c82e 	bgeu	r3,r2,3243c <__svfscanf_r+0x948>
   3211c:	a8000226 	beq	r21,zero,32128 <__svfscanf_r+0x634>
   32120:	00bfbfc4 	movi	r2,-257
   32124:	b0ac703a 	and	r22,r22,r2
   32128:	31bfffc4 	addi	r6,r6,-1
   3212c:	00800044 	movi	r2,1
   32130:	1184092e 	bgeu	r2,r6,33158 <__svfscanf_r+0x1664>
   32134:	80803fcc 	andi	r2,r16,255
   32138:	1080201c 	xori	r2,r2,128
   3213c:	10bfe004 	addi	r2,r2,-128
   32140:	10ffffc4 	addi	r3,r2,-1
   32144:	01000184 	movi	r4,6
   32148:	20c01036 	bltu	r4,r3,3218c <__svfscanf_r+0x698>
   3214c:	00c00084 	movi	r3,2
   32150:	1883f50e 	bge	r3,r2,33128 <__svfscanf_r+0x1634>
   32154:	00c000c4 	movi	r3,3
   32158:	10c00c26 	beq	r2,r3,3218c <__svfscanf_r+0x698>
   3215c:	843fff04 	addi	r16,r16,-4
   32160:	84003fcc 	andi	r16,r16,255
   32164:	0438303a 	nor	fp,zero,r16
   32168:	bf39883a 	add	fp,r23,fp
   3216c:	bdffffc4 	addi	r23,r23,-1
   32170:	b9400007 	ldb	r5,0(r23)
   32174:	8809883a 	mov	r4,r17
   32178:	980d883a 	mov	r6,r19
   3217c:	003968c0 	call	3968c <_ungetc_r>
   32180:	bf3ffa1e 	bne	r23,fp,3216c <__svfscanf_r+0x678>
   32184:	a27fffc4 	addi	r9,r20,-1
   32188:	4c29c83a 	sub	r20,r9,r16
   3218c:	b080400c 	andi	r2,r22,256
   32190:	10001326 	beq	r2,zero,321e0 <__svfscanf_r+0x6ec>
   32194:	b081000c 	andi	r2,r22,1024
   32198:	1003d21e 	bne	r2,zero,330e4 <__svfscanf_r+0x15f0>
   3219c:	b97fffc7 	ldb	r5,-1(r23)
   321a0:	00801944 	movi	r2,101
   321a4:	bc3fffc4 	addi	r16,r23,-1
   321a8:	a53fffc4 	addi	r20,r20,-1
   321ac:	28800826 	beq	r5,r2,321d0 <__svfscanf_r+0x6dc>
   321b0:	00801144 	movi	r2,69
   321b4:	28800626 	beq	r5,r2,321d0 <__svfscanf_r+0x6dc>
   321b8:	8809883a 	mov	r4,r17
   321bc:	980d883a 	mov	r6,r19
   321c0:	003968c0 	call	3968c <_ungetc_r>
   321c4:	b97fff87 	ldb	r5,-2(r23)
   321c8:	bc3fff84 	addi	r16,r23,-2
   321cc:	a53fffc4 	addi	r20,r20,-1
   321d0:	8809883a 	mov	r4,r17
   321d4:	980d883a 	mov	r6,r19
   321d8:	003968c0 	call	3968c <_ungetc_r>
   321dc:	802f883a 	mov	r23,r16
   321e0:	b080040c 	andi	r2,r22,16
   321e4:	103ef21e 	bne	r2,zero,31db0 <__svfscanf_r+0x2bc>
   321e8:	b8000005 	stb	zero,0(r23)
   321ec:	b0c1800c 	andi	r3,r22,1536
   321f0:	00810004 	movi	r2,1024
   321f4:	18837726 	beq	r3,r2,32fd4 <__svfscanf_r+0x14e0>
   321f8:	d8c0a317 	ldw	r3,652(sp)
   321fc:	1803601e 	bne	r3,zero,32f80 <__svfscanf_r+0x148c>
   32200:	8809883a 	mov	r4,r17
   32204:	d9400104 	addi	r5,sp,4
   32208:	000d883a 	mov	r6,zero
   3220c:	00372f00 	call	372f0 <_strtod_r>
   32210:	102b883a 	mov	r21,r2
   32214:	b080004c 	andi	r2,r22,1
   32218:	182f883a 	mov	r23,r3
   3221c:	10031f26 	beq	r2,zero,32e9c <__svfscanf_r+0x13a8>
   32220:	d9409c17 	ldw	r5,624(sp)
   32224:	28800017 	ldw	r2,0(r5)
   32228:	29400104 	addi	r5,r5,4
   3222c:	d9409c15 	stw	r5,624(sp)
   32230:	15400015 	stw	r21,0(r2)
   32234:	10c00115 	stw	r3,4(r2)
   32238:	d8809e17 	ldw	r2,632(sp)
   3223c:	dc009d17 	ldw	r16,628(sp)
   32240:	10800044 	addi	r2,r2,1
   32244:	d8809e15 	stw	r2,632(sp)
   32248:	800d883a 	mov	r6,r16
   3224c:	003e6206 	br	31bd8 <__svfscanf_r+0xe4>
   32250:	e0bfffc4 	addi	r2,fp,-1
   32254:	01005704 	movi	r4,348
   32258:	2080e82e 	bgeu	r4,r2,325fc <__svfscanf_r+0xb08>
   3225c:	e0ffa8c4 	addi	r3,fp,-349
   32260:	07005744 	movi	fp,349
   32264:	da409f17 	ldw	r9,636(sp)
   32268:	b5836014 	ori	r22,r22,3456
   3226c:	0021883a 	mov	r16,zero
   32270:	dd400104 	addi	r21,sp,4
   32274:	05c01344 	movi	r23,77
   32278:	01c08004 	movi	r7,512
   3227c:	01bf7fc4 	movi	r6,-513
   32280:	9a000017 	ldw	r8,0(r19)
   32284:	41400003 	ldbu	r5,0(r8)
   32288:	28bff544 	addi	r2,r5,-43
   3228c:	10803fcc 	andi	r2,r2,255
   32290:	b881eb2e 	bgeu	r23,r2,32a40 <__svfscanf_r+0xf4c>
   32294:	da409f15 	stw	r9,636(sp)
   32298:	b080400c 	andi	r2,r22,256
   3229c:	10000926 	beq	r2,zero,322c4 <__svfscanf_r+0x7d0>
   322a0:	d9400104 	addi	r5,sp,4
   322a4:	2d40052e 	bgeu	r5,r21,322bc <__svfscanf_r+0x7c8>
   322a8:	a97fffc7 	ldb	r5,-1(r21)
   322ac:	8809883a 	mov	r4,r17
   322b0:	980d883a 	mov	r6,r19
   322b4:	ad7fffc4 	addi	r21,r21,-1
   322b8:	003968c0 	call	3968c <_ungetc_r>
   322bc:	d8800104 	addi	r2,sp,4
   322c0:	157e4926 	beq	r2,r21,31be8 <__svfscanf_r+0xf4>
   322c4:	b080040c 	andi	r2,r22,16
   322c8:	1002ac26 	beq	r2,zero,32d7c <__svfscanf_r+0x1288>
   322cc:	d8c00104 	addi	r3,sp,4
   322d0:	a8ebc83a 	sub	r21,r21,r3
   322d4:	ac21883a 	add	r16,r21,r16
   322d8:	a429883a 	add	r20,r20,r16
   322dc:	dc009d17 	ldw	r16,628(sp)
   322e0:	800d883a 	mov	r6,r16
   322e4:	003e3c06 	br	31bd8 <__svfscanf_r+0xe4>
   322e8:	e000011e 	bne	fp,zero,322f0 <__svfscanf_r+0x7fc>
   322ec:	073fffc4 	movi	fp,-1
   322f0:	b080004c 	andi	r2,r22,1
   322f4:	b580040c 	andi	r22,r22,16
   322f8:	10003526 	beq	r2,zero,323d0 <__svfscanf_r+0x8dc>
   322fc:	b002dd1e 	bne	r22,zero,32e74 <__svfscanf_r+0x1380>
   32300:	d8c09c17 	ldw	r3,624(sp)
   32304:	1d400017 	ldw	r21,0(r3)
   32308:	18c00104 	addi	r3,r3,4
   3230c:	d8c09c15 	stw	r3,624(sp)
   32310:	0021883a 	mov	r16,zero
   32314:	ddc09904 	addi	r23,sp,612
   32318:	98c00017 	ldw	r3,0(r19)
   3231c:	91400017 	ldw	r5,0(r18)
   32320:	18800003 	ldbu	r2,0(r3)
   32324:	11003fcc 	andi	r4,r2,255
   32328:	2909883a 	add	r4,r5,r4
   3232c:	21000003 	ldbu	r4,0(r4)
   32330:	2100020c 	andi	r4,r4,8
   32334:	21003fcc 	andi	r4,r4,255
   32338:	2100201c 	xori	r4,r4,128
   3233c:	213fe004 	addi	r4,r4,-128
   32340:	2002731e 	bne	r4,zero,32d10 <__svfscanf_r+0x121c>
   32344:	e0027226 	beq	fp,zero,32d10 <__svfscanf_r+0x121c>
   32348:	01400134 	movhi	r5,4
   3234c:	294bb704 	addi	r5,r5,11996
   32350:	29000017 	ldw	r4,0(r5)
   32354:	813f1d26 	beq	r16,r4,31fcc <__svfscanf_r+0x4d8>
   32358:	9a000117 	ldw	r8,4(r19)
   3235c:	18c00044 	addi	r3,r3,1
   32360:	d9000104 	addi	r4,sp,4
   32364:	423fffc4 	addi	r8,r8,-1
   32368:	240f883a 	add	r7,r4,r16
   3236c:	000b883a 	mov	r5,zero
   32370:	b809883a 	mov	r4,r23
   32374:	01800204 	movi	r6,8
   32378:	9a000115 	stw	r8,4(r19)
   3237c:	98c00015 	stw	r3,0(r19)
   32380:	38800005 	stb	r2,0(r7)
   32384:	84000044 	addi	r16,r16,1
   32388:	002ec2c0 	call	2ec2c <memset>
   3238c:	a80b883a 	mov	r5,r21
   32390:	8809883a 	mov	r4,r17
   32394:	ddc00015 	stw	r23,0(sp)
   32398:	d9800104 	addi	r6,sp,4
   3239c:	800f883a 	mov	r7,r16
   323a0:	00356ec0 	call	356ec <_mbrtowc_r>
   323a4:	017fffc4 	movi	r5,-1
   323a8:	117f0826 	beq	r2,r5,31fcc <__svfscanf_r+0x4d8>
   323ac:	1002de1e 	bne	r2,zero,32f28 <__svfscanf_r+0x1434>
   323b0:	a8000015 	stw	zero,0(r21)
   323b4:	0009883a 	mov	r4,zero
   323b8:	0002de06 	br	32f34 <__svfscanf_r+0x1440>
   323bc:	8809883a 	mov	r4,r17
   323c0:	980b883a 	mov	r5,r19
   323c4:	002ee900 	call	2ee90 <__srefill_r>
   323c8:	103e3f26 	beq	r2,zero,31cc8 <__svfscanf_r+0x1d4>
   323cc:	003eff06 	br	31fcc <__svfscanf_r+0x4d8>
   323d0:	b0027e26 	beq	r22,zero,32dcc <__svfscanf_r+0x12d8>
   323d4:	91400017 	ldw	r5,0(r18)
   323d8:	98800017 	ldw	r2,0(r19)
   323dc:	0021883a 	mov	r16,zero
   323e0:	10c00003 	ldbu	r3,0(r2)
   323e4:	28c7883a 	add	r3,r5,r3
   323e8:	18c00003 	ldbu	r3,0(r3)
   323ec:	18c0020c 	andi	r3,r3,8
   323f0:	18c03fcc 	andi	r3,r3,255
   323f4:	18c0201c 	xori	r3,r3,128
   323f8:	18ffe004 	addi	r3,r3,-128
   323fc:	183fb61e 	bne	r3,zero,322d8 <__svfscanf_r+0x7e4>
   32400:	98c00117 	ldw	r3,4(r19)
   32404:	10800044 	addi	r2,r2,1
   32408:	84000044 	addi	r16,r16,1
   3240c:	18ffffc4 	addi	r3,r3,-1
   32410:	98c00115 	stw	r3,4(r19)
   32414:	98800015 	stw	r2,0(r19)
   32418:	e43faf26 	beq	fp,r16,322d8 <__svfscanf_r+0x7e4>
   3241c:	00fff016 	blt	zero,r3,323e0 <__svfscanf_r+0x8ec>
   32420:	8809883a 	mov	r4,r17
   32424:	980b883a 	mov	r5,r19
   32428:	002ee900 	call	2ee90 <__srefill_r>
   3242c:	103faa1e 	bne	r2,zero,322d8 <__svfscanf_r+0x7e4>
   32430:	91400017 	ldw	r5,0(r18)
   32434:	98800017 	ldw	r2,0(r19)
   32438:	003fe906 	br	323e0 <__svfscanf_r+0x8ec>
   3243c:	1085883a 	add	r2,r2,r2
   32440:	1085883a 	add	r2,r2,r2
   32444:	010000f4 	movhi	r4,3
   32448:	21091604 	addi	r4,r4,9304
   3244c:	1105883a 	add	r2,r2,r4
   32450:	10800017 	ldw	r2,0(r2)
   32454:	1000683a 	jmp	r2
   32458:	000326f8 	rdprs	zero,zero,3227
   3245c:	0003211c 	xori	zero,zero,3204
   32460:	000326f8 	rdprs	zero,zero,3227
   32464:	000326e4 	muli	zero,zero,3227
   32468:	0003211c 	xori	zero,zero,3204
   3246c:	000326c0 	call	326c <encode_mcu+0x46c>
   32470:	00032674 	movhi	zero,3225
   32474:	00032674 	movhi	zero,3225
   32478:	00032674 	movhi	zero,3225
   3247c:	00032674 	movhi	zero,3225
   32480:	00032674 	movhi	zero,3225
   32484:	00032674 	movhi	zero,3225
   32488:	00032674 	movhi	zero,3225
   3248c:	00032674 	movhi	zero,3225
   32490:	00032674 	movhi	zero,3225
   32494:	0003211c 	xori	zero,zero,3204
   32498:	0003211c 	xori	zero,zero,3204
   3249c:	0003211c 	xori	zero,zero,3204
   324a0:	0003211c 	xori	zero,zero,3204
   324a4:	0003211c 	xori	zero,zero,3204
   324a8:	0003211c 	xori	zero,zero,3204
   324ac:	0003211c 	xori	zero,zero,3204
   324b0:	000327dc 	xori	zero,zero,3231
   324b4:	0003211c 	xori	zero,zero,3204
   324b8:	0003211c 	xori	zero,zero,3204
   324bc:	0003211c 	xori	zero,zero,3204
   324c0:	000327a0 	cmpeqi	zero,zero,3230
   324c4:	000327ec 	andhi	zero,zero,3231
   324c8:	0003211c 	xori	zero,zero,3204
   324cc:	0003211c 	xori	zero,zero,3204
   324d0:	00032778 	rdprs	zero,zero,3229
   324d4:	0003211c 	xori	zero,zero,3204
   324d8:	0003211c 	xori	zero,zero,3204
   324dc:	0003211c 	xori	zero,zero,3204
   324e0:	0003211c 	xori	zero,zero,3204
   324e4:	00032744 	movi	zero,3229
   324e8:	0003211c 	xori	zero,zero,3204
   324ec:	0003211c 	xori	zero,zero,3204
   324f0:	0003211c 	xori	zero,zero,3204
   324f4:	0003211c 	xori	zero,zero,3204
   324f8:	0003211c 	xori	zero,zero,3204
   324fc:	00032728 	cmpgeui	zero,zero,3228
   32500:	0003211c 	xori	zero,zero,3204
   32504:	0003211c 	xori	zero,zero,3204
   32508:	0003211c 	xori	zero,zero,3204
   3250c:	0003211c 	xori	zero,zero,3204
   32510:	0003270c 	andi	zero,zero,3228
   32514:	0003211c 	xori	zero,zero,3204
   32518:	0003211c 	xori	zero,zero,3204
   3251c:	0003211c 	xori	zero,zero,3204
   32520:	0003211c 	xori	zero,zero,3204
   32524:	0003211c 	xori	zero,zero,3204
   32528:	0003211c 	xori	zero,zero,3204
   3252c:	0003211c 	xori	zero,zero,3204
   32530:	000327dc 	xori	zero,zero,3231
   32534:	0003211c 	xori	zero,zero,3204
   32538:	0003211c 	xori	zero,zero,3204
   3253c:	0003211c 	xori	zero,zero,3204
   32540:	000327a0 	cmpeqi	zero,zero,3230
   32544:	000327ec 	andhi	zero,zero,3231
   32548:	0003211c 	xori	zero,zero,3204
   3254c:	0003211c 	xori	zero,zero,3204
   32550:	00032778 	rdprs	zero,zero,3229
   32554:	0003211c 	xori	zero,zero,3204
   32558:	0003211c 	xori	zero,zero,3204
   3255c:	0003211c 	xori	zero,zero,3204
   32560:	0003211c 	xori	zero,zero,3204
   32564:	00032744 	movi	zero,3229
   32568:	0003211c 	xori	zero,zero,3204
   3256c:	0003211c 	xori	zero,zero,3204
   32570:	0003211c 	xori	zero,zero,3204
   32574:	0003211c 	xori	zero,zero,3204
   32578:	0003211c 	xori	zero,zero,3204
   3257c:	00032728 	cmpgeui	zero,zero,3228
   32580:	0003211c 	xori	zero,zero,3204
   32584:	0003211c 	xori	zero,zero,3204
   32588:	0003211c 	xori	zero,zero,3204
   3258c:	0003211c 	xori	zero,zero,3204
   32590:	0003270c 	andi	zero,zero,3228
   32594:	b580040c 	andi	r22,r22,16
   32598:	b0025226 	beq	r22,zero,32ee4 <__svfscanf_r+0x13f0>
   3259c:	0021883a 	mov	r16,zero
   325a0:	98800117 	ldw	r2,4(r19)
   325a4:	17026f0e 	bge	r2,fp,32f64 <__svfscanf_r+0x1470>
   325a8:	98c00017 	ldw	r3,0(r19)
   325ac:	8809883a 	mov	r4,r17
   325b0:	980b883a 	mov	r5,r19
   325b4:	1887883a 	add	r3,r3,r2
   325b8:	98c00015 	stw	r3,0(r19)
   325bc:	80a1883a 	add	r16,r16,r2
   325c0:	e0b9c83a 	sub	fp,fp,r2
   325c4:	002ee900 	call	2ee90 <__srefill_r>
   325c8:	103ff526 	beq	r2,zero,325a0 <__svfscanf_r+0xaac>
   325cc:	803f421e 	bne	r16,zero,322d8 <__svfscanf_r+0x7e4>
   325d0:	003e7e06 	br	31fcc <__svfscanf_r+0x4d8>
   325d4:	8809883a 	mov	r4,r17
   325d8:	980b883a 	mov	r5,r19
   325dc:	002ee900 	call	2ee90 <__srefill_r>
   325e0:	103df126 	beq	r2,zero,31da8 <__svfscanf_r+0x2b4>
   325e4:	803e791e 	bne	r16,zero,31fcc <__svfscanf_r+0x4d8>
   325e8:	b83f1326 	beq	r23,zero,32238 <__svfscanf_r+0x744>
   325ec:	003df006 	br	31db0 <__svfscanf_r+0x2bc>
   325f0:	e2ffa8c4 	addi	r11,fp,-349
   325f4:	07005744 	movi	fp,349
   325f8:	003eb706 	br	320d8 <__svfscanf_r+0x5e4>
   325fc:	0007883a 	mov	r3,zero
   32600:	003f1806 	br	32264 <__svfscanf_r+0x770>
   32604:	d8c09c17 	ldw	r3,624(sp)
   32608:	98800017 	ldw	r2,0(r19)
   3260c:	dd805884 	addi	r22,sp,354
   32610:	1c000017 	ldw	r16,0(r3)
   32614:	1dc00104 	addi	r23,r3,4
   32618:	802b883a 	mov	r21,r16
   3261c:	10c00003 	ldbu	r3,0(r2)
   32620:	b0c7883a 	add	r3,r22,r3
   32624:	18c00007 	ldb	r3,0(r3)
   32628:	1801c226 	beq	r3,zero,32d34 <__svfscanf_r+0x1240>
   3262c:	98c00117 	ldw	r3,4(r19)
   32630:	10800044 	addi	r2,r2,1
   32634:	ad400044 	addi	r21,r21,1
   32638:	18ffffc4 	addi	r3,r3,-1
   3263c:	98c00115 	stw	r3,4(r19)
   32640:	10ffffc3 	ldbu	r3,-1(r2)
   32644:	e73fffc4 	addi	fp,fp,-1
   32648:	a8ffffc5 	stb	r3,-1(r21)
   3264c:	98800015 	stw	r2,0(r19)
   32650:	e001b826 	beq	fp,zero,32d34 <__svfscanf_r+0x1240>
   32654:	98c00117 	ldw	r3,4(r19)
   32658:	00fff016 	blt	zero,r3,3261c <__svfscanf_r+0xb28>
   3265c:	8809883a 	mov	r4,r17
   32660:	980b883a 	mov	r5,r19
   32664:	002ee900 	call	2ee90 <__srefill_r>
   32668:	1001b11e 	bne	r2,zero,32d30 <__svfscanf_r+0x123c>
   3266c:	98800017 	ldw	r2,0(r19)
   32670:	003fea06 	br	3261c <__svfscanf_r+0xb28>
   32674:	80803fcc 	andi	r2,r16,255
   32678:	1080201c 	xori	r2,r2,128
   3267c:	10bfe004 	addi	r2,r2,-128
   32680:	3085883a 	add	r2,r6,r2
   32684:	103ea51e 	bne	r2,zero,3211c <__svfscanf_r+0x628>
   32688:	00bf9fc4 	movi	r2,-385
   3268c:	b0ac703a 	and	r22,r22,r2
   32690:	b9400005 	stb	r5,0(r23)
   32694:	bdc00044 	addi	r23,r23,1
   32698:	98800117 	ldw	r2,4(r19)
   3269c:	e73fffc4 	addi	fp,fp,-1
   326a0:	a5000044 	addi	r20,r20,1
   326a4:	10bfffc4 	addi	r2,r2,-1
   326a8:	98800115 	stw	r2,4(r19)
   326ac:	00816d0e 	bge	zero,r2,32c64 <__svfscanf_r+0x1170>
   326b0:	39c00044 	addi	r7,r7,1
   326b4:	99c00015 	stw	r7,0(r19)
   326b8:	e03e931e 	bne	fp,zero,32108 <__svfscanf_r+0x614>
   326bc:	003e9706 	br	3211c <__svfscanf_r+0x628>
   326c0:	b080400c 	andi	r2,r22,256
   326c4:	103feb26 	beq	r2,zero,32674 <__svfscanf_r+0xb80>
   326c8:	00bfdfc4 	movi	r2,-129
   326cc:	b0ac703a 	and	r22,r22,r2
   326d0:	ad400044 	addi	r21,r21,1
   326d4:	583ff026 	beq	r11,zero,32698 <__svfscanf_r+0xba4>
   326d8:	5affffc4 	addi	r11,r11,-1
   326dc:	e7000044 	addi	fp,fp,1
   326e0:	003fed06 	br	32698 <__svfscanf_r+0xba4>
   326e4:	b080800c 	andi	r2,r22,512
   326e8:	103e8c26 	beq	r2,zero,3211c <__svfscanf_r+0x628>
   326ec:	b3ec703a 	and	r22,r22,r15
   326f0:	dd40a215 	stw	r21,648(sp)
   326f4:	003fe606 	br	32690 <__svfscanf_r+0xb9c>
   326f8:	b080200c 	andi	r2,r22,128
   326fc:	103e8726 	beq	r2,zero,3211c <__svfscanf_r+0x628>
   32700:	00bfdfc4 	movi	r2,-129
   32704:	b0ac703a 	and	r22,r22,r2
   32708:	003fe106 	br	32690 <__svfscanf_r+0xb9c>
   3270c:	81003fcc 	andi	r4,r16,255
   32710:	2100201c 	xori	r4,r4,128
   32714:	213fe004 	addi	r4,r4,-128
   32718:	008001c4 	movi	r2,7
   3271c:	20be7f1e 	bne	r4,r2,3211c <__svfscanf_r+0x628>
   32720:	04000204 	movi	r16,8
   32724:	003fda06 	br	32690 <__svfscanf_r+0xb9c>
   32728:	81003fcc 	andi	r4,r16,255
   3272c:	2100201c 	xori	r4,r4,128
   32730:	213fe004 	addi	r4,r4,-128
   32734:	00800184 	movi	r2,6
   32738:	20be781e 	bne	r4,r2,3211c <__svfscanf_r+0x628>
   3273c:	040001c4 	movi	r16,7
   32740:	003fd306 	br	32690 <__svfscanf_r+0xb9c>
   32744:	3001891e 	bne	r6,zero,32d6c <__svfscanf_r+0x1278>
   32748:	b101c00c 	andi	r4,r22,1792
   3274c:	0081c004 	movi	r2,1792
   32750:	20821d26 	beq	r4,r2,32fc8 <__svfscanf_r+0x14d4>
   32754:	80803fcc 	andi	r2,r16,255
   32758:	1080201c 	xori	r2,r2,128
   3275c:	10bfe004 	addi	r2,r2,-128
   32760:	01000044 	movi	r4,1
   32764:	11000226 	beq	r2,r4,32770 <__svfscanf_r+0xc7c>
   32768:	01000104 	movi	r4,4
   3276c:	113e6b1e 	bne	r2,r4,3211c <__svfscanf_r+0x628>
   32770:	84000044 	addi	r16,r16,1
   32774:	003fc606 	br	32690 <__svfscanf_r+0xb9c>
   32778:	80803fcc 	andi	r2,r16,255
   3277c:	1080201c 	xori	r2,r2,128
   32780:	10bfe004 	addi	r2,r2,-128
   32784:	1001731e 	bne	r2,zero,32d54 <__svfscanf_r+0x1260>
   32788:	b101c00c 	andi	r4,r22,1792
   3278c:	0081c004 	movi	r2,1792
   32790:	20be621e 	bne	r4,r2,3211c <__svfscanf_r+0x628>
   32794:	b32c703a 	and	r22,r22,r12
   32798:	04000044 	movi	r16,1
   3279c:	003fbc06 	br	32690 <__svfscanf_r+0xb9c>
   327a0:	b081400c 	andi	r2,r22,1280
   327a4:	13800326 	beq	r2,r14,327b4 <__svfscanf_r+0xcc0>
   327a8:	b081000c 	andi	r2,r22,1024
   327ac:	103e5b26 	beq	r2,zero,3211c <__svfscanf_r+0x628>
   327b0:	a83e5d26 	beq	r21,zero,32128 <__svfscanf_r+0x634>
   327b4:	b080800c 	andi	r2,r22,512
   327b8:	1000041e 	bne	r2,zero,327cc <__svfscanf_r+0xcd8>
   327bc:	d880a217 	ldw	r2,648(sp)
   327c0:	ddc0a115 	stw	r23,644(sp)
   327c4:	a8abc83a 	sub	r21,r21,r2
   327c8:	dd40a315 	stw	r21,652(sp)
   327cc:	b32c703a 	and	r22,r22,r12
   327d0:	b5806014 	ori	r22,r22,384
   327d4:	002b883a 	mov	r21,zero
   327d8:	003fad06 	br	32690 <__svfscanf_r+0xb9c>
   327dc:	00800044 	movi	r2,1
   327e0:	30be4e1e 	bne	r6,r2,3211c <__svfscanf_r+0x628>
   327e4:	01800084 	movi	r6,2
   327e8:	003fa906 	br	32690 <__svfscanf_r+0xb9c>
   327ec:	81003fcc 	andi	r4,r16,255
   327f0:	2100201c 	xori	r4,r4,128
   327f4:	213fe004 	addi	r4,r4,-128
   327f8:	00800084 	movi	r2,2
   327fc:	20be471e 	bne	r4,r2,3211c <__svfscanf_r+0x628>
   32800:	040000c4 	movi	r16,3
   32804:	003fa206 	br	32690 <__svfscanf_r+0xb9c>
   32808:	01400134 	movhi	r5,4
   3280c:	29625d04 	addi	r5,r5,-30348
   32810:	00800284 	movi	r2,10
   32814:	d940a015 	stw	r5,640(sp)
   32818:	d8809f15 	stw	r2,636(sp)
   3281c:	040000c4 	movi	r16,3
   32820:	003d2706 	br	31cc0 <__svfscanf_r+0x1cc>
   32824:	df009d15 	stw	fp,628(sp)
   32828:	04000084 	movi	r16,2
   3282c:	2039883a 	mov	fp,r4
   32830:	003d2306 	br	31cc0 <__svfscanf_r+0x1cc>
   32834:	00800134 	movhi	r2,4
   32838:	10a3d004 	addi	r2,r2,-28864
   3283c:	00c00284 	movi	r3,10
   32840:	df009d15 	stw	fp,628(sp)
   32844:	d880a015 	stw	r2,640(sp)
   32848:	2039883a 	mov	fp,r4
   3284c:	d8c09f15 	stw	r3,636(sp)
   32850:	040000c4 	movi	r16,3
   32854:	003d1a06 	br	31cc0 <__svfscanf_r+0x1cc>
   32858:	bdc03fcc 	andi	r23,r23,255
   3285c:	01400284 	movi	r5,10
   32860:	bdc0201c 	xori	r23,r23,128
   32864:	d8c0a815 	stw	r3,672(sp)
   32868:	d980a915 	stw	r6,676(sp)
   3286c:	bdffe004 	addi	r23,r23,-128
   32870:	002c1540 	call	2c154 <__mulsi3>
   32874:	15c5883a 	add	r2,r2,r23
   32878:	113ff404 	addi	r4,r2,-48
   3287c:	85c00043 	ldbu	r23,1(r16)
   32880:	d8c0a817 	ldw	r3,672(sp)
   32884:	e021883a 	mov	r16,fp
   32888:	d980a917 	ldw	r6,676(sp)
   3288c:	003cf906 	br	31c74 <__svfscanf_r+0x180>
   32890:	df009d15 	stw	fp,628(sp)
   32894:	2039883a 	mov	fp,r4
   32898:	003d0206 	br	31ca4 <__svfscanf_r+0x1b0>
   3289c:	df009d15 	stw	fp,628(sp)
   328a0:	04000104 	movi	r16,4
   328a4:	2039883a 	mov	fp,r4
   328a8:	003d0506 	br	31cc0 <__svfscanf_r+0x1cc>
   328ac:	85c00043 	ldbu	r23,1(r16)
   328b0:	b5800094 	ori	r22,r22,2
   328b4:	e021883a 	mov	r16,fp
   328b8:	003cee06 	br	31c74 <__svfscanf_r+0x180>
   328bc:	df009d15 	stw	fp,628(sp)
   328c0:	e021883a 	mov	r16,fp
   328c4:	003cd706 	br	31c24 <__svfscanf_r+0x130>
   328c8:	85c00043 	ldbu	r23,1(r16)
   328cc:	b5800414 	ori	r22,r22,16
   328d0:	e021883a 	mov	r16,fp
   328d4:	003ce706 	br	31c74 <__svfscanf_r+0x180>
   328d8:	df009d15 	stw	fp,628(sp)
   328dc:	b5800054 	ori	r22,r22,1
   328e0:	2039883a 	mov	fp,r4
   328e4:	01000134 	movhi	r4,4
   328e8:	2123d004 	addi	r4,r4,-28864
   328ec:	01400204 	movi	r5,8
   328f0:	d900a015 	stw	r4,640(sp)
   328f4:	d9409f15 	stw	r5,636(sp)
   328f8:	040000c4 	movi	r16,3
   328fc:	003cf006 	br	31cc0 <__svfscanf_r+0x1cc>
   32900:	df009d15 	stw	fp,628(sp)
   32904:	01400404 	movi	r5,16
   32908:	2039883a 	mov	fp,r4
   3290c:	01000134 	movhi	r4,4
   32910:	2123d004 	addi	r4,r4,-28864
   32914:	b5808014 	ori	r22,r22,512
   32918:	d900a015 	stw	r4,640(sp)
   3291c:	d9409f15 	stw	r5,636(sp)
   32920:	040000c4 	movi	r16,3
   32924:	003ce606 	br	31cc0 <__svfscanf_r+0x1cc>
   32928:	df009d15 	stw	fp,628(sp)
   3292c:	d9409d17 	ldw	r5,628(sp)
   32930:	2039883a 	mov	fp,r4
   32934:	d9005884 	addi	r4,sp,354
   32938:	00371b80 	call	371b8 <__sccl>
   3293c:	d8809d15 	stw	r2,628(sp)
   32940:	b5801014 	ori	r22,r22,64
   32944:	04000044 	movi	r16,1
   32948:	003cdd06 	br	31cc0 <__svfscanf_r+0x1cc>
   3294c:	df009d15 	stw	fp,628(sp)
   32950:	b5801014 	ori	r22,r22,64
   32954:	2039883a 	mov	fp,r4
   32958:	0021883a 	mov	r16,zero
   3295c:	003cd806 	br	31cc0 <__svfscanf_r+0x1cc>
   32960:	df009d15 	stw	fp,628(sp)
   32964:	2039883a 	mov	fp,r4
   32968:	003ccf06 	br	31ca8 <__svfscanf_r+0x1b4>
   3296c:	85c00043 	ldbu	r23,1(r16)
   32970:	b5800114 	ori	r22,r22,4
   32974:	e021883a 	mov	r16,fp
   32978:	003cbe06 	br	31c74 <__svfscanf_r+0x180>
   3297c:	df009d15 	stw	fp,628(sp)
   32980:	2039883a 	mov	fp,r4
   32984:	01000134 	movhi	r4,4
   32988:	21225d04 	addi	r4,r4,-30348
   3298c:	d900a015 	stw	r4,640(sp)
   32990:	d8009f15 	stw	zero,636(sp)
   32994:	040000c4 	movi	r16,3
   32998:	003cc906 	br	31cc0 <__svfscanf_r+0x1cc>
   3299c:	85c00043 	ldbu	r23,1(r16)
   329a0:	b8803fcc 	andi	r2,r23,255
   329a4:	1080201c 	xori	r2,r2,128
   329a8:	10bfe004 	addi	r2,r2,-128
   329ac:	11818f26 	beq	r2,r6,32fec <__svfscanf_r+0x14f8>
   329b0:	b5800054 	ori	r22,r22,1
   329b4:	e021883a 	mov	r16,fp
   329b8:	003cae06 	br	31c74 <__svfscanf_r+0x180>
   329bc:	df009d15 	stw	fp,628(sp)
   329c0:	b080040c 	andi	r2,r22,16
   329c4:	103cfa1e 	bne	r2,zero,31db0 <__svfscanf_r+0x2bc>
   329c8:	b080010c 	andi	r2,r22,4
   329cc:	10018b26 	beq	r2,zero,32ffc <__svfscanf_r+0x1508>
   329d0:	d9009c17 	ldw	r4,624(sp)
   329d4:	e021883a 	mov	r16,fp
   329d8:	800d883a 	mov	r6,r16
   329dc:	20800017 	ldw	r2,0(r4)
   329e0:	21000104 	addi	r4,r4,4
   329e4:	d9009c15 	stw	r4,624(sp)
   329e8:	1500000d 	sth	r20,0(r2)
   329ec:	003c7a06 	br	31bd8 <__svfscanf_r+0xe4>
   329f0:	df009d15 	stw	fp,628(sp)
   329f4:	2039883a 	mov	fp,r4
   329f8:	003fba06 	br	328e4 <__svfscanf_r+0xdf0>
   329fc:	00800134 	movhi	r2,4
   32a00:	10a3d004 	addi	r2,r2,-28864
   32a04:	00c00404 	movi	r3,16
   32a08:	df009d15 	stw	fp,628(sp)
   32a0c:	b5808814 	ori	r22,r22,544
   32a10:	2039883a 	mov	fp,r4
   32a14:	d880a015 	stw	r2,640(sp)
   32a18:	d8c09f15 	stw	r3,636(sp)
   32a1c:	040000c4 	movi	r16,3
   32a20:	003ca706 	br	31cc0 <__svfscanf_r+0x1cc>
   32a24:	013fff84 	movi	r4,-2
   32a28:	113cdd26 	beq	r2,r4,31da0 <__svfscanf_r+0x2ac>
   32a2c:	a429883a 	add	r20,r20,r16
   32a30:	e73fffc4 	addi	fp,fp,-1
   32a34:	b83cd826 	beq	r23,zero,31d98 <__svfscanf_r+0x2a4>
   32a38:	0021883a 	mov	r16,zero
   32a3c:	003cd806 	br	31da0 <__svfscanf_r+0x2ac>
   32a40:	1085883a 	add	r2,r2,r2
   32a44:	1085883a 	add	r2,r2,r2
   32a48:	010000f4 	movhi	r4,3
   32a4c:	210a9704 	addi	r4,r4,10844
   32a50:	1105883a 	add	r2,r2,r4
   32a54:	10800017 	ldw	r2,0(r2)
   32a58:	1000683a 	jmp	r2
   32a5c:	00032c50 	cmplti	zero,zero,3249
   32a60:	00032294 	movui	zero,3210
   32a64:	00032c50 	cmplti	zero,zero,3249
   32a68:	00032294 	movui	zero,3210
   32a6c:	00032294 	movui	zero,3210
   32a70:	00032c28 	cmpgeui	zero,zero,3248
   32a74:	00032c08 	cmpgei	zero,zero,3248
   32a78:	00032c08 	cmpgei	zero,zero,3248
   32a7c:	00032c08 	cmpgei	zero,zero,3248
   32a80:	00032c08 	cmpgei	zero,zero,3248
   32a84:	00032c08 	cmpgei	zero,zero,3248
   32a88:	00032c08 	cmpgei	zero,zero,3248
   32a8c:	00032c08 	cmpgei	zero,zero,3248
   32a90:	00032be8 	cmpgeui	zero,zero,3247
   32a94:	00032be8 	cmpgeui	zero,zero,3247
   32a98:	00032294 	movui	zero,3210
   32a9c:	00032294 	movui	zero,3210
   32aa0:	00032294 	movui	zero,3210
   32aa4:	00032294 	movui	zero,3210
   32aa8:	00032294 	movui	zero,3210
   32aac:	00032294 	movui	zero,3210
   32ab0:	00032294 	movui	zero,3210
   32ab4:	00032bd4 	movui	zero,3247
   32ab8:	00032bd4 	movui	zero,3247
   32abc:	00032bd4 	movui	zero,3247
   32ac0:	00032bd4 	movui	zero,3247
   32ac4:	00032bd4 	movui	zero,3247
   32ac8:	00032bd4 	movui	zero,3247
   32acc:	00032294 	movui	zero,3210
   32ad0:	00032294 	movui	zero,3210
   32ad4:	00032294 	movui	zero,3210
   32ad8:	00032294 	movui	zero,3210
   32adc:	00032294 	movui	zero,3210
   32ae0:	00032294 	movui	zero,3210
   32ae4:	00032294 	movui	zero,3210
   32ae8:	00032294 	movui	zero,3210
   32aec:	00032294 	movui	zero,3210
   32af0:	00032294 	movui	zero,3210
   32af4:	00032294 	movui	zero,3210
   32af8:	00032294 	movui	zero,3210
   32afc:	00032294 	movui	zero,3210
   32b00:	00032294 	movui	zero,3210
   32b04:	00032294 	movui	zero,3210
   32b08:	00032294 	movui	zero,3210
   32b0c:	00032294 	movui	zero,3210
   32b10:	00032b94 	movui	zero,3246
   32b14:	00032294 	movui	zero,3210
   32b18:	00032294 	movui	zero,3210
   32b1c:	00032294 	movui	zero,3210
   32b20:	00032294 	movui	zero,3210
   32b24:	00032294 	movui	zero,3210
   32b28:	00032294 	movui	zero,3210
   32b2c:	00032294 	movui	zero,3210
   32b30:	00032294 	movui	zero,3210
   32b34:	00032bd4 	movui	zero,3247
   32b38:	00032bd4 	movui	zero,3247
   32b3c:	00032bd4 	movui	zero,3247
   32b40:	00032bd4 	movui	zero,3247
   32b44:	00032bd4 	movui	zero,3247
   32b48:	00032bd4 	movui	zero,3247
   32b4c:	00032294 	movui	zero,3210
   32b50:	00032294 	movui	zero,3210
   32b54:	00032294 	movui	zero,3210
   32b58:	00032294 	movui	zero,3210
   32b5c:	00032294 	movui	zero,3210
   32b60:	00032294 	movui	zero,3210
   32b64:	00032294 	movui	zero,3210
   32b68:	00032294 	movui	zero,3210
   32b6c:	00032294 	movui	zero,3210
   32b70:	00032294 	movui	zero,3210
   32b74:	00032294 	movui	zero,3210
   32b78:	00032294 	movui	zero,3210
   32b7c:	00032294 	movui	zero,3210
   32b80:	00032294 	movui	zero,3210
   32b84:	00032294 	movui	zero,3210
   32b88:	00032294 	movui	zero,3210
   32b8c:	00032294 	movui	zero,3210
   32b90:	00032b94 	movui	zero,3246
   32b94:	b081800c 	andi	r2,r22,1536
   32b98:	11fdbe1e 	bne	r2,r7,32294 <__svfscanf_r+0x7a0>
   32b9c:	b1ac703a 	and	r22,r22,r6
   32ba0:	b5814014 	ori	r22,r22,1280
   32ba4:	02400404 	movi	r9,16
   32ba8:	a9400005 	stb	r5,0(r21)
   32bac:	ad400044 	addi	r21,r21,1
   32bb0:	98800117 	ldw	r2,4(r19)
   32bb4:	10bfffc4 	addi	r2,r2,-1
   32bb8:	98800115 	stw	r2,4(r19)
   32bbc:	00803b0e 	bge	zero,r2,32cac <__svfscanf_r+0x11b8>
   32bc0:	42000044 	addi	r8,r8,1
   32bc4:	9a000015 	stw	r8,0(r19)
   32bc8:	e73fffc4 	addi	fp,fp,-1
   32bcc:	e03dac1e 	bne	fp,zero,32280 <__svfscanf_r+0x78c>
   32bd0:	003db006 	br	32294 <__svfscanf_r+0x7a0>
   32bd4:	00800284 	movi	r2,10
   32bd8:	127dae0e 	bge	r2,r9,32294 <__svfscanf_r+0x7a0>
   32bdc:	00bd1fc4 	movi	r2,-2945
   32be0:	b0ac703a 	and	r22,r22,r2
   32be4:	003ff006 	br	32ba8 <__svfscanf_r+0x10b4>
   32be8:	4a53883a 	add	r9,r9,r9
   32bec:	01000134 	movhi	r4,4
   32bf0:	21048984 	addi	r4,r4,4646
   32bf4:	2245883a 	add	r2,r4,r9
   32bf8:	1240000f 	ldh	r9,0(r2)
   32bfc:	00800204 	movi	r2,8
   32c00:	127ff616 	blt	r2,r9,32bdc <__svfscanf_r+0x10e8>
   32c04:	003da306 	br	32294 <__svfscanf_r+0x7a0>
   32c08:	4a53883a 	add	r9,r9,r9
   32c0c:	01000134 	movhi	r4,4
   32c10:	21048984 	addi	r4,r4,4646
   32c14:	2245883a 	add	r2,r4,r9
   32c18:	1240000f 	ldh	r9,0(r2)
   32c1c:	00bd1fc4 	movi	r2,-2945
   32c20:	b0ac703a 	and	r22,r22,r2
   32c24:	003fe006 	br	32ba8 <__svfscanf_r+0x10b4>
   32c28:	b082000c 	andi	r2,r22,2048
   32c2c:	103fde26 	beq	r2,zero,32ba8 <__svfscanf_r+0x10b4>
   32c30:	4800021e 	bne	r9,zero,32c3c <__svfscanf_r+0x1148>
   32c34:	b5808014 	ori	r22,r22,512
   32c38:	02400204 	movi	r9,8
   32c3c:	b081000c 	andi	r2,r22,1024
   32c40:	10009f26 	beq	r2,zero,32ec0 <__svfscanf_r+0x13cc>
   32c44:	00be9fc4 	movi	r2,-1409
   32c48:	b0ac703a 	and	r22,r22,r2
   32c4c:	003fd606 	br	32ba8 <__svfscanf_r+0x10b4>
   32c50:	b080200c 	andi	r2,r22,128
   32c54:	103d8f26 	beq	r2,zero,32294 <__svfscanf_r+0x7a0>
   32c58:	00bfdfc4 	movi	r2,-129
   32c5c:	b0ac703a 	and	r22,r22,r2
   32c60:	003fd106 	br	32ba8 <__svfscanf_r+0x10b4>
   32c64:	8809883a 	mov	r4,r17
   32c68:	980b883a 	mov	r5,r19
   32c6c:	d8c0a815 	stw	r3,672(sp)
   32c70:	d980a915 	stw	r6,676(sp)
   32c74:	dac0a715 	stw	r11,668(sp)
   32c78:	db00a515 	stw	r12,660(sp)
   32c7c:	db80a415 	stw	r14,656(sp)
   32c80:	dbc0a615 	stw	r15,664(sp)
   32c84:	002ee900 	call	2ee90 <__srefill_r>
   32c88:	d8c0a817 	ldw	r3,672(sp)
   32c8c:	d980a917 	ldw	r6,676(sp)
   32c90:	dac0a717 	ldw	r11,668(sp)
   32c94:	db00a517 	ldw	r12,660(sp)
   32c98:	db80a417 	ldw	r14,656(sp)
   32c9c:	dbc0a617 	ldw	r15,664(sp)
   32ca0:	103d1e1e 	bne	r2,zero,3211c <__svfscanf_r+0x628>
   32ca4:	e03d181e 	bne	fp,zero,32108 <__svfscanf_r+0x614>
   32ca8:	003d1c06 	br	3211c <__svfscanf_r+0x628>
   32cac:	8809883a 	mov	r4,r17
   32cb0:	980b883a 	mov	r5,r19
   32cb4:	d8c0a815 	stw	r3,672(sp)
   32cb8:	d980a915 	stw	r6,676(sp)
   32cbc:	d9c0a415 	stw	r7,656(sp)
   32cc0:	da40a515 	stw	r9,660(sp)
   32cc4:	002ee900 	call	2ee90 <__srefill_r>
   32cc8:	d8c0a817 	ldw	r3,672(sp)
   32ccc:	d980a917 	ldw	r6,676(sp)
   32cd0:	d9c0a417 	ldw	r7,656(sp)
   32cd4:	da40a517 	ldw	r9,660(sp)
   32cd8:	103fbb26 	beq	r2,zero,32bc8 <__svfscanf_r+0x10d4>
   32cdc:	003d6d06 	br	32294 <__svfscanf_r+0x7a0>
   32ce0:	a429883a 	add	r20,r20,r16
   32ce4:	e73fffc4 	addi	fp,fp,-1
   32ce8:	b000fc1e 	bne	r22,zero,330dc <__svfscanf_r+0x15e8>
   32cec:	ad400104 	addi	r21,r21,4
   32cf0:	0021883a 	mov	r16,zero
   32cf4:	98800117 	ldw	r2,4(r19)
   32cf8:	00bd8716 	blt	zero,r2,32318 <__svfscanf_r+0x824>
   32cfc:	8809883a 	mov	r4,r17
   32d00:	980b883a 	mov	r5,r19
   32d04:	002ee900 	call	2ee90 <__srefill_r>
   32d08:	103d8326 	beq	r2,zero,32318 <__svfscanf_r+0x824>
   32d0c:	803caf1e 	bne	r16,zero,31fcc <__svfscanf_r+0x4d8>
   32d10:	b03c271e 	bne	r22,zero,31db0 <__svfscanf_r+0x2bc>
   32d14:	d8809e17 	ldw	r2,632(sp)
   32d18:	dc009d17 	ldw	r16,628(sp)
   32d1c:	a8000015 	stw	zero,0(r21)
   32d20:	10800044 	addi	r2,r2,1
   32d24:	d8809e15 	stw	r2,632(sp)
   32d28:	800d883a 	mov	r6,r16
   32d2c:	003baa06 	br	31bd8 <__svfscanf_r+0xe4>
   32d30:	857ca626 	beq	r16,r21,31fcc <__svfscanf_r+0x4d8>
   32d34:	ac21c83a 	sub	r16,r21,r16
   32d38:	803bab26 	beq	r16,zero,31be8 <__svfscanf_r+0xf4>
   32d3c:	d8809e17 	ldw	r2,632(sp)
   32d40:	a8000005 	stb	zero,0(r21)
   32d44:	ddc09c15 	stw	r23,624(sp)
   32d48:	10800044 	addi	r2,r2,1
   32d4c:	d8809e15 	stw	r2,632(sp)
   32d50:	003d6106 	br	322d8 <__svfscanf_r+0x7e4>
   32d54:	010000c4 	movi	r4,3
   32d58:	113e8526 	beq	r2,r4,32770 <__svfscanf_r+0xc7c>
   32d5c:	01000144 	movi	r4,5
   32d60:	113cee1e 	bne	r2,r4,3211c <__svfscanf_r+0x628>
   32d64:	84000044 	addi	r16,r16,1
   32d68:	003e4906 	br	32690 <__svfscanf_r+0xb9c>
   32d6c:	00800084 	movi	r2,2
   32d70:	30be781e 	bne	r6,r2,32754 <__svfscanf_r+0xc60>
   32d74:	018000c4 	movi	r6,3
   32d78:	003e4506 	br	32690 <__svfscanf_r+0xb9c>
   32d7c:	d8c0a017 	ldw	r3,640(sp)
   32d80:	d9c09f17 	ldw	r7,636(sp)
   32d84:	8809883a 	mov	r4,r17
   32d88:	d9400104 	addi	r5,sp,4
   32d8c:	000d883a 	mov	r6,zero
   32d90:	a8000005 	stb	zero,0(r21)
   32d94:	183ee83a 	callr	r3
   32d98:	b0c0080c 	andi	r3,r22,32
   32d9c:	1800391e 	bne	r3,zero,32e84 <__svfscanf_r+0x1390>
   32da0:	b0c0010c 	andi	r3,r22,4
   32da4:	1800ac26 	beq	r3,zero,33058 <__svfscanf_r+0x1564>
   32da8:	d9409c17 	ldw	r5,624(sp)
   32dac:	28c00017 	ldw	r3,0(r5)
   32db0:	29400104 	addi	r5,r5,4
   32db4:	d9409c15 	stw	r5,624(sp)
   32db8:	1880000d 	sth	r2,0(r3)
   32dbc:	d8809e17 	ldw	r2,632(sp)
   32dc0:	10800044 	addi	r2,r2,1
   32dc4:	d8809e15 	stw	r2,632(sp)
   32dc8:	003d4006 	br	322cc <__svfscanf_r+0x7d8>
   32dcc:	d8c09c17 	ldw	r3,624(sp)
   32dd0:	98800017 	ldw	r2,0(r19)
   32dd4:	1d400017 	ldw	r21,0(r3)
   32dd8:	1d800104 	addi	r22,r3,4
   32ddc:	a821883a 	mov	r16,r21
   32de0:	10c00003 	ldbu	r3,0(r2)
   32de4:	91400017 	ldw	r5,0(r18)
   32de8:	28c7883a 	add	r3,r5,r3
   32dec:	18c00003 	ldbu	r3,0(r3)
   32df0:	18c0020c 	andi	r3,r3,8
   32df4:	18c03fcc 	andi	r3,r3,255
   32df8:	18c0201c 	xori	r3,r3,128
   32dfc:	18ffe004 	addi	r3,r3,-128
   32e00:	1800121e 	bne	r3,zero,32e4c <__svfscanf_r+0x1358>
   32e04:	98c00117 	ldw	r3,4(r19)
   32e08:	10800044 	addi	r2,r2,1
   32e0c:	84000044 	addi	r16,r16,1
   32e10:	18ffffc4 	addi	r3,r3,-1
   32e14:	98c00115 	stw	r3,4(r19)
   32e18:	10ffffc3 	ldbu	r3,-1(r2)
   32e1c:	e73fffc4 	addi	fp,fp,-1
   32e20:	80ffffc5 	stb	r3,-1(r16)
   32e24:	98800015 	stw	r2,0(r19)
   32e28:	e0000826 	beq	fp,zero,32e4c <__svfscanf_r+0x1358>
   32e2c:	98c00117 	ldw	r3,4(r19)
   32e30:	00ffeb16 	blt	zero,r3,32de0 <__svfscanf_r+0x12ec>
   32e34:	8809883a 	mov	r4,r17
   32e38:	980b883a 	mov	r5,r19
   32e3c:	002ee900 	call	2ee90 <__srefill_r>
   32e40:	1000021e 	bne	r2,zero,32e4c <__svfscanf_r+0x1358>
   32e44:	98800017 	ldw	r2,0(r19)
   32e48:	003fe506 	br	32de0 <__svfscanf_r+0x12ec>
   32e4c:	d8809e17 	ldw	r2,632(sp)
   32e50:	856bc83a 	sub	r21,r16,r21
   32e54:	80000005 	stb	zero,0(r16)
   32e58:	dc009d17 	ldw	r16,628(sp)
   32e5c:	10800044 	addi	r2,r2,1
   32e60:	a569883a 	add	r20,r20,r21
   32e64:	d8809e15 	stw	r2,632(sp)
   32e68:	dd809c15 	stw	r22,624(sp)
   32e6c:	800d883a 	mov	r6,r16
   32e70:	003b5906 	br	31bd8 <__svfscanf_r+0xe4>
   32e74:	dd409b04 	addi	r21,sp,620
   32e78:	003d2506 	br	32310 <__svfscanf_r+0x81c>
   32e7c:	002d883a 	mov	r22,zero
   32e80:	003ba206 	br	31d0c <__svfscanf_r+0x218>
   32e84:	d9009c17 	ldw	r4,624(sp)
   32e88:	20c00017 	ldw	r3,0(r4)
   32e8c:	21000104 	addi	r4,r4,4
   32e90:	d9009c15 	stw	r4,624(sp)
   32e94:	18800015 	stw	r2,0(r3)
   32e98:	003fc806 	br	32dbc <__svfscanf_r+0x12c8>
   32e9c:	b280008c 	andi	r10,r22,2
   32ea0:	50008126 	beq	r10,zero,330a8 <__svfscanf_r+0x15b4>
   32ea4:	d8c09c17 	ldw	r3,624(sp)
   32ea8:	18800017 	ldw	r2,0(r3)
   32eac:	18c00104 	addi	r3,r3,4
   32eb0:	d8c09c15 	stw	r3,624(sp)
   32eb4:	15400015 	stw	r21,0(r2)
   32eb8:	15c00115 	stw	r23,4(r2)
   32ebc:	003cde06 	br	32238 <__svfscanf_r+0x744>
   32ec0:	00bf1fc4 	movi	r2,-897
   32ec4:	b0ac703a 	and	r22,r22,r2
   32ec8:	18000226 	beq	r3,zero,32ed4 <__svfscanf_r+0x13e0>
   32ecc:	18ffffc4 	addi	r3,r3,-1
   32ed0:	e7000044 	addi	fp,fp,1
   32ed4:	84000044 	addi	r16,r16,1
   32ed8:	003f3506 	br	32bb0 <__svfscanf_r+0x10bc>
   32edc:	803cfe1e 	bne	r16,zero,322d8 <__svfscanf_r+0x7e4>
   32ee0:	003b4106 	br	31be8 <__svfscanf_r+0xf4>
   32ee4:	d8c09c17 	ldw	r3,624(sp)
   32ee8:	01400044 	movi	r5,1
   32eec:	e00d883a 	mov	r6,fp
   32ef0:	19000017 	ldw	r4,0(r3)
   32ef4:	980f883a 	mov	r7,r19
   32ef8:	002d3680 	call	2d368 <fread>
   32efc:	d9009c17 	ldw	r4,624(sp)
   32f00:	20c00104 	addi	r3,r4,4
   32f04:	103c3126 	beq	r2,zero,31fcc <__svfscanf_r+0x4d8>
   32f08:	1529883a 	add	r20,r2,r20
   32f0c:	d8809e17 	ldw	r2,632(sp)
   32f10:	dc009d17 	ldw	r16,628(sp)
   32f14:	d8c09c15 	stw	r3,624(sp)
   32f18:	10800044 	addi	r2,r2,1
   32f1c:	d8809e15 	stw	r2,632(sp)
   32f20:	800d883a 	mov	r6,r16
   32f24:	003b2c06 	br	31bd8 <__svfscanf_r+0xe4>
   32f28:	00ffff84 	movi	r3,-2
   32f2c:	10ff7126 	beq	r2,r3,32cf4 <__svfscanf_r+0x1200>
   32f30:	a9000017 	ldw	r4,0(r21)
   32f34:	003556c0 	call	3556c <iswspace>
   32f38:	103f6926 	beq	r2,zero,32ce0 <__svfscanf_r+0x11ec>
   32f3c:	803f7426 	beq	r16,zero,32d10 <__svfscanf_r+0x121c>
   32f40:	843fffc4 	addi	r16,r16,-1
   32f44:	d9000104 	addi	r4,sp,4
   32f48:	2405883a 	add	r2,r4,r16
   32f4c:	11400003 	ldbu	r5,0(r2)
   32f50:	8809883a 	mov	r4,r17
   32f54:	980d883a 	mov	r6,r19
   32f58:	003968c0 	call	3968c <_ungetc_r>
   32f5c:	803ff81e 	bne	r16,zero,32f40 <__svfscanf_r+0x144c>
   32f60:	003f6b06 	br	32d10 <__svfscanf_r+0x121c>
   32f64:	99000017 	ldw	r4,0(r19)
   32f68:	1705c83a 	sub	r2,r2,fp
   32f6c:	8721883a 	add	r16,r16,fp
   32f70:	2707883a 	add	r3,r4,fp
   32f74:	98800115 	stw	r2,4(r19)
   32f78:	98c00015 	stw	r3,0(r19)
   32f7c:	003cd606 	br	322d8 <__svfscanf_r+0x7e4>
   32f80:	d880a117 	ldw	r2,644(sp)
   32f84:	000d883a 	mov	r6,zero
   32f88:	8809883a 	mov	r4,r17
   32f8c:	11400044 	addi	r5,r2,1
   32f90:	01c00284 	movi	r7,10
   32f94:	00389740 	call	38974 <_strtol_r>
   32f98:	d8c0a317 	ldw	r3,652(sp)
   32f9c:	10cdc83a 	sub	r6,r2,r3
   32fa0:	d900a117 	ldw	r4,644(sp)
   32fa4:	d88055c4 	addi	r2,sp,343
   32fa8:	20800236 	bltu	r4,r2,32fb4 <__svfscanf_r+0x14c0>
   32fac:	d9005584 	addi	r4,sp,342
   32fb0:	d900a115 	stw	r4,644(sp)
   32fb4:	d900a117 	ldw	r4,644(sp)
   32fb8:	01400134 	movhi	r5,4
   32fbc:	29448804 	addi	r5,r5,4640
   32fc0:	002f1f00 	call	2f1f0 <sprintf>
   32fc4:	003c8e06 	br	32200 <__svfscanf_r+0x70c>
   32fc8:	b32c703a 	and	r22,r22,r12
   32fcc:	01800044 	movi	r6,1
   32fd0:	003daf06 	br	32690 <__svfscanf_r+0xb9c>
   32fd4:	d8c0a217 	ldw	r3,648(sp)
   32fd8:	a8ebc83a 	sub	r21,r21,r3
   32fdc:	054dc83a 	sub	r6,zero,r21
   32fe0:	a83c8726 	beq	r21,zero,32200 <__svfscanf_r+0x70c>
   32fe4:	ddc0a115 	stw	r23,644(sp)
   32fe8:	003fed06 	br	32fa0 <__svfscanf_r+0x14ac>
   32fec:	85c00083 	ldbu	r23,2(r16)
   32ff0:	b5800094 	ori	r22,r22,2
   32ff4:	84000084 	addi	r16,r16,2
   32ff8:	003b1e06 	br	31c74 <__svfscanf_r+0x180>
   32ffc:	b080004c 	andi	r2,r22,1
   33000:	10000d1e 	bne	r2,zero,33038 <__svfscanf_r+0x1544>
   33004:	b580008c 	andi	r22,r22,2
   33008:	b0000b26 	beq	r22,zero,33038 <__svfscanf_r+0x1544>
   3300c:	d8c09c17 	ldw	r3,624(sp)
   33010:	d9009c17 	ldw	r4,624(sp)
   33014:	dc009d17 	ldw	r16,628(sp)
   33018:	18800017 	ldw	r2,0(r3)
   3301c:	a007d7fa 	srai	r3,r20,31
   33020:	21000104 	addi	r4,r4,4
   33024:	15000015 	stw	r20,0(r2)
   33028:	10c00115 	stw	r3,4(r2)
   3302c:	d9009c15 	stw	r4,624(sp)
   33030:	800d883a 	mov	r6,r16
   33034:	003ae806 	br	31bd8 <__svfscanf_r+0xe4>
   33038:	d9409c17 	ldw	r5,624(sp)
   3303c:	dc009d17 	ldw	r16,628(sp)
   33040:	28800017 	ldw	r2,0(r5)
   33044:	29400104 	addi	r5,r5,4
   33048:	d9409c15 	stw	r5,624(sp)
   3304c:	15000015 	stw	r20,0(r2)
   33050:	800d883a 	mov	r6,r16
   33054:	003ae006 	br	31bd8 <__svfscanf_r+0xe4>
   33058:	b0c0004c 	andi	r3,r22,1
   3305c:	183f891e 	bne	r3,zero,32e84 <__svfscanf_r+0x1390>
   33060:	b580008c 	andi	r22,r22,2
   33064:	b03f8726 	beq	r22,zero,32e84 <__svfscanf_r+0x1390>
   33068:	d940a017 	ldw	r5,640(sp)
   3306c:	00800134 	movhi	r2,4
   33070:	10a3d004 	addi	r2,r2,-28864
   33074:	8809883a 	mov	r4,r17
   33078:	28802626 	beq	r5,r2,33114 <__svfscanf_r+0x1620>
   3307c:	d9c09f17 	ldw	r7,636(sp)
   33080:	d9400104 	addi	r5,sp,4
   33084:	000d883a 	mov	r6,zero
   33088:	0038c100 	call	38c10 <_strtoll_r>
   3308c:	d9409c17 	ldw	r5,624(sp)
   33090:	29000017 	ldw	r4,0(r5)
   33094:	29400104 	addi	r5,r5,4
   33098:	d9409c15 	stw	r5,624(sp)
   3309c:	20800015 	stw	r2,0(r4)
   330a0:	20c00115 	stw	r3,4(r4)
   330a4:	003f4506 	br	32dbc <__svfscanf_r+0x12c8>
   330a8:	d8809c17 	ldw	r2,624(sp)
   330ac:	a809883a 	mov	r4,r21
   330b0:	180b883a 	mov	r5,r3
   330b4:	14000104 	addi	r16,r2,4
   330b8:	15800017 	ldw	r22,0(r2)
   330bc:	003718c0 	call	3718c <__isnand>
   330c0:	1000311e 	bne	r2,zero,33188 <__svfscanf_r+0x1694>
   330c4:	a809883a 	mov	r4,r21
   330c8:	b80b883a 	mov	r5,r23
   330cc:	002bea80 	call	2bea8 <__truncdfsf2>
   330d0:	b0800015 	stw	r2,0(r22)
   330d4:	dc009c15 	stw	r16,624(sp)
   330d8:	003c5706 	br	32238 <__svfscanf_r+0x744>
   330dc:	0021883a 	mov	r16,zero
   330e0:	003f0406 	br	32cf4 <__svfscanf_r+0x1200>
   330e4:	d9400104 	addi	r5,sp,4
   330e8:	9821883a 	mov	r16,r19
   330ec:	2dfabe2e 	bgeu	r5,r23,31be8 <__svfscanf_r+0xf4>
   330f0:	bcbfffc4 	addi	r18,r23,-1
   330f4:	dcc000c4 	addi	r19,sp,3
   330f8:	91400007 	ldb	r5,0(r18)
   330fc:	8809883a 	mov	r4,r17
   33100:	94bfffc4 	addi	r18,r18,-1
   33104:	800d883a 	mov	r6,r16
   33108:	003968c0 	call	3968c <_ungetc_r>
   3310c:	94fffa1e 	bne	r18,r19,330f8 <__svfscanf_r+0x1604>
   33110:	003ab506 	br	31be8 <__svfscanf_r+0xf4>
   33114:	d9c09f17 	ldw	r7,636(sp)
   33118:	d9400104 	addi	r5,sp,4
   3311c:	000d883a 	mov	r6,zero
   33120:	00392080 	call	39208 <_strtoull_r>
   33124:	003fd906 	br	3308c <__svfscanf_r+0x1598>
   33128:	d9000104 	addi	r4,sp,4
   3312c:	9821883a 	mov	r16,r19
   33130:	25faad2e 	bgeu	r4,r23,31be8 <__svfscanf_r+0xf4>
   33134:	bcbfffc4 	addi	r18,r23,-1
   33138:	dcc000c4 	addi	r19,sp,3
   3313c:	91400007 	ldb	r5,0(r18)
   33140:	8809883a 	mov	r4,r17
   33144:	94bfffc4 	addi	r18,r18,-1
   33148:	800d883a 	mov	r6,r16
   3314c:	003968c0 	call	3968c <_ungetc_r>
   33150:	94fffa1e 	bne	r18,r19,3313c <__svfscanf_r+0x1648>
   33154:	003aa406 	br	31be8 <__svfscanf_r+0xf4>
   33158:	d8c00104 	addi	r3,sp,4
   3315c:	9821883a 	mov	r16,r19
   33160:	1dfaa12e 	bgeu	r3,r23,31be8 <__svfscanf_r+0xf4>
   33164:	bcbfffc4 	addi	r18,r23,-1
   33168:	dcc000c4 	addi	r19,sp,3
   3316c:	91400007 	ldb	r5,0(r18)
   33170:	8809883a 	mov	r4,r17
   33174:	94bfffc4 	addi	r18,r18,-1
   33178:	800d883a 	mov	r6,r16
   3317c:	003968c0 	call	3968c <_ungetc_r>
   33180:	94fffa1e 	bne	r18,r19,3316c <__svfscanf_r+0x1678>
   33184:	003a9806 	br	31be8 <__svfscanf_r+0xf4>
   33188:	0009883a 	mov	r4,zero
   3318c:	003727c0 	call	3727c <nanf>
   33190:	b0800015 	stw	r2,0(r22)
   33194:	dc009c15 	stw	r16,624(sp)
   33198:	003c2706 	br	32238 <__svfscanf_r+0x744>

0003319c <_vfscanf_r>:
   3319c:	defffb04 	addi	sp,sp,-20
   331a0:	dc000315 	stw	r16,12(sp)
   331a4:	dfc00415 	stw	ra,16(sp)
   331a8:	2021883a 	mov	r16,r4
   331ac:	20000926 	beq	r4,zero,331d4 <_vfscanf_r+0x38>
   331b0:	20800e17 	ldw	r2,56(r4)
   331b4:	1000071e 	bne	r2,zero,331d4 <_vfscanf_r+0x38>
   331b8:	d9400015 	stw	r5,0(sp)
   331bc:	d9800115 	stw	r6,4(sp)
   331c0:	d9c00215 	stw	r7,8(sp)
   331c4:	002cd4c0 	call	2cd4c <__sinit>
   331c8:	d9c00217 	ldw	r7,8(sp)
   331cc:	d9800117 	ldw	r6,4(sp)
   331d0:	d9400017 	ldw	r5,0(sp)
   331d4:	8009883a 	mov	r4,r16
   331d8:	dfc00417 	ldw	ra,16(sp)
   331dc:	dc000317 	ldw	r16,12(sp)
   331e0:	dec00504 	addi	sp,sp,20
   331e4:	0031af41 	jmpi	31af4 <__svfscanf_r>

000331e8 <__svfscanf>:
   331e8:	00800134 	movhi	r2,4
   331ec:	108bb304 	addi	r2,r2,11980
   331f0:	2007883a 	mov	r3,r4
   331f4:	11000017 	ldw	r4,0(r2)
   331f8:	2805883a 	mov	r2,r5
   331fc:	300f883a 	mov	r7,r6
   33200:	180b883a 	mov	r5,r3
   33204:	100d883a 	mov	r6,r2
   33208:	0031af41 	jmpi	31af4 <__svfscanf_r>

0003320c <vfscanf>:
   3320c:	defffb04 	addi	sp,sp,-20
   33210:	dc000115 	stw	r16,4(sp)
   33214:	04000134 	movhi	r16,4
   33218:	840bb304 	addi	r16,r16,11980
   3321c:	80800017 	ldw	r2,0(r16)
   33220:	dc800315 	stw	r18,12(sp)
   33224:	dc400215 	stw	r17,8(sp)
   33228:	dfc00415 	stw	ra,16(sp)
   3322c:	2025883a 	mov	r18,r4
   33230:	2823883a 	mov	r17,r5
   33234:	300f883a 	mov	r7,r6
   33238:	10000726 	beq	r2,zero,33258 <vfscanf+0x4c>
   3323c:	10c00e17 	ldw	r3,56(r2)
   33240:	1800051e 	bne	r3,zero,33258 <vfscanf+0x4c>
   33244:	1009883a 	mov	r4,r2
   33248:	d9800015 	stw	r6,0(sp)
   3324c:	002cd4c0 	call	2cd4c <__sinit>
   33250:	80800017 	ldw	r2,0(r16)
   33254:	d9c00017 	ldw	r7,0(sp)
   33258:	1009883a 	mov	r4,r2
   3325c:	900b883a 	mov	r5,r18
   33260:	880d883a 	mov	r6,r17
   33264:	dfc00417 	ldw	ra,16(sp)
   33268:	dc800317 	ldw	r18,12(sp)
   3326c:	dc400217 	ldw	r17,8(sp)
   33270:	dc000117 	ldw	r16,4(sp)
   33274:	dec00504 	addi	sp,sp,20
   33278:	0031af41 	jmpi	31af4 <__svfscanf_r>

0003327c <_write_r>:
   3327c:	defffd04 	addi	sp,sp,-12
   33280:	dc400115 	stw	r17,4(sp)
   33284:	dc000015 	stw	r16,0(sp)
   33288:	2023883a 	mov	r17,r4
   3328c:	04000134 	movhi	r16,4
   33290:	84129704 	addi	r16,r16,19036
   33294:	2809883a 	mov	r4,r5
   33298:	300b883a 	mov	r5,r6
   3329c:	380d883a 	mov	r6,r7
   332a0:	dfc00215 	stw	ra,8(sp)
   332a4:	80000015 	stw	zero,0(r16)
   332a8:	003ca900 	call	3ca90 <write>
   332ac:	00ffffc4 	movi	r3,-1
   332b0:	10c00526 	beq	r2,r3,332c8 <_write_r+0x4c>
   332b4:	dfc00217 	ldw	ra,8(sp)
   332b8:	dc400117 	ldw	r17,4(sp)
   332bc:	dc000017 	ldw	r16,0(sp)
   332c0:	dec00304 	addi	sp,sp,12
   332c4:	f800283a 	ret
   332c8:	80c00017 	ldw	r3,0(r16)
   332cc:	183ff926 	beq	r3,zero,332b4 <_write_r+0x38>
   332d0:	88c00015 	stw	r3,0(r17)
   332d4:	dfc00217 	ldw	ra,8(sp)
   332d8:	dc400117 	ldw	r17,4(sp)
   332dc:	dc000017 	ldw	r16,0(sp)
   332e0:	dec00304 	addi	sp,sp,12
   332e4:	f800283a 	ret

000332e8 <__swsetup_r>:
   332e8:	00800134 	movhi	r2,4
   332ec:	108bb304 	addi	r2,r2,11980
   332f0:	10800017 	ldw	r2,0(r2)
   332f4:	defffd04 	addi	sp,sp,-12
   332f8:	dc400115 	stw	r17,4(sp)
   332fc:	dc000015 	stw	r16,0(sp)
   33300:	dfc00215 	stw	ra,8(sp)
   33304:	2023883a 	mov	r17,r4
   33308:	2821883a 	mov	r16,r5
   3330c:	10000226 	beq	r2,zero,33318 <__swsetup_r+0x30>
   33310:	10c00e17 	ldw	r3,56(r2)
   33314:	18003d26 	beq	r3,zero,3340c <__swsetup_r+0x124>
   33318:	8080030b 	ldhu	r2,12(r16)
   3331c:	10c0020c 	andi	r3,r2,8
   33320:	18ffffcc 	andi	r3,r3,65535
   33324:	18e0001c 	xori	r3,r3,32768
   33328:	18e00004 	addi	r3,r3,-32768
   3332c:	18001226 	beq	r3,zero,33378 <__swsetup_r+0x90>
   33330:	80c00417 	ldw	r3,16(r16)
   33334:	18001f26 	beq	r3,zero,333b4 <__swsetup_r+0xcc>
   33338:	1100004c 	andi	r4,r2,1
   3333c:	2000261e 	bne	r4,zero,333d8 <__swsetup_r+0xf0>
   33340:	1080008c 	andi	r2,r2,2
   33344:	10bfffcc 	andi	r2,r2,65535
   33348:	10a0001c 	xori	r2,r2,32768
   3334c:	10a00004 	addi	r2,r2,-32768
   33350:	1000311e 	bne	r2,zero,33418 <__swsetup_r+0x130>
   33354:	80800517 	ldw	r2,20(r16)
   33358:	80800215 	stw	r2,8(r16)
   3335c:	18002326 	beq	r3,zero,333ec <__swsetup_r+0x104>
   33360:	0005883a 	mov	r2,zero
   33364:	dfc00217 	ldw	ra,8(sp)
   33368:	dc400117 	ldw	r17,4(sp)
   3336c:	dc000017 	ldw	r16,0(sp)
   33370:	dec00304 	addi	sp,sp,12
   33374:	f800283a 	ret
   33378:	10c0040c 	andi	r3,r2,16
   3337c:	18ffffcc 	andi	r3,r3,65535
   33380:	18e0001c 	xori	r3,r3,32768
   33384:	18e00004 	addi	r3,r3,-32768
   33388:	18001e26 	beq	r3,zero,33404 <__swsetup_r+0x11c>
   3338c:	10c0010c 	andi	r3,r2,4
   33390:	18ffffcc 	andi	r3,r3,65535
   33394:	18e0001c 	xori	r3,r3,32768
   33398:	18e00004 	addi	r3,r3,-32768
   3339c:	1800211e 	bne	r3,zero,33424 <__swsetup_r+0x13c>
   333a0:	80c00417 	ldw	r3,16(r16)
   333a4:	11400214 	ori	r5,r2,8
   333a8:	8140030d 	sth	r5,12(r16)
   333ac:	2805883a 	mov	r2,r5
   333b0:	183fe11e 	bne	r3,zero,33338 <__swsetup_r+0x50>
   333b4:	1140a00c 	andi	r5,r2,640
   333b8:	01008004 	movi	r4,512
   333bc:	293fde26 	beq	r5,r4,33338 <__swsetup_r+0x50>
   333c0:	8809883a 	mov	r4,r17
   333c4:	800b883a 	mov	r5,r16
   333c8:	002e1980 	call	2e198 <__smakebuf_r>
   333cc:	8080030b 	ldhu	r2,12(r16)
   333d0:	80c00417 	ldw	r3,16(r16)
   333d4:	003fd806 	br	33338 <__swsetup_r+0x50>
   333d8:	80800517 	ldw	r2,20(r16)
   333dc:	80000215 	stw	zero,8(r16)
   333e0:	0085c83a 	sub	r2,zero,r2
   333e4:	80800615 	stw	r2,24(r16)
   333e8:	183fdd1e 	bne	r3,zero,33360 <__swsetup_r+0x78>
   333ec:	8080030b 	ldhu	r2,12(r16)
   333f0:	1080200c 	andi	r2,r2,128
   333f4:	10bfffcc 	andi	r2,r2,65535
   333f8:	10a0001c 	xori	r2,r2,32768
   333fc:	10a00004 	addi	r2,r2,-32768
   33400:	103fd826 	beq	r2,zero,33364 <__swsetup_r+0x7c>
   33404:	00bfffc4 	movi	r2,-1
   33408:	003fd606 	br	33364 <__swsetup_r+0x7c>
   3340c:	1009883a 	mov	r4,r2
   33410:	002cd4c0 	call	2cd4c <__sinit>
   33414:	003fc006 	br	33318 <__swsetup_r+0x30>
   33418:	0005883a 	mov	r2,zero
   3341c:	80800215 	stw	r2,8(r16)
   33420:	003fce06 	br	3335c <__swsetup_r+0x74>
   33424:	81400c17 	ldw	r5,48(r16)
   33428:	28000626 	beq	r5,zero,33444 <__swsetup_r+0x15c>
   3342c:	80c01004 	addi	r3,r16,64
   33430:	28c00326 	beq	r5,r3,33440 <__swsetup_r+0x158>
   33434:	8809883a 	mov	r4,r17
   33438:	002d4e40 	call	2d4e4 <_free_r>
   3343c:	8080030b 	ldhu	r2,12(r16)
   33440:	80000c15 	stw	zero,48(r16)
   33444:	80c00417 	ldw	r3,16(r16)
   33448:	013ff6c4 	movi	r4,-37
   3344c:	2084703a 	and	r2,r4,r2
   33450:	80000115 	stw	zero,4(r16)
   33454:	80c00015 	stw	r3,0(r16)
   33458:	003fd206 	br	333a4 <__swsetup_r+0xbc>

0003345c <__call_exitprocs>:
   3345c:	00800134 	movhi	r2,4
   33460:	108bb204 	addi	r2,r2,11976
   33464:	10800017 	ldw	r2,0(r2)
   33468:	defff304 	addi	sp,sp,-52
   3346c:	df000b15 	stw	fp,44(sp)
   33470:	d8800015 	stw	r2,0(sp)
   33474:	10805204 	addi	r2,r2,328
   33478:	dd400815 	stw	r21,32(sp)
   3347c:	dfc00c15 	stw	ra,48(sp)
   33480:	ddc00a15 	stw	r23,40(sp)
   33484:	dd800915 	stw	r22,36(sp)
   33488:	dd000715 	stw	r20,28(sp)
   3348c:	dcc00615 	stw	r19,24(sp)
   33490:	dc800515 	stw	r18,20(sp)
   33494:	dc400415 	stw	r17,16(sp)
   33498:	dc000315 	stw	r16,12(sp)
   3349c:	d9000115 	stw	r4,4(sp)
   334a0:	2839883a 	mov	fp,r5
   334a4:	d8800215 	stw	r2,8(sp)
   334a8:	057fffc4 	movi	r21,-1
   334ac:	d8800017 	ldw	r2,0(sp)
   334b0:	ddc00217 	ldw	r23,8(sp)
   334b4:	14805217 	ldw	r18,328(r2)
   334b8:	90001726 	beq	r18,zero,33518 <__call_exitprocs+0xbc>
   334bc:	94400117 	ldw	r17,4(r18)
   334c0:	8c3fffc4 	addi	r16,r17,-1
   334c4:	80001116 	blt	r16,zero,3350c <__call_exitprocs+0xb0>
   334c8:	8c400044 	addi	r17,r17,1
   334cc:	8427883a 	add	r19,r16,r16
   334d0:	8c63883a 	add	r17,r17,r17
   334d4:	95802204 	addi	r22,r18,136
   334d8:	9ce7883a 	add	r19,r19,r19
   334dc:	8c63883a 	add	r17,r17,r17
   334e0:	b4e7883a 	add	r19,r22,r19
   334e4:	9463883a 	add	r17,r18,r17
   334e8:	e0001726 	beq	fp,zero,33548 <__call_exitprocs+0xec>
   334ec:	8c87c83a 	sub	r3,r17,r18
   334f0:	b0c7883a 	add	r3,r22,r3
   334f4:	18c01e17 	ldw	r3,120(r3)
   334f8:	1f001326 	beq	r3,fp,33548 <__call_exitprocs+0xec>
   334fc:	843fffc4 	addi	r16,r16,-1
   33500:	9cffff04 	addi	r19,r19,-4
   33504:	8c7fff04 	addi	r17,r17,-4
   33508:	857ff71e 	bne	r16,r21,334e8 <__call_exitprocs+0x8c>
   3350c:	008000f4 	movhi	r2,3
   33510:	10b8d504 	addi	r2,r2,-7340
   33514:	10002a1e 	bne	r2,zero,335c0 <__call_exitprocs+0x164>
   33518:	dfc00c17 	ldw	ra,48(sp)
   3351c:	df000b17 	ldw	fp,44(sp)
   33520:	ddc00a17 	ldw	r23,40(sp)
   33524:	dd800917 	ldw	r22,36(sp)
   33528:	dd400817 	ldw	r21,32(sp)
   3352c:	dd000717 	ldw	r20,28(sp)
   33530:	dcc00617 	ldw	r19,24(sp)
   33534:	dc800517 	ldw	r18,20(sp)
   33538:	dc400417 	ldw	r17,16(sp)
   3353c:	dc000317 	ldw	r16,12(sp)
   33540:	dec00d04 	addi	sp,sp,52
   33544:	f800283a 	ret
   33548:	91000117 	ldw	r4,4(r18)
   3354c:	88c00017 	ldw	r3,0(r17)
   33550:	213fffc4 	addi	r4,r4,-1
   33554:	24001526 	beq	r4,r16,335ac <__call_exitprocs+0x150>
   33558:	88000015 	stw	zero,0(r17)
   3355c:	183fe726 	beq	r3,zero,334fc <__call_exitprocs+0xa0>
   33560:	00800044 	movi	r2,1
   33564:	1408983a 	sll	r4,r2,r16
   33568:	91406217 	ldw	r5,392(r18)
   3356c:	95000117 	ldw	r20,4(r18)
   33570:	214a703a 	and	r5,r4,r5
   33574:	28000b26 	beq	r5,zero,335a4 <__call_exitprocs+0x148>
   33578:	91406317 	ldw	r5,396(r18)
   3357c:	2148703a 	and	r4,r4,r5
   33580:	20000c1e 	bne	r4,zero,335b4 <__call_exitprocs+0x158>
   33584:	99400017 	ldw	r5,0(r19)
   33588:	d9000117 	ldw	r4,4(sp)
   3358c:	183ee83a 	callr	r3
   33590:	90c00117 	ldw	r3,4(r18)
   33594:	1d3fc51e 	bne	r3,r20,334ac <__call_exitprocs+0x50>
   33598:	b8c00017 	ldw	r3,0(r23)
   3359c:	1cbfd726 	beq	r3,r18,334fc <__call_exitprocs+0xa0>
   335a0:	003fc206 	br	334ac <__call_exitprocs+0x50>
   335a4:	183ee83a 	callr	r3
   335a8:	003ff906 	br	33590 <__call_exitprocs+0x134>
   335ac:	94000115 	stw	r16,4(r18)
   335b0:	003fea06 	br	3355c <__call_exitprocs+0x100>
   335b4:	99000017 	ldw	r4,0(r19)
   335b8:	183ee83a 	callr	r3
   335bc:	003ff406 	br	33590 <__call_exitprocs+0x134>
   335c0:	90c00117 	ldw	r3,4(r18)
   335c4:	1800071e 	bne	r3,zero,335e4 <__call_exitprocs+0x188>
   335c8:	90c00017 	ldw	r3,0(r18)
   335cc:	18000926 	beq	r3,zero,335f4 <__call_exitprocs+0x198>
   335d0:	9009883a 	mov	r4,r18
   335d4:	b8c00015 	stw	r3,0(r23)
   335d8:	002e3540 	call	2e354 <free>
   335dc:	bc800017 	ldw	r18,0(r23)
   335e0:	003fb506 	br	334b8 <__call_exitprocs+0x5c>
   335e4:	90c00017 	ldw	r3,0(r18)
   335e8:	902f883a 	mov	r23,r18
   335ec:	1825883a 	mov	r18,r3
   335f0:	003fb106 	br	334b8 <__call_exitprocs+0x5c>
   335f4:	0007883a 	mov	r3,zero
   335f8:	003ffb06 	br	335e8 <__call_exitprocs+0x18c>

000335fc <_close_r>:
   335fc:	defffd04 	addi	sp,sp,-12
   33600:	dc400115 	stw	r17,4(sp)
   33604:	dc000015 	stw	r16,0(sp)
   33608:	2023883a 	mov	r17,r4
   3360c:	04000134 	movhi	r16,4
   33610:	84129704 	addi	r16,r16,19036
   33614:	2809883a 	mov	r4,r5
   33618:	dfc00215 	stw	ra,8(sp)
   3361c:	80000015 	stw	zero,0(r16)
   33620:	003bcdc0 	call	3bcdc <close>
   33624:	00ffffc4 	movi	r3,-1
   33628:	10c00526 	beq	r2,r3,33640 <_close_r+0x44>
   3362c:	dfc00217 	ldw	ra,8(sp)
   33630:	dc400117 	ldw	r17,4(sp)
   33634:	dc000017 	ldw	r16,0(sp)
   33638:	dec00304 	addi	sp,sp,12
   3363c:	f800283a 	ret
   33640:	80c00017 	ldw	r3,0(r16)
   33644:	183ff926 	beq	r3,zero,3362c <_close_r+0x30>
   33648:	88c00015 	stw	r3,0(r17)
   3364c:	dfc00217 	ldw	ra,8(sp)
   33650:	dc400117 	ldw	r17,4(sp)
   33654:	dc000017 	ldw	r16,0(sp)
   33658:	dec00304 	addi	sp,sp,12
   3365c:	f800283a 	ret

00033660 <quorem>:
   33660:	defff204 	addi	sp,sp,-56
   33664:	dd000815 	stw	r20,32(sp)
   33668:	20800417 	ldw	r2,16(r4)
   3366c:	2d000417 	ldw	r20,16(r5)
   33670:	dcc00715 	stw	r19,28(sp)
   33674:	dfc00d15 	stw	ra,52(sp)
   33678:	df000c15 	stw	fp,48(sp)
   3367c:	ddc00b15 	stw	r23,44(sp)
   33680:	dd800a15 	stw	r22,40(sp)
   33684:	dd400915 	stw	r21,36(sp)
   33688:	dc800615 	stw	r18,24(sp)
   3368c:	dc400515 	stw	r17,20(sp)
   33690:	dc000415 	stw	r16,16(sp)
   33694:	d9400015 	stw	r5,0(sp)
   33698:	2027883a 	mov	r19,r4
   3369c:	15007d16 	blt	r2,r20,33894 <quorem+0x234>
   336a0:	a0800104 	addi	r2,r20,4
   336a4:	1085883a 	add	r2,r2,r2
   336a8:	1085883a 	add	r2,r2,r2
   336ac:	28ad883a 	add	r22,r5,r2
   336b0:	2085883a 	add	r2,r4,r2
   336b4:	10800017 	ldw	r2,0(r2)
   336b8:	b1400017 	ldw	r5,0(r22)
   336bc:	a53fffc4 	addi	r20,r20,-1
   336c0:	1009883a 	mov	r4,r2
   336c4:	29400044 	addi	r5,r5,1
   336c8:	d8800115 	stw	r2,4(sp)
   336cc:	002c1440 	call	2c144 <__udivsi3>
   336d0:	1025883a 	mov	r18,r2
   336d4:	d8800017 	ldw	r2,0(sp)
   336d8:	9f000504 	addi	fp,r19,20
   336dc:	14000504 	addi	r16,r2,20
   336e0:	90003626 	beq	r18,zero,337bc <quorem+0x15c>
   336e4:	802b883a 	mov	r21,r16
   336e8:	e023883a 	mov	r17,fp
   336ec:	0007883a 	mov	r3,zero
   336f0:	002f883a 	mov	r23,zero
   336f4:	a9800017 	ldw	r6,0(r21)
   336f8:	900b883a 	mov	r5,r18
   336fc:	d8c00315 	stw	r3,12(sp)
   33700:	313fffcc 	andi	r4,r6,65535
   33704:	d9800215 	stw	r6,8(sp)
   33708:	002c1540 	call	2c154 <__mulsi3>
   3370c:	d9800217 	ldw	r6,8(sp)
   33710:	d8c00317 	ldw	r3,12(sp)
   33714:	900b883a 	mov	r5,r18
   33718:	3008d43a 	srli	r4,r6,16
   3371c:	1887883a 	add	r3,r3,r2
   33720:	d8c00315 	stw	r3,12(sp)
   33724:	002c1540 	call	2c154 <__mulsi3>
   33728:	89400017 	ldw	r5,0(r17)
   3372c:	d8c00317 	ldw	r3,12(sp)
   33730:	ad400104 	addi	r21,r21,4
   33734:	293fffcc 	andi	r4,r5,65535
   33738:	1810d43a 	srli	r8,r3,16
   3373c:	25c9883a 	add	r4,r4,r23
   33740:	18ffffcc 	andi	r3,r3,65535
   33744:	20c9c83a 	sub	r4,r4,r3
   33748:	280cd43a 	srli	r6,r5,16
   3374c:	4085883a 	add	r2,r8,r2
   33750:	2007d43a 	srai	r3,r4,16
   33754:	117fffcc 	andi	r5,r2,65535
   33758:	314bc83a 	sub	r5,r6,r5
   3375c:	28cb883a 	add	r5,r5,r3
   33760:	8940008d 	sth	r5,2(r17)
   33764:	8900000d 	sth	r4,0(r17)
   33768:	1006d43a 	srli	r3,r2,16
   3376c:	282fd43a 	srai	r23,r5,16
   33770:	8c400104 	addi	r17,r17,4
   33774:	b57fdf2e 	bgeu	r22,r21,336f4 <quorem+0x94>
   33778:	d8c00117 	ldw	r3,4(sp)
   3377c:	18000f1e 	bne	r3,zero,337bc <quorem+0x15c>
   33780:	a0800144 	addi	r2,r20,5
   33784:	1085883a 	add	r2,r2,r2
   33788:	1085883a 	add	r2,r2,r2
   3378c:	9887883a 	add	r3,r19,r2
   33790:	18bfff04 	addi	r2,r3,-4
   33794:	e080082e 	bgeu	fp,r2,337b8 <quorem+0x158>
   33798:	18ffff17 	ldw	r3,-4(r3)
   3379c:	18000326 	beq	r3,zero,337ac <quorem+0x14c>
   337a0:	00000506 	br	337b8 <quorem+0x158>
   337a4:	10c00017 	ldw	r3,0(r2)
   337a8:	1800031e 	bne	r3,zero,337b8 <quorem+0x158>
   337ac:	10bfff04 	addi	r2,r2,-4
   337b0:	a53fffc4 	addi	r20,r20,-1
   337b4:	e0bffb36 	bltu	fp,r2,337a4 <quorem+0x144>
   337b8:	9d000415 	stw	r20,16(r19)
   337bc:	d9400017 	ldw	r5,0(sp)
   337c0:	9809883a 	mov	r4,r19
   337c4:	00363a40 	call	363a4 <__mcmp>
   337c8:	10002516 	blt	r2,zero,33860 <quorem+0x200>
   337cc:	94800044 	addi	r18,r18,1
   337d0:	e007883a 	mov	r3,fp
   337d4:	000d883a 	mov	r6,zero
   337d8:	18800017 	ldw	r2,0(r3)
   337dc:	82000017 	ldw	r8,0(r16)
   337e0:	84000104 	addi	r16,r16,4
   337e4:	11ffffcc 	andi	r7,r2,65535
   337e8:	413fffcc 	andi	r4,r8,65535
   337ec:	398d883a 	add	r6,r7,r6
   337f0:	310fc83a 	sub	r7,r6,r4
   337f4:	4010d43a 	srli	r8,r8,16
   337f8:	100cd43a 	srli	r6,r2,16
   337fc:	3809d43a 	srai	r4,r7,16
   33800:	19c0000d 	sth	r7,0(r3)
   33804:	320dc83a 	sub	r6,r6,r8
   33808:	310d883a 	add	r6,r6,r4
   3380c:	1980008d 	sth	r6,2(r3)
   33810:	300dd43a 	srai	r6,r6,16
   33814:	18c00104 	addi	r3,r3,4
   33818:	b43fef2e 	bgeu	r22,r16,337d8 <quorem+0x178>
   3381c:	a0800144 	addi	r2,r20,5
   33820:	1085883a 	add	r2,r2,r2
   33824:	1085883a 	add	r2,r2,r2
   33828:	9885883a 	add	r2,r19,r2
   3382c:	10c00017 	ldw	r3,0(r2)
   33830:	18000b1e 	bne	r3,zero,33860 <quorem+0x200>
   33834:	10ffff04 	addi	r3,r2,-4
   33838:	e0c0082e 	bgeu	fp,r3,3385c <quorem+0x1fc>
   3383c:	10bfff17 	ldw	r2,-4(r2)
   33840:	10000326 	beq	r2,zero,33850 <quorem+0x1f0>
   33844:	00000506 	br	3385c <quorem+0x1fc>
   33848:	18800017 	ldw	r2,0(r3)
   3384c:	1000031e 	bne	r2,zero,3385c <quorem+0x1fc>
   33850:	18ffff04 	addi	r3,r3,-4
   33854:	a53fffc4 	addi	r20,r20,-1
   33858:	e0fffb36 	bltu	fp,r3,33848 <quorem+0x1e8>
   3385c:	9d000415 	stw	r20,16(r19)
   33860:	9005883a 	mov	r2,r18
   33864:	dfc00d17 	ldw	ra,52(sp)
   33868:	df000c17 	ldw	fp,48(sp)
   3386c:	ddc00b17 	ldw	r23,44(sp)
   33870:	dd800a17 	ldw	r22,40(sp)
   33874:	dd400917 	ldw	r21,36(sp)
   33878:	dd000817 	ldw	r20,32(sp)
   3387c:	dcc00717 	ldw	r19,28(sp)
   33880:	dc800617 	ldw	r18,24(sp)
   33884:	dc400517 	ldw	r17,20(sp)
   33888:	dc000417 	ldw	r16,16(sp)
   3388c:	dec00e04 	addi	sp,sp,56
   33890:	f800283a 	ret
   33894:	0005883a 	mov	r2,zero
   33898:	003ff206 	br	33864 <quorem+0x204>

0003389c <_dtoa_r>:
   3389c:	20801017 	ldw	r2,64(r4)
   338a0:	deffdf04 	addi	sp,sp,-132
   338a4:	dcc01a15 	stw	r19,104(sp)
   338a8:	dc801915 	stw	r18,100(sp)
   338ac:	dc401815 	stw	r17,96(sp)
   338b0:	dc001715 	stw	r16,92(sp)
   338b4:	dfc02015 	stw	ra,128(sp)
   338b8:	df001f15 	stw	fp,124(sp)
   338bc:	ddc01e15 	stw	r23,120(sp)
   338c0:	dd801d15 	stw	r22,116(sp)
   338c4:	dd401c15 	stw	r21,112(sp)
   338c8:	dd001b15 	stw	r20,108(sp)
   338cc:	d9400315 	stw	r5,12(sp)
   338d0:	d9c00415 	stw	r7,16(sp)
   338d4:	2021883a 	mov	r16,r4
   338d8:	3025883a 	mov	r18,r6
   338dc:	dcc02317 	ldw	r19,140(sp)
   338e0:	3023883a 	mov	r17,r6
   338e4:	10000826 	beq	r2,zero,33908 <_dtoa_r+0x6c>
   338e8:	20c01117 	ldw	r3,68(r4)
   338ec:	01800044 	movi	r6,1
   338f0:	100b883a 	mov	r5,r2
   338f4:	30cc983a 	sll	r6,r6,r3
   338f8:	10c00115 	stw	r3,4(r2)
   338fc:	11800215 	stw	r6,8(r2)
   33900:	0035b000 	call	35b00 <_Bfree>
   33904:	80001015 	stw	zero,64(r16)
   33908:	90002f16 	blt	r18,zero,339c8 <_dtoa_r+0x12c>
   3390c:	98000015 	stw	zero,0(r19)
   33910:	90dffc2c 	andhi	r3,r18,32752
   33914:	009ffc34 	movhi	r2,32752
   33918:	18801c26 	beq	r3,r2,3398c <_dtoa_r+0xf0>
   3391c:	d9000317 	ldw	r4,12(sp)
   33920:	880b883a 	mov	r5,r17
   33924:	000d883a 	mov	r6,zero
   33928:	000f883a 	mov	r7,zero
   3392c:	003b7200 	call	3b720 <__eqdf2>
   33930:	10002c1e 	bne	r2,zero,339e4 <_dtoa_r+0x148>
   33934:	d9002217 	ldw	r4,136(sp)
   33938:	d9c02417 	ldw	r7,144(sp)
   3393c:	00800044 	movi	r2,1
   33940:	20800015 	stw	r2,0(r4)
   33944:	38019426 	beq	r7,zero,33f98 <_dtoa_r+0x6fc>
   33948:	00800134 	movhi	r2,4
   3394c:	10847f44 	addi	r2,r2,4605
   33950:	38800015 	stw	r2,0(r7)
   33954:	15ffffc4 	addi	r23,r2,-1
   33958:	b805883a 	mov	r2,r23
   3395c:	dfc02017 	ldw	ra,128(sp)
   33960:	df001f17 	ldw	fp,124(sp)
   33964:	ddc01e17 	ldw	r23,120(sp)
   33968:	dd801d17 	ldw	r22,116(sp)
   3396c:	dd401c17 	ldw	r21,112(sp)
   33970:	dd001b17 	ldw	r20,108(sp)
   33974:	dcc01a17 	ldw	r19,104(sp)
   33978:	dc801917 	ldw	r18,100(sp)
   3397c:	dc401817 	ldw	r17,96(sp)
   33980:	dc001717 	ldw	r16,92(sp)
   33984:	dec02104 	addi	sp,sp,132
   33988:	f800283a 	ret
   3398c:	d8c02217 	ldw	r3,136(sp)
   33990:	d9000317 	ldw	r4,12(sp)
   33994:	0089c3c4 	movi	r2,9999
   33998:	18800015 	stw	r2,0(r3)
   3399c:	20016c26 	beq	r4,zero,33f50 <_dtoa_r+0x6b4>
   339a0:	05c00134 	movhi	r23,4
   339a4:	bdc49504 	addi	r23,r23,4692
   339a8:	d9c02417 	ldw	r7,144(sp)
   339ac:	383fea26 	beq	r7,zero,33958 <_dtoa_r+0xbc>
   339b0:	b88000c7 	ldb	r2,3(r23)
   339b4:	10016d1e 	bne	r2,zero,33f6c <_dtoa_r+0x6d0>
   339b8:	b88000c4 	addi	r2,r23,3
   339bc:	d8c02417 	ldw	r3,144(sp)
   339c0:	18800015 	stw	r2,0(r3)
   339c4:	003fe406 	br	33958 <_dtoa_r+0xbc>
   339c8:	04600034 	movhi	r17,32768
   339cc:	8c7fffc4 	addi	r17,r17,-1
   339d0:	9462703a 	and	r17,r18,r17
   339d4:	00800044 	movi	r2,1
   339d8:	98800015 	stw	r2,0(r19)
   339dc:	8825883a 	mov	r18,r17
   339e0:	003fcb06 	br	33910 <_dtoa_r+0x74>
   339e4:	d9400317 	ldw	r5,12(sp)
   339e8:	9028d53a 	srli	r20,r18,20
   339ec:	d8800204 	addi	r2,sp,8
   339f0:	d8800015 	stw	r2,0(sp)
   339f4:	8009883a 	mov	r4,r16
   339f8:	880d883a 	mov	r6,r17
   339fc:	d9c00104 	addi	r7,sp,4
   33a00:	003674c0 	call	3674c <__d2b>
   33a04:	a501ffcc 	andi	r20,r20,2047
   33a08:	1039883a 	mov	fp,r2
   33a0c:	a001591e 	bne	r20,zero,33f74 <_dtoa_r+0x6d8>
   33a10:	dd400217 	ldw	r21,8(sp)
   33a14:	dd000117 	ldw	r20,4(sp)
   33a18:	00befbc4 	movi	r2,-1041
   33a1c:	ad29883a 	add	r20,r21,r20
   33a20:	a082d216 	blt	r20,r2,3456c <_dtoa_r+0xcd0>
   33a24:	d8c00317 	ldw	r3,12(sp)
   33a28:	013f0384 	movi	r4,-1010
   33a2c:	2509c83a 	sub	r4,r4,r20
   33a30:	a0810484 	addi	r2,r20,1042
   33a34:	9124983a 	sll	r18,r18,r4
   33a38:	1884d83a 	srl	r2,r3,r2
   33a3c:	9088b03a 	or	r4,r18,r2
   33a40:	002bf080 	call	2bf08 <__floatunsidf>
   33a44:	1009883a 	mov	r4,r2
   33a48:	017f8434 	movhi	r5,65040
   33a4c:	00800044 	movi	r2,1
   33a50:	194b883a 	add	r5,r3,r5
   33a54:	a53fffc4 	addi	r20,r20,-1
   33a58:	d8800f15 	stw	r2,60(sp)
   33a5c:	000d883a 	mov	r6,zero
   33a60:	01cffe34 	movhi	r7,16376
   33a64:	003b6c00 	call	3b6c0 <__subdf3>
   33a68:	1009883a 	mov	r4,r2
   33a6c:	180b883a 	mov	r5,r3
   33a70:	0198dbf4 	movhi	r6,25455
   33a74:	3190d844 	addi	r6,r6,17249
   33a78:	01cff4f4 	movhi	r7,16339
   33a7c:	39e1e9c4 	addi	r7,r7,-30809
   33a80:	002ba100 	call	2ba10 <__muldf3>
   33a84:	180b883a 	mov	r5,r3
   33a88:	01a2d874 	movhi	r6,35681
   33a8c:	31b22cc4 	addi	r6,r6,-14157
   33a90:	01cff1f4 	movhi	r7,16327
   33a94:	39e28a04 	addi	r7,r7,-30168
   33a98:	1009883a 	mov	r4,r2
   33a9c:	003b66c0 	call	3b66c <__adddf3>
   33aa0:	a009883a 	mov	r4,r20
   33aa4:	1027883a 	mov	r19,r2
   33aa8:	1825883a 	mov	r18,r3
   33aac:	003b9580 	call	3b958 <__floatsidf>
   33ab0:	1009883a 	mov	r4,r2
   33ab4:	180b883a 	mov	r5,r3
   33ab8:	019427f4 	movhi	r6,20639
   33abc:	319e7ec4 	addi	r6,r6,31227
   33ac0:	01cff4f4 	movhi	r7,16339
   33ac4:	39d104c4 	addi	r7,r7,17427
   33ac8:	002ba100 	call	2ba10 <__muldf3>
   33acc:	9809883a 	mov	r4,r19
   33ad0:	900b883a 	mov	r5,r18
   33ad4:	100d883a 	mov	r6,r2
   33ad8:	180f883a 	mov	r7,r3
   33adc:	003b66c0 	call	3b66c <__adddf3>
   33ae0:	1009883a 	mov	r4,r2
   33ae4:	180b883a 	mov	r5,r3
   33ae8:	1027883a 	mov	r19,r2
   33aec:	1825883a 	mov	r18,r3
   33af0:	003ba2c0 	call	3ba2c <__fixdfsi>
   33af4:	9809883a 	mov	r4,r19
   33af8:	900b883a 	mov	r5,r18
   33afc:	000d883a 	mov	r6,zero
   33b00:	000f883a 	mov	r7,zero
   33b04:	d8800615 	stw	r2,24(sp)
   33b08:	003b8a00 	call	3b8a0 <__ltdf2>
   33b0c:	10027e16 	blt	r2,zero,34508 <_dtoa_r+0xc6c>
   33b10:	d8c00617 	ldw	r3,24(sp)
   33b14:	00800584 	movi	r2,22
   33b18:	10c26c36 	bltu	r2,r3,344cc <_dtoa_r+0xc30>
   33b1c:	180490fa 	slli	r2,r3,3
   33b20:	00c00134 	movhi	r3,4
   33b24:	18c4ba04 	addi	r3,r3,4840
   33b28:	d9800317 	ldw	r6,12(sp)
   33b2c:	1885883a 	add	r2,r3,r2
   33b30:	11000017 	ldw	r4,0(r2)
   33b34:	11400117 	ldw	r5,4(r2)
   33b38:	880f883a 	mov	r7,r17
   33b3c:	003b7d80 	call	3b7d8 <__gtdf2>
   33b40:	00828f0e 	bge	zero,r2,34580 <_dtoa_r+0xce4>
   33b44:	d8800617 	ldw	r2,24(sp)
   33b48:	d8000d15 	stw	zero,52(sp)
   33b4c:	10bfffc4 	addi	r2,r2,-1
   33b50:	d8800615 	stw	r2,24(sp)
   33b54:	ad29c83a 	sub	r20,r21,r20
   33b58:	a53fffc4 	addi	r20,r20,-1
   33b5c:	a0026616 	blt	r20,zero,344f8 <_dtoa_r+0xc5c>
   33b60:	dd000715 	stw	r20,28(sp)
   33b64:	d8000815 	stw	zero,32(sp)
   33b68:	d8800617 	ldw	r2,24(sp)
   33b6c:	10025a16 	blt	r2,zero,344d8 <_dtoa_r+0xc3c>
   33b70:	d8c00717 	ldw	r3,28(sp)
   33b74:	d8800b15 	stw	r2,44(sp)
   33b78:	d8000a15 	stw	zero,40(sp)
   33b7c:	1887883a 	add	r3,r3,r2
   33b80:	d8c00715 	stw	r3,28(sp)
   33b84:	d9c00417 	ldw	r7,16(sp)
   33b88:	00800244 	movi	r2,9
   33b8c:	11c10536 	bltu	r2,r7,33fa4 <_dtoa_r+0x708>
   33b90:	00800144 	movi	r2,5
   33b94:	11c4c60e 	bge	r2,r7,34eb0 <_dtoa_r+0x1614>
   33b98:	39ffff04 	addi	r7,r7,-4
   33b9c:	d9c00415 	stw	r7,16(sp)
   33ba0:	0027883a 	mov	r19,zero
   33ba4:	d9c00417 	ldw	r7,16(sp)
   33ba8:	008000c4 	movi	r2,3
   33bac:	3883a226 	beq	r7,r2,34a38 <_dtoa_r+0x119c>
   33bb0:	11c2bc16 	blt	r2,r7,346a4 <_dtoa_r+0xe08>
   33bb4:	00800084 	movi	r2,2
   33bb8:	3880fb1e 	bne	r7,r2,33fa8 <_dtoa_r+0x70c>
   33bbc:	d8000c15 	stw	zero,48(sp)
   33bc0:	d9002117 	ldw	r4,132(sp)
   33bc4:	0103ae0e 	bge	zero,r4,34a80 <_dtoa_r+0x11e4>
   33bc8:	2025883a 	mov	r18,r4
   33bcc:	d9000e15 	stw	r4,56(sp)
   33bd0:	d9000915 	stw	r4,36(sp)
   33bd4:	80001115 	stw	zero,68(r16)
   33bd8:	008005c4 	movi	r2,23
   33bdc:	1484b22e 	bgeu	r2,r18,34ea8 <_dtoa_r+0x160c>
   33be0:	00c00044 	movi	r3,1
   33be4:	00800104 	movi	r2,4
   33be8:	1085883a 	add	r2,r2,r2
   33bec:	11000504 	addi	r4,r2,20
   33bf0:	180b883a 	mov	r5,r3
   33bf4:	18c00044 	addi	r3,r3,1
   33bf8:	913ffb2e 	bgeu	r18,r4,33be8 <_dtoa_r+0x34c>
   33bfc:	81401115 	stw	r5,68(r16)
   33c00:	8009883a 	mov	r4,r16
   33c04:	0035a580 	call	35a58 <_Balloc>
   33c08:	102f883a 	mov	r23,r2
   33c0c:	80801015 	stw	r2,64(r16)
   33c10:	00800384 	movi	r2,14
   33c14:	1480f036 	bltu	r2,r18,33fd8 <_dtoa_r+0x73c>
   33c18:	9800ef26 	beq	r19,zero,33fd8 <_dtoa_r+0x73c>
   33c1c:	d8800617 	ldw	r2,24(sp)
   33c20:	00839c0e 	bge	zero,r2,34a94 <_dtoa_r+0x11f8>
   33c24:	d8c00617 	ldw	r3,24(sp)
   33c28:	108003cc 	andi	r2,r2,15
   33c2c:	100490fa 	slli	r2,r2,3
   33c30:	182bd13a 	srai	r21,r3,4
   33c34:	00c00134 	movhi	r3,4
   33c38:	18c4ba04 	addi	r3,r3,4840
   33c3c:	1885883a 	add	r2,r3,r2
   33c40:	a8c0040c 	andi	r3,r21,16
   33c44:	12800017 	ldw	r10,0(r2)
   33c48:	15800117 	ldw	r22,4(r2)
   33c4c:	18038726 	beq	r3,zero,34a6c <_dtoa_r+0x11d0>
   33c50:	00800134 	movhi	r2,4
   33c54:	1084b004 	addi	r2,r2,4800
   33c58:	11800817 	ldw	r6,32(r2)
   33c5c:	11c00917 	ldw	r7,36(r2)
   33c60:	d9000317 	ldw	r4,12(sp)
   33c64:	880b883a 	mov	r5,r17
   33c68:	da801515 	stw	r10,84(sp)
   33c6c:	002bcf40 	call	2bcf4 <__divdf3>
   33c70:	da801517 	ldw	r10,84(sp)
   33c74:	d8801015 	stw	r2,64(sp)
   33c78:	1829883a 	mov	r20,r3
   33c7c:	ad4003cc 	andi	r21,r21,15
   33c80:	048000c4 	movi	r18,3
   33c84:	a8001126 	beq	r21,zero,33ccc <_dtoa_r+0x430>
   33c88:	04c00134 	movhi	r19,4
   33c8c:	9cc4b004 	addi	r19,r19,4800
   33c90:	5005883a 	mov	r2,r10
   33c94:	b007883a 	mov	r3,r22
   33c98:	a980004c 	andi	r6,r21,1
   33c9c:	1009883a 	mov	r4,r2
   33ca0:	a82bd07a 	srai	r21,r21,1
   33ca4:	180b883a 	mov	r5,r3
   33ca8:	30000426 	beq	r6,zero,33cbc <_dtoa_r+0x420>
   33cac:	99800017 	ldw	r6,0(r19)
   33cb0:	99c00117 	ldw	r7,4(r19)
   33cb4:	94800044 	addi	r18,r18,1
   33cb8:	002ba100 	call	2ba10 <__muldf3>
   33cbc:	9cc00204 	addi	r19,r19,8
   33cc0:	a83ff51e 	bne	r21,zero,33c98 <_dtoa_r+0x3fc>
   33cc4:	1015883a 	mov	r10,r2
   33cc8:	182d883a 	mov	r22,r3
   33ccc:	d9001017 	ldw	r4,64(sp)
   33cd0:	a00b883a 	mov	r5,r20
   33cd4:	500d883a 	mov	r6,r10
   33cd8:	b00f883a 	mov	r7,r22
   33cdc:	002bcf40 	call	2bcf4 <__divdf3>
   33ce0:	1027883a 	mov	r19,r2
   33ce4:	1829883a 	mov	r20,r3
   33ce8:	d8c00d17 	ldw	r3,52(sp)
   33cec:	18000626 	beq	r3,zero,33d08 <_dtoa_r+0x46c>
   33cf0:	9809883a 	mov	r4,r19
   33cf4:	a00b883a 	mov	r5,r20
   33cf8:	000d883a 	mov	r6,zero
   33cfc:	01cffc34 	movhi	r7,16368
   33d00:	003b8a00 	call	3b8a0 <__ltdf2>
   33d04:	10040e16 	blt	r2,zero,34d40 <_dtoa_r+0x14a4>
   33d08:	9009883a 	mov	r4,r18
   33d0c:	003b9580 	call	3b958 <__floatsidf>
   33d10:	1009883a 	mov	r4,r2
   33d14:	180b883a 	mov	r5,r3
   33d18:	980d883a 	mov	r6,r19
   33d1c:	a00f883a 	mov	r7,r20
   33d20:	002ba100 	call	2ba10 <__muldf3>
   33d24:	1009883a 	mov	r4,r2
   33d28:	180b883a 	mov	r5,r3
   33d2c:	000d883a 	mov	r6,zero
   33d30:	01d00734 	movhi	r7,16412
   33d34:	003b66c0 	call	3b66c <__adddf3>
   33d38:	057f3034 	movhi	r21,64704
   33d3c:	1d6b883a 	add	r21,r3,r21
   33d40:	d8c00917 	ldw	r3,36(sp)
   33d44:	1025883a 	mov	r18,r2
   33d48:	18031f26 	beq	r3,zero,349c8 <_dtoa_r+0x112c>
   33d4c:	d8800617 	ldw	r2,24(sp)
   33d50:	dac00917 	ldw	r11,36(sp)
   33d54:	d8801315 	stw	r2,76(sp)
   33d58:	d8c00c17 	ldw	r3,48(sp)
   33d5c:	18039026 	beq	r3,zero,34ba0 <_dtoa_r+0x1304>
   33d60:	58bfffc4 	addi	r2,r11,-1
   33d64:	100490fa 	slli	r2,r2,3
   33d68:	00c00134 	movhi	r3,4
   33d6c:	18c4ba04 	addi	r3,r3,4840
   33d70:	0009883a 	mov	r4,zero
   33d74:	1885883a 	add	r2,r3,r2
   33d78:	11800017 	ldw	r6,0(r2)
   33d7c:	11c00117 	ldw	r7,4(r2)
   33d80:	014ff834 	movhi	r5,16352
   33d84:	dac01615 	stw	r11,88(sp)
   33d88:	002bcf40 	call	2bcf4 <__divdf3>
   33d8c:	900d883a 	mov	r6,r18
   33d90:	a80f883a 	mov	r7,r21
   33d94:	1009883a 	mov	r4,r2
   33d98:	180b883a 	mov	r5,r3
   33d9c:	003b6c00 	call	3b6c0 <__subdf3>
   33da0:	a00b883a 	mov	r5,r20
   33da4:	9809883a 	mov	r4,r19
   33da8:	182b883a 	mov	r21,r3
   33dac:	d8801015 	stw	r2,64(sp)
   33db0:	003ba2c0 	call	3ba2c <__fixdfsi>
   33db4:	1009883a 	mov	r4,r2
   33db8:	d8801515 	stw	r2,84(sp)
   33dbc:	003b9580 	call	3b958 <__floatsidf>
   33dc0:	9809883a 	mov	r4,r19
   33dc4:	a00b883a 	mov	r5,r20
   33dc8:	100d883a 	mov	r6,r2
   33dcc:	180f883a 	mov	r7,r3
   33dd0:	003b6c00 	call	3b6c0 <__subdf3>
   33dd4:	da401517 	ldw	r9,84(sp)
   33dd8:	d9001017 	ldw	r4,64(sp)
   33ddc:	a80b883a 	mov	r5,r21
   33de0:	4d000c04 	addi	r20,r9,48
   33de4:	bd000005 	stb	r20,0(r23)
   33de8:	100d883a 	mov	r6,r2
   33dec:	180f883a 	mov	r7,r3
   33df0:	bd800044 	addi	r22,r23,1
   33df4:	1025883a 	mov	r18,r2
   33df8:	1827883a 	mov	r19,r3
   33dfc:	003b7d80 	call	3b7d8 <__gtdf2>
   33e00:	00842216 	blt	zero,r2,34e8c <_dtoa_r+0x15f0>
   33e04:	0009883a 	mov	r4,zero
   33e08:	014ffc34 	movhi	r5,16368
   33e0c:	900d883a 	mov	r6,r18
   33e10:	980f883a 	mov	r7,r19
   33e14:	003b6c00 	call	3b6c0 <__subdf3>
   33e18:	d9001017 	ldw	r4,64(sp)
   33e1c:	a80b883a 	mov	r5,r21
   33e20:	100d883a 	mov	r6,r2
   33e24:	180f883a 	mov	r7,r3
   33e28:	003b7d80 	call	3b7d8 <__gtdf2>
   33e2c:	dac01617 	ldw	r11,88(sp)
   33e30:	00841316 	blt	zero,r2,34e80 <_dtoa_r+0x15e4>
   33e34:	00800044 	movi	r2,1
   33e38:	12c0670e 	bge	r2,r11,33fd8 <_dtoa_r+0x73c>
   33e3c:	bad7883a 	add	r11,r23,r11
   33e40:	df001115 	stw	fp,68(sp)
   33e44:	dc401215 	stw	r17,72(sp)
   33e48:	5839883a 	mov	fp,r11
   33e4c:	dc401017 	ldw	r17,64(sp)
   33e50:	00000806 	br	33e74 <_dtoa_r+0x5d8>
   33e54:	003b6c00 	call	3b6c0 <__subdf3>
   33e58:	1009883a 	mov	r4,r2
   33e5c:	180b883a 	mov	r5,r3
   33e60:	880d883a 	mov	r6,r17
   33e64:	a80f883a 	mov	r7,r21
   33e68:	003b8a00 	call	3b8a0 <__ltdf2>
   33e6c:	1003ee16 	blt	r2,zero,34e28 <_dtoa_r+0x158c>
   33e70:	b703f126 	beq	r22,fp,34e38 <_dtoa_r+0x159c>
   33e74:	8809883a 	mov	r4,r17
   33e78:	a80b883a 	mov	r5,r21
   33e7c:	000d883a 	mov	r6,zero
   33e80:	01d00934 	movhi	r7,16420
   33e84:	002ba100 	call	2ba10 <__muldf3>
   33e88:	000d883a 	mov	r6,zero
   33e8c:	01d00934 	movhi	r7,16420
   33e90:	9009883a 	mov	r4,r18
   33e94:	980b883a 	mov	r5,r19
   33e98:	1023883a 	mov	r17,r2
   33e9c:	182b883a 	mov	r21,r3
   33ea0:	002ba100 	call	2ba10 <__muldf3>
   33ea4:	180b883a 	mov	r5,r3
   33ea8:	1009883a 	mov	r4,r2
   33eac:	1825883a 	mov	r18,r3
   33eb0:	1027883a 	mov	r19,r2
   33eb4:	003ba2c0 	call	3ba2c <__fixdfsi>
   33eb8:	1009883a 	mov	r4,r2
   33ebc:	1029883a 	mov	r20,r2
   33ec0:	003b9580 	call	3b958 <__floatsidf>
   33ec4:	9809883a 	mov	r4,r19
   33ec8:	900b883a 	mov	r5,r18
   33ecc:	100d883a 	mov	r6,r2
   33ed0:	180f883a 	mov	r7,r3
   33ed4:	003b6c00 	call	3b6c0 <__subdf3>
   33ed8:	a5000c04 	addi	r20,r20,48
   33edc:	b5000005 	stb	r20,0(r22)
   33ee0:	1009883a 	mov	r4,r2
   33ee4:	180b883a 	mov	r5,r3
   33ee8:	880d883a 	mov	r6,r17
   33eec:	a80f883a 	mov	r7,r21
   33ef0:	1025883a 	mov	r18,r2
   33ef4:	1827883a 	mov	r19,r3
   33ef8:	003b8a00 	call	3b8a0 <__ltdf2>
   33efc:	b5800044 	addi	r22,r22,1
   33f00:	0009883a 	mov	r4,zero
   33f04:	014ffc34 	movhi	r5,16368
   33f08:	900d883a 	mov	r6,r18
   33f0c:	980f883a 	mov	r7,r19
   33f10:	103fd00e 	bge	r2,zero,33e54 <_dtoa_r+0x5b8>
   33f14:	d9001317 	ldw	r4,76(sp)
   33f18:	df001117 	ldw	fp,68(sp)
   33f1c:	d9000615 	stw	r4,24(sp)
   33f20:	8009883a 	mov	r4,r16
   33f24:	e00b883a 	mov	r5,fp
   33f28:	0035b000 	call	35b00 <_Bfree>
   33f2c:	d9c00617 	ldw	r7,24(sp)
   33f30:	d8c02217 	ldw	r3,136(sp)
   33f34:	d9002417 	ldw	r4,144(sp)
   33f38:	b0000005 	stb	zero,0(r22)
   33f3c:	38800044 	addi	r2,r7,1
   33f40:	18800015 	stw	r2,0(r3)
   33f44:	203e8426 	beq	r4,zero,33958 <_dtoa_r+0xbc>
   33f48:	25800015 	stw	r22,0(r4)
   33f4c:	003e8206 	br	33958 <_dtoa_r+0xbc>
   33f50:	00800434 	movhi	r2,16
   33f54:	10bfffc4 	addi	r2,r2,-1
   33f58:	90a4703a 	and	r18,r18,r2
   33f5c:	903e901e 	bne	r18,zero,339a0 <_dtoa_r+0x104>
   33f60:	05c00134 	movhi	r23,4
   33f64:	bdc49204 	addi	r23,r23,4680
   33f68:	003e8f06 	br	339a8 <_dtoa_r+0x10c>
   33f6c:	b8800204 	addi	r2,r23,8
   33f70:	003e9206 	br	339bc <_dtoa_r+0x120>
   33f74:	01400434 	movhi	r5,16
   33f78:	297fffc4 	addi	r5,r5,-1
   33f7c:	894a703a 	and	r5,r17,r5
   33f80:	d9000317 	ldw	r4,12(sp)
   33f84:	294ffc34 	orhi	r5,r5,16368
   33f88:	a53f0044 	addi	r20,r20,-1023
   33f8c:	dd400217 	ldw	r21,8(sp)
   33f90:	d8000f15 	stw	zero,60(sp)
   33f94:	003eb106 	br	33a5c <_dtoa_r+0x1c0>
   33f98:	05c00134 	movhi	r23,4
   33f9c:	bdc47f04 	addi	r23,r23,4604
   33fa0:	003e6d06 	br	33958 <_dtoa_r+0xbc>
   33fa4:	d8000415 	stw	zero,16(sp)
   33fa8:	80001115 	stw	zero,68(r16)
   33fac:	8009883a 	mov	r4,r16
   33fb0:	000b883a 	mov	r5,zero
   33fb4:	0035a580 	call	35a58 <_Balloc>
   33fb8:	01ffffc4 	movi	r7,-1
   33fbc:	102f883a 	mov	r23,r2
   33fc0:	80801015 	stw	r2,64(r16)
   33fc4:	00800044 	movi	r2,1
   33fc8:	d9c00915 	stw	r7,36(sp)
   33fcc:	d8002115 	stw	zero,132(sp)
   33fd0:	d9c00e15 	stw	r7,56(sp)
   33fd4:	d8800c15 	stw	r2,48(sp)
   33fd8:	d8800117 	ldw	r2,4(sp)
   33fdc:	10008b16 	blt	r2,zero,3420c <_dtoa_r+0x970>
   33fe0:	d9000617 	ldw	r4,24(sp)
   33fe4:	00c00384 	movi	r3,14
   33fe8:	19008816 	blt	r3,r4,3420c <_dtoa_r+0x970>
   33fec:	200490fa 	slli	r2,r4,3
   33ff0:	d9c02117 	ldw	r7,132(sp)
   33ff4:	00c00134 	movhi	r3,4
   33ff8:	18c4ba04 	addi	r3,r3,4840
   33ffc:	1885883a 	add	r2,r3,r2
   34000:	14800017 	ldw	r18,0(r2)
   34004:	14c00117 	ldw	r19,4(r2)
   34008:	3801c916 	blt	r7,zero,34730 <_dtoa_r+0xe94>
   3400c:	d9000317 	ldw	r4,12(sp)
   34010:	900d883a 	mov	r6,r18
   34014:	980f883a 	mov	r7,r19
   34018:	880b883a 	mov	r5,r17
   3401c:	002bcf40 	call	2bcf4 <__divdf3>
   34020:	180b883a 	mov	r5,r3
   34024:	1009883a 	mov	r4,r2
   34028:	003ba2c0 	call	3ba2c <__fixdfsi>
   3402c:	1009883a 	mov	r4,r2
   34030:	102b883a 	mov	r21,r2
   34034:	003b9580 	call	3b958 <__floatsidf>
   34038:	1009883a 	mov	r4,r2
   3403c:	180b883a 	mov	r5,r3
   34040:	900d883a 	mov	r6,r18
   34044:	980f883a 	mov	r7,r19
   34048:	002ba100 	call	2ba10 <__muldf3>
   3404c:	d9000317 	ldw	r4,12(sp)
   34050:	880b883a 	mov	r5,r17
   34054:	100d883a 	mov	r6,r2
   34058:	180f883a 	mov	r7,r3
   3405c:	003b6c00 	call	3b6c0 <__subdf3>
   34060:	d9c00917 	ldw	r7,36(sp)
   34064:	1009883a 	mov	r4,r2
   34068:	a8800c04 	addi	r2,r21,48
   3406c:	b8800005 	stb	r2,0(r23)
   34070:	01800044 	movi	r6,1
   34074:	180b883a 	mov	r5,r3
   34078:	2005883a 	mov	r2,r4
   3407c:	bd800044 	addi	r22,r23,1
   34080:	39803726 	beq	r7,r6,34160 <_dtoa_r+0x8c4>
   34084:	000d883a 	mov	r6,zero
   34088:	01d00934 	movhi	r7,16420
   3408c:	002ba100 	call	2ba10 <__muldf3>
   34090:	1009883a 	mov	r4,r2
   34094:	180b883a 	mov	r5,r3
   34098:	000d883a 	mov	r6,zero
   3409c:	000f883a 	mov	r7,zero
   340a0:	1029883a 	mov	r20,r2
   340a4:	1823883a 	mov	r17,r3
   340a8:	003b7200 	call	3b720 <__eqdf2>
   340ac:	103f9c26 	beq	r2,zero,33f20 <_dtoa_r+0x684>
   340b0:	dd400917 	ldw	r21,36(sp)
   340b4:	dc000415 	stw	r16,16(sp)
   340b8:	00000906 	br	340e0 <_dtoa_r+0x844>
   340bc:	002ba100 	call	2ba10 <__muldf3>
   340c0:	1009883a 	mov	r4,r2
   340c4:	180b883a 	mov	r5,r3
   340c8:	000d883a 	mov	r6,zero
   340cc:	000f883a 	mov	r7,zero
   340d0:	1029883a 	mov	r20,r2
   340d4:	1823883a 	mov	r17,r3
   340d8:	003b7200 	call	3b720 <__eqdf2>
   340dc:	10022926 	beq	r2,zero,34984 <_dtoa_r+0x10e8>
   340e0:	900d883a 	mov	r6,r18
   340e4:	980f883a 	mov	r7,r19
   340e8:	a009883a 	mov	r4,r20
   340ec:	880b883a 	mov	r5,r17
   340f0:	002bcf40 	call	2bcf4 <__divdf3>
   340f4:	180b883a 	mov	r5,r3
   340f8:	1009883a 	mov	r4,r2
   340fc:	003ba2c0 	call	3ba2c <__fixdfsi>
   34100:	1009883a 	mov	r4,r2
   34104:	1021883a 	mov	r16,r2
   34108:	003b9580 	call	3b958 <__floatsidf>
   3410c:	1009883a 	mov	r4,r2
   34110:	180b883a 	mov	r5,r3
   34114:	900d883a 	mov	r6,r18
   34118:	980f883a 	mov	r7,r19
   3411c:	002ba100 	call	2ba10 <__muldf3>
   34120:	a009883a 	mov	r4,r20
   34124:	880b883a 	mov	r5,r17
   34128:	100d883a 	mov	r6,r2
   3412c:	180f883a 	mov	r7,r3
   34130:	003b6c00 	call	3b6c0 <__subdf3>
   34134:	82400c04 	addi	r9,r16,48
   34138:	b2400005 	stb	r9,0(r22)
   3413c:	b5800044 	addi	r22,r22,1
   34140:	b5d3c83a 	sub	r9,r22,r23
   34144:	000d883a 	mov	r6,zero
   34148:	01d00934 	movhi	r7,16420
   3414c:	1009883a 	mov	r4,r2
   34150:	180b883a 	mov	r5,r3
   34154:	aa7fd91e 	bne	r21,r9,340bc <_dtoa_r+0x820>
   34158:	802b883a 	mov	r21,r16
   3415c:	dc000417 	ldw	r16,16(sp)
   34160:	1009883a 	mov	r4,r2
   34164:	180b883a 	mov	r5,r3
   34168:	100d883a 	mov	r6,r2
   3416c:	180f883a 	mov	r7,r3
   34170:	003b66c0 	call	3b66c <__adddf3>
   34174:	9009883a 	mov	r4,r18
   34178:	980b883a 	mov	r5,r19
   3417c:	100d883a 	mov	r6,r2
   34180:	180f883a 	mov	r7,r3
   34184:	1023883a 	mov	r17,r2
   34188:	1829883a 	mov	r20,r3
   3418c:	003b8a00 	call	3b8a0 <__ltdf2>
   34190:	10000816 	blt	r2,zero,341b4 <_dtoa_r+0x918>
   34194:	9009883a 	mov	r4,r18
   34198:	980b883a 	mov	r5,r19
   3419c:	880d883a 	mov	r6,r17
   341a0:	a00f883a 	mov	r7,r20
   341a4:	003b7200 	call	3b720 <__eqdf2>
   341a8:	103f5d1e 	bne	r2,zero,33f20 <_dtoa_r+0x684>
   341ac:	ad40004c 	andi	r21,r21,1
   341b0:	a83f5b26 	beq	r21,zero,33f20 <_dtoa_r+0x684>
   341b4:	b53fffc3 	ldbu	r20,-1(r22)
   341b8:	b0ffff84 	addi	r3,r22,-2
   341bc:	01400e44 	movi	r5,57
   341c0:	00000306 	br	341d0 <_dtoa_r+0x934>
   341c4:	1d000003 	ldbu	r20,0(r3)
   341c8:	102d883a 	mov	r22,r2
   341cc:	18ffffc4 	addi	r3,r3,-1
   341d0:	a1003fcc 	andi	r4,r20,255
   341d4:	2100201c 	xori	r4,r4,128
   341d8:	213fe004 	addi	r4,r4,-128
   341dc:	b0bfffc4 	addi	r2,r22,-1
   341e0:	2142ca1e 	bne	r4,r5,34d0c <_dtoa_r+0x1470>
   341e4:	b8bff71e 	bne	r23,r2,341c4 <_dtoa_r+0x928>
   341e8:	d8800617 	ldw	r2,24(sp)
   341ec:	05000c44 	movi	r20,49
   341f0:	10800044 	addi	r2,r2,1
   341f4:	d8800615 	stw	r2,24(sp)
   341f8:	00800c04 	movi	r2,48
   341fc:	b8800005 	stb	r2,0(r23)
   34200:	b805883a 	mov	r2,r23
   34204:	15000005 	stb	r20,0(r2)
   34208:	003f4506 	br	33f20 <_dtoa_r+0x684>
   3420c:	d9c00c17 	ldw	r7,48(sp)
   34210:	3800c926 	beq	r7,zero,34538 <_dtoa_r+0xc9c>
   34214:	d9c00417 	ldw	r7,16(sp)
   34218:	00c00044 	movi	r3,1
   3421c:	19c16c0e 	bge	r3,r7,347d0 <_dtoa_r+0xf34>
   34220:	d9000917 	ldw	r4,36(sp)
   34224:	d9c00a17 	ldw	r7,40(sp)
   34228:	24ffffc4 	addi	r19,r4,-1
   3422c:	3cc20716 	blt	r7,r19,34a4c <_dtoa_r+0x11b0>
   34230:	3ce7c83a 	sub	r19,r7,r19
   34234:	d9c00917 	ldw	r7,36(sp)
   34238:	3802ae16 	blt	r7,zero,34cf4 <_dtoa_r+0x1458>
   3423c:	dc800817 	ldw	r18,32(sp)
   34240:	d8800917 	ldw	r2,36(sp)
   34244:	d8c00817 	ldw	r3,32(sp)
   34248:	d9c00717 	ldw	r7,28(sp)
   3424c:	8009883a 	mov	r4,r16
   34250:	1887883a 	add	r3,r3,r2
   34254:	388f883a 	add	r7,r7,r2
   34258:	01400044 	movi	r5,1
   3425c:	d8c00815 	stw	r3,32(sp)
   34260:	d9c00715 	stw	r7,28(sp)
   34264:	0035e880 	call	35e88 <__i2b>
   34268:	102b883a 	mov	r21,r2
   3426c:	90000a26 	beq	r18,zero,34298 <_dtoa_r+0x9fc>
   34270:	d8800717 	ldw	r2,28(sp)
   34274:	0080080e 	bge	zero,r2,34298 <_dtoa_r+0x9fc>
   34278:	90812b16 	blt	r18,r2,34728 <_dtoa_r+0xe8c>
   3427c:	d8c00817 	ldw	r3,32(sp)
   34280:	d9000717 	ldw	r4,28(sp)
   34284:	90a5c83a 	sub	r18,r18,r2
   34288:	1887c83a 	sub	r3,r3,r2
   3428c:	2089c83a 	sub	r4,r4,r2
   34290:	d8c00815 	stw	r3,32(sp)
   34294:	d9000715 	stw	r4,28(sp)
   34298:	d9c00a17 	ldw	r7,40(sp)
   3429c:	01c0140e 	bge	zero,r7,342f0 <_dtoa_r+0xa54>
   342a0:	d8800c17 	ldw	r2,48(sp)
   342a4:	1001de26 	beq	r2,zero,34a20 <_dtoa_r+0x1184>
   342a8:	04c00e0e 	bge	zero,r19,342e4 <_dtoa_r+0xa48>
   342ac:	a80b883a 	mov	r5,r21
   342b0:	8009883a 	mov	r4,r16
   342b4:	980d883a 	mov	r6,r19
   342b8:	003611c0 	call	3611c <__pow5mult>
   342bc:	e00d883a 	mov	r6,fp
   342c0:	8009883a 	mov	r4,r16
   342c4:	100b883a 	mov	r5,r2
   342c8:	102b883a 	mov	r21,r2
   342cc:	0035ec40 	call	35ec4 <__multiply>
   342d0:	1029883a 	mov	r20,r2
   342d4:	e00b883a 	mov	r5,fp
   342d8:	8009883a 	mov	r4,r16
   342dc:	0035b000 	call	35b00 <_Bfree>
   342e0:	a039883a 	mov	fp,r20
   342e4:	d8c00a17 	ldw	r3,40(sp)
   342e8:	1ccdc83a 	sub	r6,r3,r19
   342ec:	3001291e 	bne	r6,zero,34794 <_dtoa_r+0xef8>
   342f0:	8009883a 	mov	r4,r16
   342f4:	01400044 	movi	r5,1
   342f8:	0035e880 	call	35e88 <__i2b>
   342fc:	d9000b17 	ldw	r4,44(sp)
   34300:	1029883a 	mov	r20,r2
   34304:	0100050e 	bge	zero,r4,3431c <_dtoa_r+0xa80>
   34308:	d9800b17 	ldw	r6,44(sp)
   3430c:	8009883a 	mov	r4,r16
   34310:	100b883a 	mov	r5,r2
   34314:	003611c0 	call	3611c <__pow5mult>
   34318:	1029883a 	mov	r20,r2
   3431c:	d9c00417 	ldw	r7,16(sp)
   34320:	00800044 	movi	r2,1
   34324:	11c0f00e 	bge	r2,r7,346e8 <_dtoa_r+0xe4c>
   34328:	0023883a 	mov	r17,zero
   3432c:	d8800b17 	ldw	r2,44(sp)
   34330:	1001741e 	bne	r2,zero,34904 <_dtoa_r+0x1068>
   34334:	00800044 	movi	r2,1
   34338:	d8c00717 	ldw	r3,28(sp)
   3433c:	10c5883a 	add	r2,r2,r3
   34340:	108007cc 	andi	r2,r2,31
   34344:	10008026 	beq	r2,zero,34548 <_dtoa_r+0xcac>
   34348:	01000804 	movi	r4,32
   3434c:	2089c83a 	sub	r4,r4,r2
   34350:	00c00104 	movi	r3,4
   34354:	1902d00e 	bge	r3,r4,34e98 <_dtoa_r+0x15fc>
   34358:	d9000817 	ldw	r4,32(sp)
   3435c:	d9c00717 	ldw	r7,28(sp)
   34360:	00c00704 	movi	r3,28
   34364:	1885c83a 	sub	r2,r3,r2
   34368:	2089883a 	add	r4,r4,r2
   3436c:	388f883a 	add	r7,r7,r2
   34370:	d9000815 	stw	r4,32(sp)
   34374:	90a5883a 	add	r18,r18,r2
   34378:	d9c00715 	stw	r7,28(sp)
   3437c:	d9c00817 	ldw	r7,32(sp)
   34380:	01c0050e 	bge	zero,r7,34398 <_dtoa_r+0xafc>
   34384:	e00b883a 	mov	r5,fp
   34388:	8009883a 	mov	r4,r16
   3438c:	380d883a 	mov	r6,r7
   34390:	00362480 	call	36248 <__lshift>
   34394:	1039883a 	mov	fp,r2
   34398:	d8800717 	ldw	r2,28(sp)
   3439c:	0080050e 	bge	zero,r2,343b4 <_dtoa_r+0xb18>
   343a0:	a00b883a 	mov	r5,r20
   343a4:	8009883a 	mov	r4,r16
   343a8:	100d883a 	mov	r6,r2
   343ac:	00362480 	call	36248 <__lshift>
   343b0:	1029883a 	mov	r20,r2
   343b4:	d8c00d17 	ldw	r3,52(sp)
   343b8:	1801401e 	bne	r3,zero,348bc <_dtoa_r+0x1020>
   343bc:	d8800917 	ldw	r2,36(sp)
   343c0:	00815a0e 	bge	zero,r2,3492c <_dtoa_r+0x1090>
   343c4:	d8c00c17 	ldw	r3,48(sp)
   343c8:	18006f1e 	bne	r3,zero,34588 <_dtoa_r+0xcec>
   343cc:	b823883a 	mov	r17,r23
   343d0:	dc800917 	ldw	r18,36(sp)
   343d4:	00000206 	br	343e0 <_dtoa_r+0xb44>
   343d8:	0035b280 	call	35b28 <__multadd>
   343dc:	1039883a 	mov	fp,r2
   343e0:	e009883a 	mov	r4,fp
   343e4:	a00b883a 	mov	r5,r20
   343e8:	00336600 	call	33660 <quorem>
   343ec:	10800c04 	addi	r2,r2,48
   343f0:	88800005 	stb	r2,0(r17)
   343f4:	8c400044 	addi	r17,r17,1
   343f8:	8dc7c83a 	sub	r3,r17,r23
   343fc:	8009883a 	mov	r4,r16
   34400:	e00b883a 	mov	r5,fp
   34404:	01800284 	movi	r6,10
   34408:	000f883a 	mov	r7,zero
   3440c:	1cbff216 	blt	r3,r18,343d8 <_dtoa_r+0xb3c>
   34410:	dd800917 	ldw	r22,36(sp)
   34414:	1007883a 	mov	r3,r2
   34418:	05823a0e 	bge	zero,r22,34d04 <_dtoa_r+0x1468>
   3441c:	bdad883a 	add	r22,r23,r22
   34420:	0023883a 	mov	r17,zero
   34424:	e00b883a 	mov	r5,fp
   34428:	01800044 	movi	r6,1
   3442c:	8009883a 	mov	r4,r16
   34430:	d8c01515 	stw	r3,84(sp)
   34434:	00362480 	call	36248 <__lshift>
   34438:	1009883a 	mov	r4,r2
   3443c:	a00b883a 	mov	r5,r20
   34440:	1039883a 	mov	fp,r2
   34444:	00363a40 	call	363a4 <__mcmp>
   34448:	d8c01517 	ldw	r3,84(sp)
   3444c:	0080d60e 	bge	zero,r2,347a8 <_dtoa_r+0xf0c>
   34450:	b13fffc3 	ldbu	r4,-1(r22)
   34454:	b0ffff84 	addi	r3,r22,-2
   34458:	01800e44 	movi	r6,57
   3445c:	00000306 	br	3446c <_dtoa_r+0xbd0>
   34460:	19000003 	ldbu	r4,0(r3)
   34464:	102d883a 	mov	r22,r2
   34468:	18ffffc4 	addi	r3,r3,-1
   3446c:	21403fcc 	andi	r5,r4,255
   34470:	2940201c 	xori	r5,r5,128
   34474:	297fe004 	addi	r5,r5,-128
   34478:	b0bfffc4 	addi	r2,r22,-1
   3447c:	2981a71e 	bne	r5,r6,34b1c <_dtoa_r+0x1280>
   34480:	b8bff71e 	bne	r23,r2,34460 <_dtoa_r+0xbc4>
   34484:	d8800617 	ldw	r2,24(sp)
   34488:	10800044 	addi	r2,r2,1
   3448c:	d8800615 	stw	r2,24(sp)
   34490:	00800c44 	movi	r2,49
   34494:	b8800005 	stb	r2,0(r23)
   34498:	8009883a 	mov	r4,r16
   3449c:	a00b883a 	mov	r5,r20
   344a0:	0035b000 	call	35b00 <_Bfree>
   344a4:	a83e9e26 	beq	r21,zero,33f20 <_dtoa_r+0x684>
   344a8:	88000426 	beq	r17,zero,344bc <_dtoa_r+0xc20>
   344ac:	8d400326 	beq	r17,r21,344bc <_dtoa_r+0xc20>
   344b0:	8009883a 	mov	r4,r16
   344b4:	880b883a 	mov	r5,r17
   344b8:	0035b000 	call	35b00 <_Bfree>
   344bc:	8009883a 	mov	r4,r16
   344c0:	a80b883a 	mov	r5,r21
   344c4:	0035b000 	call	35b00 <_Bfree>
   344c8:	003e9506 	br	33f20 <_dtoa_r+0x684>
   344cc:	00c00044 	movi	r3,1
   344d0:	d8c00d15 	stw	r3,52(sp)
   344d4:	003d9f06 	br	33b54 <_dtoa_r+0x2b8>
   344d8:	d9000817 	ldw	r4,32(sp)
   344dc:	d8800617 	ldw	r2,24(sp)
   344e0:	d8000b15 	stw	zero,44(sp)
   344e4:	2089c83a 	sub	r4,r4,r2
   344e8:	0087c83a 	sub	r3,zero,r2
   344ec:	d9000815 	stw	r4,32(sp)
   344f0:	d8c00a15 	stw	r3,40(sp)
   344f4:	003da306 	br	33b84 <_dtoa_r+0x2e8>
   344f8:	0529c83a 	sub	r20,zero,r20
   344fc:	dd000815 	stw	r20,32(sp)
   34500:	d8000715 	stw	zero,28(sp)
   34504:	003d9806 	br	33b68 <_dtoa_r+0x2cc>
   34508:	d9000617 	ldw	r4,24(sp)
   3450c:	003b9580 	call	3b958 <__floatsidf>
   34510:	1009883a 	mov	r4,r2
   34514:	180b883a 	mov	r5,r3
   34518:	980d883a 	mov	r6,r19
   3451c:	900f883a 	mov	r7,r18
   34520:	003b77c0 	call	3b77c <__nedf2>
   34524:	103d7a26 	beq	r2,zero,33b10 <_dtoa_r+0x274>
   34528:	d8800617 	ldw	r2,24(sp)
   3452c:	10bfffc4 	addi	r2,r2,-1
   34530:	d8800615 	stw	r2,24(sp)
   34534:	003d7606 	br	33b10 <_dtoa_r+0x274>
   34538:	dcc00a17 	ldw	r19,40(sp)
   3453c:	dc800817 	ldw	r18,32(sp)
   34540:	002b883a 	mov	r21,zero
   34544:	003f4906 	br	3426c <_dtoa_r+0x9d0>
   34548:	00800704 	movi	r2,28
   3454c:	d8c00817 	ldw	r3,32(sp)
   34550:	d9000717 	ldw	r4,28(sp)
   34554:	90a5883a 	add	r18,r18,r2
   34558:	1887883a 	add	r3,r3,r2
   3455c:	2089883a 	add	r4,r4,r2
   34560:	d8c00815 	stw	r3,32(sp)
   34564:	d9000715 	stw	r4,28(sp)
   34568:	003f8406 	br	3437c <_dtoa_r+0xae0>
   3456c:	d9c00317 	ldw	r7,12(sp)
   34570:	013efb84 	movi	r4,-1042
   34574:	2509c83a 	sub	r4,r4,r20
   34578:	3908983a 	sll	r4,r7,r4
   3457c:	003d3006 	br	33a40 <_dtoa_r+0x1a4>
   34580:	d8000d15 	stw	zero,52(sp)
   34584:	003d7306 	br	33b54 <_dtoa_r+0x2b8>
   34588:	0480050e 	bge	zero,r18,345a0 <_dtoa_r+0xd04>
   3458c:	a80b883a 	mov	r5,r21
   34590:	8009883a 	mov	r4,r16
   34594:	900d883a 	mov	r6,r18
   34598:	00362480 	call	36248 <__lshift>
   3459c:	102b883a 	mov	r21,r2
   345a0:	8801611e 	bne	r17,zero,34b28 <_dtoa_r+0x128c>
   345a4:	a827883a 	mov	r19,r21
   345a8:	d8c00317 	ldw	r3,12(sp)
   345ac:	d9000917 	ldw	r4,36(sp)
   345b0:	b8bfffc4 	addi	r2,r23,-1
   345b4:	18c0004c 	andi	r3,r3,1
   345b8:	1105883a 	add	r2,r2,r4
   345bc:	b825883a 	mov	r18,r23
   345c0:	d8800515 	stw	r2,20(sp)
   345c4:	a823883a 	mov	r17,r21
   345c8:	d8c00315 	stw	r3,12(sp)
   345cc:	ddc00715 	stw	r23,28(sp)
   345d0:	e009883a 	mov	r4,fp
   345d4:	a00b883a 	mov	r5,r20
   345d8:	00336600 	call	33660 <quorem>
   345dc:	e009883a 	mov	r4,fp
   345e0:	880b883a 	mov	r5,r17
   345e4:	102d883a 	mov	r22,r2
   345e8:	00363a40 	call	363a4 <__mcmp>
   345ec:	980d883a 	mov	r6,r19
   345f0:	8009883a 	mov	r4,r16
   345f4:	a00b883a 	mov	r5,r20
   345f8:	102b883a 	mov	r21,r2
   345fc:	00363fc0 	call	363fc <__mdiff>
   34600:	100d883a 	mov	r6,r2
   34604:	10800317 	ldw	r2,12(r2)
   34608:	b5c00c04 	addi	r23,r22,48
   3460c:	10008c26 	beq	r2,zero,34840 <_dtoa_r+0xfa4>
   34610:	8009883a 	mov	r4,r16
   34614:	300b883a 	mov	r5,r6
   34618:	0035b000 	call	35b00 <_Bfree>
   3461c:	00800044 	movi	r2,1
   34620:	a8007116 	blt	r21,zero,347e8 <_dtoa_r+0xf4c>
   34624:	a800041e 	bne	r21,zero,34638 <_dtoa_r+0xd9c>
   34628:	d9c00417 	ldw	r7,16(sp)
   3462c:	3800021e 	bne	r7,zero,34638 <_dtoa_r+0xd9c>
   34630:	d8c00317 	ldw	r3,12(sp)
   34634:	18006c26 	beq	r3,zero,347e8 <_dtoa_r+0xf4c>
   34638:	00814c16 	blt	zero,r2,34b6c <_dtoa_r+0x12d0>
   3463c:	d8c00517 	ldw	r3,20(sp)
   34640:	95400044 	addi	r21,r18,1
   34644:	95c00005 	stb	r23,0(r18)
   34648:	a82d883a 	mov	r22,r21
   3464c:	90c14d26 	beq	r18,r3,34b84 <_dtoa_r+0x12e8>
   34650:	e00b883a 	mov	r5,fp
   34654:	8009883a 	mov	r4,r16
   34658:	01800284 	movi	r6,10
   3465c:	000f883a 	mov	r7,zero
   34660:	0035b280 	call	35b28 <__multadd>
   34664:	1039883a 	mov	fp,r2
   34668:	8cc08b26 	beq	r17,r19,34898 <_dtoa_r+0xffc>
   3466c:	880b883a 	mov	r5,r17
   34670:	01800284 	movi	r6,10
   34674:	000f883a 	mov	r7,zero
   34678:	8009883a 	mov	r4,r16
   3467c:	0035b280 	call	35b28 <__multadd>
   34680:	980b883a 	mov	r5,r19
   34684:	8009883a 	mov	r4,r16
   34688:	01800284 	movi	r6,10
   3468c:	000f883a 	mov	r7,zero
   34690:	1023883a 	mov	r17,r2
   34694:	0035b280 	call	35b28 <__multadd>
   34698:	1027883a 	mov	r19,r2
   3469c:	a825883a 	mov	r18,r21
   346a0:	003fcb06 	br	345d0 <_dtoa_r+0xd34>
   346a4:	d9c00417 	ldw	r7,16(sp)
   346a8:	00800104 	movi	r2,4
   346ac:	3880e426 	beq	r7,r2,34a40 <_dtoa_r+0x11a4>
   346b0:	00800144 	movi	r2,5
   346b4:	38be3c1e 	bne	r7,r2,33fa8 <_dtoa_r+0x70c>
   346b8:	00c00044 	movi	r3,1
   346bc:	d8c00c15 	stw	r3,48(sp)
   346c0:	d9c02117 	ldw	r7,132(sp)
   346c4:	d8800617 	ldw	r2,24(sp)
   346c8:	388f883a 	add	r7,r7,r2
   346cc:	3c800044 	addi	r18,r7,1
   346d0:	d9c00e15 	stw	r7,56(sp)
   346d4:	dc800915 	stw	r18,36(sp)
   346d8:	04bd3e16 	blt	zero,r18,33bd4 <_dtoa_r+0x338>
   346dc:	80001115 	stw	zero,68(r16)
   346e0:	000b883a 	mov	r5,zero
   346e4:	003d4606 	br	33c00 <_dtoa_r+0x364>
   346e8:	d8c00317 	ldw	r3,12(sp)
   346ec:	183f0e1e 	bne	r3,zero,34328 <_dtoa_r+0xa8c>
   346f0:	00c00434 	movhi	r3,16
   346f4:	18ffffc4 	addi	r3,r3,-1
   346f8:	88c6703a 	and	r3,r17,r3
   346fc:	183f0a1e 	bne	r3,zero,34328 <_dtoa_r+0xa8c>
   34700:	8c5ffc2c 	andhi	r17,r17,32752
   34704:	883f0826 	beq	r17,zero,34328 <_dtoa_r+0xa8c>
   34708:	d9000817 	ldw	r4,32(sp)
   3470c:	d9c00717 	ldw	r7,28(sp)
   34710:	1023883a 	mov	r17,r2
   34714:	2089883a 	add	r4,r4,r2
   34718:	388f883a 	add	r7,r7,r2
   3471c:	d9000815 	stw	r4,32(sp)
   34720:	d9c00715 	stw	r7,28(sp)
   34724:	003f0106 	br	3432c <_dtoa_r+0xa90>
   34728:	9005883a 	mov	r2,r18
   3472c:	003ed306 	br	3427c <_dtoa_r+0x9e0>
   34730:	d8800917 	ldw	r2,36(sp)
   34734:	00be3516 	blt	zero,r2,3400c <_dtoa_r+0x770>
   34738:	1000b61e 	bne	r2,zero,34a14 <_dtoa_r+0x1178>
   3473c:	9009883a 	mov	r4,r18
   34740:	980b883a 	mov	r5,r19
   34744:	000d883a 	mov	r6,zero
   34748:	01d00534 	movhi	r7,16404
   3474c:	002ba100 	call	2ba10 <__muldf3>
   34750:	d9800317 	ldw	r6,12(sp)
   34754:	1009883a 	mov	r4,r2
   34758:	180b883a 	mov	r5,r3
   3475c:	880f883a 	mov	r7,r17
   34760:	003b83c0 	call	3b83c <__gedf2>
   34764:	0029883a 	mov	r20,zero
   34768:	002b883a 	mov	r21,zero
   3476c:	10007e16 	blt	r2,zero,34968 <_dtoa_r+0x10cc>
   34770:	d8802117 	ldw	r2,132(sp)
   34774:	b82d883a 	mov	r22,r23
   34778:	0084303a 	nor	r2,zero,r2
   3477c:	d8800615 	stw	r2,24(sp)
   34780:	8009883a 	mov	r4,r16
   34784:	a00b883a 	mov	r5,r20
   34788:	0035b000 	call	35b00 <_Bfree>
   3478c:	a83f4b1e 	bne	r21,zero,344bc <_dtoa_r+0xc20>
   34790:	003de306 	br	33f20 <_dtoa_r+0x684>
   34794:	e00b883a 	mov	r5,fp
   34798:	8009883a 	mov	r4,r16
   3479c:	003611c0 	call	3611c <__pow5mult>
   347a0:	1039883a 	mov	fp,r2
   347a4:	003ed206 	br	342f0 <_dtoa_r+0xa54>
   347a8:	1000021e 	bne	r2,zero,347b4 <_dtoa_r+0xf18>
   347ac:	18c0004c 	andi	r3,r3,1
   347b0:	183f271e 	bne	r3,zero,34450 <_dtoa_r+0xbb4>
   347b4:	01000c04 	movi	r4,48
   347b8:	00000106 	br	347c0 <_dtoa_r+0xf24>
   347bc:	102d883a 	mov	r22,r2
   347c0:	b0bfffc4 	addi	r2,r22,-1
   347c4:	10c00007 	ldb	r3,0(r2)
   347c8:	193ffc26 	beq	r3,r4,347bc <_dtoa_r+0xf20>
   347cc:	003f3206 	br	34498 <_dtoa_r+0xbfc>
   347d0:	d8c00f17 	ldw	r3,60(sp)
   347d4:	18015026 	beq	r3,zero,34d18 <_dtoa_r+0x147c>
   347d8:	10810cc4 	addi	r2,r2,1075
   347dc:	dcc00a17 	ldw	r19,40(sp)
   347e0:	dc800817 	ldw	r18,32(sp)
   347e4:	003e9706 	br	34244 <_dtoa_r+0x9a8>
   347e8:	b807883a 	mov	r3,r23
   347ec:	182b883a 	mov	r21,r3
   347f0:	ddc00717 	ldw	r23,28(sp)
   347f4:	00800e0e 	bge	zero,r2,34830 <_dtoa_r+0xf94>
   347f8:	e00b883a 	mov	r5,fp
   347fc:	01800044 	movi	r6,1
   34800:	8009883a 	mov	r4,r16
   34804:	d8c01515 	stw	r3,84(sp)
   34808:	00362480 	call	36248 <__lshift>
   3480c:	1009883a 	mov	r4,r2
   34810:	a00b883a 	mov	r5,r20
   34814:	1039883a 	mov	fp,r2
   34818:	00363a40 	call	363a4 <__mcmp>
   3481c:	d8c01517 	ldw	r3,84(sp)
   34820:	0081880e 	bge	zero,r2,34e44 <_dtoa_r+0x15a8>
   34824:	00800e44 	movi	r2,57
   34828:	b0c00c44 	addi	r3,r22,49
   3482c:	a8816326 	beq	r21,r2,34dbc <_dtoa_r+0x1520>
   34830:	90c00005 	stb	r3,0(r18)
   34834:	95800044 	addi	r22,r18,1
   34838:	982b883a 	mov	r21,r19
   3483c:	003f1606 	br	34498 <_dtoa_r+0xbfc>
   34840:	300b883a 	mov	r5,r6
   34844:	e009883a 	mov	r4,fp
   34848:	d9801515 	stw	r6,84(sp)
   3484c:	00363a40 	call	363a4 <__mcmp>
   34850:	d9801517 	ldw	r6,84(sp)
   34854:	8009883a 	mov	r4,r16
   34858:	d8801515 	stw	r2,84(sp)
   3485c:	300b883a 	mov	r5,r6
   34860:	0035b000 	call	35b00 <_Bfree>
   34864:	d8801517 	ldw	r2,84(sp)
   34868:	103f6d1e 	bne	r2,zero,34620 <_dtoa_r+0xd84>
   3486c:	d9c00417 	ldw	r7,16(sp)
   34870:	383f6b1e 	bne	r7,zero,34620 <_dtoa_r+0xd84>
   34874:	d8c00317 	ldw	r3,12(sp)
   34878:	183f691e 	bne	r3,zero,34620 <_dtoa_r+0xd84>
   3487c:	b807883a 	mov	r3,r23
   34880:	00800e44 	movi	r2,57
   34884:	ddc00717 	ldw	r23,28(sp)
   34888:	18814c26 	beq	r3,r2,34dbc <_dtoa_r+0x1520>
   3488c:	057fe80e 	bge	zero,r21,34830 <_dtoa_r+0xf94>
   34890:	b0c00c44 	addi	r3,r22,49
   34894:	003fe606 	br	34830 <_dtoa_r+0xf94>
   34898:	880b883a 	mov	r5,r17
   3489c:	8009883a 	mov	r4,r16
   348a0:	01800284 	movi	r6,10
   348a4:	000f883a 	mov	r7,zero
   348a8:	0035b280 	call	35b28 <__multadd>
   348ac:	1023883a 	mov	r17,r2
   348b0:	1027883a 	mov	r19,r2
   348b4:	a825883a 	mov	r18,r21
   348b8:	003f4506 	br	345d0 <_dtoa_r+0xd34>
   348bc:	e009883a 	mov	r4,fp
   348c0:	a00b883a 	mov	r5,r20
   348c4:	00363a40 	call	363a4 <__mcmp>
   348c8:	103ebc0e 	bge	r2,zero,343bc <_dtoa_r+0xb20>
   348cc:	e00b883a 	mov	r5,fp
   348d0:	8009883a 	mov	r4,r16
   348d4:	01800284 	movi	r6,10
   348d8:	000f883a 	mov	r7,zero
   348dc:	0035b280 	call	35b28 <__multadd>
   348e0:	1039883a 	mov	fp,r2
   348e4:	d8800617 	ldw	r2,24(sp)
   348e8:	d8c00c17 	ldw	r3,48(sp)
   348ec:	10bfffc4 	addi	r2,r2,-1
   348f0:	d8800615 	stw	r2,24(sp)
   348f4:	1801571e 	bne	r3,zero,34e54 <_dtoa_r+0x15b8>
   348f8:	d9c00e17 	ldw	r7,56(sp)
   348fc:	d9c00915 	stw	r7,36(sp)
   34900:	003eae06 	br	343bc <_dtoa_r+0xb20>
   34904:	a0800417 	ldw	r2,16(r20)
   34908:	10800104 	addi	r2,r2,4
   3490c:	1085883a 	add	r2,r2,r2
   34910:	1085883a 	add	r2,r2,r2
   34914:	a085883a 	add	r2,r20,r2
   34918:	11000017 	ldw	r4,0(r2)
   3491c:	0035d700 	call	35d70 <__hi0bits>
   34920:	00c00804 	movi	r3,32
   34924:	1885c83a 	sub	r2,r3,r2
   34928:	003e8306 	br	34338 <_dtoa_r+0xa9c>
   3492c:	d9c00417 	ldw	r7,16(sp)
   34930:	00800084 	movi	r2,2
   34934:	11fea30e 	bge	r2,r7,343c4 <_dtoa_r+0xb28>
   34938:	d8800917 	ldw	r2,36(sp)
   3493c:	103f8c1e 	bne	r2,zero,34770 <_dtoa_r+0xed4>
   34940:	a00b883a 	mov	r5,r20
   34944:	8009883a 	mov	r4,r16
   34948:	01800144 	movi	r6,5
   3494c:	000f883a 	mov	r7,zero
   34950:	0035b280 	call	35b28 <__multadd>
   34954:	e009883a 	mov	r4,fp
   34958:	100b883a 	mov	r5,r2
   3495c:	1029883a 	mov	r20,r2
   34960:	00363a40 	call	363a4 <__mcmp>
   34964:	00bf820e 	bge	zero,r2,34770 <_dtoa_r+0xed4>
   34968:	00800c44 	movi	r2,49
   3496c:	b8800005 	stb	r2,0(r23)
   34970:	d8800617 	ldw	r2,24(sp)
   34974:	bd800044 	addi	r22,r23,1
   34978:	10800044 	addi	r2,r2,1
   3497c:	d8800615 	stw	r2,24(sp)
   34980:	003f7f06 	br	34780 <_dtoa_r+0xee4>
   34984:	dc000417 	ldw	r16,16(sp)
   34988:	003d6506 	br	33f20 <_dtoa_r+0x684>
   3498c:	9009883a 	mov	r4,r18
   34990:	003b9580 	call	3b958 <__floatsidf>
   34994:	1009883a 	mov	r4,r2
   34998:	180b883a 	mov	r5,r3
   3499c:	980d883a 	mov	r6,r19
   349a0:	a00f883a 	mov	r7,r20
   349a4:	002ba100 	call	2ba10 <__muldf3>
   349a8:	1009883a 	mov	r4,r2
   349ac:	180b883a 	mov	r5,r3
   349b0:	000d883a 	mov	r6,zero
   349b4:	01d00734 	movhi	r7,16412
   349b8:	003b66c0 	call	3b66c <__adddf3>
   349bc:	057f3034 	movhi	r21,64704
   349c0:	1025883a 	mov	r18,r2
   349c4:	1d6b883a 	add	r21,r3,r21
   349c8:	9809883a 	mov	r4,r19
   349cc:	a00b883a 	mov	r5,r20
   349d0:	000d883a 	mov	r6,zero
   349d4:	01d00534 	movhi	r7,16404
   349d8:	003b6c00 	call	3b6c0 <__subdf3>
   349dc:	1009883a 	mov	r4,r2
   349e0:	180b883a 	mov	r5,r3
   349e4:	900d883a 	mov	r6,r18
   349e8:	a80f883a 	mov	r7,r21
   349ec:	1027883a 	mov	r19,r2
   349f0:	1829883a 	mov	r20,r3
   349f4:	003b7d80 	call	3b7d8 <__gtdf2>
   349f8:	00806616 	blt	zero,r2,34b94 <_dtoa_r+0x12f8>
   349fc:	a9e0003c 	xorhi	r7,r21,32768
   34a00:	9809883a 	mov	r4,r19
   34a04:	a00b883a 	mov	r5,r20
   34a08:	900d883a 	mov	r6,r18
   34a0c:	003b8a00 	call	3b8a0 <__ltdf2>
   34a10:	103d710e 	bge	r2,zero,33fd8 <_dtoa_r+0x73c>
   34a14:	0029883a 	mov	r20,zero
   34a18:	002b883a 	mov	r21,zero
   34a1c:	003f5406 	br	34770 <_dtoa_r+0xed4>
   34a20:	d9800a17 	ldw	r6,40(sp)
   34a24:	e00b883a 	mov	r5,fp
   34a28:	8009883a 	mov	r4,r16
   34a2c:	003611c0 	call	3611c <__pow5mult>
   34a30:	1039883a 	mov	fp,r2
   34a34:	003e2e06 	br	342f0 <_dtoa_r+0xa54>
   34a38:	d8000c15 	stw	zero,48(sp)
   34a3c:	003f2006 	br	346c0 <_dtoa_r+0xe24>
   34a40:	00800044 	movi	r2,1
   34a44:	d8800c15 	stw	r2,48(sp)
   34a48:	003c5d06 	br	33bc0 <_dtoa_r+0x324>
   34a4c:	d8c00a17 	ldw	r3,40(sp)
   34a50:	d9000b17 	ldw	r4,44(sp)
   34a54:	dcc00a15 	stw	r19,40(sp)
   34a58:	98c5c83a 	sub	r2,r19,r3
   34a5c:	2089883a 	add	r4,r4,r2
   34a60:	d9000b15 	stw	r4,44(sp)
   34a64:	0027883a 	mov	r19,zero
   34a68:	003df206 	br	34234 <_dtoa_r+0x998>
   34a6c:	d9000317 	ldw	r4,12(sp)
   34a70:	8829883a 	mov	r20,r17
   34a74:	04800084 	movi	r18,2
   34a78:	d9001015 	stw	r4,64(sp)
   34a7c:	003c8106 	br	33c84 <_dtoa_r+0x3e8>
   34a80:	04800044 	movi	r18,1
   34a84:	dc800e15 	stw	r18,56(sp)
   34a88:	dc800915 	stw	r18,36(sp)
   34a8c:	dc802115 	stw	r18,132(sp)
   34a90:	003f1206 	br	346dc <_dtoa_r+0xe40>
   34a94:	d8800617 	ldw	r2,24(sp)
   34a98:	00abc83a 	sub	r21,zero,r2
   34a9c:	a800a426 	beq	r21,zero,34d30 <_dtoa_r+0x1494>
   34aa0:	a88003cc 	andi	r2,r21,15
   34aa4:	100490fa 	slli	r2,r2,3
   34aa8:	00c00134 	movhi	r3,4
   34aac:	18c4ba04 	addi	r3,r3,4840
   34ab0:	d9000317 	ldw	r4,12(sp)
   34ab4:	1885883a 	add	r2,r3,r2
   34ab8:	11800017 	ldw	r6,0(r2)
   34abc:	11c00117 	ldw	r7,4(r2)
   34ac0:	a82bd13a 	srai	r21,r21,4
   34ac4:	880b883a 	mov	r5,r17
   34ac8:	002ba100 	call	2ba10 <__muldf3>
   34acc:	1027883a 	mov	r19,r2
   34ad0:	1829883a 	mov	r20,r3
   34ad4:	a800e826 	beq	r21,zero,34e78 <_dtoa_r+0x15dc>
   34ad8:	05800134 	movhi	r22,4
   34adc:	b584b004 	addi	r22,r22,4800
   34ae0:	04800084 	movi	r18,2
   34ae4:	a980004c 	andi	r6,r21,1
   34ae8:	1009883a 	mov	r4,r2
   34aec:	a82bd07a 	srai	r21,r21,1
   34af0:	180b883a 	mov	r5,r3
   34af4:	30000426 	beq	r6,zero,34b08 <_dtoa_r+0x126c>
   34af8:	b1800017 	ldw	r6,0(r22)
   34afc:	b1c00117 	ldw	r7,4(r22)
   34b00:	94800044 	addi	r18,r18,1
   34b04:	002ba100 	call	2ba10 <__muldf3>
   34b08:	b5800204 	addi	r22,r22,8
   34b0c:	a83ff51e 	bne	r21,zero,34ae4 <_dtoa_r+0x1248>
   34b10:	1027883a 	mov	r19,r2
   34b14:	1829883a 	mov	r20,r3
   34b18:	003c7306 	br	33ce8 <_dtoa_r+0x44c>
   34b1c:	21000044 	addi	r4,r4,1
   34b20:	11000005 	stb	r4,0(r2)
   34b24:	003e5c06 	br	34498 <_dtoa_r+0xbfc>
   34b28:	a9400117 	ldw	r5,4(r21)
   34b2c:	8009883a 	mov	r4,r16
   34b30:	0035a580 	call	35a58 <_Balloc>
   34b34:	a9800417 	ldw	r6,16(r21)
   34b38:	11000304 	addi	r4,r2,12
   34b3c:	a9400304 	addi	r5,r21,12
   34b40:	31800084 	addi	r6,r6,2
   34b44:	318d883a 	add	r6,r6,r6
   34b48:	318d883a 	add	r6,r6,r6
   34b4c:	1023883a 	mov	r17,r2
   34b50:	002eaec0 	call	2eaec <memcpy>
   34b54:	8009883a 	mov	r4,r16
   34b58:	880b883a 	mov	r5,r17
   34b5c:	01800044 	movi	r6,1
   34b60:	00362480 	call	36248 <__lshift>
   34b64:	1027883a 	mov	r19,r2
   34b68:	003e8f06 	br	345a8 <_dtoa_r+0xd0c>
   34b6c:	b807883a 	mov	r3,r23
   34b70:	00800e44 	movi	r2,57
   34b74:	ddc00717 	ldw	r23,28(sp)
   34b78:	18809026 	beq	r3,r2,34dbc <_dtoa_r+0x1520>
   34b7c:	18c00044 	addi	r3,r3,1
   34b80:	003f2b06 	br	34830 <_dtoa_r+0xf94>
   34b84:	b807883a 	mov	r3,r23
   34b88:	982b883a 	mov	r21,r19
   34b8c:	ddc00717 	ldw	r23,28(sp)
   34b90:	003e2406 	br	34424 <_dtoa_r+0xb88>
   34b94:	0029883a 	mov	r20,zero
   34b98:	002b883a 	mov	r21,zero
   34b9c:	003f7206 	br	34968 <_dtoa_r+0x10cc>
   34ba0:	593fffc4 	addi	r4,r11,-1
   34ba4:	200490fa 	slli	r2,r4,3
   34ba8:	00c00134 	movhi	r3,4
   34bac:	18c4ba04 	addi	r3,r3,4840
   34bb0:	d9001015 	stw	r4,64(sp)
   34bb4:	1885883a 	add	r2,r3,r2
   34bb8:	11000017 	ldw	r4,0(r2)
   34bbc:	11400117 	ldw	r5,4(r2)
   34bc0:	900d883a 	mov	r6,r18
   34bc4:	a80f883a 	mov	r7,r21
   34bc8:	dac01615 	stw	r11,88(sp)
   34bcc:	002ba100 	call	2ba10 <__muldf3>
   34bd0:	a00b883a 	mov	r5,r20
   34bd4:	9809883a 	mov	r4,r19
   34bd8:	d8c01215 	stw	r3,72(sp)
   34bdc:	d8801115 	stw	r2,68(sp)
   34be0:	003ba2c0 	call	3ba2c <__fixdfsi>
   34be4:	1009883a 	mov	r4,r2
   34be8:	1025883a 	mov	r18,r2
   34bec:	003b9580 	call	3b958 <__floatsidf>
   34bf0:	9809883a 	mov	r4,r19
   34bf4:	a00b883a 	mov	r5,r20
   34bf8:	100d883a 	mov	r6,r2
   34bfc:	180f883a 	mov	r7,r3
   34c00:	94800c04 	addi	r18,r18,48
   34c04:	003b6c00 	call	3b6c0 <__subdf3>
   34c08:	bc800005 	stb	r18,0(r23)
   34c0c:	dac01617 	ldw	r11,88(sp)
   34c10:	102b883a 	mov	r21,r2
   34c14:	00800044 	movi	r2,1
   34c18:	bd800044 	addi	r22,r23,1
   34c1c:	1815883a 	mov	r10,r3
   34c20:	58802226 	beq	r11,r2,34cac <_dtoa_r+0x1410>
   34c24:	bad7883a 	add	r11,r23,r11
   34c28:	dc001415 	stw	r16,80(sp)
   34c2c:	a805883a 	mov	r2,r21
   34c30:	b027883a 	mov	r19,r22
   34c34:	5821883a 	mov	r16,r11
   34c38:	882b883a 	mov	r21,r17
   34c3c:	000d883a 	mov	r6,zero
   34c40:	01d00934 	movhi	r7,16420
   34c44:	1009883a 	mov	r4,r2
   34c48:	180b883a 	mov	r5,r3
   34c4c:	002ba100 	call	2ba10 <__muldf3>
   34c50:	180b883a 	mov	r5,r3
   34c54:	1009883a 	mov	r4,r2
   34c58:	1829883a 	mov	r20,r3
   34c5c:	1023883a 	mov	r17,r2
   34c60:	003ba2c0 	call	3ba2c <__fixdfsi>
   34c64:	1009883a 	mov	r4,r2
   34c68:	1025883a 	mov	r18,r2
   34c6c:	003b9580 	call	3b958 <__floatsidf>
   34c70:	8809883a 	mov	r4,r17
   34c74:	a00b883a 	mov	r5,r20
   34c78:	100d883a 	mov	r6,r2
   34c7c:	180f883a 	mov	r7,r3
   34c80:	94800c04 	addi	r18,r18,48
   34c84:	003b6c00 	call	3b6c0 <__subdf3>
   34c88:	9cc00044 	addi	r19,r19,1
   34c8c:	9cbfffc5 	stb	r18,-1(r19)
   34c90:	9c3fea1e 	bne	r19,r16,34c3c <_dtoa_r+0x13a0>
   34c94:	1815883a 	mov	r10,r3
   34c98:	d8c01017 	ldw	r3,64(sp)
   34c9c:	dc001417 	ldw	r16,80(sp)
   34ca0:	a823883a 	mov	r17,r21
   34ca4:	b0ed883a 	add	r22,r22,r3
   34ca8:	102b883a 	mov	r21,r2
   34cac:	d9001117 	ldw	r4,68(sp)
   34cb0:	d9401217 	ldw	r5,72(sp)
   34cb4:	000d883a 	mov	r6,zero
   34cb8:	01cff834 	movhi	r7,16352
   34cbc:	da801515 	stw	r10,84(sp)
   34cc0:	003b66c0 	call	3b66c <__adddf3>
   34cc4:	da801517 	ldw	r10,84(sp)
   34cc8:	1009883a 	mov	r4,r2
   34ccc:	180b883a 	mov	r5,r3
   34cd0:	500f883a 	mov	r7,r10
   34cd4:	a80d883a 	mov	r6,r21
   34cd8:	003b8a00 	call	3b8a0 <__ltdf2>
   34cdc:	da801517 	ldw	r10,84(sp)
   34ce0:	10003b0e 	bge	r2,zero,34dd0 <_dtoa_r+0x1534>
   34ce4:	d9c01317 	ldw	r7,76(sp)
   34ce8:	b53fffc3 	ldbu	r20,-1(r22)
   34cec:	d9c00615 	stw	r7,24(sp)
   34cf0:	003d3106 	br	341b8 <_dtoa_r+0x91c>
   34cf4:	d8800817 	ldw	r2,32(sp)
   34cf8:	11e5c83a 	sub	r18,r2,r7
   34cfc:	0005883a 	mov	r2,zero
   34d00:	003d5006 	br	34244 <_dtoa_r+0x9a8>
   34d04:	05800044 	movi	r22,1
   34d08:	003dc406 	br	3441c <_dtoa_r+0xb80>
   34d0c:	a5000044 	addi	r20,r20,1
   34d10:	15000005 	stb	r20,0(r2)
   34d14:	003c8206 	br	33f20 <_dtoa_r+0x684>
   34d18:	d8800217 	ldw	r2,8(sp)
   34d1c:	00c00d84 	movi	r3,54
   34d20:	dcc00a17 	ldw	r19,40(sp)
   34d24:	1885c83a 	sub	r2,r3,r2
   34d28:	dc800817 	ldw	r18,32(sp)
   34d2c:	003d4506 	br	34244 <_dtoa_r+0x9a8>
   34d30:	dcc00317 	ldw	r19,12(sp)
   34d34:	8829883a 	mov	r20,r17
   34d38:	04800084 	movi	r18,2
   34d3c:	003bea06 	br	33ce8 <_dtoa_r+0x44c>
   34d40:	d9000917 	ldw	r4,36(sp)
   34d44:	203f1126 	beq	r4,zero,3498c <_dtoa_r+0x10f0>
   34d48:	d9c00e17 	ldw	r7,56(sp)
   34d4c:	01fca20e 	bge	zero,r7,33fd8 <_dtoa_r+0x73c>
   34d50:	a00b883a 	mov	r5,r20
   34d54:	9809883a 	mov	r4,r19
   34d58:	000d883a 	mov	r6,zero
   34d5c:	01d00934 	movhi	r7,16420
   34d60:	002ba100 	call	2ba10 <__muldf3>
   34d64:	91000044 	addi	r4,r18,1
   34d68:	1027883a 	mov	r19,r2
   34d6c:	1829883a 	mov	r20,r3
   34d70:	003b9580 	call	3b958 <__floatsidf>
   34d74:	9809883a 	mov	r4,r19
   34d78:	a00b883a 	mov	r5,r20
   34d7c:	100d883a 	mov	r6,r2
   34d80:	180f883a 	mov	r7,r3
   34d84:	002ba100 	call	2ba10 <__muldf3>
   34d88:	1009883a 	mov	r4,r2
   34d8c:	180b883a 	mov	r5,r3
   34d90:	000d883a 	mov	r6,zero
   34d94:	01d00734 	movhi	r7,16412
   34d98:	003b66c0 	call	3b66c <__adddf3>
   34d9c:	1025883a 	mov	r18,r2
   34da0:	d8800617 	ldw	r2,24(sp)
   34da4:	057f3034 	movhi	r21,64704
   34da8:	1d6b883a 	add	r21,r3,r21
   34dac:	10bfffc4 	addi	r2,r2,-1
   34db0:	d8801315 	stw	r2,76(sp)
   34db4:	dac00e17 	ldw	r11,56(sp)
   34db8:	003be706 	br	33d58 <_dtoa_r+0x4bc>
   34dbc:	01000e44 	movi	r4,57
   34dc0:	91000005 	stb	r4,0(r18)
   34dc4:	95800044 	addi	r22,r18,1
   34dc8:	982b883a 	mov	r21,r19
   34dcc:	003da106 	br	34454 <_dtoa_r+0xbb8>
   34dd0:	d9801117 	ldw	r6,68(sp)
   34dd4:	d9c01217 	ldw	r7,72(sp)
   34dd8:	0009883a 	mov	r4,zero
   34ddc:	014ff834 	movhi	r5,16352
   34de0:	da801515 	stw	r10,84(sp)
   34de4:	003b6c00 	call	3b6c0 <__subdf3>
   34de8:	da801517 	ldw	r10,84(sp)
   34dec:	1009883a 	mov	r4,r2
   34df0:	180b883a 	mov	r5,r3
   34df4:	a80d883a 	mov	r6,r21
   34df8:	500f883a 	mov	r7,r10
   34dfc:	003b7d80 	call	3b7d8 <__gtdf2>
   34e00:	00bc750e 	bge	zero,r2,33fd8 <_dtoa_r+0x73c>
   34e04:	01000c04 	movi	r4,48
   34e08:	00000106 	br	34e10 <_dtoa_r+0x1574>
   34e0c:	102d883a 	mov	r22,r2
   34e10:	b0bfffc4 	addi	r2,r22,-1
   34e14:	10c00007 	ldb	r3,0(r2)
   34e18:	193ffc26 	beq	r3,r4,34e0c <_dtoa_r+0x1570>
   34e1c:	d8801317 	ldw	r2,76(sp)
   34e20:	d8800615 	stw	r2,24(sp)
   34e24:	003c3e06 	br	33f20 <_dtoa_r+0x684>
   34e28:	d9001317 	ldw	r4,76(sp)
   34e2c:	df001117 	ldw	fp,68(sp)
   34e30:	d9000615 	stw	r4,24(sp)
   34e34:	003ce006 	br	341b8 <_dtoa_r+0x91c>
   34e38:	df001117 	ldw	fp,68(sp)
   34e3c:	dc401217 	ldw	r17,72(sp)
   34e40:	003c6506 	br	33fd8 <_dtoa_r+0x73c>
   34e44:	103e7a1e 	bne	r2,zero,34830 <_dtoa_r+0xf94>
   34e48:	1880004c 	andi	r2,r3,1
   34e4c:	103e7826 	beq	r2,zero,34830 <_dtoa_r+0xf94>
   34e50:	003e7406 	br	34824 <_dtoa_r+0xf88>
   34e54:	8009883a 	mov	r4,r16
   34e58:	a80b883a 	mov	r5,r21
   34e5c:	01800284 	movi	r6,10
   34e60:	000f883a 	mov	r7,zero
   34e64:	0035b280 	call	35b28 <__multadd>
   34e68:	d9000e17 	ldw	r4,56(sp)
   34e6c:	102b883a 	mov	r21,r2
   34e70:	d9000915 	stw	r4,36(sp)
   34e74:	003d5106 	br	343bc <_dtoa_r+0xb20>
   34e78:	04800084 	movi	r18,2
   34e7c:	003b9a06 	br	33ce8 <_dtoa_r+0x44c>
   34e80:	d8c01317 	ldw	r3,76(sp)
   34e84:	d8c00615 	stw	r3,24(sp)
   34e88:	003ccb06 	br	341b8 <_dtoa_r+0x91c>
   34e8c:	d8c01317 	ldw	r3,76(sp)
   34e90:	d8c00615 	stw	r3,24(sp)
   34e94:	003c2206 	br	33f20 <_dtoa_r+0x684>
   34e98:	20fd3826 	beq	r4,r3,3437c <_dtoa_r+0xae0>
   34e9c:	00c00f04 	movi	r3,60
   34ea0:	1885c83a 	sub	r2,r3,r2
   34ea4:	003da906 	br	3454c <_dtoa_r+0xcb0>
   34ea8:	000b883a 	mov	r5,zero
   34eac:	003b5406 	br	33c00 <_dtoa_r+0x364>
   34eb0:	04c00044 	movi	r19,1
   34eb4:	003b3b06 	br	33ba4 <_dtoa_r+0x308>

00034eb8 <_fdopen_r>:
   34eb8:	defffb04 	addi	sp,sp,-20
   34ebc:	dc800315 	stw	r18,12(sp)
   34ec0:	2825883a 	mov	r18,r5
   34ec4:	300b883a 	mov	r5,r6
   34ec8:	d80d883a 	mov	r6,sp
   34ecc:	dc400215 	stw	r17,8(sp)
   34ed0:	dc000115 	stw	r16,4(sp)
   34ed4:	dfc00415 	stw	ra,16(sp)
   34ed8:	2023883a 	mov	r17,r4
   34edc:	0034f8c0 	call	34f8c <__sflags>
   34ee0:	1021883a 	mov	r16,r2
   34ee4:	10001a26 	beq	r2,zero,34f50 <_fdopen_r+0x98>
   34ee8:	8809883a 	mov	r4,r17
   34eec:	002ce580 	call	2ce58 <__sfp>
   34ef0:	1007883a 	mov	r3,r2
   34ef4:	10001626 	beq	r2,zero,34f50 <_fdopen_r+0x98>
   34ef8:	1400030d 	sth	r16,12(r2)
   34efc:	1480038d 	sth	r18,14(r2)
   34f00:	18800715 	stw	r2,28(r3)
   34f04:	008000f4 	movhi	r2,3
   34f08:	10bcd604 	addi	r2,r2,-3240
   34f0c:	18800815 	stw	r2,32(r3)
   34f10:	008000f4 	movhi	r2,3
   34f14:	10bceb04 	addi	r2,r2,-3156
   34f18:	18800915 	stw	r2,36(r3)
   34f1c:	008000f4 	movhi	r2,3
   34f20:	10bd0d04 	addi	r2,r2,-3020
   34f24:	18800a15 	stw	r2,40(r3)
   34f28:	008000f4 	movhi	r2,3
   34f2c:	10bd2404 	addi	r2,r2,-2928
   34f30:	18800b15 	stw	r2,44(r3)
   34f34:	1805883a 	mov	r2,r3
   34f38:	dfc00417 	ldw	ra,16(sp)
   34f3c:	dc800317 	ldw	r18,12(sp)
   34f40:	dc400217 	ldw	r17,8(sp)
   34f44:	dc000117 	ldw	r16,4(sp)
   34f48:	dec00504 	addi	sp,sp,20
   34f4c:	f800283a 	ret
   34f50:	0007883a 	mov	r3,zero
   34f54:	1805883a 	mov	r2,r3
   34f58:	dfc00417 	ldw	ra,16(sp)
   34f5c:	dc800317 	ldw	r18,12(sp)
   34f60:	dc400217 	ldw	r17,8(sp)
   34f64:	dc000117 	ldw	r16,4(sp)
   34f68:	dec00504 	addi	sp,sp,20
   34f6c:	f800283a 	ret

00034f70 <fdopen>:
   34f70:	00c00134 	movhi	r3,4
   34f74:	18cbb304 	addi	r3,r3,11980
   34f78:	2005883a 	mov	r2,r4
   34f7c:	19000017 	ldw	r4,0(r3)
   34f80:	280d883a 	mov	r6,r5
   34f84:	100b883a 	mov	r5,r2
   34f88:	0034eb81 	jmpi	34eb8 <_fdopen_r>

00034f8c <__sflags>:
   34f8c:	28800007 	ldb	r2,0(r5)
   34f90:	00c01c84 	movi	r3,114
   34f94:	10c01826 	beq	r2,r3,34ff8 <__sflags+0x6c>
   34f98:	00c01dc4 	movi	r3,119
   34f9c:	10c01226 	beq	r2,r3,34fe8 <__sflags+0x5c>
   34fa0:	00c01844 	movi	r3,97
   34fa4:	10c00426 	beq	r2,r3,34fb8 <__sflags+0x2c>
   34fa8:	00800584 	movi	r2,22
   34fac:	20800015 	stw	r2,0(r4)
   34fb0:	0005883a 	mov	r2,zero
   34fb4:	f800283a 	ret
   34fb8:	01c08204 	movi	r7,520
   34fbc:	01000044 	movi	r4,1
   34fc0:	00804204 	movi	r2,264
   34fc4:	28c00047 	ldb	r3,1(r5)
   34fc8:	18000426 	beq	r3,zero,34fdc <__sflags+0x50>
   34fcc:	02000ac4 	movi	r8,43
   34fd0:	1a000d26 	beq	r3,r8,35008 <__sflags+0x7c>
   34fd4:	28c00087 	ldb	r3,2(r5)
   34fd8:	1a000b26 	beq	r3,r8,35008 <__sflags+0x7c>
   34fdc:	21c8b03a 	or	r4,r4,r7
   34fe0:	31000015 	stw	r4,0(r6)
   34fe4:	f800283a 	ret
   34fe8:	01c18004 	movi	r7,1536
   34fec:	01000044 	movi	r4,1
   34ff0:	00800204 	movi	r2,8
   34ff4:	003ff306 	br	34fc4 <__sflags+0x38>
   34ff8:	000f883a 	mov	r7,zero
   34ffc:	0009883a 	mov	r4,zero
   35000:	00800104 	movi	r2,4
   35004:	003fef06 	br	34fc4 <__sflags+0x38>
   35008:	00fff8c4 	movi	r3,-29
   3500c:	01000084 	movi	r4,2
   35010:	10c4703a 	and	r2,r2,r3
   35014:	21c8b03a 	or	r4,r4,r7
   35018:	10800414 	ori	r2,r2,16
   3501c:	31000015 	stw	r4,0(r6)
   35020:	f800283a 	ret

00035024 <__sfvwrite_r>:
   35024:	30800217 	ldw	r2,8(r6)
   35028:	defff504 	addi	sp,sp,-44
   3502c:	dd400615 	stw	r21,24(sp)
   35030:	dd000515 	stw	r20,20(sp)
   35034:	dc000115 	stw	r16,4(sp)
   35038:	dfc00a15 	stw	ra,40(sp)
   3503c:	df000915 	stw	fp,36(sp)
   35040:	ddc00815 	stw	r23,32(sp)
   35044:	dd800715 	stw	r22,28(sp)
   35048:	dcc00415 	stw	r19,16(sp)
   3504c:	dc800315 	stw	r18,12(sp)
   35050:	dc400215 	stw	r17,8(sp)
   35054:	3029883a 	mov	r20,r6
   35058:	202b883a 	mov	r21,r4
   3505c:	2821883a 	mov	r16,r5
   35060:	10002126 	beq	r2,zero,350e8 <__sfvwrite_r+0xc4>
   35064:	2880030b 	ldhu	r2,12(r5)
   35068:	10c0020c 	andi	r3,r2,8
   3506c:	18ffffcc 	andi	r3,r3,65535
   35070:	18e0001c 	xori	r3,r3,32768
   35074:	18e00004 	addi	r3,r3,-32768
   35078:	18002826 	beq	r3,zero,3511c <__sfvwrite_r+0xf8>
   3507c:	28c00417 	ldw	r3,16(r5)
   35080:	18002626 	beq	r3,zero,3511c <__sfvwrite_r+0xf8>
   35084:	10c0008c 	andi	r3,r2,2
   35088:	18ffffcc 	andi	r3,r3,65535
   3508c:	18e0001c 	xori	r3,r3,32768
   35090:	18e00004 	addi	r3,r3,-32768
   35094:	a4400017 	ldw	r17,0(r20)
   35098:	18002b26 	beq	r3,zero,35148 <__sfvwrite_r+0x124>
   3509c:	0027883a 	mov	r19,zero
   350a0:	0025883a 	mov	r18,zero
   350a4:	05810004 	movi	r22,1024
   350a8:	980d883a 	mov	r6,r19
   350ac:	a809883a 	mov	r4,r21
   350b0:	90004f26 	beq	r18,zero,351f0 <__sfvwrite_r+0x1cc>
   350b4:	900f883a 	mov	r7,r18
   350b8:	81400717 	ldw	r5,28(r16)
   350bc:	b480012e 	bgeu	r22,r18,350c4 <__sfvwrite_r+0xa0>
   350c0:	01c10004 	movi	r7,1024
   350c4:	80800917 	ldw	r2,36(r16)
   350c8:	103ee83a 	callr	r2
   350cc:	0080540e 	bge	zero,r2,35220 <__sfvwrite_r+0x1fc>
   350d0:	a0c00217 	ldw	r3,8(r20)
   350d4:	98a7883a 	add	r19,r19,r2
   350d8:	90a5c83a 	sub	r18,r18,r2
   350dc:	1885c83a 	sub	r2,r3,r2
   350e0:	a0800215 	stw	r2,8(r20)
   350e4:	103ff01e 	bne	r2,zero,350a8 <__sfvwrite_r+0x84>
   350e8:	0005883a 	mov	r2,zero
   350ec:	dfc00a17 	ldw	ra,40(sp)
   350f0:	df000917 	ldw	fp,36(sp)
   350f4:	ddc00817 	ldw	r23,32(sp)
   350f8:	dd800717 	ldw	r22,28(sp)
   350fc:	dd400617 	ldw	r21,24(sp)
   35100:	dd000517 	ldw	r20,20(sp)
   35104:	dcc00417 	ldw	r19,16(sp)
   35108:	dc800317 	ldw	r18,12(sp)
   3510c:	dc400217 	ldw	r17,8(sp)
   35110:	dc000117 	ldw	r16,4(sp)
   35114:	dec00b04 	addi	sp,sp,44
   35118:	f800283a 	ret
   3511c:	a809883a 	mov	r4,r21
   35120:	800b883a 	mov	r5,r16
   35124:	00332e80 	call	332e8 <__swsetup_r>
   35128:	1000f01e 	bne	r2,zero,354ec <__sfvwrite_r+0x4c8>
   3512c:	8080030b 	ldhu	r2,12(r16)
   35130:	a4400017 	ldw	r17,0(r20)
   35134:	10c0008c 	andi	r3,r2,2
   35138:	18ffffcc 	andi	r3,r3,65535
   3513c:	18e0001c 	xori	r3,r3,32768
   35140:	18e00004 	addi	r3,r3,-32768
   35144:	183fd51e 	bne	r3,zero,3509c <__sfvwrite_r+0x78>
   35148:	10c0004c 	andi	r3,r2,1
   3514c:	002d883a 	mov	r22,zero
   35150:	1800381e 	bne	r3,zero,35234 <__sfvwrite_r+0x210>
   35154:	0025883a 	mov	r18,zero
   35158:	90002126 	beq	r18,zero,351e0 <__sfvwrite_r+0x1bc>
   3515c:	10c0800c 	andi	r3,r2,512
   35160:	18ffffcc 	andi	r3,r3,65535
   35164:	18e0001c 	xori	r3,r3,32768
   35168:	18e00004 	addi	r3,r3,-32768
   3516c:	84c00217 	ldw	r19,8(r16)
   35170:	18006b26 	beq	r3,zero,35320 <__sfvwrite_r+0x2fc>
   35174:	980f883a 	mov	r7,r19
   35178:	94c08636 	bltu	r18,r19,35394 <__sfvwrite_r+0x370>
   3517c:	10c1200c 	andi	r3,r2,1152
   35180:	18009f1e 	bne	r3,zero,35400 <__sfvwrite_r+0x3dc>
   35184:	81000017 	ldw	r4,0(r16)
   35188:	982f883a 	mov	r23,r19
   3518c:	9039883a 	mov	fp,r18
   35190:	9027883a 	mov	r19,r18
   35194:	380d883a 	mov	r6,r7
   35198:	b00b883a 	mov	r5,r22
   3519c:	d9c00015 	stw	r7,0(sp)
   351a0:	00358cc0 	call	358cc <memmove>
   351a4:	d9c00017 	ldw	r7,0(sp)
   351a8:	81000217 	ldw	r4,8(r16)
   351ac:	80800017 	ldw	r2,0(r16)
   351b0:	25efc83a 	sub	r23,r4,r23
   351b4:	11cf883a 	add	r7,r2,r7
   351b8:	85c00215 	stw	r23,8(r16)
   351bc:	81c00015 	stw	r7,0(r16)
   351c0:	a0800217 	ldw	r2,8(r20)
   351c4:	b72d883a 	add	r22,r22,fp
   351c8:	9725c83a 	sub	r18,r18,fp
   351cc:	14e7c83a 	sub	r19,r2,r19
   351d0:	a4c00215 	stw	r19,8(r20)
   351d4:	983fc426 	beq	r19,zero,350e8 <__sfvwrite_r+0xc4>
   351d8:	8080030b 	ldhu	r2,12(r16)
   351dc:	903fdf1e 	bne	r18,zero,3515c <__sfvwrite_r+0x138>
   351e0:	8d800017 	ldw	r22,0(r17)
   351e4:	8c800117 	ldw	r18,4(r17)
   351e8:	8c400204 	addi	r17,r17,8
   351ec:	003fda06 	br	35158 <__sfvwrite_r+0x134>
   351f0:	8cc00017 	ldw	r19,0(r17)
   351f4:	8c800117 	ldw	r18,4(r17)
   351f8:	8c400204 	addi	r17,r17,8
   351fc:	003faa06 	br	350a8 <__sfvwrite_r+0x84>
   35200:	0036b140 	call	36b14 <_realloc_r>
   35204:	102f883a 	mov	r23,r2
   35208:	10009f1e 	bne	r2,zero,35488 <__sfvwrite_r+0x464>
   3520c:	81400417 	ldw	r5,16(r16)
   35210:	a809883a 	mov	r4,r21
   35214:	002d4e40 	call	2d4e4 <_free_r>
   35218:	00800304 	movi	r2,12
   3521c:	a8800015 	stw	r2,0(r21)
   35220:	80c0030b 	ldhu	r3,12(r16)
   35224:	00bfffc4 	movi	r2,-1
   35228:	18c01014 	ori	r3,r3,64
   3522c:	80c0030d 	sth	r3,12(r16)
   35230:	003fae06 	br	350ec <__sfvwrite_r+0xc8>
   35234:	0007883a 	mov	r3,zero
   35238:	0039883a 	mov	fp,zero
   3523c:	0025883a 	mov	r18,zero
   35240:	90001e26 	beq	r18,zero,352bc <__sfvwrite_r+0x298>
   35244:	18006526 	beq	r3,zero,353dc <__sfvwrite_r+0x3b8>
   35248:	b02f883a 	mov	r23,r22
   3524c:	9580012e 	bgeu	r18,r22,35254 <__sfvwrite_r+0x230>
   35250:	902f883a 	mov	r23,r18
   35254:	81000017 	ldw	r4,0(r16)
   35258:	80800417 	ldw	r2,16(r16)
   3525c:	84c00217 	ldw	r19,8(r16)
   35260:	81c00517 	ldw	r7,20(r16)
   35264:	1100022e 	bgeu	r2,r4,35270 <__sfvwrite_r+0x24c>
   35268:	99e7883a 	add	r19,r19,r7
   3526c:	9dc01816 	blt	r19,r23,352d0 <__sfvwrite_r+0x2ac>
   35270:	b9c03b16 	blt	r23,r7,35360 <__sfvwrite_r+0x33c>
   35274:	80800917 	ldw	r2,36(r16)
   35278:	81400717 	ldw	r5,28(r16)
   3527c:	a809883a 	mov	r4,r21
   35280:	d8c00015 	stw	r3,0(sp)
   35284:	e00d883a 	mov	r6,fp
   35288:	103ee83a 	callr	r2
   3528c:	1027883a 	mov	r19,r2
   35290:	d8c00017 	ldw	r3,0(sp)
   35294:	00bfe20e 	bge	zero,r2,35220 <__sfvwrite_r+0x1fc>
   35298:	b4edc83a 	sub	r22,r22,r19
   3529c:	b0001a26 	beq	r22,zero,35308 <__sfvwrite_r+0x2e4>
   352a0:	a0800217 	ldw	r2,8(r20)
   352a4:	e4f9883a 	add	fp,fp,r19
   352a8:	94e5c83a 	sub	r18,r18,r19
   352ac:	14e7c83a 	sub	r19,r2,r19
   352b0:	a4c00215 	stw	r19,8(r20)
   352b4:	983f8c26 	beq	r19,zero,350e8 <__sfvwrite_r+0xc4>
   352b8:	903fe21e 	bne	r18,zero,35244 <__sfvwrite_r+0x220>
   352bc:	8f000017 	ldw	fp,0(r17)
   352c0:	8c800117 	ldw	r18,4(r17)
   352c4:	0007883a 	mov	r3,zero
   352c8:	8c400204 	addi	r17,r17,8
   352cc:	003fdc06 	br	35240 <__sfvwrite_r+0x21c>
   352d0:	e00b883a 	mov	r5,fp
   352d4:	980d883a 	mov	r6,r19
   352d8:	d8c00015 	stw	r3,0(sp)
   352dc:	00358cc0 	call	358cc <memmove>
   352e0:	80800017 	ldw	r2,0(r16)
   352e4:	a809883a 	mov	r4,r21
   352e8:	800b883a 	mov	r5,r16
   352ec:	14c5883a 	add	r2,r2,r19
   352f0:	80800015 	stw	r2,0(r16)
   352f4:	002ca900 	call	2ca90 <_fflush_r>
   352f8:	d8c00017 	ldw	r3,0(sp)
   352fc:	103fc81e 	bne	r2,zero,35220 <__sfvwrite_r+0x1fc>
   35300:	b4edc83a 	sub	r22,r22,r19
   35304:	b03fe61e 	bne	r22,zero,352a0 <__sfvwrite_r+0x27c>
   35308:	a809883a 	mov	r4,r21
   3530c:	800b883a 	mov	r5,r16
   35310:	002ca900 	call	2ca90 <_fflush_r>
   35314:	103fc21e 	bne	r2,zero,35220 <__sfvwrite_r+0x1fc>
   35318:	0007883a 	mov	r3,zero
   3531c:	003fe006 	br	352a0 <__sfvwrite_r+0x27c>
   35320:	81000017 	ldw	r4,0(r16)
   35324:	80800417 	ldw	r2,16(r16)
   35328:	1100022e 	bgeu	r2,r4,35334 <__sfvwrite_r+0x310>
   3532c:	9839883a 	mov	fp,r19
   35330:	9c806036 	bltu	r19,r18,354b4 <__sfvwrite_r+0x490>
   35334:	81c00517 	ldw	r7,20(r16)
   35338:	91c01c36 	bltu	r18,r7,353ac <__sfvwrite_r+0x388>
   3533c:	80800917 	ldw	r2,36(r16)
   35340:	81400717 	ldw	r5,28(r16)
   35344:	a809883a 	mov	r4,r21
   35348:	b00d883a 	mov	r6,r22
   3534c:	103ee83a 	callr	r2
   35350:	1027883a 	mov	r19,r2
   35354:	00bfb20e 	bge	zero,r2,35220 <__sfvwrite_r+0x1fc>
   35358:	1039883a 	mov	fp,r2
   3535c:	003f9806 	br	351c0 <__sfvwrite_r+0x19c>
   35360:	b80d883a 	mov	r6,r23
   35364:	e00b883a 	mov	r5,fp
   35368:	d8c00015 	stw	r3,0(sp)
   3536c:	00358cc0 	call	358cc <memmove>
   35370:	80800217 	ldw	r2,8(r16)
   35374:	81000017 	ldw	r4,0(r16)
   35378:	b827883a 	mov	r19,r23
   3537c:	15c5c83a 	sub	r2,r2,r23
   35380:	25ef883a 	add	r23,r4,r23
   35384:	80800215 	stw	r2,8(r16)
   35388:	85c00015 	stw	r23,0(r16)
   3538c:	d8c00017 	ldw	r3,0(sp)
   35390:	003fc106 	br	35298 <__sfvwrite_r+0x274>
   35394:	81000017 	ldw	r4,0(r16)
   35398:	902f883a 	mov	r23,r18
   3539c:	9039883a 	mov	fp,r18
   353a0:	9027883a 	mov	r19,r18
   353a4:	900f883a 	mov	r7,r18
   353a8:	003f7a06 	br	35194 <__sfvwrite_r+0x170>
   353ac:	b00b883a 	mov	r5,r22
   353b0:	900d883a 	mov	r6,r18
   353b4:	00358cc0 	call	358cc <memmove>
   353b8:	80c00217 	ldw	r3,8(r16)
   353bc:	80800017 	ldw	r2,0(r16)
   353c0:	9027883a 	mov	r19,r18
   353c4:	1c87c83a 	sub	r3,r3,r18
   353c8:	1485883a 	add	r2,r2,r18
   353cc:	80c00215 	stw	r3,8(r16)
   353d0:	80800015 	stw	r2,0(r16)
   353d4:	9039883a 	mov	fp,r18
   353d8:	003f7906 	br	351c0 <__sfvwrite_r+0x19c>
   353dc:	e009883a 	mov	r4,fp
   353e0:	01400284 	movi	r5,10
   353e4:	900d883a 	mov	r6,r18
   353e8:	00357d40 	call	357d4 <memchr>
   353ec:	10003c26 	beq	r2,zero,354e0 <__sfvwrite_r+0x4bc>
   353f0:	15800044 	addi	r22,r2,1
   353f4:	b72dc83a 	sub	r22,r22,fp
   353f8:	00c00044 	movi	r3,1
   353fc:	003f9206 	br	35248 <__sfvwrite_r+0x224>
   35400:	81000517 	ldw	r4,20(r16)
   35404:	81400417 	ldw	r5,16(r16)
   35408:	80c00017 	ldw	r3,0(r16)
   3540c:	210d883a 	add	r6,r4,r4
   35410:	3109883a 	add	r4,r6,r4
   35414:	2026d7fa 	srli	r19,r4,31
   35418:	1979c83a 	sub	fp,r3,r5
   3541c:	e1800044 	addi	r6,fp,1
   35420:	9909883a 	add	r4,r19,r4
   35424:	2027d07a 	srai	r19,r4,1
   35428:	3489883a 	add	r4,r6,r18
   3542c:	980d883a 	mov	r6,r19
   35430:	9900022e 	bgeu	r19,r4,3543c <__sfvwrite_r+0x418>
   35434:	2027883a 	mov	r19,r4
   35438:	200d883a 	mov	r6,r4
   3543c:	1081000c 	andi	r2,r2,1024
   35440:	10bfffcc 	andi	r2,r2,65535
   35444:	10a0001c 	xori	r2,r2,32768
   35448:	10a00004 	addi	r2,r2,-32768
   3544c:	a809883a 	mov	r4,r21
   35450:	103f6b26 	beq	r2,zero,35200 <__sfvwrite_r+0x1dc>
   35454:	300b883a 	mov	r5,r6
   35458:	002e3680 	call	2e368 <_malloc_r>
   3545c:	102f883a 	mov	r23,r2
   35460:	103f6d26 	beq	r2,zero,35218 <__sfvwrite_r+0x1f4>
   35464:	81400417 	ldw	r5,16(r16)
   35468:	1009883a 	mov	r4,r2
   3546c:	e00d883a 	mov	r6,fp
   35470:	002eaec0 	call	2eaec <memcpy>
   35474:	8080030b 	ldhu	r2,12(r16)
   35478:	00fedfc4 	movi	r3,-1153
   3547c:	10c4703a 	and	r2,r2,r3
   35480:	10802014 	ori	r2,r2,128
   35484:	8080030d 	sth	r2,12(r16)
   35488:	bf09883a 	add	r4,r23,fp
   3548c:	9f07c83a 	sub	r3,r19,fp
   35490:	85c00415 	stw	r23,16(r16)
   35494:	84c00515 	stw	r19,20(r16)
   35498:	81000015 	stw	r4,0(r16)
   3549c:	902f883a 	mov	r23,r18
   354a0:	80c00215 	stw	r3,8(r16)
   354a4:	9039883a 	mov	fp,r18
   354a8:	9027883a 	mov	r19,r18
   354ac:	900f883a 	mov	r7,r18
   354b0:	003f3806 	br	35194 <__sfvwrite_r+0x170>
   354b4:	b00b883a 	mov	r5,r22
   354b8:	980d883a 	mov	r6,r19
   354bc:	00358cc0 	call	358cc <memmove>
   354c0:	80800017 	ldw	r2,0(r16)
   354c4:	a809883a 	mov	r4,r21
   354c8:	800b883a 	mov	r5,r16
   354cc:	14c5883a 	add	r2,r2,r19
   354d0:	80800015 	stw	r2,0(r16)
   354d4:	002ca900 	call	2ca90 <_fflush_r>
   354d8:	103f3926 	beq	r2,zero,351c0 <__sfvwrite_r+0x19c>
   354dc:	003f5006 	br	35220 <__sfvwrite_r+0x1fc>
   354e0:	95800044 	addi	r22,r18,1
   354e4:	00c00044 	movi	r3,1
   354e8:	003f5706 	br	35248 <__sfvwrite_r+0x224>
   354ec:	80c0030b 	ldhu	r3,12(r16)
   354f0:	00bfffc4 	movi	r2,-1
   354f4:	18c01014 	ori	r3,r3,64
   354f8:	80c0030d 	sth	r3,12(r16)
   354fc:	00c00244 	movi	r3,9
   35500:	a8c00015 	stw	r3,0(r21)
   35504:	003ef906 	br	350ec <__sfvwrite_r+0xc8>

00035508 <_isatty_r>:
   35508:	defffd04 	addi	sp,sp,-12
   3550c:	dc400115 	stw	r17,4(sp)
   35510:	dc000015 	stw	r16,0(sp)
   35514:	2023883a 	mov	r17,r4
   35518:	04000134 	movhi	r16,4
   3551c:	84129704 	addi	r16,r16,19036
   35520:	2809883a 	mov	r4,r5
   35524:	dfc00215 	stw	ra,8(sp)
   35528:	80000015 	stw	zero,0(r16)
   3552c:	003bfc00 	call	3bfc0 <isatty>
   35530:	00ffffc4 	movi	r3,-1
   35534:	10c00526 	beq	r2,r3,3554c <_isatty_r+0x44>
   35538:	dfc00217 	ldw	ra,8(sp)
   3553c:	dc400117 	ldw	r17,4(sp)
   35540:	dc000017 	ldw	r16,0(sp)
   35544:	dec00304 	addi	sp,sp,12
   35548:	f800283a 	ret
   3554c:	80c00017 	ldw	r3,0(r16)
   35550:	183ff926 	beq	r3,zero,35538 <_isatty_r+0x30>
   35554:	88c00015 	stw	r3,0(r17)
   35558:	dfc00217 	ldw	ra,8(sp)
   3555c:	dc400117 	ldw	r17,4(sp)
   35560:	dc000017 	ldw	r16,0(sp)
   35564:	dec00304 	addi	sp,sp,12
   35568:	f800283a 	ret

0003556c <iswspace>:
   3556c:	00803fc4 	movi	r2,255
   35570:	11000a36 	bltu	r2,r4,3559c <iswspace+0x30>
   35574:	00800134 	movhi	r2,4
   35578:	108bb104 	addi	r2,r2,11972
   3557c:	10800017 	ldw	r2,0(r2)
   35580:	1109883a 	add	r4,r2,r4
   35584:	20800003 	ldbu	r2,0(r4)
   35588:	1080020c 	andi	r2,r2,8
   3558c:	10803fcc 	andi	r2,r2,255
   35590:	1080201c 	xori	r2,r2,128
   35594:	10bfe004 	addi	r2,r2,-128
   35598:	f800283a 	ret
   3559c:	0005883a 	mov	r2,zero
   355a0:	f800283a 	ret

000355a4 <_setlocale_r>:
   355a4:	defffc04 	addi	sp,sp,-16
   355a8:	dc800215 	stw	r18,8(sp)
   355ac:	dc400115 	stw	r17,4(sp)
   355b0:	dc000015 	stw	r16,0(sp)
   355b4:	dfc00315 	stw	ra,12(sp)
   355b8:	3021883a 	mov	r16,r6
   355bc:	2023883a 	mov	r17,r4
   355c0:	2825883a 	mov	r18,r5
   355c4:	30001626 	beq	r6,zero,35620 <_setlocale_r+0x7c>
   355c8:	3009883a 	mov	r4,r6
   355cc:	01400134 	movhi	r5,4
   355d0:	29446404 	addi	r5,r5,4496
   355d4:	002f5300 	call	2f530 <strcmp>
   355d8:	10000a1e 	bne	r2,zero,35604 <_setlocale_r+0x60>
   355dc:	8c800c15 	stw	r18,48(r17)
   355e0:	8c000d15 	stw	r16,52(r17)
   355e4:	00800134 	movhi	r2,4
   355e8:	10846404 	addi	r2,r2,4496
   355ec:	dfc00317 	ldw	ra,12(sp)
   355f0:	dc800217 	ldw	r18,8(sp)
   355f4:	dc400117 	ldw	r17,4(sp)
   355f8:	dc000017 	ldw	r16,0(sp)
   355fc:	dec00404 	addi	sp,sp,16
   35600:	f800283a 	ret
   35604:	8009883a 	mov	r4,r16
   35608:	01400134 	movhi	r5,4
   3560c:	29447704 	addi	r5,r5,4572
   35610:	002f5300 	call	2f530 <strcmp>
   35614:	103ff126 	beq	r2,zero,355dc <_setlocale_r+0x38>
   35618:	0005883a 	mov	r2,zero
   3561c:	003ff306 	br	355ec <_setlocale_r+0x48>
   35620:	00800134 	movhi	r2,4
   35624:	10846404 	addi	r2,r2,4496
   35628:	dfc00317 	ldw	ra,12(sp)
   3562c:	dc800217 	ldw	r18,8(sp)
   35630:	dc400117 	ldw	r17,4(sp)
   35634:	dc000017 	ldw	r16,0(sp)
   35638:	dec00404 	addi	sp,sp,16
   3563c:	f800283a 	ret

00035640 <__locale_charset>:
   35640:	00800134 	movhi	r2,4
   35644:	10849604 	addi	r2,r2,4696
   35648:	f800283a 	ret

0003564c <_localeconv_r>:
   3564c:	00800134 	movhi	r2,4
   35650:	10849a04 	addi	r2,r2,4712
   35654:	f800283a 	ret

00035658 <setlocale>:
   35658:	00c00134 	movhi	r3,4
   3565c:	18cbb304 	addi	r3,r3,11980
   35660:	2005883a 	mov	r2,r4
   35664:	19000017 	ldw	r4,0(r3)
   35668:	280d883a 	mov	r6,r5
   3566c:	100b883a 	mov	r5,r2
   35670:	00355a41 	jmpi	355a4 <_setlocale_r>

00035674 <localeconv>:
   35674:	00800134 	movhi	r2,4
   35678:	10849a04 	addi	r2,r2,4712
   3567c:	f800283a 	ret

00035680 <_lseek_r>:
   35680:	defffd04 	addi	sp,sp,-12
   35684:	dc400115 	stw	r17,4(sp)
   35688:	dc000015 	stw	r16,0(sp)
   3568c:	2023883a 	mov	r17,r4
   35690:	04000134 	movhi	r16,4
   35694:	84129704 	addi	r16,r16,19036
   35698:	2809883a 	mov	r4,r5
   3569c:	300b883a 	mov	r5,r6
   356a0:	380d883a 	mov	r6,r7
   356a4:	dfc00215 	stw	ra,8(sp)
   356a8:	80000015 	stw	zero,0(r16)
   356ac:	003c3200 	call	3c320 <lseek>
   356b0:	00ffffc4 	movi	r3,-1
   356b4:	10c00526 	beq	r2,r3,356cc <_lseek_r+0x4c>
   356b8:	dfc00217 	ldw	ra,8(sp)
   356bc:	dc400117 	ldw	r17,4(sp)
   356c0:	dc000017 	ldw	r16,0(sp)
   356c4:	dec00304 	addi	sp,sp,12
   356c8:	f800283a 	ret
   356cc:	80c00017 	ldw	r3,0(r16)
   356d0:	183ff926 	beq	r3,zero,356b8 <_lseek_r+0x38>
   356d4:	88c00015 	stw	r3,0(r17)
   356d8:	dfc00217 	ldw	ra,8(sp)
   356dc:	dc400117 	ldw	r17,4(sp)
   356e0:	dc000017 	ldw	r16,0(sp)
   356e4:	dec00304 	addi	sp,sp,12
   356e8:	f800283a 	ret

000356ec <_mbrtowc_r>:
   356ec:	defffc04 	addi	sp,sp,-16
   356f0:	dc000115 	stw	r16,4(sp)
   356f4:	dc000417 	ldw	r16,16(sp)
   356f8:	dc400215 	stw	r17,8(sp)
   356fc:	dfc00315 	stw	ra,12(sp)
   35700:	dc000015 	stw	r16,0(sp)
   35704:	2023883a 	mov	r17,r4
   35708:	30000b26 	beq	r6,zero,35738 <_mbrtowc_r+0x4c>
   3570c:	00357900 	call	35790 <_mbtowc_r>
   35710:	00ffffc4 	movi	r3,-1
   35714:	10c0031e 	bne	r2,r3,35724 <_mbrtowc_r+0x38>
   35718:	80000015 	stw	zero,0(r16)
   3571c:	00c02284 	movi	r3,138
   35720:	88c00015 	stw	r3,0(r17)
   35724:	dfc00317 	ldw	ra,12(sp)
   35728:	dc400217 	ldw	r17,8(sp)
   3572c:	dc000117 	ldw	r16,4(sp)
   35730:	dec00404 	addi	sp,sp,16
   35734:	f800283a 	ret
   35738:	000b883a 	mov	r5,zero
   3573c:	01800134 	movhi	r6,4
   35740:	31847704 	addi	r6,r6,4572
   35744:	01c00044 	movi	r7,1
   35748:	00357900 	call	35790 <_mbtowc_r>
   3574c:	003ff006 	br	35710 <_mbrtowc_r+0x24>

00035750 <mbrtowc>:
   35750:	00800134 	movhi	r2,4
   35754:	108bb304 	addi	r2,r2,11980
   35758:	2011883a 	mov	r8,r4
   3575c:	11000017 	ldw	r4,0(r2)
   35760:	defffe04 	addi	sp,sp,-8
   35764:	2807883a 	mov	r3,r5
   35768:	3005883a 	mov	r2,r6
   3576c:	d9c00015 	stw	r7,0(sp)
   35770:	400b883a 	mov	r5,r8
   35774:	180d883a 	mov	r6,r3
   35778:	100f883a 	mov	r7,r2
   3577c:	dfc00115 	stw	ra,4(sp)
   35780:	00356ec0 	call	356ec <_mbrtowc_r>
   35784:	dfc00117 	ldw	ra,4(sp)
   35788:	dec00204 	addi	sp,sp,8
   3578c:	f800283a 	ret

00035790 <_mbtowc_r>:
   35790:	deffff04 	addi	sp,sp,-4
   35794:	28000826 	beq	r5,zero,357b8 <_mbtowc_r+0x28>
   35798:	30000926 	beq	r6,zero,357c0 <_mbtowc_r+0x30>
   3579c:	38000b26 	beq	r7,zero,357cc <_mbtowc_r+0x3c>
   357a0:	30800003 	ldbu	r2,0(r6)
   357a4:	28800015 	stw	r2,0(r5)
   357a8:	30800003 	ldbu	r2,0(r6)
   357ac:	1004c03a 	cmpne	r2,r2,zero
   357b0:	dec00104 	addi	sp,sp,4
   357b4:	f800283a 	ret
   357b8:	d80b883a 	mov	r5,sp
   357bc:	303ff71e 	bne	r6,zero,3579c <_mbtowc_r+0xc>
   357c0:	0005883a 	mov	r2,zero
   357c4:	dec00104 	addi	sp,sp,4
   357c8:	f800283a 	ret
   357cc:	00bfff84 	movi	r2,-2
   357d0:	003ff706 	br	357b0 <_mbtowc_r+0x20>

000357d4 <memchr>:
   357d4:	008000c4 	movi	r2,3
   357d8:	29403fcc 	andi	r5,r5,255
   357dc:	1180282e 	bgeu	r2,r6,35880 <memchr+0xac>
   357e0:	2086703a 	and	r3,r4,r2
   357e4:	1800351e 	bne	r3,zero,358bc <memchr+0xe8>
   357e8:	2816923a 	slli	r11,r5,8
   357ec:	2093883a 	add	r9,r4,r2
   357f0:	22000084 	addi	r8,r4,2
   357f4:	5957883a 	add	r11,r11,r5
   357f8:	5816923a 	slli	r11,r11,8
   357fc:	20c00044 	addi	r3,r4,1
   35800:	037fbff4 	movhi	r13,65279
   35804:	6b7fbfc4 	addi	r13,r13,-257
   35808:	5957883a 	add	r11,r11,r5
   3580c:	5816923a 	slli	r11,r11,8
   35810:	03202074 	movhi	r12,32897
   35814:	63202004 	addi	r12,r12,-32640
   35818:	101d883a 	mov	r14,r2
   3581c:	5957883a 	add	r11,r11,r5
   35820:	21c00017 	ldw	r7,0(r4)
   35824:	31bfff04 	addi	r6,r6,-4
   35828:	1805883a 	mov	r2,r3
   3582c:	3acef03a 	xor	r7,r7,r11
   35830:	3b55883a 	add	r10,r7,r13
   35834:	01ce303a 	nor	r7,zero,r7
   35838:	51ce703a 	and	r7,r10,r7
   3583c:	3b0e703a 	and	r7,r7,r12
   35840:	38000a26 	beq	r7,zero,3586c <memchr+0x98>
   35844:	21c00003 	ldbu	r7,0(r4)
   35848:	39401e26 	beq	r7,r5,358c4 <memchr+0xf0>
   3584c:	19c00003 	ldbu	r7,0(r3)
   35850:	39401926 	beq	r7,r5,358b8 <memchr+0xe4>
   35854:	41c00003 	ldbu	r7,0(r8)
   35858:	4005883a 	mov	r2,r8
   3585c:	39401626 	beq	r7,r5,358b8 <memchr+0xe4>
   35860:	49c00003 	ldbu	r7,0(r9)
   35864:	4805883a 	mov	r2,r9
   35868:	39401326 	beq	r7,r5,358b8 <memchr+0xe4>
   3586c:	21000104 	addi	r4,r4,4
   35870:	4a400104 	addi	r9,r9,4
   35874:	42000104 	addi	r8,r8,4
   35878:	18c00104 	addi	r3,r3,4
   3587c:	71bfe836 	bltu	r14,r6,35820 <memchr+0x4c>
   35880:	2005883a 	mov	r2,r4
   35884:	30000a26 	beq	r6,zero,358b0 <memchr+0xdc>
   35888:	10c00003 	ldbu	r3,0(r2)
   3588c:	19400a26 	beq	r3,r5,358b8 <memchr+0xe4>
   35890:	10c00044 	addi	r3,r2,1
   35894:	118d883a 	add	r6,r2,r6
   35898:	00000306 	br	358a8 <memchr+0xd4>
   3589c:	11000003 	ldbu	r4,0(r2)
   358a0:	18c00044 	addi	r3,r3,1
   358a4:	21400426 	beq	r4,r5,358b8 <memchr+0xe4>
   358a8:	1805883a 	mov	r2,r3
   358ac:	19bffb1e 	bne	r3,r6,3589c <memchr+0xc8>
   358b0:	0005883a 	mov	r2,zero
   358b4:	f800283a 	ret
   358b8:	f800283a 	ret
   358bc:	2005883a 	mov	r2,r4
   358c0:	003ff106 	br	35888 <memchr+0xb4>
   358c4:	2005883a 	mov	r2,r4
   358c8:	f800283a 	ret

000358cc <memmove>:
   358cc:	defffb04 	addi	sp,sp,-20
   358d0:	dc000015 	stw	r16,0(sp)
   358d4:	dfc00415 	stw	ra,16(sp)
   358d8:	dcc00315 	stw	r19,12(sp)
   358dc:	dc800215 	stw	r18,8(sp)
   358e0:	dc400115 	stw	r17,4(sp)
   358e4:	2021883a 	mov	r16,r4
   358e8:	300f883a 	mov	r7,r6
   358ec:	2900122e 	bgeu	r5,r4,35938 <memmove+0x6c>
   358f0:	2987883a 	add	r3,r5,r6
   358f4:	20c0102e 	bgeu	r4,r3,35938 <memmove+0x6c>
   358f8:	218b883a 	add	r5,r4,r6
   358fc:	1989c83a 	sub	r4,r3,r6
   35900:	30000526 	beq	r6,zero,35918 <memmove+0x4c>
   35904:	18ffffc4 	addi	r3,r3,-1
   35908:	18800003 	ldbu	r2,0(r3)
   3590c:	297fffc4 	addi	r5,r5,-1
   35910:	28800005 	stb	r2,0(r5)
   35914:	193ffb1e 	bne	r3,r4,35904 <memmove+0x38>
   35918:	8005883a 	mov	r2,r16
   3591c:	dfc00417 	ldw	ra,16(sp)
   35920:	dcc00317 	ldw	r19,12(sp)
   35924:	dc800217 	ldw	r18,8(sp)
   35928:	dc400117 	ldw	r17,4(sp)
   3592c:	dc000017 	ldw	r16,0(sp)
   35930:	dec00504 	addi	sp,sp,20
   35934:	f800283a 	ret
   35938:	008003c4 	movi	r2,15
   3593c:	1180422e 	bgeu	r2,r6,35a48 <memmove+0x17c>
   35940:	2c04b03a 	or	r2,r5,r16
   35944:	108000cc 	andi	r2,r2,3
   35948:	10003f1e 	bne	r2,zero,35a48 <memmove+0x17c>
   3594c:	32bffc04 	addi	r10,r6,-16
   35950:	5014d13a 	srli	r10,r10,4
   35954:	81000404 	addi	r4,r16,16
   35958:	8007883a 	mov	r3,r16
   3595c:	5004913a 	slli	r2,r10,4
   35960:	280f883a 	mov	r7,r5
   35964:	2089883a 	add	r4,r4,r2
   35968:	38800017 	ldw	r2,0(r7)
   3596c:	18c00404 	addi	r3,r3,16
   35970:	39c00404 	addi	r7,r7,16
   35974:	18bffc15 	stw	r2,-16(r3)
   35978:	38bffd17 	ldw	r2,-12(r7)
   3597c:	18bffd15 	stw	r2,-12(r3)
   35980:	38bffe17 	ldw	r2,-8(r7)
   35984:	18bffe15 	stw	r2,-8(r3)
   35988:	38bfff17 	ldw	r2,-4(r7)
   3598c:	18bfff15 	stw	r2,-4(r3)
   35990:	193ff51e 	bne	r3,r4,35968 <memmove+0x9c>
   35994:	52800044 	addi	r10,r10,1
   35998:	5014913a 	slli	r10,r10,4
   3599c:	31c003cc 	andi	r7,r6,15
   359a0:	008000c4 	movi	r2,3
   359a4:	8287883a 	add	r3,r16,r10
   359a8:	2a95883a 	add	r10,r5,r10
   359ac:	11c0282e 	bgeu	r2,r7,35a50 <memmove+0x184>
   359b0:	3c7fff04 	addi	r17,r7,-4
   359b4:	8808d0ba 	srli	r4,r17,2
   359b8:	1a400104 	addi	r9,r3,4
   359bc:	180d883a 	mov	r6,r3
   359c0:	2105883a 	add	r2,r4,r4
   359c4:	1085883a 	add	r2,r2,r2
   359c8:	4893883a 	add	r9,r9,r2
   359cc:	5005883a 	mov	r2,r10
   359d0:	12000017 	ldw	r8,0(r2)
   359d4:	31800104 	addi	r6,r6,4
   359d8:	10800104 	addi	r2,r2,4
   359dc:	323fff15 	stw	r8,-4(r6)
   359e0:	327ffb1e 	bne	r6,r9,359d0 <memmove+0x104>
   359e4:	20800044 	addi	r2,r4,1
   359e8:	1085883a 	add	r2,r2,r2
   359ec:	1085883a 	add	r2,r2,r2
   359f0:	017fff04 	movi	r5,-4
   359f4:	18a5883a 	add	r18,r3,r2
   359f8:	50a7883a 	add	r19,r10,r2
   359fc:	002c1540 	call	2c154 <__mulsi3>
   35a00:	144f883a 	add	r7,r2,r17
   35a04:	980b883a 	mov	r5,r19
   35a08:	9007883a 	mov	r3,r18
   35a0c:	383fc226 	beq	r7,zero,35918 <memmove+0x4c>
   35a10:	19cf883a 	add	r7,r3,r7
   35a14:	29800003 	ldbu	r6,0(r5)
   35a18:	18c00044 	addi	r3,r3,1
   35a1c:	29400044 	addi	r5,r5,1
   35a20:	19bfffc5 	stb	r6,-1(r3)
   35a24:	19fffb1e 	bne	r3,r7,35a14 <memmove+0x148>
   35a28:	8005883a 	mov	r2,r16
   35a2c:	dfc00417 	ldw	ra,16(sp)
   35a30:	dcc00317 	ldw	r19,12(sp)
   35a34:	dc800217 	ldw	r18,8(sp)
   35a38:	dc400117 	ldw	r17,4(sp)
   35a3c:	dc000017 	ldw	r16,0(sp)
   35a40:	dec00504 	addi	sp,sp,20
   35a44:	f800283a 	ret
   35a48:	8007883a 	mov	r3,r16
   35a4c:	003fef06 	br	35a0c <memmove+0x140>
   35a50:	500b883a 	mov	r5,r10
   35a54:	003fed06 	br	35a0c <memmove+0x140>

00035a58 <_Balloc>:
   35a58:	20801317 	ldw	r2,76(r4)
   35a5c:	defffc04 	addi	sp,sp,-16
   35a60:	dc400115 	stw	r17,4(sp)
   35a64:	dc000015 	stw	r16,0(sp)
   35a68:	dfc00315 	stw	ra,12(sp)
   35a6c:	dc800215 	stw	r18,8(sp)
   35a70:	2023883a 	mov	r17,r4
   35a74:	2821883a 	mov	r16,r5
   35a78:	10000f26 	beq	r2,zero,35ab8 <_Balloc+0x60>
   35a7c:	8407883a 	add	r3,r16,r16
   35a80:	18c7883a 	add	r3,r3,r3
   35a84:	10c7883a 	add	r3,r2,r3
   35a88:	18800017 	ldw	r2,0(r3)
   35a8c:	10001126 	beq	r2,zero,35ad4 <_Balloc+0x7c>
   35a90:	11000017 	ldw	r4,0(r2)
   35a94:	19000015 	stw	r4,0(r3)
   35a98:	10000415 	stw	zero,16(r2)
   35a9c:	10000315 	stw	zero,12(r2)
   35aa0:	dfc00317 	ldw	ra,12(sp)
   35aa4:	dc800217 	ldw	r18,8(sp)
   35aa8:	dc400117 	ldw	r17,4(sp)
   35aac:	dc000017 	ldw	r16,0(sp)
   35ab0:	dec00404 	addi	sp,sp,16
   35ab4:	f800283a 	ret
   35ab8:	01400104 	movi	r5,4
   35abc:	01800404 	movi	r6,16
   35ac0:	00398a80 	call	398a8 <_calloc_r>
   35ac4:	88801315 	stw	r2,76(r17)
   35ac8:	103fec1e 	bne	r2,zero,35a7c <_Balloc+0x24>
   35acc:	0005883a 	mov	r2,zero
   35ad0:	003ff306 	br	35aa0 <_Balloc+0x48>
   35ad4:	01400044 	movi	r5,1
   35ad8:	2c24983a 	sll	r18,r5,r16
   35adc:	8809883a 	mov	r4,r17
   35ae0:	91800144 	addi	r6,r18,5
   35ae4:	318d883a 	add	r6,r6,r6
   35ae8:	318d883a 	add	r6,r6,r6
   35aec:	00398a80 	call	398a8 <_calloc_r>
   35af0:	103ff626 	beq	r2,zero,35acc <_Balloc+0x74>
   35af4:	14000115 	stw	r16,4(r2)
   35af8:	14800215 	stw	r18,8(r2)
   35afc:	003fe606 	br	35a98 <_Balloc+0x40>

00035b00 <_Bfree>:
   35b00:	28000826 	beq	r5,zero,35b24 <_Bfree+0x24>
   35b04:	28c00117 	ldw	r3,4(r5)
   35b08:	20801317 	ldw	r2,76(r4)
   35b0c:	18c7883a 	add	r3,r3,r3
   35b10:	18c7883a 	add	r3,r3,r3
   35b14:	10c5883a 	add	r2,r2,r3
   35b18:	10c00017 	ldw	r3,0(r2)
   35b1c:	28c00015 	stw	r3,0(r5)
   35b20:	11400015 	stw	r5,0(r2)
   35b24:	f800283a 	ret

00035b28 <__multadd>:
   35b28:	defff604 	addi	sp,sp,-40
   35b2c:	dd400515 	stw	r21,20(sp)
   35b30:	2d400417 	ldw	r21,16(r5)
   35b34:	df000815 	stw	fp,32(sp)
   35b38:	ddc00715 	stw	r23,28(sp)
   35b3c:	dd800615 	stw	r22,24(sp)
   35b40:	dd000415 	stw	r20,16(sp)
   35b44:	dc400115 	stw	r17,4(sp)
   35b48:	dc000015 	stw	r16,0(sp)
   35b4c:	dfc00915 	stw	ra,36(sp)
   35b50:	dcc00315 	stw	r19,12(sp)
   35b54:	dc800215 	stw	r18,8(sp)
   35b58:	282d883a 	mov	r22,r5
   35b5c:	202f883a 	mov	r23,r4
   35b60:	3029883a 	mov	r20,r6
   35b64:	3839883a 	mov	fp,r7
   35b68:	2c000504 	addi	r16,r5,20
   35b6c:	0023883a 	mov	r17,zero
   35b70:	84c00017 	ldw	r19,0(r16)
   35b74:	a00b883a 	mov	r5,r20
   35b78:	8c400044 	addi	r17,r17,1
   35b7c:	993fffcc 	andi	r4,r19,65535
   35b80:	002c1540 	call	2c154 <__mulsi3>
   35b84:	1725883a 	add	r18,r2,fp
   35b88:	9808d43a 	srli	r4,r19,16
   35b8c:	9026d43a 	srli	r19,r18,16
   35b90:	a00b883a 	mov	r5,r20
   35b94:	002c1540 	call	2c154 <__mulsi3>
   35b98:	988f883a 	add	r7,r19,r2
   35b9c:	3804943a 	slli	r2,r7,16
   35ba0:	94bfffcc 	andi	r18,r18,65535
   35ba4:	3838d43a 	srli	fp,r7,16
   35ba8:	14a5883a 	add	r18,r2,r18
   35bac:	84800015 	stw	r18,0(r16)
   35bb0:	84000104 	addi	r16,r16,4
   35bb4:	8d7fee16 	blt	r17,r21,35b70 <__multadd+0x48>
   35bb8:	e0000926 	beq	fp,zero,35be0 <__multadd+0xb8>
   35bbc:	b0800217 	ldw	r2,8(r22)
   35bc0:	a880140e 	bge	r21,r2,35c14 <__multadd+0xec>
   35bc4:	a8800144 	addi	r2,r21,5
   35bc8:	1085883a 	add	r2,r2,r2
   35bcc:	1085883a 	add	r2,r2,r2
   35bd0:	b085883a 	add	r2,r22,r2
   35bd4:	ad400044 	addi	r21,r21,1
   35bd8:	17000015 	stw	fp,0(r2)
   35bdc:	b5400415 	stw	r21,16(r22)
   35be0:	b005883a 	mov	r2,r22
   35be4:	dfc00917 	ldw	ra,36(sp)
   35be8:	df000817 	ldw	fp,32(sp)
   35bec:	ddc00717 	ldw	r23,28(sp)
   35bf0:	dd800617 	ldw	r22,24(sp)
   35bf4:	dd400517 	ldw	r21,20(sp)
   35bf8:	dd000417 	ldw	r20,16(sp)
   35bfc:	dcc00317 	ldw	r19,12(sp)
   35c00:	dc800217 	ldw	r18,8(sp)
   35c04:	dc400117 	ldw	r17,4(sp)
   35c08:	dc000017 	ldw	r16,0(sp)
   35c0c:	dec00a04 	addi	sp,sp,40
   35c10:	f800283a 	ret
   35c14:	b1400117 	ldw	r5,4(r22)
   35c18:	b809883a 	mov	r4,r23
   35c1c:	29400044 	addi	r5,r5,1
   35c20:	0035a580 	call	35a58 <_Balloc>
   35c24:	b1800417 	ldw	r6,16(r22)
   35c28:	b1400304 	addi	r5,r22,12
   35c2c:	11000304 	addi	r4,r2,12
   35c30:	31800084 	addi	r6,r6,2
   35c34:	318d883a 	add	r6,r6,r6
   35c38:	318d883a 	add	r6,r6,r6
   35c3c:	1021883a 	mov	r16,r2
   35c40:	002eaec0 	call	2eaec <memcpy>
   35c44:	b0c00117 	ldw	r3,4(r22)
   35c48:	b8801317 	ldw	r2,76(r23)
   35c4c:	18c7883a 	add	r3,r3,r3
   35c50:	18c7883a 	add	r3,r3,r3
   35c54:	10c5883a 	add	r2,r2,r3
   35c58:	10c00017 	ldw	r3,0(r2)
   35c5c:	b0c00015 	stw	r3,0(r22)
   35c60:	15800015 	stw	r22,0(r2)
   35c64:	802d883a 	mov	r22,r16
   35c68:	003fd606 	br	35bc4 <__multadd+0x9c>

00035c6c <__s2b>:
   35c6c:	defff904 	addi	sp,sp,-28
   35c70:	dd000415 	stw	r20,16(sp)
   35c74:	dc400115 	stw	r17,4(sp)
   35c78:	2829883a 	mov	r20,r5
   35c7c:	2023883a 	mov	r17,r4
   35c80:	01400244 	movi	r5,9
   35c84:	39000204 	addi	r4,r7,8
   35c88:	dcc00315 	stw	r19,12(sp)
   35c8c:	dc800215 	stw	r18,8(sp)
   35c90:	dfc00615 	stw	ra,24(sp)
   35c94:	dd400515 	stw	r21,20(sp)
   35c98:	dc000015 	stw	r16,0(sp)
   35c9c:	3825883a 	mov	r18,r7
   35ca0:	3027883a 	mov	r19,r6
   35ca4:	002c0980 	call	2c098 <__divsi3>
   35ca8:	00c00044 	movi	r3,1
   35cac:	000b883a 	mov	r5,zero
   35cb0:	1880030e 	bge	r3,r2,35cc0 <__s2b+0x54>
   35cb4:	18c7883a 	add	r3,r3,r3
   35cb8:	29400044 	addi	r5,r5,1
   35cbc:	18bffd16 	blt	r3,r2,35cb4 <__s2b+0x48>
   35cc0:	8809883a 	mov	r4,r17
   35cc4:	0035a580 	call	35a58 <_Balloc>
   35cc8:	d8c00717 	ldw	r3,28(sp)
   35ccc:	10c00515 	stw	r3,20(r2)
   35cd0:	00c00044 	movi	r3,1
   35cd4:	10c00415 	stw	r3,16(r2)
   35cd8:	00c00244 	movi	r3,9
   35cdc:	1cc0210e 	bge	r3,r19,35d64 <__s2b+0xf8>
   35ce0:	a0eb883a 	add	r21,r20,r3
   35ce4:	a821883a 	mov	r16,r21
   35ce8:	a4e9883a 	add	r20,r20,r19
   35cec:	81c00007 	ldb	r7,0(r16)
   35cf0:	8809883a 	mov	r4,r17
   35cf4:	84000044 	addi	r16,r16,1
   35cf8:	100b883a 	mov	r5,r2
   35cfc:	01800284 	movi	r6,10
   35d00:	39fff404 	addi	r7,r7,-48
   35d04:	0035b280 	call	35b28 <__multadd>
   35d08:	853ff81e 	bne	r16,r20,35cec <__s2b+0x80>
   35d0c:	ace1883a 	add	r16,r21,r19
   35d10:	843ffe04 	addi	r16,r16,-8
   35d14:	9c800a0e 	bge	r19,r18,35d40 <__s2b+0xd4>
   35d18:	94e5c83a 	sub	r18,r18,r19
   35d1c:	84a5883a 	add	r18,r16,r18
   35d20:	81c00007 	ldb	r7,0(r16)
   35d24:	8809883a 	mov	r4,r17
   35d28:	84000044 	addi	r16,r16,1
   35d2c:	100b883a 	mov	r5,r2
   35d30:	01800284 	movi	r6,10
   35d34:	39fff404 	addi	r7,r7,-48
   35d38:	0035b280 	call	35b28 <__multadd>
   35d3c:	84bff81e 	bne	r16,r18,35d20 <__s2b+0xb4>
   35d40:	dfc00617 	ldw	ra,24(sp)
   35d44:	dd400517 	ldw	r21,20(sp)
   35d48:	dd000417 	ldw	r20,16(sp)
   35d4c:	dcc00317 	ldw	r19,12(sp)
   35d50:	dc800217 	ldw	r18,8(sp)
   35d54:	dc400117 	ldw	r17,4(sp)
   35d58:	dc000017 	ldw	r16,0(sp)
   35d5c:	dec00704 	addi	sp,sp,28
   35d60:	f800283a 	ret
   35d64:	a4000284 	addi	r16,r20,10
   35d68:	1827883a 	mov	r19,r3
   35d6c:	003fe906 	br	35d14 <__s2b+0xa8>

00035d70 <__hi0bits>:
   35d70:	20bfffec 	andhi	r2,r4,65535
   35d74:	1000141e 	bne	r2,zero,35dc8 <__hi0bits+0x58>
   35d78:	2008943a 	slli	r4,r4,16
   35d7c:	00800404 	movi	r2,16
   35d80:	20ffc02c 	andhi	r3,r4,65280
   35d84:	1800021e 	bne	r3,zero,35d90 <__hi0bits+0x20>
   35d88:	2008923a 	slli	r4,r4,8
   35d8c:	10800204 	addi	r2,r2,8
   35d90:	20fc002c 	andhi	r3,r4,61440
   35d94:	1800021e 	bne	r3,zero,35da0 <__hi0bits+0x30>
   35d98:	2008913a 	slli	r4,r4,4
   35d9c:	10800104 	addi	r2,r2,4
   35da0:	20f0002c 	andhi	r3,r4,49152
   35da4:	1800031e 	bne	r3,zero,35db4 <__hi0bits+0x44>
   35da8:	2109883a 	add	r4,r4,r4
   35dac:	10800084 	addi	r2,r2,2
   35db0:	2109883a 	add	r4,r4,r4
   35db4:	20000316 	blt	r4,zero,35dc4 <__hi0bits+0x54>
   35db8:	2110002c 	andhi	r4,r4,16384
   35dbc:	2000041e 	bne	r4,zero,35dd0 <__hi0bits+0x60>
   35dc0:	00800804 	movi	r2,32
   35dc4:	f800283a 	ret
   35dc8:	0005883a 	mov	r2,zero
   35dcc:	003fec06 	br	35d80 <__hi0bits+0x10>
   35dd0:	10800044 	addi	r2,r2,1
   35dd4:	f800283a 	ret

00035dd8 <__lo0bits>:
   35dd8:	20c00017 	ldw	r3,0(r4)
   35ddc:	188001cc 	andi	r2,r3,7
   35de0:	10000826 	beq	r2,zero,35e04 <__lo0bits+0x2c>
   35de4:	1880004c 	andi	r2,r3,1
   35de8:	1000211e 	bne	r2,zero,35e70 <__lo0bits+0x98>
   35dec:	1880008c 	andi	r2,r3,2
   35df0:	1000211e 	bne	r2,zero,35e78 <__lo0bits+0xa0>
   35df4:	1806d0ba 	srli	r3,r3,2
   35df8:	00800084 	movi	r2,2
   35dfc:	20c00015 	stw	r3,0(r4)
   35e00:	f800283a 	ret
   35e04:	18bfffcc 	andi	r2,r3,65535
   35e08:	10001326 	beq	r2,zero,35e58 <__lo0bits+0x80>
   35e0c:	0005883a 	mov	r2,zero
   35e10:	19403fcc 	andi	r5,r3,255
   35e14:	2800021e 	bne	r5,zero,35e20 <__lo0bits+0x48>
   35e18:	1806d23a 	srli	r3,r3,8
   35e1c:	10800204 	addi	r2,r2,8
   35e20:	194003cc 	andi	r5,r3,15
   35e24:	2800021e 	bne	r5,zero,35e30 <__lo0bits+0x58>
   35e28:	1806d13a 	srli	r3,r3,4
   35e2c:	10800104 	addi	r2,r2,4
   35e30:	194000cc 	andi	r5,r3,3
   35e34:	2800021e 	bne	r5,zero,35e40 <__lo0bits+0x68>
   35e38:	1806d0ba 	srli	r3,r3,2
   35e3c:	10800084 	addi	r2,r2,2
   35e40:	1940004c 	andi	r5,r3,1
   35e44:	2800081e 	bne	r5,zero,35e68 <__lo0bits+0x90>
   35e48:	1806d07a 	srli	r3,r3,1
   35e4c:	1800051e 	bne	r3,zero,35e64 <__lo0bits+0x8c>
   35e50:	00800804 	movi	r2,32
   35e54:	f800283a 	ret
   35e58:	1806d43a 	srli	r3,r3,16
   35e5c:	00800404 	movi	r2,16
   35e60:	003feb06 	br	35e10 <__lo0bits+0x38>
   35e64:	10800044 	addi	r2,r2,1
   35e68:	20c00015 	stw	r3,0(r4)
   35e6c:	f800283a 	ret
   35e70:	0005883a 	mov	r2,zero
   35e74:	f800283a 	ret
   35e78:	1806d07a 	srli	r3,r3,1
   35e7c:	00800044 	movi	r2,1
   35e80:	20c00015 	stw	r3,0(r4)
   35e84:	f800283a 	ret

00035e88 <__i2b>:
   35e88:	defffd04 	addi	sp,sp,-12
   35e8c:	dc000015 	stw	r16,0(sp)
   35e90:	04000044 	movi	r16,1
   35e94:	dc400115 	stw	r17,4(sp)
   35e98:	2823883a 	mov	r17,r5
   35e9c:	800b883a 	mov	r5,r16
   35ea0:	dfc00215 	stw	ra,8(sp)
   35ea4:	0035a580 	call	35a58 <_Balloc>
   35ea8:	14400515 	stw	r17,20(r2)
   35eac:	14000415 	stw	r16,16(r2)
   35eb0:	dfc00217 	ldw	ra,8(sp)
   35eb4:	dc400117 	ldw	r17,4(sp)
   35eb8:	dc000017 	ldw	r16,0(sp)
   35ebc:	dec00304 	addi	sp,sp,12
   35ec0:	f800283a 	ret

00035ec4 <__multiply>:
   35ec4:	defff004 	addi	sp,sp,-64
   35ec8:	dc800815 	stw	r18,32(sp)
   35ecc:	dc400715 	stw	r17,28(sp)
   35ed0:	34800417 	ldw	r18,16(r6)
   35ed4:	2c400417 	ldw	r17,16(r5)
   35ed8:	ddc00d15 	stw	r23,52(sp)
   35edc:	dc000615 	stw	r16,24(sp)
   35ee0:	dfc00f15 	stw	ra,60(sp)
   35ee4:	df000e15 	stw	fp,56(sp)
   35ee8:	dd800c15 	stw	r22,48(sp)
   35eec:	dd400b15 	stw	r21,44(sp)
   35ef0:	dd000a15 	stw	r20,40(sp)
   35ef4:	dcc00915 	stw	r19,36(sp)
   35ef8:	2821883a 	mov	r16,r5
   35efc:	302f883a 	mov	r23,r6
   35f00:	8c80050e 	bge	r17,r18,35f18 <__multiply+0x54>
   35f04:	8807883a 	mov	r3,r17
   35f08:	3021883a 	mov	r16,r6
   35f0c:	9023883a 	mov	r17,r18
   35f10:	282f883a 	mov	r23,r5
   35f14:	1825883a 	mov	r18,r3
   35f18:	80800217 	ldw	r2,8(r16)
   35f1c:	8c87883a 	add	r3,r17,r18
   35f20:	d8c00115 	stw	r3,4(sp)
   35f24:	81400117 	ldw	r5,4(r16)
   35f28:	10c0010e 	bge	r2,r3,35f30 <__multiply+0x6c>
   35f2c:	29400044 	addi	r5,r5,1
   35f30:	0035a580 	call	35a58 <_Balloc>
   35f34:	d8c00117 	ldw	r3,4(sp)
   35f38:	d8800515 	stw	r2,20(sp)
   35f3c:	14c00504 	addi	r19,r2,20
   35f40:	1d400144 	addi	r21,r3,5
   35f44:	ad6b883a 	add	r21,r21,r21
   35f48:	ad6b883a 	add	r21,r21,r21
   35f4c:	156b883a 	add	r21,r2,r21
   35f50:	dd400215 	stw	r21,8(sp)
   35f54:	9805883a 	mov	r2,r19
   35f58:	9d40042e 	bgeu	r19,r21,35f6c <__multiply+0xa8>
   35f5c:	d8c00217 	ldw	r3,8(sp)
   35f60:	10000015 	stw	zero,0(r2)
   35f64:	10800104 	addi	r2,r2,4
   35f68:	10fffc36 	bltu	r2,r3,35f5c <__multiply+0x98>
   35f6c:	94800144 	addi	r18,r18,5
   35f70:	94a5883a 	add	r18,r18,r18
   35f74:	94ad883a 	add	r22,r18,r18
   35f78:	8c400144 	addi	r17,r17,5
   35f7c:	8c63883a 	add	r17,r17,r17
   35f80:	bdad883a 	add	r22,r23,r22
   35f84:	80c00504 	addi	r3,r16,20
   35f88:	8c63883a 	add	r17,r17,r17
   35f8c:	bc800504 	addi	r18,r23,20
   35f90:	dd800315 	stw	r22,12(sp)
   35f94:	d8c00415 	stw	r3,16(sp)
   35f98:	dcc00015 	stw	r19,0(sp)
   35f9c:	8463883a 	add	r17,r16,r17
   35fa0:	9580412e 	bgeu	r18,r22,360a8 <__multiply+0x1e4>
   35fa4:	90800017 	ldw	r2,0(r18)
   35fa8:	173fffcc 	andi	fp,r2,65535
   35fac:	e0001a26 	beq	fp,zero,36018 <__multiply+0x154>
   35fb0:	dd000017 	ldw	r20,0(sp)
   35fb4:	dd800417 	ldw	r22,16(sp)
   35fb8:	002b883a 	mov	r21,zero
   35fbc:	b4c00017 	ldw	r19,0(r22)
   35fc0:	a4000017 	ldw	r16,0(r20)
   35fc4:	e00b883a 	mov	r5,fp
   35fc8:	993fffcc 	andi	r4,r19,65535
   35fcc:	002c1540 	call	2c154 <__mulsi3>
   35fd0:	9808d43a 	srli	r4,r19,16
   35fd4:	817fffcc 	andi	r5,r16,65535
   35fd8:	1145883a 	add	r2,r2,r5
   35fdc:	e00b883a 	mov	r5,fp
   35fe0:	1567883a 	add	r19,r2,r21
   35fe4:	8020d43a 	srli	r16,r16,16
   35fe8:	002c1540 	call	2c154 <__mulsi3>
   35fec:	9808d43a 	srli	r4,r19,16
   35ff0:	1405883a 	add	r2,r2,r16
   35ff4:	a4c0000d 	sth	r19,0(r20)
   35ff8:	110f883a 	add	r7,r2,r4
   35ffc:	a1c0008d 	sth	r7,2(r20)
   36000:	b5800104 	addi	r22,r22,4
   36004:	382ad43a 	srli	r21,r7,16
   36008:	a5000104 	addi	r20,r20,4
   3600c:	b47feb36 	bltu	r22,r17,35fbc <__multiply+0xf8>
   36010:	a5400015 	stw	r21,0(r20)
   36014:	90800017 	ldw	r2,0(r18)
   36018:	1038d43a 	srli	fp,r2,16
   3601c:	e0001c26 	beq	fp,zero,36090 <__multiply+0x1cc>
   36020:	d8c00017 	ldw	r3,0(sp)
   36024:	dd000417 	ldw	r20,16(sp)
   36028:	002b883a 	mov	r21,zero
   3602c:	1d800017 	ldw	r22,0(r3)
   36030:	182f883a 	mov	r23,r3
   36034:	b021883a 	mov	r16,r22
   36038:	a4c00017 	ldw	r19,0(r20)
   3603c:	8020d43a 	srli	r16,r16,16
   36040:	e00b883a 	mov	r5,fp
   36044:	993fffcc 	andi	r4,r19,65535
   36048:	002c1540 	call	2c154 <__mulsi3>
   3604c:	1405883a 	add	r2,r2,r16
   36050:	9808d43a 	srli	r4,r19,16
   36054:	156b883a 	add	r21,r2,r21
   36058:	bdc00104 	addi	r23,r23,4
   3605c:	bdbfff0d 	sth	r22,-4(r23)
   36060:	bd7fff8d 	sth	r21,-2(r23)
   36064:	bc000017 	ldw	r16,0(r23)
   36068:	e00b883a 	mov	r5,fp
   3606c:	002c1540 	call	2c154 <__mulsi3>
   36070:	a80ed43a 	srli	r7,r21,16
   36074:	813fffcc 	andi	r4,r16,65535
   36078:	2085883a 	add	r2,r4,r2
   3607c:	11ed883a 	add	r22,r2,r7
   36080:	a5000104 	addi	r20,r20,4
   36084:	b02ad43a 	srli	r21,r22,16
   36088:	a47feb36 	bltu	r20,r17,36038 <__multiply+0x174>
   3608c:	bd800015 	stw	r22,0(r23)
   36090:	d8c00017 	ldw	r3,0(sp)
   36094:	94800104 	addi	r18,r18,4
   36098:	18c00104 	addi	r3,r3,4
   3609c:	d8c00015 	stw	r3,0(sp)
   360a0:	d8c00317 	ldw	r3,12(sp)
   360a4:	90ffbf36 	bltu	r18,r3,35fa4 <__multiply+0xe0>
   360a8:	d8c00117 	ldw	r3,4(sp)
   360ac:	00c00c0e 	bge	zero,r3,360e0 <__multiply+0x21c>
   360b0:	d8c00217 	ldw	r3,8(sp)
   360b4:	18bfff17 	ldw	r2,-4(r3)
   360b8:	1d7fff04 	addi	r21,r3,-4
   360bc:	10000326 	beq	r2,zero,360cc <__multiply+0x208>
   360c0:	00000706 	br	360e0 <__multiply+0x21c>
   360c4:	a8800017 	ldw	r2,0(r21)
   360c8:	1000051e 	bne	r2,zero,360e0 <__multiply+0x21c>
   360cc:	d8c00117 	ldw	r3,4(sp)
   360d0:	ad7fff04 	addi	r21,r21,-4
   360d4:	18ffffc4 	addi	r3,r3,-1
   360d8:	d8c00115 	stw	r3,4(sp)
   360dc:	183ff91e 	bne	r3,zero,360c4 <__multiply+0x200>
   360e0:	d8800517 	ldw	r2,20(sp)
   360e4:	d8c00117 	ldw	r3,4(sp)
   360e8:	10c00415 	stw	r3,16(r2)
   360ec:	dfc00f17 	ldw	ra,60(sp)
   360f0:	df000e17 	ldw	fp,56(sp)
   360f4:	ddc00d17 	ldw	r23,52(sp)
   360f8:	dd800c17 	ldw	r22,48(sp)
   360fc:	dd400b17 	ldw	r21,44(sp)
   36100:	dd000a17 	ldw	r20,40(sp)
   36104:	dcc00917 	ldw	r19,36(sp)
   36108:	dc800817 	ldw	r18,32(sp)
   3610c:	dc400717 	ldw	r17,28(sp)
   36110:	dc000617 	ldw	r16,24(sp)
   36114:	dec01004 	addi	sp,sp,64
   36118:	f800283a 	ret

0003611c <__pow5mult>:
   3611c:	defffb04 	addi	sp,sp,-20
   36120:	dcc00315 	stw	r19,12(sp)
   36124:	dc800215 	stw	r18,8(sp)
   36128:	dc000015 	stw	r16,0(sp)
   3612c:	dfc00415 	stw	ra,16(sp)
   36130:	dc400115 	stw	r17,4(sp)
   36134:	308000cc 	andi	r2,r6,3
   36138:	3021883a 	mov	r16,r6
   3613c:	2027883a 	mov	r19,r4
   36140:	2825883a 	mov	r18,r5
   36144:	10002e1e 	bne	r2,zero,36200 <__pow5mult+0xe4>
   36148:	8021d0ba 	srai	r16,r16,2
   3614c:	80001a26 	beq	r16,zero,361b8 <__pow5mult+0x9c>
   36150:	9c401217 	ldw	r17,72(r19)
   36154:	8800061e 	bne	r17,zero,36170 <__pow5mult+0x54>
   36158:	00003406 	br	3622c <__pow5mult+0x110>
   3615c:	8021d07a 	srai	r16,r16,1
   36160:	80001526 	beq	r16,zero,361b8 <__pow5mult+0x9c>
   36164:	88c00017 	ldw	r3,0(r17)
   36168:	18001b26 	beq	r3,zero,361d8 <__pow5mult+0xbc>
   3616c:	1823883a 	mov	r17,r3
   36170:	80c0004c 	andi	r3,r16,1
   36174:	183ff926 	beq	r3,zero,3615c <__pow5mult+0x40>
   36178:	900b883a 	mov	r5,r18
   3617c:	880d883a 	mov	r6,r17
   36180:	9809883a 	mov	r4,r19
   36184:	0035ec40 	call	35ec4 <__multiply>
   36188:	90001b26 	beq	r18,zero,361f8 <__pow5mult+0xdc>
   3618c:	91000117 	ldw	r4,4(r18)
   36190:	98c01317 	ldw	r3,76(r19)
   36194:	8021d07a 	srai	r16,r16,1
   36198:	2109883a 	add	r4,r4,r4
   3619c:	2109883a 	add	r4,r4,r4
   361a0:	1907883a 	add	r3,r3,r4
   361a4:	19000017 	ldw	r4,0(r3)
   361a8:	91000015 	stw	r4,0(r18)
   361ac:	1c800015 	stw	r18,0(r3)
   361b0:	1025883a 	mov	r18,r2
   361b4:	803feb1e 	bne	r16,zero,36164 <__pow5mult+0x48>
   361b8:	9005883a 	mov	r2,r18
   361bc:	dfc00417 	ldw	ra,16(sp)
   361c0:	dcc00317 	ldw	r19,12(sp)
   361c4:	dc800217 	ldw	r18,8(sp)
   361c8:	dc400117 	ldw	r17,4(sp)
   361cc:	dc000017 	ldw	r16,0(sp)
   361d0:	dec00504 	addi	sp,sp,20
   361d4:	f800283a 	ret
   361d8:	880b883a 	mov	r5,r17
   361dc:	880d883a 	mov	r6,r17
   361e0:	9809883a 	mov	r4,r19
   361e4:	0035ec40 	call	35ec4 <__multiply>
   361e8:	88800015 	stw	r2,0(r17)
   361ec:	10000015 	stw	zero,0(r2)
   361f0:	1023883a 	mov	r17,r2
   361f4:	003fde06 	br	36170 <__pow5mult+0x54>
   361f8:	1025883a 	mov	r18,r2
   361fc:	003fd706 	br	3615c <__pow5mult+0x40>
   36200:	10bfffc4 	addi	r2,r2,-1
   36204:	1085883a 	add	r2,r2,r2
   36208:	00c00134 	movhi	r3,4
   3620c:	18c4ec04 	addi	r3,r3,5040
   36210:	1085883a 	add	r2,r2,r2
   36214:	1885883a 	add	r2,r3,r2
   36218:	11800017 	ldw	r6,0(r2)
   3621c:	000f883a 	mov	r7,zero
   36220:	0035b280 	call	35b28 <__multadd>
   36224:	1025883a 	mov	r18,r2
   36228:	003fc706 	br	36148 <__pow5mult+0x2c>
   3622c:	9809883a 	mov	r4,r19
   36230:	01409c44 	movi	r5,625
   36234:	0035e880 	call	35e88 <__i2b>
   36238:	98801215 	stw	r2,72(r19)
   3623c:	1023883a 	mov	r17,r2
   36240:	10000015 	stw	zero,0(r2)
   36244:	003fca06 	br	36170 <__pow5mult+0x54>

00036248 <__lshift>:
   36248:	defff904 	addi	sp,sp,-28
   3624c:	dd400515 	stw	r21,20(sp)
   36250:	dc400115 	stw	r17,4(sp)
   36254:	2d400417 	ldw	r21,16(r5)
   36258:	3023d17a 	srai	r17,r6,5
   3625c:	28800217 	ldw	r2,8(r5)
   36260:	dd000415 	stw	r20,16(sp)
   36264:	8d6b883a 	add	r21,r17,r21
   36268:	dcc00315 	stw	r19,12(sp)
   3626c:	dc800215 	stw	r18,8(sp)
   36270:	dc000015 	stw	r16,0(sp)
   36274:	dfc00615 	stw	ra,24(sp)
   36278:	ac000044 	addi	r16,r21,1
   3627c:	2825883a 	mov	r18,r5
   36280:	3029883a 	mov	r20,r6
   36284:	2027883a 	mov	r19,r4
   36288:	29400117 	ldw	r5,4(r5)
   3628c:	1400030e 	bge	r2,r16,3629c <__lshift+0x54>
   36290:	1085883a 	add	r2,r2,r2
   36294:	29400044 	addi	r5,r5,1
   36298:	143ffd16 	blt	r2,r16,36290 <__lshift+0x48>
   3629c:	9809883a 	mov	r4,r19
   362a0:	0035a580 	call	35a58 <_Balloc>
   362a4:	10c00504 	addi	r3,r2,20
   362a8:	0440090e 	bge	zero,r17,362d0 <__lshift+0x88>
   362ac:	000f883a 	mov	r7,zero
   362b0:	18000015 	stw	zero,0(r3)
   362b4:	39c00044 	addi	r7,r7,1
   362b8:	18c00104 	addi	r3,r3,4
   362bc:	3c7ffc1e 	bne	r7,r17,362b0 <__lshift+0x68>
   362c0:	38c00144 	addi	r3,r7,5
   362c4:	18c7883a 	add	r3,r3,r3
   362c8:	18c7883a 	add	r3,r3,r3
   362cc:	10c7883a 	add	r3,r2,r3
   362d0:	92000417 	ldw	r8,16(r18)
   362d4:	a18007cc 	andi	r6,r20,31
   362d8:	91c00504 	addi	r7,r18,20
   362dc:	42000144 	addi	r8,r8,5
   362e0:	4211883a 	add	r8,r8,r8
   362e4:	4211883a 	add	r8,r8,r8
   362e8:	9211883a 	add	r8,r18,r8
   362ec:	30002226 	beq	r6,zero,36378 <__lshift+0x130>
   362f0:	02800804 	movi	r10,32
   362f4:	5195c83a 	sub	r10,r10,r6
   362f8:	000b883a 	mov	r5,zero
   362fc:	3a400017 	ldw	r9,0(r7)
   36300:	18c00104 	addi	r3,r3,4
   36304:	39c00104 	addi	r7,r7,4
   36308:	4992983a 	sll	r9,r9,r6
   3630c:	2a4ab03a 	or	r5,r5,r9
   36310:	197fff15 	stw	r5,-4(r3)
   36314:	397fff17 	ldw	r5,-4(r7)
   36318:	2a8ad83a 	srl	r5,r5,r10
   3631c:	3a3ff736 	bltu	r7,r8,362fc <__lshift+0xb4>
   36320:	19400015 	stw	r5,0(r3)
   36324:	28000126 	beq	r5,zero,3632c <__lshift+0xe4>
   36328:	ac000084 	addi	r16,r21,2
   3632c:	91000117 	ldw	r4,4(r18)
   36330:	98c01317 	ldw	r3,76(r19)
   36334:	843fffc4 	addi	r16,r16,-1
   36338:	2109883a 	add	r4,r4,r4
   3633c:	2109883a 	add	r4,r4,r4
   36340:	1907883a 	add	r3,r3,r4
   36344:	19000017 	ldw	r4,0(r3)
   36348:	14000415 	stw	r16,16(r2)
   3634c:	91000015 	stw	r4,0(r18)
   36350:	1c800015 	stw	r18,0(r3)
   36354:	dfc00617 	ldw	ra,24(sp)
   36358:	dd400517 	ldw	r21,20(sp)
   3635c:	dd000417 	ldw	r20,16(sp)
   36360:	dcc00317 	ldw	r19,12(sp)
   36364:	dc800217 	ldw	r18,8(sp)
   36368:	dc400117 	ldw	r17,4(sp)
   3636c:	dc000017 	ldw	r16,0(sp)
   36370:	dec00704 	addi	sp,sp,28
   36374:	f800283a 	ret
   36378:	39400017 	ldw	r5,0(r7)
   3637c:	18c00104 	addi	r3,r3,4
   36380:	39c00104 	addi	r7,r7,4
   36384:	197fff15 	stw	r5,-4(r3)
   36388:	3a3fe82e 	bgeu	r7,r8,3632c <__lshift+0xe4>
   3638c:	39400017 	ldw	r5,0(r7)
   36390:	18c00104 	addi	r3,r3,4
   36394:	39c00104 	addi	r7,r7,4
   36398:	197fff15 	stw	r5,-4(r3)
   3639c:	3a3ff636 	bltu	r7,r8,36378 <__lshift+0x130>
   363a0:	003fe206 	br	3632c <__lshift+0xe4>

000363a4 <__mcmp>:
   363a4:	20800417 	ldw	r2,16(r4)
   363a8:	28c00417 	ldw	r3,16(r5)
   363ac:	10c5c83a 	sub	r2,r2,r3
   363b0:	10000f1e 	bne	r2,zero,363f0 <__mcmp+0x4c>
   363b4:	18c00144 	addi	r3,r3,5
   363b8:	18c7883a 	add	r3,r3,r3
   363bc:	18c7883a 	add	r3,r3,r3
   363c0:	21c00504 	addi	r7,r4,20
   363c4:	28cb883a 	add	r5,r5,r3
   363c8:	20c9883a 	add	r4,r4,r3
   363cc:	213fff04 	addi	r4,r4,-4
   363d0:	297fff04 	addi	r5,r5,-4
   363d4:	21800017 	ldw	r6,0(r4)
   363d8:	28c00017 	ldw	r3,0(r5)
   363dc:	30c0021e 	bne	r6,r3,363e8 <__mcmp+0x44>
   363e0:	393ffa36 	bltu	r7,r4,363cc <__mcmp+0x28>
   363e4:	f800283a 	ret
   363e8:	30c00236 	bltu	r6,r3,363f4 <__mcmp+0x50>
   363ec:	00800044 	movi	r2,1
   363f0:	f800283a 	ret
   363f4:	00bfffc4 	movi	r2,-1
   363f8:	f800283a 	ret

000363fc <__mdiff>:
   363fc:	defffb04 	addi	sp,sp,-20
   36400:	dc000015 	stw	r16,0(sp)
   36404:	2821883a 	mov	r16,r5
   36408:	dc800215 	stw	r18,8(sp)
   3640c:	300b883a 	mov	r5,r6
   36410:	2025883a 	mov	r18,r4
   36414:	8009883a 	mov	r4,r16
   36418:	dc400115 	stw	r17,4(sp)
   3641c:	dfc00415 	stw	ra,16(sp)
   36420:	dcc00315 	stw	r19,12(sp)
   36424:	3023883a 	mov	r17,r6
   36428:	00363a40 	call	363a4 <__mcmp>
   3642c:	10005026 	beq	r2,zero,36570 <__mdiff+0x174>
   36430:	10004a16 	blt	r2,zero,3655c <__mdiff+0x160>
   36434:	0027883a 	mov	r19,zero
   36438:	81400117 	ldw	r5,4(r16)
   3643c:	9009883a 	mov	r4,r18
   36440:	0035a580 	call	35a58 <_Balloc>
   36444:	82400417 	ldw	r9,16(r16)
   36448:	89800417 	ldw	r6,16(r17)
   3644c:	14c00315 	stw	r19,12(r2)
   36450:	4b800144 	addi	r14,r9,5
   36454:	31800144 	addi	r6,r6,5
   36458:	739d883a 	add	r14,r14,r14
   3645c:	318d883a 	add	r6,r6,r6
   36460:	739d883a 	add	r14,r14,r14
   36464:	318d883a 	add	r6,r6,r6
   36468:	81c00504 	addi	r7,r16,20
   3646c:	839d883a 	add	r14,r16,r14
   36470:	8a000504 	addi	r8,r17,20
   36474:	898d883a 	add	r6,r17,r6
   36478:	10c00504 	addi	r3,r2,20
   3647c:	0009883a 	mov	r4,zero
   36480:	3b000017 	ldw	r12,0(r7)
   36484:	42c00017 	ldw	r11,0(r8)
   36488:	42000104 	addi	r8,r8,4
   3648c:	62bfffcc 	andi	r10,r12,65535
   36490:	5b7fffcc 	andi	r13,r11,65535
   36494:	5109883a 	add	r4,r10,r4
   36498:	2355c83a 	sub	r10,r4,r13
   3649c:	5816d43a 	srli	r11,r11,16
   364a0:	6008d43a 	srli	r4,r12,16
   364a4:	501bd43a 	srai	r13,r10,16
   364a8:	1a80000d 	sth	r10,0(r3)
   364ac:	22c9c83a 	sub	r4,r4,r11
   364b0:	2349883a 	add	r4,r4,r13
   364b4:	1900008d 	sth	r4,2(r3)
   364b8:	39c00104 	addi	r7,r7,4
   364bc:	2009d43a 	srai	r4,r4,16
   364c0:	18c00104 	addi	r3,r3,4
   364c4:	41bfee36 	bltu	r8,r6,36480 <__mdiff+0x84>
   364c8:	180b883a 	mov	r5,r3
   364cc:	3815883a 	mov	r10,r7
   364d0:	3b80132e 	bgeu	r7,r14,36520 <__mdiff+0x124>
   364d4:	3a000017 	ldw	r8,0(r7)
   364d8:	18c00104 	addi	r3,r3,4
   364dc:	39c00104 	addi	r7,r7,4
   364e0:	41bfffcc 	andi	r6,r8,65535
   364e4:	310d883a 	add	r6,r6,r4
   364e8:	3009d43a 	srai	r4,r6,16
   364ec:	4010d43a 	srli	r8,r8,16
   364f0:	19bfff0d 	sth	r6,-4(r3)
   364f4:	2209883a 	add	r4,r4,r8
   364f8:	193fff8d 	sth	r4,-2(r3)
   364fc:	2009d43a 	srai	r4,r4,16
   36500:	3bbff436 	bltu	r7,r14,364d4 <__mdiff+0xd8>
   36504:	0286303a 	nor	r3,zero,r10
   36508:	1b87883a 	add	r3,r3,r14
   3650c:	1806d0ba 	srli	r3,r3,2
   36510:	18c00044 	addi	r3,r3,1
   36514:	18c7883a 	add	r3,r3,r3
   36518:	18c7883a 	add	r3,r3,r3
   3651c:	28c7883a 	add	r3,r5,r3
   36520:	193fff17 	ldw	r4,-4(r3)
   36524:	18ffff04 	addi	r3,r3,-4
   36528:	2000041e 	bne	r4,zero,3653c <__mdiff+0x140>
   3652c:	18ffff04 	addi	r3,r3,-4
   36530:	19000017 	ldw	r4,0(r3)
   36534:	4a7fffc4 	addi	r9,r9,-1
   36538:	203ffc26 	beq	r4,zero,3652c <__mdiff+0x130>
   3653c:	12400415 	stw	r9,16(r2)
   36540:	dfc00417 	ldw	ra,16(sp)
   36544:	dcc00317 	ldw	r19,12(sp)
   36548:	dc800217 	ldw	r18,8(sp)
   3654c:	dc400117 	ldw	r17,4(sp)
   36550:	dc000017 	ldw	r16,0(sp)
   36554:	dec00504 	addi	sp,sp,20
   36558:	f800283a 	ret
   3655c:	8005883a 	mov	r2,r16
   36560:	04c00044 	movi	r19,1
   36564:	8821883a 	mov	r16,r17
   36568:	1023883a 	mov	r17,r2
   3656c:	003fb206 	br	36438 <__mdiff+0x3c>
   36570:	9009883a 	mov	r4,r18
   36574:	000b883a 	mov	r5,zero
   36578:	0035a580 	call	35a58 <_Balloc>
   3657c:	00c00044 	movi	r3,1
   36580:	10c00415 	stw	r3,16(r2)
   36584:	10000515 	stw	zero,20(r2)
   36588:	dfc00417 	ldw	ra,16(sp)
   3658c:	dcc00317 	ldw	r19,12(sp)
   36590:	dc800217 	ldw	r18,8(sp)
   36594:	dc400117 	ldw	r17,4(sp)
   36598:	dc000017 	ldw	r16,0(sp)
   3659c:	dec00504 	addi	sp,sp,20
   365a0:	f800283a 	ret

000365a4 <__ulp>:
   365a4:	295ffc2c 	andhi	r5,r5,32752
   365a8:	00bf3034 	movhi	r2,64704
   365ac:	2887883a 	add	r3,r5,r2
   365b0:	00c0020e 	bge	zero,r3,365bc <__ulp+0x18>
   365b4:	0005883a 	mov	r2,zero
   365b8:	f800283a 	ret
   365bc:	00c7c83a 	sub	r3,zero,r3
   365c0:	1805d53a 	srai	r2,r3,20
   365c4:	00c004c4 	movi	r3,19
   365c8:	18800a0e 	bge	r3,r2,365f4 <__ulp+0x50>
   365cc:	01000c84 	movi	r4,50
   365d0:	0007883a 	mov	r3,zero
   365d4:	20800516 	blt	r4,r2,365ec <__ulp+0x48>
   365d8:	01000cc4 	movi	r4,51
   365dc:	2085c83a 	sub	r2,r4,r2
   365e0:	01000044 	movi	r4,1
   365e4:	2084983a 	sll	r2,r4,r2
   365e8:	f800283a 	ret
   365ec:	00800044 	movi	r2,1
   365f0:	f800283a 	ret
   365f4:	00c00234 	movhi	r3,8
   365f8:	1887d83a 	sra	r3,r3,r2
   365fc:	0005883a 	mov	r2,zero
   36600:	f800283a 	ret

00036604 <__b2d>:
   36604:	defffa04 	addi	sp,sp,-24
   36608:	dc000015 	stw	r16,0(sp)
   3660c:	24000417 	ldw	r16,16(r4)
   36610:	dc400115 	stw	r17,4(sp)
   36614:	dcc00315 	stw	r19,12(sp)
   36618:	84000144 	addi	r16,r16,5
   3661c:	8421883a 	add	r16,r16,r16
   36620:	8421883a 	add	r16,r16,r16
   36624:	2421883a 	add	r16,r4,r16
   36628:	847fff17 	ldw	r17,-4(r16)
   3662c:	24c00504 	addi	r19,r4,20
   36630:	dd000415 	stw	r20,16(sp)
   36634:	8809883a 	mov	r4,r17
   36638:	dc800215 	stw	r18,8(sp)
   3663c:	2829883a 	mov	r20,r5
   36640:	dfc00515 	stw	ra,20(sp)
   36644:	0035d700 	call	35d70 <__hi0bits>
   36648:	00c00804 	movi	r3,32
   3664c:	1887c83a 	sub	r3,r3,r2
   36650:	a0c00015 	stw	r3,0(r20)
   36654:	00c00284 	movi	r3,10
   36658:	84bfff04 	addi	r18,r16,-4
   3665c:	18801216 	blt	r3,r2,366a8 <__b2d+0xa4>
   36660:	010002c4 	movi	r4,11
   36664:	2089c83a 	sub	r4,r4,r2
   36668:	8906d83a 	srl	r3,r17,r4
   3666c:	18cffc34 	orhi	r3,r3,16368
   36670:	9c80322e 	bgeu	r19,r18,3673c <__b2d+0x138>
   36674:	817ffe17 	ldw	r5,-8(r16)
   36678:	2908d83a 	srl	r4,r5,r4
   3667c:	10800544 	addi	r2,r2,21
   36680:	88a2983a 	sll	r17,r17,r2
   36684:	2444b03a 	or	r2,r4,r17
   36688:	dfc00517 	ldw	ra,20(sp)
   3668c:	dd000417 	ldw	r20,16(sp)
   36690:	dcc00317 	ldw	r19,12(sp)
   36694:	dc800217 	ldw	r18,8(sp)
   36698:	dc400117 	ldw	r17,4(sp)
   3669c:	dc000017 	ldw	r16,0(sp)
   366a0:	dec00604 	addi	sp,sp,24
   366a4:	f800283a 	ret
   366a8:	9c801636 	bltu	r19,r18,36704 <__b2d+0x100>
   366ac:	113ffd44 	addi	r4,r2,-11
   366b0:	000b883a 	mov	r5,zero
   366b4:	20001726 	beq	r4,zero,36714 <__b2d+0x110>
   366b8:	00c00ac4 	movi	r3,43
   366bc:	1885c83a 	sub	r2,r3,r2
   366c0:	8906983a 	sll	r3,r17,r4
   366c4:	288cd83a 	srl	r6,r5,r2
   366c8:	18cffc34 	orhi	r3,r3,16368
   366cc:	1986b03a 	or	r3,r3,r6
   366d0:	9c801c2e 	bgeu	r19,r18,36744 <__b2d+0x140>
   366d4:	91bfff17 	ldw	r6,-4(r18)
   366d8:	3084d83a 	srl	r2,r6,r2
   366dc:	2908983a 	sll	r4,r5,r4
   366e0:	1104b03a 	or	r2,r2,r4
   366e4:	dfc00517 	ldw	ra,20(sp)
   366e8:	dd000417 	ldw	r20,16(sp)
   366ec:	dcc00317 	ldw	r19,12(sp)
   366f0:	dc800217 	ldw	r18,8(sp)
   366f4:	dc400117 	ldw	r17,4(sp)
   366f8:	dc000017 	ldw	r16,0(sp)
   366fc:	dec00604 	addi	sp,sp,24
   36700:	f800283a 	ret
   36704:	113ffd44 	addi	r4,r2,-11
   36708:	84bffe04 	addi	r18,r16,-8
   3670c:	817ffe17 	ldw	r5,-8(r16)
   36710:	203fe91e 	bne	r4,zero,366b8 <__b2d+0xb4>
   36714:	88cffc34 	orhi	r3,r17,16368
   36718:	2805883a 	mov	r2,r5
   3671c:	dfc00517 	ldw	ra,20(sp)
   36720:	dd000417 	ldw	r20,16(sp)
   36724:	dcc00317 	ldw	r19,12(sp)
   36728:	dc800217 	ldw	r18,8(sp)
   3672c:	dc400117 	ldw	r17,4(sp)
   36730:	dc000017 	ldw	r16,0(sp)
   36734:	dec00604 	addi	sp,sp,24
   36738:	f800283a 	ret
   3673c:	0009883a 	mov	r4,zero
   36740:	003fce06 	br	3667c <__b2d+0x78>
   36744:	0005883a 	mov	r2,zero
   36748:	003fe406 	br	366dc <__b2d+0xd8>

0003674c <__d2b>:
   3674c:	defff804 	addi	sp,sp,-32
   36750:	dc400315 	stw	r17,12(sp)
   36754:	3023883a 	mov	r17,r6
   36758:	dc800415 	stw	r18,16(sp)
   3675c:	8824907a 	slli	r18,r17,1
   36760:	dcc00515 	stw	r19,20(sp)
   36764:	2827883a 	mov	r19,r5
   36768:	9024d57a 	srli	r18,r18,21
   3676c:	01400044 	movi	r5,1
   36770:	dd000615 	stw	r20,24(sp)
   36774:	dc000215 	stw	r16,8(sp)
   36778:	dfc00715 	stw	ra,28(sp)
   3677c:	3829883a 	mov	r20,r7
   36780:	0035a580 	call	35a58 <_Balloc>
   36784:	1021883a 	mov	r16,r2
   36788:	00800434 	movhi	r2,16
   3678c:	10bfffc4 	addi	r2,r2,-1
   36790:	88a2703a 	and	r17,r17,r2
   36794:	90000126 	beq	r18,zero,3679c <__d2b+0x50>
   36798:	8c400434 	orhi	r17,r17,16
   3679c:	dc400015 	stw	r17,0(sp)
   367a0:	98002226 	beq	r19,zero,3682c <__d2b+0xe0>
   367a4:	d9000104 	addi	r4,sp,4
   367a8:	dcc00115 	stw	r19,4(sp)
   367ac:	0035dd80 	call	35dd8 <__lo0bits>
   367b0:	d8c00017 	ldw	r3,0(sp)
   367b4:	10002d1e 	bne	r2,zero,3686c <__d2b+0x120>
   367b8:	d9000117 	ldw	r4,4(sp)
   367bc:	81000515 	stw	r4,20(r16)
   367c0:	1823003a 	cmpeq	r17,r3,zero
   367c4:	01000084 	movi	r4,2
   367c8:	2463c83a 	sub	r17,r4,r17
   367cc:	80c00615 	stw	r3,24(r16)
   367d0:	84400415 	stw	r17,16(r16)
   367d4:	90001d1e 	bne	r18,zero,3684c <__d2b+0x100>
   367d8:	88c00104 	addi	r3,r17,4
   367dc:	18c7883a 	add	r3,r3,r3
   367e0:	18c7883a 	add	r3,r3,r3
   367e4:	80c7883a 	add	r3,r16,r3
   367e8:	19000017 	ldw	r4,0(r3)
   367ec:	10bef384 	addi	r2,r2,-1074
   367f0:	a0800015 	stw	r2,0(r20)
   367f4:	0035d700 	call	35d70 <__hi0bits>
   367f8:	8822917a 	slli	r17,r17,5
   367fc:	d8c00817 	ldw	r3,32(sp)
   36800:	8885c83a 	sub	r2,r17,r2
   36804:	18800015 	stw	r2,0(r3)
   36808:	8005883a 	mov	r2,r16
   3680c:	dfc00717 	ldw	ra,28(sp)
   36810:	dd000617 	ldw	r20,24(sp)
   36814:	dcc00517 	ldw	r19,20(sp)
   36818:	dc800417 	ldw	r18,16(sp)
   3681c:	dc400317 	ldw	r17,12(sp)
   36820:	dc000217 	ldw	r16,8(sp)
   36824:	dec00804 	addi	sp,sp,32
   36828:	f800283a 	ret
   3682c:	d809883a 	mov	r4,sp
   36830:	0035dd80 	call	35dd8 <__lo0bits>
   36834:	d8c00017 	ldw	r3,0(sp)
   36838:	04400044 	movi	r17,1
   3683c:	84400415 	stw	r17,16(r16)
   36840:	80c00515 	stw	r3,20(r16)
   36844:	10800804 	addi	r2,r2,32
   36848:	903fe326 	beq	r18,zero,367d8 <__d2b+0x8c>
   3684c:	00c00d44 	movi	r3,53
   36850:	94bef344 	addi	r18,r18,-1075
   36854:	90a5883a 	add	r18,r18,r2
   36858:	1885c83a 	sub	r2,r3,r2
   3685c:	d8c00817 	ldw	r3,32(sp)
   36860:	a4800015 	stw	r18,0(r20)
   36864:	18800015 	stw	r2,0(r3)
   36868:	003fe706 	br	36808 <__d2b+0xbc>
   3686c:	01000804 	movi	r4,32
   36870:	2089c83a 	sub	r4,r4,r2
   36874:	1908983a 	sll	r4,r3,r4
   36878:	d9400117 	ldw	r5,4(sp)
   3687c:	1886d83a 	srl	r3,r3,r2
   36880:	2148b03a 	or	r4,r4,r5
   36884:	81000515 	stw	r4,20(r16)
   36888:	d8c00015 	stw	r3,0(sp)
   3688c:	003fcc06 	br	367c0 <__d2b+0x74>

00036890 <__ratio>:
   36890:	defff904 	addi	sp,sp,-28
   36894:	dc400315 	stw	r17,12(sp)
   36898:	2823883a 	mov	r17,r5
   3689c:	d9400104 	addi	r5,sp,4
   368a0:	dfc00615 	stw	ra,24(sp)
   368a4:	dcc00515 	stw	r19,20(sp)
   368a8:	dc800415 	stw	r18,16(sp)
   368ac:	2027883a 	mov	r19,r4
   368b0:	dc000215 	stw	r16,8(sp)
   368b4:	00366040 	call	36604 <__b2d>
   368b8:	8809883a 	mov	r4,r17
   368bc:	d80b883a 	mov	r5,sp
   368c0:	1025883a 	mov	r18,r2
   368c4:	1821883a 	mov	r16,r3
   368c8:	00366040 	call	36604 <__b2d>
   368cc:	99400417 	ldw	r5,16(r19)
   368d0:	89000417 	ldw	r4,16(r17)
   368d4:	d9800117 	ldw	r6,4(sp)
   368d8:	2909c83a 	sub	r4,r5,r4
   368dc:	d9400017 	ldw	r5,0(sp)
   368e0:	2008917a 	slli	r4,r4,5
   368e4:	314bc83a 	sub	r5,r6,r5
   368e8:	290b883a 	add	r5,r5,r4
   368ec:	01400e0e 	bge	zero,r5,36928 <__ratio+0x98>
   368f0:	280a953a 	slli	r5,r5,20
   368f4:	2c21883a 	add	r16,r5,r16
   368f8:	9009883a 	mov	r4,r18
   368fc:	800b883a 	mov	r5,r16
   36900:	100d883a 	mov	r6,r2
   36904:	180f883a 	mov	r7,r3
   36908:	002bcf40 	call	2bcf4 <__divdf3>
   3690c:	dfc00617 	ldw	ra,24(sp)
   36910:	dcc00517 	ldw	r19,20(sp)
   36914:	dc800417 	ldw	r18,16(sp)
   36918:	dc400317 	ldw	r17,12(sp)
   3691c:	dc000217 	ldw	r16,8(sp)
   36920:	dec00704 	addi	sp,sp,28
   36924:	f800283a 	ret
   36928:	280a953a 	slli	r5,r5,20
   3692c:	1947c83a 	sub	r3,r3,r5
   36930:	003ff106 	br	368f8 <__ratio+0x68>

00036934 <_mprec_log10>:
   36934:	defffe04 	addi	sp,sp,-8
   36938:	dc000015 	stw	r16,0(sp)
   3693c:	dfc00115 	stw	ra,4(sp)
   36940:	008005c4 	movi	r2,23
   36944:	2021883a 	mov	r16,r4
   36948:	11000d0e 	bge	r2,r4,36980 <_mprec_log10+0x4c>
   3694c:	0005883a 	mov	r2,zero
   36950:	00cffc34 	movhi	r3,16368
   36954:	843fffc4 	addi	r16,r16,-1
   36958:	1009883a 	mov	r4,r2
   3695c:	180b883a 	mov	r5,r3
   36960:	000d883a 	mov	r6,zero
   36964:	01d00934 	movhi	r7,16420
   36968:	002ba100 	call	2ba10 <__muldf3>
   3696c:	803ff91e 	bne	r16,zero,36954 <_mprec_log10+0x20>
   36970:	dfc00117 	ldw	ra,4(sp)
   36974:	dc000017 	ldw	r16,0(sp)
   36978:	dec00204 	addi	sp,sp,8
   3697c:	f800283a 	ret
   36980:	202090fa 	slli	r16,r4,3
   36984:	00800134 	movhi	r2,4
   36988:	1084ba04 	addi	r2,r2,4840
   3698c:	1421883a 	add	r16,r2,r16
   36990:	80800017 	ldw	r2,0(r16)
   36994:	80c00117 	ldw	r3,4(r16)
   36998:	dfc00117 	ldw	ra,4(sp)
   3699c:	dc000017 	ldw	r16,0(sp)
   369a0:	dec00204 	addi	sp,sp,8
   369a4:	f800283a 	ret

000369a8 <__copybits>:
   369a8:	297fffc4 	addi	r5,r5,-1
   369ac:	31c00417 	ldw	r7,16(r6)
   369b0:	2811d17a 	srai	r8,r5,5
   369b4:	30800504 	addi	r2,r6,20
   369b8:	39c00144 	addi	r7,r7,5
   369bc:	42000044 	addi	r8,r8,1
   369c0:	39cf883a 	add	r7,r7,r7
   369c4:	4211883a 	add	r8,r8,r8
   369c8:	39cf883a 	add	r7,r7,r7
   369cc:	4211883a 	add	r8,r8,r8
   369d0:	31cf883a 	add	r7,r6,r7
   369d4:	2211883a 	add	r8,r4,r8
   369d8:	11c00d2e 	bgeu	r2,r7,36a10 <__copybits+0x68>
   369dc:	2007883a 	mov	r3,r4
   369e0:	11400017 	ldw	r5,0(r2)
   369e4:	18c00104 	addi	r3,r3,4
   369e8:	10800104 	addi	r2,r2,4
   369ec:	197fff15 	stw	r5,-4(r3)
   369f0:	11fffb36 	bltu	r2,r7,369e0 <__copybits+0x38>
   369f4:	3985c83a 	sub	r2,r7,r6
   369f8:	10bffac4 	addi	r2,r2,-21
   369fc:	1004d0ba 	srli	r2,r2,2
   36a00:	10800044 	addi	r2,r2,1
   36a04:	1085883a 	add	r2,r2,r2
   36a08:	1085883a 	add	r2,r2,r2
   36a0c:	2089883a 	add	r4,r4,r2
   36a10:	2200032e 	bgeu	r4,r8,36a20 <__copybits+0x78>
   36a14:	20000015 	stw	zero,0(r4)
   36a18:	21000104 	addi	r4,r4,4
   36a1c:	223ffd36 	bltu	r4,r8,36a14 <__copybits+0x6c>
   36a20:	f800283a 	ret

00036a24 <__any_on>:
   36a24:	21800417 	ldw	r6,16(r4)
   36a28:	2805d17a 	srai	r2,r5,5
   36a2c:	20c00504 	addi	r3,r4,20
   36a30:	30800f0e 	bge	r6,r2,36a70 <__any_on+0x4c>
   36a34:	3005883a 	mov	r2,r6
   36a38:	10800144 	addi	r2,r2,5
   36a3c:	1085883a 	add	r2,r2,r2
   36a40:	1085883a 	add	r2,r2,r2
   36a44:	2089883a 	add	r4,r4,r2
   36a48:	1900152e 	bgeu	r3,r4,36aa0 <__any_on+0x7c>
   36a4c:	20bfff17 	ldw	r2,-4(r4)
   36a50:	213fff04 	addi	r4,r4,-4
   36a54:	1000041e 	bne	r2,zero,36a68 <__any_on+0x44>
   36a58:	1900112e 	bgeu	r3,r4,36aa0 <__any_on+0x7c>
   36a5c:	213fff04 	addi	r4,r4,-4
   36a60:	20800017 	ldw	r2,0(r4)
   36a64:	103ffc26 	beq	r2,zero,36a58 <__any_on+0x34>
   36a68:	00800044 	movi	r2,1
   36a6c:	f800283a 	ret
   36a70:	11bff10e 	bge	r2,r6,36a38 <__any_on+0x14>
   36a74:	294007cc 	andi	r5,r5,31
   36a78:	283fef26 	beq	r5,zero,36a38 <__any_on+0x14>
   36a7c:	11800144 	addi	r6,r2,5
   36a80:	318d883a 	add	r6,r6,r6
   36a84:	318d883a 	add	r6,r6,r6
   36a88:	218d883a 	add	r6,r4,r6
   36a8c:	31800017 	ldw	r6,0(r6)
   36a90:	314ed83a 	srl	r7,r6,r5
   36a94:	394a983a 	sll	r5,r7,r5
   36a98:	29bff31e 	bne	r5,r6,36a68 <__any_on+0x44>
   36a9c:	003fe606 	br	36a38 <__any_on+0x14>
   36aa0:	0005883a 	mov	r2,zero
   36aa4:	f800283a 	ret

00036aa8 <_read_r>:
   36aa8:	defffd04 	addi	sp,sp,-12
   36aac:	dc400115 	stw	r17,4(sp)
   36ab0:	dc000015 	stw	r16,0(sp)
   36ab4:	2023883a 	mov	r17,r4
   36ab8:	04000134 	movhi	r16,4
   36abc:	84129704 	addi	r16,r16,19036
   36ac0:	2809883a 	mov	r4,r5
   36ac4:	300b883a 	mov	r5,r6
   36ac8:	380d883a 	mov	r6,r7
   36acc:	dfc00215 	stw	ra,8(sp)
   36ad0:	80000015 	stw	zero,0(r16)
   36ad4:	003c7940 	call	3c794 <read>
   36ad8:	00ffffc4 	movi	r3,-1
   36adc:	10c00526 	beq	r2,r3,36af4 <_read_r+0x4c>
   36ae0:	dfc00217 	ldw	ra,8(sp)
   36ae4:	dc400117 	ldw	r17,4(sp)
   36ae8:	dc000017 	ldw	r16,0(sp)
   36aec:	dec00304 	addi	sp,sp,12
   36af0:	f800283a 	ret
   36af4:	80c00017 	ldw	r3,0(r16)
   36af8:	183ff926 	beq	r3,zero,36ae0 <_read_r+0x38>
   36afc:	88c00015 	stw	r3,0(r17)
   36b00:	dfc00217 	ldw	ra,8(sp)
   36b04:	dc400117 	ldw	r17,4(sp)
   36b08:	dc000017 	ldw	r16,0(sp)
   36b0c:	dec00304 	addi	sp,sp,12
   36b10:	f800283a 	ret

00036b14 <_realloc_r>:
   36b14:	defff504 	addi	sp,sp,-44
   36b18:	dd400615 	stw	r21,24(sp)
   36b1c:	dc800315 	stw	r18,12(sp)
   36b20:	dc000115 	stw	r16,4(sp)
   36b24:	dfc00a15 	stw	ra,40(sp)
   36b28:	df000915 	stw	fp,36(sp)
   36b2c:	ddc00815 	stw	r23,32(sp)
   36b30:	dd800715 	stw	r22,28(sp)
   36b34:	dd000515 	stw	r20,20(sp)
   36b38:	dcc00415 	stw	r19,16(sp)
   36b3c:	dc400215 	stw	r17,8(sp)
   36b40:	2821883a 	mov	r16,r5
   36b44:	202b883a 	mov	r21,r4
   36b48:	3025883a 	mov	r18,r6
   36b4c:	28009626 	beq	r5,zero,36da8 <_realloc_r+0x294>
   36b50:	003c46c0 	call	3c46c <__malloc_lock>
   36b54:	80bfff17 	ldw	r2,-4(r16)
   36b58:	04ffff04 	movi	r19,-4
   36b5c:	90c002c4 	addi	r3,r18,11
   36b60:	01000584 	movi	r4,22
   36b64:	85bffe04 	addi	r22,r16,-8
   36b68:	14e6703a 	and	r19,r2,r19
   36b6c:	20c0372e 	bgeu	r4,r3,36c4c <_realloc_r+0x138>
   36b70:	047ffe04 	movi	r17,-8
   36b74:	1c62703a 	and	r17,r3,r17
   36b78:	8807883a 	mov	r3,r17
   36b7c:	88005a16 	blt	r17,zero,36ce8 <_realloc_r+0x1d4>
   36b80:	8c805936 	bltu	r17,r18,36ce8 <_realloc_r+0x1d4>
   36b84:	98c0340e 	bge	r19,r3,36c58 <_realloc_r+0x144>
   36b88:	07000134 	movhi	fp,4
   36b8c:	e7061204 	addi	fp,fp,6216
   36b90:	e1400217 	ldw	r5,8(fp)
   36b94:	b4c9883a 	add	r4,r22,r19
   36b98:	29009026 	beq	r5,r4,36ddc <_realloc_r+0x2c8>
   36b9c:	21800117 	ldw	r6,4(r4)
   36ba0:	01ffff84 	movi	r7,-2
   36ba4:	31ce703a 	and	r7,r6,r7
   36ba8:	21cf883a 	add	r7,r4,r7
   36bac:	39c00117 	ldw	r7,4(r7)
   36bb0:	39c0004c 	andi	r7,r7,1
   36bb4:	38004326 	beq	r7,zero,36cc4 <_realloc_r+0x1b0>
   36bb8:	000d883a 	mov	r6,zero
   36bbc:	0009883a 	mov	r4,zero
   36bc0:	1080004c 	andi	r2,r2,1
   36bc4:	10005a1e 	bne	r2,zero,36d30 <_realloc_r+0x21c>
   36bc8:	85fffe17 	ldw	r23,-8(r16)
   36bcc:	00bfff04 	movi	r2,-4
   36bd0:	b5efc83a 	sub	r23,r22,r23
   36bd4:	b9c00117 	ldw	r7,4(r23)
   36bd8:	388e703a 	and	r7,r7,r2
   36bdc:	3ccf883a 	add	r7,r7,r19
   36be0:	20005226 	beq	r4,zero,36d2c <_realloc_r+0x218>
   36be4:	31e9883a 	add	r20,r6,r7
   36be8:	2140c726 	beq	r4,r5,36f08 <_realloc_r+0x3f4>
   36bec:	a0c04f16 	blt	r20,r3,36d2c <_realloc_r+0x218>
   36bf0:	20800317 	ldw	r2,12(r4)
   36bf4:	20c00217 	ldw	r3,8(r4)
   36bf8:	99bfff04 	addi	r6,r19,-4
   36bfc:	01000904 	movi	r4,36
   36c00:	18800315 	stw	r2,12(r3)
   36c04:	10c00215 	stw	r3,8(r2)
   36c08:	b8c00217 	ldw	r3,8(r23)
   36c0c:	b8800317 	ldw	r2,12(r23)
   36c10:	bc800204 	addi	r18,r23,8
   36c14:	18800315 	stw	r2,12(r3)
   36c18:	10c00215 	stw	r3,8(r2)
   36c1c:	2180ed36 	bltu	r4,r6,36fd4 <_realloc_r+0x4c0>
   36c20:	008004c4 	movi	r2,19
   36c24:	11809b2e 	bgeu	r2,r6,36e94 <_realloc_r+0x380>
   36c28:	80800017 	ldw	r2,0(r16)
   36c2c:	b8800215 	stw	r2,8(r23)
   36c30:	80800117 	ldw	r2,4(r16)
   36c34:	b8800315 	stw	r2,12(r23)
   36c38:	008006c4 	movi	r2,27
   36c3c:	1180f936 	bltu	r2,r6,37024 <_realloc_r+0x510>
   36c40:	b8800404 	addi	r2,r23,16
   36c44:	80c00204 	addi	r3,r16,8
   36c48:	00009406 	br	36e9c <_realloc_r+0x388>
   36c4c:	00c00404 	movi	r3,16
   36c50:	1823883a 	mov	r17,r3
   36c54:	003fca06 	br	36b80 <_realloc_r+0x6c>
   36c58:	9829883a 	mov	r20,r19
   36c5c:	a447c83a 	sub	r3,r20,r17
   36c60:	010003c4 	movi	r4,15
   36c64:	1080004c 	andi	r2,r2,1
   36c68:	20c02336 	bltu	r4,r3,36cf8 <_realloc_r+0x1e4>
   36c6c:	1504b03a 	or	r2,r2,r20
   36c70:	b0800115 	stw	r2,4(r22)
   36c74:	b52d883a 	add	r22,r22,r20
   36c78:	b0800117 	ldw	r2,4(r22)
   36c7c:	10800054 	ori	r2,r2,1
   36c80:	b0800115 	stw	r2,4(r22)
   36c84:	a809883a 	mov	r4,r21
   36c88:	003c48c0 	call	3c48c <__malloc_unlock>
   36c8c:	8025883a 	mov	r18,r16
   36c90:	9005883a 	mov	r2,r18
   36c94:	dfc00a17 	ldw	ra,40(sp)
   36c98:	df000917 	ldw	fp,36(sp)
   36c9c:	ddc00817 	ldw	r23,32(sp)
   36ca0:	dd800717 	ldw	r22,28(sp)
   36ca4:	dd400617 	ldw	r21,24(sp)
   36ca8:	dd000517 	ldw	r20,20(sp)
   36cac:	dcc00417 	ldw	r19,16(sp)
   36cb0:	dc800317 	ldw	r18,12(sp)
   36cb4:	dc400217 	ldw	r17,8(sp)
   36cb8:	dc000117 	ldw	r16,4(sp)
   36cbc:	dec00b04 	addi	sp,sp,44
   36cc0:	f800283a 	ret
   36cc4:	01ffff04 	movi	r7,-4
   36cc8:	31cc703a 	and	r6,r6,r7
   36ccc:	34e9883a 	add	r20,r6,r19
   36cd0:	a0ffbb16 	blt	r20,r3,36bc0 <_realloc_r+0xac>
   36cd4:	20c00317 	ldw	r3,12(r4)
   36cd8:	21000217 	ldw	r4,8(r4)
   36cdc:	20c00315 	stw	r3,12(r4)
   36ce0:	19000215 	stw	r4,8(r3)
   36ce4:	003fdd06 	br	36c5c <_realloc_r+0x148>
   36ce8:	00800304 	movi	r2,12
   36cec:	a8800015 	stw	r2,0(r21)
   36cf0:	0025883a 	mov	r18,zero
   36cf4:	003fe606 	br	36c90 <_realloc_r+0x17c>
   36cf8:	1444b03a 	or	r2,r2,r17
   36cfc:	b0800115 	stw	r2,4(r22)
   36d00:	b44b883a 	add	r5,r22,r17
   36d04:	18800054 	ori	r2,r3,1
   36d08:	28800115 	stw	r2,4(r5)
   36d0c:	28c7883a 	add	r3,r5,r3
   36d10:	18800117 	ldw	r2,4(r3)
   36d14:	a809883a 	mov	r4,r21
   36d18:	29400204 	addi	r5,r5,8
   36d1c:	10800054 	ori	r2,r2,1
   36d20:	18800115 	stw	r2,4(r3)
   36d24:	002d4e40 	call	2d4e4 <_free_r>
   36d28:	003fd606 	br	36c84 <_realloc_r+0x170>
   36d2c:	38c0330e 	bge	r7,r3,36dfc <_realloc_r+0x2e8>
   36d30:	900b883a 	mov	r5,r18
   36d34:	a809883a 	mov	r4,r21
   36d38:	002e3680 	call	2e368 <_malloc_r>
   36d3c:	1025883a 	mov	r18,r2
   36d40:	10001626 	beq	r2,zero,36d9c <_realloc_r+0x288>
   36d44:	80bfff17 	ldw	r2,-4(r16)
   36d48:	00ffff84 	movi	r3,-2
   36d4c:	913ffe04 	addi	r4,r18,-8
   36d50:	10c6703a 	and	r3,r2,r3
   36d54:	b0c7883a 	add	r3,r22,r3
   36d58:	20c09926 	beq	r4,r3,36fc0 <_realloc_r+0x4ac>
   36d5c:	99bfff04 	addi	r6,r19,-4
   36d60:	00800904 	movi	r2,36
   36d64:	11806436 	bltu	r2,r6,36ef8 <_realloc_r+0x3e4>
   36d68:	00c004c4 	movi	r3,19
   36d6c:	19804036 	bltu	r3,r6,36e70 <_realloc_r+0x35c>
   36d70:	9005883a 	mov	r2,r18
   36d74:	8007883a 	mov	r3,r16
   36d78:	19000017 	ldw	r4,0(r3)
   36d7c:	11000015 	stw	r4,0(r2)
   36d80:	19000117 	ldw	r4,4(r3)
   36d84:	11000115 	stw	r4,4(r2)
   36d88:	18c00217 	ldw	r3,8(r3)
   36d8c:	10c00215 	stw	r3,8(r2)
   36d90:	a809883a 	mov	r4,r21
   36d94:	800b883a 	mov	r5,r16
   36d98:	002d4e40 	call	2d4e4 <_free_r>
   36d9c:	a809883a 	mov	r4,r21
   36da0:	003c48c0 	call	3c48c <__malloc_unlock>
   36da4:	003fba06 	br	36c90 <_realloc_r+0x17c>
   36da8:	300b883a 	mov	r5,r6
   36dac:	dfc00a17 	ldw	ra,40(sp)
   36db0:	df000917 	ldw	fp,36(sp)
   36db4:	ddc00817 	ldw	r23,32(sp)
   36db8:	dd800717 	ldw	r22,28(sp)
   36dbc:	dd400617 	ldw	r21,24(sp)
   36dc0:	dd000517 	ldw	r20,20(sp)
   36dc4:	dcc00417 	ldw	r19,16(sp)
   36dc8:	dc800317 	ldw	r18,12(sp)
   36dcc:	dc400217 	ldw	r17,8(sp)
   36dd0:	dc000117 	ldw	r16,4(sp)
   36dd4:	dec00b04 	addi	sp,sp,44
   36dd8:	002e3681 	jmpi	2e368 <_malloc_r>
   36ddc:	29800117 	ldw	r6,4(r5)
   36de0:	013fff04 	movi	r4,-4
   36de4:	89c00404 	addi	r7,r17,16
   36de8:	310c703a 	and	r6,r6,r4
   36dec:	34c9883a 	add	r4,r6,r19
   36df0:	21c0340e 	bge	r4,r7,36ec4 <_realloc_r+0x3b0>
   36df4:	2809883a 	mov	r4,r5
   36df8:	003f7106 	br	36bc0 <_realloc_r+0xac>
   36dfc:	b8800317 	ldw	r2,12(r23)
   36e00:	b8c00217 	ldw	r3,8(r23)
   36e04:	99bfff04 	addi	r6,r19,-4
   36e08:	01000904 	movi	r4,36
   36e0c:	18800315 	stw	r2,12(r3)
   36e10:	10c00215 	stw	r3,8(r2)
   36e14:	bc800204 	addi	r18,r23,8
   36e18:	21807836 	bltu	r4,r6,36ffc <_realloc_r+0x4e8>
   36e1c:	008004c4 	movi	r2,19
   36e20:	1180732e 	bgeu	r2,r6,36ff0 <_realloc_r+0x4dc>
   36e24:	80800017 	ldw	r2,0(r16)
   36e28:	b8800215 	stw	r2,8(r23)
   36e2c:	80800117 	ldw	r2,4(r16)
   36e30:	b8800315 	stw	r2,12(r23)
   36e34:	008006c4 	movi	r2,27
   36e38:	11808936 	bltu	r2,r6,37060 <_realloc_r+0x54c>
   36e3c:	b8800404 	addi	r2,r23,16
   36e40:	80c00204 	addi	r3,r16,8
   36e44:	19000017 	ldw	r4,0(r3)
   36e48:	9021883a 	mov	r16,r18
   36e4c:	3829883a 	mov	r20,r7
   36e50:	11000015 	stw	r4,0(r2)
   36e54:	19000117 	ldw	r4,4(r3)
   36e58:	b82d883a 	mov	r22,r23
   36e5c:	11000115 	stw	r4,4(r2)
   36e60:	18c00217 	ldw	r3,8(r3)
   36e64:	10c00215 	stw	r3,8(r2)
   36e68:	b8800117 	ldw	r2,4(r23)
   36e6c:	003f7b06 	br	36c5c <_realloc_r+0x148>
   36e70:	80c00017 	ldw	r3,0(r16)
   36e74:	90c00015 	stw	r3,0(r18)
   36e78:	80c00117 	ldw	r3,4(r16)
   36e7c:	90c00115 	stw	r3,4(r18)
   36e80:	00c006c4 	movi	r3,27
   36e84:	19804636 	bltu	r3,r6,36fa0 <_realloc_r+0x48c>
   36e88:	90800204 	addi	r2,r18,8
   36e8c:	80c00204 	addi	r3,r16,8
   36e90:	003fb906 	br	36d78 <_realloc_r+0x264>
   36e94:	9005883a 	mov	r2,r18
   36e98:	8007883a 	mov	r3,r16
   36e9c:	19000017 	ldw	r4,0(r3)
   36ea0:	9021883a 	mov	r16,r18
   36ea4:	b82d883a 	mov	r22,r23
   36ea8:	11000015 	stw	r4,0(r2)
   36eac:	19000117 	ldw	r4,4(r3)
   36eb0:	11000115 	stw	r4,4(r2)
   36eb4:	18c00217 	ldw	r3,8(r3)
   36eb8:	10c00215 	stw	r3,8(r2)
   36ebc:	b8800117 	ldw	r2,4(r23)
   36ec0:	003f6606 	br	36c5c <_realloc_r+0x148>
   36ec4:	2445c83a 	sub	r2,r4,r17
   36ec8:	b46d883a 	add	r22,r22,r17
   36ecc:	10800054 	ori	r2,r2,1
   36ed0:	b0800115 	stw	r2,4(r22)
   36ed4:	80bfff17 	ldw	r2,-4(r16)
   36ed8:	a809883a 	mov	r4,r21
   36edc:	e5800215 	stw	r22,8(fp)
   36ee0:	1080004c 	andi	r2,r2,1
   36ee4:	88a2b03a 	or	r17,r17,r2
   36ee8:	847fff15 	stw	r17,-4(r16)
   36eec:	003c48c0 	call	3c48c <__malloc_unlock>
   36ef0:	8025883a 	mov	r18,r16
   36ef4:	003f6606 	br	36c90 <_realloc_r+0x17c>
   36ef8:	9009883a 	mov	r4,r18
   36efc:	800b883a 	mov	r5,r16
   36f00:	00358cc0 	call	358cc <memmove>
   36f04:	003fa206 	br	36d90 <_realloc_r+0x27c>
   36f08:	88800404 	addi	r2,r17,16
   36f0c:	a0bf8716 	blt	r20,r2,36d2c <_realloc_r+0x218>
   36f10:	b8800317 	ldw	r2,12(r23)
   36f14:	b8c00217 	ldw	r3,8(r23)
   36f18:	99bfff04 	addi	r6,r19,-4
   36f1c:	01000904 	movi	r4,36
   36f20:	18800315 	stw	r2,12(r3)
   36f24:	10c00215 	stw	r3,8(r2)
   36f28:	bc800204 	addi	r18,r23,8
   36f2c:	21806536 	bltu	r4,r6,370c4 <_realloc_r+0x5b0>
   36f30:	008004c4 	movi	r2,19
   36f34:	1180592e 	bgeu	r2,r6,3709c <_realloc_r+0x588>
   36f38:	80800017 	ldw	r2,0(r16)
   36f3c:	b8800215 	stw	r2,8(r23)
   36f40:	80800117 	ldw	r2,4(r16)
   36f44:	b8800315 	stw	r2,12(r23)
   36f48:	008006c4 	movi	r2,27
   36f4c:	11806136 	bltu	r2,r6,370d4 <_realloc_r+0x5c0>
   36f50:	b8800404 	addi	r2,r23,16
   36f54:	80c00204 	addi	r3,r16,8
   36f58:	19000017 	ldw	r4,0(r3)
   36f5c:	11000015 	stw	r4,0(r2)
   36f60:	19000117 	ldw	r4,4(r3)
   36f64:	11000115 	stw	r4,4(r2)
   36f68:	18c00217 	ldw	r3,8(r3)
   36f6c:	10c00215 	stw	r3,8(r2)
   36f70:	a447c83a 	sub	r3,r20,r17
   36f74:	bc45883a 	add	r2,r23,r17
   36f78:	18c00054 	ori	r3,r3,1
   36f7c:	10c00115 	stw	r3,4(r2)
   36f80:	b8c00117 	ldw	r3,4(r23)
   36f84:	e0800215 	stw	r2,8(fp)
   36f88:	a809883a 	mov	r4,r21
   36f8c:	1880004c 	andi	r2,r3,1
   36f90:	88a2b03a 	or	r17,r17,r2
   36f94:	bc400115 	stw	r17,4(r23)
   36f98:	003c48c0 	call	3c48c <__malloc_unlock>
   36f9c:	003f3c06 	br	36c90 <_realloc_r+0x17c>
   36fa0:	80c00217 	ldw	r3,8(r16)
   36fa4:	90c00215 	stw	r3,8(r18)
   36fa8:	80c00317 	ldw	r3,12(r16)
   36fac:	90c00315 	stw	r3,12(r18)
   36fb0:	30802426 	beq	r6,r2,37044 <_realloc_r+0x530>
   36fb4:	90800404 	addi	r2,r18,16
   36fb8:	80c00404 	addi	r3,r16,16
   36fbc:	003f6e06 	br	36d78 <_realloc_r+0x264>
   36fc0:	953fff17 	ldw	r20,-4(r18)
   36fc4:	00ffff04 	movi	r3,-4
   36fc8:	a0e8703a 	and	r20,r20,r3
   36fcc:	a4e9883a 	add	r20,r20,r19
   36fd0:	003f2206 	br	36c5c <_realloc_r+0x148>
   36fd4:	800b883a 	mov	r5,r16
   36fd8:	9009883a 	mov	r4,r18
   36fdc:	00358cc0 	call	358cc <memmove>
   36fe0:	9021883a 	mov	r16,r18
   36fe4:	b8800117 	ldw	r2,4(r23)
   36fe8:	b82d883a 	mov	r22,r23
   36fec:	003f1b06 	br	36c5c <_realloc_r+0x148>
   36ff0:	9005883a 	mov	r2,r18
   36ff4:	8007883a 	mov	r3,r16
   36ff8:	003f9206 	br	36e44 <_realloc_r+0x330>
   36ffc:	800b883a 	mov	r5,r16
   37000:	9009883a 	mov	r4,r18
   37004:	d9c00015 	stw	r7,0(sp)
   37008:	00358cc0 	call	358cc <memmove>
   3700c:	d9c00017 	ldw	r7,0(sp)
   37010:	9021883a 	mov	r16,r18
   37014:	b8800117 	ldw	r2,4(r23)
   37018:	3829883a 	mov	r20,r7
   3701c:	b82d883a 	mov	r22,r23
   37020:	003f0e06 	br	36c5c <_realloc_r+0x148>
   37024:	80800217 	ldw	r2,8(r16)
   37028:	b8800415 	stw	r2,16(r23)
   3702c:	80800317 	ldw	r2,12(r16)
   37030:	b8800515 	stw	r2,20(r23)
   37034:	31001226 	beq	r6,r4,37080 <_realloc_r+0x56c>
   37038:	b8800604 	addi	r2,r23,24
   3703c:	80c00404 	addi	r3,r16,16
   37040:	003f9606 	br	36e9c <_realloc_r+0x388>
   37044:	81000417 	ldw	r4,16(r16)
   37048:	90800604 	addi	r2,r18,24
   3704c:	80c00604 	addi	r3,r16,24
   37050:	91000415 	stw	r4,16(r18)
   37054:	81000517 	ldw	r4,20(r16)
   37058:	91000515 	stw	r4,20(r18)
   3705c:	003f4606 	br	36d78 <_realloc_r+0x264>
   37060:	80800217 	ldw	r2,8(r16)
   37064:	b8800415 	stw	r2,16(r23)
   37068:	80800317 	ldw	r2,12(r16)
   3706c:	b8800515 	stw	r2,20(r23)
   37070:	31000d26 	beq	r6,r4,370a8 <_realloc_r+0x594>
   37074:	b8800604 	addi	r2,r23,24
   37078:	80c00404 	addi	r3,r16,16
   3707c:	003f7106 	br	36e44 <_realloc_r+0x330>
   37080:	81000417 	ldw	r4,16(r16)
   37084:	b8800804 	addi	r2,r23,32
   37088:	80c00604 	addi	r3,r16,24
   3708c:	b9000615 	stw	r4,24(r23)
   37090:	81000517 	ldw	r4,20(r16)
   37094:	b9000715 	stw	r4,28(r23)
   37098:	003f8006 	br	36e9c <_realloc_r+0x388>
   3709c:	9005883a 	mov	r2,r18
   370a0:	8007883a 	mov	r3,r16
   370a4:	003fac06 	br	36f58 <_realloc_r+0x444>
   370a8:	81000417 	ldw	r4,16(r16)
   370ac:	b8800804 	addi	r2,r23,32
   370b0:	80c00604 	addi	r3,r16,24
   370b4:	b9000615 	stw	r4,24(r23)
   370b8:	81000517 	ldw	r4,20(r16)
   370bc:	b9000715 	stw	r4,28(r23)
   370c0:	003f6006 	br	36e44 <_realloc_r+0x330>
   370c4:	9009883a 	mov	r4,r18
   370c8:	800b883a 	mov	r5,r16
   370cc:	00358cc0 	call	358cc <memmove>
   370d0:	003fa706 	br	36f70 <_realloc_r+0x45c>
   370d4:	80800217 	ldw	r2,8(r16)
   370d8:	b8800415 	stw	r2,16(r23)
   370dc:	80800317 	ldw	r2,12(r16)
   370e0:	b8800515 	stw	r2,20(r23)
   370e4:	31000326 	beq	r6,r4,370f4 <_realloc_r+0x5e0>
   370e8:	b8800604 	addi	r2,r23,24
   370ec:	80c00404 	addi	r3,r16,16
   370f0:	003f9906 	br	36f58 <_realloc_r+0x444>
   370f4:	81000417 	ldw	r4,16(r16)
   370f8:	b8800804 	addi	r2,r23,32
   370fc:	80c00604 	addi	r3,r16,24
   37100:	b9000615 	stw	r4,24(r23)
   37104:	81000517 	ldw	r4,20(r16)
   37108:	b9000715 	stw	r4,28(r23)
   3710c:	003f9206 	br	36f58 <_realloc_r+0x444>

00037110 <_remove_r>:
   37110:	deffff04 	addi	sp,sp,-4
   37114:	dfc00015 	stw	ra,0(sp)
   37118:	00398440 	call	39844 <_unlink_r>
   3711c:	013fffc4 	movi	r4,-1
   37120:	0007883a 	mov	r3,zero
   37124:	11000426 	beq	r2,r4,37138 <_remove_r+0x28>
   37128:	1805883a 	mov	r2,r3
   3712c:	dfc00017 	ldw	ra,0(sp)
   37130:	dec00104 	addi	sp,sp,4
   37134:	f800283a 	ret
   37138:	1007883a 	mov	r3,r2
   3713c:	003ffa06 	br	37128 <_remove_r+0x18>

00037140 <remove>:
   37140:	00800134 	movhi	r2,4
   37144:	108bb304 	addi	r2,r2,11980
   37148:	200b883a 	mov	r5,r4
   3714c:	11000017 	ldw	r4,0(r2)
   37150:	00371101 	jmpi	37110 <_remove_r>

00037154 <__isinfd>:
   37154:	0105c83a 	sub	r2,zero,r4
   37158:	1108b03a 	or	r4,r2,r4
   3715c:	2004d7fa 	srli	r2,r4,31
   37160:	00e00034 	movhi	r3,32768
   37164:	18ffffc4 	addi	r3,r3,-1
   37168:	28ca703a 	and	r5,r5,r3
   3716c:	1144b03a 	or	r2,r2,r5
   37170:	00dffc34 	movhi	r3,32752
   37174:	1885c83a 	sub	r2,r3,r2
   37178:	0087c83a 	sub	r3,zero,r2
   3717c:	1884b03a 	or	r2,r3,r2
   37180:	1005d7fa 	srai	r2,r2,31
   37184:	10800044 	addi	r2,r2,1
   37188:	f800283a 	ret

0003718c <__isnand>:
   3718c:	0105c83a 	sub	r2,zero,r4
   37190:	1108b03a 	or	r4,r2,r4
   37194:	2004d7fa 	srli	r2,r4,31
   37198:	00e00034 	movhi	r3,32768
   3719c:	18ffffc4 	addi	r3,r3,-1
   371a0:	28ca703a 	and	r5,r5,r3
   371a4:	1144b03a 	or	r2,r2,r5
   371a8:	00dffc34 	movhi	r3,32752
   371ac:	1885c83a 	sub	r2,r3,r2
   371b0:	1004d7fa 	srli	r2,r2,31
   371b4:	f800283a 	ret

000371b8 <__sccl>:
   371b8:	2a400003 	ldbu	r9,0(r5)
   371bc:	00801784 	movi	r2,94
   371c0:	48802626 	beq	r9,r2,3725c <__sccl+0xa4>
   371c4:	28800044 	addi	r2,r5,1
   371c8:	0011883a 	mov	r8,zero
   371cc:	000b883a 	mov	r5,zero
   371d0:	0007883a 	mov	r3,zero
   371d4:	01c04004 	movi	r7,256
   371d8:	20cd883a 	add	r6,r4,r3
   371dc:	32000005 	stb	r8,0(r6)
   371e0:	18c00044 	addi	r3,r3,1
   371e4:	19fffc1e 	bne	r3,r7,371d8 <__sccl+0x20>
   371e8:	48000f26 	beq	r9,zero,37228 <__sccl+0x70>
   371ec:	01800044 	movi	r6,1
   371f0:	314dc83a 	sub	r6,r6,r5
   371f4:	02001744 	movi	r8,93
   371f8:	01400b44 	movi	r5,45
   371fc:	2247883a 	add	r3,r4,r9
   37200:	19800005 	stb	r6,0(r3)
   37204:	10c00003 	ldbu	r3,0(r2)
   37208:	11c00044 	addi	r7,r2,1
   3720c:	19400a26 	beq	r3,r5,37238 <__sccl+0x80>
   37210:	1a000726 	beq	r3,r8,37230 <__sccl+0x78>
   37214:	1800011e 	bne	r3,zero,3721c <__sccl+0x64>
   37218:	f800283a 	ret
   3721c:	1813883a 	mov	r9,r3
   37220:	3805883a 	mov	r2,r7
   37224:	003ff506 	br	371fc <__sccl+0x44>
   37228:	10bfffc4 	addi	r2,r2,-1
   3722c:	f800283a 	ret
   37230:	3805883a 	mov	r2,r7
   37234:	f800283a 	ret
   37238:	10c00043 	ldbu	r3,1(r2)
   3723c:	1a000c26 	beq	r3,r8,37270 <__sccl+0xb8>
   37240:	1a400b16 	blt	r3,r9,37270 <__sccl+0xb8>
   37244:	10800084 	addi	r2,r2,2
   37248:	4a400044 	addi	r9,r9,1
   3724c:	224f883a 	add	r7,r4,r9
   37250:	39800005 	stb	r6,0(r7)
   37254:	48fffc16 	blt	r9,r3,37248 <__sccl+0x90>
   37258:	003fea06 	br	37204 <__sccl+0x4c>
   3725c:	2a400043 	ldbu	r9,1(r5)
   37260:	28800084 	addi	r2,r5,2
   37264:	02000044 	movi	r8,1
   37268:	01400044 	movi	r5,1
   3726c:	003fd806 	br	371d0 <__sccl+0x18>
   37270:	2813883a 	mov	r9,r5
   37274:	3805883a 	mov	r2,r7
   37278:	003fe006 	br	371fc <__sccl+0x44>

0003727c <nanf>:
   3727c:	009ff034 	movhi	r2,32704
   37280:	f800283a 	ret

00037284 <_kill_r>:
   37284:	defffd04 	addi	sp,sp,-12
   37288:	dc400115 	stw	r17,4(sp)
   3728c:	dc000015 	stw	r16,0(sp)
   37290:	2023883a 	mov	r17,r4
   37294:	04000134 	movhi	r16,4
   37298:	84129704 	addi	r16,r16,19036
   3729c:	2809883a 	mov	r4,r5
   372a0:	300b883a 	mov	r5,r6
   372a4:	dfc00215 	stw	ra,8(sp)
   372a8:	80000015 	stw	zero,0(r16)
   372ac:	003c0b40 	call	3c0b4 <kill>
   372b0:	00ffffc4 	movi	r3,-1
   372b4:	10c00526 	beq	r2,r3,372cc <_kill_r+0x48>
   372b8:	dfc00217 	ldw	ra,8(sp)
   372bc:	dc400117 	ldw	r17,4(sp)
   372c0:	dc000017 	ldw	r16,0(sp)
   372c4:	dec00304 	addi	sp,sp,12
   372c8:	f800283a 	ret
   372cc:	80c00017 	ldw	r3,0(r16)
   372d0:	183ff926 	beq	r3,zero,372b8 <_kill_r+0x34>
   372d4:	88c00015 	stw	r3,0(r17)
   372d8:	dfc00217 	ldw	ra,8(sp)
   372dc:	dc400117 	ldw	r17,4(sp)
   372e0:	dc000017 	ldw	r16,0(sp)
   372e4:	dec00304 	addi	sp,sp,12
   372e8:	f800283a 	ret

000372ec <_getpid_r>:
   372ec:	003bf501 	jmpi	3bf50 <getpid>

000372f0 <_strtod_r>:
   372f0:	deffdc04 	addi	sp,sp,-144
   372f4:	dc001a15 	stw	r16,104(sp)
   372f8:	d9400e15 	stw	r5,56(sp)
   372fc:	d9801115 	stw	r6,68(sp)
   37300:	d9400c15 	stw	r5,48(sp)
   37304:	2805883a 	mov	r2,r5
   37308:	dfc02315 	stw	ra,140(sp)
   3730c:	df002215 	stw	fp,136(sp)
   37310:	ddc02115 	stw	r23,132(sp)
   37314:	dd802015 	stw	r22,128(sp)
   37318:	dd401f15 	stw	r21,124(sp)
   3731c:	dd001e15 	stw	r20,120(sp)
   37320:	dcc01d15 	stw	r19,116(sp)
   37324:	dc801c15 	stw	r18,112(sp)
   37328:	dc401b15 	stw	r17,108(sp)
   3732c:	2021883a 	mov	r16,r4
   37330:	d8000615 	stw	zero,24(sp)
   37334:	d8000715 	stw	zero,28(sp)
   37338:	01400b44 	movi	r5,45
   3733c:	018000f4 	movhi	r6,3
   37340:	319d2504 	addi	r6,r6,29844
   37344:	10c00003 	ldbu	r3,0(r2)
   37348:	19003fcc 	andi	r4,r3,255
   3734c:	29004c2e 	bgeu	r5,r4,37480 <_strtod_r+0x190>
   37350:	1c803fcc 	andi	r18,r3,255
   37354:	9480201c 	xori	r18,r18,128
   37358:	102d883a 	mov	r22,r2
   3735c:	d8001215 	stw	zero,72(sp)
   37360:	94bfe004 	addi	r18,r18,-128
   37364:	00800c04 	movi	r2,48
   37368:	9080f526 	beq	r18,r2,37740 <_strtod_r+0x450>
   3736c:	d8001315 	stw	zero,76(sp)
   37370:	04c00bc4 	movi	r19,47
   37374:	900f883a 	mov	r7,r18
   37378:	9c84770e 	bge	r19,r18,38558 <_strtod_r+0x1268>
   3737c:	05c00e44 	movi	r23,57
   37380:	bc847a16 	blt	r23,r18,3856c <_strtod_r+0x127c>
   37384:	0039883a 	mov	fp,zero
   37388:	b4400044 	addi	r17,r22,1
   3738c:	dd801015 	stw	r22,64(sp)
   37390:	d8000f15 	stw	zero,60(sp)
   37394:	e02d883a 	mov	r22,fp
   37398:	002b883a 	mov	r21,zero
   3739c:	8039883a 	mov	fp,r16
   373a0:	05000204 	movi	r20,8
   373a4:	0021883a 	mov	r16,zero
   373a8:	a5408c16 	blt	r20,r21,375dc <_strtod_r+0x2ec>
   373ac:	b009883a 	mov	r4,r22
   373b0:	01400284 	movi	r5,10
   373b4:	002c1540 	call	2c154 <__mulsi3>
   373b8:	1485883a 	add	r2,r2,r18
   373bc:	15bff404 	addi	r22,r2,-48
   373c0:	dc400c15 	stw	r17,48(sp)
   373c4:	8c800007 	ldb	r18,0(r17)
   373c8:	ad400044 	addi	r21,r21,1
   373cc:	880b883a 	mov	r5,r17
   373d0:	900f883a 	mov	r7,r18
   373d4:	9c808e0e 	bge	r19,r18,37610 <_strtod_r+0x320>
   373d8:	8c400044 	addi	r17,r17,1
   373dc:	bcbff20e 	bge	r23,r18,373a8 <_strtod_r+0xb8>
   373e0:	dc000f15 	stw	r16,60(sp)
   373e4:	e021883a 	mov	r16,fp
   373e8:	b039883a 	mov	fp,r22
   373ec:	dd801017 	ldw	r22,64(sp)
   373f0:	a827883a 	mov	r19,r21
   373f4:	dd801415 	stw	r22,80(sp)
   373f8:	000d883a 	mov	r6,zero
   373fc:	0029883a 	mov	r20,zero
   37400:	d8001015 	stw	zero,64(sp)
   37404:	00801944 	movi	r2,101
   37408:	3880dd26 	beq	r7,r2,37780 <_strtod_r+0x490>
   3740c:	00801144 	movi	r2,69
   37410:	3880db26 	beq	r7,r2,37780 <_strtod_r+0x490>
   37414:	0009883a 	mov	r4,zero
   37418:	a8011d1e 	bne	r21,zero,37890 <_strtod_r+0x5a0>
   3741c:	3001591e 	bne	r6,zero,37984 <_strtod_r+0x694>
   37420:	d8c01317 	ldw	r3,76(sp)
   37424:	1801571e 	bne	r3,zero,37984 <_strtod_r+0x694>
   37428:	d8c01017 	ldw	r3,64(sp)
   3742c:	1803081e 	bne	r3,zero,38050 <_strtod_r+0xd60>
   37430:	00801384 	movi	r2,78
   37434:	38847e26 	beq	r7,r2,38630 <_strtod_r+0x1340>
   37438:	11c47916 	blt	r2,r7,38620 <_strtod_r+0x1330>
   3743c:	00801244 	movi	r2,73
   37440:	3883031e 	bne	r7,r2,38050 <_strtod_r+0xd60>
   37444:	d8800c17 	ldw	r2,48(sp)
   37448:	01000134 	movhi	r4,4
   3744c:	2104ef04 	addi	r4,r4,5052
   37450:	01801004 	movi	r6,64
   37454:	01c01684 	movi	r7,90
   37458:	21400007 	ldb	r5,0(r4)
   3745c:	21000044 	addi	r4,r4,1
   37460:	2804b426 	beq	r5,zero,38734 <_strtod_r+0x1444>
   37464:	10800044 	addi	r2,r2,1
   37468:	10c00007 	ldb	r3,0(r2)
   3746c:	30c0020e 	bge	r6,r3,37478 <_strtod_r+0x188>
   37470:	38c00116 	blt	r7,r3,37478 <_strtod_r+0x188>
   37474:	18c00804 	addi	r3,r3,32
   37478:	197ff726 	beq	r3,r5,37458 <_strtod_r+0x168>
   3747c:	0002f406 	br	38050 <_strtod_r+0xd60>
   37480:	2109883a 	add	r4,r4,r4
   37484:	2109883a 	add	r4,r4,r4
   37488:	2189883a 	add	r4,r4,r6
   3748c:	21000017 	ldw	r4,0(r4)
   37490:	2000683a 	jmp	r4
   37494:	00037560 	cmpeqi	zero,zero,3541
   37498:	00037350 	cmplti	zero,zero,3533
   3749c:	00037350 	cmplti	zero,zero,3533
   374a0:	00037350 	cmplti	zero,zero,3533
   374a4:	00037350 	cmplti	zero,zero,3533
   374a8:	00037350 	cmplti	zero,zero,3533
   374ac:	00037350 	cmplti	zero,zero,3533
   374b0:	00037350 	cmplti	zero,zero,3533
   374b4:	00037350 	cmplti	zero,zero,3533
   374b8:	000375c4 	movi	zero,3543
   374bc:	000375c4 	movi	zero,3543
   374c0:	000375c4 	movi	zero,3543
   374c4:	000375c4 	movi	zero,3543
   374c8:	000375c4 	movi	zero,3543
   374cc:	00037350 	cmplti	zero,zero,3533
   374d0:	00037350 	cmplti	zero,zero,3533
   374d4:	00037350 	cmplti	zero,zero,3533
   374d8:	00037350 	cmplti	zero,zero,3533
   374dc:	00037350 	cmplti	zero,zero,3533
   374e0:	00037350 	cmplti	zero,zero,3533
   374e4:	00037350 	cmplti	zero,zero,3533
   374e8:	00037350 	cmplti	zero,zero,3533
   374ec:	00037350 	cmplti	zero,zero,3533
   374f0:	00037350 	cmplti	zero,zero,3533
   374f4:	00037350 	cmplti	zero,zero,3533
   374f8:	00037350 	cmplti	zero,zero,3533
   374fc:	00037350 	cmplti	zero,zero,3533
   37500:	00037350 	cmplti	zero,zero,3533
   37504:	00037350 	cmplti	zero,zero,3533
   37508:	00037350 	cmplti	zero,zero,3533
   3750c:	00037350 	cmplti	zero,zero,3533
   37510:	00037350 	cmplti	zero,zero,3533
   37514:	000375c4 	movi	zero,3543
   37518:	00037350 	cmplti	zero,zero,3533
   3751c:	00037350 	cmplti	zero,zero,3533
   37520:	00037350 	cmplti	zero,zero,3533
   37524:	00037350 	cmplti	zero,zero,3533
   37528:	00037350 	cmplti	zero,zero,3533
   3752c:	00037350 	cmplti	zero,zero,3533
   37530:	00037350 	cmplti	zero,zero,3533
   37534:	00037350 	cmplti	zero,zero,3533
   37538:	00037350 	cmplti	zero,zero,3533
   3753c:	00037350 	cmplti	zero,zero,3533
   37540:	0003754c 	andi	zero,zero,3541
   37544:	00037350 	cmplti	zero,zero,3533
   37548:	000375d0 	cmplti	zero,zero,3543
   3754c:	d8001215 	stw	zero,72(sp)
   37550:	15800044 	addi	r22,r2,1
   37554:	dd800c15 	stw	r22,48(sp)
   37558:	14800047 	ldb	r18,1(r2)
   3755c:	903f811e 	bne	r18,zero,37364 <_strtod_r+0x74>
   37560:	0005883a 	mov	r2,zero
   37564:	0007883a 	mov	r3,zero
   37568:	d9400e17 	ldw	r5,56(sp)
   3756c:	d8001215 	stw	zero,72(sp)
   37570:	d9400c15 	stw	r5,48(sp)
   37574:	d9001117 	ldw	r4,68(sp)
   37578:	20000326 	beq	r4,zero,37588 <_strtod_r+0x298>
   3757c:	d9000c17 	ldw	r4,48(sp)
   37580:	d9401117 	ldw	r5,68(sp)
   37584:	29000015 	stw	r4,0(r5)
   37588:	d9001217 	ldw	r4,72(sp)
   3758c:	20000126 	beq	r4,zero,37594 <_strtod_r+0x2a4>
   37590:	18e0003c 	xorhi	r3,r3,32768
   37594:	dfc02317 	ldw	ra,140(sp)
   37598:	df002217 	ldw	fp,136(sp)
   3759c:	ddc02117 	ldw	r23,132(sp)
   375a0:	dd802017 	ldw	r22,128(sp)
   375a4:	dd401f17 	ldw	r21,124(sp)
   375a8:	dd001e17 	ldw	r20,120(sp)
   375ac:	dcc01d17 	ldw	r19,116(sp)
   375b0:	dc801c17 	ldw	r18,112(sp)
   375b4:	dc401b17 	ldw	r17,108(sp)
   375b8:	dc001a17 	ldw	r16,104(sp)
   375bc:	dec02404 	addi	sp,sp,144
   375c0:	f800283a 	ret
   375c4:	10800044 	addi	r2,r2,1
   375c8:	d8800c15 	stw	r2,48(sp)
   375cc:	003f5d06 	br	37344 <_strtod_r+0x54>
   375d0:	00c00044 	movi	r3,1
   375d4:	d8c01215 	stw	r3,72(sp)
   375d8:	003fdd06 	br	37550 <_strtod_r+0x260>
   375dc:	010003c4 	movi	r4,15
   375e0:	257f7716 	blt	r4,r21,373c0 <_strtod_r+0xd0>
   375e4:	8009883a 	mov	r4,r16
   375e8:	01400284 	movi	r5,10
   375ec:	002c1540 	call	2c154 <__mulsi3>
   375f0:	dc400c15 	stw	r17,48(sp)
   375f4:	1485883a 	add	r2,r2,r18
   375f8:	8c800007 	ldb	r18,0(r17)
   375fc:	143ff404 	addi	r16,r2,-48
   37600:	ad400044 	addi	r21,r21,1
   37604:	880b883a 	mov	r5,r17
   37608:	900f883a 	mov	r7,r18
   3760c:	9cbf7216 	blt	r19,r18,373d8 <_strtod_r+0xe8>
   37610:	dc000f15 	stw	r16,60(sp)
   37614:	e021883a 	mov	r16,fp
   37618:	b039883a 	mov	fp,r22
   3761c:	dd801017 	ldw	r22,64(sp)
   37620:	00800b84 	movi	r2,46
   37624:	9082561e 	bne	r18,r2,37f80 <_strtod_r+0xc90>
   37628:	28800044 	addi	r2,r5,1
   3762c:	d8800c15 	stw	r2,48(sp)
   37630:	29c00047 	ldb	r7,1(r5)
   37634:	a802611e 	bne	r21,zero,37fbc <_strtod_r+0xccc>
   37638:	00800c04 	movi	r2,48
   3763c:	3884161e 	bne	r7,r2,38698 <_strtod_r+0x13a8>
   37640:	00800044 	movi	r2,1
   37644:	3809883a 	mov	r4,r7
   37648:	100d883a 	mov	r6,r2
   3764c:	10800044 	addi	r2,r2,1
   37650:	2887883a 	add	r3,r5,r2
   37654:	d8c00c15 	stw	r3,48(sp)
   37658:	2987883a 	add	r3,r5,r6
   3765c:	19c00047 	ldb	r7,1(r3)
   37660:	393ff926 	beq	r7,r4,37648 <_strtod_r+0x358>
   37664:	38bff3c4 	addi	r2,r7,-49
   37668:	00c00204 	movi	r3,8
   3766c:	1882ad36 	bltu	r3,r2,38124 <_strtod_r+0xe34>
   37670:	d9400c17 	ldw	r5,48(sp)
   37674:	3029883a 	mov	r20,r6
   37678:	002f883a 	mov	r23,zero
   3767c:	d9401415 	stw	r5,80(sp)
   37680:	2823883a 	mov	r17,r5
   37684:	01800044 	movi	r6,1
   37688:	3dbff404 	addi	r22,r7,-48
   3768c:	b0002826 	beq	r22,zero,37730 <_strtod_r+0x440>
   37690:	00800044 	movi	r2,1
   37694:	a1a9883a 	add	r20,r20,r6
   37698:	30844826 	beq	r6,r2,387bc <_strtod_r+0x14cc>
   3769c:	b9a7883a 	add	r19,r23,r6
   376a0:	dc401015 	stw	r17,64(sp)
   376a4:	e023883a 	mov	r17,fp
   376a8:	b039883a 	mov	fp,r22
   376ac:	802d883a 	mov	r22,r16
   376b0:	dc000f17 	ldw	r16,60(sp)
   376b4:	98ffffc4 	addi	r3,r19,-1
   376b8:	dd001615 	stw	r20,88(sp)
   376bc:	04800204 	movi	r18,8
   376c0:	d9801515 	stw	r6,84(sp)
   376c4:	b829883a 	mov	r20,r23
   376c8:	1827883a 	mov	r19,r3
   376cc:	a5000044 	addi	r20,r20,1
   376d0:	a17fffc4 	addi	r5,r20,-1
   376d4:	9142b916 	blt	r18,r5,381bc <_strtod_r+0xecc>
   376d8:	8809883a 	mov	r4,r17
   376dc:	01400284 	movi	r5,10
   376e0:	002c1540 	call	2c154 <__mulsi3>
   376e4:	1023883a 	mov	r17,r2
   376e8:	a4fff81e 	bne	r20,r19,376cc <_strtod_r+0x3dc>
   376ec:	d9801517 	ldw	r6,84(sp)
   376f0:	dc000f15 	stw	r16,60(sp)
   376f4:	dd001617 	ldw	r20,88(sp)
   376f8:	b021883a 	mov	r16,r22
   376fc:	e02d883a 	mov	r22,fp
   37700:	8839883a 	mov	fp,r17
   37704:	dc401017 	ldw	r17,64(sp)
   37708:	b985883a 	add	r2,r23,r6
   3770c:	10bfffc4 	addi	r2,r2,-1
   37710:	00c00204 	movi	r3,8
   37714:	15c00044 	addi	r23,r2,1
   37718:	1883d616 	blt	r3,r2,38674 <_strtod_r+0x1384>
   3771c:	e009883a 	mov	r4,fp
   37720:	01400284 	movi	r5,10
   37724:	002c1540 	call	2c154 <__mulsi3>
   37728:	15b9883a 	add	fp,r2,r22
   3772c:	000d883a 	mov	r6,zero
   37730:	88800044 	addi	r2,r17,1
   37734:	d8800c15 	stw	r2,48(sp)
   37738:	89c00047 	ldb	r7,1(r17)
   3773c:	00022306 	br	37fcc <_strtod_r+0xcdc>
   37740:	b0800047 	ldb	r2,1(r22)
   37744:	01001604 	movi	r4,88
   37748:	1102a326 	beq	r2,r4,381d8 <_strtod_r+0xee8>
   3774c:	01001e04 	movi	r4,120
   37750:	1102a126 	beq	r2,r4,381d8 <_strtod_r+0xee8>
   37754:	b0800044 	addi	r2,r22,1
   37758:	9009883a 	mov	r4,r18
   3775c:	d8800c15 	stw	r2,48(sp)
   37760:	14800007 	ldb	r18,0(r2)
   37764:	102d883a 	mov	r22,r2
   37768:	10800044 	addi	r2,r2,1
   3776c:	913ffb26 	beq	r18,r4,3775c <_strtod_r+0x46c>
   37770:	90022526 	beq	r18,zero,38008 <_strtod_r+0xd18>
   37774:	00c00044 	movi	r3,1
   37778:	d8c01315 	stw	r3,76(sp)
   3777c:	003efc06 	br	37370 <_strtod_r+0x80>
   37780:	a800011e 	bne	r21,zero,37788 <_strtod_r+0x498>
   37784:	30023026 	beq	r6,zero,38048 <_strtod_r+0xd58>
   37788:	d9400c17 	ldw	r5,48(sp)
   3778c:	28800044 	addi	r2,r5,1
   37790:	d8800c15 	stw	r2,48(sp)
   37794:	29c00047 	ldb	r7,1(r5)
   37798:	d9400e15 	stw	r5,56(sp)
   3779c:	00800ac4 	movi	r2,43
   377a0:	38821026 	beq	r7,r2,37fe4 <_strtod_r+0xcf4>
   377a4:	00800b44 	movi	r2,45
   377a8:	38821426 	beq	r7,r2,37ffc <_strtod_r+0xd0c>
   377ac:	d8001515 	stw	zero,84(sp)
   377b0:	38bff404 	addi	r2,r7,-48
   377b4:	00c00244 	movi	r3,9
   377b8:	1881fc36 	bltu	r3,r2,37fac <_strtod_r+0xcbc>
   377bc:	00800c04 	movi	r2,48
   377c0:	3880071e 	bne	r7,r2,377e0 <_strtod_r+0x4f0>
   377c4:	d8800c17 	ldw	r2,48(sp)
   377c8:	3807883a 	mov	r3,r7
   377cc:	10800044 	addi	r2,r2,1
   377d0:	d8800c15 	stw	r2,48(sp)
   377d4:	11c00007 	ldb	r7,0(r2)
   377d8:	10800044 	addi	r2,r2,1
   377dc:	38fffc26 	beq	r7,r3,377d0 <_strtod_r+0x4e0>
   377e0:	38bff3c4 	addi	r2,r7,-49
   377e4:	00c00204 	movi	r3,8
   377e8:	18bf0a36 	bltu	r3,r2,37414 <_strtod_r+0x124>
   377ec:	d8c00c17 	ldw	r3,48(sp)
   377f0:	393ff404 	addi	r4,r7,-48
   377f4:	05c00bc4 	movi	r23,47
   377f8:	18800044 	addi	r2,r3,1
   377fc:	d8800c15 	stw	r2,48(sp)
   37800:	19c00047 	ldb	r7,1(r3)
   37804:	d8c01615 	stw	r3,88(sp)
   37808:	b9c0160e 	bge	r23,r7,37864 <_strtod_r+0x574>
   3780c:	00c00e44 	movi	r3,57
   37810:	19c01416 	blt	r3,r7,37864 <_strtod_r+0x574>
   37814:	d9401617 	ldw	r5,88(sp)
   37818:	dc001715 	stw	r16,92(sp)
   3781c:	1823883a 	mov	r17,r3
   37820:	2d800084 	addi	r22,r5,2
   37824:	3025883a 	mov	r18,r6
   37828:	3821883a 	mov	r16,r7
   3782c:	00000206 	br	37838 <_strtod_r+0x548>
   37830:	b5800044 	addi	r22,r22,1
   37834:	8c000816 	blt	r17,r16,37858 <_strtod_r+0x568>
   37838:	01400284 	movi	r5,10
   3783c:	002c1540 	call	2c154 <__mulsi3>
   37840:	dd800c15 	stw	r22,48(sp)
   37844:	1405883a 	add	r2,r2,r16
   37848:	b4000007 	ldb	r16,0(r22)
   3784c:	113ff404 	addi	r4,r2,-48
   37850:	b005883a 	mov	r2,r22
   37854:	bc3ff616 	blt	r23,r16,37830 <_strtod_r+0x540>
   37858:	800f883a 	mov	r7,r16
   3785c:	dc001717 	ldw	r16,92(sp)
   37860:	900d883a 	mov	r6,r18
   37864:	d8c01617 	ldw	r3,88(sp)
   37868:	10c5c83a 	sub	r2,r2,r3
   3786c:	00c00204 	movi	r3,8
   37870:	18833716 	blt	r3,r2,38550 <_strtod_r+0x1260>
   37874:	009387c4 	movi	r2,19999
   37878:	1100010e 	bge	r2,r4,37880 <_strtod_r+0x590>
   3787c:	1009883a 	mov	r4,r2
   37880:	d8c01517 	ldw	r3,84(sp)
   37884:	183ee426 	beq	r3,zero,37418 <_strtod_r+0x128>
   37888:	0109c83a 	sub	r4,zero,r4
   3788c:	a83ee326 	beq	r21,zero,3741c <_strtod_r+0x12c>
   37890:	2529c83a 	sub	r20,r4,r20
   37894:	dd001015 	stw	r20,64(sp)
   37898:	9800011e 	bne	r19,zero,378a0 <_strtod_r+0x5b0>
   3789c:	a827883a 	mov	r19,r21
   378a0:	00800404 	movi	r2,16
   378a4:	a823883a 	mov	r17,r21
   378a8:	1540010e 	bge	r2,r21,378b0 <_strtod_r+0x5c0>
   378ac:	1023883a 	mov	r17,r2
   378b0:	e009883a 	mov	r4,fp
   378b4:	002bf080 	call	2bf08 <__floatunsidf>
   378b8:	d8800615 	stw	r2,24(sp)
   378bc:	d8c00715 	stw	r3,28(sp)
   378c0:	01000244 	movi	r4,9
   378c4:	2440150e 	bge	r4,r17,3791c <_strtod_r+0x62c>
   378c8:	893ffdc4 	addi	r4,r17,-9
   378cc:	200890fa 	slli	r4,r4,3
   378d0:	180b883a 	mov	r5,r3
   378d4:	00c00134 	movhi	r3,4
   378d8:	18c4ba04 	addi	r3,r3,4840
   378dc:	1907883a 	add	r3,r3,r4
   378e0:	19800017 	ldw	r6,0(r3)
   378e4:	19c00117 	ldw	r7,4(r3)
   378e8:	1009883a 	mov	r4,r2
   378ec:	002ba100 	call	2ba10 <__muldf3>
   378f0:	d9000f17 	ldw	r4,60(sp)
   378f4:	1025883a 	mov	r18,r2
   378f8:	1829883a 	mov	r20,r3
   378fc:	002bf080 	call	2bf08 <__floatunsidf>
   37900:	9009883a 	mov	r4,r18
   37904:	a00b883a 	mov	r5,r20
   37908:	100d883a 	mov	r6,r2
   3790c:	180f883a 	mov	r7,r3
   37910:	003b66c0 	call	3b66c <__adddf3>
   37914:	d8800615 	stw	r2,24(sp)
   37918:	d8c00715 	stw	r3,28(sp)
   3791c:	008003c4 	movi	r2,15
   37920:	15401b16 	blt	r2,r21,37990 <_strtod_r+0x6a0>
   37924:	d8c01017 	ldw	r3,64(sp)
   37928:	18001626 	beq	r3,zero,37984 <_strtod_r+0x694>
   3792c:	d9001017 	ldw	r4,64(sp)
   37930:	01032e0e 	bge	zero,r4,385ec <_strtod_r+0x12fc>
   37934:	00c00584 	movi	r3,22
   37938:	19031016 	blt	r3,r4,3857c <_strtod_r+0x128c>
   3793c:	200490fa 	slli	r2,r4,3
   37940:	00c00134 	movhi	r3,4
   37944:	18c4ba04 	addi	r3,r3,4840
   37948:	d9000617 	ldw	r4,24(sp)
   3794c:	1885883a 	add	r2,r3,r2
   37950:	d9400717 	ldw	r5,28(sp)
   37954:	11800017 	ldw	r6,0(r2)
   37958:	11c00117 	ldw	r7,4(r2)
   3795c:	002ba100 	call	2ba10 <__muldf3>
   37960:	003f0406 	br	37574 <_strtod_r+0x284>
   37964:	00dffc34 	movhi	r3,32752
   37968:	d8c00715 	stw	r3,28(sp)
   3796c:	d8000615 	stw	zero,24(sp)
   37970:	1080020c 	andi	r2,r2,8
   37974:	10000326 	beq	r2,zero,37984 <_strtod_r+0x694>
   37978:	d8800717 	ldw	r2,28(sp)
   3797c:	10a00034 	orhi	r2,r2,32768
   37980:	d8800715 	stw	r2,28(sp)
   37984:	d8800617 	ldw	r2,24(sp)
   37988:	d8c00717 	ldw	r3,28(sp)
   3798c:	003ef906 	br	37574 <_strtod_r+0x284>
   37990:	d8801017 	ldw	r2,64(sp)
   37994:	ac63c83a 	sub	r17,r21,r17
   37998:	1463883a 	add	r17,r2,r17
   3799c:	0442a70e 	bge	zero,r17,3843c <_strtod_r+0x114c>
   379a0:	888003cc 	andi	r2,r17,15
   379a4:	10000b26 	beq	r2,zero,379d4 <_strtod_r+0x6e4>
   379a8:	100490fa 	slli	r2,r2,3
   379ac:	00c00134 	movhi	r3,4
   379b0:	18c4ba04 	addi	r3,r3,4840
   379b4:	d9000617 	ldw	r4,24(sp)
   379b8:	1885883a 	add	r2,r3,r2
   379bc:	d9400717 	ldw	r5,28(sp)
   379c0:	11800017 	ldw	r6,0(r2)
   379c4:	11c00117 	ldw	r7,4(r2)
   379c8:	002ba100 	call	2ba10 <__muldf3>
   379cc:	d8800615 	stw	r2,24(sp)
   379d0:	d8c00715 	stw	r3,28(sp)
   379d4:	00bffc04 	movi	r2,-16
   379d8:	88a2703a 	and	r17,r17,r2
   379dc:	8801a41e 	bne	r17,zero,38070 <_strtod_r+0xd80>
   379e0:	0029883a 	mov	r20,zero
   379e4:	d9401417 	ldw	r5,80(sp)
   379e8:	df000015 	stw	fp,0(sp)
   379ec:	8009883a 	mov	r4,r16
   379f0:	980d883a 	mov	r6,r19
   379f4:	a80f883a 	mov	r7,r21
   379f8:	0035c6c0 	call	35c6c <__s2b>
   379fc:	d8c01017 	ldw	r3,64(sp)
   37a00:	102d883a 	mov	r22,r2
   37a04:	b1000304 	addi	r4,r22,12
   37a08:	1805d7fa 	srai	r2,r3,31
   37a0c:	00f9c83a 	sub	fp,zero,r3
   37a10:	d9001315 	stw	r4,76(sp)
   37a14:	e0b8703a 	and	fp,fp,r2
   37a18:	df000e15 	stw	fp,56(sp)
   37a1c:	b1400117 	ldw	r5,4(r22)
   37a20:	8009883a 	mov	r4,r16
   37a24:	0027883a 	mov	r19,zero
   37a28:	0035a580 	call	35a58 <_Balloc>
   37a2c:	b1800417 	ldw	r6,16(r22)
   37a30:	d9401317 	ldw	r5,76(sp)
   37a34:	11000304 	addi	r4,r2,12
   37a38:	31800084 	addi	r6,r6,2
   37a3c:	318d883a 	add	r6,r6,r6
   37a40:	318d883a 	add	r6,r6,r6
   37a44:	1025883a 	mov	r18,r2
   37a48:	002eaec0 	call	2eaec <memcpy>
   37a4c:	d9400617 	ldw	r5,24(sp)
   37a50:	d9800717 	ldw	r6,28(sp)
   37a54:	d8800a04 	addi	r2,sp,40
   37a58:	8009883a 	mov	r4,r16
   37a5c:	d9c00d04 	addi	r7,sp,52
   37a60:	d8800015 	stw	r2,0(sp)
   37a64:	003674c0 	call	3674c <__d2b>
   37a68:	8009883a 	mov	r4,r16
   37a6c:	01400044 	movi	r5,1
   37a70:	d8800b15 	stw	r2,44(sp)
   37a74:	0035e880 	call	35e88 <__i2b>
   37a78:	d8c01017 	ldw	r3,64(sp)
   37a7c:	1023883a 	mov	r17,r2
   37a80:	00c0010e 	bge	zero,r3,37a88 <_strtod_r+0x798>
   37a84:	1827883a 	mov	r19,r3
   37a88:	d8800d17 	ldw	r2,52(sp)
   37a8c:	1000de16 	blt	r2,zero,37e08 <_strtod_r+0xb18>
   37a90:	d9000e17 	ldw	r4,56(sp)
   37a94:	9807883a 	mov	r3,r19
   37a98:	20af883a 	add	r23,r4,r2
   37a9c:	d9000a17 	ldw	r4,40(sp)
   37aa0:	1505c83a 	sub	r2,r2,r20
   37aa4:	017f00c4 	movi	r5,-1021
   37aa8:	110d883a 	add	r6,r2,r4
   37aac:	31409a0e 	bge	r6,r5,37d18 <_strtod_r+0xa28>
   37ab0:	10810cc4 	addi	r2,r2,1075
   37ab4:	b8b9883a 	add	fp,r23,r2
   37ab8:	1885883a 	add	r2,r3,r2
   37abc:	152b883a 	add	r21,r2,r20
   37ac0:	e005883a 	mov	r2,fp
   37ac4:	bf00010e 	bge	r23,fp,37acc <_strtod_r+0x7dc>
   37ac8:	b805883a 	mov	r2,r23
   37acc:	a880010e 	bge	r21,r2,37ad4 <_strtod_r+0x7e4>
   37ad0:	a805883a 	mov	r2,r21
   37ad4:	0080030e 	bge	zero,r2,37ae4 <_strtod_r+0x7f4>
   37ad8:	e0b9c83a 	sub	fp,fp,r2
   37adc:	a8abc83a 	sub	r21,r21,r2
   37ae0:	b8afc83a 	sub	r23,r23,r2
   37ae4:	d9400e17 	ldw	r5,56(sp)
   37ae8:	28000f26 	beq	r5,zero,37b28 <_strtod_r+0x838>
   37aec:	280d883a 	mov	r6,r5
   37af0:	8009883a 	mov	r4,r16
   37af4:	880b883a 	mov	r5,r17
   37af8:	003611c0 	call	3611c <__pow5mult>
   37afc:	d9800b17 	ldw	r6,44(sp)
   37b00:	8009883a 	mov	r4,r16
   37b04:	100b883a 	mov	r5,r2
   37b08:	1023883a 	mov	r17,r2
   37b0c:	0035ec40 	call	35ec4 <__multiply>
   37b10:	d9400b17 	ldw	r5,44(sp)
   37b14:	8009883a 	mov	r4,r16
   37b18:	d8801815 	stw	r2,96(sp)
   37b1c:	0035b000 	call	35b00 <_Bfree>
   37b20:	d8801817 	ldw	r2,96(sp)
   37b24:	d8800b15 	stw	r2,44(sp)
   37b28:	0700050e 	bge	zero,fp,37b40 <_strtod_r+0x850>
   37b2c:	d9400b17 	ldw	r5,44(sp)
   37b30:	8009883a 	mov	r4,r16
   37b34:	e00d883a 	mov	r6,fp
   37b38:	00362480 	call	36248 <__lshift>
   37b3c:	d8800b15 	stw	r2,44(sp)
   37b40:	98000526 	beq	r19,zero,37b58 <_strtod_r+0x868>
   37b44:	900b883a 	mov	r5,r18
   37b48:	8009883a 	mov	r4,r16
   37b4c:	980d883a 	mov	r6,r19
   37b50:	003611c0 	call	3611c <__pow5mult>
   37b54:	1025883a 	mov	r18,r2
   37b58:	0540050e 	bge	zero,r21,37b70 <_strtod_r+0x880>
   37b5c:	900b883a 	mov	r5,r18
   37b60:	8009883a 	mov	r4,r16
   37b64:	a80d883a 	mov	r6,r21
   37b68:	00362480 	call	36248 <__lshift>
   37b6c:	1025883a 	mov	r18,r2
   37b70:	05c0050e 	bge	zero,r23,37b88 <_strtod_r+0x898>
   37b74:	880b883a 	mov	r5,r17
   37b78:	8009883a 	mov	r4,r16
   37b7c:	b80d883a 	mov	r6,r23
   37b80:	00362480 	call	36248 <__lshift>
   37b84:	1023883a 	mov	r17,r2
   37b88:	d9400b17 	ldw	r5,44(sp)
   37b8c:	8009883a 	mov	r4,r16
   37b90:	900d883a 	mov	r6,r18
   37b94:	00363fc0 	call	363fc <__mdiff>
   37b98:	1027883a 	mov	r19,r2
   37b9c:	10800317 	ldw	r2,12(r2)
   37ba0:	9809883a 	mov	r4,r19
   37ba4:	98000315 	stw	zero,12(r19)
   37ba8:	880b883a 	mov	r5,r17
   37bac:	d8800f15 	stw	r2,60(sp)
   37bb0:	00363a40 	call	363a4 <__mcmp>
   37bb4:	1001cb16 	blt	r2,zero,382e4 <_strtod_r+0xff4>
   37bb8:	1001fa26 	beq	r2,zero,383a4 <_strtod_r+0x10b4>
   37bbc:	9809883a 	mov	r4,r19
   37bc0:	880b883a 	mov	r5,r17
   37bc4:	00368900 	call	36890 <__ratio>
   37bc8:	1009883a 	mov	r4,r2
   37bcc:	180b883a 	mov	r5,r3
   37bd0:	000d883a 	mov	r6,zero
   37bd4:	01d00034 	movhi	r7,16384
   37bd8:	102f883a 	mov	r23,r2
   37bdc:	1839883a 	mov	fp,r3
   37be0:	003b8fc0 	call	3b8fc <__ledf2>
   37be4:	00804f16 	blt	zero,r2,37d24 <_strtod_r+0xa34>
   37be8:	d9400f17 	ldw	r5,60(sp)
   37bec:	28008926 	beq	r5,zero,37e14 <_strtod_r+0xb24>
   37bf0:	da400717 	ldw	r9,28(sp)
   37bf4:	05cffc34 	movhi	r23,16368
   37bf8:	d8000815 	stw	zero,32(sp)
   37bfc:	ddc00915 	stw	r23,36(sp)
   37c00:	002b883a 	mov	r21,zero
   37c04:	4f1ffc2c 	andhi	fp,r9,32752
   37c08:	009ff834 	movhi	r2,32736
   37c0c:	e0805526 	beq	fp,r2,37d64 <_strtod_r+0xa74>
   37c10:	a0001b26 	beq	r20,zero,37c80 <_strtod_r+0x990>
   37c14:	0081a834 	movhi	r2,1696
   37c18:	17001936 	bltu	r2,fp,37c80 <_strtod_r+0x990>
   37c1c:	a809883a 	mov	r4,r21
   37c20:	b80b883a 	mov	r5,r23
   37c24:	01bff034 	movhi	r6,65472
   37c28:	01d07834 	movhi	r7,16864
   37c2c:	39ffffc4 	addi	r7,r7,-1
   37c30:	003b8fc0 	call	3b8fc <__ledf2>
   37c34:	00800d16 	blt	zero,r2,37c6c <_strtod_r+0x97c>
   37c38:	a809883a 	mov	r4,r21
   37c3c:	b80b883a 	mov	r5,r23
   37c40:	003a5180 	call	3a518 <__fixunsdfsi>
   37c44:	1000d626 	beq	r2,zero,37fa0 <_strtod_r+0xcb0>
   37c48:	1009883a 	mov	r4,r2
   37c4c:	002bf080 	call	2bf08 <__floatunsidf>
   37c50:	102b883a 	mov	r21,r2
   37c54:	182f883a 	mov	r23,r3
   37c58:	d9400f17 	ldw	r5,60(sp)
   37c5c:	2800ce1e 	bne	r5,zero,37f98 <_strtod_r+0xca8>
   37c60:	b8a0003c 	xorhi	r2,r23,32768
   37c64:	dd400815 	stw	r21,32(sp)
   37c68:	d8800915 	stw	r2,36(sp)
   37c6c:	d8c00917 	ldw	r3,36(sp)
   37c70:	0081ac34 	movhi	r2,1712
   37c74:	1885883a 	add	r2,r3,r2
   37c78:	1705c83a 	sub	r2,r2,fp
   37c7c:	d8800915 	stw	r2,36(sp)
   37c80:	d9000617 	ldw	r4,24(sp)
   37c84:	d9400717 	ldw	r5,28(sp)
   37c88:	00365a40 	call	365a4 <__ulp>
   37c8c:	da800617 	ldw	r10,24(sp)
   37c90:	da400717 	ldw	r9,28(sp)
   37c94:	d9800817 	ldw	r6,32(sp)
   37c98:	d9c00917 	ldw	r7,36(sp)
   37c9c:	1009883a 	mov	r4,r2
   37ca0:	180b883a 	mov	r5,r3
   37ca4:	da401915 	stw	r9,100(sp)
   37ca8:	da801815 	stw	r10,96(sp)
   37cac:	002ba100 	call	2ba10 <__muldf3>
   37cb0:	da401917 	ldw	r9,100(sp)
   37cb4:	da801817 	ldw	r10,96(sp)
   37cb8:	100d883a 	mov	r6,r2
   37cbc:	480b883a 	mov	r5,r9
   37cc0:	5009883a 	mov	r4,r10
   37cc4:	180f883a 	mov	r7,r3
   37cc8:	003b66c0 	call	3b66c <__adddf3>
   37ccc:	d8800615 	stw	r2,24(sp)
   37cd0:	d8c00715 	stw	r3,28(sp)
   37cd4:	1813883a 	mov	r9,r3
   37cd8:	a000021e 	bne	r20,zero,37ce4 <_strtod_r+0x9f4>
   37cdc:	489ffc2c 	andhi	r2,r9,32752
   37ce0:	e0807226 	beq	fp,r2,37eac <_strtod_r+0xbbc>
   37ce4:	d9400b17 	ldw	r5,44(sp)
   37ce8:	8009883a 	mov	r4,r16
   37cec:	0035b000 	call	35b00 <_Bfree>
   37cf0:	8009883a 	mov	r4,r16
   37cf4:	900b883a 	mov	r5,r18
   37cf8:	0035b000 	call	35b00 <_Bfree>
   37cfc:	8009883a 	mov	r4,r16
   37d00:	880b883a 	mov	r5,r17
   37d04:	0035b000 	call	35b00 <_Bfree>
   37d08:	8009883a 	mov	r4,r16
   37d0c:	980b883a 	mov	r5,r19
   37d10:	0035b000 	call	35b00 <_Bfree>
   37d14:	003f4106 	br	37a1c <_strtod_r+0x72c>
   37d18:	00800d84 	movi	r2,54
   37d1c:	1105c83a 	sub	r2,r2,r4
   37d20:	003f6406 	br	37ab4 <_strtod_r+0x7c4>
   37d24:	b809883a 	mov	r4,r23
   37d28:	e00b883a 	mov	r5,fp
   37d2c:	000d883a 	mov	r6,zero
   37d30:	01cff834 	movhi	r7,16352
   37d34:	002ba100 	call	2ba10 <__muldf3>
   37d38:	d9000f17 	ldw	r4,60(sp)
   37d3c:	102b883a 	mov	r21,r2
   37d40:	182f883a 	mov	r23,r3
   37d44:	2000011e 	bne	r4,zero,37d4c <_strtod_r+0xa5c>
   37d48:	18e0003c 	xorhi	r3,r3,32768
   37d4c:	da400717 	ldw	r9,28(sp)
   37d50:	d8800815 	stw	r2,32(sp)
   37d54:	d8c00915 	stw	r3,36(sp)
   37d58:	4f1ffc2c 	andhi	fp,r9,32752
   37d5c:	009ff834 	movhi	r2,32736
   37d60:	e0bfab1e 	bne	fp,r2,37c10 <_strtod_r+0x920>
   37d64:	d8800617 	ldw	r2,24(sp)
   37d68:	00ff2c34 	movhi	r3,64688
   37d6c:	48d3883a 	add	r9,r9,r3
   37d70:	1009883a 	mov	r4,r2
   37d74:	d8800415 	stw	r2,16(sp)
   37d78:	d8800717 	ldw	r2,28(sp)
   37d7c:	480b883a 	mov	r5,r9
   37d80:	da400715 	stw	r9,28(sp)
   37d84:	d8800515 	stw	r2,20(sp)
   37d88:	00365a40 	call	365a4 <__ulp>
   37d8c:	da800617 	ldw	r10,24(sp)
   37d90:	da400717 	ldw	r9,28(sp)
   37d94:	d9800817 	ldw	r6,32(sp)
   37d98:	d9c00917 	ldw	r7,36(sp)
   37d9c:	1009883a 	mov	r4,r2
   37da0:	180b883a 	mov	r5,r3
   37da4:	da401915 	stw	r9,100(sp)
   37da8:	da801815 	stw	r10,96(sp)
   37dac:	002ba100 	call	2ba10 <__muldf3>
   37db0:	da801817 	ldw	r10,96(sp)
   37db4:	da401917 	ldw	r9,100(sp)
   37db8:	100d883a 	mov	r6,r2
   37dbc:	5009883a 	mov	r4,r10
   37dc0:	480b883a 	mov	r5,r9
   37dc4:	180f883a 	mov	r7,r3
   37dc8:	003b66c0 	call	3b66c <__adddf3>
   37dcc:	d8800615 	stw	r2,24(sp)
   37dd0:	015f2834 	movhi	r5,31904
   37dd4:	297fffc4 	addi	r5,r5,-1
   37dd8:	189ffc2c 	andhi	r2,r3,32752
   37ddc:	2880642e 	bgeu	r5,r2,37f70 <_strtod_r+0xc80>
   37de0:	d8800517 	ldw	r2,20(sp)
   37de4:	00dffc34 	movhi	r3,32752
   37de8:	18ffffc4 	addi	r3,r3,-1
   37dec:	10c18526 	beq	r2,r3,38404 <_strtod_r+0x1114>
   37df0:	011ffc34 	movhi	r4,32752
   37df4:	213fffc4 	addi	r4,r4,-1
   37df8:	00bfffc4 	movi	r2,-1
   37dfc:	d9000715 	stw	r4,28(sp)
   37e00:	d8800615 	stw	r2,24(sp)
   37e04:	003fb706 	br	37ce4 <_strtod_r+0x9f4>
   37e08:	9887c83a 	sub	r3,r19,r2
   37e0c:	ddc00e17 	ldw	r23,56(sp)
   37e10:	003f2206 	br	37a9c <_strtod_r+0x7ac>
   37e14:	d8800617 	ldw	r2,24(sp)
   37e18:	10001a1e 	bne	r2,zero,37e84 <_strtod_r+0xb94>
   37e1c:	da400717 	ldw	r9,28(sp)
   37e20:	00c00434 	movhi	r3,16
   37e24:	18ffffc4 	addi	r3,r3,-1
   37e28:	48c4703a 	and	r2,r9,r3
   37e2c:	1000191e 	bne	r2,zero,37e94 <_strtod_r+0xba4>
   37e30:	b809883a 	mov	r4,r23
   37e34:	e00b883a 	mov	r5,fp
   37e38:	000d883a 	mov	r6,zero
   37e3c:	01cffc34 	movhi	r7,16368
   37e40:	da401915 	stw	r9,100(sp)
   37e44:	003b8a00 	call	3b8a0 <__ltdf2>
   37e48:	da401917 	ldw	r9,100(sp)
   37e4c:	1001bb16 	blt	r2,zero,3853c <_strtod_r+0x124c>
   37e50:	b809883a 	mov	r4,r23
   37e54:	e00b883a 	mov	r5,fp
   37e58:	000d883a 	mov	r6,zero
   37e5c:	01cff834 	movhi	r7,16352
   37e60:	002ba100 	call	2ba10 <__muldf3>
   37e64:	da401917 	ldw	r9,100(sp)
   37e68:	182f883a 	mov	r23,r3
   37e6c:	102b883a 	mov	r21,r2
   37e70:	1007883a 	mov	r3,r2
   37e74:	b8a0003c 	xorhi	r2,r23,32768
   37e78:	d8c00815 	stw	r3,32(sp)
   37e7c:	d8800915 	stw	r2,36(sp)
   37e80:	003f6006 	br	37c04 <_strtod_r+0x914>
   37e84:	00c00044 	movi	r3,1
   37e88:	da400717 	ldw	r9,28(sp)
   37e8c:	10c0011e 	bne	r2,r3,37e94 <_strtod_r+0xba4>
   37e90:	4800c526 	beq	r9,zero,381a8 <_strtod_r+0xeb8>
   37e94:	00affc34 	movhi	r2,49136
   37e98:	d8000815 	stw	zero,32(sp)
   37e9c:	d8800915 	stw	r2,36(sp)
   37ea0:	002b883a 	mov	r21,zero
   37ea4:	05cffc34 	movhi	r23,16368
   37ea8:	003f5606 	br	37c04 <_strtod_r+0x914>
   37eac:	b80b883a 	mov	r5,r23
   37eb0:	a809883a 	mov	r4,r21
   37eb4:	da401915 	stw	r9,100(sp)
   37eb8:	003ba2c0 	call	3ba2c <__fixdfsi>
   37ebc:	1009883a 	mov	r4,r2
   37ec0:	003b9580 	call	3b958 <__floatsidf>
   37ec4:	b80b883a 	mov	r5,r23
   37ec8:	a809883a 	mov	r4,r21
   37ecc:	100d883a 	mov	r6,r2
   37ed0:	180f883a 	mov	r7,r3
   37ed4:	003b6c00 	call	3b6c0 <__subdf3>
   37ed8:	102f883a 	mov	r23,r2
   37edc:	d8800f17 	ldw	r2,60(sp)
   37ee0:	1839883a 	mov	fp,r3
   37ee4:	da401917 	ldw	r9,100(sp)
   37ee8:	1000021e 	bne	r2,zero,37ef4 <_strtod_r+0xc04>
   37eec:	d8800617 	ldw	r2,24(sp)
   37ef0:	10004826 	beq	r2,zero,38014 <_strtod_r+0xd24>
   37ef4:	b809883a 	mov	r4,r23
   37ef8:	e00b883a 	mov	r5,fp
   37efc:	01a52834 	movhi	r6,38048
   37f00:	318d6544 	addi	r6,r6,13717
   37f04:	01cff834 	movhi	r7,16352
   37f08:	39ffffc4 	addi	r7,r7,-1
   37f0c:	003b8a00 	call	3b8a0 <__ltdf2>
   37f10:	10000716 	blt	r2,zero,37f30 <_strtod_r+0xc40>
   37f14:	b809883a 	mov	r4,r23
   37f18:	e00b883a 	mov	r5,fp
   37f1c:	018d6c34 	movhi	r6,13744
   37f20:	31b94d44 	addi	r6,r6,-6859
   37f24:	01cff834 	movhi	r7,16352
   37f28:	003b7d80 	call	3b7d8 <__gtdf2>
   37f2c:	00bf6d0e 	bge	zero,r2,37ce4 <_strtod_r+0x9f4>
   37f30:	d9400b17 	ldw	r5,44(sp)
   37f34:	8009883a 	mov	r4,r16
   37f38:	0035b000 	call	35b00 <_Bfree>
   37f3c:	8009883a 	mov	r4,r16
   37f40:	900b883a 	mov	r5,r18
   37f44:	0035b000 	call	35b00 <_Bfree>
   37f48:	8009883a 	mov	r4,r16
   37f4c:	880b883a 	mov	r5,r17
   37f50:	0035b000 	call	35b00 <_Bfree>
   37f54:	8009883a 	mov	r4,r16
   37f58:	b00b883a 	mov	r5,r22
   37f5c:	0035b000 	call	35b00 <_Bfree>
   37f60:	8009883a 	mov	r4,r16
   37f64:	980b883a 	mov	r5,r19
   37f68:	0035b000 	call	35b00 <_Bfree>
   37f6c:	003e8506 	br	37984 <_strtod_r+0x694>
   37f70:	0240d434 	movhi	r9,848
   37f74:	1a53883a 	add	r9,r3,r9
   37f78:	da400715 	stw	r9,28(sp)
   37f7c:	003f5606 	br	37cd8 <_strtod_r+0x9e8>
   37f80:	a827883a 	mov	r19,r21
   37f84:	dd801415 	stw	r22,80(sp)
   37f88:	000d883a 	mov	r6,zero
   37f8c:	0029883a 	mov	r20,zero
   37f90:	d8001015 	stw	zero,64(sp)
   37f94:	003d1d06 	br	3740c <_strtod_r+0x11c>
   37f98:	b805883a 	mov	r2,r23
   37f9c:	003f3106 	br	37c64 <_strtod_r+0x974>
   37fa0:	002b883a 	mov	r21,zero
   37fa4:	05cffc34 	movhi	r23,16368
   37fa8:	003f2b06 	br	37c58 <_strtod_r+0x968>
   37fac:	d9400e17 	ldw	r5,56(sp)
   37fb0:	0009883a 	mov	r4,zero
   37fb4:	d9400c15 	stw	r5,48(sp)
   37fb8:	003d1706 	br	37418 <_strtod_r+0x128>
   37fbc:	dd801415 	stw	r22,80(sp)
   37fc0:	a82f883a 	mov	r23,r21
   37fc4:	000d883a 	mov	r6,zero
   37fc8:	0029883a 	mov	r20,zero
   37fcc:	3dbff404 	addi	r22,r7,-48
   37fd0:	00800244 	movi	r2,9
   37fd4:	15802136 	bltu	r2,r22,3805c <_strtod_r+0xd6c>
   37fd8:	31800044 	addi	r6,r6,1
   37fdc:	dc400c17 	ldw	r17,48(sp)
   37fe0:	003daa06 	br	3768c <_strtod_r+0x39c>
   37fe4:	d8001515 	stw	zero,84(sp)
   37fe8:	d9400e17 	ldw	r5,56(sp)
   37fec:	28800084 	addi	r2,r5,2
   37ff0:	d8800c15 	stw	r2,48(sp)
   37ff4:	29c00087 	ldb	r7,2(r5)
   37ff8:	003ded06 	br	377b0 <_strtod_r+0x4c0>
   37ffc:	00c00044 	movi	r3,1
   38000:	d8c01515 	stw	r3,84(sp)
   38004:	003ff806 	br	37fe8 <_strtod_r+0xcf8>
   38008:	0005883a 	mov	r2,zero
   3800c:	0007883a 	mov	r3,zero
   38010:	003d5806 	br	37574 <_strtod_r+0x284>
   38014:	00c00434 	movhi	r3,16
   38018:	18ffffc4 	addi	r3,r3,-1
   3801c:	48d2703a 	and	r9,r9,r3
   38020:	483fb41e 	bne	r9,zero,37ef4 <_strtod_r+0xc04>
   38024:	b809883a 	mov	r4,r23
   38028:	e00b883a 	mov	r5,fp
   3802c:	01a52834 	movhi	r6,38048
   38030:	318d6544 	addi	r6,r6,13717
   38034:	01cff434 	movhi	r7,16336
   38038:	39ffffc4 	addi	r7,r7,-1
   3803c:	003b8a00 	call	3b8a0 <__ltdf2>
   38040:	103f280e 	bge	r2,zero,37ce4 <_strtod_r+0x9f4>
   38044:	003fba06 	br	37f30 <_strtod_r+0xc40>
   38048:	d8c01317 	ldw	r3,76(sp)
   3804c:	183dce1e 	bne	r3,zero,37788 <_strtod_r+0x498>
   38050:	d8800617 	ldw	r2,24(sp)
   38054:	d8c00717 	ldw	r3,28(sp)
   38058:	003d4306 	br	37568 <_strtod_r+0x278>
   3805c:	00c00044 	movi	r3,1
   38060:	a827883a 	mov	r19,r21
   38064:	d8c01015 	stw	r3,64(sp)
   38068:	b82b883a 	mov	r21,r23
   3806c:	003ce506 	br	37404 <_strtod_r+0x114>
   38070:	00804d04 	movi	r2,308
   38074:	1440ec16 	blt	r2,r17,38428 <_strtod_r+0x1138>
   38078:	8825d13a 	srai	r18,r17,4
   3807c:	05c00044 	movi	r23,1
   38080:	bc81ca0e 	bge	r23,r18,387ac <_strtod_r+0x14bc>
   38084:	d8800617 	ldw	r2,24(sp)
   38088:	d8c00717 	ldw	r3,28(sp)
   3808c:	05800134 	movhi	r22,4
   38090:	b584b004 	addi	r22,r22,4800
   38094:	b029883a 	mov	r20,r22
   38098:	0023883a 	mov	r17,zero
   3809c:	9180004c 	andi	r6,r18,1
   380a0:	30000526 	beq	r6,zero,380b8 <_strtod_r+0xdc8>
   380a4:	a1800017 	ldw	r6,0(r20)
   380a8:	a1c00117 	ldw	r7,4(r20)
   380ac:	1009883a 	mov	r4,r2
   380b0:	180b883a 	mov	r5,r3
   380b4:	002ba100 	call	2ba10 <__muldf3>
   380b8:	9025d07a 	srai	r18,r18,1
   380bc:	8c400044 	addi	r17,r17,1
   380c0:	a5000204 	addi	r20,r20,8
   380c4:	bcbff516 	blt	r23,r18,3809c <_strtod_r+0xdac>
   380c8:	d8800615 	stw	r2,24(sp)
   380cc:	d8c00715 	stw	r3,28(sp)
   380d0:	880490fa 	slli	r2,r17,3
   380d4:	d9400717 	ldw	r5,28(sp)
   380d8:	d9000617 	ldw	r4,24(sp)
   380dc:	b0a3883a 	add	r17,r22,r2
   380e0:	89800017 	ldw	r6,0(r17)
   380e4:	89c00117 	ldw	r7,4(r17)
   380e8:	00bf2c34 	movhi	r2,64688
   380ec:	288b883a 	add	r5,r5,r2
   380f0:	002ba100 	call	2ba10 <__muldf3>
   380f4:	d8800615 	stw	r2,24(sp)
   380f8:	011f2834 	movhi	r4,31904
   380fc:	189ffc2c 	andhi	r2,r3,32752
   38100:	2080c936 	bltu	r4,r2,38428 <_strtod_r+0x1138>
   38104:	011f2434 	movhi	r4,31888
   38108:	2081652e 	bgeu	r4,r2,386a0 <_strtod_r+0x13b0>
   3810c:	009ffc34 	movhi	r2,32752
   38110:	10bfffc4 	addi	r2,r2,-1
   38114:	d8800715 	stw	r2,28(sp)
   38118:	00bfffc4 	movi	r2,-1
   3811c:	d8800615 	stw	r2,24(sp)
   38120:	003e2f06 	br	379e0 <_strtod_r+0x6f0>
   38124:	00c00044 	movi	r3,1
   38128:	0027883a 	mov	r19,zero
   3812c:	dd801415 	stw	r22,80(sp)
   38130:	0029883a 	mov	r20,zero
   38134:	d8c01015 	stw	r3,64(sp)
   38138:	003cb206 	br	37404 <_strtod_r+0x114>
   3813c:	d8800717 	ldw	r2,28(sp)
   38140:	00c00434 	movhi	r3,16
   38144:	18ffffc4 	addi	r3,r3,-1
   38148:	10c6703a 	and	r3,r2,r3
   3814c:	1801471e 	bne	r3,zero,3866c <_strtod_r+0x137c>
   38150:	d8c00617 	ldw	r3,24(sp)
   38154:	18007e26 	beq	r3,zero,38350 <_strtod_r+0x1060>
   38158:	18c0004c 	andi	r3,r3,1
   3815c:	1800a726 	beq	r3,zero,383fc <_strtod_r+0x110c>
   38160:	ddc00617 	ldw	r23,24(sp)
   38164:	dd400717 	ldw	r21,28(sp)
   38168:	b809883a 	mov	r4,r23
   3816c:	a80b883a 	mov	r5,r21
   38170:	00365a40 	call	365a4 <__ulp>
   38174:	b809883a 	mov	r4,r23
   38178:	a80b883a 	mov	r5,r21
   3817c:	100d883a 	mov	r6,r2
   38180:	180f883a 	mov	r7,r3
   38184:	003b6c00 	call	3b6c0 <__subdf3>
   38188:	1009883a 	mov	r4,r2
   3818c:	180b883a 	mov	r5,r3
   38190:	000d883a 	mov	r6,zero
   38194:	000f883a 	mov	r7,zero
   38198:	d8800615 	stw	r2,24(sp)
   3819c:	d8c00715 	stw	r3,28(sp)
   381a0:	003b7200 	call	3b720 <__eqdf2>
   381a4:	1000951e 	bne	r2,zero,383fc <_strtod_r+0x110c>
   381a8:	d8000615 	stw	zero,24(sp)
   381ac:	d8000715 	stw	zero,28(sp)
   381b0:	00800884 	movi	r2,34
   381b4:	80800015 	stw	r2,0(r16)
   381b8:	003f5d06 	br	37f30 <_strtod_r+0xc40>
   381bc:	00800404 	movi	r2,16
   381c0:	153d4916 	blt	r2,r20,376e8 <_strtod_r+0x3f8>
   381c4:	8009883a 	mov	r4,r16
   381c8:	01400284 	movi	r5,10
   381cc:	002c1540 	call	2c154 <__mulsi3>
   381d0:	1021883a 	mov	r16,r2
   381d4:	003d4406 	br	376e8 <_strtod_r+0x3f8>
   381d8:	d9001217 	ldw	r4,72(sp)
   381dc:	d8800b04 	addi	r2,sp,44
   381e0:	04c00134 	movhi	r19,4
   381e4:	9cc71704 	addi	r19,r19,7260
   381e8:	d9000115 	stw	r4,4(sp)
   381ec:	d8800015 	stw	r2,0(sp)
   381f0:	8009883a 	mov	r4,r16
   381f4:	d9400c04 	addi	r5,sp,48
   381f8:	980d883a 	mov	r6,r19
   381fc:	d9c00a04 	addi	r7,sp,40
   38200:	0039b140 	call	39b14 <__gethex>
   38204:	148001cc 	andi	r18,r2,7
   38208:	903dde26 	beq	r18,zero,37984 <_strtod_r+0x694>
   3820c:	00c00184 	movi	r3,6
   38210:	90c0f226 	beq	r18,r3,385dc <_strtod_r+0x12ec>
   38214:	d9800b17 	ldw	r6,44(sp)
   38218:	30000826 	beq	r6,zero,3823c <_strtod_r+0xf4c>
   3821c:	99400017 	ldw	r5,0(r19)
   38220:	d9000204 	addi	r4,sp,8
   38224:	d8801815 	stw	r2,96(sp)
   38228:	00369a80 	call	369a8 <__copybits>
   3822c:	d9400b17 	ldw	r5,44(sp)
   38230:	8009883a 	mov	r4,r16
   38234:	0035b000 	call	35b00 <_Bfree>
   38238:	d8801817 	ldw	r2,96(sp)
   3823c:	00c00184 	movi	r3,6
   38240:	d9000a17 	ldw	r4,40(sp)
   38244:	1cbdca36 	bltu	r3,r18,37970 <_strtod_r+0x680>
   38248:	94a5883a 	add	r18,r18,r18
   3824c:	94a5883a 	add	r18,r18,r18
   38250:	00c00134 	movhi	r3,4
   38254:	18e09904 	addi	r3,r3,-32156
   38258:	90c7883a 	add	r3,r18,r3
   3825c:	18c00017 	ldw	r3,0(r3)
   38260:	1800683a 	jmp	r3
   38264:	000382d8 	cmpnei	zero,zero,3595
   38268:	00038294 	movui	zero,3594
   3826c:	00038280 	call	3828 <start_pass+0x240>
   38270:	00037964 	muli	zero,zero,3557
   38274:	000382c0 	call	382c <start_pass+0x244>
   38278:	00038294 	movui	zero,3594
   3827c:	000382d8 	cmpnei	zero,zero,3595
   38280:	d8c00217 	ldw	r3,8(sp)
   38284:	d8c00615 	stw	r3,24(sp)
   38288:	d8c00317 	ldw	r3,12(sp)
   3828c:	d8c00715 	stw	r3,28(sp)
   38290:	003db706 	br	37970 <_strtod_r+0x680>
   38294:	21010cc4 	addi	r4,r4,1075
   38298:	d9400317 	ldw	r5,12(sp)
   3829c:	2008953a 	slli	r4,r4,20
   382a0:	00fffc34 	movhi	r3,65520
   382a4:	18ffffc4 	addi	r3,r3,-1
   382a8:	28c6703a 	and	r3,r5,r3
   382ac:	20c6b03a 	or	r3,r4,r3
   382b0:	d9000217 	ldw	r4,8(sp)
   382b4:	d8c00715 	stw	r3,28(sp)
   382b8:	d9000615 	stw	r4,24(sp)
   382bc:	003dac06 	br	37970 <_strtod_r+0x680>
   382c0:	00e00034 	movhi	r3,32768
   382c4:	18ffffc4 	addi	r3,r3,-1
   382c8:	d8c00715 	stw	r3,28(sp)
   382cc:	00ffffc4 	movi	r3,-1
   382d0:	d8c00615 	stw	r3,24(sp)
   382d4:	003da606 	br	37970 <_strtod_r+0x680>
   382d8:	d8000715 	stw	zero,28(sp)
   382dc:	d8000615 	stw	zero,24(sp)
   382e0:	003da306 	br	37970 <_strtod_r+0x680>
   382e4:	d8c00f17 	ldw	r3,60(sp)
   382e8:	1800441e 	bne	r3,zero,383fc <_strtod_r+0x110c>
   382ec:	d8800617 	ldw	r2,24(sp)
   382f0:	1000421e 	bne	r2,zero,383fc <_strtod_r+0x110c>
   382f4:	d8800717 	ldw	r2,28(sp)
   382f8:	00c00434 	movhi	r3,16
   382fc:	18ffffc4 	addi	r3,r3,-1
   38300:	10c6703a 	and	r3,r2,r3
   38304:	18003d1e 	bne	r3,zero,383fc <_strtod_r+0x110c>
   38308:	109ffc2c 	andhi	r2,r2,32752
   3830c:	00c1ac34 	movhi	r3,1712
   38310:	18803a2e 	bgeu	r3,r2,383fc <_strtod_r+0x110c>
   38314:	98800517 	ldw	r2,20(r19)
   38318:	1000031e 	bne	r2,zero,38328 <_strtod_r+0x1038>
   3831c:	98800417 	ldw	r2,16(r19)
   38320:	00c00044 	movi	r3,1
   38324:	1880350e 	bge	r3,r2,383fc <_strtod_r+0x110c>
   38328:	980b883a 	mov	r5,r19
   3832c:	8009883a 	mov	r4,r16
   38330:	01800044 	movi	r6,1
   38334:	00362480 	call	36248 <__lshift>
   38338:	1009883a 	mov	r4,r2
   3833c:	880b883a 	mov	r5,r17
   38340:	1027883a 	mov	r19,r2
   38344:	00363a40 	call	363a4 <__mcmp>
   38348:	00802c0e 	bge	zero,r2,383fc <_strtod_r+0x110c>
   3834c:	d8800717 	ldw	r2,28(sp)
   38350:	109ffc2c 	andhi	r2,r2,32752
   38354:	a000ed26 	beq	r20,zero,3870c <_strtod_r+0x141c>
   38358:	00c1ac34 	movhi	r3,1712
   3835c:	1880eb36 	bltu	r3,r2,3870c <_strtod_r+0x141c>
   38360:	00c0dc34 	movhi	r3,880
   38364:	18bf902e 	bgeu	r3,r2,381a8 <_strtod_r+0xeb8>
   38368:	d9000617 	ldw	r4,24(sp)
   3836c:	d9400717 	ldw	r5,28(sp)
   38370:	008e5434 	movhi	r2,14672
   38374:	000d883a 	mov	r6,zero
   38378:	100f883a 	mov	r7,r2
   3837c:	d8800515 	stw	r2,20(sp)
   38380:	d8000415 	stw	zero,16(sp)
   38384:	002ba100 	call	2ba10 <__muldf3>
   38388:	d8800615 	stw	r2,24(sp)
   3838c:	d8c00715 	stw	r3,28(sp)
   38390:	183ee71e 	bne	r3,zero,37f30 <_strtod_r+0xc40>
   38394:	103ee61e 	bne	r2,zero,37f30 <_strtod_r+0xc40>
   38398:	00800884 	movi	r2,34
   3839c:	80800015 	stw	r2,0(r16)
   383a0:	003ee306 	br	37f30 <_strtod_r+0xc40>
   383a4:	d9000f17 	ldw	r4,60(sp)
   383a8:	203f6426 	beq	r4,zero,3813c <_strtod_r+0xe4c>
   383ac:	d8c00717 	ldw	r3,28(sp)
   383b0:	00800434 	movhi	r2,16
   383b4:	10bfffc4 	addi	r2,r2,-1
   383b8:	1888703a 	and	r4,r3,r2
   383bc:	2080bd26 	beq	r4,r2,386b4 <_strtod_r+0x13c4>
   383c0:	d8800617 	ldw	r2,24(sp)
   383c4:	1080004c 	andi	r2,r2,1
   383c8:	10000c26 	beq	r2,zero,383fc <_strtod_r+0x110c>
   383cc:	ddc00617 	ldw	r23,24(sp)
   383d0:	dd400717 	ldw	r21,28(sp)
   383d4:	b809883a 	mov	r4,r23
   383d8:	a80b883a 	mov	r5,r21
   383dc:	00365a40 	call	365a4 <__ulp>
   383e0:	b809883a 	mov	r4,r23
   383e4:	a80b883a 	mov	r5,r21
   383e8:	100d883a 	mov	r6,r2
   383ec:	180f883a 	mov	r7,r3
   383f0:	003b66c0 	call	3b66c <__adddf3>
   383f4:	d8800615 	stw	r2,24(sp)
   383f8:	d8c00715 	stw	r3,28(sp)
   383fc:	a03fda1e 	bne	r20,zero,38368 <_strtod_r+0x1078>
   38400:	003ecb06 	br	37f30 <_strtod_r+0xc40>
   38404:	d8c00417 	ldw	r3,16(sp)
   38408:	00bfffc4 	movi	r2,-1
   3840c:	18be781e 	bne	r3,r2,37df0 <_strtod_r+0xb00>
   38410:	00800884 	movi	r2,34
   38414:	80800015 	stw	r2,0(r16)
   38418:	009ffc34 	movhi	r2,32752
   3841c:	d8800715 	stw	r2,28(sp)
   38420:	d8000615 	stw	zero,24(sp)
   38424:	003ec206 	br	37f30 <_strtod_r+0xc40>
   38428:	00800884 	movi	r2,34
   3842c:	80800015 	stw	r2,0(r16)
   38430:	00dffc34 	movhi	r3,32752
   38434:	0005883a 	mov	r2,zero
   38438:	003c4e06 	br	37574 <_strtod_r+0x284>
   3843c:	883d6826 	beq	r17,zero,379e0 <_strtod_r+0x6f0>
   38440:	0463c83a 	sub	r17,zero,r17
   38444:	888003cc 	andi	r2,r17,15
   38448:	10000b26 	beq	r2,zero,38478 <_strtod_r+0x1188>
   3844c:	100490fa 	slli	r2,r2,3
   38450:	00c00134 	movhi	r3,4
   38454:	18c4ba04 	addi	r3,r3,4840
   38458:	d9000617 	ldw	r4,24(sp)
   3845c:	1885883a 	add	r2,r3,r2
   38460:	d9400717 	ldw	r5,28(sp)
   38464:	11800017 	ldw	r6,0(r2)
   38468:	11c00117 	ldw	r7,4(r2)
   3846c:	002bcf40 	call	2bcf4 <__divdf3>
   38470:	d8800615 	stw	r2,24(sp)
   38474:	d8c00715 	stw	r3,28(sp)
   38478:	8823d13a 	srai	r17,r17,4
   3847c:	883d5826 	beq	r17,zero,379e0 <_strtod_r+0x6f0>
   38480:	008007c4 	movi	r2,31
   38484:	14402816 	blt	r2,r17,38528 <_strtod_r+0x1238>
   38488:	8880040c 	andi	r2,r17,16
   3848c:	1000cf1e 	bne	r2,zero,387cc <_strtod_r+0x14dc>
   38490:	0029883a 	mov	r20,zero
   38494:	0440100e 	bge	zero,r17,384d8 <_strtod_r+0x11e8>
   38498:	d8800617 	ldw	r2,24(sp)
   3849c:	d8c00717 	ldw	r3,28(sp)
   384a0:	04800134 	movhi	r18,4
   384a4:	9484f304 	addi	r18,r18,5068
   384a8:	8980004c 	andi	r6,r17,1
   384ac:	30000526 	beq	r6,zero,384c4 <_strtod_r+0x11d4>
   384b0:	91800017 	ldw	r6,0(r18)
   384b4:	91c00117 	ldw	r7,4(r18)
   384b8:	1009883a 	mov	r4,r2
   384bc:	180b883a 	mov	r5,r3
   384c0:	002ba100 	call	2ba10 <__muldf3>
   384c4:	8823d07a 	srai	r17,r17,1
   384c8:	94800204 	addi	r18,r18,8
   384cc:	883ff61e 	bne	r17,zero,384a8 <_strtod_r+0x11b8>
   384d0:	d8800615 	stw	r2,24(sp)
   384d4:	d8c00715 	stw	r3,28(sp)
   384d8:	a0000d26 	beq	r20,zero,38510 <_strtod_r+0x1220>
   384dc:	d8c00717 	ldw	r3,28(sp)
   384e0:	01001ac4 	movi	r4,107
   384e4:	189ffc2c 	andhi	r2,r3,32752
   384e8:	1004d53a 	srli	r2,r2,20
   384ec:	2085c83a 	sub	r2,r4,r2
   384f0:	0080070e 	bge	zero,r2,38510 <_strtod_r+0x1220>
   384f4:	010007c4 	movi	r4,31
   384f8:	2080c30e 	bge	r4,r2,38808 <_strtod_r+0x1518>
   384fc:	d8000615 	stw	zero,24(sp)
   38500:	01000d04 	movi	r4,52
   38504:	2080c60e 	bge	r4,r2,38820 <_strtod_r+0x1530>
   38508:	0080dc34 	movhi	r2,880
   3850c:	d8800715 	stw	r2,28(sp)
   38510:	d9000617 	ldw	r4,24(sp)
   38514:	d9400717 	ldw	r5,28(sp)
   38518:	000d883a 	mov	r6,zero
   3851c:	000f883a 	mov	r7,zero
   38520:	003b7200 	call	3b720 <__eqdf2>
   38524:	103d2f1e 	bne	r2,zero,379e4 <_strtod_r+0x6f4>
   38528:	00800884 	movi	r2,34
   3852c:	80800015 	stw	r2,0(r16)
   38530:	0007883a 	mov	r3,zero
   38534:	0005883a 	mov	r2,zero
   38538:	003c0e06 	br	37574 <_strtod_r+0x284>
   3853c:	0007883a 	mov	r3,zero
   38540:	00aff834 	movhi	r2,49120
   38544:	002b883a 	mov	r21,zero
   38548:	05cff834 	movhi	r23,16352
   3854c:	003e4a06 	br	37e78 <_strtod_r+0xb88>
   38550:	011387c4 	movi	r4,19999
   38554:	003cca06 	br	37880 <_strtod_r+0x590>
   38558:	b00b883a 	mov	r5,r22
   3855c:	d8000f15 	stw	zero,60(sp)
   38560:	0039883a 	mov	fp,zero
   38564:	002b883a 	mov	r21,zero
   38568:	003c2d06 	br	37620 <_strtod_r+0x330>
   3856c:	d8000f15 	stw	zero,60(sp)
   38570:	0039883a 	mov	fp,zero
   38574:	002b883a 	mov	r21,zero
   38578:	003b9d06 	br	373f0 <_strtod_r+0x100>
   3857c:	d9401017 	ldw	r5,64(sp)
   38580:	00c00944 	movi	r3,37
   38584:	1d47c83a 	sub	r3,r3,r21
   38588:	197d0116 	blt	r3,r5,37990 <_strtod_r+0x6a0>
   3858c:	1563c83a 	sub	r17,r2,r21
   38590:	880490fa 	slli	r2,r17,3
   38594:	04000134 	movhi	r16,4
   38598:	8404ba04 	addi	r16,r16,4840
   3859c:	d9000617 	ldw	r4,24(sp)
   385a0:	8085883a 	add	r2,r16,r2
   385a4:	d9400717 	ldw	r5,28(sp)
   385a8:	11800017 	ldw	r6,0(r2)
   385ac:	11c00117 	ldw	r7,4(r2)
   385b0:	002ba100 	call	2ba10 <__muldf3>
   385b4:	d9001017 	ldw	r4,64(sp)
   385b8:	180b883a 	mov	r5,r3
   385bc:	244dc83a 	sub	r6,r4,r17
   385c0:	300c90fa 	slli	r6,r6,3
   385c4:	1009883a 	mov	r4,r2
   385c8:	81a1883a 	add	r16,r16,r6
   385cc:	81800017 	ldw	r6,0(r16)
   385d0:	81c00117 	ldw	r7,4(r16)
   385d4:	002ba100 	call	2ba10 <__muldf3>
   385d8:	003be606 	br	37574 <_strtod_r+0x284>
   385dc:	d9400e17 	ldw	r5,56(sp)
   385e0:	d8001215 	stw	zero,72(sp)
   385e4:	d9400c15 	stw	r5,48(sp)
   385e8:	003ce606 	br	37984 <_strtod_r+0x694>
   385ec:	d9401017 	ldw	r5,64(sp)
   385f0:	00bffa84 	movi	r2,-22
   385f4:	28bce616 	blt	r5,r2,37990 <_strtod_r+0x6a0>
   385f8:	280490fa 	slli	r2,r5,3
   385fc:	00c00134 	movhi	r3,4
   38600:	18c4ba04 	addi	r3,r3,4840
   38604:	d9000617 	ldw	r4,24(sp)
   38608:	1885c83a 	sub	r2,r3,r2
   3860c:	d9400717 	ldw	r5,28(sp)
   38610:	11800017 	ldw	r6,0(r2)
   38614:	11c00117 	ldw	r7,4(r2)
   38618:	002bcf40 	call	2bcf4 <__divdf3>
   3861c:	003bd506 	br	37574 <_strtod_r+0x284>
   38620:	00801a44 	movi	r2,105
   38624:	38bb8726 	beq	r7,r2,37444 <_strtod_r+0x154>
   38628:	00801b84 	movi	r2,110
   3862c:	38be881e 	bne	r7,r2,38050 <_strtod_r+0xd60>
   38630:	d8c00c17 	ldw	r3,48(sp)
   38634:	01000134 	movhi	r4,4
   38638:	2104f204 	addi	r4,r4,5064
   3863c:	01801004 	movi	r6,64
   38640:	01c01684 	movi	r7,90
   38644:	21400007 	ldb	r5,0(r4)
   38648:	21000044 	addi	r4,r4,1
   3864c:	28004e26 	beq	r5,zero,38788 <_strtod_r+0x1498>
   38650:	18c00044 	addi	r3,r3,1
   38654:	18800007 	ldb	r2,0(r3)
   38658:	3080020e 	bge	r6,r2,38664 <_strtod_r+0x1374>
   3865c:	38800116 	blt	r7,r2,38664 <_strtod_r+0x1374>
   38660:	10800804 	addi	r2,r2,32
   38664:	117ff726 	beq	r2,r5,38644 <_strtod_r+0x1354>
   38668:	003e7906 	br	38050 <_strtod_r+0xd60>
   3866c:	d8c00617 	ldw	r3,24(sp)
   38670:	003eb906 	br	38158 <_strtod_r+0xe68>
   38674:	00800404 	movi	r2,16
   38678:	15c02216 	blt	r2,r23,38704 <_strtod_r+0x1414>
   3867c:	d9000f17 	ldw	r4,60(sp)
   38680:	01400284 	movi	r5,10
   38684:	002c1540 	call	2c154 <__mulsi3>
   38688:	15ad883a 	add	r22,r2,r22
   3868c:	dd800f15 	stw	r22,60(sp)
   38690:	000d883a 	mov	r6,zero
   38694:	003c2606 	br	37730 <_strtod_r+0x440>
   38698:	000d883a 	mov	r6,zero
   3869c:	003bf106 	br	37664 <_strtod_r+0x374>
   386a0:	0080d434 	movhi	r2,848
   386a4:	1887883a 	add	r3,r3,r2
   386a8:	d8c00715 	stw	r3,28(sp)
   386ac:	0029883a 	mov	r20,zero
   386b0:	003ccc06 	br	379e4 <_strtod_r+0x6f4>
   386b4:	d8800617 	ldw	r2,24(sp)
   386b8:	a0001026 	beq	r20,zero,386fc <_strtod_r+0x140c>
   386bc:	191ffc2c 	andhi	r4,r3,32752
   386c0:	0141a834 	movhi	r5,1696
   386c4:	29000d36 	bltu	r5,r4,386fc <_strtod_r+0x140c>
   386c8:	2008d53a 	srli	r4,r4,20
   386cc:	01401ac4 	movi	r5,107
   386d0:	2909c83a 	sub	r4,r5,r4
   386d4:	017fffc4 	movi	r5,-1
   386d8:	2908983a 	sll	r4,r5,r4
   386dc:	113f391e 	bne	r2,r4,383c4 <_strtod_r+0x10d4>
   386e0:	18dffc2c 	andhi	r3,r3,32752
   386e4:	00800434 	movhi	r2,16
   386e8:	1885883a 	add	r2,r3,r2
   386ec:	d8800715 	stw	r2,28(sp)
   386f0:	d8000615 	stw	zero,24(sp)
   386f4:	a03f1c1e 	bne	r20,zero,38368 <_strtod_r+0x1078>
   386f8:	003e0d06 	br	37f30 <_strtod_r+0xc40>
   386fc:	013fffc4 	movi	r4,-1
   38700:	003ff606 	br	386dc <_strtod_r+0x13ec>
   38704:	000d883a 	mov	r6,zero
   38708:	003c0906 	br	37730 <_strtod_r+0x440>
   3870c:	00fffc34 	movhi	r3,65520
   38710:	10c5883a 	add	r2,r2,r3
   38714:	00c00434 	movhi	r3,16
   38718:	18ffffc4 	addi	r3,r3,-1
   3871c:	10c4b03a 	or	r2,r2,r3
   38720:	d8800715 	stw	r2,28(sp)
   38724:	00bfffc4 	movi	r2,-1
   38728:	d8800615 	stw	r2,24(sp)
   3872c:	a03f0e1e 	bne	r20,zero,38368 <_strtod_r+0x1078>
   38730:	003dff06 	br	37f30 <_strtod_r+0xc40>
   38734:	1011883a 	mov	r8,r2
   38738:	d8800c15 	stw	r2,48(sp)
   3873c:	01000134 	movhi	r4,4
   38740:	2104f004 	addi	r4,r4,5056
   38744:	01801004 	movi	r6,64
   38748:	01c01684 	movi	r7,90
   3874c:	21400007 	ldb	r5,0(r4)
   38750:	10800044 	addi	r2,r2,1
   38754:	21000044 	addi	r4,r4,1
   38758:	28001a26 	beq	r5,zero,387c4 <_strtod_r+0x14d4>
   3875c:	10c00007 	ldb	r3,0(r2)
   38760:	30c0020e 	bge	r6,r3,3876c <_strtod_r+0x147c>
   38764:	38c00116 	blt	r7,r3,3876c <_strtod_r+0x147c>
   38768:	18c00804 	addi	r3,r3,32
   3876c:	197ff726 	beq	r3,r5,3874c <_strtod_r+0x145c>
   38770:	40800044 	addi	r2,r8,1
   38774:	d8800c15 	stw	r2,48(sp)
   38778:	009ffc34 	movhi	r2,32752
   3877c:	d8800715 	stw	r2,28(sp)
   38780:	d8000615 	stw	zero,24(sp)
   38784:	003c7f06 	br	37984 <_strtod_r+0x694>
   38788:	18800044 	addi	r2,r3,1
   3878c:	d8800c15 	stw	r2,48(sp)
   38790:	18c00047 	ldb	r3,1(r3)
   38794:	00800a04 	movi	r2,40
   38798:	18800e26 	beq	r3,r2,387d4 <_strtod_r+0x14e4>
   3879c:	00bffe34 	movhi	r2,65528
   387a0:	d8800715 	stw	r2,28(sp)
   387a4:	d8000615 	stw	zero,24(sp)
   387a8:	003c7606 	br	37984 <_strtod_r+0x694>
   387ac:	0023883a 	mov	r17,zero
   387b0:	05800134 	movhi	r22,4
   387b4:	b584b004 	addi	r22,r22,4800
   387b8:	003e4506 	br	380d0 <_strtod_r+0xde0>
   387bc:	b805883a 	mov	r2,r23
   387c0:	003bd306 	br	37710 <_strtod_r+0x420>
   387c4:	d8800c15 	stw	r2,48(sp)
   387c8:	003feb06 	br	38778 <_strtod_r+0x1488>
   387cc:	05001a84 	movi	r20,106
   387d0:	003f3006 	br	38494 <_strtod_r+0x11a4>
   387d4:	d9000c04 	addi	r4,sp,48
   387d8:	01400134 	movhi	r5,4
   387dc:	29471c04 	addi	r5,r5,7280
   387e0:	d9800204 	addi	r6,sp,8
   387e4:	003a28c0 	call	3a28c <__hexnan>
   387e8:	00c00144 	movi	r3,5
   387ec:	10ffeb1e 	bne	r2,r3,3879c <_strtod_r+0x14ac>
   387f0:	d8800317 	ldw	r2,12(sp)
   387f4:	109ffc34 	orhi	r2,r2,32752
   387f8:	d8800715 	stw	r2,28(sp)
   387fc:	d8800217 	ldw	r2,8(sp)
   38800:	d8800615 	stw	r2,24(sp)
   38804:	003c5f06 	br	37984 <_strtod_r+0x694>
   38808:	00ffffc4 	movi	r3,-1
   3880c:	1884983a 	sll	r2,r3,r2
   38810:	d8c00617 	ldw	r3,24(sp)
   38814:	1884703a 	and	r2,r3,r2
   38818:	d8800615 	stw	r2,24(sp)
   3881c:	003f3c06 	br	38510 <_strtod_r+0x1220>
   38820:	10bff804 	addi	r2,r2,-32
   38824:	013fffc4 	movi	r4,-1
   38828:	2084983a 	sll	r2,r4,r2
   3882c:	10c6703a 	and	r3,r2,r3
   38830:	d8c00715 	stw	r3,28(sp)
   38834:	003f3606 	br	38510 <_strtod_r+0x1220>

00038838 <strtod>:
   38838:	00c00134 	movhi	r3,4
   3883c:	18cbb304 	addi	r3,r3,11980
   38840:	2005883a 	mov	r2,r4
   38844:	19000017 	ldw	r4,0(r3)
   38848:	280d883a 	mov	r6,r5
   3884c:	100b883a 	mov	r5,r2
   38850:	00372f01 	jmpi	372f0 <_strtod_r>

00038854 <strtof>:
   38854:	defffb04 	addi	sp,sp,-20
   38858:	dcc00315 	stw	r19,12(sp)
   3885c:	04c00134 	movhi	r19,4
   38860:	9ccbb304 	addi	r19,r19,11980
   38864:	2005883a 	mov	r2,r4
   38868:	99000017 	ldw	r4,0(r19)
   3886c:	280d883a 	mov	r6,r5
   38870:	100b883a 	mov	r5,r2
   38874:	dfc00415 	stw	ra,16(sp)
   38878:	dc800215 	stw	r18,8(sp)
   3887c:	dc400115 	stw	r17,4(sp)
   38880:	dc000015 	stw	r16,0(sp)
   38884:	00372f00 	call	372f0 <_strtod_r>
   38888:	1009883a 	mov	r4,r2
   3888c:	180b883a 	mov	r5,r3
   38890:	1025883a 	mov	r18,r2
   38894:	1823883a 	mov	r17,r3
   38898:	002bea80 	call	2bea8 <__truncdfsf2>
   3889c:	1009883a 	mov	r4,r2
   388a0:	000b883a 	mov	r5,zero
   388a4:	1021883a 	mov	r16,r2
   388a8:	003b2140 	call	3b214 <__eqsf2>
   388ac:	1000111e 	bne	r2,zero,388f4 <strtof+0xa0>
   388b0:	9009883a 	mov	r4,r18
   388b4:	880b883a 	mov	r5,r17
   388b8:	000d883a 	mov	r6,zero
   388bc:	000f883a 	mov	r7,zero
   388c0:	003b77c0 	call	3b77c <__nedf2>
   388c4:	10000b26 	beq	r2,zero,388f4 <strtof+0xa0>
   388c8:	98800017 	ldw	r2,0(r19)
   388cc:	00c00884 	movi	r3,34
   388d0:	10c00015 	stw	r3,0(r2)
   388d4:	8005883a 	mov	r2,r16
   388d8:	dfc00417 	ldw	ra,16(sp)
   388dc:	dcc00317 	ldw	r19,12(sp)
   388e0:	dc800217 	ldw	r18,8(sp)
   388e4:	dc400117 	ldw	r17,4(sp)
   388e8:	dc000017 	ldw	r16,0(sp)
   388ec:	dec00504 	addi	sp,sp,20
   388f0:	f800283a 	ret
   388f4:	8009883a 	mov	r4,r16
   388f8:	015fe034 	movhi	r5,32640
   388fc:	297fffc4 	addi	r5,r5,-1
   38900:	003b2680 	call	3b268 <__gtsf2>
   38904:	0080070e 	bge	zero,r2,38924 <strtof+0xd0>
   38908:	9009883a 	mov	r4,r18
   3890c:	880b883a 	mov	r5,r17
   38910:	01bfffc4 	movi	r6,-1
   38914:	01dffc34 	movhi	r7,32752
   38918:	39ffffc4 	addi	r7,r7,-1
   3891c:	003b7d80 	call	3b7d8 <__gtdf2>
   38920:	00bfe90e 	bge	zero,r2,388c8 <strtof+0x74>
   38924:	8009883a 	mov	r4,r16
   38928:	017fe034 	movhi	r5,65408
   3892c:	297fffc4 	addi	r5,r5,-1
   38930:	003b2c40 	call	3b2c4 <__ltsf2>
   38934:	103fe70e 	bge	r2,zero,388d4 <strtof+0x80>
   38938:	9009883a 	mov	r4,r18
   3893c:	880b883a 	mov	r5,r17
   38940:	01bfffc4 	movi	r6,-1
   38944:	01fffc34 	movhi	r7,65520
   38948:	39ffffc4 	addi	r7,r7,-1
   3894c:	003b8a00 	call	3b8a0 <__ltdf2>
   38950:	103fdd0e 	bge	r2,zero,388c8 <strtof+0x74>
   38954:	8005883a 	mov	r2,r16
   38958:	dfc00417 	ldw	ra,16(sp)
   3895c:	dcc00317 	ldw	r19,12(sp)
   38960:	dc800217 	ldw	r18,8(sp)
   38964:	dc400117 	ldw	r17,4(sp)
   38968:	dc000017 	ldw	r16,0(sp)
   3896c:	dec00504 	addi	sp,sp,20
   38970:	f800283a 	ret

00038974 <_strtol_r>:
   38974:	defff304 	addi	sp,sp,-52
   38978:	00800134 	movhi	r2,4
   3897c:	108bb104 	addi	r2,r2,11972
   38980:	df000b15 	stw	fp,44(sp)
   38984:	17000017 	ldw	fp,0(r2)
   38988:	ddc00a15 	stw	r23,40(sp)
   3898c:	dd000715 	stw	r20,28(sp)
   38990:	dcc00615 	stw	r19,24(sp)
   38994:	dc000315 	stw	r16,12(sp)
   38998:	dfc00c15 	stw	ra,48(sp)
   3899c:	dd800915 	stw	r22,36(sp)
   389a0:	dd400815 	stw	r21,32(sp)
   389a4:	dc800515 	stw	r18,20(sp)
   389a8:	dc400415 	stw	r17,16(sp)
   389ac:	2827883a 	mov	r19,r5
   389b0:	d9000215 	stw	r4,8(sp)
   389b4:	3029883a 	mov	r20,r6
   389b8:	382f883a 	mov	r23,r7
   389bc:	2821883a 	mov	r16,r5
   389c0:	84400007 	ldb	r17,0(r16)
   389c4:	84000044 	addi	r16,r16,1
   389c8:	e445883a 	add	r2,fp,r17
   389cc:	10800003 	ldbu	r2,0(r2)
   389d0:	1080020c 	andi	r2,r2,8
   389d4:	10803fcc 	andi	r2,r2,255
   389d8:	1080201c 	xori	r2,r2,128
   389dc:	10bfe004 	addi	r2,r2,-128
   389e0:	103ff71e 	bne	r2,zero,389c0 <_strtol_r+0x4c>
   389e4:	00800b44 	movi	r2,45
   389e8:	88806d26 	beq	r17,r2,38ba0 <_strtol_r+0x22c>
   389ec:	00800ac4 	movi	r2,43
   389f0:	88807026 	beq	r17,r2,38bb4 <_strtol_r+0x240>
   389f4:	d8000015 	stw	zero,0(sp)
   389f8:	b800471e 	bne	r23,zero,38b18 <_strtol_r+0x1a4>
   389fc:	00800c04 	movi	r2,48
   38a00:	88804926 	beq	r17,r2,38b28 <_strtol_r+0x1b4>
   38a04:	05c00284 	movi	r23,10
   38a08:	b825883a 	mov	r18,r23
   38a0c:	d9000017 	ldw	r4,0(sp)
   38a10:	20006026 	beq	r4,zero,38b94 <_strtol_r+0x220>
   38a14:	05600034 	movhi	r21,32768
   38a18:	a809883a 	mov	r4,r21
   38a1c:	900b883a 	mov	r5,r18
   38a20:	002c14c0 	call	2c14c <__umodsi3>
   38a24:	a809883a 	mov	r4,r21
   38a28:	900b883a 	mov	r5,r18
   38a2c:	d8800115 	stw	r2,4(sp)
   38a30:	002c1440 	call	2c144 <__udivsi3>
   38a34:	e447883a 	add	r3,fp,r17
   38a38:	18c00003 	ldbu	r3,0(r3)
   38a3c:	102b883a 	mov	r21,r2
   38a40:	000d883a 	mov	r6,zero
   38a44:	1940010c 	andi	r5,r3,4
   38a48:	29403fcc 	andi	r5,r5,255
   38a4c:	2940201c 	xori	r5,r5,128
   38a50:	297fe004 	addi	r5,r5,-128
   38a54:	0009883a 	mov	r4,zero
   38a58:	05bfffc4 	movi	r22,-1
   38a5c:	28001226 	beq	r5,zero,38aa8 <_strtol_r+0x134>
   38a60:	8c7ff404 	addi	r17,r17,-48
   38a64:	8dc0170e 	bge	r17,r23,38ac4 <_strtol_r+0x150>
   38a68:	35800626 	beq	r6,r22,38a84 <_strtol_r+0x110>
   38a6c:	a9003a36 	bltu	r21,r4,38b58 <_strtol_r+0x1e4>
   38a70:	25403726 	beq	r4,r21,38b50 <_strtol_r+0x1dc>
   38a74:	900b883a 	mov	r5,r18
   38a78:	002c1540 	call	2c154 <__mulsi3>
   38a7c:	8889883a 	add	r4,r17,r2
   38a80:	01800044 	movi	r6,1
   38a84:	84400007 	ldb	r17,0(r16)
   38a88:	84000044 	addi	r16,r16,1
   38a8c:	e447883a 	add	r3,fp,r17
   38a90:	18c00003 	ldbu	r3,0(r3)
   38a94:	1940010c 	andi	r5,r3,4
   38a98:	29403fcc 	andi	r5,r5,255
   38a9c:	2940201c 	xori	r5,r5,128
   38aa0:	297fe004 	addi	r5,r5,-128
   38aa4:	283fee1e 	bne	r5,zero,38a60 <_strtol_r+0xec>
   38aa8:	188000cc 	andi	r2,r3,3
   38aac:	10000526 	beq	r2,zero,38ac4 <_strtol_r+0x150>
   38ab0:	18c0004c 	andi	r3,r3,1
   38ab4:	18002a26 	beq	r3,zero,38b60 <_strtol_r+0x1ec>
   38ab8:	00800dc4 	movi	r2,55
   38abc:	88a3c83a 	sub	r17,r17,r2
   38ac0:	8dffe916 	blt	r17,r23,38a68 <_strtol_r+0xf4>
   38ac4:	00bfffc4 	movi	r2,-1
   38ac8:	30802826 	beq	r6,r2,38b6c <_strtol_r+0x1f8>
   38acc:	d8800017 	ldw	r2,0(sp)
   38ad0:	10000126 	beq	r2,zero,38ad8 <_strtol_r+0x164>
   38ad4:	0109c83a 	sub	r4,zero,r4
   38ad8:	2005883a 	mov	r2,r4
   38adc:	a0000226 	beq	r20,zero,38ae8 <_strtol_r+0x174>
   38ae0:	30002a1e 	bne	r6,zero,38b8c <_strtol_r+0x218>
   38ae4:	a4c00015 	stw	r19,0(r20)
   38ae8:	dfc00c17 	ldw	ra,48(sp)
   38aec:	df000b17 	ldw	fp,44(sp)
   38af0:	ddc00a17 	ldw	r23,40(sp)
   38af4:	dd800917 	ldw	r22,36(sp)
   38af8:	dd400817 	ldw	r21,32(sp)
   38afc:	dd000717 	ldw	r20,28(sp)
   38b00:	dcc00617 	ldw	r19,24(sp)
   38b04:	dc800517 	ldw	r18,20(sp)
   38b08:	dc400417 	ldw	r17,16(sp)
   38b0c:	dc000317 	ldw	r16,12(sp)
   38b10:	dec00d04 	addi	sp,sp,52
   38b14:	f800283a 	ret
   38b18:	00800404 	movi	r2,16
   38b1c:	b8bfba1e 	bne	r23,r2,38a08 <_strtol_r+0x94>
   38b20:	00800c04 	movi	r2,48
   38b24:	88bfb81e 	bne	r17,r2,38a08 <_strtol_r+0x94>
   38b28:	80800007 	ldb	r2,0(r16)
   38b2c:	00c01e04 	movi	r3,120
   38b30:	10c02626 	beq	r2,r3,38bcc <_strtol_r+0x258>
   38b34:	00c01604 	movi	r3,88
   38b38:	10c02426 	beq	r2,r3,38bcc <_strtol_r+0x258>
   38b3c:	b800281e 	bne	r23,zero,38be0 <_strtol_r+0x26c>
   38b40:	04800204 	movi	r18,8
   38b44:	04400c04 	movi	r17,48
   38b48:	902f883a 	mov	r23,r18
   38b4c:	003faf06 	br	38a0c <_strtol_r+0x98>
   38b50:	d8800117 	ldw	r2,4(sp)
   38b54:	147fc70e 	bge	r2,r17,38a74 <_strtol_r+0x100>
   38b58:	01bfffc4 	movi	r6,-1
   38b5c:	003fc906 	br	38a84 <_strtol_r+0x110>
   38b60:	008015c4 	movi	r2,87
   38b64:	88a3c83a 	sub	r17,r17,r2
   38b68:	003fd506 	br	38ac0 <_strtol_r+0x14c>
   38b6c:	d9000017 	ldw	r4,0(sp)
   38b70:	2000141e 	bne	r4,zero,38bc4 <_strtol_r+0x250>
   38b74:	00a00034 	movhi	r2,32768
   38b78:	10bfffc4 	addi	r2,r2,-1
   38b7c:	d9000217 	ldw	r4,8(sp)
   38b80:	00c00884 	movi	r3,34
   38b84:	20c00015 	stw	r3,0(r4)
   38b88:	a03fd726 	beq	r20,zero,38ae8 <_strtol_r+0x174>
   38b8c:	84ffffc4 	addi	r19,r16,-1
   38b90:	003fd406 	br	38ae4 <_strtol_r+0x170>
   38b94:	05600034 	movhi	r21,32768
   38b98:	ad7fffc4 	addi	r21,r21,-1
   38b9c:	003f9e06 	br	38a18 <_strtol_r+0xa4>
   38ba0:	00800044 	movi	r2,1
   38ba4:	84400007 	ldb	r17,0(r16)
   38ba8:	d8800015 	stw	r2,0(sp)
   38bac:	80a1883a 	add	r16,r16,r2
   38bb0:	003f9106 	br	389f8 <_strtol_r+0x84>
   38bb4:	84400007 	ldb	r17,0(r16)
   38bb8:	d8000015 	stw	zero,0(sp)
   38bbc:	84000044 	addi	r16,r16,1
   38bc0:	003f8d06 	br	389f8 <_strtol_r+0x84>
   38bc4:	00a00034 	movhi	r2,32768
   38bc8:	003fec06 	br	38b7c <_strtol_r+0x208>
   38bcc:	04800404 	movi	r18,16
   38bd0:	84400047 	ldb	r17,1(r16)
   38bd4:	902f883a 	mov	r23,r18
   38bd8:	84000084 	addi	r16,r16,2
   38bdc:	003f8b06 	br	38a0c <_strtol_r+0x98>
   38be0:	b825883a 	mov	r18,r23
   38be4:	04400c04 	movi	r17,48
   38be8:	003f8806 	br	38a0c <_strtol_r+0x98>

00038bec <strtol>:
   38bec:	00800134 	movhi	r2,4
   38bf0:	108bb304 	addi	r2,r2,11980
   38bf4:	2007883a 	mov	r3,r4
   38bf8:	11000017 	ldw	r4,0(r2)
   38bfc:	2805883a 	mov	r2,r5
   38c00:	300f883a 	mov	r7,r6
   38c04:	180b883a 	mov	r5,r3
   38c08:	100d883a 	mov	r6,r2
   38c0c:	00389741 	jmpi	38974 <_strtol_r>

00038c10 <_strtoll_r>:
   38c10:	defff004 	addi	sp,sp,-64
   38c14:	00800134 	movhi	r2,4
   38c18:	108bb104 	addi	r2,r2,11972
   38c1c:	ddc00d15 	stw	r23,52(sp)
   38c20:	15c00017 	ldw	r23,0(r2)
   38c24:	df000e15 	stw	fp,56(sp)
   38c28:	dc000615 	stw	r16,24(sp)
   38c2c:	dfc00f15 	stw	ra,60(sp)
   38c30:	dd800c15 	stw	r22,48(sp)
   38c34:	dd400b15 	stw	r21,44(sp)
   38c38:	dd000a15 	stw	r20,40(sp)
   38c3c:	dcc00915 	stw	r19,36(sp)
   38c40:	dc800815 	stw	r18,32(sp)
   38c44:	dc400715 	stw	r17,28(sp)
   38c48:	d9400015 	stw	r5,0(sp)
   38c4c:	d9000415 	stw	r4,16(sp)
   38c50:	d9800115 	stw	r6,4(sp)
   38c54:	3839883a 	mov	fp,r7
   38c58:	2821883a 	mov	r16,r5
   38c5c:	82000007 	ldb	r8,0(r16)
   38c60:	84000044 	addi	r16,r16,1
   38c64:	ba05883a 	add	r2,r23,r8
   38c68:	10800003 	ldbu	r2,0(r2)
   38c6c:	1080020c 	andi	r2,r2,8
   38c70:	10803fcc 	andi	r2,r2,255
   38c74:	1080201c 	xori	r2,r2,128
   38c78:	10bfe004 	addi	r2,r2,-128
   38c7c:	103ff71e 	bne	r2,zero,38c5c <_strtoll_r+0x4c>
   38c80:	00800b44 	movi	r2,45
   38c84:	40807a26 	beq	r8,r2,38e70 <_strtoll_r+0x260>
   38c88:	00800ac4 	movi	r2,43
   38c8c:	40808826 	beq	r8,r2,38eb0 <_strtoll_r+0x2a0>
   38c90:	d8000215 	stw	zero,8(sp)
   38c94:	e000061e 	bne	fp,zero,38cb0 <_strtoll_r+0xa0>
   38c98:	00800c04 	movi	r2,48
   38c9c:	40808b26 	beq	r8,r2,38ecc <_strtoll_r+0x2bc>
   38ca0:	04800284 	movi	r18,10
   38ca4:	0027883a 	mov	r19,zero
   38ca8:	9039883a 	mov	fp,r18
   38cac:	00000406 	br	38cc0 <_strtoll_r+0xb0>
   38cb0:	00800404 	movi	r2,16
   38cb4:	e0809926 	beq	fp,r2,38f1c <_strtoll_r+0x30c>
   38cb8:	e027d7fa 	srai	r19,fp,31
   38cbc:	e025883a 	mov	r18,fp
   38cc0:	d9000217 	ldw	r4,8(sp)
   38cc4:	20006226 	beq	r4,zero,38e50 <_strtoll_r+0x240>
   38cc8:	002b883a 	mov	r21,zero
   38ccc:	04600034 	movhi	r17,32768
   38cd0:	a809883a 	mov	r4,r21
   38cd4:	880b883a 	mov	r5,r17
   38cd8:	900d883a 	mov	r6,r18
   38cdc:	980f883a 	mov	r7,r19
   38ce0:	da000515 	stw	r8,20(sp)
   38ce4:	003abec0 	call	3abec <__umoddi3>
   38ce8:	a809883a 	mov	r4,r21
   38cec:	880b883a 	mov	r5,r17
   38cf0:	900d883a 	mov	r6,r18
   38cf4:	980f883a 	mov	r7,r19
   38cf8:	d8800315 	stw	r2,12(sp)
   38cfc:	003a59c0 	call	3a59c <__udivdi3>
   38d00:	da000517 	ldw	r8,20(sp)
   38d04:	182b883a 	mov	r21,r3
   38d08:	1023883a 	mov	r17,r2
   38d0c:	ba0d883a 	add	r6,r23,r8
   38d10:	31800003 	ldbu	r6,0(r6)
   38d14:	0007883a 	mov	r3,zero
   38d18:	0009883a 	mov	r4,zero
   38d1c:	3240010c 	andi	r9,r6,4
   38d20:	4a403fcc 	andi	r9,r9,255
   38d24:	4a40201c 	xori	r9,r9,128
   38d28:	4a7fe004 	addi	r9,r9,-128
   38d2c:	000b883a 	mov	r5,zero
   38d30:	05bfffc4 	movi	r22,-1
   38d34:	48001026 	beq	r9,zero,38d78 <_strtoll_r+0x168>
   38d38:	453ff404 	addi	r20,r8,-48
   38d3c:	a700150e 	bge	r20,fp,38d94 <_strtoll_r+0x184>
   38d40:	1d800426 	beq	r3,r22,38d54 <_strtoll_r+0x144>
   38d44:	a9400236 	bltu	r21,r5,38d50 <_strtoll_r+0x140>
   38d48:	2d402e1e 	bne	r5,r21,38e04 <_strtoll_r+0x1f4>
   38d4c:	89002d2e 	bgeu	r17,r4,38e04 <_strtoll_r+0x1f4>
   38d50:	00ffffc4 	movi	r3,-1
   38d54:	82000007 	ldb	r8,0(r16)
   38d58:	84000044 	addi	r16,r16,1
   38d5c:	ba0d883a 	add	r6,r23,r8
   38d60:	31800003 	ldbu	r6,0(r6)
   38d64:	3240010c 	andi	r9,r6,4
   38d68:	4a403fcc 	andi	r9,r9,255
   38d6c:	4a40201c 	xori	r9,r9,128
   38d70:	4a7fe004 	addi	r9,r9,-128
   38d74:	483ff01e 	bne	r9,zero,38d38 <_strtoll_r+0x128>
   38d78:	308000cc 	andi	r2,r6,3
   38d7c:	10000526 	beq	r2,zero,38d94 <_strtoll_r+0x184>
   38d80:	3180004c 	andi	r6,r6,1
   38d84:	30002b26 	beq	r6,zero,38e34 <_strtoll_r+0x224>
   38d88:	00800dc4 	movi	r2,55
   38d8c:	40a9c83a 	sub	r20,r8,r2
   38d90:	a73feb16 	blt	r20,fp,38d40 <_strtoll_r+0x130>
   38d94:	00bfffc4 	movi	r2,-1
   38d98:	18803a26 	beq	r3,r2,38e84 <_strtoll_r+0x274>
   38d9c:	d8800217 	ldw	r2,8(sp)
   38da0:	10000426 	beq	r2,zero,38db4 <_strtoll_r+0x1a4>
   38da4:	0109c83a 	sub	r4,zero,r4
   38da8:	2004c03a 	cmpne	r2,r4,zero
   38dac:	014bc83a 	sub	r5,zero,r5
   38db0:	288bc83a 	sub	r5,r5,r2
   38db4:	d8800117 	ldw	r2,4(sp)
   38db8:	10004f26 	beq	r2,zero,38ef8 <_strtoll_r+0x2e8>
   38dbc:	2005883a 	mov	r2,r4
   38dc0:	1800271e 	bne	r3,zero,38e60 <_strtoll_r+0x250>
   38dc4:	2807883a 	mov	r3,r5
   38dc8:	d9400017 	ldw	r5,0(sp)
   38dcc:	d9000117 	ldw	r4,4(sp)
   38dd0:	21400015 	stw	r5,0(r4)
   38dd4:	dfc00f17 	ldw	ra,60(sp)
   38dd8:	df000e17 	ldw	fp,56(sp)
   38ddc:	ddc00d17 	ldw	r23,52(sp)
   38de0:	dd800c17 	ldw	r22,48(sp)
   38de4:	dd400b17 	ldw	r21,44(sp)
   38de8:	dd000a17 	ldw	r20,40(sp)
   38dec:	dcc00917 	ldw	r19,36(sp)
   38df0:	dc800817 	ldw	r18,32(sp)
   38df4:	dc400717 	ldw	r17,28(sp)
   38df8:	dc000617 	ldw	r16,24(sp)
   38dfc:	dec01004 	addi	sp,sp,64
   38e00:	f800283a 	ret
   38e04:	24400e26 	beq	r4,r17,38e40 <_strtoll_r+0x230>
   38e08:	900d883a 	mov	r6,r18
   38e0c:	980f883a 	mov	r7,r19
   38e10:	002c17c0 	call	2c17c <__muldi3>
   38e14:	a00dd7fa 	srai	r6,r20,31
   38e18:	a085883a 	add	r2,r20,r2
   38e1c:	1511803a 	cmpltu	r8,r2,r20
   38e20:	30c7883a 	add	r3,r6,r3
   38e24:	40cb883a 	add	r5,r8,r3
   38e28:	1009883a 	mov	r4,r2
   38e2c:	00c00044 	movi	r3,1
   38e30:	003fc806 	br	38d54 <_strtoll_r+0x144>
   38e34:	008015c4 	movi	r2,87
   38e38:	40a9c83a 	sub	r20,r8,r2
   38e3c:	003fd406 	br	38d90 <_strtoll_r+0x180>
   38e40:	2d7ff11e 	bne	r5,r21,38e08 <_strtoll_r+0x1f8>
   38e44:	d8800317 	ldw	r2,12(sp)
   38e48:	153fc116 	blt	r2,r20,38d50 <_strtoll_r+0x140>
   38e4c:	003fee06 	br	38e08 <_strtoll_r+0x1f8>
   38e50:	057fffc4 	movi	r21,-1
   38e54:	04600034 	movhi	r17,32768
   38e58:	8c7fffc4 	addi	r17,r17,-1
   38e5c:	003f9c06 	br	38cd0 <_strtoll_r+0xc0>
   38e60:	2807883a 	mov	r3,r5
   38e64:	843fffc4 	addi	r16,r16,-1
   38e68:	dc000015 	stw	r16,0(sp)
   38e6c:	003fd606 	br	38dc8 <_strtoll_r+0x1b8>
   38e70:	00800044 	movi	r2,1
   38e74:	82000007 	ldb	r8,0(r16)
   38e78:	d8800215 	stw	r2,8(sp)
   38e7c:	80a1883a 	add	r16,r16,r2
   38e80:	003f8406 	br	38c94 <_strtoll_r+0x84>
   38e84:	d9000217 	ldw	r4,8(sp)
   38e88:	20000d1e 	bne	r4,zero,38ec0 <_strtoll_r+0x2b0>
   38e8c:	1805883a 	mov	r2,r3
   38e90:	00e00034 	movhi	r3,32768
   38e94:	18ffffc4 	addi	r3,r3,-1
   38e98:	d9400417 	ldw	r5,16(sp)
   38e9c:	01000884 	movi	r4,34
   38ea0:	29000015 	stw	r4,0(r5)
   38ea4:	d9000117 	ldw	r4,4(sp)
   38ea8:	203fee1e 	bne	r4,zero,38e64 <_strtoll_r+0x254>
   38eac:	003fc906 	br	38dd4 <_strtoll_r+0x1c4>
   38eb0:	82000007 	ldb	r8,0(r16)
   38eb4:	d8000215 	stw	zero,8(sp)
   38eb8:	84000044 	addi	r16,r16,1
   38ebc:	003f7506 	br	38c94 <_strtoll_r+0x84>
   38ec0:	0005883a 	mov	r2,zero
   38ec4:	00e00034 	movhi	r3,32768
   38ec8:	003ff306 	br	38e98 <_strtoll_r+0x288>
   38ecc:	80800007 	ldb	r2,0(r16)
   38ed0:	00c01e04 	movi	r3,120
   38ed4:	10c00b26 	beq	r2,r3,38f04 <_strtoll_r+0x2f4>
   38ed8:	00c01604 	movi	r3,88
   38edc:	10c00926 	beq	r2,r3,38f04 <_strtoll_r+0x2f4>
   38ee0:	e000131e 	bne	fp,zero,38f30 <_strtoll_r+0x320>
   38ee4:	04800204 	movi	r18,8
   38ee8:	0027883a 	mov	r19,zero
   38eec:	02000c04 	movi	r8,48
   38ef0:	9039883a 	mov	fp,r18
   38ef4:	003f7206 	br	38cc0 <_strtoll_r+0xb0>
   38ef8:	2005883a 	mov	r2,r4
   38efc:	2807883a 	mov	r3,r5
   38f00:	003fb406 	br	38dd4 <_strtoll_r+0x1c4>
   38f04:	04800404 	movi	r18,16
   38f08:	82000047 	ldb	r8,1(r16)
   38f0c:	0027883a 	mov	r19,zero
   38f10:	84000084 	addi	r16,r16,2
   38f14:	9039883a 	mov	fp,r18
   38f18:	003f6906 	br	38cc0 <_strtoll_r+0xb0>
   38f1c:	00800c04 	movi	r2,48
   38f20:	40bfea26 	beq	r8,r2,38ecc <_strtoll_r+0x2bc>
   38f24:	e025883a 	mov	r18,fp
   38f28:	0027883a 	mov	r19,zero
   38f2c:	003f6406 	br	38cc0 <_strtoll_r+0xb0>
   38f30:	e025883a 	mov	r18,fp
   38f34:	e027d7fa 	srai	r19,fp,31
   38f38:	02000c04 	movi	r8,48
   38f3c:	003f6006 	br	38cc0 <_strtoll_r+0xb0>

00038f40 <_strtoul_r>:
   38f40:	defff304 	addi	sp,sp,-52
   38f44:	00800134 	movhi	r2,4
   38f48:	108bb104 	addi	r2,r2,11972
   38f4c:	df000b15 	stw	fp,44(sp)
   38f50:	17000017 	ldw	fp,0(r2)
   38f54:	ddc00a15 	stw	r23,40(sp)
   38f58:	dd000715 	stw	r20,28(sp)
   38f5c:	dcc00615 	stw	r19,24(sp)
   38f60:	dc000315 	stw	r16,12(sp)
   38f64:	dfc00c15 	stw	ra,48(sp)
   38f68:	dd800915 	stw	r22,36(sp)
   38f6c:	dd400815 	stw	r21,32(sp)
   38f70:	dc800515 	stw	r18,20(sp)
   38f74:	dc400415 	stw	r17,16(sp)
   38f78:	2827883a 	mov	r19,r5
   38f7c:	d9000215 	stw	r4,8(sp)
   38f80:	3029883a 	mov	r20,r6
   38f84:	382f883a 	mov	r23,r7
   38f88:	2821883a 	mov	r16,r5
   38f8c:	84400007 	ldb	r17,0(r16)
   38f90:	84000044 	addi	r16,r16,1
   38f94:	e445883a 	add	r2,fp,r17
   38f98:	10800003 	ldbu	r2,0(r2)
   38f9c:	1080020c 	andi	r2,r2,8
   38fa0:	10803fcc 	andi	r2,r2,255
   38fa4:	1080201c 	xori	r2,r2,128
   38fa8:	10bfe004 	addi	r2,r2,-128
   38fac:	103ff71e 	bne	r2,zero,38f8c <_strtoul_r+0x4c>
   38fb0:	00800b44 	movi	r2,45
   38fb4:	88805e26 	beq	r17,r2,39130 <_strtoul_r+0x1f0>
   38fb8:	00800ac4 	movi	r2,43
   38fbc:	88806126 	beq	r17,r2,39144 <_strtoul_r+0x204>
   38fc0:	d8000115 	stw	zero,4(sp)
   38fc4:	b800091e 	bne	r23,zero,38fec <_strtoul_r+0xac>
   38fc8:	00800c04 	movi	r2,48
   38fcc:	88806326 	beq	r17,r2,3915c <_strtoul_r+0x21c>
   38fd0:	05c00284 	movi	r23,10
   38fd4:	00800144 	movi	r2,5
   38fd8:	d8800015 	stw	r2,0(sp)
   38fdc:	058666b4 	movhi	r22,6554
   38fe0:	b5a66644 	addi	r22,r22,-26215
   38fe4:	b825883a 	mov	r18,r23
   38fe8:	00000b06 	br	39018 <_strtoul_r+0xd8>
   38fec:	00800404 	movi	r2,16
   38ff0:	b8805826 	beq	r23,r2,39154 <_strtoul_r+0x214>
   38ff4:	013fffc4 	movi	r4,-1
   38ff8:	b80b883a 	mov	r5,r23
   38ffc:	002c1440 	call	2c144 <__udivsi3>
   39000:	013fffc4 	movi	r4,-1
   39004:	b80b883a 	mov	r5,r23
   39008:	102d883a 	mov	r22,r2
   3900c:	002c14c0 	call	2c14c <__umodsi3>
   39010:	d8800015 	stw	r2,0(sp)
   39014:	b825883a 	mov	r18,r23
   39018:	e447883a 	add	r3,fp,r17
   3901c:	18c00003 	ldbu	r3,0(r3)
   39020:	0011883a 	mov	r8,zero
   39024:	0009883a 	mov	r4,zero
   39028:	1980010c 	andi	r6,r3,4
   3902c:	31803fcc 	andi	r6,r6,255
   39030:	3180201c 	xori	r6,r6,128
   39034:	31bfe004 	addi	r6,r6,-128
   39038:	057fffc4 	movi	r21,-1
   3903c:	30001226 	beq	r6,zero,39088 <_strtoul_r+0x148>
   39040:	8c7ff404 	addi	r17,r17,-48
   39044:	8dc0170e 	bge	r17,r23,390a4 <_strtoul_r+0x164>
   39048:	45400626 	beq	r8,r21,39064 <_strtoul_r+0x124>
   3904c:	b1002c36 	bltu	r22,r4,39100 <_strtoul_r+0x1c0>
   39050:	25802926 	beq	r4,r22,390f8 <_strtoul_r+0x1b8>
   39054:	900b883a 	mov	r5,r18
   39058:	002c1540 	call	2c154 <__mulsi3>
   3905c:	8889883a 	add	r4,r17,r2
   39060:	02000044 	movi	r8,1
   39064:	84400007 	ldb	r17,0(r16)
   39068:	84000044 	addi	r16,r16,1
   3906c:	e447883a 	add	r3,fp,r17
   39070:	18c00003 	ldbu	r3,0(r3)
   39074:	1980010c 	andi	r6,r3,4
   39078:	31803fcc 	andi	r6,r6,255
   3907c:	3180201c 	xori	r6,r6,128
   39080:	31bfe004 	addi	r6,r6,-128
   39084:	303fee1e 	bne	r6,zero,39040 <_strtoul_r+0x100>
   39088:	188000cc 	andi	r2,r3,3
   3908c:	10000526 	beq	r2,zero,390a4 <_strtoul_r+0x164>
   39090:	18c0004c 	andi	r3,r3,1
   39094:	18001c26 	beq	r3,zero,39108 <_strtoul_r+0x1c8>
   39098:	00800dc4 	movi	r2,55
   3909c:	88a3c83a 	sub	r17,r17,r2
   390a0:	8dffe916 	blt	r17,r23,39048 <_strtoul_r+0x108>
   390a4:	00bfffc4 	movi	r2,-1
   390a8:	40801a26 	beq	r8,r2,39114 <_strtoul_r+0x1d4>
   390ac:	d8c00117 	ldw	r3,4(sp)
   390b0:	18000126 	beq	r3,zero,390b8 <_strtoul_r+0x178>
   390b4:	0109c83a 	sub	r4,zero,r4
   390b8:	a0000226 	beq	r20,zero,390c4 <_strtoul_r+0x184>
   390bc:	40001a1e 	bne	r8,zero,39128 <_strtoul_r+0x1e8>
   390c0:	a4c00015 	stw	r19,0(r20)
   390c4:	2005883a 	mov	r2,r4
   390c8:	dfc00c17 	ldw	ra,48(sp)
   390cc:	df000b17 	ldw	fp,44(sp)
   390d0:	ddc00a17 	ldw	r23,40(sp)
   390d4:	dd800917 	ldw	r22,36(sp)
   390d8:	dd400817 	ldw	r21,32(sp)
   390dc:	dd000717 	ldw	r20,28(sp)
   390e0:	dcc00617 	ldw	r19,24(sp)
   390e4:	dc800517 	ldw	r18,20(sp)
   390e8:	dc400417 	ldw	r17,16(sp)
   390ec:	dc000317 	ldw	r16,12(sp)
   390f0:	dec00d04 	addi	sp,sp,52
   390f4:	f800283a 	ret
   390f8:	d8800017 	ldw	r2,0(sp)
   390fc:	147fd50e 	bge	r2,r17,39054 <_strtoul_r+0x114>
   39100:	023fffc4 	movi	r8,-1
   39104:	003fd706 	br	39064 <_strtoul_r+0x124>
   39108:	008015c4 	movi	r2,87
   3910c:	88a3c83a 	sub	r17,r17,r2
   39110:	003fe306 	br	390a0 <_strtoul_r+0x160>
   39114:	d8c00217 	ldw	r3,8(sp)
   39118:	00800884 	movi	r2,34
   3911c:	4009883a 	mov	r4,r8
   39120:	18800015 	stw	r2,0(r3)
   39124:	a03fe726 	beq	r20,zero,390c4 <_strtoul_r+0x184>
   39128:	84ffffc4 	addi	r19,r16,-1
   3912c:	003fe406 	br	390c0 <_strtoul_r+0x180>
   39130:	00c00044 	movi	r3,1
   39134:	84400007 	ldb	r17,0(r16)
   39138:	d8c00115 	stw	r3,4(sp)
   3913c:	80e1883a 	add	r16,r16,r3
   39140:	003fa006 	br	38fc4 <_strtoul_r+0x84>
   39144:	84400007 	ldb	r17,0(r16)
   39148:	d8000115 	stw	zero,4(sp)
   3914c:	84000044 	addi	r16,r16,1
   39150:	003f9c06 	br	38fc4 <_strtoul_r+0x84>
   39154:	00800c04 	movi	r2,48
   39158:	88bfa61e 	bne	r17,r2,38ff4 <_strtoul_r+0xb4>
   3915c:	80800007 	ldb	r2,0(r16)
   39160:	00c01e04 	movi	r3,120
   39164:	10c00b26 	beq	r2,r3,39194 <_strtoul_r+0x254>
   39168:	00c01604 	movi	r3,88
   3916c:	10c00926 	beq	r2,r3,39194 <_strtoul_r+0x254>
   39170:	b800111e 	bne	r23,zero,391b8 <_strtoul_r+0x278>
   39174:	04800204 	movi	r18,8
   39178:	008001c4 	movi	r2,7
   3917c:	d8800015 	stw	r2,0(sp)
   39180:	05880034 	movhi	r22,8192
   39184:	b5bfffc4 	addi	r22,r22,-1
   39188:	04400c04 	movi	r17,48
   3918c:	902f883a 	mov	r23,r18
   39190:	003fa106 	br	39018 <_strtoul_r+0xd8>
   39194:	04800404 	movi	r18,16
   39198:	008003c4 	movi	r2,15
   3919c:	84400047 	ldb	r17,1(r16)
   391a0:	d8800015 	stw	r2,0(sp)
   391a4:	84000084 	addi	r16,r16,2
   391a8:	05840034 	movhi	r22,4096
   391ac:	b5bfffc4 	addi	r22,r22,-1
   391b0:	902f883a 	mov	r23,r18
   391b4:	003f9806 	br	39018 <_strtoul_r+0xd8>
   391b8:	013fffc4 	movi	r4,-1
   391bc:	b80b883a 	mov	r5,r23
   391c0:	002c1440 	call	2c144 <__udivsi3>
   391c4:	013fffc4 	movi	r4,-1
   391c8:	b80b883a 	mov	r5,r23
   391cc:	102d883a 	mov	r22,r2
   391d0:	002c14c0 	call	2c14c <__umodsi3>
   391d4:	d8800015 	stw	r2,0(sp)
   391d8:	b825883a 	mov	r18,r23
   391dc:	04400c04 	movi	r17,48
   391e0:	003f8d06 	br	39018 <_strtoul_r+0xd8>

000391e4 <strtoul>:
   391e4:	00800134 	movhi	r2,4
   391e8:	108bb304 	addi	r2,r2,11980
   391ec:	2007883a 	mov	r3,r4
   391f0:	11000017 	ldw	r4,0(r2)
   391f4:	2805883a 	mov	r2,r5
   391f8:	300f883a 	mov	r7,r6
   391fc:	180b883a 	mov	r5,r3
   39200:	100d883a 	mov	r6,r2
   39204:	0038f401 	jmpi	38f40 <_strtoul_r>

00039208 <_strtoull_r>:
   39208:	defff004 	addi	sp,sp,-64
   3920c:	00800134 	movhi	r2,4
   39210:	108bb104 	addi	r2,r2,11972
   39214:	dd800c15 	stw	r22,48(sp)
   39218:	15800017 	ldw	r22,0(r2)
   3921c:	df000e15 	stw	fp,56(sp)
   39220:	dc000615 	stw	r16,24(sp)
   39224:	dfc00f15 	stw	ra,60(sp)
   39228:	ddc00d15 	stw	r23,52(sp)
   3922c:	dd400b15 	stw	r21,44(sp)
   39230:	dd000a15 	stw	r20,40(sp)
   39234:	dcc00915 	stw	r19,36(sp)
   39238:	dc800815 	stw	r18,32(sp)
   3923c:	dc400715 	stw	r17,28(sp)
   39240:	d9400015 	stw	r5,0(sp)
   39244:	d9000415 	stw	r4,16(sp)
   39248:	d9800115 	stw	r6,4(sp)
   3924c:	3839883a 	mov	fp,r7
   39250:	2821883a 	mov	r16,r5
   39254:	82000007 	ldb	r8,0(r16)
   39258:	84000044 	addi	r16,r16,1
   3925c:	b205883a 	add	r2,r22,r8
   39260:	10800003 	ldbu	r2,0(r2)
   39264:	1080020c 	andi	r2,r2,8
   39268:	10803fcc 	andi	r2,r2,255
   3926c:	1080201c 	xori	r2,r2,128
   39270:	10bfe004 	addi	r2,r2,-128
   39274:	103ff71e 	bne	r2,zero,39254 <_strtoull_r+0x4c>
   39278:	00800b44 	movi	r2,45
   3927c:	40807e26 	beq	r8,r2,39478 <_strtoull_r+0x270>
   39280:	00800ac4 	movi	r2,43
   39284:	40808126 	beq	r8,r2,3948c <_strtoull_r+0x284>
   39288:	d8000315 	stw	zero,12(sp)
   3928c:	e0000c1e 	bne	fp,zero,392c0 <_strtoull_r+0xb8>
   39290:	00800c04 	movi	r2,48
   39294:	40808126 	beq	r8,r2,3949c <_strtoull_r+0x294>
   39298:	04c00284 	movi	r19,10
   3929c:	00800144 	movi	r2,5
   392a0:	d8800215 	stw	r2,8(sp)
   392a4:	046666b4 	movhi	r17,39322
   392a8:	8c666644 	addi	r17,r17,-26215
   392ac:	05c666b4 	movhi	r23,6554
   392b0:	bde66644 	addi	r23,r23,-26215
   392b4:	0025883a 	mov	r18,zero
   392b8:	9839883a 	mov	fp,r19
   392bc:	00001306 	br	3930c <_strtoull_r+0x104>
   392c0:	00800404 	movi	r2,16
   392c4:	e0809026 	beq	fp,r2,39508 <_strtoull_r+0x300>
   392c8:	e025d7fa 	srai	r18,fp,31
   392cc:	013fffc4 	movi	r4,-1
   392d0:	200b883a 	mov	r5,r4
   392d4:	e00d883a 	mov	r6,fp
   392d8:	900f883a 	mov	r7,r18
   392dc:	da000515 	stw	r8,20(sp)
   392e0:	003a59c0 	call	3a59c <__udivdi3>
   392e4:	013fffc4 	movi	r4,-1
   392e8:	200b883a 	mov	r5,r4
   392ec:	e00d883a 	mov	r6,fp
   392f0:	900f883a 	mov	r7,r18
   392f4:	1023883a 	mov	r17,r2
   392f8:	182f883a 	mov	r23,r3
   392fc:	003abec0 	call	3abec <__umoddi3>
   39300:	da000517 	ldw	r8,20(sp)
   39304:	d8800215 	stw	r2,8(sp)
   39308:	e027883a 	mov	r19,fp
   3930c:	b20d883a 	add	r6,r22,r8
   39310:	32400003 	ldbu	r9,0(r6)
   39314:	0007883a 	mov	r3,zero
   39318:	0009883a 	mov	r4,zero
   3931c:	4a80010c 	andi	r10,r9,4
   39320:	52803fcc 	andi	r10,r10,255
   39324:	5280201c 	xori	r10,r10,128
   39328:	52bfe004 	addi	r10,r10,-128
   3932c:	000b883a 	mov	r5,zero
   39330:	057fffc4 	movi	r21,-1
   39334:	50001026 	beq	r10,zero,39378 <_strtoull_r+0x170>
   39338:	453ff404 	addi	r20,r8,-48
   3933c:	a700150e 	bge	r20,fp,39394 <_strtoull_r+0x18c>
   39340:	1d400426 	beq	r3,r21,39354 <_strtoull_r+0x14c>
   39344:	b9400236 	bltu	r23,r5,39350 <_strtoull_r+0x148>
   39348:	2dc0301e 	bne	r5,r23,3940c <_strtoull_r+0x204>
   3934c:	89002f2e 	bgeu	r17,r4,3940c <_strtoull_r+0x204>
   39350:	00ffffc4 	movi	r3,-1
   39354:	82000007 	ldb	r8,0(r16)
   39358:	84000044 	addi	r16,r16,1
   3935c:	b20d883a 	add	r6,r22,r8
   39360:	32400003 	ldbu	r9,0(r6)
   39364:	4a80010c 	andi	r10,r9,4
   39368:	52803fcc 	andi	r10,r10,255
   3936c:	5280201c 	xori	r10,r10,128
   39370:	52bfe004 	addi	r10,r10,-128
   39374:	503ff01e 	bne	r10,zero,39338 <_strtoull_r+0x130>
   39378:	488000cc 	andi	r2,r9,3
   3937c:	10000526 	beq	r2,zero,39394 <_strtoull_r+0x18c>
   39380:	4a40004c 	andi	r9,r9,1
   39384:	48002d26 	beq	r9,zero,3943c <_strtoull_r+0x234>
   39388:	00800dc4 	movi	r2,55
   3938c:	40a9c83a 	sub	r20,r8,r2
   39390:	a73feb16 	blt	r20,fp,39340 <_strtoull_r+0x138>
   39394:	00bfffc4 	movi	r2,-1
   39398:	18802f26 	beq	r3,r2,39458 <_strtoull_r+0x250>
   3939c:	d8800317 	ldw	r2,12(sp)
   393a0:	10000426 	beq	r2,zero,393b4 <_strtoull_r+0x1ac>
   393a4:	0109c83a 	sub	r4,zero,r4
   393a8:	2004c03a 	cmpne	r2,r4,zero
   393ac:	014bc83a 	sub	r5,zero,r5
   393b0:	288bc83a 	sub	r5,r5,r2
   393b4:	d8800117 	ldw	r2,4(sp)
   393b8:	10000626 	beq	r2,zero,393d4 <_strtoull_r+0x1cc>
   393bc:	18000226 	beq	r3,zero,393c8 <_strtoull_r+0x1c0>
   393c0:	843fffc4 	addi	r16,r16,-1
   393c4:	dc000015 	stw	r16,0(sp)
   393c8:	d8800017 	ldw	r2,0(sp)
   393cc:	d8c00117 	ldw	r3,4(sp)
   393d0:	18800015 	stw	r2,0(r3)
   393d4:	2005883a 	mov	r2,r4
   393d8:	2807883a 	mov	r3,r5
   393dc:	dfc00f17 	ldw	ra,60(sp)
   393e0:	df000e17 	ldw	fp,56(sp)
   393e4:	ddc00d17 	ldw	r23,52(sp)
   393e8:	dd800c17 	ldw	r22,48(sp)
   393ec:	dd400b17 	ldw	r21,44(sp)
   393f0:	dd000a17 	ldw	r20,40(sp)
   393f4:	dcc00917 	ldw	r19,36(sp)
   393f8:	dc800817 	ldw	r18,32(sp)
   393fc:	dc400717 	ldw	r17,28(sp)
   39400:	dc000617 	ldw	r16,24(sp)
   39404:	dec01004 	addi	sp,sp,64
   39408:	f800283a 	ret
   3940c:	24400e26 	beq	r4,r17,39448 <_strtoull_r+0x240>
   39410:	980d883a 	mov	r6,r19
   39414:	900f883a 	mov	r7,r18
   39418:	002c17c0 	call	2c17c <__muldi3>
   3941c:	a00dd7fa 	srai	r6,r20,31
   39420:	a085883a 	add	r2,r20,r2
   39424:	1511803a 	cmpltu	r8,r2,r20
   39428:	30c7883a 	add	r3,r6,r3
   3942c:	40cb883a 	add	r5,r8,r3
   39430:	1009883a 	mov	r4,r2
   39434:	00c00044 	movi	r3,1
   39438:	003fc606 	br	39354 <_strtoull_r+0x14c>
   3943c:	008015c4 	movi	r2,87
   39440:	40a9c83a 	sub	r20,r8,r2
   39444:	003fd206 	br	39390 <_strtoull_r+0x188>
   39448:	2dfff11e 	bne	r5,r23,39410 <_strtoull_r+0x208>
   3944c:	d8800217 	ldw	r2,8(sp)
   39450:	153fbf16 	blt	r2,r20,39350 <_strtoull_r+0x148>
   39454:	003fee06 	br	39410 <_strtoull_r+0x208>
   39458:	d9000417 	ldw	r4,16(sp)
   3945c:	00800884 	movi	r2,34
   39460:	180b883a 	mov	r5,r3
   39464:	20800015 	stw	r2,0(r4)
   39468:	d8800117 	ldw	r2,4(sp)
   3946c:	1809883a 	mov	r4,r3
   39470:	103fd31e 	bne	r2,zero,393c0 <_strtoull_r+0x1b8>
   39474:	003fd706 	br	393d4 <_strtoull_r+0x1cc>
   39478:	00800044 	movi	r2,1
   3947c:	82000007 	ldb	r8,0(r16)
   39480:	d8800315 	stw	r2,12(sp)
   39484:	80a1883a 	add	r16,r16,r2
   39488:	003f8006 	br	3928c <_strtoull_r+0x84>
   3948c:	82000007 	ldb	r8,0(r16)
   39490:	d8000315 	stw	zero,12(sp)
   39494:	84000044 	addi	r16,r16,1
   39498:	003f7c06 	br	3928c <_strtoull_r+0x84>
   3949c:	80800007 	ldb	r2,0(r16)
   394a0:	00c01e04 	movi	r3,120
   394a4:	10c00d26 	beq	r2,r3,394dc <_strtoull_r+0x2d4>
   394a8:	00c01604 	movi	r3,88
   394ac:	10c00b26 	beq	r2,r3,394dc <_strtoull_r+0x2d4>
   394b0:	e000291e 	bne	fp,zero,39558 <_strtoull_r+0x350>
   394b4:	04c00204 	movi	r19,8
   394b8:	008001c4 	movi	r2,7
   394bc:	d8800215 	stw	r2,8(sp)
   394c0:	047fffc4 	movi	r17,-1
   394c4:	05c80034 	movhi	r23,8192
   394c8:	bdffffc4 	addi	r23,r23,-1
   394cc:	0025883a 	mov	r18,zero
   394d0:	02000c04 	movi	r8,48
   394d4:	9839883a 	mov	fp,r19
   394d8:	003f8c06 	br	3930c <_strtoull_r+0x104>
   394dc:	04c00404 	movi	r19,16
   394e0:	008003c4 	movi	r2,15
   394e4:	82000047 	ldb	r8,1(r16)
   394e8:	d8800215 	stw	r2,8(sp)
   394ec:	84000084 	addi	r16,r16,2
   394f0:	047fffc4 	movi	r17,-1
   394f4:	05c40034 	movhi	r23,4096
   394f8:	bdffffc4 	addi	r23,r23,-1
   394fc:	0025883a 	mov	r18,zero
   39500:	9839883a 	mov	fp,r19
   39504:	003f8106 	br	3930c <_strtoull_r+0x104>
   39508:	00800c04 	movi	r2,48
   3950c:	40bfe326 	beq	r8,r2,3949c <_strtoull_r+0x294>
   39510:	013fffc4 	movi	r4,-1
   39514:	200b883a 	mov	r5,r4
   39518:	e00d883a 	mov	r6,fp
   3951c:	000f883a 	mov	r7,zero
   39520:	da000515 	stw	r8,20(sp)
   39524:	003a59c0 	call	3a59c <__udivdi3>
   39528:	013fffc4 	movi	r4,-1
   3952c:	200b883a 	mov	r5,r4
   39530:	e00d883a 	mov	r6,fp
   39534:	000f883a 	mov	r7,zero
   39538:	1023883a 	mov	r17,r2
   3953c:	182f883a 	mov	r23,r3
   39540:	003abec0 	call	3abec <__umoddi3>
   39544:	d8800215 	stw	r2,8(sp)
   39548:	e027883a 	mov	r19,fp
   3954c:	0025883a 	mov	r18,zero
   39550:	da000517 	ldw	r8,20(sp)
   39554:	003f6d06 	br	3930c <_strtoull_r+0x104>
   39558:	e025d7fa 	srai	r18,fp,31
   3955c:	013fffc4 	movi	r4,-1
   39560:	200b883a 	mov	r5,r4
   39564:	e00d883a 	mov	r6,fp
   39568:	900f883a 	mov	r7,r18
   3956c:	003a59c0 	call	3a59c <__udivdi3>
   39570:	013fffc4 	movi	r4,-1
   39574:	200b883a 	mov	r5,r4
   39578:	e00d883a 	mov	r6,fp
   3957c:	900f883a 	mov	r7,r18
   39580:	1023883a 	mov	r17,r2
   39584:	182f883a 	mov	r23,r3
   39588:	003abec0 	call	3abec <__umoddi3>
   3958c:	d8800215 	stw	r2,8(sp)
   39590:	e027883a 	mov	r19,fp
   39594:	02000c04 	movi	r8,48
   39598:	003f5c06 	br	3930c <_strtoull_r+0x104>

0003959c <__submore>:
   3959c:	defffa04 	addi	sp,sp,-24
   395a0:	dc000015 	stw	r16,0(sp)
   395a4:	2821883a 	mov	r16,r5
   395a8:	29400c17 	ldw	r5,48(r5)
   395ac:	dfc00515 	stw	ra,20(sp)
   395b0:	dd000415 	stw	r20,16(sp)
   395b4:	dcc00315 	stw	r19,12(sp)
   395b8:	dc800215 	stw	r18,8(sp)
   395bc:	dc400115 	stw	r17,4(sp)
   395c0:	80801004 	addi	r2,r16,64
   395c4:	28801726 	beq	r5,r2,39624 <__submore+0x88>
   395c8:	84400d17 	ldw	r17,52(r16)
   395cc:	8c67883a 	add	r19,r17,r17
   395d0:	980d883a 	mov	r6,r19
   395d4:	0036b140 	call	36b14 <_realloc_r>
   395d8:	1025883a 	mov	r18,r2
   395dc:	10002926 	beq	r2,zero,39684 <__submore+0xe8>
   395e0:	1469883a 	add	r20,r2,r17
   395e4:	a009883a 	mov	r4,r20
   395e8:	100b883a 	mov	r5,r2
   395ec:	880d883a 	mov	r6,r17
   395f0:	002eaec0 	call	2eaec <memcpy>
   395f4:	0005883a 	mov	r2,zero
   395f8:	85000015 	stw	r20,0(r16)
   395fc:	84800c15 	stw	r18,48(r16)
   39600:	84c00d15 	stw	r19,52(r16)
   39604:	dfc00517 	ldw	ra,20(sp)
   39608:	dd000417 	ldw	r20,16(sp)
   3960c:	dcc00317 	ldw	r19,12(sp)
   39610:	dc800217 	ldw	r18,8(sp)
   39614:	dc400117 	ldw	r17,4(sp)
   39618:	dc000017 	ldw	r16,0(sp)
   3961c:	dec00604 	addi	sp,sp,24
   39620:	f800283a 	ret
   39624:	04410004 	movi	r17,1024
   39628:	880b883a 	mov	r5,r17
   3962c:	002e3680 	call	2e368 <_malloc_r>
   39630:	1007883a 	mov	r3,r2
   39634:	10001326 	beq	r2,zero,39684 <__submore+0xe8>
   39638:	80801083 	ldbu	r2,66(r16)
   3963c:	80c00c15 	stw	r3,48(r16)
   39640:	84400d15 	stw	r17,52(r16)
   39644:	1880ffc5 	stb	r2,1023(r3)
   39648:	81401043 	ldbu	r5,65(r16)
   3964c:	1900ff44 	addi	r4,r3,1021
   39650:	0005883a 	mov	r2,zero
   39654:	1940ff85 	stb	r5,1022(r3)
   39658:	81401003 	ldbu	r5,64(r16)
   3965c:	1940ff45 	stb	r5,1021(r3)
   39660:	81000015 	stw	r4,0(r16)
   39664:	dfc00517 	ldw	ra,20(sp)
   39668:	dd000417 	ldw	r20,16(sp)
   3966c:	dcc00317 	ldw	r19,12(sp)
   39670:	dc800217 	ldw	r18,8(sp)
   39674:	dc400117 	ldw	r17,4(sp)
   39678:	dc000017 	ldw	r16,0(sp)
   3967c:	dec00604 	addi	sp,sp,24
   39680:	f800283a 	ret
   39684:	00bfffc4 	movi	r2,-1
   39688:	003fde06 	br	39604 <__submore+0x68>

0003968c <_ungetc_r>:
   3968c:	defffc04 	addi	sp,sp,-16
   39690:	dc800215 	stw	r18,8(sp)
   39694:	dc400115 	stw	r17,4(sp)
   39698:	dc000015 	stw	r16,0(sp)
   3969c:	dfc00315 	stw	ra,12(sp)
   396a0:	00bfffc4 	movi	r2,-1
   396a4:	2825883a 	mov	r18,r5
   396a8:	2023883a 	mov	r17,r4
   396ac:	3021883a 	mov	r16,r6
   396b0:	28803026 	beq	r5,r2,39774 <_ungetc_r+0xe8>
   396b4:	20000226 	beq	r4,zero,396c0 <_ungetc_r+0x34>
   396b8:	20800e17 	ldw	r2,56(r4)
   396bc:	10002f26 	beq	r2,zero,3977c <_ungetc_r+0xf0>
   396c0:	80c0030b 	ldhu	r3,12(r16)
   396c4:	00bff7c4 	movi	r2,-33
   396c8:	1900010c 	andi	r4,r3,4
   396cc:	213fffcc 	andi	r4,r4,65535
   396d0:	1884703a 	and	r2,r3,r2
   396d4:	2120001c 	xori	r4,r4,32768
   396d8:	8080030d 	sth	r2,12(r16)
   396dc:	21200004 	addi	r4,r4,-32768
   396e0:	20000c1e 	bne	r4,zero,39714 <_ungetc_r+0x88>
   396e4:	1900040c 	andi	r4,r3,16
   396e8:	213fffcc 	andi	r4,r4,65535
   396ec:	2120001c 	xori	r4,r4,32768
   396f0:	21200004 	addi	r4,r4,-32768
   396f4:	20001f26 	beq	r4,zero,39774 <_ungetc_r+0xe8>
   396f8:	18c0020c 	andi	r3,r3,8
   396fc:	18ffffcc 	andi	r3,r3,65535
   39700:	18e0001c 	xori	r3,r3,32768
   39704:	18e00004 	addi	r3,r3,-32768
   39708:	1800371e 	bne	r3,zero,397e8 <_ungetc_r+0x15c>
   3970c:	10800114 	ori	r2,r2,4
   39710:	8080030d 	sth	r2,12(r16)
   39714:	80800c17 	ldw	r2,48(r16)
   39718:	94803fcc 	andi	r18,r18,255
   3971c:	10001926 	beq	r2,zero,39784 <_ungetc_r+0xf8>
   39720:	80c00117 	ldw	r3,4(r16)
   39724:	80800d17 	ldw	r2,52(r16)
   39728:	18800e0e 	bge	r3,r2,39764 <_ungetc_r+0xd8>
   3972c:	80800017 	ldw	r2,0(r16)
   39730:	10ffffc4 	addi	r3,r2,-1
   39734:	80c00015 	stw	r3,0(r16)
   39738:	14bfffc5 	stb	r18,-1(r2)
   3973c:	80800117 	ldw	r2,4(r16)
   39740:	10800044 	addi	r2,r2,1
   39744:	80800115 	stw	r2,4(r16)
   39748:	9005883a 	mov	r2,r18
   3974c:	dfc00317 	ldw	ra,12(sp)
   39750:	dc800217 	ldw	r18,8(sp)
   39754:	dc400117 	ldw	r17,4(sp)
   39758:	dc000017 	ldw	r16,0(sp)
   3975c:	dec00404 	addi	sp,sp,16
   39760:	f800283a 	ret
   39764:	8809883a 	mov	r4,r17
   39768:	800b883a 	mov	r5,r16
   3976c:	003959c0 	call	3959c <__submore>
   39770:	103fee26 	beq	r2,zero,3972c <_ungetc_r+0xa0>
   39774:	04bfffc4 	movi	r18,-1
   39778:	003ff306 	br	39748 <_ungetc_r+0xbc>
   3977c:	002cd4c0 	call	2cd4c <__sinit>
   39780:	003fcf06 	br	396c0 <_ungetc_r+0x34>
   39784:	80c00417 	ldw	r3,16(r16)
   39788:	80800017 	ldw	r2,0(r16)
   3978c:	18000326 	beq	r3,zero,3979c <_ungetc_r+0x110>
   39790:	1880022e 	bgeu	r3,r2,3979c <_ungetc_r+0x110>
   39794:	10ffffc3 	ldbu	r3,-1(r2)
   39798:	1c801d26 	beq	r3,r18,39810 <_ungetc_r+0x184>
   3979c:	81400117 	ldw	r5,4(r16)
   397a0:	80800e15 	stw	r2,56(r16)
   397a4:	008000c4 	movi	r2,3
   397a8:	80800d15 	stw	r2,52(r16)
   397ac:	00800044 	movi	r2,1
   397b0:	81001004 	addi	r4,r16,64
   397b4:	80c01084 	addi	r3,r16,66
   397b8:	80800115 	stw	r2,4(r16)
   397bc:	9005883a 	mov	r2,r18
   397c0:	81400f15 	stw	r5,60(r16)
   397c4:	81000c15 	stw	r4,48(r16)
   397c8:	84801085 	stb	r18,66(r16)
   397cc:	80c00015 	stw	r3,0(r16)
   397d0:	dfc00317 	ldw	ra,12(sp)
   397d4:	dc800217 	ldw	r18,8(sp)
   397d8:	dc400117 	ldw	r17,4(sp)
   397dc:	dc000017 	ldw	r16,0(sp)
   397e0:	dec00404 	addi	sp,sp,16
   397e4:	f800283a 	ret
   397e8:	8809883a 	mov	r4,r17
   397ec:	800b883a 	mov	r5,r16
   397f0:	002ca900 	call	2ca90 <_fflush_r>
   397f4:	103fdf1e 	bne	r2,zero,39774 <_ungetc_r+0xe8>
   397f8:	8080030b 	ldhu	r2,12(r16)
   397fc:	00fffdc4 	movi	r3,-9
   39800:	80000215 	stw	zero,8(r16)
   39804:	1884703a 	and	r2,r3,r2
   39808:	80000615 	stw	zero,24(r16)
   3980c:	003fbf06 	br	3970c <_ungetc_r+0x80>
   39810:	80c00117 	ldw	r3,4(r16)
   39814:	10bfffc4 	addi	r2,r2,-1
   39818:	80800015 	stw	r2,0(r16)
   3981c:	18800044 	addi	r2,r3,1
   39820:	80800115 	stw	r2,4(r16)
   39824:	003fc806 	br	39748 <_ungetc_r+0xbc>

00039828 <ungetc>:
   39828:	00c00134 	movhi	r3,4
   3982c:	18cbb304 	addi	r3,r3,11980
   39830:	2005883a 	mov	r2,r4
   39834:	19000017 	ldw	r4,0(r3)
   39838:	280d883a 	mov	r6,r5
   3983c:	100b883a 	mov	r5,r2
   39840:	003968c1 	jmpi	3968c <_ungetc_r>

00039844 <_unlink_r>:
   39844:	defffd04 	addi	sp,sp,-12
   39848:	dc400115 	stw	r17,4(sp)
   3984c:	dc000015 	stw	r16,0(sp)
   39850:	2023883a 	mov	r17,r4
   39854:	04000134 	movhi	r16,4
   39858:	84129704 	addi	r16,r16,19036
   3985c:	2809883a 	mov	r4,r5
   39860:	dfc00215 	stw	ra,8(sp)
   39864:	80000015 	stw	zero,0(r16)
   39868:	003ca080 	call	3ca08 <unlink>
   3986c:	00ffffc4 	movi	r3,-1
   39870:	10c00526 	beq	r2,r3,39888 <_unlink_r+0x44>
   39874:	dfc00217 	ldw	ra,8(sp)
   39878:	dc400117 	ldw	r17,4(sp)
   3987c:	dc000017 	ldw	r16,0(sp)
   39880:	dec00304 	addi	sp,sp,12
   39884:	f800283a 	ret
   39888:	80c00017 	ldw	r3,0(r16)
   3988c:	183ff926 	beq	r3,zero,39874 <_unlink_r+0x30>
   39890:	88c00015 	stw	r3,0(r17)
   39894:	dfc00217 	ldw	ra,8(sp)
   39898:	dc400117 	ldw	r17,4(sp)
   3989c:	dc000017 	ldw	r16,0(sp)
   398a0:	dec00304 	addi	sp,sp,12
   398a4:	f800283a 	ret

000398a8 <_calloc_r>:
   398a8:	defffe04 	addi	sp,sp,-8
   398ac:	dc000015 	stw	r16,0(sp)
   398b0:	2021883a 	mov	r16,r4
   398b4:	3009883a 	mov	r4,r6
   398b8:	dfc00115 	stw	ra,4(sp)
   398bc:	002c1540 	call	2c154 <__mulsi3>
   398c0:	8009883a 	mov	r4,r16
   398c4:	100b883a 	mov	r5,r2
   398c8:	002e3680 	call	2e368 <_malloc_r>
   398cc:	1021883a 	mov	r16,r2
   398d0:	10000c26 	beq	r2,zero,39904 <_calloc_r+0x5c>
   398d4:	11bfff17 	ldw	r6,-4(r2)
   398d8:	00ffff04 	movi	r3,-4
   398dc:	00800904 	movi	r2,36
   398e0:	30cc703a 	and	r6,r6,r3
   398e4:	30cd883a 	add	r6,r6,r3
   398e8:	11801436 	bltu	r2,r6,3993c <_calloc_r+0x94>
   398ec:	00c004c4 	movi	r3,19
   398f0:	19800936 	bltu	r3,r6,39918 <_calloc_r+0x70>
   398f4:	8005883a 	mov	r2,r16
   398f8:	10000015 	stw	zero,0(r2)
   398fc:	10000115 	stw	zero,4(r2)
   39900:	10000215 	stw	zero,8(r2)
   39904:	8005883a 	mov	r2,r16
   39908:	dfc00117 	ldw	ra,4(sp)
   3990c:	dc000017 	ldw	r16,0(sp)
   39910:	dec00204 	addi	sp,sp,8
   39914:	f800283a 	ret
   39918:	80000015 	stw	zero,0(r16)
   3991c:	80000115 	stw	zero,4(r16)
   39920:	00c006c4 	movi	r3,27
   39924:	19800d2e 	bgeu	r3,r6,3995c <_calloc_r+0xb4>
   39928:	80000215 	stw	zero,8(r16)
   3992c:	80000315 	stw	zero,12(r16)
   39930:	30800c26 	beq	r6,r2,39964 <_calloc_r+0xbc>
   39934:	80800404 	addi	r2,r16,16
   39938:	003fef06 	br	398f8 <_calloc_r+0x50>
   3993c:	8009883a 	mov	r4,r16
   39940:	000b883a 	mov	r5,zero
   39944:	002ec2c0 	call	2ec2c <memset>
   39948:	8005883a 	mov	r2,r16
   3994c:	dfc00117 	ldw	ra,4(sp)
   39950:	dc000017 	ldw	r16,0(sp)
   39954:	dec00204 	addi	sp,sp,8
   39958:	f800283a 	ret
   3995c:	80800204 	addi	r2,r16,8
   39960:	003fe506 	br	398f8 <_calloc_r+0x50>
   39964:	80000415 	stw	zero,16(r16)
   39968:	80000515 	stw	zero,20(r16)
   3996c:	80800604 	addi	r2,r16,24
   39970:	003fe106 	br	398f8 <_calloc_r+0x50>

00039974 <rshift>:
   39974:	2805d17a 	srai	r2,r5,5
   39978:	20c00417 	ldw	r3,16(r4)
   3997c:	22800504 	addi	r10,r4,20
   39980:	10c0270e 	bge	r2,r3,39a20 <rshift+0xac>
   39984:	19800144 	addi	r6,r3,5
   39988:	12c00144 	addi	r11,r2,5
   3998c:	318d883a 	add	r6,r6,r6
   39990:	5ad7883a 	add	r11,r11,r11
   39994:	318d883a 	add	r6,r6,r6
   39998:	5ad7883a 	add	r11,r11,r11
   3999c:	294007cc 	andi	r5,r5,31
   399a0:	218d883a 	add	r6,r4,r6
   399a4:	22d7883a 	add	r11,r4,r11
   399a8:	28002026 	beq	r5,zero,39a2c <rshift+0xb8>
   399ac:	59c00017 	ldw	r7,0(r11)
   399b0:	02400804 	movi	r9,32
   399b4:	58800104 	addi	r2,r11,4
   399b8:	4953c83a 	sub	r9,r9,r5
   399bc:	394ed83a 	srl	r7,r7,r5
   399c0:	11802e2e 	bgeu	r2,r6,39a7c <rshift+0x108>
   399c4:	5007883a 	mov	r3,r10
   399c8:	12000017 	ldw	r8,0(r2)
   399cc:	18c00104 	addi	r3,r3,4
   399d0:	10800104 	addi	r2,r2,4
   399d4:	4250983a 	sll	r8,r8,r9
   399d8:	3a0eb03a 	or	r7,r7,r8
   399dc:	19ffff15 	stw	r7,-4(r3)
   399e0:	11ffff17 	ldw	r7,-4(r2)
   399e4:	394ed83a 	srl	r7,r7,r5
   399e8:	11bff736 	bltu	r2,r6,399c8 <rshift+0x54>
   399ec:	32c5c83a 	sub	r2,r6,r11
   399f0:	10bffec4 	addi	r2,r2,-5
   399f4:	1004d0ba 	srli	r2,r2,2
   399f8:	10800184 	addi	r2,r2,6
   399fc:	1085883a 	add	r2,r2,r2
   39a00:	1085883a 	add	r2,r2,r2
   39a04:	2085883a 	add	r2,r4,r2
   39a08:	11c00015 	stw	r7,0(r2)
   39a0c:	38001626 	beq	r7,zero,39a68 <rshift+0xf4>
   39a10:	10800104 	addi	r2,r2,4
   39a14:	1295c83a 	sub	r10,r2,r10
   39a18:	5015d0ba 	srai	r10,r10,2
   39a1c:	00001406 	br	39a70 <rshift+0xfc>
   39a20:	20000415 	stw	zero,16(r4)
   39a24:	20000515 	stw	zero,20(r4)
   39a28:	f800283a 	ret
   39a2c:	59bffc2e 	bgeu	r11,r6,39a20 <rshift+0xac>
   39a30:	5007883a 	mov	r3,r10
   39a34:	5805883a 	mov	r2,r11
   39a38:	11400017 	ldw	r5,0(r2)
   39a3c:	18c00104 	addi	r3,r3,4
   39a40:	10800104 	addi	r2,r2,4
   39a44:	197fff15 	stw	r5,-4(r3)
   39a48:	11bffb36 	bltu	r2,r6,39a38 <rshift+0xc4>
   39a4c:	02c4303a 	nor	r2,zero,r11
   39a50:	1185883a 	add	r2,r2,r6
   39a54:	1004d0ba 	srli	r2,r2,2
   39a58:	10800184 	addi	r2,r2,6
   39a5c:	1085883a 	add	r2,r2,r2
   39a60:	1085883a 	add	r2,r2,r2
   39a64:	2085883a 	add	r2,r4,r2
   39a68:	1295c83a 	sub	r10,r2,r10
   39a6c:	5015d0ba 	srai	r10,r10,2
   39a70:	22800415 	stw	r10,16(r4)
   39a74:	503feb26 	beq	r10,zero,39a24 <rshift+0xb0>
   39a78:	f800283a 	ret
   39a7c:	5005883a 	mov	r2,r10
   39a80:	003fe106 	br	39a08 <rshift+0x94>

00039a84 <__hexdig_init>:
   39a84:	01400134 	movhi	r5,4
   39a88:	29450144 	addi	r5,r5,5125
   39a8c:	01000404 	movi	r4,16
   39a90:	00c00c04 	movi	r3,48
   39a94:	00810134 	movhi	r2,1028
   39a98:	1092bc04 	addi	r2,r2,19184
   39a9c:	29800003 	ldbu	r6,0(r5)
   39aa0:	10c7883a 	add	r3,r2,r3
   39aa4:	19000005 	stb	r4,0(r3)
   39aa8:	29400044 	addi	r5,r5,1
   39aac:	3007883a 	mov	r3,r6
   39ab0:	21000044 	addi	r4,r4,1
   39ab4:	303ff91e 	bne	r6,zero,39a9c <__hexdig_init+0x18>
   39ab8:	01400134 	movhi	r5,4
   39abc:	2944ff44 	addi	r5,r5,5117
   39ac0:	01000684 	movi	r4,26
   39ac4:	00c01844 	movi	r3,97
   39ac8:	29800003 	ldbu	r6,0(r5)
   39acc:	10c7883a 	add	r3,r2,r3
   39ad0:	19000005 	stb	r4,0(r3)
   39ad4:	29400044 	addi	r5,r5,1
   39ad8:	3007883a 	mov	r3,r6
   39adc:	21000044 	addi	r4,r4,1
   39ae0:	303ff91e 	bne	r6,zero,39ac8 <__hexdig_init+0x44>
   39ae4:	01400134 	movhi	r5,4
   39ae8:	2944fd44 	addi	r5,r5,5109
   39aec:	01000684 	movi	r4,26
   39af0:	00c01044 	movi	r3,65
   39af4:	29800003 	ldbu	r6,0(r5)
   39af8:	10c7883a 	add	r3,r2,r3
   39afc:	19000005 	stb	r4,0(r3)
   39b00:	29400044 	addi	r5,r5,1
   39b04:	3007883a 	mov	r3,r6
   39b08:	21000044 	addi	r4,r4,1
   39b0c:	303ff91e 	bne	r6,zero,39af4 <__hexdig_init+0x70>
   39b10:	f800283a 	ret

00039b14 <__gethex>:
   39b14:	defff204 	addi	sp,sp,-56
   39b18:	dc800615 	stw	r18,24(sp)
   39b1c:	04810134 	movhi	r18,1028
   39b20:	9492bc04 	addi	r18,r18,19184
   39b24:	90800c03 	ldbu	r2,48(r18)
   39b28:	dd400915 	stw	r21,36(sp)
   39b2c:	dc400515 	stw	r17,20(sp)
   39b30:	dfc00d15 	stw	ra,52(sp)
   39b34:	df000c15 	stw	fp,48(sp)
   39b38:	ddc00b15 	stw	r23,44(sp)
   39b3c:	dd800a15 	stw	r22,40(sp)
   39b40:	dd000815 	stw	r20,32(sp)
   39b44:	dcc00715 	stw	r19,28(sp)
   39b48:	dc000415 	stw	r16,16(sp)
   39b4c:	d9000115 	stw	r4,4(sp)
   39b50:	d9c00215 	stw	r7,8(sp)
   39b54:	282b883a 	mov	r21,r5
   39b58:	3023883a 	mov	r17,r6
   39b5c:	1000b926 	beq	r2,zero,39e44 <__gethex+0x330>
   39b60:	a9000017 	ldw	r4,0(r21)
   39b64:	00800c04 	movi	r2,48
   39b68:	20c00083 	ldbu	r3,2(r4)
   39b6c:	24c00084 	addi	r19,r4,2
   39b70:	1881601e 	bne	r3,r2,3a0f4 <__gethex+0x5e0>
   39b74:	017fff84 	movi	r5,-2
   39b78:	208000c4 	addi	r2,r4,3
   39b7c:	290bc83a 	sub	r5,r5,r4
   39b80:	1809883a 	mov	r4,r3
   39b84:	28b9883a 	add	fp,r5,r2
   39b88:	1027883a 	mov	r19,r2
   39b8c:	10800044 	addi	r2,r2,1
   39b90:	10ffffc3 	ldbu	r3,-1(r2)
   39b94:	193ffb26 	beq	r3,r4,39b84 <__gethex+0x70>
   39b98:	90c5883a 	add	r2,r18,r3
   39b9c:	10800003 	ldbu	r2,0(r2)
   39ba0:	01410134 	movhi	r5,1028
   39ba4:	2952bc04 	addi	r5,r5,19184
   39ba8:	10002b26 	beq	r2,zero,39c58 <__gethex+0x144>
   39bac:	98800003 	ldbu	r2,0(r19)
   39bb0:	0009883a 	mov	r4,zero
   39bb4:	288b883a 	add	r5,r5,r2
   39bb8:	28c00003 	ldbu	r3,0(r5)
   39bbc:	18016826 	beq	r3,zero,3a160 <__gethex+0x64c>
   39bc0:	9821883a 	mov	r16,r19
   39bc4:	84000044 	addi	r16,r16,1
   39bc8:	80800003 	ldbu	r2,0(r16)
   39bcc:	9087883a 	add	r3,r18,r2
   39bd0:	18c00003 	ldbu	r3,0(r3)
   39bd4:	183ffb1e 	bne	r3,zero,39bc4 <__gethex+0xb0>
   39bd8:	d8000015 	stw	zero,0(sp)
   39bdc:	00c00b84 	movi	r3,46
   39be0:	10c0f226 	beq	r2,r3,39fac <__gethex+0x498>
   39be4:	80800003 	ldbu	r2,0(r16)
   39be8:	20014426 	beq	r4,zero,3a0fc <__gethex+0x5e8>
   39bec:	8109c83a 	sub	r4,r16,r4
   39bf0:	2109883a 	add	r4,r4,r4
   39bf4:	2109883a 	add	r4,r4,r4
   39bf8:	0129c83a 	sub	r20,zero,r4
   39bfc:	00c01404 	movi	r3,80
   39c00:	10c01e26 	beq	r2,r3,39c7c <__gethex+0x168>
   39c04:	00c01c04 	movi	r3,112
   39c08:	10c01c26 	beq	r2,r3,39c7c <__gethex+0x168>
   39c0c:	d8c00017 	ldw	r3,0(sp)
   39c10:	802d883a 	mov	r22,r16
   39c14:	ad800015 	stw	r22,0(r21)
   39c18:	18004026 	beq	r3,zero,39d1c <__gethex+0x208>
   39c1c:	e001061e 	bne	fp,zero,3a038 <__gethex+0x524>
   39c20:	04000184 	movi	r16,6
   39c24:	8005883a 	mov	r2,r16
   39c28:	dfc00d17 	ldw	ra,52(sp)
   39c2c:	df000c17 	ldw	fp,48(sp)
   39c30:	ddc00b17 	ldw	r23,44(sp)
   39c34:	dd800a17 	ldw	r22,40(sp)
   39c38:	dd400917 	ldw	r21,36(sp)
   39c3c:	dd000817 	ldw	r20,32(sp)
   39c40:	dcc00717 	ldw	r19,28(sp)
   39c44:	dc800617 	ldw	r18,24(sp)
   39c48:	dc400517 	ldw	r17,20(sp)
   39c4c:	dc000417 	ldw	r16,16(sp)
   39c50:	dec00e04 	addi	sp,sp,56
   39c54:	f800283a 	ret
   39c58:	00800b84 	movi	r2,46
   39c5c:	1880d626 	beq	r3,r2,39fb8 <__gethex+0x4a4>
   39c60:	98800003 	ldbu	r2,0(r19)
   39c64:	00c00044 	movi	r3,1
   39c68:	d8c00015 	stw	r3,0(sp)
   39c6c:	00c01404 	movi	r3,80
   39c70:	9821883a 	mov	r16,r19
   39c74:	0029883a 	mov	r20,zero
   39c78:	10ffe21e 	bne	r2,r3,39c04 <__gethex+0xf0>
   39c7c:	80800043 	ldbu	r2,1(r16)
   39c80:	00c00ac4 	movi	r3,43
   39c84:	10c0f326 	beq	r2,r3,3a054 <__gethex+0x540>
   39c88:	00c00b44 	movi	r3,45
   39c8c:	10c0ec26 	beq	r2,r3,3a040 <__gethex+0x52c>
   39c90:	80c00044 	addi	r3,r16,1
   39c94:	d8000315 	stw	zero,12(sp)
   39c98:	9085883a 	add	r2,r18,r2
   39c9c:	11000003 	ldbu	r4,0(r2)
   39ca0:	203fda26 	beq	r4,zero,39c0c <__gethex+0xf8>
   39ca4:	01800644 	movi	r6,25
   39ca8:	313fd816 	blt	r6,r4,39c0c <__gethex+0xf8>
   39cac:	18800043 	ldbu	r2,1(r3)
   39cb0:	01410134 	movhi	r5,1028
   39cb4:	2952bc04 	addi	r5,r5,19184
   39cb8:	213ffc04 	addi	r4,r4,-16
   39cbc:	2885883a 	add	r2,r5,r2
   39cc0:	15c00003 	ldbu	r23,0(r2)
   39cc4:	1d800044 	addi	r22,r3,1
   39cc8:	b8000d26 	beq	r23,zero,39d00 <__gethex+0x1ec>
   39ccc:	35c0030e 	bge	r6,r23,39cdc <__gethex+0x1c8>
   39cd0:	00000b06 	br	39d00 <__gethex+0x1ec>
   39cd4:	00800644 	movi	r2,25
   39cd8:	15c00916 	blt	r2,r23,39d00 <__gethex+0x1ec>
   39cdc:	01400284 	movi	r5,10
   39ce0:	002c1540 	call	2c154 <__mulsi3>
   39ce4:	b5800044 	addi	r22,r22,1
   39ce8:	b1400003 	ldbu	r5,0(r22)
   39cec:	15c5883a 	add	r2,r2,r23
   39cf0:	113ffc04 	addi	r4,r2,-16
   39cf4:	914b883a 	add	r5,r18,r5
   39cf8:	2dc00003 	ldbu	r23,0(r5)
   39cfc:	b83ff51e 	bne	r23,zero,39cd4 <__gethex+0x1c0>
   39d00:	d8c00317 	ldw	r3,12(sp)
   39d04:	18000126 	beq	r3,zero,39d0c <__gethex+0x1f8>
   39d08:	0109c83a 	sub	r4,zero,r4
   39d0c:	d8c00017 	ldw	r3,0(sp)
   39d10:	ad800015 	stw	r22,0(r21)
   39d14:	a129883a 	add	r20,r20,r4
   39d18:	183fc01e 	bne	r3,zero,39c1c <__gethex+0x108>
   39d1c:	84c5c83a 	sub	r2,r16,r19
   39d20:	10bfffc4 	addi	r2,r2,-1
   39d24:	00c001c4 	movi	r3,7
   39d28:	000b883a 	mov	r5,zero
   39d2c:	1880030e 	bge	r3,r2,39d3c <__gethex+0x228>
   39d30:	1005d07a 	srai	r2,r2,1
   39d34:	29400044 	addi	r5,r5,1
   39d38:	18bffd16 	blt	r3,r2,39d30 <__gethex+0x21c>
   39d3c:	d9000117 	ldw	r4,4(sp)
   39d40:	0035a580 	call	35a58 <_Balloc>
   39d44:	102d883a 	mov	r22,r2
   39d48:	15400504 	addi	r21,r2,20
   39d4c:	9c001b2e 	bgeu	r19,r16,39dbc <__gethex+0x2a8>
   39d50:	843fffc4 	addi	r16,r16,-1
   39d54:	98bfffc4 	addi	r2,r19,-1
   39d58:	a80b883a 	mov	r5,r21
   39d5c:	0009883a 	mov	r4,zero
   39d60:	0007883a 	mov	r3,zero
   39d64:	02800b84 	movi	r10,46
   39d68:	02c00804 	movi	r11,32
   39d6c:	00000806 	br	39d90 <__gethex+0x27c>
   39d70:	18c00104 	addi	r3,r3,4
   39d74:	918d883a 	add	r6,r18,r6
   39d78:	32400003 	ldbu	r9,0(r6)
   39d7c:	4a4003cc 	andi	r9,r9,15
   39d80:	49ce983a 	sll	r7,r9,r7
   39d84:	21c8b03a 	or	r4,r4,r7
   39d88:	843fffc4 	addi	r16,r16,-1
   39d8c:	80800d26 	beq	r16,r2,39dc4 <__gethex+0x2b0>
   39d90:	81800003 	ldbu	r6,0(r16)
   39d94:	180f883a 	mov	r7,r3
   39d98:	32bffb26 	beq	r6,r10,39d88 <__gethex+0x274>
   39d9c:	1afff41e 	bne	r3,r11,39d70 <__gethex+0x25c>
   39da0:	29000015 	stw	r4,0(r5)
   39da4:	81800003 	ldbu	r6,0(r16)
   39da8:	0009883a 	mov	r4,zero
   39dac:	000f883a 	mov	r7,zero
   39db0:	29400104 	addi	r5,r5,4
   39db4:	00c00104 	movi	r3,4
   39db8:	003fee06 	br	39d74 <__gethex+0x260>
   39dbc:	a80b883a 	mov	r5,r21
   39dc0:	0009883a 	mov	r4,zero
   39dc4:	28c00104 	addi	r3,r5,4
   39dc8:	1d47c83a 	sub	r3,r3,r21
   39dcc:	1807d0ba 	srai	r3,r3,2
   39dd0:	29000015 	stw	r4,0(r5)
   39dd4:	1820917a 	slli	r16,r3,5
   39dd8:	b0c00415 	stw	r3,16(r22)
   39ddc:	0035d700 	call	35d70 <__hi0bits>
   39de0:	8dc00017 	ldw	r23,0(r17)
   39de4:	8085c83a 	sub	r2,r16,r2
   39de8:	b8809c16 	blt	r23,r2,3a05c <__gethex+0x548>
   39dec:	15c0b716 	blt	r2,r23,3a0cc <__gethex+0x5b8>
   39df0:	0039883a 	mov	fp,zero
   39df4:	88c00217 	ldw	r3,8(r17)
   39df8:	1d006516 	blt	r3,r20,39f90 <__gethex+0x47c>
   39dfc:	88800117 	ldw	r2,4(r17)
   39e00:	a080830e 	bge	r20,r2,3a010 <__gethex+0x4fc>
   39e04:	1529c83a 	sub	r20,r2,r20
   39e08:	a5c01016 	blt	r20,r23,39e4c <__gethex+0x338>
   39e0c:	88c00317 	ldw	r3,12(r17)
   39e10:	01000084 	movi	r4,2
   39e14:	1900c726 	beq	r3,r4,3a134 <__gethex+0x620>
   39e18:	010000c4 	movi	r4,3
   39e1c:	1900f026 	beq	r3,r4,3a1e0 <__gethex+0x6cc>
   39e20:	01000044 	movi	r4,1
   39e24:	1900e626 	beq	r3,r4,3a1c0 <__gethex+0x6ac>
   39e28:	d9000117 	ldw	r4,4(sp)
   39e2c:	b00b883a 	mov	r5,r22
   39e30:	04001404 	movi	r16,80
   39e34:	0035b000 	call	35b00 <_Bfree>
   39e38:	d8c00e17 	ldw	r3,56(sp)
   39e3c:	18000015 	stw	zero,0(r3)
   39e40:	003f7806 	br	39c24 <__gethex+0x110>
   39e44:	0039a840 	call	39a84 <__hexdig_init>
   39e48:	003f4506 	br	39b60 <__gethex+0x4c>
   39e4c:	a43fffc4 	addi	r16,r20,-1
   39e50:	e000b21e 	bne	fp,zero,3a11c <__gethex+0x608>
   39e54:	0400040e 	bge	zero,r16,39e68 <__gethex+0x354>
   39e58:	b009883a 	mov	r4,r22
   39e5c:	800b883a 	mov	r5,r16
   39e60:	0036a240 	call	36a24 <__any_on>
   39e64:	1039883a 	mov	fp,r2
   39e68:	8005d17a 	srai	r2,r16,5
   39e6c:	00c00044 	movi	r3,1
   39e70:	840007cc 	andi	r16,r16,31
   39e74:	1085883a 	add	r2,r2,r2
   39e78:	1085883a 	add	r2,r2,r2
   39e7c:	a885883a 	add	r2,r21,r2
   39e80:	1c06983a 	sll	r3,r3,r16
   39e84:	10800017 	ldw	r2,0(r2)
   39e88:	1884703a 	and	r2,r3,r2
   39e8c:	10000126 	beq	r2,zero,39e94 <__gethex+0x380>
   39e90:	e7000094 	ori	fp,fp,2
   39e94:	a00b883a 	mov	r5,r20
   39e98:	b009883a 	mov	r4,r22
   39e9c:	00399740 	call	39974 <rshift>
   39ea0:	bd2fc83a 	sub	r23,r23,r20
   39ea4:	8d000117 	ldw	r20,4(r17)
   39ea8:	04000084 	movi	r16,2
   39eac:	e0005d26 	beq	fp,zero,3a024 <__gethex+0x510>
   39eb0:	88800317 	ldw	r2,12(r17)
   39eb4:	00c00084 	movi	r3,2
   39eb8:	10c0b026 	beq	r2,r3,3a17c <__gethex+0x668>
   39ebc:	00c000c4 	movi	r3,3
   39ec0:	10c05526 	beq	r2,r3,3a018 <__gethex+0x504>
   39ec4:	00c00044 	movi	r3,1
   39ec8:	10c0551e 	bne	r2,r3,3a020 <__gethex+0x50c>
   39ecc:	e080008c 	andi	r2,fp,2
   39ed0:	10005326 	beq	r2,zero,3a020 <__gethex+0x50c>
   39ed4:	a8800017 	ldw	r2,0(r21)
   39ed8:	e084b03a 	or	r2,fp,r2
   39edc:	10c4703a 	and	r2,r2,r3
   39ee0:	10004f26 	beq	r2,zero,3a020 <__gethex+0x50c>
   39ee4:	b7000417 	ldw	fp,16(r22)
   39ee8:	00ffffc4 	movi	r3,-1
   39eec:	e1000144 	addi	r4,fp,5
   39ef0:	2109883a 	add	r4,r4,r4
   39ef4:	2109883a 	add	r4,r4,r4
   39ef8:	b109883a 	add	r4,r22,r4
   39efc:	a8800017 	ldw	r2,0(r21)
   39f00:	10c0ba1e 	bne	r2,r3,3a1ec <__gethex+0x6d8>
   39f04:	a8000015 	stw	zero,0(r21)
   39f08:	ad400104 	addi	r21,r21,4
   39f0c:	a93ffb36 	bltu	r21,r4,39efc <__gethex+0x3e8>
   39f10:	b0800217 	ldw	r2,8(r22)
   39f14:	e080bd0e 	bge	fp,r2,3a20c <__gethex+0x6f8>
   39f18:	e005883a 	mov	r2,fp
   39f1c:	10c00144 	addi	r3,r2,5
   39f20:	18c7883a 	add	r3,r3,r3
   39f24:	18c7883a 	add	r3,r3,r3
   39f28:	b0c7883a 	add	r3,r22,r3
   39f2c:	10800044 	addi	r2,r2,1
   39f30:	01000044 	movi	r4,1
   39f34:	19000015 	stw	r4,0(r3)
   39f38:	b0800415 	stw	r2,16(r22)
   39f3c:	00800084 	movi	r2,2
   39f40:	8080ad26 	beq	r16,r2,3a1f8 <__gethex+0x6e4>
   39f44:	b0800417 	ldw	r2,16(r22)
   39f48:	e0800b16 	blt	fp,r2,39f78 <__gethex+0x464>
   39f4c:	bdc007cc 	andi	r23,r23,31
   39f50:	b8008626 	beq	r23,zero,3a16c <__gethex+0x658>
   39f54:	e7000104 	addi	fp,fp,4
   39f58:	e739883a 	add	fp,fp,fp
   39f5c:	e739883a 	add	fp,fp,fp
   39f60:	b705883a 	add	r2,r22,fp
   39f64:	11000017 	ldw	r4,0(r2)
   39f68:	0035d700 	call	35d70 <__hi0bits>
   39f6c:	00c00804 	movi	r3,32
   39f70:	1defc83a 	sub	r23,r3,r23
   39f74:	15c07d0e 	bge	r2,r23,3a16c <__gethex+0x658>
   39f78:	b009883a 	mov	r4,r22
   39f7c:	01400044 	movi	r5,1
   39f80:	00399740 	call	39974 <rshift>
   39f84:	88800217 	ldw	r2,8(r17)
   39f88:	a5000044 	addi	r20,r20,1
   39f8c:	1500770e 	bge	r2,r20,3a16c <__gethex+0x658>
   39f90:	d9000117 	ldw	r4,4(sp)
   39f94:	b00b883a 	mov	r5,r22
   39f98:	040028c4 	movi	r16,163
   39f9c:	0035b000 	call	35b00 <_Bfree>
   39fa0:	d8800e17 	ldw	r2,56(sp)
   39fa4:	10000015 	stw	zero,0(r2)
   39fa8:	003f1e06 	br	39c24 <__gethex+0x110>
   39fac:	20007826 	beq	r4,zero,3a190 <__gethex+0x67c>
   39fb0:	80800003 	ldbu	r2,0(r16)
   39fb4:	003f0d06 	br	39bec <__gethex+0xd8>
   39fb8:	98800043 	ldbu	r2,1(r19)
   39fbc:	9c000044 	addi	r16,r19,1
   39fc0:	288b883a 	add	r5,r5,r2
   39fc4:	28c00003 	ldbu	r3,0(r5)
   39fc8:	18005026 	beq	r3,zero,3a10c <__gethex+0x5f8>
   39fcc:	00c00c04 	movi	r3,48
   39fd0:	10c0541e 	bne	r2,r3,3a124 <__gethex+0x610>
   39fd4:	800d883a 	mov	r6,r16
   39fd8:	1007883a 	mov	r3,r2
   39fdc:	31800044 	addi	r6,r6,1
   39fe0:	30800003 	ldbu	r2,0(r6)
   39fe4:	10fffd26 	beq	r2,r3,39fdc <__gethex+0x4c8>
   39fe8:	9087883a 	add	r3,r18,r2
   39fec:	18c00003 	ldbu	r3,0(r3)
   39ff0:	3027883a 	mov	r19,r6
   39ff4:	18004c1e 	bne	r3,zero,3a128 <__gethex+0x614>
   39ff8:	00c00044 	movi	r3,1
   39ffc:	8009883a 	mov	r4,r16
   3a000:	d8c00015 	stw	r3,0(sp)
   3a004:	1839883a 	mov	fp,r3
   3a008:	3021883a 	mov	r16,r6
   3a00c:	003ef306 	br	39bdc <__gethex+0xc8>
   3a010:	04000044 	movi	r16,1
   3a014:	003fa506 	br	39eac <__gethex+0x398>
   3a018:	d8800f17 	ldw	r2,60(sp)
   3a01c:	103fb11e 	bne	r2,zero,39ee4 <__gethex+0x3d0>
   3a020:	84000414 	ori	r16,r16,16
   3a024:	d8800e17 	ldw	r2,56(sp)
   3a028:	d8c00217 	ldw	r3,8(sp)
   3a02c:	15800015 	stw	r22,0(r2)
   3a030:	1d000015 	stw	r20,0(r3)
   3a034:	003efb06 	br	39c24 <__gethex+0x110>
   3a038:	0021883a 	mov	r16,zero
   3a03c:	003ef906 	br	39c24 <__gethex+0x110>
   3a040:	00c00044 	movi	r3,1
   3a044:	d8c00315 	stw	r3,12(sp)
   3a048:	80800083 	ldbu	r2,2(r16)
   3a04c:	80c00084 	addi	r3,r16,2
   3a050:	003f1106 	br	39c98 <__gethex+0x184>
   3a054:	d8000315 	stw	zero,12(sp)
   3a058:	003ffb06 	br	3a048 <__gethex+0x534>
   3a05c:	15e1c83a 	sub	r16,r2,r23
   3a060:	b009883a 	mov	r4,r22
   3a064:	800b883a 	mov	r5,r16
   3a068:	0036a240 	call	36a24 <__any_on>
   3a06c:	10002526 	beq	r2,zero,3a104 <__gethex+0x5f0>
   3a070:	80bfffc4 	addi	r2,r16,-1
   3a074:	1007d17a 	srai	r3,r2,5
   3a078:	110007cc 	andi	r4,r2,31
   3a07c:	07000044 	movi	fp,1
   3a080:	18c00144 	addi	r3,r3,5
   3a084:	18c7883a 	add	r3,r3,r3
   3a088:	18c7883a 	add	r3,r3,r3
   3a08c:	b0c7883a 	add	r3,r22,r3
   3a090:	e108983a 	sll	r4,fp,r4
   3a094:	18c00017 	ldw	r3,0(r3)
   3a098:	20c6703a 	and	r3,r4,r3
   3a09c:	18000626 	beq	r3,zero,3a0b8 <__gethex+0x5a4>
   3a0a0:	e080340e 	bge	fp,r2,3a174 <__gethex+0x660>
   3a0a4:	b009883a 	mov	r4,r22
   3a0a8:	817fff84 	addi	r5,r16,-2
   3a0ac:	0036a240 	call	36a24 <__any_on>
   3a0b0:	10003026 	beq	r2,zero,3a174 <__gethex+0x660>
   3a0b4:	070000c4 	movi	fp,3
   3a0b8:	b009883a 	mov	r4,r22
   3a0bc:	800b883a 	mov	r5,r16
   3a0c0:	00399740 	call	39974 <rshift>
   3a0c4:	a429883a 	add	r20,r20,r16
   3a0c8:	003f4a06 	br	39df4 <__gethex+0x2e0>
   3a0cc:	d9000117 	ldw	r4,4(sp)
   3a0d0:	b8a1c83a 	sub	r16,r23,r2
   3a0d4:	b00b883a 	mov	r5,r22
   3a0d8:	800d883a 	mov	r6,r16
   3a0dc:	00362480 	call	36248 <__lshift>
   3a0e0:	102d883a 	mov	r22,r2
   3a0e4:	a429c83a 	sub	r20,r20,r16
   3a0e8:	15400504 	addi	r21,r2,20
   3a0ec:	0039883a 	mov	fp,zero
   3a0f0:	003f4006 	br	39df4 <__gethex+0x2e0>
   3a0f4:	0039883a 	mov	fp,zero
   3a0f8:	003ea706 	br	39b98 <__gethex+0x84>
   3a0fc:	0029883a 	mov	r20,zero
   3a100:	003ebe06 	br	39bfc <__gethex+0xe8>
   3a104:	0039883a 	mov	fp,zero
   3a108:	003feb06 	br	3a0b8 <__gethex+0x5a4>
   3a10c:	00c00044 	movi	r3,1
   3a110:	0029883a 	mov	r20,zero
   3a114:	d8c00015 	stw	r3,0(sp)
   3a118:	003eb806 	br	39bfc <__gethex+0xe8>
   3a11c:	07000044 	movi	fp,1
   3a120:	003f5106 	br	39e68 <__gethex+0x354>
   3a124:	8027883a 	mov	r19,r16
   3a128:	8009883a 	mov	r4,r16
   3a12c:	07000044 	movi	fp,1
   3a130:	003ea306 	br	39bc0 <__gethex+0xac>
   3a134:	d8c00f17 	ldw	r3,60(sp)
   3a138:	183f3b1e 	bne	r3,zero,39e28 <__gethex+0x314>
   3a13c:	d8c00217 	ldw	r3,8(sp)
   3a140:	04001884 	movi	r16,98
   3a144:	18800015 	stw	r2,0(r3)
   3a148:	00800044 	movi	r2,1
   3a14c:	b0800415 	stw	r2,16(r22)
   3a150:	a8800015 	stw	r2,0(r21)
   3a154:	d8800e17 	ldw	r2,56(sp)
   3a158:	15800015 	stw	r22,0(r2)
   3a15c:	003eb106 	br	39c24 <__gethex+0x110>
   3a160:	9821883a 	mov	r16,r19
   3a164:	d8000015 	stw	zero,0(sp)
   3a168:	003e9c06 	br	39bdc <__gethex+0xc8>
   3a16c:	04000844 	movi	r16,33
   3a170:	003fac06 	br	3a024 <__gethex+0x510>
   3a174:	07000084 	movi	fp,2
   3a178:	003fcf06 	br	3a0b8 <__gethex+0x5a4>
   3a17c:	d8c00f17 	ldw	r3,60(sp)
   3a180:	00800044 	movi	r2,1
   3a184:	10c5c83a 	sub	r2,r2,r3
   3a188:	103fa526 	beq	r2,zero,3a020 <__gethex+0x50c>
   3a18c:	003f5506 	br	39ee4 <__gethex+0x3d0>
   3a190:	80800043 	ldbu	r2,1(r16)
   3a194:	81000044 	addi	r4,r16,1
   3a198:	2021883a 	mov	r16,r4
   3a19c:	9087883a 	add	r3,r18,r2
   3a1a0:	18c00003 	ldbu	r3,0(r3)
   3a1a4:	183e9026 	beq	r3,zero,39be8 <__gethex+0xd4>
   3a1a8:	84000044 	addi	r16,r16,1
   3a1ac:	80800003 	ldbu	r2,0(r16)
   3a1b0:	9087883a 	add	r3,r18,r2
   3a1b4:	18c00003 	ldbu	r3,0(r3)
   3a1b8:	183ffb1e 	bne	r3,zero,3a1a8 <__gethex+0x694>
   3a1bc:	003e8a06 	br	39be8 <__gethex+0xd4>
   3a1c0:	a5ff191e 	bne	r20,r23,39e28 <__gethex+0x314>
   3a1c4:	1dffdd0e 	bge	r3,r23,3a13c <__gethex+0x628>
   3a1c8:	b009883a 	mov	r4,r22
   3a1cc:	b97fffc4 	addi	r5,r23,-1
   3a1d0:	0036a240 	call	36a24 <__any_on>
   3a1d4:	103f1426 	beq	r2,zero,39e28 <__gethex+0x314>
   3a1d8:	88800117 	ldw	r2,4(r17)
   3a1dc:	003fd706 	br	3a13c <__gethex+0x628>
   3a1e0:	d8c00f17 	ldw	r3,60(sp)
   3a1e4:	183f1026 	beq	r3,zero,39e28 <__gethex+0x314>
   3a1e8:	003fd406 	br	3a13c <__gethex+0x628>
   3a1ec:	10800044 	addi	r2,r2,1
   3a1f0:	a8800015 	stw	r2,0(r21)
   3a1f4:	003f5106 	br	39f3c <__gethex+0x428>
   3a1f8:	88800017 	ldw	r2,0(r17)
   3a1fc:	10bfffc4 	addi	r2,r2,-1
   3a200:	15c01426 	beq	r2,r23,3a254 <__gethex+0x740>
   3a204:	04000884 	movi	r16,34
   3a208:	003f8606 	br	3a024 <__gethex+0x510>
   3a20c:	b1400117 	ldw	r5,4(r22)
   3a210:	d9000117 	ldw	r4,4(sp)
   3a214:	29400044 	addi	r5,r5,1
   3a218:	0035a580 	call	35a58 <_Balloc>
   3a21c:	b1800417 	ldw	r6,16(r22)
   3a220:	b1400304 	addi	r5,r22,12
   3a224:	11000304 	addi	r4,r2,12
   3a228:	31800084 	addi	r6,r6,2
   3a22c:	318d883a 	add	r6,r6,r6
   3a230:	318d883a 	add	r6,r6,r6
   3a234:	102b883a 	mov	r21,r2
   3a238:	002eaec0 	call	2eaec <memcpy>
   3a23c:	d9000117 	ldw	r4,4(sp)
   3a240:	b00b883a 	mov	r5,r22
   3a244:	a82d883a 	mov	r22,r21
   3a248:	0035b000 	call	35b00 <_Bfree>
   3a24c:	a8800417 	ldw	r2,16(r21)
   3a250:	003f3206 	br	39f1c <__gethex+0x408>
   3a254:	b805d17a 	srai	r2,r23,5
   3a258:	04000044 	movi	r16,1
   3a25c:	bdc007cc 	andi	r23,r23,31
   3a260:	10800144 	addi	r2,r2,5
   3a264:	1085883a 	add	r2,r2,r2
   3a268:	1085883a 	add	r2,r2,r2
   3a26c:	b085883a 	add	r2,r22,r2
   3a270:	10800017 	ldw	r2,0(r2)
   3a274:	85e0983a 	sll	r16,r16,r23
   3a278:	80a0703a 	and	r16,r16,r2
   3a27c:	8020c03a 	cmpne	r16,r16,zero
   3a280:	00800884 	movi	r2,34
   3a284:	1421c83a 	sub	r16,r2,r16
   3a288:	003f6606 	br	3a024 <__gethex+0x510>

0003a28c <__hexnan>:
   3a28c:	defff604 	addi	sp,sp,-40
   3a290:	dc000315 	stw	r16,12(sp)
   3a294:	04010134 	movhi	r16,1028
   3a298:	8412bc04 	addi	r16,r16,19184
   3a29c:	80800c03 	ldbu	r2,48(r16)
   3a2a0:	dfc00915 	stw	ra,36(sp)
   3a2a4:	dd400815 	stw	r21,32(sp)
   3a2a8:	dd000715 	stw	r20,28(sp)
   3a2ac:	dcc00615 	stw	r19,24(sp)
   3a2b0:	dc800515 	stw	r18,20(sp)
   3a2b4:	dc400415 	stw	r17,16(sp)
   3a2b8:	10006c26 	beq	r2,zero,3a46c <__hexnan+0x1e0>
   3a2bc:	2d000017 	ldw	r20,0(r5)
   3a2c0:	a025d17a 	srai	r18,r20,5
   3a2c4:	a50007cc 	andi	r20,r20,31
   3a2c8:	94a5883a 	add	r18,r18,r18
   3a2cc:	94a5883a 	add	r18,r18,r18
   3a2d0:	34a5883a 	add	r18,r6,r18
   3a2d4:	a0000126 	beq	r20,zero,3a2dc <__hexnan+0x50>
   3a2d8:	94800104 	addi	r18,r18,4
   3a2dc:	20c00017 	ldw	r3,0(r4)
   3a2e0:	903fff15 	stw	zero,-4(r18)
   3a2e4:	947fff04 	addi	r17,r18,-4
   3a2e8:	18800043 	ldbu	r2,1(r3)
   3a2ec:	8817883a 	mov	r11,r17
   3a2f0:	880b883a 	mov	r5,r17
   3a2f4:	0011883a 	mov	r8,zero
   3a2f8:	001b883a 	mov	r13,zero
   3a2fc:	0015883a 	mov	r10,zero
   3a300:	03c00204 	movi	r15,8
   3a304:	03800804 	movi	r14,32
   3a308:	04c001c4 	movi	r19,7
   3a30c:	10001b26 	beq	r2,zero,3a37c <__hexnan+0xf0>
   3a310:	808f883a 	add	r7,r16,r2
   3a314:	39c00003 	ldbu	r7,0(r7)
   3a318:	3a403fcc 	andi	r9,r7,255
   3a31c:	4800301e 	bne	r9,zero,3a3e0 <__hexnan+0x154>
   3a320:	70804636 	bltu	r14,r2,3a43c <__hexnan+0x1b0>
   3a324:	6a80120e 	bge	r13,r10,3a370 <__hexnan+0xe4>
   3a328:	2ac00f2e 	bgeu	r5,r11,3a368 <__hexnan+0xdc>
   3a32c:	9a000e16 	blt	r19,r8,3a368 <__hexnan+0xdc>
   3a330:	7a11c83a 	sub	r8,r15,r8
   3a334:	4211883a 	add	r8,r8,r8
   3a338:	29c00017 	ldw	r7,0(r5)
   3a33c:	4211883a 	add	r8,r8,r8
   3a340:	722bc83a 	sub	r21,r14,r8
   3a344:	2805883a 	mov	r2,r5
   3a348:	12400117 	ldw	r9,4(r2)
   3a34c:	10800104 	addi	r2,r2,4
   3a350:	4d58983a 	sll	r12,r9,r21
   3a354:	3b18b03a 	or	r12,r7,r12
   3a358:	4a0ed83a 	srl	r7,r9,r8
   3a35c:	133fff15 	stw	r12,-4(r2)
   3a360:	11c00015 	stw	r7,0(r2)
   3a364:	12fff836 	bltu	r2,r11,3a348 <__hexnan+0xbc>
   3a368:	31402d36 	bltu	r6,r5,3a420 <__hexnan+0x194>
   3a36c:	02000204 	movi	r8,8
   3a370:	18c00044 	addi	r3,r3,1
   3a374:	18800043 	ldbu	r2,1(r3)
   3a378:	103fe51e 	bne	r2,zero,3a310 <__hexnan+0x84>
   3a37c:	50003126 	beq	r10,zero,3a444 <__hexnan+0x1b8>
   3a380:	2ac0022e 	bgeu	r5,r11,3a38c <__hexnan+0x100>
   3a384:	008001c4 	movi	r2,7
   3a388:	1200520e 	bge	r2,r8,3a4d4 <__hexnan+0x248>
   3a38c:	31403f2e 	bgeu	r6,r5,3a48c <__hexnan+0x200>
   3a390:	3005883a 	mov	r2,r6
   3a394:	28c00017 	ldw	r3,0(r5)
   3a398:	10800104 	addi	r2,r2,4
   3a39c:	29400104 	addi	r5,r5,4
   3a3a0:	10ffff15 	stw	r3,-4(r2)
   3a3a4:	897ffb2e 	bgeu	r17,r5,3a394 <__hexnan+0x108>
   3a3a8:	10000015 	stw	zero,0(r2)
   3a3ac:	10800104 	addi	r2,r2,4
   3a3b0:	88bffd2e 	bgeu	r17,r2,3a3a8 <__hexnan+0x11c>
   3a3b4:	90bfff17 	ldw	r2,-4(r18)
   3a3b8:	1000071e 	bne	r2,zero,3a3d8 <__hexnan+0x14c>
   3a3bc:	34403c26 	beq	r6,r17,3a4b0 <__hexnan+0x224>
   3a3c0:	8805883a 	mov	r2,r17
   3a3c4:	00000106 	br	3a3cc <__hexnan+0x140>
   3a3c8:	30803a26 	beq	r6,r2,3a4b4 <__hexnan+0x228>
   3a3cc:	10bfff04 	addi	r2,r2,-4
   3a3d0:	10c00017 	ldw	r3,0(r2)
   3a3d4:	183ffc26 	beq	r3,zero,3a3c8 <__hexnan+0x13c>
   3a3d8:	00800144 	movi	r2,5
   3a3dc:	00001a06 	br	3a448 <__hexnan+0x1bc>
   3a3e0:	42000044 	addi	r8,r8,1
   3a3e4:	52800044 	addi	r10,r10,1
   3a3e8:	7a000716 	blt	r15,r8,3a408 <__hexnan+0x17c>
   3a3ec:	28800017 	ldw	r2,0(r5)
   3a3f0:	1004913a 	slli	r2,r2,4
   3a3f4:	39c003cc 	andi	r7,r7,15
   3a3f8:	11ceb03a 	or	r7,r2,r7
   3a3fc:	29c00015 	stw	r7,0(r5)
   3a400:	18c00044 	addi	r3,r3,1
   3a404:	003fdb06 	br	3a374 <__hexnan+0xe8>
   3a408:	317fd92e 	bgeu	r6,r5,3a370 <__hexnan+0xe4>
   3a40c:	283fff15 	stw	zero,-4(r5)
   3a410:	0005883a 	mov	r2,zero
   3a414:	297fff04 	addi	r5,r5,-4
   3a418:	02000044 	movi	r8,1
   3a41c:	003ff506 	br	3a3f4 <__hexnan+0x168>
   3a420:	283fff15 	stw	zero,-4(r5)
   3a424:	297fff04 	addi	r5,r5,-4
   3a428:	501b883a 	mov	r13,r10
   3a42c:	2817883a 	mov	r11,r5
   3a430:	0011883a 	mov	r8,zero
   3a434:	18c00044 	addi	r3,r3,1
   3a438:	003fce06 	br	3a374 <__hexnan+0xe8>
   3a43c:	01c00a44 	movi	r7,41
   3a440:	11c02026 	beq	r2,r7,3a4c4 <__hexnan+0x238>
   3a444:	00800104 	movi	r2,4
   3a448:	dfc00917 	ldw	ra,36(sp)
   3a44c:	dd400817 	ldw	r21,32(sp)
   3a450:	dd000717 	ldw	r20,28(sp)
   3a454:	dcc00617 	ldw	r19,24(sp)
   3a458:	dc800517 	ldw	r18,20(sp)
   3a45c:	dc400417 	ldw	r17,16(sp)
   3a460:	dc000317 	ldw	r16,12(sp)
   3a464:	dec00a04 	addi	sp,sp,40
   3a468:	f800283a 	ret
   3a46c:	d9000015 	stw	r4,0(sp)
   3a470:	d9400115 	stw	r5,4(sp)
   3a474:	d9800215 	stw	r6,8(sp)
   3a478:	0039a840 	call	39a84 <__hexdig_init>
   3a47c:	d9800217 	ldw	r6,8(sp)
   3a480:	d9400117 	ldw	r5,4(sp)
   3a484:	d9000017 	ldw	r4,0(sp)
   3a488:	003f8c06 	br	3a2bc <__hexnan+0x30>
   3a48c:	a03fc926 	beq	r20,zero,3a3b4 <__hexnan+0x128>
   3a490:	00800804 	movi	r2,32
   3a494:	1529c83a 	sub	r20,r2,r20
   3a498:	00ffffc4 	movi	r3,-1
   3a49c:	90bfff17 	ldw	r2,-4(r18)
   3a4a0:	1d06d83a 	srl	r3,r3,r20
   3a4a4:	1884703a 	and	r2,r3,r2
   3a4a8:	90bfff15 	stw	r2,-4(r18)
   3a4ac:	003fc206 	br	3a3b8 <__hexnan+0x12c>
   3a4b0:	3005883a 	mov	r2,r6
   3a4b4:	00c00044 	movi	r3,1
   3a4b8:	10c00015 	stw	r3,0(r2)
   3a4bc:	00800144 	movi	r2,5
   3a4c0:	003fe106 	br	3a448 <__hexnan+0x1bc>
   3a4c4:	503fdf26 	beq	r10,zero,3a444 <__hexnan+0x1b8>
   3a4c8:	18c00084 	addi	r3,r3,2
   3a4cc:	20c00015 	stw	r3,0(r4)
   3a4d0:	003fab06 	br	3a380 <__hexnan+0xf4>
   3a4d4:	00800204 	movi	r2,8
   3a4d8:	1211c83a 	sub	r8,r2,r8
   3a4dc:	4211883a 	add	r8,r8,r8
   3a4e0:	28c00017 	ldw	r3,0(r5)
   3a4e4:	4211883a 	add	r8,r8,r8
   3a4e8:	02400804 	movi	r9,32
   3a4ec:	4a13c83a 	sub	r9,r9,r8
   3a4f0:	2805883a 	mov	r2,r5
   3a4f4:	11000117 	ldw	r4,4(r2)
   3a4f8:	10800104 	addi	r2,r2,4
   3a4fc:	224e983a 	sll	r7,r4,r9
   3a500:	19ceb03a 	or	r7,r3,r7
   3a504:	2206d83a 	srl	r3,r4,r8
   3a508:	11ffff15 	stw	r7,-4(r2)
   3a50c:	10c00015 	stw	r3,0(r2)
   3a510:	12fff836 	bltu	r2,r11,3a4f4 <__hexnan+0x268>
   3a514:	003f9d06 	br	3a38c <__hexnan+0x100>

0003a518 <__fixunsdfsi>:
   3a518:	defffd04 	addi	sp,sp,-12
   3a51c:	000d883a 	mov	r6,zero
   3a520:	01d07834 	movhi	r7,16864
   3a524:	dc400115 	stw	r17,4(sp)
   3a528:	dc000015 	stw	r16,0(sp)
   3a52c:	dfc00215 	stw	ra,8(sp)
   3a530:	2023883a 	mov	r17,r4
   3a534:	2821883a 	mov	r16,r5
   3a538:	003b83c0 	call	3b83c <__gedf2>
   3a53c:	1000080e 	bge	r2,zero,3a560 <__fixunsdfsi+0x48>
   3a540:	8809883a 	mov	r4,r17
   3a544:	800b883a 	mov	r5,r16
   3a548:	003ba2c0 	call	3ba2c <__fixdfsi>
   3a54c:	dfc00217 	ldw	ra,8(sp)
   3a550:	dc400117 	ldw	r17,4(sp)
   3a554:	dc000017 	ldw	r16,0(sp)
   3a558:	dec00304 	addi	sp,sp,12
   3a55c:	f800283a 	ret
   3a560:	000d883a 	mov	r6,zero
   3a564:	01d07834 	movhi	r7,16864
   3a568:	8809883a 	mov	r4,r17
   3a56c:	800b883a 	mov	r5,r16
   3a570:	003b6c00 	call	3b6c0 <__subdf3>
   3a574:	180b883a 	mov	r5,r3
   3a578:	1009883a 	mov	r4,r2
   3a57c:	003ba2c0 	call	3ba2c <__fixdfsi>
   3a580:	00e00034 	movhi	r3,32768
   3a584:	10c5883a 	add	r2,r2,r3
   3a588:	dfc00217 	ldw	ra,8(sp)
   3a58c:	dc400117 	ldw	r17,4(sp)
   3a590:	dc000017 	ldw	r16,0(sp)
   3a594:	dec00304 	addi	sp,sp,12
   3a598:	f800283a 	ret

0003a59c <__udivdi3>:
   3a59c:	defff504 	addi	sp,sp,-44
   3a5a0:	dd000515 	stw	r20,20(sp)
   3a5a4:	dcc00415 	stw	r19,16(sp)
   3a5a8:	dc800315 	stw	r18,12(sp)
   3a5ac:	dc400215 	stw	r17,8(sp)
   3a5b0:	dc000115 	stw	r16,4(sp)
   3a5b4:	dfc00a15 	stw	ra,40(sp)
   3a5b8:	df000915 	stw	fp,36(sp)
   3a5bc:	ddc00815 	stw	r23,32(sp)
   3a5c0:	dd800715 	stw	r22,28(sp)
   3a5c4:	dd400615 	stw	r21,24(sp)
   3a5c8:	2025883a 	mov	r18,r4
   3a5cc:	2823883a 	mov	r17,r5
   3a5d0:	3021883a 	mov	r16,r6
   3a5d4:	2027883a 	mov	r19,r4
   3a5d8:	2829883a 	mov	r20,r5
   3a5dc:	3800451e 	bne	r7,zero,3a6f4 <__udivdi3+0x158>
   3a5e0:	2980652e 	bgeu	r5,r6,3a778 <__udivdi3+0x1dc>
   3a5e4:	00bfffd4 	movui	r2,65535
   3a5e8:	1180b436 	bltu	r2,r6,3a8bc <__udivdi3+0x320>
   3a5ec:	00803fc4 	movi	r2,255
   3a5f0:	11816636 	bltu	r2,r6,3ab8c <__udivdi3+0x5f0>
   3a5f4:	0005883a 	mov	r2,zero
   3a5f8:	0007883a 	mov	r3,zero
   3a5fc:	3084d83a 	srl	r2,r6,r2
   3a600:	01000134 	movhi	r4,4
   3a604:	21038304 	addi	r4,r4,3596
   3a608:	2085883a 	add	r2,r4,r2
   3a60c:	10800003 	ldbu	r2,0(r2)
   3a610:	10c7883a 	add	r3,r2,r3
   3a614:	00800804 	movi	r2,32
   3a618:	10c5c83a 	sub	r2,r2,r3
   3a61c:	10000526 	beq	r2,zero,3a634 <__udivdi3+0x98>
   3a620:	88a2983a 	sll	r17,r17,r2
   3a624:	90c6d83a 	srl	r3,r18,r3
   3a628:	30a0983a 	sll	r16,r6,r2
   3a62c:	90a6983a 	sll	r19,r18,r2
   3a630:	88e8b03a 	or	r20,r17,r3
   3a634:	8022d43a 	srli	r17,r16,16
   3a638:	a009883a 	mov	r4,r20
   3a63c:	857fffcc 	andi	r21,r16,65535
   3a640:	880b883a 	mov	r5,r17
   3a644:	002c14c0 	call	2c14c <__umodsi3>
   3a648:	a009883a 	mov	r4,r20
   3a64c:	880b883a 	mov	r5,r17
   3a650:	102d883a 	mov	r22,r2
   3a654:	002c1440 	call	2c144 <__udivsi3>
   3a658:	1009883a 	mov	r4,r2
   3a65c:	a80b883a 	mov	r5,r21
   3a660:	1025883a 	mov	r18,r2
   3a664:	002c1540 	call	2c154 <__mulsi3>
   3a668:	1009883a 	mov	r4,r2
   3a66c:	b006943a 	slli	r3,r22,16
   3a670:	9804d43a 	srli	r2,r19,16
   3a674:	1886b03a 	or	r3,r3,r2
   3a678:	1900052e 	bgeu	r3,r4,3a690 <__udivdi3+0xf4>
   3a67c:	1c07883a 	add	r3,r3,r16
   3a680:	90bfffc4 	addi	r2,r18,-1
   3a684:	1c000136 	bltu	r3,r16,3a68c <__udivdi3+0xf0>
   3a688:	19015536 	bltu	r3,r4,3abe0 <__udivdi3+0x644>
   3a68c:	1025883a 	mov	r18,r2
   3a690:	1929c83a 	sub	r20,r3,r4
   3a694:	880b883a 	mov	r5,r17
   3a698:	a009883a 	mov	r4,r20
   3a69c:	002c14c0 	call	2c14c <__umodsi3>
   3a6a0:	102d883a 	mov	r22,r2
   3a6a4:	880b883a 	mov	r5,r17
   3a6a8:	a009883a 	mov	r4,r20
   3a6ac:	b02c943a 	slli	r22,r22,16
   3a6b0:	002c1440 	call	2c144 <__udivsi3>
   3a6b4:	1009883a 	mov	r4,r2
   3a6b8:	a80b883a 	mov	r5,r21
   3a6bc:	9cffffcc 	andi	r19,r19,65535
   3a6c0:	1023883a 	mov	r17,r2
   3a6c4:	b4e6b03a 	or	r19,r22,r19
   3a6c8:	002c1540 	call	2c154 <__mulsi3>
   3a6cc:	9880052e 	bgeu	r19,r2,3a6e4 <__udivdi3+0x148>
   3a6d0:	9c27883a 	add	r19,r19,r16
   3a6d4:	88ffffc4 	addi	r3,r17,-1
   3a6d8:	9c011436 	bltu	r19,r16,3ab2c <__udivdi3+0x590>
   3a6dc:	9881132e 	bgeu	r19,r2,3ab2c <__udivdi3+0x590>
   3a6e0:	8c7fff84 	addi	r17,r17,-2
   3a6e4:	9004943a 	slli	r2,r18,16
   3a6e8:	0007883a 	mov	r3,zero
   3a6ec:	8884b03a 	or	r2,r17,r2
   3a6f0:	00001506 	br	3a748 <__udivdi3+0x1ac>
   3a6f4:	29c06a36 	bltu	r5,r7,3a8a0 <__udivdi3+0x304>
   3a6f8:	00bfffd4 	movui	r2,65535
   3a6fc:	11c06a2e 	bgeu	r2,r7,3a8a8 <__udivdi3+0x30c>
   3a700:	00804034 	movhi	r2,256
   3a704:	10bfffc4 	addi	r2,r2,-1
   3a708:	11c11436 	bltu	r2,r7,3ab5c <__udivdi3+0x5c0>
   3a70c:	00c00404 	movi	r3,16
   3a710:	180b883a 	mov	r5,r3
   3a714:	38c6d83a 	srl	r3,r7,r3
   3a718:	01000134 	movhi	r4,4
   3a71c:	21038304 	addi	r4,r4,3596
   3a720:	04000804 	movi	r16,32
   3a724:	20c7883a 	add	r3,r4,r3
   3a728:	18800003 	ldbu	r2,0(r3)
   3a72c:	1145883a 	add	r2,r2,r5
   3a730:	80a1c83a 	sub	r16,r16,r2
   3a734:	80006e1e 	bne	r16,zero,3a8f0 <__udivdi3+0x354>
   3a738:	0007883a 	mov	r3,zero
   3a73c:	3c406a36 	bltu	r7,r17,3a8e8 <__udivdi3+0x34c>
   3a740:	9180692e 	bgeu	r18,r6,3a8e8 <__udivdi3+0x34c>
   3a744:	0005883a 	mov	r2,zero
   3a748:	dfc00a17 	ldw	ra,40(sp)
   3a74c:	df000917 	ldw	fp,36(sp)
   3a750:	ddc00817 	ldw	r23,32(sp)
   3a754:	dd800717 	ldw	r22,28(sp)
   3a758:	dd400617 	ldw	r21,24(sp)
   3a75c:	dd000517 	ldw	r20,20(sp)
   3a760:	dcc00417 	ldw	r19,16(sp)
   3a764:	dc800317 	ldw	r18,12(sp)
   3a768:	dc400217 	ldw	r17,8(sp)
   3a76c:	dc000117 	ldw	r16,4(sp)
   3a770:	dec00b04 	addi	sp,sp,44
   3a774:	f800283a 	ret
   3a778:	3000041e 	bne	r6,zero,3a78c <__udivdi3+0x1f0>
   3a77c:	01000044 	movi	r4,1
   3a780:	000b883a 	mov	r5,zero
   3a784:	002c1440 	call	2c144 <__udivsi3>
   3a788:	1021883a 	mov	r16,r2
   3a78c:	00bfffd4 	movui	r2,65535
   3a790:	1400502e 	bgeu	r2,r16,3a8d4 <__udivdi3+0x338>
   3a794:	00804034 	movhi	r2,256
   3a798:	10bfffc4 	addi	r2,r2,-1
   3a79c:	1400f536 	bltu	r2,r16,3ab74 <__udivdi3+0x5d8>
   3a7a0:	00800404 	movi	r2,16
   3a7a4:	1007883a 	mov	r3,r2
   3a7a8:	8084d83a 	srl	r2,r16,r2
   3a7ac:	01000134 	movhi	r4,4
   3a7b0:	21038304 	addi	r4,r4,3596
   3a7b4:	2085883a 	add	r2,r4,r2
   3a7b8:	10800003 	ldbu	r2,0(r2)
   3a7bc:	10c7883a 	add	r3,r2,r3
   3a7c0:	00800804 	movi	r2,32
   3a7c4:	10c5c83a 	sub	r2,r2,r3
   3a7c8:	1000a01e 	bne	r2,zero,3aa4c <__udivdi3+0x4b0>
   3a7cc:	8028d43a 	srli	r20,r16,16
   3a7d0:	8c23c83a 	sub	r17,r17,r16
   3a7d4:	857fffcc 	andi	r21,r16,65535
   3a7d8:	00c00044 	movi	r3,1
   3a7dc:	8809883a 	mov	r4,r17
   3a7e0:	a00b883a 	mov	r5,r20
   3a7e4:	d8c00015 	stw	r3,0(sp)
   3a7e8:	002c14c0 	call	2c14c <__umodsi3>
   3a7ec:	8809883a 	mov	r4,r17
   3a7f0:	a00b883a 	mov	r5,r20
   3a7f4:	102d883a 	mov	r22,r2
   3a7f8:	002c1440 	call	2c144 <__udivsi3>
   3a7fc:	1009883a 	mov	r4,r2
   3a800:	a80b883a 	mov	r5,r21
   3a804:	1025883a 	mov	r18,r2
   3a808:	002c1540 	call	2c154 <__mulsi3>
   3a80c:	1009883a 	mov	r4,r2
   3a810:	b00c943a 	slli	r6,r22,16
   3a814:	9804d43a 	srli	r2,r19,16
   3a818:	d8c00017 	ldw	r3,0(sp)
   3a81c:	308cb03a 	or	r6,r6,r2
   3a820:	3100052e 	bgeu	r6,r4,3a838 <__udivdi3+0x29c>
   3a824:	340d883a 	add	r6,r6,r16
   3a828:	90bfffc4 	addi	r2,r18,-1
   3a82c:	34000136 	bltu	r6,r16,3a834 <__udivdi3+0x298>
   3a830:	3100e836 	bltu	r6,r4,3abd4 <__udivdi3+0x638>
   3a834:	1025883a 	mov	r18,r2
   3a838:	3123c83a 	sub	r17,r6,r4
   3a83c:	8809883a 	mov	r4,r17
   3a840:	a00b883a 	mov	r5,r20
   3a844:	d8c00015 	stw	r3,0(sp)
   3a848:	002c14c0 	call	2c14c <__umodsi3>
   3a84c:	102d883a 	mov	r22,r2
   3a850:	8809883a 	mov	r4,r17
   3a854:	a00b883a 	mov	r5,r20
   3a858:	b02c943a 	slli	r22,r22,16
   3a85c:	002c1440 	call	2c144 <__udivsi3>
   3a860:	1009883a 	mov	r4,r2
   3a864:	a80b883a 	mov	r5,r21
   3a868:	9cffffcc 	andi	r19,r19,65535
   3a86c:	1023883a 	mov	r17,r2
   3a870:	b4e6b03a 	or	r19,r22,r19
   3a874:	002c1540 	call	2c154 <__mulsi3>
   3a878:	d8c00017 	ldw	r3,0(sp)
   3a87c:	9880052e 	bgeu	r19,r2,3a894 <__udivdi3+0x2f8>
   3a880:	9c27883a 	add	r19,r19,r16
   3a884:	893fffc4 	addi	r4,r17,-1
   3a888:	9c00aa36 	bltu	r19,r16,3ab34 <__udivdi3+0x598>
   3a88c:	9880a92e 	bgeu	r19,r2,3ab34 <__udivdi3+0x598>
   3a890:	8c7fff84 	addi	r17,r17,-2
   3a894:	9004943a 	slli	r2,r18,16
   3a898:	8884b03a 	or	r2,r17,r2
   3a89c:	003faa06 	br	3a748 <__udivdi3+0x1ac>
   3a8a0:	0007883a 	mov	r3,zero
   3a8a4:	003fa706 	br	3a744 <__udivdi3+0x1a8>
   3a8a8:	00803fc4 	movi	r2,255
   3a8ac:	11c0ae36 	bltu	r2,r7,3ab68 <__udivdi3+0x5cc>
   3a8b0:	0007883a 	mov	r3,zero
   3a8b4:	000b883a 	mov	r5,zero
   3a8b8:	003f9606 	br	3a714 <__udivdi3+0x178>
   3a8bc:	00804034 	movhi	r2,256
   3a8c0:	10bfffc4 	addi	r2,r2,-1
   3a8c4:	1180ae36 	bltu	r2,r6,3ab80 <__udivdi3+0x5e4>
   3a8c8:	00800404 	movi	r2,16
   3a8cc:	1007883a 	mov	r3,r2
   3a8d0:	003f4a06 	br	3a5fc <__udivdi3+0x60>
   3a8d4:	00803fc4 	movi	r2,255
   3a8d8:	1400af36 	bltu	r2,r16,3ab98 <__udivdi3+0x5fc>
   3a8dc:	0005883a 	mov	r2,zero
   3a8e0:	0007883a 	mov	r3,zero
   3a8e4:	003fb006 	br	3a7a8 <__udivdi3+0x20c>
   3a8e8:	00800044 	movi	r2,1
   3a8ec:	003f9606 	br	3a748 <__udivdi3+0x1ac>
   3a8f0:	3c0e983a 	sll	r7,r7,r16
   3a8f4:	3086d83a 	srl	r3,r6,r2
   3a8f8:	88aed83a 	srl	r23,r17,r2
   3a8fc:	9084d83a 	srl	r2,r18,r2
   3a900:	38e6b03a 	or	r19,r7,r3
   3a904:	9828d43a 	srli	r20,r19,16
   3a908:	8c22983a 	sll	r17,r17,r16
   3a90c:	b809883a 	mov	r4,r23
   3a910:	a00b883a 	mov	r5,r20
   3a914:	342a983a 	sll	r21,r6,r16
   3a918:	88a2b03a 	or	r17,r17,r2
   3a91c:	002c14c0 	call	2c14c <__umodsi3>
   3a920:	b809883a 	mov	r4,r23
   3a924:	a00b883a 	mov	r5,r20
   3a928:	1039883a 	mov	fp,r2
   3a92c:	9dbfffcc 	andi	r22,r19,65535
   3a930:	002c1440 	call	2c144 <__udivsi3>
   3a934:	1009883a 	mov	r4,r2
   3a938:	b00b883a 	mov	r5,r22
   3a93c:	102f883a 	mov	r23,r2
   3a940:	002c1540 	call	2c154 <__mulsi3>
   3a944:	1009883a 	mov	r4,r2
   3a948:	e00e943a 	slli	r7,fp,16
   3a94c:	8804d43a 	srli	r2,r17,16
   3a950:	388eb03a 	or	r7,r7,r2
   3a954:	3900042e 	bgeu	r7,r4,3a968 <__udivdi3+0x3cc>
   3a958:	3ccf883a 	add	r7,r7,r19
   3a95c:	b8bfffc4 	addi	r2,r23,-1
   3a960:	3cc0942e 	bgeu	r7,r19,3abb4 <__udivdi3+0x618>
   3a964:	102f883a 	mov	r23,r2
   3a968:	3939c83a 	sub	fp,r7,r4
   3a96c:	a00b883a 	mov	r5,r20
   3a970:	e009883a 	mov	r4,fp
   3a974:	002c14c0 	call	2c14c <__umodsi3>
   3a978:	a00b883a 	mov	r5,r20
   3a97c:	e009883a 	mov	r4,fp
   3a980:	d8800015 	stw	r2,0(sp)
   3a984:	002c1440 	call	2c144 <__udivsi3>
   3a988:	1009883a 	mov	r4,r2
   3a98c:	b00b883a 	mov	r5,r22
   3a990:	1029883a 	mov	r20,r2
   3a994:	002c1540 	call	2c154 <__mulsi3>
   3a998:	d8c00017 	ldw	r3,0(sp)
   3a99c:	8c7fffcc 	andi	r17,r17,65535
   3a9a0:	1806943a 	slli	r3,r3,16
   3a9a4:	1c46b03a 	or	r3,r3,r17
   3a9a8:	1880042e 	bgeu	r3,r2,3a9bc <__udivdi3+0x420>
   3a9ac:	1cc7883a 	add	r3,r3,r19
   3a9b0:	a13fffc4 	addi	r4,r20,-1
   3a9b4:	1cc07b2e 	bgeu	r3,r19,3aba4 <__udivdi3+0x608>
   3a9b8:	2029883a 	mov	r20,r4
   3a9bc:	b82e943a 	slli	r23,r23,16
   3a9c0:	a822d43a 	srli	r17,r21,16
   3a9c4:	ad7fffcc 	andi	r21,r21,65535
   3a9c8:	a5e8b03a 	or	r20,r20,r23
   3a9cc:	a5bfffcc 	andi	r22,r20,65535
   3a9d0:	b009883a 	mov	r4,r22
   3a9d4:	a80b883a 	mov	r5,r21
   3a9d8:	18afc83a 	sub	r23,r3,r2
   3a9dc:	a026d43a 	srli	r19,r20,16
   3a9e0:	002c1540 	call	2c154 <__mulsi3>
   3a9e4:	b009883a 	mov	r4,r22
   3a9e8:	880b883a 	mov	r5,r17
   3a9ec:	1039883a 	mov	fp,r2
   3a9f0:	002c1540 	call	2c154 <__mulsi3>
   3a9f4:	a80b883a 	mov	r5,r21
   3a9f8:	9809883a 	mov	r4,r19
   3a9fc:	102d883a 	mov	r22,r2
   3aa00:	002c1540 	call	2c154 <__mulsi3>
   3aa04:	9809883a 	mov	r4,r19
   3aa08:	880b883a 	mov	r5,r17
   3aa0c:	102b883a 	mov	r21,r2
   3aa10:	002c1540 	call	2c154 <__mulsi3>
   3aa14:	100b883a 	mov	r5,r2
   3aa18:	e004d43a 	srli	r2,fp,16
   3aa1c:	ad89883a 	add	r4,r21,r22
   3aa20:	2089883a 	add	r4,r4,r2
   3aa24:	2540022e 	bgeu	r4,r21,3aa30 <__udivdi3+0x494>
   3aa28:	00800074 	movhi	r2,1
   3aa2c:	288b883a 	add	r5,r5,r2
   3aa30:	2004d43a 	srli	r2,r4,16
   3aa34:	288b883a 	add	r5,r5,r2
   3aa38:	b9404536 	bltu	r23,r5,3ab50 <__udivdi3+0x5b4>
   3aa3c:	b9403f26 	beq	r23,r5,3ab3c <__udivdi3+0x5a0>
   3aa40:	a005883a 	mov	r2,r20
   3aa44:	0007883a 	mov	r3,zero
   3aa48:	003f3f06 	br	3a748 <__udivdi3+0x1ac>
   3aa4c:	80a0983a 	sll	r16,r16,r2
   3aa50:	88eed83a 	srl	r23,r17,r3
   3aa54:	90c6d83a 	srl	r3,r18,r3
   3aa58:	8028d43a 	srli	r20,r16,16
   3aa5c:	88a2983a 	sll	r17,r17,r2
   3aa60:	b809883a 	mov	r4,r23
   3aa64:	a00b883a 	mov	r5,r20
   3aa68:	88ecb03a 	or	r22,r17,r3
   3aa6c:	90a6983a 	sll	r19,r18,r2
   3aa70:	002c14c0 	call	2c14c <__umodsi3>
   3aa74:	b809883a 	mov	r4,r23
   3aa78:	a00b883a 	mov	r5,r20
   3aa7c:	1023883a 	mov	r17,r2
   3aa80:	857fffcc 	andi	r21,r16,65535
   3aa84:	002c1440 	call	2c144 <__udivsi3>
   3aa88:	1009883a 	mov	r4,r2
   3aa8c:	a80b883a 	mov	r5,r21
   3aa90:	102f883a 	mov	r23,r2
   3aa94:	002c1540 	call	2c154 <__mulsi3>
   3aa98:	1009883a 	mov	r4,r2
   3aa9c:	880a943a 	slli	r5,r17,16
   3aaa0:	b004d43a 	srli	r2,r22,16
   3aaa4:	288ab03a 	or	r5,r5,r2
   3aaa8:	2900062e 	bgeu	r5,r4,3aac4 <__udivdi3+0x528>
   3aaac:	2c0b883a 	add	r5,r5,r16
   3aab0:	b8bfffc4 	addi	r2,r23,-1
   3aab4:	2c004536 	bltu	r5,r16,3abcc <__udivdi3+0x630>
   3aab8:	2900442e 	bgeu	r5,r4,3abcc <__udivdi3+0x630>
   3aabc:	bdffff84 	addi	r23,r23,-2
   3aac0:	2c0b883a 	add	r5,r5,r16
   3aac4:	2925c83a 	sub	r18,r5,r4
   3aac8:	9009883a 	mov	r4,r18
   3aacc:	a00b883a 	mov	r5,r20
   3aad0:	002c14c0 	call	2c14c <__umodsi3>
   3aad4:	1023883a 	mov	r17,r2
   3aad8:	9009883a 	mov	r4,r18
   3aadc:	a00b883a 	mov	r5,r20
   3aae0:	8822943a 	slli	r17,r17,16
   3aae4:	002c1440 	call	2c144 <__udivsi3>
   3aae8:	1009883a 	mov	r4,r2
   3aaec:	a80b883a 	mov	r5,r21
   3aaf0:	b5bfffcc 	andi	r22,r22,65535
   3aaf4:	1025883a 	mov	r18,r2
   3aaf8:	8da2b03a 	or	r17,r17,r22
   3aafc:	002c1540 	call	2c154 <__mulsi3>
   3ab00:	8880062e 	bgeu	r17,r2,3ab1c <__udivdi3+0x580>
   3ab04:	8c23883a 	add	r17,r17,r16
   3ab08:	90ffffc4 	addi	r3,r18,-1
   3ab0c:	8c002d36 	bltu	r17,r16,3abc4 <__udivdi3+0x628>
   3ab10:	88802c2e 	bgeu	r17,r2,3abc4 <__udivdi3+0x628>
   3ab14:	94bfff84 	addi	r18,r18,-2
   3ab18:	8c23883a 	add	r17,r17,r16
   3ab1c:	b806943a 	slli	r3,r23,16
   3ab20:	88a3c83a 	sub	r17,r17,r2
   3ab24:	90c6b03a 	or	r3,r18,r3
   3ab28:	003f2c06 	br	3a7dc <__udivdi3+0x240>
   3ab2c:	1823883a 	mov	r17,r3
   3ab30:	003eec06 	br	3a6e4 <__udivdi3+0x148>
   3ab34:	2023883a 	mov	r17,r4
   3ab38:	003f5606 	br	3a894 <__udivdi3+0x2f8>
   3ab3c:	2008943a 	slli	r4,r4,16
   3ab40:	9420983a 	sll	r16,r18,r16
   3ab44:	e73fffcc 	andi	fp,fp,65535
   3ab48:	2709883a 	add	r4,r4,fp
   3ab4c:	813fbc2e 	bgeu	r16,r4,3aa40 <__udivdi3+0x4a4>
   3ab50:	a0bfffc4 	addi	r2,r20,-1
   3ab54:	0007883a 	mov	r3,zero
   3ab58:	003efb06 	br	3a748 <__udivdi3+0x1ac>
   3ab5c:	00c00604 	movi	r3,24
   3ab60:	180b883a 	mov	r5,r3
   3ab64:	003eeb06 	br	3a714 <__udivdi3+0x178>
   3ab68:	00c00204 	movi	r3,8
   3ab6c:	180b883a 	mov	r5,r3
   3ab70:	003ee806 	br	3a714 <__udivdi3+0x178>
   3ab74:	00800604 	movi	r2,24
   3ab78:	1007883a 	mov	r3,r2
   3ab7c:	003f0a06 	br	3a7a8 <__udivdi3+0x20c>
   3ab80:	00800604 	movi	r2,24
   3ab84:	1007883a 	mov	r3,r2
   3ab88:	003e9c06 	br	3a5fc <__udivdi3+0x60>
   3ab8c:	00800204 	movi	r2,8
   3ab90:	1007883a 	mov	r3,r2
   3ab94:	003e9906 	br	3a5fc <__udivdi3+0x60>
   3ab98:	00800204 	movi	r2,8
   3ab9c:	1007883a 	mov	r3,r2
   3aba0:	003f0106 	br	3a7a8 <__udivdi3+0x20c>
   3aba4:	18bf842e 	bgeu	r3,r2,3a9b8 <__udivdi3+0x41c>
   3aba8:	a53fff84 	addi	r20,r20,-2
   3abac:	1cc7883a 	add	r3,r3,r19
   3abb0:	003f8206 	br	3a9bc <__udivdi3+0x420>
   3abb4:	393f6b2e 	bgeu	r7,r4,3a964 <__udivdi3+0x3c8>
   3abb8:	bdffff84 	addi	r23,r23,-2
   3abbc:	3ccf883a 	add	r7,r7,r19
   3abc0:	003f6906 	br	3a968 <__udivdi3+0x3cc>
   3abc4:	1825883a 	mov	r18,r3
   3abc8:	003fd406 	br	3ab1c <__udivdi3+0x580>
   3abcc:	102f883a 	mov	r23,r2
   3abd0:	003fbc06 	br	3aac4 <__udivdi3+0x528>
   3abd4:	94bfff84 	addi	r18,r18,-2
   3abd8:	340d883a 	add	r6,r6,r16
   3abdc:	003f1606 	br	3a838 <__udivdi3+0x29c>
   3abe0:	94bfff84 	addi	r18,r18,-2
   3abe4:	1c07883a 	add	r3,r3,r16
   3abe8:	003ea906 	br	3a690 <__udivdi3+0xf4>

0003abec <__umoddi3>:
   3abec:	defff304 	addi	sp,sp,-52
   3abf0:	dd000715 	stw	r20,28(sp)
   3abf4:	dcc00615 	stw	r19,24(sp)
   3abf8:	dc800515 	stw	r18,20(sp)
   3abfc:	dc400415 	stw	r17,16(sp)
   3ac00:	dc000315 	stw	r16,12(sp)
   3ac04:	dfc00c15 	stw	ra,48(sp)
   3ac08:	df000b15 	stw	fp,44(sp)
   3ac0c:	ddc00a15 	stw	r23,40(sp)
   3ac10:	dd800915 	stw	r22,36(sp)
   3ac14:	dd400815 	stw	r21,32(sp)
   3ac18:	2025883a 	mov	r18,r4
   3ac1c:	2823883a 	mov	r17,r5
   3ac20:	3021883a 	mov	r16,r6
   3ac24:	2027883a 	mov	r19,r4
   3ac28:	2829883a 	mov	r20,r5
   3ac2c:	38003a1e 	bne	r7,zero,3ad18 <__umoddi3+0x12c>
   3ac30:	2980522e 	bgeu	r5,r6,3ad7c <__umoddi3+0x190>
   3ac34:	00bfffd4 	movui	r2,65535
   3ac38:	1180a436 	bltu	r2,r6,3aecc <__umoddi3+0x2e0>
   3ac3c:	00803fc4 	movi	r2,255
   3ac40:	11816036 	bltu	r2,r6,3b1c4 <__umoddi3+0x5d8>
   3ac44:	0005883a 	mov	r2,zero
   3ac48:	0009883a 	mov	r4,zero
   3ac4c:	3084d83a 	srl	r2,r6,r2
   3ac50:	00c00134 	movhi	r3,4
   3ac54:	18c38304 	addi	r3,r3,3596
   3ac58:	05400804 	movi	r21,32
   3ac5c:	1885883a 	add	r2,r3,r2
   3ac60:	10800003 	ldbu	r2,0(r2)
   3ac64:	1109883a 	add	r4,r2,r4
   3ac68:	a92bc83a 	sub	r21,r21,r4
   3ac6c:	a8010e26 	beq	r21,zero,3b0a8 <__umoddi3+0x4bc>
   3ac70:	8d62983a 	sll	r17,r17,r21
   3ac74:	9108d83a 	srl	r4,r18,r4
   3ac78:	3560983a 	sll	r16,r6,r21
   3ac7c:	9566983a 	sll	r19,r18,r21
   3ac80:	8928b03a 	or	r20,r17,r4
   3ac84:	8022d43a 	srli	r17,r16,16
   3ac88:	a009883a 	mov	r4,r20
   3ac8c:	84bfffcc 	andi	r18,r16,65535
   3ac90:	880b883a 	mov	r5,r17
   3ac94:	002c14c0 	call	2c14c <__umodsi3>
   3ac98:	a009883a 	mov	r4,r20
   3ac9c:	880b883a 	mov	r5,r17
   3aca0:	102d883a 	mov	r22,r2
   3aca4:	002c1440 	call	2c144 <__udivsi3>
   3aca8:	1009883a 	mov	r4,r2
   3acac:	900b883a 	mov	r5,r18
   3acb0:	002c1540 	call	2c154 <__mulsi3>
   3acb4:	1009883a 	mov	r4,r2
   3acb8:	b006943a 	slli	r3,r22,16
   3acbc:	9804d43a 	srli	r2,r19,16
   3acc0:	1886b03a 	or	r3,r3,r2
   3acc4:	1900042e 	bgeu	r3,r4,3acd8 <__umoddi3+0xec>
   3acc8:	1c07883a 	add	r3,r3,r16
   3accc:	1c000236 	bltu	r3,r16,3acd8 <__umoddi3+0xec>
   3acd0:	1900012e 	bgeu	r3,r4,3acd8 <__umoddi3+0xec>
   3acd4:	1c07883a 	add	r3,r3,r16
   3acd8:	1929c83a 	sub	r20,r3,r4
   3acdc:	a009883a 	mov	r4,r20
   3ace0:	880b883a 	mov	r5,r17
   3ace4:	002c14c0 	call	2c14c <__umodsi3>
   3ace8:	102d883a 	mov	r22,r2
   3acec:	a009883a 	mov	r4,r20
   3acf0:	880b883a 	mov	r5,r17
   3acf4:	b02c943a 	slli	r22,r22,16
   3acf8:	002c1440 	call	2c144 <__udivsi3>
   3acfc:	1009883a 	mov	r4,r2
   3ad00:	900b883a 	mov	r5,r18
   3ad04:	9cffffcc 	andi	r19,r19,65535
   3ad08:	002c1540 	call	2c154 <__mulsi3>
   3ad0c:	b4e6b03a 	or	r19,r22,r19
   3ad10:	9880572e 	bgeu	r19,r2,3ae70 <__umoddi3+0x284>
   3ad14:	00005206 	br	3ae60 <__umoddi3+0x274>
   3ad18:	29c05936 	bltu	r5,r7,3ae80 <__umoddi3+0x294>
   3ad1c:	00bfffd4 	movui	r2,65535
   3ad20:	11c0652e 	bgeu	r2,r7,3aeb8 <__umoddi3+0x2cc>
   3ad24:	00804034 	movhi	r2,256
   3ad28:	10bfffc4 	addi	r2,r2,-1
   3ad2c:	11c11936 	bltu	r2,r7,3b194 <__umoddi3+0x5a8>
   3ad30:	00c00404 	movi	r3,16
   3ad34:	1827883a 	mov	r19,r3
   3ad38:	38c6d83a 	srl	r3,r7,r3
   3ad3c:	01000134 	movhi	r4,4
   3ad40:	21038304 	addi	r4,r4,3596
   3ad44:	04000804 	movi	r16,32
   3ad48:	20c7883a 	add	r3,r4,r3
   3ad4c:	18800003 	ldbu	r2,0(r3)
   3ad50:	14e7883a 	add	r19,r2,r19
   3ad54:	84e1c83a 	sub	r16,r16,r19
   3ad58:	8000671e 	bne	r16,zero,3aef8 <__umoddi3+0x30c>
   3ad5c:	3c400136 	bltu	r7,r17,3ad64 <__umoddi3+0x178>
   3ad60:	91812536 	bltu	r18,r6,3b1f8 <__umoddi3+0x60c>
   3ad64:	9185c83a 	sub	r2,r18,r6
   3ad68:	89e3c83a 	sub	r17,r17,r7
   3ad6c:	90a5803a 	cmpltu	r18,r18,r2
   3ad70:	8ca9c83a 	sub	r20,r17,r18
   3ad74:	a007883a 	mov	r3,r20
   3ad78:	00004306 	br	3ae88 <__umoddi3+0x29c>
   3ad7c:	3000041e 	bne	r6,zero,3ad90 <__umoddi3+0x1a4>
   3ad80:	01000044 	movi	r4,1
   3ad84:	000b883a 	mov	r5,zero
   3ad88:	002c1440 	call	2c144 <__udivsi3>
   3ad8c:	1021883a 	mov	r16,r2
   3ad90:	00bfffd4 	movui	r2,65535
   3ad94:	1400532e 	bgeu	r2,r16,3aee4 <__umoddi3+0x2f8>
   3ad98:	00804034 	movhi	r2,256
   3ad9c:	10bfffc4 	addi	r2,r2,-1
   3ada0:	14010536 	bltu	r2,r16,3b1b8 <__umoddi3+0x5cc>
   3ada4:	00800404 	movi	r2,16
   3ada8:	1007883a 	mov	r3,r2
   3adac:	8084d83a 	srl	r2,r16,r2
   3adb0:	01000134 	movhi	r4,4
   3adb4:	21038304 	addi	r4,r4,3596
   3adb8:	05400804 	movi	r21,32
   3adbc:	2085883a 	add	r2,r4,r2
   3adc0:	10800003 	ldbu	r2,0(r2)
   3adc4:	10c7883a 	add	r3,r2,r3
   3adc8:	a8ebc83a 	sub	r21,r21,r3
   3adcc:	a800b81e 	bne	r21,zero,3b0b0 <__umoddi3+0x4c4>
   3add0:	8028d43a 	srli	r20,r16,16
   3add4:	8c23c83a 	sub	r17,r17,r16
   3add8:	85bfffcc 	andi	r22,r16,65535
   3addc:	8809883a 	mov	r4,r17
   3ade0:	a00b883a 	mov	r5,r20
   3ade4:	002c14c0 	call	2c14c <__umodsi3>
   3ade8:	8809883a 	mov	r4,r17
   3adec:	a00b883a 	mov	r5,r20
   3adf0:	1025883a 	mov	r18,r2
   3adf4:	002c1440 	call	2c144 <__udivsi3>
   3adf8:	1009883a 	mov	r4,r2
   3adfc:	b00b883a 	mov	r5,r22
   3ae00:	002c1540 	call	2c154 <__mulsi3>
   3ae04:	1009883a 	mov	r4,r2
   3ae08:	9006943a 	slli	r3,r18,16
   3ae0c:	9804d43a 	srli	r2,r19,16
   3ae10:	1886b03a 	or	r3,r3,r2
   3ae14:	1900032e 	bgeu	r3,r4,3ae24 <__umoddi3+0x238>
   3ae18:	1c07883a 	add	r3,r3,r16
   3ae1c:	1c000136 	bltu	r3,r16,3ae24 <__umoddi3+0x238>
   3ae20:	1900f336 	bltu	r3,r4,3b1f0 <__umoddi3+0x604>
   3ae24:	1923c83a 	sub	r17,r3,r4
   3ae28:	8809883a 	mov	r4,r17
   3ae2c:	a00b883a 	mov	r5,r20
   3ae30:	002c14c0 	call	2c14c <__umodsi3>
   3ae34:	102f883a 	mov	r23,r2
   3ae38:	8809883a 	mov	r4,r17
   3ae3c:	a00b883a 	mov	r5,r20
   3ae40:	b82e943a 	slli	r23,r23,16
   3ae44:	002c1440 	call	2c144 <__udivsi3>
   3ae48:	1009883a 	mov	r4,r2
   3ae4c:	b00b883a 	mov	r5,r22
   3ae50:	9cffffcc 	andi	r19,r19,65535
   3ae54:	002c1540 	call	2c154 <__mulsi3>
   3ae58:	bce6b03a 	or	r19,r23,r19
   3ae5c:	9880042e 	bgeu	r19,r2,3ae70 <__umoddi3+0x284>
   3ae60:	9c27883a 	add	r19,r19,r16
   3ae64:	9c000236 	bltu	r19,r16,3ae70 <__umoddi3+0x284>
   3ae68:	9880012e 	bgeu	r19,r2,3ae70 <__umoddi3+0x284>
   3ae6c:	9c27883a 	add	r19,r19,r16
   3ae70:	9885c83a 	sub	r2,r19,r2
   3ae74:	1544d83a 	srl	r2,r2,r21
   3ae78:	0007883a 	mov	r3,zero
   3ae7c:	00000206 	br	3ae88 <__umoddi3+0x29c>
   3ae80:	2005883a 	mov	r2,r4
   3ae84:	2807883a 	mov	r3,r5
   3ae88:	dfc00c17 	ldw	ra,48(sp)
   3ae8c:	df000b17 	ldw	fp,44(sp)
   3ae90:	ddc00a17 	ldw	r23,40(sp)
   3ae94:	dd800917 	ldw	r22,36(sp)
   3ae98:	dd400817 	ldw	r21,32(sp)
   3ae9c:	dd000717 	ldw	r20,28(sp)
   3aea0:	dcc00617 	ldw	r19,24(sp)
   3aea4:	dc800517 	ldw	r18,20(sp)
   3aea8:	dc400417 	ldw	r17,16(sp)
   3aeac:	dc000317 	ldw	r16,12(sp)
   3aeb0:	dec00d04 	addi	sp,sp,52
   3aeb4:	f800283a 	ret
   3aeb8:	00803fc4 	movi	r2,255
   3aebc:	11c0b236 	bltu	r2,r7,3b188 <__umoddi3+0x59c>
   3aec0:	0007883a 	mov	r3,zero
   3aec4:	0027883a 	mov	r19,zero
   3aec8:	003f9b06 	br	3ad38 <__umoddi3+0x14c>
   3aecc:	00804034 	movhi	r2,256
   3aed0:	10bfffc4 	addi	r2,r2,-1
   3aed4:	1180b236 	bltu	r2,r6,3b1a0 <__umoddi3+0x5b4>
   3aed8:	00800404 	movi	r2,16
   3aedc:	1009883a 	mov	r4,r2
   3aee0:	003f5a06 	br	3ac4c <__umoddi3+0x60>
   3aee4:	00803fc4 	movi	r2,255
   3aee8:	1400b036 	bltu	r2,r16,3b1ac <__umoddi3+0x5c0>
   3aeec:	0005883a 	mov	r2,zero
   3aef0:	0007883a 	mov	r3,zero
   3aef4:	003fad06 	br	3adac <__umoddi3+0x1c0>
   3aef8:	34c4d83a 	srl	r2,r6,r19
   3aefc:	3c0e983a 	sll	r7,r7,r16
   3af00:	8cf8d83a 	srl	fp,r17,r19
   3af04:	8c22983a 	sll	r17,r17,r16
   3af08:	38a8b03a 	or	r20,r7,r2
   3af0c:	a02ad43a 	srli	r21,r20,16
   3af10:	94c4d83a 	srl	r2,r18,r19
   3af14:	e009883a 	mov	r4,fp
   3af18:	a80b883a 	mov	r5,r21
   3af1c:	342c983a 	sll	r22,r6,r16
   3af20:	88a2b03a 	or	r17,r17,r2
   3af24:	002c14c0 	call	2c14c <__umodsi3>
   3af28:	e009883a 	mov	r4,fp
   3af2c:	a80b883a 	mov	r5,r21
   3af30:	a5ffffcc 	andi	r23,r20,65535
   3af34:	d8800215 	stw	r2,8(sp)
   3af38:	002c1440 	call	2c144 <__udivsi3>
   3af3c:	1009883a 	mov	r4,r2
   3af40:	b80b883a 	mov	r5,r23
   3af44:	1039883a 	mov	fp,r2
   3af48:	002c1540 	call	2c154 <__mulsi3>
   3af4c:	d8c00217 	ldw	r3,8(sp)
   3af50:	1009883a 	mov	r4,r2
   3af54:	8804d43a 	srli	r2,r17,16
   3af58:	1806943a 	slli	r3,r3,16
   3af5c:	9424983a 	sll	r18,r18,r16
   3af60:	1886b03a 	or	r3,r3,r2
   3af64:	1900042e 	bgeu	r3,r4,3af78 <__umoddi3+0x38c>
   3af68:	1d07883a 	add	r3,r3,r20
   3af6c:	e0bfffc4 	addi	r2,fp,-1
   3af70:	1d009b2e 	bgeu	r3,r20,3b1e0 <__umoddi3+0x5f4>
   3af74:	1039883a 	mov	fp,r2
   3af78:	1907c83a 	sub	r3,r3,r4
   3af7c:	1809883a 	mov	r4,r3
   3af80:	a80b883a 	mov	r5,r21
   3af84:	d8c00215 	stw	r3,8(sp)
   3af88:	002c14c0 	call	2c14c <__umodsi3>
   3af8c:	d8c00217 	ldw	r3,8(sp)
   3af90:	a80b883a 	mov	r5,r21
   3af94:	d8800015 	stw	r2,0(sp)
   3af98:	1809883a 	mov	r4,r3
   3af9c:	002c1440 	call	2c144 <__udivsi3>
   3afa0:	1009883a 	mov	r4,r2
   3afa4:	b80b883a 	mov	r5,r23
   3afa8:	102b883a 	mov	r21,r2
   3afac:	002c1540 	call	2c154 <__mulsi3>
   3afb0:	d9c00017 	ldw	r7,0(sp)
   3afb4:	8c7fffcc 	andi	r17,r17,65535
   3afb8:	380e943a 	slli	r7,r7,16
   3afbc:	3c4eb03a 	or	r7,r7,r17
   3afc0:	3880042e 	bgeu	r7,r2,3afd4 <__umoddi3+0x3e8>
   3afc4:	3d0f883a 	add	r7,r7,r20
   3afc8:	a8ffffc4 	addi	r3,r21,-1
   3afcc:	3d00802e 	bgeu	r7,r20,3b1d0 <__umoddi3+0x5e4>
   3afd0:	182b883a 	mov	r21,r3
   3afd4:	e038943a 	slli	fp,fp,16
   3afd8:	b010d43a 	srli	r8,r22,16
   3afdc:	b1bfffcc 	andi	r6,r22,65535
   3afe0:	af2ab03a 	or	r21,r21,fp
   3afe4:	a82ed43a 	srli	r23,r21,16
   3afe8:	ad7fffcc 	andi	r21,r21,65535
   3afec:	300b883a 	mov	r5,r6
   3aff0:	a809883a 	mov	r4,r21
   3aff4:	38a3c83a 	sub	r17,r7,r2
   3aff8:	d9800115 	stw	r6,4(sp)
   3affc:	da000015 	stw	r8,0(sp)
   3b000:	002c1540 	call	2c154 <__mulsi3>
   3b004:	da000017 	ldw	r8,0(sp)
   3b008:	a809883a 	mov	r4,r21
   3b00c:	1039883a 	mov	fp,r2
   3b010:	400b883a 	mov	r5,r8
   3b014:	da000215 	stw	r8,8(sp)
   3b018:	002c1540 	call	2c154 <__mulsi3>
   3b01c:	d9800117 	ldw	r6,4(sp)
   3b020:	b809883a 	mov	r4,r23
   3b024:	d8800015 	stw	r2,0(sp)
   3b028:	300b883a 	mov	r5,r6
   3b02c:	002c1540 	call	2c154 <__mulsi3>
   3b030:	d8c00217 	ldw	r3,8(sp)
   3b034:	b809883a 	mov	r4,r23
   3b038:	102b883a 	mov	r21,r2
   3b03c:	180b883a 	mov	r5,r3
   3b040:	002c1540 	call	2c154 <__mulsi3>
   3b044:	d9c00017 	ldw	r7,0(sp)
   3b048:	1007883a 	mov	r3,r2
   3b04c:	e004d43a 	srli	r2,fp,16
   3b050:	a9c9883a 	add	r4,r21,r7
   3b054:	2089883a 	add	r4,r4,r2
   3b058:	2540022e 	bgeu	r4,r21,3b064 <__umoddi3+0x478>
   3b05c:	00800074 	movhi	r2,1
   3b060:	1887883a 	add	r3,r3,r2
   3b064:	2004d43a 	srli	r2,r4,16
   3b068:	2008943a 	slli	r4,r4,16
   3b06c:	e73fffcc 	andi	fp,fp,65535
   3b070:	1887883a 	add	r3,r3,r2
   3b074:	2709883a 	add	r4,r4,fp
   3b078:	88c03d36 	bltu	r17,r3,3b170 <__umoddi3+0x584>
   3b07c:	88c06126 	beq	r17,r3,3b204 <__umoddi3+0x618>
   3b080:	88c7c83a 	sub	r3,r17,r3
   3b084:	202d883a 	mov	r22,r4
   3b088:	95adc83a 	sub	r22,r18,r22
   3b08c:	95a5803a 	cmpltu	r18,r18,r22
   3b090:	1c87c83a 	sub	r3,r3,r18
   3b094:	1cc4983a 	sll	r2,r3,r19
   3b098:	b42cd83a 	srl	r22,r22,r16
   3b09c:	1c06d83a 	srl	r3,r3,r16
   3b0a0:	1584b03a 	or	r2,r2,r22
   3b0a4:	003f7806 	br	3ae88 <__umoddi3+0x29c>
   3b0a8:	002b883a 	mov	r21,zero
   3b0ac:	003ef506 	br	3ac84 <__umoddi3+0x98>
   3b0b0:	8560983a 	sll	r16,r16,r21
   3b0b4:	88e6d83a 	srl	r19,r17,r3
   3b0b8:	90c6d83a 	srl	r3,r18,r3
   3b0bc:	8028d43a 	srli	r20,r16,16
   3b0c0:	8d62983a 	sll	r17,r17,r21
   3b0c4:	9809883a 	mov	r4,r19
   3b0c8:	a00b883a 	mov	r5,r20
   3b0cc:	88eeb03a 	or	r23,r17,r3
   3b0d0:	002c14c0 	call	2c14c <__umodsi3>
   3b0d4:	9809883a 	mov	r4,r19
   3b0d8:	a00b883a 	mov	r5,r20
   3b0dc:	1023883a 	mov	r17,r2
   3b0e0:	85bfffcc 	andi	r22,r16,65535
   3b0e4:	002c1440 	call	2c144 <__udivsi3>
   3b0e8:	1009883a 	mov	r4,r2
   3b0ec:	b00b883a 	mov	r5,r22
   3b0f0:	002c1540 	call	2c154 <__mulsi3>
   3b0f4:	1007883a 	mov	r3,r2
   3b0f8:	8808943a 	slli	r4,r17,16
   3b0fc:	b804d43a 	srli	r2,r23,16
   3b100:	9566983a 	sll	r19,r18,r21
   3b104:	2088b03a 	or	r4,r4,r2
   3b108:	20c0042e 	bgeu	r4,r3,3b11c <__umoddi3+0x530>
   3b10c:	2409883a 	add	r4,r4,r16
   3b110:	24000236 	bltu	r4,r16,3b11c <__umoddi3+0x530>
   3b114:	20c0012e 	bgeu	r4,r3,3b11c <__umoddi3+0x530>
   3b118:	2409883a 	add	r4,r4,r16
   3b11c:	20e5c83a 	sub	r18,r4,r3
   3b120:	9009883a 	mov	r4,r18
   3b124:	a00b883a 	mov	r5,r20
   3b128:	002c14c0 	call	2c14c <__umodsi3>
   3b12c:	1023883a 	mov	r17,r2
   3b130:	9009883a 	mov	r4,r18
   3b134:	a00b883a 	mov	r5,r20
   3b138:	8822943a 	slli	r17,r17,16
   3b13c:	002c1440 	call	2c144 <__udivsi3>
   3b140:	1009883a 	mov	r4,r2
   3b144:	b00b883a 	mov	r5,r22
   3b148:	bdffffcc 	andi	r23,r23,65535
   3b14c:	002c1540 	call	2c154 <__mulsi3>
   3b150:	8de2b03a 	or	r17,r17,r23
   3b154:	8880042e 	bgeu	r17,r2,3b168 <__umoddi3+0x57c>
   3b158:	8c23883a 	add	r17,r17,r16
   3b15c:	8c000236 	bltu	r17,r16,3b168 <__umoddi3+0x57c>
   3b160:	8880012e 	bgeu	r17,r2,3b168 <__umoddi3+0x57c>
   3b164:	8c23883a 	add	r17,r17,r16
   3b168:	88a3c83a 	sub	r17,r17,r2
   3b16c:	003f1b06 	br	3addc <__umoddi3+0x1f0>
   3b170:	25adc83a 	sub	r22,r4,r22
   3b174:	1d07c83a 	sub	r3,r3,r20
   3b178:	2589803a 	cmpltu	r4,r4,r22
   3b17c:	1907c83a 	sub	r3,r3,r4
   3b180:	88c7c83a 	sub	r3,r17,r3
   3b184:	003fc006 	br	3b088 <__umoddi3+0x49c>
   3b188:	00c00204 	movi	r3,8
   3b18c:	1827883a 	mov	r19,r3
   3b190:	003ee906 	br	3ad38 <__umoddi3+0x14c>
   3b194:	00c00604 	movi	r3,24
   3b198:	1827883a 	mov	r19,r3
   3b19c:	003ee606 	br	3ad38 <__umoddi3+0x14c>
   3b1a0:	00800604 	movi	r2,24
   3b1a4:	1009883a 	mov	r4,r2
   3b1a8:	003ea806 	br	3ac4c <__umoddi3+0x60>
   3b1ac:	00800204 	movi	r2,8
   3b1b0:	1007883a 	mov	r3,r2
   3b1b4:	003efd06 	br	3adac <__umoddi3+0x1c0>
   3b1b8:	00800604 	movi	r2,24
   3b1bc:	1007883a 	mov	r3,r2
   3b1c0:	003efa06 	br	3adac <__umoddi3+0x1c0>
   3b1c4:	00800204 	movi	r2,8
   3b1c8:	1009883a 	mov	r4,r2
   3b1cc:	003e9f06 	br	3ac4c <__umoddi3+0x60>
   3b1d0:	38bf7f2e 	bgeu	r7,r2,3afd0 <__umoddi3+0x3e4>
   3b1d4:	ad7fff84 	addi	r21,r21,-2
   3b1d8:	3d0f883a 	add	r7,r7,r20
   3b1dc:	003f7d06 	br	3afd4 <__umoddi3+0x3e8>
   3b1e0:	193f642e 	bgeu	r3,r4,3af74 <__umoddi3+0x388>
   3b1e4:	e73fff84 	addi	fp,fp,-2
   3b1e8:	1d07883a 	add	r3,r3,r20
   3b1ec:	003f6206 	br	3af78 <__umoddi3+0x38c>
   3b1f0:	1c07883a 	add	r3,r3,r16
   3b1f4:	003f0b06 	br	3ae24 <__umoddi3+0x238>
   3b1f8:	9005883a 	mov	r2,r18
   3b1fc:	a007883a 	mov	r3,r20
   3b200:	003f2106 	br	3ae88 <__umoddi3+0x29c>
   3b204:	913fda36 	bltu	r18,r4,3b170 <__umoddi3+0x584>
   3b208:	202d883a 	mov	r22,r4
   3b20c:	0007883a 	mov	r3,zero
   3b210:	003f9d06 	br	3b088 <__umoddi3+0x49c>

0003b214 <__eqsf2>:
   3b214:	defff504 	addi	sp,sp,-44
   3b218:	d9000915 	stw	r4,36(sp)
   3b21c:	d9400815 	stw	r5,32(sp)
   3b220:	d9000904 	addi	r4,sp,36
   3b224:	d9400404 	addi	r5,sp,16
   3b228:	dfc00a15 	stw	ra,40(sp)
   3b22c:	002c4640 	call	2c464 <__unpack_f>
   3b230:	d9000804 	addi	r4,sp,32
   3b234:	d80b883a 	mov	r5,sp
   3b238:	002c4640 	call	2c464 <__unpack_f>
   3b23c:	d8c00417 	ldw	r3,16(sp)
   3b240:	00800044 	movi	r2,1
   3b244:	10c0052e 	bgeu	r2,r3,3b25c <__eqsf2+0x48>
   3b248:	d8c00017 	ldw	r3,0(sp)
   3b24c:	10c0032e 	bgeu	r2,r3,3b25c <__eqsf2+0x48>
   3b250:	d9000404 	addi	r4,sp,16
   3b254:	d80b883a 	mov	r5,sp
   3b258:	003bb000 	call	3bb00 <__fpcmp_parts_f>
   3b25c:	dfc00a17 	ldw	ra,40(sp)
   3b260:	dec00b04 	addi	sp,sp,44
   3b264:	f800283a 	ret

0003b268 <__gtsf2>:
   3b268:	defff504 	addi	sp,sp,-44
   3b26c:	d9000915 	stw	r4,36(sp)
   3b270:	d9400815 	stw	r5,32(sp)
   3b274:	d9000904 	addi	r4,sp,36
   3b278:	d9400404 	addi	r5,sp,16
   3b27c:	dfc00a15 	stw	ra,40(sp)
   3b280:	002c4640 	call	2c464 <__unpack_f>
   3b284:	d9000804 	addi	r4,sp,32
   3b288:	d80b883a 	mov	r5,sp
   3b28c:	002c4640 	call	2c464 <__unpack_f>
   3b290:	d8c00417 	ldw	r3,16(sp)
   3b294:	00800044 	movi	r2,1
   3b298:	10c0082e 	bgeu	r2,r3,3b2bc <__gtsf2+0x54>
   3b29c:	d8c00017 	ldw	r3,0(sp)
   3b2a0:	10c0062e 	bgeu	r2,r3,3b2bc <__gtsf2+0x54>
   3b2a4:	d9000404 	addi	r4,sp,16
   3b2a8:	d80b883a 	mov	r5,sp
   3b2ac:	003bb000 	call	3bb00 <__fpcmp_parts_f>
   3b2b0:	dfc00a17 	ldw	ra,40(sp)
   3b2b4:	dec00b04 	addi	sp,sp,44
   3b2b8:	f800283a 	ret
   3b2bc:	00bfffc4 	movi	r2,-1
   3b2c0:	003ffb06 	br	3b2b0 <__gtsf2+0x48>

0003b2c4 <__ltsf2>:
   3b2c4:	defff504 	addi	sp,sp,-44
   3b2c8:	d9000915 	stw	r4,36(sp)
   3b2cc:	d9400815 	stw	r5,32(sp)
   3b2d0:	d9000904 	addi	r4,sp,36
   3b2d4:	d9400404 	addi	r5,sp,16
   3b2d8:	dfc00a15 	stw	ra,40(sp)
   3b2dc:	002c4640 	call	2c464 <__unpack_f>
   3b2e0:	d9000804 	addi	r4,sp,32
   3b2e4:	d80b883a 	mov	r5,sp
   3b2e8:	002c4640 	call	2c464 <__unpack_f>
   3b2ec:	d8c00417 	ldw	r3,16(sp)
   3b2f0:	00800044 	movi	r2,1
   3b2f4:	10c0052e 	bgeu	r2,r3,3b30c <__ltsf2+0x48>
   3b2f8:	d8c00017 	ldw	r3,0(sp)
   3b2fc:	10c0032e 	bgeu	r2,r3,3b30c <__ltsf2+0x48>
   3b300:	d9000404 	addi	r4,sp,16
   3b304:	d80b883a 	mov	r5,sp
   3b308:	003bb000 	call	3bb00 <__fpcmp_parts_f>
   3b30c:	dfc00a17 	ldw	ra,40(sp)
   3b310:	dec00b04 	addi	sp,sp,44
   3b314:	f800283a 	ret

0003b318 <_fpadd_parts>:
   3b318:	2005883a 	mov	r2,r4
   3b31c:	21000017 	ldw	r4,0(r4)
   3b320:	01c00044 	movi	r7,1
   3b324:	3900622e 	bgeu	r7,r4,3b4b0 <_fpadd_parts+0x198>
   3b328:	28c00017 	ldw	r3,0(r5)
   3b32c:	38c05f2e 	bgeu	r7,r3,3b4ac <_fpadd_parts+0x194>
   3b330:	01c00104 	movi	r7,4
   3b334:	21c0c626 	beq	r4,r7,3b650 <_fpadd_parts+0x338>
   3b338:	19c05c26 	beq	r3,r7,3b4ac <_fpadd_parts+0x194>
   3b33c:	01c00084 	movi	r7,2
   3b340:	19c06b26 	beq	r3,r7,3b4f0 <_fpadd_parts+0x1d8>
   3b344:	21c05926 	beq	r4,r7,3b4ac <_fpadd_parts+0x194>
   3b348:	11c00217 	ldw	r7,8(r2)
   3b34c:	2ac00217 	ldw	r11,8(r5)
   3b350:	13000317 	ldw	r12,12(r2)
   3b354:	13400417 	ldw	r13,16(r2)
   3b358:	3ac9c83a 	sub	r4,r7,r11
   3b35c:	2a000317 	ldw	r8,12(r5)
   3b360:	2a400417 	ldw	r9,16(r5)
   3b364:	2015883a 	mov	r10,r4
   3b368:	20007516 	blt	r4,zero,3b540 <_fpadd_parts+0x228>
   3b36c:	00c00fc4 	movi	r3,63
   3b370:	1a805016 	blt	r3,r10,3b4b4 <_fpadd_parts+0x19c>
   3b374:	0100870e 	bge	zero,r4,3b594 <_fpadd_parts+0x27c>
   3b378:	50fff804 	addi	r3,r10,-32
   3b37c:	18009916 	blt	r3,zero,3b5e4 <_fpadd_parts+0x2cc>
   3b380:	48d6d83a 	srl	r11,r9,r3
   3b384:	001d883a 	mov	r14,zero
   3b388:	18009e16 	blt	r3,zero,3b604 <_fpadd_parts+0x2ec>
   3b38c:	01000044 	movi	r4,1
   3b390:	20c6983a 	sll	r3,r4,r3
   3b394:	0015883a 	mov	r10,zero
   3b398:	513fffc4 	addi	r4,r10,-1
   3b39c:	2295403a 	cmpgeu	r10,r4,r10
   3b3a0:	1a87c83a 	sub	r3,r3,r10
   3b3a4:	1a52703a 	and	r9,r3,r9
   3b3a8:	2210703a 	and	r8,r4,r8
   3b3ac:	4250b03a 	or	r8,r8,r9
   3b3b0:	4010c03a 	cmpne	r8,r8,zero
   3b3b4:	42d0b03a 	or	r8,r8,r11
   3b3b8:	7013883a 	mov	r9,r14
   3b3bc:	11000117 	ldw	r4,4(r2)
   3b3c0:	28800117 	ldw	r2,4(r5)
   3b3c4:	20804126 	beq	r4,r2,3b4cc <_fpadd_parts+0x1b4>
   3b3c8:	20006326 	beq	r4,zero,3b558 <_fpadd_parts+0x240>
   3b3cc:	4305c83a 	sub	r2,r8,r12
   3b3d0:	4091803a 	cmpltu	r8,r8,r2
   3b3d4:	4b47c83a 	sub	r3,r9,r13
   3b3d8:	1a07c83a 	sub	r3,r3,r8
   3b3dc:	18006316 	blt	r3,zero,3b56c <_fpadd_parts+0x254>
   3b3e0:	30000115 	stw	zero,4(r6)
   3b3e4:	31c00215 	stw	r7,8(r6)
   3b3e8:	30800315 	stw	r2,12(r6)
   3b3ec:	30c00415 	stw	r3,16(r6)
   3b3f0:	11ffffc4 	addi	r7,r2,-1
   3b3f4:	388b403a 	cmpgeu	r5,r7,r2
   3b3f8:	194bc83a 	sub	r5,r3,r5
   3b3fc:	01040034 	movhi	r4,4096
   3b400:	213fffc4 	addi	r4,r4,-1
   3b404:	21401736 	bltu	r4,r5,3b464 <_fpadd_parts+0x14c>
   3b408:	29008226 	beq	r5,r4,3b614 <_fpadd_parts+0x2fc>
   3b40c:	31400217 	ldw	r5,8(r6)
   3b410:	02840034 	movhi	r10,4096
   3b414:	52bfffc4 	addi	r10,r10,-1
   3b418:	033fff84 	movi	r12,-2
   3b41c:	297fffc4 	addi	r5,r5,-1
   3b420:	00000106 	br	3b428 <_fpadd_parts+0x110>
   3b424:	3a804a26 	beq	r7,r10,3b550 <_fpadd_parts+0x238>
   3b428:	1089883a 	add	r4,r2,r2
   3b42c:	2091803a 	cmpltu	r8,r4,r2
   3b430:	18c7883a 	add	r3,r3,r3
   3b434:	227fffc4 	addi	r9,r4,-1
   3b438:	40d1883a 	add	r8,r8,r3
   3b43c:	490f403a 	cmpgeu	r7,r9,r4
   3b440:	41cfc83a 	sub	r7,r8,r7
   3b444:	2817883a 	mov	r11,r5
   3b448:	2005883a 	mov	r2,r4
   3b44c:	4007883a 	mov	r3,r8
   3b450:	297fffc4 	addi	r5,r5,-1
   3b454:	51fff32e 	bgeu	r10,r7,3b424 <_fpadd_parts+0x10c>
   3b458:	31000315 	stw	r4,12(r6)
   3b45c:	32000415 	stw	r8,16(r6)
   3b460:	32c00215 	stw	r11,8(r6)
   3b464:	010000c4 	movi	r4,3
   3b468:	31000015 	stw	r4,0(r6)
   3b46c:	01080034 	movhi	r4,8192
   3b470:	213fffc4 	addi	r4,r4,-1
   3b474:	20c00b2e 	bgeu	r4,r3,3b4a4 <_fpadd_parts+0x18c>
   3b478:	180e97fa 	slli	r7,r3,31
   3b47c:	1008d07a 	srli	r4,r2,1
   3b480:	31400217 	ldw	r5,8(r6)
   3b484:	1806d07a 	srli	r3,r3,1
   3b488:	1080004c 	andi	r2,r2,1
   3b48c:	3908b03a 	or	r4,r7,r4
   3b490:	1108b03a 	or	r4,r2,r4
   3b494:	29400044 	addi	r5,r5,1
   3b498:	31000315 	stw	r4,12(r6)
   3b49c:	30c00415 	stw	r3,16(r6)
   3b4a0:	31400215 	stw	r5,8(r6)
   3b4a4:	3005883a 	mov	r2,r6
   3b4a8:	f800283a 	ret
   3b4ac:	2805883a 	mov	r2,r5
   3b4b0:	f800283a 	ret
   3b4b4:	59c01e0e 	bge	r11,r7,3b530 <_fpadd_parts+0x218>
   3b4b8:	11000117 	ldw	r4,4(r2)
   3b4bc:	28800117 	ldw	r2,4(r5)
   3b4c0:	0011883a 	mov	r8,zero
   3b4c4:	0013883a 	mov	r9,zero
   3b4c8:	20bfbf1e 	bne	r4,r2,3b3c8 <_fpadd_parts+0xb0>
   3b4cc:	4305883a 	add	r2,r8,r12
   3b4d0:	1207803a 	cmpltu	r3,r2,r8
   3b4d4:	4b53883a 	add	r9,r9,r13
   3b4d8:	1a47883a 	add	r3,r3,r9
   3b4dc:	31000115 	stw	r4,4(r6)
   3b4e0:	31c00215 	stw	r7,8(r6)
   3b4e4:	30800315 	stw	r2,12(r6)
   3b4e8:	30c00415 	stw	r3,16(r6)
   3b4ec:	003fdd06 	br	3b464 <_fpadd_parts+0x14c>
   3b4f0:	20ffef1e 	bne	r4,r3,3b4b0 <_fpadd_parts+0x198>
   3b4f4:	31000015 	stw	r4,0(r6)
   3b4f8:	10c00117 	ldw	r3,4(r2)
   3b4fc:	30c00115 	stw	r3,4(r6)
   3b500:	10c00217 	ldw	r3,8(r2)
   3b504:	11000117 	ldw	r4,4(r2)
   3b508:	29400117 	ldw	r5,4(r5)
   3b50c:	30c00215 	stw	r3,8(r6)
   3b510:	10c00317 	ldw	r3,12(r2)
   3b514:	2908703a 	and	r4,r5,r4
   3b518:	30c00315 	stw	r3,12(r6)
   3b51c:	10c00417 	ldw	r3,16(r2)
   3b520:	31000115 	stw	r4,4(r6)
   3b524:	3005883a 	mov	r2,r6
   3b528:	30c00415 	stw	r3,16(r6)
   3b52c:	f800283a 	ret
   3b530:	580f883a 	mov	r7,r11
   3b534:	0019883a 	mov	r12,zero
   3b538:	001b883a 	mov	r13,zero
   3b53c:	003f9f06 	br	3b3bc <_fpadd_parts+0xa4>
   3b540:	0115c83a 	sub	r10,zero,r4
   3b544:	00c00fc4 	movi	r3,63
   3b548:	1abfda16 	blt	r3,r10,3b4b4 <_fpadd_parts+0x19c>
   3b54c:	003f8906 	br	3b374 <_fpadd_parts+0x5c>
   3b550:	627fb52e 	bgeu	r12,r9,3b428 <_fpadd_parts+0x110>
   3b554:	003fc006 	br	3b458 <_fpadd_parts+0x140>
   3b558:	6205c83a 	sub	r2,r12,r8
   3b55c:	6099803a 	cmpltu	r12,r12,r2
   3b560:	6a47c83a 	sub	r3,r13,r9
   3b564:	1b07c83a 	sub	r3,r3,r12
   3b568:	183f9d0e 	bge	r3,zero,3b3e0 <_fpadd_parts+0xc8>
   3b56c:	0085c83a 	sub	r2,zero,r2
   3b570:	1008c03a 	cmpne	r4,r2,zero
   3b574:	00c7c83a 	sub	r3,zero,r3
   3b578:	1907c83a 	sub	r3,r3,r4
   3b57c:	01000044 	movi	r4,1
   3b580:	31000115 	stw	r4,4(r6)
   3b584:	31c00215 	stw	r7,8(r6)
   3b588:	30800315 	stw	r2,12(r6)
   3b58c:	30c00415 	stw	r3,16(r6)
   3b590:	003f9706 	br	3b3f0 <_fpadd_parts+0xd8>
   3b594:	203f8926 	beq	r4,zero,3b3bc <_fpadd_parts+0xa4>
   3b598:	50fff804 	addi	r3,r10,-32
   3b59c:	3a8f883a 	add	r7,r7,r10
   3b5a0:	18002316 	blt	r3,zero,3b630 <_fpadd_parts+0x318>
   3b5a4:	68d6d83a 	srl	r11,r13,r3
   3b5a8:	001d883a 	mov	r14,zero
   3b5ac:	18001c16 	blt	r3,zero,3b620 <_fpadd_parts+0x308>
   3b5b0:	01000044 	movi	r4,1
   3b5b4:	20c6983a 	sll	r3,r4,r3
   3b5b8:	0015883a 	mov	r10,zero
   3b5bc:	513fffc4 	addi	r4,r10,-1
   3b5c0:	2295403a 	cmpgeu	r10,r4,r10
   3b5c4:	1a87c83a 	sub	r3,r3,r10
   3b5c8:	1b5a703a 	and	r13,r3,r13
   3b5cc:	2318703a 	and	r12,r4,r12
   3b5d0:	6358b03a 	or	r12,r12,r13
   3b5d4:	6018c03a 	cmpne	r12,r12,zero
   3b5d8:	62d8b03a 	or	r12,r12,r11
   3b5dc:	701b883a 	mov	r13,r14
   3b5e0:	003f7606 	br	3b3bc <_fpadd_parts+0xa4>
   3b5e4:	4808907a 	slli	r4,r9,1
   3b5e8:	02c007c4 	movi	r11,31
   3b5ec:	5a97c83a 	sub	r11,r11,r10
   3b5f0:	22c8983a 	sll	r4,r4,r11
   3b5f4:	4296d83a 	srl	r11,r8,r10
   3b5f8:	4a9cd83a 	srl	r14,r9,r10
   3b5fc:	22d6b03a 	or	r11,r4,r11
   3b600:	003f6106 	br	3b388 <_fpadd_parts+0x70>
   3b604:	00c00044 	movi	r3,1
   3b608:	1a94983a 	sll	r10,r3,r10
   3b60c:	0007883a 	mov	r3,zero
   3b610:	003f6106 	br	3b398 <_fpadd_parts+0x80>
   3b614:	013fff84 	movi	r4,-2
   3b618:	21ff7c2e 	bgeu	r4,r7,3b40c <_fpadd_parts+0xf4>
   3b61c:	003f9106 	br	3b464 <_fpadd_parts+0x14c>
   3b620:	00c00044 	movi	r3,1
   3b624:	1a94983a 	sll	r10,r3,r10
   3b628:	0007883a 	mov	r3,zero
   3b62c:	003fe306 	br	3b5bc <_fpadd_parts+0x2a4>
   3b630:	6816907a 	slli	r11,r13,1
   3b634:	010007c4 	movi	r4,31
   3b638:	2289c83a 	sub	r4,r4,r10
   3b63c:	5908983a 	sll	r4,r11,r4
   3b640:	6296d83a 	srl	r11,r12,r10
   3b644:	6a9cd83a 	srl	r14,r13,r10
   3b648:	22d6b03a 	or	r11,r4,r11
   3b64c:	003fd706 	br	3b5ac <_fpadd_parts+0x294>
   3b650:	193f971e 	bne	r3,r4,3b4b0 <_fpadd_parts+0x198>
   3b654:	11000117 	ldw	r4,4(r2)
   3b658:	28c00117 	ldw	r3,4(r5)
   3b65c:	20ff9426 	beq	r4,r3,3b4b0 <_fpadd_parts+0x198>
   3b660:	00800134 	movhi	r2,4
   3b664:	10837e04 	addi	r2,r2,3576
   3b668:	f800283a 	ret

0003b66c <__adddf3>:
   3b66c:	deffec04 	addi	sp,sp,-80
   3b670:	d9001115 	stw	r4,68(sp)
   3b674:	d9401215 	stw	r5,72(sp)
   3b678:	d9001104 	addi	r4,sp,68
   3b67c:	d9400a04 	addi	r5,sp,40
   3b680:	dfc01315 	stw	ra,76(sp)
   3b684:	d9c01015 	stw	r7,64(sp)
   3b688:	d9800f15 	stw	r6,60(sp)
   3b68c:	002c77c0 	call	2c77c <__unpack_d>
   3b690:	d9000f04 	addi	r4,sp,60
   3b694:	d9400504 	addi	r5,sp,20
   3b698:	002c77c0 	call	2c77c <__unpack_d>
   3b69c:	d9000a04 	addi	r4,sp,40
   3b6a0:	d9400504 	addi	r5,sp,20
   3b6a4:	d80d883a 	mov	r6,sp
   3b6a8:	003b3180 	call	3b318 <_fpadd_parts>
   3b6ac:	1009883a 	mov	r4,r2
   3b6b0:	002c5580 	call	2c558 <__pack_d>
   3b6b4:	dfc01317 	ldw	ra,76(sp)
   3b6b8:	dec01404 	addi	sp,sp,80
   3b6bc:	f800283a 	ret

0003b6c0 <__subdf3>:
   3b6c0:	deffec04 	addi	sp,sp,-80
   3b6c4:	d9001115 	stw	r4,68(sp)
   3b6c8:	d9401215 	stw	r5,72(sp)
   3b6cc:	d9001104 	addi	r4,sp,68
   3b6d0:	d9400a04 	addi	r5,sp,40
   3b6d4:	dfc01315 	stw	ra,76(sp)
   3b6d8:	d9c01015 	stw	r7,64(sp)
   3b6dc:	d9800f15 	stw	r6,60(sp)
   3b6e0:	002c77c0 	call	2c77c <__unpack_d>
   3b6e4:	d9000f04 	addi	r4,sp,60
   3b6e8:	d9400504 	addi	r5,sp,20
   3b6ec:	002c77c0 	call	2c77c <__unpack_d>
   3b6f0:	d8800617 	ldw	r2,24(sp)
   3b6f4:	d9000a04 	addi	r4,sp,40
   3b6f8:	d9400504 	addi	r5,sp,20
   3b6fc:	d80d883a 	mov	r6,sp
   3b700:	1080005c 	xori	r2,r2,1
   3b704:	d8800615 	stw	r2,24(sp)
   3b708:	003b3180 	call	3b318 <_fpadd_parts>
   3b70c:	1009883a 	mov	r4,r2
   3b710:	002c5580 	call	2c558 <__pack_d>
   3b714:	dfc01317 	ldw	ra,76(sp)
   3b718:	dec01404 	addi	sp,sp,80
   3b71c:	f800283a 	ret

0003b720 <__eqdf2>:
   3b720:	defff104 	addi	sp,sp,-60
   3b724:	d9000c15 	stw	r4,48(sp)
   3b728:	d9400d15 	stw	r5,52(sp)
   3b72c:	d9000c04 	addi	r4,sp,48
   3b730:	d9400504 	addi	r5,sp,20
   3b734:	dfc00e15 	stw	ra,56(sp)
   3b738:	d9800a15 	stw	r6,40(sp)
   3b73c:	d9c00b15 	stw	r7,44(sp)
   3b740:	002c77c0 	call	2c77c <__unpack_d>
   3b744:	d9000a04 	addi	r4,sp,40
   3b748:	d80b883a 	mov	r5,sp
   3b74c:	002c77c0 	call	2c77c <__unpack_d>
   3b750:	d8c00517 	ldw	r3,20(sp)
   3b754:	00800044 	movi	r2,1
   3b758:	10c0052e 	bgeu	r2,r3,3b770 <__eqdf2+0x50>
   3b75c:	d8c00017 	ldw	r3,0(sp)
   3b760:	10c0032e 	bgeu	r2,r3,3b770 <__eqdf2+0x50>
   3b764:	d9000504 	addi	r4,sp,20
   3b768:	d80b883a 	mov	r5,sp
   3b76c:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b770:	dfc00e17 	ldw	ra,56(sp)
   3b774:	dec00f04 	addi	sp,sp,60
   3b778:	f800283a 	ret

0003b77c <__nedf2>:
   3b77c:	defff104 	addi	sp,sp,-60
   3b780:	d9000c15 	stw	r4,48(sp)
   3b784:	d9400d15 	stw	r5,52(sp)
   3b788:	d9000c04 	addi	r4,sp,48
   3b78c:	d9400504 	addi	r5,sp,20
   3b790:	dfc00e15 	stw	ra,56(sp)
   3b794:	d9800a15 	stw	r6,40(sp)
   3b798:	d9c00b15 	stw	r7,44(sp)
   3b79c:	002c77c0 	call	2c77c <__unpack_d>
   3b7a0:	d9000a04 	addi	r4,sp,40
   3b7a4:	d80b883a 	mov	r5,sp
   3b7a8:	002c77c0 	call	2c77c <__unpack_d>
   3b7ac:	d8c00517 	ldw	r3,20(sp)
   3b7b0:	00800044 	movi	r2,1
   3b7b4:	10c0052e 	bgeu	r2,r3,3b7cc <__nedf2+0x50>
   3b7b8:	d8c00017 	ldw	r3,0(sp)
   3b7bc:	10c0032e 	bgeu	r2,r3,3b7cc <__nedf2+0x50>
   3b7c0:	d9000504 	addi	r4,sp,20
   3b7c4:	d80b883a 	mov	r5,sp
   3b7c8:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b7cc:	dfc00e17 	ldw	ra,56(sp)
   3b7d0:	dec00f04 	addi	sp,sp,60
   3b7d4:	f800283a 	ret

0003b7d8 <__gtdf2>:
   3b7d8:	defff104 	addi	sp,sp,-60
   3b7dc:	d9000c15 	stw	r4,48(sp)
   3b7e0:	d9400d15 	stw	r5,52(sp)
   3b7e4:	d9000c04 	addi	r4,sp,48
   3b7e8:	d9400504 	addi	r5,sp,20
   3b7ec:	dfc00e15 	stw	ra,56(sp)
   3b7f0:	d9800a15 	stw	r6,40(sp)
   3b7f4:	d9c00b15 	stw	r7,44(sp)
   3b7f8:	002c77c0 	call	2c77c <__unpack_d>
   3b7fc:	d9000a04 	addi	r4,sp,40
   3b800:	d80b883a 	mov	r5,sp
   3b804:	002c77c0 	call	2c77c <__unpack_d>
   3b808:	d8c00517 	ldw	r3,20(sp)
   3b80c:	00800044 	movi	r2,1
   3b810:	10c0082e 	bgeu	r2,r3,3b834 <__gtdf2+0x5c>
   3b814:	d8c00017 	ldw	r3,0(sp)
   3b818:	10c0062e 	bgeu	r2,r3,3b834 <__gtdf2+0x5c>
   3b81c:	d9000504 	addi	r4,sp,20
   3b820:	d80b883a 	mov	r5,sp
   3b824:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b828:	dfc00e17 	ldw	ra,56(sp)
   3b82c:	dec00f04 	addi	sp,sp,60
   3b830:	f800283a 	ret
   3b834:	00bfffc4 	movi	r2,-1
   3b838:	003ffb06 	br	3b828 <__gtdf2+0x50>

0003b83c <__gedf2>:
   3b83c:	defff104 	addi	sp,sp,-60
   3b840:	d9000c15 	stw	r4,48(sp)
   3b844:	d9400d15 	stw	r5,52(sp)
   3b848:	d9000c04 	addi	r4,sp,48
   3b84c:	d9400504 	addi	r5,sp,20
   3b850:	dfc00e15 	stw	ra,56(sp)
   3b854:	d9800a15 	stw	r6,40(sp)
   3b858:	d9c00b15 	stw	r7,44(sp)
   3b85c:	002c77c0 	call	2c77c <__unpack_d>
   3b860:	d9000a04 	addi	r4,sp,40
   3b864:	d80b883a 	mov	r5,sp
   3b868:	002c77c0 	call	2c77c <__unpack_d>
   3b86c:	d8c00517 	ldw	r3,20(sp)
   3b870:	00800044 	movi	r2,1
   3b874:	10c0082e 	bgeu	r2,r3,3b898 <__gedf2+0x5c>
   3b878:	d8c00017 	ldw	r3,0(sp)
   3b87c:	10c0062e 	bgeu	r2,r3,3b898 <__gedf2+0x5c>
   3b880:	d9000504 	addi	r4,sp,20
   3b884:	d80b883a 	mov	r5,sp
   3b888:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b88c:	dfc00e17 	ldw	ra,56(sp)
   3b890:	dec00f04 	addi	sp,sp,60
   3b894:	f800283a 	ret
   3b898:	00bfffc4 	movi	r2,-1
   3b89c:	003ffb06 	br	3b88c <__gedf2+0x50>

0003b8a0 <__ltdf2>:
   3b8a0:	defff104 	addi	sp,sp,-60
   3b8a4:	d9000c15 	stw	r4,48(sp)
   3b8a8:	d9400d15 	stw	r5,52(sp)
   3b8ac:	d9000c04 	addi	r4,sp,48
   3b8b0:	d9400504 	addi	r5,sp,20
   3b8b4:	dfc00e15 	stw	ra,56(sp)
   3b8b8:	d9800a15 	stw	r6,40(sp)
   3b8bc:	d9c00b15 	stw	r7,44(sp)
   3b8c0:	002c77c0 	call	2c77c <__unpack_d>
   3b8c4:	d9000a04 	addi	r4,sp,40
   3b8c8:	d80b883a 	mov	r5,sp
   3b8cc:	002c77c0 	call	2c77c <__unpack_d>
   3b8d0:	d8c00517 	ldw	r3,20(sp)
   3b8d4:	00800044 	movi	r2,1
   3b8d8:	10c0052e 	bgeu	r2,r3,3b8f0 <__ltdf2+0x50>
   3b8dc:	d8c00017 	ldw	r3,0(sp)
   3b8e0:	10c0032e 	bgeu	r2,r3,3b8f0 <__ltdf2+0x50>
   3b8e4:	d9000504 	addi	r4,sp,20
   3b8e8:	d80b883a 	mov	r5,sp
   3b8ec:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b8f0:	dfc00e17 	ldw	ra,56(sp)
   3b8f4:	dec00f04 	addi	sp,sp,60
   3b8f8:	f800283a 	ret

0003b8fc <__ledf2>:
   3b8fc:	defff104 	addi	sp,sp,-60
   3b900:	d9000c15 	stw	r4,48(sp)
   3b904:	d9400d15 	stw	r5,52(sp)
   3b908:	d9000c04 	addi	r4,sp,48
   3b90c:	d9400504 	addi	r5,sp,20
   3b910:	dfc00e15 	stw	ra,56(sp)
   3b914:	d9800a15 	stw	r6,40(sp)
   3b918:	d9c00b15 	stw	r7,44(sp)
   3b91c:	002c77c0 	call	2c77c <__unpack_d>
   3b920:	d9000a04 	addi	r4,sp,40
   3b924:	d80b883a 	mov	r5,sp
   3b928:	002c77c0 	call	2c77c <__unpack_d>
   3b92c:	d8c00517 	ldw	r3,20(sp)
   3b930:	00800044 	movi	r2,1
   3b934:	10c0052e 	bgeu	r2,r3,3b94c <__ledf2+0x50>
   3b938:	d8c00017 	ldw	r3,0(sp)
   3b93c:	10c0032e 	bgeu	r2,r3,3b94c <__ledf2+0x50>
   3b940:	d9000504 	addi	r4,sp,20
   3b944:	d80b883a 	mov	r5,sp
   3b948:	003bbbc0 	call	3bbbc <__fpcmp_parts_d>
   3b94c:	dfc00e17 	ldw	ra,56(sp)
   3b950:	dec00f04 	addi	sp,sp,60
   3b954:	f800283a 	ret

0003b958 <__floatsidf>:
   3b958:	2004d7fa 	srli	r2,r4,31
   3b95c:	defff904 	addi	sp,sp,-28
   3b960:	00c000c4 	movi	r3,3
   3b964:	dfc00615 	stw	ra,24(sp)
   3b968:	dc000515 	stw	r16,20(sp)
   3b96c:	d8c00015 	stw	r3,0(sp)
   3b970:	d8800115 	stw	r2,4(sp)
   3b974:	2000081e 	bne	r4,zero,3b998 <__floatsidf+0x40>
   3b978:	00800084 	movi	r2,2
   3b97c:	d8800015 	stw	r2,0(sp)
   3b980:	d809883a 	mov	r4,sp
   3b984:	002c5580 	call	2c558 <__pack_d>
   3b988:	dfc00617 	ldw	ra,24(sp)
   3b98c:	dc000517 	ldw	r16,20(sp)
   3b990:	dec00704 	addi	sp,sp,28
   3b994:	f800283a 	ret
   3b998:	00c00f04 	movi	r3,60
   3b99c:	d8c00215 	stw	r3,8(sp)
   3b9a0:	10000f1e 	bne	r2,zero,3b9e0 <__floatsidf+0x88>
   3b9a4:	2021883a 	mov	r16,r4
   3b9a8:	8009883a 	mov	r4,r16
   3b9ac:	002c28c0 	call	2c28c <__clzsi2>
   3b9b0:	11000744 	addi	r4,r2,29
   3b9b4:	0100110e 	bge	zero,r4,3b9fc <__floatsidf+0xa4>
   3b9b8:	10ffff44 	addi	r3,r2,-3
   3b9bc:	18001216 	blt	r3,zero,3ba08 <__floatsidf+0xb0>
   3b9c0:	80c6983a 	sll	r3,r16,r3
   3b9c4:	0009883a 	mov	r4,zero
   3b9c8:	014007c4 	movi	r5,31
   3b9cc:	2885c83a 	sub	r2,r5,r2
   3b9d0:	d9000315 	stw	r4,12(sp)
   3b9d4:	d8c00415 	stw	r3,16(sp)
   3b9d8:	d8800215 	stw	r2,8(sp)
   3b9dc:	003fe806 	br	3b980 <__floatsidf+0x28>
   3b9e0:	00a00034 	movhi	r2,32768
   3b9e4:	20800e26 	beq	r4,r2,3ba20 <__floatsidf+0xc8>
   3b9e8:	0121c83a 	sub	r16,zero,r4
   3b9ec:	8009883a 	mov	r4,r16
   3b9f0:	002c28c0 	call	2c28c <__clzsi2>
   3b9f4:	11000744 	addi	r4,r2,29
   3b9f8:	013fef16 	blt	zero,r4,3b9b8 <__floatsidf+0x60>
   3b9fc:	dc000315 	stw	r16,12(sp)
   3ba00:	d8000415 	stw	zero,16(sp)
   3ba04:	003fde06 	br	3b980 <__floatsidf+0x28>
   3ba08:	800ad07a 	srli	r5,r16,1
   3ba0c:	00c007c4 	movi	r3,31
   3ba10:	1907c83a 	sub	r3,r3,r4
   3ba14:	28c6d83a 	srl	r3,r5,r3
   3ba18:	8108983a 	sll	r4,r16,r4
   3ba1c:	003fea06 	br	3b9c8 <__floatsidf+0x70>
   3ba20:	0005883a 	mov	r2,zero
   3ba24:	00f07834 	movhi	r3,49632
   3ba28:	003fd706 	br	3b988 <__floatsidf+0x30>

0003ba2c <__fixdfsi>:
   3ba2c:	defff804 	addi	sp,sp,-32
   3ba30:	d9000515 	stw	r4,20(sp)
   3ba34:	d9400615 	stw	r5,24(sp)
   3ba38:	d9000504 	addi	r4,sp,20
   3ba3c:	d80b883a 	mov	r5,sp
   3ba40:	dfc00715 	stw	ra,28(sp)
   3ba44:	002c77c0 	call	2c77c <__unpack_d>
   3ba48:	d8800017 	ldw	r2,0(sp)
   3ba4c:	00c00084 	movi	r3,2
   3ba50:	10c01c26 	beq	r2,r3,3bac4 <__fixdfsi+0x98>
   3ba54:	00c00044 	movi	r3,1
   3ba58:	18801a2e 	bgeu	r3,r2,3bac4 <__fixdfsi+0x98>
   3ba5c:	00c00104 	movi	r3,4
   3ba60:	10c01126 	beq	r2,r3,3baa8 <__fixdfsi+0x7c>
   3ba64:	d8800217 	ldw	r2,8(sp)
   3ba68:	10001616 	blt	r2,zero,3bac4 <__fixdfsi+0x98>
   3ba6c:	00c00784 	movi	r3,30
   3ba70:	18800d16 	blt	r3,r2,3baa8 <__fixdfsi+0x7c>
   3ba74:	00c00f04 	movi	r3,60
   3ba78:	1885c83a 	sub	r2,r3,r2
   3ba7c:	10fff804 	addi	r3,r2,-32
   3ba80:	d9400317 	ldw	r5,12(sp)
   3ba84:	d9000417 	ldw	r4,16(sp)
   3ba88:	18001616 	blt	r3,zero,3bae4 <__fixdfsi+0xb8>
   3ba8c:	20c4d83a 	srl	r2,r4,r3
   3ba90:	d8c00117 	ldw	r3,4(sp)
   3ba94:	18000126 	beq	r3,zero,3ba9c <__fixdfsi+0x70>
   3ba98:	0085c83a 	sub	r2,zero,r2
   3ba9c:	dfc00717 	ldw	ra,28(sp)
   3baa0:	dec00804 	addi	sp,sp,32
   3baa4:	f800283a 	ret
   3baa8:	d8800117 	ldw	r2,4(sp)
   3baac:	1000091e 	bne	r2,zero,3bad4 <__fixdfsi+0xa8>
   3bab0:	00a00034 	movhi	r2,32768
   3bab4:	10bfffc4 	addi	r2,r2,-1
   3bab8:	dfc00717 	ldw	ra,28(sp)
   3babc:	dec00804 	addi	sp,sp,32
   3bac0:	f800283a 	ret
   3bac4:	0005883a 	mov	r2,zero
   3bac8:	dfc00717 	ldw	ra,28(sp)
   3bacc:	dec00804 	addi	sp,sp,32
   3bad0:	f800283a 	ret
   3bad4:	00a00034 	movhi	r2,32768
   3bad8:	dfc00717 	ldw	ra,28(sp)
   3badc:	dec00804 	addi	sp,sp,32
   3bae0:	f800283a 	ret
   3bae4:	2008907a 	slli	r4,r4,1
   3bae8:	018007c4 	movi	r6,31
   3baec:	308dc83a 	sub	r6,r6,r2
   3baf0:	2188983a 	sll	r4,r4,r6
   3baf4:	2884d83a 	srl	r2,r5,r2
   3baf8:	2084b03a 	or	r2,r4,r2
   3bafc:	003fe406 	br	3ba90 <__fixdfsi+0x64>

0003bb00 <__fpcmp_parts_f>:
   3bb00:	20c00017 	ldw	r3,0(r4)
   3bb04:	00800044 	movi	r2,1
   3bb08:	10c0172e 	bgeu	r2,r3,3bb68 <__fpcmp_parts_f+0x68>
   3bb0c:	29800017 	ldw	r6,0(r5)
   3bb10:	1180152e 	bgeu	r2,r6,3bb68 <__fpcmp_parts_f+0x68>
   3bb14:	01c00104 	movi	r7,4
   3bb18:	19c02326 	beq	r3,r7,3bba8 <__fpcmp_parts_f+0xa8>
   3bb1c:	31c00926 	beq	r6,r7,3bb44 <__fpcmp_parts_f+0x44>
   3bb20:	01c00084 	movi	r7,2
   3bb24:	19c00626 	beq	r3,r7,3bb40 <__fpcmp_parts_f+0x40>
   3bb28:	31c01126 	beq	r6,r7,3bb70 <__fpcmp_parts_f+0x70>
   3bb2c:	20c00117 	ldw	r3,4(r4)
   3bb30:	29800117 	ldw	r6,4(r5)
   3bb34:	19801226 	beq	r3,r6,3bb80 <__fpcmp_parts_f+0x80>
   3bb38:	1800041e 	bne	r3,zero,3bb4c <__fpcmp_parts_f+0x4c>
   3bb3c:	f800283a 	ret
   3bb40:	30c01526 	beq	r6,r3,3bb98 <__fpcmp_parts_f+0x98>
   3bb44:	28800117 	ldw	r2,4(r5)
   3bb48:	1000071e 	bne	r2,zero,3bb68 <__fpcmp_parts_f+0x68>
   3bb4c:	00bfffc4 	movi	r2,-1
   3bb50:	f800283a 	ret
   3bb54:	39801216 	blt	r7,r6,3bba0 <__fpcmp_parts_f+0xa0>
   3bb58:	21000317 	ldw	r4,12(r4)
   3bb5c:	28800317 	ldw	r2,12(r5)
   3bb60:	11000c2e 	bgeu	r2,r4,3bb94 <__fpcmp_parts_f+0x94>
   3bb64:	183ff91e 	bne	r3,zero,3bb4c <__fpcmp_parts_f+0x4c>
   3bb68:	00800044 	movi	r2,1
   3bb6c:	f800283a 	ret
   3bb70:	20800117 	ldw	r2,4(r4)
   3bb74:	103ff51e 	bne	r2,zero,3bb4c <__fpcmp_parts_f+0x4c>
   3bb78:	00800044 	movi	r2,1
   3bb7c:	f800283a 	ret
   3bb80:	21c00217 	ldw	r7,8(r4)
   3bb84:	29800217 	ldw	r6,8(r5)
   3bb88:	31fff20e 	bge	r6,r7,3bb54 <__fpcmp_parts_f+0x54>
   3bb8c:	183fef1e 	bne	r3,zero,3bb4c <__fpcmp_parts_f+0x4c>
   3bb90:	f800283a 	ret
   3bb94:	20800236 	bltu	r4,r2,3bba0 <__fpcmp_parts_f+0xa0>
   3bb98:	0005883a 	mov	r2,zero
   3bb9c:	f800283a 	ret
   3bba0:	183fea26 	beq	r3,zero,3bb4c <__fpcmp_parts_f+0x4c>
   3bba4:	003ff006 	br	3bb68 <__fpcmp_parts_f+0x68>
   3bba8:	30fff11e 	bne	r6,r3,3bb70 <__fpcmp_parts_f+0x70>
   3bbac:	28c00117 	ldw	r3,4(r5)
   3bbb0:	20800117 	ldw	r2,4(r4)
   3bbb4:	1885c83a 	sub	r2,r3,r2
   3bbb8:	f800283a 	ret

0003bbbc <__fpcmp_parts_d>:
   3bbbc:	20c00017 	ldw	r3,0(r4)
   3bbc0:	00800044 	movi	r2,1
   3bbc4:	10c0142e 	bgeu	r2,r3,3bc18 <__fpcmp_parts_d+0x5c>
   3bbc8:	29800017 	ldw	r6,0(r5)
   3bbcc:	1180122e 	bgeu	r2,r6,3bc18 <__fpcmp_parts_d+0x5c>
   3bbd0:	01c00104 	movi	r7,4
   3bbd4:	19c02826 	beq	r3,r7,3bc78 <__fpcmp_parts_d+0xbc>
   3bbd8:	31c00926 	beq	r6,r7,3bc00 <__fpcmp_parts_d+0x44>
   3bbdc:	01c00084 	movi	r7,2
   3bbe0:	19c00626 	beq	r3,r7,3bbfc <__fpcmp_parts_d+0x40>
   3bbe4:	31c00a26 	beq	r6,r7,3bc10 <__fpcmp_parts_d+0x54>
   3bbe8:	20c00117 	ldw	r3,4(r4)
   3bbec:	29800117 	ldw	r6,4(r5)
   3bbf0:	19800b26 	beq	r3,r6,3bc20 <__fpcmp_parts_d+0x64>
   3bbf4:	1800041e 	bne	r3,zero,3bc08 <__fpcmp_parts_d+0x4c>
   3bbf8:	f800283a 	ret
   3bbfc:	30c01a26 	beq	r6,r3,3bc68 <__fpcmp_parts_d+0xac>
   3bc00:	28800117 	ldw	r2,4(r5)
   3bc04:	1000041e 	bne	r2,zero,3bc18 <__fpcmp_parts_d+0x5c>
   3bc08:	00bfffc4 	movi	r2,-1
   3bc0c:	f800283a 	ret
   3bc10:	20800117 	ldw	r2,4(r4)
   3bc14:	103ffc1e 	bne	r2,zero,3bc08 <__fpcmp_parts_d+0x4c>
   3bc18:	00800044 	movi	r2,1
   3bc1c:	f800283a 	ret
   3bc20:	21c00217 	ldw	r7,8(r4)
   3bc24:	29800217 	ldw	r6,8(r5)
   3bc28:	31c0020e 	bge	r6,r7,3bc34 <__fpcmp_parts_d+0x78>
   3bc2c:	183ff61e 	bne	r3,zero,3bc08 <__fpcmp_parts_d+0x4c>
   3bc30:	f800283a 	ret
   3bc34:	39800a16 	blt	r7,r6,3bc60 <__fpcmp_parts_d+0xa4>
   3bc38:	20800417 	ldw	r2,16(r4)
   3bc3c:	29800417 	ldw	r6,16(r5)
   3bc40:	21c00317 	ldw	r7,12(r4)
   3bc44:	29000317 	ldw	r4,12(r5)
   3bc48:	30800936 	bltu	r6,r2,3bc70 <__fpcmp_parts_d+0xb4>
   3bc4c:	1180011e 	bne	r2,r6,3bc54 <__fpcmp_parts_d+0x98>
   3bc50:	21c00736 	bltu	r4,r7,3bc70 <__fpcmp_parts_d+0xb4>
   3bc54:	11800236 	bltu	r2,r6,3bc60 <__fpcmp_parts_d+0xa4>
   3bc58:	3080031e 	bne	r6,r2,3bc68 <__fpcmp_parts_d+0xac>
   3bc5c:	3900022e 	bgeu	r7,r4,3bc68 <__fpcmp_parts_d+0xac>
   3bc60:	183fe926 	beq	r3,zero,3bc08 <__fpcmp_parts_d+0x4c>
   3bc64:	003fec06 	br	3bc18 <__fpcmp_parts_d+0x5c>
   3bc68:	0005883a 	mov	r2,zero
   3bc6c:	f800283a 	ret
   3bc70:	183fe926 	beq	r3,zero,3bc18 <__fpcmp_parts_d+0x5c>
   3bc74:	003fe406 	br	3bc08 <__fpcmp_parts_d+0x4c>
   3bc78:	30ffe51e 	bne	r6,r3,3bc10 <__fpcmp_parts_d+0x54>
   3bc7c:	28c00117 	ldw	r3,4(r5)
   3bc80:	20800117 	ldw	r2,4(r4)
   3bc84:	1885c83a 	sub	r2,r3,r2
   3bc88:	f800283a 	ret

0003bc8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3bc8c:	defffe04 	addi	sp,sp,-8
   3bc90:	dfc00115 	stw	ra,4(sp)
   3bc94:	df000015 	stw	fp,0(sp)
   3bc98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3bc9c:	00800134 	movhi	r2,4
   3bca0:	108bbd04 	addi	r2,r2,12020
   3bca4:	10800017 	ldw	r2,0(r2)
   3bca8:	10000526 	beq	r2,zero,3bcc0 <alt_get_errno+0x34>
   3bcac:	00800134 	movhi	r2,4
   3bcb0:	108bbd04 	addi	r2,r2,12020
   3bcb4:	10800017 	ldw	r2,0(r2)
   3bcb8:	103ee83a 	callr	r2
   3bcbc:	00000206 	br	3bcc8 <alt_get_errno+0x3c>
   3bcc0:	00800134 	movhi	r2,4
   3bcc4:	10929704 	addi	r2,r2,19036
}
   3bcc8:	e037883a 	mov	sp,fp
   3bccc:	dfc00117 	ldw	ra,4(sp)
   3bcd0:	df000017 	ldw	fp,0(sp)
   3bcd4:	dec00204 	addi	sp,sp,8
   3bcd8:	f800283a 	ret

0003bcdc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   3bcdc:	defffb04 	addi	sp,sp,-20
   3bce0:	dfc00415 	stw	ra,16(sp)
   3bce4:	df000315 	stw	fp,12(sp)
   3bce8:	df000304 	addi	fp,sp,12
   3bcec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   3bcf0:	e0bfff17 	ldw	r2,-4(fp)
   3bcf4:	10000716 	blt	r2,zero,3bd14 <close+0x38>
   3bcf8:	e13fff17 	ldw	r4,-4(fp)
   3bcfc:	01400304 	movi	r5,12
   3bd00:	002c1540 	call	2c154 <__mulsi3>
   3bd04:	00c00134 	movhi	r3,4
   3bd08:	18c72b04 	addi	r3,r3,7340
   3bd0c:	10c5883a 	add	r2,r2,r3
   3bd10:	00000106 	br	3bd18 <close+0x3c>
   3bd14:	0005883a 	mov	r2,zero
   3bd18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   3bd1c:	e0bffd17 	ldw	r2,-12(fp)
   3bd20:	10001826 	beq	r2,zero,3bd84 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   3bd24:	e0bffd17 	ldw	r2,-12(fp)
   3bd28:	10800017 	ldw	r2,0(r2)
   3bd2c:	10800417 	ldw	r2,16(r2)
   3bd30:	10000626 	beq	r2,zero,3bd4c <close+0x70>
   3bd34:	e0bffd17 	ldw	r2,-12(fp)
   3bd38:	10800017 	ldw	r2,0(r2)
   3bd3c:	10800417 	ldw	r2,16(r2)
   3bd40:	e13ffd17 	ldw	r4,-12(fp)
   3bd44:	103ee83a 	callr	r2
   3bd48:	00000106 	br	3bd50 <close+0x74>
   3bd4c:	0005883a 	mov	r2,zero
   3bd50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   3bd54:	e13fff17 	ldw	r4,-4(fp)
   3bd58:	003c8880 	call	3c888 <alt_release_fd>
    if (rval < 0)
   3bd5c:	e0bffe17 	ldw	r2,-8(fp)
   3bd60:	1000060e 	bge	r2,zero,3bd7c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   3bd64:	003bc8c0 	call	3bc8c <alt_get_errno>
   3bd68:	e0fffe17 	ldw	r3,-8(fp)
   3bd6c:	00c7c83a 	sub	r3,zero,r3
   3bd70:	10c00015 	stw	r3,0(r2)
      return -1;
   3bd74:	00bfffc4 	movi	r2,-1
   3bd78:	00000606 	br	3bd94 <close+0xb8>
    }
    return 0;
   3bd7c:	0005883a 	mov	r2,zero
   3bd80:	00000406 	br	3bd94 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3bd84:	003bc8c0 	call	3bc8c <alt_get_errno>
   3bd88:	00c01444 	movi	r3,81
   3bd8c:	10c00015 	stw	r3,0(r2)
    return -1;
   3bd90:	00bfffc4 	movi	r2,-1
  }
}
   3bd94:	e037883a 	mov	sp,fp
   3bd98:	dfc00117 	ldw	ra,4(sp)
   3bd9c:	df000017 	ldw	fp,0(sp)
   3bda0:	dec00204 	addi	sp,sp,8
   3bda4:	f800283a 	ret

0003bda8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   3bda8:	defffc04 	addi	sp,sp,-16
   3bdac:	df000315 	stw	fp,12(sp)
   3bdb0:	df000304 	addi	fp,sp,12
   3bdb4:	e13ffd15 	stw	r4,-12(fp)
   3bdb8:	e17ffe15 	stw	r5,-8(fp)
   3bdbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   3bdc0:	e0bfff17 	ldw	r2,-4(fp)
}
   3bdc4:	e037883a 	mov	sp,fp
   3bdc8:	df000017 	ldw	fp,0(sp)
   3bdcc:	dec00104 	addi	sp,sp,4
   3bdd0:	f800283a 	ret

0003bdd4 <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
   3bdd4:	defffe04 	addi	sp,sp,-8
   3bdd8:	df000115 	stw	fp,4(sp)
   3bddc:	df000104 	addi	fp,sp,4
   3bde0:	e13fff15 	stw	r4,-4(fp)
}
   3bde4:	e037883a 	mov	sp,fp
   3bde8:	df000017 	ldw	fp,0(sp)
   3bdec:	dec00104 	addi	sp,sp,4
   3bdf0:	f800283a 	ret

0003bdf4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   3bdf4:	defffe04 	addi	sp,sp,-8
   3bdf8:	df000115 	stw	fp,4(sp)
   3bdfc:	df000104 	addi	fp,sp,4
   3be00:	e13fff15 	stw	r4,-4(fp)
}
   3be04:	e037883a 	mov	sp,fp
   3be08:	df000017 	ldw	fp,0(sp)
   3be0c:	dec00104 	addi	sp,sp,4
   3be10:	f800283a 	ret

0003be14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3be14:	defffc04 	addi	sp,sp,-16
   3be18:	df000315 	stw	fp,12(sp)
   3be1c:	df000304 	addi	fp,sp,12
   3be20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3be24:	0001883a 	nop
   3be28:	e0bfff17 	ldw	r2,-4(fp)
   3be2c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   3be30:	e0bffd17 	ldw	r2,-12(fp)
   3be34:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3be38:	e0bffe17 	ldw	r2,-8(fp)
   3be3c:	10000226 	beq	r2,zero,3be48 <_exit+0x34>
    ALT_SIM_FAIL();
   3be40:	002af070 	cmpltui	zero,zero,43969
   3be44:	00000106 	br	3be4c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   3be48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3be4c:	003fff06 	br	3be4c <_exit+0x38>

0003be50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3be50:	defffe04 	addi	sp,sp,-8
   3be54:	dfc00115 	stw	ra,4(sp)
   3be58:	df000015 	stw	fp,0(sp)
   3be5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3be60:	00800134 	movhi	r2,4
   3be64:	108bbd04 	addi	r2,r2,12020
   3be68:	10800017 	ldw	r2,0(r2)
   3be6c:	10000526 	beq	r2,zero,3be84 <alt_get_errno+0x34>
   3be70:	00800134 	movhi	r2,4
   3be74:	108bbd04 	addi	r2,r2,12020
   3be78:	10800017 	ldw	r2,0(r2)
   3be7c:	103ee83a 	callr	r2
   3be80:	00000206 	br	3be8c <alt_get_errno+0x3c>
   3be84:	00800134 	movhi	r2,4
   3be88:	10929704 	addi	r2,r2,19036
}
   3be8c:	e037883a 	mov	sp,fp
   3be90:	dfc00117 	ldw	ra,4(sp)
   3be94:	df000017 	ldw	fp,0(sp)
   3be98:	dec00204 	addi	sp,sp,8
   3be9c:	f800283a 	ret

0003bea0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   3bea0:	defffb04 	addi	sp,sp,-20
   3bea4:	dfc00415 	stw	ra,16(sp)
   3bea8:	df000315 	stw	fp,12(sp)
   3beac:	df000304 	addi	fp,sp,12
   3beb0:	e13ffe15 	stw	r4,-8(fp)
   3beb4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3beb8:	e0bffe17 	ldw	r2,-8(fp)
   3bebc:	10000716 	blt	r2,zero,3bedc <fstat+0x3c>
   3bec0:	e13ffe17 	ldw	r4,-8(fp)
   3bec4:	01400304 	movi	r5,12
   3bec8:	002c1540 	call	2c154 <__mulsi3>
   3becc:	00c00134 	movhi	r3,4
   3bed0:	18c72b04 	addi	r3,r3,7340
   3bed4:	10c5883a 	add	r2,r2,r3
   3bed8:	00000106 	br	3bee0 <fstat+0x40>
   3bedc:	0005883a 	mov	r2,zero
   3bee0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   3bee4:	e0bffd17 	ldw	r2,-12(fp)
   3bee8:	10001026 	beq	r2,zero,3bf2c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   3beec:	e0bffd17 	ldw	r2,-12(fp)
   3bef0:	10800017 	ldw	r2,0(r2)
   3bef4:	10800817 	ldw	r2,32(r2)
   3bef8:	10000726 	beq	r2,zero,3bf18 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   3befc:	e0bffd17 	ldw	r2,-12(fp)
   3bf00:	10800017 	ldw	r2,0(r2)
   3bf04:	10800817 	ldw	r2,32(r2)
   3bf08:	e13ffd17 	ldw	r4,-12(fp)
   3bf0c:	e17fff17 	ldw	r5,-4(fp)
   3bf10:	103ee83a 	callr	r2
   3bf14:	00000906 	br	3bf3c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   3bf18:	e0bfff17 	ldw	r2,-4(fp)
   3bf1c:	00c80004 	movi	r3,8192
   3bf20:	10c00115 	stw	r3,4(r2)
      return 0;
   3bf24:	0005883a 	mov	r2,zero
   3bf28:	00000406 	br	3bf3c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3bf2c:	003be500 	call	3be50 <alt_get_errno>
   3bf30:	00c01444 	movi	r3,81
   3bf34:	10c00015 	stw	r3,0(r2)
    return -1;
   3bf38:	00bfffc4 	movi	r2,-1
  }
}
   3bf3c:	e037883a 	mov	sp,fp
   3bf40:	dfc00117 	ldw	ra,4(sp)
   3bf44:	df000017 	ldw	fp,0(sp)
   3bf48:	dec00204 	addi	sp,sp,8
   3bf4c:	f800283a 	ret

0003bf50 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   3bf50:	deffff04 	addi	sp,sp,-4
   3bf54:	df000015 	stw	fp,0(sp)
   3bf58:	d839883a 	mov	fp,sp
  return 0;
   3bf5c:	0005883a 	mov	r2,zero
}
   3bf60:	e037883a 	mov	sp,fp
   3bf64:	df000017 	ldw	fp,0(sp)
   3bf68:	dec00104 	addi	sp,sp,4
   3bf6c:	f800283a 	ret

0003bf70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3bf70:	defffe04 	addi	sp,sp,-8
   3bf74:	dfc00115 	stw	ra,4(sp)
   3bf78:	df000015 	stw	fp,0(sp)
   3bf7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3bf80:	00800134 	movhi	r2,4
   3bf84:	108bbd04 	addi	r2,r2,12020
   3bf88:	10800017 	ldw	r2,0(r2)
   3bf8c:	10000526 	beq	r2,zero,3bfa4 <alt_get_errno+0x34>
   3bf90:	00800134 	movhi	r2,4
   3bf94:	108bbd04 	addi	r2,r2,12020
   3bf98:	10800017 	ldw	r2,0(r2)
   3bf9c:	103ee83a 	callr	r2
   3bfa0:	00000206 	br	3bfac <alt_get_errno+0x3c>
   3bfa4:	00800134 	movhi	r2,4
   3bfa8:	10929704 	addi	r2,r2,19036
}
   3bfac:	e037883a 	mov	sp,fp
   3bfb0:	dfc00117 	ldw	ra,4(sp)
   3bfb4:	df000017 	ldw	fp,0(sp)
   3bfb8:	dec00204 	addi	sp,sp,8
   3bfbc:	f800283a 	ret

0003bfc0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   3bfc0:	deffed04 	addi	sp,sp,-76
   3bfc4:	dfc01215 	stw	ra,72(sp)
   3bfc8:	df001115 	stw	fp,68(sp)
   3bfcc:	df001104 	addi	fp,sp,68
   3bfd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3bfd4:	e0bfff17 	ldw	r2,-4(fp)
   3bfd8:	10000716 	blt	r2,zero,3bff8 <isatty+0x38>
   3bfdc:	e13fff17 	ldw	r4,-4(fp)
   3bfe0:	01400304 	movi	r5,12
   3bfe4:	002c1540 	call	2c154 <__mulsi3>
   3bfe8:	00c00134 	movhi	r3,4
   3bfec:	18c72b04 	addi	r3,r3,7340
   3bff0:	10c5883a 	add	r2,r2,r3
   3bff4:	00000106 	br	3bffc <isatty+0x3c>
   3bff8:	0005883a 	mov	r2,zero
   3bffc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   3c000:	e0bfef17 	ldw	r2,-68(fp)
   3c004:	10000e26 	beq	r2,zero,3c040 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   3c008:	e0bfef17 	ldw	r2,-68(fp)
   3c00c:	10800017 	ldw	r2,0(r2)
   3c010:	10800817 	ldw	r2,32(r2)
   3c014:	1000021e 	bne	r2,zero,3c020 <isatty+0x60>
    {
      return 1;
   3c018:	00800044 	movi	r2,1
   3c01c:	00000c06 	br	3c050 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   3c020:	e0bff004 	addi	r2,fp,-64
   3c024:	e13fff17 	ldw	r4,-4(fp)
   3c028:	100b883a 	mov	r5,r2
   3c02c:	003bea00 	call	3bea0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   3c030:	e0bff117 	ldw	r2,-60(fp)
   3c034:	10880020 	cmpeqi	r2,r2,8192
   3c038:	10803fcc 	andi	r2,r2,255
   3c03c:	00000406 	br	3c050 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3c040:	003bf700 	call	3bf70 <alt_get_errno>
   3c044:	00c01444 	movi	r3,81
   3c048:	10c00015 	stw	r3,0(r2)
    return 0;
   3c04c:	0005883a 	mov	r2,zero
  }
}
   3c050:	e037883a 	mov	sp,fp
   3c054:	dfc00117 	ldw	ra,4(sp)
   3c058:	df000017 	ldw	fp,0(sp)
   3c05c:	dec00204 	addi	sp,sp,8
   3c060:	f800283a 	ret

0003c064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c064:	defffe04 	addi	sp,sp,-8
   3c068:	dfc00115 	stw	ra,4(sp)
   3c06c:	df000015 	stw	fp,0(sp)
   3c070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3c074:	00800134 	movhi	r2,4
   3c078:	108bbd04 	addi	r2,r2,12020
   3c07c:	10800017 	ldw	r2,0(r2)
   3c080:	10000526 	beq	r2,zero,3c098 <alt_get_errno+0x34>
   3c084:	00800134 	movhi	r2,4
   3c088:	108bbd04 	addi	r2,r2,12020
   3c08c:	10800017 	ldw	r2,0(r2)
   3c090:	103ee83a 	callr	r2
   3c094:	00000206 	br	3c0a0 <alt_get_errno+0x3c>
   3c098:	00800134 	movhi	r2,4
   3c09c:	10929704 	addi	r2,r2,19036
}
   3c0a0:	e037883a 	mov	sp,fp
   3c0a4:	dfc00117 	ldw	ra,4(sp)
   3c0a8:	df000017 	ldw	fp,0(sp)
   3c0ac:	dec00204 	addi	sp,sp,8
   3c0b0:	f800283a 	ret

0003c0b4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   3c0b4:	defffb04 	addi	sp,sp,-20
   3c0b8:	dfc00415 	stw	ra,16(sp)
   3c0bc:	df000315 	stw	fp,12(sp)
   3c0c0:	df000304 	addi	fp,sp,12
   3c0c4:	e13ffe15 	stw	r4,-8(fp)
   3c0c8:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   3c0cc:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   3c0d0:	e0bffe17 	ldw	r2,-8(fp)
   3c0d4:	00803016 	blt	zero,r2,3c198 <kill+0xe4>
  {
    switch (sig)
   3c0d8:	e0bfff17 	ldw	r2,-4(fp)
   3c0dc:	10800828 	cmpgeui	r2,r2,32
   3c0e0:	10002a1e 	bne	r2,zero,3c18c <kill+0xd8>
   3c0e4:	e0bfff17 	ldw	r2,-4(fp)
   3c0e8:	1085883a 	add	r2,r2,r2
   3c0ec:	1087883a 	add	r3,r2,r2
   3c0f0:	00800134 	movhi	r2,4
   3c0f4:	10b04104 	addi	r2,r2,-16124
   3c0f8:	1885883a 	add	r2,r3,r2
   3c0fc:	10800017 	ldw	r2,0(r2)
   3c100:	1000683a 	jmp	r2
   3c104:	0003c1ac 	andhi	zero,zero,3846
   3c108:	0003c18c 	andi	zero,zero,3846
   3c10c:	0003c18c 	andi	zero,zero,3846
   3c110:	0003c184 	movi	zero,3846
   3c114:	0003c184 	movi	zero,3846
   3c118:	0003c184 	movi	zero,3846
   3c11c:	0003c184 	movi	zero,3846
   3c120:	0003c18c 	andi	zero,zero,3846
   3c124:	0003c184 	movi	zero,3846
   3c128:	0003c184 	movi	zero,3846
   3c12c:	0003c184 	movi	zero,3846
   3c130:	0003c184 	movi	zero,3846
   3c134:	0003c184 	movi	zero,3846
   3c138:	0003c184 	movi	zero,3846
   3c13c:	0003c184 	movi	zero,3846
   3c140:	0003c184 	movi	zero,3846
   3c144:	0003c1ac 	andhi	zero,zero,3846
   3c148:	0003c18c 	andi	zero,zero,3846
   3c14c:	0003c18c 	andi	zero,zero,3846
   3c150:	0003c18c 	andi	zero,zero,3846
   3c154:	0003c1ac 	andhi	zero,zero,3846
   3c158:	0003c18c 	andi	zero,zero,3846
   3c15c:	0003c18c 	andi	zero,zero,3846
   3c160:	0003c184 	movi	zero,3846
   3c164:	0003c184 	movi	zero,3846
   3c168:	0003c184 	movi	zero,3846
   3c16c:	0003c184 	movi	zero,3846
   3c170:	0003c184 	movi	zero,3846
   3c174:	0003c18c 	andi	zero,zero,3846
   3c178:	0003c18c 	andi	zero,zero,3846
   3c17c:	0003c184 	movi	zero,3846
   3c180:	0003c184 	movi	zero,3846
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   3c184:	0009883a 	mov	r4,zero
   3c188:	003be140 	call	3be14 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   3c18c:	00800584 	movi	r2,22
   3c190:	e0bffd15 	stw	r2,-12(fp)
   3c194:	00000606 	br	3c1b0 <kill+0xfc>
    }
  }

  else if (pid > 0)
   3c198:	e0bffe17 	ldw	r2,-8(fp)
   3c19c:	0080040e 	bge	zero,r2,3c1b0 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   3c1a0:	008000c4 	movi	r2,3
   3c1a4:	e0bffd15 	stw	r2,-12(fp)
   3c1a8:	00000106 	br	3c1b0 <kill+0xfc>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   3c1ac:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   3c1b0:	e0bffd17 	ldw	r2,-12(fp)
   3c1b4:	10000526 	beq	r2,zero,3c1cc <kill+0x118>
  {
    ALT_ERRNO = status;
   3c1b8:	003c0640 	call	3c064 <alt_get_errno>
   3c1bc:	e0fffd17 	ldw	r3,-12(fp)
   3c1c0:	10c00015 	stw	r3,0(r2)
    return -1;
   3c1c4:	00bfffc4 	movi	r2,-1
   3c1c8:	00000106 	br	3c1d0 <kill+0x11c>
  }

  return 0;
   3c1cc:	0005883a 	mov	r2,zero
}
   3c1d0:	e037883a 	mov	sp,fp
   3c1d4:	dfc00117 	ldw	ra,4(sp)
   3c1d8:	df000017 	ldw	fp,0(sp)
   3c1dc:	dec00204 	addi	sp,sp,8
   3c1e0:	f800283a 	ret

0003c1e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   3c1e4:	defffc04 	addi	sp,sp,-16
   3c1e8:	df000315 	stw	fp,12(sp)
   3c1ec:	df000304 	addi	fp,sp,12
   3c1f0:	e13ffd15 	stw	r4,-12(fp)
   3c1f4:	e17ffe15 	stw	r5,-8(fp)
   3c1f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   3c1fc:	e0fffe17 	ldw	r3,-8(fp)
   3c200:	e0bffd17 	ldw	r2,-12(fp)
   3c204:	18800e26 	beq	r3,r2,3c240 <alt_load_section+0x5c>
  {
    while( to != end )
   3c208:	00000a06 	br	3c234 <alt_load_section+0x50>
    {
      *to++ = *from++;
   3c20c:	e0bffd17 	ldw	r2,-12(fp)
   3c210:	10c00017 	ldw	r3,0(r2)
   3c214:	e0bffe17 	ldw	r2,-8(fp)
   3c218:	10c00015 	stw	r3,0(r2)
   3c21c:	e0bffe17 	ldw	r2,-8(fp)
   3c220:	10800104 	addi	r2,r2,4
   3c224:	e0bffe15 	stw	r2,-8(fp)
   3c228:	e0bffd17 	ldw	r2,-12(fp)
   3c22c:	10800104 	addi	r2,r2,4
   3c230:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3c234:	e0fffe17 	ldw	r3,-8(fp)
   3c238:	e0bfff17 	ldw	r2,-4(fp)
   3c23c:	18bff31e 	bne	r3,r2,3c20c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   3c240:	e037883a 	mov	sp,fp
   3c244:	df000017 	ldw	fp,0(sp)
   3c248:	dec00104 	addi	sp,sp,4
   3c24c:	f800283a 	ret

0003c250 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3c250:	defffe04 	addi	sp,sp,-8
   3c254:	dfc00115 	stw	ra,4(sp)
   3c258:	df000015 	stw	fp,0(sp)
   3c25c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3c260:	01000134 	movhi	r4,4
   3c264:	210bd404 	addi	r4,r4,12112
   3c268:	01400134 	movhi	r5,4
   3c26c:	29451204 	addi	r5,r5,5192
   3c270:	01800134 	movhi	r6,4
   3c274:	318bd404 	addi	r6,r6,12112
   3c278:	003c1e40 	call	3c1e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   3c27c:	01000034 	movhi	r4,0
   3c280:	21000804 	addi	r4,r4,32
   3c284:	01400034 	movhi	r5,0
   3c288:	29400804 	addi	r5,r5,32
   3c28c:	01800034 	movhi	r6,0
   3c290:	31806e04 	addi	r6,r6,440
   3c294:	003c1e40 	call	3c1e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   3c298:	01000134 	movhi	r4,4
   3c29c:	213ae504 	addi	r4,r4,-5228
   3c2a0:	01400134 	movhi	r5,4
   3c2a4:	297ae504 	addi	r5,r5,-5228
   3c2a8:	01800134 	movhi	r6,4
   3c2ac:	31851204 	addi	r6,r6,5192
   3c2b0:	003c1e40 	call	3c1e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   3c2b4:	003df1c0 	call	3df1c <alt_dcache_flush_all>
  alt_icache_flush_all();
   3c2b8:	003e3dc0 	call	3e3dc <alt_icache_flush_all>
}
   3c2bc:	e037883a 	mov	sp,fp
   3c2c0:	dfc00117 	ldw	ra,4(sp)
   3c2c4:	df000017 	ldw	fp,0(sp)
   3c2c8:	dec00204 	addi	sp,sp,8
   3c2cc:	f800283a 	ret

0003c2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c2d0:	defffe04 	addi	sp,sp,-8
   3c2d4:	dfc00115 	stw	ra,4(sp)
   3c2d8:	df000015 	stw	fp,0(sp)
   3c2dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3c2e0:	00800134 	movhi	r2,4
   3c2e4:	108bbd04 	addi	r2,r2,12020
   3c2e8:	10800017 	ldw	r2,0(r2)
   3c2ec:	10000526 	beq	r2,zero,3c304 <alt_get_errno+0x34>
   3c2f0:	00800134 	movhi	r2,4
   3c2f4:	108bbd04 	addi	r2,r2,12020
   3c2f8:	10800017 	ldw	r2,0(r2)
   3c2fc:	103ee83a 	callr	r2
   3c300:	00000206 	br	3c30c <alt_get_errno+0x3c>
   3c304:	00800134 	movhi	r2,4
   3c308:	10929704 	addi	r2,r2,19036
}
   3c30c:	e037883a 	mov	sp,fp
   3c310:	dfc00117 	ldw	ra,4(sp)
   3c314:	df000017 	ldw	fp,0(sp)
   3c318:	dec00204 	addi	sp,sp,8
   3c31c:	f800283a 	ret

0003c320 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3c320:	defff904 	addi	sp,sp,-28
   3c324:	dfc00615 	stw	ra,24(sp)
   3c328:	df000515 	stw	fp,20(sp)
   3c32c:	df000504 	addi	fp,sp,20
   3c330:	e13ffd15 	stw	r4,-12(fp)
   3c334:	e17ffe15 	stw	r5,-8(fp)
   3c338:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   3c33c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3c340:	e0bffd17 	ldw	r2,-12(fp)
   3c344:	10000716 	blt	r2,zero,3c364 <lseek+0x44>
   3c348:	e13ffd17 	ldw	r4,-12(fp)
   3c34c:	01400304 	movi	r5,12
   3c350:	002c1540 	call	2c154 <__mulsi3>
   3c354:	00c00134 	movhi	r3,4
   3c358:	18c72b04 	addi	r3,r3,7340
   3c35c:	10c5883a 	add	r2,r2,r3
   3c360:	00000106 	br	3c368 <lseek+0x48>
   3c364:	0005883a 	mov	r2,zero
   3c368:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   3c36c:	e0bffc17 	ldw	r2,-16(fp)
   3c370:	10001026 	beq	r2,zero,3c3b4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   3c374:	e0bffc17 	ldw	r2,-16(fp)
   3c378:	10800017 	ldw	r2,0(r2)
   3c37c:	10800717 	ldw	r2,28(r2)
   3c380:	10000926 	beq	r2,zero,3c3a8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   3c384:	e0bffc17 	ldw	r2,-16(fp)
   3c388:	10800017 	ldw	r2,0(r2)
   3c38c:	10800717 	ldw	r2,28(r2)
   3c390:	e13ffc17 	ldw	r4,-16(fp)
   3c394:	e17ffe17 	ldw	r5,-8(fp)
   3c398:	e1bfff17 	ldw	r6,-4(fp)
   3c39c:	103ee83a 	callr	r2
   3c3a0:	e0bffb15 	stw	r2,-20(fp)
   3c3a4:	00000506 	br	3c3bc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   3c3a8:	00bfde84 	movi	r2,-134
   3c3ac:	e0bffb15 	stw	r2,-20(fp)
   3c3b0:	00000206 	br	3c3bc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   3c3b4:	00bfebc4 	movi	r2,-81
   3c3b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   3c3bc:	e0bffb17 	ldw	r2,-20(fp)
   3c3c0:	1000060e 	bge	r2,zero,3c3dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   3c3c4:	003c2d00 	call	3c2d0 <alt_get_errno>
   3c3c8:	e0fffb17 	ldw	r3,-20(fp)
   3c3cc:	00c7c83a 	sub	r3,zero,r3
   3c3d0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   3c3d4:	00bfffc4 	movi	r2,-1
   3c3d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   3c3dc:	e0bffb17 	ldw	r2,-20(fp)
}
   3c3e0:	e037883a 	mov	sp,fp
   3c3e4:	dfc00117 	ldw	ra,4(sp)
   3c3e8:	df000017 	ldw	fp,0(sp)
   3c3ec:	dec00204 	addi	sp,sp,8
   3c3f0:	f800283a 	ret

0003c3f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   3c3f4:	defffd04 	addi	sp,sp,-12
   3c3f8:	dfc00215 	stw	ra,8(sp)
   3c3fc:	df000115 	stw	fp,4(sp)
   3c400:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   3c404:	0009883a 	mov	r4,zero
   3c408:	003cbb80 	call	3cbb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   3c40c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3c410:	003cbec0 	call	3cbec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3c414:	01000134 	movhi	r4,4
   3c418:	21050704 	addi	r4,r4,5148
   3c41c:	01400134 	movhi	r5,4
   3c420:	29450704 	addi	r5,r5,5148
   3c424:	01800134 	movhi	r6,4
   3c428:	31850704 	addi	r6,r6,5148
   3c42c:	003e7a00 	call	3e7a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3c430:	003e0280 	call	3e028 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3c434:	01000134 	movhi	r4,4
   3c438:	21382104 	addi	r4,r4,-8060
   3c43c:	003e9d40 	call	3e9d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3c440:	d126f217 	ldw	r4,-25656(gp)
   3c444:	d0e6f317 	ldw	r3,-25652(gp)
   3c448:	d0a6f417 	ldw	r2,-25648(gp)
   3c44c:	180b883a 	mov	r5,r3
   3c450:	100d883a 	mov	r6,r2
   3c454:	002b2780 	call	2b278 <main>
   3c458:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3c45c:	01000044 	movi	r4,1
   3c460:	003bcdc0 	call	3bcdc <close>
  exit (result);
   3c464:	e13fff17 	ldw	r4,-4(fp)
   3c468:	002c9080 	call	2c908 <exit>

0003c46c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3c46c:	defffe04 	addi	sp,sp,-8
   3c470:	df000115 	stw	fp,4(sp)
   3c474:	df000104 	addi	fp,sp,4
   3c478:	e13fff15 	stw	r4,-4(fp)
}
   3c47c:	e037883a 	mov	sp,fp
   3c480:	df000017 	ldw	fp,0(sp)
   3c484:	dec00104 	addi	sp,sp,4
   3c488:	f800283a 	ret

0003c48c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   3c48c:	defffe04 	addi	sp,sp,-8
   3c490:	df000115 	stw	fp,4(sp)
   3c494:	df000104 	addi	fp,sp,4
   3c498:	e13fff15 	stw	r4,-4(fp)
}
   3c49c:	e037883a 	mov	sp,fp
   3c4a0:	df000017 	ldw	fp,0(sp)
   3c4a4:	dec00104 	addi	sp,sp,4
   3c4a8:	f800283a 	ret

0003c4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c4ac:	defffe04 	addi	sp,sp,-8
   3c4b0:	dfc00115 	stw	ra,4(sp)
   3c4b4:	df000015 	stw	fp,0(sp)
   3c4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3c4bc:	00800134 	movhi	r2,4
   3c4c0:	108bbd04 	addi	r2,r2,12020
   3c4c4:	10800017 	ldw	r2,0(r2)
   3c4c8:	10000526 	beq	r2,zero,3c4e0 <alt_get_errno+0x34>
   3c4cc:	00800134 	movhi	r2,4
   3c4d0:	108bbd04 	addi	r2,r2,12020
   3c4d4:	10800017 	ldw	r2,0(r2)
   3c4d8:	103ee83a 	callr	r2
   3c4dc:	00000206 	br	3c4e8 <alt_get_errno+0x3c>
   3c4e0:	00800134 	movhi	r2,4
   3c4e4:	10929704 	addi	r2,r2,19036
}
   3c4e8:	e037883a 	mov	sp,fp
   3c4ec:	dfc00117 	ldw	ra,4(sp)
   3c4f0:	df000017 	ldw	fp,0(sp)
   3c4f4:	dec00204 	addi	sp,sp,8
   3c4f8:	f800283a 	ret

0003c4fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3c4fc:	defffb04 	addi	sp,sp,-20
   3c500:	dfc00415 	stw	ra,16(sp)
   3c504:	df000315 	stw	fp,12(sp)
   3c508:	dc000215 	stw	r16,8(sp)
   3c50c:	df000204 	addi	fp,sp,8
   3c510:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3c514:	e0bfff17 	ldw	r2,-4(fp)
   3c518:	10800217 	ldw	r2,8(r2)
   3c51c:	10d00034 	orhi	r3,r2,16384
   3c520:	e0bfff17 	ldw	r2,-4(fp)
   3c524:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3c528:	e03ffe15 	stw	zero,-8(fp)
   3c52c:	00002206 	br	3c5b8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3c530:	04000134 	movhi	r16,4
   3c534:	84072b04 	addi	r16,r16,7340
   3c538:	e0bffe17 	ldw	r2,-8(fp)
   3c53c:	1009883a 	mov	r4,r2
   3c540:	01400304 	movi	r5,12
   3c544:	002c1540 	call	2c154 <__mulsi3>
   3c548:	8085883a 	add	r2,r16,r2
   3c54c:	10c00017 	ldw	r3,0(r2)
   3c550:	e0bfff17 	ldw	r2,-4(fp)
   3c554:	10800017 	ldw	r2,0(r2)
   3c558:	1880141e 	bne	r3,r2,3c5ac <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3c55c:	04000134 	movhi	r16,4
   3c560:	84072b04 	addi	r16,r16,7340
   3c564:	e0bffe17 	ldw	r2,-8(fp)
   3c568:	1009883a 	mov	r4,r2
   3c56c:	01400304 	movi	r5,12
   3c570:	002c1540 	call	2c154 <__mulsi3>
   3c574:	8085883a 	add	r2,r16,r2
   3c578:	10800204 	addi	r2,r2,8
   3c57c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3c580:	10000a0e 	bge	r2,zero,3c5ac <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   3c584:	e13ffe17 	ldw	r4,-8(fp)
   3c588:	01400304 	movi	r5,12
   3c58c:	002c1540 	call	2c154 <__mulsi3>
   3c590:	00c00134 	movhi	r3,4
   3c594:	18c72b04 	addi	r3,r3,7340
   3c598:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3c59c:	e0bfff17 	ldw	r2,-4(fp)
   3c5a0:	18800226 	beq	r3,r2,3c5ac <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3c5a4:	00bffcc4 	movi	r2,-13
   3c5a8:	00000a06 	br	3c5d4 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3c5ac:	e0bffe17 	ldw	r2,-8(fp)
   3c5b0:	10800044 	addi	r2,r2,1
   3c5b4:	e0bffe15 	stw	r2,-8(fp)
   3c5b8:	00800134 	movhi	r2,4
   3c5bc:	108bbc04 	addi	r2,r2,12016
   3c5c0:	10800017 	ldw	r2,0(r2)
   3c5c4:	1007883a 	mov	r3,r2
   3c5c8:	e0bffe17 	ldw	r2,-8(fp)
   3c5cc:	18bfd82e 	bgeu	r3,r2,3c530 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3c5d0:	0005883a 	mov	r2,zero
}
   3c5d4:	e037883a 	mov	sp,fp
   3c5d8:	dfc00217 	ldw	ra,8(sp)
   3c5dc:	df000117 	ldw	fp,4(sp)
   3c5e0:	dc000017 	ldw	r16,0(sp)
   3c5e4:	dec00304 	addi	sp,sp,12
   3c5e8:	f800283a 	ret

0003c5ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3c5ec:	defff604 	addi	sp,sp,-40
   3c5f0:	dfc00915 	stw	ra,36(sp)
   3c5f4:	df000815 	stw	fp,32(sp)
   3c5f8:	df000804 	addi	fp,sp,32
   3c5fc:	e13ffd15 	stw	r4,-12(fp)
   3c600:	e17ffe15 	stw	r5,-8(fp)
   3c604:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3c608:	00bfffc4 	movi	r2,-1
   3c60c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   3c610:	00bffb44 	movi	r2,-19
   3c614:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   3c618:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3c61c:	e13ffd17 	ldw	r4,-12(fp)
   3c620:	01400134 	movhi	r5,4
   3c624:	294bba04 	addi	r5,r5,12008
   3c628:	003e0e00 	call	3e0e0 <alt_find_dev>
   3c62c:	e0bff815 	stw	r2,-32(fp)
   3c630:	e0bff817 	ldw	r2,-32(fp)
   3c634:	1000051e 	bne	r2,zero,3c64c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3c638:	e13ffd17 	ldw	r4,-12(fp)
   3c63c:	003e1700 	call	3e170 <alt_find_file>
   3c640:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   3c644:	00800044 	movi	r2,1
   3c648:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3c64c:	e0bff817 	ldw	r2,-32(fp)
   3c650:	10002a26 	beq	r2,zero,3c6fc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3c654:	e13ff817 	ldw	r4,-32(fp)
   3c658:	003e3080 	call	3e308 <alt_get_fd>
   3c65c:	e0bff915 	stw	r2,-28(fp)
   3c660:	e0bff917 	ldw	r2,-28(fp)
   3c664:	1000030e 	bge	r2,zero,3c674 <open+0x88>
    {
      status = index;
   3c668:	e0bff917 	ldw	r2,-28(fp)
   3c66c:	e0bffa15 	stw	r2,-24(fp)
   3c670:	00002406 	br	3c704 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   3c674:	e13ff917 	ldw	r4,-28(fp)
   3c678:	01400304 	movi	r5,12
   3c67c:	002c1540 	call	2c154 <__mulsi3>
   3c680:	00c00134 	movhi	r3,4
   3c684:	18c72b04 	addi	r3,r3,7340
   3c688:	10c5883a 	add	r2,r2,r3
   3c68c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3c690:	e0fffe17 	ldw	r3,-8(fp)
   3c694:	00900034 	movhi	r2,16384
   3c698:	10bfffc4 	addi	r2,r2,-1
   3c69c:	1886703a 	and	r3,r3,r2
   3c6a0:	e0bffc17 	ldw	r2,-16(fp)
   3c6a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3c6a8:	e0bffb17 	ldw	r2,-20(fp)
   3c6ac:	1000051e 	bne	r2,zero,3c6c4 <open+0xd8>
   3c6b0:	e13ffc17 	ldw	r4,-16(fp)
   3c6b4:	003c4fc0 	call	3c4fc <alt_file_locked>
   3c6b8:	e0bffa15 	stw	r2,-24(fp)
   3c6bc:	e0bffa17 	ldw	r2,-24(fp)
   3c6c0:	10001016 	blt	r2,zero,3c704 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3c6c4:	e0bff817 	ldw	r2,-32(fp)
   3c6c8:	10800317 	ldw	r2,12(r2)
   3c6cc:	10000826 	beq	r2,zero,3c6f0 <open+0x104>
   3c6d0:	e0bff817 	ldw	r2,-32(fp)
   3c6d4:	10800317 	ldw	r2,12(r2)
   3c6d8:	e13ffc17 	ldw	r4,-16(fp)
   3c6dc:	e17ffd17 	ldw	r5,-12(fp)
   3c6e0:	e1bffe17 	ldw	r6,-8(fp)
   3c6e4:	e1ffff17 	ldw	r7,-4(fp)
   3c6e8:	103ee83a 	callr	r2
   3c6ec:	00000106 	br	3c6f4 <open+0x108>
   3c6f0:	0005883a 	mov	r2,zero
   3c6f4:	e0bffa15 	stw	r2,-24(fp)
   3c6f8:	00000206 	br	3c704 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3c6fc:	00bffb44 	movi	r2,-19
   3c700:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3c704:	e0bffa17 	ldw	r2,-24(fp)
   3c708:	1000080e 	bge	r2,zero,3c72c <open+0x140>
  {
    alt_release_fd (index);  
   3c70c:	e13ff917 	ldw	r4,-28(fp)
   3c710:	003c8880 	call	3c888 <alt_release_fd>
    ALT_ERRNO = -status;
   3c714:	003c4ac0 	call	3c4ac <alt_get_errno>
   3c718:	e0fffa17 	ldw	r3,-24(fp)
   3c71c:	00c7c83a 	sub	r3,zero,r3
   3c720:	10c00015 	stw	r3,0(r2)
    return -1;
   3c724:	00bfffc4 	movi	r2,-1
   3c728:	00000106 	br	3c730 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   3c72c:	e0bff917 	ldw	r2,-28(fp)
}
   3c730:	e037883a 	mov	sp,fp
   3c734:	dfc00117 	ldw	ra,4(sp)
   3c738:	df000017 	ldw	fp,0(sp)
   3c73c:	dec00204 	addi	sp,sp,8
   3c740:	f800283a 	ret

0003c744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c744:	defffe04 	addi	sp,sp,-8
   3c748:	dfc00115 	stw	ra,4(sp)
   3c74c:	df000015 	stw	fp,0(sp)
   3c750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3c754:	00800134 	movhi	r2,4
   3c758:	108bbd04 	addi	r2,r2,12020
   3c75c:	10800017 	ldw	r2,0(r2)
   3c760:	10000526 	beq	r2,zero,3c778 <alt_get_errno+0x34>
   3c764:	00800134 	movhi	r2,4
   3c768:	108bbd04 	addi	r2,r2,12020
   3c76c:	10800017 	ldw	r2,0(r2)
   3c770:	103ee83a 	callr	r2
   3c774:	00000206 	br	3c780 <alt_get_errno+0x3c>
   3c778:	00800134 	movhi	r2,4
   3c77c:	10929704 	addi	r2,r2,19036
}
   3c780:	e037883a 	mov	sp,fp
   3c784:	dfc00117 	ldw	ra,4(sp)
   3c788:	df000017 	ldw	fp,0(sp)
   3c78c:	dec00204 	addi	sp,sp,8
   3c790:	f800283a 	ret

0003c794 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3c794:	defff904 	addi	sp,sp,-28
   3c798:	dfc00615 	stw	ra,24(sp)
   3c79c:	df000515 	stw	fp,20(sp)
   3c7a0:	df000504 	addi	fp,sp,20
   3c7a4:	e13ffd15 	stw	r4,-12(fp)
   3c7a8:	e17ffe15 	stw	r5,-8(fp)
   3c7ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3c7b0:	e0bffd17 	ldw	r2,-12(fp)
   3c7b4:	10000716 	blt	r2,zero,3c7d4 <read+0x40>
   3c7b8:	e13ffd17 	ldw	r4,-12(fp)
   3c7bc:	01400304 	movi	r5,12
   3c7c0:	002c1540 	call	2c154 <__mulsi3>
   3c7c4:	00c00134 	movhi	r3,4
   3c7c8:	18c72b04 	addi	r3,r3,7340
   3c7cc:	10c5883a 	add	r2,r2,r3
   3c7d0:	00000106 	br	3c7d8 <read+0x44>
   3c7d4:	0005883a 	mov	r2,zero
   3c7d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3c7dc:	e0bffb17 	ldw	r2,-20(fp)
   3c7e0:	10002026 	beq	r2,zero,3c864 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3c7e4:	e0bffb17 	ldw	r2,-20(fp)
   3c7e8:	10800217 	ldw	r2,8(r2)
   3c7ec:	108000cc 	andi	r2,r2,3
   3c7f0:	10800060 	cmpeqi	r2,r2,1
   3c7f4:	1000171e 	bne	r2,zero,3c854 <read+0xc0>
        (fd->dev->read))
   3c7f8:	e0bffb17 	ldw	r2,-20(fp)
   3c7fc:	10800017 	ldw	r2,0(r2)
   3c800:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3c804:	10001326 	beq	r2,zero,3c854 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3c808:	e0bffb17 	ldw	r2,-20(fp)
   3c80c:	10800017 	ldw	r2,0(r2)
   3c810:	10c00517 	ldw	r3,20(r2)
   3c814:	e0bfff17 	ldw	r2,-4(fp)
   3c818:	e13ffb17 	ldw	r4,-20(fp)
   3c81c:	e17ffe17 	ldw	r5,-8(fp)
   3c820:	100d883a 	mov	r6,r2
   3c824:	183ee83a 	callr	r3
   3c828:	e0bffc15 	stw	r2,-16(fp)
   3c82c:	e0bffc17 	ldw	r2,-16(fp)
   3c830:	1000060e 	bge	r2,zero,3c84c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   3c834:	003c7440 	call	3c744 <alt_get_errno>
   3c838:	e0fffc17 	ldw	r3,-16(fp)
   3c83c:	00c7c83a 	sub	r3,zero,r3
   3c840:	10c00015 	stw	r3,0(r2)
          return -1;
   3c844:	00bfffc4 	movi	r2,-1
   3c848:	00000a06 	br	3c874 <read+0xe0>
        }
        return rval;
   3c84c:	e0bffc17 	ldw	r2,-16(fp)
   3c850:	00000806 	br	3c874 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3c854:	003c7440 	call	3c744 <alt_get_errno>
   3c858:	00c00344 	movi	r3,13
   3c85c:	10c00015 	stw	r3,0(r2)
   3c860:	00000306 	br	3c870 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3c864:	003c7440 	call	3c744 <alt_get_errno>
   3c868:	00c01444 	movi	r3,81
   3c86c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3c870:	00bfffc4 	movi	r2,-1
}
   3c874:	e037883a 	mov	sp,fp
   3c878:	dfc00117 	ldw	ra,4(sp)
   3c87c:	df000017 	ldw	fp,0(sp)
   3c880:	dec00204 	addi	sp,sp,8
   3c884:	f800283a 	ret

0003c888 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3c888:	defffc04 	addi	sp,sp,-16
   3c88c:	dfc00315 	stw	ra,12(sp)
   3c890:	df000215 	stw	fp,8(sp)
   3c894:	dc000115 	stw	r16,4(sp)
   3c898:	df000104 	addi	fp,sp,4
   3c89c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3c8a0:	e0bfff17 	ldw	r2,-4(fp)
   3c8a4:	108000d0 	cmplti	r2,r2,3
   3c8a8:	1000111e 	bne	r2,zero,3c8f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   3c8ac:	04000134 	movhi	r16,4
   3c8b0:	84072b04 	addi	r16,r16,7340
   3c8b4:	e0bfff17 	ldw	r2,-4(fp)
   3c8b8:	1009883a 	mov	r4,r2
   3c8bc:	01400304 	movi	r5,12
   3c8c0:	002c1540 	call	2c154 <__mulsi3>
   3c8c4:	8085883a 	add	r2,r16,r2
   3c8c8:	10800204 	addi	r2,r2,8
   3c8cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3c8d0:	04000134 	movhi	r16,4
   3c8d4:	84072b04 	addi	r16,r16,7340
   3c8d8:	e0bfff17 	ldw	r2,-4(fp)
   3c8dc:	1009883a 	mov	r4,r2
   3c8e0:	01400304 	movi	r5,12
   3c8e4:	002c1540 	call	2c154 <__mulsi3>
   3c8e8:	8085883a 	add	r2,r16,r2
   3c8ec:	10000015 	stw	zero,0(r2)
  }
}
   3c8f0:	e037883a 	mov	sp,fp
   3c8f4:	dfc00217 	ldw	ra,8(sp)
   3c8f8:	df000117 	ldw	fp,4(sp)
   3c8fc:	dc000017 	ldw	r16,0(sp)
   3c900:	dec00304 	addi	sp,sp,12
   3c904:	f800283a 	ret

0003c908 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3c908:	defff904 	addi	sp,sp,-28
   3c90c:	df000615 	stw	fp,24(sp)
   3c910:	df000604 	addi	fp,sp,24
   3c914:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3c918:	0005303a 	rdctl	r2,status
   3c91c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3c920:	e0fffc17 	ldw	r3,-16(fp)
   3c924:	00bfff84 	movi	r2,-2
   3c928:	1884703a 	and	r2,r3,r2
   3c92c:	1001703a 	wrctl	status,r2
  
  return context;
   3c930:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3c934:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3c938:	d0a01117 	ldw	r2,-32700(gp)
   3c93c:	10c000c4 	addi	r3,r2,3
   3c940:	00bfff04 	movi	r2,-4
   3c944:	1884703a 	and	r2,r3,r2
   3c948:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   3c94c:	d0e01117 	ldw	r3,-32700(gp)
   3c950:	e0bfff17 	ldw	r2,-4(fp)
   3c954:	1885883a 	add	r2,r3,r2
   3c958:	00c20034 	movhi	r3,2048
   3c95c:	18c00004 	addi	r3,r3,0
   3c960:	1880062e 	bgeu	r3,r2,3c97c <sbrk+0x74>
   3c964:	e0bffa17 	ldw	r2,-24(fp)
   3c968:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3c96c:	e0bffd17 	ldw	r2,-12(fp)
   3c970:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3c974:	00bfffc4 	movi	r2,-1
   3c978:	00000b06 	br	3c9a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   3c97c:	d0a01117 	ldw	r2,-32700(gp)
   3c980:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   3c984:	d0e01117 	ldw	r3,-32700(gp)
   3c988:	e0bfff17 	ldw	r2,-4(fp)
   3c98c:	1885883a 	add	r2,r3,r2
   3c990:	d0a01115 	stw	r2,-32700(gp)
   3c994:	e0bffa17 	ldw	r2,-24(fp)
   3c998:	e0bffe15 	stw	r2,-8(fp)
   3c99c:	e0bffe17 	ldw	r2,-8(fp)
   3c9a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   3c9a4:	e0bffb17 	ldw	r2,-20(fp)
} 
   3c9a8:	e037883a 	mov	sp,fp
   3c9ac:	df000017 	ldw	fp,0(sp)
   3c9b0:	dec00104 	addi	sp,sp,4
   3c9b4:	f800283a 	ret

0003c9b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c9b8:	defffe04 	addi	sp,sp,-8
   3c9bc:	dfc00115 	stw	ra,4(sp)
   3c9c0:	df000015 	stw	fp,0(sp)
   3c9c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3c9c8:	00800134 	movhi	r2,4
   3c9cc:	108bbd04 	addi	r2,r2,12020
   3c9d0:	10800017 	ldw	r2,0(r2)
   3c9d4:	10000526 	beq	r2,zero,3c9ec <alt_get_errno+0x34>
   3c9d8:	00800134 	movhi	r2,4
   3c9dc:	108bbd04 	addi	r2,r2,12020
   3c9e0:	10800017 	ldw	r2,0(r2)
   3c9e4:	103ee83a 	callr	r2
   3c9e8:	00000206 	br	3c9f4 <alt_get_errno+0x3c>
   3c9ec:	00800134 	movhi	r2,4
   3c9f0:	10929704 	addi	r2,r2,19036
}
   3c9f4:	e037883a 	mov	sp,fp
   3c9f8:	dfc00117 	ldw	ra,4(sp)
   3c9fc:	df000017 	ldw	fp,0(sp)
   3ca00:	dec00204 	addi	sp,sp,8
   3ca04:	f800283a 	ret

0003ca08 <unlink>:
 *
 * ALT_UNLINK is mapped onto the unlink() system call in alt_syscall.h
 */
 
int ALT_UNLINK (char *name)
{
   3ca08:	defffd04 	addi	sp,sp,-12
   3ca0c:	dfc00215 	stw	ra,8(sp)
   3ca10:	df000115 	stw	fp,4(sp)
   3ca14:	df000104 	addi	fp,sp,4
   3ca18:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(unlink);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   3ca1c:	003c9b80 	call	3c9b8 <alt_get_errno>
   3ca20:	00c01604 	movi	r3,88
   3ca24:	10c00015 	stw	r3,0(r2)
  return -1;
   3ca28:	00bfffc4 	movi	r2,-1
}
   3ca2c:	e037883a 	mov	sp,fp
   3ca30:	dfc00117 	ldw	ra,4(sp)
   3ca34:	df000017 	ldw	fp,0(sp)
   3ca38:	dec00204 	addi	sp,sp,8
   3ca3c:	f800283a 	ret

0003ca40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3ca40:	defffe04 	addi	sp,sp,-8
   3ca44:	dfc00115 	stw	ra,4(sp)
   3ca48:	df000015 	stw	fp,0(sp)
   3ca4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3ca50:	00800134 	movhi	r2,4
   3ca54:	108bbd04 	addi	r2,r2,12020
   3ca58:	10800017 	ldw	r2,0(r2)
   3ca5c:	10000526 	beq	r2,zero,3ca74 <alt_get_errno+0x34>
   3ca60:	00800134 	movhi	r2,4
   3ca64:	108bbd04 	addi	r2,r2,12020
   3ca68:	10800017 	ldw	r2,0(r2)
   3ca6c:	103ee83a 	callr	r2
   3ca70:	00000206 	br	3ca7c <alt_get_errno+0x3c>
   3ca74:	00800134 	movhi	r2,4
   3ca78:	10929704 	addi	r2,r2,19036
}
   3ca7c:	e037883a 	mov	sp,fp
   3ca80:	dfc00117 	ldw	ra,4(sp)
   3ca84:	df000017 	ldw	fp,0(sp)
   3ca88:	dec00204 	addi	sp,sp,8
   3ca8c:	f800283a 	ret

0003ca90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3ca90:	defff904 	addi	sp,sp,-28
   3ca94:	dfc00615 	stw	ra,24(sp)
   3ca98:	df000515 	stw	fp,20(sp)
   3ca9c:	df000504 	addi	fp,sp,20
   3caa0:	e13ffd15 	stw	r4,-12(fp)
   3caa4:	e17ffe15 	stw	r5,-8(fp)
   3caa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3caac:	e0bffd17 	ldw	r2,-12(fp)
   3cab0:	10000716 	blt	r2,zero,3cad0 <write+0x40>
   3cab4:	e13ffd17 	ldw	r4,-12(fp)
   3cab8:	01400304 	movi	r5,12
   3cabc:	002c1540 	call	2c154 <__mulsi3>
   3cac0:	00c00134 	movhi	r3,4
   3cac4:	18c72b04 	addi	r3,r3,7340
   3cac8:	10c5883a 	add	r2,r2,r3
   3cacc:	00000106 	br	3cad4 <write+0x44>
   3cad0:	0005883a 	mov	r2,zero
   3cad4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3cad8:	e0bffb17 	ldw	r2,-20(fp)
   3cadc:	10001f26 	beq	r2,zero,3cb5c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3cae0:	e0bffb17 	ldw	r2,-20(fp)
   3cae4:	10800217 	ldw	r2,8(r2)
   3cae8:	108000cc 	andi	r2,r2,3
   3caec:	10001726 	beq	r2,zero,3cb4c <write+0xbc>
   3caf0:	e0bffb17 	ldw	r2,-20(fp)
   3caf4:	10800017 	ldw	r2,0(r2)
   3caf8:	10800617 	ldw	r2,24(r2)
   3cafc:	10001326 	beq	r2,zero,3cb4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3cb00:	e0bffb17 	ldw	r2,-20(fp)
   3cb04:	10800017 	ldw	r2,0(r2)
   3cb08:	10c00617 	ldw	r3,24(r2)
   3cb0c:	e0bfff17 	ldw	r2,-4(fp)
   3cb10:	e13ffb17 	ldw	r4,-20(fp)
   3cb14:	e17ffe17 	ldw	r5,-8(fp)
   3cb18:	100d883a 	mov	r6,r2
   3cb1c:	183ee83a 	callr	r3
   3cb20:	e0bffc15 	stw	r2,-16(fp)
   3cb24:	e0bffc17 	ldw	r2,-16(fp)
   3cb28:	1000060e 	bge	r2,zero,3cb44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   3cb2c:	003ca400 	call	3ca40 <alt_get_errno>
   3cb30:	e0fffc17 	ldw	r3,-16(fp)
   3cb34:	00c7c83a 	sub	r3,zero,r3
   3cb38:	10c00015 	stw	r3,0(r2)
        return -1;
   3cb3c:	00bfffc4 	movi	r2,-1
   3cb40:	00000a06 	br	3cb6c <write+0xdc>
      }
      return rval;
   3cb44:	e0bffc17 	ldw	r2,-16(fp)
   3cb48:	00000806 	br	3cb6c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3cb4c:	003ca400 	call	3ca40 <alt_get_errno>
   3cb50:	00c00344 	movi	r3,13
   3cb54:	10c00015 	stw	r3,0(r2)
   3cb58:	00000306 	br	3cb68 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3cb5c:	003ca400 	call	3ca40 <alt_get_errno>
   3cb60:	00c01444 	movi	r3,81
   3cb64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3cb68:	00bfffc4 	movi	r2,-1
}
   3cb6c:	e037883a 	mov	sp,fp
   3cb70:	dfc00117 	ldw	ra,4(sp)
   3cb74:	df000017 	ldw	fp,0(sp)
   3cb78:	dec00204 	addi	sp,sp,8
   3cb7c:	f800283a 	ret

0003cb80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3cb80:	defffd04 	addi	sp,sp,-12
   3cb84:	dfc00215 	stw	ra,8(sp)
   3cb88:	df000115 	stw	fp,4(sp)
   3cb8c:	df000104 	addi	fp,sp,4
   3cb90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   3cb94:	e13fff17 	ldw	r4,-4(fp)
   3cb98:	01400134 	movhi	r5,4
   3cb9c:	294bba04 	addi	r5,r5,12008
   3cba0:	003df880 	call	3df88 <alt_dev_llist_insert>
}
   3cba4:	e037883a 	mov	sp,fp
   3cba8:	dfc00117 	ldw	ra,4(sp)
   3cbac:	df000017 	ldw	fp,0(sp)
   3cbb0:	dec00204 	addi	sp,sp,8
   3cbb4:	f800283a 	ret

0003cbb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3cbb8:	defffd04 	addi	sp,sp,-12
   3cbbc:	dfc00215 	stw	ra,8(sp)
   3cbc0:	df000115 	stw	fp,4(sp)
   3cbc4:	df000104 	addi	fp,sp,4
   3cbc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   3cbcc:	003e9b40 	call	3e9b4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   3cbd0:	00800044 	movi	r2,1
   3cbd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3cbd8:	e037883a 	mov	sp,fp
   3cbdc:	dfc00117 	ldw	ra,4(sp)
   3cbe0:	df000017 	ldw	fp,0(sp)
   3cbe4:	dec00204 	addi	sp,sp,8
   3cbe8:	f800283a 	ret

0003cbec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   3cbec:	defffe04 	addi	sp,sp,-8
   3cbf0:	dfc00115 	stw	ra,4(sp)
   3cbf4:	df000015 	stw	fp,0(sp)
   3cbf8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   3cbfc:	01040034 	movhi	r4,4096
   3cc00:	000b883a 	mov	r5,zero
   3cc04:	01800044 	movi	r6,1
   3cc08:	01c0fa04 	movi	r7,1000
   3cc0c:	003d72c0 	call	3d72c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   3cc10:	01000134 	movhi	r4,4
   3cc14:	21079504 	addi	r4,r4,7764
   3cc18:	000b883a 	mov	r5,zero
   3cc1c:	01800404 	movi	r6,16
   3cc20:	003cdb80 	call	3cdb8 <altera_avalon_jtag_uart_init>
   3cc24:	01000134 	movhi	r4,4
   3cc28:	21078b04 	addi	r4,r4,7724
   3cc2c:	003cb800 	call	3cb80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   3cc30:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   3cc34:	01000134 	movhi	r4,4
   3cc38:	210ba304 	addi	r4,r4,11916
   3cc3c:	003e2840 	call	3e284 <alt_fs_reg>
}
   3cc40:	e037883a 	mov	sp,fp
   3cc44:	dfc00117 	ldw	ra,4(sp)
   3cc48:	df000017 	ldw	fp,0(sp)
   3cc4c:	dec00204 	addi	sp,sp,8
   3cc50:	f800283a 	ret

0003cc54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3cc54:	defffa04 	addi	sp,sp,-24
   3cc58:	dfc00515 	stw	ra,20(sp)
   3cc5c:	df000415 	stw	fp,16(sp)
   3cc60:	df000404 	addi	fp,sp,16
   3cc64:	e13ffd15 	stw	r4,-12(fp)
   3cc68:	e17ffe15 	stw	r5,-8(fp)
   3cc6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3cc70:	e0bffd17 	ldw	r2,-12(fp)
   3cc74:	10800017 	ldw	r2,0(r2)
   3cc78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3cc7c:	e0bffc17 	ldw	r2,-16(fp)
   3cc80:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3cc84:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3cc88:	10800217 	ldw	r2,8(r2)
   3cc8c:	1809883a 	mov	r4,r3
   3cc90:	e17ffe17 	ldw	r5,-8(fp)
   3cc94:	e1bfff17 	ldw	r6,-4(fp)
   3cc98:	100f883a 	mov	r7,r2
   3cc9c:	003d27c0 	call	3d27c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3cca0:	e037883a 	mov	sp,fp
   3cca4:	dfc00117 	ldw	ra,4(sp)
   3cca8:	df000017 	ldw	fp,0(sp)
   3ccac:	dec00204 	addi	sp,sp,8
   3ccb0:	f800283a 	ret

0003ccb4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3ccb4:	defffa04 	addi	sp,sp,-24
   3ccb8:	dfc00515 	stw	ra,20(sp)
   3ccbc:	df000415 	stw	fp,16(sp)
   3ccc0:	df000404 	addi	fp,sp,16
   3ccc4:	e13ffd15 	stw	r4,-12(fp)
   3ccc8:	e17ffe15 	stw	r5,-8(fp)
   3cccc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3ccd0:	e0bffd17 	ldw	r2,-12(fp)
   3ccd4:	10800017 	ldw	r2,0(r2)
   3ccd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3ccdc:	e0bffc17 	ldw	r2,-16(fp)
   3cce0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3cce4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3cce8:	10800217 	ldw	r2,8(r2)
   3ccec:	1809883a 	mov	r4,r3
   3ccf0:	e17ffe17 	ldw	r5,-8(fp)
   3ccf4:	e1bfff17 	ldw	r6,-4(fp)
   3ccf8:	100f883a 	mov	r7,r2
   3ccfc:	003d4940 	call	3d494 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3cd00:	e037883a 	mov	sp,fp
   3cd04:	dfc00117 	ldw	ra,4(sp)
   3cd08:	df000017 	ldw	fp,0(sp)
   3cd0c:	dec00204 	addi	sp,sp,8
   3cd10:	f800283a 	ret

0003cd14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3cd14:	defffc04 	addi	sp,sp,-16
   3cd18:	dfc00315 	stw	ra,12(sp)
   3cd1c:	df000215 	stw	fp,8(sp)
   3cd20:	df000204 	addi	fp,sp,8
   3cd24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3cd28:	e0bfff17 	ldw	r2,-4(fp)
   3cd2c:	10800017 	ldw	r2,0(r2)
   3cd30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3cd34:	e0bffe17 	ldw	r2,-8(fp)
   3cd38:	10c00a04 	addi	r3,r2,40
   3cd3c:	e0bfff17 	ldw	r2,-4(fp)
   3cd40:	10800217 	ldw	r2,8(r2)
   3cd44:	1809883a 	mov	r4,r3
   3cd48:	100b883a 	mov	r5,r2
   3cd4c:	003d1200 	call	3d120 <altera_avalon_jtag_uart_close>
}
   3cd50:	e037883a 	mov	sp,fp
   3cd54:	dfc00117 	ldw	ra,4(sp)
   3cd58:	df000017 	ldw	fp,0(sp)
   3cd5c:	dec00204 	addi	sp,sp,8
   3cd60:	f800283a 	ret

0003cd64 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   3cd64:	defffa04 	addi	sp,sp,-24
   3cd68:	dfc00515 	stw	ra,20(sp)
   3cd6c:	df000415 	stw	fp,16(sp)
   3cd70:	df000404 	addi	fp,sp,16
   3cd74:	e13ffd15 	stw	r4,-12(fp)
   3cd78:	e17ffe15 	stw	r5,-8(fp)
   3cd7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3cd80:	e0bffd17 	ldw	r2,-12(fp)
   3cd84:	10800017 	ldw	r2,0(r2)
   3cd88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3cd8c:	e0bffc17 	ldw	r2,-16(fp)
   3cd90:	10800a04 	addi	r2,r2,40
   3cd94:	1009883a 	mov	r4,r2
   3cd98:	e17ffe17 	ldw	r5,-8(fp)
   3cd9c:	e1bfff17 	ldw	r6,-4(fp)
   3cda0:	003d1880 	call	3d188 <altera_avalon_jtag_uart_ioctl>
}
   3cda4:	e037883a 	mov	sp,fp
   3cda8:	dfc00117 	ldw	ra,4(sp)
   3cdac:	df000017 	ldw	fp,0(sp)
   3cdb0:	dec00204 	addi	sp,sp,8
   3cdb4:	f800283a 	ret

0003cdb8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   3cdb8:	defffa04 	addi	sp,sp,-24
   3cdbc:	dfc00515 	stw	ra,20(sp)
   3cdc0:	df000415 	stw	fp,16(sp)
   3cdc4:	df000404 	addi	fp,sp,16
   3cdc8:	e13ffd15 	stw	r4,-12(fp)
   3cdcc:	e17ffe15 	stw	r5,-8(fp)
   3cdd0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3cdd4:	e0bffd17 	ldw	r2,-12(fp)
   3cdd8:	00c00044 	movi	r3,1
   3cddc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   3cde0:	e0bffd17 	ldw	r2,-12(fp)
   3cde4:	10800017 	ldw	r2,0(r2)
   3cde8:	10800104 	addi	r2,r2,4
   3cdec:	e0fffd17 	ldw	r3,-12(fp)
   3cdf0:	18c00817 	ldw	r3,32(r3)
   3cdf4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3cdf8:	e0fffe17 	ldw	r3,-8(fp)
   3cdfc:	e0bfff17 	ldw	r2,-4(fp)
   3ce00:	d8000015 	stw	zero,0(sp)
   3ce04:	1809883a 	mov	r4,r3
   3ce08:	100b883a 	mov	r5,r2
   3ce0c:	01800134 	movhi	r6,4
   3ce10:	31b39e04 	addi	r6,r6,-12680
   3ce14:	e1fffd17 	ldw	r7,-12(fp)
   3ce18:	003e3f80 	call	3e3f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3ce1c:	e0bffd17 	ldw	r2,-12(fp)
   3ce20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3ce24:	e0bffd17 	ldw	r2,-12(fp)
   3ce28:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3ce2c:	00800134 	movhi	r2,4
   3ce30:	1092a304 	addi	r2,r2,19084
   3ce34:	10800017 	ldw	r2,0(r2)
   3ce38:	1809883a 	mov	r4,r3
   3ce3c:	100b883a 	mov	r5,r2
   3ce40:	01800134 	movhi	r6,4
   3ce44:	31b41f04 	addi	r6,r6,-12164
   3ce48:	e1fffd17 	ldw	r7,-12(fp)
   3ce4c:	003dddc0 	call	3dddc <alt_alarm_start>
   3ce50:	1000040e 	bge	r2,zero,3ce64 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   3ce54:	e0bffd17 	ldw	r2,-12(fp)
   3ce58:	00e00034 	movhi	r3,32768
   3ce5c:	18ffffc4 	addi	r3,r3,-1
   3ce60:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3ce64:	e037883a 	mov	sp,fp
   3ce68:	dfc00117 	ldw	ra,4(sp)
   3ce6c:	df000017 	ldw	fp,0(sp)
   3ce70:	dec00204 	addi	sp,sp,8
   3ce74:	f800283a 	ret

0003ce78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   3ce78:	defff804 	addi	sp,sp,-32
   3ce7c:	df000715 	stw	fp,28(sp)
   3ce80:	df000704 	addi	fp,sp,28
   3ce84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3ce88:	e0bfff17 	ldw	r2,-4(fp)
   3ce8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   3ce90:	e0bffb17 	ldw	r2,-20(fp)
   3ce94:	10800017 	ldw	r2,0(r2)
   3ce98:	e0bffc15 	stw	r2,-16(fp)
   3ce9c:	00000106 	br	3cea4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   3cea0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3cea4:	e0bffc17 	ldw	r2,-16(fp)
   3cea8:	10800104 	addi	r2,r2,4
   3ceac:	10800037 	ldwio	r2,0(r2)
   3ceb0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3ceb4:	e0bffd17 	ldw	r2,-12(fp)
   3ceb8:	1080c00c 	andi	r2,r2,768
   3cebc:	10006a26 	beq	r2,zero,3d068 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3cec0:	e0bffd17 	ldw	r2,-12(fp)
   3cec4:	1080400c 	andi	r2,r2,256
   3cec8:	10003326 	beq	r2,zero,3cf98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3cecc:	00800074 	movhi	r2,1
   3ced0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ced4:	e0bffb17 	ldw	r2,-20(fp)
   3ced8:	10800a17 	ldw	r2,40(r2)
   3cedc:	10800044 	addi	r2,r2,1
   3cee0:	1081ffcc 	andi	r2,r2,2047
   3cee4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   3cee8:	e0bffb17 	ldw	r2,-20(fp)
   3ceec:	10c00b17 	ldw	r3,44(r2)
   3cef0:	e0bffe17 	ldw	r2,-8(fp)
   3cef4:	18801426 	beq	r3,r2,3cf48 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   3cef8:	e0bffc17 	ldw	r2,-16(fp)
   3cefc:	10800037 	ldwio	r2,0(r2)
   3cf00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3cf04:	e0bff917 	ldw	r2,-28(fp)
   3cf08:	10a0000c 	andi	r2,r2,32768
   3cf0c:	10001026 	beq	r2,zero,3cf50 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3cf10:	e0bffb17 	ldw	r2,-20(fp)
   3cf14:	10800a17 	ldw	r2,40(r2)
   3cf18:	e0fff917 	ldw	r3,-28(fp)
   3cf1c:	e13ffb17 	ldw	r4,-20(fp)
   3cf20:	2085883a 	add	r2,r4,r2
   3cf24:	10800e04 	addi	r2,r2,56
   3cf28:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3cf2c:	e0bffb17 	ldw	r2,-20(fp)
   3cf30:	10800a17 	ldw	r2,40(r2)
   3cf34:	10800044 	addi	r2,r2,1
   3cf38:	10c1ffcc 	andi	r3,r2,2047
   3cf3c:	e0bffb17 	ldw	r2,-20(fp)
   3cf40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   3cf44:	003fe306 	br	3ced4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   3cf48:	0001883a 	nop
   3cf4c:	00000106 	br	3cf54 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   3cf50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   3cf54:	e0bff917 	ldw	r2,-28(fp)
   3cf58:	10bfffec 	andhi	r2,r2,65535
   3cf5c:	10000e26 	beq	r2,zero,3cf98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3cf60:	e0bffb17 	ldw	r2,-20(fp)
   3cf64:	10c00817 	ldw	r3,32(r2)
   3cf68:	00bfff84 	movi	r2,-2
   3cf6c:	1886703a 	and	r3,r3,r2
   3cf70:	e0bffb17 	ldw	r2,-20(fp)
   3cf74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   3cf78:	e0bffc17 	ldw	r2,-16(fp)
   3cf7c:	10800104 	addi	r2,r2,4
   3cf80:	e0fffb17 	ldw	r3,-20(fp)
   3cf84:	18c00817 	ldw	r3,32(r3)
   3cf88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3cf8c:	e0bffc17 	ldw	r2,-16(fp)
   3cf90:	10800104 	addi	r2,r2,4
   3cf94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3cf98:	e0bffd17 	ldw	r2,-12(fp)
   3cf9c:	1080800c 	andi	r2,r2,512
   3cfa0:	103fbf26 	beq	r2,zero,3cea0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3cfa4:	e0bffd17 	ldw	r2,-12(fp)
   3cfa8:	1004d43a 	srli	r2,r2,16
   3cfac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   3cfb0:	00001406 	br	3d004 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3cfb4:	e0bffc17 	ldw	r2,-16(fp)
   3cfb8:	e0fffb17 	ldw	r3,-20(fp)
   3cfbc:	18c00d17 	ldw	r3,52(r3)
   3cfc0:	e13ffb17 	ldw	r4,-20(fp)
   3cfc4:	20c7883a 	add	r3,r4,r3
   3cfc8:	18c20e04 	addi	r3,r3,2104
   3cfcc:	18c00003 	ldbu	r3,0(r3)
   3cfd0:	18c03fcc 	andi	r3,r3,255
   3cfd4:	18c0201c 	xori	r3,r3,128
   3cfd8:	18ffe004 	addi	r3,r3,-128
   3cfdc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3cfe0:	e0bffb17 	ldw	r2,-20(fp)
   3cfe4:	10800d17 	ldw	r2,52(r2)
   3cfe8:	10800044 	addi	r2,r2,1
   3cfec:	10c1ffcc 	andi	r3,r2,2047
   3cff0:	e0bffb17 	ldw	r2,-20(fp)
   3cff4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3cff8:	e0bffa17 	ldw	r2,-24(fp)
   3cffc:	10bfffc4 	addi	r2,r2,-1
   3d000:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   3d004:	e0bffa17 	ldw	r2,-24(fp)
   3d008:	10000526 	beq	r2,zero,3d020 <altera_avalon_jtag_uart_irq+0x1a8>
   3d00c:	e0bffb17 	ldw	r2,-20(fp)
   3d010:	10c00d17 	ldw	r3,52(r2)
   3d014:	e0bffb17 	ldw	r2,-20(fp)
   3d018:	10800c17 	ldw	r2,48(r2)
   3d01c:	18bfe51e 	bne	r3,r2,3cfb4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   3d020:	e0bffa17 	ldw	r2,-24(fp)
   3d024:	103f9e26 	beq	r2,zero,3cea0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3d028:	e0bffb17 	ldw	r2,-20(fp)
   3d02c:	10c00817 	ldw	r3,32(r2)
   3d030:	00bfff44 	movi	r2,-3
   3d034:	1886703a 	and	r3,r3,r2
   3d038:	e0bffb17 	ldw	r2,-20(fp)
   3d03c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3d040:	e0bffb17 	ldw	r2,-20(fp)
   3d044:	10800017 	ldw	r2,0(r2)
   3d048:	10800104 	addi	r2,r2,4
   3d04c:	e0fffb17 	ldw	r3,-20(fp)
   3d050:	18c00817 	ldw	r3,32(r3)
   3d054:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3d058:	e0bffc17 	ldw	r2,-16(fp)
   3d05c:	10800104 	addi	r2,r2,4
   3d060:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3d064:	003f8e06 	br	3cea0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   3d068:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   3d06c:	e037883a 	mov	sp,fp
   3d070:	df000017 	ldw	fp,0(sp)
   3d074:	dec00104 	addi	sp,sp,4
   3d078:	f800283a 	ret

0003d07c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   3d07c:	defffc04 	addi	sp,sp,-16
   3d080:	df000315 	stw	fp,12(sp)
   3d084:	df000304 	addi	fp,sp,12
   3d088:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3d08c:	e0bfff17 	ldw	r2,-4(fp)
   3d090:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3d094:	e0bffd17 	ldw	r2,-12(fp)
   3d098:	10800017 	ldw	r2,0(r2)
   3d09c:	10800104 	addi	r2,r2,4
   3d0a0:	10800037 	ldwio	r2,0(r2)
   3d0a4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3d0a8:	e0bffe17 	ldw	r2,-8(fp)
   3d0ac:	1081000c 	andi	r2,r2,1024
   3d0b0:	10000a26 	beq	r2,zero,3d0dc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3d0b4:	e0bffd17 	ldw	r2,-12(fp)
   3d0b8:	10800017 	ldw	r2,0(r2)
   3d0bc:	10800104 	addi	r2,r2,4
   3d0c0:	e0fffd17 	ldw	r3,-12(fp)
   3d0c4:	18c00817 	ldw	r3,32(r3)
   3d0c8:	18c10014 	ori	r3,r3,1024
   3d0cc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   3d0d0:	e0bffd17 	ldw	r2,-12(fp)
   3d0d4:	10000915 	stw	zero,36(r2)
   3d0d8:	00000a06 	br	3d104 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3d0dc:	e0bffd17 	ldw	r2,-12(fp)
   3d0e0:	10800917 	ldw	r2,36(r2)
   3d0e4:	00e00034 	movhi	r3,32768
   3d0e8:	18ffff04 	addi	r3,r3,-4
   3d0ec:	18800536 	bltu	r3,r2,3d104 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   3d0f0:	e0bffd17 	ldw	r2,-12(fp)
   3d0f4:	10800917 	ldw	r2,36(r2)
   3d0f8:	10c00044 	addi	r3,r2,1
   3d0fc:	e0bffd17 	ldw	r2,-12(fp)
   3d100:	10c00915 	stw	r3,36(r2)
   3d104:	00800134 	movhi	r2,4
   3d108:	1092a304 	addi	r2,r2,19084
   3d10c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3d110:	e037883a 	mov	sp,fp
   3d114:	df000017 	ldw	fp,0(sp)
   3d118:	dec00104 	addi	sp,sp,4
   3d11c:	f800283a 	ret

0003d120 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3d120:	defffd04 	addi	sp,sp,-12
   3d124:	df000215 	stw	fp,8(sp)
   3d128:	df000204 	addi	fp,sp,8
   3d12c:	e13ffe15 	stw	r4,-8(fp)
   3d130:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3d134:	00000506 	br	3d14c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   3d138:	e0bfff17 	ldw	r2,-4(fp)
   3d13c:	1090000c 	andi	r2,r2,16384
   3d140:	10000226 	beq	r2,zero,3d14c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3d144:	00bffd44 	movi	r2,-11
   3d148:	00000b06 	br	3d178 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3d14c:	e0bffe17 	ldw	r2,-8(fp)
   3d150:	10c00d17 	ldw	r3,52(r2)
   3d154:	e0bffe17 	ldw	r2,-8(fp)
   3d158:	10800c17 	ldw	r2,48(r2)
   3d15c:	18800526 	beq	r3,r2,3d174 <altera_avalon_jtag_uart_close+0x54>
   3d160:	e0bffe17 	ldw	r2,-8(fp)
   3d164:	10c00917 	ldw	r3,36(r2)
   3d168:	e0bffe17 	ldw	r2,-8(fp)
   3d16c:	10800117 	ldw	r2,4(r2)
   3d170:	18bff136 	bltu	r3,r2,3d138 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3d174:	0005883a 	mov	r2,zero
}
   3d178:	e037883a 	mov	sp,fp
   3d17c:	df000017 	ldw	fp,0(sp)
   3d180:	dec00104 	addi	sp,sp,4
   3d184:	f800283a 	ret

0003d188 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3d188:	defffa04 	addi	sp,sp,-24
   3d18c:	df000515 	stw	fp,20(sp)
   3d190:	df000504 	addi	fp,sp,20
   3d194:	e13ffd15 	stw	r4,-12(fp)
   3d198:	e17ffe15 	stw	r5,-8(fp)
   3d19c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   3d1a0:	00bff9c4 	movi	r2,-25
   3d1a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3d1a8:	e0bffe17 	ldw	r2,-8(fp)
   3d1ac:	10da8060 	cmpeqi	r3,r2,27137
   3d1b0:	1800031e 	bne	r3,zero,3d1c0 <altera_avalon_jtag_uart_ioctl+0x38>
   3d1b4:	109a80a0 	cmpeqi	r2,r2,27138
   3d1b8:	1000181e 	bne	r2,zero,3d21c <altera_avalon_jtag_uart_ioctl+0x94>
   3d1bc:	00002606 	br	3d258 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   3d1c0:	e0bffd17 	ldw	r2,-12(fp)
   3d1c4:	10c00117 	ldw	r3,4(r2)
   3d1c8:	00a00034 	movhi	r2,32768
   3d1cc:	10bfffc4 	addi	r2,r2,-1
   3d1d0:	18802226 	beq	r3,r2,3d25c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   3d1d4:	e0bfff17 	ldw	r2,-4(fp)
   3d1d8:	10800017 	ldw	r2,0(r2)
   3d1dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   3d1e0:	e0bffc17 	ldw	r2,-16(fp)
   3d1e4:	10800090 	cmplti	r2,r2,2
   3d1e8:	1000061e 	bne	r2,zero,3d204 <altera_avalon_jtag_uart_ioctl+0x7c>
   3d1ec:	e0fffc17 	ldw	r3,-16(fp)
   3d1f0:	00a00034 	movhi	r2,32768
   3d1f4:	10bfffc4 	addi	r2,r2,-1
   3d1f8:	18800226 	beq	r3,r2,3d204 <altera_avalon_jtag_uart_ioctl+0x7c>
   3d1fc:	e0bffc17 	ldw	r2,-16(fp)
   3d200:	00000206 	br	3d20c <altera_avalon_jtag_uart_ioctl+0x84>
   3d204:	00a00034 	movhi	r2,32768
   3d208:	10bfff84 	addi	r2,r2,-2
   3d20c:	e0fffd17 	ldw	r3,-12(fp)
   3d210:	18800115 	stw	r2,4(r3)
      rc = 0;
   3d214:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3d218:	00001006 	br	3d25c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   3d21c:	e0bffd17 	ldw	r2,-12(fp)
   3d220:	10c00117 	ldw	r3,4(r2)
   3d224:	00a00034 	movhi	r2,32768
   3d228:	10bfffc4 	addi	r2,r2,-1
   3d22c:	18800d26 	beq	r3,r2,3d264 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   3d230:	e0bffd17 	ldw	r2,-12(fp)
   3d234:	10c00917 	ldw	r3,36(r2)
   3d238:	e0bffd17 	ldw	r2,-12(fp)
   3d23c:	10800117 	ldw	r2,4(r2)
   3d240:	1885803a 	cmpltu	r2,r3,r2
   3d244:	10c03fcc 	andi	r3,r2,255
   3d248:	e0bfff17 	ldw	r2,-4(fp)
   3d24c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   3d250:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3d254:	00000306 	br	3d264 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   3d258:	00000306 	br	3d268 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3d25c:	0001883a 	nop
   3d260:	00000106 	br	3d268 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   3d264:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3d268:	e0bffb17 	ldw	r2,-20(fp)
}
   3d26c:	e037883a 	mov	sp,fp
   3d270:	df000017 	ldw	fp,0(sp)
   3d274:	dec00104 	addi	sp,sp,4
   3d278:	f800283a 	ret

0003d27c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3d27c:	defff304 	addi	sp,sp,-52
   3d280:	dfc00c15 	stw	ra,48(sp)
   3d284:	df000b15 	stw	fp,44(sp)
   3d288:	df000b04 	addi	fp,sp,44
   3d28c:	e13ffc15 	stw	r4,-16(fp)
   3d290:	e17ffd15 	stw	r5,-12(fp)
   3d294:	e1bffe15 	stw	r6,-8(fp)
   3d298:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   3d29c:	e0bffd17 	ldw	r2,-12(fp)
   3d2a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3d2a4:	00004706 	br	3d3c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3d2a8:	e0bffc17 	ldw	r2,-16(fp)
   3d2ac:	10800a17 	ldw	r2,40(r2)
   3d2b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   3d2b4:	e0bffc17 	ldw	r2,-16(fp)
   3d2b8:	10800b17 	ldw	r2,44(r2)
   3d2bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   3d2c0:	e0fff717 	ldw	r3,-36(fp)
   3d2c4:	e0bff817 	ldw	r2,-32(fp)
   3d2c8:	18800536 	bltu	r3,r2,3d2e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3d2cc:	e0fff717 	ldw	r3,-36(fp)
   3d2d0:	e0bff817 	ldw	r2,-32(fp)
   3d2d4:	1885c83a 	sub	r2,r3,r2
   3d2d8:	e0bff615 	stw	r2,-40(fp)
   3d2dc:	00000406 	br	3d2f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3d2e0:	00c20004 	movi	r3,2048
   3d2e4:	e0bff817 	ldw	r2,-32(fp)
   3d2e8:	1885c83a 	sub	r2,r3,r2
   3d2ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3d2f0:	e0bff617 	ldw	r2,-40(fp)
   3d2f4:	10001e26 	beq	r2,zero,3d370 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   3d2f8:	e0fffe17 	ldw	r3,-8(fp)
   3d2fc:	e0bff617 	ldw	r2,-40(fp)
   3d300:	1880022e 	bgeu	r3,r2,3d30c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   3d304:	e0bffe17 	ldw	r2,-8(fp)
   3d308:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3d30c:	e0bff817 	ldw	r2,-32(fp)
   3d310:	10800e04 	addi	r2,r2,56
   3d314:	e0fffc17 	ldw	r3,-16(fp)
   3d318:	1885883a 	add	r2,r3,r2
   3d31c:	e13ff517 	ldw	r4,-44(fp)
   3d320:	100b883a 	mov	r5,r2
   3d324:	e1bff617 	ldw	r6,-40(fp)
   3d328:	002eaec0 	call	2eaec <memcpy>
      ptr   += n;
   3d32c:	e0fff517 	ldw	r3,-44(fp)
   3d330:	e0bff617 	ldw	r2,-40(fp)
   3d334:	1885883a 	add	r2,r3,r2
   3d338:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   3d33c:	e0fffe17 	ldw	r3,-8(fp)
   3d340:	e0bff617 	ldw	r2,-40(fp)
   3d344:	1885c83a 	sub	r2,r3,r2
   3d348:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3d34c:	e0fff817 	ldw	r3,-32(fp)
   3d350:	e0bff617 	ldw	r2,-40(fp)
   3d354:	1885883a 	add	r2,r3,r2
   3d358:	10c1ffcc 	andi	r3,r2,2047
   3d35c:	e0bffc17 	ldw	r2,-16(fp)
   3d360:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   3d364:	e0bffe17 	ldw	r2,-8(fp)
   3d368:	00bfcf16 	blt	zero,r2,3d2a8 <altera_avalon_jtag_uart_read+0x2c>
   3d36c:	00000106 	br	3d374 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   3d370:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   3d374:	e0fff517 	ldw	r3,-44(fp)
   3d378:	e0bffd17 	ldw	r2,-12(fp)
   3d37c:	1880141e 	bne	r3,r2,3d3d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3d380:	e0bfff17 	ldw	r2,-4(fp)
   3d384:	1090000c 	andi	r2,r2,16384
   3d388:	1000131e 	bne	r2,zero,3d3d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3d38c:	0001883a 	nop
   3d390:	e0bffc17 	ldw	r2,-16(fp)
   3d394:	10c00a17 	ldw	r3,40(r2)
   3d398:	e0bff717 	ldw	r2,-36(fp)
   3d39c:	1880051e 	bne	r3,r2,3d3b4 <altera_avalon_jtag_uart_read+0x138>
   3d3a0:	e0bffc17 	ldw	r2,-16(fp)
   3d3a4:	10c00917 	ldw	r3,36(r2)
   3d3a8:	e0bffc17 	ldw	r2,-16(fp)
   3d3ac:	10800117 	ldw	r2,4(r2)
   3d3b0:	18bff736 	bltu	r3,r2,3d390 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   3d3b4:	e0bffc17 	ldw	r2,-16(fp)
   3d3b8:	10c00a17 	ldw	r3,40(r2)
   3d3bc:	e0bff717 	ldw	r2,-36(fp)
   3d3c0:	18800726 	beq	r3,r2,3d3e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3d3c4:	e0bffe17 	ldw	r2,-8(fp)
   3d3c8:	00bfb716 	blt	zero,r2,3d2a8 <altera_avalon_jtag_uart_read+0x2c>
   3d3cc:	00000506 	br	3d3e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   3d3d0:	0001883a 	nop
   3d3d4:	00000306 	br	3d3e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   3d3d8:	0001883a 	nop
   3d3dc:	00000106 	br	3d3e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   3d3e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   3d3e4:	e0fff517 	ldw	r3,-44(fp)
   3d3e8:	e0bffd17 	ldw	r2,-12(fp)
   3d3ec:	18801726 	beq	r3,r2,3d44c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3d3f0:	0005303a 	rdctl	r2,status
   3d3f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3d3f8:	e0fffa17 	ldw	r3,-24(fp)
   3d3fc:	00bfff84 	movi	r2,-2
   3d400:	1884703a 	and	r2,r3,r2
   3d404:	1001703a 	wrctl	status,r2
  
  return context;
   3d408:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3d40c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3d410:	e0bffc17 	ldw	r2,-16(fp)
   3d414:	10800817 	ldw	r2,32(r2)
   3d418:	10c00054 	ori	r3,r2,1
   3d41c:	e0bffc17 	ldw	r2,-16(fp)
   3d420:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3d424:	e0bffc17 	ldw	r2,-16(fp)
   3d428:	10800017 	ldw	r2,0(r2)
   3d42c:	10800104 	addi	r2,r2,4
   3d430:	e0fffc17 	ldw	r3,-16(fp)
   3d434:	18c00817 	ldw	r3,32(r3)
   3d438:	10c00035 	stwio	r3,0(r2)
   3d43c:	e0bff917 	ldw	r2,-28(fp)
   3d440:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3d444:	e0bffb17 	ldw	r2,-20(fp)
   3d448:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3d44c:	e0fff517 	ldw	r3,-44(fp)
   3d450:	e0bffd17 	ldw	r2,-12(fp)
   3d454:	18800426 	beq	r3,r2,3d468 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   3d458:	e0fff517 	ldw	r3,-44(fp)
   3d45c:	e0bffd17 	ldw	r2,-12(fp)
   3d460:	1885c83a 	sub	r2,r3,r2
   3d464:	00000606 	br	3d480 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   3d468:	e0bfff17 	ldw	r2,-4(fp)
   3d46c:	1090000c 	andi	r2,r2,16384
   3d470:	10000226 	beq	r2,zero,3d47c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   3d474:	00bffd44 	movi	r2,-11
   3d478:	00000106 	br	3d480 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   3d47c:	00bffec4 	movi	r2,-5
}
   3d480:	e037883a 	mov	sp,fp
   3d484:	dfc00117 	ldw	ra,4(sp)
   3d488:	df000017 	ldw	fp,0(sp)
   3d48c:	dec00204 	addi	sp,sp,8
   3d490:	f800283a 	ret

0003d494 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3d494:	defff304 	addi	sp,sp,-52
   3d498:	dfc00c15 	stw	ra,48(sp)
   3d49c:	df000b15 	stw	fp,44(sp)
   3d4a0:	df000b04 	addi	fp,sp,44
   3d4a4:	e13ffc15 	stw	r4,-16(fp)
   3d4a8:	e17ffd15 	stw	r5,-12(fp)
   3d4ac:	e1bffe15 	stw	r6,-8(fp)
   3d4b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3d4b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3d4b8:	e0bffd17 	ldw	r2,-12(fp)
   3d4bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3d4c0:	00003706 	br	3d5a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3d4c4:	e0bffc17 	ldw	r2,-16(fp)
   3d4c8:	10800c17 	ldw	r2,48(r2)
   3d4cc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   3d4d0:	e0bffc17 	ldw	r2,-16(fp)
   3d4d4:	10800d17 	ldw	r2,52(r2)
   3d4d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   3d4dc:	e0fff817 	ldw	r3,-32(fp)
   3d4e0:	e0bff517 	ldw	r2,-44(fp)
   3d4e4:	1880062e 	bgeu	r3,r2,3d500 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   3d4e8:	e0fff517 	ldw	r3,-44(fp)
   3d4ec:	e0bff817 	ldw	r2,-32(fp)
   3d4f0:	1885c83a 	sub	r2,r3,r2
   3d4f4:	10bfffc4 	addi	r2,r2,-1
   3d4f8:	e0bff615 	stw	r2,-40(fp)
   3d4fc:	00000b06 	br	3d52c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   3d500:	e0bff517 	ldw	r2,-44(fp)
   3d504:	10000526 	beq	r2,zero,3d51c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3d508:	00c20004 	movi	r3,2048
   3d50c:	e0bff817 	ldw	r2,-32(fp)
   3d510:	1885c83a 	sub	r2,r3,r2
   3d514:	e0bff615 	stw	r2,-40(fp)
   3d518:	00000406 	br	3d52c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3d51c:	00c1ffc4 	movi	r3,2047
   3d520:	e0bff817 	ldw	r2,-32(fp)
   3d524:	1885c83a 	sub	r2,r3,r2
   3d528:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3d52c:	e0bff617 	ldw	r2,-40(fp)
   3d530:	10001e26 	beq	r2,zero,3d5ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3d534:	e0fffe17 	ldw	r3,-8(fp)
   3d538:	e0bff617 	ldw	r2,-40(fp)
   3d53c:	1880022e 	bgeu	r3,r2,3d548 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   3d540:	e0bffe17 	ldw	r2,-8(fp)
   3d544:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3d548:	e0bff817 	ldw	r2,-32(fp)
   3d54c:	10820e04 	addi	r2,r2,2104
   3d550:	e0fffc17 	ldw	r3,-16(fp)
   3d554:	1885883a 	add	r2,r3,r2
   3d558:	1009883a 	mov	r4,r2
   3d55c:	e17ffd17 	ldw	r5,-12(fp)
   3d560:	e1bff617 	ldw	r6,-40(fp)
   3d564:	002eaec0 	call	2eaec <memcpy>
      ptr   += n;
   3d568:	e0fffd17 	ldw	r3,-12(fp)
   3d56c:	e0bff617 	ldw	r2,-40(fp)
   3d570:	1885883a 	add	r2,r3,r2
   3d574:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   3d578:	e0fffe17 	ldw	r3,-8(fp)
   3d57c:	e0bff617 	ldw	r2,-40(fp)
   3d580:	1885c83a 	sub	r2,r3,r2
   3d584:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3d588:	e0fff817 	ldw	r3,-32(fp)
   3d58c:	e0bff617 	ldw	r2,-40(fp)
   3d590:	1885883a 	add	r2,r3,r2
   3d594:	10c1ffcc 	andi	r3,r2,2047
   3d598:	e0bffc17 	ldw	r2,-16(fp)
   3d59c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3d5a0:	e0bffe17 	ldw	r2,-8(fp)
   3d5a4:	00bfc716 	blt	zero,r2,3d4c4 <altera_avalon_jtag_uart_write+0x30>
   3d5a8:	00000106 	br	3d5b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   3d5ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3d5b0:	0005303a 	rdctl	r2,status
   3d5b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3d5b8:	e0fffa17 	ldw	r3,-24(fp)
   3d5bc:	00bfff84 	movi	r2,-2
   3d5c0:	1884703a 	and	r2,r3,r2
   3d5c4:	1001703a 	wrctl	status,r2
  
  return context;
   3d5c8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   3d5cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3d5d0:	e0bffc17 	ldw	r2,-16(fp)
   3d5d4:	10800817 	ldw	r2,32(r2)
   3d5d8:	10c00094 	ori	r3,r2,2
   3d5dc:	e0bffc17 	ldw	r2,-16(fp)
   3d5e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3d5e4:	e0bffc17 	ldw	r2,-16(fp)
   3d5e8:	10800017 	ldw	r2,0(r2)
   3d5ec:	10800104 	addi	r2,r2,4
   3d5f0:	e0fffc17 	ldw	r3,-16(fp)
   3d5f4:	18c00817 	ldw	r3,32(r3)
   3d5f8:	10c00035 	stwio	r3,0(r2)
   3d5fc:	e0bff917 	ldw	r2,-28(fp)
   3d600:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3d604:	e0bffb17 	ldw	r2,-20(fp)
   3d608:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3d60c:	e0bffe17 	ldw	r2,-8(fp)
   3d610:	0080110e 	bge	zero,r2,3d658 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   3d614:	e0bfff17 	ldw	r2,-4(fp)
   3d618:	1090000c 	andi	r2,r2,16384
   3d61c:	1000111e 	bne	r2,zero,3d664 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3d620:	0001883a 	nop
   3d624:	e0bffc17 	ldw	r2,-16(fp)
   3d628:	10c00d17 	ldw	r3,52(r2)
   3d62c:	e0bff517 	ldw	r2,-44(fp)
   3d630:	1880051e 	bne	r3,r2,3d648 <altera_avalon_jtag_uart_write+0x1b4>
   3d634:	e0bffc17 	ldw	r2,-16(fp)
   3d638:	10c00917 	ldw	r3,36(r2)
   3d63c:	e0bffc17 	ldw	r2,-16(fp)
   3d640:	10800117 	ldw	r2,4(r2)
   3d644:	18bff736 	bltu	r3,r2,3d624 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   3d648:	e0bffc17 	ldw	r2,-16(fp)
   3d64c:	10c00d17 	ldw	r3,52(r2)
   3d650:	e0bff517 	ldw	r2,-44(fp)
   3d654:	18800526 	beq	r3,r2,3d66c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   3d658:	e0bffe17 	ldw	r2,-8(fp)
   3d65c:	00bfd016 	blt	zero,r2,3d5a0 <altera_avalon_jtag_uart_write+0x10c>
   3d660:	00000306 	br	3d670 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3d664:	0001883a 	nop
   3d668:	00000106 	br	3d670 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   3d66c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   3d670:	e0fffd17 	ldw	r3,-12(fp)
   3d674:	e0bff717 	ldw	r2,-36(fp)
   3d678:	18800426 	beq	r3,r2,3d68c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   3d67c:	e0fffd17 	ldw	r3,-12(fp)
   3d680:	e0bff717 	ldw	r2,-36(fp)
   3d684:	1885c83a 	sub	r2,r3,r2
   3d688:	00000606 	br	3d6a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   3d68c:	e0bfff17 	ldw	r2,-4(fp)
   3d690:	1090000c 	andi	r2,r2,16384
   3d694:	10000226 	beq	r2,zero,3d6a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   3d698:	00bffd44 	movi	r2,-11
   3d69c:	00000106 	br	3d6a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   3d6a0:	00bffec4 	movi	r2,-5
}
   3d6a4:	e037883a 	mov	sp,fp
   3d6a8:	dfc00117 	ldw	ra,4(sp)
   3d6ac:	df000017 	ldw	fp,0(sp)
   3d6b0:	dec00204 	addi	sp,sp,8
   3d6b4:	f800283a 	ret

0003d6b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3d6b8:	defffa04 	addi	sp,sp,-24
   3d6bc:	dfc00515 	stw	ra,20(sp)
   3d6c0:	df000415 	stw	fp,16(sp)
   3d6c4:	df000404 	addi	fp,sp,16
   3d6c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   3d6cc:	0007883a 	mov	r3,zero
   3d6d0:	e0bfff17 	ldw	r2,-4(fp)
   3d6d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3d6d8:	e0bfff17 	ldw	r2,-4(fp)
   3d6dc:	10800104 	addi	r2,r2,4
   3d6e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3d6e4:	0005303a 	rdctl	r2,status
   3d6e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3d6ec:	e0fffd17 	ldw	r3,-12(fp)
   3d6f0:	00bfff84 	movi	r2,-2
   3d6f4:	1884703a 	and	r2,r3,r2
   3d6f8:	1001703a 	wrctl	status,r2
  
  return context;
   3d6fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3d700:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   3d704:	003e8b00 	call	3e8b0 <alt_tick>
   3d708:	e0bffc17 	ldw	r2,-16(fp)
   3d70c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3d710:	e0bffe17 	ldw	r2,-8(fp)
   3d714:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3d718:	e037883a 	mov	sp,fp
   3d71c:	dfc00117 	ldw	ra,4(sp)
   3d720:	df000017 	ldw	fp,0(sp)
   3d724:	dec00204 	addi	sp,sp,8
   3d728:	f800283a 	ret

0003d72c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3d72c:	defff804 	addi	sp,sp,-32
   3d730:	dfc00715 	stw	ra,28(sp)
   3d734:	df000615 	stw	fp,24(sp)
   3d738:	df000604 	addi	fp,sp,24
   3d73c:	e13ffc15 	stw	r4,-16(fp)
   3d740:	e17ffd15 	stw	r5,-12(fp)
   3d744:	e1bffe15 	stw	r6,-8(fp)
   3d748:	e1ffff15 	stw	r7,-4(fp)
   3d74c:	e0bfff17 	ldw	r2,-4(fp)
   3d750:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   3d754:	00800134 	movhi	r2,4
   3d758:	1092a304 	addi	r2,r2,19084
   3d75c:	10800017 	ldw	r2,0(r2)
   3d760:	1000041e 	bne	r2,zero,3d774 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   3d764:	00800134 	movhi	r2,4
   3d768:	1092a304 	addi	r2,r2,19084
   3d76c:	e0fffb17 	ldw	r3,-20(fp)
   3d770:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   3d774:	e0bffc17 	ldw	r2,-16(fp)
   3d778:	10800104 	addi	r2,r2,4
   3d77c:	00c001c4 	movi	r3,7
   3d780:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   3d784:	d8000015 	stw	zero,0(sp)
   3d788:	e13ffd17 	ldw	r4,-12(fp)
   3d78c:	e17ffe17 	ldw	r5,-8(fp)
   3d790:	01800134 	movhi	r6,4
   3d794:	31b5ae04 	addi	r6,r6,-10568
   3d798:	e1fffc17 	ldw	r7,-16(fp)
   3d79c:	003e3f80 	call	3e3f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   3d7a0:	e037883a 	mov	sp,fp
   3d7a4:	dfc00117 	ldw	ra,4(sp)
   3d7a8:	df000017 	ldw	fp,0(sp)
   3d7ac:	dec00204 	addi	sp,sp,8
   3d7b0:	f800283a 	ret

0003d7b4 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   3d7b4:	deffeb04 	addi	sp,sp,-84
   3d7b8:	df001415 	stw	fp,80(sp)
   3d7bc:	dc401315 	stw	r17,76(sp)
   3d7c0:	dc001215 	stw	r16,72(sp)
   3d7c4:	df001204 	addi	fp,sp,72
   3d7c8:	e13ffb15 	stw	r4,-20(fp)
   3d7cc:	e17ffc15 	stw	r5,-16(fp)
   3d7d0:	e1bffd15 	stw	r6,-12(fp)
   3d7d4:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   3d7d8:	e0bffb17 	ldw	r2,-20(fp)
   3d7dc:	10800017 	ldw	r2,0(r2)
   3d7e0:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   3d7e4:	e0bfee17 	ldw	r2,-72(fp)
   3d7e8:	10800217 	ldw	r2,8(r2)
   3d7ec:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   3d7f0:	e0bff717 	ldw	r2,-36(fp)
   3d7f4:	10bfffc4 	addi	r2,r2,-1
   3d7f8:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   3d7fc:	e0bff817 	ldw	r2,-32(fp)
   3d800:	10800044 	addi	r2,r2,1
   3d804:	e0bff815 	stw	r2,-32(fp)
   3d808:	e0bff817 	ldw	r2,-32(fp)
   3d80c:	10800003 	ldbu	r2,0(r2)
   3d810:	10803fcc 	andi	r2,r2,255
   3d814:	1080201c 	xori	r2,r2,128
   3d818:	10bfe004 	addi	r2,r2,-128
   3d81c:	103ff71e 	bne	r2,zero,3d7fc <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   3d820:	e0fff817 	ldw	r3,-32(fp)
   3d824:	e0bff717 	ldw	r2,-36(fp)
   3d828:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   3d82c:	10800044 	addi	r2,r2,1
   3d830:	e0fffc17 	ldw	r3,-16(fp)
   3d834:	1885883a 	add	r2,r3,r2
   3d838:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   3d83c:	d0a02104 	addi	r2,gp,-32636
   3d840:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   3d844:	e0bffc17 	ldw	r2,-16(fp)
   3d848:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   3d84c:	e0bffd17 	ldw	r2,-12(fp)
   3d850:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   3d854:	e0bffe17 	ldw	r2,-8(fp)
   3d858:	e0bff215 	stw	r2,-56(fp)
   3d85c:	e0bffc17 	ldw	r2,-16(fp)
   3d860:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   3d864:	e0bff917 	ldw	r2,-28(fp)
   3d868:	10bfffc4 	addi	r2,r2,-1
   3d86c:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   3d870:	e0bffa17 	ldw	r2,-24(fp)
   3d874:	10800044 	addi	r2,r2,1
   3d878:	e0bffa15 	stw	r2,-24(fp)
   3d87c:	e0bffa17 	ldw	r2,-24(fp)
   3d880:	10800003 	ldbu	r2,0(r2)
   3d884:	10803fcc 	andi	r2,r2,255
   3d888:	1080201c 	xori	r2,r2,128
   3d88c:	10bfe004 	addi	r2,r2,-128
   3d890:	103ff71e 	bne	r2,zero,3d870 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   3d894:	e0fffa17 	ldw	r3,-24(fp)
   3d898:	e0bff917 	ldw	r2,-28(fp)
   3d89c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   3d8a0:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   3d8a4:	e13ff017 	ldw	r4,-64(fp)
   3d8a8:	e13fff15 	stw	r4,-4(fp)
   3d8ac:	e17ff117 	ldw	r5,-60(fp)
   3d8b0:	e1bff217 	ldw	r6,-56(fp)
   3d8b4:	e1fff317 	ldw	r7,-52(fp)
   3d8b8:	e0ffef17 	ldw	r3,-68(fp)
   3d8bc:	1821883a 	mov	r16,r3
   3d8c0:	8007883a 	mov	r3,r16
   3d8c4:	e13fff17 	ldw	r4,-4(fp)
   3d8c8:	003da07a 	break	1
   3d8cc:	1821883a 	mov	r16,r3
   3d8d0:	1023883a 	mov	r17,r2
   3d8d4:	e47ff415 	stw	r17,-48(fp)
   3d8d8:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   3d8dc:	e0bff417 	ldw	r2,-48(fp)
   3d8e0:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   3d8e4:	e0bfef17 	ldw	r2,-68(fp)
   3d8e8:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   3d8ec:	e0bff617 	ldw	r2,-40(fp)
   3d8f0:	1000031e 	bne	r2,zero,3d900 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   3d8f4:	e0bffb17 	ldw	r2,-20(fp)
   3d8f8:	e0fff517 	ldw	r3,-44(fp)
   3d8fc:	10c00115 	stw	r3,4(r2)

  return -error;
   3d900:	e0bff617 	ldw	r2,-40(fp)
   3d904:	0085c83a 	sub	r2,zero,r2
}
   3d908:	e037883a 	mov	sp,fp
   3d90c:	df000217 	ldw	fp,8(sp)
   3d910:	dc400117 	ldw	r17,4(sp)
   3d914:	dc000017 	ldw	r16,0(sp)
   3d918:	dec00304 	addi	sp,sp,12
   3d91c:	f800283a 	ret

0003d920 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   3d920:	defffa04 	addi	sp,sp,-24
   3d924:	df000515 	stw	fp,20(sp)
   3d928:	dc000415 	stw	r16,16(sp)
   3d92c:	df000404 	addi	fp,sp,16
   3d930:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   3d934:	d0a01e04 	addi	r2,gp,-32648
   3d938:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   3d93c:	e0bfff17 	ldw	r2,-4(fp)
   3d940:	10800117 	ldw	r2,4(r2)
   3d944:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   3d948:	e0bffd17 	ldw	r2,-12(fp)
   3d94c:	e0fffc17 	ldw	r3,-16(fp)
   3d950:	1821883a 	mov	r16,r3
   3d954:	8007883a 	mov	r3,r16
   3d958:	1009883a 	mov	r4,r2
   3d95c:	003da07a 	break	1
   3d960:	1821883a 	mov	r16,r3
   3d964:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   3d968:	e0bffc17 	ldw	r2,-16(fp)
   3d96c:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   3d970:	e0bffe17 	ldw	r2,-8(fp)
   3d974:	0085c83a 	sub	r2,zero,r2
}
   3d978:	e037883a 	mov	sp,fp
   3d97c:	df000117 	ldw	fp,4(sp)
   3d980:	dc000017 	ldw	r16,0(sp)
   3d984:	dec00204 	addi	sp,sp,8
   3d988:	f800283a 	ret

0003d98c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   3d98c:	defff204 	addi	sp,sp,-56
   3d990:	df000d15 	stw	fp,52(sp)
   3d994:	dc400c15 	stw	r17,48(sp)
   3d998:	dc000b15 	stw	r16,44(sp)
   3d99c:	df000b04 	addi	fp,sp,44
   3d9a0:	e13ffc15 	stw	r4,-16(fp)
   3d9a4:	e17ffd15 	stw	r5,-12(fp)
   3d9a8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   3d9ac:	d0a01b04 	addi	r2,gp,-32660
   3d9b0:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   3d9b4:	e0bffc17 	ldw	r2,-16(fp)
   3d9b8:	10800117 	ldw	r2,4(r2)
   3d9bc:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   3d9c0:	e0bffd17 	ldw	r2,-12(fp)
   3d9c4:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   3d9c8:	e0bffe17 	ldw	r2,-8(fp)
   3d9cc:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   3d9d0:	e13ff617 	ldw	r4,-40(fp)
   3d9d4:	e13fff15 	stw	r4,-4(fp)
   3d9d8:	e17ff717 	ldw	r5,-36(fp)
   3d9dc:	e1bff817 	ldw	r6,-32(fp)
   3d9e0:	e0fff517 	ldw	r3,-44(fp)
   3d9e4:	1821883a 	mov	r16,r3
   3d9e8:	8007883a 	mov	r3,r16
   3d9ec:	e13fff17 	ldw	r4,-4(fp)
   3d9f0:	003da07a 	break	1
   3d9f4:	1821883a 	mov	r16,r3
   3d9f8:	1023883a 	mov	r17,r2
   3d9fc:	e47ff915 	stw	r17,-28(fp)
   3da00:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   3da04:	e0bff917 	ldw	r2,-28(fp)
   3da08:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   3da0c:	e0bff517 	ldw	r2,-44(fp)
   3da10:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   3da14:	e0bffb17 	ldw	r2,-20(fp)
   3da18:	10000326 	beq	r2,zero,3da28 <alt_hostfs_read+0x9c>
   3da1c:	e0bffb17 	ldw	r2,-20(fp)
   3da20:	0085c83a 	sub	r2,zero,r2
   3da24:	00000106 	br	3da2c <alt_hostfs_read+0xa0>
   3da28:	e0bffa17 	ldw	r2,-24(fp)
}
   3da2c:	e037883a 	mov	sp,fp
   3da30:	df000217 	ldw	fp,8(sp)
   3da34:	dc400117 	ldw	r17,4(sp)
   3da38:	dc000017 	ldw	r16,0(sp)
   3da3c:	dec00304 	addi	sp,sp,12
   3da40:	f800283a 	ret

0003da44 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   3da44:	defff204 	addi	sp,sp,-56
   3da48:	df000d15 	stw	fp,52(sp)
   3da4c:	dc400c15 	stw	r17,48(sp)
   3da50:	dc000b15 	stw	r16,44(sp)
   3da54:	df000b04 	addi	fp,sp,44
   3da58:	e13ffc15 	stw	r4,-16(fp)
   3da5c:	e17ffd15 	stw	r5,-12(fp)
   3da60:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   3da64:	d0a01804 	addi	r2,gp,-32672
   3da68:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   3da6c:	e0bffc17 	ldw	r2,-16(fp)
   3da70:	10800117 	ldw	r2,4(r2)
   3da74:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   3da78:	e0bffd17 	ldw	r2,-12(fp)
   3da7c:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   3da80:	e0bffe17 	ldw	r2,-8(fp)
   3da84:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   3da88:	e13ff617 	ldw	r4,-40(fp)
   3da8c:	e13fff15 	stw	r4,-4(fp)
   3da90:	e17ff717 	ldw	r5,-36(fp)
   3da94:	e1bff817 	ldw	r6,-32(fp)
   3da98:	e0fff517 	ldw	r3,-44(fp)
   3da9c:	1821883a 	mov	r16,r3
   3daa0:	8007883a 	mov	r3,r16
   3daa4:	e13fff17 	ldw	r4,-4(fp)
   3daa8:	003da07a 	break	1
   3daac:	1821883a 	mov	r16,r3
   3dab0:	1023883a 	mov	r17,r2
   3dab4:	e47ff915 	stw	r17,-28(fp)
   3dab8:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   3dabc:	e0bff917 	ldw	r2,-28(fp)
   3dac0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   3dac4:	e0bff517 	ldw	r2,-44(fp)
   3dac8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   3dacc:	e0bffb17 	ldw	r2,-20(fp)
   3dad0:	10000326 	beq	r2,zero,3dae0 <alt_hostfs_write+0x9c>
   3dad4:	e0bffb17 	ldw	r2,-20(fp)
   3dad8:	0085c83a 	sub	r2,zero,r2
   3dadc:	00000106 	br	3dae4 <alt_hostfs_write+0xa0>
   3dae0:	e0bffa17 	ldw	r2,-24(fp)
}
   3dae4:	e037883a 	mov	sp,fp
   3dae8:	df000217 	ldw	fp,8(sp)
   3daec:	dc400117 	ldw	r17,4(sp)
   3daf0:	dc000017 	ldw	r16,0(sp)
   3daf4:	dec00304 	addi	sp,sp,12
   3daf8:	f800283a 	ret

0003dafc <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   3dafc:	defff204 	addi	sp,sp,-56
   3db00:	df000d15 	stw	fp,52(sp)
   3db04:	dc400c15 	stw	r17,48(sp)
   3db08:	dc000b15 	stw	r16,44(sp)
   3db0c:	df000b04 	addi	fp,sp,44
   3db10:	e13ffc15 	stw	r4,-16(fp)
   3db14:	e17ffd15 	stw	r5,-12(fp)
   3db18:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   3db1c:	d0a01504 	addi	r2,gp,-32684
   3db20:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   3db24:	e0bffc17 	ldw	r2,-16(fp)
   3db28:	10800117 	ldw	r2,4(r2)
   3db2c:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   3db30:	e0bffd17 	ldw	r2,-12(fp)
   3db34:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   3db38:	e0bffe17 	ldw	r2,-8(fp)
   3db3c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   3db40:	e13ff617 	ldw	r4,-40(fp)
   3db44:	e13fff15 	stw	r4,-4(fp)
   3db48:	e17ff717 	ldw	r5,-36(fp)
   3db4c:	e1bff817 	ldw	r6,-32(fp)
   3db50:	e0fff517 	ldw	r3,-44(fp)
   3db54:	1821883a 	mov	r16,r3
   3db58:	8007883a 	mov	r3,r16
   3db5c:	e13fff17 	ldw	r4,-4(fp)
   3db60:	003da07a 	break	1
   3db64:	1821883a 	mov	r16,r3
   3db68:	1023883a 	mov	r17,r2
   3db6c:	e47ff915 	stw	r17,-28(fp)
   3db70:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   3db74:	e0bff917 	ldw	r2,-28(fp)
   3db78:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   3db7c:	e0bff517 	ldw	r2,-44(fp)
   3db80:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   3db84:	e0bffb17 	ldw	r2,-20(fp)
   3db88:	10000326 	beq	r2,zero,3db98 <alt_hostfs_seek+0x9c>
   3db8c:	e0bffb17 	ldw	r2,-20(fp)
   3db90:	0085c83a 	sub	r2,zero,r2
   3db94:	00000106 	br	3db9c <alt_hostfs_seek+0xa0>
   3db98:	e0bffa17 	ldw	r2,-24(fp)
}
   3db9c:	e037883a 	mov	sp,fp
   3dba0:	df000217 	ldw	fp,8(sp)
   3dba4:	dc400117 	ldw	r17,4(sp)
   3dba8:	dc000017 	ldw	r16,0(sp)
   3dbac:	dec00304 	addi	sp,sp,12
   3dbb0:	f800283a 	ret

0003dbb4 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   3dbb4:	deffe204 	addi	sp,sp,-120
   3dbb8:	df001d15 	stw	fp,116(sp)
   3dbbc:	dc401c15 	stw	r17,112(sp)
   3dbc0:	dc001b15 	stw	r16,108(sp)
   3dbc4:	df001b04 	addi	fp,sp,108
   3dbc8:	e13ffd15 	stw	r4,-12(fp)
   3dbcc:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   3dbd0:	d0a01204 	addi	r2,gp,-32696
   3dbd4:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   3dbd8:	e0bffd17 	ldw	r2,-12(fp)
   3dbdc:	10800117 	ldw	r2,4(r2)
   3dbe0:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   3dbe4:	e0bfed04 	addi	r2,fp,-76
   3dbe8:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   3dbec:	e13fe717 	ldw	r4,-100(fp)
   3dbf0:	e13fff15 	stw	r4,-4(fp)
   3dbf4:	e17fe817 	ldw	r5,-96(fp)
   3dbf8:	e0ffe617 	ldw	r3,-104(fp)
   3dbfc:	1821883a 	mov	r16,r3
   3dc00:	8007883a 	mov	r3,r16
   3dc04:	e13fff17 	ldw	r4,-4(fp)
   3dc08:	003da07a 	break	1
   3dc0c:	1821883a 	mov	r16,r3
   3dc10:	1023883a 	mov	r17,r2
   3dc14:	e47fe915 	stw	r17,-92(fp)
   3dc18:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   3dc1c:	e0bfe917 	ldw	r2,-92(fp)
   3dc20:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   3dc24:	e0bfe617 	ldw	r2,-104(fp)
   3dc28:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   3dc2c:	e0bfeb17 	ldw	r2,-84(fp)
   3dc30:	1000621e 	bne	r2,zero,3ddbc <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   3dc34:	e0bfed04 	addi	r2,fp,-76
   3dc38:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   3dc3c:	e0bfe517 	ldw	r2,-108(fp)
   3dc40:	10801004 	addi	r2,r2,64
   3dc44:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   3dc48:	00001606 	br	3dca4 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   3dc4c:	e0bfe517 	ldw	r2,-108(fp)
   3dc50:	10800017 	ldw	r2,0(r2)
   3dc54:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   3dc58:	e0bfe517 	ldw	r2,-108(fp)
   3dc5c:	10800017 	ldw	r2,0(r2)
   3dc60:	10803fec 	andhi	r2,r2,255
   3dc64:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   3dc68:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   3dc6c:	e0bfe517 	ldw	r2,-108(fp)
   3dc70:	10800017 	ldw	r2,0(r2)
   3dc74:	10bfc00c 	andi	r2,r2,65280
   3dc78:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   3dc7c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   3dc80:	e0bfe517 	ldw	r2,-108(fp)
   3dc84:	10800017 	ldw	r2,0(r2)
   3dc88:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   3dc8c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   3dc90:	e0bfe517 	ldw	r2,-108(fp)
   3dc94:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   3dc98:	e0bfe517 	ldw	r2,-108(fp)
   3dc9c:	10800104 	addi	r2,r2,4
   3dca0:	e0bfe515 	stw	r2,-108(fp)
   3dca4:	e0ffe517 	ldw	r3,-108(fp)
   3dca8:	e0bfec17 	ldw	r2,-80(fp)
   3dcac:	18bfe736 	bltu	r3,r2,3dc4c <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   3dcb0:	e0bffe17 	ldw	r2,-8(fp)
   3dcb4:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   3dcb8:	e0bfe517 	ldw	r2,-108(fp)
   3dcbc:	10800f04 	addi	r2,r2,60
   3dcc0:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   3dcc4:	00000506 	br	3dcdc <alt_hostfs_fstat+0x128>
      *ptr = 0;
   3dcc8:	e0bfe517 	ldw	r2,-108(fp)
   3dccc:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   3dcd0:	e0bfe517 	ldw	r2,-108(fp)
   3dcd4:	10800104 	addi	r2,r2,4
   3dcd8:	e0bfe515 	stw	r2,-108(fp)
   3dcdc:	e0ffe517 	ldw	r3,-108(fp)
   3dce0:	e0bfec17 	ldw	r2,-80(fp)
   3dce4:	18bff836 	bltu	r3,r2,3dcc8 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   3dce8:	e0bfed17 	ldw	r2,-76(fp)
   3dcec:	1007883a 	mov	r3,r2
   3dcf0:	e0bffe17 	ldw	r2,-8(fp)
   3dcf4:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   3dcf8:	e0bfee17 	ldw	r2,-72(fp)
   3dcfc:	1007883a 	mov	r3,r2
   3dd00:	e0bffe17 	ldw	r2,-8(fp)
   3dd04:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   3dd08:	e0ffef17 	ldw	r3,-68(fp)
   3dd0c:	e0bffe17 	ldw	r2,-8(fp)
   3dd10:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   3dd14:	e0bff017 	ldw	r2,-64(fp)
   3dd18:	1007883a 	mov	r3,r2
   3dd1c:	e0bffe17 	ldw	r2,-8(fp)
   3dd20:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   3dd24:	e0bff117 	ldw	r2,-60(fp)
   3dd28:	1007883a 	mov	r3,r2
   3dd2c:	e0bffe17 	ldw	r2,-8(fp)
   3dd30:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   3dd34:	e0bff217 	ldw	r2,-56(fp)
   3dd38:	1007883a 	mov	r3,r2
   3dd3c:	e0bffe17 	ldw	r2,-8(fp)
   3dd40:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   3dd44:	e0bff317 	ldw	r2,-52(fp)
   3dd48:	1007883a 	mov	r3,r2
   3dd4c:	e0bffe17 	ldw	r2,-8(fp)
   3dd50:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   3dd54:	e0bff517 	ldw	r2,-44(fp)
   3dd58:	1007883a 	mov	r3,r2
   3dd5c:	e0bffe17 	ldw	r2,-8(fp)
   3dd60:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   3dd64:	e0bffa17 	ldw	r2,-24(fp)
   3dd68:	1007883a 	mov	r3,r2
   3dd6c:	e0bffe17 	ldw	r2,-8(fp)
   3dd70:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   3dd74:	e0bffb17 	ldw	r2,-20(fp)
   3dd78:	1007883a 	mov	r3,r2
   3dd7c:	e0bffe17 	ldw	r2,-8(fp)
   3dd80:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   3dd84:	e0bffc17 	ldw	r2,-16(fp)
   3dd88:	1007883a 	mov	r3,r2
   3dd8c:	e0bffe17 	ldw	r2,-8(fp)
   3dd90:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   3dd94:	e0bff717 	ldw	r2,-36(fp)
   3dd98:	1007883a 	mov	r3,r2
   3dd9c:	e0bffe17 	ldw	r2,-8(fp)
   3dda0:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   3dda4:	e0bff917 	ldw	r2,-28(fp)
   3dda8:	1007883a 	mov	r3,r2
   3ddac:	e0bffe17 	ldw	r2,-8(fp)
   3ddb0:	10c00c15 	stw	r3,48(r2)

    return rc;
   3ddb4:	e0bfea17 	ldw	r2,-88(fp)
   3ddb8:	00000206 	br	3ddc4 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   3ddbc:	e0bfeb17 	ldw	r2,-84(fp)
   3ddc0:	0085c83a 	sub	r2,zero,r2
}
   3ddc4:	e037883a 	mov	sp,fp
   3ddc8:	df000217 	ldw	fp,8(sp)
   3ddcc:	dc400117 	ldw	r17,4(sp)
   3ddd0:	dc000017 	ldw	r16,0(sp)
   3ddd4:	dec00304 	addi	sp,sp,12
   3ddd8:	f800283a 	ret

0003dddc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3dddc:	defff504 	addi	sp,sp,-44
   3dde0:	df000a15 	stw	fp,40(sp)
   3dde4:	df000a04 	addi	fp,sp,40
   3dde8:	e13ffc15 	stw	r4,-16(fp)
   3ddec:	e17ffd15 	stw	r5,-12(fp)
   3ddf0:	e1bffe15 	stw	r6,-8(fp)
   3ddf4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3ddf8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3ddfc:	00800134 	movhi	r2,4
   3de00:	1092a304 	addi	r2,r2,19084
   3de04:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3de08:	10003f26 	beq	r2,zero,3df08 <alt_alarm_start+0x12c>
  {
    if (alarm)
   3de0c:	e0bffc17 	ldw	r2,-16(fp)
   3de10:	10003b26 	beq	r2,zero,3df00 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   3de14:	e0bffc17 	ldw	r2,-16(fp)
   3de18:	e0fffe17 	ldw	r3,-8(fp)
   3de1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   3de20:	e0bffc17 	ldw	r2,-16(fp)
   3de24:	e0ffff17 	ldw	r3,-4(fp)
   3de28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3de2c:	0005303a 	rdctl	r2,status
   3de30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3de34:	e0fff817 	ldw	r3,-32(fp)
   3de38:	00bfff84 	movi	r2,-2
   3de3c:	1884703a 	and	r2,r3,r2
   3de40:	1001703a 	wrctl	status,r2
  
  return context;
   3de44:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3de48:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   3de4c:	00800134 	movhi	r2,4
   3de50:	1092a404 	addi	r2,r2,19088
   3de54:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3de58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3de5c:	e0fffd17 	ldw	r3,-12(fp)
   3de60:	e0bff617 	ldw	r2,-40(fp)
   3de64:	1885883a 	add	r2,r3,r2
   3de68:	10c00044 	addi	r3,r2,1
   3de6c:	e0bffc17 	ldw	r2,-16(fp)
   3de70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3de74:	e0bffc17 	ldw	r2,-16(fp)
   3de78:	10c00217 	ldw	r3,8(r2)
   3de7c:	e0bff617 	ldw	r2,-40(fp)
   3de80:	1880042e 	bgeu	r3,r2,3de94 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   3de84:	e0bffc17 	ldw	r2,-16(fp)
   3de88:	00c00044 	movi	r3,1
   3de8c:	10c00405 	stb	r3,16(r2)
   3de90:	00000206 	br	3de9c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   3de94:	e0bffc17 	ldw	r2,-16(fp)
   3de98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3de9c:	e0bffc17 	ldw	r2,-16(fp)
   3dea0:	00c00134 	movhi	r3,4
   3dea4:	18cbd204 	addi	r3,r3,12104
   3dea8:	e0fff915 	stw	r3,-28(fp)
   3deac:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3deb0:	e0bffa17 	ldw	r2,-24(fp)
   3deb4:	e0fff917 	ldw	r3,-28(fp)
   3deb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3debc:	e0bff917 	ldw	r2,-28(fp)
   3dec0:	10c00017 	ldw	r3,0(r2)
   3dec4:	e0bffa17 	ldw	r2,-24(fp)
   3dec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3decc:	e0bff917 	ldw	r2,-28(fp)
   3ded0:	10800017 	ldw	r2,0(r2)
   3ded4:	e0fffa17 	ldw	r3,-24(fp)
   3ded8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3dedc:	e0bff917 	ldw	r2,-28(fp)
   3dee0:	e0fffa17 	ldw	r3,-24(fp)
   3dee4:	10c00015 	stw	r3,0(r2)
   3dee8:	e0bff717 	ldw	r2,-36(fp)
   3deec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3def0:	e0bffb17 	ldw	r2,-20(fp)
   3def4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3def8:	0005883a 	mov	r2,zero
   3defc:	00000306 	br	3df0c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   3df00:	00bffa84 	movi	r2,-22
   3df04:	00000106 	br	3df0c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   3df08:	00bfde84 	movi	r2,-134
  }
}
   3df0c:	e037883a 	mov	sp,fp
   3df10:	df000017 	ldw	fp,0(sp)
   3df14:	dec00104 	addi	sp,sp,4
   3df18:	f800283a 	ret

0003df1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   3df1c:	deffff04 	addi	sp,sp,-4
   3df20:	df000015 	stw	fp,0(sp)
   3df24:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3df28:	e037883a 	mov	sp,fp
   3df2c:	df000017 	ldw	fp,0(sp)
   3df30:	dec00104 	addi	sp,sp,4
   3df34:	f800283a 	ret

0003df38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3df38:	defffe04 	addi	sp,sp,-8
   3df3c:	dfc00115 	stw	ra,4(sp)
   3df40:	df000015 	stw	fp,0(sp)
   3df44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3df48:	00800134 	movhi	r2,4
   3df4c:	108bbd04 	addi	r2,r2,12020
   3df50:	10800017 	ldw	r2,0(r2)
   3df54:	10000526 	beq	r2,zero,3df6c <alt_get_errno+0x34>
   3df58:	00800134 	movhi	r2,4
   3df5c:	108bbd04 	addi	r2,r2,12020
   3df60:	10800017 	ldw	r2,0(r2)
   3df64:	103ee83a 	callr	r2
   3df68:	00000206 	br	3df74 <alt_get_errno+0x3c>
   3df6c:	00800134 	movhi	r2,4
   3df70:	10929704 	addi	r2,r2,19036
}
   3df74:	e037883a 	mov	sp,fp
   3df78:	dfc00117 	ldw	ra,4(sp)
   3df7c:	df000017 	ldw	fp,0(sp)
   3df80:	dec00204 	addi	sp,sp,8
   3df84:	f800283a 	ret

0003df88 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3df88:	defffa04 	addi	sp,sp,-24
   3df8c:	dfc00515 	stw	ra,20(sp)
   3df90:	df000415 	stw	fp,16(sp)
   3df94:	df000404 	addi	fp,sp,16
   3df98:	e13ffe15 	stw	r4,-8(fp)
   3df9c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3dfa0:	e0bffe17 	ldw	r2,-8(fp)
   3dfa4:	10000326 	beq	r2,zero,3dfb4 <alt_dev_llist_insert+0x2c>
   3dfa8:	e0bffe17 	ldw	r2,-8(fp)
   3dfac:	10800217 	ldw	r2,8(r2)
   3dfb0:	1000051e 	bne	r2,zero,3dfc8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   3dfb4:	003df380 	call	3df38 <alt_get_errno>
   3dfb8:	00c00584 	movi	r3,22
   3dfbc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   3dfc0:	00bffa84 	movi	r2,-22
   3dfc4:	00001306 	br	3e014 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3dfc8:	e0bffe17 	ldw	r2,-8(fp)
   3dfcc:	e0ffff17 	ldw	r3,-4(fp)
   3dfd0:	e0fffc15 	stw	r3,-16(fp)
   3dfd4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3dfd8:	e0bffd17 	ldw	r2,-12(fp)
   3dfdc:	e0fffc17 	ldw	r3,-16(fp)
   3dfe0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3dfe4:	e0bffc17 	ldw	r2,-16(fp)
   3dfe8:	10c00017 	ldw	r3,0(r2)
   3dfec:	e0bffd17 	ldw	r2,-12(fp)
   3dff0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3dff4:	e0bffc17 	ldw	r2,-16(fp)
   3dff8:	10800017 	ldw	r2,0(r2)
   3dffc:	e0fffd17 	ldw	r3,-12(fp)
   3e000:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3e004:	e0bffc17 	ldw	r2,-16(fp)
   3e008:	e0fffd17 	ldw	r3,-12(fp)
   3e00c:	10c00015 	stw	r3,0(r2)

  return 0;  
   3e010:	0005883a 	mov	r2,zero
}
   3e014:	e037883a 	mov	sp,fp
   3e018:	dfc00117 	ldw	ra,4(sp)
   3e01c:	df000017 	ldw	fp,0(sp)
   3e020:	dec00204 	addi	sp,sp,8
   3e024:	f800283a 	ret

0003e028 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3e028:	defffd04 	addi	sp,sp,-12
   3e02c:	dfc00215 	stw	ra,8(sp)
   3e030:	df000115 	stw	fp,4(sp)
   3e034:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3e038:	00800134 	movhi	r2,4
   3e03c:	10bae404 	addi	r2,r2,-5232
   3e040:	e0bfff15 	stw	r2,-4(fp)
   3e044:	00000606 	br	3e060 <_do_ctors+0x38>
        (*ctor) (); 
   3e048:	e0bfff17 	ldw	r2,-4(fp)
   3e04c:	10800017 	ldw	r2,0(r2)
   3e050:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3e054:	e0bfff17 	ldw	r2,-4(fp)
   3e058:	10bfff04 	addi	r2,r2,-4
   3e05c:	e0bfff15 	stw	r2,-4(fp)
   3e060:	e0ffff17 	ldw	r3,-4(fp)
   3e064:	00800134 	movhi	r2,4
   3e068:	10bae504 	addi	r2,r2,-5228
   3e06c:	18bff62e 	bgeu	r3,r2,3e048 <_do_ctors+0x20>
        (*ctor) (); 
}
   3e070:	e037883a 	mov	sp,fp
   3e074:	dfc00117 	ldw	ra,4(sp)
   3e078:	df000017 	ldw	fp,0(sp)
   3e07c:	dec00204 	addi	sp,sp,8
   3e080:	f800283a 	ret

0003e084 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3e084:	defffd04 	addi	sp,sp,-12
   3e088:	dfc00215 	stw	ra,8(sp)
   3e08c:	df000115 	stw	fp,4(sp)
   3e090:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3e094:	00800134 	movhi	r2,4
   3e098:	10bae404 	addi	r2,r2,-5232
   3e09c:	e0bfff15 	stw	r2,-4(fp)
   3e0a0:	00000606 	br	3e0bc <_do_dtors+0x38>
        (*dtor) (); 
   3e0a4:	e0bfff17 	ldw	r2,-4(fp)
   3e0a8:	10800017 	ldw	r2,0(r2)
   3e0ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3e0b0:	e0bfff17 	ldw	r2,-4(fp)
   3e0b4:	10bfff04 	addi	r2,r2,-4
   3e0b8:	e0bfff15 	stw	r2,-4(fp)
   3e0bc:	e0ffff17 	ldw	r3,-4(fp)
   3e0c0:	00800134 	movhi	r2,4
   3e0c4:	10bae504 	addi	r2,r2,-5228
   3e0c8:	18bff62e 	bgeu	r3,r2,3e0a4 <_do_dtors+0x20>
        (*dtor) (); 
}
   3e0cc:	e037883a 	mov	sp,fp
   3e0d0:	dfc00117 	ldw	ra,4(sp)
   3e0d4:	df000017 	ldw	fp,0(sp)
   3e0d8:	dec00204 	addi	sp,sp,8
   3e0dc:	f800283a 	ret

0003e0e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3e0e0:	defffa04 	addi	sp,sp,-24
   3e0e4:	dfc00515 	stw	ra,20(sp)
   3e0e8:	df000415 	stw	fp,16(sp)
   3e0ec:	df000404 	addi	fp,sp,16
   3e0f0:	e13ffe15 	stw	r4,-8(fp)
   3e0f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3e0f8:	e0bfff17 	ldw	r2,-4(fp)
   3e0fc:	10800017 	ldw	r2,0(r2)
   3e100:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3e104:	e13ffe17 	ldw	r4,-8(fp)
   3e108:	002f6680 	call	2f668 <strlen>
   3e10c:	10800044 	addi	r2,r2,1
   3e110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3e114:	00000d06 	br	3e14c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3e118:	e0bffc17 	ldw	r2,-16(fp)
   3e11c:	10c00217 	ldw	r3,8(r2)
   3e120:	e0bffd17 	ldw	r2,-12(fp)
   3e124:	1809883a 	mov	r4,r3
   3e128:	e17ffe17 	ldw	r5,-8(fp)
   3e12c:	100d883a 	mov	r6,r2
   3e130:	003e9e80 	call	3e9e8 <memcmp>
   3e134:	1000021e 	bne	r2,zero,3e140 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3e138:	e0bffc17 	ldw	r2,-16(fp)
   3e13c:	00000706 	br	3e15c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3e140:	e0bffc17 	ldw	r2,-16(fp)
   3e144:	10800017 	ldw	r2,0(r2)
   3e148:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3e14c:	e0fffc17 	ldw	r3,-16(fp)
   3e150:	e0bfff17 	ldw	r2,-4(fp)
   3e154:	18bff01e 	bne	r3,r2,3e118 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3e158:	0005883a 	mov	r2,zero
}
   3e15c:	e037883a 	mov	sp,fp
   3e160:	dfc00117 	ldw	ra,4(sp)
   3e164:	df000017 	ldw	fp,0(sp)
   3e168:	dec00204 	addi	sp,sp,8
   3e16c:	f800283a 	ret

0003e170 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3e170:	defffb04 	addi	sp,sp,-20
   3e174:	dfc00415 	stw	ra,16(sp)
   3e178:	df000315 	stw	fp,12(sp)
   3e17c:	df000304 	addi	fp,sp,12
   3e180:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3e184:	00800134 	movhi	r2,4
   3e188:	108bb804 	addi	r2,r2,12000
   3e18c:	10800017 	ldw	r2,0(r2)
   3e190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3e194:	00003106 	br	3e25c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   3e198:	e0bffd17 	ldw	r2,-12(fp)
   3e19c:	10800217 	ldw	r2,8(r2)
   3e1a0:	1009883a 	mov	r4,r2
   3e1a4:	002f6680 	call	2f668 <strlen>
   3e1a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   3e1ac:	e0bffd17 	ldw	r2,-12(fp)
   3e1b0:	10c00217 	ldw	r3,8(r2)
   3e1b4:	e0bffe17 	ldw	r2,-8(fp)
   3e1b8:	10bfffc4 	addi	r2,r2,-1
   3e1bc:	1885883a 	add	r2,r3,r2
   3e1c0:	10800003 	ldbu	r2,0(r2)
   3e1c4:	10803fcc 	andi	r2,r2,255
   3e1c8:	1080201c 	xori	r2,r2,128
   3e1cc:	10bfe004 	addi	r2,r2,-128
   3e1d0:	10800bd8 	cmpnei	r2,r2,47
   3e1d4:	1000031e 	bne	r2,zero,3e1e4 <alt_find_file+0x74>
    {
      len -= 1;
   3e1d8:	e0bffe17 	ldw	r2,-8(fp)
   3e1dc:	10bfffc4 	addi	r2,r2,-1
   3e1e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3e1e4:	e0bffe17 	ldw	r2,-8(fp)
   3e1e8:	e0ffff17 	ldw	r3,-4(fp)
   3e1ec:	1885883a 	add	r2,r3,r2
   3e1f0:	10800003 	ldbu	r2,0(r2)
   3e1f4:	10803fcc 	andi	r2,r2,255
   3e1f8:	1080201c 	xori	r2,r2,128
   3e1fc:	10bfe004 	addi	r2,r2,-128
   3e200:	10800be0 	cmpeqi	r2,r2,47
   3e204:	1000081e 	bne	r2,zero,3e228 <alt_find_file+0xb8>
   3e208:	e0bffe17 	ldw	r2,-8(fp)
   3e20c:	e0ffff17 	ldw	r3,-4(fp)
   3e210:	1885883a 	add	r2,r3,r2
   3e214:	10800003 	ldbu	r2,0(r2)
   3e218:	10803fcc 	andi	r2,r2,255
   3e21c:	1080201c 	xori	r2,r2,128
   3e220:	10bfe004 	addi	r2,r2,-128
   3e224:	10000a1e 	bne	r2,zero,3e250 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   3e228:	e0bffd17 	ldw	r2,-12(fp)
   3e22c:	10c00217 	ldw	r3,8(r2)
   3e230:	e0bffe17 	ldw	r2,-8(fp)
   3e234:	1809883a 	mov	r4,r3
   3e238:	e17fff17 	ldw	r5,-4(fp)
   3e23c:	100d883a 	mov	r6,r2
   3e240:	003e9e80 	call	3e9e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3e244:	1000021e 	bne	r2,zero,3e250 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3e248:	e0bffd17 	ldw	r2,-12(fp)
   3e24c:	00000806 	br	3e270 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   3e250:	e0bffd17 	ldw	r2,-12(fp)
   3e254:	10800017 	ldw	r2,0(r2)
   3e258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3e25c:	e0fffd17 	ldw	r3,-12(fp)
   3e260:	00800134 	movhi	r2,4
   3e264:	108bb804 	addi	r2,r2,12000
   3e268:	18bfcb1e 	bne	r3,r2,3e198 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3e26c:	0005883a 	mov	r2,zero
}
   3e270:	e037883a 	mov	sp,fp
   3e274:	dfc00117 	ldw	ra,4(sp)
   3e278:	df000017 	ldw	fp,0(sp)
   3e27c:	dec00204 	addi	sp,sp,8
   3e280:	f800283a 	ret

0003e284 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   3e284:	defffc04 	addi	sp,sp,-16
   3e288:	df000315 	stw	fp,12(sp)
   3e28c:	df000304 	addi	fp,sp,12
   3e290:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   3e294:	e0bfff17 	ldw	r2,-4(fp)
   3e298:	10800217 	ldw	r2,8(r2)
   3e29c:	1000021e 	bne	r2,zero,3e2a8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   3e2a0:	00bffb44 	movi	r2,-19
   3e2a4:	00001406 	br	3e2f8 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   3e2a8:	e0bfff17 	ldw	r2,-4(fp)
   3e2ac:	00c00134 	movhi	r3,4
   3e2b0:	18cbb804 	addi	r3,r3,12000
   3e2b4:	e0fffd15 	stw	r3,-12(fp)
   3e2b8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3e2bc:	e0bffe17 	ldw	r2,-8(fp)
   3e2c0:	e0fffd17 	ldw	r3,-12(fp)
   3e2c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3e2c8:	e0bffd17 	ldw	r2,-12(fp)
   3e2cc:	10c00017 	ldw	r3,0(r2)
   3e2d0:	e0bffe17 	ldw	r2,-8(fp)
   3e2d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3e2d8:	e0bffd17 	ldw	r2,-12(fp)
   3e2dc:	10800017 	ldw	r2,0(r2)
   3e2e0:	e0fffe17 	ldw	r3,-8(fp)
   3e2e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3e2e8:	e0bffd17 	ldw	r2,-12(fp)
   3e2ec:	e0fffe17 	ldw	r3,-8(fp)
   3e2f0:	10c00015 	stw	r3,0(r2)

  return 0;
   3e2f4:	0005883a 	mov	r2,zero
} 
   3e2f8:	e037883a 	mov	sp,fp
   3e2fc:	df000017 	ldw	fp,0(sp)
   3e300:	dec00104 	addi	sp,sp,4
   3e304:	f800283a 	ret

0003e308 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3e308:	defffa04 	addi	sp,sp,-24
   3e30c:	dfc00515 	stw	ra,20(sp)
   3e310:	df000415 	stw	fp,16(sp)
   3e314:	dc000315 	stw	r16,12(sp)
   3e318:	df000304 	addi	fp,sp,12
   3e31c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3e320:	00bffa04 	movi	r2,-24
   3e324:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3e328:	e03ffd15 	stw	zero,-12(fp)
   3e32c:	00002106 	br	3e3b4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   3e330:	04000134 	movhi	r16,4
   3e334:	84072b04 	addi	r16,r16,7340
   3e338:	e0bffd17 	ldw	r2,-12(fp)
   3e33c:	1009883a 	mov	r4,r2
   3e340:	01400304 	movi	r5,12
   3e344:	002c1540 	call	2c154 <__mulsi3>
   3e348:	8085883a 	add	r2,r16,r2
   3e34c:	10800017 	ldw	r2,0(r2)
   3e350:	1000151e 	bne	r2,zero,3e3a8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   3e354:	04000134 	movhi	r16,4
   3e358:	84072b04 	addi	r16,r16,7340
   3e35c:	e0bffd17 	ldw	r2,-12(fp)
   3e360:	1009883a 	mov	r4,r2
   3e364:	01400304 	movi	r5,12
   3e368:	002c1540 	call	2c154 <__mulsi3>
   3e36c:	8085883a 	add	r2,r16,r2
   3e370:	e0ffff17 	ldw	r3,-4(fp)
   3e374:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   3e378:	00800134 	movhi	r2,4
   3e37c:	108bbc04 	addi	r2,r2,12016
   3e380:	10c00017 	ldw	r3,0(r2)
   3e384:	e0bffd17 	ldw	r2,-12(fp)
   3e388:	1880040e 	bge	r3,r2,3e39c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   3e38c:	00800134 	movhi	r2,4
   3e390:	108bbc04 	addi	r2,r2,12016
   3e394:	e0fffd17 	ldw	r3,-12(fp)
   3e398:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   3e39c:	e0bffd17 	ldw	r2,-12(fp)
   3e3a0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   3e3a4:	00000606 	br	3e3c0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3e3a8:	e0bffd17 	ldw	r2,-12(fp)
   3e3ac:	10800044 	addi	r2,r2,1
   3e3b0:	e0bffd15 	stw	r2,-12(fp)
   3e3b4:	e0bffd17 	ldw	r2,-12(fp)
   3e3b8:	10800810 	cmplti	r2,r2,32
   3e3bc:	103fdc1e 	bne	r2,zero,3e330 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3e3c0:	e0bffe17 	ldw	r2,-8(fp)
}
   3e3c4:	e037883a 	mov	sp,fp
   3e3c8:	dfc00217 	ldw	ra,8(sp)
   3e3cc:	df000117 	ldw	fp,4(sp)
   3e3d0:	dc000017 	ldw	r16,0(sp)
   3e3d4:	dec00304 	addi	sp,sp,12
   3e3d8:	f800283a 	ret

0003e3dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3e3dc:	deffff04 	addi	sp,sp,-4
   3e3e0:	df000015 	stw	fp,0(sp)
   3e3e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   3e3e8:	e037883a 	mov	sp,fp
   3e3ec:	df000017 	ldw	fp,0(sp)
   3e3f0:	dec00104 	addi	sp,sp,4
   3e3f4:	f800283a 	ret

0003e3f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3e3f8:	defff904 	addi	sp,sp,-28
   3e3fc:	dfc00615 	stw	ra,24(sp)
   3e400:	df000515 	stw	fp,20(sp)
   3e404:	df000504 	addi	fp,sp,20
   3e408:	e13ffc15 	stw	r4,-16(fp)
   3e40c:	e17ffd15 	stw	r5,-12(fp)
   3e410:	e1bffe15 	stw	r6,-8(fp)
   3e414:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3e418:	e0800217 	ldw	r2,8(fp)
   3e41c:	d8800015 	stw	r2,0(sp)
   3e420:	e13ffc17 	ldw	r4,-16(fp)
   3e424:	e17ffd17 	ldw	r5,-12(fp)
   3e428:	e1bffe17 	ldw	r6,-8(fp)
   3e42c:	e1ffff17 	ldw	r7,-4(fp)
   3e430:	003e5d00 	call	3e5d0 <alt_iic_isr_register>
}  
   3e434:	e037883a 	mov	sp,fp
   3e438:	dfc00117 	ldw	ra,4(sp)
   3e43c:	df000017 	ldw	fp,0(sp)
   3e440:	dec00204 	addi	sp,sp,8
   3e444:	f800283a 	ret

0003e448 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   3e448:	defff904 	addi	sp,sp,-28
   3e44c:	df000615 	stw	fp,24(sp)
   3e450:	df000604 	addi	fp,sp,24
   3e454:	e13ffe15 	stw	r4,-8(fp)
   3e458:	e17fff15 	stw	r5,-4(fp)
   3e45c:	e0bfff17 	ldw	r2,-4(fp)
   3e460:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3e464:	0005303a 	rdctl	r2,status
   3e468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3e46c:	e0fffb17 	ldw	r3,-20(fp)
   3e470:	00bfff84 	movi	r2,-2
   3e474:	1884703a 	and	r2,r3,r2
   3e478:	1001703a 	wrctl	status,r2
  
  return context;
   3e47c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3e480:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   3e484:	e0bffa17 	ldw	r2,-24(fp)
   3e488:	00c00044 	movi	r3,1
   3e48c:	1884983a 	sll	r2,r3,r2
   3e490:	1007883a 	mov	r3,r2
   3e494:	00800134 	movhi	r2,4
   3e498:	1092a204 	addi	r2,r2,19080
   3e49c:	10800017 	ldw	r2,0(r2)
   3e4a0:	1886b03a 	or	r3,r3,r2
   3e4a4:	00800134 	movhi	r2,4
   3e4a8:	1092a204 	addi	r2,r2,19080
   3e4ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3e4b0:	00800134 	movhi	r2,4
   3e4b4:	1092a204 	addi	r2,r2,19080
   3e4b8:	10800017 	ldw	r2,0(r2)
   3e4bc:	100170fa 	wrctl	ienable,r2
   3e4c0:	e0bffc17 	ldw	r2,-16(fp)
   3e4c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3e4c8:	e0bffd17 	ldw	r2,-12(fp)
   3e4cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3e4d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3e4d4:	e037883a 	mov	sp,fp
   3e4d8:	df000017 	ldw	fp,0(sp)
   3e4dc:	dec00104 	addi	sp,sp,4
   3e4e0:	f800283a 	ret

0003e4e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3e4e4:	defff904 	addi	sp,sp,-28
   3e4e8:	df000615 	stw	fp,24(sp)
   3e4ec:	df000604 	addi	fp,sp,24
   3e4f0:	e13ffe15 	stw	r4,-8(fp)
   3e4f4:	e17fff15 	stw	r5,-4(fp)
   3e4f8:	e0bfff17 	ldw	r2,-4(fp)
   3e4fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3e500:	0005303a 	rdctl	r2,status
   3e504:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3e508:	e0fffb17 	ldw	r3,-20(fp)
   3e50c:	00bfff84 	movi	r2,-2
   3e510:	1884703a 	and	r2,r3,r2
   3e514:	1001703a 	wrctl	status,r2
  
  return context;
   3e518:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3e51c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3e520:	e0bffa17 	ldw	r2,-24(fp)
   3e524:	00c00044 	movi	r3,1
   3e528:	1884983a 	sll	r2,r3,r2
   3e52c:	0084303a 	nor	r2,zero,r2
   3e530:	1007883a 	mov	r3,r2
   3e534:	00800134 	movhi	r2,4
   3e538:	1092a204 	addi	r2,r2,19080
   3e53c:	10800017 	ldw	r2,0(r2)
   3e540:	1886703a 	and	r3,r3,r2
   3e544:	00800134 	movhi	r2,4
   3e548:	1092a204 	addi	r2,r2,19080
   3e54c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3e550:	00800134 	movhi	r2,4
   3e554:	1092a204 	addi	r2,r2,19080
   3e558:	10800017 	ldw	r2,0(r2)
   3e55c:	100170fa 	wrctl	ienable,r2
   3e560:	e0bffc17 	ldw	r2,-16(fp)
   3e564:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3e568:	e0bffd17 	ldw	r2,-12(fp)
   3e56c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3e570:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3e574:	e037883a 	mov	sp,fp
   3e578:	df000017 	ldw	fp,0(sp)
   3e57c:	dec00104 	addi	sp,sp,4
   3e580:	f800283a 	ret

0003e584 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   3e584:	defffc04 	addi	sp,sp,-16
   3e588:	df000315 	stw	fp,12(sp)
   3e58c:	df000304 	addi	fp,sp,12
   3e590:	e13ffe15 	stw	r4,-8(fp)
   3e594:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3e598:	000530fa 	rdctl	r2,ienable
   3e59c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   3e5a0:	e0bfff17 	ldw	r2,-4(fp)
   3e5a4:	00c00044 	movi	r3,1
   3e5a8:	1884983a 	sll	r2,r3,r2
   3e5ac:	1007883a 	mov	r3,r2
   3e5b0:	e0bffd17 	ldw	r2,-12(fp)
   3e5b4:	1884703a 	and	r2,r3,r2
   3e5b8:	1004c03a 	cmpne	r2,r2,zero
   3e5bc:	10803fcc 	andi	r2,r2,255
}
   3e5c0:	e037883a 	mov	sp,fp
   3e5c4:	df000017 	ldw	fp,0(sp)
   3e5c8:	dec00104 	addi	sp,sp,4
   3e5cc:	f800283a 	ret

0003e5d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3e5d0:	defff504 	addi	sp,sp,-44
   3e5d4:	dfc00a15 	stw	ra,40(sp)
   3e5d8:	df000915 	stw	fp,36(sp)
   3e5dc:	df000904 	addi	fp,sp,36
   3e5e0:	e13ffc15 	stw	r4,-16(fp)
   3e5e4:	e17ffd15 	stw	r5,-12(fp)
   3e5e8:	e1bffe15 	stw	r6,-8(fp)
   3e5ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   3e5f0:	00bffa84 	movi	r2,-22
   3e5f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3e5f8:	e0bffd17 	ldw	r2,-12(fp)
   3e5fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3e600:	e0bff817 	ldw	r2,-32(fp)
   3e604:	10800808 	cmpgei	r2,r2,32
   3e608:	1000271e 	bne	r2,zero,3e6a8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3e60c:	0005303a 	rdctl	r2,status
   3e610:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3e614:	e0fffa17 	ldw	r3,-24(fp)
   3e618:	00bfff84 	movi	r2,-2
   3e61c:	1884703a 	and	r2,r3,r2
   3e620:	1001703a 	wrctl	status,r2
  
  return context;
   3e624:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3e628:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   3e62c:	00c10134 	movhi	r3,1028
   3e630:	18d2fc04 	addi	r3,r3,19440
   3e634:	e0bff817 	ldw	r2,-32(fp)
   3e638:	100490fa 	slli	r2,r2,3
   3e63c:	1885883a 	add	r2,r3,r2
   3e640:	e0fffe17 	ldw	r3,-8(fp)
   3e644:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   3e648:	00c10134 	movhi	r3,1028
   3e64c:	18d2fc04 	addi	r3,r3,19440
   3e650:	e0bff817 	ldw	r2,-32(fp)
   3e654:	100490fa 	slli	r2,r2,3
   3e658:	1885883a 	add	r2,r3,r2
   3e65c:	10800104 	addi	r2,r2,4
   3e660:	e0ffff17 	ldw	r3,-4(fp)
   3e664:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3e668:	e0bffe17 	ldw	r2,-8(fp)
   3e66c:	10000526 	beq	r2,zero,3e684 <alt_iic_isr_register+0xb4>
   3e670:	e0bff817 	ldw	r2,-32(fp)
   3e674:	e13ffc17 	ldw	r4,-16(fp)
   3e678:	100b883a 	mov	r5,r2
   3e67c:	003e4480 	call	3e448 <alt_ic_irq_enable>
   3e680:	00000406 	br	3e694 <alt_iic_isr_register+0xc4>
   3e684:	e0bff817 	ldw	r2,-32(fp)
   3e688:	e13ffc17 	ldw	r4,-16(fp)
   3e68c:	100b883a 	mov	r5,r2
   3e690:	003e4e40 	call	3e4e4 <alt_ic_irq_disable>
   3e694:	e0bff715 	stw	r2,-36(fp)
   3e698:	e0bff917 	ldw	r2,-28(fp)
   3e69c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3e6a0:	e0bffb17 	ldw	r2,-20(fp)
   3e6a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3e6a8:	e0bff717 	ldw	r2,-36(fp)
}
   3e6ac:	e037883a 	mov	sp,fp
   3e6b0:	dfc00117 	ldw	ra,4(sp)
   3e6b4:	df000017 	ldw	fp,0(sp)
   3e6b8:	dec00204 	addi	sp,sp,8
   3e6bc:	f800283a 	ret

0003e6c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3e6c0:	defff804 	addi	sp,sp,-32
   3e6c4:	dfc00715 	stw	ra,28(sp)
   3e6c8:	df000615 	stw	fp,24(sp)
   3e6cc:	dc000515 	stw	r16,20(sp)
   3e6d0:	df000504 	addi	fp,sp,20
   3e6d4:	e13ffc15 	stw	r4,-16(fp)
   3e6d8:	e17ffd15 	stw	r5,-12(fp)
   3e6dc:	e1bffe15 	stw	r6,-8(fp)
   3e6e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   3e6e4:	e13ffd17 	ldw	r4,-12(fp)
   3e6e8:	e17ffe17 	ldw	r5,-8(fp)
   3e6ec:	e1bfff17 	ldw	r6,-4(fp)
   3e6f0:	003c5ec0 	call	3c5ec <open>
   3e6f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3e6f8:	e0bffb17 	ldw	r2,-20(fp)
   3e6fc:	10002216 	blt	r2,zero,3e788 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   3e700:	04000134 	movhi	r16,4
   3e704:	84072b04 	addi	r16,r16,7340
   3e708:	e0bffb17 	ldw	r2,-20(fp)
   3e70c:	1009883a 	mov	r4,r2
   3e710:	01400304 	movi	r5,12
   3e714:	002c1540 	call	2c154 <__mulsi3>
   3e718:	8085883a 	add	r2,r16,r2
   3e71c:	10c00017 	ldw	r3,0(r2)
   3e720:	e0bffc17 	ldw	r2,-16(fp)
   3e724:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3e728:	04000134 	movhi	r16,4
   3e72c:	84072b04 	addi	r16,r16,7340
   3e730:	e0bffb17 	ldw	r2,-20(fp)
   3e734:	1009883a 	mov	r4,r2
   3e738:	01400304 	movi	r5,12
   3e73c:	002c1540 	call	2c154 <__mulsi3>
   3e740:	8085883a 	add	r2,r16,r2
   3e744:	10800104 	addi	r2,r2,4
   3e748:	10c00017 	ldw	r3,0(r2)
   3e74c:	e0bffc17 	ldw	r2,-16(fp)
   3e750:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3e754:	04000134 	movhi	r16,4
   3e758:	84072b04 	addi	r16,r16,7340
   3e75c:	e0bffb17 	ldw	r2,-20(fp)
   3e760:	1009883a 	mov	r4,r2
   3e764:	01400304 	movi	r5,12
   3e768:	002c1540 	call	2c154 <__mulsi3>
   3e76c:	8085883a 	add	r2,r16,r2
   3e770:	10800204 	addi	r2,r2,8
   3e774:	10c00017 	ldw	r3,0(r2)
   3e778:	e0bffc17 	ldw	r2,-16(fp)
   3e77c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3e780:	e13ffb17 	ldw	r4,-20(fp)
   3e784:	003c8880 	call	3c888 <alt_release_fd>
  }
} 
   3e788:	e037883a 	mov	sp,fp
   3e78c:	dfc00217 	ldw	ra,8(sp)
   3e790:	df000117 	ldw	fp,4(sp)
   3e794:	dc000017 	ldw	r16,0(sp)
   3e798:	dec00304 	addi	sp,sp,12
   3e79c:	f800283a 	ret

0003e7a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3e7a0:	defffb04 	addi	sp,sp,-20
   3e7a4:	dfc00415 	stw	ra,16(sp)
   3e7a8:	df000315 	stw	fp,12(sp)
   3e7ac:	df000304 	addi	fp,sp,12
   3e7b0:	e13ffd15 	stw	r4,-12(fp)
   3e7b4:	e17ffe15 	stw	r5,-8(fp)
   3e7b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3e7bc:	01000134 	movhi	r4,4
   3e7c0:	21072e04 	addi	r4,r4,7352
   3e7c4:	e17ffd17 	ldw	r5,-12(fp)
   3e7c8:	01800044 	movi	r6,1
   3e7cc:	01c07fc4 	movi	r7,511
   3e7d0:	003e6c00 	call	3e6c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3e7d4:	01000134 	movhi	r4,4
   3e7d8:	21072b04 	addi	r4,r4,7340
   3e7dc:	e17ffe17 	ldw	r5,-8(fp)
   3e7e0:	000d883a 	mov	r6,zero
   3e7e4:	01c07fc4 	movi	r7,511
   3e7e8:	003e6c00 	call	3e6c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3e7ec:	01000134 	movhi	r4,4
   3e7f0:	21073104 	addi	r4,r4,7364
   3e7f4:	e17fff17 	ldw	r5,-4(fp)
   3e7f8:	01800044 	movi	r6,1
   3e7fc:	01c07fc4 	movi	r7,511
   3e800:	003e6c00 	call	3e6c0 <alt_open_fd>
}  
   3e804:	e037883a 	mov	sp,fp
   3e808:	dfc00117 	ldw	ra,4(sp)
   3e80c:	df000017 	ldw	fp,0(sp)
   3e810:	dec00204 	addi	sp,sp,8
   3e814:	f800283a 	ret

0003e818 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3e818:	defffa04 	addi	sp,sp,-24
   3e81c:	df000515 	stw	fp,20(sp)
   3e820:	df000504 	addi	fp,sp,20
   3e824:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3e828:	0005303a 	rdctl	r2,status
   3e82c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3e830:	e0fffc17 	ldw	r3,-16(fp)
   3e834:	00bfff84 	movi	r2,-2
   3e838:	1884703a 	and	r2,r3,r2
   3e83c:	1001703a 	wrctl	status,r2
  
  return context;
   3e840:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3e844:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3e848:	e0bfff17 	ldw	r2,-4(fp)
   3e84c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3e850:	e0bffd17 	ldw	r2,-12(fp)
   3e854:	10800017 	ldw	r2,0(r2)
   3e858:	e0fffd17 	ldw	r3,-12(fp)
   3e85c:	18c00117 	ldw	r3,4(r3)
   3e860:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3e864:	e0bffd17 	ldw	r2,-12(fp)
   3e868:	10800117 	ldw	r2,4(r2)
   3e86c:	e0fffd17 	ldw	r3,-12(fp)
   3e870:	18c00017 	ldw	r3,0(r3)
   3e874:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3e878:	e0bffd17 	ldw	r2,-12(fp)
   3e87c:	e0fffd17 	ldw	r3,-12(fp)
   3e880:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3e884:	e0bffd17 	ldw	r2,-12(fp)
   3e888:	e0fffd17 	ldw	r3,-12(fp)
   3e88c:	10c00015 	stw	r3,0(r2)
   3e890:	e0bffb17 	ldw	r2,-20(fp)
   3e894:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3e898:	e0bffe17 	ldw	r2,-8(fp)
   3e89c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3e8a0:	e037883a 	mov	sp,fp
   3e8a4:	df000017 	ldw	fp,0(sp)
   3e8a8:	dec00104 	addi	sp,sp,4
   3e8ac:	f800283a 	ret

0003e8b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3e8b0:	defffb04 	addi	sp,sp,-20
   3e8b4:	dfc00415 	stw	ra,16(sp)
   3e8b8:	df000315 	stw	fp,12(sp)
   3e8bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3e8c0:	d0a02517 	ldw	r2,-32620(gp)
   3e8c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3e8c8:	d0a6f717 	ldw	r2,-25636(gp)
   3e8cc:	10800044 	addi	r2,r2,1
   3e8d0:	d0a6f715 	stw	r2,-25636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3e8d4:	00002e06 	br	3e990 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3e8d8:	e0bffd17 	ldw	r2,-12(fp)
   3e8dc:	10800017 	ldw	r2,0(r2)
   3e8e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3e8e4:	e0bffd17 	ldw	r2,-12(fp)
   3e8e8:	10800403 	ldbu	r2,16(r2)
   3e8ec:	10803fcc 	andi	r2,r2,255
   3e8f0:	10000426 	beq	r2,zero,3e904 <alt_tick+0x54>
   3e8f4:	d0a6f717 	ldw	r2,-25636(gp)
   3e8f8:	1000021e 	bne	r2,zero,3e904 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   3e8fc:	e0bffd17 	ldw	r2,-12(fp)
   3e900:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3e904:	e0bffd17 	ldw	r2,-12(fp)
   3e908:	10800217 	ldw	r2,8(r2)
   3e90c:	d0e6f717 	ldw	r3,-25636(gp)
   3e910:	18801d36 	bltu	r3,r2,3e988 <alt_tick+0xd8>
   3e914:	e0bffd17 	ldw	r2,-12(fp)
   3e918:	10800403 	ldbu	r2,16(r2)
   3e91c:	10803fcc 	andi	r2,r2,255
   3e920:	1000191e 	bne	r2,zero,3e988 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3e924:	e0bffd17 	ldw	r2,-12(fp)
   3e928:	10c00317 	ldw	r3,12(r2)
   3e92c:	e0bffd17 	ldw	r2,-12(fp)
   3e930:	10800517 	ldw	r2,20(r2)
   3e934:	1009883a 	mov	r4,r2
   3e938:	183ee83a 	callr	r3
   3e93c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3e940:	e0bfff17 	ldw	r2,-4(fp)
   3e944:	1000031e 	bne	r2,zero,3e954 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   3e948:	e13ffd17 	ldw	r4,-12(fp)
   3e94c:	003e8180 	call	3e818 <alt_alarm_stop>
   3e950:	00000d06 	br	3e988 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3e954:	e0bffd17 	ldw	r2,-12(fp)
   3e958:	10c00217 	ldw	r3,8(r2)
   3e95c:	e0bfff17 	ldw	r2,-4(fp)
   3e960:	1887883a 	add	r3,r3,r2
   3e964:	e0bffd17 	ldw	r2,-12(fp)
   3e968:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3e96c:	e0bffd17 	ldw	r2,-12(fp)
   3e970:	10c00217 	ldw	r3,8(r2)
   3e974:	d0a6f717 	ldw	r2,-25636(gp)
   3e978:	1880032e 	bgeu	r3,r2,3e988 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3e97c:	e0bffd17 	ldw	r2,-12(fp)
   3e980:	00c00044 	movi	r3,1
   3e984:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   3e988:	e0bffe17 	ldw	r2,-8(fp)
   3e98c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3e990:	e0fffd17 	ldw	r3,-12(fp)
   3e994:	d0a02504 	addi	r2,gp,-32620
   3e998:	18bfcf1e 	bne	r3,r2,3e8d8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3e99c:	0001883a 	nop
}
   3e9a0:	e037883a 	mov	sp,fp
   3e9a4:	dfc00117 	ldw	ra,4(sp)
   3e9a8:	df000017 	ldw	fp,0(sp)
   3e9ac:	dec00204 	addi	sp,sp,8
   3e9b0:	f800283a 	ret

0003e9b4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   3e9b4:	deffff04 	addi	sp,sp,-4
   3e9b8:	df000015 	stw	fp,0(sp)
   3e9bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3e9c0:	000170fa 	wrctl	ienable,zero
}
   3e9c4:	e037883a 	mov	sp,fp
   3e9c8:	df000017 	ldw	fp,0(sp)
   3e9cc:	dec00104 	addi	sp,sp,4
   3e9d0:	f800283a 	ret

0003e9d4 <atexit>:
   3e9d4:	200b883a 	mov	r5,r4
   3e9d8:	000d883a 	mov	r6,zero
   3e9dc:	0009883a 	mov	r4,zero
   3e9e0:	000f883a 	mov	r7,zero
   3e9e4:	003ea641 	jmpi	3ea64 <__register_exitproc>

0003e9e8 <memcmp>:
   3e9e8:	01c000c4 	movi	r7,3
   3e9ec:	3980192e 	bgeu	r7,r6,3ea54 <memcmp+0x6c>
   3e9f0:	2904b03a 	or	r2,r5,r4
   3e9f4:	11c4703a 	and	r2,r2,r7
   3e9f8:	10000f26 	beq	r2,zero,3ea38 <memcmp+0x50>
   3e9fc:	20c00003 	ldbu	r3,0(r4)
   3ea00:	28800003 	ldbu	r2,0(r5)
   3ea04:	1880151e 	bne	r3,r2,3ea5c <memcmp+0x74>
   3ea08:	31bfff84 	addi	r6,r6,-2
   3ea0c:	01ffffc4 	movi	r7,-1
   3ea10:	00000406 	br	3ea24 <memcmp+0x3c>
   3ea14:	20c00003 	ldbu	r3,0(r4)
   3ea18:	28800003 	ldbu	r2,0(r5)
   3ea1c:	31bfffc4 	addi	r6,r6,-1
   3ea20:	18800e1e 	bne	r3,r2,3ea5c <memcmp+0x74>
   3ea24:	21000044 	addi	r4,r4,1
   3ea28:	29400044 	addi	r5,r5,1
   3ea2c:	31fff91e 	bne	r6,r7,3ea14 <memcmp+0x2c>
   3ea30:	0005883a 	mov	r2,zero
   3ea34:	f800283a 	ret
   3ea38:	20c00017 	ldw	r3,0(r4)
   3ea3c:	28800017 	ldw	r2,0(r5)
   3ea40:	1880041e 	bne	r3,r2,3ea54 <memcmp+0x6c>
   3ea44:	31bfff04 	addi	r6,r6,-4
   3ea48:	21000104 	addi	r4,r4,4
   3ea4c:	29400104 	addi	r5,r5,4
   3ea50:	39bff936 	bltu	r7,r6,3ea38 <memcmp+0x50>
   3ea54:	303fe91e 	bne	r6,zero,3e9fc <memcmp+0x14>
   3ea58:	003ff506 	br	3ea30 <memcmp+0x48>
   3ea5c:	1885c83a 	sub	r2,r3,r2
   3ea60:	f800283a 	ret

0003ea64 <__register_exitproc>:
   3ea64:	defffa04 	addi	sp,sp,-24
   3ea68:	00800134 	movhi	r2,4
   3ea6c:	108bb204 	addi	r2,r2,11976
   3ea70:	dc000315 	stw	r16,12(sp)
   3ea74:	14000017 	ldw	r16,0(r2)
   3ea78:	dc400415 	stw	r17,16(sp)
   3ea7c:	dfc00515 	stw	ra,20(sp)
   3ea80:	80805217 	ldw	r2,328(r16)
   3ea84:	2023883a 	mov	r17,r4
   3ea88:	10003e26 	beq	r2,zero,3eb84 <__register_exitproc+0x120>
   3ea8c:	10c00117 	ldw	r3,4(r2)
   3ea90:	020007c4 	movi	r8,31
   3ea94:	40c0180e 	bge	r8,r3,3eaf8 <__register_exitproc+0x94>
   3ea98:	008000f4 	movhi	r2,3
   3ea9c:	10b8d004 	addi	r2,r2,-7360
   3eaa0:	1000061e 	bne	r2,zero,3eabc <__register_exitproc+0x58>
   3eaa4:	00bfffc4 	movi	r2,-1
   3eaa8:	dfc00517 	ldw	ra,20(sp)
   3eaac:	dc400417 	ldw	r17,16(sp)
   3eab0:	dc000317 	ldw	r16,12(sp)
   3eab4:	dec00604 	addi	sp,sp,24
   3eab8:	f800283a 	ret
   3eabc:	01006404 	movi	r4,400
   3eac0:	d9400015 	stw	r5,0(sp)
   3eac4:	d9800115 	stw	r6,4(sp)
   3eac8:	d9c00215 	stw	r7,8(sp)
   3eacc:	002e3400 	call	2e340 <malloc>
   3ead0:	d9400017 	ldw	r5,0(sp)
   3ead4:	d9800117 	ldw	r6,4(sp)
   3ead8:	d9c00217 	ldw	r7,8(sp)
   3eadc:	103ff126 	beq	r2,zero,3eaa4 <__register_exitproc+0x40>
   3eae0:	80c05217 	ldw	r3,328(r16)
   3eae4:	10000115 	stw	zero,4(r2)
   3eae8:	10c00015 	stw	r3,0(r2)
   3eaec:	80805215 	stw	r2,328(r16)
   3eaf0:	10006215 	stw	zero,392(r2)
   3eaf4:	10006315 	stw	zero,396(r2)
   3eaf8:	10c00117 	ldw	r3,4(r2)
   3eafc:	88000d1e 	bne	r17,zero,3eb34 <__register_exitproc+0xd0>
   3eb00:	19000084 	addi	r4,r3,2
   3eb04:	2109883a 	add	r4,r4,r4
   3eb08:	18c00044 	addi	r3,r3,1
   3eb0c:	2109883a 	add	r4,r4,r4
   3eb10:	1109883a 	add	r4,r2,r4
   3eb14:	10c00115 	stw	r3,4(r2)
   3eb18:	0005883a 	mov	r2,zero
   3eb1c:	21400015 	stw	r5,0(r4)
   3eb20:	dfc00517 	ldw	ra,20(sp)
   3eb24:	dc400417 	ldw	r17,16(sp)
   3eb28:	dc000317 	ldw	r16,12(sp)
   3eb2c:	dec00604 	addi	sp,sp,24
   3eb30:	f800283a 	ret
   3eb34:	02400044 	movi	r9,1
   3eb38:	12806217 	ldw	r10,392(r2)
   3eb3c:	48d2983a 	sll	r9,r9,r3
   3eb40:	19000804 	addi	r4,r3,32
   3eb44:	18d1883a 	add	r8,r3,r3
   3eb48:	2109883a 	add	r4,r4,r4
   3eb4c:	4211883a 	add	r8,r8,r8
   3eb50:	2109883a 	add	r4,r4,r4
   3eb54:	1109883a 	add	r4,r2,r4
   3eb58:	1211883a 	add	r8,r2,r8
   3eb5c:	5254b03a 	or	r10,r10,r9
   3eb60:	21c02215 	stw	r7,136(r4)
   3eb64:	41802215 	stw	r6,136(r8)
   3eb68:	12806215 	stw	r10,392(r2)
   3eb6c:	01000084 	movi	r4,2
   3eb70:	893fe31e 	bne	r17,r4,3eb00 <__register_exitproc+0x9c>
   3eb74:	11006317 	ldw	r4,396(r2)
   3eb78:	2252b03a 	or	r9,r4,r9
   3eb7c:	12406315 	stw	r9,396(r2)
   3eb80:	003fdf06 	br	3eb00 <__register_exitproc+0x9c>
   3eb84:	00810134 	movhi	r2,1028
   3eb88:	10933c04 	addi	r2,r2,19696
   3eb8c:	80805215 	stw	r2,328(r16)
   3eb90:	003fbe06 	br	3ea8c <__register_exitproc+0x28>
