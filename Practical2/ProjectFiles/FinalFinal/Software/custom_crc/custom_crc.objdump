
custom_crc.elf:     file format elf32-littlenios2
custom_crc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000d9bc memsz 0x0000d9bc flags r-x
    LOAD off    0x0000e9dc vaddr 0x0004d9dc paddr 0x0004f434 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x00010e8c vaddr 0x00050e8c paddr 0x00050e8c align 2**12
         filesz 0x00000000 memsz 0x000026f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cec8  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000095c  0004d080  0004d080  0000e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0004d9dc  0004f434  0000e9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000026f4  00050e8c  00050e8c  00010e8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022eb6  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009186  00000000  00000000  000340e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a427  00000000  00000000  0003d26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001920  00000000  00000000  00047694  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002fa9  00000000  00000000  00048fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010dc7  00000000  00000000  0004bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005cd24  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005cd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000608c2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000608c5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000608c8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000608c9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000608ca  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000608ce  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000608d2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000608d6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000608df  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000608e8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  000608f1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000061  00000000  00000000  000608f8  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003c553  00000000  00000000  00060959  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
0004d080 l    d  .rodata	00000000 .rodata
0004d9dc l    d  .rwdata	00000000 .rwdata
00050e8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../custom_crc_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
000402f4 l     F .text	0000008c reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0004d9dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00041ccc l     F .text	00000034 __sprint_r
0004d81a l     O .rodata	00000010 blanks.3515
0004d82a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00043eb4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00045924 l     F .text	00000008 __fp_lock
0004592c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0004d85c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004d9a4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00049f08 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004a694 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a894 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a9b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004aa18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004ab18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004ac0c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004acf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004aed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004f424 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004b148 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004b288 l     F .text	00000038 alt_dev_reg
0004e398 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004b598 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004b79c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004bdd8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004c170 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c610 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004c768 l     F .text	00000050 alt_get_errno
0004c7b8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
000483e4 g     F .text	00000074 _mprec_log10
000484d4 g     F .text	00000084 __any_on
00049154 g     F .text	00000064 _isatty_r
0004d88c g     O .rodata	00000028 __mprec_tinytens
0004ae1c g     F .text	00000078 alt_main
00041ac4 g     F .text	00000044 __ashldi3
00041ba8 g     F .text	00000084 _puts_r
000532f0 g     O .bss	00000100 alt_irq
000491b8 g     F .text	0000006c _lseek_r
0004f434 g       *ABS*	00000000 __flash_rwdata_start
0004a310 g     F .text	0000005c __eqdf2
00053580 g       *ABS*	00000000 __alt_heap_start
00041b6c g     F .text	0000003c printf
00048cf8 g     F .text	0000005c __sseek
000459c8 g     F .text	0000010c __sinit
00046660 g     F .text	0000009c _setlocale_r
00045940 g     F .text	00000078 __sfmoreglue
0004aeb4 g     F .text	00000020 __malloc_unlock
00050eb8 g     O .bss	00000004 altera_avalon_timer_ts_freq
000472a0 g     F .text	0000018c memmove
000459b8 g     F .text	00000010 _cleanup
00047508 g     F .text	000000a8 _Balloc
0004a3c8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000490ec g     F .text	00000068 _fstat_r
00050ea4 g     O .bss	00000004 errno
00050eac g     O .bss	00000004 alt_argv
000573f8 g       *ABS*	00000000 _gp
0004e218 g     O .rwdata	00000180 alt_fd_list
0004cbbc g     F .text	00000090 alt_find_dev
00047160 g     F .text	00000140 memcpy
00045934 g     F .text	0000000c _cleanup_r
0004a4ec g     F .text	000000d4 __floatsidf
0004c6f0 g     F .text	00000078 alt_io_redirect
0004a490 g     F .text	0000005c __ltdf2
0004d080 g       *ABS*	00000000 __DTOR_END__
00041c2c g     F .text	00000014 puts
00048340 g     F .text	000000a4 __ratio
0004b99c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00041b40 g     F .text	0000002c _printf_r
0004a7b4 g     F .text	00000008 __udivsi3
0004ab68 g     F .text	000000a4 isatty
0004d8dc g     O .rodata	000000c8 __mprec_tens
000466fc g     F .text	0000000c __locale_charset
0004ce34 g     F .text	0000008c alt_icache_flush
00050ea0 g     O .bss	00000004 __malloc_top_pad
0004f400 g     O .rwdata	00000004 __mb_cur_max
00046708 g     F .text	0000000c _localeconv_r
00047938 g     F .text	0000003c __i2b
0004601c g     F .text	000004e4 __sfvwrite_r
00048bb8 g     F .text	00000064 _sbrk_r
00049224 g     F .text	0000006c _read_r
0004dddc g     O .rwdata	0000000c __lc_ctype
0004f41c g     O .rwdata	00000004 alt_max_fd
00041954 g     F .text	00000104 __unpack_d
00048f9c g     F .text	0000013c _fclose_r
000458f4 g     F .text	00000030 fflush
00050e9c g     O .bss	00000004 __malloc_max_sbrked_mem
0004a25c g     F .text	00000054 __adddf3
000480b4 g     F .text	00000148 __b2d
000498e0 g     F .text	00000628 __umoddi3
0004ad48 g     F .text	000000d4 lseek
0004f3f8 g     O .rwdata	00000004 _global_impure_ptr
00048558 g     F .text	000005fc _realloc_r
00053580 g       *ABS*	00000000 __bss_end
0004c520 g     F .text	000000f0 alt_iic_isr_register
0004ca98 g     F .text	00000104 alt_tick
00049290 g     F .text	00000650 __udivdi3
0004d8b4 g     O .rodata	00000028 __mprec_bigtens
0004771c g     F .text	00000104 __s2b
00041458 g     F .text	0000011c __floatunsidf
00047e54 g     F .text	00000058 __mcmp
00045be0 g     F .text	00000018 __fp_lock_all
0004c4d4 g     F .text	0000004c alt_ic_irq_enabled
0004ca00 g     F .text	00000098 alt_alarm_stop
00050ebc g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	000000cc alt_irq_handler
0004e1f0 g     O .rwdata	00000028 alt_dev_null
0004c154 g     F .text	0000001c alt_dcache_flush_all
00047820 g     F .text	00000068 __hi0bits
0004a5c0 g     F .text	000000d4 __fixdfsi
0004f434 g       *ABS*	00000000 __ram_rwdata_end
0004f414 g     O .rwdata	00000008 alt_dev_list
0004b198 g     F .text	000000f0 write
00040380 g     F .text	000000ec crcSlow
0004bfec g     F .text	00000028 alt_timestamp_freq
0004d9dc g       *ABS*	00000000 __ram_rodata_end
0004aa68 g     F .text	000000b0 fstat
00041a80 g     F .text	00000044 __lshrdi3
00047bcc g     F .text	0000012c __pow5mult
00050e94 g     O .bss	00000004 __nlocale_changed
0004a7bc g     F .text	00000008 __umodsi3
00053580 g       *ABS*	00000000 end
000512f0 g     O .bss	00002000 data_buffer_region
0004b4d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004d080 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0004be4c g     F .text	00000088 alt_avalon_timer_sc_init
00041684 g     F .text	000000ac __clzsi2
0004bbb4 g     F .text	00000224 altera_avalon_jtag_uart_write
00045bd0 g     F .text	00000004 __sfp_lock_acquire
00047068 g     F .text	000000f8 memchr
00041d00 g     F .text	00001e7c ___vfprintf_internal_r
00045d4c g     F .text	000002d0 _free_r
00043d14 g     F .text	000001a0 __call_exitprocs
00050e90 g     O .bss	00000004 __mlocale_changed
0004f404 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00050ec0 g     O .bss	00000004 _alt_tick_rate
00047cf8 g     F .text	0000015c __lshift
00050ec4 g     O .bss	00000004 _alt_nticks
0004af24 g     F .text	000000f4 read
0004b2f4 g     F .text	00000080 alt_sys_init
0004cf50 g     F .text	00000130 __register_exitproc
00047974 g     F .text	00000258 __multiply
0004b840 g     F .text	00000068 altera_avalon_jtag_uart_close
00041a58 g     F .text	00000028 __mulsi3
0004d9dc g       *ABS*	00000000 __ram_rwdata_start
0004d080 g       *ABS*	00000000 __ram_rodata_start
00050ec8 g     O .bss	00000028 __malloc_current_mallinfo
000481fc g     F .text	00000144 __d2b
0004b374 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004cd60 g     F .text	000000d4 alt_get_fd
0004a7c4 g     F .text	000000d0 __fpcmp_parts_d
00048f38 g     F .text	00000064 _close_r
0004ced4 g     F .text	0000007c memcmp
0004b434 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00053580 g       *ABS*	00000000 __alt_stack_base
0004b484 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043ba0 g     F .text	00000174 __swsetup_r
000412a4 g     F .text	000001b4 __divdf3
0004046c g     F .text	000000bc crcInit
00045ad4 g     F .text	000000fc __sfp
00048458 g     F .text	0000007c __copybits
0004dde8 g     O .rwdata	00000408 __malloc_av_
00045bdc g     F .text	00000004 __sinit_lock_release
00040fc0 g     F .text	000002e4 __muldf3
00048c1c g     F .text	00000054 __sread
000401f4 g     F .text	00000100 crcCI
0004cc4c g     F .text	00000114 alt_find_file
0004c1c0 g     F .text	000000a0 alt_dev_llist_insert
0004ae94 g     F .text	00000020 __malloc_lock
0004b098 g     F .text	000000b0 sbrk
0004570c g     F .text	000001e8 _fflush_r
00048e6c g     F .text	000000cc _calloc_r
00050e8c g       *ABS*	00000000 __bss_start
0004742c g     F .text	000000dc memset
000405ec g     F .text	000009d4 main
00050eb0 g     O .bss	00000004 alt_envp
00050e98 g     O .bss	00000004 __malloc_max_total_mem
0004b3d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00048d54 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
000490d8 g     F .text	00000014 fclose
0004bed4 g     F .text	00000088 alt_timestamp_start
000533f0 g     O .bss	00000190 _atexit0
000440f0 g     F .text	0000161c _dtoa_r
000468e4 g     F .text	00000784 _malloc_r
0004f420 g     O .rwdata	00000004 alt_errno
00046500 g     F .text	000000a8 _fwalk
0004a708 g     F .text	00000050 __divsi3
0004d6bc g     O .rodata	00000014 __thenan_df
00045c10 g     F .text	0000013c _malloc_trim_r
0004d080 g       *ABS*	00000000 __CTOR_END__
00048d5c g     F .text	000000a4 strcmp
0004d080 g       *ABS*	00000000 __flash_rodata_start
0004d080 g       *ABS*	00000000 __DTOR_LIST__
0004a36c g     F .text	0000005c __nedf2
0004b2c0 g     F .text	00000034 alt_irq_init
0004b018 g     F .text	00000080 alt_release_fd
0004d6d0 g     O .rodata	00000100 __clz_tab
00050e8c g     O .bss	00000004 _PathLocale
0004cec0 g     F .text	00000014 atexit
00048e00 g     F .text	0000006c _write_r
00046714 g     F .text	0000001c setlocale
0004f3fc g     O .rwdata	00000004 _impure_ptr
00050ea8 g     O .bss	00000004 alt_argc
00050eb4 g     O .bss	00000004 altera_avalon_timer_ts_base
0004c2bc g     F .text	0000005c _do_dtors
00040528 g     F .text	000000c4 crcFast
00040020 g       .exceptions	00000000 alt_irq_entry
00048054 g     F .text	00000060 __ulp
00048b54 g     F .text	00000038 __isinfd
00045bf8 g     F .text	00000018 __fp_unlock_all
0004f40c g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00046730 g     F .text	0000000c localeconv
0004bf5c g     F .text	00000090 alt_timestamp
0004c348 g     F .text	00000050 alt_ic_isr_register
0004f434 g       *ABS*	00000000 _edata
00053580 g       *ABS*	00000000 _end
00050ef0 g     O .bss	00000400 crcTable
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004b8a8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004c434 g     F .text	000000a0 alt_ic_irq_disable
00048c70 g     F .text	00000088 __swrite
0004f408 g     O .rwdata	00000004 __malloc_trim_threshold
0004cb9c g     F .text	00000020 altera_nios2_qsys_irq_init
00041b08 g     F .text	00000038 exit
000465a8 g     F .text	000000b8 _fwalk_reent
00047eac g     F .text	000001a8 __mdiff
0004a758 g     F .text	0000005c __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00045bd4 g     F .text	00000004 __sfp_lock_release
00048b8c g     F .text	0000002c __isnand
0004a9dc g     F .text	0000003c _exit
0004c014 g     F .text	00000140 alt_alarm_start
00041574 g     F .text	00000110 __muldi3
0004673c g     F .text	000001a8 __smakebuf_r
00041c40 g     F .text	0000008c strlen
0004c8a8 g     F .text	00000158 open
0004a42c g     F .text	00000064 __gedf2
0004c318 g     F .text	00000030 alt_icache_flush_all
0004f428 g     O .rwdata	00000004 alt_priority_mask
0004c398 g     F .text	0000009c alt_ic_irq_enable
00043b7c g     F .text	00000024 __vfprintf_internal
0004a2b0 g     F .text	00000060 __subdf3
00047888 g     F .text	000000b0 __lo0bits
0004f42c g     O .rwdata	00000008 alt_alarm_list
0004c260 g     F .text	0000005c _do_ctors
0004a8e4 g     F .text	000000cc close
0004ac78 g     F .text	00000080 alt_load
00041730 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00045bd8 g     F .text	00000004 __sinit_lock_acquire
000475d8 g     F .text	00000144 __multadd
000475b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406e14 	ori	at,at,440
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18ccbc04 	addi	r3,r3,13040
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	210cbc04 	addi	r4,r4,13040
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d69cfe14 	ori	gp,gp,29688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401cc:	1083a314 	ori	r2,r2,3724

    movhi r3, %hi(__bss_end)
   401d0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d4:	18cd6014 	ori	r3,r3,13696

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	004ac780 	call	4ac78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004ae1c0 	call	4ae1c <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A) ALT_CI_CRC_CUSTOM_INSTRUCTION_0(n,A)      // __builtin_custom_ini(ALT_CI_CRC_N + (n & 0x7), (A))

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
   401f4:	defffb04 	addi	sp,sp,-20
   401f8:	df000415 	stw	fp,16(sp)
   401fc:	df000404 	addi	fp,sp,16
   40200:	e13ffe15 	stw	r4,-8(fp)
   40204:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
   40208:	e0bffe17 	ldw	r2,-8(fp)
   4020c:	e0bffd15 	stw	r2,-12(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
   40210:	0005883a 	mov	r2,zero
   40214:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   40218:	e03ffc15 	stw	zero,-16(fp)
   4021c:	00000906 	br	40244 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
   40220:	e0bffd17 	ldw	r2,-12(fp)
   40224:	10800017 	ldw	r2,0(r2)
   40228:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
   4022c:	e0bffd17 	ldw	r2,-12(fp)
   40230:	10800104 	addi	r2,r2,4
   40234:	e0bffd15 	stw	r2,-12(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   40238:	e0bffc17 	ldw	r2,-16(fp)
   4023c:	10800104 	addi	r2,r2,4
   40240:	e0bffc15 	stw	r2,-16(fp)
   40244:	e0ffff17 	ldw	r3,-4(fp)
   40248:	00bfff04 	movi	r2,-4
   4024c:	1884703a 	and	r2,r3,r2
   40250:	e0fffc17 	ldw	r3,-16(fp)
   40254:	18bff236 	bltu	r3,r2,40220 <crcCI+0x2c>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
   40258:	e0bfff17 	ldw	r2,-4(fp)
   4025c:	108000cc 	andi	r2,r2,3
   40260:	108000d8 	cmpnei	r2,r2,3
   40264:	10000c1e 	bne	r2,zero,40298 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
   40268:	e0bffd17 	ldw	r2,-12(fp)
   4026c:	1080000b 	ldhu	r2,0(r2)
   40270:	10bfffcc 	andi	r2,r2,65535
   40274:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
   40278:	e0bffd17 	ldw	r2,-12(fp)
   4027c:	10800084 	addi	r2,r2,2
   40280:	e0bffd15 	stw	r2,-12(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
   40284:	e0bffd17 	ldw	r2,-12(fp)
   40288:	10800003 	ldbu	r2,0(r2)
   4028c:	10803fcc 	andi	r2,r2,255
   40290:	1005c072 	custom	1,r2,r2,zero
   40294:	00001106 	br	402dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	108000cc 	andi	r2,r2,3
   402a0:	10800098 	cmpnei	r2,r2,2
   402a4:	1000051e 	bne	r2,zero,402bc <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
   402a8:	e0bffd17 	ldw	r2,-12(fp)
   402ac:	1080000b 	ldhu	r2,0(r2)
   402b0:	10bfffcc 	andi	r2,r2,65535
   402b4:	1005c0b2 	custom	2,r2,r2,zero
   402b8:	00000806 	br	402dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
   402bc:	e0bfff17 	ldw	r2,-4(fp)
   402c0:	108000cc 	andi	r2,r2,3
   402c4:	10800058 	cmpnei	r2,r2,1
   402c8:	1000041e 	bne	r2,zero,402dc <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
   402cc:	e0bffd17 	ldw	r2,-12(fp)
   402d0:	10800003 	ldbu	r2,0(r2)
   402d4:	10803fcc 	andi	r2,r2,255
   402d8:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
   402dc:	0005883a 	mov	r2,zero
   402e0:	1005c132 	custom	4,r2,r2,zero
}
   402e4:	e037883a 	mov	sp,fp
   402e8:	df000017 	ldw	fp,0(sp)
   402ec:	dec00104 	addi	sp,sp,4
   402f0:	f800283a 	ret

000402f4 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
   402f4:	defffb04 	addi	sp,sp,-20
   402f8:	df000415 	stw	fp,16(sp)
   402fc:	df000404 	addi	fp,sp,16
   40300:	e13ffe15 	stw	r4,-8(fp)
   40304:	2805883a 	mov	r2,r5
   40308:	e0bfff05 	stb	r2,-4(fp)
  unsigned long  reflection = 0x00000000;
   4030c:	e03ffc15 	stw	zero,-16(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   40310:	e03ffd05 	stb	zero,-12(fp)
   40314:	00001206 	br	40360 <reflect+0x6c>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
   40318:	e0bffe17 	ldw	r2,-8(fp)
   4031c:	1080004c 	andi	r2,r2,1
   40320:	10000926 	beq	r2,zero,40348 <reflect+0x54>
    {
      reflection |= (1 << ((nBits - 1) - bit));
   40324:	e0bfff03 	ldbu	r2,-4(fp)
   40328:	10ffffc4 	addi	r3,r2,-1
   4032c:	e0bffd03 	ldbu	r2,-12(fp)
   40330:	1885c83a 	sub	r2,r3,r2
   40334:	00c00044 	movi	r3,1
   40338:	1884983a 	sll	r2,r3,r2
   4033c:	e0fffc17 	ldw	r3,-16(fp)
   40340:	1884b03a 	or	r2,r3,r2
   40344:	e0bffc15 	stw	r2,-16(fp)
    }

    data = (data >> 1);
   40348:	e0bffe17 	ldw	r2,-8(fp)
   4034c:	1004d07a 	srli	r2,r2,1
   40350:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   40354:	e0bffd03 	ldbu	r2,-12(fp)
   40358:	10800044 	addi	r2,r2,1
   4035c:	e0bffd05 	stb	r2,-12(fp)
   40360:	e0fffd03 	ldbu	r3,-12(fp)
   40364:	e0bfff03 	ldbu	r2,-4(fp)
   40368:	18bfeb36 	bltu	r3,r2,40318 <reflect+0x24>
    }

    data = (data >> 1);
  }

  return (reflection);
   4036c:	e0bffc17 	ldw	r2,-16(fp)

} /* reflect() */
   40370:	e037883a 	mov	sp,fp
   40374:	df000017 	ldw	fp,0(sp)
   40378:	dec00104 	addi	sp,sp,4
   4037c:	f800283a 	ret

00040380 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
   40380:	defff904 	addi	sp,sp,-28
   40384:	dfc00615 	stw	ra,24(sp)
   40388:	df000515 	stw	fp,20(sp)
   4038c:	df000504 	addi	fp,sp,20
   40390:	e13ffe15 	stw	r4,-8(fp)
   40394:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   40398:	00bfffc4 	movi	r2,-1
   4039c:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   403a0:	e03ffc15 	stw	zero,-16(fp)
   403a4:	00002506 	br	4043c <crcSlow+0xbc>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
   403a8:	e0bffc17 	ldw	r2,-16(fp)
   403ac:	e0fffe17 	ldw	r3,-8(fp)
   403b0:	1885883a 	add	r2,r3,r2
   403b4:	10800003 	ldbu	r2,0(r2)
   403b8:	10803fcc 	andi	r2,r2,255
   403bc:	1009883a 	mov	r4,r2
   403c0:	01400204 	movi	r5,8
   403c4:	00402f40 	call	402f4 <reflect>
   403c8:	10803fcc 	andi	r2,r2,255
   403cc:	1004963a 	slli	r2,r2,24
   403d0:	e0fffb17 	ldw	r3,-20(fp)
   403d4:	1884f03a 	xor	r2,r3,r2
   403d8:	e0bffb15 	stw	r2,-20(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   403dc:	00800204 	movi	r2,8
   403e0:	e0bffd05 	stb	r2,-12(fp)
   403e4:	00001006 	br	40428 <crcSlow+0xa8>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
   403e8:	e0bffb17 	ldw	r2,-20(fp)
   403ec:	1000080e 	bge	r2,zero,40410 <crcSlow+0x90>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   403f0:	e0bffb17 	ldw	r2,-20(fp)
   403f4:	1085883a 	add	r2,r2,r2
   403f8:	1007883a 	mov	r3,r2
   403fc:	00813074 	movhi	r2,1217
   40400:	10876dc4 	addi	r2,r2,7607
   40404:	1884f03a 	xor	r2,r3,r2
   40408:	e0bffb15 	stw	r2,-20(fp)
   4040c:	00000306 	br	4041c <crcSlow+0x9c>
            }
            else
            {
                remainder = (remainder << 1);
   40410:	e0bffb17 	ldw	r2,-20(fp)
   40414:	1085883a 	add	r2,r2,r2
   40418:	e0bffb15 	stw	r2,-20(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4041c:	e0bffd03 	ldbu	r2,-12(fp)
   40420:	10bfffc4 	addi	r2,r2,-1
   40424:	e0bffd05 	stb	r2,-12(fp)
   40428:	e0bffd03 	ldbu	r2,-12(fp)
   4042c:	103fee1e 	bne	r2,zero,403e8 <crcSlow+0x68>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40430:	e0bffc17 	ldw	r2,-16(fp)
   40434:	10800044 	addi	r2,r2,1
   40438:	e0bffc15 	stw	r2,-16(fp)
   4043c:	e0fffc17 	ldw	r3,-16(fp)
   40440:	e0bfff17 	ldw	r2,-4(fp)
   40444:	18bfd816 	blt	r3,r2,403a8 <crcSlow+0x28>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   40448:	e13ffb17 	ldw	r4,-20(fp)
   4044c:	01400804 	movi	r5,32
   40450:	00402f40 	call	402f4 <reflect>
   40454:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
   40458:	e037883a 	mov	sp,fp
   4045c:	dfc00117 	ldw	ra,4(sp)
   40460:	df000017 	ldw	fp,0(sp)
   40464:	dec00204 	addi	sp,sp,8
   40468:	f800283a 	ret

0004046c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
   4046c:	defffc04 	addi	sp,sp,-16
   40470:	df000315 	stw	fp,12(sp)
   40474:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   40478:	e03ffe15 	stw	zero,-8(fp)
   4047c:	00002306 	br	4050c <crcInit+0xa0>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
   40480:	e0bffe17 	ldw	r2,-8(fp)
   40484:	1004963a 	slli	r2,r2,24
   40488:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4048c:	00800204 	movi	r2,8
   40490:	e0bfff05 	stb	r2,-4(fp)
   40494:	00001006 	br	404d8 <crcInit+0x6c>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
   40498:	e0bffd17 	ldw	r2,-12(fp)
   4049c:	1000080e 	bge	r2,zero,404c0 <crcInit+0x54>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   404a0:	e0bffd17 	ldw	r2,-12(fp)
   404a4:	1085883a 	add	r2,r2,r2
   404a8:	1007883a 	mov	r3,r2
   404ac:	00813074 	movhi	r2,1217
   404b0:	10876dc4 	addi	r2,r2,7607
   404b4:	1884f03a 	xor	r2,r3,r2
   404b8:	e0bffd15 	stw	r2,-12(fp)
   404bc:	00000306 	br	404cc <crcInit+0x60>
            }
            else
            {
                remainder = (remainder << 1);
   404c0:	e0bffd17 	ldw	r2,-12(fp)
   404c4:	1085883a 	add	r2,r2,r2
   404c8:	e0bffd15 	stw	r2,-12(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   404cc:	e0bfff03 	ldbu	r2,-4(fp)
   404d0:	10bfffc4 	addi	r2,r2,-1
   404d4:	e0bfff05 	stb	r2,-4(fp)
   404d8:	e0bfff03 	ldbu	r2,-4(fp)
   404dc:	103fee1e 	bne	r2,zero,40498 <crcInit+0x2c>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
   404e0:	00c00174 	movhi	r3,5
   404e4:	18c3bc04 	addi	r3,r3,3824
   404e8:	e0bffe17 	ldw	r2,-8(fp)
   404ec:	1085883a 	add	r2,r2,r2
   404f0:	1085883a 	add	r2,r2,r2
   404f4:	1885883a 	add	r2,r3,r2
   404f8:	e0fffd17 	ldw	r3,-12(fp)
   404fc:	10c00015 	stw	r3,0(r2)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   40500:	e0bffe17 	ldw	r2,-8(fp)
   40504:	10800044 	addi	r2,r2,1
   40508:	e0bffe15 	stw	r2,-8(fp)
   4050c:	e0bffe17 	ldw	r2,-8(fp)
   40510:	10804010 	cmplti	r2,r2,256
   40514:	103fda1e 	bne	r2,zero,40480 <crcInit+0x14>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
   40518:	e037883a 	mov	sp,fp
   4051c:	df000017 	ldw	fp,0(sp)
   40520:	dec00104 	addi	sp,sp,4
   40524:	f800283a 	ret

00040528 <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
   40528:	defff904 	addi	sp,sp,-28
   4052c:	dfc00615 	stw	ra,24(sp)
   40530:	df000515 	stw	fp,20(sp)
   40534:	df000504 	addi	fp,sp,20
   40538:	e13ffe15 	stw	r4,-8(fp)
   4053c:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   40540:	00bfffc4 	movi	r2,-1
   40544:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40548:	e03ffc15 	stw	zero,-16(fp)
   4054c:	00001b06 	br	405bc <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
   40550:	e0bffc17 	ldw	r2,-16(fp)
   40554:	e0fffe17 	ldw	r3,-8(fp)
   40558:	1885883a 	add	r2,r3,r2
   4055c:	10800003 	ldbu	r2,0(r2)
   40560:	10803fcc 	andi	r2,r2,255
   40564:	1009883a 	mov	r4,r2
   40568:	01400204 	movi	r5,8
   4056c:	00402f40 	call	402f4 <reflect>
   40570:	1007883a 	mov	r3,r2
   40574:	e0bffb17 	ldw	r2,-20(fp)
   40578:	1004d63a 	srli	r2,r2,24
   4057c:	1884f03a 	xor	r2,r3,r2
   40580:	e0bffd05 	stb	r2,-12(fp)
      remainder = crcTable[data] ^ (remainder << 8);
   40584:	e0bffd03 	ldbu	r2,-12(fp)
   40588:	00c00174 	movhi	r3,5
   4058c:	18c3bc04 	addi	r3,r3,3824
   40590:	1085883a 	add	r2,r2,r2
   40594:	1085883a 	add	r2,r2,r2
   40598:	1885883a 	add	r2,r3,r2
   4059c:	10c00017 	ldw	r3,0(r2)
   405a0:	e0bffb17 	ldw	r2,-20(fp)
   405a4:	1004923a 	slli	r2,r2,8
   405a8:	1884f03a 	xor	r2,r3,r2
   405ac:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   405b0:	e0bffc17 	ldw	r2,-16(fp)
   405b4:	10800044 	addi	r2,r2,1
   405b8:	e0bffc15 	stw	r2,-16(fp)
   405bc:	e0fffc17 	ldw	r3,-16(fp)
   405c0:	e0bfff17 	ldw	r2,-4(fp)
   405c4:	18bfe216 	blt	r3,r2,40550 <crcFast+0x28>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   405c8:	e13ffb17 	ldw	r4,-20(fp)
   405cc:	01400804 	movi	r5,32
   405d0:	00402f40 	call	402f4 <reflect>
   405d4:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
   405d8:	e037883a 	mov	sp,fp
   405dc:	dfc00117 	ldw	ra,4(sp)
   405e0:	df000017 	ldw	fp,0(sp)
   405e4:	dec00204 	addi	sp,sp,8
   405e8:	f800283a 	ret

000405ec <main>:




int main()
{
   405ec:	deff9304 	addi	sp,sp,-436
   405f0:	dfc06c15 	stw	ra,432(sp)
   405f4:	df006b15 	stw	fp,428(sp)
   405f8:	dc406a15 	stw	r17,424(sp)
   405fc:	dc006915 	stw	r16,420(sp)
   40600:	df006904 	addi	fp,sp,420
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
   40604:	00801684 	movi	r2,90
   40608:	e0bf9905 	stb	r2,-412(fp)
  alt_u32 sw_slow_timeA, sw_slow_timeB;
  alt_u32 sw_fast_timeA, sw_fast_timeB;
  alt_u32 ci_timeA, ci_timeB;


  printf("+-----------------------------------------------------------+\n");
   4060c:	01000174 	movhi	r4,5
   40610:	21342004 	addi	r4,r4,-12160
   40614:	0041c2c0 	call	41c2c <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
   40618:	01000174 	movhi	r4,5
   4061c:	21343004 	addi	r4,r4,-12096
   40620:	0041c2c0 	call	41c2c <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
   40624:	01000174 	movhi	r4,5
   40628:	21344004 	addi	r4,r4,-12032
   4062c:	0041c2c0 	call	41c2c <puts>
  
  printf("System specification\n");
   40630:	01000174 	movhi	r4,5
   40634:	21345004 	addi	r4,r4,-11968
   40638:	0041c2c0 	call	41c2c <puts>
  printf("--------------------\n");
   4063c:	01000174 	movhi	r4,5
   40640:	21345604 	addi	r4,r4,-11944
   40644:	0041c2c0 	call	41c2c <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ /(unsigned long)1000000);
   40648:	01000174 	movhi	r4,5
   4064c:	21345c04 	addi	r4,r4,-11920
   40650:	01400c84 	movi	r5,50
   40654:	0041b6c0 	call	41b6c <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
   40658:	01000174 	movhi	r4,5
   4065c:	21346404 	addi	r4,r4,-11888
   40660:	01400804 	movi	r5,32
   40664:	0041b6c0 	call	41b6c <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
   40668:	01000174 	movhi	r4,5
   4066c:	21346d04 	addi	r4,r4,-11852
   40670:	01404004 	movi	r5,256
   40674:	0041b6c0 	call	41b6c <printf>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
   40678:	01000174 	movhi	r4,5
   4067c:	21347604 	addi	r4,r4,-11816
   40680:	0041c2c0 	call	41c2c <puts>
  printf("-------------------------------------------------------\n");
   40684:	01000174 	movhi	r4,5
   40688:	21348404 	addi	r4,r4,-11760
   4068c:	0041c2c0 	call	41c2c <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40690:	e03f9715 	stw	zero,-420(fp)
   40694:	00001d06 	br	4070c <main+0x120>
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   40698:	e03f9815 	stw	zero,-416(fp)
   4069c:	00001506 	br	406f4 <main+0x108>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
   406a0:	00c00174 	movhi	r3,5
   406a4:	18c4bc04 	addi	r3,r3,4848
   406a8:	e0bf9717 	ldw	r2,-420(fp)
   406ac:	1008923a 	slli	r4,r2,8
   406b0:	e0bf9817 	ldw	r2,-416(fp)
   406b4:	2085883a 	add	r2,r4,r2
   406b8:	1885883a 	add	r2,r3,r2
   406bc:	e0ff9903 	ldbu	r3,-412(fp)
   406c0:	10c00005 	stb	r3,0(r2)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
   406c4:	e0bf9903 	ldbu	r2,-412(fp)
   406c8:	10c03fcc 	andi	r3,r2,255
   406cc:	1806d13a 	srli	r3,r3,4
   406d0:	1004913a 	slli	r2,r2,4
   406d4:	1884b03a 	or	r2,r3,r2
   406d8:	1007883a 	mov	r3,r2
   406dc:	e0bf9817 	ldw	r2,-416(fp)
   406e0:	1885883a 	add	r2,r3,r2
   406e4:	e0bf9905 	stb	r2,-412(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   406e8:	e0bf9817 	ldw	r2,-416(fp)
   406ec:	10800044 	addi	r2,r2,1
   406f0:	e0bf9815 	stw	r2,-416(fp)
   406f4:	e0bf9817 	ldw	r2,-416(fp)
   406f8:	10804030 	cmpltui	r2,r2,256
   406fc:	103fe81e 	bne	r2,zero,406a0 <main+0xb4>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40700:	e0bf9717 	ldw	r2,-420(fp)
   40704:	10800044 	addi	r2,r2,1
   40708:	e0bf9715 	stw	r2,-420(fp)
   4070c:	e0bf9717 	ldw	r2,-420(fp)
   40710:	10800830 	cmpltui	r2,r2,32
   40714:	103fe01e 	bne	r2,zero,40698 <main+0xac>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
   40718:	01000174 	movhi	r4,5
   4071c:	21349204 	addi	r4,r4,-11704
   40720:	0041c2c0 	call	41c2c <puts>


  if(alt_timestamp_start() < 0) // starts the timestamp timer
   40724:	004bed40 	call	4bed4 <alt_timestamp_start>
   40728:	1000050e 	bge	r2,zero,40740 <main+0x154>
  {
    printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
   4072c:	01000174 	movhi	r4,5
   40730:	21349904 	addi	r4,r4,-11676
   40734:	0041c2c0 	call	41c2c <puts>
    exit(1);
   40738:	01000044 	movi	r4,1
   4073c:	0041b080 	call	41b08 <exit>
  }


  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
   40740:	01000174 	movhi	r4,5
   40744:	2134b204 	addi	r4,r4,-11576
   40748:	0041c2c0 	call	41c2c <puts>
  printf("------------------------\n");
   4074c:	01000174 	movhi	r4,5
   40750:	2134b904 	addi	r4,r4,-11548
   40754:	0041c2c0 	call	41c2c <puts>
  sw_slow_timeA = alt_timestamp();
   40758:	004bf5c0 	call	4bf5c <alt_timestamp>
   4075c:	e0bf9a15 	stw	r2,-408(fp)

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40760:	e03f9715 	stw	zero,-420(fp)
   40764:	00001306 	br	407b4 <main+0x1c8>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40768:	e0bf9717 	ldw	r2,-420(fp)
   4076c:	1006923a 	slli	r3,r2,8
   40770:	00800174 	movhi	r2,5
   40774:	1084bc04 	addi	r2,r2,4848
   40778:	1885883a 	add	r2,r3,r2
   4077c:	1009883a 	mov	r4,r2
   40780:	01404004 	movi	r5,256
   40784:	00403800 	call	40380 <crcSlow>
   40788:	1007883a 	mov	r3,r2
   4078c:	e0bf9717 	ldw	r2,-420(fp)
   40790:	1085883a 	add	r2,r2,r2
   40794:	1085883a 	add	r2,r2,r2
   40798:	e13f9704 	addi	r4,fp,-420
   4079c:	2085883a 	add	r2,r4,r2
   407a0:	10800904 	addi	r2,r2,36
   407a4:	10c00015 	stw	r3,0(r2)
  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
  printf("------------------------\n");
  sw_slow_timeA = alt_timestamp();

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   407a8:	e0bf9717 	ldw	r2,-420(fp)
   407ac:	10800044 	addi	r2,r2,1
   407b0:	e0bf9715 	stw	r2,-420(fp)
   407b4:	e0bf9717 	ldw	r2,-420(fp)
   407b8:	10800830 	cmpltui	r2,r2,32
   407bc:	103fea1e 	bne	r2,zero,40768 <main+0x17c>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_slow_timeB = alt_timestamp();
   407c0:	004bf5c0 	call	4bf5c <alt_timestamp>
   407c4:	e0bf9b15 	stw	r2,-404(fp)

  printf("Completed\n\n\n");
   407c8:	01000174 	movhi	r4,5
   407cc:	2134c004 	addi	r4,r4,-11520
   407d0:	0041c2c0 	call	41c2c <puts>


  /* Fast software CRC based on a lookup table implementation */
  crcInit();
   407d4:	004046c0 	call	4046c <crcInit>
  printf("Running the optimized software CRC\n");
   407d8:	01000174 	movhi	r4,5
   407dc:	2134c304 	addi	r4,r4,-11508
   407e0:	0041c2c0 	call	41c2c <puts>
  printf("----------------------------------\n");
   407e4:	01000174 	movhi	r4,5
   407e8:	2134cc04 	addi	r4,r4,-11472
   407ec:	0041c2c0 	call	41c2c <puts>
  sw_fast_timeA = alt_timestamp();
   407f0:	004bf5c0 	call	4bf5c <alt_timestamp>
   407f4:	e0bf9c15 	stw	r2,-400(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   407f8:	e03f9715 	stw	zero,-420(fp)
   407fc:	00001306 	br	4084c <main+0x260>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40800:	e0bf9717 	ldw	r2,-420(fp)
   40804:	1006923a 	slli	r3,r2,8
   40808:	00800174 	movhi	r2,5
   4080c:	1084bc04 	addi	r2,r2,4848
   40810:	1885883a 	add	r2,r3,r2
   40814:	1009883a 	mov	r4,r2
   40818:	01404004 	movi	r5,256
   4081c:	00405280 	call	40528 <crcFast>
   40820:	1007883a 	mov	r3,r2
   40824:	e0bf9717 	ldw	r2,-420(fp)
   40828:	1085883a 	add	r2,r2,r2
   4082c:	1085883a 	add	r2,r2,r2
   40830:	e17f9704 	addi	r5,fp,-420
   40834:	2885883a 	add	r2,r5,r2
   40838:	10802904 	addi	r2,r2,164
   4083c:	10c00015 	stw	r3,0(r2)
  /* Fast software CRC based on a lookup table implementation */
  crcInit();
  printf("Running the optimized software CRC\n");
  printf("----------------------------------\n");
  sw_fast_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40840:	e0bf9717 	ldw	r2,-420(fp)
   40844:	10800044 	addi	r2,r2,1
   40848:	e0bf9715 	stw	r2,-420(fp)
   4084c:	e0bf9717 	ldw	r2,-420(fp)
   40850:	10800830 	cmpltui	r2,r2,32
   40854:	103fea1e 	bne	r2,zero,40800 <main+0x214>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_fast_timeB = alt_timestamp();
   40858:	004bf5c0 	call	4bf5c <alt_timestamp>
   4085c:	e0bf9d15 	stw	r2,-396(fp)
  printf("Completed\n\n\n");
   40860:	01000174 	movhi	r4,5
   40864:	2134c004 	addi	r4,r4,-11520
   40868:	0041c2c0 	call	41c2c <puts>


  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
   4086c:	01000174 	movhi	r4,5
   40870:	2134d504 	addi	r4,r4,-11436
   40874:	0041c2c0 	call	41c2c <puts>
  printf("----------------------------------\n");
   40878:	01000174 	movhi	r4,5
   4087c:	2134cc04 	addi	r4,r4,-11472
   40880:	0041c2c0 	call	41c2c <puts>
 ci_timeA = alt_timestamp();
   40884:	004bf5c0 	call	4bf5c <alt_timestamp>
   40888:	e0bf9e15 	stw	r2,-392(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   4088c:	e03f9715 	stw	zero,-420(fp)
   40890:	00001306 	br	408e0 <main+0x2f4>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40894:	e0bf9717 	ldw	r2,-420(fp)
   40898:	1006923a 	slli	r3,r2,8
   4089c:	00800174 	movhi	r2,5
   408a0:	1084bc04 	addi	r2,r2,4848
   408a4:	1885883a 	add	r2,r3,r2
   408a8:	1009883a 	mov	r4,r2
   408ac:	01404004 	movi	r5,256
   408b0:	00401f40 	call	401f4 <crcCI>
   408b4:	1007883a 	mov	r3,r2
   408b8:	e0bf9717 	ldw	r2,-420(fp)
   408bc:	1085883a 	add	r2,r2,r2
   408c0:	1085883a 	add	r2,r2,r2
   408c4:	e13f9704 	addi	r4,fp,-420
   408c8:	2085883a 	add	r2,r4,r2
   408cc:	10804904 	addi	r2,r2,292
   408d0:	10c00015 	stw	r3,0(r2)

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
  printf("----------------------------------\n");
 ci_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   408d4:	e0bf9717 	ldw	r2,-420(fp)
   408d8:	10800044 	addi	r2,r2,1
   408dc:	e0bf9715 	stw	r2,-420(fp)
   408e0:	e0bf9717 	ldw	r2,-420(fp)
   408e4:	10800830 	cmpltui	r2,r2,32
   408e8:	103fea1e 	bne	r2,zero,40894 <main+0x2a8>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  ci_timeB = alt_timestamp();
   408ec:	004bf5c0 	call	4bf5c <alt_timestamp>
   408f0:	e0bf9f15 	stw	r2,-388(fp)
  printf("Completed\n\n\n");
   408f4:	01000174 	movhi	r4,5
   408f8:	2134c004 	addi	r4,r4,-11520
   408fc:	0041c2c0 	call	41c2c <puts>

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
   40900:	01000174 	movhi	r4,5
   40904:	2134de04 	addi	r4,r4,-11400
   40908:	0041c2c0 	call	41c2c <puts>
  printf("----------------------------------------------------\n");
   4090c:	01000174 	movhi	r4,5
   40910:	2134eb04 	addi	r4,r4,-11348
   40914:	0041c2c0 	call	41c2c <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40918:	e03f9715 	stw	zero,-420(fp)
   4091c:	00004106 	br	40a24 <main+0x438>
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
   40920:	e0bf9717 	ldw	r2,-420(fp)
   40924:	1085883a 	add	r2,r2,r2
   40928:	1085883a 	add	r2,r2,r2
   4092c:	e17f9704 	addi	r5,fp,-420
   40930:	2885883a 	add	r2,r5,r2
   40934:	10800904 	addi	r2,r2,36
   40938:	10c00017 	ldw	r3,0(r2)
   4093c:	e0bf9717 	ldw	r2,-420(fp)
   40940:	1085883a 	add	r2,r2,r2
   40944:	1085883a 	add	r2,r2,r2
   40948:	e13f9704 	addi	r4,fp,-420
   4094c:	2085883a 	add	r2,r4,r2
   40950:	10804904 	addi	r2,r2,292
   40954:	10800017 	ldw	r2,0(r2)
   40958:	1884c03a 	cmpne	r2,r3,r2
   4095c:	1007883a 	mov	r3,r2
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
   40960:	e0bf9717 	ldw	r2,-420(fp)
   40964:	1085883a 	add	r2,r2,r2
   40968:	1085883a 	add	r2,r2,r2
   4096c:	e17f9704 	addi	r5,fp,-420
   40970:	2885883a 	add	r2,r5,r2
   40974:	10802904 	addi	r2,r2,164
   40978:	11000017 	ldw	r4,0(r2)
   4097c:	e0bf9717 	ldw	r2,-420(fp)
   40980:	1085883a 	add	r2,r2,r2
   40984:	1085883a 	add	r2,r2,r2
   40988:	e17f9704 	addi	r5,fp,-420
   4098c:	2885883a 	add	r2,r5,r2
   40990:	10804904 	addi	r2,r2,292
   40994:	10800017 	ldw	r2,0(r2)
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
   40998:	2084c03a 	cmpne	r2,r4,r2
   4099c:	1884b03a 	or	r2,r3,r2
   409a0:	10803fcc 	andi	r2,r2,255
   409a4:	10001c26 	beq	r2,zero,40a18 <main+0x42c>
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
   409a8:	e0bf9717 	ldw	r2,-420(fp)
   409ac:	1085883a 	add	r2,r2,r2
   409b0:	1085883a 	add	r2,r2,r2
   409b4:	e0ff9704 	addi	r3,fp,-420
   409b8:	1885883a 	add	r2,r3,r2
   409bc:	10800904 	addi	r2,r2,36
   409c0:	11400017 	ldw	r5,0(r2)
   409c4:	e0bf9717 	ldw	r2,-420(fp)
   409c8:	1085883a 	add	r2,r2,r2
   409cc:	1085883a 	add	r2,r2,r2
   409d0:	e13f9704 	addi	r4,fp,-420
   409d4:	2085883a 	add	r2,r4,r2
   409d8:	10802904 	addi	r2,r2,164
   409dc:	10c00017 	ldw	r3,0(r2)
   409e0:	e0bf9717 	ldw	r2,-420(fp)
   409e4:	1085883a 	add	r2,r2,r2
   409e8:	1085883a 	add	r2,r2,r2
   409ec:	e13f9704 	addi	r4,fp,-420
   409f0:	2085883a 	add	r2,r4,r2
   409f4:	10804904 	addi	r2,r2,292
   409f8:	10800017 	ldw	r2,0(r2)
   409fc:	01000174 	movhi	r4,5
   40a00:	2134f904 	addi	r4,r4,-11292
   40a04:	180d883a 	mov	r6,r3
   40a08:	100f883a 	mov	r7,r2
   40a0c:	0041b6c0 	call	41b6c <printf>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
   40a10:	01000044 	movi	r4,1
   40a14:	0041b080 	call	41b08 <exit>
  printf("Completed\n\n\n");

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40a18:	e0bf9717 	ldw	r2,-420(fp)
   40a1c:	10800044 	addi	r2,r2,1
   40a20:	e0bf9715 	stw	r2,-420(fp)
   40a24:	e0bf9717 	ldw	r2,-420(fp)
   40a28:	10800830 	cmpltui	r2,r2,32
   40a2c:	103fbc1e 	bne	r2,zero,40920 <main+0x334>
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
   40a30:	01000174 	movhi	r4,5
   40a34:	21351204 	addi	r4,r4,-11192
   40a38:	0041c2c0 	call	41c2c <puts>


  // Report processing times
  printf("Processing time for each implementation\n");
   40a3c:	01000174 	movhi	r4,5
   40a40:	21351f04 	addi	r4,r4,-11140
   40a44:	0041c2c0 	call	41c2c <puts>
  printf("---------------------------------------\n");
   40a48:	01000174 	movhi	r4,5
   40a4c:	21352904 	addi	r4,r4,-11100
   40a50:	0041c2c0 	call	41c2c <puts>
  printf("Software CRC = %.2lf ms\n", (double)(sw_slow_timeB - sw_slow_timeA) * 1000 / alt_timestamp_freq());
   40a54:	e0ff9b17 	ldw	r3,-404(fp)
   40a58:	e0bf9a17 	ldw	r2,-408(fp)
   40a5c:	1885c83a 	sub	r2,r3,r2
   40a60:	1009883a 	mov	r4,r2
   40a64:	00414580 	call	41458 <__floatunsidf>
   40a68:	100b883a 	mov	r5,r2
   40a6c:	180d883a 	mov	r6,r3
   40a70:	2809883a 	mov	r4,r5
   40a74:	300b883a 	mov	r5,r6
   40a78:	000d883a 	mov	r6,zero
   40a7c:	01d023f4 	movhi	r7,16527
   40a80:	39d00004 	addi	r7,r7,16384
   40a84:	0040fc00 	call	40fc0 <__muldf3>
   40a88:	1009883a 	mov	r4,r2
   40a8c:	180b883a 	mov	r5,r3
   40a90:	2021883a 	mov	r16,r4
   40a94:	2823883a 	mov	r17,r5
   40a98:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40a9c:	1009883a 	mov	r4,r2
   40aa0:	00414580 	call	41458 <__floatunsidf>
   40aa4:	100f883a 	mov	r7,r2
   40aa8:	1811883a 	mov	r8,r3
   40aac:	8009883a 	mov	r4,r16
   40ab0:	880b883a 	mov	r5,r17
   40ab4:	380d883a 	mov	r6,r7
   40ab8:	400f883a 	mov	r7,r8
   40abc:	00412a40 	call	412a4 <__divdf3>
   40ac0:	1009883a 	mov	r4,r2
   40ac4:	180b883a 	mov	r5,r3
   40ac8:	2005883a 	mov	r2,r4
   40acc:	2807883a 	mov	r3,r5
   40ad0:	01000174 	movhi	r4,5
   40ad4:	21353304 	addi	r4,r4,-11060
   40ad8:	100b883a 	mov	r5,r2
   40adc:	180d883a 	mov	r6,r3
   40ae0:	0041b6c0 	call	41b6c <printf>
  printf("Optimized software CRC = %.2lf ms\n", (double)(sw_fast_timeB - sw_fast_timeA) * 1000 / alt_timestamp_freq());
   40ae4:	e0ff9d17 	ldw	r3,-396(fp)
   40ae8:	e0bf9c17 	ldw	r2,-400(fp)
   40aec:	1885c83a 	sub	r2,r3,r2
   40af0:	1009883a 	mov	r4,r2
   40af4:	00414580 	call	41458 <__floatunsidf>
   40af8:	100b883a 	mov	r5,r2
   40afc:	180d883a 	mov	r6,r3
   40b00:	2809883a 	mov	r4,r5
   40b04:	300b883a 	mov	r5,r6
   40b08:	000d883a 	mov	r6,zero
   40b0c:	01d023f4 	movhi	r7,16527
   40b10:	39d00004 	addi	r7,r7,16384
   40b14:	0040fc00 	call	40fc0 <__muldf3>
   40b18:	1009883a 	mov	r4,r2
   40b1c:	180b883a 	mov	r5,r3
   40b20:	2021883a 	mov	r16,r4
   40b24:	2823883a 	mov	r17,r5
   40b28:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40b2c:	1009883a 	mov	r4,r2
   40b30:	00414580 	call	41458 <__floatunsidf>
   40b34:	100f883a 	mov	r7,r2
   40b38:	1811883a 	mov	r8,r3
   40b3c:	8009883a 	mov	r4,r16
   40b40:	880b883a 	mov	r5,r17
   40b44:	380d883a 	mov	r6,r7
   40b48:	400f883a 	mov	r7,r8
   40b4c:	00412a40 	call	412a4 <__divdf3>
   40b50:	1009883a 	mov	r4,r2
   40b54:	180b883a 	mov	r5,r3
   40b58:	2005883a 	mov	r2,r4
   40b5c:	2807883a 	mov	r3,r5
   40b60:	01000174 	movhi	r4,5
   40b64:	21353a04 	addi	r4,r4,-11032
   40b68:	100b883a 	mov	r5,r2
   40b6c:	180d883a 	mov	r6,r3
   40b70:	0041b6c0 	call	41b6c <printf>
  printf("Custom instruction CRC = %.2lf ms\n\n\n", (double)(ci_timeB - ci_timeA) * 1000 / alt_timestamp_freq());
   40b74:	e0ff9f17 	ldw	r3,-388(fp)
   40b78:	e0bf9e17 	ldw	r2,-392(fp)
   40b7c:	1885c83a 	sub	r2,r3,r2
   40b80:	1009883a 	mov	r4,r2
   40b84:	00414580 	call	41458 <__floatunsidf>
   40b88:	100b883a 	mov	r5,r2
   40b8c:	180d883a 	mov	r6,r3
   40b90:	2809883a 	mov	r4,r5
   40b94:	300b883a 	mov	r5,r6
   40b98:	000d883a 	mov	r6,zero
   40b9c:	01d023f4 	movhi	r7,16527
   40ba0:	39d00004 	addi	r7,r7,16384
   40ba4:	0040fc00 	call	40fc0 <__muldf3>
   40ba8:	1009883a 	mov	r4,r2
   40bac:	180b883a 	mov	r5,r3
   40bb0:	2021883a 	mov	r16,r4
   40bb4:	2823883a 	mov	r17,r5
   40bb8:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40bbc:	1009883a 	mov	r4,r2
   40bc0:	00414580 	call	41458 <__floatunsidf>
   40bc4:	100f883a 	mov	r7,r2
   40bc8:	1811883a 	mov	r8,r3
   40bcc:	8009883a 	mov	r4,r16
   40bd0:	880b883a 	mov	r5,r17
   40bd4:	380d883a 	mov	r6,r7
   40bd8:	400f883a 	mov	r7,r8
   40bdc:	00412a40 	call	412a4 <__divdf3>
   40be0:	1009883a 	mov	r4,r2
   40be4:	180b883a 	mov	r5,r3
   40be8:	2005883a 	mov	r2,r4
   40bec:	2807883a 	mov	r3,r5
   40bf0:	01000174 	movhi	r4,5
   40bf4:	21354304 	addi	r4,r4,-10996
   40bf8:	100b883a 	mov	r5,r2
   40bfc:	180d883a 	mov	r6,r3
   40c00:	0041b6c0 	call	41b6c <printf>

  printf("Processing throughput for each implementation\n"); // throughput = total bits / (time(s) * 1000000)
   40c04:	01000174 	movhi	r4,5
   40c08:	21354d04 	addi	r4,r4,-10956
   40c0c:	0041c2c0 	call	41c2c <puts>
  printf("---------------------------------------------\n");
   40c10:	01000174 	movhi	r4,5
   40c14:	21355904 	addi	r4,r4,-10908
   40c18:	0041c2c0 	call	41c2c <puts>
  printf("Software CRC = %.2lf Mbps\n", (8.0 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / ((double)(sw_slow_timeB - sw_slow_timeA) / alt_timestamp_freq() * 1000000));
   40c1c:	e0ff9b17 	ldw	r3,-404(fp)
   40c20:	e0bf9a17 	ldw	r2,-408(fp)
   40c24:	1885c83a 	sub	r2,r3,r2
   40c28:	1009883a 	mov	r4,r2
   40c2c:	00414580 	call	41458 <__floatunsidf>
   40c30:	1021883a 	mov	r16,r2
   40c34:	1823883a 	mov	r17,r3
   40c38:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40c3c:	1009883a 	mov	r4,r2
   40c40:	00414580 	call	41458 <__floatunsidf>
   40c44:	100f883a 	mov	r7,r2
   40c48:	1811883a 	mov	r8,r3
   40c4c:	8009883a 	mov	r4,r16
   40c50:	880b883a 	mov	r5,r17
   40c54:	380d883a 	mov	r6,r7
   40c58:	400f883a 	mov	r7,r8
   40c5c:	00412a40 	call	412a4 <__divdf3>
   40c60:	1009883a 	mov	r4,r2
   40c64:	180b883a 	mov	r5,r3
   40c68:	2005883a 	mov	r2,r4
   40c6c:	2807883a 	mov	r3,r5
   40c70:	1009883a 	mov	r4,r2
   40c74:	180b883a 	mov	r5,r3
   40c78:	000d883a 	mov	r6,zero
   40c7c:	01d04bf4 	movhi	r7,16687
   40c80:	39e12004 	addi	r7,r7,-31616
   40c84:	0040fc00 	call	40fc0 <__muldf3>
   40c88:	1009883a 	mov	r4,r2
   40c8c:	180b883a 	mov	r5,r3
   40c90:	2005883a 	mov	r2,r4
   40c94:	2807883a 	mov	r3,r5
   40c98:	0009883a 	mov	r4,zero
   40c9c:	01503c34 	movhi	r5,16624
   40ca0:	100d883a 	mov	r6,r2
   40ca4:	180f883a 	mov	r7,r3
   40ca8:	00412a40 	call	412a4 <__divdf3>
   40cac:	1009883a 	mov	r4,r2
   40cb0:	180b883a 	mov	r5,r3
   40cb4:	2005883a 	mov	r2,r4
   40cb8:	2807883a 	mov	r3,r5
   40cbc:	01000174 	movhi	r4,5
   40cc0:	21356504 	addi	r4,r4,-10860
   40cc4:	100b883a 	mov	r5,r2
   40cc8:	180d883a 	mov	r6,r3
   40ccc:	0041b6c0 	call	41b6c <printf>
  printf("Optimized software CRC = %.2lf Mbps\n", (8.0 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / ((double)(sw_fast_timeB - sw_fast_timeA) / alt_timestamp_freq() * 1000000));
   40cd0:	e0ff9d17 	ldw	r3,-396(fp)
   40cd4:	e0bf9c17 	ldw	r2,-400(fp)
   40cd8:	1885c83a 	sub	r2,r3,r2
   40cdc:	1009883a 	mov	r4,r2
   40ce0:	00414580 	call	41458 <__floatunsidf>
   40ce4:	1021883a 	mov	r16,r2
   40ce8:	1823883a 	mov	r17,r3
   40cec:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40cf0:	1009883a 	mov	r4,r2
   40cf4:	00414580 	call	41458 <__floatunsidf>
   40cf8:	100f883a 	mov	r7,r2
   40cfc:	1811883a 	mov	r8,r3
   40d00:	8009883a 	mov	r4,r16
   40d04:	880b883a 	mov	r5,r17
   40d08:	380d883a 	mov	r6,r7
   40d0c:	400f883a 	mov	r7,r8
   40d10:	00412a40 	call	412a4 <__divdf3>
   40d14:	1009883a 	mov	r4,r2
   40d18:	180b883a 	mov	r5,r3
   40d1c:	2005883a 	mov	r2,r4
   40d20:	2807883a 	mov	r3,r5
   40d24:	1009883a 	mov	r4,r2
   40d28:	180b883a 	mov	r5,r3
   40d2c:	000d883a 	mov	r6,zero
   40d30:	01d04bf4 	movhi	r7,16687
   40d34:	39e12004 	addi	r7,r7,-31616
   40d38:	0040fc00 	call	40fc0 <__muldf3>
   40d3c:	1009883a 	mov	r4,r2
   40d40:	180b883a 	mov	r5,r3
   40d44:	2005883a 	mov	r2,r4
   40d48:	2807883a 	mov	r3,r5
   40d4c:	0009883a 	mov	r4,zero
   40d50:	01503c34 	movhi	r5,16624
   40d54:	100d883a 	mov	r6,r2
   40d58:	180f883a 	mov	r7,r3
   40d5c:	00412a40 	call	412a4 <__divdf3>
   40d60:	1009883a 	mov	r4,r2
   40d64:	180b883a 	mov	r5,r3
   40d68:	2005883a 	mov	r2,r4
   40d6c:	2807883a 	mov	r3,r5
   40d70:	01000174 	movhi	r4,5
   40d74:	21356c04 	addi	r4,r4,-10832
   40d78:	100b883a 	mov	r5,r2
   40d7c:	180d883a 	mov	r6,r3
   40d80:	0041b6c0 	call	41b6c <printf>
  printf("Custom instruction CRC = %.2lf Mbps\n\n\n", (8.0 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / ((double)(ci_timeB - ci_timeA) / alt_timestamp_freq() * 1000000));
   40d84:	e0ff9f17 	ldw	r3,-388(fp)
   40d88:	e0bf9e17 	ldw	r2,-392(fp)
   40d8c:	1885c83a 	sub	r2,r3,r2
   40d90:	1009883a 	mov	r4,r2
   40d94:	00414580 	call	41458 <__floatunsidf>
   40d98:	1021883a 	mov	r16,r2
   40d9c:	1823883a 	mov	r17,r3
   40da0:	004bfec0 	call	4bfec <alt_timestamp_freq>
   40da4:	1009883a 	mov	r4,r2
   40da8:	00414580 	call	41458 <__floatunsidf>
   40dac:	100f883a 	mov	r7,r2
   40db0:	1811883a 	mov	r8,r3
   40db4:	8009883a 	mov	r4,r16
   40db8:	880b883a 	mov	r5,r17
   40dbc:	380d883a 	mov	r6,r7
   40dc0:	400f883a 	mov	r7,r8
   40dc4:	00412a40 	call	412a4 <__divdf3>
   40dc8:	1009883a 	mov	r4,r2
   40dcc:	180b883a 	mov	r5,r3
   40dd0:	2005883a 	mov	r2,r4
   40dd4:	2807883a 	mov	r3,r5
   40dd8:	1009883a 	mov	r4,r2
   40ddc:	180b883a 	mov	r5,r3
   40de0:	000d883a 	mov	r6,zero
   40de4:	01d04bf4 	movhi	r7,16687
   40de8:	39e12004 	addi	r7,r7,-31616
   40dec:	0040fc00 	call	40fc0 <__muldf3>
   40df0:	1009883a 	mov	r4,r2
   40df4:	180b883a 	mov	r5,r3
   40df8:	2005883a 	mov	r2,r4
   40dfc:	2807883a 	mov	r3,r5
   40e00:	0009883a 	mov	r4,zero
   40e04:	01503c34 	movhi	r5,16624
   40e08:	100d883a 	mov	r6,r2
   40e0c:	180f883a 	mov	r7,r3
   40e10:	00412a40 	call	412a4 <__divdf3>
   40e14:	1009883a 	mov	r4,r2
   40e18:	180b883a 	mov	r5,r3
   40e1c:	2005883a 	mov	r2,r4
   40e20:	2807883a 	mov	r3,r5
   40e24:	01000174 	movhi	r4,5
   40e28:	21357604 	addi	r4,r4,-10792
   40e2c:	100b883a 	mov	r5,r2
   40e30:	180d883a 	mov	r6,r3
   40e34:	0041b6c0 	call	41b6c <printf>

  printf("Speedup ratio\n");
   40e38:	01000174 	movhi	r4,5
   40e3c:	21358004 	addi	r4,r4,-10752
   40e40:	0041c2c0 	call	41c2c <puts>
  printf("-------------\n");
   40e44:	01000174 	movhi	r4,5
   40e48:	21358404 	addi	r4,r4,-10736
   40e4c:	0041c2c0 	call	41c2c <puts>
  printf("Custom instruction CRC vs software CRC = %.2lf\n", (double)(sw_slow_timeB - sw_slow_timeA) / (double)(ci_timeB - ci_timeA));
   40e50:	e0ff9b17 	ldw	r3,-404(fp)
   40e54:	e0bf9a17 	ldw	r2,-408(fp)
   40e58:	1885c83a 	sub	r2,r3,r2
   40e5c:	1009883a 	mov	r4,r2
   40e60:	00414580 	call	41458 <__floatunsidf>
   40e64:	1021883a 	mov	r16,r2
   40e68:	1823883a 	mov	r17,r3
   40e6c:	e0ff9f17 	ldw	r3,-388(fp)
   40e70:	e0bf9e17 	ldw	r2,-392(fp)
   40e74:	1885c83a 	sub	r2,r3,r2
   40e78:	1009883a 	mov	r4,r2
   40e7c:	00414580 	call	41458 <__floatunsidf>
   40e80:	100f883a 	mov	r7,r2
   40e84:	1811883a 	mov	r8,r3
   40e88:	8009883a 	mov	r4,r16
   40e8c:	880b883a 	mov	r5,r17
   40e90:	380d883a 	mov	r6,r7
   40e94:	400f883a 	mov	r7,r8
   40e98:	00412a40 	call	412a4 <__divdf3>
   40e9c:	1009883a 	mov	r4,r2
   40ea0:	180b883a 	mov	r5,r3
   40ea4:	2005883a 	mov	r2,r4
   40ea8:	2807883a 	mov	r3,r5
   40eac:	01000174 	movhi	r4,5
   40eb0:	21358804 	addi	r4,r4,-10720
   40eb4:	100b883a 	mov	r5,r2
   40eb8:	180d883a 	mov	r6,r3
   40ebc:	0041b6c0 	call	41b6c <printf>
  printf("Custom instruction CRC vs optimized software CRC = %.2lf\n", (double)(sw_fast_timeB - sw_fast_timeA) / (double)(ci_timeB - ci_timeA));
   40ec0:	e0ff9d17 	ldw	r3,-396(fp)
   40ec4:	e0bf9c17 	ldw	r2,-400(fp)
   40ec8:	1885c83a 	sub	r2,r3,r2
   40ecc:	1009883a 	mov	r4,r2
   40ed0:	00414580 	call	41458 <__floatunsidf>
   40ed4:	1021883a 	mov	r16,r2
   40ed8:	1823883a 	mov	r17,r3
   40edc:	e0ff9f17 	ldw	r3,-388(fp)
   40ee0:	e0bf9e17 	ldw	r2,-392(fp)
   40ee4:	1885c83a 	sub	r2,r3,r2
   40ee8:	1009883a 	mov	r4,r2
   40eec:	00414580 	call	41458 <__floatunsidf>
   40ef0:	100f883a 	mov	r7,r2
   40ef4:	1811883a 	mov	r8,r3
   40ef8:	8009883a 	mov	r4,r16
   40efc:	880b883a 	mov	r5,r17
   40f00:	380d883a 	mov	r6,r7
   40f04:	400f883a 	mov	r7,r8
   40f08:	00412a40 	call	412a4 <__divdf3>
   40f0c:	1009883a 	mov	r4,r2
   40f10:	180b883a 	mov	r5,r3
   40f14:	2005883a 	mov	r2,r4
   40f18:	2807883a 	mov	r3,r5
   40f1c:	01000174 	movhi	r4,5
   40f20:	21359404 	addi	r4,r4,-10672
   40f24:	100b883a 	mov	r5,r2
   40f28:	180d883a 	mov	r6,r3
   40f2c:	0041b6c0 	call	41b6c <printf>
  printf("Optimized software CRC vs software CRC= %.2lf\n", (double)(sw_slow_timeB - sw_slow_timeA) / (double)(sw_fast_timeB - sw_fast_timeA));
   40f30:	e0ff9b17 	ldw	r3,-404(fp)
   40f34:	e0bf9a17 	ldw	r2,-408(fp)
   40f38:	1885c83a 	sub	r2,r3,r2
   40f3c:	1009883a 	mov	r4,r2
   40f40:	00414580 	call	41458 <__floatunsidf>
   40f44:	1021883a 	mov	r16,r2
   40f48:	1823883a 	mov	r17,r3
   40f4c:	e0ff9d17 	ldw	r3,-396(fp)
   40f50:	e0bf9c17 	ldw	r2,-400(fp)
   40f54:	1885c83a 	sub	r2,r3,r2
   40f58:	1009883a 	mov	r4,r2
   40f5c:	00414580 	call	41458 <__floatunsidf>
   40f60:	100f883a 	mov	r7,r2
   40f64:	1811883a 	mov	r8,r3
   40f68:	8009883a 	mov	r4,r16
   40f6c:	880b883a 	mov	r5,r17
   40f70:	380d883a 	mov	r6,r7
   40f74:	400f883a 	mov	r7,r8
   40f78:	00412a40 	call	412a4 <__divdf3>
   40f7c:	1009883a 	mov	r4,r2
   40f80:	180b883a 	mov	r5,r3
   40f84:	2005883a 	mov	r2,r4
   40f88:	2807883a 	mov	r3,r5
   40f8c:	01000174 	movhi	r4,5
   40f90:	2135a304 	addi	r4,r4,-10612
   40f94:	100b883a 	mov	r5,r2
   40f98:	180d883a 	mov	r6,r3
   40f9c:	0041b6c0 	call	41b6c <printf>

  return 0;
   40fa0:	0005883a 	mov	r2,zero
}
   40fa4:	e037883a 	mov	sp,fp
   40fa8:	dfc00317 	ldw	ra,12(sp)
   40fac:	df000217 	ldw	fp,8(sp)
   40fb0:	dc400117 	ldw	r17,4(sp)
   40fb4:	dc000017 	ldw	r16,0(sp)
   40fb8:	dec00404 	addi	sp,sp,16
   40fbc:	f800283a 	ret

00040fc0 <__muldf3>:
   40fc0:	deffe404 	addi	sp,sp,-112
   40fc4:	d9001115 	stw	r4,68(sp)
   40fc8:	d9401215 	stw	r5,72(sp)
   40fcc:	d9001104 	addi	r4,sp,68
   40fd0:	d9400a04 	addi	r5,sp,40
   40fd4:	dfc01b15 	stw	ra,108(sp)
   40fd8:	d9800f15 	stw	r6,60(sp)
   40fdc:	d9c01015 	stw	r7,64(sp)
   40fe0:	ddc01a15 	stw	r23,104(sp)
   40fe4:	dd801915 	stw	r22,100(sp)
   40fe8:	dd401815 	stw	r21,96(sp)
   40fec:	dd001715 	stw	r20,92(sp)
   40ff0:	dcc01615 	stw	r19,88(sp)
   40ff4:	dc801515 	stw	r18,84(sp)
   40ff8:	dc401415 	stw	r17,80(sp)
   40ffc:	dc001315 	stw	r16,76(sp)
   41000:	00419540 	call	41954 <__unpack_d>
   41004:	d9000f04 	addi	r4,sp,60
   41008:	d9400504 	addi	r5,sp,20
   4100c:	00419540 	call	41954 <__unpack_d>
   41010:	d8c00a17 	ldw	r3,40(sp)
   41014:	00800044 	movi	r2,1
   41018:	10c01136 	bltu	r2,r3,41060 <__muldf3+0xa0>
   4101c:	d8c00b17 	ldw	r3,44(sp)
   41020:	d8800617 	ldw	r2,24(sp)
   41024:	d9000a04 	addi	r4,sp,40
   41028:	1884c03a 	cmpne	r2,r3,r2
   4102c:	d8800b15 	stw	r2,44(sp)
   41030:	00417300 	call	41730 <__pack_d>
   41034:	dfc01b17 	ldw	ra,108(sp)
   41038:	ddc01a17 	ldw	r23,104(sp)
   4103c:	dd801917 	ldw	r22,100(sp)
   41040:	dd401817 	ldw	r21,96(sp)
   41044:	dd001717 	ldw	r20,92(sp)
   41048:	dcc01617 	ldw	r19,88(sp)
   4104c:	dc801517 	ldw	r18,84(sp)
   41050:	dc401417 	ldw	r17,80(sp)
   41054:	dc001317 	ldw	r16,76(sp)
   41058:	dec01c04 	addi	sp,sp,112
   4105c:	f800283a 	ret
   41060:	d9000517 	ldw	r4,20(sp)
   41064:	11000636 	bltu	r2,r4,41080 <__muldf3+0xc0>
   41068:	d8800617 	ldw	r2,24(sp)
   4106c:	d8c00b17 	ldw	r3,44(sp)
   41070:	d9000504 	addi	r4,sp,20
   41074:	1884c03a 	cmpne	r2,r3,r2
   41078:	d8800615 	stw	r2,24(sp)
   4107c:	003fec06 	br	41030 <__muldf3+0x70>
   41080:	00800104 	movi	r2,4
   41084:	1880051e 	bne	r3,r2,4109c <__muldf3+0xdc>
   41088:	00800084 	movi	r2,2
   4108c:	20bfe31e 	bne	r4,r2,4101c <__muldf3+0x5c>
   41090:	01000174 	movhi	r4,5
   41094:	2135af04 	addi	r4,r4,-10564
   41098:	003fe506 	br	41030 <__muldf3+0x70>
   4109c:	2080031e 	bne	r4,r2,410ac <__muldf3+0xec>
   410a0:	00800084 	movi	r2,2
   410a4:	18bffa26 	beq	r3,r2,41090 <__muldf3+0xd0>
   410a8:	003fef06 	br	41068 <__muldf3+0xa8>
   410ac:	00800084 	movi	r2,2
   410b0:	18bfda26 	beq	r3,r2,4101c <__muldf3+0x5c>
   410b4:	20bfec26 	beq	r4,r2,41068 <__muldf3+0xa8>
   410b8:	dc000d17 	ldw	r16,52(sp)
   410bc:	dd000817 	ldw	r20,32(sp)
   410c0:	dc800917 	ldw	r18,36(sp)
   410c4:	8009883a 	mov	r4,r16
   410c8:	000b883a 	mov	r5,zero
   410cc:	a00d883a 	mov	r6,r20
   410d0:	000f883a 	mov	r7,zero
   410d4:	00415740 	call	41574 <__muldi3>
   410d8:	dc400e17 	ldw	r17,56(sp)
   410dc:	9009883a 	mov	r4,r18
   410e0:	800d883a 	mov	r6,r16
   410e4:	000b883a 	mov	r5,zero
   410e8:	000f883a 	mov	r7,zero
   410ec:	102f883a 	mov	r23,r2
   410f0:	1827883a 	mov	r19,r3
   410f4:	00415740 	call	41574 <__muldi3>
   410f8:	900d883a 	mov	r6,r18
   410fc:	8809883a 	mov	r4,r17
   41100:	000b883a 	mov	r5,zero
   41104:	000f883a 	mov	r7,zero
   41108:	102b883a 	mov	r21,r2
   4110c:	1821883a 	mov	r16,r3
   41110:	00415740 	call	41574 <__muldi3>
   41114:	8809883a 	mov	r4,r17
   41118:	000b883a 	mov	r5,zero
   4111c:	a00d883a 	mov	r6,r20
   41120:	000f883a 	mov	r7,zero
   41124:	102d883a 	mov	r22,r2
   41128:	1825883a 	mov	r18,r3
   4112c:	00415740 	call	41574 <__muldi3>
   41130:	154b883a 	add	r5,r2,r21
   41134:	2889803a 	cmpltu	r4,r5,r2
   41138:	1c07883a 	add	r3,r3,r16
   4113c:	20c9883a 	add	r4,r4,r3
   41140:	24004b36 	bltu	r4,r16,41270 <__muldf3+0x2b0>
   41144:	8100011e 	bne	r16,r4,4114c <__muldf3+0x18c>
   41148:	2d404936 	bltu	r5,r21,41270 <__muldf3+0x2b0>
   4114c:	0011883a 	mov	r8,zero
   41150:	0007883a 	mov	r3,zero
   41154:	2ccb883a 	add	r5,r5,r19
   41158:	b80d883a 	mov	r6,r23
   4115c:	2cc0012e 	bgeu	r5,r19,41164 <__muldf3+0x1a4>
   41160:	02000044 	movi	r8,1
   41164:	258f883a 	add	r7,r4,r22
   41168:	3909803a 	cmpltu	r4,r7,r4
   4116c:	da400c17 	ldw	r9,48(sp)
   41170:	2489883a 	add	r4,r4,r18
   41174:	d8800717 	ldw	r2,28(sp)
   41178:	20c9883a 	add	r4,r4,r3
   4117c:	da800b17 	ldw	r10,44(sp)
   41180:	d8c00617 	ldw	r3,24(sp)
   41184:	3a11883a 	add	r8,r7,r8
   41188:	4885883a 	add	r2,r9,r2
   4118c:	50c6c03a 	cmpne	r3,r10,r3
   41190:	41cf803a 	cmpltu	r7,r8,r7
   41194:	12400104 	addi	r9,r2,4
   41198:	d8c00115 	stw	r3,4(sp)
   4119c:	3909883a 	add	r4,r7,r4
   411a0:	da400215 	stw	r9,8(sp)
   411a4:	03480034 	movhi	r13,8192
   411a8:	6b7fffc4 	addi	r13,r13,-1
   411ac:	4007883a 	mov	r3,r8
   411b0:	6900102e 	bgeu	r13,r4,411f4 <__muldf3+0x234>
   411b4:	10800144 	addi	r2,r2,5
   411b8:	180ed07a 	srli	r7,r3,1
   411bc:	18c0004c 	andi	r3,r3,1
   411c0:	201097fa 	slli	r8,r4,31
   411c4:	281697fa 	slli	r11,r5,31
   411c8:	2008d07a 	srli	r4,r4,1
   411cc:	3014d07a 	srli	r10,r6,1
   411d0:	2812d07a 	srli	r9,r5,1
   411d4:	1019883a 	mov	r12,r2
   411d8:	18000226 	beq	r3,zero,411e4 <__muldf3+0x224>
   411dc:	5a8cb03a 	or	r6,r11,r10
   411e0:	49600034 	orhi	r5,r9,32768
   411e4:	41c6b03a 	or	r3,r8,r7
   411e8:	10800044 	addi	r2,r2,1
   411ec:	693ff236 	bltu	r13,r4,411b8 <__muldf3+0x1f8>
   411f0:	db000215 	stw	r12,8(sp)
   411f4:	03440034 	movhi	r13,4096
   411f8:	6b7fffc4 	addi	r13,r13,-1
   411fc:	69001336 	bltu	r13,r4,4124c <__muldf3+0x28c>
   41200:	d8800217 	ldw	r2,8(sp)
   41204:	10bfffc4 	addi	r2,r2,-1
   41208:	18d3883a 	add	r9,r3,r3
   4120c:	48c7803a 	cmpltu	r3,r9,r3
   41210:	2109883a 	add	r4,r4,r4
   41214:	190f883a 	add	r7,r3,r4
   41218:	3191883a 	add	r8,r6,r6
   4121c:	4197803a 	cmpltu	r11,r8,r6
   41220:	2955883a 	add	r10,r5,r5
   41224:	1019883a 	mov	r12,r2
   41228:	4807883a 	mov	r3,r9
   4122c:	3809883a 	mov	r4,r7
   41230:	2800010e 	bge	r5,zero,41238 <__muldf3+0x278>
   41234:	48c00054 	ori	r3,r9,1
   41238:	400d883a 	mov	r6,r8
   4123c:	5a8b883a 	add	r5,r11,r10
   41240:	10bfffc4 	addi	r2,r2,-1
   41244:	69fff02e 	bgeu	r13,r7,41208 <__muldf3+0x248>
   41248:	db000215 	stw	r12,8(sp)
   4124c:	18803fcc 	andi	r2,r3,255
   41250:	01c02004 	movi	r7,128
   41254:	11c00926 	beq	r2,r7,4127c <__muldf3+0x2bc>
   41258:	008000c4 	movi	r2,3
   4125c:	d9000415 	stw	r4,16(sp)
   41260:	d8c00315 	stw	r3,12(sp)
   41264:	d8800015 	stw	r2,0(sp)
   41268:	d809883a 	mov	r4,sp
   4126c:	003f7006 	br	41030 <__muldf3+0x70>
   41270:	0011883a 	mov	r8,zero
   41274:	00c00044 	movi	r3,1
   41278:	003fb606 	br	41154 <__muldf3+0x194>
   4127c:	19c0400c 	andi	r7,r3,256
   41280:	383ff51e 	bne	r7,zero,41258 <__muldf3+0x298>
   41284:	314ab03a 	or	r5,r6,r5
   41288:	283ff326 	beq	r5,zero,41258 <__muldf3+0x298>
   4128c:	1885883a 	add	r2,r3,r2
   41290:	10cb803a 	cmpltu	r5,r2,r3
   41294:	00ffc004 	movi	r3,-256
   41298:	10c6703a 	and	r3,r2,r3
   4129c:	2909883a 	add	r4,r5,r4
   412a0:	003fed06 	br	41258 <__muldf3+0x298>

000412a4 <__divdf3>:
   412a4:	defff104 	addi	sp,sp,-60
   412a8:	d9000c15 	stw	r4,48(sp)
   412ac:	d9400d15 	stw	r5,52(sp)
   412b0:	d9000c04 	addi	r4,sp,48
   412b4:	d9400504 	addi	r5,sp,20
   412b8:	dfc00e15 	stw	ra,56(sp)
   412bc:	d9800a15 	stw	r6,40(sp)
   412c0:	d9c00b15 	stw	r7,44(sp)
   412c4:	00419540 	call	41954 <__unpack_d>
   412c8:	d9000a04 	addi	r4,sp,40
   412cc:	d80b883a 	mov	r5,sp
   412d0:	00419540 	call	41954 <__unpack_d>
   412d4:	d8c00517 	ldw	r3,20(sp)
   412d8:	00800044 	movi	r2,1
   412dc:	10c00536 	bltu	r2,r3,412f4 <__divdf3+0x50>
   412e0:	d9000504 	addi	r4,sp,20
   412e4:	00417300 	call	41730 <__pack_d>
   412e8:	dfc00e17 	ldw	ra,56(sp)
   412ec:	dec00f04 	addi	sp,sp,60
   412f0:	f800283a 	ret
   412f4:	d9000017 	ldw	r4,0(sp)
   412f8:	11000536 	bltu	r2,r4,41310 <__divdf3+0x6c>
   412fc:	d809883a 	mov	r4,sp
   41300:	00417300 	call	41730 <__pack_d>
   41304:	dfc00e17 	ldw	ra,56(sp)
   41308:	dec00f04 	addi	sp,sp,60
   4130c:	f800283a 	ret
   41310:	d9800617 	ldw	r6,24(sp)
   41314:	d9400117 	ldw	r5,4(sp)
   41318:	00800104 	movi	r2,4
   4131c:	314af03a 	xor	r5,r6,r5
   41320:	d9400615 	stw	r5,24(sp)
   41324:	18800226 	beq	r3,r2,41330 <__divdf3+0x8c>
   41328:	01400084 	movi	r5,2
   4132c:	1940041e 	bne	r3,r5,41340 <__divdf3+0x9c>
   41330:	193feb1e 	bne	r3,r4,412e0 <__divdf3+0x3c>
   41334:	01000174 	movhi	r4,5
   41338:	2135af04 	addi	r4,r4,-10564
   4133c:	003fe906 	br	412e4 <__divdf3+0x40>
   41340:	20803326 	beq	r4,r2,41410 <__divdf3+0x16c>
   41344:	21403726 	beq	r4,r5,41424 <__divdf3+0x180>
   41348:	d8800217 	ldw	r2,8(sp)
   4134c:	d9000717 	ldw	r4,28(sp)
   41350:	d8c00917 	ldw	r3,36(sp)
   41354:	da000417 	ldw	r8,16(sp)
   41358:	2089c83a 	sub	r4,r4,r2
   4135c:	d9000715 	stw	r4,28(sp)
   41360:	d8800817 	ldw	r2,32(sp)
   41364:	dbc00317 	ldw	r15,12(sp)
   41368:	1a000236 	bltu	r3,r8,41374 <__divdf3+0xd0>
   4136c:	40c0081e 	bne	r8,r3,41390 <__divdf3+0xec>
   41370:	13c0072e 	bgeu	r2,r15,41390 <__divdf3+0xec>
   41374:	108b883a 	add	r5,r2,r2
   41378:	288d803a 	cmpltu	r6,r5,r2
   4137c:	18c7883a 	add	r3,r3,r3
   41380:	213fffc4 	addi	r4,r4,-1
   41384:	2805883a 	mov	r2,r5
   41388:	30c7883a 	add	r3,r6,r3
   4138c:	d9000715 	stw	r4,28(sp)
   41390:	01400f44 	movi	r5,61
   41394:	000f883a 	mov	r7,zero
   41398:	01040034 	movhi	r4,4096
   4139c:	0019883a 	mov	r12,zero
   413a0:	001b883a 	mov	r13,zero
   413a4:	201697fa 	slli	r11,r4,31
   413a8:	3814d07a 	srli	r10,r7,1
   413ac:	297fffc4 	addi	r5,r5,-1
   413b0:	1a000936 	bltu	r3,r8,413d8 <__divdf3+0x134>
   413b4:	13cdc83a 	sub	r6,r2,r15
   413b8:	1193803a 	cmpltu	r9,r2,r6
   413bc:	1a1dc83a 	sub	r14,r3,r8
   413c0:	40c0011e 	bne	r8,r3,413c8 <__divdf3+0x124>
   413c4:	13c00436 	bltu	r2,r15,413d8 <__divdf3+0x134>
   413c8:	3005883a 	mov	r2,r6
   413cc:	7247c83a 	sub	r3,r14,r9
   413d0:	61d8b03a 	or	r12,r12,r7
   413d4:	691ab03a 	or	r13,r13,r4
   413d8:	108d883a 	add	r6,r2,r2
   413dc:	3093803a 	cmpltu	r9,r6,r2
   413e0:	18c7883a 	add	r3,r3,r3
   413e4:	5a8eb03a 	or	r7,r11,r10
   413e8:	2008d07a 	srli	r4,r4,1
   413ec:	3005883a 	mov	r2,r6
   413f0:	48c7883a 	add	r3,r9,r3
   413f4:	283feb1e 	bne	r5,zero,413a4 <__divdf3+0x100>
   413f8:	61003fcc 	andi	r4,r12,255
   413fc:	01402004 	movi	r5,128
   41400:	21400b26 	beq	r4,r5,41430 <__divdf3+0x18c>
   41404:	db000815 	stw	r12,32(sp)
   41408:	db400915 	stw	r13,36(sp)
   4140c:	003fb406 	br	412e0 <__divdf3+0x3c>
   41410:	d8000815 	stw	zero,32(sp)
   41414:	d8000915 	stw	zero,36(sp)
   41418:	d8000715 	stw	zero,28(sp)
   4141c:	d9000504 	addi	r4,sp,20
   41420:	003fb006 	br	412e4 <__divdf3+0x40>
   41424:	d8800515 	stw	r2,20(sp)
   41428:	d9000504 	addi	r4,sp,20
   4142c:	003fad06 	br	412e4 <__divdf3+0x40>
   41430:	6140400c 	andi	r5,r12,256
   41434:	283ff31e 	bne	r5,zero,41404 <__divdf3+0x160>
   41438:	30c4b03a 	or	r2,r6,r3
   4143c:	103ff126 	beq	r2,zero,41404 <__divdf3+0x160>
   41440:	6109883a 	add	r4,r12,r4
   41444:	2305803a 	cmpltu	r2,r4,r12
   41448:	033fc004 	movi	r12,-256
   4144c:	2318703a 	and	r12,r4,r12
   41450:	135b883a 	add	r13,r2,r13
   41454:	003feb06 	br	41404 <__divdf3+0x160>

00041458 <__floatunsidf>:
   41458:	defff904 	addi	sp,sp,-28
   4145c:	dc000515 	stw	r16,20(sp)
   41460:	dfc00615 	stw	ra,24(sp)
   41464:	d8000115 	stw	zero,4(sp)
   41468:	2021883a 	mov	r16,r4
   4146c:	20001726 	beq	r4,zero,414cc <__floatunsidf+0x74>
   41470:	008000c4 	movi	r2,3
   41474:	d8800015 	stw	r2,0(sp)
   41478:	00800f04 	movi	r2,60
   4147c:	d8800215 	stw	r2,8(sp)
   41480:	00416840 	call	41684 <__clzsi2>
   41484:	10c00744 	addi	r3,r2,29
   41488:	18001816 	blt	r3,zero,414ec <__floatunsidf+0x94>
   4148c:	18002d26 	beq	r3,zero,41544 <__floatunsidf+0xec>
   41490:	113fff44 	addi	r4,r2,-3
   41494:	20002e16 	blt	r4,zero,41550 <__floatunsidf+0xf8>
   41498:	8108983a 	sll	r4,r16,r4
   4149c:	0021883a 	mov	r16,zero
   414a0:	014007c4 	movi	r5,31
   414a4:	2885c83a 	sub	r2,r5,r2
   414a8:	dc000315 	stw	r16,12(sp)
   414ac:	d9000415 	stw	r4,16(sp)
   414b0:	d8800215 	stw	r2,8(sp)
   414b4:	d809883a 	mov	r4,sp
   414b8:	00417300 	call	41730 <__pack_d>
   414bc:	dfc00617 	ldw	ra,24(sp)
   414c0:	dc000517 	ldw	r16,20(sp)
   414c4:	dec00704 	addi	sp,sp,28
   414c8:	f800283a 	ret
   414cc:	00800084 	movi	r2,2
   414d0:	d809883a 	mov	r4,sp
   414d4:	d8800015 	stw	r2,0(sp)
   414d8:	00417300 	call	41730 <__pack_d>
   414dc:	dfc00617 	ldw	ra,24(sp)
   414e0:	dc000517 	ldw	r16,20(sp)
   414e4:	dec00704 	addi	sp,sp,28
   414e8:	f800283a 	ret
   414ec:	00c7c83a 	sub	r3,zero,r3
   414f0:	193ff804 	addi	r4,r3,-32
   414f4:	20001c16 	blt	r4,zero,41568 <__floatunsidf+0x110>
   414f8:	000b883a 	mov	r5,zero
   414fc:	2009d7fa 	srai	r4,r4,31
   41500:	80c6d83a 	srl	r3,r16,r3
   41504:	297fffc4 	addi	r5,r5,-1
   41508:	2c20703a 	and	r16,r5,r16
   4150c:	8020c03a 	cmpne	r16,r16,zero
   41510:	1906703a 	and	r3,r3,r4
   41514:	010007c4 	movi	r4,31
   41518:	80c6b03a 	or	r3,r16,r3
   4151c:	2085c83a 	sub	r2,r4,r2
   41520:	d809883a 	mov	r4,sp
   41524:	d8c00315 	stw	r3,12(sp)
   41528:	d8000415 	stw	zero,16(sp)
   4152c:	d8800215 	stw	r2,8(sp)
   41530:	00417300 	call	41730 <__pack_d>
   41534:	dfc00617 	ldw	ra,24(sp)
   41538:	dc000517 	ldw	r16,20(sp)
   4153c:	dec00704 	addi	sp,sp,28
   41540:	f800283a 	ret
   41544:	dc000315 	stw	r16,12(sp)
   41548:	d8000415 	stw	zero,16(sp)
   4154c:	003fd906 	br	414b4 <__floatunsidf+0x5c>
   41550:	800ad07a 	srli	r5,r16,1
   41554:	010007c4 	movi	r4,31
   41558:	20c9c83a 	sub	r4,r4,r3
   4155c:	2908d83a 	srl	r4,r5,r4
   41560:	80e0983a 	sll	r16,r16,r3
   41564:	003fce06 	br	414a0 <__floatunsidf+0x48>
   41568:	01400044 	movi	r5,1
   4156c:	28ca983a 	sll	r5,r5,r3
   41570:	003fe206 	br	414fc <__floatunsidf+0xa4>

00041574 <__muldi3>:
   41574:	defff604 	addi	sp,sp,-40
   41578:	dd400515 	stw	r21,20(sp)
   4157c:	dd000415 	stw	r20,16(sp)
   41580:	257fffcc 	andi	r21,r4,65535
   41584:	353fffcc 	andi	r20,r6,65535
   41588:	dcc00315 	stw	r19,12(sp)
   4158c:	3026d43a 	srli	r19,r6,16
   41590:	dd800615 	stw	r22,24(sp)
   41594:	dc800215 	stw	r18,8(sp)
   41598:	dc400115 	stw	r17,4(sp)
   4159c:	2024d43a 	srli	r18,r4,16
   415a0:	2023883a 	mov	r17,r4
   415a4:	282d883a 	mov	r22,r5
   415a8:	a009883a 	mov	r4,r20
   415ac:	a80b883a 	mov	r5,r21
   415b0:	dfc00915 	stw	ra,36(sp)
   415b4:	df000815 	stw	fp,32(sp)
   415b8:	ddc00715 	stw	r23,28(sp)
   415bc:	3839883a 	mov	fp,r7
   415c0:	dc000015 	stw	r16,0(sp)
   415c4:	3021883a 	mov	r16,r6
   415c8:	0041a580 	call	41a58 <__mulsi3>
   415cc:	a80b883a 	mov	r5,r21
   415d0:	9809883a 	mov	r4,r19
   415d4:	102f883a 	mov	r23,r2
   415d8:	0041a580 	call	41a58 <__mulsi3>
   415dc:	a009883a 	mov	r4,r20
   415e0:	900b883a 	mov	r5,r18
   415e4:	102b883a 	mov	r21,r2
   415e8:	0041a580 	call	41a58 <__mulsi3>
   415ec:	9809883a 	mov	r4,r19
   415f0:	900b883a 	mov	r5,r18
   415f4:	1029883a 	mov	r20,r2
   415f8:	0041a580 	call	41a58 <__mulsi3>
   415fc:	1007883a 	mov	r3,r2
   41600:	b804d43a 	srli	r2,r23,16
   41604:	a549883a 	add	r4,r20,r21
   41608:	2089883a 	add	r4,r4,r2
   4160c:	2500022e 	bgeu	r4,r20,41618 <__muldi3+0xa4>
   41610:	00800074 	movhi	r2,1
   41614:	1887883a 	add	r3,r3,r2
   41618:	200cd43a 	srli	r6,r4,16
   4161c:	2004943a 	slli	r2,r4,16
   41620:	e00b883a 	mov	r5,fp
   41624:	8809883a 	mov	r4,r17
   41628:	bdffffcc 	andi	r23,r23,65535
   4162c:	19a3883a 	add	r17,r3,r6
   41630:	15ef883a 	add	r23,r2,r23
   41634:	0041a580 	call	41a58 <__mulsi3>
   41638:	8009883a 	mov	r4,r16
   4163c:	b00b883a 	mov	r5,r22
   41640:	1025883a 	mov	r18,r2
   41644:	0041a580 	call	41a58 <__mulsi3>
   41648:	9085883a 	add	r2,r18,r2
   4164c:	1447883a 	add	r3,r2,r17
   41650:	b805883a 	mov	r2,r23
   41654:	dfc00917 	ldw	ra,36(sp)
   41658:	df000817 	ldw	fp,32(sp)
   4165c:	ddc00717 	ldw	r23,28(sp)
   41660:	dd800617 	ldw	r22,24(sp)
   41664:	dd400517 	ldw	r21,20(sp)
   41668:	dd000417 	ldw	r20,16(sp)
   4166c:	dcc00317 	ldw	r19,12(sp)
   41670:	dc800217 	ldw	r18,8(sp)
   41674:	dc400117 	ldw	r17,4(sp)
   41678:	dc000017 	ldw	r16,0(sp)
   4167c:	dec00a04 	addi	sp,sp,40
   41680:	f800283a 	ret

00041684 <__clzsi2>:
   41684:	00bfffd4 	movui	r2,65535
   41688:	11000b36 	bltu	r2,r4,416b8 <__clzsi2+0x34>
   4168c:	00803fc4 	movi	r2,255
   41690:	11001e2e 	bgeu	r2,r4,4170c <__clzsi2+0x88>
   41694:	00c00204 	movi	r3,8
   41698:	20c8d83a 	srl	r4,r4,r3
   4169c:	00c00174 	movhi	r3,5
   416a0:	18f5b404 	addi	r3,r3,-10544
   416a4:	00800604 	movi	r2,24
   416a8:	1909883a 	add	r4,r3,r4
   416ac:	20c00003 	ldbu	r3,0(r4)
   416b0:	10c5c83a 	sub	r2,r2,r3
   416b4:	f800283a 	ret
   416b8:	00804034 	movhi	r2,256
   416bc:	10bfffc4 	addi	r2,r2,-1
   416c0:	11000936 	bltu	r2,r4,416e8 <__clzsi2+0x64>
   416c4:	00800404 	movi	r2,16
   416c8:	1007883a 	mov	r3,r2
   416cc:	20c8d83a 	srl	r4,r4,r3
   416d0:	00c00174 	movhi	r3,5
   416d4:	18f5b404 	addi	r3,r3,-10544
   416d8:	1909883a 	add	r4,r3,r4
   416dc:	20c00003 	ldbu	r3,0(r4)
   416e0:	10c5c83a 	sub	r2,r2,r3
   416e4:	f800283a 	ret
   416e8:	00c00604 	movi	r3,24
   416ec:	20c8d83a 	srl	r4,r4,r3
   416f0:	00c00174 	movhi	r3,5
   416f4:	18f5b404 	addi	r3,r3,-10544
   416f8:	00800204 	movi	r2,8
   416fc:	1909883a 	add	r4,r3,r4
   41700:	20c00003 	ldbu	r3,0(r4)
   41704:	10c5c83a 	sub	r2,r2,r3
   41708:	f800283a 	ret
   4170c:	0007883a 	mov	r3,zero
   41710:	20c8d83a 	srl	r4,r4,r3
   41714:	00c00174 	movhi	r3,5
   41718:	18f5b404 	addi	r3,r3,-10544
   4171c:	00800804 	movi	r2,32
   41720:	1909883a 	add	r4,r3,r4
   41724:	20c00003 	ldbu	r3,0(r4)
   41728:	10c5c83a 	sub	r2,r2,r3
   4172c:	f800283a 	ret

00041730 <__pack_d>:
   41730:	20800017 	ldw	r2,0(r4)
   41734:	defff804 	addi	sp,sp,-32
   41738:	dcc00315 	stw	r19,12(sp)
   4173c:	dc800215 	stw	r18,8(sp)
   41740:	dfc00715 	stw	ra,28(sp)
   41744:	dd800615 	stw	r22,24(sp)
   41748:	dd400515 	stw	r21,20(sp)
   4174c:	dd000415 	stw	r20,16(sp)
   41750:	dc400115 	stw	r17,4(sp)
   41754:	dc000015 	stw	r16,0(sp)
   41758:	04800044 	movi	r18,1
   4175c:	24400317 	ldw	r17,12(r4)
   41760:	24000417 	ldw	r16,16(r4)
   41764:	24c00117 	ldw	r19,4(r4)
   41768:	9080422e 	bgeu	r18,r2,41874 <__pack_d+0x144>
   4176c:	00c00104 	movi	r3,4
   41770:	10c03c26 	beq	r2,r3,41864 <__pack_d+0x134>
   41774:	00c00084 	movi	r3,2
   41778:	10c01926 	beq	r2,r3,417e0 <__pack_d+0xb0>
   4177c:	8c04b03a 	or	r2,r17,r16
   41780:	10001726 	beq	r2,zero,417e0 <__pack_d+0xb0>
   41784:	21000217 	ldw	r4,8(r4)
   41788:	00bf0084 	movi	r2,-1022
   4178c:	20804016 	blt	r4,r2,41890 <__pack_d+0x160>
   41790:	0080ffc4 	movi	r2,1023
   41794:	11003316 	blt	r2,r4,41864 <__pack_d+0x134>
   41798:	88803fcc 	andi	r2,r17,255
   4179c:	00c02004 	movi	r3,128
   417a0:	10c02926 	beq	r2,r3,41848 <__pack_d+0x118>
   417a4:	88801fc4 	addi	r2,r17,127
   417a8:	1463803a 	cmpltu	r17,r2,r17
   417ac:	8c21883a 	add	r16,r17,r16
   417b0:	1023883a 	mov	r17,r2
   417b4:	00880034 	movhi	r2,8192
   417b8:	10bfffc4 	addi	r2,r2,-1
   417bc:	14001c36 	bltu	r2,r16,41830 <__pack_d+0x100>
   417c0:	2100ffc4 	addi	r4,r4,1023
   417c4:	8006963a 	slli	r3,r16,24
   417c8:	8804d23a 	srli	r2,r17,8
   417cc:	8020913a 	slli	r16,r16,4
   417d0:	2101ffcc 	andi	r4,r4,2047
   417d4:	1884b03a 	or	r2,r3,r2
   417d8:	8020d33a 	srli	r16,r16,12
   417dc:	00000306 	br	417ec <__pack_d+0xbc>
   417e0:	0009883a 	mov	r4,zero
   417e4:	0005883a 	mov	r2,zero
   417e8:	0021883a 	mov	r16,zero
   417ec:	2008953a 	slli	r4,r4,20
   417f0:	982697fa 	slli	r19,r19,31
   417f4:	00c00434 	movhi	r3,16
   417f8:	18ffffc4 	addi	r3,r3,-1
   417fc:	80e0703a 	and	r16,r16,r3
   41800:	8106b03a 	or	r3,r16,r4
   41804:	1cc6b03a 	or	r3,r3,r19
   41808:	dfc00717 	ldw	ra,28(sp)
   4180c:	dd800617 	ldw	r22,24(sp)
   41810:	dd400517 	ldw	r21,20(sp)
   41814:	dd000417 	ldw	r20,16(sp)
   41818:	dcc00317 	ldw	r19,12(sp)
   4181c:	dc800217 	ldw	r18,8(sp)
   41820:	dc400117 	ldw	r17,4(sp)
   41824:	dc000017 	ldw	r16,0(sp)
   41828:	dec00804 	addi	sp,sp,32
   4182c:	f800283a 	ret
   41830:	800697fa 	slli	r3,r16,31
   41834:	8804d07a 	srli	r2,r17,1
   41838:	21010004 	addi	r4,r4,1024
   4183c:	8020d07a 	srli	r16,r16,1
   41840:	18a2b03a 	or	r17,r3,r2
   41844:	003fdf06 	br	417c4 <__pack_d+0x94>
   41848:	88c0400c 	andi	r3,r17,256
   4184c:	183fd926 	beq	r3,zero,417b4 <__pack_d+0x84>
   41850:	8885883a 	add	r2,r17,r2
   41854:	1463803a 	cmpltu	r17,r2,r17
   41858:	8c21883a 	add	r16,r17,r16
   4185c:	1023883a 	mov	r17,r2
   41860:	003fd406 	br	417b4 <__pack_d+0x84>
   41864:	0101ffc4 	movi	r4,2047
   41868:	0005883a 	mov	r2,zero
   4186c:	0021883a 	mov	r16,zero
   41870:	003fde06 	br	417ec <__pack_d+0xbc>
   41874:	84000234 	orhi	r16,r16,8
   41878:	00c00434 	movhi	r3,16
   4187c:	18ffffc4 	addi	r3,r3,-1
   41880:	8805883a 	mov	r2,r17
   41884:	80e0703a 	and	r16,r16,r3
   41888:	0101ffc4 	movi	r4,2047
   4188c:	003fd706 	br	417ec <__pack_d+0xbc>
   41890:	1129c83a 	sub	r20,r2,r4
   41894:	00800e04 	movi	r2,56
   41898:	15002716 	blt	r2,r20,41938 <__pack_d+0x208>
   4189c:	800b883a 	mov	r5,r16
   418a0:	a00d883a 	mov	r6,r20
   418a4:	8809883a 	mov	r4,r17
   418a8:	0041a800 	call	41a80 <__lshrdi3>
   418ac:	9009883a 	mov	r4,r18
   418b0:	000b883a 	mov	r5,zero
   418b4:	a00d883a 	mov	r6,r20
   418b8:	102d883a 	mov	r22,r2
   418bc:	182b883a 	mov	r21,r3
   418c0:	0041ac40 	call	41ac4 <__ashldi3>
   418c4:	1009003a 	cmpeq	r4,r2,zero
   418c8:	1907c83a 	sub	r3,r3,r4
   418cc:	10bfffc4 	addi	r2,r2,-1
   418d0:	1c20703a 	and	r16,r3,r16
   418d4:	1444703a 	and	r2,r2,r17
   418d8:	1404b03a 	or	r2,r2,r16
   418dc:	1004c03a 	cmpne	r2,r2,zero
   418e0:	1584b03a 	or	r2,r2,r22
   418e4:	11003fcc 	andi	r4,r2,255
   418e8:	01402004 	movi	r5,128
   418ec:	a807883a 	mov	r3,r21
   418f0:	2140131e 	bne	r4,r5,41940 <__pack_d+0x210>
   418f4:	1140400c 	andi	r5,r2,256
   418f8:	28000426 	beq	r5,zero,4190c <__pack_d+0x1dc>
   418fc:	1109883a 	add	r4,r2,r4
   41900:	2085803a 	cmpltu	r2,r4,r2
   41904:	1547883a 	add	r3,r2,r21
   41908:	2005883a 	mov	r2,r4
   4190c:	1808963a 	slli	r4,r3,24
   41910:	1004d23a 	srli	r2,r2,8
   41914:	1820913a 	slli	r16,r3,4
   41918:	01440034 	movhi	r5,4096
   4191c:	297fffc4 	addi	r5,r5,-1
   41920:	2084b03a 	or	r2,r4,r2
   41924:	8020d33a 	srli	r16,r16,12
   41928:	01000044 	movi	r4,1
   4192c:	28ffaf36 	bltu	r5,r3,417ec <__pack_d+0xbc>
   41930:	0009883a 	mov	r4,zero
   41934:	003fad06 	br	417ec <__pack_d+0xbc>
   41938:	0005883a 	mov	r2,zero
   4193c:	0007883a 	mov	r3,zero
   41940:	11001fc4 	addi	r4,r2,127
   41944:	2085803a 	cmpltu	r2,r4,r2
   41948:	10c7883a 	add	r3,r2,r3
   4194c:	2005883a 	mov	r2,r4
   41950:	003fee06 	br	4190c <__pack_d+0x1dc>

00041954 <__unpack_d>:
   41954:	21800117 	ldw	r6,4(r4)
   41958:	20c00017 	ldw	r3,0(r4)
   4195c:	3004d7fa 	srli	r2,r6,31
   41960:	3008d53a 	srli	r4,r6,20
   41964:	28800115 	stw	r2,4(r5)
   41968:	2101ffcc 	andi	r4,r4,2047
   4196c:	00800434 	movhi	r2,16
   41970:	10bfffc4 	addi	r2,r2,-1
   41974:	3084703a 	and	r2,r6,r2
   41978:	20001a1e 	bne	r4,zero,419e4 <__unpack_d+0x90>
   4197c:	1888b03a 	or	r4,r3,r2
   41980:	20002626 	beq	r4,zero,41a1c <__unpack_d+0xc8>
   41984:	1808d63a 	srli	r4,r3,24
   41988:	1004923a 	slli	r2,r2,8
   4198c:	01bf0084 	movi	r6,-1022
   41990:	29800215 	stw	r6,8(r5)
   41994:	2084b03a 	or	r2,r4,r2
   41998:	010000c4 	movi	r4,3
   4199c:	29000015 	stw	r4,0(r5)
   419a0:	02040034 	movhi	r8,4096
   419a4:	423fffc4 	addi	r8,r8,-1
   419a8:	1806923a 	slli	r3,r3,8
   419ac:	40801836 	bltu	r8,r2,41a10 <__unpack_d+0xbc>
   419b0:	013f0044 	movi	r4,-1023
   419b4:	18cd883a 	add	r6,r3,r3
   419b8:	30c7803a 	cmpltu	r3,r6,r3
   419bc:	1085883a 	add	r2,r2,r2
   419c0:	1885883a 	add	r2,r3,r2
   419c4:	200f883a 	mov	r7,r4
   419c8:	3007883a 	mov	r3,r6
   419cc:	213fffc4 	addi	r4,r4,-1
   419d0:	40bff82e 	bgeu	r8,r2,419b4 <__unpack_d+0x60>
   419d4:	29c00215 	stw	r7,8(r5)
   419d8:	28c00315 	stw	r3,12(r5)
   419dc:	28800415 	stw	r2,16(r5)
   419e0:	f800283a 	ret
   419e4:	01c1ffc4 	movi	r7,2047
   419e8:	21c00f26 	beq	r4,r7,41a28 <__unpack_d+0xd4>
   419ec:	180cd63a 	srli	r6,r3,24
   419f0:	1004923a 	slli	r2,r2,8
   419f4:	213f0044 	addi	r4,r4,-1023
   419f8:	1806923a 	slli	r3,r3,8
   419fc:	3084b03a 	or	r2,r6,r2
   41a00:	29000215 	stw	r4,8(r5)
   41a04:	010000c4 	movi	r4,3
   41a08:	10840034 	orhi	r2,r2,4096
   41a0c:	29000015 	stw	r4,0(r5)
   41a10:	28c00315 	stw	r3,12(r5)
   41a14:	28800415 	stw	r2,16(r5)
   41a18:	f800283a 	ret
   41a1c:	00800084 	movi	r2,2
   41a20:	28800015 	stw	r2,0(r5)
   41a24:	f800283a 	ret
   41a28:	1888b03a 	or	r4,r3,r2
   41a2c:	20000526 	beq	r4,zero,41a44 <__unpack_d+0xf0>
   41a30:	3180022c 	andhi	r6,r6,8
   41a34:	30000626 	beq	r6,zero,41a50 <__unpack_d+0xfc>
   41a38:	01000044 	movi	r4,1
   41a3c:	29000015 	stw	r4,0(r5)
   41a40:	003ff306 	br	41a10 <__unpack_d+0xbc>
   41a44:	00800104 	movi	r2,4
   41a48:	28800015 	stw	r2,0(r5)
   41a4c:	f800283a 	ret
   41a50:	28000015 	stw	zero,0(r5)
   41a54:	003fee06 	br	41a10 <__unpack_d+0xbc>

00041a58 <__mulsi3>:
   41a58:	0005883a 	mov	r2,zero
   41a5c:	20000726 	beq	r4,zero,41a7c <__mulsi3+0x24>
   41a60:	20c0004c 	andi	r3,r4,1
   41a64:	2008d07a 	srli	r4,r4,1
   41a68:	18000126 	beq	r3,zero,41a70 <__mulsi3+0x18>
   41a6c:	1145883a 	add	r2,r2,r5
   41a70:	294b883a 	add	r5,r5,r5
   41a74:	203ffa1e 	bne	r4,zero,41a60 <__mulsi3+0x8>
   41a78:	f800283a 	ret
   41a7c:	f800283a 	ret

00041a80 <__lshrdi3>:
   41a80:	2005883a 	mov	r2,r4
   41a84:	2807883a 	mov	r3,r5
   41a88:	30000826 	beq	r6,zero,41aac <__lshrdi3+0x2c>
   41a8c:	01000804 	movi	r4,32
   41a90:	2189c83a 	sub	r4,r4,r6
   41a94:	0100060e 	bge	zero,r4,41ab0 <__lshrdi3+0x30>
   41a98:	1184d83a 	srl	r2,r2,r6
   41a9c:	2908983a 	sll	r4,r5,r4
   41aa0:	298cd83a 	srl	r6,r5,r6
   41aa4:	2084b03a 	or	r2,r4,r2
   41aa8:	3007883a 	mov	r3,r6
   41aac:	f800283a 	ret
   41ab0:	0105c83a 	sub	r2,zero,r4
   41ab4:	000d883a 	mov	r6,zero
   41ab8:	2884d83a 	srl	r2,r5,r2
   41abc:	3007883a 	mov	r3,r6
   41ac0:	003ffa06 	br	41aac <__lshrdi3+0x2c>

00041ac4 <__ashldi3>:
   41ac4:	2005883a 	mov	r2,r4
   41ac8:	2807883a 	mov	r3,r5
   41acc:	30000826 	beq	r6,zero,41af0 <__ashldi3+0x2c>
   41ad0:	01000804 	movi	r4,32
   41ad4:	2189c83a 	sub	r4,r4,r6
   41ad8:	0100060e 	bge	zero,r4,41af4 <__ashldi3+0x30>
   41adc:	1108d83a 	srl	r4,r2,r4
   41ae0:	2986983a 	sll	r3,r5,r6
   41ae4:	118c983a 	sll	r6,r2,r6
   41ae8:	20c6b03a 	or	r3,r4,r3
   41aec:	3005883a 	mov	r2,r6
   41af0:	f800283a 	ret
   41af4:	0107c83a 	sub	r3,zero,r4
   41af8:	000d883a 	mov	r6,zero
   41afc:	10c6983a 	sll	r3,r2,r3
   41b00:	3005883a 	mov	r2,r6
   41b04:	003ffa06 	br	41af0 <__ashldi3+0x2c>

00041b08 <exit>:
   41b08:	defffe04 	addi	sp,sp,-8
   41b0c:	000b883a 	mov	r5,zero
   41b10:	dc000015 	stw	r16,0(sp)
   41b14:	dfc00115 	stw	ra,4(sp)
   41b18:	2021883a 	mov	r16,r4
   41b1c:	0043d140 	call	43d14 <__call_exitprocs>
   41b20:	00800174 	movhi	r2,5
   41b24:	10bcfe04 	addi	r2,r2,-3080
   41b28:	11000017 	ldw	r4,0(r2)
   41b2c:	20800f17 	ldw	r2,60(r4)
   41b30:	10000126 	beq	r2,zero,41b38 <exit+0x30>
   41b34:	103ee83a 	callr	r2
   41b38:	8009883a 	mov	r4,r16
   41b3c:	004a9dc0 	call	4a9dc <_exit>

00041b40 <_printf_r>:
   41b40:	defffd04 	addi	sp,sp,-12
   41b44:	dfc00015 	stw	ra,0(sp)
   41b48:	d9800115 	stw	r6,4(sp)
   41b4c:	d9c00215 	stw	r7,8(sp)
   41b50:	280d883a 	mov	r6,r5
   41b54:	21400217 	ldw	r5,8(r4)
   41b58:	d9c00104 	addi	r7,sp,4
   41b5c:	0041d000 	call	41d00 <___vfprintf_internal_r>
   41b60:	dfc00017 	ldw	ra,0(sp)
   41b64:	dec00304 	addi	sp,sp,12
   41b68:	f800283a 	ret

00041b6c <printf>:
   41b6c:	defffc04 	addi	sp,sp,-16
   41b70:	dfc00015 	stw	ra,0(sp)
   41b74:	d9400115 	stw	r5,4(sp)
   41b78:	d9800215 	stw	r6,8(sp)
   41b7c:	d9c00315 	stw	r7,12(sp)
   41b80:	00800174 	movhi	r2,5
   41b84:	10bcff04 	addi	r2,r2,-3076
   41b88:	10800017 	ldw	r2,0(r2)
   41b8c:	200b883a 	mov	r5,r4
   41b90:	d9800104 	addi	r6,sp,4
   41b94:	11000217 	ldw	r4,8(r2)
   41b98:	0043b7c0 	call	43b7c <__vfprintf_internal>
   41b9c:	dfc00017 	ldw	ra,0(sp)
   41ba0:	dec00404 	addi	sp,sp,16
   41ba4:	f800283a 	ret

00041ba8 <_puts_r>:
   41ba8:	defff604 	addi	sp,sp,-40
   41bac:	dc400815 	stw	r17,32(sp)
   41bb0:	2023883a 	mov	r17,r4
   41bb4:	2809883a 	mov	r4,r5
   41bb8:	dc000715 	stw	r16,28(sp)
   41bbc:	dfc00915 	stw	ra,36(sp)
   41bc0:	2821883a 	mov	r16,r5
   41bc4:	0041c400 	call	41c40 <strlen>
   41bc8:	10c00044 	addi	r3,r2,1
   41bcc:	d8800115 	stw	r2,4(sp)
   41bd0:	89400217 	ldw	r5,8(r17)
   41bd4:	00800174 	movhi	r2,5
   41bd8:	10b5f504 	addi	r2,r2,-10284
   41bdc:	d8800215 	stw	r2,8(sp)
   41be0:	00800044 	movi	r2,1
   41be4:	d8800315 	stw	r2,12(sp)
   41be8:	8809883a 	mov	r4,r17
   41bec:	00800084 	movi	r2,2
   41bf0:	d9800404 	addi	r6,sp,16
   41bf4:	dc000015 	stw	r16,0(sp)
   41bf8:	d8c00615 	stw	r3,24(sp)
   41bfc:	dec00415 	stw	sp,16(sp)
   41c00:	d8800515 	stw	r2,20(sp)
   41c04:	004601c0 	call	4601c <__sfvwrite_r>
   41c08:	1000061e 	bne	r2,zero,41c24 <_puts_r+0x7c>
   41c0c:	00800284 	movi	r2,10
   41c10:	dfc00917 	ldw	ra,36(sp)
   41c14:	dc400817 	ldw	r17,32(sp)
   41c18:	dc000717 	ldw	r16,28(sp)
   41c1c:	dec00a04 	addi	sp,sp,40
   41c20:	f800283a 	ret
   41c24:	00bfffc4 	movi	r2,-1
   41c28:	003ff906 	br	41c10 <_puts_r+0x68>

00041c2c <puts>:
   41c2c:	00800174 	movhi	r2,5
   41c30:	10bcff04 	addi	r2,r2,-3076
   41c34:	200b883a 	mov	r5,r4
   41c38:	11000017 	ldw	r4,0(r2)
   41c3c:	0041ba81 	jmpi	41ba8 <_puts_r>

00041c40 <strlen>:
   41c40:	208000cc 	andi	r2,r4,3
   41c44:	10001f1e 	bne	r2,zero,41cc4 <strlen+0x84>
   41c48:	20800017 	ldw	r2,0(r4)
   41c4c:	01ffbff4 	movhi	r7,65279
   41c50:	39ffbfc4 	addi	r7,r7,-257
   41c54:	01a02074 	movhi	r6,32897
   41c58:	31a02004 	addi	r6,r6,-32640
   41c5c:	11c7883a 	add	r3,r2,r7
   41c60:	0084303a 	nor	r2,zero,r2
   41c64:	1886703a 	and	r3,r3,r2
   41c68:	1986703a 	and	r3,r3,r6
   41c6c:	2005883a 	mov	r2,r4
   41c70:	1800101e 	bne	r3,zero,41cb4 <strlen+0x74>
   41c74:	10800104 	addi	r2,r2,4
   41c78:	10c00017 	ldw	r3,0(r2)
   41c7c:	19cb883a 	add	r5,r3,r7
   41c80:	00c6303a 	nor	r3,zero,r3
   41c84:	28c6703a 	and	r3,r5,r3
   41c88:	1986703a 	and	r3,r3,r6
   41c8c:	1800091e 	bne	r3,zero,41cb4 <strlen+0x74>
   41c90:	10800104 	addi	r2,r2,4
   41c94:	10c00017 	ldw	r3,0(r2)
   41c98:	19cb883a 	add	r5,r3,r7
   41c9c:	00c6303a 	nor	r3,zero,r3
   41ca0:	28c6703a 	and	r3,r5,r3
   41ca4:	1986703a 	and	r3,r3,r6
   41ca8:	183ff226 	beq	r3,zero,41c74 <strlen+0x34>
   41cac:	00000106 	br	41cb4 <strlen+0x74>
   41cb0:	10800044 	addi	r2,r2,1
   41cb4:	10c00007 	ldb	r3,0(r2)
   41cb8:	183ffd1e 	bne	r3,zero,41cb0 <strlen+0x70>
   41cbc:	1105c83a 	sub	r2,r2,r4
   41cc0:	f800283a 	ret
   41cc4:	2005883a 	mov	r2,r4
   41cc8:	003ffa06 	br	41cb4 <strlen+0x74>

00041ccc <__sprint_r>:
   41ccc:	30800217 	ldw	r2,8(r6)
   41cd0:	defffe04 	addi	sp,sp,-8
   41cd4:	dc000015 	stw	r16,0(sp)
   41cd8:	dfc00115 	stw	ra,4(sp)
   41cdc:	3021883a 	mov	r16,r6
   41ce0:	10000226 	beq	r2,zero,41cec <__sprint_r+0x20>
   41ce4:	004601c0 	call	4601c <__sfvwrite_r>
   41ce8:	80000215 	stw	zero,8(r16)
   41cec:	80000115 	stw	zero,4(r16)
   41cf0:	dfc00117 	ldw	ra,4(sp)
   41cf4:	dc000017 	ldw	r16,0(sp)
   41cf8:	dec00204 	addi	sp,sp,8
   41cfc:	f800283a 	ret

00041d00 <___vfprintf_internal_r>:
   41d00:	defeb904 	addi	sp,sp,-1308
   41d04:	dc013d15 	stw	r16,1268(sp)
   41d08:	d9013015 	stw	r4,1216(sp)
   41d0c:	dfc14615 	stw	ra,1304(sp)
   41d10:	df014515 	stw	fp,1300(sp)
   41d14:	ddc14415 	stw	r23,1296(sp)
   41d18:	dd814315 	stw	r22,1292(sp)
   41d1c:	dd414215 	stw	r21,1288(sp)
   41d20:	dd014115 	stw	r20,1284(sp)
   41d24:	dcc14015 	stw	r19,1280(sp)
   41d28:	dc813f15 	stw	r18,1276(sp)
   41d2c:	dc413e15 	stw	r17,1272(sp)
   41d30:	d9412915 	stw	r5,1188(sp)
   41d34:	3021883a 	mov	r16,r6
   41d38:	d9c12d15 	stw	r7,1204(sp)
   41d3c:	00467080 	call	46708 <_localeconv_r>
   41d40:	10800017 	ldw	r2,0(r2)
   41d44:	d9013017 	ldw	r4,1216(sp)
   41d48:	d8013315 	stw	zero,1228(sp)
   41d4c:	d8813715 	stw	r2,1244(sp)
   41d50:	d8013415 	stw	zero,1232(sp)
   41d54:	20000226 	beq	r4,zero,41d60 <___vfprintf_internal_r+0x60>
   41d58:	20800e17 	ldw	r2,56(r4)
   41d5c:	10014b26 	beq	r2,zero,4228c <___vfprintf_internal_r+0x58c>
   41d60:	d8c12917 	ldw	r3,1188(sp)
   41d64:	1880030b 	ldhu	r2,12(r3)
   41d68:	10c0020c 	andi	r3,r2,8
   41d6c:	18ffffcc 	andi	r3,r3,65535
   41d70:	18e0001c 	xori	r3,r3,32768
   41d74:	18e00004 	addi	r3,r3,-32768
   41d78:	1800ed26 	beq	r3,zero,42130 <___vfprintf_internal_r+0x430>
   41d7c:	d9012917 	ldw	r4,1188(sp)
   41d80:	20c00417 	ldw	r3,16(r4)
   41d84:	1800ea26 	beq	r3,zero,42130 <___vfprintf_internal_r+0x430>
   41d88:	1100068c 	andi	r4,r2,26
   41d8c:	00c00284 	movi	r3,10
   41d90:	20c0f026 	beq	r4,r3,42154 <___vfprintf_internal_r+0x454>
   41d94:	d9010dc4 	addi	r4,sp,1079
   41d98:	d8810e04 	addi	r2,sp,1080
   41d9c:	dc413017 	ldw	r17,1216(sp)
   41da0:	d8c00404 	addi	r3,sp,16
   41da4:	d9012615 	stw	r4,1176(sp)
   41da8:	1109c83a 	sub	r4,r2,r4
   41dac:	d8812715 	stw	r2,1180(sp)
   41db0:	d8c11b15 	stw	r3,1132(sp)
   41db4:	d8011d15 	stw	zero,1140(sp)
   41db8:	d8011c15 	stw	zero,1136(sp)
   41dbc:	802b883a 	mov	r21,r16
   41dc0:	d8013215 	stw	zero,1224(sp)
   41dc4:	d8013615 	stw	zero,1240(sp)
   41dc8:	d8013515 	stw	zero,1236(sp)
   41dcc:	d8012c15 	stw	zero,1200(sp)
   41dd0:	1813883a 	mov	r9,r3
   41dd4:	d9013915 	stw	r4,1252(sp)
   41dd8:	a8800007 	ldb	r2,0(r21)
   41ddc:	1002f326 	beq	r2,zero,429ac <___vfprintf_internal_r+0xcac>
   41de0:	00c00944 	movi	r3,37
   41de4:	a825883a 	mov	r18,r21
   41de8:	10c0021e 	bne	r2,r3,41df4 <___vfprintf_internal_r+0xf4>
   41dec:	00001406 	br	41e40 <___vfprintf_internal_r+0x140>
   41df0:	10c00326 	beq	r2,r3,41e00 <___vfprintf_internal_r+0x100>
   41df4:	94800044 	addi	r18,r18,1
   41df8:	90800007 	ldb	r2,0(r18)
   41dfc:	103ffc1e 	bne	r2,zero,41df0 <___vfprintf_internal_r+0xf0>
   41e00:	9561c83a 	sub	r16,r18,r21
   41e04:	80000e26 	beq	r16,zero,41e40 <___vfprintf_internal_r+0x140>
   41e08:	da011d17 	ldw	r8,1140(sp)
   41e0c:	d8c11c17 	ldw	r3,1136(sp)
   41e10:	4d400015 	stw	r21,0(r9)
   41e14:	4c000115 	stw	r16,4(r9)
   41e18:	4411883a 	add	r8,r8,r16
   41e1c:	18c00044 	addi	r3,r3,1
   41e20:	da011d15 	stw	r8,1140(sp)
   41e24:	d8c11c15 	stw	r3,1136(sp)
   41e28:	008001c4 	movi	r2,7
   41e2c:	10c11016 	blt	r2,r3,42270 <___vfprintf_internal_r+0x570>
   41e30:	4a400204 	addi	r9,r9,8
   41e34:	d8812c17 	ldw	r2,1200(sp)
   41e38:	1405883a 	add	r2,r2,r16
   41e3c:	d8812c15 	stw	r2,1200(sp)
   41e40:	90800007 	ldb	r2,0(r18)
   41e44:	1000ee26 	beq	r2,zero,42200 <___vfprintf_internal_r+0x500>
   41e48:	95400044 	addi	r21,r18,1
   41e4c:	94800047 	ldb	r18,1(r18)
   41e50:	073fffc4 	movi	fp,-1
   41e54:	e007883a 	mov	r3,fp
   41e58:	d8012585 	stb	zero,1174(sp)
   41e5c:	d8012e15 	stw	zero,1208(sp)
   41e60:	0021883a 	mov	r16,zero
   41e64:	05001604 	movi	r20,88
   41e68:	04c00244 	movi	r19,9
   41e6c:	4839883a 	mov	fp,r9
   41e70:	ad400044 	addi	r21,r21,1
   41e74:	90bff804 	addi	r2,r18,-32
   41e78:	a080462e 	bgeu	r20,r2,41f94 <___vfprintf_internal_r+0x294>
   41e7c:	e013883a 	mov	r9,fp
   41e80:	9000df26 	beq	r18,zero,42200 <___vfprintf_internal_r+0x500>
   41e84:	00c00044 	movi	r3,1
   41e88:	d8c12815 	stw	r3,1184(sp)
   41e8c:	dc810405 	stb	r18,1040(sp)
   41e90:	d8012585 	stb	zero,1174(sp)
   41e94:	d8c12b15 	stw	r3,1196(sp)
   41e98:	dcc10404 	addi	r19,sp,1040
   41e9c:	d8013115 	stw	zero,1220(sp)
   41ea0:	80c0008c 	andi	r3,r16,2
   41ea4:	d8c12a15 	stw	r3,1192(sp)
   41ea8:	18000326 	beq	r3,zero,41eb8 <___vfprintf_internal_r+0x1b8>
   41eac:	d8c12817 	ldw	r3,1184(sp)
   41eb0:	18c00084 	addi	r3,r3,2
   41eb4:	d8c12815 	stw	r3,1184(sp)
   41eb8:	80c0210c 	andi	r3,r16,132
   41ebc:	d8c12f15 	stw	r3,1212(sp)
   41ec0:	1802251e 	bne	r3,zero,42758 <___vfprintf_internal_r+0xa58>
   41ec4:	d9012e17 	ldw	r4,1208(sp)
   41ec8:	d8c12817 	ldw	r3,1184(sp)
   41ecc:	20edc83a 	sub	r22,r4,r3
   41ed0:	0582210e 	bge	zero,r22,42758 <___vfprintf_internal_r+0xa58>
   41ed4:	02800404 	movi	r10,16
   41ed8:	da011d17 	ldw	r8,1140(sp)
   41edc:	d8c11c17 	ldw	r3,1136(sp)
   41ee0:	05c00174 	movhi	r23,5
   41ee4:	bdf60684 	addi	r23,r23,-10214
   41ee8:	5580200e 	bge	r10,r22,41f6c <___vfprintf_internal_r+0x26c>
   41eec:	dc813815 	stw	r18,1248(sp)
   41ef0:	5039883a 	mov	fp,r10
   41ef4:	b825883a 	mov	r18,r23
   41ef8:	050001c4 	movi	r20,7
   41efc:	b02f883a 	mov	r23,r22
   41f00:	802d883a 	mov	r22,r16
   41f04:	dc012917 	ldw	r16,1188(sp)
   41f08:	00000306 	br	41f18 <___vfprintf_internal_r+0x218>
   41f0c:	bdfffc04 	addi	r23,r23,-16
   41f10:	4a400204 	addi	r9,r9,8
   41f14:	e5c0110e 	bge	fp,r23,41f5c <___vfprintf_internal_r+0x25c>
   41f18:	4c800015 	stw	r18,0(r9)
   41f1c:	4f000115 	stw	fp,4(r9)
   41f20:	42000404 	addi	r8,r8,16
   41f24:	18c00044 	addi	r3,r3,1
   41f28:	da011d15 	stw	r8,1140(sp)
   41f2c:	d8c11c15 	stw	r3,1136(sp)
   41f30:	a0fff60e 	bge	r20,r3,41f0c <___vfprintf_internal_r+0x20c>
   41f34:	8809883a 	mov	r4,r17
   41f38:	800b883a 	mov	r5,r16
   41f3c:	d9811b04 	addi	r6,sp,1132
   41f40:	0041ccc0 	call	41ccc <__sprint_r>
   41f44:	1000b41e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   41f48:	bdfffc04 	addi	r23,r23,-16
   41f4c:	da011d17 	ldw	r8,1140(sp)
   41f50:	d8c11c17 	ldw	r3,1136(sp)
   41f54:	da400404 	addi	r9,sp,16
   41f58:	e5ffef16 	blt	fp,r23,41f18 <___vfprintf_internal_r+0x218>
   41f5c:	b021883a 	mov	r16,r22
   41f60:	b82d883a 	mov	r22,r23
   41f64:	902f883a 	mov	r23,r18
   41f68:	dc813817 	ldw	r18,1248(sp)
   41f6c:	4dc00015 	stw	r23,0(r9)
   41f70:	4d800115 	stw	r22,4(r9)
   41f74:	4591883a 	add	r8,r8,r22
   41f78:	18c00044 	addi	r3,r3,1
   41f7c:	da011d15 	stw	r8,1140(sp)
   41f80:	d8c11c15 	stw	r3,1136(sp)
   41f84:	008001c4 	movi	r2,7
   41f88:	10c3fe16 	blt	r2,r3,42f84 <___vfprintf_internal_r+0x1284>
   41f8c:	4a400204 	addi	r9,r9,8
   41f90:	0001f306 	br	42760 <___vfprintf_internal_r+0xa60>
   41f94:	1085883a 	add	r2,r2,r2
   41f98:	1085883a 	add	r2,r2,r2
   41f9c:	01000134 	movhi	r4,4
   41fa0:	2107ec04 	addi	r4,r4,8112
   41fa4:	1105883a 	add	r2,r2,r4
   41fa8:	10800017 	ldw	r2,0(r2)
   41fac:	1000683a 	jmp	r2
   41fb0:	0004268c 	andi	zero,zero,4250
   41fb4:	00041e7c 	xorhi	zero,zero,4217
   41fb8:	00041e7c 	xorhi	zero,zero,4217
   41fbc:	000426a4 	muli	zero,zero,4250
   41fc0:	00041e7c 	xorhi	zero,zero,4217
   41fc4:	00041e7c 	xorhi	zero,zero,4217
   41fc8:	00041e7c 	xorhi	zero,zero,4217
   41fcc:	00041e7c 	xorhi	zero,zero,4217
   41fd0:	00041e7c 	xorhi	zero,zero,4217
   41fd4:	00041e7c 	xorhi	zero,zero,4217
   41fd8:	0004255c 	xori	zero,zero,4245
   41fdc:	000426f0 	cmpltui	zero,zero,4251
   41fe0:	00041e7c 	xorhi	zero,zero,4217
   41fe4:	00042124 	muli	zero,zero,4228
   41fe8:	000424c4 	movi	zero,4243
   41fec:	00041e7c 	xorhi	zero,zero,4217
   41ff0:	000426b0 	cmpltui	zero,zero,4250
   41ff4:	000426bc 	xorhi	zero,zero,4250
   41ff8:	000426bc 	xorhi	zero,zero,4250
   41ffc:	000426bc 	xorhi	zero,zero,4250
   42000:	000426bc 	xorhi	zero,zero,4250
   42004:	000426bc 	xorhi	zero,zero,4250
   42008:	000426bc 	xorhi	zero,zero,4250
   4200c:	000426bc 	xorhi	zero,zero,4250
   42010:	000426bc 	xorhi	zero,zero,4250
   42014:	000426bc 	xorhi	zero,zero,4250
   42018:	00041e7c 	xorhi	zero,zero,4217
   4201c:	00041e7c 	xorhi	zero,zero,4217
   42020:	00041e7c 	xorhi	zero,zero,4217
   42024:	00041e7c 	xorhi	zero,zero,4217
   42028:	00041e7c 	xorhi	zero,zero,4217
   4202c:	00041e7c 	xorhi	zero,zero,4217
   42030:	00041e7c 	xorhi	zero,zero,4217
   42034:	00041e7c 	xorhi	zero,zero,4217
   42038:	00041e7c 	xorhi	zero,zero,4217
   4203c:	00041e7c 	xorhi	zero,zero,4217
   42040:	00042294 	movui	zero,4234
   42044:	00042354 	movui	zero,4237
   42048:	00041e7c 	xorhi	zero,zero,4217
   4204c:	00042354 	movui	zero,4237
   42050:	00041e7c 	xorhi	zero,zero,4217
   42054:	00041e7c 	xorhi	zero,zero,4217
   42058:	00041e7c 	xorhi	zero,zero,4217
   4205c:	00041e7c 	xorhi	zero,zero,4217
   42060:	000423e8 	cmpgeui	zero,zero,4239
   42064:	00041e7c 	xorhi	zero,zero,4217
   42068:	00041e7c 	xorhi	zero,zero,4217
   4206c:	000423f4 	movhi	zero,4239
   42070:	00041e7c 	xorhi	zero,zero,4217
   42074:	00041e7c 	xorhi	zero,zero,4217
   42078:	00041e7c 	xorhi	zero,zero,4217
   4207c:	00041e7c 	xorhi	zero,zero,4217
   42080:	00041e7c 	xorhi	zero,zero,4217
   42084:	0004242c 	andhi	zero,zero,4240
   42088:	00041e7c 	xorhi	zero,zero,4217
   4208c:	00041e7c 	xorhi	zero,zero,4217
   42090:	00042468 	cmpgeui	zero,zero,4241
   42094:	00041e7c 	xorhi	zero,zero,4217
   42098:	00041e7c 	xorhi	zero,zero,4217
   4209c:	00041e7c 	xorhi	zero,zero,4217
   420a0:	00041e7c 	xorhi	zero,zero,4217
   420a4:	00041e7c 	xorhi	zero,zero,4217
   420a8:	00041e7c 	xorhi	zero,zero,4217
   420ac:	00041e7c 	xorhi	zero,zero,4217
   420b0:	00041e7c 	xorhi	zero,zero,4217
   420b4:	00041e7c 	xorhi	zero,zero,4217
   420b8:	00041e7c 	xorhi	zero,zero,4217
   420bc:	00042700 	call	4270 <__alt_mem_onchip_mem-0x3bd90>
   420c0:	00042734 	movhi	zero,4252
   420c4:	00042354 	movui	zero,4237
   420c8:	00042354 	movui	zero,4237
   420cc:	00042354 	movui	zero,4237
   420d0:	00042680 	call	4268 <__alt_mem_onchip_mem-0x3bd98>
   420d4:	00042734 	movhi	zero,4252
   420d8:	00041e7c 	xorhi	zero,zero,4217
   420dc:	00041e7c 	xorhi	zero,zero,4217
   420e0:	0004250c 	andi	zero,zero,4244
   420e4:	00041e7c 	xorhi	zero,zero,4217
   420e8:	00042524 	muli	zero,zero,4244
   420ec:	00042740 	call	4274 <__alt_mem_onchip_mem-0x3bd8c>
   420f0:	00042584 	movi	zero,4246
   420f4:	000425d4 	movui	zero,4247
   420f8:	00041e7c 	xorhi	zero,zero,4217
   420fc:	000425e0 	cmpeqi	zero,zero,4247
   42100:	00041e7c 	xorhi	zero,zero,4217
   42104:	0004274c 	andi	zero,zero,4253
   42108:	00041e7c 	xorhi	zero,zero,4217
   4210c:	00041e7c 	xorhi	zero,zero,4217
   42110:	00042644 	movi	zero,4249
   42114:	d9012e17 	ldw	r4,1208(sp)
   42118:	d8812d15 	stw	r2,1204(sp)
   4211c:	0109c83a 	sub	r4,zero,r4
   42120:	d9012e15 	stw	r4,1208(sp)
   42124:	84000114 	ori	r16,r16,4
   42128:	ac800007 	ldb	r18,0(r21)
   4212c:	003f5006 	br	41e70 <___vfprintf_internal_r+0x170>
   42130:	d9013017 	ldw	r4,1216(sp)
   42134:	d9412917 	ldw	r5,1188(sp)
   42138:	0043ba00 	call	43ba0 <__swsetup_r>
   4213c:	10003d1e 	bne	r2,zero,42234 <___vfprintf_internal_r+0x534>
   42140:	d8c12917 	ldw	r3,1188(sp)
   42144:	1880030b 	ldhu	r2,12(r3)
   42148:	00c00284 	movi	r3,10
   4214c:	1100068c 	andi	r4,r2,26
   42150:	20ff101e 	bne	r4,r3,41d94 <___vfprintf_internal_r+0x94>
   42154:	d9012917 	ldw	r4,1188(sp)
   42158:	20c0038b 	ldhu	r3,14(r4)
   4215c:	193fffcc 	andi	r4,r3,65535
   42160:	2120001c 	xori	r4,r4,32768
   42164:	21200004 	addi	r4,r4,-32768
   42168:	203f0a16 	blt	r4,zero,41d94 <___vfprintf_internal_r+0x94>
   4216c:	d9012917 	ldw	r4,1188(sp)
   42170:	d9c12d17 	ldw	r7,1204(sp)
   42174:	10bfff4c 	andi	r2,r2,65533
   42178:	22800717 	ldw	r10,28(r4)
   4217c:	22400917 	ldw	r9,36(r4)
   42180:	d9013017 	ldw	r4,1216(sp)
   42184:	02010004 	movi	r8,1024
   42188:	d881070d 	sth	r2,1052(sp)
   4218c:	d9410404 	addi	r5,sp,1040
   42190:	d8800404 	addi	r2,sp,16
   42194:	800d883a 	mov	r6,r16
   42198:	d8c1078d 	sth	r3,1054(sp)
   4219c:	da810b15 	stw	r10,1068(sp)
   421a0:	da410d15 	stw	r9,1076(sp)
   421a4:	d8810415 	stw	r2,1040(sp)
   421a8:	d8810815 	stw	r2,1056(sp)
   421ac:	da010615 	stw	r8,1048(sp)
   421b0:	da010915 	stw	r8,1060(sp)
   421b4:	d8010a15 	stw	zero,1064(sp)
   421b8:	0041d000 	call	41d00 <___vfprintf_internal_r>
   421bc:	d8812c15 	stw	r2,1200(sp)
   421c0:	10000416 	blt	r2,zero,421d4 <___vfprintf_internal_r+0x4d4>
   421c4:	d9013017 	ldw	r4,1216(sp)
   421c8:	d9410404 	addi	r5,sp,1040
   421cc:	004570c0 	call	4570c <_fflush_r>
   421d0:	1006501e 	bne	r2,zero,43b14 <___vfprintf_internal_r+0x1e14>
   421d4:	d881070b 	ldhu	r2,1052(sp)
   421d8:	1080100c 	andi	r2,r2,64
   421dc:	10bfffcc 	andi	r2,r2,65535
   421e0:	10a0001c 	xori	r2,r2,32768
   421e4:	10a00004 	addi	r2,r2,-32768
   421e8:	10001426 	beq	r2,zero,4223c <___vfprintf_internal_r+0x53c>
   421ec:	d8c12917 	ldw	r3,1188(sp)
   421f0:	1880030b 	ldhu	r2,12(r3)
   421f4:	10801014 	ori	r2,r2,64
   421f8:	1880030d 	sth	r2,12(r3)
   421fc:	00000f06 	br	4223c <___vfprintf_internal_r+0x53c>
   42200:	d8811d17 	ldw	r2,1140(sp)
   42204:	10000426 	beq	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42208:	d9013017 	ldw	r4,1216(sp)
   4220c:	d9412917 	ldw	r5,1188(sp)
   42210:	d9811b04 	addi	r6,sp,1132
   42214:	0041ccc0 	call	41ccc <__sprint_r>
   42218:	d8c12917 	ldw	r3,1188(sp)
   4221c:	1880030b 	ldhu	r2,12(r3)
   42220:	1080100c 	andi	r2,r2,64
   42224:	10bfffcc 	andi	r2,r2,65535
   42228:	10a0001c 	xori	r2,r2,32768
   4222c:	10a00004 	addi	r2,r2,-32768
   42230:	10000226 	beq	r2,zero,4223c <___vfprintf_internal_r+0x53c>
   42234:	00bfffc4 	movi	r2,-1
   42238:	d8812c15 	stw	r2,1200(sp)
   4223c:	d8812c17 	ldw	r2,1200(sp)
   42240:	dfc14617 	ldw	ra,1304(sp)
   42244:	df014517 	ldw	fp,1300(sp)
   42248:	ddc14417 	ldw	r23,1296(sp)
   4224c:	dd814317 	ldw	r22,1292(sp)
   42250:	dd414217 	ldw	r21,1288(sp)
   42254:	dd014117 	ldw	r20,1284(sp)
   42258:	dcc14017 	ldw	r19,1280(sp)
   4225c:	dc813f17 	ldw	r18,1276(sp)
   42260:	dc413e17 	ldw	r17,1272(sp)
   42264:	dc013d17 	ldw	r16,1268(sp)
   42268:	dec14704 	addi	sp,sp,1308
   4226c:	f800283a 	ret
   42270:	d9412917 	ldw	r5,1188(sp)
   42274:	8809883a 	mov	r4,r17
   42278:	d9811b04 	addi	r6,sp,1132
   4227c:	0041ccc0 	call	41ccc <__sprint_r>
   42280:	103fe51e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42284:	da400404 	addi	r9,sp,16
   42288:	003eea06 	br	41e34 <___vfprintf_internal_r+0x134>
   4228c:	00459c80 	call	459c8 <__sinit>
   42290:	003eb306 	br	41d60 <___vfprintf_internal_r+0x60>
   42294:	e013883a 	mov	r9,fp
   42298:	84000414 	ori	r16,r16,16
   4229c:	1839883a 	mov	fp,r3
   422a0:	8080080c 	andi	r2,r16,32
   422a4:	10034426 	beq	r2,zero,42fb8 <___vfprintf_internal_r+0x12b8>
   422a8:	d8c12d17 	ldw	r3,1204(sp)
   422ac:	18800117 	ldw	r2,4(r3)
   422b0:	1dc00017 	ldw	r23,0(r3)
   422b4:	18c00204 	addi	r3,r3,8
   422b8:	d8c12d15 	stw	r3,1204(sp)
   422bc:	102d883a 	mov	r22,r2
   422c0:	1003020e 	bge	r2,zero,42ecc <___vfprintf_internal_r+0x11cc>
   422c4:	05efc83a 	sub	r23,zero,r23
   422c8:	b804c03a 	cmpne	r2,r23,zero
   422cc:	05adc83a 	sub	r22,zero,r22
   422d0:	b0adc83a 	sub	r22,r22,r2
   422d4:	00800b44 	movi	r2,45
   422d8:	d8812585 	stb	r2,1174(sp)
   422dc:	00c00044 	movi	r3,1
   422e0:	bd84b03a 	or	r2,r23,r22
   422e4:	e0000216 	blt	fp,zero,422f0 <___vfprintf_internal_r+0x5f0>
   422e8:	013fdfc4 	movi	r4,-129
   422ec:	8120703a 	and	r16,r16,r4
   422f0:	1001cc1e 	bne	r2,zero,42a24 <___vfprintf_internal_r+0xd24>
   422f4:	e001cb1e 	bne	fp,zero,42a24 <___vfprintf_internal_r+0xd24>
   422f8:	18c03fcc 	andi	r3,r3,255
   422fc:	1802ca1e 	bne	r3,zero,42e28 <___vfprintf_internal_r+0x1128>
   42300:	8080004c 	andi	r2,r16,1
   42304:	1002c826 	beq	r2,zero,42e28 <___vfprintf_internal_r+0x1128>
   42308:	d8c13917 	ldw	r3,1252(sp)
   4230c:	00800c04 	movi	r2,48
   42310:	d8810dc5 	stb	r2,1079(sp)
   42314:	d8c12b15 	stw	r3,1196(sp)
   42318:	dcc10dc4 	addi	r19,sp,1079
   4231c:	d8812b17 	ldw	r2,1196(sp)
   42320:	d8812815 	stw	r2,1184(sp)
   42324:	1700010e 	bge	r2,fp,4232c <___vfprintf_internal_r+0x62c>
   42328:	df012815 	stw	fp,1184(sp)
   4232c:	d8812583 	ldbu	r2,1174(sp)
   42330:	df013115 	stw	fp,1220(sp)
   42334:	10803fcc 	andi	r2,r2,255
   42338:	1080201c 	xori	r2,r2,128
   4233c:	10bfe004 	addi	r2,r2,-128
   42340:	103ed726 	beq	r2,zero,41ea0 <___vfprintf_internal_r+0x1a0>
   42344:	d8c12817 	ldw	r3,1184(sp)
   42348:	18c00044 	addi	r3,r3,1
   4234c:	d8c12815 	stw	r3,1184(sp)
   42350:	003ed306 	br	41ea0 <___vfprintf_internal_r+0x1a0>
   42354:	8080020c 	andi	r2,r16,8
   42358:	e013883a 	mov	r9,fp
   4235c:	1839883a 	mov	fp,r3
   42360:	1003a626 	beq	r2,zero,431fc <___vfprintf_internal_r+0x14fc>
   42364:	d9012d17 	ldw	r4,1204(sp)
   42368:	25800017 	ldw	r22,0(r4)
   4236c:	25000117 	ldw	r20,4(r4)
   42370:	21000204 	addi	r4,r4,8
   42374:	d9012d15 	stw	r4,1204(sp)
   42378:	dd813315 	stw	r22,1228(sp)
   4237c:	dd013415 	stw	r20,1232(sp)
   42380:	b009883a 	mov	r4,r22
   42384:	a00b883a 	mov	r5,r20
   42388:	da413c15 	stw	r9,1264(sp)
   4238c:	0048b540 	call	48b54 <__isinfd>
   42390:	da413c17 	ldw	r9,1264(sp)
   42394:	b009883a 	mov	r4,r22
   42398:	a00b883a 	mov	r5,r20
   4239c:	10041d26 	beq	r2,zero,43414 <___vfprintf_internal_r+0x1714>
   423a0:	000d883a 	mov	r6,zero
   423a4:	000f883a 	mov	r7,zero
   423a8:	004a4900 	call	4a490 <__ltdf2>
   423ac:	da413c17 	ldw	r9,1264(sp)
   423b0:	1004da16 	blt	r2,zero,4371c <___vfprintf_internal_r+0x1a1c>
   423b4:	d8812583 	ldbu	r2,1174(sp)
   423b8:	00c011c4 	movi	r3,71
   423bc:	1c83d116 	blt	r3,r18,43304 <___vfprintf_internal_r+0x1604>
   423c0:	04c00174 	movhi	r19,5
   423c4:	9cf5f604 	addi	r19,r19,-10280
   423c8:	00c000c4 	movi	r3,3
   423cc:	d8c12815 	stw	r3,1184(sp)
   423d0:	00ffdfc4 	movi	r3,-129
   423d4:	80e0703a 	and	r16,r16,r3
   423d8:	d8c12817 	ldw	r3,1184(sp)
   423dc:	d8013115 	stw	zero,1220(sp)
   423e0:	d8c12b15 	stw	r3,1196(sp)
   423e4:	003fd306 	br	42334 <___vfprintf_internal_r+0x634>
   423e8:	84000214 	ori	r16,r16,8
   423ec:	ac800007 	ldb	r18,0(r21)
   423f0:	003e9f06 	br	41e70 <___vfprintf_internal_r+0x170>
   423f4:	e013883a 	mov	r9,fp
   423f8:	84000414 	ori	r16,r16,16
   423fc:	1839883a 	mov	fp,r3
   42400:	8080080c 	andi	r2,r16,32
   42404:	10031d26 	beq	r2,zero,4307c <___vfprintf_internal_r+0x137c>
   42408:	d8812d17 	ldw	r2,1204(sp)
   4240c:	0007883a 	mov	r3,zero
   42410:	15c00017 	ldw	r23,0(r2)
   42414:	15800117 	ldw	r22,4(r2)
   42418:	10800204 	addi	r2,r2,8
   4241c:	d8812d15 	stw	r2,1204(sp)
   42420:	d8012585 	stb	zero,1174(sp)
   42424:	bd84b03a 	or	r2,r23,r22
   42428:	003fae06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   4242c:	e013883a 	mov	r9,fp
   42430:	84000414 	ori	r16,r16,16
   42434:	1839883a 	mov	fp,r3
   42438:	8080080c 	andi	r2,r16,32
   4243c:	1002e726 	beq	r2,zero,42fdc <___vfprintf_internal_r+0x12dc>
   42440:	d8c12d17 	ldw	r3,1204(sp)
   42444:	d9012d17 	ldw	r4,1204(sp)
   42448:	1dc00017 	ldw	r23,0(r3)
   4244c:	1d800117 	ldw	r22,4(r3)
   42450:	21000204 	addi	r4,r4,8
   42454:	00c00044 	movi	r3,1
   42458:	d9012d15 	stw	r4,1204(sp)
   4245c:	bd84b03a 	or	r2,r23,r22
   42460:	d8012585 	stb	zero,1174(sp)
   42464:	003f9f06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   42468:	e013883a 	mov	r9,fp
   4246c:	1839883a 	mov	fp,r3
   42470:	00c00174 	movhi	r3,5
   42474:	18f5fa04 	addi	r3,r3,-10264
   42478:	d8c13615 	stw	r3,1240(sp)
   4247c:	8080080c 	andi	r2,r16,32
   42480:	10007726 	beq	r2,zero,42660 <___vfprintf_internal_r+0x960>
   42484:	d9012d17 	ldw	r4,1204(sp)
   42488:	25c00017 	ldw	r23,0(r4)
   4248c:	25800117 	ldw	r22,4(r4)
   42490:	21000204 	addi	r4,r4,8
   42494:	d9012d15 	stw	r4,1204(sp)
   42498:	8080004c 	andi	r2,r16,1
   4249c:	1002c226 	beq	r2,zero,42fa8 <___vfprintf_internal_r+0x12a8>
   424a0:	bd84b03a 	or	r2,r23,r22
   424a4:	10035d26 	beq	r2,zero,4321c <___vfprintf_internal_r+0x151c>
   424a8:	00c00c04 	movi	r3,48
   424ac:	d8c12505 	stb	r3,1172(sp)
   424b0:	dc812545 	stb	r18,1173(sp)
   424b4:	84000094 	ori	r16,r16,2
   424b8:	00c00084 	movi	r3,2
   424bc:	d8012585 	stb	zero,1174(sp)
   424c0:	003f8806 	br	422e4 <___vfprintf_internal_r+0x5e4>
   424c4:	ac800007 	ldb	r18,0(r21)
   424c8:	00c00a84 	movi	r3,42
   424cc:	adc00044 	addi	r23,r21,1
   424d0:	90c57526 	beq	r18,r3,43aa8 <___vfprintf_internal_r+0x1da8>
   424d4:	95bff404 	addi	r22,r18,-48
   424d8:	0009883a 	mov	r4,zero
   424dc:	9d84ff36 	bltu	r19,r22,438dc <___vfprintf_internal_r+0x1bdc>
   424e0:	01400284 	movi	r5,10
   424e4:	0041a580 	call	41a58 <__mulsi3>
   424e8:	bc800007 	ldb	r18,0(r23)
   424ec:	b089883a 	add	r4,r22,r2
   424f0:	bdc00044 	addi	r23,r23,1
   424f4:	95bff404 	addi	r22,r18,-48
   424f8:	9dbff92e 	bgeu	r19,r22,424e0 <___vfprintf_internal_r+0x7e0>
   424fc:	2007883a 	mov	r3,r4
   42500:	20044316 	blt	r4,zero,43610 <___vfprintf_internal_r+0x1910>
   42504:	b82b883a 	mov	r21,r23
   42508:	003e5a06 	br	41e74 <___vfprintf_internal_r+0x174>
   4250c:	ac800007 	ldb	r18,0(r21)
   42510:	01001b04 	movi	r4,108
   42514:	a805883a 	mov	r2,r21
   42518:	91045526 	beq	r18,r4,43670 <___vfprintf_internal_r+0x1970>
   4251c:	84000414 	ori	r16,r16,16
   42520:	003e5306 	br	41e70 <___vfprintf_internal_r+0x170>
   42524:	8080080c 	andi	r2,r16,32
   42528:	e013883a 	mov	r9,fp
   4252c:	10034026 	beq	r2,zero,43230 <___vfprintf_internal_r+0x1530>
   42530:	d9012d17 	ldw	r4,1204(sp)
   42534:	20800017 	ldw	r2,0(r4)
   42538:	d9012c17 	ldw	r4,1200(sp)
   4253c:	2007d7fa 	srai	r3,r4,31
   42540:	d9012d17 	ldw	r4,1204(sp)
   42544:	10c00115 	stw	r3,4(r2)
   42548:	21000104 	addi	r4,r4,4
   4254c:	d9012d15 	stw	r4,1204(sp)
   42550:	d9012c17 	ldw	r4,1200(sp)
   42554:	11000015 	stw	r4,0(r2)
   42558:	003e1f06 	br	41dd8 <___vfprintf_internal_r+0xd8>
   4255c:	d9012d17 	ldw	r4,1204(sp)
   42560:	21000017 	ldw	r4,0(r4)
   42564:	d9012e15 	stw	r4,1208(sp)
   42568:	d9012d17 	ldw	r4,1204(sp)
   4256c:	20800104 	addi	r2,r4,4
   42570:	d9012e17 	ldw	r4,1208(sp)
   42574:	203ee716 	blt	r4,zero,42114 <___vfprintf_internal_r+0x414>
   42578:	d8812d15 	stw	r2,1204(sp)
   4257c:	ac800007 	ldb	r18,0(r21)
   42580:	003e3b06 	br	41e70 <___vfprintf_internal_r+0x170>
   42584:	e013883a 	mov	r9,fp
   42588:	1839883a 	mov	fp,r3
   4258c:	d8c12d17 	ldw	r3,1204(sp)
   42590:	00800c04 	movi	r2,48
   42594:	01000174 	movhi	r4,5
   42598:	2135ff04 	addi	r4,r4,-10244
   4259c:	1dc00017 	ldw	r23,0(r3)
   425a0:	18c00104 	addi	r3,r3,4
   425a4:	d8812505 	stb	r2,1172(sp)
   425a8:	00801e04 	movi	r2,120
   425ac:	d8812545 	stb	r2,1173(sp)
   425b0:	d8c12d15 	stw	r3,1204(sp)
   425b4:	002d883a 	mov	r22,zero
   425b8:	84000094 	ori	r16,r16,2
   425bc:	d9013615 	stw	r4,1240(sp)
   425c0:	00c00084 	movi	r3,2
   425c4:	04801e04 	movi	r18,120
   425c8:	b805883a 	mov	r2,r23
   425cc:	d8012585 	stb	zero,1174(sp)
   425d0:	003f4406 	br	422e4 <___vfprintf_internal_r+0x5e4>
   425d4:	84000814 	ori	r16,r16,32
   425d8:	ac800007 	ldb	r18,0(r21)
   425dc:	003e2406 	br	41e70 <___vfprintf_internal_r+0x170>
   425e0:	d8812d17 	ldw	r2,1204(sp)
   425e4:	d8012585 	stb	zero,1174(sp)
   425e8:	e013883a 	mov	r9,fp
   425ec:	14c00017 	ldw	r19,0(r2)
   425f0:	1839883a 	mov	fp,r3
   425f4:	15c00104 	addi	r23,r2,4
   425f8:	98045526 	beq	r19,zero,43750 <___vfprintf_internal_r+0x1a50>
   425fc:	9809883a 	mov	r4,r19
   42600:	18043116 	blt	r3,zero,436c8 <___vfprintf_internal_r+0x19c8>
   42604:	000b883a 	mov	r5,zero
   42608:	180d883a 	mov	r6,r3
   4260c:	da413c15 	stw	r9,1264(sp)
   42610:	00470680 	call	47068 <memchr>
   42614:	da413c17 	ldw	r9,1264(sp)
   42618:	10047a26 	beq	r2,zero,43804 <___vfprintf_internal_r+0x1b04>
   4261c:	14c5c83a 	sub	r2,r2,r19
   42620:	d8812b15 	stw	r2,1196(sp)
   42624:	e083d40e 	bge	fp,r2,43578 <___vfprintf_internal_r+0x1878>
   42628:	df012815 	stw	fp,1184(sp)
   4262c:	e004e416 	blt	fp,zero,439c0 <___vfprintf_internal_r+0x1cc0>
   42630:	d8812583 	ldbu	r2,1174(sp)
   42634:	df012b15 	stw	fp,1196(sp)
   42638:	ddc12d15 	stw	r23,1204(sp)
   4263c:	d8013115 	stw	zero,1220(sp)
   42640:	003f3c06 	br	42334 <___vfprintf_internal_r+0x634>
   42644:	00800174 	movhi	r2,5
   42648:	10b5ff04 	addi	r2,r2,-10244
   4264c:	d8813615 	stw	r2,1240(sp)
   42650:	8080080c 	andi	r2,r16,32
   42654:	e013883a 	mov	r9,fp
   42658:	1839883a 	mov	fp,r3
   4265c:	103f891e 	bne	r2,zero,42484 <___vfprintf_internal_r+0x784>
   42660:	8080040c 	andi	r2,r16,16
   42664:	1002c326 	beq	r2,zero,43174 <___vfprintf_internal_r+0x1474>
   42668:	d8812d17 	ldw	r2,1204(sp)
   4266c:	002d883a 	mov	r22,zero
   42670:	15c00017 	ldw	r23,0(r2)
   42674:	10800104 	addi	r2,r2,4
   42678:	d8812d15 	stw	r2,1204(sp)
   4267c:	003f8606 	br	42498 <___vfprintf_internal_r+0x798>
   42680:	84001014 	ori	r16,r16,64
   42684:	ac800007 	ldb	r18,0(r21)
   42688:	003df906 	br	41e70 <___vfprintf_internal_r+0x170>
   4268c:	d8812587 	ldb	r2,1174(sp)
   42690:	1002e51e 	bne	r2,zero,43228 <___vfprintf_internal_r+0x1528>
   42694:	00800804 	movi	r2,32
   42698:	d8812585 	stb	r2,1174(sp)
   4269c:	ac800007 	ldb	r18,0(r21)
   426a0:	003df306 	br	41e70 <___vfprintf_internal_r+0x170>
   426a4:	84000054 	ori	r16,r16,1
   426a8:	ac800007 	ldb	r18,0(r21)
   426ac:	003df006 	br	41e70 <___vfprintf_internal_r+0x170>
   426b0:	84002014 	ori	r16,r16,128
   426b4:	ac800007 	ldb	r18,0(r21)
   426b8:	003ded06 	br	41e70 <___vfprintf_internal_r+0x170>
   426bc:	0009883a 	mov	r4,zero
   426c0:	95bff404 	addi	r22,r18,-48
   426c4:	182f883a 	mov	r23,r3
   426c8:	01400284 	movi	r5,10
   426cc:	0041a580 	call	41a58 <__mulsi3>
   426d0:	ac800007 	ldb	r18,0(r21)
   426d4:	1589883a 	add	r4,r2,r22
   426d8:	ad400044 	addi	r21,r21,1
   426dc:	95bff404 	addi	r22,r18,-48
   426e0:	9dbff92e 	bgeu	r19,r22,426c8 <___vfprintf_internal_r+0x9c8>
   426e4:	b807883a 	mov	r3,r23
   426e8:	d9012e15 	stw	r4,1208(sp)
   426ec:	003de106 	br	41e74 <___vfprintf_internal_r+0x174>
   426f0:	00800ac4 	movi	r2,43
   426f4:	d8812585 	stb	r2,1174(sp)
   426f8:	ac800007 	ldb	r18,0(r21)
   426fc:	003ddc06 	br	41e70 <___vfprintf_internal_r+0x170>
   42700:	d8c12d17 	ldw	r3,1204(sp)
   42704:	d9012d17 	ldw	r4,1204(sp)
   42708:	e013883a 	mov	r9,fp
   4270c:	18800017 	ldw	r2,0(r3)
   42710:	21000104 	addi	r4,r4,4
   42714:	00c00044 	movi	r3,1
   42718:	d8c12815 	stw	r3,1184(sp)
   4271c:	d8012585 	stb	zero,1174(sp)
   42720:	d8810405 	stb	r2,1040(sp)
   42724:	d9012d15 	stw	r4,1204(sp)
   42728:	d8c12b15 	stw	r3,1196(sp)
   4272c:	dcc10404 	addi	r19,sp,1040
   42730:	003dda06 	br	41e9c <___vfprintf_internal_r+0x19c>
   42734:	e013883a 	mov	r9,fp
   42738:	1839883a 	mov	fp,r3
   4273c:	003ed806 	br	422a0 <___vfprintf_internal_r+0x5a0>
   42740:	e013883a 	mov	r9,fp
   42744:	1839883a 	mov	fp,r3
   42748:	003f2d06 	br	42400 <___vfprintf_internal_r+0x700>
   4274c:	e013883a 	mov	r9,fp
   42750:	1839883a 	mov	fp,r3
   42754:	003f3806 	br	42438 <___vfprintf_internal_r+0x738>
   42758:	da011d17 	ldw	r8,1140(sp)
   4275c:	d8c11c17 	ldw	r3,1136(sp)
   42760:	d8812587 	ldb	r2,1174(sp)
   42764:	10000b26 	beq	r2,zero,42794 <___vfprintf_internal_r+0xa94>
   42768:	d8812584 	addi	r2,sp,1174
   4276c:	48800015 	stw	r2,0(r9)
   42770:	00800044 	movi	r2,1
   42774:	48800115 	stw	r2,4(r9)
   42778:	4091883a 	add	r8,r8,r2
   4277c:	1887883a 	add	r3,r3,r2
   42780:	da011d15 	stw	r8,1140(sp)
   42784:	d8c11c15 	stw	r3,1136(sp)
   42788:	008001c4 	movi	r2,7
   4278c:	10c18e16 	blt	r2,r3,42dc8 <___vfprintf_internal_r+0x10c8>
   42790:	4a400204 	addi	r9,r9,8
   42794:	d9012a17 	ldw	r4,1192(sp)
   42798:	20000b26 	beq	r4,zero,427c8 <___vfprintf_internal_r+0xac8>
   4279c:	d8812504 	addi	r2,sp,1172
   427a0:	48800015 	stw	r2,0(r9)
   427a4:	00800084 	movi	r2,2
   427a8:	48800115 	stw	r2,4(r9)
   427ac:	4091883a 	add	r8,r8,r2
   427b0:	18c00044 	addi	r3,r3,1
   427b4:	da011d15 	stw	r8,1140(sp)
   427b8:	d8c11c15 	stw	r3,1136(sp)
   427bc:	008001c4 	movi	r2,7
   427c0:	10c17816 	blt	r2,r3,42da4 <___vfprintf_internal_r+0x10a4>
   427c4:	4a400204 	addi	r9,r9,8
   427c8:	d9012f17 	ldw	r4,1212(sp)
   427cc:	00802004 	movi	r2,128
   427d0:	2080fc26 	beq	r4,r2,42bc4 <___vfprintf_internal_r+0xec4>
   427d4:	d8813117 	ldw	r2,1220(sp)
   427d8:	d9012b17 	ldw	r4,1196(sp)
   427dc:	112fc83a 	sub	r23,r2,r4
   427e0:	05c02a0e 	bge	zero,r23,4288c <___vfprintf_internal_r+0xb8c>
   427e4:	07000404 	movi	fp,16
   427e8:	05000174 	movhi	r20,5
   427ec:	a5360a84 	addi	r20,r20,-10198
   427f0:	e5c01d0e 	bge	fp,r23,42868 <___vfprintf_internal_r+0xb68>
   427f4:	dc812a15 	stw	r18,1192(sp)
   427f8:	058001c4 	movi	r22,7
   427fc:	a025883a 	mov	r18,r20
   42800:	8029883a 	mov	r20,r16
   42804:	dc012917 	ldw	r16,1188(sp)
   42808:	00000306 	br	42818 <___vfprintf_internal_r+0xb18>
   4280c:	bdfffc04 	addi	r23,r23,-16
   42810:	4a400204 	addi	r9,r9,8
   42814:	e5c0110e 	bge	fp,r23,4285c <___vfprintf_internal_r+0xb5c>
   42818:	4c800015 	stw	r18,0(r9)
   4281c:	4f000115 	stw	fp,4(r9)
   42820:	42000404 	addi	r8,r8,16
   42824:	18c00044 	addi	r3,r3,1
   42828:	da011d15 	stw	r8,1140(sp)
   4282c:	d8c11c15 	stw	r3,1136(sp)
   42830:	b0fff60e 	bge	r22,r3,4280c <___vfprintf_internal_r+0xb0c>
   42834:	8809883a 	mov	r4,r17
   42838:	800b883a 	mov	r5,r16
   4283c:	d9811b04 	addi	r6,sp,1132
   42840:	0041ccc0 	call	41ccc <__sprint_r>
   42844:	103e741e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42848:	bdfffc04 	addi	r23,r23,-16
   4284c:	da011d17 	ldw	r8,1140(sp)
   42850:	d8c11c17 	ldw	r3,1136(sp)
   42854:	da400404 	addi	r9,sp,16
   42858:	e5ffef16 	blt	fp,r23,42818 <___vfprintf_internal_r+0xb18>
   4285c:	a021883a 	mov	r16,r20
   42860:	9029883a 	mov	r20,r18
   42864:	dc812a17 	ldw	r18,1192(sp)
   42868:	4d000015 	stw	r20,0(r9)
   4286c:	4dc00115 	stw	r23,4(r9)
   42870:	45d1883a 	add	r8,r8,r23
   42874:	18c00044 	addi	r3,r3,1
   42878:	da011d15 	stw	r8,1140(sp)
   4287c:	d8c11c15 	stw	r3,1136(sp)
   42880:	008001c4 	movi	r2,7
   42884:	10c13e16 	blt	r2,r3,42d80 <___vfprintf_internal_r+0x1080>
   42888:	4a400204 	addi	r9,r9,8
   4288c:	8080400c 	andi	r2,r16,256
   42890:	1000831e 	bne	r2,zero,42aa0 <___vfprintf_internal_r+0xda0>
   42894:	d8812b17 	ldw	r2,1196(sp)
   42898:	4cc00015 	stw	r19,0(r9)
   4289c:	48800115 	stw	r2,4(r9)
   428a0:	4091883a 	add	r8,r8,r2
   428a4:	18c00044 	addi	r3,r3,1
   428a8:	da011d15 	stw	r8,1140(sp)
   428ac:	d8c11c15 	stw	r3,1136(sp)
   428b0:	008001c4 	movi	r2,7
   428b4:	10c05316 	blt	r2,r3,42a04 <___vfprintf_internal_r+0xd04>
   428b8:	4a400204 	addi	r9,r9,8
   428bc:	8400010c 	andi	r16,r16,4
   428c0:	80002e26 	beq	r16,zero,4297c <___vfprintf_internal_r+0xc7c>
   428c4:	d8812e17 	ldw	r2,1208(sp)
   428c8:	d8c12817 	ldw	r3,1184(sp)
   428cc:	10e1c83a 	sub	r16,r2,r3
   428d0:	04002a0e 	bge	zero,r16,4297c <___vfprintf_internal_r+0xc7c>
   428d4:	04800404 	movi	r18,16
   428d8:	d8c11c17 	ldw	r3,1136(sp)
   428dc:	05c00174 	movhi	r23,5
   428e0:	bdf60684 	addi	r23,r23,-10214
   428e4:	9400170e 	bge	r18,r16,42944 <___vfprintf_internal_r+0xc44>
   428e8:	04c001c4 	movi	r19,7
   428ec:	dd012917 	ldw	r20,1188(sp)
   428f0:	00000306 	br	42900 <___vfprintf_internal_r+0xc00>
   428f4:	843ffc04 	addi	r16,r16,-16
   428f8:	4a400204 	addi	r9,r9,8
   428fc:	9400110e 	bge	r18,r16,42944 <___vfprintf_internal_r+0xc44>
   42900:	4dc00015 	stw	r23,0(r9)
   42904:	4c800115 	stw	r18,4(r9)
   42908:	42000404 	addi	r8,r8,16
   4290c:	18c00044 	addi	r3,r3,1
   42910:	da011d15 	stw	r8,1140(sp)
   42914:	d8c11c15 	stw	r3,1136(sp)
   42918:	98fff60e 	bge	r19,r3,428f4 <___vfprintf_internal_r+0xbf4>
   4291c:	8809883a 	mov	r4,r17
   42920:	a00b883a 	mov	r5,r20
   42924:	d9811b04 	addi	r6,sp,1132
   42928:	0041ccc0 	call	41ccc <__sprint_r>
   4292c:	103e3a1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42930:	843ffc04 	addi	r16,r16,-16
   42934:	da011d17 	ldw	r8,1140(sp)
   42938:	d8c11c17 	ldw	r3,1136(sp)
   4293c:	da400404 	addi	r9,sp,16
   42940:	943fef16 	blt	r18,r16,42900 <___vfprintf_internal_r+0xc00>
   42944:	4dc00015 	stw	r23,0(r9)
   42948:	4c000115 	stw	r16,4(r9)
   4294c:	8211883a 	add	r8,r16,r8
   42950:	18c00044 	addi	r3,r3,1
   42954:	da011d15 	stw	r8,1140(sp)
   42958:	d8c11c15 	stw	r3,1136(sp)
   4295c:	008001c4 	movi	r2,7
   42960:	10c0060e 	bge	r2,r3,4297c <___vfprintf_internal_r+0xc7c>
   42964:	d9412917 	ldw	r5,1188(sp)
   42968:	8809883a 	mov	r4,r17
   4296c:	d9811b04 	addi	r6,sp,1132
   42970:	0041ccc0 	call	41ccc <__sprint_r>
   42974:	103e281e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42978:	da011d17 	ldw	r8,1140(sp)
   4297c:	dd012817 	ldw	r20,1184(sp)
   42980:	d9012e17 	ldw	r4,1208(sp)
   42984:	a100010e 	bge	r20,r4,4298c <___vfprintf_internal_r+0xc8c>
   42988:	2029883a 	mov	r20,r4
   4298c:	d8812c17 	ldw	r2,1200(sp)
   42990:	1505883a 	add	r2,r2,r20
   42994:	d8812c15 	stw	r2,1200(sp)
   42998:	4000b91e 	bne	r8,zero,42c80 <___vfprintf_internal_r+0xf80>
   4299c:	d8011c15 	stw	zero,1136(sp)
   429a0:	a8800007 	ldb	r2,0(r21)
   429a4:	da400404 	addi	r9,sp,16
   429a8:	103d0d1e 	bne	r2,zero,41de0 <___vfprintf_internal_r+0xe0>
   429ac:	a825883a 	mov	r18,r21
   429b0:	003d2306 	br	41e40 <___vfprintf_internal_r+0x140>
   429b4:	d9412917 	ldw	r5,1188(sp)
   429b8:	8809883a 	mov	r4,r17
   429bc:	d9811b04 	addi	r6,sp,1132
   429c0:	0041ccc0 	call	41ccc <__sprint_r>
   429c4:	103e141e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   429c8:	da011d17 	ldw	r8,1140(sp)
   429cc:	da400404 	addi	r9,sp,16
   429d0:	8080004c 	andi	r2,r16,1
   429d4:	103fb926 	beq	r2,zero,428bc <___vfprintf_internal_r+0xbbc>
   429d8:	d8c11c17 	ldw	r3,1136(sp)
   429dc:	d9013717 	ldw	r4,1244(sp)
   429e0:	00800044 	movi	r2,1
   429e4:	48800115 	stw	r2,4(r9)
   429e8:	49000015 	stw	r4,0(r9)
   429ec:	4091883a 	add	r8,r8,r2
   429f0:	1887883a 	add	r3,r3,r2
   429f4:	da011d15 	stw	r8,1140(sp)
   429f8:	d8c11c15 	stw	r3,1136(sp)
   429fc:	008001c4 	movi	r2,7
   42a00:	10ffad0e 	bge	r2,r3,428b8 <___vfprintf_internal_r+0xbb8>
   42a04:	d9412917 	ldw	r5,1188(sp)
   42a08:	8809883a 	mov	r4,r17
   42a0c:	d9811b04 	addi	r6,sp,1132
   42a10:	0041ccc0 	call	41ccc <__sprint_r>
   42a14:	103e001e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42a18:	da400404 	addi	r9,sp,16
   42a1c:	da011d17 	ldw	r8,1140(sp)
   42a20:	003fa606 	br	428bc <___vfprintf_internal_r+0xbbc>
   42a24:	18803fcc 	andi	r2,r3,255
   42a28:	00c00044 	movi	r3,1
   42a2c:	10c10126 	beq	r2,r3,42e34 <___vfprintf_internal_r+0x1134>
   42a30:	00c00084 	movi	r3,2
   42a34:	10c0ed26 	beq	r2,r3,42dec <___vfprintf_internal_r+0x10ec>
   42a38:	d8c10dc4 	addi	r3,sp,1079
   42a3c:	b808d0fa 	srli	r4,r23,3
   42a40:	b00a977a 	slli	r5,r22,29
   42a44:	b02cd0fa 	srli	r22,r22,3
   42a48:	bdc001cc 	andi	r23,r23,7
   42a4c:	b8800c04 	addi	r2,r23,48
   42a50:	292eb03a 	or	r23,r5,r4
   42a54:	18800005 	stb	r2,0(r3)
   42a58:	bd88b03a 	or	r4,r23,r22
   42a5c:	1827883a 	mov	r19,r3
   42a60:	18ffffc4 	addi	r3,r3,-1
   42a64:	203ff51e 	bne	r4,zero,42a3c <___vfprintf_internal_r+0xd3c>
   42a68:	8100004c 	andi	r4,r16,1
   42a6c:	980b883a 	mov	r5,r19
   42a70:	20000726 	beq	r4,zero,42a90 <___vfprintf_internal_r+0xd90>
   42a74:	10803fcc 	andi	r2,r2,255
   42a78:	1080201c 	xori	r2,r2,128
   42a7c:	10bfe004 	addi	r2,r2,-128
   42a80:	01000c04 	movi	r4,48
   42a84:	11000226 	beq	r2,r4,42a90 <___vfprintf_internal_r+0xd90>
   42a88:	1827883a 	mov	r19,r3
   42a8c:	293fffc5 	stb	r4,-1(r5)
   42a90:	d8812717 	ldw	r2,1180(sp)
   42a94:	14c5c83a 	sub	r2,r2,r19
   42a98:	d8812b15 	stw	r2,1196(sp)
   42a9c:	003e1f06 	br	4231c <___vfprintf_internal_r+0x61c>
   42aa0:	00801944 	movi	r2,101
   42aa4:	14807c0e 	bge	r2,r18,42c98 <___vfprintf_internal_r+0xf98>
   42aa8:	d9013317 	ldw	r4,1228(sp)
   42aac:	d9413417 	ldw	r5,1232(sp)
   42ab0:	000d883a 	mov	r6,zero
   42ab4:	000f883a 	mov	r7,zero
   42ab8:	d8c13b15 	stw	r3,1260(sp)
   42abc:	da013a15 	stw	r8,1256(sp)
   42ac0:	da413c15 	stw	r9,1264(sp)
   42ac4:	004a3100 	call	4a310 <__eqdf2>
   42ac8:	d8c13b17 	ldw	r3,1260(sp)
   42acc:	da013a17 	ldw	r8,1256(sp)
   42ad0:	da413c17 	ldw	r9,1264(sp)
   42ad4:	1001001e 	bne	r2,zero,42ed8 <___vfprintf_internal_r+0x11d8>
   42ad8:	00800174 	movhi	r2,5
   42adc:	10b60604 	addi	r2,r2,-10216
   42ae0:	48800015 	stw	r2,0(r9)
   42ae4:	00800044 	movi	r2,1
   42ae8:	48800115 	stw	r2,4(r9)
   42aec:	4091883a 	add	r8,r8,r2
   42af0:	1887883a 	add	r3,r3,r2
   42af4:	da011d15 	stw	r8,1140(sp)
   42af8:	d8c11c15 	stw	r3,1136(sp)
   42afc:	008001c4 	movi	r2,7
   42b00:	10c20316 	blt	r2,r3,43310 <___vfprintf_internal_r+0x1610>
   42b04:	4a400204 	addi	r9,r9,8
   42b08:	d8812417 	ldw	r2,1168(sp)
   42b0c:	d8c13217 	ldw	r3,1224(sp)
   42b10:	10c00216 	blt	r2,r3,42b1c <___vfprintf_internal_r+0xe1c>
   42b14:	8080004c 	andi	r2,r16,1
   42b18:	103f6826 	beq	r2,zero,428bc <___vfprintf_internal_r+0xbbc>
   42b1c:	d8c11c17 	ldw	r3,1136(sp)
   42b20:	d9013717 	ldw	r4,1244(sp)
   42b24:	00800044 	movi	r2,1
   42b28:	48800115 	stw	r2,4(r9)
   42b2c:	49000015 	stw	r4,0(r9)
   42b30:	4091883a 	add	r8,r8,r2
   42b34:	1887883a 	add	r3,r3,r2
   42b38:	da011d15 	stw	r8,1140(sp)
   42b3c:	d8c11c15 	stw	r3,1136(sp)
   42b40:	008001c4 	movi	r2,7
   42b44:	10c2ce16 	blt	r2,r3,43680 <___vfprintf_internal_r+0x1980>
   42b48:	4a400204 	addi	r9,r9,8
   42b4c:	d8813217 	ldw	r2,1224(sp)
   42b50:	14bfffc4 	addi	r18,r2,-1
   42b54:	04bf590e 	bge	zero,r18,428bc <___vfprintf_internal_r+0xbbc>
   42b58:	04c00404 	movi	r19,16
   42b5c:	d8c11c17 	ldw	r3,1136(sp)
   42b60:	05000174 	movhi	r20,5
   42b64:	a5360a84 	addi	r20,r20,-10198
   42b68:	9c818a0e 	bge	r19,r18,43194 <___vfprintf_internal_r+0x1494>
   42b6c:	058001c4 	movi	r22,7
   42b70:	ddc12917 	ldw	r23,1188(sp)
   42b74:	00000306 	br	42b84 <___vfprintf_internal_r+0xe84>
   42b78:	4a400204 	addi	r9,r9,8
   42b7c:	94bffc04 	addi	r18,r18,-16
   42b80:	9c81840e 	bge	r19,r18,43194 <___vfprintf_internal_r+0x1494>
   42b84:	4d000015 	stw	r20,0(r9)
   42b88:	4cc00115 	stw	r19,4(r9)
   42b8c:	42000404 	addi	r8,r8,16
   42b90:	18c00044 	addi	r3,r3,1
   42b94:	da011d15 	stw	r8,1140(sp)
   42b98:	d8c11c15 	stw	r3,1136(sp)
   42b9c:	b0fff60e 	bge	r22,r3,42b78 <___vfprintf_internal_r+0xe78>
   42ba0:	8809883a 	mov	r4,r17
   42ba4:	b80b883a 	mov	r5,r23
   42ba8:	d9811b04 	addi	r6,sp,1132
   42bac:	0041ccc0 	call	41ccc <__sprint_r>
   42bb0:	103d991e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42bb4:	da011d17 	ldw	r8,1140(sp)
   42bb8:	d8c11c17 	ldw	r3,1136(sp)
   42bbc:	da400404 	addi	r9,sp,16
   42bc0:	003fee06 	br	42b7c <___vfprintf_internal_r+0xe7c>
   42bc4:	d8812e17 	ldw	r2,1208(sp)
   42bc8:	d9012817 	ldw	r4,1184(sp)
   42bcc:	112fc83a 	sub	r23,r2,r4
   42bd0:	05ff000e 	bge	zero,r23,427d4 <___vfprintf_internal_r+0xad4>
   42bd4:	07000404 	movi	fp,16
   42bd8:	05000174 	movhi	r20,5
   42bdc:	a5360a84 	addi	r20,r20,-10198
   42be0:	e5c01d0e 	bge	fp,r23,42c58 <___vfprintf_internal_r+0xf58>
   42be4:	dc812a15 	stw	r18,1192(sp)
   42be8:	058001c4 	movi	r22,7
   42bec:	a025883a 	mov	r18,r20
   42bf0:	8029883a 	mov	r20,r16
   42bf4:	dc012917 	ldw	r16,1188(sp)
   42bf8:	00000306 	br	42c08 <___vfprintf_internal_r+0xf08>
   42bfc:	bdfffc04 	addi	r23,r23,-16
   42c00:	4a400204 	addi	r9,r9,8
   42c04:	e5c0110e 	bge	fp,r23,42c4c <___vfprintf_internal_r+0xf4c>
   42c08:	4c800015 	stw	r18,0(r9)
   42c0c:	4f000115 	stw	fp,4(r9)
   42c10:	42000404 	addi	r8,r8,16
   42c14:	18c00044 	addi	r3,r3,1
   42c18:	da011d15 	stw	r8,1140(sp)
   42c1c:	d8c11c15 	stw	r3,1136(sp)
   42c20:	b0fff60e 	bge	r22,r3,42bfc <___vfprintf_internal_r+0xefc>
   42c24:	8809883a 	mov	r4,r17
   42c28:	800b883a 	mov	r5,r16
   42c2c:	d9811b04 	addi	r6,sp,1132
   42c30:	0041ccc0 	call	41ccc <__sprint_r>
   42c34:	103d781e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42c38:	bdfffc04 	addi	r23,r23,-16
   42c3c:	da011d17 	ldw	r8,1140(sp)
   42c40:	d8c11c17 	ldw	r3,1136(sp)
   42c44:	da400404 	addi	r9,sp,16
   42c48:	e5ffef16 	blt	fp,r23,42c08 <___vfprintf_internal_r+0xf08>
   42c4c:	a021883a 	mov	r16,r20
   42c50:	9029883a 	mov	r20,r18
   42c54:	dc812a17 	ldw	r18,1192(sp)
   42c58:	4d000015 	stw	r20,0(r9)
   42c5c:	4dc00115 	stw	r23,4(r9)
   42c60:	45d1883a 	add	r8,r8,r23
   42c64:	18c00044 	addi	r3,r3,1
   42c68:	da011d15 	stw	r8,1140(sp)
   42c6c:	d8c11c15 	stw	r3,1136(sp)
   42c70:	008001c4 	movi	r2,7
   42c74:	10c13616 	blt	r2,r3,43150 <___vfprintf_internal_r+0x1450>
   42c78:	4a400204 	addi	r9,r9,8
   42c7c:	003ed506 	br	427d4 <___vfprintf_internal_r+0xad4>
   42c80:	d9412917 	ldw	r5,1188(sp)
   42c84:	8809883a 	mov	r4,r17
   42c88:	d9811b04 	addi	r6,sp,1132
   42c8c:	0041ccc0 	call	41ccc <__sprint_r>
   42c90:	103f4226 	beq	r2,zero,4299c <___vfprintf_internal_r+0xc9c>
   42c94:	003d6006 	br	42218 <___vfprintf_internal_r+0x518>
   42c98:	d9013217 	ldw	r4,1224(sp)
   42c9c:	00800044 	movi	r2,1
   42ca0:	4cc00015 	stw	r19,0(r9)
   42ca4:	1101000e 	bge	r2,r4,430a8 <___vfprintf_internal_r+0x13a8>
   42ca8:	00800044 	movi	r2,1
   42cac:	48800115 	stw	r2,4(r9)
   42cb0:	4091883a 	add	r8,r8,r2
   42cb4:	1887883a 	add	r3,r3,r2
   42cb8:	da011d15 	stw	r8,1140(sp)
   42cbc:	d8c11c15 	stw	r3,1136(sp)
   42cc0:	008001c4 	movi	r2,7
   42cc4:	10c10c16 	blt	r2,r3,430f8 <___vfprintf_internal_r+0x13f8>
   42cc8:	4a400204 	addi	r9,r9,8
   42ccc:	d8813717 	ldw	r2,1244(sp)
   42cd0:	48800015 	stw	r2,0(r9)
   42cd4:	00800044 	movi	r2,1
   42cd8:	48800115 	stw	r2,4(r9)
   42cdc:	4091883a 	add	r8,r8,r2
   42ce0:	1887883a 	add	r3,r3,r2
   42ce4:	da011d15 	stw	r8,1140(sp)
   42ce8:	d8c11c15 	stw	r3,1136(sp)
   42cec:	008001c4 	movi	r2,7
   42cf0:	10c10a16 	blt	r2,r3,4311c <___vfprintf_internal_r+0x141c>
   42cf4:	4c800204 	addi	r18,r9,8
   42cf8:	d9013317 	ldw	r4,1228(sp)
   42cfc:	d9413417 	ldw	r5,1232(sp)
   42d00:	000d883a 	mov	r6,zero
   42d04:	000f883a 	mov	r7,zero
   42d08:	d8c13b15 	stw	r3,1260(sp)
   42d0c:	da013a15 	stw	r8,1256(sp)
   42d10:	004a36c0 	call	4a36c <__nedf2>
   42d14:	d8c13b17 	ldw	r3,1260(sp)
   42d18:	da013a17 	ldw	r8,1256(sp)
   42d1c:	1000ba26 	beq	r2,zero,43008 <___vfprintf_internal_r+0x1308>
   42d20:	d9013217 	ldw	r4,1224(sp)
   42d24:	9cc00044 	addi	r19,r19,1
   42d28:	94c00015 	stw	r19,0(r18)
   42d2c:	20bfffc4 	addi	r2,r4,-1
   42d30:	90800115 	stw	r2,4(r18)
   42d34:	4091883a 	add	r8,r8,r2
   42d38:	18c00044 	addi	r3,r3,1
   42d3c:	da011d15 	stw	r8,1140(sp)
   42d40:	d8c11c15 	stw	r3,1136(sp)
   42d44:	008001c4 	movi	r2,7
   42d48:	10c0e216 	blt	r2,r3,430d4 <___vfprintf_internal_r+0x13d4>
   42d4c:	94800204 	addi	r18,r18,8
   42d50:	d9013517 	ldw	r4,1236(sp)
   42d54:	d8811fc4 	addi	r2,sp,1151
   42d58:	90800015 	stw	r2,0(r18)
   42d5c:	91000115 	stw	r4,4(r18)
   42d60:	4111883a 	add	r8,r8,r4
   42d64:	18c00044 	addi	r3,r3,1
   42d68:	da011d15 	stw	r8,1140(sp)
   42d6c:	d8c11c15 	stw	r3,1136(sp)
   42d70:	008001c4 	movi	r2,7
   42d74:	10ff2316 	blt	r2,r3,42a04 <___vfprintf_internal_r+0xd04>
   42d78:	92400204 	addi	r9,r18,8
   42d7c:	003ecf06 	br	428bc <___vfprintf_internal_r+0xbbc>
   42d80:	d9412917 	ldw	r5,1188(sp)
   42d84:	8809883a 	mov	r4,r17
   42d88:	d9811b04 	addi	r6,sp,1132
   42d8c:	0041ccc0 	call	41ccc <__sprint_r>
   42d90:	103d211e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42d94:	da011d17 	ldw	r8,1140(sp)
   42d98:	d8c11c17 	ldw	r3,1136(sp)
   42d9c:	da400404 	addi	r9,sp,16
   42da0:	003eba06 	br	4288c <___vfprintf_internal_r+0xb8c>
   42da4:	d9412917 	ldw	r5,1188(sp)
   42da8:	8809883a 	mov	r4,r17
   42dac:	d9811b04 	addi	r6,sp,1132
   42db0:	0041ccc0 	call	41ccc <__sprint_r>
   42db4:	103d181e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42db8:	da011d17 	ldw	r8,1140(sp)
   42dbc:	d8c11c17 	ldw	r3,1136(sp)
   42dc0:	da400404 	addi	r9,sp,16
   42dc4:	003e8006 	br	427c8 <___vfprintf_internal_r+0xac8>
   42dc8:	d9412917 	ldw	r5,1188(sp)
   42dcc:	8809883a 	mov	r4,r17
   42dd0:	d9811b04 	addi	r6,sp,1132
   42dd4:	0041ccc0 	call	41ccc <__sprint_r>
   42dd8:	103d0f1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42ddc:	da011d17 	ldw	r8,1140(sp)
   42de0:	d8c11c17 	ldw	r3,1136(sp)
   42de4:	da400404 	addi	r9,sp,16
   42de8:	003e6a06 	br	42794 <___vfprintf_internal_r+0xa94>
   42dec:	d9413617 	ldw	r5,1240(sp)
   42df0:	d8810dc4 	addi	r2,sp,1079
   42df4:	b8c003cc 	andi	r3,r23,15
   42df8:	b008973a 	slli	r4,r22,28
   42dfc:	28c7883a 	add	r3,r5,r3
   42e00:	b82ed13a 	srli	r23,r23,4
   42e04:	18c00003 	ldbu	r3,0(r3)
   42e08:	b02cd13a 	srli	r22,r22,4
   42e0c:	25eeb03a 	or	r23,r4,r23
   42e10:	10c00005 	stb	r3,0(r2)
   42e14:	bd86b03a 	or	r3,r23,r22
   42e18:	1027883a 	mov	r19,r2
   42e1c:	10bfffc4 	addi	r2,r2,-1
   42e20:	183ff41e 	bne	r3,zero,42df4 <___vfprintf_internal_r+0x10f4>
   42e24:	003f1a06 	br	42a90 <___vfprintf_internal_r+0xd90>
   42e28:	d8012b15 	stw	zero,1196(sp)
   42e2c:	dcc10e04 	addi	r19,sp,1080
   42e30:	003d3a06 	br	4231c <___vfprintf_internal_r+0x61c>
   42e34:	b0025426 	beq	r22,zero,43788 <___vfprintf_internal_r+0x1a88>
   42e38:	b807883a 	mov	r3,r23
   42e3c:	d8810dc4 	addi	r2,sp,1079
   42e40:	882f883a 	mov	r23,r17
   42e44:	04c00244 	movi	r19,9
   42e48:	8023883a 	mov	r17,r16
   42e4c:	da412815 	stw	r9,1184(sp)
   42e50:	1821883a 	mov	r16,r3
   42e54:	8009883a 	mov	r4,r16
   42e58:	b00b883a 	mov	r5,r22
   42e5c:	01800284 	movi	r6,10
   42e60:	000f883a 	mov	r7,zero
   42e64:	1029883a 	mov	r20,r2
   42e68:	00498e00 	call	498e0 <__umoddi3>
   42e6c:	10800c04 	addi	r2,r2,48
   42e70:	8009883a 	mov	r4,r16
   42e74:	b00b883a 	mov	r5,r22
   42e78:	a0800005 	stb	r2,0(r20)
   42e7c:	01800284 	movi	r6,10
   42e80:	000f883a 	mov	r7,zero
   42e84:	00492900 	call	49290 <__udivdi3>
   42e88:	1021883a 	mov	r16,r2
   42e8c:	182d883a 	mov	r22,r3
   42e90:	a0bfffc4 	addi	r2,r20,-1
   42e94:	183fef1e 	bne	r3,zero,42e54 <___vfprintf_internal_r+0x1154>
   42e98:	9c3fee36 	bltu	r19,r16,42e54 <___vfprintf_internal_r+0x1154>
   42e9c:	da412817 	ldw	r9,1184(sp)
   42ea0:	8005883a 	mov	r2,r16
   42ea4:	8821883a 	mov	r16,r17
   42ea8:	b823883a 	mov	r17,r23
   42eac:	102f883a 	mov	r23,r2
   42eb0:	d8812717 	ldw	r2,1180(sp)
   42eb4:	a4ffffc4 	addi	r19,r20,-1
   42eb8:	bdc00c04 	addi	r23,r23,48
   42ebc:	14c5c83a 	sub	r2,r2,r19
   42ec0:	a5ffffc5 	stb	r23,-1(r20)
   42ec4:	d8812b15 	stw	r2,1196(sp)
   42ec8:	003d1406 	br	4231c <___vfprintf_internal_r+0x61c>
   42ecc:	00c00044 	movi	r3,1
   42ed0:	bd84b03a 	or	r2,r23,r22
   42ed4:	003d0306 	br	422e4 <___vfprintf_internal_r+0x5e4>
   42ed8:	dc812417 	ldw	r18,1168(sp)
   42edc:	0481140e 	bge	zero,r18,43330 <___vfprintf_internal_r+0x1630>
   42ee0:	d9013217 	ldw	r4,1224(sp)
   42ee4:	4cc00015 	stw	r19,0(r9)
   42ee8:	9100ec16 	blt	r18,r4,4329c <___vfprintf_internal_r+0x159c>
   42eec:	49000115 	stw	r4,4(r9)
   42ef0:	4111883a 	add	r8,r8,r4
   42ef4:	18c00044 	addi	r3,r3,1
   42ef8:	da011d15 	stw	r8,1140(sp)
   42efc:	d8c11c15 	stw	r3,1136(sp)
   42f00:	008001c4 	movi	r2,7
   42f04:	10c23616 	blt	r2,r3,437e0 <___vfprintf_internal_r+0x1ae0>
   42f08:	4a400204 	addi	r9,r9,8
   42f0c:	d8813217 	ldw	r2,1224(sp)
   42f10:	90a5c83a 	sub	r18,r18,r2
   42f14:	04beae0e 	bge	zero,r18,429d0 <___vfprintf_internal_r+0xcd0>
   42f18:	04c00404 	movi	r19,16
   42f1c:	d8c11c17 	ldw	r3,1136(sp)
   42f20:	05000174 	movhi	r20,5
   42f24:	a5360a84 	addi	r20,r20,-10198
   42f28:	9c81dd0e 	bge	r19,r18,436a0 <___vfprintf_internal_r+0x19a0>
   42f2c:	058001c4 	movi	r22,7
   42f30:	ddc12917 	ldw	r23,1188(sp)
   42f34:	00000306 	br	42f44 <___vfprintf_internal_r+0x1244>
   42f38:	4a400204 	addi	r9,r9,8
   42f3c:	94bffc04 	addi	r18,r18,-16
   42f40:	9c81d70e 	bge	r19,r18,436a0 <___vfprintf_internal_r+0x19a0>
   42f44:	4d000015 	stw	r20,0(r9)
   42f48:	4cc00115 	stw	r19,4(r9)
   42f4c:	42000404 	addi	r8,r8,16
   42f50:	18c00044 	addi	r3,r3,1
   42f54:	da011d15 	stw	r8,1140(sp)
   42f58:	d8c11c15 	stw	r3,1136(sp)
   42f5c:	b0fff60e 	bge	r22,r3,42f38 <___vfprintf_internal_r+0x1238>
   42f60:	8809883a 	mov	r4,r17
   42f64:	b80b883a 	mov	r5,r23
   42f68:	d9811b04 	addi	r6,sp,1132
   42f6c:	0041ccc0 	call	41ccc <__sprint_r>
   42f70:	103ca91e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42f74:	da011d17 	ldw	r8,1140(sp)
   42f78:	d8c11c17 	ldw	r3,1136(sp)
   42f7c:	da400404 	addi	r9,sp,16
   42f80:	003fee06 	br	42f3c <___vfprintf_internal_r+0x123c>
   42f84:	d9412917 	ldw	r5,1188(sp)
   42f88:	8809883a 	mov	r4,r17
   42f8c:	d9811b04 	addi	r6,sp,1132
   42f90:	0041ccc0 	call	41ccc <__sprint_r>
   42f94:	103ca01e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   42f98:	da011d17 	ldw	r8,1140(sp)
   42f9c:	d8c11c17 	ldw	r3,1136(sp)
   42fa0:	da400404 	addi	r9,sp,16
   42fa4:	003dee06 	br	42760 <___vfprintf_internal_r+0xa60>
   42fa8:	00c00084 	movi	r3,2
   42fac:	bd84b03a 	or	r2,r23,r22
   42fb0:	d8012585 	stb	zero,1174(sp)
   42fb4:	003ccb06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   42fb8:	8080040c 	andi	r2,r16,16
   42fbc:	1000ae26 	beq	r2,zero,43278 <___vfprintf_internal_r+0x1578>
   42fc0:	d9012d17 	ldw	r4,1204(sp)
   42fc4:	25c00017 	ldw	r23,0(r4)
   42fc8:	21000104 	addi	r4,r4,4
   42fcc:	d9012d15 	stw	r4,1204(sp)
   42fd0:	b82dd7fa 	srai	r22,r23,31
   42fd4:	b005883a 	mov	r2,r22
   42fd8:	003cb906 	br	422c0 <___vfprintf_internal_r+0x5c0>
   42fdc:	8080040c 	andi	r2,r16,16
   42fe0:	10007026 	beq	r2,zero,431a4 <___vfprintf_internal_r+0x14a4>
   42fe4:	d8812d17 	ldw	r2,1204(sp)
   42fe8:	002d883a 	mov	r22,zero
   42fec:	00c00044 	movi	r3,1
   42ff0:	15c00017 	ldw	r23,0(r2)
   42ff4:	10800104 	addi	r2,r2,4
   42ff8:	d8812d15 	stw	r2,1204(sp)
   42ffc:	d8012585 	stb	zero,1174(sp)
   43000:	b805883a 	mov	r2,r23
   43004:	003cb706 	br	422e4 <___vfprintf_internal_r+0x5e4>
   43008:	d8813217 	ldw	r2,1224(sp)
   4300c:	14ffffc4 	addi	r19,r2,-1
   43010:	04ff4f0e 	bge	zero,r19,42d50 <___vfprintf_internal_r+0x1050>
   43014:	05800404 	movi	r22,16
   43018:	05000174 	movhi	r20,5
   4301c:	a5360a84 	addi	r20,r20,-10198
   43020:	b4c0470e 	bge	r22,r19,43140 <___vfprintf_internal_r+0x1440>
   43024:	05c001c4 	movi	r23,7
   43028:	df012917 	ldw	fp,1188(sp)
   4302c:	00000306 	br	4303c <___vfprintf_internal_r+0x133c>
   43030:	94800204 	addi	r18,r18,8
   43034:	9cfffc04 	addi	r19,r19,-16
   43038:	b4c0410e 	bge	r22,r19,43140 <___vfprintf_internal_r+0x1440>
   4303c:	95000015 	stw	r20,0(r18)
   43040:	95800115 	stw	r22,4(r18)
   43044:	42000404 	addi	r8,r8,16
   43048:	18c00044 	addi	r3,r3,1
   4304c:	da011d15 	stw	r8,1140(sp)
   43050:	d8c11c15 	stw	r3,1136(sp)
   43054:	b8fff60e 	bge	r23,r3,43030 <___vfprintf_internal_r+0x1330>
   43058:	8809883a 	mov	r4,r17
   4305c:	e00b883a 	mov	r5,fp
   43060:	d9811b04 	addi	r6,sp,1132
   43064:	0041ccc0 	call	41ccc <__sprint_r>
   43068:	103c6b1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   4306c:	da011d17 	ldw	r8,1140(sp)
   43070:	d8c11c17 	ldw	r3,1136(sp)
   43074:	dc800404 	addi	r18,sp,16
   43078:	003fee06 	br	43034 <___vfprintf_internal_r+0x1334>
   4307c:	8080040c 	andi	r2,r16,16
   43080:	10005326 	beq	r2,zero,431d0 <___vfprintf_internal_r+0x14d0>
   43084:	d8c12d17 	ldw	r3,1204(sp)
   43088:	002d883a 	mov	r22,zero
   4308c:	1dc00017 	ldw	r23,0(r3)
   43090:	18c00104 	addi	r3,r3,4
   43094:	d8c12d15 	stw	r3,1204(sp)
   43098:	b805883a 	mov	r2,r23
   4309c:	0007883a 	mov	r3,zero
   430a0:	d8012585 	stb	zero,1174(sp)
   430a4:	003c8f06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   430a8:	8088703a 	and	r4,r16,r2
   430ac:	203efe1e 	bne	r4,zero,42ca8 <___vfprintf_internal_r+0xfa8>
   430b0:	48800115 	stw	r2,4(r9)
   430b4:	42000044 	addi	r8,r8,1
   430b8:	18c00044 	addi	r3,r3,1
   430bc:	da011d15 	stw	r8,1140(sp)
   430c0:	d8c11c15 	stw	r3,1136(sp)
   430c4:	008001c4 	movi	r2,7
   430c8:	10c00216 	blt	r2,r3,430d4 <___vfprintf_internal_r+0x13d4>
   430cc:	4c800204 	addi	r18,r9,8
   430d0:	003f1f06 	br	42d50 <___vfprintf_internal_r+0x1050>
   430d4:	d9412917 	ldw	r5,1188(sp)
   430d8:	8809883a 	mov	r4,r17
   430dc:	d9811b04 	addi	r6,sp,1132
   430e0:	0041ccc0 	call	41ccc <__sprint_r>
   430e4:	103c4c1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   430e8:	dc800404 	addi	r18,sp,16
   430ec:	da011d17 	ldw	r8,1140(sp)
   430f0:	d8c11c17 	ldw	r3,1136(sp)
   430f4:	003f1606 	br	42d50 <___vfprintf_internal_r+0x1050>
   430f8:	d9412917 	ldw	r5,1188(sp)
   430fc:	8809883a 	mov	r4,r17
   43100:	d9811b04 	addi	r6,sp,1132
   43104:	0041ccc0 	call	41ccc <__sprint_r>
   43108:	103c431e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   4310c:	da011d17 	ldw	r8,1140(sp)
   43110:	d8c11c17 	ldw	r3,1136(sp)
   43114:	da400404 	addi	r9,sp,16
   43118:	003eec06 	br	42ccc <___vfprintf_internal_r+0xfcc>
   4311c:	d9412917 	ldw	r5,1188(sp)
   43120:	8809883a 	mov	r4,r17
   43124:	d9811b04 	addi	r6,sp,1132
   43128:	0041ccc0 	call	41ccc <__sprint_r>
   4312c:	103c3a1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43130:	da011d17 	ldw	r8,1140(sp)
   43134:	d8c11c17 	ldw	r3,1136(sp)
   43138:	dc800404 	addi	r18,sp,16
   4313c:	003eee06 	br	42cf8 <___vfprintf_internal_r+0xff8>
   43140:	95000015 	stw	r20,0(r18)
   43144:	94c00115 	stw	r19,4(r18)
   43148:	44d1883a 	add	r8,r8,r19
   4314c:	003efa06 	br	42d38 <___vfprintf_internal_r+0x1038>
   43150:	d9412917 	ldw	r5,1188(sp)
   43154:	8809883a 	mov	r4,r17
   43158:	d9811b04 	addi	r6,sp,1132
   4315c:	0041ccc0 	call	41ccc <__sprint_r>
   43160:	103c2d1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43164:	da011d17 	ldw	r8,1140(sp)
   43168:	d8c11c17 	ldw	r3,1136(sp)
   4316c:	da400404 	addi	r9,sp,16
   43170:	003d9806 	br	427d4 <___vfprintf_internal_r+0xad4>
   43174:	8080100c 	andi	r2,r16,64
   43178:	10011626 	beq	r2,zero,435d4 <___vfprintf_internal_r+0x18d4>
   4317c:	d8c12d17 	ldw	r3,1204(sp)
   43180:	002d883a 	mov	r22,zero
   43184:	1dc0000b 	ldhu	r23,0(r3)
   43188:	18c00104 	addi	r3,r3,4
   4318c:	d8c12d15 	stw	r3,1204(sp)
   43190:	003cc106 	br	42498 <___vfprintf_internal_r+0x798>
   43194:	4d000015 	stw	r20,0(r9)
   43198:	4c800115 	stw	r18,4(r9)
   4319c:	4491883a 	add	r8,r8,r18
   431a0:	003dc006 	br	428a4 <___vfprintf_internal_r+0xba4>
   431a4:	8080100c 	andi	r2,r16,64
   431a8:	10010126 	beq	r2,zero,435b0 <___vfprintf_internal_r+0x18b0>
   431ac:	d8c12d17 	ldw	r3,1204(sp)
   431b0:	002d883a 	mov	r22,zero
   431b4:	1dc0000b 	ldhu	r23,0(r3)
   431b8:	18c00104 	addi	r3,r3,4
   431bc:	d8c12d15 	stw	r3,1204(sp)
   431c0:	b805883a 	mov	r2,r23
   431c4:	00c00044 	movi	r3,1
   431c8:	d8012585 	stb	zero,1174(sp)
   431cc:	003c4506 	br	422e4 <___vfprintf_internal_r+0x5e4>
   431d0:	8080100c 	andi	r2,r16,64
   431d4:	10010526 	beq	r2,zero,435ec <___vfprintf_internal_r+0x18ec>
   431d8:	d9012d17 	ldw	r4,1204(sp)
   431dc:	002d883a 	mov	r22,zero
   431e0:	0007883a 	mov	r3,zero
   431e4:	25c0000b 	ldhu	r23,0(r4)
   431e8:	21000104 	addi	r4,r4,4
   431ec:	d9012d15 	stw	r4,1204(sp)
   431f0:	b805883a 	mov	r2,r23
   431f4:	d8012585 	stb	zero,1174(sp)
   431f8:	003c3a06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   431fc:	d8812d17 	ldw	r2,1204(sp)
   43200:	15800017 	ldw	r22,0(r2)
   43204:	15000117 	ldw	r20,4(r2)
   43208:	10800204 	addi	r2,r2,8
   4320c:	d8812d15 	stw	r2,1204(sp)
   43210:	dd813315 	stw	r22,1228(sp)
   43214:	dd013415 	stw	r20,1232(sp)
   43218:	003c5906 	br	42380 <___vfprintf_internal_r+0x680>
   4321c:	00c00084 	movi	r3,2
   43220:	d8012585 	stb	zero,1174(sp)
   43224:	003c2f06 	br	422e4 <___vfprintf_internal_r+0x5e4>
   43228:	ac800007 	ldb	r18,0(r21)
   4322c:	003b1006 	br	41e70 <___vfprintf_internal_r+0x170>
   43230:	8080040c 	andi	r2,r16,16
   43234:	1000091e 	bne	r2,zero,4325c <___vfprintf_internal_r+0x155c>
   43238:	8400100c 	andi	r16,r16,64
   4323c:	80000726 	beq	r16,zero,4325c <___vfprintf_internal_r+0x155c>
   43240:	d8c12d17 	ldw	r3,1204(sp)
   43244:	d9012c17 	ldw	r4,1200(sp)
   43248:	18800017 	ldw	r2,0(r3)
   4324c:	18c00104 	addi	r3,r3,4
   43250:	d8c12d15 	stw	r3,1204(sp)
   43254:	1100000d 	sth	r4,0(r2)
   43258:	003adf06 	br	41dd8 <___vfprintf_internal_r+0xd8>
   4325c:	d8c12d17 	ldw	r3,1204(sp)
   43260:	d9012c17 	ldw	r4,1200(sp)
   43264:	18800017 	ldw	r2,0(r3)
   43268:	18c00104 	addi	r3,r3,4
   4326c:	d8c12d15 	stw	r3,1204(sp)
   43270:	11000015 	stw	r4,0(r2)
   43274:	003ad806 	br	41dd8 <___vfprintf_internal_r+0xd8>
   43278:	8080100c 	andi	r2,r16,64
   4327c:	1000c526 	beq	r2,zero,43594 <___vfprintf_internal_r+0x1894>
   43280:	d8812d17 	ldw	r2,1204(sp)
   43284:	15c0000f 	ldh	r23,0(r2)
   43288:	10800104 	addi	r2,r2,4
   4328c:	d8812d15 	stw	r2,1204(sp)
   43290:	b82dd7fa 	srai	r22,r23,31
   43294:	b005883a 	mov	r2,r22
   43298:	003c0906 	br	422c0 <___vfprintf_internal_r+0x5c0>
   4329c:	4c800115 	stw	r18,4(r9)
   432a0:	9211883a 	add	r8,r18,r8
   432a4:	18c00044 	addi	r3,r3,1
   432a8:	da011d15 	stw	r8,1140(sp)
   432ac:	d8c11c15 	stw	r3,1136(sp)
   432b0:	008001c4 	movi	r2,7
   432b4:	10c14016 	blt	r2,r3,437b8 <___vfprintf_internal_r+0x1ab8>
   432b8:	4a400204 	addi	r9,r9,8
   432bc:	d8813717 	ldw	r2,1244(sp)
   432c0:	9ca7883a 	add	r19,r19,r18
   432c4:	48800015 	stw	r2,0(r9)
   432c8:	00800044 	movi	r2,1
   432cc:	48800115 	stw	r2,4(r9)
   432d0:	4091883a 	add	r8,r8,r2
   432d4:	1887883a 	add	r3,r3,r2
   432d8:	da011d15 	stw	r8,1140(sp)
   432dc:	d8c11c15 	stw	r3,1136(sp)
   432e0:	008001c4 	movi	r2,7
   432e4:	10c12c16 	blt	r2,r3,43798 <___vfprintf_internal_r+0x1a98>
   432e8:	4a400204 	addi	r9,r9,8
   432ec:	d9013217 	ldw	r4,1224(sp)
   432f0:	da011d17 	ldw	r8,1140(sp)
   432f4:	d8c11c17 	ldw	r3,1136(sp)
   432f8:	24a5c83a 	sub	r18,r4,r18
   432fc:	4cc00015 	stw	r19,0(r9)
   43300:	003fa506 	br	43198 <___vfprintf_internal_r+0x1498>
   43304:	04c00174 	movhi	r19,5
   43308:	9cf5f704 	addi	r19,r19,-10276
   4330c:	003c2e06 	br	423c8 <___vfprintf_internal_r+0x6c8>
   43310:	d9412917 	ldw	r5,1188(sp)
   43314:	8809883a 	mov	r4,r17
   43318:	d9811b04 	addi	r6,sp,1132
   4331c:	0041ccc0 	call	41ccc <__sprint_r>
   43320:	103bbd1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43324:	da011d17 	ldw	r8,1140(sp)
   43328:	da400404 	addi	r9,sp,16
   4332c:	003df606 	br	42b08 <___vfprintf_internal_r+0xe08>
   43330:	00800174 	movhi	r2,5
   43334:	10b60604 	addi	r2,r2,-10216
   43338:	48800015 	stw	r2,0(r9)
   4333c:	00800044 	movi	r2,1
   43340:	48800115 	stw	r2,4(r9)
   43344:	4091883a 	add	r8,r8,r2
   43348:	1887883a 	add	r3,r3,r2
   4334c:	da011d15 	stw	r8,1140(sp)
   43350:	d8c11c15 	stw	r3,1136(sp)
   43354:	008001c4 	movi	r2,7
   43358:	10c0bc16 	blt	r2,r3,4364c <___vfprintf_internal_r+0x194c>
   4335c:	4a400204 	addi	r9,r9,8
   43360:	9000041e 	bne	r18,zero,43374 <___vfprintf_internal_r+0x1674>
   43364:	d8c13217 	ldw	r3,1224(sp)
   43368:	1800021e 	bne	r3,zero,43374 <___vfprintf_internal_r+0x1674>
   4336c:	8080004c 	andi	r2,r16,1
   43370:	103d5226 	beq	r2,zero,428bc <___vfprintf_internal_r+0xbbc>
   43374:	d8c11c17 	ldw	r3,1136(sp)
   43378:	d9013717 	ldw	r4,1244(sp)
   4337c:	00800044 	movi	r2,1
   43380:	48800115 	stw	r2,4(r9)
   43384:	49000015 	stw	r4,0(r9)
   43388:	4091883a 	add	r8,r8,r2
   4338c:	1887883a 	add	r3,r3,r2
   43390:	da011d15 	stw	r8,1140(sp)
   43394:	d8c11c15 	stw	r3,1136(sp)
   43398:	008001c4 	movi	r2,7
   4339c:	10c14516 	blt	r2,r3,438b4 <___vfprintf_internal_r+0x1bb4>
   433a0:	4a400204 	addi	r9,r9,8
   433a4:	04a5c83a 	sub	r18,zero,r18
   433a8:	0480d70e 	bge	zero,r18,43708 <___vfprintf_internal_r+0x1a08>
   433ac:	05800404 	movi	r22,16
   433b0:	05000174 	movhi	r20,5
   433b4:	a5360a84 	addi	r20,r20,-10198
   433b8:	b480db0e 	bge	r22,r18,43728 <___vfprintf_internal_r+0x1a28>
   433bc:	05c001c4 	movi	r23,7
   433c0:	df012917 	ldw	fp,1188(sp)
   433c4:	00000306 	br	433d4 <___vfprintf_internal_r+0x16d4>
   433c8:	4a400204 	addi	r9,r9,8
   433cc:	94bffc04 	addi	r18,r18,-16
   433d0:	b480d50e 	bge	r22,r18,43728 <___vfprintf_internal_r+0x1a28>
   433d4:	4d000015 	stw	r20,0(r9)
   433d8:	4d800115 	stw	r22,4(r9)
   433dc:	42000404 	addi	r8,r8,16
   433e0:	18c00044 	addi	r3,r3,1
   433e4:	da011d15 	stw	r8,1140(sp)
   433e8:	d8c11c15 	stw	r3,1136(sp)
   433ec:	b8fff60e 	bge	r23,r3,433c8 <___vfprintf_internal_r+0x16c8>
   433f0:	8809883a 	mov	r4,r17
   433f4:	e00b883a 	mov	r5,fp
   433f8:	d9811b04 	addi	r6,sp,1132
   433fc:	0041ccc0 	call	41ccc <__sprint_r>
   43400:	103b851e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43404:	da011d17 	ldw	r8,1140(sp)
   43408:	d8c11c17 	ldw	r3,1136(sp)
   4340c:	da400404 	addi	r9,sp,16
   43410:	003fee06 	br	433cc <___vfprintf_internal_r+0x16cc>
   43414:	da413c15 	stw	r9,1264(sp)
   43418:	0048b8c0 	call	48b8c <__isnand>
   4341c:	da413c17 	ldw	r9,1264(sp)
   43420:	10007e1e 	bne	r2,zero,4361c <___vfprintf_internal_r+0x191c>
   43424:	00bfffc4 	movi	r2,-1
   43428:	e0816a26 	beq	fp,r2,439d4 <___vfprintf_internal_r+0x1cd4>
   4342c:	008019c4 	movi	r2,103
   43430:	90816526 	beq	r18,r2,439c8 <___vfprintf_internal_r+0x1cc8>
   43434:	008011c4 	movi	r2,71
   43438:	90816326 	beq	r18,r2,439c8 <___vfprintf_internal_r+0x1cc8>
   4343c:	80c04014 	ori	r3,r16,256
   43440:	d8c12a15 	stw	r3,1192(sp)
   43444:	a0016516 	blt	r20,zero,439dc <___vfprintf_internal_r+0x1cdc>
   43448:	d8012f05 	stb	zero,1212(sp)
   4344c:	00801984 	movi	r2,102
   43450:	9080f226 	beq	r18,r2,4381c <___vfprintf_internal_r+0x1b1c>
   43454:	00801184 	movi	r2,70
   43458:	9080f026 	beq	r18,r2,4381c <___vfprintf_internal_r+0x1b1c>
   4345c:	00801944 	movi	r2,101
   43460:	90818d26 	beq	r18,r2,43a98 <___vfprintf_internal_r+0x1d98>
   43464:	00801144 	movi	r2,69
   43468:	90818b26 	beq	r18,r2,43a98 <___vfprintf_internal_r+0x1d98>
   4346c:	e02f883a 	mov	r23,fp
   43470:	d8812404 	addi	r2,sp,1168
   43474:	d8800115 	stw	r2,4(sp)
   43478:	d8812304 	addi	r2,sp,1164
   4347c:	d8800215 	stw	r2,8(sp)
   43480:	d8812204 	addi	r2,sp,1160
   43484:	ddc00015 	stw	r23,0(sp)
   43488:	d8800315 	stw	r2,12(sp)
   4348c:	8809883a 	mov	r4,r17
   43490:	b00b883a 	mov	r5,r22
   43494:	a00d883a 	mov	r6,r20
   43498:	01c00084 	movi	r7,2
   4349c:	da413c15 	stw	r9,1264(sp)
   434a0:	00440f00 	call	440f0 <_dtoa_r>
   434a4:	1027883a 	mov	r19,r2
   434a8:	008019c4 	movi	r2,103
   434ac:	da413c17 	ldw	r9,1264(sp)
   434b0:	9081951e 	bne	r18,r2,43b08 <___vfprintf_internal_r+0x1e08>
   434b4:	8080004c 	andi	r2,r16,1
   434b8:	10017926 	beq	r2,zero,43aa0 <___vfprintf_internal_r+0x1da0>
   434bc:	00801184 	movi	r2,70
   434c0:	9dc7883a 	add	r3,r19,r23
   434c4:	9080e626 	beq	r18,r2,43860 <___vfprintf_internal_r+0x1b60>
   434c8:	b009883a 	mov	r4,r22
   434cc:	a00b883a 	mov	r5,r20
   434d0:	000d883a 	mov	r6,zero
   434d4:	000f883a 	mov	r7,zero
   434d8:	d8c13b15 	stw	r3,1260(sp)
   434dc:	da413c15 	stw	r9,1264(sp)
   434e0:	004a3100 	call	4a310 <__eqdf2>
   434e4:	d8c13b17 	ldw	r3,1260(sp)
   434e8:	da413c17 	ldw	r9,1264(sp)
   434ec:	10000726 	beq	r2,zero,4350c <___vfprintf_internal_r+0x180c>
   434f0:	d8812217 	ldw	r2,1160(sp)
   434f4:	10c18a2e 	bgeu	r2,r3,43b20 <___vfprintf_internal_r+0x1e20>
   434f8:	01000c04 	movi	r4,48
   434fc:	11000005 	stb	r4,0(r2)
   43500:	10800044 	addi	r2,r2,1
   43504:	d8812215 	stw	r2,1160(sp)
   43508:	10fffc1e 	bne	r2,r3,434fc <___vfprintf_internal_r+0x17fc>
   4350c:	1cc7c83a 	sub	r3,r3,r19
   43510:	d8c13215 	stw	r3,1224(sp)
   43514:	008019c4 	movi	r2,103
   43518:	9080fa26 	beq	r18,r2,43904 <___vfprintf_internal_r+0x1c04>
   4351c:	008011c4 	movi	r2,71
   43520:	9080f826 	beq	r18,r2,43904 <___vfprintf_internal_r+0x1c04>
   43524:	00801984 	movi	r2,102
   43528:	90818e1e 	bne	r18,r2,43b64 <___vfprintf_internal_r+0x1e64>
   4352c:	d8812417 	ldw	r2,1168(sp)
   43530:	d8812b15 	stw	r2,1196(sp)
   43534:	00817c0e 	bge	zero,r2,43b28 <___vfprintf_internal_r+0x1e28>
   43538:	e000021e 	bne	fp,zero,43544 <___vfprintf_internal_r+0x1844>
   4353c:	8400004c 	andi	r16,r16,1
   43540:	80000426 	beq	r16,zero,43554 <___vfprintf_internal_r+0x1854>
   43544:	d8812b17 	ldw	r2,1196(sp)
   43548:	e2000044 	addi	r8,fp,1
   4354c:	1205883a 	add	r2,r2,r8
   43550:	d8812b15 	stw	r2,1196(sp)
   43554:	d8812815 	stw	r2,1184(sp)
   43558:	10010b16 	blt	r2,zero,43988 <___vfprintf_internal_r+0x1c88>
   4355c:	ddc12f07 	ldb	r23,1212(sp)
   43560:	b800e426 	beq	r23,zero,438f4 <___vfprintf_internal_r+0x1bf4>
   43564:	00800b44 	movi	r2,45
   43568:	d8812585 	stb	r2,1174(sp)
   4356c:	dc012a17 	ldw	r16,1192(sp)
   43570:	d8013115 	stw	zero,1220(sp)
   43574:	003b7306 	br	42344 <___vfprintf_internal_r+0x644>
   43578:	d8812b17 	ldw	r2,1196(sp)
   4357c:	d8812815 	stw	r2,1184(sp)
   43580:	10005716 	blt	r2,zero,436e0 <___vfprintf_internal_r+0x19e0>
   43584:	d8812583 	ldbu	r2,1174(sp)
   43588:	ddc12d15 	stw	r23,1204(sp)
   4358c:	d8013115 	stw	zero,1220(sp)
   43590:	003b6806 	br	42334 <___vfprintf_internal_r+0x634>
   43594:	d8c12d17 	ldw	r3,1204(sp)
   43598:	1dc00017 	ldw	r23,0(r3)
   4359c:	18c00104 	addi	r3,r3,4
   435a0:	d8c12d15 	stw	r3,1204(sp)
   435a4:	b82dd7fa 	srai	r22,r23,31
   435a8:	b005883a 	mov	r2,r22
   435ac:	003b4406 	br	422c0 <___vfprintf_internal_r+0x5c0>
   435b0:	d9012d17 	ldw	r4,1204(sp)
   435b4:	002d883a 	mov	r22,zero
   435b8:	00c00044 	movi	r3,1
   435bc:	25c00017 	ldw	r23,0(r4)
   435c0:	21000104 	addi	r4,r4,4
   435c4:	d9012d15 	stw	r4,1204(sp)
   435c8:	b805883a 	mov	r2,r23
   435cc:	d8012585 	stb	zero,1174(sp)
   435d0:	003b4406 	br	422e4 <___vfprintf_internal_r+0x5e4>
   435d4:	d9012d17 	ldw	r4,1204(sp)
   435d8:	002d883a 	mov	r22,zero
   435dc:	25c00017 	ldw	r23,0(r4)
   435e0:	21000104 	addi	r4,r4,4
   435e4:	d9012d15 	stw	r4,1204(sp)
   435e8:	003bab06 	br	42498 <___vfprintf_internal_r+0x798>
   435ec:	d8812d17 	ldw	r2,1204(sp)
   435f0:	002d883a 	mov	r22,zero
   435f4:	0007883a 	mov	r3,zero
   435f8:	15c00017 	ldw	r23,0(r2)
   435fc:	10800104 	addi	r2,r2,4
   43600:	d8812d15 	stw	r2,1204(sp)
   43604:	d8012585 	stb	zero,1174(sp)
   43608:	b805883a 	mov	r2,r23
   4360c:	003b3506 	br	422e4 <___vfprintf_internal_r+0x5e4>
   43610:	00ffffc4 	movi	r3,-1
   43614:	b82b883a 	mov	r21,r23
   43618:	003a1606 	br	41e74 <___vfprintf_internal_r+0x174>
   4361c:	008011c4 	movi	r2,71
   43620:	1480b116 	blt	r2,r18,438e8 <___vfprintf_internal_r+0x1be8>
   43624:	04c00174 	movhi	r19,5
   43628:	9cf5f804 	addi	r19,r19,-10272
   4362c:	00c000c4 	movi	r3,3
   43630:	00bfdfc4 	movi	r2,-129
   43634:	80a0703a 	and	r16,r16,r2
   43638:	d8c12815 	stw	r3,1184(sp)
   4363c:	d8812583 	ldbu	r2,1174(sp)
   43640:	d8c12b15 	stw	r3,1196(sp)
   43644:	d8013115 	stw	zero,1220(sp)
   43648:	003b3a06 	br	42334 <___vfprintf_internal_r+0x634>
   4364c:	d9412917 	ldw	r5,1188(sp)
   43650:	8809883a 	mov	r4,r17
   43654:	d9811b04 	addi	r6,sp,1132
   43658:	0041ccc0 	call	41ccc <__sprint_r>
   4365c:	103aee1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43660:	dc812417 	ldw	r18,1168(sp)
   43664:	da011d17 	ldw	r8,1140(sp)
   43668:	da400404 	addi	r9,sp,16
   4366c:	003f3c06 	br	43360 <___vfprintf_internal_r+0x1660>
   43670:	ad400044 	addi	r21,r21,1
   43674:	84000814 	ori	r16,r16,32
   43678:	14800047 	ldb	r18,1(r2)
   4367c:	0039fc06 	br	41e70 <___vfprintf_internal_r+0x170>
   43680:	d9412917 	ldw	r5,1188(sp)
   43684:	8809883a 	mov	r4,r17
   43688:	d9811b04 	addi	r6,sp,1132
   4368c:	0041ccc0 	call	41ccc <__sprint_r>
   43690:	103ae11e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   43694:	da011d17 	ldw	r8,1140(sp)
   43698:	da400404 	addi	r9,sp,16
   4369c:	003d2b06 	br	42b4c <___vfprintf_internal_r+0xe4c>
   436a0:	4d000015 	stw	r20,0(r9)
   436a4:	4c800115 	stw	r18,4(r9)
   436a8:	4491883a 	add	r8,r8,r18
   436ac:	18c00044 	addi	r3,r3,1
   436b0:	da011d15 	stw	r8,1140(sp)
   436b4:	d8c11c15 	stw	r3,1136(sp)
   436b8:	008001c4 	movi	r2,7
   436bc:	10fcbd16 	blt	r2,r3,429b4 <___vfprintf_internal_r+0xcb4>
   436c0:	4a400204 	addi	r9,r9,8
   436c4:	003cc206 	br	429d0 <___vfprintf_internal_r+0xcd0>
   436c8:	da413c15 	stw	r9,1264(sp)
   436cc:	0041c400 	call	41c40 <strlen>
   436d0:	d8812b15 	stw	r2,1196(sp)
   436d4:	d8812815 	stw	r2,1184(sp)
   436d8:	da413c17 	ldw	r9,1264(sp)
   436dc:	103fa90e 	bge	r2,zero,43584 <___vfprintf_internal_r+0x1884>
   436e0:	d8012815 	stw	zero,1184(sp)
   436e4:	003fa706 	br	43584 <___vfprintf_internal_r+0x1884>
   436e8:	d9412917 	ldw	r5,1188(sp)
   436ec:	8809883a 	mov	r4,r17
   436f0:	d9811b04 	addi	r6,sp,1132
   436f4:	0041ccc0 	call	41ccc <__sprint_r>
   436f8:	103ac71e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   436fc:	da011d17 	ldw	r8,1140(sp)
   43700:	d8c11c17 	ldw	r3,1136(sp)
   43704:	da400404 	addi	r9,sp,16
   43708:	d8813217 	ldw	r2,1224(sp)
   4370c:	4cc00015 	stw	r19,0(r9)
   43710:	48800115 	stw	r2,4(r9)
   43714:	4091883a 	add	r8,r8,r2
   43718:	003c6206 	br	428a4 <___vfprintf_internal_r+0xba4>
   4371c:	00800b44 	movi	r2,45
   43720:	d8812585 	stb	r2,1174(sp)
   43724:	003b2406 	br	423b8 <___vfprintf_internal_r+0x6b8>
   43728:	4d000015 	stw	r20,0(r9)
   4372c:	4c800115 	stw	r18,4(r9)
   43730:	4491883a 	add	r8,r8,r18
   43734:	18c00044 	addi	r3,r3,1
   43738:	da011d15 	stw	r8,1140(sp)
   4373c:	d8c11c15 	stw	r3,1136(sp)
   43740:	008001c4 	movi	r2,7
   43744:	10ffe816 	blt	r2,r3,436e8 <___vfprintf_internal_r+0x19e8>
   43748:	4a400204 	addi	r9,r9,8
   4374c:	003fee06 	br	43708 <___vfprintf_internal_r+0x1a08>
   43750:	d8c12b15 	stw	r3,1196(sp)
   43754:	00800184 	movi	r2,6
   43758:	10c0062e 	bgeu	r2,r3,43774 <___vfprintf_internal_r+0x1a74>
   4375c:	d8812b15 	stw	r2,1196(sp)
   43760:	d8812815 	stw	r2,1184(sp)
   43764:	ddc12d15 	stw	r23,1204(sp)
   43768:	04c00174 	movhi	r19,5
   4376c:	9cf60404 	addi	r19,r19,-10224
   43770:	0039ca06 	br	41e9c <___vfprintf_internal_r+0x19c>
   43774:	d8812b17 	ldw	r2,1196(sp)
   43778:	d8812815 	stw	r2,1184(sp)
   4377c:	103ff90e 	bge	r2,zero,43764 <___vfprintf_internal_r+0x1a64>
   43780:	d8012815 	stw	zero,1184(sp)
   43784:	003ff706 	br	43764 <___vfprintf_internal_r+0x1a64>
   43788:	00800244 	movi	r2,9
   4378c:	15fdaa36 	bltu	r2,r23,42e38 <___vfprintf_internal_r+0x1138>
   43790:	dd010e04 	addi	r20,sp,1080
   43794:	003dc606 	br	42eb0 <___vfprintf_internal_r+0x11b0>
   43798:	d9412917 	ldw	r5,1188(sp)
   4379c:	8809883a 	mov	r4,r17
   437a0:	d9811b04 	addi	r6,sp,1132
   437a4:	0041ccc0 	call	41ccc <__sprint_r>
   437a8:	103a9b1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   437ac:	dc812417 	ldw	r18,1168(sp)
   437b0:	da400404 	addi	r9,sp,16
   437b4:	003ecd06 	br	432ec <___vfprintf_internal_r+0x15ec>
   437b8:	d9412917 	ldw	r5,1188(sp)
   437bc:	8809883a 	mov	r4,r17
   437c0:	d9811b04 	addi	r6,sp,1132
   437c4:	0041ccc0 	call	41ccc <__sprint_r>
   437c8:	103a931e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   437cc:	dc812417 	ldw	r18,1168(sp)
   437d0:	da011d17 	ldw	r8,1140(sp)
   437d4:	d8c11c17 	ldw	r3,1136(sp)
   437d8:	da400404 	addi	r9,sp,16
   437dc:	003eb706 	br	432bc <___vfprintf_internal_r+0x15bc>
   437e0:	d9412917 	ldw	r5,1188(sp)
   437e4:	8809883a 	mov	r4,r17
   437e8:	d9811b04 	addi	r6,sp,1132
   437ec:	0041ccc0 	call	41ccc <__sprint_r>
   437f0:	103a891e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   437f4:	dc812417 	ldw	r18,1168(sp)
   437f8:	da011d17 	ldw	r8,1140(sp)
   437fc:	da400404 	addi	r9,sp,16
   43800:	003dc206 	br	42f0c <___vfprintf_internal_r+0x120c>
   43804:	df012815 	stw	fp,1184(sp)
   43808:	d8812583 	ldbu	r2,1174(sp)
   4380c:	df012b15 	stw	fp,1196(sp)
   43810:	ddc12d15 	stw	r23,1204(sp)
   43814:	d8013115 	stw	zero,1220(sp)
   43818:	003ac606 	br	42334 <___vfprintf_internal_r+0x634>
   4381c:	d8812404 	addi	r2,sp,1168
   43820:	d8800115 	stw	r2,4(sp)
   43824:	d8812304 	addi	r2,sp,1164
   43828:	d8800215 	stw	r2,8(sp)
   4382c:	d8812204 	addi	r2,sp,1160
   43830:	df000015 	stw	fp,0(sp)
   43834:	d8800315 	stw	r2,12(sp)
   43838:	8809883a 	mov	r4,r17
   4383c:	b00b883a 	mov	r5,r22
   43840:	a00d883a 	mov	r6,r20
   43844:	01c000c4 	movi	r7,3
   43848:	da413c15 	stw	r9,1264(sp)
   4384c:	00440f00 	call	440f0 <_dtoa_r>
   43850:	da413c17 	ldw	r9,1264(sp)
   43854:	1027883a 	mov	r19,r2
   43858:	1707883a 	add	r3,r2,fp
   4385c:	e02f883a 	mov	r23,fp
   43860:	99000007 	ldb	r4,0(r19)
   43864:	00800c04 	movi	r2,48
   43868:	20800326 	beq	r4,r2,43878 <___vfprintf_internal_r+0x1b78>
   4386c:	da812417 	ldw	r10,1168(sp)
   43870:	1a87883a 	add	r3,r3,r10
   43874:	003f1406 	br	434c8 <___vfprintf_internal_r+0x17c8>
   43878:	b009883a 	mov	r4,r22
   4387c:	a00b883a 	mov	r5,r20
   43880:	000d883a 	mov	r6,zero
   43884:	000f883a 	mov	r7,zero
   43888:	d8c13b15 	stw	r3,1260(sp)
   4388c:	da413c15 	stw	r9,1264(sp)
   43890:	004a36c0 	call	4a36c <__nedf2>
   43894:	d8c13b17 	ldw	r3,1260(sp)
   43898:	da413c17 	ldw	r9,1264(sp)
   4389c:	103ff326 	beq	r2,zero,4386c <___vfprintf_internal_r+0x1b6c>
   438a0:	00800044 	movi	r2,1
   438a4:	15d5c83a 	sub	r10,r2,r23
   438a8:	da812415 	stw	r10,1168(sp)
   438ac:	1a87883a 	add	r3,r3,r10
   438b0:	003f0506 	br	434c8 <___vfprintf_internal_r+0x17c8>
   438b4:	d9412917 	ldw	r5,1188(sp)
   438b8:	8809883a 	mov	r4,r17
   438bc:	d9811b04 	addi	r6,sp,1132
   438c0:	0041ccc0 	call	41ccc <__sprint_r>
   438c4:	103a541e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x518>
   438c8:	dc812417 	ldw	r18,1168(sp)
   438cc:	da011d17 	ldw	r8,1140(sp)
   438d0:	d8c11c17 	ldw	r3,1136(sp)
   438d4:	da400404 	addi	r9,sp,16
   438d8:	003eb206 	br	433a4 <___vfprintf_internal_r+0x16a4>
   438dc:	b82b883a 	mov	r21,r23
   438e0:	0007883a 	mov	r3,zero
   438e4:	00396306 	br	41e74 <___vfprintf_internal_r+0x174>
   438e8:	04c00174 	movhi	r19,5
   438ec:	9cf5f904 	addi	r19,r19,-10268
   438f0:	003f4e06 	br	4362c <___vfprintf_internal_r+0x192c>
   438f4:	d8812583 	ldbu	r2,1174(sp)
   438f8:	dc012a17 	ldw	r16,1192(sp)
   438fc:	d8013115 	stw	zero,1220(sp)
   43900:	003a8c06 	br	42334 <___vfprintf_internal_r+0x634>
   43904:	d8812417 	ldw	r2,1168(sp)
   43908:	d8812b15 	stw	r2,1196(sp)
   4390c:	1029883a 	mov	r20,r2
   43910:	00bfff44 	movi	r2,-3
   43914:	a0800116 	blt	r20,r2,4391c <___vfprintf_internal_r+0x1c1c>
   43918:	e5001d0e 	bge	fp,r20,43990 <___vfprintf_internal_r+0x1c90>
   4391c:	94bfff84 	addi	r18,r18,-2
   43920:	a53fffc4 	addi	r20,r20,-1
   43924:	dd012415 	stw	r20,1168(sp)
   43928:	dc811fc5 	stb	r18,1151(sp)
   4392c:	a0007216 	blt	r20,zero,43af8 <___vfprintf_internal_r+0x1df8>
   43930:	00800ac4 	movi	r2,43
   43934:	d8812005 	stb	r2,1152(sp)
   43938:	00800244 	movi	r2,9
   4393c:	15003516 	blt	r2,r20,43a14 <___vfprintf_internal_r+0x1d14>
   43940:	00800c04 	movi	r2,48
   43944:	a5000c04 	addi	r20,r20,48
   43948:	d8812045 	stb	r2,1153(sp)
   4394c:	dd012085 	stb	r20,1154(sp)
   43950:	d8c120c4 	addi	r3,sp,1155
   43954:	d8811fc4 	addi	r2,sp,1151
   43958:	1885c83a 	sub	r2,r3,r2
   4395c:	d8c13217 	ldw	r3,1224(sp)
   43960:	d8813515 	stw	r2,1236(sp)
   43964:	1885883a 	add	r2,r3,r2
   43968:	d8812b15 	stw	r2,1196(sp)
   4396c:	00800044 	movi	r2,1
   43970:	10c0580e 	bge	r2,r3,43ad4 <___vfprintf_internal_r+0x1dd4>
   43974:	d8812b17 	ldw	r2,1196(sp)
   43978:	10800044 	addi	r2,r2,1
   4397c:	d8812b15 	stw	r2,1196(sp)
   43980:	d8812815 	stw	r2,1184(sp)
   43984:	103ef50e 	bge	r2,zero,4355c <___vfprintf_internal_r+0x185c>
   43988:	d8012815 	stw	zero,1184(sp)
   4398c:	003ef306 	br	4355c <___vfprintf_internal_r+0x185c>
   43990:	d8812b17 	ldw	r2,1196(sp)
   43994:	d8c13217 	ldw	r3,1224(sp)
   43998:	10c01416 	blt	r2,r3,439ec <___vfprintf_internal_r+0x1cec>
   4399c:	8400004c 	andi	r16,r16,1
   439a0:	80000326 	beq	r16,zero,439b0 <___vfprintf_internal_r+0x1cb0>
   439a4:	d8812b17 	ldw	r2,1196(sp)
   439a8:	10800044 	addi	r2,r2,1
   439ac:	d8812b15 	stw	r2,1196(sp)
   439b0:	d8812815 	stw	r2,1184(sp)
   439b4:	10001416 	blt	r2,zero,43a08 <___vfprintf_internal_r+0x1d08>
   439b8:	048019c4 	movi	r18,103
   439bc:	003ee706 	br	4355c <___vfprintf_internal_r+0x185c>
   439c0:	d8012815 	stw	zero,1184(sp)
   439c4:	003b1a06 	br	42630 <___vfprintf_internal_r+0x930>
   439c8:	e03e9c1e 	bne	fp,zero,4343c <___vfprintf_internal_r+0x173c>
   439cc:	07000044 	movi	fp,1
   439d0:	003e9a06 	br	4343c <___vfprintf_internal_r+0x173c>
   439d4:	07000184 	movi	fp,6
   439d8:	003e9806 	br	4343c <___vfprintf_internal_r+0x173c>
   439dc:	00c00b44 	movi	r3,45
   439e0:	a520003c 	xorhi	r20,r20,32768
   439e4:	d8c12f05 	stb	r3,1212(sp)
   439e8:	003e9806 	br	4344c <___vfprintf_internal_r+0x174c>
   439ec:	05003f0e 	bge	zero,r20,43aec <___vfprintf_internal_r+0x1dec>
   439f0:	05000044 	movi	r20,1
   439f4:	d8c13217 	ldw	r3,1224(sp)
   439f8:	a0e9883a 	add	r20,r20,r3
   439fc:	dd012b15 	stw	r20,1196(sp)
   43a00:	dd012815 	stw	r20,1184(sp)
   43a04:	a03fec0e 	bge	r20,zero,439b8 <___vfprintf_internal_r+0x1cb8>
   43a08:	d8012815 	stw	zero,1184(sp)
   43a0c:	048019c4 	movi	r18,103
   43a10:	003ed206 	br	4355c <___vfprintf_internal_r+0x185c>
   43a14:	d8c11f84 	addi	r3,sp,1150
   43a18:	102f883a 	mov	r23,r2
   43a1c:	4839883a 	mov	fp,r9
   43a20:	a009883a 	mov	r4,r20
   43a24:	01400284 	movi	r5,10
   43a28:	182d883a 	mov	r22,r3
   43a2c:	004a7580 	call	4a758 <__modsi3>
   43a30:	10800c04 	addi	r2,r2,48
   43a34:	a009883a 	mov	r4,r20
   43a38:	b0800005 	stb	r2,0(r22)
   43a3c:	01400284 	movi	r5,10
   43a40:	004a7080 	call	4a708 <__divsi3>
   43a44:	1029883a 	mov	r20,r2
   43a48:	b0ffffc4 	addi	r3,r22,-1
   43a4c:	b8bff416 	blt	r23,r2,43a20 <___vfprintf_internal_r+0x1d20>
   43a50:	11400c04 	addi	r5,r2,48
   43a54:	b17fffc5 	stb	r5,-1(r22)
   43a58:	d8811fc4 	addi	r2,sp,1151
   43a5c:	e013883a 	mov	r9,fp
   43a60:	18803e2e 	bgeu	r3,r2,43b5c <___vfprintf_internal_r+0x1e5c>
   43a64:	b007883a 	mov	r3,r22
   43a68:	d9012044 	addi	r4,sp,1153
   43a6c:	00000206 	br	43a78 <___vfprintf_internal_r+0x1d78>
   43a70:	19400003 	ldbu	r5,0(r3)
   43a74:	18c00044 	addi	r3,r3,1
   43a78:	21400005 	stb	r5,0(r4)
   43a7c:	21000044 	addi	r4,r4,1
   43a80:	10fffb1e 	bne	r2,r3,43a70 <___vfprintf_internal_r+0x1d70>
   43a84:	d8c12004 	addi	r3,sp,1152
   43a88:	1d87c83a 	sub	r3,r3,r22
   43a8c:	d9012044 	addi	r4,sp,1153
   43a90:	20c7883a 	add	r3,r4,r3
   43a94:	003fb006 	br	43958 <___vfprintf_internal_r+0x1c58>
   43a98:	e5c00044 	addi	r23,fp,1
   43a9c:	003e7406 	br	43470 <___vfprintf_internal_r+0x1770>
   43aa0:	d8c12217 	ldw	r3,1160(sp)
   43aa4:	003e9906 	br	4350c <___vfprintf_internal_r+0x180c>
   43aa8:	d9012d17 	ldw	r4,1204(sp)
   43aac:	ac800043 	ldbu	r18,1(r21)
   43ab0:	b82b883a 	mov	r21,r23
   43ab4:	20c00017 	ldw	r3,0(r4)
   43ab8:	20800104 	addi	r2,r4,4
   43abc:	d8812d15 	stw	r2,1204(sp)
   43ac0:	18002116 	blt	r3,zero,43b48 <___vfprintf_internal_r+0x1e48>
   43ac4:	94803fcc 	andi	r18,r18,255
   43ac8:	9480201c 	xori	r18,r18,128
   43acc:	94bfe004 	addi	r18,r18,-128
   43ad0:	0038e706 	br	41e70 <___vfprintf_internal_r+0x170>
   43ad4:	80a0703a 	and	r16,r16,r2
   43ad8:	803fa61e 	bne	r16,zero,43974 <___vfprintf_internal_r+0x1c74>
   43adc:	d8812b17 	ldw	r2,1196(sp)
   43ae0:	d8812815 	stw	r2,1184(sp)
   43ae4:	103e9d0e 	bge	r2,zero,4355c <___vfprintf_internal_r+0x185c>
   43ae8:	003fa706 	br	43988 <___vfprintf_internal_r+0x1c88>
   43aec:	00800084 	movi	r2,2
   43af0:	1529c83a 	sub	r20,r2,r20
   43af4:	003fbf06 	br	439f4 <___vfprintf_internal_r+0x1cf4>
   43af8:	00800b44 	movi	r2,45
   43afc:	0529c83a 	sub	r20,zero,r20
   43b00:	d8812005 	stb	r2,1152(sp)
   43b04:	003f8c06 	br	43938 <___vfprintf_internal_r+0x1c38>
   43b08:	008011c4 	movi	r2,71
   43b0c:	90be6926 	beq	r18,r2,434b4 <___vfprintf_internal_r+0x17b4>
   43b10:	003e6a06 	br	434bc <___vfprintf_internal_r+0x17bc>
   43b14:	00bfffc4 	movi	r2,-1
   43b18:	d8812c15 	stw	r2,1200(sp)
   43b1c:	0039ad06 	br	421d4 <___vfprintf_internal_r+0x4d4>
   43b20:	1007883a 	mov	r3,r2
   43b24:	003e7906 	br	4350c <___vfprintf_internal_r+0x180c>
   43b28:	e000021e 	bne	fp,zero,43b34 <___vfprintf_internal_r+0x1e34>
   43b2c:	8400004c 	andi	r16,r16,1
   43b30:	80000e26 	beq	r16,zero,43b6c <___vfprintf_internal_r+0x1e6c>
   43b34:	e7000084 	addi	fp,fp,2
   43b38:	df012b15 	stw	fp,1196(sp)
   43b3c:	df012815 	stw	fp,1184(sp)
   43b40:	e03e860e 	bge	fp,zero,4355c <___vfprintf_internal_r+0x185c>
   43b44:	003f9006 	br	43988 <___vfprintf_internal_r+0x1c88>
   43b48:	94803fcc 	andi	r18,r18,255
   43b4c:	9480201c 	xori	r18,r18,128
   43b50:	00ffffc4 	movi	r3,-1
   43b54:	94bfe004 	addi	r18,r18,-128
   43b58:	0038c506 	br	41e70 <___vfprintf_internal_r+0x170>
   43b5c:	d8c12044 	addi	r3,sp,1153
   43b60:	003f7d06 	br	43958 <___vfprintf_internal_r+0x1c58>
   43b64:	dd012417 	ldw	r20,1168(sp)
   43b68:	003f6d06 	br	43920 <___vfprintf_internal_r+0x1c20>
   43b6c:	00c00044 	movi	r3,1
   43b70:	d8c12815 	stw	r3,1184(sp)
   43b74:	d8c12b15 	stw	r3,1196(sp)
   43b78:	003e7806 	br	4355c <___vfprintf_internal_r+0x185c>

00043b7c <__vfprintf_internal>:
   43b7c:	00800174 	movhi	r2,5
   43b80:	10bcff04 	addi	r2,r2,-3076
   43b84:	2007883a 	mov	r3,r4
   43b88:	11000017 	ldw	r4,0(r2)
   43b8c:	2805883a 	mov	r2,r5
   43b90:	300f883a 	mov	r7,r6
   43b94:	180b883a 	mov	r5,r3
   43b98:	100d883a 	mov	r6,r2
   43b9c:	0041d001 	jmpi	41d00 <___vfprintf_internal_r>

00043ba0 <__swsetup_r>:
   43ba0:	00800174 	movhi	r2,5
   43ba4:	10bcff04 	addi	r2,r2,-3076
   43ba8:	10800017 	ldw	r2,0(r2)
   43bac:	defffd04 	addi	sp,sp,-12
   43bb0:	dc400115 	stw	r17,4(sp)
   43bb4:	dc000015 	stw	r16,0(sp)
   43bb8:	dfc00215 	stw	ra,8(sp)
   43bbc:	2023883a 	mov	r17,r4
   43bc0:	2821883a 	mov	r16,r5
   43bc4:	10000226 	beq	r2,zero,43bd0 <__swsetup_r+0x30>
   43bc8:	10c00e17 	ldw	r3,56(r2)
   43bcc:	18003d26 	beq	r3,zero,43cc4 <__swsetup_r+0x124>
   43bd0:	8080030b 	ldhu	r2,12(r16)
   43bd4:	10c0020c 	andi	r3,r2,8
   43bd8:	18ffffcc 	andi	r3,r3,65535
   43bdc:	18e0001c 	xori	r3,r3,32768
   43be0:	18e00004 	addi	r3,r3,-32768
   43be4:	18001226 	beq	r3,zero,43c30 <__swsetup_r+0x90>
   43be8:	80c00417 	ldw	r3,16(r16)
   43bec:	18001f26 	beq	r3,zero,43c6c <__swsetup_r+0xcc>
   43bf0:	1100004c 	andi	r4,r2,1
   43bf4:	2000261e 	bne	r4,zero,43c90 <__swsetup_r+0xf0>
   43bf8:	1080008c 	andi	r2,r2,2
   43bfc:	10bfffcc 	andi	r2,r2,65535
   43c00:	10a0001c 	xori	r2,r2,32768
   43c04:	10a00004 	addi	r2,r2,-32768
   43c08:	1000311e 	bne	r2,zero,43cd0 <__swsetup_r+0x130>
   43c0c:	80800517 	ldw	r2,20(r16)
   43c10:	80800215 	stw	r2,8(r16)
   43c14:	18002326 	beq	r3,zero,43ca4 <__swsetup_r+0x104>
   43c18:	0005883a 	mov	r2,zero
   43c1c:	dfc00217 	ldw	ra,8(sp)
   43c20:	dc400117 	ldw	r17,4(sp)
   43c24:	dc000017 	ldw	r16,0(sp)
   43c28:	dec00304 	addi	sp,sp,12
   43c2c:	f800283a 	ret
   43c30:	10c0040c 	andi	r3,r2,16
   43c34:	18ffffcc 	andi	r3,r3,65535
   43c38:	18e0001c 	xori	r3,r3,32768
   43c3c:	18e00004 	addi	r3,r3,-32768
   43c40:	18001e26 	beq	r3,zero,43cbc <__swsetup_r+0x11c>
   43c44:	10c0010c 	andi	r3,r2,4
   43c48:	18ffffcc 	andi	r3,r3,65535
   43c4c:	18e0001c 	xori	r3,r3,32768
   43c50:	18e00004 	addi	r3,r3,-32768
   43c54:	1800211e 	bne	r3,zero,43cdc <__swsetup_r+0x13c>
   43c58:	80c00417 	ldw	r3,16(r16)
   43c5c:	11400214 	ori	r5,r2,8
   43c60:	8140030d 	sth	r5,12(r16)
   43c64:	2805883a 	mov	r2,r5
   43c68:	183fe11e 	bne	r3,zero,43bf0 <__swsetup_r+0x50>
   43c6c:	1140a00c 	andi	r5,r2,640
   43c70:	01008004 	movi	r4,512
   43c74:	293fde26 	beq	r5,r4,43bf0 <__swsetup_r+0x50>
   43c78:	8809883a 	mov	r4,r17
   43c7c:	800b883a 	mov	r5,r16
   43c80:	004673c0 	call	4673c <__smakebuf_r>
   43c84:	8080030b 	ldhu	r2,12(r16)
   43c88:	80c00417 	ldw	r3,16(r16)
   43c8c:	003fd806 	br	43bf0 <__swsetup_r+0x50>
   43c90:	80800517 	ldw	r2,20(r16)
   43c94:	80000215 	stw	zero,8(r16)
   43c98:	0085c83a 	sub	r2,zero,r2
   43c9c:	80800615 	stw	r2,24(r16)
   43ca0:	183fdd1e 	bne	r3,zero,43c18 <__swsetup_r+0x78>
   43ca4:	8080030b 	ldhu	r2,12(r16)
   43ca8:	1080200c 	andi	r2,r2,128
   43cac:	10bfffcc 	andi	r2,r2,65535
   43cb0:	10a0001c 	xori	r2,r2,32768
   43cb4:	10a00004 	addi	r2,r2,-32768
   43cb8:	103fd826 	beq	r2,zero,43c1c <__swsetup_r+0x7c>
   43cbc:	00bfffc4 	movi	r2,-1
   43cc0:	003fd606 	br	43c1c <__swsetup_r+0x7c>
   43cc4:	1009883a 	mov	r4,r2
   43cc8:	00459c80 	call	459c8 <__sinit>
   43ccc:	003fc006 	br	43bd0 <__swsetup_r+0x30>
   43cd0:	0005883a 	mov	r2,zero
   43cd4:	80800215 	stw	r2,8(r16)
   43cd8:	003fce06 	br	43c14 <__swsetup_r+0x74>
   43cdc:	81400c17 	ldw	r5,48(r16)
   43ce0:	28000626 	beq	r5,zero,43cfc <__swsetup_r+0x15c>
   43ce4:	80c01004 	addi	r3,r16,64
   43ce8:	28c00326 	beq	r5,r3,43cf8 <__swsetup_r+0x158>
   43cec:	8809883a 	mov	r4,r17
   43cf0:	0045d4c0 	call	45d4c <_free_r>
   43cf4:	8080030b 	ldhu	r2,12(r16)
   43cf8:	80000c15 	stw	zero,48(r16)
   43cfc:	80c00417 	ldw	r3,16(r16)
   43d00:	013ff6c4 	movi	r4,-37
   43d04:	2084703a 	and	r2,r4,r2
   43d08:	80000115 	stw	zero,4(r16)
   43d0c:	80c00015 	stw	r3,0(r16)
   43d10:	003fd206 	br	43c5c <__swsetup_r+0xbc>

00043d14 <__call_exitprocs>:
   43d14:	00800174 	movhi	r2,5
   43d18:	10bcfe04 	addi	r2,r2,-3080
   43d1c:	10800017 	ldw	r2,0(r2)
   43d20:	defff304 	addi	sp,sp,-52
   43d24:	df000b15 	stw	fp,44(sp)
   43d28:	d8800015 	stw	r2,0(sp)
   43d2c:	10805204 	addi	r2,r2,328
   43d30:	dd400815 	stw	r21,32(sp)
   43d34:	dfc00c15 	stw	ra,48(sp)
   43d38:	ddc00a15 	stw	r23,40(sp)
   43d3c:	dd800915 	stw	r22,36(sp)
   43d40:	dd000715 	stw	r20,28(sp)
   43d44:	dcc00615 	stw	r19,24(sp)
   43d48:	dc800515 	stw	r18,20(sp)
   43d4c:	dc400415 	stw	r17,16(sp)
   43d50:	dc000315 	stw	r16,12(sp)
   43d54:	d9000115 	stw	r4,4(sp)
   43d58:	2839883a 	mov	fp,r5
   43d5c:	d8800215 	stw	r2,8(sp)
   43d60:	057fffc4 	movi	r21,-1
   43d64:	d8800017 	ldw	r2,0(sp)
   43d68:	ddc00217 	ldw	r23,8(sp)
   43d6c:	14805217 	ldw	r18,328(r2)
   43d70:	90001726 	beq	r18,zero,43dd0 <__call_exitprocs+0xbc>
   43d74:	94400117 	ldw	r17,4(r18)
   43d78:	8c3fffc4 	addi	r16,r17,-1
   43d7c:	80001116 	blt	r16,zero,43dc4 <__call_exitprocs+0xb0>
   43d80:	8c400044 	addi	r17,r17,1
   43d84:	8427883a 	add	r19,r16,r16
   43d88:	8c63883a 	add	r17,r17,r17
   43d8c:	95802204 	addi	r22,r18,136
   43d90:	9ce7883a 	add	r19,r19,r19
   43d94:	8c63883a 	add	r17,r17,r17
   43d98:	b4e7883a 	add	r19,r22,r19
   43d9c:	9463883a 	add	r17,r18,r17
   43da0:	e0001726 	beq	fp,zero,43e00 <__call_exitprocs+0xec>
   43da4:	8c87c83a 	sub	r3,r17,r18
   43da8:	b0c7883a 	add	r3,r22,r3
   43dac:	18c01e17 	ldw	r3,120(r3)
   43db0:	1f001326 	beq	r3,fp,43e00 <__call_exitprocs+0xec>
   43db4:	843fffc4 	addi	r16,r16,-1
   43db8:	9cffff04 	addi	r19,r19,-4
   43dbc:	8c7fff04 	addi	r17,r17,-4
   43dc0:	857ff71e 	bne	r16,r21,43da0 <__call_exitprocs+0x8c>
   43dc4:	00800034 	movhi	r2,0
   43dc8:	10800004 	addi	r2,r2,0
   43dcc:	10002a1e 	bne	r2,zero,43e78 <__call_exitprocs+0x164>
   43dd0:	dfc00c17 	ldw	ra,48(sp)
   43dd4:	df000b17 	ldw	fp,44(sp)
   43dd8:	ddc00a17 	ldw	r23,40(sp)
   43ddc:	dd800917 	ldw	r22,36(sp)
   43de0:	dd400817 	ldw	r21,32(sp)
   43de4:	dd000717 	ldw	r20,28(sp)
   43de8:	dcc00617 	ldw	r19,24(sp)
   43dec:	dc800517 	ldw	r18,20(sp)
   43df0:	dc400417 	ldw	r17,16(sp)
   43df4:	dc000317 	ldw	r16,12(sp)
   43df8:	dec00d04 	addi	sp,sp,52
   43dfc:	f800283a 	ret
   43e00:	91000117 	ldw	r4,4(r18)
   43e04:	88c00017 	ldw	r3,0(r17)
   43e08:	213fffc4 	addi	r4,r4,-1
   43e0c:	24001526 	beq	r4,r16,43e64 <__call_exitprocs+0x150>
   43e10:	88000015 	stw	zero,0(r17)
   43e14:	183fe726 	beq	r3,zero,43db4 <__call_exitprocs+0xa0>
   43e18:	00800044 	movi	r2,1
   43e1c:	1408983a 	sll	r4,r2,r16
   43e20:	91406217 	ldw	r5,392(r18)
   43e24:	95000117 	ldw	r20,4(r18)
   43e28:	214a703a 	and	r5,r4,r5
   43e2c:	28000b26 	beq	r5,zero,43e5c <__call_exitprocs+0x148>
   43e30:	91406317 	ldw	r5,396(r18)
   43e34:	2148703a 	and	r4,r4,r5
   43e38:	20000c1e 	bne	r4,zero,43e6c <__call_exitprocs+0x158>
   43e3c:	99400017 	ldw	r5,0(r19)
   43e40:	d9000117 	ldw	r4,4(sp)
   43e44:	183ee83a 	callr	r3
   43e48:	90c00117 	ldw	r3,4(r18)
   43e4c:	1d3fc51e 	bne	r3,r20,43d64 <__call_exitprocs+0x50>
   43e50:	b8c00017 	ldw	r3,0(r23)
   43e54:	1cbfd726 	beq	r3,r18,43db4 <__call_exitprocs+0xa0>
   43e58:	003fc206 	br	43d64 <__call_exitprocs+0x50>
   43e5c:	183ee83a 	callr	r3
   43e60:	003ff906 	br	43e48 <__call_exitprocs+0x134>
   43e64:	94000115 	stw	r16,4(r18)
   43e68:	003fea06 	br	43e14 <__call_exitprocs+0x100>
   43e6c:	99000017 	ldw	r4,0(r19)
   43e70:	183ee83a 	callr	r3
   43e74:	003ff406 	br	43e48 <__call_exitprocs+0x134>
   43e78:	90c00117 	ldw	r3,4(r18)
   43e7c:	1800071e 	bne	r3,zero,43e9c <__call_exitprocs+0x188>
   43e80:	90c00017 	ldw	r3,0(r18)
   43e84:	18000926 	beq	r3,zero,43eac <__call_exitprocs+0x198>
   43e88:	9009883a 	mov	r4,r18
   43e8c:	b8c00015 	stw	r3,0(r23)
   43e90:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   43e94:	bc800017 	ldw	r18,0(r23)
   43e98:	003fb506 	br	43d70 <__call_exitprocs+0x5c>
   43e9c:	90c00017 	ldw	r3,0(r18)
   43ea0:	902f883a 	mov	r23,r18
   43ea4:	1825883a 	mov	r18,r3
   43ea8:	003fb106 	br	43d70 <__call_exitprocs+0x5c>
   43eac:	0007883a 	mov	r3,zero
   43eb0:	003ffb06 	br	43ea0 <__call_exitprocs+0x18c>

00043eb4 <quorem>:
   43eb4:	defff204 	addi	sp,sp,-56
   43eb8:	dd000815 	stw	r20,32(sp)
   43ebc:	20800417 	ldw	r2,16(r4)
   43ec0:	2d000417 	ldw	r20,16(r5)
   43ec4:	dcc00715 	stw	r19,28(sp)
   43ec8:	dfc00d15 	stw	ra,52(sp)
   43ecc:	df000c15 	stw	fp,48(sp)
   43ed0:	ddc00b15 	stw	r23,44(sp)
   43ed4:	dd800a15 	stw	r22,40(sp)
   43ed8:	dd400915 	stw	r21,36(sp)
   43edc:	dc800615 	stw	r18,24(sp)
   43ee0:	dc400515 	stw	r17,20(sp)
   43ee4:	dc000415 	stw	r16,16(sp)
   43ee8:	d9400015 	stw	r5,0(sp)
   43eec:	2027883a 	mov	r19,r4
   43ef0:	15007d16 	blt	r2,r20,440e8 <quorem+0x234>
   43ef4:	a0800104 	addi	r2,r20,4
   43ef8:	1085883a 	add	r2,r2,r2
   43efc:	1085883a 	add	r2,r2,r2
   43f00:	28ad883a 	add	r22,r5,r2
   43f04:	2085883a 	add	r2,r4,r2
   43f08:	10800017 	ldw	r2,0(r2)
   43f0c:	b1400017 	ldw	r5,0(r22)
   43f10:	a53fffc4 	addi	r20,r20,-1
   43f14:	1009883a 	mov	r4,r2
   43f18:	29400044 	addi	r5,r5,1
   43f1c:	d8800115 	stw	r2,4(sp)
   43f20:	004a7b40 	call	4a7b4 <__udivsi3>
   43f24:	1025883a 	mov	r18,r2
   43f28:	d8800017 	ldw	r2,0(sp)
   43f2c:	9f000504 	addi	fp,r19,20
   43f30:	14000504 	addi	r16,r2,20
   43f34:	90003626 	beq	r18,zero,44010 <quorem+0x15c>
   43f38:	802b883a 	mov	r21,r16
   43f3c:	e023883a 	mov	r17,fp
   43f40:	0007883a 	mov	r3,zero
   43f44:	002f883a 	mov	r23,zero
   43f48:	a9800017 	ldw	r6,0(r21)
   43f4c:	900b883a 	mov	r5,r18
   43f50:	d8c00315 	stw	r3,12(sp)
   43f54:	313fffcc 	andi	r4,r6,65535
   43f58:	d9800215 	stw	r6,8(sp)
   43f5c:	0041a580 	call	41a58 <__mulsi3>
   43f60:	d9800217 	ldw	r6,8(sp)
   43f64:	d8c00317 	ldw	r3,12(sp)
   43f68:	900b883a 	mov	r5,r18
   43f6c:	3008d43a 	srli	r4,r6,16
   43f70:	1887883a 	add	r3,r3,r2
   43f74:	d8c00315 	stw	r3,12(sp)
   43f78:	0041a580 	call	41a58 <__mulsi3>
   43f7c:	89400017 	ldw	r5,0(r17)
   43f80:	d8c00317 	ldw	r3,12(sp)
   43f84:	ad400104 	addi	r21,r21,4
   43f88:	293fffcc 	andi	r4,r5,65535
   43f8c:	1810d43a 	srli	r8,r3,16
   43f90:	25c9883a 	add	r4,r4,r23
   43f94:	18ffffcc 	andi	r3,r3,65535
   43f98:	20c9c83a 	sub	r4,r4,r3
   43f9c:	280cd43a 	srli	r6,r5,16
   43fa0:	4085883a 	add	r2,r8,r2
   43fa4:	2007d43a 	srai	r3,r4,16
   43fa8:	117fffcc 	andi	r5,r2,65535
   43fac:	314bc83a 	sub	r5,r6,r5
   43fb0:	28cb883a 	add	r5,r5,r3
   43fb4:	8940008d 	sth	r5,2(r17)
   43fb8:	8900000d 	sth	r4,0(r17)
   43fbc:	1006d43a 	srli	r3,r2,16
   43fc0:	282fd43a 	srai	r23,r5,16
   43fc4:	8c400104 	addi	r17,r17,4
   43fc8:	b57fdf2e 	bgeu	r22,r21,43f48 <quorem+0x94>
   43fcc:	d8c00117 	ldw	r3,4(sp)
   43fd0:	18000f1e 	bne	r3,zero,44010 <quorem+0x15c>
   43fd4:	a0800144 	addi	r2,r20,5
   43fd8:	1085883a 	add	r2,r2,r2
   43fdc:	1085883a 	add	r2,r2,r2
   43fe0:	9887883a 	add	r3,r19,r2
   43fe4:	18bfff04 	addi	r2,r3,-4
   43fe8:	e080082e 	bgeu	fp,r2,4400c <quorem+0x158>
   43fec:	18ffff17 	ldw	r3,-4(r3)
   43ff0:	18000326 	beq	r3,zero,44000 <quorem+0x14c>
   43ff4:	00000506 	br	4400c <quorem+0x158>
   43ff8:	10c00017 	ldw	r3,0(r2)
   43ffc:	1800031e 	bne	r3,zero,4400c <quorem+0x158>
   44000:	10bfff04 	addi	r2,r2,-4
   44004:	a53fffc4 	addi	r20,r20,-1
   44008:	e0bffb36 	bltu	fp,r2,43ff8 <quorem+0x144>
   4400c:	9d000415 	stw	r20,16(r19)
   44010:	d9400017 	ldw	r5,0(sp)
   44014:	9809883a 	mov	r4,r19
   44018:	0047e540 	call	47e54 <__mcmp>
   4401c:	10002516 	blt	r2,zero,440b4 <quorem+0x200>
   44020:	94800044 	addi	r18,r18,1
   44024:	e007883a 	mov	r3,fp
   44028:	000d883a 	mov	r6,zero
   4402c:	18800017 	ldw	r2,0(r3)
   44030:	82000017 	ldw	r8,0(r16)
   44034:	84000104 	addi	r16,r16,4
   44038:	11ffffcc 	andi	r7,r2,65535
   4403c:	413fffcc 	andi	r4,r8,65535
   44040:	398d883a 	add	r6,r7,r6
   44044:	310fc83a 	sub	r7,r6,r4
   44048:	4010d43a 	srli	r8,r8,16
   4404c:	100cd43a 	srli	r6,r2,16
   44050:	3809d43a 	srai	r4,r7,16
   44054:	19c0000d 	sth	r7,0(r3)
   44058:	320dc83a 	sub	r6,r6,r8
   4405c:	310d883a 	add	r6,r6,r4
   44060:	1980008d 	sth	r6,2(r3)
   44064:	300dd43a 	srai	r6,r6,16
   44068:	18c00104 	addi	r3,r3,4
   4406c:	b43fef2e 	bgeu	r22,r16,4402c <quorem+0x178>
   44070:	a0800144 	addi	r2,r20,5
   44074:	1085883a 	add	r2,r2,r2
   44078:	1085883a 	add	r2,r2,r2
   4407c:	9885883a 	add	r2,r19,r2
   44080:	10c00017 	ldw	r3,0(r2)
   44084:	18000b1e 	bne	r3,zero,440b4 <quorem+0x200>
   44088:	10ffff04 	addi	r3,r2,-4
   4408c:	e0c0082e 	bgeu	fp,r3,440b0 <quorem+0x1fc>
   44090:	10bfff17 	ldw	r2,-4(r2)
   44094:	10000326 	beq	r2,zero,440a4 <quorem+0x1f0>
   44098:	00000506 	br	440b0 <quorem+0x1fc>
   4409c:	18800017 	ldw	r2,0(r3)
   440a0:	1000031e 	bne	r2,zero,440b0 <quorem+0x1fc>
   440a4:	18ffff04 	addi	r3,r3,-4
   440a8:	a53fffc4 	addi	r20,r20,-1
   440ac:	e0fffb36 	bltu	fp,r3,4409c <quorem+0x1e8>
   440b0:	9d000415 	stw	r20,16(r19)
   440b4:	9005883a 	mov	r2,r18
   440b8:	dfc00d17 	ldw	ra,52(sp)
   440bc:	df000c17 	ldw	fp,48(sp)
   440c0:	ddc00b17 	ldw	r23,44(sp)
   440c4:	dd800a17 	ldw	r22,40(sp)
   440c8:	dd400917 	ldw	r21,36(sp)
   440cc:	dd000817 	ldw	r20,32(sp)
   440d0:	dcc00717 	ldw	r19,28(sp)
   440d4:	dc800617 	ldw	r18,24(sp)
   440d8:	dc400517 	ldw	r17,20(sp)
   440dc:	dc000417 	ldw	r16,16(sp)
   440e0:	dec00e04 	addi	sp,sp,56
   440e4:	f800283a 	ret
   440e8:	0005883a 	mov	r2,zero
   440ec:	003ff206 	br	440b8 <quorem+0x204>

000440f0 <_dtoa_r>:
   440f0:	20801017 	ldw	r2,64(r4)
   440f4:	deffdf04 	addi	sp,sp,-132
   440f8:	dcc01a15 	stw	r19,104(sp)
   440fc:	dc801915 	stw	r18,100(sp)
   44100:	dc401815 	stw	r17,96(sp)
   44104:	dc001715 	stw	r16,92(sp)
   44108:	dfc02015 	stw	ra,128(sp)
   4410c:	df001f15 	stw	fp,124(sp)
   44110:	ddc01e15 	stw	r23,120(sp)
   44114:	dd801d15 	stw	r22,116(sp)
   44118:	dd401c15 	stw	r21,112(sp)
   4411c:	dd001b15 	stw	r20,108(sp)
   44120:	d9400315 	stw	r5,12(sp)
   44124:	d9c00415 	stw	r7,16(sp)
   44128:	2021883a 	mov	r16,r4
   4412c:	3025883a 	mov	r18,r6
   44130:	dcc02317 	ldw	r19,140(sp)
   44134:	3023883a 	mov	r17,r6
   44138:	10000826 	beq	r2,zero,4415c <_dtoa_r+0x6c>
   4413c:	20c01117 	ldw	r3,68(r4)
   44140:	01800044 	movi	r6,1
   44144:	100b883a 	mov	r5,r2
   44148:	30cc983a 	sll	r6,r6,r3
   4414c:	10c00115 	stw	r3,4(r2)
   44150:	11800215 	stw	r6,8(r2)
   44154:	00475b00 	call	475b0 <_Bfree>
   44158:	80001015 	stw	zero,64(r16)
   4415c:	90002f16 	blt	r18,zero,4421c <_dtoa_r+0x12c>
   44160:	98000015 	stw	zero,0(r19)
   44164:	90dffc2c 	andhi	r3,r18,32752
   44168:	009ffc34 	movhi	r2,32752
   4416c:	18801c26 	beq	r3,r2,441e0 <_dtoa_r+0xf0>
   44170:	d9000317 	ldw	r4,12(sp)
   44174:	880b883a 	mov	r5,r17
   44178:	000d883a 	mov	r6,zero
   4417c:	000f883a 	mov	r7,zero
   44180:	004a3100 	call	4a310 <__eqdf2>
   44184:	10002c1e 	bne	r2,zero,44238 <_dtoa_r+0x148>
   44188:	d9002217 	ldw	r4,136(sp)
   4418c:	d9c02417 	ldw	r7,144(sp)
   44190:	00800044 	movi	r2,1
   44194:	20800015 	stw	r2,0(r4)
   44198:	38019426 	beq	r7,zero,447ec <_dtoa_r+0x6fc>
   4419c:	00800174 	movhi	r2,5
   441a0:	10b60644 	addi	r2,r2,-10215
   441a4:	38800015 	stw	r2,0(r7)
   441a8:	15ffffc4 	addi	r23,r2,-1
   441ac:	b805883a 	mov	r2,r23
   441b0:	dfc02017 	ldw	ra,128(sp)
   441b4:	df001f17 	ldw	fp,124(sp)
   441b8:	ddc01e17 	ldw	r23,120(sp)
   441bc:	dd801d17 	ldw	r22,116(sp)
   441c0:	dd401c17 	ldw	r21,112(sp)
   441c4:	dd001b17 	ldw	r20,108(sp)
   441c8:	dcc01a17 	ldw	r19,104(sp)
   441cc:	dc801917 	ldw	r18,100(sp)
   441d0:	dc401817 	ldw	r17,96(sp)
   441d4:	dc001717 	ldw	r16,92(sp)
   441d8:	dec02104 	addi	sp,sp,132
   441dc:	f800283a 	ret
   441e0:	d8c02217 	ldw	r3,136(sp)
   441e4:	d9000317 	ldw	r4,12(sp)
   441e8:	0089c3c4 	movi	r2,9999
   441ec:	18800015 	stw	r2,0(r3)
   441f0:	20016c26 	beq	r4,zero,447a4 <_dtoa_r+0x6b4>
   441f4:	05c00174 	movhi	r23,5
   441f8:	bdf61204 	addi	r23,r23,-10168
   441fc:	d9c02417 	ldw	r7,144(sp)
   44200:	383fea26 	beq	r7,zero,441ac <_dtoa_r+0xbc>
   44204:	b88000c7 	ldb	r2,3(r23)
   44208:	10016d1e 	bne	r2,zero,447c0 <_dtoa_r+0x6d0>
   4420c:	b88000c4 	addi	r2,r23,3
   44210:	d8c02417 	ldw	r3,144(sp)
   44214:	18800015 	stw	r2,0(r3)
   44218:	003fe406 	br	441ac <_dtoa_r+0xbc>
   4421c:	04600034 	movhi	r17,32768
   44220:	8c7fffc4 	addi	r17,r17,-1
   44224:	9462703a 	and	r17,r18,r17
   44228:	00800044 	movi	r2,1
   4422c:	98800015 	stw	r2,0(r19)
   44230:	8825883a 	mov	r18,r17
   44234:	003fcb06 	br	44164 <_dtoa_r+0x74>
   44238:	d9400317 	ldw	r5,12(sp)
   4423c:	9028d53a 	srli	r20,r18,20
   44240:	d8800204 	addi	r2,sp,8
   44244:	d8800015 	stw	r2,0(sp)
   44248:	8009883a 	mov	r4,r16
   4424c:	880d883a 	mov	r6,r17
   44250:	d9c00104 	addi	r7,sp,4
   44254:	00481fc0 	call	481fc <__d2b>
   44258:	a501ffcc 	andi	r20,r20,2047
   4425c:	1039883a 	mov	fp,r2
   44260:	a001591e 	bne	r20,zero,447c8 <_dtoa_r+0x6d8>
   44264:	dd400217 	ldw	r21,8(sp)
   44268:	dd000117 	ldw	r20,4(sp)
   4426c:	00befbc4 	movi	r2,-1041
   44270:	ad29883a 	add	r20,r21,r20
   44274:	a082d216 	blt	r20,r2,44dc0 <_dtoa_r+0xcd0>
   44278:	d8c00317 	ldw	r3,12(sp)
   4427c:	013f0384 	movi	r4,-1010
   44280:	2509c83a 	sub	r4,r4,r20
   44284:	a0810484 	addi	r2,r20,1042
   44288:	9124983a 	sll	r18,r18,r4
   4428c:	1884d83a 	srl	r2,r3,r2
   44290:	9088b03a 	or	r4,r18,r2
   44294:	00414580 	call	41458 <__floatunsidf>
   44298:	1009883a 	mov	r4,r2
   4429c:	017f8434 	movhi	r5,65040
   442a0:	00800044 	movi	r2,1
   442a4:	194b883a 	add	r5,r3,r5
   442a8:	a53fffc4 	addi	r20,r20,-1
   442ac:	d8800f15 	stw	r2,60(sp)
   442b0:	000d883a 	mov	r6,zero
   442b4:	01cffe34 	movhi	r7,16376
   442b8:	004a2b00 	call	4a2b0 <__subdf3>
   442bc:	1009883a 	mov	r4,r2
   442c0:	180b883a 	mov	r5,r3
   442c4:	0198dbf4 	movhi	r6,25455
   442c8:	3190d844 	addi	r6,r6,17249
   442cc:	01cff4f4 	movhi	r7,16339
   442d0:	39e1e9c4 	addi	r7,r7,-30809
   442d4:	0040fc00 	call	40fc0 <__muldf3>
   442d8:	180b883a 	mov	r5,r3
   442dc:	01a2d874 	movhi	r6,35681
   442e0:	31b22cc4 	addi	r6,r6,-14157
   442e4:	01cff1f4 	movhi	r7,16327
   442e8:	39e28a04 	addi	r7,r7,-30168
   442ec:	1009883a 	mov	r4,r2
   442f0:	004a25c0 	call	4a25c <__adddf3>
   442f4:	a009883a 	mov	r4,r20
   442f8:	1027883a 	mov	r19,r2
   442fc:	1825883a 	mov	r18,r3
   44300:	004a4ec0 	call	4a4ec <__floatsidf>
   44304:	1009883a 	mov	r4,r2
   44308:	180b883a 	mov	r5,r3
   4430c:	019427f4 	movhi	r6,20639
   44310:	319e7ec4 	addi	r6,r6,31227
   44314:	01cff4f4 	movhi	r7,16339
   44318:	39d104c4 	addi	r7,r7,17427
   4431c:	0040fc00 	call	40fc0 <__muldf3>
   44320:	9809883a 	mov	r4,r19
   44324:	900b883a 	mov	r5,r18
   44328:	100d883a 	mov	r6,r2
   4432c:	180f883a 	mov	r7,r3
   44330:	004a25c0 	call	4a25c <__adddf3>
   44334:	1009883a 	mov	r4,r2
   44338:	180b883a 	mov	r5,r3
   4433c:	1027883a 	mov	r19,r2
   44340:	1825883a 	mov	r18,r3
   44344:	004a5c00 	call	4a5c0 <__fixdfsi>
   44348:	9809883a 	mov	r4,r19
   4434c:	900b883a 	mov	r5,r18
   44350:	000d883a 	mov	r6,zero
   44354:	000f883a 	mov	r7,zero
   44358:	d8800615 	stw	r2,24(sp)
   4435c:	004a4900 	call	4a490 <__ltdf2>
   44360:	10027e16 	blt	r2,zero,44d5c <_dtoa_r+0xc6c>
   44364:	d8c00617 	ldw	r3,24(sp)
   44368:	00800584 	movi	r2,22
   4436c:	10c26c36 	bltu	r2,r3,44d20 <_dtoa_r+0xc30>
   44370:	180490fa 	slli	r2,r3,3
   44374:	00c00174 	movhi	r3,5
   44378:	18f63704 	addi	r3,r3,-10020
   4437c:	d9800317 	ldw	r6,12(sp)
   44380:	1885883a 	add	r2,r3,r2
   44384:	11000017 	ldw	r4,0(r2)
   44388:	11400117 	ldw	r5,4(r2)
   4438c:	880f883a 	mov	r7,r17
   44390:	004a3c80 	call	4a3c8 <__gtdf2>
   44394:	00828f0e 	bge	zero,r2,44dd4 <_dtoa_r+0xce4>
   44398:	d8800617 	ldw	r2,24(sp)
   4439c:	d8000d15 	stw	zero,52(sp)
   443a0:	10bfffc4 	addi	r2,r2,-1
   443a4:	d8800615 	stw	r2,24(sp)
   443a8:	ad29c83a 	sub	r20,r21,r20
   443ac:	a53fffc4 	addi	r20,r20,-1
   443b0:	a0026616 	blt	r20,zero,44d4c <_dtoa_r+0xc5c>
   443b4:	dd000715 	stw	r20,28(sp)
   443b8:	d8000815 	stw	zero,32(sp)
   443bc:	d8800617 	ldw	r2,24(sp)
   443c0:	10025a16 	blt	r2,zero,44d2c <_dtoa_r+0xc3c>
   443c4:	d8c00717 	ldw	r3,28(sp)
   443c8:	d8800b15 	stw	r2,44(sp)
   443cc:	d8000a15 	stw	zero,40(sp)
   443d0:	1887883a 	add	r3,r3,r2
   443d4:	d8c00715 	stw	r3,28(sp)
   443d8:	d9c00417 	ldw	r7,16(sp)
   443dc:	00800244 	movi	r2,9
   443e0:	11c10536 	bltu	r2,r7,447f8 <_dtoa_r+0x708>
   443e4:	00800144 	movi	r2,5
   443e8:	11c4c60e 	bge	r2,r7,45704 <_dtoa_r+0x1614>
   443ec:	39ffff04 	addi	r7,r7,-4
   443f0:	d9c00415 	stw	r7,16(sp)
   443f4:	0027883a 	mov	r19,zero
   443f8:	d9c00417 	ldw	r7,16(sp)
   443fc:	008000c4 	movi	r2,3
   44400:	3883a226 	beq	r7,r2,4528c <_dtoa_r+0x119c>
   44404:	11c2bc16 	blt	r2,r7,44ef8 <_dtoa_r+0xe08>
   44408:	00800084 	movi	r2,2
   4440c:	3880fb1e 	bne	r7,r2,447fc <_dtoa_r+0x70c>
   44410:	d8000c15 	stw	zero,48(sp)
   44414:	d9002117 	ldw	r4,132(sp)
   44418:	0103ae0e 	bge	zero,r4,452d4 <_dtoa_r+0x11e4>
   4441c:	2025883a 	mov	r18,r4
   44420:	d9000e15 	stw	r4,56(sp)
   44424:	d9000915 	stw	r4,36(sp)
   44428:	80001115 	stw	zero,68(r16)
   4442c:	008005c4 	movi	r2,23
   44430:	1484b22e 	bgeu	r2,r18,456fc <_dtoa_r+0x160c>
   44434:	00c00044 	movi	r3,1
   44438:	00800104 	movi	r2,4
   4443c:	1085883a 	add	r2,r2,r2
   44440:	11000504 	addi	r4,r2,20
   44444:	180b883a 	mov	r5,r3
   44448:	18c00044 	addi	r3,r3,1
   4444c:	913ffb2e 	bgeu	r18,r4,4443c <_dtoa_r+0x34c>
   44450:	81401115 	stw	r5,68(r16)
   44454:	8009883a 	mov	r4,r16
   44458:	00475080 	call	47508 <_Balloc>
   4445c:	102f883a 	mov	r23,r2
   44460:	80801015 	stw	r2,64(r16)
   44464:	00800384 	movi	r2,14
   44468:	1480f036 	bltu	r2,r18,4482c <_dtoa_r+0x73c>
   4446c:	9800ef26 	beq	r19,zero,4482c <_dtoa_r+0x73c>
   44470:	d8800617 	ldw	r2,24(sp)
   44474:	00839c0e 	bge	zero,r2,452e8 <_dtoa_r+0x11f8>
   44478:	d8c00617 	ldw	r3,24(sp)
   4447c:	108003cc 	andi	r2,r2,15
   44480:	100490fa 	slli	r2,r2,3
   44484:	182bd13a 	srai	r21,r3,4
   44488:	00c00174 	movhi	r3,5
   4448c:	18f63704 	addi	r3,r3,-10020
   44490:	1885883a 	add	r2,r3,r2
   44494:	a8c0040c 	andi	r3,r21,16
   44498:	12800017 	ldw	r10,0(r2)
   4449c:	15800117 	ldw	r22,4(r2)
   444a0:	18038726 	beq	r3,zero,452c0 <_dtoa_r+0x11d0>
   444a4:	00800174 	movhi	r2,5
   444a8:	10b62d04 	addi	r2,r2,-10060
   444ac:	11800817 	ldw	r6,32(r2)
   444b0:	11c00917 	ldw	r7,36(r2)
   444b4:	d9000317 	ldw	r4,12(sp)
   444b8:	880b883a 	mov	r5,r17
   444bc:	da801515 	stw	r10,84(sp)
   444c0:	00412a40 	call	412a4 <__divdf3>
   444c4:	da801517 	ldw	r10,84(sp)
   444c8:	d8801015 	stw	r2,64(sp)
   444cc:	1829883a 	mov	r20,r3
   444d0:	ad4003cc 	andi	r21,r21,15
   444d4:	048000c4 	movi	r18,3
   444d8:	a8001126 	beq	r21,zero,44520 <_dtoa_r+0x430>
   444dc:	04c00174 	movhi	r19,5
   444e0:	9cf62d04 	addi	r19,r19,-10060
   444e4:	5005883a 	mov	r2,r10
   444e8:	b007883a 	mov	r3,r22
   444ec:	a980004c 	andi	r6,r21,1
   444f0:	1009883a 	mov	r4,r2
   444f4:	a82bd07a 	srai	r21,r21,1
   444f8:	180b883a 	mov	r5,r3
   444fc:	30000426 	beq	r6,zero,44510 <_dtoa_r+0x420>
   44500:	99800017 	ldw	r6,0(r19)
   44504:	99c00117 	ldw	r7,4(r19)
   44508:	94800044 	addi	r18,r18,1
   4450c:	0040fc00 	call	40fc0 <__muldf3>
   44510:	9cc00204 	addi	r19,r19,8
   44514:	a83ff51e 	bne	r21,zero,444ec <_dtoa_r+0x3fc>
   44518:	1015883a 	mov	r10,r2
   4451c:	182d883a 	mov	r22,r3
   44520:	d9001017 	ldw	r4,64(sp)
   44524:	a00b883a 	mov	r5,r20
   44528:	500d883a 	mov	r6,r10
   4452c:	b00f883a 	mov	r7,r22
   44530:	00412a40 	call	412a4 <__divdf3>
   44534:	1027883a 	mov	r19,r2
   44538:	1829883a 	mov	r20,r3
   4453c:	d8c00d17 	ldw	r3,52(sp)
   44540:	18000626 	beq	r3,zero,4455c <_dtoa_r+0x46c>
   44544:	9809883a 	mov	r4,r19
   44548:	a00b883a 	mov	r5,r20
   4454c:	000d883a 	mov	r6,zero
   44550:	01cffc34 	movhi	r7,16368
   44554:	004a4900 	call	4a490 <__ltdf2>
   44558:	10040e16 	blt	r2,zero,45594 <_dtoa_r+0x14a4>
   4455c:	9009883a 	mov	r4,r18
   44560:	004a4ec0 	call	4a4ec <__floatsidf>
   44564:	1009883a 	mov	r4,r2
   44568:	180b883a 	mov	r5,r3
   4456c:	980d883a 	mov	r6,r19
   44570:	a00f883a 	mov	r7,r20
   44574:	0040fc00 	call	40fc0 <__muldf3>
   44578:	1009883a 	mov	r4,r2
   4457c:	180b883a 	mov	r5,r3
   44580:	000d883a 	mov	r6,zero
   44584:	01d00734 	movhi	r7,16412
   44588:	004a25c0 	call	4a25c <__adddf3>
   4458c:	057f3034 	movhi	r21,64704
   44590:	1d6b883a 	add	r21,r3,r21
   44594:	d8c00917 	ldw	r3,36(sp)
   44598:	1025883a 	mov	r18,r2
   4459c:	18031f26 	beq	r3,zero,4521c <_dtoa_r+0x112c>
   445a0:	d8800617 	ldw	r2,24(sp)
   445a4:	dac00917 	ldw	r11,36(sp)
   445a8:	d8801315 	stw	r2,76(sp)
   445ac:	d8c00c17 	ldw	r3,48(sp)
   445b0:	18039026 	beq	r3,zero,453f4 <_dtoa_r+0x1304>
   445b4:	58bfffc4 	addi	r2,r11,-1
   445b8:	100490fa 	slli	r2,r2,3
   445bc:	00c00174 	movhi	r3,5
   445c0:	18f63704 	addi	r3,r3,-10020
   445c4:	0009883a 	mov	r4,zero
   445c8:	1885883a 	add	r2,r3,r2
   445cc:	11800017 	ldw	r6,0(r2)
   445d0:	11c00117 	ldw	r7,4(r2)
   445d4:	014ff834 	movhi	r5,16352
   445d8:	dac01615 	stw	r11,88(sp)
   445dc:	00412a40 	call	412a4 <__divdf3>
   445e0:	900d883a 	mov	r6,r18
   445e4:	a80f883a 	mov	r7,r21
   445e8:	1009883a 	mov	r4,r2
   445ec:	180b883a 	mov	r5,r3
   445f0:	004a2b00 	call	4a2b0 <__subdf3>
   445f4:	a00b883a 	mov	r5,r20
   445f8:	9809883a 	mov	r4,r19
   445fc:	182b883a 	mov	r21,r3
   44600:	d8801015 	stw	r2,64(sp)
   44604:	004a5c00 	call	4a5c0 <__fixdfsi>
   44608:	1009883a 	mov	r4,r2
   4460c:	d8801515 	stw	r2,84(sp)
   44610:	004a4ec0 	call	4a4ec <__floatsidf>
   44614:	9809883a 	mov	r4,r19
   44618:	a00b883a 	mov	r5,r20
   4461c:	100d883a 	mov	r6,r2
   44620:	180f883a 	mov	r7,r3
   44624:	004a2b00 	call	4a2b0 <__subdf3>
   44628:	da401517 	ldw	r9,84(sp)
   4462c:	d9001017 	ldw	r4,64(sp)
   44630:	a80b883a 	mov	r5,r21
   44634:	4d000c04 	addi	r20,r9,48
   44638:	bd000005 	stb	r20,0(r23)
   4463c:	100d883a 	mov	r6,r2
   44640:	180f883a 	mov	r7,r3
   44644:	bd800044 	addi	r22,r23,1
   44648:	1025883a 	mov	r18,r2
   4464c:	1827883a 	mov	r19,r3
   44650:	004a3c80 	call	4a3c8 <__gtdf2>
   44654:	00842216 	blt	zero,r2,456e0 <_dtoa_r+0x15f0>
   44658:	0009883a 	mov	r4,zero
   4465c:	014ffc34 	movhi	r5,16368
   44660:	900d883a 	mov	r6,r18
   44664:	980f883a 	mov	r7,r19
   44668:	004a2b00 	call	4a2b0 <__subdf3>
   4466c:	d9001017 	ldw	r4,64(sp)
   44670:	a80b883a 	mov	r5,r21
   44674:	100d883a 	mov	r6,r2
   44678:	180f883a 	mov	r7,r3
   4467c:	004a3c80 	call	4a3c8 <__gtdf2>
   44680:	dac01617 	ldw	r11,88(sp)
   44684:	00841316 	blt	zero,r2,456d4 <_dtoa_r+0x15e4>
   44688:	00800044 	movi	r2,1
   4468c:	12c0670e 	bge	r2,r11,4482c <_dtoa_r+0x73c>
   44690:	bad7883a 	add	r11,r23,r11
   44694:	df001115 	stw	fp,68(sp)
   44698:	dc401215 	stw	r17,72(sp)
   4469c:	5839883a 	mov	fp,r11
   446a0:	dc401017 	ldw	r17,64(sp)
   446a4:	00000806 	br	446c8 <_dtoa_r+0x5d8>
   446a8:	004a2b00 	call	4a2b0 <__subdf3>
   446ac:	1009883a 	mov	r4,r2
   446b0:	180b883a 	mov	r5,r3
   446b4:	880d883a 	mov	r6,r17
   446b8:	a80f883a 	mov	r7,r21
   446bc:	004a4900 	call	4a490 <__ltdf2>
   446c0:	1003ee16 	blt	r2,zero,4567c <_dtoa_r+0x158c>
   446c4:	b703f126 	beq	r22,fp,4568c <_dtoa_r+0x159c>
   446c8:	8809883a 	mov	r4,r17
   446cc:	a80b883a 	mov	r5,r21
   446d0:	000d883a 	mov	r6,zero
   446d4:	01d00934 	movhi	r7,16420
   446d8:	0040fc00 	call	40fc0 <__muldf3>
   446dc:	000d883a 	mov	r6,zero
   446e0:	01d00934 	movhi	r7,16420
   446e4:	9009883a 	mov	r4,r18
   446e8:	980b883a 	mov	r5,r19
   446ec:	1023883a 	mov	r17,r2
   446f0:	182b883a 	mov	r21,r3
   446f4:	0040fc00 	call	40fc0 <__muldf3>
   446f8:	180b883a 	mov	r5,r3
   446fc:	1009883a 	mov	r4,r2
   44700:	1825883a 	mov	r18,r3
   44704:	1027883a 	mov	r19,r2
   44708:	004a5c00 	call	4a5c0 <__fixdfsi>
   4470c:	1009883a 	mov	r4,r2
   44710:	1029883a 	mov	r20,r2
   44714:	004a4ec0 	call	4a4ec <__floatsidf>
   44718:	9809883a 	mov	r4,r19
   4471c:	900b883a 	mov	r5,r18
   44720:	100d883a 	mov	r6,r2
   44724:	180f883a 	mov	r7,r3
   44728:	004a2b00 	call	4a2b0 <__subdf3>
   4472c:	a5000c04 	addi	r20,r20,48
   44730:	b5000005 	stb	r20,0(r22)
   44734:	1009883a 	mov	r4,r2
   44738:	180b883a 	mov	r5,r3
   4473c:	880d883a 	mov	r6,r17
   44740:	a80f883a 	mov	r7,r21
   44744:	1025883a 	mov	r18,r2
   44748:	1827883a 	mov	r19,r3
   4474c:	004a4900 	call	4a490 <__ltdf2>
   44750:	b5800044 	addi	r22,r22,1
   44754:	0009883a 	mov	r4,zero
   44758:	014ffc34 	movhi	r5,16368
   4475c:	900d883a 	mov	r6,r18
   44760:	980f883a 	mov	r7,r19
   44764:	103fd00e 	bge	r2,zero,446a8 <_dtoa_r+0x5b8>
   44768:	d9001317 	ldw	r4,76(sp)
   4476c:	df001117 	ldw	fp,68(sp)
   44770:	d9000615 	stw	r4,24(sp)
   44774:	8009883a 	mov	r4,r16
   44778:	e00b883a 	mov	r5,fp
   4477c:	00475b00 	call	475b0 <_Bfree>
   44780:	d9c00617 	ldw	r7,24(sp)
   44784:	d8c02217 	ldw	r3,136(sp)
   44788:	d9002417 	ldw	r4,144(sp)
   4478c:	b0000005 	stb	zero,0(r22)
   44790:	38800044 	addi	r2,r7,1
   44794:	18800015 	stw	r2,0(r3)
   44798:	203e8426 	beq	r4,zero,441ac <_dtoa_r+0xbc>
   4479c:	25800015 	stw	r22,0(r4)
   447a0:	003e8206 	br	441ac <_dtoa_r+0xbc>
   447a4:	00800434 	movhi	r2,16
   447a8:	10bfffc4 	addi	r2,r2,-1
   447ac:	90a4703a 	and	r18,r18,r2
   447b0:	903e901e 	bne	r18,zero,441f4 <_dtoa_r+0x104>
   447b4:	05c00174 	movhi	r23,5
   447b8:	bdf60f04 	addi	r23,r23,-10180
   447bc:	003e8f06 	br	441fc <_dtoa_r+0x10c>
   447c0:	b8800204 	addi	r2,r23,8
   447c4:	003e9206 	br	44210 <_dtoa_r+0x120>
   447c8:	01400434 	movhi	r5,16
   447cc:	297fffc4 	addi	r5,r5,-1
   447d0:	894a703a 	and	r5,r17,r5
   447d4:	d9000317 	ldw	r4,12(sp)
   447d8:	294ffc34 	orhi	r5,r5,16368
   447dc:	a53f0044 	addi	r20,r20,-1023
   447e0:	dd400217 	ldw	r21,8(sp)
   447e4:	d8000f15 	stw	zero,60(sp)
   447e8:	003eb106 	br	442b0 <_dtoa_r+0x1c0>
   447ec:	05c00174 	movhi	r23,5
   447f0:	bdf60604 	addi	r23,r23,-10216
   447f4:	003e6d06 	br	441ac <_dtoa_r+0xbc>
   447f8:	d8000415 	stw	zero,16(sp)
   447fc:	80001115 	stw	zero,68(r16)
   44800:	8009883a 	mov	r4,r16
   44804:	000b883a 	mov	r5,zero
   44808:	00475080 	call	47508 <_Balloc>
   4480c:	01ffffc4 	movi	r7,-1
   44810:	102f883a 	mov	r23,r2
   44814:	80801015 	stw	r2,64(r16)
   44818:	00800044 	movi	r2,1
   4481c:	d9c00915 	stw	r7,36(sp)
   44820:	d8002115 	stw	zero,132(sp)
   44824:	d9c00e15 	stw	r7,56(sp)
   44828:	d8800c15 	stw	r2,48(sp)
   4482c:	d8800117 	ldw	r2,4(sp)
   44830:	10008b16 	blt	r2,zero,44a60 <_dtoa_r+0x970>
   44834:	d9000617 	ldw	r4,24(sp)
   44838:	00c00384 	movi	r3,14
   4483c:	19008816 	blt	r3,r4,44a60 <_dtoa_r+0x970>
   44840:	200490fa 	slli	r2,r4,3
   44844:	d9c02117 	ldw	r7,132(sp)
   44848:	00c00174 	movhi	r3,5
   4484c:	18f63704 	addi	r3,r3,-10020
   44850:	1885883a 	add	r2,r3,r2
   44854:	14800017 	ldw	r18,0(r2)
   44858:	14c00117 	ldw	r19,4(r2)
   4485c:	3801c916 	blt	r7,zero,44f84 <_dtoa_r+0xe94>
   44860:	d9000317 	ldw	r4,12(sp)
   44864:	900d883a 	mov	r6,r18
   44868:	980f883a 	mov	r7,r19
   4486c:	880b883a 	mov	r5,r17
   44870:	00412a40 	call	412a4 <__divdf3>
   44874:	180b883a 	mov	r5,r3
   44878:	1009883a 	mov	r4,r2
   4487c:	004a5c00 	call	4a5c0 <__fixdfsi>
   44880:	1009883a 	mov	r4,r2
   44884:	102b883a 	mov	r21,r2
   44888:	004a4ec0 	call	4a4ec <__floatsidf>
   4488c:	1009883a 	mov	r4,r2
   44890:	180b883a 	mov	r5,r3
   44894:	900d883a 	mov	r6,r18
   44898:	980f883a 	mov	r7,r19
   4489c:	0040fc00 	call	40fc0 <__muldf3>
   448a0:	d9000317 	ldw	r4,12(sp)
   448a4:	880b883a 	mov	r5,r17
   448a8:	100d883a 	mov	r6,r2
   448ac:	180f883a 	mov	r7,r3
   448b0:	004a2b00 	call	4a2b0 <__subdf3>
   448b4:	d9c00917 	ldw	r7,36(sp)
   448b8:	1009883a 	mov	r4,r2
   448bc:	a8800c04 	addi	r2,r21,48
   448c0:	b8800005 	stb	r2,0(r23)
   448c4:	01800044 	movi	r6,1
   448c8:	180b883a 	mov	r5,r3
   448cc:	2005883a 	mov	r2,r4
   448d0:	bd800044 	addi	r22,r23,1
   448d4:	39803726 	beq	r7,r6,449b4 <_dtoa_r+0x8c4>
   448d8:	000d883a 	mov	r6,zero
   448dc:	01d00934 	movhi	r7,16420
   448e0:	0040fc00 	call	40fc0 <__muldf3>
   448e4:	1009883a 	mov	r4,r2
   448e8:	180b883a 	mov	r5,r3
   448ec:	000d883a 	mov	r6,zero
   448f0:	000f883a 	mov	r7,zero
   448f4:	1029883a 	mov	r20,r2
   448f8:	1823883a 	mov	r17,r3
   448fc:	004a3100 	call	4a310 <__eqdf2>
   44900:	103f9c26 	beq	r2,zero,44774 <_dtoa_r+0x684>
   44904:	dd400917 	ldw	r21,36(sp)
   44908:	dc000415 	stw	r16,16(sp)
   4490c:	00000906 	br	44934 <_dtoa_r+0x844>
   44910:	0040fc00 	call	40fc0 <__muldf3>
   44914:	1009883a 	mov	r4,r2
   44918:	180b883a 	mov	r5,r3
   4491c:	000d883a 	mov	r6,zero
   44920:	000f883a 	mov	r7,zero
   44924:	1029883a 	mov	r20,r2
   44928:	1823883a 	mov	r17,r3
   4492c:	004a3100 	call	4a310 <__eqdf2>
   44930:	10022926 	beq	r2,zero,451d8 <_dtoa_r+0x10e8>
   44934:	900d883a 	mov	r6,r18
   44938:	980f883a 	mov	r7,r19
   4493c:	a009883a 	mov	r4,r20
   44940:	880b883a 	mov	r5,r17
   44944:	00412a40 	call	412a4 <__divdf3>
   44948:	180b883a 	mov	r5,r3
   4494c:	1009883a 	mov	r4,r2
   44950:	004a5c00 	call	4a5c0 <__fixdfsi>
   44954:	1009883a 	mov	r4,r2
   44958:	1021883a 	mov	r16,r2
   4495c:	004a4ec0 	call	4a4ec <__floatsidf>
   44960:	1009883a 	mov	r4,r2
   44964:	180b883a 	mov	r5,r3
   44968:	900d883a 	mov	r6,r18
   4496c:	980f883a 	mov	r7,r19
   44970:	0040fc00 	call	40fc0 <__muldf3>
   44974:	a009883a 	mov	r4,r20
   44978:	880b883a 	mov	r5,r17
   4497c:	100d883a 	mov	r6,r2
   44980:	180f883a 	mov	r7,r3
   44984:	004a2b00 	call	4a2b0 <__subdf3>
   44988:	82400c04 	addi	r9,r16,48
   4498c:	b2400005 	stb	r9,0(r22)
   44990:	b5800044 	addi	r22,r22,1
   44994:	b5d3c83a 	sub	r9,r22,r23
   44998:	000d883a 	mov	r6,zero
   4499c:	01d00934 	movhi	r7,16420
   449a0:	1009883a 	mov	r4,r2
   449a4:	180b883a 	mov	r5,r3
   449a8:	aa7fd91e 	bne	r21,r9,44910 <_dtoa_r+0x820>
   449ac:	802b883a 	mov	r21,r16
   449b0:	dc000417 	ldw	r16,16(sp)
   449b4:	1009883a 	mov	r4,r2
   449b8:	180b883a 	mov	r5,r3
   449bc:	100d883a 	mov	r6,r2
   449c0:	180f883a 	mov	r7,r3
   449c4:	004a25c0 	call	4a25c <__adddf3>
   449c8:	9009883a 	mov	r4,r18
   449cc:	980b883a 	mov	r5,r19
   449d0:	100d883a 	mov	r6,r2
   449d4:	180f883a 	mov	r7,r3
   449d8:	1023883a 	mov	r17,r2
   449dc:	1829883a 	mov	r20,r3
   449e0:	004a4900 	call	4a490 <__ltdf2>
   449e4:	10000816 	blt	r2,zero,44a08 <_dtoa_r+0x918>
   449e8:	9009883a 	mov	r4,r18
   449ec:	980b883a 	mov	r5,r19
   449f0:	880d883a 	mov	r6,r17
   449f4:	a00f883a 	mov	r7,r20
   449f8:	004a3100 	call	4a310 <__eqdf2>
   449fc:	103f5d1e 	bne	r2,zero,44774 <_dtoa_r+0x684>
   44a00:	ad40004c 	andi	r21,r21,1
   44a04:	a83f5b26 	beq	r21,zero,44774 <_dtoa_r+0x684>
   44a08:	b53fffc3 	ldbu	r20,-1(r22)
   44a0c:	b0ffff84 	addi	r3,r22,-2
   44a10:	01400e44 	movi	r5,57
   44a14:	00000306 	br	44a24 <_dtoa_r+0x934>
   44a18:	1d000003 	ldbu	r20,0(r3)
   44a1c:	102d883a 	mov	r22,r2
   44a20:	18ffffc4 	addi	r3,r3,-1
   44a24:	a1003fcc 	andi	r4,r20,255
   44a28:	2100201c 	xori	r4,r4,128
   44a2c:	213fe004 	addi	r4,r4,-128
   44a30:	b0bfffc4 	addi	r2,r22,-1
   44a34:	2142ca1e 	bne	r4,r5,45560 <_dtoa_r+0x1470>
   44a38:	b8bff71e 	bne	r23,r2,44a18 <_dtoa_r+0x928>
   44a3c:	d8800617 	ldw	r2,24(sp)
   44a40:	05000c44 	movi	r20,49
   44a44:	10800044 	addi	r2,r2,1
   44a48:	d8800615 	stw	r2,24(sp)
   44a4c:	00800c04 	movi	r2,48
   44a50:	b8800005 	stb	r2,0(r23)
   44a54:	b805883a 	mov	r2,r23
   44a58:	15000005 	stb	r20,0(r2)
   44a5c:	003f4506 	br	44774 <_dtoa_r+0x684>
   44a60:	d9c00c17 	ldw	r7,48(sp)
   44a64:	3800c926 	beq	r7,zero,44d8c <_dtoa_r+0xc9c>
   44a68:	d9c00417 	ldw	r7,16(sp)
   44a6c:	00c00044 	movi	r3,1
   44a70:	19c16c0e 	bge	r3,r7,45024 <_dtoa_r+0xf34>
   44a74:	d9000917 	ldw	r4,36(sp)
   44a78:	d9c00a17 	ldw	r7,40(sp)
   44a7c:	24ffffc4 	addi	r19,r4,-1
   44a80:	3cc20716 	blt	r7,r19,452a0 <_dtoa_r+0x11b0>
   44a84:	3ce7c83a 	sub	r19,r7,r19
   44a88:	d9c00917 	ldw	r7,36(sp)
   44a8c:	3802ae16 	blt	r7,zero,45548 <_dtoa_r+0x1458>
   44a90:	dc800817 	ldw	r18,32(sp)
   44a94:	d8800917 	ldw	r2,36(sp)
   44a98:	d8c00817 	ldw	r3,32(sp)
   44a9c:	d9c00717 	ldw	r7,28(sp)
   44aa0:	8009883a 	mov	r4,r16
   44aa4:	1887883a 	add	r3,r3,r2
   44aa8:	388f883a 	add	r7,r7,r2
   44aac:	01400044 	movi	r5,1
   44ab0:	d8c00815 	stw	r3,32(sp)
   44ab4:	d9c00715 	stw	r7,28(sp)
   44ab8:	00479380 	call	47938 <__i2b>
   44abc:	102b883a 	mov	r21,r2
   44ac0:	90000a26 	beq	r18,zero,44aec <_dtoa_r+0x9fc>
   44ac4:	d8800717 	ldw	r2,28(sp)
   44ac8:	0080080e 	bge	zero,r2,44aec <_dtoa_r+0x9fc>
   44acc:	90812b16 	blt	r18,r2,44f7c <_dtoa_r+0xe8c>
   44ad0:	d8c00817 	ldw	r3,32(sp)
   44ad4:	d9000717 	ldw	r4,28(sp)
   44ad8:	90a5c83a 	sub	r18,r18,r2
   44adc:	1887c83a 	sub	r3,r3,r2
   44ae0:	2089c83a 	sub	r4,r4,r2
   44ae4:	d8c00815 	stw	r3,32(sp)
   44ae8:	d9000715 	stw	r4,28(sp)
   44aec:	d9c00a17 	ldw	r7,40(sp)
   44af0:	01c0140e 	bge	zero,r7,44b44 <_dtoa_r+0xa54>
   44af4:	d8800c17 	ldw	r2,48(sp)
   44af8:	1001de26 	beq	r2,zero,45274 <_dtoa_r+0x1184>
   44afc:	04c00e0e 	bge	zero,r19,44b38 <_dtoa_r+0xa48>
   44b00:	a80b883a 	mov	r5,r21
   44b04:	8009883a 	mov	r4,r16
   44b08:	980d883a 	mov	r6,r19
   44b0c:	0047bcc0 	call	47bcc <__pow5mult>
   44b10:	e00d883a 	mov	r6,fp
   44b14:	8009883a 	mov	r4,r16
   44b18:	100b883a 	mov	r5,r2
   44b1c:	102b883a 	mov	r21,r2
   44b20:	00479740 	call	47974 <__multiply>
   44b24:	1029883a 	mov	r20,r2
   44b28:	e00b883a 	mov	r5,fp
   44b2c:	8009883a 	mov	r4,r16
   44b30:	00475b00 	call	475b0 <_Bfree>
   44b34:	a039883a 	mov	fp,r20
   44b38:	d8c00a17 	ldw	r3,40(sp)
   44b3c:	1ccdc83a 	sub	r6,r3,r19
   44b40:	3001291e 	bne	r6,zero,44fe8 <_dtoa_r+0xef8>
   44b44:	8009883a 	mov	r4,r16
   44b48:	01400044 	movi	r5,1
   44b4c:	00479380 	call	47938 <__i2b>
   44b50:	d9000b17 	ldw	r4,44(sp)
   44b54:	1029883a 	mov	r20,r2
   44b58:	0100050e 	bge	zero,r4,44b70 <_dtoa_r+0xa80>
   44b5c:	d9800b17 	ldw	r6,44(sp)
   44b60:	8009883a 	mov	r4,r16
   44b64:	100b883a 	mov	r5,r2
   44b68:	0047bcc0 	call	47bcc <__pow5mult>
   44b6c:	1029883a 	mov	r20,r2
   44b70:	d9c00417 	ldw	r7,16(sp)
   44b74:	00800044 	movi	r2,1
   44b78:	11c0f00e 	bge	r2,r7,44f3c <_dtoa_r+0xe4c>
   44b7c:	0023883a 	mov	r17,zero
   44b80:	d8800b17 	ldw	r2,44(sp)
   44b84:	1001741e 	bne	r2,zero,45158 <_dtoa_r+0x1068>
   44b88:	00800044 	movi	r2,1
   44b8c:	d8c00717 	ldw	r3,28(sp)
   44b90:	10c5883a 	add	r2,r2,r3
   44b94:	108007cc 	andi	r2,r2,31
   44b98:	10008026 	beq	r2,zero,44d9c <_dtoa_r+0xcac>
   44b9c:	01000804 	movi	r4,32
   44ba0:	2089c83a 	sub	r4,r4,r2
   44ba4:	00c00104 	movi	r3,4
   44ba8:	1902d00e 	bge	r3,r4,456ec <_dtoa_r+0x15fc>
   44bac:	d9000817 	ldw	r4,32(sp)
   44bb0:	d9c00717 	ldw	r7,28(sp)
   44bb4:	00c00704 	movi	r3,28
   44bb8:	1885c83a 	sub	r2,r3,r2
   44bbc:	2089883a 	add	r4,r4,r2
   44bc0:	388f883a 	add	r7,r7,r2
   44bc4:	d9000815 	stw	r4,32(sp)
   44bc8:	90a5883a 	add	r18,r18,r2
   44bcc:	d9c00715 	stw	r7,28(sp)
   44bd0:	d9c00817 	ldw	r7,32(sp)
   44bd4:	01c0050e 	bge	zero,r7,44bec <_dtoa_r+0xafc>
   44bd8:	e00b883a 	mov	r5,fp
   44bdc:	8009883a 	mov	r4,r16
   44be0:	380d883a 	mov	r6,r7
   44be4:	0047cf80 	call	47cf8 <__lshift>
   44be8:	1039883a 	mov	fp,r2
   44bec:	d8800717 	ldw	r2,28(sp)
   44bf0:	0080050e 	bge	zero,r2,44c08 <_dtoa_r+0xb18>
   44bf4:	a00b883a 	mov	r5,r20
   44bf8:	8009883a 	mov	r4,r16
   44bfc:	100d883a 	mov	r6,r2
   44c00:	0047cf80 	call	47cf8 <__lshift>
   44c04:	1029883a 	mov	r20,r2
   44c08:	d8c00d17 	ldw	r3,52(sp)
   44c0c:	1801401e 	bne	r3,zero,45110 <_dtoa_r+0x1020>
   44c10:	d8800917 	ldw	r2,36(sp)
   44c14:	00815a0e 	bge	zero,r2,45180 <_dtoa_r+0x1090>
   44c18:	d8c00c17 	ldw	r3,48(sp)
   44c1c:	18006f1e 	bne	r3,zero,44ddc <_dtoa_r+0xcec>
   44c20:	b823883a 	mov	r17,r23
   44c24:	dc800917 	ldw	r18,36(sp)
   44c28:	00000206 	br	44c34 <_dtoa_r+0xb44>
   44c2c:	00475d80 	call	475d8 <__multadd>
   44c30:	1039883a 	mov	fp,r2
   44c34:	e009883a 	mov	r4,fp
   44c38:	a00b883a 	mov	r5,r20
   44c3c:	0043eb40 	call	43eb4 <quorem>
   44c40:	10800c04 	addi	r2,r2,48
   44c44:	88800005 	stb	r2,0(r17)
   44c48:	8c400044 	addi	r17,r17,1
   44c4c:	8dc7c83a 	sub	r3,r17,r23
   44c50:	8009883a 	mov	r4,r16
   44c54:	e00b883a 	mov	r5,fp
   44c58:	01800284 	movi	r6,10
   44c5c:	000f883a 	mov	r7,zero
   44c60:	1cbff216 	blt	r3,r18,44c2c <_dtoa_r+0xb3c>
   44c64:	dd800917 	ldw	r22,36(sp)
   44c68:	1007883a 	mov	r3,r2
   44c6c:	05823a0e 	bge	zero,r22,45558 <_dtoa_r+0x1468>
   44c70:	bdad883a 	add	r22,r23,r22
   44c74:	0023883a 	mov	r17,zero
   44c78:	e00b883a 	mov	r5,fp
   44c7c:	01800044 	movi	r6,1
   44c80:	8009883a 	mov	r4,r16
   44c84:	d8c01515 	stw	r3,84(sp)
   44c88:	0047cf80 	call	47cf8 <__lshift>
   44c8c:	1009883a 	mov	r4,r2
   44c90:	a00b883a 	mov	r5,r20
   44c94:	1039883a 	mov	fp,r2
   44c98:	0047e540 	call	47e54 <__mcmp>
   44c9c:	d8c01517 	ldw	r3,84(sp)
   44ca0:	0080d60e 	bge	zero,r2,44ffc <_dtoa_r+0xf0c>
   44ca4:	b13fffc3 	ldbu	r4,-1(r22)
   44ca8:	b0ffff84 	addi	r3,r22,-2
   44cac:	01800e44 	movi	r6,57
   44cb0:	00000306 	br	44cc0 <_dtoa_r+0xbd0>
   44cb4:	19000003 	ldbu	r4,0(r3)
   44cb8:	102d883a 	mov	r22,r2
   44cbc:	18ffffc4 	addi	r3,r3,-1
   44cc0:	21403fcc 	andi	r5,r4,255
   44cc4:	2940201c 	xori	r5,r5,128
   44cc8:	297fe004 	addi	r5,r5,-128
   44ccc:	b0bfffc4 	addi	r2,r22,-1
   44cd0:	2981a71e 	bne	r5,r6,45370 <_dtoa_r+0x1280>
   44cd4:	b8bff71e 	bne	r23,r2,44cb4 <_dtoa_r+0xbc4>
   44cd8:	d8800617 	ldw	r2,24(sp)
   44cdc:	10800044 	addi	r2,r2,1
   44ce0:	d8800615 	stw	r2,24(sp)
   44ce4:	00800c44 	movi	r2,49
   44ce8:	b8800005 	stb	r2,0(r23)
   44cec:	8009883a 	mov	r4,r16
   44cf0:	a00b883a 	mov	r5,r20
   44cf4:	00475b00 	call	475b0 <_Bfree>
   44cf8:	a83e9e26 	beq	r21,zero,44774 <_dtoa_r+0x684>
   44cfc:	88000426 	beq	r17,zero,44d10 <_dtoa_r+0xc20>
   44d00:	8d400326 	beq	r17,r21,44d10 <_dtoa_r+0xc20>
   44d04:	8009883a 	mov	r4,r16
   44d08:	880b883a 	mov	r5,r17
   44d0c:	00475b00 	call	475b0 <_Bfree>
   44d10:	8009883a 	mov	r4,r16
   44d14:	a80b883a 	mov	r5,r21
   44d18:	00475b00 	call	475b0 <_Bfree>
   44d1c:	003e9506 	br	44774 <_dtoa_r+0x684>
   44d20:	00c00044 	movi	r3,1
   44d24:	d8c00d15 	stw	r3,52(sp)
   44d28:	003d9f06 	br	443a8 <_dtoa_r+0x2b8>
   44d2c:	d9000817 	ldw	r4,32(sp)
   44d30:	d8800617 	ldw	r2,24(sp)
   44d34:	d8000b15 	stw	zero,44(sp)
   44d38:	2089c83a 	sub	r4,r4,r2
   44d3c:	0087c83a 	sub	r3,zero,r2
   44d40:	d9000815 	stw	r4,32(sp)
   44d44:	d8c00a15 	stw	r3,40(sp)
   44d48:	003da306 	br	443d8 <_dtoa_r+0x2e8>
   44d4c:	0529c83a 	sub	r20,zero,r20
   44d50:	dd000815 	stw	r20,32(sp)
   44d54:	d8000715 	stw	zero,28(sp)
   44d58:	003d9806 	br	443bc <_dtoa_r+0x2cc>
   44d5c:	d9000617 	ldw	r4,24(sp)
   44d60:	004a4ec0 	call	4a4ec <__floatsidf>
   44d64:	1009883a 	mov	r4,r2
   44d68:	180b883a 	mov	r5,r3
   44d6c:	980d883a 	mov	r6,r19
   44d70:	900f883a 	mov	r7,r18
   44d74:	004a36c0 	call	4a36c <__nedf2>
   44d78:	103d7a26 	beq	r2,zero,44364 <_dtoa_r+0x274>
   44d7c:	d8800617 	ldw	r2,24(sp)
   44d80:	10bfffc4 	addi	r2,r2,-1
   44d84:	d8800615 	stw	r2,24(sp)
   44d88:	003d7606 	br	44364 <_dtoa_r+0x274>
   44d8c:	dcc00a17 	ldw	r19,40(sp)
   44d90:	dc800817 	ldw	r18,32(sp)
   44d94:	002b883a 	mov	r21,zero
   44d98:	003f4906 	br	44ac0 <_dtoa_r+0x9d0>
   44d9c:	00800704 	movi	r2,28
   44da0:	d8c00817 	ldw	r3,32(sp)
   44da4:	d9000717 	ldw	r4,28(sp)
   44da8:	90a5883a 	add	r18,r18,r2
   44dac:	1887883a 	add	r3,r3,r2
   44db0:	2089883a 	add	r4,r4,r2
   44db4:	d8c00815 	stw	r3,32(sp)
   44db8:	d9000715 	stw	r4,28(sp)
   44dbc:	003f8406 	br	44bd0 <_dtoa_r+0xae0>
   44dc0:	d9c00317 	ldw	r7,12(sp)
   44dc4:	013efb84 	movi	r4,-1042
   44dc8:	2509c83a 	sub	r4,r4,r20
   44dcc:	3908983a 	sll	r4,r7,r4
   44dd0:	003d3006 	br	44294 <_dtoa_r+0x1a4>
   44dd4:	d8000d15 	stw	zero,52(sp)
   44dd8:	003d7306 	br	443a8 <_dtoa_r+0x2b8>
   44ddc:	0480050e 	bge	zero,r18,44df4 <_dtoa_r+0xd04>
   44de0:	a80b883a 	mov	r5,r21
   44de4:	8009883a 	mov	r4,r16
   44de8:	900d883a 	mov	r6,r18
   44dec:	0047cf80 	call	47cf8 <__lshift>
   44df0:	102b883a 	mov	r21,r2
   44df4:	8801611e 	bne	r17,zero,4537c <_dtoa_r+0x128c>
   44df8:	a827883a 	mov	r19,r21
   44dfc:	d8c00317 	ldw	r3,12(sp)
   44e00:	d9000917 	ldw	r4,36(sp)
   44e04:	b8bfffc4 	addi	r2,r23,-1
   44e08:	18c0004c 	andi	r3,r3,1
   44e0c:	1105883a 	add	r2,r2,r4
   44e10:	b825883a 	mov	r18,r23
   44e14:	d8800515 	stw	r2,20(sp)
   44e18:	a823883a 	mov	r17,r21
   44e1c:	d8c00315 	stw	r3,12(sp)
   44e20:	ddc00715 	stw	r23,28(sp)
   44e24:	e009883a 	mov	r4,fp
   44e28:	a00b883a 	mov	r5,r20
   44e2c:	0043eb40 	call	43eb4 <quorem>
   44e30:	e009883a 	mov	r4,fp
   44e34:	880b883a 	mov	r5,r17
   44e38:	102d883a 	mov	r22,r2
   44e3c:	0047e540 	call	47e54 <__mcmp>
   44e40:	980d883a 	mov	r6,r19
   44e44:	8009883a 	mov	r4,r16
   44e48:	a00b883a 	mov	r5,r20
   44e4c:	102b883a 	mov	r21,r2
   44e50:	0047eac0 	call	47eac <__mdiff>
   44e54:	100d883a 	mov	r6,r2
   44e58:	10800317 	ldw	r2,12(r2)
   44e5c:	b5c00c04 	addi	r23,r22,48
   44e60:	10008c26 	beq	r2,zero,45094 <_dtoa_r+0xfa4>
   44e64:	8009883a 	mov	r4,r16
   44e68:	300b883a 	mov	r5,r6
   44e6c:	00475b00 	call	475b0 <_Bfree>
   44e70:	00800044 	movi	r2,1
   44e74:	a8007116 	blt	r21,zero,4503c <_dtoa_r+0xf4c>
   44e78:	a800041e 	bne	r21,zero,44e8c <_dtoa_r+0xd9c>
   44e7c:	d9c00417 	ldw	r7,16(sp)
   44e80:	3800021e 	bne	r7,zero,44e8c <_dtoa_r+0xd9c>
   44e84:	d8c00317 	ldw	r3,12(sp)
   44e88:	18006c26 	beq	r3,zero,4503c <_dtoa_r+0xf4c>
   44e8c:	00814c16 	blt	zero,r2,453c0 <_dtoa_r+0x12d0>
   44e90:	d8c00517 	ldw	r3,20(sp)
   44e94:	95400044 	addi	r21,r18,1
   44e98:	95c00005 	stb	r23,0(r18)
   44e9c:	a82d883a 	mov	r22,r21
   44ea0:	90c14d26 	beq	r18,r3,453d8 <_dtoa_r+0x12e8>
   44ea4:	e00b883a 	mov	r5,fp
   44ea8:	8009883a 	mov	r4,r16
   44eac:	01800284 	movi	r6,10
   44eb0:	000f883a 	mov	r7,zero
   44eb4:	00475d80 	call	475d8 <__multadd>
   44eb8:	1039883a 	mov	fp,r2
   44ebc:	8cc08b26 	beq	r17,r19,450ec <_dtoa_r+0xffc>
   44ec0:	880b883a 	mov	r5,r17
   44ec4:	01800284 	movi	r6,10
   44ec8:	000f883a 	mov	r7,zero
   44ecc:	8009883a 	mov	r4,r16
   44ed0:	00475d80 	call	475d8 <__multadd>
   44ed4:	980b883a 	mov	r5,r19
   44ed8:	8009883a 	mov	r4,r16
   44edc:	01800284 	movi	r6,10
   44ee0:	000f883a 	mov	r7,zero
   44ee4:	1023883a 	mov	r17,r2
   44ee8:	00475d80 	call	475d8 <__multadd>
   44eec:	1027883a 	mov	r19,r2
   44ef0:	a825883a 	mov	r18,r21
   44ef4:	003fcb06 	br	44e24 <_dtoa_r+0xd34>
   44ef8:	d9c00417 	ldw	r7,16(sp)
   44efc:	00800104 	movi	r2,4
   44f00:	3880e426 	beq	r7,r2,45294 <_dtoa_r+0x11a4>
   44f04:	00800144 	movi	r2,5
   44f08:	38be3c1e 	bne	r7,r2,447fc <_dtoa_r+0x70c>
   44f0c:	00c00044 	movi	r3,1
   44f10:	d8c00c15 	stw	r3,48(sp)
   44f14:	d9c02117 	ldw	r7,132(sp)
   44f18:	d8800617 	ldw	r2,24(sp)
   44f1c:	388f883a 	add	r7,r7,r2
   44f20:	3c800044 	addi	r18,r7,1
   44f24:	d9c00e15 	stw	r7,56(sp)
   44f28:	dc800915 	stw	r18,36(sp)
   44f2c:	04bd3e16 	blt	zero,r18,44428 <_dtoa_r+0x338>
   44f30:	80001115 	stw	zero,68(r16)
   44f34:	000b883a 	mov	r5,zero
   44f38:	003d4606 	br	44454 <_dtoa_r+0x364>
   44f3c:	d8c00317 	ldw	r3,12(sp)
   44f40:	183f0e1e 	bne	r3,zero,44b7c <_dtoa_r+0xa8c>
   44f44:	00c00434 	movhi	r3,16
   44f48:	18ffffc4 	addi	r3,r3,-1
   44f4c:	88c6703a 	and	r3,r17,r3
   44f50:	183f0a1e 	bne	r3,zero,44b7c <_dtoa_r+0xa8c>
   44f54:	8c5ffc2c 	andhi	r17,r17,32752
   44f58:	883f0826 	beq	r17,zero,44b7c <_dtoa_r+0xa8c>
   44f5c:	d9000817 	ldw	r4,32(sp)
   44f60:	d9c00717 	ldw	r7,28(sp)
   44f64:	1023883a 	mov	r17,r2
   44f68:	2089883a 	add	r4,r4,r2
   44f6c:	388f883a 	add	r7,r7,r2
   44f70:	d9000815 	stw	r4,32(sp)
   44f74:	d9c00715 	stw	r7,28(sp)
   44f78:	003f0106 	br	44b80 <_dtoa_r+0xa90>
   44f7c:	9005883a 	mov	r2,r18
   44f80:	003ed306 	br	44ad0 <_dtoa_r+0x9e0>
   44f84:	d8800917 	ldw	r2,36(sp)
   44f88:	00be3516 	blt	zero,r2,44860 <_dtoa_r+0x770>
   44f8c:	1000b61e 	bne	r2,zero,45268 <_dtoa_r+0x1178>
   44f90:	9009883a 	mov	r4,r18
   44f94:	980b883a 	mov	r5,r19
   44f98:	000d883a 	mov	r6,zero
   44f9c:	01d00534 	movhi	r7,16404
   44fa0:	0040fc00 	call	40fc0 <__muldf3>
   44fa4:	d9800317 	ldw	r6,12(sp)
   44fa8:	1009883a 	mov	r4,r2
   44fac:	180b883a 	mov	r5,r3
   44fb0:	880f883a 	mov	r7,r17
   44fb4:	004a42c0 	call	4a42c <__gedf2>
   44fb8:	0029883a 	mov	r20,zero
   44fbc:	002b883a 	mov	r21,zero
   44fc0:	10007e16 	blt	r2,zero,451bc <_dtoa_r+0x10cc>
   44fc4:	d8802117 	ldw	r2,132(sp)
   44fc8:	b82d883a 	mov	r22,r23
   44fcc:	0084303a 	nor	r2,zero,r2
   44fd0:	d8800615 	stw	r2,24(sp)
   44fd4:	8009883a 	mov	r4,r16
   44fd8:	a00b883a 	mov	r5,r20
   44fdc:	00475b00 	call	475b0 <_Bfree>
   44fe0:	a83f4b1e 	bne	r21,zero,44d10 <_dtoa_r+0xc20>
   44fe4:	003de306 	br	44774 <_dtoa_r+0x684>
   44fe8:	e00b883a 	mov	r5,fp
   44fec:	8009883a 	mov	r4,r16
   44ff0:	0047bcc0 	call	47bcc <__pow5mult>
   44ff4:	1039883a 	mov	fp,r2
   44ff8:	003ed206 	br	44b44 <_dtoa_r+0xa54>
   44ffc:	1000021e 	bne	r2,zero,45008 <_dtoa_r+0xf18>
   45000:	18c0004c 	andi	r3,r3,1
   45004:	183f271e 	bne	r3,zero,44ca4 <_dtoa_r+0xbb4>
   45008:	01000c04 	movi	r4,48
   4500c:	00000106 	br	45014 <_dtoa_r+0xf24>
   45010:	102d883a 	mov	r22,r2
   45014:	b0bfffc4 	addi	r2,r22,-1
   45018:	10c00007 	ldb	r3,0(r2)
   4501c:	193ffc26 	beq	r3,r4,45010 <_dtoa_r+0xf20>
   45020:	003f3206 	br	44cec <_dtoa_r+0xbfc>
   45024:	d8c00f17 	ldw	r3,60(sp)
   45028:	18015026 	beq	r3,zero,4556c <_dtoa_r+0x147c>
   4502c:	10810cc4 	addi	r2,r2,1075
   45030:	dcc00a17 	ldw	r19,40(sp)
   45034:	dc800817 	ldw	r18,32(sp)
   45038:	003e9706 	br	44a98 <_dtoa_r+0x9a8>
   4503c:	b807883a 	mov	r3,r23
   45040:	182b883a 	mov	r21,r3
   45044:	ddc00717 	ldw	r23,28(sp)
   45048:	00800e0e 	bge	zero,r2,45084 <_dtoa_r+0xf94>
   4504c:	e00b883a 	mov	r5,fp
   45050:	01800044 	movi	r6,1
   45054:	8009883a 	mov	r4,r16
   45058:	d8c01515 	stw	r3,84(sp)
   4505c:	0047cf80 	call	47cf8 <__lshift>
   45060:	1009883a 	mov	r4,r2
   45064:	a00b883a 	mov	r5,r20
   45068:	1039883a 	mov	fp,r2
   4506c:	0047e540 	call	47e54 <__mcmp>
   45070:	d8c01517 	ldw	r3,84(sp)
   45074:	0081880e 	bge	zero,r2,45698 <_dtoa_r+0x15a8>
   45078:	00800e44 	movi	r2,57
   4507c:	b0c00c44 	addi	r3,r22,49
   45080:	a8816326 	beq	r21,r2,45610 <_dtoa_r+0x1520>
   45084:	90c00005 	stb	r3,0(r18)
   45088:	95800044 	addi	r22,r18,1
   4508c:	982b883a 	mov	r21,r19
   45090:	003f1606 	br	44cec <_dtoa_r+0xbfc>
   45094:	300b883a 	mov	r5,r6
   45098:	e009883a 	mov	r4,fp
   4509c:	d9801515 	stw	r6,84(sp)
   450a0:	0047e540 	call	47e54 <__mcmp>
   450a4:	d9801517 	ldw	r6,84(sp)
   450a8:	8009883a 	mov	r4,r16
   450ac:	d8801515 	stw	r2,84(sp)
   450b0:	300b883a 	mov	r5,r6
   450b4:	00475b00 	call	475b0 <_Bfree>
   450b8:	d8801517 	ldw	r2,84(sp)
   450bc:	103f6d1e 	bne	r2,zero,44e74 <_dtoa_r+0xd84>
   450c0:	d9c00417 	ldw	r7,16(sp)
   450c4:	383f6b1e 	bne	r7,zero,44e74 <_dtoa_r+0xd84>
   450c8:	d8c00317 	ldw	r3,12(sp)
   450cc:	183f691e 	bne	r3,zero,44e74 <_dtoa_r+0xd84>
   450d0:	b807883a 	mov	r3,r23
   450d4:	00800e44 	movi	r2,57
   450d8:	ddc00717 	ldw	r23,28(sp)
   450dc:	18814c26 	beq	r3,r2,45610 <_dtoa_r+0x1520>
   450e0:	057fe80e 	bge	zero,r21,45084 <_dtoa_r+0xf94>
   450e4:	b0c00c44 	addi	r3,r22,49
   450e8:	003fe606 	br	45084 <_dtoa_r+0xf94>
   450ec:	880b883a 	mov	r5,r17
   450f0:	8009883a 	mov	r4,r16
   450f4:	01800284 	movi	r6,10
   450f8:	000f883a 	mov	r7,zero
   450fc:	00475d80 	call	475d8 <__multadd>
   45100:	1023883a 	mov	r17,r2
   45104:	1027883a 	mov	r19,r2
   45108:	a825883a 	mov	r18,r21
   4510c:	003f4506 	br	44e24 <_dtoa_r+0xd34>
   45110:	e009883a 	mov	r4,fp
   45114:	a00b883a 	mov	r5,r20
   45118:	0047e540 	call	47e54 <__mcmp>
   4511c:	103ebc0e 	bge	r2,zero,44c10 <_dtoa_r+0xb20>
   45120:	e00b883a 	mov	r5,fp
   45124:	8009883a 	mov	r4,r16
   45128:	01800284 	movi	r6,10
   4512c:	000f883a 	mov	r7,zero
   45130:	00475d80 	call	475d8 <__multadd>
   45134:	1039883a 	mov	fp,r2
   45138:	d8800617 	ldw	r2,24(sp)
   4513c:	d8c00c17 	ldw	r3,48(sp)
   45140:	10bfffc4 	addi	r2,r2,-1
   45144:	d8800615 	stw	r2,24(sp)
   45148:	1801571e 	bne	r3,zero,456a8 <_dtoa_r+0x15b8>
   4514c:	d9c00e17 	ldw	r7,56(sp)
   45150:	d9c00915 	stw	r7,36(sp)
   45154:	003eae06 	br	44c10 <_dtoa_r+0xb20>
   45158:	a0800417 	ldw	r2,16(r20)
   4515c:	10800104 	addi	r2,r2,4
   45160:	1085883a 	add	r2,r2,r2
   45164:	1085883a 	add	r2,r2,r2
   45168:	a085883a 	add	r2,r20,r2
   4516c:	11000017 	ldw	r4,0(r2)
   45170:	00478200 	call	47820 <__hi0bits>
   45174:	00c00804 	movi	r3,32
   45178:	1885c83a 	sub	r2,r3,r2
   4517c:	003e8306 	br	44b8c <_dtoa_r+0xa9c>
   45180:	d9c00417 	ldw	r7,16(sp)
   45184:	00800084 	movi	r2,2
   45188:	11fea30e 	bge	r2,r7,44c18 <_dtoa_r+0xb28>
   4518c:	d8800917 	ldw	r2,36(sp)
   45190:	103f8c1e 	bne	r2,zero,44fc4 <_dtoa_r+0xed4>
   45194:	a00b883a 	mov	r5,r20
   45198:	8009883a 	mov	r4,r16
   4519c:	01800144 	movi	r6,5
   451a0:	000f883a 	mov	r7,zero
   451a4:	00475d80 	call	475d8 <__multadd>
   451a8:	e009883a 	mov	r4,fp
   451ac:	100b883a 	mov	r5,r2
   451b0:	1029883a 	mov	r20,r2
   451b4:	0047e540 	call	47e54 <__mcmp>
   451b8:	00bf820e 	bge	zero,r2,44fc4 <_dtoa_r+0xed4>
   451bc:	00800c44 	movi	r2,49
   451c0:	b8800005 	stb	r2,0(r23)
   451c4:	d8800617 	ldw	r2,24(sp)
   451c8:	bd800044 	addi	r22,r23,1
   451cc:	10800044 	addi	r2,r2,1
   451d0:	d8800615 	stw	r2,24(sp)
   451d4:	003f7f06 	br	44fd4 <_dtoa_r+0xee4>
   451d8:	dc000417 	ldw	r16,16(sp)
   451dc:	003d6506 	br	44774 <_dtoa_r+0x684>
   451e0:	9009883a 	mov	r4,r18
   451e4:	004a4ec0 	call	4a4ec <__floatsidf>
   451e8:	1009883a 	mov	r4,r2
   451ec:	180b883a 	mov	r5,r3
   451f0:	980d883a 	mov	r6,r19
   451f4:	a00f883a 	mov	r7,r20
   451f8:	0040fc00 	call	40fc0 <__muldf3>
   451fc:	1009883a 	mov	r4,r2
   45200:	180b883a 	mov	r5,r3
   45204:	000d883a 	mov	r6,zero
   45208:	01d00734 	movhi	r7,16412
   4520c:	004a25c0 	call	4a25c <__adddf3>
   45210:	057f3034 	movhi	r21,64704
   45214:	1025883a 	mov	r18,r2
   45218:	1d6b883a 	add	r21,r3,r21
   4521c:	9809883a 	mov	r4,r19
   45220:	a00b883a 	mov	r5,r20
   45224:	000d883a 	mov	r6,zero
   45228:	01d00534 	movhi	r7,16404
   4522c:	004a2b00 	call	4a2b0 <__subdf3>
   45230:	1009883a 	mov	r4,r2
   45234:	180b883a 	mov	r5,r3
   45238:	900d883a 	mov	r6,r18
   4523c:	a80f883a 	mov	r7,r21
   45240:	1027883a 	mov	r19,r2
   45244:	1829883a 	mov	r20,r3
   45248:	004a3c80 	call	4a3c8 <__gtdf2>
   4524c:	00806616 	blt	zero,r2,453e8 <_dtoa_r+0x12f8>
   45250:	a9e0003c 	xorhi	r7,r21,32768
   45254:	9809883a 	mov	r4,r19
   45258:	a00b883a 	mov	r5,r20
   4525c:	900d883a 	mov	r6,r18
   45260:	004a4900 	call	4a490 <__ltdf2>
   45264:	103d710e 	bge	r2,zero,4482c <_dtoa_r+0x73c>
   45268:	0029883a 	mov	r20,zero
   4526c:	002b883a 	mov	r21,zero
   45270:	003f5406 	br	44fc4 <_dtoa_r+0xed4>
   45274:	d9800a17 	ldw	r6,40(sp)
   45278:	e00b883a 	mov	r5,fp
   4527c:	8009883a 	mov	r4,r16
   45280:	0047bcc0 	call	47bcc <__pow5mult>
   45284:	1039883a 	mov	fp,r2
   45288:	003e2e06 	br	44b44 <_dtoa_r+0xa54>
   4528c:	d8000c15 	stw	zero,48(sp)
   45290:	003f2006 	br	44f14 <_dtoa_r+0xe24>
   45294:	00800044 	movi	r2,1
   45298:	d8800c15 	stw	r2,48(sp)
   4529c:	003c5d06 	br	44414 <_dtoa_r+0x324>
   452a0:	d8c00a17 	ldw	r3,40(sp)
   452a4:	d9000b17 	ldw	r4,44(sp)
   452a8:	dcc00a15 	stw	r19,40(sp)
   452ac:	98c5c83a 	sub	r2,r19,r3
   452b0:	2089883a 	add	r4,r4,r2
   452b4:	d9000b15 	stw	r4,44(sp)
   452b8:	0027883a 	mov	r19,zero
   452bc:	003df206 	br	44a88 <_dtoa_r+0x998>
   452c0:	d9000317 	ldw	r4,12(sp)
   452c4:	8829883a 	mov	r20,r17
   452c8:	04800084 	movi	r18,2
   452cc:	d9001015 	stw	r4,64(sp)
   452d0:	003c8106 	br	444d8 <_dtoa_r+0x3e8>
   452d4:	04800044 	movi	r18,1
   452d8:	dc800e15 	stw	r18,56(sp)
   452dc:	dc800915 	stw	r18,36(sp)
   452e0:	dc802115 	stw	r18,132(sp)
   452e4:	003f1206 	br	44f30 <_dtoa_r+0xe40>
   452e8:	d8800617 	ldw	r2,24(sp)
   452ec:	00abc83a 	sub	r21,zero,r2
   452f0:	a800a426 	beq	r21,zero,45584 <_dtoa_r+0x1494>
   452f4:	a88003cc 	andi	r2,r21,15
   452f8:	100490fa 	slli	r2,r2,3
   452fc:	00c00174 	movhi	r3,5
   45300:	18f63704 	addi	r3,r3,-10020
   45304:	d9000317 	ldw	r4,12(sp)
   45308:	1885883a 	add	r2,r3,r2
   4530c:	11800017 	ldw	r6,0(r2)
   45310:	11c00117 	ldw	r7,4(r2)
   45314:	a82bd13a 	srai	r21,r21,4
   45318:	880b883a 	mov	r5,r17
   4531c:	0040fc00 	call	40fc0 <__muldf3>
   45320:	1027883a 	mov	r19,r2
   45324:	1829883a 	mov	r20,r3
   45328:	a800e826 	beq	r21,zero,456cc <_dtoa_r+0x15dc>
   4532c:	05800174 	movhi	r22,5
   45330:	b5b62d04 	addi	r22,r22,-10060
   45334:	04800084 	movi	r18,2
   45338:	a980004c 	andi	r6,r21,1
   4533c:	1009883a 	mov	r4,r2
   45340:	a82bd07a 	srai	r21,r21,1
   45344:	180b883a 	mov	r5,r3
   45348:	30000426 	beq	r6,zero,4535c <_dtoa_r+0x126c>
   4534c:	b1800017 	ldw	r6,0(r22)
   45350:	b1c00117 	ldw	r7,4(r22)
   45354:	94800044 	addi	r18,r18,1
   45358:	0040fc00 	call	40fc0 <__muldf3>
   4535c:	b5800204 	addi	r22,r22,8
   45360:	a83ff51e 	bne	r21,zero,45338 <_dtoa_r+0x1248>
   45364:	1027883a 	mov	r19,r2
   45368:	1829883a 	mov	r20,r3
   4536c:	003c7306 	br	4453c <_dtoa_r+0x44c>
   45370:	21000044 	addi	r4,r4,1
   45374:	11000005 	stb	r4,0(r2)
   45378:	003e5c06 	br	44cec <_dtoa_r+0xbfc>
   4537c:	a9400117 	ldw	r5,4(r21)
   45380:	8009883a 	mov	r4,r16
   45384:	00475080 	call	47508 <_Balloc>
   45388:	a9800417 	ldw	r6,16(r21)
   4538c:	11000304 	addi	r4,r2,12
   45390:	a9400304 	addi	r5,r21,12
   45394:	31800084 	addi	r6,r6,2
   45398:	318d883a 	add	r6,r6,r6
   4539c:	318d883a 	add	r6,r6,r6
   453a0:	1023883a 	mov	r17,r2
   453a4:	00471600 	call	47160 <memcpy>
   453a8:	8009883a 	mov	r4,r16
   453ac:	880b883a 	mov	r5,r17
   453b0:	01800044 	movi	r6,1
   453b4:	0047cf80 	call	47cf8 <__lshift>
   453b8:	1027883a 	mov	r19,r2
   453bc:	003e8f06 	br	44dfc <_dtoa_r+0xd0c>
   453c0:	b807883a 	mov	r3,r23
   453c4:	00800e44 	movi	r2,57
   453c8:	ddc00717 	ldw	r23,28(sp)
   453cc:	18809026 	beq	r3,r2,45610 <_dtoa_r+0x1520>
   453d0:	18c00044 	addi	r3,r3,1
   453d4:	003f2b06 	br	45084 <_dtoa_r+0xf94>
   453d8:	b807883a 	mov	r3,r23
   453dc:	982b883a 	mov	r21,r19
   453e0:	ddc00717 	ldw	r23,28(sp)
   453e4:	003e2406 	br	44c78 <_dtoa_r+0xb88>
   453e8:	0029883a 	mov	r20,zero
   453ec:	002b883a 	mov	r21,zero
   453f0:	003f7206 	br	451bc <_dtoa_r+0x10cc>
   453f4:	593fffc4 	addi	r4,r11,-1
   453f8:	200490fa 	slli	r2,r4,3
   453fc:	00c00174 	movhi	r3,5
   45400:	18f63704 	addi	r3,r3,-10020
   45404:	d9001015 	stw	r4,64(sp)
   45408:	1885883a 	add	r2,r3,r2
   4540c:	11000017 	ldw	r4,0(r2)
   45410:	11400117 	ldw	r5,4(r2)
   45414:	900d883a 	mov	r6,r18
   45418:	a80f883a 	mov	r7,r21
   4541c:	dac01615 	stw	r11,88(sp)
   45420:	0040fc00 	call	40fc0 <__muldf3>
   45424:	a00b883a 	mov	r5,r20
   45428:	9809883a 	mov	r4,r19
   4542c:	d8c01215 	stw	r3,72(sp)
   45430:	d8801115 	stw	r2,68(sp)
   45434:	004a5c00 	call	4a5c0 <__fixdfsi>
   45438:	1009883a 	mov	r4,r2
   4543c:	1025883a 	mov	r18,r2
   45440:	004a4ec0 	call	4a4ec <__floatsidf>
   45444:	9809883a 	mov	r4,r19
   45448:	a00b883a 	mov	r5,r20
   4544c:	100d883a 	mov	r6,r2
   45450:	180f883a 	mov	r7,r3
   45454:	94800c04 	addi	r18,r18,48
   45458:	004a2b00 	call	4a2b0 <__subdf3>
   4545c:	bc800005 	stb	r18,0(r23)
   45460:	dac01617 	ldw	r11,88(sp)
   45464:	102b883a 	mov	r21,r2
   45468:	00800044 	movi	r2,1
   4546c:	bd800044 	addi	r22,r23,1
   45470:	1815883a 	mov	r10,r3
   45474:	58802226 	beq	r11,r2,45500 <_dtoa_r+0x1410>
   45478:	bad7883a 	add	r11,r23,r11
   4547c:	dc001415 	stw	r16,80(sp)
   45480:	a805883a 	mov	r2,r21
   45484:	b027883a 	mov	r19,r22
   45488:	5821883a 	mov	r16,r11
   4548c:	882b883a 	mov	r21,r17
   45490:	000d883a 	mov	r6,zero
   45494:	01d00934 	movhi	r7,16420
   45498:	1009883a 	mov	r4,r2
   4549c:	180b883a 	mov	r5,r3
   454a0:	0040fc00 	call	40fc0 <__muldf3>
   454a4:	180b883a 	mov	r5,r3
   454a8:	1009883a 	mov	r4,r2
   454ac:	1829883a 	mov	r20,r3
   454b0:	1023883a 	mov	r17,r2
   454b4:	004a5c00 	call	4a5c0 <__fixdfsi>
   454b8:	1009883a 	mov	r4,r2
   454bc:	1025883a 	mov	r18,r2
   454c0:	004a4ec0 	call	4a4ec <__floatsidf>
   454c4:	8809883a 	mov	r4,r17
   454c8:	a00b883a 	mov	r5,r20
   454cc:	100d883a 	mov	r6,r2
   454d0:	180f883a 	mov	r7,r3
   454d4:	94800c04 	addi	r18,r18,48
   454d8:	004a2b00 	call	4a2b0 <__subdf3>
   454dc:	9cc00044 	addi	r19,r19,1
   454e0:	9cbfffc5 	stb	r18,-1(r19)
   454e4:	9c3fea1e 	bne	r19,r16,45490 <_dtoa_r+0x13a0>
   454e8:	1815883a 	mov	r10,r3
   454ec:	d8c01017 	ldw	r3,64(sp)
   454f0:	dc001417 	ldw	r16,80(sp)
   454f4:	a823883a 	mov	r17,r21
   454f8:	b0ed883a 	add	r22,r22,r3
   454fc:	102b883a 	mov	r21,r2
   45500:	d9001117 	ldw	r4,68(sp)
   45504:	d9401217 	ldw	r5,72(sp)
   45508:	000d883a 	mov	r6,zero
   4550c:	01cff834 	movhi	r7,16352
   45510:	da801515 	stw	r10,84(sp)
   45514:	004a25c0 	call	4a25c <__adddf3>
   45518:	da801517 	ldw	r10,84(sp)
   4551c:	1009883a 	mov	r4,r2
   45520:	180b883a 	mov	r5,r3
   45524:	500f883a 	mov	r7,r10
   45528:	a80d883a 	mov	r6,r21
   4552c:	004a4900 	call	4a490 <__ltdf2>
   45530:	da801517 	ldw	r10,84(sp)
   45534:	10003b0e 	bge	r2,zero,45624 <_dtoa_r+0x1534>
   45538:	d9c01317 	ldw	r7,76(sp)
   4553c:	b53fffc3 	ldbu	r20,-1(r22)
   45540:	d9c00615 	stw	r7,24(sp)
   45544:	003d3106 	br	44a0c <_dtoa_r+0x91c>
   45548:	d8800817 	ldw	r2,32(sp)
   4554c:	11e5c83a 	sub	r18,r2,r7
   45550:	0005883a 	mov	r2,zero
   45554:	003d5006 	br	44a98 <_dtoa_r+0x9a8>
   45558:	05800044 	movi	r22,1
   4555c:	003dc406 	br	44c70 <_dtoa_r+0xb80>
   45560:	a5000044 	addi	r20,r20,1
   45564:	15000005 	stb	r20,0(r2)
   45568:	003c8206 	br	44774 <_dtoa_r+0x684>
   4556c:	d8800217 	ldw	r2,8(sp)
   45570:	00c00d84 	movi	r3,54
   45574:	dcc00a17 	ldw	r19,40(sp)
   45578:	1885c83a 	sub	r2,r3,r2
   4557c:	dc800817 	ldw	r18,32(sp)
   45580:	003d4506 	br	44a98 <_dtoa_r+0x9a8>
   45584:	dcc00317 	ldw	r19,12(sp)
   45588:	8829883a 	mov	r20,r17
   4558c:	04800084 	movi	r18,2
   45590:	003bea06 	br	4453c <_dtoa_r+0x44c>
   45594:	d9000917 	ldw	r4,36(sp)
   45598:	203f1126 	beq	r4,zero,451e0 <_dtoa_r+0x10f0>
   4559c:	d9c00e17 	ldw	r7,56(sp)
   455a0:	01fca20e 	bge	zero,r7,4482c <_dtoa_r+0x73c>
   455a4:	a00b883a 	mov	r5,r20
   455a8:	9809883a 	mov	r4,r19
   455ac:	000d883a 	mov	r6,zero
   455b0:	01d00934 	movhi	r7,16420
   455b4:	0040fc00 	call	40fc0 <__muldf3>
   455b8:	91000044 	addi	r4,r18,1
   455bc:	1027883a 	mov	r19,r2
   455c0:	1829883a 	mov	r20,r3
   455c4:	004a4ec0 	call	4a4ec <__floatsidf>
   455c8:	9809883a 	mov	r4,r19
   455cc:	a00b883a 	mov	r5,r20
   455d0:	100d883a 	mov	r6,r2
   455d4:	180f883a 	mov	r7,r3
   455d8:	0040fc00 	call	40fc0 <__muldf3>
   455dc:	1009883a 	mov	r4,r2
   455e0:	180b883a 	mov	r5,r3
   455e4:	000d883a 	mov	r6,zero
   455e8:	01d00734 	movhi	r7,16412
   455ec:	004a25c0 	call	4a25c <__adddf3>
   455f0:	1025883a 	mov	r18,r2
   455f4:	d8800617 	ldw	r2,24(sp)
   455f8:	057f3034 	movhi	r21,64704
   455fc:	1d6b883a 	add	r21,r3,r21
   45600:	10bfffc4 	addi	r2,r2,-1
   45604:	d8801315 	stw	r2,76(sp)
   45608:	dac00e17 	ldw	r11,56(sp)
   4560c:	003be706 	br	445ac <_dtoa_r+0x4bc>
   45610:	01000e44 	movi	r4,57
   45614:	91000005 	stb	r4,0(r18)
   45618:	95800044 	addi	r22,r18,1
   4561c:	982b883a 	mov	r21,r19
   45620:	003da106 	br	44ca8 <_dtoa_r+0xbb8>
   45624:	d9801117 	ldw	r6,68(sp)
   45628:	d9c01217 	ldw	r7,72(sp)
   4562c:	0009883a 	mov	r4,zero
   45630:	014ff834 	movhi	r5,16352
   45634:	da801515 	stw	r10,84(sp)
   45638:	004a2b00 	call	4a2b0 <__subdf3>
   4563c:	da801517 	ldw	r10,84(sp)
   45640:	1009883a 	mov	r4,r2
   45644:	180b883a 	mov	r5,r3
   45648:	a80d883a 	mov	r6,r21
   4564c:	500f883a 	mov	r7,r10
   45650:	004a3c80 	call	4a3c8 <__gtdf2>
   45654:	00bc750e 	bge	zero,r2,4482c <_dtoa_r+0x73c>
   45658:	01000c04 	movi	r4,48
   4565c:	00000106 	br	45664 <_dtoa_r+0x1574>
   45660:	102d883a 	mov	r22,r2
   45664:	b0bfffc4 	addi	r2,r22,-1
   45668:	10c00007 	ldb	r3,0(r2)
   4566c:	193ffc26 	beq	r3,r4,45660 <_dtoa_r+0x1570>
   45670:	d8801317 	ldw	r2,76(sp)
   45674:	d8800615 	stw	r2,24(sp)
   45678:	003c3e06 	br	44774 <_dtoa_r+0x684>
   4567c:	d9001317 	ldw	r4,76(sp)
   45680:	df001117 	ldw	fp,68(sp)
   45684:	d9000615 	stw	r4,24(sp)
   45688:	003ce006 	br	44a0c <_dtoa_r+0x91c>
   4568c:	df001117 	ldw	fp,68(sp)
   45690:	dc401217 	ldw	r17,72(sp)
   45694:	003c6506 	br	4482c <_dtoa_r+0x73c>
   45698:	103e7a1e 	bne	r2,zero,45084 <_dtoa_r+0xf94>
   4569c:	1880004c 	andi	r2,r3,1
   456a0:	103e7826 	beq	r2,zero,45084 <_dtoa_r+0xf94>
   456a4:	003e7406 	br	45078 <_dtoa_r+0xf88>
   456a8:	8009883a 	mov	r4,r16
   456ac:	a80b883a 	mov	r5,r21
   456b0:	01800284 	movi	r6,10
   456b4:	000f883a 	mov	r7,zero
   456b8:	00475d80 	call	475d8 <__multadd>
   456bc:	d9000e17 	ldw	r4,56(sp)
   456c0:	102b883a 	mov	r21,r2
   456c4:	d9000915 	stw	r4,36(sp)
   456c8:	003d5106 	br	44c10 <_dtoa_r+0xb20>
   456cc:	04800084 	movi	r18,2
   456d0:	003b9a06 	br	4453c <_dtoa_r+0x44c>
   456d4:	d8c01317 	ldw	r3,76(sp)
   456d8:	d8c00615 	stw	r3,24(sp)
   456dc:	003ccb06 	br	44a0c <_dtoa_r+0x91c>
   456e0:	d8c01317 	ldw	r3,76(sp)
   456e4:	d8c00615 	stw	r3,24(sp)
   456e8:	003c2206 	br	44774 <_dtoa_r+0x684>
   456ec:	20fd3826 	beq	r4,r3,44bd0 <_dtoa_r+0xae0>
   456f0:	00c00f04 	movi	r3,60
   456f4:	1885c83a 	sub	r2,r3,r2
   456f8:	003da906 	br	44da0 <_dtoa_r+0xcb0>
   456fc:	000b883a 	mov	r5,zero
   45700:	003b5406 	br	44454 <_dtoa_r+0x364>
   45704:	04c00044 	movi	r19,1
   45708:	003b3b06 	br	443f8 <_dtoa_r+0x308>

0004570c <_fflush_r>:
   4570c:	defffb04 	addi	sp,sp,-20
   45710:	dcc00315 	stw	r19,12(sp)
   45714:	dc400115 	stw	r17,4(sp)
   45718:	dfc00415 	stw	ra,16(sp)
   4571c:	dc800215 	stw	r18,8(sp)
   45720:	dc000015 	stw	r16,0(sp)
   45724:	2027883a 	mov	r19,r4
   45728:	2823883a 	mov	r17,r5
   4572c:	20000226 	beq	r4,zero,45738 <_fflush_r+0x2c>
   45730:	20800e17 	ldw	r2,56(r4)
   45734:	10005726 	beq	r2,zero,45894 <_fflush_r+0x188>
   45738:	8880030b 	ldhu	r2,12(r17)
   4573c:	10c0020c 	andi	r3,r2,8
   45740:	18ffffcc 	andi	r3,r3,65535
   45744:	18e0001c 	xori	r3,r3,32768
   45748:	18e00004 	addi	r3,r3,-32768
   4574c:	1800311e 	bne	r3,zero,45814 <_fflush_r+0x108>
   45750:	89000117 	ldw	r4,4(r17)
   45754:	10c20014 	ori	r3,r2,2048
   45758:	88c0030d 	sth	r3,12(r17)
   4575c:	180b883a 	mov	r5,r3
   45760:	0100520e 	bge	zero,r4,458ac <_fflush_r+0x1a0>
   45764:	88c00a17 	ldw	r3,40(r17)
   45768:	18002226 	beq	r3,zero,457f4 <_fflush_r+0xe8>
   4576c:	1084000c 	andi	r2,r2,4096
   45770:	10bfffcc 	andi	r2,r2,65535
   45774:	10a0001c 	xori	r2,r2,32768
   45778:	10a00004 	addi	r2,r2,-32768
   4577c:	10004e26 	beq	r2,zero,458b8 <_fflush_r+0x1ac>
   45780:	8c001417 	ldw	r16,80(r17)
   45784:	2940010c 	andi	r5,r5,4
   45788:	297fffcc 	andi	r5,r5,65535
   4578c:	2960001c 	xori	r5,r5,32768
   45790:	29600004 	addi	r5,r5,-32768
   45794:	28000626 	beq	r5,zero,457b0 <_fflush_r+0xa4>
   45798:	89000117 	ldw	r4,4(r17)
   4579c:	88800c17 	ldw	r2,48(r17)
   457a0:	8121c83a 	sub	r16,r16,r4
   457a4:	10000226 	beq	r2,zero,457b0 <_fflush_r+0xa4>
   457a8:	88800f17 	ldw	r2,60(r17)
   457ac:	80a1c83a 	sub	r16,r16,r2
   457b0:	89400717 	ldw	r5,28(r17)
   457b4:	9809883a 	mov	r4,r19
   457b8:	800d883a 	mov	r6,r16
   457bc:	000f883a 	mov	r7,zero
   457c0:	183ee83a 	callr	r3
   457c4:	8080281e 	bne	r16,r2,45868 <_fflush_r+0x15c>
   457c8:	8880030b 	ldhu	r2,12(r17)
   457cc:	88c00417 	ldw	r3,16(r17)
   457d0:	88000115 	stw	zero,4(r17)
   457d4:	113dffcc 	andi	r4,r2,63487
   457d8:	1084000c 	andi	r2,r2,4096
   457dc:	10bfffcc 	andi	r2,r2,65535
   457e0:	10a0001c 	xori	r2,r2,32768
   457e4:	8900030d 	sth	r4,12(r17)
   457e8:	88c00015 	stw	r3,0(r17)
   457ec:	10a00004 	addi	r2,r2,-32768
   457f0:	10002c1e 	bne	r2,zero,458a4 <_fflush_r+0x198>
   457f4:	0005883a 	mov	r2,zero
   457f8:	dfc00417 	ldw	ra,16(sp)
   457fc:	dcc00317 	ldw	r19,12(sp)
   45800:	dc800217 	ldw	r18,8(sp)
   45804:	dc400117 	ldw	r17,4(sp)
   45808:	dc000017 	ldw	r16,0(sp)
   4580c:	dec00504 	addi	sp,sp,20
   45810:	f800283a 	ret
   45814:	8c800417 	ldw	r18,16(r17)
   45818:	903ff626 	beq	r18,zero,457f4 <_fflush_r+0xe8>
   4581c:	8c000017 	ldw	r16,0(r17)
   45820:	108000cc 	andi	r2,r2,3
   45824:	8c800015 	stw	r18,0(r17)
   45828:	84a1c83a 	sub	r16,r16,r18
   4582c:	10001b1e 	bne	r2,zero,4589c <_fflush_r+0x190>
   45830:	88800517 	ldw	r2,20(r17)
   45834:	88800215 	stw	r2,8(r17)
   45838:	04000316 	blt	zero,r16,45848 <_fflush_r+0x13c>
   4583c:	003fed06 	br	457f4 <_fflush_r+0xe8>
   45840:	90a5883a 	add	r18,r18,r2
   45844:	043feb0e 	bge	zero,r16,457f4 <_fflush_r+0xe8>
   45848:	88800917 	ldw	r2,36(r17)
   4584c:	89400717 	ldw	r5,28(r17)
   45850:	800f883a 	mov	r7,r16
   45854:	900d883a 	mov	r6,r18
   45858:	9809883a 	mov	r4,r19
   4585c:	103ee83a 	callr	r2
   45860:	80a1c83a 	sub	r16,r16,r2
   45864:	00bff616 	blt	zero,r2,45840 <_fflush_r+0x134>
   45868:	88c0030b 	ldhu	r3,12(r17)
   4586c:	00bfffc4 	movi	r2,-1
   45870:	18c01014 	ori	r3,r3,64
   45874:	88c0030d 	sth	r3,12(r17)
   45878:	dfc00417 	ldw	ra,16(sp)
   4587c:	dcc00317 	ldw	r19,12(sp)
   45880:	dc800217 	ldw	r18,8(sp)
   45884:	dc400117 	ldw	r17,4(sp)
   45888:	dc000017 	ldw	r16,0(sp)
   4588c:	dec00504 	addi	sp,sp,20
   45890:	f800283a 	ret
   45894:	00459c80 	call	459c8 <__sinit>
   45898:	003fa706 	br	45738 <_fflush_r+0x2c>
   4589c:	0005883a 	mov	r2,zero
   458a0:	003fe406 	br	45834 <_fflush_r+0x128>
   458a4:	8c001415 	stw	r16,80(r17)
   458a8:	003fd206 	br	457f4 <_fflush_r+0xe8>
   458ac:	88c00f17 	ldw	r3,60(r17)
   458b0:	00ffac16 	blt	zero,r3,45764 <_fflush_r+0x58>
   458b4:	003fcf06 	br	457f4 <_fflush_r+0xe8>
   458b8:	89400717 	ldw	r5,28(r17)
   458bc:	9809883a 	mov	r4,r19
   458c0:	000d883a 	mov	r6,zero
   458c4:	01c00044 	movi	r7,1
   458c8:	183ee83a 	callr	r3
   458cc:	1021883a 	mov	r16,r2
   458d0:	00bfffc4 	movi	r2,-1
   458d4:	80800326 	beq	r16,r2,458e4 <_fflush_r+0x1d8>
   458d8:	8940030b 	ldhu	r5,12(r17)
   458dc:	88c00a17 	ldw	r3,40(r17)
   458e0:	003fa806 	br	45784 <_fflush_r+0x78>
   458e4:	98c00017 	ldw	r3,0(r19)
   458e8:	00800744 	movi	r2,29
   458ec:	18bfde1e 	bne	r3,r2,45868 <_fflush_r+0x15c>
   458f0:	003fc006 	br	457f4 <_fflush_r+0xe8>

000458f4 <fflush>:
   458f4:	200b883a 	mov	r5,r4
   458f8:	20000426 	beq	r4,zero,4590c <fflush+0x18>
   458fc:	00800174 	movhi	r2,5
   45900:	10bcff04 	addi	r2,r2,-3076
   45904:	11000017 	ldw	r4,0(r2)
   45908:	004570c1 	jmpi	4570c <_fflush_r>
   4590c:	00800174 	movhi	r2,5
   45910:	10bcfe04 	addi	r2,r2,-3080
   45914:	11000017 	ldw	r4,0(r2)
   45918:	01400134 	movhi	r5,4
   4591c:	2955c304 	addi	r5,r5,22284
   45920:	00465a81 	jmpi	465a8 <_fwalk_reent>

00045924 <__fp_lock>:
   45924:	0005883a 	mov	r2,zero
   45928:	f800283a 	ret

0004592c <__fp_unlock>:
   4592c:	0005883a 	mov	r2,zero
   45930:	f800283a 	ret

00045934 <_cleanup_r>:
   45934:	01400174 	movhi	r5,5
   45938:	29643604 	addi	r5,r5,-28456
   4593c:	00465001 	jmpi	46500 <_fwalk>

00045940 <__sfmoreglue>:
   45940:	defffc04 	addi	sp,sp,-16
   45944:	dc800215 	stw	r18,8(sp)
   45948:	2825883a 	mov	r18,r5
   4594c:	dc000015 	stw	r16,0(sp)
   45950:	01401704 	movi	r5,92
   45954:	2021883a 	mov	r16,r4
   45958:	9009883a 	mov	r4,r18
   4595c:	dfc00315 	stw	ra,12(sp)
   45960:	dc400115 	stw	r17,4(sp)
   45964:	0041a580 	call	41a58 <__mulsi3>
   45968:	8009883a 	mov	r4,r16
   4596c:	11400304 	addi	r5,r2,12
   45970:	1023883a 	mov	r17,r2
   45974:	00468e40 	call	468e4 <_malloc_r>
   45978:	1021883a 	mov	r16,r2
   4597c:	10000726 	beq	r2,zero,4599c <__sfmoreglue+0x5c>
   45980:	11000304 	addi	r4,r2,12
   45984:	10000015 	stw	zero,0(r2)
   45988:	14800115 	stw	r18,4(r2)
   4598c:	11000215 	stw	r4,8(r2)
   45990:	000b883a 	mov	r5,zero
   45994:	880d883a 	mov	r6,r17
   45998:	004742c0 	call	4742c <memset>
   4599c:	8005883a 	mov	r2,r16
   459a0:	dfc00317 	ldw	ra,12(sp)
   459a4:	dc800217 	ldw	r18,8(sp)
   459a8:	dc400117 	ldw	r17,4(sp)
   459ac:	dc000017 	ldw	r16,0(sp)
   459b0:	dec00404 	addi	sp,sp,16
   459b4:	f800283a 	ret

000459b8 <_cleanup>:
   459b8:	00800174 	movhi	r2,5
   459bc:	10bcfe04 	addi	r2,r2,-3080
   459c0:	11000017 	ldw	r4,0(r2)
   459c4:	00459341 	jmpi	45934 <_cleanup_r>

000459c8 <__sinit>:
   459c8:	20800e17 	ldw	r2,56(r4)
   459cc:	1000401e 	bne	r2,zero,45ad0 <__sinit+0x108>
   459d0:	21400117 	ldw	r5,4(r4)
   459d4:	01800134 	movhi	r6,4
   459d8:	31964d04 	addi	r6,r6,22836
   459dc:	20c00217 	ldw	r3,8(r4)
   459e0:	21800f15 	stw	r6,60(r4)
   459e4:	2080bb04 	addi	r2,r4,748
   459e8:	02400044 	movi	r9,1
   459ec:	018000c4 	movi	r6,3
   459f0:	2180b915 	stw	r6,740(r4)
   459f4:	2080ba15 	stw	r2,744(r4)
   459f8:	22400e15 	stw	r9,56(r4)
   459fc:	20800317 	ldw	r2,12(r4)
   45a00:	2000b815 	stw	zero,736(r4)
   45a04:	02000174 	movhi	r8,5
   45a08:	42230704 	addi	r8,r8,-29668
   45a0c:	01c00174 	movhi	r7,5
   45a10:	39e31c04 	addi	r7,r7,-29584
   45a14:	01800174 	movhi	r6,5
   45a18:	31a33e04 	addi	r6,r6,-29448
   45a1c:	01000174 	movhi	r4,5
   45a20:	21235504 	addi	r4,r4,-29356
   45a24:	02800104 	movi	r10,4
   45a28:	28000015 	stw	zero,0(r5)
   45a2c:	28000115 	stw	zero,4(r5)
   45a30:	28000215 	stw	zero,8(r5)
   45a34:	2a80030d 	sth	r10,12(r5)
   45a38:	2800038d 	sth	zero,14(r5)
   45a3c:	28000415 	stw	zero,16(r5)
   45a40:	28000515 	stw	zero,20(r5)
   45a44:	28000615 	stw	zero,24(r5)
   45a48:	29400715 	stw	r5,28(r5)
   45a4c:	2a000815 	stw	r8,32(r5)
   45a50:	29c00915 	stw	r7,36(r5)
   45a54:	29800a15 	stw	r6,40(r5)
   45a58:	29000b15 	stw	r4,44(r5)
   45a5c:	01400284 	movi	r5,10
   45a60:	18000015 	stw	zero,0(r3)
   45a64:	18000115 	stw	zero,4(r3)
   45a68:	18000215 	stw	zero,8(r3)
   45a6c:	1940030d 	sth	r5,12(r3)
   45a70:	1a40038d 	sth	r9,14(r3)
   45a74:	18000415 	stw	zero,16(r3)
   45a78:	18000515 	stw	zero,20(r3)
   45a7c:	18000615 	stw	zero,24(r3)
   45a80:	18c00715 	stw	r3,28(r3)
   45a84:	1a000815 	stw	r8,32(r3)
   45a88:	19c00915 	stw	r7,36(r3)
   45a8c:	19800a15 	stw	r6,40(r3)
   45a90:	19000b15 	stw	r4,44(r3)
   45a94:	00c00484 	movi	r3,18
   45a98:	10c0030d 	sth	r3,12(r2)
   45a9c:	00c00084 	movi	r3,2
   45aa0:	10000015 	stw	zero,0(r2)
   45aa4:	10000115 	stw	zero,4(r2)
   45aa8:	10000215 	stw	zero,8(r2)
   45aac:	10c0038d 	sth	r3,14(r2)
   45ab0:	10000415 	stw	zero,16(r2)
   45ab4:	10000515 	stw	zero,20(r2)
   45ab8:	10000615 	stw	zero,24(r2)
   45abc:	10800715 	stw	r2,28(r2)
   45ac0:	12000815 	stw	r8,32(r2)
   45ac4:	11c00915 	stw	r7,36(r2)
   45ac8:	11800a15 	stw	r6,40(r2)
   45acc:	11000b15 	stw	r4,44(r2)
   45ad0:	f800283a 	ret

00045ad4 <__sfp>:
   45ad4:	defffc04 	addi	sp,sp,-16
   45ad8:	00800174 	movhi	r2,5
   45adc:	10bcfe04 	addi	r2,r2,-3080
   45ae0:	dc400115 	stw	r17,4(sp)
   45ae4:	14400017 	ldw	r17,0(r2)
   45ae8:	dc800215 	stw	r18,8(sp)
   45aec:	dfc00315 	stw	ra,12(sp)
   45af0:	88800e17 	ldw	r2,56(r17)
   45af4:	dc000015 	stw	r16,0(sp)
   45af8:	2025883a 	mov	r18,r4
   45afc:	10002826 	beq	r2,zero,45ba0 <__sfp+0xcc>
   45b00:	8c40b804 	addi	r17,r17,736
   45b04:	043fffc4 	movi	r16,-1
   45b08:	89400117 	ldw	r5,4(r17)
   45b0c:	88800217 	ldw	r2,8(r17)
   45b10:	297fffc4 	addi	r5,r5,-1
   45b14:	28000a16 	blt	r5,zero,45b40 <__sfp+0x6c>
   45b18:	10c0030f 	ldh	r3,12(r2)
   45b1c:	18000c26 	beq	r3,zero,45b50 <__sfp+0x7c>
   45b20:	10c01a04 	addi	r3,r2,104
   45b24:	00000206 	br	45b30 <__sfp+0x5c>
   45b28:	19bfe90f 	ldh	r6,-92(r3)
   45b2c:	30000826 	beq	r6,zero,45b50 <__sfp+0x7c>
   45b30:	297fffc4 	addi	r5,r5,-1
   45b34:	18bffd04 	addi	r2,r3,-12
   45b38:	18c01704 	addi	r3,r3,92
   45b3c:	2c3ffa1e 	bne	r5,r16,45b28 <__sfp+0x54>
   45b40:	88800017 	ldw	r2,0(r17)
   45b44:	10001926 	beq	r2,zero,45bac <__sfp+0xd8>
   45b48:	1023883a 	mov	r17,r2
   45b4c:	003fee06 	br	45b08 <__sfp+0x34>
   45b50:	00ffffc4 	movi	r3,-1
   45b54:	10c0038d 	sth	r3,14(r2)
   45b58:	00c00044 	movi	r3,1
   45b5c:	10c0030d 	sth	r3,12(r2)
   45b60:	10000015 	stw	zero,0(r2)
   45b64:	10000215 	stw	zero,8(r2)
   45b68:	10000115 	stw	zero,4(r2)
   45b6c:	10000415 	stw	zero,16(r2)
   45b70:	10000515 	stw	zero,20(r2)
   45b74:	10000615 	stw	zero,24(r2)
   45b78:	10000c15 	stw	zero,48(r2)
   45b7c:	10000d15 	stw	zero,52(r2)
   45b80:	10001115 	stw	zero,68(r2)
   45b84:	10001215 	stw	zero,72(r2)
   45b88:	dfc00317 	ldw	ra,12(sp)
   45b8c:	dc800217 	ldw	r18,8(sp)
   45b90:	dc400117 	ldw	r17,4(sp)
   45b94:	dc000017 	ldw	r16,0(sp)
   45b98:	dec00404 	addi	sp,sp,16
   45b9c:	f800283a 	ret
   45ba0:	8809883a 	mov	r4,r17
   45ba4:	00459c80 	call	459c8 <__sinit>
   45ba8:	003fd506 	br	45b00 <__sfp+0x2c>
   45bac:	9009883a 	mov	r4,r18
   45bb0:	01400104 	movi	r5,4
   45bb4:	00459400 	call	45940 <__sfmoreglue>
   45bb8:	88800015 	stw	r2,0(r17)
   45bbc:	103fe21e 	bne	r2,zero,45b48 <__sfp+0x74>
   45bc0:	00800304 	movi	r2,12
   45bc4:	90800015 	stw	r2,0(r18)
   45bc8:	0005883a 	mov	r2,zero
   45bcc:	003fee06 	br	45b88 <__sfp+0xb4>

00045bd0 <__sfp_lock_acquire>:
   45bd0:	f800283a 	ret

00045bd4 <__sfp_lock_release>:
   45bd4:	f800283a 	ret

00045bd8 <__sinit_lock_acquire>:
   45bd8:	f800283a 	ret

00045bdc <__sinit_lock_release>:
   45bdc:	f800283a 	ret

00045be0 <__fp_lock_all>:
   45be0:	00800174 	movhi	r2,5
   45be4:	10bcff04 	addi	r2,r2,-3076
   45be8:	11000017 	ldw	r4,0(r2)
   45bec:	01400134 	movhi	r5,4
   45bf0:	29564904 	addi	r5,r5,22820
   45bf4:	00465001 	jmpi	46500 <_fwalk>

00045bf8 <__fp_unlock_all>:
   45bf8:	00800174 	movhi	r2,5
   45bfc:	10bcff04 	addi	r2,r2,-3076
   45c00:	11000017 	ldw	r4,0(r2)
   45c04:	01400134 	movhi	r5,4
   45c08:	29564b04 	addi	r5,r5,22828
   45c0c:	00465001 	jmpi	46500 <_fwalk>

00045c10 <_malloc_trim_r>:
   45c10:	defffb04 	addi	sp,sp,-20
   45c14:	dcc00315 	stw	r19,12(sp)
   45c18:	dc800215 	stw	r18,8(sp)
   45c1c:	dc400115 	stw	r17,4(sp)
   45c20:	dc000015 	stw	r16,0(sp)
   45c24:	2827883a 	mov	r19,r5
   45c28:	dfc00415 	stw	ra,16(sp)
   45c2c:	04400174 	movhi	r17,5
   45c30:	8c777a04 	addi	r17,r17,-8728
   45c34:	2021883a 	mov	r16,r4
   45c38:	004ae940 	call	4ae94 <__malloc_lock>
   45c3c:	88800217 	ldw	r2,8(r17)
   45c40:	14800117 	ldw	r18,4(r2)
   45c44:	00bfff04 	movi	r2,-4
   45c48:	90a4703a 	and	r18,r18,r2
   45c4c:	9083fbc4 	addi	r2,r18,4079
   45c50:	14e7c83a 	sub	r19,r2,r19
   45c54:	9826d33a 	srli	r19,r19,12
   45c58:	0083ffc4 	movi	r2,4095
   45c5c:	9cffffc4 	addi	r19,r19,-1
   45c60:	9826933a 	slli	r19,r19,12
   45c64:	14c0060e 	bge	r2,r19,45c80 <_malloc_trim_r+0x70>
   45c68:	8009883a 	mov	r4,r16
   45c6c:	000b883a 	mov	r5,zero
   45c70:	0048bb80 	call	48bb8 <_sbrk_r>
   45c74:	88c00217 	ldw	r3,8(r17)
   45c78:	1c87883a 	add	r3,r3,r18
   45c7c:	10c00a26 	beq	r2,r3,45ca8 <_malloc_trim_r+0x98>
   45c80:	8009883a 	mov	r4,r16
   45c84:	004aeb40 	call	4aeb4 <__malloc_unlock>
   45c88:	0005883a 	mov	r2,zero
   45c8c:	dfc00417 	ldw	ra,16(sp)
   45c90:	dcc00317 	ldw	r19,12(sp)
   45c94:	dc800217 	ldw	r18,8(sp)
   45c98:	dc400117 	ldw	r17,4(sp)
   45c9c:	dc000017 	ldw	r16,0(sp)
   45ca0:	dec00504 	addi	sp,sp,20
   45ca4:	f800283a 	ret
   45ca8:	8009883a 	mov	r4,r16
   45cac:	04cbc83a 	sub	r5,zero,r19
   45cb0:	0048bb80 	call	48bb8 <_sbrk_r>
   45cb4:	00ffffc4 	movi	r3,-1
   45cb8:	10c01326 	beq	r2,r3,45d08 <_malloc_trim_r+0xf8>
   45cbc:	00800174 	movhi	r2,5
   45cc0:	1083b204 	addi	r2,r2,3784
   45cc4:	11000017 	ldw	r4,0(r2)
   45cc8:	88c00217 	ldw	r3,8(r17)
   45ccc:	94e5c83a 	sub	r18,r18,r19
   45cd0:	94800054 	ori	r18,r18,1
   45cd4:	24e7c83a 	sub	r19,r4,r19
   45cd8:	1c800115 	stw	r18,4(r3)
   45cdc:	8009883a 	mov	r4,r16
   45ce0:	14c00015 	stw	r19,0(r2)
   45ce4:	004aeb40 	call	4aeb4 <__malloc_unlock>
   45ce8:	00800044 	movi	r2,1
   45cec:	dfc00417 	ldw	ra,16(sp)
   45cf0:	dcc00317 	ldw	r19,12(sp)
   45cf4:	dc800217 	ldw	r18,8(sp)
   45cf8:	dc400117 	ldw	r17,4(sp)
   45cfc:	dc000017 	ldw	r16,0(sp)
   45d00:	dec00504 	addi	sp,sp,20
   45d04:	f800283a 	ret
   45d08:	8009883a 	mov	r4,r16
   45d0c:	000b883a 	mov	r5,zero
   45d10:	0048bb80 	call	48bb8 <_sbrk_r>
   45d14:	88c00217 	ldw	r3,8(r17)
   45d18:	014003c4 	movi	r5,15
   45d1c:	10c9c83a 	sub	r4,r2,r3
   45d20:	293fd70e 	bge	r5,r4,45c80 <_malloc_trim_r+0x70>
   45d24:	01400174 	movhi	r5,5
   45d28:	297d0104 	addi	r5,r5,-3068
   45d2c:	29400017 	ldw	r5,0(r5)
   45d30:	21000054 	ori	r4,r4,1
   45d34:	19000115 	stw	r4,4(r3)
   45d38:	1145c83a 	sub	r2,r2,r5
   45d3c:	01400174 	movhi	r5,5
   45d40:	2943b204 	addi	r5,r5,3784
   45d44:	28800015 	stw	r2,0(r5)
   45d48:	003fcd06 	br	45c80 <_malloc_trim_r+0x70>

00045d4c <_free_r>:
   45d4c:	defffd04 	addi	sp,sp,-12
   45d50:	dc400115 	stw	r17,4(sp)
   45d54:	dc000015 	stw	r16,0(sp)
   45d58:	dfc00215 	stw	ra,8(sp)
   45d5c:	2821883a 	mov	r16,r5
   45d60:	2023883a 	mov	r17,r4
   45d64:	28004b26 	beq	r5,zero,45e94 <_free_r+0x148>
   45d68:	004ae940 	call	4ae94 <__malloc_lock>
   45d6c:	823fff17 	ldw	r8,-4(r16)
   45d70:	00bfff84 	movi	r2,-2
   45d74:	81bffe04 	addi	r6,r16,-8
   45d78:	4084703a 	and	r2,r8,r2
   45d7c:	3087883a 	add	r3,r6,r2
   45d80:	01400174 	movhi	r5,5
   45d84:	29777a04 	addi	r5,r5,-8728
   45d88:	1a400117 	ldw	r9,4(r3)
   45d8c:	29000217 	ldw	r4,8(r5)
   45d90:	01ffff04 	movi	r7,-4
   45d94:	49ce703a 	and	r7,r9,r7
   45d98:	20c06526 	beq	r4,r3,45f30 <_free_r+0x1e4>
   45d9c:	19c00115 	stw	r7,4(r3)
   45da0:	4200004c 	andi	r8,r8,1
   45da4:	40003026 	beq	r8,zero,45e68 <_free_r+0x11c>
   45da8:	0009883a 	mov	r4,zero
   45dac:	19d1883a 	add	r8,r3,r7
   45db0:	42000117 	ldw	r8,4(r8)
   45db4:	4200004c 	andi	r8,r8,1
   45db8:	4000061e 	bne	r8,zero,45dd4 <_free_r+0x88>
   45dbc:	11c5883a 	add	r2,r2,r7
   45dc0:	19c00217 	ldw	r7,8(r3)
   45dc4:	20004e26 	beq	r4,zero,45f00 <_free_r+0x1b4>
   45dc8:	18c00317 	ldw	r3,12(r3)
   45dcc:	38c00315 	stw	r3,12(r7)
   45dd0:	19c00215 	stw	r7,8(r3)
   45dd4:	11c00054 	ori	r7,r2,1
   45dd8:	3087883a 	add	r3,r6,r2
   45ddc:	31c00115 	stw	r7,4(r6)
   45de0:	18800015 	stw	r2,0(r3)
   45de4:	20001a1e 	bne	r4,zero,45e50 <_free_r+0x104>
   45de8:	00c07fc4 	movi	r3,511
   45dec:	18802e2e 	bgeu	r3,r2,45ea8 <_free_r+0x15c>
   45df0:	1006d27a 	srli	r3,r2,9
   45df4:	01000104 	movi	r4,4
   45df8:	20c06636 	bltu	r4,r3,45f94 <_free_r+0x248>
   45dfc:	1008d1ba 	srli	r4,r2,6
   45e00:	21000e04 	addi	r4,r4,56
   45e04:	210f883a 	add	r7,r4,r4
   45e08:	39cf883a 	add	r7,r7,r7
   45e0c:	39cf883a 	add	r7,r7,r7
   45e10:	29cf883a 	add	r7,r5,r7
   45e14:	38c00217 	ldw	r3,8(r7)
   45e18:	01400174 	movhi	r5,5
   45e1c:	29777a04 	addi	r5,r5,-8728
   45e20:	19c06126 	beq	r3,r7,45fa8 <_free_r+0x25c>
   45e24:	013fff04 	movi	r4,-4
   45e28:	19400117 	ldw	r5,4(r3)
   45e2c:	290a703a 	and	r5,r5,r4
   45e30:	1140022e 	bgeu	r2,r5,45e3c <_free_r+0xf0>
   45e34:	18c00217 	ldw	r3,8(r3)
   45e38:	38fffb1e 	bne	r7,r3,45e28 <_free_r+0xdc>
   45e3c:	18800317 	ldw	r2,12(r3)
   45e40:	30800315 	stw	r2,12(r6)
   45e44:	30c00215 	stw	r3,8(r6)
   45e48:	11800215 	stw	r6,8(r2)
   45e4c:	19800315 	stw	r6,12(r3)
   45e50:	8809883a 	mov	r4,r17
   45e54:	dfc00217 	ldw	ra,8(sp)
   45e58:	dc400117 	ldw	r17,4(sp)
   45e5c:	dc000017 	ldw	r16,0(sp)
   45e60:	dec00304 	addi	sp,sp,12
   45e64:	004aeb41 	jmpi	4aeb4 <__malloc_unlock>
   45e68:	813ffe17 	ldw	r4,-8(r16)
   45e6c:	2a400204 	addi	r9,r5,8
   45e70:	310dc83a 	sub	r6,r6,r4
   45e74:	32000217 	ldw	r8,8(r6)
   45e78:	1105883a 	add	r2,r2,r4
   45e7c:	42404326 	beq	r8,r9,45f8c <_free_r+0x240>
   45e80:	32400317 	ldw	r9,12(r6)
   45e84:	0009883a 	mov	r4,zero
   45e88:	42400315 	stw	r9,12(r8)
   45e8c:	4a000215 	stw	r8,8(r9)
   45e90:	003fc606 	br	45dac <_free_r+0x60>
   45e94:	dfc00217 	ldw	ra,8(sp)
   45e98:	dc400117 	ldw	r17,4(sp)
   45e9c:	dc000017 	ldw	r16,0(sp)
   45ea0:	dec00304 	addi	sp,sp,12
   45ea4:	f800283a 	ret
   45ea8:	1004d0fa 	srli	r2,r2,3
   45eac:	02000044 	movi	r8,1
   45eb0:	29c00117 	ldw	r7,4(r5)
   45eb4:	1087883a 	add	r3,r2,r2
   45eb8:	18c7883a 	add	r3,r3,r3
   45ebc:	1005d0ba 	srai	r2,r2,2
   45ec0:	18c7883a 	add	r3,r3,r3
   45ec4:	28c7883a 	add	r3,r5,r3
   45ec8:	19000217 	ldw	r4,8(r3)
   45ecc:	4084983a 	sll	r2,r8,r2
   45ed0:	30c00315 	stw	r3,12(r6)
   45ed4:	31000215 	stw	r4,8(r6)
   45ed8:	11c4b03a 	or	r2,r2,r7
   45edc:	21800315 	stw	r6,12(r4)
   45ee0:	8809883a 	mov	r4,r17
   45ee4:	28800115 	stw	r2,4(r5)
   45ee8:	19800215 	stw	r6,8(r3)
   45eec:	dfc00217 	ldw	ra,8(sp)
   45ef0:	dc400117 	ldw	r17,4(sp)
   45ef4:	dc000017 	ldw	r16,0(sp)
   45ef8:	dec00304 	addi	sp,sp,12
   45efc:	004aeb41 	jmpi	4aeb4 <__malloc_unlock>
   45f00:	02000174 	movhi	r8,5
   45f04:	42377c04 	addi	r8,r8,-8720
   45f08:	3a3faf1e 	bne	r7,r8,45dc8 <_free_r+0x7c>
   45f0c:	29800515 	stw	r6,20(r5)
   45f10:	29800415 	stw	r6,16(r5)
   45f14:	11000054 	ori	r4,r2,1
   45f18:	3087883a 	add	r3,r6,r2
   45f1c:	31c00315 	stw	r7,12(r6)
   45f20:	31c00215 	stw	r7,8(r6)
   45f24:	31000115 	stw	r4,4(r6)
   45f28:	18800015 	stw	r2,0(r3)
   45f2c:	003fc806 	br	45e50 <_free_r+0x104>
   45f30:	4200004c 	andi	r8,r8,1
   45f34:	3885883a 	add	r2,r7,r2
   45f38:	4000071e 	bne	r8,zero,45f58 <_free_r+0x20c>
   45f3c:	81fffe17 	ldw	r7,-8(r16)
   45f40:	31cdc83a 	sub	r6,r6,r7
   45f44:	30c00317 	ldw	r3,12(r6)
   45f48:	31000217 	ldw	r4,8(r6)
   45f4c:	11c5883a 	add	r2,r2,r7
   45f50:	20c00315 	stw	r3,12(r4)
   45f54:	19000215 	stw	r4,8(r3)
   45f58:	00c00174 	movhi	r3,5
   45f5c:	18fd0204 	addi	r3,r3,-3064
   45f60:	18c00017 	ldw	r3,0(r3)
   45f64:	11000054 	ori	r4,r2,1
   45f68:	31000115 	stw	r4,4(r6)
   45f6c:	29800215 	stw	r6,8(r5)
   45f70:	10ffb736 	bltu	r2,r3,45e50 <_free_r+0x104>
   45f74:	00800174 	movhi	r2,5
   45f78:	1083a804 	addi	r2,r2,3744
   45f7c:	11400017 	ldw	r5,0(r2)
   45f80:	8809883a 	mov	r4,r17
   45f84:	0045c100 	call	45c10 <_malloc_trim_r>
   45f88:	003fb106 	br	45e50 <_free_r+0x104>
   45f8c:	01000044 	movi	r4,1
   45f90:	003f8606 	br	45dac <_free_r+0x60>
   45f94:	01000504 	movi	r4,20
   45f98:	20c00b36 	bltu	r4,r3,45fc8 <_free_r+0x27c>
   45f9c:	190016c4 	addi	r4,r3,91
   45fa0:	210f883a 	add	r7,r4,r4
   45fa4:	003f9806 	br	45e08 <_free_r+0xbc>
   45fa8:	2009d0ba 	srai	r4,r4,2
   45fac:	00800044 	movi	r2,1
   45fb0:	29c00117 	ldw	r7,4(r5)
   45fb4:	1108983a 	sll	r4,r2,r4
   45fb8:	1805883a 	mov	r2,r3
   45fbc:	21c8b03a 	or	r4,r4,r7
   45fc0:	29000115 	stw	r4,4(r5)
   45fc4:	003f9e06 	br	45e40 <_free_r+0xf4>
   45fc8:	01001504 	movi	r4,84
   45fcc:	20c00436 	bltu	r4,r3,45fe0 <_free_r+0x294>
   45fd0:	1008d33a 	srli	r4,r2,12
   45fd4:	21001b84 	addi	r4,r4,110
   45fd8:	210f883a 	add	r7,r4,r4
   45fdc:	003f8a06 	br	45e08 <_free_r+0xbc>
   45fe0:	01005504 	movi	r4,340
   45fe4:	20c00436 	bltu	r4,r3,45ff8 <_free_r+0x2ac>
   45fe8:	1008d3fa 	srli	r4,r2,15
   45fec:	21001dc4 	addi	r4,r4,119
   45ff0:	210f883a 	add	r7,r4,r4
   45ff4:	003f8406 	br	45e08 <_free_r+0xbc>
   45ff8:	01015504 	movi	r4,1364
   45ffc:	20c00436 	bltu	r4,r3,46010 <_free_r+0x2c4>
   46000:	1008d4ba 	srli	r4,r2,18
   46004:	21001f04 	addi	r4,r4,124
   46008:	210f883a 	add	r7,r4,r4
   4600c:	003f7e06 	br	45e08 <_free_r+0xbc>
   46010:	01c03f04 	movi	r7,252
   46014:	01001f84 	movi	r4,126
   46018:	003f7b06 	br	45e08 <_free_r+0xbc>

0004601c <__sfvwrite_r>:
   4601c:	30800217 	ldw	r2,8(r6)
   46020:	defff504 	addi	sp,sp,-44
   46024:	dd400615 	stw	r21,24(sp)
   46028:	dd000515 	stw	r20,20(sp)
   4602c:	dc000115 	stw	r16,4(sp)
   46030:	dfc00a15 	stw	ra,40(sp)
   46034:	df000915 	stw	fp,36(sp)
   46038:	ddc00815 	stw	r23,32(sp)
   4603c:	dd800715 	stw	r22,28(sp)
   46040:	dcc00415 	stw	r19,16(sp)
   46044:	dc800315 	stw	r18,12(sp)
   46048:	dc400215 	stw	r17,8(sp)
   4604c:	3029883a 	mov	r20,r6
   46050:	202b883a 	mov	r21,r4
   46054:	2821883a 	mov	r16,r5
   46058:	10002126 	beq	r2,zero,460e0 <__sfvwrite_r+0xc4>
   4605c:	2880030b 	ldhu	r2,12(r5)
   46060:	10c0020c 	andi	r3,r2,8
   46064:	18ffffcc 	andi	r3,r3,65535
   46068:	18e0001c 	xori	r3,r3,32768
   4606c:	18e00004 	addi	r3,r3,-32768
   46070:	18002826 	beq	r3,zero,46114 <__sfvwrite_r+0xf8>
   46074:	28c00417 	ldw	r3,16(r5)
   46078:	18002626 	beq	r3,zero,46114 <__sfvwrite_r+0xf8>
   4607c:	10c0008c 	andi	r3,r2,2
   46080:	18ffffcc 	andi	r3,r3,65535
   46084:	18e0001c 	xori	r3,r3,32768
   46088:	18e00004 	addi	r3,r3,-32768
   4608c:	a4400017 	ldw	r17,0(r20)
   46090:	18002b26 	beq	r3,zero,46140 <__sfvwrite_r+0x124>
   46094:	0027883a 	mov	r19,zero
   46098:	0025883a 	mov	r18,zero
   4609c:	05810004 	movi	r22,1024
   460a0:	980d883a 	mov	r6,r19
   460a4:	a809883a 	mov	r4,r21
   460a8:	90004f26 	beq	r18,zero,461e8 <__sfvwrite_r+0x1cc>
   460ac:	900f883a 	mov	r7,r18
   460b0:	81400717 	ldw	r5,28(r16)
   460b4:	b480012e 	bgeu	r22,r18,460bc <__sfvwrite_r+0xa0>
   460b8:	01c10004 	movi	r7,1024
   460bc:	80800917 	ldw	r2,36(r16)
   460c0:	103ee83a 	callr	r2
   460c4:	0080540e 	bge	zero,r2,46218 <__sfvwrite_r+0x1fc>
   460c8:	a0c00217 	ldw	r3,8(r20)
   460cc:	98a7883a 	add	r19,r19,r2
   460d0:	90a5c83a 	sub	r18,r18,r2
   460d4:	1885c83a 	sub	r2,r3,r2
   460d8:	a0800215 	stw	r2,8(r20)
   460dc:	103ff01e 	bne	r2,zero,460a0 <__sfvwrite_r+0x84>
   460e0:	0005883a 	mov	r2,zero
   460e4:	dfc00a17 	ldw	ra,40(sp)
   460e8:	df000917 	ldw	fp,36(sp)
   460ec:	ddc00817 	ldw	r23,32(sp)
   460f0:	dd800717 	ldw	r22,28(sp)
   460f4:	dd400617 	ldw	r21,24(sp)
   460f8:	dd000517 	ldw	r20,20(sp)
   460fc:	dcc00417 	ldw	r19,16(sp)
   46100:	dc800317 	ldw	r18,12(sp)
   46104:	dc400217 	ldw	r17,8(sp)
   46108:	dc000117 	ldw	r16,4(sp)
   4610c:	dec00b04 	addi	sp,sp,44
   46110:	f800283a 	ret
   46114:	a809883a 	mov	r4,r21
   46118:	800b883a 	mov	r5,r16
   4611c:	0043ba00 	call	43ba0 <__swsetup_r>
   46120:	1000f01e 	bne	r2,zero,464e4 <__sfvwrite_r+0x4c8>
   46124:	8080030b 	ldhu	r2,12(r16)
   46128:	a4400017 	ldw	r17,0(r20)
   4612c:	10c0008c 	andi	r3,r2,2
   46130:	18ffffcc 	andi	r3,r3,65535
   46134:	18e0001c 	xori	r3,r3,32768
   46138:	18e00004 	addi	r3,r3,-32768
   4613c:	183fd51e 	bne	r3,zero,46094 <__sfvwrite_r+0x78>
   46140:	10c0004c 	andi	r3,r2,1
   46144:	002d883a 	mov	r22,zero
   46148:	1800381e 	bne	r3,zero,4622c <__sfvwrite_r+0x210>
   4614c:	0025883a 	mov	r18,zero
   46150:	90002126 	beq	r18,zero,461d8 <__sfvwrite_r+0x1bc>
   46154:	10c0800c 	andi	r3,r2,512
   46158:	18ffffcc 	andi	r3,r3,65535
   4615c:	18e0001c 	xori	r3,r3,32768
   46160:	18e00004 	addi	r3,r3,-32768
   46164:	84c00217 	ldw	r19,8(r16)
   46168:	18006b26 	beq	r3,zero,46318 <__sfvwrite_r+0x2fc>
   4616c:	980f883a 	mov	r7,r19
   46170:	94c08636 	bltu	r18,r19,4638c <__sfvwrite_r+0x370>
   46174:	10c1200c 	andi	r3,r2,1152
   46178:	18009f1e 	bne	r3,zero,463f8 <__sfvwrite_r+0x3dc>
   4617c:	81000017 	ldw	r4,0(r16)
   46180:	982f883a 	mov	r23,r19
   46184:	9039883a 	mov	fp,r18
   46188:	9027883a 	mov	r19,r18
   4618c:	380d883a 	mov	r6,r7
   46190:	b00b883a 	mov	r5,r22
   46194:	d9c00015 	stw	r7,0(sp)
   46198:	00472a00 	call	472a0 <memmove>
   4619c:	d9c00017 	ldw	r7,0(sp)
   461a0:	81000217 	ldw	r4,8(r16)
   461a4:	80800017 	ldw	r2,0(r16)
   461a8:	25efc83a 	sub	r23,r4,r23
   461ac:	11cf883a 	add	r7,r2,r7
   461b0:	85c00215 	stw	r23,8(r16)
   461b4:	81c00015 	stw	r7,0(r16)
   461b8:	a0800217 	ldw	r2,8(r20)
   461bc:	b72d883a 	add	r22,r22,fp
   461c0:	9725c83a 	sub	r18,r18,fp
   461c4:	14e7c83a 	sub	r19,r2,r19
   461c8:	a4c00215 	stw	r19,8(r20)
   461cc:	983fc426 	beq	r19,zero,460e0 <__sfvwrite_r+0xc4>
   461d0:	8080030b 	ldhu	r2,12(r16)
   461d4:	903fdf1e 	bne	r18,zero,46154 <__sfvwrite_r+0x138>
   461d8:	8d800017 	ldw	r22,0(r17)
   461dc:	8c800117 	ldw	r18,4(r17)
   461e0:	8c400204 	addi	r17,r17,8
   461e4:	003fda06 	br	46150 <__sfvwrite_r+0x134>
   461e8:	8cc00017 	ldw	r19,0(r17)
   461ec:	8c800117 	ldw	r18,4(r17)
   461f0:	8c400204 	addi	r17,r17,8
   461f4:	003faa06 	br	460a0 <__sfvwrite_r+0x84>
   461f8:	00485580 	call	48558 <_realloc_r>
   461fc:	102f883a 	mov	r23,r2
   46200:	10009f1e 	bne	r2,zero,46480 <__sfvwrite_r+0x464>
   46204:	81400417 	ldw	r5,16(r16)
   46208:	a809883a 	mov	r4,r21
   4620c:	0045d4c0 	call	45d4c <_free_r>
   46210:	00800304 	movi	r2,12
   46214:	a8800015 	stw	r2,0(r21)
   46218:	80c0030b 	ldhu	r3,12(r16)
   4621c:	00bfffc4 	movi	r2,-1
   46220:	18c01014 	ori	r3,r3,64
   46224:	80c0030d 	sth	r3,12(r16)
   46228:	003fae06 	br	460e4 <__sfvwrite_r+0xc8>
   4622c:	0007883a 	mov	r3,zero
   46230:	0039883a 	mov	fp,zero
   46234:	0025883a 	mov	r18,zero
   46238:	90001e26 	beq	r18,zero,462b4 <__sfvwrite_r+0x298>
   4623c:	18006526 	beq	r3,zero,463d4 <__sfvwrite_r+0x3b8>
   46240:	b02f883a 	mov	r23,r22
   46244:	9580012e 	bgeu	r18,r22,4624c <__sfvwrite_r+0x230>
   46248:	902f883a 	mov	r23,r18
   4624c:	81000017 	ldw	r4,0(r16)
   46250:	80800417 	ldw	r2,16(r16)
   46254:	84c00217 	ldw	r19,8(r16)
   46258:	81c00517 	ldw	r7,20(r16)
   4625c:	1100022e 	bgeu	r2,r4,46268 <__sfvwrite_r+0x24c>
   46260:	99e7883a 	add	r19,r19,r7
   46264:	9dc01816 	blt	r19,r23,462c8 <__sfvwrite_r+0x2ac>
   46268:	b9c03b16 	blt	r23,r7,46358 <__sfvwrite_r+0x33c>
   4626c:	80800917 	ldw	r2,36(r16)
   46270:	81400717 	ldw	r5,28(r16)
   46274:	a809883a 	mov	r4,r21
   46278:	d8c00015 	stw	r3,0(sp)
   4627c:	e00d883a 	mov	r6,fp
   46280:	103ee83a 	callr	r2
   46284:	1027883a 	mov	r19,r2
   46288:	d8c00017 	ldw	r3,0(sp)
   4628c:	00bfe20e 	bge	zero,r2,46218 <__sfvwrite_r+0x1fc>
   46290:	b4edc83a 	sub	r22,r22,r19
   46294:	b0001a26 	beq	r22,zero,46300 <__sfvwrite_r+0x2e4>
   46298:	a0800217 	ldw	r2,8(r20)
   4629c:	e4f9883a 	add	fp,fp,r19
   462a0:	94e5c83a 	sub	r18,r18,r19
   462a4:	14e7c83a 	sub	r19,r2,r19
   462a8:	a4c00215 	stw	r19,8(r20)
   462ac:	983f8c26 	beq	r19,zero,460e0 <__sfvwrite_r+0xc4>
   462b0:	903fe21e 	bne	r18,zero,4623c <__sfvwrite_r+0x220>
   462b4:	8f000017 	ldw	fp,0(r17)
   462b8:	8c800117 	ldw	r18,4(r17)
   462bc:	0007883a 	mov	r3,zero
   462c0:	8c400204 	addi	r17,r17,8
   462c4:	003fdc06 	br	46238 <__sfvwrite_r+0x21c>
   462c8:	e00b883a 	mov	r5,fp
   462cc:	980d883a 	mov	r6,r19
   462d0:	d8c00015 	stw	r3,0(sp)
   462d4:	00472a00 	call	472a0 <memmove>
   462d8:	80800017 	ldw	r2,0(r16)
   462dc:	a809883a 	mov	r4,r21
   462e0:	800b883a 	mov	r5,r16
   462e4:	14c5883a 	add	r2,r2,r19
   462e8:	80800015 	stw	r2,0(r16)
   462ec:	004570c0 	call	4570c <_fflush_r>
   462f0:	d8c00017 	ldw	r3,0(sp)
   462f4:	103fc81e 	bne	r2,zero,46218 <__sfvwrite_r+0x1fc>
   462f8:	b4edc83a 	sub	r22,r22,r19
   462fc:	b03fe61e 	bne	r22,zero,46298 <__sfvwrite_r+0x27c>
   46300:	a809883a 	mov	r4,r21
   46304:	800b883a 	mov	r5,r16
   46308:	004570c0 	call	4570c <_fflush_r>
   4630c:	103fc21e 	bne	r2,zero,46218 <__sfvwrite_r+0x1fc>
   46310:	0007883a 	mov	r3,zero
   46314:	003fe006 	br	46298 <__sfvwrite_r+0x27c>
   46318:	81000017 	ldw	r4,0(r16)
   4631c:	80800417 	ldw	r2,16(r16)
   46320:	1100022e 	bgeu	r2,r4,4632c <__sfvwrite_r+0x310>
   46324:	9839883a 	mov	fp,r19
   46328:	9c806036 	bltu	r19,r18,464ac <__sfvwrite_r+0x490>
   4632c:	81c00517 	ldw	r7,20(r16)
   46330:	91c01c36 	bltu	r18,r7,463a4 <__sfvwrite_r+0x388>
   46334:	80800917 	ldw	r2,36(r16)
   46338:	81400717 	ldw	r5,28(r16)
   4633c:	a809883a 	mov	r4,r21
   46340:	b00d883a 	mov	r6,r22
   46344:	103ee83a 	callr	r2
   46348:	1027883a 	mov	r19,r2
   4634c:	00bfb20e 	bge	zero,r2,46218 <__sfvwrite_r+0x1fc>
   46350:	1039883a 	mov	fp,r2
   46354:	003f9806 	br	461b8 <__sfvwrite_r+0x19c>
   46358:	b80d883a 	mov	r6,r23
   4635c:	e00b883a 	mov	r5,fp
   46360:	d8c00015 	stw	r3,0(sp)
   46364:	00472a00 	call	472a0 <memmove>
   46368:	80800217 	ldw	r2,8(r16)
   4636c:	81000017 	ldw	r4,0(r16)
   46370:	b827883a 	mov	r19,r23
   46374:	15c5c83a 	sub	r2,r2,r23
   46378:	25ef883a 	add	r23,r4,r23
   4637c:	80800215 	stw	r2,8(r16)
   46380:	85c00015 	stw	r23,0(r16)
   46384:	d8c00017 	ldw	r3,0(sp)
   46388:	003fc106 	br	46290 <__sfvwrite_r+0x274>
   4638c:	81000017 	ldw	r4,0(r16)
   46390:	902f883a 	mov	r23,r18
   46394:	9039883a 	mov	fp,r18
   46398:	9027883a 	mov	r19,r18
   4639c:	900f883a 	mov	r7,r18
   463a0:	003f7a06 	br	4618c <__sfvwrite_r+0x170>
   463a4:	b00b883a 	mov	r5,r22
   463a8:	900d883a 	mov	r6,r18
   463ac:	00472a00 	call	472a0 <memmove>
   463b0:	80c00217 	ldw	r3,8(r16)
   463b4:	80800017 	ldw	r2,0(r16)
   463b8:	9027883a 	mov	r19,r18
   463bc:	1c87c83a 	sub	r3,r3,r18
   463c0:	1485883a 	add	r2,r2,r18
   463c4:	80c00215 	stw	r3,8(r16)
   463c8:	80800015 	stw	r2,0(r16)
   463cc:	9039883a 	mov	fp,r18
   463d0:	003f7906 	br	461b8 <__sfvwrite_r+0x19c>
   463d4:	e009883a 	mov	r4,fp
   463d8:	01400284 	movi	r5,10
   463dc:	900d883a 	mov	r6,r18
   463e0:	00470680 	call	47068 <memchr>
   463e4:	10003c26 	beq	r2,zero,464d8 <__sfvwrite_r+0x4bc>
   463e8:	15800044 	addi	r22,r2,1
   463ec:	b72dc83a 	sub	r22,r22,fp
   463f0:	00c00044 	movi	r3,1
   463f4:	003f9206 	br	46240 <__sfvwrite_r+0x224>
   463f8:	81000517 	ldw	r4,20(r16)
   463fc:	81400417 	ldw	r5,16(r16)
   46400:	80c00017 	ldw	r3,0(r16)
   46404:	210d883a 	add	r6,r4,r4
   46408:	3109883a 	add	r4,r6,r4
   4640c:	2026d7fa 	srli	r19,r4,31
   46410:	1979c83a 	sub	fp,r3,r5
   46414:	e1800044 	addi	r6,fp,1
   46418:	9909883a 	add	r4,r19,r4
   4641c:	2027d07a 	srai	r19,r4,1
   46420:	3489883a 	add	r4,r6,r18
   46424:	980d883a 	mov	r6,r19
   46428:	9900022e 	bgeu	r19,r4,46434 <__sfvwrite_r+0x418>
   4642c:	2027883a 	mov	r19,r4
   46430:	200d883a 	mov	r6,r4
   46434:	1081000c 	andi	r2,r2,1024
   46438:	10bfffcc 	andi	r2,r2,65535
   4643c:	10a0001c 	xori	r2,r2,32768
   46440:	10a00004 	addi	r2,r2,-32768
   46444:	a809883a 	mov	r4,r21
   46448:	103f6b26 	beq	r2,zero,461f8 <__sfvwrite_r+0x1dc>
   4644c:	300b883a 	mov	r5,r6
   46450:	00468e40 	call	468e4 <_malloc_r>
   46454:	102f883a 	mov	r23,r2
   46458:	103f6d26 	beq	r2,zero,46210 <__sfvwrite_r+0x1f4>
   4645c:	81400417 	ldw	r5,16(r16)
   46460:	1009883a 	mov	r4,r2
   46464:	e00d883a 	mov	r6,fp
   46468:	00471600 	call	47160 <memcpy>
   4646c:	8080030b 	ldhu	r2,12(r16)
   46470:	00fedfc4 	movi	r3,-1153
   46474:	10c4703a 	and	r2,r2,r3
   46478:	10802014 	ori	r2,r2,128
   4647c:	8080030d 	sth	r2,12(r16)
   46480:	bf09883a 	add	r4,r23,fp
   46484:	9f07c83a 	sub	r3,r19,fp
   46488:	85c00415 	stw	r23,16(r16)
   4648c:	84c00515 	stw	r19,20(r16)
   46490:	81000015 	stw	r4,0(r16)
   46494:	902f883a 	mov	r23,r18
   46498:	80c00215 	stw	r3,8(r16)
   4649c:	9039883a 	mov	fp,r18
   464a0:	9027883a 	mov	r19,r18
   464a4:	900f883a 	mov	r7,r18
   464a8:	003f3806 	br	4618c <__sfvwrite_r+0x170>
   464ac:	b00b883a 	mov	r5,r22
   464b0:	980d883a 	mov	r6,r19
   464b4:	00472a00 	call	472a0 <memmove>
   464b8:	80800017 	ldw	r2,0(r16)
   464bc:	a809883a 	mov	r4,r21
   464c0:	800b883a 	mov	r5,r16
   464c4:	14c5883a 	add	r2,r2,r19
   464c8:	80800015 	stw	r2,0(r16)
   464cc:	004570c0 	call	4570c <_fflush_r>
   464d0:	103f3926 	beq	r2,zero,461b8 <__sfvwrite_r+0x19c>
   464d4:	003f5006 	br	46218 <__sfvwrite_r+0x1fc>
   464d8:	95800044 	addi	r22,r18,1
   464dc:	00c00044 	movi	r3,1
   464e0:	003f5706 	br	46240 <__sfvwrite_r+0x224>
   464e4:	80c0030b 	ldhu	r3,12(r16)
   464e8:	00bfffc4 	movi	r2,-1
   464ec:	18c01014 	ori	r3,r3,64
   464f0:	80c0030d 	sth	r3,12(r16)
   464f4:	00c00244 	movi	r3,9
   464f8:	a8c00015 	stw	r3,0(r21)
   464fc:	003ef906 	br	460e4 <__sfvwrite_r+0xc8>

00046500 <_fwalk>:
   46500:	defff904 	addi	sp,sp,-28
   46504:	dcc00315 	stw	r19,12(sp)
   46508:	24c0b804 	addi	r19,r4,736
   4650c:	dd400515 	stw	r21,20(sp)
   46510:	dd000415 	stw	r20,16(sp)
   46514:	dfc00615 	stw	ra,24(sp)
   46518:	dc800215 	stw	r18,8(sp)
   4651c:	dc400115 	stw	r17,4(sp)
   46520:	dc000015 	stw	r16,0(sp)
   46524:	282b883a 	mov	r21,r5
   46528:	0029883a 	mov	r20,zero
   4652c:	0045bd00 	call	45bd0 <__sfp_lock_acquire>
   46530:	98001226 	beq	r19,zero,4657c <_fwalk+0x7c>
   46534:	04bfffc4 	movi	r18,-1
   46538:	9c400117 	ldw	r17,4(r19)
   4653c:	9c000217 	ldw	r16,8(r19)
   46540:	8c7fffc4 	addi	r17,r17,-1
   46544:	88000b16 	blt	r17,zero,46574 <_fwalk+0x74>
   46548:	84000304 	addi	r16,r16,12
   4654c:	80c0000f 	ldh	r3,0(r16)
   46550:	8c7fffc4 	addi	r17,r17,-1
   46554:	813ffd04 	addi	r4,r16,-12
   46558:	18000426 	beq	r3,zero,4656c <_fwalk+0x6c>
   4655c:	80c0008f 	ldh	r3,2(r16)
   46560:	1c800226 	beq	r3,r18,4656c <_fwalk+0x6c>
   46564:	a83ee83a 	callr	r21
   46568:	a0a8b03a 	or	r20,r20,r2
   4656c:	84001704 	addi	r16,r16,92
   46570:	8cbff61e 	bne	r17,r18,4654c <_fwalk+0x4c>
   46574:	9cc00017 	ldw	r19,0(r19)
   46578:	983fef1e 	bne	r19,zero,46538 <_fwalk+0x38>
   4657c:	0045bd40 	call	45bd4 <__sfp_lock_release>
   46580:	a005883a 	mov	r2,r20
   46584:	dfc00617 	ldw	ra,24(sp)
   46588:	dd400517 	ldw	r21,20(sp)
   4658c:	dd000417 	ldw	r20,16(sp)
   46590:	dcc00317 	ldw	r19,12(sp)
   46594:	dc800217 	ldw	r18,8(sp)
   46598:	dc400117 	ldw	r17,4(sp)
   4659c:	dc000017 	ldw	r16,0(sp)
   465a0:	dec00704 	addi	sp,sp,28
   465a4:	f800283a 	ret

000465a8 <_fwalk_reent>:
   465a8:	defff804 	addi	sp,sp,-32
   465ac:	dcc00315 	stw	r19,12(sp)
   465b0:	24c0b804 	addi	r19,r4,736
   465b4:	dd800615 	stw	r22,24(sp)
   465b8:	dd400515 	stw	r21,20(sp)
   465bc:	dd000415 	stw	r20,16(sp)
   465c0:	dfc00715 	stw	ra,28(sp)
   465c4:	dc800215 	stw	r18,8(sp)
   465c8:	dc400115 	stw	r17,4(sp)
   465cc:	dc000015 	stw	r16,0(sp)
   465d0:	2029883a 	mov	r20,r4
   465d4:	282b883a 	mov	r21,r5
   465d8:	002d883a 	mov	r22,zero
   465dc:	0045bd00 	call	45bd0 <__sfp_lock_acquire>
   465e0:	98001326 	beq	r19,zero,46630 <_fwalk_reent+0x88>
   465e4:	04bfffc4 	movi	r18,-1
   465e8:	9c400117 	ldw	r17,4(r19)
   465ec:	9c000217 	ldw	r16,8(r19)
   465f0:	8c7fffc4 	addi	r17,r17,-1
   465f4:	88000c16 	blt	r17,zero,46628 <_fwalk_reent+0x80>
   465f8:	84000304 	addi	r16,r16,12
   465fc:	80c0000f 	ldh	r3,0(r16)
   46600:	8c7fffc4 	addi	r17,r17,-1
   46604:	817ffd04 	addi	r5,r16,-12
   46608:	18000526 	beq	r3,zero,46620 <_fwalk_reent+0x78>
   4660c:	80c0008f 	ldh	r3,2(r16)
   46610:	a009883a 	mov	r4,r20
   46614:	1c800226 	beq	r3,r18,46620 <_fwalk_reent+0x78>
   46618:	a83ee83a 	callr	r21
   4661c:	b0acb03a 	or	r22,r22,r2
   46620:	84001704 	addi	r16,r16,92
   46624:	8cbff51e 	bne	r17,r18,465fc <_fwalk_reent+0x54>
   46628:	9cc00017 	ldw	r19,0(r19)
   4662c:	983fee1e 	bne	r19,zero,465e8 <_fwalk_reent+0x40>
   46630:	0045bd40 	call	45bd4 <__sfp_lock_release>
   46634:	b005883a 	mov	r2,r22
   46638:	dfc00717 	ldw	ra,28(sp)
   4663c:	dd800617 	ldw	r22,24(sp)
   46640:	dd400517 	ldw	r21,20(sp)
   46644:	dd000417 	ldw	r20,16(sp)
   46648:	dcc00317 	ldw	r19,12(sp)
   4664c:	dc800217 	ldw	r18,8(sp)
   46650:	dc400117 	ldw	r17,4(sp)
   46654:	dc000017 	ldw	r16,0(sp)
   46658:	dec00804 	addi	sp,sp,32
   4665c:	f800283a 	ret

00046660 <_setlocale_r>:
   46660:	defffc04 	addi	sp,sp,-16
   46664:	dc800215 	stw	r18,8(sp)
   46668:	dc400115 	stw	r17,4(sp)
   4666c:	dc000015 	stw	r16,0(sp)
   46670:	dfc00315 	stw	ra,12(sp)
   46674:	3021883a 	mov	r16,r6
   46678:	2023883a 	mov	r17,r4
   4667c:	2825883a 	mov	r18,r5
   46680:	30001626 	beq	r6,zero,466dc <_setlocale_r+0x7c>
   46684:	3009883a 	mov	r4,r6
   46688:	01400174 	movhi	r5,5
   4668c:	2975f404 	addi	r5,r5,-10288
   46690:	0048d5c0 	call	48d5c <strcmp>
   46694:	10000a1e 	bne	r2,zero,466c0 <_setlocale_r+0x60>
   46698:	8c800c15 	stw	r18,48(r17)
   4669c:	8c000d15 	stw	r16,52(r17)
   466a0:	00800174 	movhi	r2,5
   466a4:	10b5f404 	addi	r2,r2,-10288
   466a8:	dfc00317 	ldw	ra,12(sp)
   466ac:	dc800217 	ldw	r18,8(sp)
   466b0:	dc400117 	ldw	r17,4(sp)
   466b4:	dc000017 	ldw	r16,0(sp)
   466b8:	dec00404 	addi	sp,sp,16
   466bc:	f800283a 	ret
   466c0:	8009883a 	mov	r4,r16
   466c4:	01400174 	movhi	r5,5
   466c8:	2975fe04 	addi	r5,r5,-10248
   466cc:	0048d5c0 	call	48d5c <strcmp>
   466d0:	103ff126 	beq	r2,zero,46698 <_setlocale_r+0x38>
   466d4:	0005883a 	mov	r2,zero
   466d8:	003ff306 	br	466a8 <_setlocale_r+0x48>
   466dc:	00800174 	movhi	r2,5
   466e0:	10b5f404 	addi	r2,r2,-10288
   466e4:	dfc00317 	ldw	ra,12(sp)
   466e8:	dc800217 	ldw	r18,8(sp)
   466ec:	dc400117 	ldw	r17,4(sp)
   466f0:	dc000017 	ldw	r16,0(sp)
   466f4:	dec00404 	addi	sp,sp,16
   466f8:	f800283a 	ret

000466fc <__locale_charset>:
   466fc:	00800174 	movhi	r2,5
   46700:	10b61304 	addi	r2,r2,-10164
   46704:	f800283a 	ret

00046708 <_localeconv_r>:
   46708:	00800174 	movhi	r2,5
   4670c:	10b61704 	addi	r2,r2,-10148
   46710:	f800283a 	ret

00046714 <setlocale>:
   46714:	00c00174 	movhi	r3,5
   46718:	18fcff04 	addi	r3,r3,-3076
   4671c:	2005883a 	mov	r2,r4
   46720:	19000017 	ldw	r4,0(r3)
   46724:	280d883a 	mov	r6,r5
   46728:	100b883a 	mov	r5,r2
   4672c:	00466601 	jmpi	46660 <_setlocale_r>

00046730 <localeconv>:
   46730:	00800174 	movhi	r2,5
   46734:	10b61704 	addi	r2,r2,-10148
   46738:	f800283a 	ret

0004673c <__smakebuf_r>:
   4673c:	2880030b 	ldhu	r2,12(r5)
   46740:	deffed04 	addi	sp,sp,-76
   46744:	dc401015 	stw	r17,64(sp)
   46748:	10c0008c 	andi	r3,r2,2
   4674c:	18ffffcc 	andi	r3,r3,65535
   46750:	18e0001c 	xori	r3,r3,32768
   46754:	dc000f15 	stw	r16,60(sp)
   46758:	dfc01215 	stw	ra,72(sp)
   4675c:	dc801115 	stw	r18,68(sp)
   46760:	18e00004 	addi	r3,r3,-32768
   46764:	2821883a 	mov	r16,r5
   46768:	2023883a 	mov	r17,r4
   4676c:	1800381e 	bne	r3,zero,46850 <__smakebuf_r+0x114>
   46770:	2940038f 	ldh	r5,14(r5)
   46774:	28002d16 	blt	r5,zero,4682c <__smakebuf_r+0xf0>
   46778:	d80d883a 	mov	r6,sp
   4677c:	00490ec0 	call	490ec <_fstat_r>
   46780:	10002916 	blt	r2,zero,46828 <__smakebuf_r+0xec>
   46784:	d8800117 	ldw	r2,4(sp)
   46788:	00e00014 	movui	r3,32768
   4678c:	10bc000c 	andi	r2,r2,61440
   46790:	10c03c26 	beq	r2,r3,46884 <__smakebuf_r+0x148>
   46794:	80c0030b 	ldhu	r3,12(r16)
   46798:	18c20014 	ori	r3,r3,2048
   4679c:	80c0030d 	sth	r3,12(r16)
   467a0:	00c80004 	movi	r3,8192
   467a4:	10c00c1e 	bne	r2,r3,467d8 <__smakebuf_r+0x9c>
   467a8:	8140038f 	ldh	r5,14(r16)
   467ac:	8809883a 	mov	r4,r17
   467b0:	00491540 	call	49154 <_isatty_r>
   467b4:	10000826 	beq	r2,zero,467d8 <__smakebuf_r+0x9c>
   467b8:	80c0030b 	ldhu	r3,12(r16)
   467bc:	808010c4 	addi	r2,r16,67
   467c0:	80800015 	stw	r2,0(r16)
   467c4:	18c00054 	ori	r3,r3,1
   467c8:	80800415 	stw	r2,16(r16)
   467cc:	00800044 	movi	r2,1
   467d0:	80c0030d 	sth	r3,12(r16)
   467d4:	80800515 	stw	r2,20(r16)
   467d8:	04810004 	movi	r18,1024
   467dc:	8809883a 	mov	r4,r17
   467e0:	900b883a 	mov	r5,r18
   467e4:	00468e40 	call	468e4 <_malloc_r>
   467e8:	10003026 	beq	r2,zero,468ac <__smakebuf_r+0x170>
   467ec:	80c0030b 	ldhu	r3,12(r16)
   467f0:	01000134 	movhi	r4,4
   467f4:	21164d04 	addi	r4,r4,22836
   467f8:	89000f15 	stw	r4,60(r17)
   467fc:	18c02014 	ori	r3,r3,128
   46800:	80c0030d 	sth	r3,12(r16)
   46804:	80800015 	stw	r2,0(r16)
   46808:	80800415 	stw	r2,16(r16)
   4680c:	84800515 	stw	r18,20(r16)
   46810:	dfc01217 	ldw	ra,72(sp)
   46814:	dc801117 	ldw	r18,68(sp)
   46818:	dc401017 	ldw	r17,64(sp)
   4681c:	dc000f17 	ldw	r16,60(sp)
   46820:	dec01304 	addi	sp,sp,76
   46824:	f800283a 	ret
   46828:	8080030b 	ldhu	r2,12(r16)
   4682c:	10c0200c 	andi	r3,r2,128
   46830:	18ffffcc 	andi	r3,r3,65535
   46834:	18e0001c 	xori	r3,r3,32768
   46838:	18e00004 	addi	r3,r3,-32768
   4683c:	18000f1e 	bne	r3,zero,4687c <__smakebuf_r+0x140>
   46840:	04810004 	movi	r18,1024
   46844:	10820014 	ori	r2,r2,2048
   46848:	8080030d 	sth	r2,12(r16)
   4684c:	003fe306 	br	467dc <__smakebuf_r+0xa0>
   46850:	288010c4 	addi	r2,r5,67
   46854:	28800015 	stw	r2,0(r5)
   46858:	28800415 	stw	r2,16(r5)
   4685c:	00800044 	movi	r2,1
   46860:	28800515 	stw	r2,20(r5)
   46864:	dfc01217 	ldw	ra,72(sp)
   46868:	dc801117 	ldw	r18,68(sp)
   4686c:	dc401017 	ldw	r17,64(sp)
   46870:	dc000f17 	ldw	r16,60(sp)
   46874:	dec01304 	addi	sp,sp,76
   46878:	f800283a 	ret
   4687c:	04801004 	movi	r18,64
   46880:	003ff006 	br	46844 <__smakebuf_r+0x108>
   46884:	81000a17 	ldw	r4,40(r16)
   46888:	00c00174 	movhi	r3,5
   4688c:	18e33e04 	addi	r3,r3,-29448
   46890:	20ffc01e 	bne	r4,r3,46794 <__smakebuf_r+0x58>
   46894:	8080030b 	ldhu	r2,12(r16)
   46898:	00c10004 	movi	r3,1024
   4689c:	80c01315 	stw	r3,76(r16)
   468a0:	10c4b03a 	or	r2,r2,r3
   468a4:	8080030d 	sth	r2,12(r16)
   468a8:	003fcb06 	br	467d8 <__smakebuf_r+0x9c>
   468ac:	8080030b 	ldhu	r2,12(r16)
   468b0:	10c0800c 	andi	r3,r2,512
   468b4:	18ffffcc 	andi	r3,r3,65535
   468b8:	18e0001c 	xori	r3,r3,32768
   468bc:	18e00004 	addi	r3,r3,-32768
   468c0:	183fd31e 	bne	r3,zero,46810 <__smakebuf_r+0xd4>
   468c4:	10800094 	ori	r2,r2,2
   468c8:	80c010c4 	addi	r3,r16,67
   468cc:	8080030d 	sth	r2,12(r16)
   468d0:	00800044 	movi	r2,1
   468d4:	80c00015 	stw	r3,0(r16)
   468d8:	80c00415 	stw	r3,16(r16)
   468dc:	80800515 	stw	r2,20(r16)
   468e0:	003fcb06 	br	46810 <__smakebuf_r+0xd4>

000468e4 <_malloc_r>:
   468e4:	defff604 	addi	sp,sp,-40
   468e8:	dc800215 	stw	r18,8(sp)
   468ec:	dfc00915 	stw	ra,36(sp)
   468f0:	df000815 	stw	fp,32(sp)
   468f4:	ddc00715 	stw	r23,28(sp)
   468f8:	dd800615 	stw	r22,24(sp)
   468fc:	dd400515 	stw	r21,20(sp)
   46900:	dd000415 	stw	r20,16(sp)
   46904:	dcc00315 	stw	r19,12(sp)
   46908:	dc400115 	stw	r17,4(sp)
   4690c:	dc000015 	stw	r16,0(sp)
   46910:	288002c4 	addi	r2,r5,11
   46914:	00c00584 	movi	r3,22
   46918:	2025883a 	mov	r18,r4
   4691c:	18802b2e 	bgeu	r3,r2,469cc <_malloc_r+0xe8>
   46920:	047ffe04 	movi	r17,-8
   46924:	1462703a 	and	r17,r2,r17
   46928:	88002a16 	blt	r17,zero,469d4 <_malloc_r+0xf0>
   4692c:	89402936 	bltu	r17,r5,469d4 <_malloc_r+0xf0>
   46930:	9009883a 	mov	r4,r18
   46934:	004ae940 	call	4ae94 <__malloc_lock>
   46938:	00807dc4 	movi	r2,503
   4693c:	14402936 	bltu	r2,r17,469e4 <_malloc_r+0x100>
   46940:	8808d0fa 	srli	r4,r17,3
   46944:	04c00174 	movhi	r19,5
   46948:	9cf77a04 	addi	r19,r19,-8728
   4694c:	2105883a 	add	r2,r4,r4
   46950:	1085883a 	add	r2,r2,r2
   46954:	1085883a 	add	r2,r2,r2
   46958:	9885883a 	add	r2,r19,r2
   4695c:	14000317 	ldw	r16,12(r2)
   46960:	80815526 	beq	r16,r2,46eb8 <_malloc_r+0x5d4>
   46964:	81000117 	ldw	r4,4(r16)
   46968:	00bfff04 	movi	r2,-4
   4696c:	80c00317 	ldw	r3,12(r16)
   46970:	2084703a 	and	r2,r4,r2
   46974:	8085883a 	add	r2,r16,r2
   46978:	11800117 	ldw	r6,4(r2)
   4697c:	81400217 	ldw	r5,8(r16)
   46980:	9009883a 	mov	r4,r18
   46984:	31800054 	ori	r6,r6,1
   46988:	11800115 	stw	r6,4(r2)
   4698c:	28c00315 	stw	r3,12(r5)
   46990:	19400215 	stw	r5,8(r3)
   46994:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46998:	80800204 	addi	r2,r16,8
   4699c:	dfc00917 	ldw	ra,36(sp)
   469a0:	df000817 	ldw	fp,32(sp)
   469a4:	ddc00717 	ldw	r23,28(sp)
   469a8:	dd800617 	ldw	r22,24(sp)
   469ac:	dd400517 	ldw	r21,20(sp)
   469b0:	dd000417 	ldw	r20,16(sp)
   469b4:	dcc00317 	ldw	r19,12(sp)
   469b8:	dc800217 	ldw	r18,8(sp)
   469bc:	dc400117 	ldw	r17,4(sp)
   469c0:	dc000017 	ldw	r16,0(sp)
   469c4:	dec00a04 	addi	sp,sp,40
   469c8:	f800283a 	ret
   469cc:	04400404 	movi	r17,16
   469d0:	897fd72e 	bgeu	r17,r5,46930 <_malloc_r+0x4c>
   469d4:	00800304 	movi	r2,12
   469d8:	90800015 	stw	r2,0(r18)
   469dc:	0005883a 	mov	r2,zero
   469e0:	003fee06 	br	4699c <_malloc_r+0xb8>
   469e4:	8808d27a 	srli	r4,r17,9
   469e8:	20007126 	beq	r4,zero,46bb0 <_malloc_r+0x2cc>
   469ec:	00800104 	movi	r2,4
   469f0:	1100eb36 	bltu	r2,r4,46da0 <_malloc_r+0x4bc>
   469f4:	8808d1ba 	srli	r4,r17,6
   469f8:	21000e04 	addi	r4,r4,56
   469fc:	210b883a 	add	r5,r4,r4
   46a00:	294b883a 	add	r5,r5,r5
   46a04:	294b883a 	add	r5,r5,r5
   46a08:	04c00174 	movhi	r19,5
   46a0c:	9cf77a04 	addi	r19,r19,-8728
   46a10:	994b883a 	add	r5,r19,r5
   46a14:	2c000317 	ldw	r16,12(r5)
   46a18:	2c000e26 	beq	r5,r16,46a54 <_malloc_r+0x170>
   46a1c:	80c00117 	ldw	r3,4(r16)
   46a20:	01ffff04 	movi	r7,-4
   46a24:	018003c4 	movi	r6,15
   46a28:	19c6703a 	and	r3,r3,r7
   46a2c:	1c45c83a 	sub	r2,r3,r17
   46a30:	30800716 	blt	r6,r2,46a50 <_malloc_r+0x16c>
   46a34:	1000610e 	bge	r2,zero,46bbc <_malloc_r+0x2d8>
   46a38:	84000317 	ldw	r16,12(r16)
   46a3c:	2c000526 	beq	r5,r16,46a54 <_malloc_r+0x170>
   46a40:	80c00117 	ldw	r3,4(r16)
   46a44:	19c6703a 	and	r3,r3,r7
   46a48:	1c45c83a 	sub	r2,r3,r17
   46a4c:	30bff90e 	bge	r6,r2,46a34 <_malloc_r+0x150>
   46a50:	213fffc4 	addi	r4,r4,-1
   46a54:	21000044 	addi	r4,r4,1
   46a58:	9c000417 	ldw	r16,16(r19)
   46a5c:	00c00174 	movhi	r3,5
   46a60:	18f77a04 	addi	r3,r3,-8728
   46a64:	1a400204 	addi	r9,r3,8
   46a68:	8240ff26 	beq	r16,r9,46e68 <_malloc_r+0x584>
   46a6c:	81400117 	ldw	r5,4(r16)
   46a70:	00bfff04 	movi	r2,-4
   46a74:	018003c4 	movi	r6,15
   46a78:	2884703a 	and	r2,r5,r2
   46a7c:	144bc83a 	sub	r5,r2,r17
   46a80:	3140ea16 	blt	r6,r5,46e2c <_malloc_r+0x548>
   46a84:	1a400515 	stw	r9,20(r3)
   46a88:	1a400415 	stw	r9,16(r3)
   46a8c:	2800570e 	bge	r5,zero,46bec <_malloc_r+0x308>
   46a90:	01407fc4 	movi	r5,511
   46a94:	2880ca36 	bltu	r5,r2,46dc0 <_malloc_r+0x4dc>
   46a98:	1004d0fa 	srli	r2,r2,3
   46a9c:	02000044 	movi	r8,1
   46aa0:	19c00117 	ldw	r7,4(r3)
   46aa4:	108b883a 	add	r5,r2,r2
   46aa8:	294b883a 	add	r5,r5,r5
   46aac:	1005d0ba 	srai	r2,r2,2
   46ab0:	294b883a 	add	r5,r5,r5
   46ab4:	28cb883a 	add	r5,r5,r3
   46ab8:	29800217 	ldw	r6,8(r5)
   46abc:	4084983a 	sll	r2,r8,r2
   46ac0:	81400315 	stw	r5,12(r16)
   46ac4:	81800215 	stw	r6,8(r16)
   46ac8:	11c4b03a 	or	r2,r2,r7
   46acc:	18800115 	stw	r2,4(r3)
   46ad0:	2c000215 	stw	r16,8(r5)
   46ad4:	34000315 	stw	r16,12(r6)
   46ad8:	200bd0ba 	srai	r5,r4,2
   46adc:	00c00044 	movi	r3,1
   46ae0:	194a983a 	sll	r5,r3,r5
   46ae4:	11404936 	bltu	r2,r5,46c0c <_malloc_r+0x328>
   46ae8:	1146703a 	and	r3,r2,r5
   46aec:	18000a1e 	bne	r3,zero,46b18 <_malloc_r+0x234>
   46af0:	00ffff04 	movi	r3,-4
   46af4:	294b883a 	add	r5,r5,r5
   46af8:	20c8703a 	and	r4,r4,r3
   46afc:	1146703a 	and	r3,r2,r5
   46b00:	21000104 	addi	r4,r4,4
   46b04:	1800041e 	bne	r3,zero,46b18 <_malloc_r+0x234>
   46b08:	294b883a 	add	r5,r5,r5
   46b0c:	1146703a 	and	r3,r2,r5
   46b10:	21000104 	addi	r4,r4,4
   46b14:	183ffc26 	beq	r3,zero,46b08 <_malloc_r+0x224>
   46b18:	023fff04 	movi	r8,-4
   46b1c:	01c003c4 	movi	r7,15
   46b20:	2105883a 	add	r2,r4,r4
   46b24:	1085883a 	add	r2,r2,r2
   46b28:	1085883a 	add	r2,r2,r2
   46b2c:	9899883a 	add	r12,r19,r2
   46b30:	62800304 	addi	r10,r12,12
   46b34:	2017883a 	mov	r11,r4
   46b38:	54000017 	ldw	r16,0(r10)
   46b3c:	51bffd04 	addi	r6,r10,-12
   46b40:	8180041e 	bne	r16,r6,46b54 <_malloc_r+0x270>
   46b44:	0000ca06 	br	46e70 <_malloc_r+0x58c>
   46b48:	10001c0e 	bge	r2,zero,46bbc <_malloc_r+0x2d8>
   46b4c:	84000317 	ldw	r16,12(r16)
   46b50:	8180c726 	beq	r16,r6,46e70 <_malloc_r+0x58c>
   46b54:	80c00117 	ldw	r3,4(r16)
   46b58:	1a06703a 	and	r3,r3,r8
   46b5c:	1c45c83a 	sub	r2,r3,r17
   46b60:	38bff90e 	bge	r7,r2,46b48 <_malloc_r+0x264>
   46b64:	81000317 	ldw	r4,12(r16)
   46b68:	81400217 	ldw	r5,8(r16)
   46b6c:	8447883a 	add	r3,r16,r17
   46b70:	8c400054 	ori	r17,r17,1
   46b74:	29000315 	stw	r4,12(r5)
   46b78:	21400215 	stw	r5,8(r4)
   46b7c:	84400115 	stw	r17,4(r16)
   46b80:	1889883a 	add	r4,r3,r2
   46b84:	11400054 	ori	r5,r2,1
   46b88:	98c00515 	stw	r3,20(r19)
   46b8c:	98c00415 	stw	r3,16(r19)
   46b90:	20800015 	stw	r2,0(r4)
   46b94:	1a400315 	stw	r9,12(r3)
   46b98:	1a400215 	stw	r9,8(r3)
   46b9c:	19400115 	stw	r5,4(r3)
   46ba0:	9009883a 	mov	r4,r18
   46ba4:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46ba8:	80800204 	addi	r2,r16,8
   46bac:	003f7b06 	br	4699c <_malloc_r+0xb8>
   46bb0:	8808d0fa 	srli	r4,r17,3
   46bb4:	210b883a 	add	r5,r4,r4
   46bb8:	003f9106 	br	46a00 <_malloc_r+0x11c>
   46bbc:	80c7883a 	add	r3,r16,r3
   46bc0:	19400117 	ldw	r5,4(r3)
   46bc4:	80800317 	ldw	r2,12(r16)
   46bc8:	81000217 	ldw	r4,8(r16)
   46bcc:	29400054 	ori	r5,r5,1
   46bd0:	19400115 	stw	r5,4(r3)
   46bd4:	20800315 	stw	r2,12(r4)
   46bd8:	11000215 	stw	r4,8(r2)
   46bdc:	9009883a 	mov	r4,r18
   46be0:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46be4:	80800204 	addi	r2,r16,8
   46be8:	003f6c06 	br	4699c <_malloc_r+0xb8>
   46bec:	8085883a 	add	r2,r16,r2
   46bf0:	10c00117 	ldw	r3,4(r2)
   46bf4:	9009883a 	mov	r4,r18
   46bf8:	18c00054 	ori	r3,r3,1
   46bfc:	10c00115 	stw	r3,4(r2)
   46c00:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46c04:	80800204 	addi	r2,r16,8
   46c08:	003f6406 	br	4699c <_malloc_r+0xb8>
   46c0c:	9c000217 	ldw	r16,8(r19)
   46c10:	00bfff04 	movi	r2,-4
   46c14:	85400117 	ldw	r21,4(r16)
   46c18:	a8aa703a 	and	r21,r21,r2
   46c1c:	ac400336 	bltu	r21,r17,46c2c <_malloc_r+0x348>
   46c20:	ac45c83a 	sub	r2,r21,r17
   46c24:	00c003c4 	movi	r3,15
   46c28:	18805316 	blt	r3,r2,46d78 <_malloc_r+0x494>
   46c2c:	d5e6aa17 	ldw	r23,-25944(gp)
   46c30:	d0e00317 	ldw	r3,-32756(gp)
   46c34:	00bfffc4 	movi	r2,-1
   46c38:	8579883a 	add	fp,r16,r21
   46c3c:	8def883a 	add	r23,r17,r23
   46c40:	1880d226 	beq	r3,r2,46f8c <_malloc_r+0x6a8>
   46c44:	bdc403c4 	addi	r23,r23,4111
   46c48:	00bc0004 	movi	r2,-4096
   46c4c:	b8ae703a 	and	r23,r23,r2
   46c50:	9009883a 	mov	r4,r18
   46c54:	b80b883a 	mov	r5,r23
   46c58:	0048bb80 	call	48bb8 <_sbrk_r>
   46c5c:	1029883a 	mov	r20,r2
   46c60:	00bfffc4 	movi	r2,-1
   46c64:	a080d126 	beq	r20,r2,46fac <_malloc_r+0x6c8>
   46c68:	a7009f36 	bltu	r20,fp,46ee8 <_malloc_r+0x604>
   46c6c:	05800174 	movhi	r22,5
   46c70:	b583b204 	addi	r22,r22,3784
   46c74:	b0800017 	ldw	r2,0(r22)
   46c78:	b885883a 	add	r2,r23,r2
   46c7c:	b0800015 	stw	r2,0(r22)
   46c80:	e500cf26 	beq	fp,r20,46fc0 <_malloc_r+0x6dc>
   46c84:	d1200317 	ldw	r4,-32756(gp)
   46c88:	00ffffc4 	movi	r3,-1
   46c8c:	20c0e026 	beq	r4,r3,47010 <_malloc_r+0x72c>
   46c90:	a739c83a 	sub	fp,r20,fp
   46c94:	1705883a 	add	r2,r2,fp
   46c98:	b0800015 	stw	r2,0(r22)
   46c9c:	a08001cc 	andi	r2,r20,7
   46ca0:	1000a526 	beq	r2,zero,46f38 <_malloc_r+0x654>
   46ca4:	a0a9c83a 	sub	r20,r20,r2
   46ca8:	00c40204 	movi	r3,4104
   46cac:	a5000204 	addi	r20,r20,8
   46cb0:	1885c83a 	sub	r2,r3,r2
   46cb4:	a5c7883a 	add	r3,r20,r23
   46cb8:	18c3ffcc 	andi	r3,r3,4095
   46cbc:	10efc83a 	sub	r23,r2,r3
   46cc0:	9009883a 	mov	r4,r18
   46cc4:	b80b883a 	mov	r5,r23
   46cc8:	0048bb80 	call	48bb8 <_sbrk_r>
   46ccc:	00ffffc4 	movi	r3,-1
   46cd0:	10c0cc26 	beq	r2,r3,47004 <_malloc_r+0x720>
   46cd4:	1505c83a 	sub	r2,r2,r20
   46cd8:	b887883a 	add	r3,r23,r2
   46cdc:	18c00054 	ori	r3,r3,1
   46ce0:	b0800017 	ldw	r2,0(r22)
   46ce4:	9d000215 	stw	r20,8(r19)
   46ce8:	a0c00115 	stw	r3,4(r20)
   46cec:	b885883a 	add	r2,r23,r2
   46cf0:	b0800015 	stw	r2,0(r22)
   46cf4:	84c00e26 	beq	r16,r19,46d30 <_malloc_r+0x44c>
   46cf8:	00c003c4 	movi	r3,15
   46cfc:	1d40902e 	bgeu	r3,r21,46f40 <_malloc_r+0x65c>
   46d00:	ad7ffd04 	addi	r21,r21,-12
   46d04:	013ffe04 	movi	r4,-8
   46d08:	a908703a 	and	r4,r21,r4
   46d0c:	810b883a 	add	r5,r16,r4
   46d10:	01800144 	movi	r6,5
   46d14:	29800115 	stw	r6,4(r5)
   46d18:	29800215 	stw	r6,8(r5)
   46d1c:	81400117 	ldw	r5,4(r16)
   46d20:	2940004c 	andi	r5,r5,1
   46d24:	214ab03a 	or	r5,r4,r5
   46d28:	81400115 	stw	r5,4(r16)
   46d2c:	1900ae36 	bltu	r3,r4,46fe8 <_malloc_r+0x704>
   46d30:	d0e6a917 	ldw	r3,-25948(gp)
   46d34:	1880012e 	bgeu	r3,r2,46d3c <_malloc_r+0x458>
   46d38:	d0a6a915 	stw	r2,-25948(gp)
   46d3c:	d0e6a817 	ldw	r3,-25952(gp)
   46d40:	9c000217 	ldw	r16,8(r19)
   46d44:	1880012e 	bgeu	r3,r2,46d4c <_malloc_r+0x468>
   46d48:	d0a6a815 	stw	r2,-25952(gp)
   46d4c:	80c00117 	ldw	r3,4(r16)
   46d50:	00bfff04 	movi	r2,-4
   46d54:	1886703a 	and	r3,r3,r2
   46d58:	1c45c83a 	sub	r2,r3,r17
   46d5c:	1c400236 	bltu	r3,r17,46d68 <_malloc_r+0x484>
   46d60:	00c003c4 	movi	r3,15
   46d64:	18800416 	blt	r3,r2,46d78 <_malloc_r+0x494>
   46d68:	9009883a 	mov	r4,r18
   46d6c:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46d70:	0005883a 	mov	r2,zero
   46d74:	003f0906 	br	4699c <_malloc_r+0xb8>
   46d78:	88c00054 	ori	r3,r17,1
   46d7c:	10800054 	ori	r2,r2,1
   46d80:	80c00115 	stw	r3,4(r16)
   46d84:	8463883a 	add	r17,r16,r17
   46d88:	88800115 	stw	r2,4(r17)
   46d8c:	9009883a 	mov	r4,r18
   46d90:	9c400215 	stw	r17,8(r19)
   46d94:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46d98:	80800204 	addi	r2,r16,8
   46d9c:	003eff06 	br	4699c <_malloc_r+0xb8>
   46da0:	00800504 	movi	r2,20
   46da4:	1100492e 	bgeu	r2,r4,46ecc <_malloc_r+0x5e8>
   46da8:	00801504 	movi	r2,84
   46dac:	11005c36 	bltu	r2,r4,46f20 <_malloc_r+0x63c>
   46db0:	8808d33a 	srli	r4,r17,12
   46db4:	21001b84 	addi	r4,r4,110
   46db8:	210b883a 	add	r5,r4,r4
   46dbc:	003f1006 	br	46a00 <_malloc_r+0x11c>
   46dc0:	1006d27a 	srli	r3,r2,9
   46dc4:	01400104 	movi	r5,4
   46dc8:	28c0432e 	bgeu	r5,r3,46ed8 <_malloc_r+0x5f4>
   46dcc:	01400504 	movi	r5,20
   46dd0:	28c07036 	bltu	r5,r3,46f94 <_malloc_r+0x6b0>
   46dd4:	194016c4 	addi	r5,r3,91
   46dd8:	294d883a 	add	r6,r5,r5
   46ddc:	318d883a 	add	r6,r6,r6
   46de0:	318d883a 	add	r6,r6,r6
   46de4:	998d883a 	add	r6,r19,r6
   46de8:	30c00217 	ldw	r3,8(r6)
   46dec:	01c00174 	movhi	r7,5
   46df0:	39f77a04 	addi	r7,r7,-8728
   46df4:	19805726 	beq	r3,r6,46f54 <_malloc_r+0x670>
   46df8:	01ffff04 	movi	r7,-4
   46dfc:	19400117 	ldw	r5,4(r3)
   46e00:	29ca703a 	and	r5,r5,r7
   46e04:	1140022e 	bgeu	r2,r5,46e10 <_malloc_r+0x52c>
   46e08:	18c00217 	ldw	r3,8(r3)
   46e0c:	30fffb1e 	bne	r6,r3,46dfc <_malloc_r+0x518>
   46e10:	19400317 	ldw	r5,12(r3)
   46e14:	98800117 	ldw	r2,4(r19)
   46e18:	81400315 	stw	r5,12(r16)
   46e1c:	80c00215 	stw	r3,8(r16)
   46e20:	2c000215 	stw	r16,8(r5)
   46e24:	1c000315 	stw	r16,12(r3)
   46e28:	003f2b06 	br	46ad8 <_malloc_r+0x1f4>
   46e2c:	8445883a 	add	r2,r16,r17
   46e30:	8c400054 	ori	r17,r17,1
   46e34:	18800515 	stw	r2,20(r3)
   46e38:	18800415 	stw	r2,16(r3)
   46e3c:	29000054 	ori	r4,r5,1
   46e40:	1147883a 	add	r3,r2,r5
   46e44:	84400115 	stw	r17,4(r16)
   46e48:	11000115 	stw	r4,4(r2)
   46e4c:	12400315 	stw	r9,12(r2)
   46e50:	12400215 	stw	r9,8(r2)
   46e54:	19400015 	stw	r5,0(r3)
   46e58:	9009883a 	mov	r4,r18
   46e5c:	004aeb40 	call	4aeb4 <__malloc_unlock>
   46e60:	80800204 	addi	r2,r16,8
   46e64:	003ecd06 	br	4699c <_malloc_r+0xb8>
   46e68:	18800117 	ldw	r2,4(r3)
   46e6c:	003f1a06 	br	46ad8 <_malloc_r+0x1f4>
   46e70:	5ac00044 	addi	r11,r11,1
   46e74:	588000cc 	andi	r2,r11,3
   46e78:	52800204 	addi	r10,r10,8
   46e7c:	103f2e1e 	bne	r2,zero,46b38 <_malloc_r+0x254>
   46e80:	20c000cc 	andi	r3,r4,3
   46e84:	60bffe04 	addi	r2,r12,-8
   46e88:	18006f26 	beq	r3,zero,47048 <_malloc_r+0x764>
   46e8c:	63000017 	ldw	r12,0(r12)
   46e90:	213fffc4 	addi	r4,r4,-1
   46e94:	60bffa26 	beq	r12,r2,46e80 <_malloc_r+0x59c>
   46e98:	98800117 	ldw	r2,4(r19)
   46e9c:	294b883a 	add	r5,r5,r5
   46ea0:	117f5a36 	bltu	r2,r5,46c0c <_malloc_r+0x328>
   46ea4:	283f5926 	beq	r5,zero,46c0c <_malloc_r+0x328>
   46ea8:	1146703a 	and	r3,r2,r5
   46eac:	18001626 	beq	r3,zero,46f08 <_malloc_r+0x624>
   46eb0:	5809883a 	mov	r4,r11
   46eb4:	003f1a06 	br	46b20 <_malloc_r+0x23c>
   46eb8:	80800204 	addi	r2,r16,8
   46ebc:	84000517 	ldw	r16,20(r16)
   46ec0:	143ea81e 	bne	r2,r16,46964 <_malloc_r+0x80>
   46ec4:	21000084 	addi	r4,r4,2
   46ec8:	003ee306 	br	46a58 <_malloc_r+0x174>
   46ecc:	210016c4 	addi	r4,r4,91
   46ed0:	210b883a 	add	r5,r4,r4
   46ed4:	003eca06 	br	46a00 <_malloc_r+0x11c>
   46ed8:	100ad1ba 	srli	r5,r2,6
   46edc:	29400e04 	addi	r5,r5,56
   46ee0:	294d883a 	add	r6,r5,r5
   46ee4:	003fbd06 	br	46ddc <_malloc_r+0x4f8>
   46ee8:	84ff6026 	beq	r16,r19,46c6c <_malloc_r+0x388>
   46eec:	00800174 	movhi	r2,5
   46ef0:	10b77a04 	addi	r2,r2,-8728
   46ef4:	14000217 	ldw	r16,8(r2)
   46ef8:	00bfff04 	movi	r2,-4
   46efc:	80c00117 	ldw	r3,4(r16)
   46f00:	1886703a 	and	r3,r3,r2
   46f04:	003f9406 	br	46d58 <_malloc_r+0x474>
   46f08:	294b883a 	add	r5,r5,r5
   46f0c:	1146703a 	and	r3,r2,r5
   46f10:	5ac00104 	addi	r11,r11,4
   46f14:	183ffc26 	beq	r3,zero,46f08 <_malloc_r+0x624>
   46f18:	5809883a 	mov	r4,r11
   46f1c:	003f0006 	br	46b20 <_malloc_r+0x23c>
   46f20:	00805504 	movi	r2,340
   46f24:	11001336 	bltu	r2,r4,46f74 <_malloc_r+0x690>
   46f28:	8808d3fa 	srli	r4,r17,15
   46f2c:	21001dc4 	addi	r4,r4,119
   46f30:	210b883a 	add	r5,r4,r4
   46f34:	003eb206 	br	46a00 <_malloc_r+0x11c>
   46f38:	00840004 	movi	r2,4096
   46f3c:	003f5d06 	br	46cb4 <_malloc_r+0x3d0>
   46f40:	00800044 	movi	r2,1
   46f44:	a0800115 	stw	r2,4(r20)
   46f48:	a021883a 	mov	r16,r20
   46f4c:	0007883a 	mov	r3,zero
   46f50:	003f8106 	br	46d58 <_malloc_r+0x474>
   46f54:	280bd0ba 	srai	r5,r5,2
   46f58:	01800044 	movi	r6,1
   46f5c:	38800117 	ldw	r2,4(r7)
   46f60:	314c983a 	sll	r6,r6,r5
   46f64:	180b883a 	mov	r5,r3
   46f68:	3084b03a 	or	r2,r6,r2
   46f6c:	38800115 	stw	r2,4(r7)
   46f70:	003fa906 	br	46e18 <_malloc_r+0x534>
   46f74:	00815504 	movi	r2,1364
   46f78:	11001836 	bltu	r2,r4,46fdc <_malloc_r+0x6f8>
   46f7c:	8808d4ba 	srli	r4,r17,18
   46f80:	21001f04 	addi	r4,r4,124
   46f84:	210b883a 	add	r5,r4,r4
   46f88:	003e9d06 	br	46a00 <_malloc_r+0x11c>
   46f8c:	bdc00404 	addi	r23,r23,16
   46f90:	003f2f06 	br	46c50 <_malloc_r+0x36c>
   46f94:	01401504 	movi	r5,84
   46f98:	28c01f36 	bltu	r5,r3,47018 <_malloc_r+0x734>
   46f9c:	100ad33a 	srli	r5,r2,12
   46fa0:	29401b84 	addi	r5,r5,110
   46fa4:	294d883a 	add	r6,r5,r5
   46fa8:	003f8c06 	br	46ddc <_malloc_r+0x4f8>
   46fac:	9c000217 	ldw	r16,8(r19)
   46fb0:	00bfff04 	movi	r2,-4
   46fb4:	80c00117 	ldw	r3,4(r16)
   46fb8:	1886703a 	and	r3,r3,r2
   46fbc:	003f6606 	br	46d58 <_malloc_r+0x474>
   46fc0:	e0c3ffcc 	andi	r3,fp,4095
   46fc4:	183f2f1e 	bne	r3,zero,46c84 <_malloc_r+0x3a0>
   46fc8:	98c00217 	ldw	r3,8(r19)
   46fcc:	bd49883a 	add	r4,r23,r21
   46fd0:	21000054 	ori	r4,r4,1
   46fd4:	19000115 	stw	r4,4(r3)
   46fd8:	003f5506 	br	46d30 <_malloc_r+0x44c>
   46fdc:	01403f04 	movi	r5,252
   46fe0:	01001f84 	movi	r4,126
   46fe4:	003e8606 	br	46a00 <_malloc_r+0x11c>
   46fe8:	9009883a 	mov	r4,r18
   46fec:	81400204 	addi	r5,r16,8
   46ff0:	0045d4c0 	call	45d4c <_free_r>
   46ff4:	00800174 	movhi	r2,5
   46ff8:	1083b204 	addi	r2,r2,3784
   46ffc:	10800017 	ldw	r2,0(r2)
   47000:	003f4b06 	br	46d30 <_malloc_r+0x44c>
   47004:	00c00044 	movi	r3,1
   47008:	002f883a 	mov	r23,zero
   4700c:	003f3406 	br	46ce0 <_malloc_r+0x3fc>
   47010:	d5200315 	stw	r20,-32756(gp)
   47014:	003f2106 	br	46c9c <_malloc_r+0x3b8>
   47018:	01405504 	movi	r5,340
   4701c:	28c00436 	bltu	r5,r3,47030 <_malloc_r+0x74c>
   47020:	100ad3fa 	srli	r5,r2,15
   47024:	29401dc4 	addi	r5,r5,119
   47028:	294d883a 	add	r6,r5,r5
   4702c:	003f6b06 	br	46ddc <_malloc_r+0x4f8>
   47030:	01415504 	movi	r5,1364
   47034:	28c00936 	bltu	r5,r3,4705c <_malloc_r+0x778>
   47038:	100ad4ba 	srli	r5,r2,18
   4703c:	29401f04 	addi	r5,r5,124
   47040:	294d883a 	add	r6,r5,r5
   47044:	003f6506 	br	46ddc <_malloc_r+0x4f8>
   47048:	98800117 	ldw	r2,4(r19)
   4704c:	0146303a 	nor	r3,zero,r5
   47050:	1884703a 	and	r2,r3,r2
   47054:	98800115 	stw	r2,4(r19)
   47058:	003f9006 	br	46e9c <_malloc_r+0x5b8>
   4705c:	01803f04 	movi	r6,252
   47060:	01401f84 	movi	r5,126
   47064:	003f5d06 	br	46ddc <_malloc_r+0x4f8>

00047068 <memchr>:
   47068:	008000c4 	movi	r2,3
   4706c:	29403fcc 	andi	r5,r5,255
   47070:	1180282e 	bgeu	r2,r6,47114 <memchr+0xac>
   47074:	2086703a 	and	r3,r4,r2
   47078:	1800351e 	bne	r3,zero,47150 <memchr+0xe8>
   4707c:	2816923a 	slli	r11,r5,8
   47080:	2093883a 	add	r9,r4,r2
   47084:	22000084 	addi	r8,r4,2
   47088:	5957883a 	add	r11,r11,r5
   4708c:	5816923a 	slli	r11,r11,8
   47090:	20c00044 	addi	r3,r4,1
   47094:	037fbff4 	movhi	r13,65279
   47098:	6b7fbfc4 	addi	r13,r13,-257
   4709c:	5957883a 	add	r11,r11,r5
   470a0:	5816923a 	slli	r11,r11,8
   470a4:	03202074 	movhi	r12,32897
   470a8:	63202004 	addi	r12,r12,-32640
   470ac:	101d883a 	mov	r14,r2
   470b0:	5957883a 	add	r11,r11,r5
   470b4:	21c00017 	ldw	r7,0(r4)
   470b8:	31bfff04 	addi	r6,r6,-4
   470bc:	1805883a 	mov	r2,r3
   470c0:	3acef03a 	xor	r7,r7,r11
   470c4:	3b55883a 	add	r10,r7,r13
   470c8:	01ce303a 	nor	r7,zero,r7
   470cc:	51ce703a 	and	r7,r10,r7
   470d0:	3b0e703a 	and	r7,r7,r12
   470d4:	38000a26 	beq	r7,zero,47100 <memchr+0x98>
   470d8:	21c00003 	ldbu	r7,0(r4)
   470dc:	39401e26 	beq	r7,r5,47158 <memchr+0xf0>
   470e0:	19c00003 	ldbu	r7,0(r3)
   470e4:	39401926 	beq	r7,r5,4714c <memchr+0xe4>
   470e8:	41c00003 	ldbu	r7,0(r8)
   470ec:	4005883a 	mov	r2,r8
   470f0:	39401626 	beq	r7,r5,4714c <memchr+0xe4>
   470f4:	49c00003 	ldbu	r7,0(r9)
   470f8:	4805883a 	mov	r2,r9
   470fc:	39401326 	beq	r7,r5,4714c <memchr+0xe4>
   47100:	21000104 	addi	r4,r4,4
   47104:	4a400104 	addi	r9,r9,4
   47108:	42000104 	addi	r8,r8,4
   4710c:	18c00104 	addi	r3,r3,4
   47110:	71bfe836 	bltu	r14,r6,470b4 <memchr+0x4c>
   47114:	2005883a 	mov	r2,r4
   47118:	30000a26 	beq	r6,zero,47144 <memchr+0xdc>
   4711c:	10c00003 	ldbu	r3,0(r2)
   47120:	19400a26 	beq	r3,r5,4714c <memchr+0xe4>
   47124:	10c00044 	addi	r3,r2,1
   47128:	118d883a 	add	r6,r2,r6
   4712c:	00000306 	br	4713c <memchr+0xd4>
   47130:	11000003 	ldbu	r4,0(r2)
   47134:	18c00044 	addi	r3,r3,1
   47138:	21400426 	beq	r4,r5,4714c <memchr+0xe4>
   4713c:	1805883a 	mov	r2,r3
   47140:	19bffb1e 	bne	r3,r6,47130 <memchr+0xc8>
   47144:	0005883a 	mov	r2,zero
   47148:	f800283a 	ret
   4714c:	f800283a 	ret
   47150:	2005883a 	mov	r2,r4
   47154:	003ff106 	br	4711c <memchr+0xb4>
   47158:	2005883a 	mov	r2,r4
   4715c:	f800283a 	ret

00047160 <memcpy>:
   47160:	defffb04 	addi	sp,sp,-20
   47164:	dc000015 	stw	r16,0(sp)
   47168:	dfc00415 	stw	ra,16(sp)
   4716c:	dcc00315 	stw	r19,12(sp)
   47170:	dc800215 	stw	r18,8(sp)
   47174:	dc400115 	stw	r17,4(sp)
   47178:	00c003c4 	movi	r3,15
   4717c:	2021883a 	mov	r16,r4
   47180:	3005883a 	mov	r2,r6
   47184:	1980032e 	bgeu	r3,r6,47194 <memcpy+0x34>
   47188:	2906b03a 	or	r3,r5,r4
   4718c:	18c000cc 	andi	r3,r3,3
   47190:	18001026 	beq	r3,zero,471d4 <memcpy+0x74>
   47194:	8007883a 	mov	r3,r16
   47198:	288f883a 	add	r7,r5,r2
   4719c:	10000526 	beq	r2,zero,471b4 <memcpy+0x54>
   471a0:	29800003 	ldbu	r6,0(r5)
   471a4:	18c00044 	addi	r3,r3,1
   471a8:	29400044 	addi	r5,r5,1
   471ac:	19bfffc5 	stb	r6,-1(r3)
   471b0:	29fffb1e 	bne	r5,r7,471a0 <memcpy+0x40>
   471b4:	8005883a 	mov	r2,r16
   471b8:	dfc00417 	ldw	ra,16(sp)
   471bc:	dcc00317 	ldw	r19,12(sp)
   471c0:	dc800217 	ldw	r18,8(sp)
   471c4:	dc400117 	ldw	r17,4(sp)
   471c8:	dc000017 	ldw	r16,0(sp)
   471cc:	dec00504 	addi	sp,sp,20
   471d0:	f800283a 	ret
   471d4:	32bffc04 	addi	r10,r6,-16
   471d8:	5014d13a 	srli	r10,r10,4
   471dc:	20800404 	addi	r2,r4,16
   471e0:	2007883a 	mov	r3,r4
   471e4:	5008913a 	slli	r4,r10,4
   471e8:	280f883a 	mov	r7,r5
   471ec:	1105883a 	add	r2,r2,r4
   471f0:	3a000017 	ldw	r8,0(r7)
   471f4:	18c00404 	addi	r3,r3,16
   471f8:	39c00404 	addi	r7,r7,16
   471fc:	1a3ffc15 	stw	r8,-16(r3)
   47200:	3a3ffd17 	ldw	r8,-12(r7)
   47204:	1a3ffd15 	stw	r8,-12(r3)
   47208:	3a3ffe17 	ldw	r8,-8(r7)
   4720c:	1a3ffe15 	stw	r8,-8(r3)
   47210:	3a3fff17 	ldw	r8,-4(r7)
   47214:	1a3fff15 	stw	r8,-4(r3)
   47218:	18bff51e 	bne	r3,r2,471f0 <memcpy+0x90>
   4721c:	52800044 	addi	r10,r10,1
   47220:	5014913a 	slli	r10,r10,4
   47224:	308003cc 	andi	r2,r6,15
   47228:	010000c4 	movi	r4,3
   4722c:	8287883a 	add	r3,r16,r10
   47230:	2a95883a 	add	r10,r5,r10
   47234:	2080182e 	bgeu	r4,r2,47298 <memcpy+0x138>
   47238:	147fff04 	addi	r17,r2,-4
   4723c:	8808d0ba 	srli	r4,r17,2
   47240:	1a400104 	addi	r9,r3,4
   47244:	180d883a 	mov	r6,r3
   47248:	2105883a 	add	r2,r4,r4
   4724c:	1085883a 	add	r2,r2,r2
   47250:	4893883a 	add	r9,r9,r2
   47254:	500f883a 	mov	r7,r10
   47258:	3a000017 	ldw	r8,0(r7)
   4725c:	31800104 	addi	r6,r6,4
   47260:	39c00104 	addi	r7,r7,4
   47264:	323fff15 	stw	r8,-4(r6)
   47268:	327ffb1e 	bne	r6,r9,47258 <memcpy+0xf8>
   4726c:	20800044 	addi	r2,r4,1
   47270:	1085883a 	add	r2,r2,r2
   47274:	1085883a 	add	r2,r2,r2
   47278:	017fff04 	movi	r5,-4
   4727c:	18a5883a 	add	r18,r3,r2
   47280:	50a7883a 	add	r19,r10,r2
   47284:	0041a580 	call	41a58 <__mulsi3>
   47288:	1445883a 	add	r2,r2,r17
   4728c:	980b883a 	mov	r5,r19
   47290:	9007883a 	mov	r3,r18
   47294:	003fc006 	br	47198 <memcpy+0x38>
   47298:	500b883a 	mov	r5,r10
   4729c:	003fbe06 	br	47198 <memcpy+0x38>

000472a0 <memmove>:
   472a0:	defffb04 	addi	sp,sp,-20
   472a4:	dc000015 	stw	r16,0(sp)
   472a8:	dfc00415 	stw	ra,16(sp)
   472ac:	dcc00315 	stw	r19,12(sp)
   472b0:	dc800215 	stw	r18,8(sp)
   472b4:	dc400115 	stw	r17,4(sp)
   472b8:	2021883a 	mov	r16,r4
   472bc:	300f883a 	mov	r7,r6
   472c0:	2900122e 	bgeu	r5,r4,4730c <memmove+0x6c>
   472c4:	2987883a 	add	r3,r5,r6
   472c8:	20c0102e 	bgeu	r4,r3,4730c <memmove+0x6c>
   472cc:	218b883a 	add	r5,r4,r6
   472d0:	1989c83a 	sub	r4,r3,r6
   472d4:	30000526 	beq	r6,zero,472ec <memmove+0x4c>
   472d8:	18ffffc4 	addi	r3,r3,-1
   472dc:	18800003 	ldbu	r2,0(r3)
   472e0:	297fffc4 	addi	r5,r5,-1
   472e4:	28800005 	stb	r2,0(r5)
   472e8:	193ffb1e 	bne	r3,r4,472d8 <memmove+0x38>
   472ec:	8005883a 	mov	r2,r16
   472f0:	dfc00417 	ldw	ra,16(sp)
   472f4:	dcc00317 	ldw	r19,12(sp)
   472f8:	dc800217 	ldw	r18,8(sp)
   472fc:	dc400117 	ldw	r17,4(sp)
   47300:	dc000017 	ldw	r16,0(sp)
   47304:	dec00504 	addi	sp,sp,20
   47308:	f800283a 	ret
   4730c:	008003c4 	movi	r2,15
   47310:	1180422e 	bgeu	r2,r6,4741c <memmove+0x17c>
   47314:	2c04b03a 	or	r2,r5,r16
   47318:	108000cc 	andi	r2,r2,3
   4731c:	10003f1e 	bne	r2,zero,4741c <memmove+0x17c>
   47320:	32bffc04 	addi	r10,r6,-16
   47324:	5014d13a 	srli	r10,r10,4
   47328:	81000404 	addi	r4,r16,16
   4732c:	8007883a 	mov	r3,r16
   47330:	5004913a 	slli	r2,r10,4
   47334:	280f883a 	mov	r7,r5
   47338:	2089883a 	add	r4,r4,r2
   4733c:	38800017 	ldw	r2,0(r7)
   47340:	18c00404 	addi	r3,r3,16
   47344:	39c00404 	addi	r7,r7,16
   47348:	18bffc15 	stw	r2,-16(r3)
   4734c:	38bffd17 	ldw	r2,-12(r7)
   47350:	18bffd15 	stw	r2,-12(r3)
   47354:	38bffe17 	ldw	r2,-8(r7)
   47358:	18bffe15 	stw	r2,-8(r3)
   4735c:	38bfff17 	ldw	r2,-4(r7)
   47360:	18bfff15 	stw	r2,-4(r3)
   47364:	193ff51e 	bne	r3,r4,4733c <memmove+0x9c>
   47368:	52800044 	addi	r10,r10,1
   4736c:	5014913a 	slli	r10,r10,4
   47370:	31c003cc 	andi	r7,r6,15
   47374:	008000c4 	movi	r2,3
   47378:	8287883a 	add	r3,r16,r10
   4737c:	2a95883a 	add	r10,r5,r10
   47380:	11c0282e 	bgeu	r2,r7,47424 <memmove+0x184>
   47384:	3c7fff04 	addi	r17,r7,-4
   47388:	8808d0ba 	srli	r4,r17,2
   4738c:	1a400104 	addi	r9,r3,4
   47390:	180d883a 	mov	r6,r3
   47394:	2105883a 	add	r2,r4,r4
   47398:	1085883a 	add	r2,r2,r2
   4739c:	4893883a 	add	r9,r9,r2
   473a0:	5005883a 	mov	r2,r10
   473a4:	12000017 	ldw	r8,0(r2)
   473a8:	31800104 	addi	r6,r6,4
   473ac:	10800104 	addi	r2,r2,4
   473b0:	323fff15 	stw	r8,-4(r6)
   473b4:	327ffb1e 	bne	r6,r9,473a4 <memmove+0x104>
   473b8:	20800044 	addi	r2,r4,1
   473bc:	1085883a 	add	r2,r2,r2
   473c0:	1085883a 	add	r2,r2,r2
   473c4:	017fff04 	movi	r5,-4
   473c8:	18a5883a 	add	r18,r3,r2
   473cc:	50a7883a 	add	r19,r10,r2
   473d0:	0041a580 	call	41a58 <__mulsi3>
   473d4:	144f883a 	add	r7,r2,r17
   473d8:	980b883a 	mov	r5,r19
   473dc:	9007883a 	mov	r3,r18
   473e0:	383fc226 	beq	r7,zero,472ec <memmove+0x4c>
   473e4:	19cf883a 	add	r7,r3,r7
   473e8:	29800003 	ldbu	r6,0(r5)
   473ec:	18c00044 	addi	r3,r3,1
   473f0:	29400044 	addi	r5,r5,1
   473f4:	19bfffc5 	stb	r6,-1(r3)
   473f8:	19fffb1e 	bne	r3,r7,473e8 <memmove+0x148>
   473fc:	8005883a 	mov	r2,r16
   47400:	dfc00417 	ldw	ra,16(sp)
   47404:	dcc00317 	ldw	r19,12(sp)
   47408:	dc800217 	ldw	r18,8(sp)
   4740c:	dc400117 	ldw	r17,4(sp)
   47410:	dc000017 	ldw	r16,0(sp)
   47414:	dec00504 	addi	sp,sp,20
   47418:	f800283a 	ret
   4741c:	8007883a 	mov	r3,r16
   47420:	003fef06 	br	473e0 <memmove+0x140>
   47424:	500b883a 	mov	r5,r10
   47428:	003fed06 	br	473e0 <memmove+0x140>

0004742c <memset>:
   4742c:	00c000c4 	movi	r3,3
   47430:	2005883a 	mov	r2,r4
   47434:	29403fcc 	andi	r5,r5,255
   47438:	19802d2e 	bgeu	r3,r6,474f0 <memset+0xc4>
   4743c:	20c6703a 	and	r3,r4,r3
   47440:	18002e1e 	bne	r3,zero,474fc <memset+0xd0>
   47444:	2806923a 	slli	r3,r5,8
   47448:	010003c4 	movi	r4,15
   4744c:	3011883a 	mov	r8,r6
   47450:	1946b03a 	or	r3,r3,r5
   47454:	180e943a 	slli	r7,r3,16
   47458:	38ceb03a 	or	r7,r7,r3
   4745c:	1007883a 	mov	r3,r2
   47460:	21800f2e 	bgeu	r4,r6,474a0 <memset+0x74>
   47464:	19c00015 	stw	r7,0(r3)
   47468:	19c00115 	stw	r7,4(r3)
   4746c:	19c00215 	stw	r7,8(r3)
   47470:	19c00315 	stw	r7,12(r3)
   47474:	423ffc04 	addi	r8,r8,-16
   47478:	18c00404 	addi	r3,r3,16
   4747c:	223ff936 	bltu	r4,r8,47464 <memset+0x38>
   47480:	30fffc04 	addi	r3,r6,-16
   47484:	1806d13a 	srli	r3,r3,4
   47488:	318003cc 	andi	r6,r6,15
   4748c:	010000c4 	movi	r4,3
   47490:	18c00044 	addi	r3,r3,1
   47494:	1806913a 	slli	r3,r3,4
   47498:	10c7883a 	add	r3,r2,r3
   4749c:	21800e2e 	bgeu	r4,r6,474d8 <memset+0xac>
   474a0:	1813883a 	mov	r9,r3
   474a4:	3011883a 	mov	r8,r6
   474a8:	010000c4 	movi	r4,3
   474ac:	49c00015 	stw	r7,0(r9)
   474b0:	423fff04 	addi	r8,r8,-4
   474b4:	4a400104 	addi	r9,r9,4
   474b8:	223ffc36 	bltu	r4,r8,474ac <memset+0x80>
   474bc:	313fff04 	addi	r4,r6,-4
   474c0:	2008d0ba 	srli	r4,r4,2
   474c4:	318000cc 	andi	r6,r6,3
   474c8:	21000044 	addi	r4,r4,1
   474cc:	2109883a 	add	r4,r4,r4
   474d0:	2109883a 	add	r4,r4,r4
   474d4:	1907883a 	add	r3,r3,r4
   474d8:	30000a26 	beq	r6,zero,47504 <memset+0xd8>
   474dc:	198d883a 	add	r6,r3,r6
   474e0:	19400005 	stb	r5,0(r3)
   474e4:	18c00044 	addi	r3,r3,1
   474e8:	19bffd1e 	bne	r3,r6,474e0 <memset+0xb4>
   474ec:	f800283a 	ret
   474f0:	2007883a 	mov	r3,r4
   474f4:	303ff91e 	bne	r6,zero,474dc <memset+0xb0>
   474f8:	00000206 	br	47504 <memset+0xd8>
   474fc:	2007883a 	mov	r3,r4
   47500:	003ff606 	br	474dc <memset+0xb0>
   47504:	f800283a 	ret

00047508 <_Balloc>:
   47508:	20801317 	ldw	r2,76(r4)
   4750c:	defffc04 	addi	sp,sp,-16
   47510:	dc400115 	stw	r17,4(sp)
   47514:	dc000015 	stw	r16,0(sp)
   47518:	dfc00315 	stw	ra,12(sp)
   4751c:	dc800215 	stw	r18,8(sp)
   47520:	2023883a 	mov	r17,r4
   47524:	2821883a 	mov	r16,r5
   47528:	10000f26 	beq	r2,zero,47568 <_Balloc+0x60>
   4752c:	8407883a 	add	r3,r16,r16
   47530:	18c7883a 	add	r3,r3,r3
   47534:	10c7883a 	add	r3,r2,r3
   47538:	18800017 	ldw	r2,0(r3)
   4753c:	10001126 	beq	r2,zero,47584 <_Balloc+0x7c>
   47540:	11000017 	ldw	r4,0(r2)
   47544:	19000015 	stw	r4,0(r3)
   47548:	10000415 	stw	zero,16(r2)
   4754c:	10000315 	stw	zero,12(r2)
   47550:	dfc00317 	ldw	ra,12(sp)
   47554:	dc800217 	ldw	r18,8(sp)
   47558:	dc400117 	ldw	r17,4(sp)
   4755c:	dc000017 	ldw	r16,0(sp)
   47560:	dec00404 	addi	sp,sp,16
   47564:	f800283a 	ret
   47568:	01400104 	movi	r5,4
   4756c:	01800404 	movi	r6,16
   47570:	0048e6c0 	call	48e6c <_calloc_r>
   47574:	88801315 	stw	r2,76(r17)
   47578:	103fec1e 	bne	r2,zero,4752c <_Balloc+0x24>
   4757c:	0005883a 	mov	r2,zero
   47580:	003ff306 	br	47550 <_Balloc+0x48>
   47584:	01400044 	movi	r5,1
   47588:	2c24983a 	sll	r18,r5,r16
   4758c:	8809883a 	mov	r4,r17
   47590:	91800144 	addi	r6,r18,5
   47594:	318d883a 	add	r6,r6,r6
   47598:	318d883a 	add	r6,r6,r6
   4759c:	0048e6c0 	call	48e6c <_calloc_r>
   475a0:	103ff626 	beq	r2,zero,4757c <_Balloc+0x74>
   475a4:	14000115 	stw	r16,4(r2)
   475a8:	14800215 	stw	r18,8(r2)
   475ac:	003fe606 	br	47548 <_Balloc+0x40>

000475b0 <_Bfree>:
   475b0:	28000826 	beq	r5,zero,475d4 <_Bfree+0x24>
   475b4:	28c00117 	ldw	r3,4(r5)
   475b8:	20801317 	ldw	r2,76(r4)
   475bc:	18c7883a 	add	r3,r3,r3
   475c0:	18c7883a 	add	r3,r3,r3
   475c4:	10c5883a 	add	r2,r2,r3
   475c8:	10c00017 	ldw	r3,0(r2)
   475cc:	28c00015 	stw	r3,0(r5)
   475d0:	11400015 	stw	r5,0(r2)
   475d4:	f800283a 	ret

000475d8 <__multadd>:
   475d8:	defff604 	addi	sp,sp,-40
   475dc:	dd400515 	stw	r21,20(sp)
   475e0:	2d400417 	ldw	r21,16(r5)
   475e4:	df000815 	stw	fp,32(sp)
   475e8:	ddc00715 	stw	r23,28(sp)
   475ec:	dd800615 	stw	r22,24(sp)
   475f0:	dd000415 	stw	r20,16(sp)
   475f4:	dc400115 	stw	r17,4(sp)
   475f8:	dc000015 	stw	r16,0(sp)
   475fc:	dfc00915 	stw	ra,36(sp)
   47600:	dcc00315 	stw	r19,12(sp)
   47604:	dc800215 	stw	r18,8(sp)
   47608:	282d883a 	mov	r22,r5
   4760c:	202f883a 	mov	r23,r4
   47610:	3029883a 	mov	r20,r6
   47614:	3839883a 	mov	fp,r7
   47618:	2c000504 	addi	r16,r5,20
   4761c:	0023883a 	mov	r17,zero
   47620:	84c00017 	ldw	r19,0(r16)
   47624:	a00b883a 	mov	r5,r20
   47628:	8c400044 	addi	r17,r17,1
   4762c:	993fffcc 	andi	r4,r19,65535
   47630:	0041a580 	call	41a58 <__mulsi3>
   47634:	1725883a 	add	r18,r2,fp
   47638:	9808d43a 	srli	r4,r19,16
   4763c:	9026d43a 	srli	r19,r18,16
   47640:	a00b883a 	mov	r5,r20
   47644:	0041a580 	call	41a58 <__mulsi3>
   47648:	988f883a 	add	r7,r19,r2
   4764c:	3804943a 	slli	r2,r7,16
   47650:	94bfffcc 	andi	r18,r18,65535
   47654:	3838d43a 	srli	fp,r7,16
   47658:	14a5883a 	add	r18,r2,r18
   4765c:	84800015 	stw	r18,0(r16)
   47660:	84000104 	addi	r16,r16,4
   47664:	8d7fee16 	blt	r17,r21,47620 <__multadd+0x48>
   47668:	e0000926 	beq	fp,zero,47690 <__multadd+0xb8>
   4766c:	b0800217 	ldw	r2,8(r22)
   47670:	a880140e 	bge	r21,r2,476c4 <__multadd+0xec>
   47674:	a8800144 	addi	r2,r21,5
   47678:	1085883a 	add	r2,r2,r2
   4767c:	1085883a 	add	r2,r2,r2
   47680:	b085883a 	add	r2,r22,r2
   47684:	ad400044 	addi	r21,r21,1
   47688:	17000015 	stw	fp,0(r2)
   4768c:	b5400415 	stw	r21,16(r22)
   47690:	b005883a 	mov	r2,r22
   47694:	dfc00917 	ldw	ra,36(sp)
   47698:	df000817 	ldw	fp,32(sp)
   4769c:	ddc00717 	ldw	r23,28(sp)
   476a0:	dd800617 	ldw	r22,24(sp)
   476a4:	dd400517 	ldw	r21,20(sp)
   476a8:	dd000417 	ldw	r20,16(sp)
   476ac:	dcc00317 	ldw	r19,12(sp)
   476b0:	dc800217 	ldw	r18,8(sp)
   476b4:	dc400117 	ldw	r17,4(sp)
   476b8:	dc000017 	ldw	r16,0(sp)
   476bc:	dec00a04 	addi	sp,sp,40
   476c0:	f800283a 	ret
   476c4:	b1400117 	ldw	r5,4(r22)
   476c8:	b809883a 	mov	r4,r23
   476cc:	29400044 	addi	r5,r5,1
   476d0:	00475080 	call	47508 <_Balloc>
   476d4:	b1800417 	ldw	r6,16(r22)
   476d8:	b1400304 	addi	r5,r22,12
   476dc:	11000304 	addi	r4,r2,12
   476e0:	31800084 	addi	r6,r6,2
   476e4:	318d883a 	add	r6,r6,r6
   476e8:	318d883a 	add	r6,r6,r6
   476ec:	1021883a 	mov	r16,r2
   476f0:	00471600 	call	47160 <memcpy>
   476f4:	b0c00117 	ldw	r3,4(r22)
   476f8:	b8801317 	ldw	r2,76(r23)
   476fc:	18c7883a 	add	r3,r3,r3
   47700:	18c7883a 	add	r3,r3,r3
   47704:	10c5883a 	add	r2,r2,r3
   47708:	10c00017 	ldw	r3,0(r2)
   4770c:	b0c00015 	stw	r3,0(r22)
   47710:	15800015 	stw	r22,0(r2)
   47714:	802d883a 	mov	r22,r16
   47718:	003fd606 	br	47674 <__multadd+0x9c>

0004771c <__s2b>:
   4771c:	defff904 	addi	sp,sp,-28
   47720:	dd000415 	stw	r20,16(sp)
   47724:	dc400115 	stw	r17,4(sp)
   47728:	2829883a 	mov	r20,r5
   4772c:	2023883a 	mov	r17,r4
   47730:	01400244 	movi	r5,9
   47734:	39000204 	addi	r4,r7,8
   47738:	dcc00315 	stw	r19,12(sp)
   4773c:	dc800215 	stw	r18,8(sp)
   47740:	dfc00615 	stw	ra,24(sp)
   47744:	dd400515 	stw	r21,20(sp)
   47748:	dc000015 	stw	r16,0(sp)
   4774c:	3825883a 	mov	r18,r7
   47750:	3027883a 	mov	r19,r6
   47754:	004a7080 	call	4a708 <__divsi3>
   47758:	00c00044 	movi	r3,1
   4775c:	000b883a 	mov	r5,zero
   47760:	1880030e 	bge	r3,r2,47770 <__s2b+0x54>
   47764:	18c7883a 	add	r3,r3,r3
   47768:	29400044 	addi	r5,r5,1
   4776c:	18bffd16 	blt	r3,r2,47764 <__s2b+0x48>
   47770:	8809883a 	mov	r4,r17
   47774:	00475080 	call	47508 <_Balloc>
   47778:	d8c00717 	ldw	r3,28(sp)
   4777c:	10c00515 	stw	r3,20(r2)
   47780:	00c00044 	movi	r3,1
   47784:	10c00415 	stw	r3,16(r2)
   47788:	00c00244 	movi	r3,9
   4778c:	1cc0210e 	bge	r3,r19,47814 <__s2b+0xf8>
   47790:	a0eb883a 	add	r21,r20,r3
   47794:	a821883a 	mov	r16,r21
   47798:	a4e9883a 	add	r20,r20,r19
   4779c:	81c00007 	ldb	r7,0(r16)
   477a0:	8809883a 	mov	r4,r17
   477a4:	84000044 	addi	r16,r16,1
   477a8:	100b883a 	mov	r5,r2
   477ac:	01800284 	movi	r6,10
   477b0:	39fff404 	addi	r7,r7,-48
   477b4:	00475d80 	call	475d8 <__multadd>
   477b8:	853ff81e 	bne	r16,r20,4779c <__s2b+0x80>
   477bc:	ace1883a 	add	r16,r21,r19
   477c0:	843ffe04 	addi	r16,r16,-8
   477c4:	9c800a0e 	bge	r19,r18,477f0 <__s2b+0xd4>
   477c8:	94e5c83a 	sub	r18,r18,r19
   477cc:	84a5883a 	add	r18,r16,r18
   477d0:	81c00007 	ldb	r7,0(r16)
   477d4:	8809883a 	mov	r4,r17
   477d8:	84000044 	addi	r16,r16,1
   477dc:	100b883a 	mov	r5,r2
   477e0:	01800284 	movi	r6,10
   477e4:	39fff404 	addi	r7,r7,-48
   477e8:	00475d80 	call	475d8 <__multadd>
   477ec:	84bff81e 	bne	r16,r18,477d0 <__s2b+0xb4>
   477f0:	dfc00617 	ldw	ra,24(sp)
   477f4:	dd400517 	ldw	r21,20(sp)
   477f8:	dd000417 	ldw	r20,16(sp)
   477fc:	dcc00317 	ldw	r19,12(sp)
   47800:	dc800217 	ldw	r18,8(sp)
   47804:	dc400117 	ldw	r17,4(sp)
   47808:	dc000017 	ldw	r16,0(sp)
   4780c:	dec00704 	addi	sp,sp,28
   47810:	f800283a 	ret
   47814:	a4000284 	addi	r16,r20,10
   47818:	1827883a 	mov	r19,r3
   4781c:	003fe906 	br	477c4 <__s2b+0xa8>

00047820 <__hi0bits>:
   47820:	20bfffec 	andhi	r2,r4,65535
   47824:	1000141e 	bne	r2,zero,47878 <__hi0bits+0x58>
   47828:	2008943a 	slli	r4,r4,16
   4782c:	00800404 	movi	r2,16
   47830:	20ffc02c 	andhi	r3,r4,65280
   47834:	1800021e 	bne	r3,zero,47840 <__hi0bits+0x20>
   47838:	2008923a 	slli	r4,r4,8
   4783c:	10800204 	addi	r2,r2,8
   47840:	20fc002c 	andhi	r3,r4,61440
   47844:	1800021e 	bne	r3,zero,47850 <__hi0bits+0x30>
   47848:	2008913a 	slli	r4,r4,4
   4784c:	10800104 	addi	r2,r2,4
   47850:	20f0002c 	andhi	r3,r4,49152
   47854:	1800031e 	bne	r3,zero,47864 <__hi0bits+0x44>
   47858:	2109883a 	add	r4,r4,r4
   4785c:	10800084 	addi	r2,r2,2
   47860:	2109883a 	add	r4,r4,r4
   47864:	20000316 	blt	r4,zero,47874 <__hi0bits+0x54>
   47868:	2110002c 	andhi	r4,r4,16384
   4786c:	2000041e 	bne	r4,zero,47880 <__hi0bits+0x60>
   47870:	00800804 	movi	r2,32
   47874:	f800283a 	ret
   47878:	0005883a 	mov	r2,zero
   4787c:	003fec06 	br	47830 <__hi0bits+0x10>
   47880:	10800044 	addi	r2,r2,1
   47884:	f800283a 	ret

00047888 <__lo0bits>:
   47888:	20c00017 	ldw	r3,0(r4)
   4788c:	188001cc 	andi	r2,r3,7
   47890:	10000826 	beq	r2,zero,478b4 <__lo0bits+0x2c>
   47894:	1880004c 	andi	r2,r3,1
   47898:	1000211e 	bne	r2,zero,47920 <__lo0bits+0x98>
   4789c:	1880008c 	andi	r2,r3,2
   478a0:	1000211e 	bne	r2,zero,47928 <__lo0bits+0xa0>
   478a4:	1806d0ba 	srli	r3,r3,2
   478a8:	00800084 	movi	r2,2
   478ac:	20c00015 	stw	r3,0(r4)
   478b0:	f800283a 	ret
   478b4:	18bfffcc 	andi	r2,r3,65535
   478b8:	10001326 	beq	r2,zero,47908 <__lo0bits+0x80>
   478bc:	0005883a 	mov	r2,zero
   478c0:	19403fcc 	andi	r5,r3,255
   478c4:	2800021e 	bne	r5,zero,478d0 <__lo0bits+0x48>
   478c8:	1806d23a 	srli	r3,r3,8
   478cc:	10800204 	addi	r2,r2,8
   478d0:	194003cc 	andi	r5,r3,15
   478d4:	2800021e 	bne	r5,zero,478e0 <__lo0bits+0x58>
   478d8:	1806d13a 	srli	r3,r3,4
   478dc:	10800104 	addi	r2,r2,4
   478e0:	194000cc 	andi	r5,r3,3
   478e4:	2800021e 	bne	r5,zero,478f0 <__lo0bits+0x68>
   478e8:	1806d0ba 	srli	r3,r3,2
   478ec:	10800084 	addi	r2,r2,2
   478f0:	1940004c 	andi	r5,r3,1
   478f4:	2800081e 	bne	r5,zero,47918 <__lo0bits+0x90>
   478f8:	1806d07a 	srli	r3,r3,1
   478fc:	1800051e 	bne	r3,zero,47914 <__lo0bits+0x8c>
   47900:	00800804 	movi	r2,32
   47904:	f800283a 	ret
   47908:	1806d43a 	srli	r3,r3,16
   4790c:	00800404 	movi	r2,16
   47910:	003feb06 	br	478c0 <__lo0bits+0x38>
   47914:	10800044 	addi	r2,r2,1
   47918:	20c00015 	stw	r3,0(r4)
   4791c:	f800283a 	ret
   47920:	0005883a 	mov	r2,zero
   47924:	f800283a 	ret
   47928:	1806d07a 	srli	r3,r3,1
   4792c:	00800044 	movi	r2,1
   47930:	20c00015 	stw	r3,0(r4)
   47934:	f800283a 	ret

00047938 <__i2b>:
   47938:	defffd04 	addi	sp,sp,-12
   4793c:	dc000015 	stw	r16,0(sp)
   47940:	04000044 	movi	r16,1
   47944:	dc400115 	stw	r17,4(sp)
   47948:	2823883a 	mov	r17,r5
   4794c:	800b883a 	mov	r5,r16
   47950:	dfc00215 	stw	ra,8(sp)
   47954:	00475080 	call	47508 <_Balloc>
   47958:	14400515 	stw	r17,20(r2)
   4795c:	14000415 	stw	r16,16(r2)
   47960:	dfc00217 	ldw	ra,8(sp)
   47964:	dc400117 	ldw	r17,4(sp)
   47968:	dc000017 	ldw	r16,0(sp)
   4796c:	dec00304 	addi	sp,sp,12
   47970:	f800283a 	ret

00047974 <__multiply>:
   47974:	defff004 	addi	sp,sp,-64
   47978:	dc800815 	stw	r18,32(sp)
   4797c:	dc400715 	stw	r17,28(sp)
   47980:	34800417 	ldw	r18,16(r6)
   47984:	2c400417 	ldw	r17,16(r5)
   47988:	ddc00d15 	stw	r23,52(sp)
   4798c:	dc000615 	stw	r16,24(sp)
   47990:	dfc00f15 	stw	ra,60(sp)
   47994:	df000e15 	stw	fp,56(sp)
   47998:	dd800c15 	stw	r22,48(sp)
   4799c:	dd400b15 	stw	r21,44(sp)
   479a0:	dd000a15 	stw	r20,40(sp)
   479a4:	dcc00915 	stw	r19,36(sp)
   479a8:	2821883a 	mov	r16,r5
   479ac:	302f883a 	mov	r23,r6
   479b0:	8c80050e 	bge	r17,r18,479c8 <__multiply+0x54>
   479b4:	8807883a 	mov	r3,r17
   479b8:	3021883a 	mov	r16,r6
   479bc:	9023883a 	mov	r17,r18
   479c0:	282f883a 	mov	r23,r5
   479c4:	1825883a 	mov	r18,r3
   479c8:	80800217 	ldw	r2,8(r16)
   479cc:	8c87883a 	add	r3,r17,r18
   479d0:	d8c00115 	stw	r3,4(sp)
   479d4:	81400117 	ldw	r5,4(r16)
   479d8:	10c0010e 	bge	r2,r3,479e0 <__multiply+0x6c>
   479dc:	29400044 	addi	r5,r5,1
   479e0:	00475080 	call	47508 <_Balloc>
   479e4:	d8c00117 	ldw	r3,4(sp)
   479e8:	d8800515 	stw	r2,20(sp)
   479ec:	14c00504 	addi	r19,r2,20
   479f0:	1d400144 	addi	r21,r3,5
   479f4:	ad6b883a 	add	r21,r21,r21
   479f8:	ad6b883a 	add	r21,r21,r21
   479fc:	156b883a 	add	r21,r2,r21
   47a00:	dd400215 	stw	r21,8(sp)
   47a04:	9805883a 	mov	r2,r19
   47a08:	9d40042e 	bgeu	r19,r21,47a1c <__multiply+0xa8>
   47a0c:	d8c00217 	ldw	r3,8(sp)
   47a10:	10000015 	stw	zero,0(r2)
   47a14:	10800104 	addi	r2,r2,4
   47a18:	10fffc36 	bltu	r2,r3,47a0c <__multiply+0x98>
   47a1c:	94800144 	addi	r18,r18,5
   47a20:	94a5883a 	add	r18,r18,r18
   47a24:	94ad883a 	add	r22,r18,r18
   47a28:	8c400144 	addi	r17,r17,5
   47a2c:	8c63883a 	add	r17,r17,r17
   47a30:	bdad883a 	add	r22,r23,r22
   47a34:	80c00504 	addi	r3,r16,20
   47a38:	8c63883a 	add	r17,r17,r17
   47a3c:	bc800504 	addi	r18,r23,20
   47a40:	dd800315 	stw	r22,12(sp)
   47a44:	d8c00415 	stw	r3,16(sp)
   47a48:	dcc00015 	stw	r19,0(sp)
   47a4c:	8463883a 	add	r17,r16,r17
   47a50:	9580412e 	bgeu	r18,r22,47b58 <__multiply+0x1e4>
   47a54:	90800017 	ldw	r2,0(r18)
   47a58:	173fffcc 	andi	fp,r2,65535
   47a5c:	e0001a26 	beq	fp,zero,47ac8 <__multiply+0x154>
   47a60:	dd000017 	ldw	r20,0(sp)
   47a64:	dd800417 	ldw	r22,16(sp)
   47a68:	002b883a 	mov	r21,zero
   47a6c:	b4c00017 	ldw	r19,0(r22)
   47a70:	a4000017 	ldw	r16,0(r20)
   47a74:	e00b883a 	mov	r5,fp
   47a78:	993fffcc 	andi	r4,r19,65535
   47a7c:	0041a580 	call	41a58 <__mulsi3>
   47a80:	9808d43a 	srli	r4,r19,16
   47a84:	817fffcc 	andi	r5,r16,65535
   47a88:	1145883a 	add	r2,r2,r5
   47a8c:	e00b883a 	mov	r5,fp
   47a90:	1567883a 	add	r19,r2,r21
   47a94:	8020d43a 	srli	r16,r16,16
   47a98:	0041a580 	call	41a58 <__mulsi3>
   47a9c:	9808d43a 	srli	r4,r19,16
   47aa0:	1405883a 	add	r2,r2,r16
   47aa4:	a4c0000d 	sth	r19,0(r20)
   47aa8:	110f883a 	add	r7,r2,r4
   47aac:	a1c0008d 	sth	r7,2(r20)
   47ab0:	b5800104 	addi	r22,r22,4
   47ab4:	382ad43a 	srli	r21,r7,16
   47ab8:	a5000104 	addi	r20,r20,4
   47abc:	b47feb36 	bltu	r22,r17,47a6c <__multiply+0xf8>
   47ac0:	a5400015 	stw	r21,0(r20)
   47ac4:	90800017 	ldw	r2,0(r18)
   47ac8:	1038d43a 	srli	fp,r2,16
   47acc:	e0001c26 	beq	fp,zero,47b40 <__multiply+0x1cc>
   47ad0:	d8c00017 	ldw	r3,0(sp)
   47ad4:	dd000417 	ldw	r20,16(sp)
   47ad8:	002b883a 	mov	r21,zero
   47adc:	1d800017 	ldw	r22,0(r3)
   47ae0:	182f883a 	mov	r23,r3
   47ae4:	b021883a 	mov	r16,r22
   47ae8:	a4c00017 	ldw	r19,0(r20)
   47aec:	8020d43a 	srli	r16,r16,16
   47af0:	e00b883a 	mov	r5,fp
   47af4:	993fffcc 	andi	r4,r19,65535
   47af8:	0041a580 	call	41a58 <__mulsi3>
   47afc:	1405883a 	add	r2,r2,r16
   47b00:	9808d43a 	srli	r4,r19,16
   47b04:	156b883a 	add	r21,r2,r21
   47b08:	bdc00104 	addi	r23,r23,4
   47b0c:	bdbfff0d 	sth	r22,-4(r23)
   47b10:	bd7fff8d 	sth	r21,-2(r23)
   47b14:	bc000017 	ldw	r16,0(r23)
   47b18:	e00b883a 	mov	r5,fp
   47b1c:	0041a580 	call	41a58 <__mulsi3>
   47b20:	a80ed43a 	srli	r7,r21,16
   47b24:	813fffcc 	andi	r4,r16,65535
   47b28:	2085883a 	add	r2,r4,r2
   47b2c:	11ed883a 	add	r22,r2,r7
   47b30:	a5000104 	addi	r20,r20,4
   47b34:	b02ad43a 	srli	r21,r22,16
   47b38:	a47feb36 	bltu	r20,r17,47ae8 <__multiply+0x174>
   47b3c:	bd800015 	stw	r22,0(r23)
   47b40:	d8c00017 	ldw	r3,0(sp)
   47b44:	94800104 	addi	r18,r18,4
   47b48:	18c00104 	addi	r3,r3,4
   47b4c:	d8c00015 	stw	r3,0(sp)
   47b50:	d8c00317 	ldw	r3,12(sp)
   47b54:	90ffbf36 	bltu	r18,r3,47a54 <__multiply+0xe0>
   47b58:	d8c00117 	ldw	r3,4(sp)
   47b5c:	00c00c0e 	bge	zero,r3,47b90 <__multiply+0x21c>
   47b60:	d8c00217 	ldw	r3,8(sp)
   47b64:	18bfff17 	ldw	r2,-4(r3)
   47b68:	1d7fff04 	addi	r21,r3,-4
   47b6c:	10000326 	beq	r2,zero,47b7c <__multiply+0x208>
   47b70:	00000706 	br	47b90 <__multiply+0x21c>
   47b74:	a8800017 	ldw	r2,0(r21)
   47b78:	1000051e 	bne	r2,zero,47b90 <__multiply+0x21c>
   47b7c:	d8c00117 	ldw	r3,4(sp)
   47b80:	ad7fff04 	addi	r21,r21,-4
   47b84:	18ffffc4 	addi	r3,r3,-1
   47b88:	d8c00115 	stw	r3,4(sp)
   47b8c:	183ff91e 	bne	r3,zero,47b74 <__multiply+0x200>
   47b90:	d8800517 	ldw	r2,20(sp)
   47b94:	d8c00117 	ldw	r3,4(sp)
   47b98:	10c00415 	stw	r3,16(r2)
   47b9c:	dfc00f17 	ldw	ra,60(sp)
   47ba0:	df000e17 	ldw	fp,56(sp)
   47ba4:	ddc00d17 	ldw	r23,52(sp)
   47ba8:	dd800c17 	ldw	r22,48(sp)
   47bac:	dd400b17 	ldw	r21,44(sp)
   47bb0:	dd000a17 	ldw	r20,40(sp)
   47bb4:	dcc00917 	ldw	r19,36(sp)
   47bb8:	dc800817 	ldw	r18,32(sp)
   47bbc:	dc400717 	ldw	r17,28(sp)
   47bc0:	dc000617 	ldw	r16,24(sp)
   47bc4:	dec01004 	addi	sp,sp,64
   47bc8:	f800283a 	ret

00047bcc <__pow5mult>:
   47bcc:	defffb04 	addi	sp,sp,-20
   47bd0:	dcc00315 	stw	r19,12(sp)
   47bd4:	dc800215 	stw	r18,8(sp)
   47bd8:	dc000015 	stw	r16,0(sp)
   47bdc:	dfc00415 	stw	ra,16(sp)
   47be0:	dc400115 	stw	r17,4(sp)
   47be4:	308000cc 	andi	r2,r6,3
   47be8:	3021883a 	mov	r16,r6
   47bec:	2027883a 	mov	r19,r4
   47bf0:	2825883a 	mov	r18,r5
   47bf4:	10002e1e 	bne	r2,zero,47cb0 <__pow5mult+0xe4>
   47bf8:	8021d0ba 	srai	r16,r16,2
   47bfc:	80001a26 	beq	r16,zero,47c68 <__pow5mult+0x9c>
   47c00:	9c401217 	ldw	r17,72(r19)
   47c04:	8800061e 	bne	r17,zero,47c20 <__pow5mult+0x54>
   47c08:	00003406 	br	47cdc <__pow5mult+0x110>
   47c0c:	8021d07a 	srai	r16,r16,1
   47c10:	80001526 	beq	r16,zero,47c68 <__pow5mult+0x9c>
   47c14:	88c00017 	ldw	r3,0(r17)
   47c18:	18001b26 	beq	r3,zero,47c88 <__pow5mult+0xbc>
   47c1c:	1823883a 	mov	r17,r3
   47c20:	80c0004c 	andi	r3,r16,1
   47c24:	183ff926 	beq	r3,zero,47c0c <__pow5mult+0x40>
   47c28:	900b883a 	mov	r5,r18
   47c2c:	880d883a 	mov	r6,r17
   47c30:	9809883a 	mov	r4,r19
   47c34:	00479740 	call	47974 <__multiply>
   47c38:	90001b26 	beq	r18,zero,47ca8 <__pow5mult+0xdc>
   47c3c:	91000117 	ldw	r4,4(r18)
   47c40:	98c01317 	ldw	r3,76(r19)
   47c44:	8021d07a 	srai	r16,r16,1
   47c48:	2109883a 	add	r4,r4,r4
   47c4c:	2109883a 	add	r4,r4,r4
   47c50:	1907883a 	add	r3,r3,r4
   47c54:	19000017 	ldw	r4,0(r3)
   47c58:	91000015 	stw	r4,0(r18)
   47c5c:	1c800015 	stw	r18,0(r3)
   47c60:	1025883a 	mov	r18,r2
   47c64:	803feb1e 	bne	r16,zero,47c14 <__pow5mult+0x48>
   47c68:	9005883a 	mov	r2,r18
   47c6c:	dfc00417 	ldw	ra,16(sp)
   47c70:	dcc00317 	ldw	r19,12(sp)
   47c74:	dc800217 	ldw	r18,8(sp)
   47c78:	dc400117 	ldw	r17,4(sp)
   47c7c:	dc000017 	ldw	r16,0(sp)
   47c80:	dec00504 	addi	sp,sp,20
   47c84:	f800283a 	ret
   47c88:	880b883a 	mov	r5,r17
   47c8c:	880d883a 	mov	r6,r17
   47c90:	9809883a 	mov	r4,r19
   47c94:	00479740 	call	47974 <__multiply>
   47c98:	88800015 	stw	r2,0(r17)
   47c9c:	10000015 	stw	zero,0(r2)
   47ca0:	1023883a 	mov	r17,r2
   47ca4:	003fde06 	br	47c20 <__pow5mult+0x54>
   47ca8:	1025883a 	mov	r18,r2
   47cac:	003fd706 	br	47c0c <__pow5mult+0x40>
   47cb0:	10bfffc4 	addi	r2,r2,-1
   47cb4:	1085883a 	add	r2,r2,r2
   47cb8:	00c00174 	movhi	r3,5
   47cbc:	18f66904 	addi	r3,r3,-9820
   47cc0:	1085883a 	add	r2,r2,r2
   47cc4:	1885883a 	add	r2,r3,r2
   47cc8:	11800017 	ldw	r6,0(r2)
   47ccc:	000f883a 	mov	r7,zero
   47cd0:	00475d80 	call	475d8 <__multadd>
   47cd4:	1025883a 	mov	r18,r2
   47cd8:	003fc706 	br	47bf8 <__pow5mult+0x2c>
   47cdc:	9809883a 	mov	r4,r19
   47ce0:	01409c44 	movi	r5,625
   47ce4:	00479380 	call	47938 <__i2b>
   47ce8:	98801215 	stw	r2,72(r19)
   47cec:	1023883a 	mov	r17,r2
   47cf0:	10000015 	stw	zero,0(r2)
   47cf4:	003fca06 	br	47c20 <__pow5mult+0x54>

00047cf8 <__lshift>:
   47cf8:	defff904 	addi	sp,sp,-28
   47cfc:	dd400515 	stw	r21,20(sp)
   47d00:	dc400115 	stw	r17,4(sp)
   47d04:	2d400417 	ldw	r21,16(r5)
   47d08:	3023d17a 	srai	r17,r6,5
   47d0c:	28800217 	ldw	r2,8(r5)
   47d10:	dd000415 	stw	r20,16(sp)
   47d14:	8d6b883a 	add	r21,r17,r21
   47d18:	dcc00315 	stw	r19,12(sp)
   47d1c:	dc800215 	stw	r18,8(sp)
   47d20:	dc000015 	stw	r16,0(sp)
   47d24:	dfc00615 	stw	ra,24(sp)
   47d28:	ac000044 	addi	r16,r21,1
   47d2c:	2825883a 	mov	r18,r5
   47d30:	3029883a 	mov	r20,r6
   47d34:	2027883a 	mov	r19,r4
   47d38:	29400117 	ldw	r5,4(r5)
   47d3c:	1400030e 	bge	r2,r16,47d4c <__lshift+0x54>
   47d40:	1085883a 	add	r2,r2,r2
   47d44:	29400044 	addi	r5,r5,1
   47d48:	143ffd16 	blt	r2,r16,47d40 <__lshift+0x48>
   47d4c:	9809883a 	mov	r4,r19
   47d50:	00475080 	call	47508 <_Balloc>
   47d54:	10c00504 	addi	r3,r2,20
   47d58:	0440090e 	bge	zero,r17,47d80 <__lshift+0x88>
   47d5c:	000f883a 	mov	r7,zero
   47d60:	18000015 	stw	zero,0(r3)
   47d64:	39c00044 	addi	r7,r7,1
   47d68:	18c00104 	addi	r3,r3,4
   47d6c:	3c7ffc1e 	bne	r7,r17,47d60 <__lshift+0x68>
   47d70:	38c00144 	addi	r3,r7,5
   47d74:	18c7883a 	add	r3,r3,r3
   47d78:	18c7883a 	add	r3,r3,r3
   47d7c:	10c7883a 	add	r3,r2,r3
   47d80:	92000417 	ldw	r8,16(r18)
   47d84:	a18007cc 	andi	r6,r20,31
   47d88:	91c00504 	addi	r7,r18,20
   47d8c:	42000144 	addi	r8,r8,5
   47d90:	4211883a 	add	r8,r8,r8
   47d94:	4211883a 	add	r8,r8,r8
   47d98:	9211883a 	add	r8,r18,r8
   47d9c:	30002226 	beq	r6,zero,47e28 <__lshift+0x130>
   47da0:	02800804 	movi	r10,32
   47da4:	5195c83a 	sub	r10,r10,r6
   47da8:	000b883a 	mov	r5,zero
   47dac:	3a400017 	ldw	r9,0(r7)
   47db0:	18c00104 	addi	r3,r3,4
   47db4:	39c00104 	addi	r7,r7,4
   47db8:	4992983a 	sll	r9,r9,r6
   47dbc:	2a4ab03a 	or	r5,r5,r9
   47dc0:	197fff15 	stw	r5,-4(r3)
   47dc4:	397fff17 	ldw	r5,-4(r7)
   47dc8:	2a8ad83a 	srl	r5,r5,r10
   47dcc:	3a3ff736 	bltu	r7,r8,47dac <__lshift+0xb4>
   47dd0:	19400015 	stw	r5,0(r3)
   47dd4:	28000126 	beq	r5,zero,47ddc <__lshift+0xe4>
   47dd8:	ac000084 	addi	r16,r21,2
   47ddc:	91000117 	ldw	r4,4(r18)
   47de0:	98c01317 	ldw	r3,76(r19)
   47de4:	843fffc4 	addi	r16,r16,-1
   47de8:	2109883a 	add	r4,r4,r4
   47dec:	2109883a 	add	r4,r4,r4
   47df0:	1907883a 	add	r3,r3,r4
   47df4:	19000017 	ldw	r4,0(r3)
   47df8:	14000415 	stw	r16,16(r2)
   47dfc:	91000015 	stw	r4,0(r18)
   47e00:	1c800015 	stw	r18,0(r3)
   47e04:	dfc00617 	ldw	ra,24(sp)
   47e08:	dd400517 	ldw	r21,20(sp)
   47e0c:	dd000417 	ldw	r20,16(sp)
   47e10:	dcc00317 	ldw	r19,12(sp)
   47e14:	dc800217 	ldw	r18,8(sp)
   47e18:	dc400117 	ldw	r17,4(sp)
   47e1c:	dc000017 	ldw	r16,0(sp)
   47e20:	dec00704 	addi	sp,sp,28
   47e24:	f800283a 	ret
   47e28:	39400017 	ldw	r5,0(r7)
   47e2c:	18c00104 	addi	r3,r3,4
   47e30:	39c00104 	addi	r7,r7,4
   47e34:	197fff15 	stw	r5,-4(r3)
   47e38:	3a3fe82e 	bgeu	r7,r8,47ddc <__lshift+0xe4>
   47e3c:	39400017 	ldw	r5,0(r7)
   47e40:	18c00104 	addi	r3,r3,4
   47e44:	39c00104 	addi	r7,r7,4
   47e48:	197fff15 	stw	r5,-4(r3)
   47e4c:	3a3ff636 	bltu	r7,r8,47e28 <__lshift+0x130>
   47e50:	003fe206 	br	47ddc <__lshift+0xe4>

00047e54 <__mcmp>:
   47e54:	20800417 	ldw	r2,16(r4)
   47e58:	28c00417 	ldw	r3,16(r5)
   47e5c:	10c5c83a 	sub	r2,r2,r3
   47e60:	10000f1e 	bne	r2,zero,47ea0 <__mcmp+0x4c>
   47e64:	18c00144 	addi	r3,r3,5
   47e68:	18c7883a 	add	r3,r3,r3
   47e6c:	18c7883a 	add	r3,r3,r3
   47e70:	21c00504 	addi	r7,r4,20
   47e74:	28cb883a 	add	r5,r5,r3
   47e78:	20c9883a 	add	r4,r4,r3
   47e7c:	213fff04 	addi	r4,r4,-4
   47e80:	297fff04 	addi	r5,r5,-4
   47e84:	21800017 	ldw	r6,0(r4)
   47e88:	28c00017 	ldw	r3,0(r5)
   47e8c:	30c0021e 	bne	r6,r3,47e98 <__mcmp+0x44>
   47e90:	393ffa36 	bltu	r7,r4,47e7c <__mcmp+0x28>
   47e94:	f800283a 	ret
   47e98:	30c00236 	bltu	r6,r3,47ea4 <__mcmp+0x50>
   47e9c:	00800044 	movi	r2,1
   47ea0:	f800283a 	ret
   47ea4:	00bfffc4 	movi	r2,-1
   47ea8:	f800283a 	ret

00047eac <__mdiff>:
   47eac:	defffb04 	addi	sp,sp,-20
   47eb0:	dc000015 	stw	r16,0(sp)
   47eb4:	2821883a 	mov	r16,r5
   47eb8:	dc800215 	stw	r18,8(sp)
   47ebc:	300b883a 	mov	r5,r6
   47ec0:	2025883a 	mov	r18,r4
   47ec4:	8009883a 	mov	r4,r16
   47ec8:	dc400115 	stw	r17,4(sp)
   47ecc:	dfc00415 	stw	ra,16(sp)
   47ed0:	dcc00315 	stw	r19,12(sp)
   47ed4:	3023883a 	mov	r17,r6
   47ed8:	0047e540 	call	47e54 <__mcmp>
   47edc:	10005026 	beq	r2,zero,48020 <__mdiff+0x174>
   47ee0:	10004a16 	blt	r2,zero,4800c <__mdiff+0x160>
   47ee4:	0027883a 	mov	r19,zero
   47ee8:	81400117 	ldw	r5,4(r16)
   47eec:	9009883a 	mov	r4,r18
   47ef0:	00475080 	call	47508 <_Balloc>
   47ef4:	82400417 	ldw	r9,16(r16)
   47ef8:	89800417 	ldw	r6,16(r17)
   47efc:	14c00315 	stw	r19,12(r2)
   47f00:	4b800144 	addi	r14,r9,5
   47f04:	31800144 	addi	r6,r6,5
   47f08:	739d883a 	add	r14,r14,r14
   47f0c:	318d883a 	add	r6,r6,r6
   47f10:	739d883a 	add	r14,r14,r14
   47f14:	318d883a 	add	r6,r6,r6
   47f18:	81c00504 	addi	r7,r16,20
   47f1c:	839d883a 	add	r14,r16,r14
   47f20:	8a000504 	addi	r8,r17,20
   47f24:	898d883a 	add	r6,r17,r6
   47f28:	10c00504 	addi	r3,r2,20
   47f2c:	0009883a 	mov	r4,zero
   47f30:	3b000017 	ldw	r12,0(r7)
   47f34:	42c00017 	ldw	r11,0(r8)
   47f38:	42000104 	addi	r8,r8,4
   47f3c:	62bfffcc 	andi	r10,r12,65535
   47f40:	5b7fffcc 	andi	r13,r11,65535
   47f44:	5109883a 	add	r4,r10,r4
   47f48:	2355c83a 	sub	r10,r4,r13
   47f4c:	5816d43a 	srli	r11,r11,16
   47f50:	6008d43a 	srli	r4,r12,16
   47f54:	501bd43a 	srai	r13,r10,16
   47f58:	1a80000d 	sth	r10,0(r3)
   47f5c:	22c9c83a 	sub	r4,r4,r11
   47f60:	2349883a 	add	r4,r4,r13
   47f64:	1900008d 	sth	r4,2(r3)
   47f68:	39c00104 	addi	r7,r7,4
   47f6c:	2009d43a 	srai	r4,r4,16
   47f70:	18c00104 	addi	r3,r3,4
   47f74:	41bfee36 	bltu	r8,r6,47f30 <__mdiff+0x84>
   47f78:	180b883a 	mov	r5,r3
   47f7c:	3815883a 	mov	r10,r7
   47f80:	3b80132e 	bgeu	r7,r14,47fd0 <__mdiff+0x124>
   47f84:	3a000017 	ldw	r8,0(r7)
   47f88:	18c00104 	addi	r3,r3,4
   47f8c:	39c00104 	addi	r7,r7,4
   47f90:	41bfffcc 	andi	r6,r8,65535
   47f94:	310d883a 	add	r6,r6,r4
   47f98:	3009d43a 	srai	r4,r6,16
   47f9c:	4010d43a 	srli	r8,r8,16
   47fa0:	19bfff0d 	sth	r6,-4(r3)
   47fa4:	2209883a 	add	r4,r4,r8
   47fa8:	193fff8d 	sth	r4,-2(r3)
   47fac:	2009d43a 	srai	r4,r4,16
   47fb0:	3bbff436 	bltu	r7,r14,47f84 <__mdiff+0xd8>
   47fb4:	0286303a 	nor	r3,zero,r10
   47fb8:	1b87883a 	add	r3,r3,r14
   47fbc:	1806d0ba 	srli	r3,r3,2
   47fc0:	18c00044 	addi	r3,r3,1
   47fc4:	18c7883a 	add	r3,r3,r3
   47fc8:	18c7883a 	add	r3,r3,r3
   47fcc:	28c7883a 	add	r3,r5,r3
   47fd0:	193fff17 	ldw	r4,-4(r3)
   47fd4:	18ffff04 	addi	r3,r3,-4
   47fd8:	2000041e 	bne	r4,zero,47fec <__mdiff+0x140>
   47fdc:	18ffff04 	addi	r3,r3,-4
   47fe0:	19000017 	ldw	r4,0(r3)
   47fe4:	4a7fffc4 	addi	r9,r9,-1
   47fe8:	203ffc26 	beq	r4,zero,47fdc <__mdiff+0x130>
   47fec:	12400415 	stw	r9,16(r2)
   47ff0:	dfc00417 	ldw	ra,16(sp)
   47ff4:	dcc00317 	ldw	r19,12(sp)
   47ff8:	dc800217 	ldw	r18,8(sp)
   47ffc:	dc400117 	ldw	r17,4(sp)
   48000:	dc000017 	ldw	r16,0(sp)
   48004:	dec00504 	addi	sp,sp,20
   48008:	f800283a 	ret
   4800c:	8005883a 	mov	r2,r16
   48010:	04c00044 	movi	r19,1
   48014:	8821883a 	mov	r16,r17
   48018:	1023883a 	mov	r17,r2
   4801c:	003fb206 	br	47ee8 <__mdiff+0x3c>
   48020:	9009883a 	mov	r4,r18
   48024:	000b883a 	mov	r5,zero
   48028:	00475080 	call	47508 <_Balloc>
   4802c:	00c00044 	movi	r3,1
   48030:	10c00415 	stw	r3,16(r2)
   48034:	10000515 	stw	zero,20(r2)
   48038:	dfc00417 	ldw	ra,16(sp)
   4803c:	dcc00317 	ldw	r19,12(sp)
   48040:	dc800217 	ldw	r18,8(sp)
   48044:	dc400117 	ldw	r17,4(sp)
   48048:	dc000017 	ldw	r16,0(sp)
   4804c:	dec00504 	addi	sp,sp,20
   48050:	f800283a 	ret

00048054 <__ulp>:
   48054:	295ffc2c 	andhi	r5,r5,32752
   48058:	00bf3034 	movhi	r2,64704
   4805c:	2887883a 	add	r3,r5,r2
   48060:	00c0020e 	bge	zero,r3,4806c <__ulp+0x18>
   48064:	0005883a 	mov	r2,zero
   48068:	f800283a 	ret
   4806c:	00c7c83a 	sub	r3,zero,r3
   48070:	1805d53a 	srai	r2,r3,20
   48074:	00c004c4 	movi	r3,19
   48078:	18800a0e 	bge	r3,r2,480a4 <__ulp+0x50>
   4807c:	01000c84 	movi	r4,50
   48080:	0007883a 	mov	r3,zero
   48084:	20800516 	blt	r4,r2,4809c <__ulp+0x48>
   48088:	01000cc4 	movi	r4,51
   4808c:	2085c83a 	sub	r2,r4,r2
   48090:	01000044 	movi	r4,1
   48094:	2084983a 	sll	r2,r4,r2
   48098:	f800283a 	ret
   4809c:	00800044 	movi	r2,1
   480a0:	f800283a 	ret
   480a4:	00c00234 	movhi	r3,8
   480a8:	1887d83a 	sra	r3,r3,r2
   480ac:	0005883a 	mov	r2,zero
   480b0:	f800283a 	ret

000480b4 <__b2d>:
   480b4:	defffa04 	addi	sp,sp,-24
   480b8:	dc000015 	stw	r16,0(sp)
   480bc:	24000417 	ldw	r16,16(r4)
   480c0:	dc400115 	stw	r17,4(sp)
   480c4:	dcc00315 	stw	r19,12(sp)
   480c8:	84000144 	addi	r16,r16,5
   480cc:	8421883a 	add	r16,r16,r16
   480d0:	8421883a 	add	r16,r16,r16
   480d4:	2421883a 	add	r16,r4,r16
   480d8:	847fff17 	ldw	r17,-4(r16)
   480dc:	24c00504 	addi	r19,r4,20
   480e0:	dd000415 	stw	r20,16(sp)
   480e4:	8809883a 	mov	r4,r17
   480e8:	dc800215 	stw	r18,8(sp)
   480ec:	2829883a 	mov	r20,r5
   480f0:	dfc00515 	stw	ra,20(sp)
   480f4:	00478200 	call	47820 <__hi0bits>
   480f8:	00c00804 	movi	r3,32
   480fc:	1887c83a 	sub	r3,r3,r2
   48100:	a0c00015 	stw	r3,0(r20)
   48104:	00c00284 	movi	r3,10
   48108:	84bfff04 	addi	r18,r16,-4
   4810c:	18801216 	blt	r3,r2,48158 <__b2d+0xa4>
   48110:	010002c4 	movi	r4,11
   48114:	2089c83a 	sub	r4,r4,r2
   48118:	8906d83a 	srl	r3,r17,r4
   4811c:	18cffc34 	orhi	r3,r3,16368
   48120:	9c80322e 	bgeu	r19,r18,481ec <__b2d+0x138>
   48124:	817ffe17 	ldw	r5,-8(r16)
   48128:	2908d83a 	srl	r4,r5,r4
   4812c:	10800544 	addi	r2,r2,21
   48130:	88a2983a 	sll	r17,r17,r2
   48134:	2444b03a 	or	r2,r4,r17
   48138:	dfc00517 	ldw	ra,20(sp)
   4813c:	dd000417 	ldw	r20,16(sp)
   48140:	dcc00317 	ldw	r19,12(sp)
   48144:	dc800217 	ldw	r18,8(sp)
   48148:	dc400117 	ldw	r17,4(sp)
   4814c:	dc000017 	ldw	r16,0(sp)
   48150:	dec00604 	addi	sp,sp,24
   48154:	f800283a 	ret
   48158:	9c801636 	bltu	r19,r18,481b4 <__b2d+0x100>
   4815c:	113ffd44 	addi	r4,r2,-11
   48160:	000b883a 	mov	r5,zero
   48164:	20001726 	beq	r4,zero,481c4 <__b2d+0x110>
   48168:	00c00ac4 	movi	r3,43
   4816c:	1885c83a 	sub	r2,r3,r2
   48170:	8906983a 	sll	r3,r17,r4
   48174:	288cd83a 	srl	r6,r5,r2
   48178:	18cffc34 	orhi	r3,r3,16368
   4817c:	1986b03a 	or	r3,r3,r6
   48180:	9c801c2e 	bgeu	r19,r18,481f4 <__b2d+0x140>
   48184:	91bfff17 	ldw	r6,-4(r18)
   48188:	3084d83a 	srl	r2,r6,r2
   4818c:	2908983a 	sll	r4,r5,r4
   48190:	1104b03a 	or	r2,r2,r4
   48194:	dfc00517 	ldw	ra,20(sp)
   48198:	dd000417 	ldw	r20,16(sp)
   4819c:	dcc00317 	ldw	r19,12(sp)
   481a0:	dc800217 	ldw	r18,8(sp)
   481a4:	dc400117 	ldw	r17,4(sp)
   481a8:	dc000017 	ldw	r16,0(sp)
   481ac:	dec00604 	addi	sp,sp,24
   481b0:	f800283a 	ret
   481b4:	113ffd44 	addi	r4,r2,-11
   481b8:	84bffe04 	addi	r18,r16,-8
   481bc:	817ffe17 	ldw	r5,-8(r16)
   481c0:	203fe91e 	bne	r4,zero,48168 <__b2d+0xb4>
   481c4:	88cffc34 	orhi	r3,r17,16368
   481c8:	2805883a 	mov	r2,r5
   481cc:	dfc00517 	ldw	ra,20(sp)
   481d0:	dd000417 	ldw	r20,16(sp)
   481d4:	dcc00317 	ldw	r19,12(sp)
   481d8:	dc800217 	ldw	r18,8(sp)
   481dc:	dc400117 	ldw	r17,4(sp)
   481e0:	dc000017 	ldw	r16,0(sp)
   481e4:	dec00604 	addi	sp,sp,24
   481e8:	f800283a 	ret
   481ec:	0009883a 	mov	r4,zero
   481f0:	003fce06 	br	4812c <__b2d+0x78>
   481f4:	0005883a 	mov	r2,zero
   481f8:	003fe406 	br	4818c <__b2d+0xd8>

000481fc <__d2b>:
   481fc:	defff804 	addi	sp,sp,-32
   48200:	dc400315 	stw	r17,12(sp)
   48204:	3023883a 	mov	r17,r6
   48208:	dc800415 	stw	r18,16(sp)
   4820c:	8824907a 	slli	r18,r17,1
   48210:	dcc00515 	stw	r19,20(sp)
   48214:	2827883a 	mov	r19,r5
   48218:	9024d57a 	srli	r18,r18,21
   4821c:	01400044 	movi	r5,1
   48220:	dd000615 	stw	r20,24(sp)
   48224:	dc000215 	stw	r16,8(sp)
   48228:	dfc00715 	stw	ra,28(sp)
   4822c:	3829883a 	mov	r20,r7
   48230:	00475080 	call	47508 <_Balloc>
   48234:	1021883a 	mov	r16,r2
   48238:	00800434 	movhi	r2,16
   4823c:	10bfffc4 	addi	r2,r2,-1
   48240:	88a2703a 	and	r17,r17,r2
   48244:	90000126 	beq	r18,zero,4824c <__d2b+0x50>
   48248:	8c400434 	orhi	r17,r17,16
   4824c:	dc400015 	stw	r17,0(sp)
   48250:	98002226 	beq	r19,zero,482dc <__d2b+0xe0>
   48254:	d9000104 	addi	r4,sp,4
   48258:	dcc00115 	stw	r19,4(sp)
   4825c:	00478880 	call	47888 <__lo0bits>
   48260:	d8c00017 	ldw	r3,0(sp)
   48264:	10002d1e 	bne	r2,zero,4831c <__d2b+0x120>
   48268:	d9000117 	ldw	r4,4(sp)
   4826c:	81000515 	stw	r4,20(r16)
   48270:	1823003a 	cmpeq	r17,r3,zero
   48274:	01000084 	movi	r4,2
   48278:	2463c83a 	sub	r17,r4,r17
   4827c:	80c00615 	stw	r3,24(r16)
   48280:	84400415 	stw	r17,16(r16)
   48284:	90001d1e 	bne	r18,zero,482fc <__d2b+0x100>
   48288:	88c00104 	addi	r3,r17,4
   4828c:	18c7883a 	add	r3,r3,r3
   48290:	18c7883a 	add	r3,r3,r3
   48294:	80c7883a 	add	r3,r16,r3
   48298:	19000017 	ldw	r4,0(r3)
   4829c:	10bef384 	addi	r2,r2,-1074
   482a0:	a0800015 	stw	r2,0(r20)
   482a4:	00478200 	call	47820 <__hi0bits>
   482a8:	8822917a 	slli	r17,r17,5
   482ac:	d8c00817 	ldw	r3,32(sp)
   482b0:	8885c83a 	sub	r2,r17,r2
   482b4:	18800015 	stw	r2,0(r3)
   482b8:	8005883a 	mov	r2,r16
   482bc:	dfc00717 	ldw	ra,28(sp)
   482c0:	dd000617 	ldw	r20,24(sp)
   482c4:	dcc00517 	ldw	r19,20(sp)
   482c8:	dc800417 	ldw	r18,16(sp)
   482cc:	dc400317 	ldw	r17,12(sp)
   482d0:	dc000217 	ldw	r16,8(sp)
   482d4:	dec00804 	addi	sp,sp,32
   482d8:	f800283a 	ret
   482dc:	d809883a 	mov	r4,sp
   482e0:	00478880 	call	47888 <__lo0bits>
   482e4:	d8c00017 	ldw	r3,0(sp)
   482e8:	04400044 	movi	r17,1
   482ec:	84400415 	stw	r17,16(r16)
   482f0:	80c00515 	stw	r3,20(r16)
   482f4:	10800804 	addi	r2,r2,32
   482f8:	903fe326 	beq	r18,zero,48288 <__d2b+0x8c>
   482fc:	00c00d44 	movi	r3,53
   48300:	94bef344 	addi	r18,r18,-1075
   48304:	90a5883a 	add	r18,r18,r2
   48308:	1885c83a 	sub	r2,r3,r2
   4830c:	d8c00817 	ldw	r3,32(sp)
   48310:	a4800015 	stw	r18,0(r20)
   48314:	18800015 	stw	r2,0(r3)
   48318:	003fe706 	br	482b8 <__d2b+0xbc>
   4831c:	01000804 	movi	r4,32
   48320:	2089c83a 	sub	r4,r4,r2
   48324:	1908983a 	sll	r4,r3,r4
   48328:	d9400117 	ldw	r5,4(sp)
   4832c:	1886d83a 	srl	r3,r3,r2
   48330:	2148b03a 	or	r4,r4,r5
   48334:	81000515 	stw	r4,20(r16)
   48338:	d8c00015 	stw	r3,0(sp)
   4833c:	003fcc06 	br	48270 <__d2b+0x74>

00048340 <__ratio>:
   48340:	defff904 	addi	sp,sp,-28
   48344:	dc400315 	stw	r17,12(sp)
   48348:	2823883a 	mov	r17,r5
   4834c:	d9400104 	addi	r5,sp,4
   48350:	dfc00615 	stw	ra,24(sp)
   48354:	dcc00515 	stw	r19,20(sp)
   48358:	dc800415 	stw	r18,16(sp)
   4835c:	2027883a 	mov	r19,r4
   48360:	dc000215 	stw	r16,8(sp)
   48364:	00480b40 	call	480b4 <__b2d>
   48368:	8809883a 	mov	r4,r17
   4836c:	d80b883a 	mov	r5,sp
   48370:	1025883a 	mov	r18,r2
   48374:	1821883a 	mov	r16,r3
   48378:	00480b40 	call	480b4 <__b2d>
   4837c:	99400417 	ldw	r5,16(r19)
   48380:	89000417 	ldw	r4,16(r17)
   48384:	d9800117 	ldw	r6,4(sp)
   48388:	2909c83a 	sub	r4,r5,r4
   4838c:	d9400017 	ldw	r5,0(sp)
   48390:	2008917a 	slli	r4,r4,5
   48394:	314bc83a 	sub	r5,r6,r5
   48398:	290b883a 	add	r5,r5,r4
   4839c:	01400e0e 	bge	zero,r5,483d8 <__ratio+0x98>
   483a0:	280a953a 	slli	r5,r5,20
   483a4:	2c21883a 	add	r16,r5,r16
   483a8:	9009883a 	mov	r4,r18
   483ac:	800b883a 	mov	r5,r16
   483b0:	100d883a 	mov	r6,r2
   483b4:	180f883a 	mov	r7,r3
   483b8:	00412a40 	call	412a4 <__divdf3>
   483bc:	dfc00617 	ldw	ra,24(sp)
   483c0:	dcc00517 	ldw	r19,20(sp)
   483c4:	dc800417 	ldw	r18,16(sp)
   483c8:	dc400317 	ldw	r17,12(sp)
   483cc:	dc000217 	ldw	r16,8(sp)
   483d0:	dec00704 	addi	sp,sp,28
   483d4:	f800283a 	ret
   483d8:	280a953a 	slli	r5,r5,20
   483dc:	1947c83a 	sub	r3,r3,r5
   483e0:	003ff106 	br	483a8 <__ratio+0x68>

000483e4 <_mprec_log10>:
   483e4:	defffe04 	addi	sp,sp,-8
   483e8:	dc000015 	stw	r16,0(sp)
   483ec:	dfc00115 	stw	ra,4(sp)
   483f0:	008005c4 	movi	r2,23
   483f4:	2021883a 	mov	r16,r4
   483f8:	11000d0e 	bge	r2,r4,48430 <_mprec_log10+0x4c>
   483fc:	0005883a 	mov	r2,zero
   48400:	00cffc34 	movhi	r3,16368
   48404:	843fffc4 	addi	r16,r16,-1
   48408:	1009883a 	mov	r4,r2
   4840c:	180b883a 	mov	r5,r3
   48410:	000d883a 	mov	r6,zero
   48414:	01d00934 	movhi	r7,16420
   48418:	0040fc00 	call	40fc0 <__muldf3>
   4841c:	803ff91e 	bne	r16,zero,48404 <_mprec_log10+0x20>
   48420:	dfc00117 	ldw	ra,4(sp)
   48424:	dc000017 	ldw	r16,0(sp)
   48428:	dec00204 	addi	sp,sp,8
   4842c:	f800283a 	ret
   48430:	202090fa 	slli	r16,r4,3
   48434:	00800174 	movhi	r2,5
   48438:	10b63704 	addi	r2,r2,-10020
   4843c:	1421883a 	add	r16,r2,r16
   48440:	80800017 	ldw	r2,0(r16)
   48444:	80c00117 	ldw	r3,4(r16)
   48448:	dfc00117 	ldw	ra,4(sp)
   4844c:	dc000017 	ldw	r16,0(sp)
   48450:	dec00204 	addi	sp,sp,8
   48454:	f800283a 	ret

00048458 <__copybits>:
   48458:	297fffc4 	addi	r5,r5,-1
   4845c:	31c00417 	ldw	r7,16(r6)
   48460:	2811d17a 	srai	r8,r5,5
   48464:	30800504 	addi	r2,r6,20
   48468:	39c00144 	addi	r7,r7,5
   4846c:	42000044 	addi	r8,r8,1
   48470:	39cf883a 	add	r7,r7,r7
   48474:	4211883a 	add	r8,r8,r8
   48478:	39cf883a 	add	r7,r7,r7
   4847c:	4211883a 	add	r8,r8,r8
   48480:	31cf883a 	add	r7,r6,r7
   48484:	2211883a 	add	r8,r4,r8
   48488:	11c00d2e 	bgeu	r2,r7,484c0 <__copybits+0x68>
   4848c:	2007883a 	mov	r3,r4
   48490:	11400017 	ldw	r5,0(r2)
   48494:	18c00104 	addi	r3,r3,4
   48498:	10800104 	addi	r2,r2,4
   4849c:	197fff15 	stw	r5,-4(r3)
   484a0:	11fffb36 	bltu	r2,r7,48490 <__copybits+0x38>
   484a4:	3985c83a 	sub	r2,r7,r6
   484a8:	10bffac4 	addi	r2,r2,-21
   484ac:	1004d0ba 	srli	r2,r2,2
   484b0:	10800044 	addi	r2,r2,1
   484b4:	1085883a 	add	r2,r2,r2
   484b8:	1085883a 	add	r2,r2,r2
   484bc:	2089883a 	add	r4,r4,r2
   484c0:	2200032e 	bgeu	r4,r8,484d0 <__copybits+0x78>
   484c4:	20000015 	stw	zero,0(r4)
   484c8:	21000104 	addi	r4,r4,4
   484cc:	223ffd36 	bltu	r4,r8,484c4 <__copybits+0x6c>
   484d0:	f800283a 	ret

000484d4 <__any_on>:
   484d4:	21800417 	ldw	r6,16(r4)
   484d8:	2805d17a 	srai	r2,r5,5
   484dc:	20c00504 	addi	r3,r4,20
   484e0:	30800f0e 	bge	r6,r2,48520 <__any_on+0x4c>
   484e4:	3005883a 	mov	r2,r6
   484e8:	10800144 	addi	r2,r2,5
   484ec:	1085883a 	add	r2,r2,r2
   484f0:	1085883a 	add	r2,r2,r2
   484f4:	2089883a 	add	r4,r4,r2
   484f8:	1900152e 	bgeu	r3,r4,48550 <__any_on+0x7c>
   484fc:	20bfff17 	ldw	r2,-4(r4)
   48500:	213fff04 	addi	r4,r4,-4
   48504:	1000041e 	bne	r2,zero,48518 <__any_on+0x44>
   48508:	1900112e 	bgeu	r3,r4,48550 <__any_on+0x7c>
   4850c:	213fff04 	addi	r4,r4,-4
   48510:	20800017 	ldw	r2,0(r4)
   48514:	103ffc26 	beq	r2,zero,48508 <__any_on+0x34>
   48518:	00800044 	movi	r2,1
   4851c:	f800283a 	ret
   48520:	11bff10e 	bge	r2,r6,484e8 <__any_on+0x14>
   48524:	294007cc 	andi	r5,r5,31
   48528:	283fef26 	beq	r5,zero,484e8 <__any_on+0x14>
   4852c:	11800144 	addi	r6,r2,5
   48530:	318d883a 	add	r6,r6,r6
   48534:	318d883a 	add	r6,r6,r6
   48538:	218d883a 	add	r6,r4,r6
   4853c:	31800017 	ldw	r6,0(r6)
   48540:	314ed83a 	srl	r7,r6,r5
   48544:	394a983a 	sll	r5,r7,r5
   48548:	29bff31e 	bne	r5,r6,48518 <__any_on+0x44>
   4854c:	003fe606 	br	484e8 <__any_on+0x14>
   48550:	0005883a 	mov	r2,zero
   48554:	f800283a 	ret

00048558 <_realloc_r>:
   48558:	defff504 	addi	sp,sp,-44
   4855c:	dd400615 	stw	r21,24(sp)
   48560:	dc800315 	stw	r18,12(sp)
   48564:	dc000115 	stw	r16,4(sp)
   48568:	dfc00a15 	stw	ra,40(sp)
   4856c:	df000915 	stw	fp,36(sp)
   48570:	ddc00815 	stw	r23,32(sp)
   48574:	dd800715 	stw	r22,28(sp)
   48578:	dd000515 	stw	r20,20(sp)
   4857c:	dcc00415 	stw	r19,16(sp)
   48580:	dc400215 	stw	r17,8(sp)
   48584:	2821883a 	mov	r16,r5
   48588:	202b883a 	mov	r21,r4
   4858c:	3025883a 	mov	r18,r6
   48590:	28009626 	beq	r5,zero,487ec <_realloc_r+0x294>
   48594:	004ae940 	call	4ae94 <__malloc_lock>
   48598:	80bfff17 	ldw	r2,-4(r16)
   4859c:	04ffff04 	movi	r19,-4
   485a0:	90c002c4 	addi	r3,r18,11
   485a4:	01000584 	movi	r4,22
   485a8:	85bffe04 	addi	r22,r16,-8
   485ac:	14e6703a 	and	r19,r2,r19
   485b0:	20c0372e 	bgeu	r4,r3,48690 <_realloc_r+0x138>
   485b4:	047ffe04 	movi	r17,-8
   485b8:	1c62703a 	and	r17,r3,r17
   485bc:	8807883a 	mov	r3,r17
   485c0:	88005a16 	blt	r17,zero,4872c <_realloc_r+0x1d4>
   485c4:	8c805936 	bltu	r17,r18,4872c <_realloc_r+0x1d4>
   485c8:	98c0340e 	bge	r19,r3,4869c <_realloc_r+0x144>
   485cc:	07000174 	movhi	fp,5
   485d0:	e7377a04 	addi	fp,fp,-8728
   485d4:	e1400217 	ldw	r5,8(fp)
   485d8:	b4c9883a 	add	r4,r22,r19
   485dc:	29009026 	beq	r5,r4,48820 <_realloc_r+0x2c8>
   485e0:	21800117 	ldw	r6,4(r4)
   485e4:	01ffff84 	movi	r7,-2
   485e8:	31ce703a 	and	r7,r6,r7
   485ec:	21cf883a 	add	r7,r4,r7
   485f0:	39c00117 	ldw	r7,4(r7)
   485f4:	39c0004c 	andi	r7,r7,1
   485f8:	38004326 	beq	r7,zero,48708 <_realloc_r+0x1b0>
   485fc:	000d883a 	mov	r6,zero
   48600:	0009883a 	mov	r4,zero
   48604:	1080004c 	andi	r2,r2,1
   48608:	10005a1e 	bne	r2,zero,48774 <_realloc_r+0x21c>
   4860c:	85fffe17 	ldw	r23,-8(r16)
   48610:	00bfff04 	movi	r2,-4
   48614:	b5efc83a 	sub	r23,r22,r23
   48618:	b9c00117 	ldw	r7,4(r23)
   4861c:	388e703a 	and	r7,r7,r2
   48620:	3ccf883a 	add	r7,r7,r19
   48624:	20005226 	beq	r4,zero,48770 <_realloc_r+0x218>
   48628:	31e9883a 	add	r20,r6,r7
   4862c:	2140c726 	beq	r4,r5,4894c <_realloc_r+0x3f4>
   48630:	a0c04f16 	blt	r20,r3,48770 <_realloc_r+0x218>
   48634:	20800317 	ldw	r2,12(r4)
   48638:	20c00217 	ldw	r3,8(r4)
   4863c:	99bfff04 	addi	r6,r19,-4
   48640:	01000904 	movi	r4,36
   48644:	18800315 	stw	r2,12(r3)
   48648:	10c00215 	stw	r3,8(r2)
   4864c:	b8c00217 	ldw	r3,8(r23)
   48650:	b8800317 	ldw	r2,12(r23)
   48654:	bc800204 	addi	r18,r23,8
   48658:	18800315 	stw	r2,12(r3)
   4865c:	10c00215 	stw	r3,8(r2)
   48660:	2180ed36 	bltu	r4,r6,48a18 <_realloc_r+0x4c0>
   48664:	008004c4 	movi	r2,19
   48668:	11809b2e 	bgeu	r2,r6,488d8 <_realloc_r+0x380>
   4866c:	80800017 	ldw	r2,0(r16)
   48670:	b8800215 	stw	r2,8(r23)
   48674:	80800117 	ldw	r2,4(r16)
   48678:	b8800315 	stw	r2,12(r23)
   4867c:	008006c4 	movi	r2,27
   48680:	1180f936 	bltu	r2,r6,48a68 <_realloc_r+0x510>
   48684:	b8800404 	addi	r2,r23,16
   48688:	80c00204 	addi	r3,r16,8
   4868c:	00009406 	br	488e0 <_realloc_r+0x388>
   48690:	00c00404 	movi	r3,16
   48694:	1823883a 	mov	r17,r3
   48698:	003fca06 	br	485c4 <_realloc_r+0x6c>
   4869c:	9829883a 	mov	r20,r19
   486a0:	a447c83a 	sub	r3,r20,r17
   486a4:	010003c4 	movi	r4,15
   486a8:	1080004c 	andi	r2,r2,1
   486ac:	20c02336 	bltu	r4,r3,4873c <_realloc_r+0x1e4>
   486b0:	1504b03a 	or	r2,r2,r20
   486b4:	b0800115 	stw	r2,4(r22)
   486b8:	b52d883a 	add	r22,r22,r20
   486bc:	b0800117 	ldw	r2,4(r22)
   486c0:	10800054 	ori	r2,r2,1
   486c4:	b0800115 	stw	r2,4(r22)
   486c8:	a809883a 	mov	r4,r21
   486cc:	004aeb40 	call	4aeb4 <__malloc_unlock>
   486d0:	8025883a 	mov	r18,r16
   486d4:	9005883a 	mov	r2,r18
   486d8:	dfc00a17 	ldw	ra,40(sp)
   486dc:	df000917 	ldw	fp,36(sp)
   486e0:	ddc00817 	ldw	r23,32(sp)
   486e4:	dd800717 	ldw	r22,28(sp)
   486e8:	dd400617 	ldw	r21,24(sp)
   486ec:	dd000517 	ldw	r20,20(sp)
   486f0:	dcc00417 	ldw	r19,16(sp)
   486f4:	dc800317 	ldw	r18,12(sp)
   486f8:	dc400217 	ldw	r17,8(sp)
   486fc:	dc000117 	ldw	r16,4(sp)
   48700:	dec00b04 	addi	sp,sp,44
   48704:	f800283a 	ret
   48708:	01ffff04 	movi	r7,-4
   4870c:	31cc703a 	and	r6,r6,r7
   48710:	34e9883a 	add	r20,r6,r19
   48714:	a0ffbb16 	blt	r20,r3,48604 <_realloc_r+0xac>
   48718:	20c00317 	ldw	r3,12(r4)
   4871c:	21000217 	ldw	r4,8(r4)
   48720:	20c00315 	stw	r3,12(r4)
   48724:	19000215 	stw	r4,8(r3)
   48728:	003fdd06 	br	486a0 <_realloc_r+0x148>
   4872c:	00800304 	movi	r2,12
   48730:	a8800015 	stw	r2,0(r21)
   48734:	0025883a 	mov	r18,zero
   48738:	003fe606 	br	486d4 <_realloc_r+0x17c>
   4873c:	1444b03a 	or	r2,r2,r17
   48740:	b0800115 	stw	r2,4(r22)
   48744:	b44b883a 	add	r5,r22,r17
   48748:	18800054 	ori	r2,r3,1
   4874c:	28800115 	stw	r2,4(r5)
   48750:	28c7883a 	add	r3,r5,r3
   48754:	18800117 	ldw	r2,4(r3)
   48758:	a809883a 	mov	r4,r21
   4875c:	29400204 	addi	r5,r5,8
   48760:	10800054 	ori	r2,r2,1
   48764:	18800115 	stw	r2,4(r3)
   48768:	0045d4c0 	call	45d4c <_free_r>
   4876c:	003fd606 	br	486c8 <_realloc_r+0x170>
   48770:	38c0330e 	bge	r7,r3,48840 <_realloc_r+0x2e8>
   48774:	900b883a 	mov	r5,r18
   48778:	a809883a 	mov	r4,r21
   4877c:	00468e40 	call	468e4 <_malloc_r>
   48780:	1025883a 	mov	r18,r2
   48784:	10001626 	beq	r2,zero,487e0 <_realloc_r+0x288>
   48788:	80bfff17 	ldw	r2,-4(r16)
   4878c:	00ffff84 	movi	r3,-2
   48790:	913ffe04 	addi	r4,r18,-8
   48794:	10c6703a 	and	r3,r2,r3
   48798:	b0c7883a 	add	r3,r22,r3
   4879c:	20c09926 	beq	r4,r3,48a04 <_realloc_r+0x4ac>
   487a0:	99bfff04 	addi	r6,r19,-4
   487a4:	00800904 	movi	r2,36
   487a8:	11806436 	bltu	r2,r6,4893c <_realloc_r+0x3e4>
   487ac:	00c004c4 	movi	r3,19
   487b0:	19804036 	bltu	r3,r6,488b4 <_realloc_r+0x35c>
   487b4:	9005883a 	mov	r2,r18
   487b8:	8007883a 	mov	r3,r16
   487bc:	19000017 	ldw	r4,0(r3)
   487c0:	11000015 	stw	r4,0(r2)
   487c4:	19000117 	ldw	r4,4(r3)
   487c8:	11000115 	stw	r4,4(r2)
   487cc:	18c00217 	ldw	r3,8(r3)
   487d0:	10c00215 	stw	r3,8(r2)
   487d4:	a809883a 	mov	r4,r21
   487d8:	800b883a 	mov	r5,r16
   487dc:	0045d4c0 	call	45d4c <_free_r>
   487e0:	a809883a 	mov	r4,r21
   487e4:	004aeb40 	call	4aeb4 <__malloc_unlock>
   487e8:	003fba06 	br	486d4 <_realloc_r+0x17c>
   487ec:	300b883a 	mov	r5,r6
   487f0:	dfc00a17 	ldw	ra,40(sp)
   487f4:	df000917 	ldw	fp,36(sp)
   487f8:	ddc00817 	ldw	r23,32(sp)
   487fc:	dd800717 	ldw	r22,28(sp)
   48800:	dd400617 	ldw	r21,24(sp)
   48804:	dd000517 	ldw	r20,20(sp)
   48808:	dcc00417 	ldw	r19,16(sp)
   4880c:	dc800317 	ldw	r18,12(sp)
   48810:	dc400217 	ldw	r17,8(sp)
   48814:	dc000117 	ldw	r16,4(sp)
   48818:	dec00b04 	addi	sp,sp,44
   4881c:	00468e41 	jmpi	468e4 <_malloc_r>
   48820:	29800117 	ldw	r6,4(r5)
   48824:	013fff04 	movi	r4,-4
   48828:	89c00404 	addi	r7,r17,16
   4882c:	310c703a 	and	r6,r6,r4
   48830:	34c9883a 	add	r4,r6,r19
   48834:	21c0340e 	bge	r4,r7,48908 <_realloc_r+0x3b0>
   48838:	2809883a 	mov	r4,r5
   4883c:	003f7106 	br	48604 <_realloc_r+0xac>
   48840:	b8800317 	ldw	r2,12(r23)
   48844:	b8c00217 	ldw	r3,8(r23)
   48848:	99bfff04 	addi	r6,r19,-4
   4884c:	01000904 	movi	r4,36
   48850:	18800315 	stw	r2,12(r3)
   48854:	10c00215 	stw	r3,8(r2)
   48858:	bc800204 	addi	r18,r23,8
   4885c:	21807836 	bltu	r4,r6,48a40 <_realloc_r+0x4e8>
   48860:	008004c4 	movi	r2,19
   48864:	1180732e 	bgeu	r2,r6,48a34 <_realloc_r+0x4dc>
   48868:	80800017 	ldw	r2,0(r16)
   4886c:	b8800215 	stw	r2,8(r23)
   48870:	80800117 	ldw	r2,4(r16)
   48874:	b8800315 	stw	r2,12(r23)
   48878:	008006c4 	movi	r2,27
   4887c:	11808936 	bltu	r2,r6,48aa4 <_realloc_r+0x54c>
   48880:	b8800404 	addi	r2,r23,16
   48884:	80c00204 	addi	r3,r16,8
   48888:	19000017 	ldw	r4,0(r3)
   4888c:	9021883a 	mov	r16,r18
   48890:	3829883a 	mov	r20,r7
   48894:	11000015 	stw	r4,0(r2)
   48898:	19000117 	ldw	r4,4(r3)
   4889c:	b82d883a 	mov	r22,r23
   488a0:	11000115 	stw	r4,4(r2)
   488a4:	18c00217 	ldw	r3,8(r3)
   488a8:	10c00215 	stw	r3,8(r2)
   488ac:	b8800117 	ldw	r2,4(r23)
   488b0:	003f7b06 	br	486a0 <_realloc_r+0x148>
   488b4:	80c00017 	ldw	r3,0(r16)
   488b8:	90c00015 	stw	r3,0(r18)
   488bc:	80c00117 	ldw	r3,4(r16)
   488c0:	90c00115 	stw	r3,4(r18)
   488c4:	00c006c4 	movi	r3,27
   488c8:	19804636 	bltu	r3,r6,489e4 <_realloc_r+0x48c>
   488cc:	90800204 	addi	r2,r18,8
   488d0:	80c00204 	addi	r3,r16,8
   488d4:	003fb906 	br	487bc <_realloc_r+0x264>
   488d8:	9005883a 	mov	r2,r18
   488dc:	8007883a 	mov	r3,r16
   488e0:	19000017 	ldw	r4,0(r3)
   488e4:	9021883a 	mov	r16,r18
   488e8:	b82d883a 	mov	r22,r23
   488ec:	11000015 	stw	r4,0(r2)
   488f0:	19000117 	ldw	r4,4(r3)
   488f4:	11000115 	stw	r4,4(r2)
   488f8:	18c00217 	ldw	r3,8(r3)
   488fc:	10c00215 	stw	r3,8(r2)
   48900:	b8800117 	ldw	r2,4(r23)
   48904:	003f6606 	br	486a0 <_realloc_r+0x148>
   48908:	2445c83a 	sub	r2,r4,r17
   4890c:	b46d883a 	add	r22,r22,r17
   48910:	10800054 	ori	r2,r2,1
   48914:	b0800115 	stw	r2,4(r22)
   48918:	80bfff17 	ldw	r2,-4(r16)
   4891c:	a809883a 	mov	r4,r21
   48920:	e5800215 	stw	r22,8(fp)
   48924:	1080004c 	andi	r2,r2,1
   48928:	88a2b03a 	or	r17,r17,r2
   4892c:	847fff15 	stw	r17,-4(r16)
   48930:	004aeb40 	call	4aeb4 <__malloc_unlock>
   48934:	8025883a 	mov	r18,r16
   48938:	003f6606 	br	486d4 <_realloc_r+0x17c>
   4893c:	9009883a 	mov	r4,r18
   48940:	800b883a 	mov	r5,r16
   48944:	00472a00 	call	472a0 <memmove>
   48948:	003fa206 	br	487d4 <_realloc_r+0x27c>
   4894c:	88800404 	addi	r2,r17,16
   48950:	a0bf8716 	blt	r20,r2,48770 <_realloc_r+0x218>
   48954:	b8800317 	ldw	r2,12(r23)
   48958:	b8c00217 	ldw	r3,8(r23)
   4895c:	99bfff04 	addi	r6,r19,-4
   48960:	01000904 	movi	r4,36
   48964:	18800315 	stw	r2,12(r3)
   48968:	10c00215 	stw	r3,8(r2)
   4896c:	bc800204 	addi	r18,r23,8
   48970:	21806536 	bltu	r4,r6,48b08 <_realloc_r+0x5b0>
   48974:	008004c4 	movi	r2,19
   48978:	1180592e 	bgeu	r2,r6,48ae0 <_realloc_r+0x588>
   4897c:	80800017 	ldw	r2,0(r16)
   48980:	b8800215 	stw	r2,8(r23)
   48984:	80800117 	ldw	r2,4(r16)
   48988:	b8800315 	stw	r2,12(r23)
   4898c:	008006c4 	movi	r2,27
   48990:	11806136 	bltu	r2,r6,48b18 <_realloc_r+0x5c0>
   48994:	b8800404 	addi	r2,r23,16
   48998:	80c00204 	addi	r3,r16,8
   4899c:	19000017 	ldw	r4,0(r3)
   489a0:	11000015 	stw	r4,0(r2)
   489a4:	19000117 	ldw	r4,4(r3)
   489a8:	11000115 	stw	r4,4(r2)
   489ac:	18c00217 	ldw	r3,8(r3)
   489b0:	10c00215 	stw	r3,8(r2)
   489b4:	a447c83a 	sub	r3,r20,r17
   489b8:	bc45883a 	add	r2,r23,r17
   489bc:	18c00054 	ori	r3,r3,1
   489c0:	10c00115 	stw	r3,4(r2)
   489c4:	b8c00117 	ldw	r3,4(r23)
   489c8:	e0800215 	stw	r2,8(fp)
   489cc:	a809883a 	mov	r4,r21
   489d0:	1880004c 	andi	r2,r3,1
   489d4:	88a2b03a 	or	r17,r17,r2
   489d8:	bc400115 	stw	r17,4(r23)
   489dc:	004aeb40 	call	4aeb4 <__malloc_unlock>
   489e0:	003f3c06 	br	486d4 <_realloc_r+0x17c>
   489e4:	80c00217 	ldw	r3,8(r16)
   489e8:	90c00215 	stw	r3,8(r18)
   489ec:	80c00317 	ldw	r3,12(r16)
   489f0:	90c00315 	stw	r3,12(r18)
   489f4:	30802426 	beq	r6,r2,48a88 <_realloc_r+0x530>
   489f8:	90800404 	addi	r2,r18,16
   489fc:	80c00404 	addi	r3,r16,16
   48a00:	003f6e06 	br	487bc <_realloc_r+0x264>
   48a04:	953fff17 	ldw	r20,-4(r18)
   48a08:	00ffff04 	movi	r3,-4
   48a0c:	a0e8703a 	and	r20,r20,r3
   48a10:	a4e9883a 	add	r20,r20,r19
   48a14:	003f2206 	br	486a0 <_realloc_r+0x148>
   48a18:	800b883a 	mov	r5,r16
   48a1c:	9009883a 	mov	r4,r18
   48a20:	00472a00 	call	472a0 <memmove>
   48a24:	9021883a 	mov	r16,r18
   48a28:	b8800117 	ldw	r2,4(r23)
   48a2c:	b82d883a 	mov	r22,r23
   48a30:	003f1b06 	br	486a0 <_realloc_r+0x148>
   48a34:	9005883a 	mov	r2,r18
   48a38:	8007883a 	mov	r3,r16
   48a3c:	003f9206 	br	48888 <_realloc_r+0x330>
   48a40:	800b883a 	mov	r5,r16
   48a44:	9009883a 	mov	r4,r18
   48a48:	d9c00015 	stw	r7,0(sp)
   48a4c:	00472a00 	call	472a0 <memmove>
   48a50:	d9c00017 	ldw	r7,0(sp)
   48a54:	9021883a 	mov	r16,r18
   48a58:	b8800117 	ldw	r2,4(r23)
   48a5c:	3829883a 	mov	r20,r7
   48a60:	b82d883a 	mov	r22,r23
   48a64:	003f0e06 	br	486a0 <_realloc_r+0x148>
   48a68:	80800217 	ldw	r2,8(r16)
   48a6c:	b8800415 	stw	r2,16(r23)
   48a70:	80800317 	ldw	r2,12(r16)
   48a74:	b8800515 	stw	r2,20(r23)
   48a78:	31001226 	beq	r6,r4,48ac4 <_realloc_r+0x56c>
   48a7c:	b8800604 	addi	r2,r23,24
   48a80:	80c00404 	addi	r3,r16,16
   48a84:	003f9606 	br	488e0 <_realloc_r+0x388>
   48a88:	81000417 	ldw	r4,16(r16)
   48a8c:	90800604 	addi	r2,r18,24
   48a90:	80c00604 	addi	r3,r16,24
   48a94:	91000415 	stw	r4,16(r18)
   48a98:	81000517 	ldw	r4,20(r16)
   48a9c:	91000515 	stw	r4,20(r18)
   48aa0:	003f4606 	br	487bc <_realloc_r+0x264>
   48aa4:	80800217 	ldw	r2,8(r16)
   48aa8:	b8800415 	stw	r2,16(r23)
   48aac:	80800317 	ldw	r2,12(r16)
   48ab0:	b8800515 	stw	r2,20(r23)
   48ab4:	31000d26 	beq	r6,r4,48aec <_realloc_r+0x594>
   48ab8:	b8800604 	addi	r2,r23,24
   48abc:	80c00404 	addi	r3,r16,16
   48ac0:	003f7106 	br	48888 <_realloc_r+0x330>
   48ac4:	81000417 	ldw	r4,16(r16)
   48ac8:	b8800804 	addi	r2,r23,32
   48acc:	80c00604 	addi	r3,r16,24
   48ad0:	b9000615 	stw	r4,24(r23)
   48ad4:	81000517 	ldw	r4,20(r16)
   48ad8:	b9000715 	stw	r4,28(r23)
   48adc:	003f8006 	br	488e0 <_realloc_r+0x388>
   48ae0:	9005883a 	mov	r2,r18
   48ae4:	8007883a 	mov	r3,r16
   48ae8:	003fac06 	br	4899c <_realloc_r+0x444>
   48aec:	81000417 	ldw	r4,16(r16)
   48af0:	b8800804 	addi	r2,r23,32
   48af4:	80c00604 	addi	r3,r16,24
   48af8:	b9000615 	stw	r4,24(r23)
   48afc:	81000517 	ldw	r4,20(r16)
   48b00:	b9000715 	stw	r4,28(r23)
   48b04:	003f6006 	br	48888 <_realloc_r+0x330>
   48b08:	9009883a 	mov	r4,r18
   48b0c:	800b883a 	mov	r5,r16
   48b10:	00472a00 	call	472a0 <memmove>
   48b14:	003fa706 	br	489b4 <_realloc_r+0x45c>
   48b18:	80800217 	ldw	r2,8(r16)
   48b1c:	b8800415 	stw	r2,16(r23)
   48b20:	80800317 	ldw	r2,12(r16)
   48b24:	b8800515 	stw	r2,20(r23)
   48b28:	31000326 	beq	r6,r4,48b38 <_realloc_r+0x5e0>
   48b2c:	b8800604 	addi	r2,r23,24
   48b30:	80c00404 	addi	r3,r16,16
   48b34:	003f9906 	br	4899c <_realloc_r+0x444>
   48b38:	81000417 	ldw	r4,16(r16)
   48b3c:	b8800804 	addi	r2,r23,32
   48b40:	80c00604 	addi	r3,r16,24
   48b44:	b9000615 	stw	r4,24(r23)
   48b48:	81000517 	ldw	r4,20(r16)
   48b4c:	b9000715 	stw	r4,28(r23)
   48b50:	003f9206 	br	4899c <_realloc_r+0x444>

00048b54 <__isinfd>:
   48b54:	0105c83a 	sub	r2,zero,r4
   48b58:	1108b03a 	or	r4,r2,r4
   48b5c:	2004d7fa 	srli	r2,r4,31
   48b60:	00e00034 	movhi	r3,32768
   48b64:	18ffffc4 	addi	r3,r3,-1
   48b68:	28ca703a 	and	r5,r5,r3
   48b6c:	1144b03a 	or	r2,r2,r5
   48b70:	00dffc34 	movhi	r3,32752
   48b74:	1885c83a 	sub	r2,r3,r2
   48b78:	0087c83a 	sub	r3,zero,r2
   48b7c:	1884b03a 	or	r2,r3,r2
   48b80:	1005d7fa 	srai	r2,r2,31
   48b84:	10800044 	addi	r2,r2,1
   48b88:	f800283a 	ret

00048b8c <__isnand>:
   48b8c:	0105c83a 	sub	r2,zero,r4
   48b90:	1108b03a 	or	r4,r2,r4
   48b94:	2004d7fa 	srli	r2,r4,31
   48b98:	00e00034 	movhi	r3,32768
   48b9c:	18ffffc4 	addi	r3,r3,-1
   48ba0:	28ca703a 	and	r5,r5,r3
   48ba4:	1144b03a 	or	r2,r2,r5
   48ba8:	00dffc34 	movhi	r3,32752
   48bac:	1885c83a 	sub	r2,r3,r2
   48bb0:	1004d7fa 	srli	r2,r2,31
   48bb4:	f800283a 	ret

00048bb8 <_sbrk_r>:
   48bb8:	defffd04 	addi	sp,sp,-12
   48bbc:	dc400115 	stw	r17,4(sp)
   48bc0:	dc000015 	stw	r16,0(sp)
   48bc4:	2023883a 	mov	r17,r4
   48bc8:	04000174 	movhi	r16,5
   48bcc:	8403a904 	addi	r16,r16,3748
   48bd0:	2809883a 	mov	r4,r5
   48bd4:	dfc00215 	stw	ra,8(sp)
   48bd8:	80000015 	stw	zero,0(r16)
   48bdc:	004b0980 	call	4b098 <sbrk>
   48be0:	00ffffc4 	movi	r3,-1
   48be4:	10c00526 	beq	r2,r3,48bfc <_sbrk_r+0x44>
   48be8:	dfc00217 	ldw	ra,8(sp)
   48bec:	dc400117 	ldw	r17,4(sp)
   48bf0:	dc000017 	ldw	r16,0(sp)
   48bf4:	dec00304 	addi	sp,sp,12
   48bf8:	f800283a 	ret
   48bfc:	80c00017 	ldw	r3,0(r16)
   48c00:	183ff926 	beq	r3,zero,48be8 <_sbrk_r+0x30>
   48c04:	88c00015 	stw	r3,0(r17)
   48c08:	dfc00217 	ldw	ra,8(sp)
   48c0c:	dc400117 	ldw	r17,4(sp)
   48c10:	dc000017 	ldw	r16,0(sp)
   48c14:	dec00304 	addi	sp,sp,12
   48c18:	f800283a 	ret

00048c1c <__sread>:
   48c1c:	defffe04 	addi	sp,sp,-8
   48c20:	dc000015 	stw	r16,0(sp)
   48c24:	2821883a 	mov	r16,r5
   48c28:	2940038f 	ldh	r5,14(r5)
   48c2c:	dfc00115 	stw	ra,4(sp)
   48c30:	00492240 	call	49224 <_read_r>
   48c34:	10000716 	blt	r2,zero,48c54 <__sread+0x38>
   48c38:	80c01417 	ldw	r3,80(r16)
   48c3c:	1887883a 	add	r3,r3,r2
   48c40:	80c01415 	stw	r3,80(r16)
   48c44:	dfc00117 	ldw	ra,4(sp)
   48c48:	dc000017 	ldw	r16,0(sp)
   48c4c:	dec00204 	addi	sp,sp,8
   48c50:	f800283a 	ret
   48c54:	80c0030b 	ldhu	r3,12(r16)
   48c58:	18fbffcc 	andi	r3,r3,61439
   48c5c:	80c0030d 	sth	r3,12(r16)
   48c60:	dfc00117 	ldw	ra,4(sp)
   48c64:	dc000017 	ldw	r16,0(sp)
   48c68:	dec00204 	addi	sp,sp,8
   48c6c:	f800283a 	ret

00048c70 <__swrite>:
   48c70:	2880030b 	ldhu	r2,12(r5)
   48c74:	defffb04 	addi	sp,sp,-20
   48c78:	dcc00315 	stw	r19,12(sp)
   48c7c:	10c0400c 	andi	r3,r2,256
   48c80:	18ffffcc 	andi	r3,r3,65535
   48c84:	18e0001c 	xori	r3,r3,32768
   48c88:	dc800215 	stw	r18,8(sp)
   48c8c:	dc400115 	stw	r17,4(sp)
   48c90:	dc000015 	stw	r16,0(sp)
   48c94:	dfc00415 	stw	ra,16(sp)
   48c98:	18e00004 	addi	r3,r3,-32768
   48c9c:	2821883a 	mov	r16,r5
   48ca0:	2027883a 	mov	r19,r4
   48ca4:	3025883a 	mov	r18,r6
   48ca8:	3823883a 	mov	r17,r7
   48cac:	18000526 	beq	r3,zero,48cc4 <__swrite+0x54>
   48cb0:	2940038f 	ldh	r5,14(r5)
   48cb4:	000d883a 	mov	r6,zero
   48cb8:	01c00084 	movi	r7,2
   48cbc:	00491b80 	call	491b8 <_lseek_r>
   48cc0:	8080030b 	ldhu	r2,12(r16)
   48cc4:	8140038f 	ldh	r5,14(r16)
   48cc8:	10bbffcc 	andi	r2,r2,61439
   48ccc:	9809883a 	mov	r4,r19
   48cd0:	900d883a 	mov	r6,r18
   48cd4:	880f883a 	mov	r7,r17
   48cd8:	8080030d 	sth	r2,12(r16)
   48cdc:	dfc00417 	ldw	ra,16(sp)
   48ce0:	dcc00317 	ldw	r19,12(sp)
   48ce4:	dc800217 	ldw	r18,8(sp)
   48ce8:	dc400117 	ldw	r17,4(sp)
   48cec:	dc000017 	ldw	r16,0(sp)
   48cf0:	dec00504 	addi	sp,sp,20
   48cf4:	0048e001 	jmpi	48e00 <_write_r>

00048cf8 <__sseek>:
   48cf8:	defffe04 	addi	sp,sp,-8
   48cfc:	dc000015 	stw	r16,0(sp)
   48d00:	2821883a 	mov	r16,r5
   48d04:	2940038f 	ldh	r5,14(r5)
   48d08:	dfc00115 	stw	ra,4(sp)
   48d0c:	00491b80 	call	491b8 <_lseek_r>
   48d10:	00ffffc4 	movi	r3,-1
   48d14:	10c00826 	beq	r2,r3,48d38 <__sseek+0x40>
   48d18:	80c0030b 	ldhu	r3,12(r16)
   48d1c:	80801415 	stw	r2,80(r16)
   48d20:	18c40014 	ori	r3,r3,4096
   48d24:	80c0030d 	sth	r3,12(r16)
   48d28:	dfc00117 	ldw	ra,4(sp)
   48d2c:	dc000017 	ldw	r16,0(sp)
   48d30:	dec00204 	addi	sp,sp,8
   48d34:	f800283a 	ret
   48d38:	80c0030b 	ldhu	r3,12(r16)
   48d3c:	18fbffcc 	andi	r3,r3,61439
   48d40:	80c0030d 	sth	r3,12(r16)
   48d44:	dfc00117 	ldw	ra,4(sp)
   48d48:	dc000017 	ldw	r16,0(sp)
   48d4c:	dec00204 	addi	sp,sp,8
   48d50:	f800283a 	ret

00048d54 <__sclose>:
   48d54:	2940038f 	ldh	r5,14(r5)
   48d58:	0048f381 	jmpi	48f38 <_close_r>

00048d5c <strcmp>:
   48d5c:	2904b03a 	or	r2,r5,r4
   48d60:	108000cc 	andi	r2,r2,3
   48d64:	1000171e 	bne	r2,zero,48dc4 <strcmp+0x68>
   48d68:	20800017 	ldw	r2,0(r4)
   48d6c:	28c00017 	ldw	r3,0(r5)
   48d70:	10c0141e 	bne	r2,r3,48dc4 <strcmp+0x68>
   48d74:	027fbff4 	movhi	r9,65279
   48d78:	4a7fbfc4 	addi	r9,r9,-257
   48d7c:	1247883a 	add	r3,r2,r9
   48d80:	0084303a 	nor	r2,zero,r2
   48d84:	1884703a 	and	r2,r3,r2
   48d88:	02202074 	movhi	r8,32897
   48d8c:	42202004 	addi	r8,r8,-32640
   48d90:	1204703a 	and	r2,r2,r8
   48d94:	10000226 	beq	r2,zero,48da0 <strcmp+0x44>
   48d98:	00001706 	br	48df8 <strcmp+0x9c>
   48d9c:	3000161e 	bne	r6,zero,48df8 <strcmp+0x9c>
   48da0:	21000104 	addi	r4,r4,4
   48da4:	20800017 	ldw	r2,0(r4)
   48da8:	29400104 	addi	r5,r5,4
   48dac:	28c00017 	ldw	r3,0(r5)
   48db0:	124f883a 	add	r7,r2,r9
   48db4:	008c303a 	nor	r6,zero,r2
   48db8:	398c703a 	and	r6,r7,r6
   48dbc:	320c703a 	and	r6,r6,r8
   48dc0:	10fff626 	beq	r2,r3,48d9c <strcmp+0x40>
   48dc4:	20800007 	ldb	r2,0(r4)
   48dc8:	1000051e 	bne	r2,zero,48de0 <strcmp+0x84>
   48dcc:	00000606 	br	48de8 <strcmp+0x8c>
   48dd0:	21000044 	addi	r4,r4,1
   48dd4:	20800007 	ldb	r2,0(r4)
   48dd8:	29400044 	addi	r5,r5,1
   48ddc:	10000226 	beq	r2,zero,48de8 <strcmp+0x8c>
   48de0:	28c00007 	ldb	r3,0(r5)
   48de4:	10fffa26 	beq	r2,r3,48dd0 <strcmp+0x74>
   48de8:	20c00003 	ldbu	r3,0(r4)
   48dec:	28800003 	ldbu	r2,0(r5)
   48df0:	1885c83a 	sub	r2,r3,r2
   48df4:	f800283a 	ret
   48df8:	0005883a 	mov	r2,zero
   48dfc:	f800283a 	ret

00048e00 <_write_r>:
   48e00:	defffd04 	addi	sp,sp,-12
   48e04:	dc400115 	stw	r17,4(sp)
   48e08:	dc000015 	stw	r16,0(sp)
   48e0c:	2023883a 	mov	r17,r4
   48e10:	04000174 	movhi	r16,5
   48e14:	8403a904 	addi	r16,r16,3748
   48e18:	2809883a 	mov	r4,r5
   48e1c:	300b883a 	mov	r5,r6
   48e20:	380d883a 	mov	r6,r7
   48e24:	dfc00215 	stw	ra,8(sp)
   48e28:	80000015 	stw	zero,0(r16)
   48e2c:	004b1980 	call	4b198 <write>
   48e30:	00ffffc4 	movi	r3,-1
   48e34:	10c00526 	beq	r2,r3,48e4c <_write_r+0x4c>
   48e38:	dfc00217 	ldw	ra,8(sp)
   48e3c:	dc400117 	ldw	r17,4(sp)
   48e40:	dc000017 	ldw	r16,0(sp)
   48e44:	dec00304 	addi	sp,sp,12
   48e48:	f800283a 	ret
   48e4c:	80c00017 	ldw	r3,0(r16)
   48e50:	183ff926 	beq	r3,zero,48e38 <_write_r+0x38>
   48e54:	88c00015 	stw	r3,0(r17)
   48e58:	dfc00217 	ldw	ra,8(sp)
   48e5c:	dc400117 	ldw	r17,4(sp)
   48e60:	dc000017 	ldw	r16,0(sp)
   48e64:	dec00304 	addi	sp,sp,12
   48e68:	f800283a 	ret

00048e6c <_calloc_r>:
   48e6c:	defffe04 	addi	sp,sp,-8
   48e70:	dc000015 	stw	r16,0(sp)
   48e74:	2021883a 	mov	r16,r4
   48e78:	3009883a 	mov	r4,r6
   48e7c:	dfc00115 	stw	ra,4(sp)
   48e80:	0041a580 	call	41a58 <__mulsi3>
   48e84:	8009883a 	mov	r4,r16
   48e88:	100b883a 	mov	r5,r2
   48e8c:	00468e40 	call	468e4 <_malloc_r>
   48e90:	1021883a 	mov	r16,r2
   48e94:	10000c26 	beq	r2,zero,48ec8 <_calloc_r+0x5c>
   48e98:	11bfff17 	ldw	r6,-4(r2)
   48e9c:	00ffff04 	movi	r3,-4
   48ea0:	00800904 	movi	r2,36
   48ea4:	30cc703a 	and	r6,r6,r3
   48ea8:	30cd883a 	add	r6,r6,r3
   48eac:	11801436 	bltu	r2,r6,48f00 <_calloc_r+0x94>
   48eb0:	00c004c4 	movi	r3,19
   48eb4:	19800936 	bltu	r3,r6,48edc <_calloc_r+0x70>
   48eb8:	8005883a 	mov	r2,r16
   48ebc:	10000015 	stw	zero,0(r2)
   48ec0:	10000115 	stw	zero,4(r2)
   48ec4:	10000215 	stw	zero,8(r2)
   48ec8:	8005883a 	mov	r2,r16
   48ecc:	dfc00117 	ldw	ra,4(sp)
   48ed0:	dc000017 	ldw	r16,0(sp)
   48ed4:	dec00204 	addi	sp,sp,8
   48ed8:	f800283a 	ret
   48edc:	80000015 	stw	zero,0(r16)
   48ee0:	80000115 	stw	zero,4(r16)
   48ee4:	00c006c4 	movi	r3,27
   48ee8:	19800d2e 	bgeu	r3,r6,48f20 <_calloc_r+0xb4>
   48eec:	80000215 	stw	zero,8(r16)
   48ef0:	80000315 	stw	zero,12(r16)
   48ef4:	30800c26 	beq	r6,r2,48f28 <_calloc_r+0xbc>
   48ef8:	80800404 	addi	r2,r16,16
   48efc:	003fef06 	br	48ebc <_calloc_r+0x50>
   48f00:	8009883a 	mov	r4,r16
   48f04:	000b883a 	mov	r5,zero
   48f08:	004742c0 	call	4742c <memset>
   48f0c:	8005883a 	mov	r2,r16
   48f10:	dfc00117 	ldw	ra,4(sp)
   48f14:	dc000017 	ldw	r16,0(sp)
   48f18:	dec00204 	addi	sp,sp,8
   48f1c:	f800283a 	ret
   48f20:	80800204 	addi	r2,r16,8
   48f24:	003fe506 	br	48ebc <_calloc_r+0x50>
   48f28:	80000415 	stw	zero,16(r16)
   48f2c:	80000515 	stw	zero,20(r16)
   48f30:	80800604 	addi	r2,r16,24
   48f34:	003fe106 	br	48ebc <_calloc_r+0x50>

00048f38 <_close_r>:
   48f38:	defffd04 	addi	sp,sp,-12
   48f3c:	dc400115 	stw	r17,4(sp)
   48f40:	dc000015 	stw	r16,0(sp)
   48f44:	2023883a 	mov	r17,r4
   48f48:	04000174 	movhi	r16,5
   48f4c:	8403a904 	addi	r16,r16,3748
   48f50:	2809883a 	mov	r4,r5
   48f54:	dfc00215 	stw	ra,8(sp)
   48f58:	80000015 	stw	zero,0(r16)
   48f5c:	004a8e40 	call	4a8e4 <close>
   48f60:	00ffffc4 	movi	r3,-1
   48f64:	10c00526 	beq	r2,r3,48f7c <_close_r+0x44>
   48f68:	dfc00217 	ldw	ra,8(sp)
   48f6c:	dc400117 	ldw	r17,4(sp)
   48f70:	dc000017 	ldw	r16,0(sp)
   48f74:	dec00304 	addi	sp,sp,12
   48f78:	f800283a 	ret
   48f7c:	80c00017 	ldw	r3,0(r16)
   48f80:	183ff926 	beq	r3,zero,48f68 <_close_r+0x30>
   48f84:	88c00015 	stw	r3,0(r17)
   48f88:	dfc00217 	ldw	ra,8(sp)
   48f8c:	dc400117 	ldw	r17,4(sp)
   48f90:	dc000017 	ldw	r16,0(sp)
   48f94:	dec00304 	addi	sp,sp,12
   48f98:	f800283a 	ret

00048f9c <_fclose_r>:
   48f9c:	defffc04 	addi	sp,sp,-16
   48fa0:	dc400115 	stw	r17,4(sp)
   48fa4:	dc000015 	stw	r16,0(sp)
   48fa8:	dfc00315 	stw	ra,12(sp)
   48fac:	dc800215 	stw	r18,8(sp)
   48fb0:	2821883a 	mov	r16,r5
   48fb4:	2023883a 	mov	r17,r4
   48fb8:	28003426 	beq	r5,zero,4908c <_fclose_r+0xf0>
   48fbc:	0045bd00 	call	45bd0 <__sfp_lock_acquire>
   48fc0:	88000226 	beq	r17,zero,48fcc <_fclose_r+0x30>
   48fc4:	88800e17 	ldw	r2,56(r17)
   48fc8:	10003826 	beq	r2,zero,490ac <_fclose_r+0x110>
   48fcc:	8080030f 	ldh	r2,12(r16)
   48fd0:	10002526 	beq	r2,zero,49068 <_fclose_r+0xcc>
   48fd4:	8809883a 	mov	r4,r17
   48fd8:	800b883a 	mov	r5,r16
   48fdc:	004570c0 	call	4570c <_fflush_r>
   48fe0:	1025883a 	mov	r18,r2
   48fe4:	80800b17 	ldw	r2,44(r16)
   48fe8:	10000426 	beq	r2,zero,48ffc <_fclose_r+0x60>
   48fec:	81400717 	ldw	r5,28(r16)
   48ff0:	8809883a 	mov	r4,r17
   48ff4:	103ee83a 	callr	r2
   48ff8:	10003516 	blt	r2,zero,490d0 <_fclose_r+0x134>
   48ffc:	8080030b 	ldhu	r2,12(r16)
   49000:	1080200c 	andi	r2,r2,128
   49004:	10bfffcc 	andi	r2,r2,65535
   49008:	10a0001c 	xori	r2,r2,32768
   4900c:	10a00004 	addi	r2,r2,-32768
   49010:	10002b1e 	bne	r2,zero,490c0 <_fclose_r+0x124>
   49014:	81400c17 	ldw	r5,48(r16)
   49018:	28000526 	beq	r5,zero,49030 <_fclose_r+0x94>
   4901c:	80801004 	addi	r2,r16,64
   49020:	28800226 	beq	r5,r2,4902c <_fclose_r+0x90>
   49024:	8809883a 	mov	r4,r17
   49028:	0045d4c0 	call	45d4c <_free_r>
   4902c:	80000c15 	stw	zero,48(r16)
   49030:	81401117 	ldw	r5,68(r16)
   49034:	28000326 	beq	r5,zero,49044 <_fclose_r+0xa8>
   49038:	8809883a 	mov	r4,r17
   4903c:	0045d4c0 	call	45d4c <_free_r>
   49040:	80001115 	stw	zero,68(r16)
   49044:	8000030d 	sth	zero,12(r16)
   49048:	0045bd40 	call	45bd4 <__sfp_lock_release>
   4904c:	9005883a 	mov	r2,r18
   49050:	dfc00317 	ldw	ra,12(sp)
   49054:	dc800217 	ldw	r18,8(sp)
   49058:	dc400117 	ldw	r17,4(sp)
   4905c:	dc000017 	ldw	r16,0(sp)
   49060:	dec00404 	addi	sp,sp,16
   49064:	f800283a 	ret
   49068:	0045bd40 	call	45bd4 <__sfp_lock_release>
   4906c:	0025883a 	mov	r18,zero
   49070:	9005883a 	mov	r2,r18
   49074:	dfc00317 	ldw	ra,12(sp)
   49078:	dc800217 	ldw	r18,8(sp)
   4907c:	dc400117 	ldw	r17,4(sp)
   49080:	dc000017 	ldw	r16,0(sp)
   49084:	dec00404 	addi	sp,sp,16
   49088:	f800283a 	ret
   4908c:	0025883a 	mov	r18,zero
   49090:	9005883a 	mov	r2,r18
   49094:	dfc00317 	ldw	ra,12(sp)
   49098:	dc800217 	ldw	r18,8(sp)
   4909c:	dc400117 	ldw	r17,4(sp)
   490a0:	dc000017 	ldw	r16,0(sp)
   490a4:	dec00404 	addi	sp,sp,16
   490a8:	f800283a 	ret
   490ac:	8809883a 	mov	r4,r17
   490b0:	00459c80 	call	459c8 <__sinit>
   490b4:	8080030f 	ldh	r2,12(r16)
   490b8:	103fc61e 	bne	r2,zero,48fd4 <_fclose_r+0x38>
   490bc:	003fea06 	br	49068 <_fclose_r+0xcc>
   490c0:	81400417 	ldw	r5,16(r16)
   490c4:	8809883a 	mov	r4,r17
   490c8:	0045d4c0 	call	45d4c <_free_r>
   490cc:	003fd106 	br	49014 <_fclose_r+0x78>
   490d0:	04bfffc4 	movi	r18,-1
   490d4:	003fc906 	br	48ffc <_fclose_r+0x60>

000490d8 <fclose>:
   490d8:	00800174 	movhi	r2,5
   490dc:	10bcff04 	addi	r2,r2,-3076
   490e0:	200b883a 	mov	r5,r4
   490e4:	11000017 	ldw	r4,0(r2)
   490e8:	0048f9c1 	jmpi	48f9c <_fclose_r>

000490ec <_fstat_r>:
   490ec:	defffd04 	addi	sp,sp,-12
   490f0:	dc400115 	stw	r17,4(sp)
   490f4:	dc000015 	stw	r16,0(sp)
   490f8:	2023883a 	mov	r17,r4
   490fc:	04000174 	movhi	r16,5
   49100:	8403a904 	addi	r16,r16,3748
   49104:	2809883a 	mov	r4,r5
   49108:	300b883a 	mov	r5,r6
   4910c:	dfc00215 	stw	ra,8(sp)
   49110:	80000015 	stw	zero,0(r16)
   49114:	004aa680 	call	4aa68 <fstat>
   49118:	00ffffc4 	movi	r3,-1
   4911c:	10c00526 	beq	r2,r3,49134 <_fstat_r+0x48>
   49120:	dfc00217 	ldw	ra,8(sp)
   49124:	dc400117 	ldw	r17,4(sp)
   49128:	dc000017 	ldw	r16,0(sp)
   4912c:	dec00304 	addi	sp,sp,12
   49130:	f800283a 	ret
   49134:	80c00017 	ldw	r3,0(r16)
   49138:	183ff926 	beq	r3,zero,49120 <_fstat_r+0x34>
   4913c:	88c00015 	stw	r3,0(r17)
   49140:	dfc00217 	ldw	ra,8(sp)
   49144:	dc400117 	ldw	r17,4(sp)
   49148:	dc000017 	ldw	r16,0(sp)
   4914c:	dec00304 	addi	sp,sp,12
   49150:	f800283a 	ret

00049154 <_isatty_r>:
   49154:	defffd04 	addi	sp,sp,-12
   49158:	dc400115 	stw	r17,4(sp)
   4915c:	dc000015 	stw	r16,0(sp)
   49160:	2023883a 	mov	r17,r4
   49164:	04000174 	movhi	r16,5
   49168:	8403a904 	addi	r16,r16,3748
   4916c:	2809883a 	mov	r4,r5
   49170:	dfc00215 	stw	ra,8(sp)
   49174:	80000015 	stw	zero,0(r16)
   49178:	004ab680 	call	4ab68 <isatty>
   4917c:	00ffffc4 	movi	r3,-1
   49180:	10c00526 	beq	r2,r3,49198 <_isatty_r+0x44>
   49184:	dfc00217 	ldw	ra,8(sp)
   49188:	dc400117 	ldw	r17,4(sp)
   4918c:	dc000017 	ldw	r16,0(sp)
   49190:	dec00304 	addi	sp,sp,12
   49194:	f800283a 	ret
   49198:	80c00017 	ldw	r3,0(r16)
   4919c:	183ff926 	beq	r3,zero,49184 <_isatty_r+0x30>
   491a0:	88c00015 	stw	r3,0(r17)
   491a4:	dfc00217 	ldw	ra,8(sp)
   491a8:	dc400117 	ldw	r17,4(sp)
   491ac:	dc000017 	ldw	r16,0(sp)
   491b0:	dec00304 	addi	sp,sp,12
   491b4:	f800283a 	ret

000491b8 <_lseek_r>:
   491b8:	defffd04 	addi	sp,sp,-12
   491bc:	dc400115 	stw	r17,4(sp)
   491c0:	dc000015 	stw	r16,0(sp)
   491c4:	2023883a 	mov	r17,r4
   491c8:	04000174 	movhi	r16,5
   491cc:	8403a904 	addi	r16,r16,3748
   491d0:	2809883a 	mov	r4,r5
   491d4:	300b883a 	mov	r5,r6
   491d8:	380d883a 	mov	r6,r7
   491dc:	dfc00215 	stw	ra,8(sp)
   491e0:	80000015 	stw	zero,0(r16)
   491e4:	004ad480 	call	4ad48 <lseek>
   491e8:	00ffffc4 	movi	r3,-1
   491ec:	10c00526 	beq	r2,r3,49204 <_lseek_r+0x4c>
   491f0:	dfc00217 	ldw	ra,8(sp)
   491f4:	dc400117 	ldw	r17,4(sp)
   491f8:	dc000017 	ldw	r16,0(sp)
   491fc:	dec00304 	addi	sp,sp,12
   49200:	f800283a 	ret
   49204:	80c00017 	ldw	r3,0(r16)
   49208:	183ff926 	beq	r3,zero,491f0 <_lseek_r+0x38>
   4920c:	88c00015 	stw	r3,0(r17)
   49210:	dfc00217 	ldw	ra,8(sp)
   49214:	dc400117 	ldw	r17,4(sp)
   49218:	dc000017 	ldw	r16,0(sp)
   4921c:	dec00304 	addi	sp,sp,12
   49220:	f800283a 	ret

00049224 <_read_r>:
   49224:	defffd04 	addi	sp,sp,-12
   49228:	dc400115 	stw	r17,4(sp)
   4922c:	dc000015 	stw	r16,0(sp)
   49230:	2023883a 	mov	r17,r4
   49234:	04000174 	movhi	r16,5
   49238:	8403a904 	addi	r16,r16,3748
   4923c:	2809883a 	mov	r4,r5
   49240:	300b883a 	mov	r5,r6
   49244:	380d883a 	mov	r6,r7
   49248:	dfc00215 	stw	ra,8(sp)
   4924c:	80000015 	stw	zero,0(r16)
   49250:	004af240 	call	4af24 <read>
   49254:	00ffffc4 	movi	r3,-1
   49258:	10c00526 	beq	r2,r3,49270 <_read_r+0x4c>
   4925c:	dfc00217 	ldw	ra,8(sp)
   49260:	dc400117 	ldw	r17,4(sp)
   49264:	dc000017 	ldw	r16,0(sp)
   49268:	dec00304 	addi	sp,sp,12
   4926c:	f800283a 	ret
   49270:	80c00017 	ldw	r3,0(r16)
   49274:	183ff926 	beq	r3,zero,4925c <_read_r+0x38>
   49278:	88c00015 	stw	r3,0(r17)
   4927c:	dfc00217 	ldw	ra,8(sp)
   49280:	dc400117 	ldw	r17,4(sp)
   49284:	dc000017 	ldw	r16,0(sp)
   49288:	dec00304 	addi	sp,sp,12
   4928c:	f800283a 	ret

00049290 <__udivdi3>:
   49290:	defff504 	addi	sp,sp,-44
   49294:	dd000515 	stw	r20,20(sp)
   49298:	dcc00415 	stw	r19,16(sp)
   4929c:	dc800315 	stw	r18,12(sp)
   492a0:	dc400215 	stw	r17,8(sp)
   492a4:	dc000115 	stw	r16,4(sp)
   492a8:	dfc00a15 	stw	ra,40(sp)
   492ac:	df000915 	stw	fp,36(sp)
   492b0:	ddc00815 	stw	r23,32(sp)
   492b4:	dd800715 	stw	r22,28(sp)
   492b8:	dd400615 	stw	r21,24(sp)
   492bc:	2025883a 	mov	r18,r4
   492c0:	2823883a 	mov	r17,r5
   492c4:	3021883a 	mov	r16,r6
   492c8:	2027883a 	mov	r19,r4
   492cc:	2829883a 	mov	r20,r5
   492d0:	3800451e 	bne	r7,zero,493e8 <__udivdi3+0x158>
   492d4:	2980652e 	bgeu	r5,r6,4946c <__udivdi3+0x1dc>
   492d8:	00bfffd4 	movui	r2,65535
   492dc:	1180b436 	bltu	r2,r6,495b0 <__udivdi3+0x320>
   492e0:	00803fc4 	movi	r2,255
   492e4:	11816636 	bltu	r2,r6,49880 <__udivdi3+0x5f0>
   492e8:	0005883a 	mov	r2,zero
   492ec:	0007883a 	mov	r3,zero
   492f0:	3084d83a 	srl	r2,r6,r2
   492f4:	01000174 	movhi	r4,5
   492f8:	2135b404 	addi	r4,r4,-10544
   492fc:	2085883a 	add	r2,r4,r2
   49300:	10800003 	ldbu	r2,0(r2)
   49304:	10c7883a 	add	r3,r2,r3
   49308:	00800804 	movi	r2,32
   4930c:	10c5c83a 	sub	r2,r2,r3
   49310:	10000526 	beq	r2,zero,49328 <__udivdi3+0x98>
   49314:	88a2983a 	sll	r17,r17,r2
   49318:	90c6d83a 	srl	r3,r18,r3
   4931c:	30a0983a 	sll	r16,r6,r2
   49320:	90a6983a 	sll	r19,r18,r2
   49324:	88e8b03a 	or	r20,r17,r3
   49328:	8022d43a 	srli	r17,r16,16
   4932c:	a009883a 	mov	r4,r20
   49330:	857fffcc 	andi	r21,r16,65535
   49334:	880b883a 	mov	r5,r17
   49338:	004a7bc0 	call	4a7bc <__umodsi3>
   4933c:	a009883a 	mov	r4,r20
   49340:	880b883a 	mov	r5,r17
   49344:	102d883a 	mov	r22,r2
   49348:	004a7b40 	call	4a7b4 <__udivsi3>
   4934c:	1009883a 	mov	r4,r2
   49350:	a80b883a 	mov	r5,r21
   49354:	1025883a 	mov	r18,r2
   49358:	0041a580 	call	41a58 <__mulsi3>
   4935c:	1009883a 	mov	r4,r2
   49360:	b006943a 	slli	r3,r22,16
   49364:	9804d43a 	srli	r2,r19,16
   49368:	1886b03a 	or	r3,r3,r2
   4936c:	1900052e 	bgeu	r3,r4,49384 <__udivdi3+0xf4>
   49370:	1c07883a 	add	r3,r3,r16
   49374:	90bfffc4 	addi	r2,r18,-1
   49378:	1c000136 	bltu	r3,r16,49380 <__udivdi3+0xf0>
   4937c:	19015536 	bltu	r3,r4,498d4 <__udivdi3+0x644>
   49380:	1025883a 	mov	r18,r2
   49384:	1929c83a 	sub	r20,r3,r4
   49388:	880b883a 	mov	r5,r17
   4938c:	a009883a 	mov	r4,r20
   49390:	004a7bc0 	call	4a7bc <__umodsi3>
   49394:	102d883a 	mov	r22,r2
   49398:	880b883a 	mov	r5,r17
   4939c:	a009883a 	mov	r4,r20
   493a0:	b02c943a 	slli	r22,r22,16
   493a4:	004a7b40 	call	4a7b4 <__udivsi3>
   493a8:	1009883a 	mov	r4,r2
   493ac:	a80b883a 	mov	r5,r21
   493b0:	9cffffcc 	andi	r19,r19,65535
   493b4:	1023883a 	mov	r17,r2
   493b8:	b4e6b03a 	or	r19,r22,r19
   493bc:	0041a580 	call	41a58 <__mulsi3>
   493c0:	9880052e 	bgeu	r19,r2,493d8 <__udivdi3+0x148>
   493c4:	9c27883a 	add	r19,r19,r16
   493c8:	88ffffc4 	addi	r3,r17,-1
   493cc:	9c011436 	bltu	r19,r16,49820 <__udivdi3+0x590>
   493d0:	9881132e 	bgeu	r19,r2,49820 <__udivdi3+0x590>
   493d4:	8c7fff84 	addi	r17,r17,-2
   493d8:	9004943a 	slli	r2,r18,16
   493dc:	0007883a 	mov	r3,zero
   493e0:	8884b03a 	or	r2,r17,r2
   493e4:	00001506 	br	4943c <__udivdi3+0x1ac>
   493e8:	29c06a36 	bltu	r5,r7,49594 <__udivdi3+0x304>
   493ec:	00bfffd4 	movui	r2,65535
   493f0:	11c06a2e 	bgeu	r2,r7,4959c <__udivdi3+0x30c>
   493f4:	00804034 	movhi	r2,256
   493f8:	10bfffc4 	addi	r2,r2,-1
   493fc:	11c11436 	bltu	r2,r7,49850 <__udivdi3+0x5c0>
   49400:	00c00404 	movi	r3,16
   49404:	180b883a 	mov	r5,r3
   49408:	38c6d83a 	srl	r3,r7,r3
   4940c:	01000174 	movhi	r4,5
   49410:	2135b404 	addi	r4,r4,-10544
   49414:	04000804 	movi	r16,32
   49418:	20c7883a 	add	r3,r4,r3
   4941c:	18800003 	ldbu	r2,0(r3)
   49420:	1145883a 	add	r2,r2,r5
   49424:	80a1c83a 	sub	r16,r16,r2
   49428:	80006e1e 	bne	r16,zero,495e4 <__udivdi3+0x354>
   4942c:	0007883a 	mov	r3,zero
   49430:	3c406a36 	bltu	r7,r17,495dc <__udivdi3+0x34c>
   49434:	9180692e 	bgeu	r18,r6,495dc <__udivdi3+0x34c>
   49438:	0005883a 	mov	r2,zero
   4943c:	dfc00a17 	ldw	ra,40(sp)
   49440:	df000917 	ldw	fp,36(sp)
   49444:	ddc00817 	ldw	r23,32(sp)
   49448:	dd800717 	ldw	r22,28(sp)
   4944c:	dd400617 	ldw	r21,24(sp)
   49450:	dd000517 	ldw	r20,20(sp)
   49454:	dcc00417 	ldw	r19,16(sp)
   49458:	dc800317 	ldw	r18,12(sp)
   4945c:	dc400217 	ldw	r17,8(sp)
   49460:	dc000117 	ldw	r16,4(sp)
   49464:	dec00b04 	addi	sp,sp,44
   49468:	f800283a 	ret
   4946c:	3000041e 	bne	r6,zero,49480 <__udivdi3+0x1f0>
   49470:	01000044 	movi	r4,1
   49474:	000b883a 	mov	r5,zero
   49478:	004a7b40 	call	4a7b4 <__udivsi3>
   4947c:	1021883a 	mov	r16,r2
   49480:	00bfffd4 	movui	r2,65535
   49484:	1400502e 	bgeu	r2,r16,495c8 <__udivdi3+0x338>
   49488:	00804034 	movhi	r2,256
   4948c:	10bfffc4 	addi	r2,r2,-1
   49490:	1400f536 	bltu	r2,r16,49868 <__udivdi3+0x5d8>
   49494:	00800404 	movi	r2,16
   49498:	1007883a 	mov	r3,r2
   4949c:	8084d83a 	srl	r2,r16,r2
   494a0:	01000174 	movhi	r4,5
   494a4:	2135b404 	addi	r4,r4,-10544
   494a8:	2085883a 	add	r2,r4,r2
   494ac:	10800003 	ldbu	r2,0(r2)
   494b0:	10c7883a 	add	r3,r2,r3
   494b4:	00800804 	movi	r2,32
   494b8:	10c5c83a 	sub	r2,r2,r3
   494bc:	1000a01e 	bne	r2,zero,49740 <__udivdi3+0x4b0>
   494c0:	8028d43a 	srli	r20,r16,16
   494c4:	8c23c83a 	sub	r17,r17,r16
   494c8:	857fffcc 	andi	r21,r16,65535
   494cc:	00c00044 	movi	r3,1
   494d0:	8809883a 	mov	r4,r17
   494d4:	a00b883a 	mov	r5,r20
   494d8:	d8c00015 	stw	r3,0(sp)
   494dc:	004a7bc0 	call	4a7bc <__umodsi3>
   494e0:	8809883a 	mov	r4,r17
   494e4:	a00b883a 	mov	r5,r20
   494e8:	102d883a 	mov	r22,r2
   494ec:	004a7b40 	call	4a7b4 <__udivsi3>
   494f0:	1009883a 	mov	r4,r2
   494f4:	a80b883a 	mov	r5,r21
   494f8:	1025883a 	mov	r18,r2
   494fc:	0041a580 	call	41a58 <__mulsi3>
   49500:	1009883a 	mov	r4,r2
   49504:	b00c943a 	slli	r6,r22,16
   49508:	9804d43a 	srli	r2,r19,16
   4950c:	d8c00017 	ldw	r3,0(sp)
   49510:	308cb03a 	or	r6,r6,r2
   49514:	3100052e 	bgeu	r6,r4,4952c <__udivdi3+0x29c>
   49518:	340d883a 	add	r6,r6,r16
   4951c:	90bfffc4 	addi	r2,r18,-1
   49520:	34000136 	bltu	r6,r16,49528 <__udivdi3+0x298>
   49524:	3100e836 	bltu	r6,r4,498c8 <__udivdi3+0x638>
   49528:	1025883a 	mov	r18,r2
   4952c:	3123c83a 	sub	r17,r6,r4
   49530:	8809883a 	mov	r4,r17
   49534:	a00b883a 	mov	r5,r20
   49538:	d8c00015 	stw	r3,0(sp)
   4953c:	004a7bc0 	call	4a7bc <__umodsi3>
   49540:	102d883a 	mov	r22,r2
   49544:	8809883a 	mov	r4,r17
   49548:	a00b883a 	mov	r5,r20
   4954c:	b02c943a 	slli	r22,r22,16
   49550:	004a7b40 	call	4a7b4 <__udivsi3>
   49554:	1009883a 	mov	r4,r2
   49558:	a80b883a 	mov	r5,r21
   4955c:	9cffffcc 	andi	r19,r19,65535
   49560:	1023883a 	mov	r17,r2
   49564:	b4e6b03a 	or	r19,r22,r19
   49568:	0041a580 	call	41a58 <__mulsi3>
   4956c:	d8c00017 	ldw	r3,0(sp)
   49570:	9880052e 	bgeu	r19,r2,49588 <__udivdi3+0x2f8>
   49574:	9c27883a 	add	r19,r19,r16
   49578:	893fffc4 	addi	r4,r17,-1
   4957c:	9c00aa36 	bltu	r19,r16,49828 <__udivdi3+0x598>
   49580:	9880a92e 	bgeu	r19,r2,49828 <__udivdi3+0x598>
   49584:	8c7fff84 	addi	r17,r17,-2
   49588:	9004943a 	slli	r2,r18,16
   4958c:	8884b03a 	or	r2,r17,r2
   49590:	003faa06 	br	4943c <__udivdi3+0x1ac>
   49594:	0007883a 	mov	r3,zero
   49598:	003fa706 	br	49438 <__udivdi3+0x1a8>
   4959c:	00803fc4 	movi	r2,255
   495a0:	11c0ae36 	bltu	r2,r7,4985c <__udivdi3+0x5cc>
   495a4:	0007883a 	mov	r3,zero
   495a8:	000b883a 	mov	r5,zero
   495ac:	003f9606 	br	49408 <__udivdi3+0x178>
   495b0:	00804034 	movhi	r2,256
   495b4:	10bfffc4 	addi	r2,r2,-1
   495b8:	1180ae36 	bltu	r2,r6,49874 <__udivdi3+0x5e4>
   495bc:	00800404 	movi	r2,16
   495c0:	1007883a 	mov	r3,r2
   495c4:	003f4a06 	br	492f0 <__udivdi3+0x60>
   495c8:	00803fc4 	movi	r2,255
   495cc:	1400af36 	bltu	r2,r16,4988c <__udivdi3+0x5fc>
   495d0:	0005883a 	mov	r2,zero
   495d4:	0007883a 	mov	r3,zero
   495d8:	003fb006 	br	4949c <__udivdi3+0x20c>
   495dc:	00800044 	movi	r2,1
   495e0:	003f9606 	br	4943c <__udivdi3+0x1ac>
   495e4:	3c0e983a 	sll	r7,r7,r16
   495e8:	3086d83a 	srl	r3,r6,r2
   495ec:	88aed83a 	srl	r23,r17,r2
   495f0:	9084d83a 	srl	r2,r18,r2
   495f4:	38e6b03a 	or	r19,r7,r3
   495f8:	9828d43a 	srli	r20,r19,16
   495fc:	8c22983a 	sll	r17,r17,r16
   49600:	b809883a 	mov	r4,r23
   49604:	a00b883a 	mov	r5,r20
   49608:	342a983a 	sll	r21,r6,r16
   4960c:	88a2b03a 	or	r17,r17,r2
   49610:	004a7bc0 	call	4a7bc <__umodsi3>
   49614:	b809883a 	mov	r4,r23
   49618:	a00b883a 	mov	r5,r20
   4961c:	1039883a 	mov	fp,r2
   49620:	9dbfffcc 	andi	r22,r19,65535
   49624:	004a7b40 	call	4a7b4 <__udivsi3>
   49628:	1009883a 	mov	r4,r2
   4962c:	b00b883a 	mov	r5,r22
   49630:	102f883a 	mov	r23,r2
   49634:	0041a580 	call	41a58 <__mulsi3>
   49638:	1009883a 	mov	r4,r2
   4963c:	e00e943a 	slli	r7,fp,16
   49640:	8804d43a 	srli	r2,r17,16
   49644:	388eb03a 	or	r7,r7,r2
   49648:	3900042e 	bgeu	r7,r4,4965c <__udivdi3+0x3cc>
   4964c:	3ccf883a 	add	r7,r7,r19
   49650:	b8bfffc4 	addi	r2,r23,-1
   49654:	3cc0942e 	bgeu	r7,r19,498a8 <__udivdi3+0x618>
   49658:	102f883a 	mov	r23,r2
   4965c:	3939c83a 	sub	fp,r7,r4
   49660:	a00b883a 	mov	r5,r20
   49664:	e009883a 	mov	r4,fp
   49668:	004a7bc0 	call	4a7bc <__umodsi3>
   4966c:	a00b883a 	mov	r5,r20
   49670:	e009883a 	mov	r4,fp
   49674:	d8800015 	stw	r2,0(sp)
   49678:	004a7b40 	call	4a7b4 <__udivsi3>
   4967c:	1009883a 	mov	r4,r2
   49680:	b00b883a 	mov	r5,r22
   49684:	1029883a 	mov	r20,r2
   49688:	0041a580 	call	41a58 <__mulsi3>
   4968c:	d8c00017 	ldw	r3,0(sp)
   49690:	8c7fffcc 	andi	r17,r17,65535
   49694:	1806943a 	slli	r3,r3,16
   49698:	1c46b03a 	or	r3,r3,r17
   4969c:	1880042e 	bgeu	r3,r2,496b0 <__udivdi3+0x420>
   496a0:	1cc7883a 	add	r3,r3,r19
   496a4:	a13fffc4 	addi	r4,r20,-1
   496a8:	1cc07b2e 	bgeu	r3,r19,49898 <__udivdi3+0x608>
   496ac:	2029883a 	mov	r20,r4
   496b0:	b82e943a 	slli	r23,r23,16
   496b4:	a822d43a 	srli	r17,r21,16
   496b8:	ad7fffcc 	andi	r21,r21,65535
   496bc:	a5e8b03a 	or	r20,r20,r23
   496c0:	a5bfffcc 	andi	r22,r20,65535
   496c4:	b009883a 	mov	r4,r22
   496c8:	a80b883a 	mov	r5,r21
   496cc:	18afc83a 	sub	r23,r3,r2
   496d0:	a026d43a 	srli	r19,r20,16
   496d4:	0041a580 	call	41a58 <__mulsi3>
   496d8:	b009883a 	mov	r4,r22
   496dc:	880b883a 	mov	r5,r17
   496e0:	1039883a 	mov	fp,r2
   496e4:	0041a580 	call	41a58 <__mulsi3>
   496e8:	a80b883a 	mov	r5,r21
   496ec:	9809883a 	mov	r4,r19
   496f0:	102d883a 	mov	r22,r2
   496f4:	0041a580 	call	41a58 <__mulsi3>
   496f8:	9809883a 	mov	r4,r19
   496fc:	880b883a 	mov	r5,r17
   49700:	102b883a 	mov	r21,r2
   49704:	0041a580 	call	41a58 <__mulsi3>
   49708:	100b883a 	mov	r5,r2
   4970c:	e004d43a 	srli	r2,fp,16
   49710:	ad89883a 	add	r4,r21,r22
   49714:	2089883a 	add	r4,r4,r2
   49718:	2540022e 	bgeu	r4,r21,49724 <__udivdi3+0x494>
   4971c:	00800074 	movhi	r2,1
   49720:	288b883a 	add	r5,r5,r2
   49724:	2004d43a 	srli	r2,r4,16
   49728:	288b883a 	add	r5,r5,r2
   4972c:	b9404536 	bltu	r23,r5,49844 <__udivdi3+0x5b4>
   49730:	b9403f26 	beq	r23,r5,49830 <__udivdi3+0x5a0>
   49734:	a005883a 	mov	r2,r20
   49738:	0007883a 	mov	r3,zero
   4973c:	003f3f06 	br	4943c <__udivdi3+0x1ac>
   49740:	80a0983a 	sll	r16,r16,r2
   49744:	88eed83a 	srl	r23,r17,r3
   49748:	90c6d83a 	srl	r3,r18,r3
   4974c:	8028d43a 	srli	r20,r16,16
   49750:	88a2983a 	sll	r17,r17,r2
   49754:	b809883a 	mov	r4,r23
   49758:	a00b883a 	mov	r5,r20
   4975c:	88ecb03a 	or	r22,r17,r3
   49760:	90a6983a 	sll	r19,r18,r2
   49764:	004a7bc0 	call	4a7bc <__umodsi3>
   49768:	b809883a 	mov	r4,r23
   4976c:	a00b883a 	mov	r5,r20
   49770:	1023883a 	mov	r17,r2
   49774:	857fffcc 	andi	r21,r16,65535
   49778:	004a7b40 	call	4a7b4 <__udivsi3>
   4977c:	1009883a 	mov	r4,r2
   49780:	a80b883a 	mov	r5,r21
   49784:	102f883a 	mov	r23,r2
   49788:	0041a580 	call	41a58 <__mulsi3>
   4978c:	1009883a 	mov	r4,r2
   49790:	880a943a 	slli	r5,r17,16
   49794:	b004d43a 	srli	r2,r22,16
   49798:	288ab03a 	or	r5,r5,r2
   4979c:	2900062e 	bgeu	r5,r4,497b8 <__udivdi3+0x528>
   497a0:	2c0b883a 	add	r5,r5,r16
   497a4:	b8bfffc4 	addi	r2,r23,-1
   497a8:	2c004536 	bltu	r5,r16,498c0 <__udivdi3+0x630>
   497ac:	2900442e 	bgeu	r5,r4,498c0 <__udivdi3+0x630>
   497b0:	bdffff84 	addi	r23,r23,-2
   497b4:	2c0b883a 	add	r5,r5,r16
   497b8:	2925c83a 	sub	r18,r5,r4
   497bc:	9009883a 	mov	r4,r18
   497c0:	a00b883a 	mov	r5,r20
   497c4:	004a7bc0 	call	4a7bc <__umodsi3>
   497c8:	1023883a 	mov	r17,r2
   497cc:	9009883a 	mov	r4,r18
   497d0:	a00b883a 	mov	r5,r20
   497d4:	8822943a 	slli	r17,r17,16
   497d8:	004a7b40 	call	4a7b4 <__udivsi3>
   497dc:	1009883a 	mov	r4,r2
   497e0:	a80b883a 	mov	r5,r21
   497e4:	b5bfffcc 	andi	r22,r22,65535
   497e8:	1025883a 	mov	r18,r2
   497ec:	8da2b03a 	or	r17,r17,r22
   497f0:	0041a580 	call	41a58 <__mulsi3>
   497f4:	8880062e 	bgeu	r17,r2,49810 <__udivdi3+0x580>
   497f8:	8c23883a 	add	r17,r17,r16
   497fc:	90ffffc4 	addi	r3,r18,-1
   49800:	8c002d36 	bltu	r17,r16,498b8 <__udivdi3+0x628>
   49804:	88802c2e 	bgeu	r17,r2,498b8 <__udivdi3+0x628>
   49808:	94bfff84 	addi	r18,r18,-2
   4980c:	8c23883a 	add	r17,r17,r16
   49810:	b806943a 	slli	r3,r23,16
   49814:	88a3c83a 	sub	r17,r17,r2
   49818:	90c6b03a 	or	r3,r18,r3
   4981c:	003f2c06 	br	494d0 <__udivdi3+0x240>
   49820:	1823883a 	mov	r17,r3
   49824:	003eec06 	br	493d8 <__udivdi3+0x148>
   49828:	2023883a 	mov	r17,r4
   4982c:	003f5606 	br	49588 <__udivdi3+0x2f8>
   49830:	2008943a 	slli	r4,r4,16
   49834:	9420983a 	sll	r16,r18,r16
   49838:	e73fffcc 	andi	fp,fp,65535
   4983c:	2709883a 	add	r4,r4,fp
   49840:	813fbc2e 	bgeu	r16,r4,49734 <__udivdi3+0x4a4>
   49844:	a0bfffc4 	addi	r2,r20,-1
   49848:	0007883a 	mov	r3,zero
   4984c:	003efb06 	br	4943c <__udivdi3+0x1ac>
   49850:	00c00604 	movi	r3,24
   49854:	180b883a 	mov	r5,r3
   49858:	003eeb06 	br	49408 <__udivdi3+0x178>
   4985c:	00c00204 	movi	r3,8
   49860:	180b883a 	mov	r5,r3
   49864:	003ee806 	br	49408 <__udivdi3+0x178>
   49868:	00800604 	movi	r2,24
   4986c:	1007883a 	mov	r3,r2
   49870:	003f0a06 	br	4949c <__udivdi3+0x20c>
   49874:	00800604 	movi	r2,24
   49878:	1007883a 	mov	r3,r2
   4987c:	003e9c06 	br	492f0 <__udivdi3+0x60>
   49880:	00800204 	movi	r2,8
   49884:	1007883a 	mov	r3,r2
   49888:	003e9906 	br	492f0 <__udivdi3+0x60>
   4988c:	00800204 	movi	r2,8
   49890:	1007883a 	mov	r3,r2
   49894:	003f0106 	br	4949c <__udivdi3+0x20c>
   49898:	18bf842e 	bgeu	r3,r2,496ac <__udivdi3+0x41c>
   4989c:	a53fff84 	addi	r20,r20,-2
   498a0:	1cc7883a 	add	r3,r3,r19
   498a4:	003f8206 	br	496b0 <__udivdi3+0x420>
   498a8:	393f6b2e 	bgeu	r7,r4,49658 <__udivdi3+0x3c8>
   498ac:	bdffff84 	addi	r23,r23,-2
   498b0:	3ccf883a 	add	r7,r7,r19
   498b4:	003f6906 	br	4965c <__udivdi3+0x3cc>
   498b8:	1825883a 	mov	r18,r3
   498bc:	003fd406 	br	49810 <__udivdi3+0x580>
   498c0:	102f883a 	mov	r23,r2
   498c4:	003fbc06 	br	497b8 <__udivdi3+0x528>
   498c8:	94bfff84 	addi	r18,r18,-2
   498cc:	340d883a 	add	r6,r6,r16
   498d0:	003f1606 	br	4952c <__udivdi3+0x29c>
   498d4:	94bfff84 	addi	r18,r18,-2
   498d8:	1c07883a 	add	r3,r3,r16
   498dc:	003ea906 	br	49384 <__udivdi3+0xf4>

000498e0 <__umoddi3>:
   498e0:	defff304 	addi	sp,sp,-52
   498e4:	dd000715 	stw	r20,28(sp)
   498e8:	dcc00615 	stw	r19,24(sp)
   498ec:	dc800515 	stw	r18,20(sp)
   498f0:	dc400415 	stw	r17,16(sp)
   498f4:	dc000315 	stw	r16,12(sp)
   498f8:	dfc00c15 	stw	ra,48(sp)
   498fc:	df000b15 	stw	fp,44(sp)
   49900:	ddc00a15 	stw	r23,40(sp)
   49904:	dd800915 	stw	r22,36(sp)
   49908:	dd400815 	stw	r21,32(sp)
   4990c:	2025883a 	mov	r18,r4
   49910:	2823883a 	mov	r17,r5
   49914:	3021883a 	mov	r16,r6
   49918:	2027883a 	mov	r19,r4
   4991c:	2829883a 	mov	r20,r5
   49920:	38003a1e 	bne	r7,zero,49a0c <__umoddi3+0x12c>
   49924:	2980522e 	bgeu	r5,r6,49a70 <__umoddi3+0x190>
   49928:	00bfffd4 	movui	r2,65535
   4992c:	1180a436 	bltu	r2,r6,49bc0 <__umoddi3+0x2e0>
   49930:	00803fc4 	movi	r2,255
   49934:	11816036 	bltu	r2,r6,49eb8 <__umoddi3+0x5d8>
   49938:	0005883a 	mov	r2,zero
   4993c:	0009883a 	mov	r4,zero
   49940:	3084d83a 	srl	r2,r6,r2
   49944:	00c00174 	movhi	r3,5
   49948:	18f5b404 	addi	r3,r3,-10544
   4994c:	05400804 	movi	r21,32
   49950:	1885883a 	add	r2,r3,r2
   49954:	10800003 	ldbu	r2,0(r2)
   49958:	1109883a 	add	r4,r2,r4
   4995c:	a92bc83a 	sub	r21,r21,r4
   49960:	a8010e26 	beq	r21,zero,49d9c <__umoddi3+0x4bc>
   49964:	8d62983a 	sll	r17,r17,r21
   49968:	9108d83a 	srl	r4,r18,r4
   4996c:	3560983a 	sll	r16,r6,r21
   49970:	9566983a 	sll	r19,r18,r21
   49974:	8928b03a 	or	r20,r17,r4
   49978:	8022d43a 	srli	r17,r16,16
   4997c:	a009883a 	mov	r4,r20
   49980:	84bfffcc 	andi	r18,r16,65535
   49984:	880b883a 	mov	r5,r17
   49988:	004a7bc0 	call	4a7bc <__umodsi3>
   4998c:	a009883a 	mov	r4,r20
   49990:	880b883a 	mov	r5,r17
   49994:	102d883a 	mov	r22,r2
   49998:	004a7b40 	call	4a7b4 <__udivsi3>
   4999c:	1009883a 	mov	r4,r2
   499a0:	900b883a 	mov	r5,r18
   499a4:	0041a580 	call	41a58 <__mulsi3>
   499a8:	1009883a 	mov	r4,r2
   499ac:	b006943a 	slli	r3,r22,16
   499b0:	9804d43a 	srli	r2,r19,16
   499b4:	1886b03a 	or	r3,r3,r2
   499b8:	1900042e 	bgeu	r3,r4,499cc <__umoddi3+0xec>
   499bc:	1c07883a 	add	r3,r3,r16
   499c0:	1c000236 	bltu	r3,r16,499cc <__umoddi3+0xec>
   499c4:	1900012e 	bgeu	r3,r4,499cc <__umoddi3+0xec>
   499c8:	1c07883a 	add	r3,r3,r16
   499cc:	1929c83a 	sub	r20,r3,r4
   499d0:	a009883a 	mov	r4,r20
   499d4:	880b883a 	mov	r5,r17
   499d8:	004a7bc0 	call	4a7bc <__umodsi3>
   499dc:	102d883a 	mov	r22,r2
   499e0:	a009883a 	mov	r4,r20
   499e4:	880b883a 	mov	r5,r17
   499e8:	b02c943a 	slli	r22,r22,16
   499ec:	004a7b40 	call	4a7b4 <__udivsi3>
   499f0:	1009883a 	mov	r4,r2
   499f4:	900b883a 	mov	r5,r18
   499f8:	9cffffcc 	andi	r19,r19,65535
   499fc:	0041a580 	call	41a58 <__mulsi3>
   49a00:	b4e6b03a 	or	r19,r22,r19
   49a04:	9880572e 	bgeu	r19,r2,49b64 <__umoddi3+0x284>
   49a08:	00005206 	br	49b54 <__umoddi3+0x274>
   49a0c:	29c05936 	bltu	r5,r7,49b74 <__umoddi3+0x294>
   49a10:	00bfffd4 	movui	r2,65535
   49a14:	11c0652e 	bgeu	r2,r7,49bac <__umoddi3+0x2cc>
   49a18:	00804034 	movhi	r2,256
   49a1c:	10bfffc4 	addi	r2,r2,-1
   49a20:	11c11936 	bltu	r2,r7,49e88 <__umoddi3+0x5a8>
   49a24:	00c00404 	movi	r3,16
   49a28:	1827883a 	mov	r19,r3
   49a2c:	38c6d83a 	srl	r3,r7,r3
   49a30:	01000174 	movhi	r4,5
   49a34:	2135b404 	addi	r4,r4,-10544
   49a38:	04000804 	movi	r16,32
   49a3c:	20c7883a 	add	r3,r4,r3
   49a40:	18800003 	ldbu	r2,0(r3)
   49a44:	14e7883a 	add	r19,r2,r19
   49a48:	84e1c83a 	sub	r16,r16,r19
   49a4c:	8000671e 	bne	r16,zero,49bec <__umoddi3+0x30c>
   49a50:	3c400136 	bltu	r7,r17,49a58 <__umoddi3+0x178>
   49a54:	91812536 	bltu	r18,r6,49eec <__umoddi3+0x60c>
   49a58:	9185c83a 	sub	r2,r18,r6
   49a5c:	89e3c83a 	sub	r17,r17,r7
   49a60:	90a5803a 	cmpltu	r18,r18,r2
   49a64:	8ca9c83a 	sub	r20,r17,r18
   49a68:	a007883a 	mov	r3,r20
   49a6c:	00004306 	br	49b7c <__umoddi3+0x29c>
   49a70:	3000041e 	bne	r6,zero,49a84 <__umoddi3+0x1a4>
   49a74:	01000044 	movi	r4,1
   49a78:	000b883a 	mov	r5,zero
   49a7c:	004a7b40 	call	4a7b4 <__udivsi3>
   49a80:	1021883a 	mov	r16,r2
   49a84:	00bfffd4 	movui	r2,65535
   49a88:	1400532e 	bgeu	r2,r16,49bd8 <__umoddi3+0x2f8>
   49a8c:	00804034 	movhi	r2,256
   49a90:	10bfffc4 	addi	r2,r2,-1
   49a94:	14010536 	bltu	r2,r16,49eac <__umoddi3+0x5cc>
   49a98:	00800404 	movi	r2,16
   49a9c:	1007883a 	mov	r3,r2
   49aa0:	8084d83a 	srl	r2,r16,r2
   49aa4:	01000174 	movhi	r4,5
   49aa8:	2135b404 	addi	r4,r4,-10544
   49aac:	05400804 	movi	r21,32
   49ab0:	2085883a 	add	r2,r4,r2
   49ab4:	10800003 	ldbu	r2,0(r2)
   49ab8:	10c7883a 	add	r3,r2,r3
   49abc:	a8ebc83a 	sub	r21,r21,r3
   49ac0:	a800b81e 	bne	r21,zero,49da4 <__umoddi3+0x4c4>
   49ac4:	8028d43a 	srli	r20,r16,16
   49ac8:	8c23c83a 	sub	r17,r17,r16
   49acc:	85bfffcc 	andi	r22,r16,65535
   49ad0:	8809883a 	mov	r4,r17
   49ad4:	a00b883a 	mov	r5,r20
   49ad8:	004a7bc0 	call	4a7bc <__umodsi3>
   49adc:	8809883a 	mov	r4,r17
   49ae0:	a00b883a 	mov	r5,r20
   49ae4:	1025883a 	mov	r18,r2
   49ae8:	004a7b40 	call	4a7b4 <__udivsi3>
   49aec:	1009883a 	mov	r4,r2
   49af0:	b00b883a 	mov	r5,r22
   49af4:	0041a580 	call	41a58 <__mulsi3>
   49af8:	1009883a 	mov	r4,r2
   49afc:	9006943a 	slli	r3,r18,16
   49b00:	9804d43a 	srli	r2,r19,16
   49b04:	1886b03a 	or	r3,r3,r2
   49b08:	1900032e 	bgeu	r3,r4,49b18 <__umoddi3+0x238>
   49b0c:	1c07883a 	add	r3,r3,r16
   49b10:	1c000136 	bltu	r3,r16,49b18 <__umoddi3+0x238>
   49b14:	1900f336 	bltu	r3,r4,49ee4 <__umoddi3+0x604>
   49b18:	1923c83a 	sub	r17,r3,r4
   49b1c:	8809883a 	mov	r4,r17
   49b20:	a00b883a 	mov	r5,r20
   49b24:	004a7bc0 	call	4a7bc <__umodsi3>
   49b28:	102f883a 	mov	r23,r2
   49b2c:	8809883a 	mov	r4,r17
   49b30:	a00b883a 	mov	r5,r20
   49b34:	b82e943a 	slli	r23,r23,16
   49b38:	004a7b40 	call	4a7b4 <__udivsi3>
   49b3c:	1009883a 	mov	r4,r2
   49b40:	b00b883a 	mov	r5,r22
   49b44:	9cffffcc 	andi	r19,r19,65535
   49b48:	0041a580 	call	41a58 <__mulsi3>
   49b4c:	bce6b03a 	or	r19,r23,r19
   49b50:	9880042e 	bgeu	r19,r2,49b64 <__umoddi3+0x284>
   49b54:	9c27883a 	add	r19,r19,r16
   49b58:	9c000236 	bltu	r19,r16,49b64 <__umoddi3+0x284>
   49b5c:	9880012e 	bgeu	r19,r2,49b64 <__umoddi3+0x284>
   49b60:	9c27883a 	add	r19,r19,r16
   49b64:	9885c83a 	sub	r2,r19,r2
   49b68:	1544d83a 	srl	r2,r2,r21
   49b6c:	0007883a 	mov	r3,zero
   49b70:	00000206 	br	49b7c <__umoddi3+0x29c>
   49b74:	2005883a 	mov	r2,r4
   49b78:	2807883a 	mov	r3,r5
   49b7c:	dfc00c17 	ldw	ra,48(sp)
   49b80:	df000b17 	ldw	fp,44(sp)
   49b84:	ddc00a17 	ldw	r23,40(sp)
   49b88:	dd800917 	ldw	r22,36(sp)
   49b8c:	dd400817 	ldw	r21,32(sp)
   49b90:	dd000717 	ldw	r20,28(sp)
   49b94:	dcc00617 	ldw	r19,24(sp)
   49b98:	dc800517 	ldw	r18,20(sp)
   49b9c:	dc400417 	ldw	r17,16(sp)
   49ba0:	dc000317 	ldw	r16,12(sp)
   49ba4:	dec00d04 	addi	sp,sp,52
   49ba8:	f800283a 	ret
   49bac:	00803fc4 	movi	r2,255
   49bb0:	11c0b236 	bltu	r2,r7,49e7c <__umoddi3+0x59c>
   49bb4:	0007883a 	mov	r3,zero
   49bb8:	0027883a 	mov	r19,zero
   49bbc:	003f9b06 	br	49a2c <__umoddi3+0x14c>
   49bc0:	00804034 	movhi	r2,256
   49bc4:	10bfffc4 	addi	r2,r2,-1
   49bc8:	1180b236 	bltu	r2,r6,49e94 <__umoddi3+0x5b4>
   49bcc:	00800404 	movi	r2,16
   49bd0:	1009883a 	mov	r4,r2
   49bd4:	003f5a06 	br	49940 <__umoddi3+0x60>
   49bd8:	00803fc4 	movi	r2,255
   49bdc:	1400b036 	bltu	r2,r16,49ea0 <__umoddi3+0x5c0>
   49be0:	0005883a 	mov	r2,zero
   49be4:	0007883a 	mov	r3,zero
   49be8:	003fad06 	br	49aa0 <__umoddi3+0x1c0>
   49bec:	34c4d83a 	srl	r2,r6,r19
   49bf0:	3c0e983a 	sll	r7,r7,r16
   49bf4:	8cf8d83a 	srl	fp,r17,r19
   49bf8:	8c22983a 	sll	r17,r17,r16
   49bfc:	38a8b03a 	or	r20,r7,r2
   49c00:	a02ad43a 	srli	r21,r20,16
   49c04:	94c4d83a 	srl	r2,r18,r19
   49c08:	e009883a 	mov	r4,fp
   49c0c:	a80b883a 	mov	r5,r21
   49c10:	342c983a 	sll	r22,r6,r16
   49c14:	88a2b03a 	or	r17,r17,r2
   49c18:	004a7bc0 	call	4a7bc <__umodsi3>
   49c1c:	e009883a 	mov	r4,fp
   49c20:	a80b883a 	mov	r5,r21
   49c24:	a5ffffcc 	andi	r23,r20,65535
   49c28:	d8800215 	stw	r2,8(sp)
   49c2c:	004a7b40 	call	4a7b4 <__udivsi3>
   49c30:	1009883a 	mov	r4,r2
   49c34:	b80b883a 	mov	r5,r23
   49c38:	1039883a 	mov	fp,r2
   49c3c:	0041a580 	call	41a58 <__mulsi3>
   49c40:	d8c00217 	ldw	r3,8(sp)
   49c44:	1009883a 	mov	r4,r2
   49c48:	8804d43a 	srli	r2,r17,16
   49c4c:	1806943a 	slli	r3,r3,16
   49c50:	9424983a 	sll	r18,r18,r16
   49c54:	1886b03a 	or	r3,r3,r2
   49c58:	1900042e 	bgeu	r3,r4,49c6c <__umoddi3+0x38c>
   49c5c:	1d07883a 	add	r3,r3,r20
   49c60:	e0bfffc4 	addi	r2,fp,-1
   49c64:	1d009b2e 	bgeu	r3,r20,49ed4 <__umoddi3+0x5f4>
   49c68:	1039883a 	mov	fp,r2
   49c6c:	1907c83a 	sub	r3,r3,r4
   49c70:	1809883a 	mov	r4,r3
   49c74:	a80b883a 	mov	r5,r21
   49c78:	d8c00215 	stw	r3,8(sp)
   49c7c:	004a7bc0 	call	4a7bc <__umodsi3>
   49c80:	d8c00217 	ldw	r3,8(sp)
   49c84:	a80b883a 	mov	r5,r21
   49c88:	d8800015 	stw	r2,0(sp)
   49c8c:	1809883a 	mov	r4,r3
   49c90:	004a7b40 	call	4a7b4 <__udivsi3>
   49c94:	1009883a 	mov	r4,r2
   49c98:	b80b883a 	mov	r5,r23
   49c9c:	102b883a 	mov	r21,r2
   49ca0:	0041a580 	call	41a58 <__mulsi3>
   49ca4:	d9c00017 	ldw	r7,0(sp)
   49ca8:	8c7fffcc 	andi	r17,r17,65535
   49cac:	380e943a 	slli	r7,r7,16
   49cb0:	3c4eb03a 	or	r7,r7,r17
   49cb4:	3880042e 	bgeu	r7,r2,49cc8 <__umoddi3+0x3e8>
   49cb8:	3d0f883a 	add	r7,r7,r20
   49cbc:	a8ffffc4 	addi	r3,r21,-1
   49cc0:	3d00802e 	bgeu	r7,r20,49ec4 <__umoddi3+0x5e4>
   49cc4:	182b883a 	mov	r21,r3
   49cc8:	e038943a 	slli	fp,fp,16
   49ccc:	b010d43a 	srli	r8,r22,16
   49cd0:	b1bfffcc 	andi	r6,r22,65535
   49cd4:	af2ab03a 	or	r21,r21,fp
   49cd8:	a82ed43a 	srli	r23,r21,16
   49cdc:	ad7fffcc 	andi	r21,r21,65535
   49ce0:	300b883a 	mov	r5,r6
   49ce4:	a809883a 	mov	r4,r21
   49ce8:	38a3c83a 	sub	r17,r7,r2
   49cec:	d9800115 	stw	r6,4(sp)
   49cf0:	da000015 	stw	r8,0(sp)
   49cf4:	0041a580 	call	41a58 <__mulsi3>
   49cf8:	da000017 	ldw	r8,0(sp)
   49cfc:	a809883a 	mov	r4,r21
   49d00:	1039883a 	mov	fp,r2
   49d04:	400b883a 	mov	r5,r8
   49d08:	da000215 	stw	r8,8(sp)
   49d0c:	0041a580 	call	41a58 <__mulsi3>
   49d10:	d9800117 	ldw	r6,4(sp)
   49d14:	b809883a 	mov	r4,r23
   49d18:	d8800015 	stw	r2,0(sp)
   49d1c:	300b883a 	mov	r5,r6
   49d20:	0041a580 	call	41a58 <__mulsi3>
   49d24:	d8c00217 	ldw	r3,8(sp)
   49d28:	b809883a 	mov	r4,r23
   49d2c:	102b883a 	mov	r21,r2
   49d30:	180b883a 	mov	r5,r3
   49d34:	0041a580 	call	41a58 <__mulsi3>
   49d38:	d9c00017 	ldw	r7,0(sp)
   49d3c:	1007883a 	mov	r3,r2
   49d40:	e004d43a 	srli	r2,fp,16
   49d44:	a9c9883a 	add	r4,r21,r7
   49d48:	2089883a 	add	r4,r4,r2
   49d4c:	2540022e 	bgeu	r4,r21,49d58 <__umoddi3+0x478>
   49d50:	00800074 	movhi	r2,1
   49d54:	1887883a 	add	r3,r3,r2
   49d58:	2004d43a 	srli	r2,r4,16
   49d5c:	2008943a 	slli	r4,r4,16
   49d60:	e73fffcc 	andi	fp,fp,65535
   49d64:	1887883a 	add	r3,r3,r2
   49d68:	2709883a 	add	r4,r4,fp
   49d6c:	88c03d36 	bltu	r17,r3,49e64 <__umoddi3+0x584>
   49d70:	88c06126 	beq	r17,r3,49ef8 <__umoddi3+0x618>
   49d74:	88c7c83a 	sub	r3,r17,r3
   49d78:	202d883a 	mov	r22,r4
   49d7c:	95adc83a 	sub	r22,r18,r22
   49d80:	95a5803a 	cmpltu	r18,r18,r22
   49d84:	1c87c83a 	sub	r3,r3,r18
   49d88:	1cc4983a 	sll	r2,r3,r19
   49d8c:	b42cd83a 	srl	r22,r22,r16
   49d90:	1c06d83a 	srl	r3,r3,r16
   49d94:	1584b03a 	or	r2,r2,r22
   49d98:	003f7806 	br	49b7c <__umoddi3+0x29c>
   49d9c:	002b883a 	mov	r21,zero
   49da0:	003ef506 	br	49978 <__umoddi3+0x98>
   49da4:	8560983a 	sll	r16,r16,r21
   49da8:	88e6d83a 	srl	r19,r17,r3
   49dac:	90c6d83a 	srl	r3,r18,r3
   49db0:	8028d43a 	srli	r20,r16,16
   49db4:	8d62983a 	sll	r17,r17,r21
   49db8:	9809883a 	mov	r4,r19
   49dbc:	a00b883a 	mov	r5,r20
   49dc0:	88eeb03a 	or	r23,r17,r3
   49dc4:	004a7bc0 	call	4a7bc <__umodsi3>
   49dc8:	9809883a 	mov	r4,r19
   49dcc:	a00b883a 	mov	r5,r20
   49dd0:	1023883a 	mov	r17,r2
   49dd4:	85bfffcc 	andi	r22,r16,65535
   49dd8:	004a7b40 	call	4a7b4 <__udivsi3>
   49ddc:	1009883a 	mov	r4,r2
   49de0:	b00b883a 	mov	r5,r22
   49de4:	0041a580 	call	41a58 <__mulsi3>
   49de8:	1007883a 	mov	r3,r2
   49dec:	8808943a 	slli	r4,r17,16
   49df0:	b804d43a 	srli	r2,r23,16
   49df4:	9566983a 	sll	r19,r18,r21
   49df8:	2088b03a 	or	r4,r4,r2
   49dfc:	20c0042e 	bgeu	r4,r3,49e10 <__umoddi3+0x530>
   49e00:	2409883a 	add	r4,r4,r16
   49e04:	24000236 	bltu	r4,r16,49e10 <__umoddi3+0x530>
   49e08:	20c0012e 	bgeu	r4,r3,49e10 <__umoddi3+0x530>
   49e0c:	2409883a 	add	r4,r4,r16
   49e10:	20e5c83a 	sub	r18,r4,r3
   49e14:	9009883a 	mov	r4,r18
   49e18:	a00b883a 	mov	r5,r20
   49e1c:	004a7bc0 	call	4a7bc <__umodsi3>
   49e20:	1023883a 	mov	r17,r2
   49e24:	9009883a 	mov	r4,r18
   49e28:	a00b883a 	mov	r5,r20
   49e2c:	8822943a 	slli	r17,r17,16
   49e30:	004a7b40 	call	4a7b4 <__udivsi3>
   49e34:	1009883a 	mov	r4,r2
   49e38:	b00b883a 	mov	r5,r22
   49e3c:	bdffffcc 	andi	r23,r23,65535
   49e40:	0041a580 	call	41a58 <__mulsi3>
   49e44:	8de2b03a 	or	r17,r17,r23
   49e48:	8880042e 	bgeu	r17,r2,49e5c <__umoddi3+0x57c>
   49e4c:	8c23883a 	add	r17,r17,r16
   49e50:	8c000236 	bltu	r17,r16,49e5c <__umoddi3+0x57c>
   49e54:	8880012e 	bgeu	r17,r2,49e5c <__umoddi3+0x57c>
   49e58:	8c23883a 	add	r17,r17,r16
   49e5c:	88a3c83a 	sub	r17,r17,r2
   49e60:	003f1b06 	br	49ad0 <__umoddi3+0x1f0>
   49e64:	25adc83a 	sub	r22,r4,r22
   49e68:	1d07c83a 	sub	r3,r3,r20
   49e6c:	2589803a 	cmpltu	r4,r4,r22
   49e70:	1907c83a 	sub	r3,r3,r4
   49e74:	88c7c83a 	sub	r3,r17,r3
   49e78:	003fc006 	br	49d7c <__umoddi3+0x49c>
   49e7c:	00c00204 	movi	r3,8
   49e80:	1827883a 	mov	r19,r3
   49e84:	003ee906 	br	49a2c <__umoddi3+0x14c>
   49e88:	00c00604 	movi	r3,24
   49e8c:	1827883a 	mov	r19,r3
   49e90:	003ee606 	br	49a2c <__umoddi3+0x14c>
   49e94:	00800604 	movi	r2,24
   49e98:	1009883a 	mov	r4,r2
   49e9c:	003ea806 	br	49940 <__umoddi3+0x60>
   49ea0:	00800204 	movi	r2,8
   49ea4:	1007883a 	mov	r3,r2
   49ea8:	003efd06 	br	49aa0 <__umoddi3+0x1c0>
   49eac:	00800604 	movi	r2,24
   49eb0:	1007883a 	mov	r3,r2
   49eb4:	003efa06 	br	49aa0 <__umoddi3+0x1c0>
   49eb8:	00800204 	movi	r2,8
   49ebc:	1009883a 	mov	r4,r2
   49ec0:	003e9f06 	br	49940 <__umoddi3+0x60>
   49ec4:	38bf7f2e 	bgeu	r7,r2,49cc4 <__umoddi3+0x3e4>
   49ec8:	ad7fff84 	addi	r21,r21,-2
   49ecc:	3d0f883a 	add	r7,r7,r20
   49ed0:	003f7d06 	br	49cc8 <__umoddi3+0x3e8>
   49ed4:	193f642e 	bgeu	r3,r4,49c68 <__umoddi3+0x388>
   49ed8:	e73fff84 	addi	fp,fp,-2
   49edc:	1d07883a 	add	r3,r3,r20
   49ee0:	003f6206 	br	49c6c <__umoddi3+0x38c>
   49ee4:	1c07883a 	add	r3,r3,r16
   49ee8:	003f0b06 	br	49b18 <__umoddi3+0x238>
   49eec:	9005883a 	mov	r2,r18
   49ef0:	a007883a 	mov	r3,r20
   49ef4:	003f2106 	br	49b7c <__umoddi3+0x29c>
   49ef8:	913fda36 	bltu	r18,r4,49e64 <__umoddi3+0x584>
   49efc:	202d883a 	mov	r22,r4
   49f00:	0007883a 	mov	r3,zero
   49f04:	003f9d06 	br	49d7c <__umoddi3+0x49c>

00049f08 <_fpadd_parts>:
   49f08:	2005883a 	mov	r2,r4
   49f0c:	21000017 	ldw	r4,0(r4)
   49f10:	01c00044 	movi	r7,1
   49f14:	3900622e 	bgeu	r7,r4,4a0a0 <_fpadd_parts+0x198>
   49f18:	28c00017 	ldw	r3,0(r5)
   49f1c:	38c05f2e 	bgeu	r7,r3,4a09c <_fpadd_parts+0x194>
   49f20:	01c00104 	movi	r7,4
   49f24:	21c0c626 	beq	r4,r7,4a240 <_fpadd_parts+0x338>
   49f28:	19c05c26 	beq	r3,r7,4a09c <_fpadd_parts+0x194>
   49f2c:	01c00084 	movi	r7,2
   49f30:	19c06b26 	beq	r3,r7,4a0e0 <_fpadd_parts+0x1d8>
   49f34:	21c05926 	beq	r4,r7,4a09c <_fpadd_parts+0x194>
   49f38:	11c00217 	ldw	r7,8(r2)
   49f3c:	2ac00217 	ldw	r11,8(r5)
   49f40:	13000317 	ldw	r12,12(r2)
   49f44:	13400417 	ldw	r13,16(r2)
   49f48:	3ac9c83a 	sub	r4,r7,r11
   49f4c:	2a000317 	ldw	r8,12(r5)
   49f50:	2a400417 	ldw	r9,16(r5)
   49f54:	2015883a 	mov	r10,r4
   49f58:	20007516 	blt	r4,zero,4a130 <_fpadd_parts+0x228>
   49f5c:	00c00fc4 	movi	r3,63
   49f60:	1a805016 	blt	r3,r10,4a0a4 <_fpadd_parts+0x19c>
   49f64:	0100870e 	bge	zero,r4,4a184 <_fpadd_parts+0x27c>
   49f68:	50fff804 	addi	r3,r10,-32
   49f6c:	18009916 	blt	r3,zero,4a1d4 <_fpadd_parts+0x2cc>
   49f70:	48d6d83a 	srl	r11,r9,r3
   49f74:	001d883a 	mov	r14,zero
   49f78:	18009e16 	blt	r3,zero,4a1f4 <_fpadd_parts+0x2ec>
   49f7c:	01000044 	movi	r4,1
   49f80:	20c6983a 	sll	r3,r4,r3
   49f84:	0015883a 	mov	r10,zero
   49f88:	513fffc4 	addi	r4,r10,-1
   49f8c:	2295403a 	cmpgeu	r10,r4,r10
   49f90:	1a87c83a 	sub	r3,r3,r10
   49f94:	1a52703a 	and	r9,r3,r9
   49f98:	2210703a 	and	r8,r4,r8
   49f9c:	4250b03a 	or	r8,r8,r9
   49fa0:	4010c03a 	cmpne	r8,r8,zero
   49fa4:	42d0b03a 	or	r8,r8,r11
   49fa8:	7013883a 	mov	r9,r14
   49fac:	11000117 	ldw	r4,4(r2)
   49fb0:	28800117 	ldw	r2,4(r5)
   49fb4:	20804126 	beq	r4,r2,4a0bc <_fpadd_parts+0x1b4>
   49fb8:	20006326 	beq	r4,zero,4a148 <_fpadd_parts+0x240>
   49fbc:	4305c83a 	sub	r2,r8,r12
   49fc0:	4091803a 	cmpltu	r8,r8,r2
   49fc4:	4b47c83a 	sub	r3,r9,r13
   49fc8:	1a07c83a 	sub	r3,r3,r8
   49fcc:	18006316 	blt	r3,zero,4a15c <_fpadd_parts+0x254>
   49fd0:	30000115 	stw	zero,4(r6)
   49fd4:	31c00215 	stw	r7,8(r6)
   49fd8:	30800315 	stw	r2,12(r6)
   49fdc:	30c00415 	stw	r3,16(r6)
   49fe0:	11ffffc4 	addi	r7,r2,-1
   49fe4:	388b403a 	cmpgeu	r5,r7,r2
   49fe8:	194bc83a 	sub	r5,r3,r5
   49fec:	01040034 	movhi	r4,4096
   49ff0:	213fffc4 	addi	r4,r4,-1
   49ff4:	21401736 	bltu	r4,r5,4a054 <_fpadd_parts+0x14c>
   49ff8:	29008226 	beq	r5,r4,4a204 <_fpadd_parts+0x2fc>
   49ffc:	31400217 	ldw	r5,8(r6)
   4a000:	02840034 	movhi	r10,4096
   4a004:	52bfffc4 	addi	r10,r10,-1
   4a008:	033fff84 	movi	r12,-2
   4a00c:	297fffc4 	addi	r5,r5,-1
   4a010:	00000106 	br	4a018 <_fpadd_parts+0x110>
   4a014:	3a804a26 	beq	r7,r10,4a140 <_fpadd_parts+0x238>
   4a018:	1089883a 	add	r4,r2,r2
   4a01c:	2091803a 	cmpltu	r8,r4,r2
   4a020:	18c7883a 	add	r3,r3,r3
   4a024:	227fffc4 	addi	r9,r4,-1
   4a028:	40d1883a 	add	r8,r8,r3
   4a02c:	490f403a 	cmpgeu	r7,r9,r4
   4a030:	41cfc83a 	sub	r7,r8,r7
   4a034:	2817883a 	mov	r11,r5
   4a038:	2005883a 	mov	r2,r4
   4a03c:	4007883a 	mov	r3,r8
   4a040:	297fffc4 	addi	r5,r5,-1
   4a044:	51fff32e 	bgeu	r10,r7,4a014 <_fpadd_parts+0x10c>
   4a048:	31000315 	stw	r4,12(r6)
   4a04c:	32000415 	stw	r8,16(r6)
   4a050:	32c00215 	stw	r11,8(r6)
   4a054:	010000c4 	movi	r4,3
   4a058:	31000015 	stw	r4,0(r6)
   4a05c:	01080034 	movhi	r4,8192
   4a060:	213fffc4 	addi	r4,r4,-1
   4a064:	20c00b2e 	bgeu	r4,r3,4a094 <_fpadd_parts+0x18c>
   4a068:	180e97fa 	slli	r7,r3,31
   4a06c:	1008d07a 	srli	r4,r2,1
   4a070:	31400217 	ldw	r5,8(r6)
   4a074:	1806d07a 	srli	r3,r3,1
   4a078:	1080004c 	andi	r2,r2,1
   4a07c:	3908b03a 	or	r4,r7,r4
   4a080:	1108b03a 	or	r4,r2,r4
   4a084:	29400044 	addi	r5,r5,1
   4a088:	31000315 	stw	r4,12(r6)
   4a08c:	30c00415 	stw	r3,16(r6)
   4a090:	31400215 	stw	r5,8(r6)
   4a094:	3005883a 	mov	r2,r6
   4a098:	f800283a 	ret
   4a09c:	2805883a 	mov	r2,r5
   4a0a0:	f800283a 	ret
   4a0a4:	59c01e0e 	bge	r11,r7,4a120 <_fpadd_parts+0x218>
   4a0a8:	11000117 	ldw	r4,4(r2)
   4a0ac:	28800117 	ldw	r2,4(r5)
   4a0b0:	0011883a 	mov	r8,zero
   4a0b4:	0013883a 	mov	r9,zero
   4a0b8:	20bfbf1e 	bne	r4,r2,49fb8 <_fpadd_parts+0xb0>
   4a0bc:	4305883a 	add	r2,r8,r12
   4a0c0:	1207803a 	cmpltu	r3,r2,r8
   4a0c4:	4b53883a 	add	r9,r9,r13
   4a0c8:	1a47883a 	add	r3,r3,r9
   4a0cc:	31000115 	stw	r4,4(r6)
   4a0d0:	31c00215 	stw	r7,8(r6)
   4a0d4:	30800315 	stw	r2,12(r6)
   4a0d8:	30c00415 	stw	r3,16(r6)
   4a0dc:	003fdd06 	br	4a054 <_fpadd_parts+0x14c>
   4a0e0:	20ffef1e 	bne	r4,r3,4a0a0 <_fpadd_parts+0x198>
   4a0e4:	31000015 	stw	r4,0(r6)
   4a0e8:	10c00117 	ldw	r3,4(r2)
   4a0ec:	30c00115 	stw	r3,4(r6)
   4a0f0:	10c00217 	ldw	r3,8(r2)
   4a0f4:	11000117 	ldw	r4,4(r2)
   4a0f8:	29400117 	ldw	r5,4(r5)
   4a0fc:	30c00215 	stw	r3,8(r6)
   4a100:	10c00317 	ldw	r3,12(r2)
   4a104:	2908703a 	and	r4,r5,r4
   4a108:	30c00315 	stw	r3,12(r6)
   4a10c:	10c00417 	ldw	r3,16(r2)
   4a110:	31000115 	stw	r4,4(r6)
   4a114:	3005883a 	mov	r2,r6
   4a118:	30c00415 	stw	r3,16(r6)
   4a11c:	f800283a 	ret
   4a120:	580f883a 	mov	r7,r11
   4a124:	0019883a 	mov	r12,zero
   4a128:	001b883a 	mov	r13,zero
   4a12c:	003f9f06 	br	49fac <_fpadd_parts+0xa4>
   4a130:	0115c83a 	sub	r10,zero,r4
   4a134:	00c00fc4 	movi	r3,63
   4a138:	1abfda16 	blt	r3,r10,4a0a4 <_fpadd_parts+0x19c>
   4a13c:	003f8906 	br	49f64 <_fpadd_parts+0x5c>
   4a140:	627fb52e 	bgeu	r12,r9,4a018 <_fpadd_parts+0x110>
   4a144:	003fc006 	br	4a048 <_fpadd_parts+0x140>
   4a148:	6205c83a 	sub	r2,r12,r8
   4a14c:	6099803a 	cmpltu	r12,r12,r2
   4a150:	6a47c83a 	sub	r3,r13,r9
   4a154:	1b07c83a 	sub	r3,r3,r12
   4a158:	183f9d0e 	bge	r3,zero,49fd0 <_fpadd_parts+0xc8>
   4a15c:	0085c83a 	sub	r2,zero,r2
   4a160:	1008c03a 	cmpne	r4,r2,zero
   4a164:	00c7c83a 	sub	r3,zero,r3
   4a168:	1907c83a 	sub	r3,r3,r4
   4a16c:	01000044 	movi	r4,1
   4a170:	31000115 	stw	r4,4(r6)
   4a174:	31c00215 	stw	r7,8(r6)
   4a178:	30800315 	stw	r2,12(r6)
   4a17c:	30c00415 	stw	r3,16(r6)
   4a180:	003f9706 	br	49fe0 <_fpadd_parts+0xd8>
   4a184:	203f8926 	beq	r4,zero,49fac <_fpadd_parts+0xa4>
   4a188:	50fff804 	addi	r3,r10,-32
   4a18c:	3a8f883a 	add	r7,r7,r10
   4a190:	18002316 	blt	r3,zero,4a220 <_fpadd_parts+0x318>
   4a194:	68d6d83a 	srl	r11,r13,r3
   4a198:	001d883a 	mov	r14,zero
   4a19c:	18001c16 	blt	r3,zero,4a210 <_fpadd_parts+0x308>
   4a1a0:	01000044 	movi	r4,1
   4a1a4:	20c6983a 	sll	r3,r4,r3
   4a1a8:	0015883a 	mov	r10,zero
   4a1ac:	513fffc4 	addi	r4,r10,-1
   4a1b0:	2295403a 	cmpgeu	r10,r4,r10
   4a1b4:	1a87c83a 	sub	r3,r3,r10
   4a1b8:	1b5a703a 	and	r13,r3,r13
   4a1bc:	2318703a 	and	r12,r4,r12
   4a1c0:	6358b03a 	or	r12,r12,r13
   4a1c4:	6018c03a 	cmpne	r12,r12,zero
   4a1c8:	62d8b03a 	or	r12,r12,r11
   4a1cc:	701b883a 	mov	r13,r14
   4a1d0:	003f7606 	br	49fac <_fpadd_parts+0xa4>
   4a1d4:	4808907a 	slli	r4,r9,1
   4a1d8:	02c007c4 	movi	r11,31
   4a1dc:	5a97c83a 	sub	r11,r11,r10
   4a1e0:	22c8983a 	sll	r4,r4,r11
   4a1e4:	4296d83a 	srl	r11,r8,r10
   4a1e8:	4a9cd83a 	srl	r14,r9,r10
   4a1ec:	22d6b03a 	or	r11,r4,r11
   4a1f0:	003f6106 	br	49f78 <_fpadd_parts+0x70>
   4a1f4:	00c00044 	movi	r3,1
   4a1f8:	1a94983a 	sll	r10,r3,r10
   4a1fc:	0007883a 	mov	r3,zero
   4a200:	003f6106 	br	49f88 <_fpadd_parts+0x80>
   4a204:	013fff84 	movi	r4,-2
   4a208:	21ff7c2e 	bgeu	r4,r7,49ffc <_fpadd_parts+0xf4>
   4a20c:	003f9106 	br	4a054 <_fpadd_parts+0x14c>
   4a210:	00c00044 	movi	r3,1
   4a214:	1a94983a 	sll	r10,r3,r10
   4a218:	0007883a 	mov	r3,zero
   4a21c:	003fe306 	br	4a1ac <_fpadd_parts+0x2a4>
   4a220:	6816907a 	slli	r11,r13,1
   4a224:	010007c4 	movi	r4,31
   4a228:	2289c83a 	sub	r4,r4,r10
   4a22c:	5908983a 	sll	r4,r11,r4
   4a230:	6296d83a 	srl	r11,r12,r10
   4a234:	6a9cd83a 	srl	r14,r13,r10
   4a238:	22d6b03a 	or	r11,r4,r11
   4a23c:	003fd706 	br	4a19c <_fpadd_parts+0x294>
   4a240:	193f971e 	bne	r3,r4,4a0a0 <_fpadd_parts+0x198>
   4a244:	11000117 	ldw	r4,4(r2)
   4a248:	28c00117 	ldw	r3,4(r5)
   4a24c:	20ff9426 	beq	r4,r3,4a0a0 <_fpadd_parts+0x198>
   4a250:	00800174 	movhi	r2,5
   4a254:	10b5af04 	addi	r2,r2,-10564
   4a258:	f800283a 	ret

0004a25c <__adddf3>:
   4a25c:	deffec04 	addi	sp,sp,-80
   4a260:	d9001115 	stw	r4,68(sp)
   4a264:	d9401215 	stw	r5,72(sp)
   4a268:	d9001104 	addi	r4,sp,68
   4a26c:	d9400a04 	addi	r5,sp,40
   4a270:	dfc01315 	stw	ra,76(sp)
   4a274:	d9c01015 	stw	r7,64(sp)
   4a278:	d9800f15 	stw	r6,60(sp)
   4a27c:	00419540 	call	41954 <__unpack_d>
   4a280:	d9000f04 	addi	r4,sp,60
   4a284:	d9400504 	addi	r5,sp,20
   4a288:	00419540 	call	41954 <__unpack_d>
   4a28c:	d9000a04 	addi	r4,sp,40
   4a290:	d9400504 	addi	r5,sp,20
   4a294:	d80d883a 	mov	r6,sp
   4a298:	0049f080 	call	49f08 <_fpadd_parts>
   4a29c:	1009883a 	mov	r4,r2
   4a2a0:	00417300 	call	41730 <__pack_d>
   4a2a4:	dfc01317 	ldw	ra,76(sp)
   4a2a8:	dec01404 	addi	sp,sp,80
   4a2ac:	f800283a 	ret

0004a2b0 <__subdf3>:
   4a2b0:	deffec04 	addi	sp,sp,-80
   4a2b4:	d9001115 	stw	r4,68(sp)
   4a2b8:	d9401215 	stw	r5,72(sp)
   4a2bc:	d9001104 	addi	r4,sp,68
   4a2c0:	d9400a04 	addi	r5,sp,40
   4a2c4:	dfc01315 	stw	ra,76(sp)
   4a2c8:	d9c01015 	stw	r7,64(sp)
   4a2cc:	d9800f15 	stw	r6,60(sp)
   4a2d0:	00419540 	call	41954 <__unpack_d>
   4a2d4:	d9000f04 	addi	r4,sp,60
   4a2d8:	d9400504 	addi	r5,sp,20
   4a2dc:	00419540 	call	41954 <__unpack_d>
   4a2e0:	d8800617 	ldw	r2,24(sp)
   4a2e4:	d9000a04 	addi	r4,sp,40
   4a2e8:	d9400504 	addi	r5,sp,20
   4a2ec:	d80d883a 	mov	r6,sp
   4a2f0:	1080005c 	xori	r2,r2,1
   4a2f4:	d8800615 	stw	r2,24(sp)
   4a2f8:	0049f080 	call	49f08 <_fpadd_parts>
   4a2fc:	1009883a 	mov	r4,r2
   4a300:	00417300 	call	41730 <__pack_d>
   4a304:	dfc01317 	ldw	ra,76(sp)
   4a308:	dec01404 	addi	sp,sp,80
   4a30c:	f800283a 	ret

0004a310 <__eqdf2>:
   4a310:	defff104 	addi	sp,sp,-60
   4a314:	d9000c15 	stw	r4,48(sp)
   4a318:	d9400d15 	stw	r5,52(sp)
   4a31c:	d9000c04 	addi	r4,sp,48
   4a320:	d9400504 	addi	r5,sp,20
   4a324:	dfc00e15 	stw	ra,56(sp)
   4a328:	d9800a15 	stw	r6,40(sp)
   4a32c:	d9c00b15 	stw	r7,44(sp)
   4a330:	00419540 	call	41954 <__unpack_d>
   4a334:	d9000a04 	addi	r4,sp,40
   4a338:	d80b883a 	mov	r5,sp
   4a33c:	00419540 	call	41954 <__unpack_d>
   4a340:	d8c00517 	ldw	r3,20(sp)
   4a344:	00800044 	movi	r2,1
   4a348:	10c0052e 	bgeu	r2,r3,4a360 <__eqdf2+0x50>
   4a34c:	d8c00017 	ldw	r3,0(sp)
   4a350:	10c0032e 	bgeu	r2,r3,4a360 <__eqdf2+0x50>
   4a354:	d9000504 	addi	r4,sp,20
   4a358:	d80b883a 	mov	r5,sp
   4a35c:	004a7c40 	call	4a7c4 <__fpcmp_parts_d>
   4a360:	dfc00e17 	ldw	ra,56(sp)
   4a364:	dec00f04 	addi	sp,sp,60
   4a368:	f800283a 	ret

0004a36c <__nedf2>:
   4a36c:	defff104 	addi	sp,sp,-60
   4a370:	d9000c15 	stw	r4,48(sp)
   4a374:	d9400d15 	stw	r5,52(sp)
   4a378:	d9000c04 	addi	r4,sp,48
   4a37c:	d9400504 	addi	r5,sp,20
   4a380:	dfc00e15 	stw	ra,56(sp)
   4a384:	d9800a15 	stw	r6,40(sp)
   4a388:	d9c00b15 	stw	r7,44(sp)
   4a38c:	00419540 	call	41954 <__unpack_d>
   4a390:	d9000a04 	addi	r4,sp,40
   4a394:	d80b883a 	mov	r5,sp
   4a398:	00419540 	call	41954 <__unpack_d>
   4a39c:	d8c00517 	ldw	r3,20(sp)
   4a3a0:	00800044 	movi	r2,1
   4a3a4:	10c0052e 	bgeu	r2,r3,4a3bc <__nedf2+0x50>
   4a3a8:	d8c00017 	ldw	r3,0(sp)
   4a3ac:	10c0032e 	bgeu	r2,r3,4a3bc <__nedf2+0x50>
   4a3b0:	d9000504 	addi	r4,sp,20
   4a3b4:	d80b883a 	mov	r5,sp
   4a3b8:	004a7c40 	call	4a7c4 <__fpcmp_parts_d>
   4a3bc:	dfc00e17 	ldw	ra,56(sp)
   4a3c0:	dec00f04 	addi	sp,sp,60
   4a3c4:	f800283a 	ret

0004a3c8 <__gtdf2>:
   4a3c8:	defff104 	addi	sp,sp,-60
   4a3cc:	d9000c15 	stw	r4,48(sp)
   4a3d0:	d9400d15 	stw	r5,52(sp)
   4a3d4:	d9000c04 	addi	r4,sp,48
   4a3d8:	d9400504 	addi	r5,sp,20
   4a3dc:	dfc00e15 	stw	ra,56(sp)
   4a3e0:	d9800a15 	stw	r6,40(sp)
   4a3e4:	d9c00b15 	stw	r7,44(sp)
   4a3e8:	00419540 	call	41954 <__unpack_d>
   4a3ec:	d9000a04 	addi	r4,sp,40
   4a3f0:	d80b883a 	mov	r5,sp
   4a3f4:	00419540 	call	41954 <__unpack_d>
   4a3f8:	d8c00517 	ldw	r3,20(sp)
   4a3fc:	00800044 	movi	r2,1
   4a400:	10c0082e 	bgeu	r2,r3,4a424 <__gtdf2+0x5c>
   4a404:	d8c00017 	ldw	r3,0(sp)
   4a408:	10c0062e 	bgeu	r2,r3,4a424 <__gtdf2+0x5c>
   4a40c:	d9000504 	addi	r4,sp,20
   4a410:	d80b883a 	mov	r5,sp
   4a414:	004a7c40 	call	4a7c4 <__fpcmp_parts_d>
   4a418:	dfc00e17 	ldw	ra,56(sp)
   4a41c:	dec00f04 	addi	sp,sp,60
   4a420:	f800283a 	ret
   4a424:	00bfffc4 	movi	r2,-1
   4a428:	003ffb06 	br	4a418 <__gtdf2+0x50>

0004a42c <__gedf2>:
   4a42c:	defff104 	addi	sp,sp,-60
   4a430:	d9000c15 	stw	r4,48(sp)
   4a434:	d9400d15 	stw	r5,52(sp)
   4a438:	d9000c04 	addi	r4,sp,48
   4a43c:	d9400504 	addi	r5,sp,20
   4a440:	dfc00e15 	stw	ra,56(sp)
   4a444:	d9800a15 	stw	r6,40(sp)
   4a448:	d9c00b15 	stw	r7,44(sp)
   4a44c:	00419540 	call	41954 <__unpack_d>
   4a450:	d9000a04 	addi	r4,sp,40
   4a454:	d80b883a 	mov	r5,sp
   4a458:	00419540 	call	41954 <__unpack_d>
   4a45c:	d8c00517 	ldw	r3,20(sp)
   4a460:	00800044 	movi	r2,1
   4a464:	10c0082e 	bgeu	r2,r3,4a488 <__gedf2+0x5c>
   4a468:	d8c00017 	ldw	r3,0(sp)
   4a46c:	10c0062e 	bgeu	r2,r3,4a488 <__gedf2+0x5c>
   4a470:	d9000504 	addi	r4,sp,20
   4a474:	d80b883a 	mov	r5,sp
   4a478:	004a7c40 	call	4a7c4 <__fpcmp_parts_d>
   4a47c:	dfc00e17 	ldw	ra,56(sp)
   4a480:	dec00f04 	addi	sp,sp,60
   4a484:	f800283a 	ret
   4a488:	00bfffc4 	movi	r2,-1
   4a48c:	003ffb06 	br	4a47c <__gedf2+0x50>

0004a490 <__ltdf2>:
   4a490:	defff104 	addi	sp,sp,-60
   4a494:	d9000c15 	stw	r4,48(sp)
   4a498:	d9400d15 	stw	r5,52(sp)
   4a49c:	d9000c04 	addi	r4,sp,48
   4a4a0:	d9400504 	addi	r5,sp,20
   4a4a4:	dfc00e15 	stw	ra,56(sp)
   4a4a8:	d9800a15 	stw	r6,40(sp)
   4a4ac:	d9c00b15 	stw	r7,44(sp)
   4a4b0:	00419540 	call	41954 <__unpack_d>
   4a4b4:	d9000a04 	addi	r4,sp,40
   4a4b8:	d80b883a 	mov	r5,sp
   4a4bc:	00419540 	call	41954 <__unpack_d>
   4a4c0:	d8c00517 	ldw	r3,20(sp)
   4a4c4:	00800044 	movi	r2,1
   4a4c8:	10c0052e 	bgeu	r2,r3,4a4e0 <__ltdf2+0x50>
   4a4cc:	d8c00017 	ldw	r3,0(sp)
   4a4d0:	10c0032e 	bgeu	r2,r3,4a4e0 <__ltdf2+0x50>
   4a4d4:	d9000504 	addi	r4,sp,20
   4a4d8:	d80b883a 	mov	r5,sp
   4a4dc:	004a7c40 	call	4a7c4 <__fpcmp_parts_d>
   4a4e0:	dfc00e17 	ldw	ra,56(sp)
   4a4e4:	dec00f04 	addi	sp,sp,60
   4a4e8:	f800283a 	ret

0004a4ec <__floatsidf>:
   4a4ec:	2004d7fa 	srli	r2,r4,31
   4a4f0:	defff904 	addi	sp,sp,-28
   4a4f4:	00c000c4 	movi	r3,3
   4a4f8:	dfc00615 	stw	ra,24(sp)
   4a4fc:	dc000515 	stw	r16,20(sp)
   4a500:	d8c00015 	stw	r3,0(sp)
   4a504:	d8800115 	stw	r2,4(sp)
   4a508:	2000081e 	bne	r4,zero,4a52c <__floatsidf+0x40>
   4a50c:	00800084 	movi	r2,2
   4a510:	d8800015 	stw	r2,0(sp)
   4a514:	d809883a 	mov	r4,sp
   4a518:	00417300 	call	41730 <__pack_d>
   4a51c:	dfc00617 	ldw	ra,24(sp)
   4a520:	dc000517 	ldw	r16,20(sp)
   4a524:	dec00704 	addi	sp,sp,28
   4a528:	f800283a 	ret
   4a52c:	00c00f04 	movi	r3,60
   4a530:	d8c00215 	stw	r3,8(sp)
   4a534:	10000f1e 	bne	r2,zero,4a574 <__floatsidf+0x88>
   4a538:	2021883a 	mov	r16,r4
   4a53c:	8009883a 	mov	r4,r16
   4a540:	00416840 	call	41684 <__clzsi2>
   4a544:	11000744 	addi	r4,r2,29
   4a548:	0100110e 	bge	zero,r4,4a590 <__floatsidf+0xa4>
   4a54c:	10ffff44 	addi	r3,r2,-3
   4a550:	18001216 	blt	r3,zero,4a59c <__floatsidf+0xb0>
   4a554:	80c6983a 	sll	r3,r16,r3
   4a558:	0009883a 	mov	r4,zero
   4a55c:	014007c4 	movi	r5,31
   4a560:	2885c83a 	sub	r2,r5,r2
   4a564:	d9000315 	stw	r4,12(sp)
   4a568:	d8c00415 	stw	r3,16(sp)
   4a56c:	d8800215 	stw	r2,8(sp)
   4a570:	003fe806 	br	4a514 <__floatsidf+0x28>
   4a574:	00a00034 	movhi	r2,32768
   4a578:	20800e26 	beq	r4,r2,4a5b4 <__floatsidf+0xc8>
   4a57c:	0121c83a 	sub	r16,zero,r4
   4a580:	8009883a 	mov	r4,r16
   4a584:	00416840 	call	41684 <__clzsi2>
   4a588:	11000744 	addi	r4,r2,29
   4a58c:	013fef16 	blt	zero,r4,4a54c <__floatsidf+0x60>
   4a590:	dc000315 	stw	r16,12(sp)
   4a594:	d8000415 	stw	zero,16(sp)
   4a598:	003fde06 	br	4a514 <__floatsidf+0x28>
   4a59c:	800ad07a 	srli	r5,r16,1
   4a5a0:	00c007c4 	movi	r3,31
   4a5a4:	1907c83a 	sub	r3,r3,r4
   4a5a8:	28c6d83a 	srl	r3,r5,r3
   4a5ac:	8108983a 	sll	r4,r16,r4
   4a5b0:	003fea06 	br	4a55c <__floatsidf+0x70>
   4a5b4:	0005883a 	mov	r2,zero
   4a5b8:	00f07834 	movhi	r3,49632
   4a5bc:	003fd706 	br	4a51c <__floatsidf+0x30>

0004a5c0 <__fixdfsi>:
   4a5c0:	defff804 	addi	sp,sp,-32
   4a5c4:	d9000515 	stw	r4,20(sp)
   4a5c8:	d9400615 	stw	r5,24(sp)
   4a5cc:	d9000504 	addi	r4,sp,20
   4a5d0:	d80b883a 	mov	r5,sp
   4a5d4:	dfc00715 	stw	ra,28(sp)
   4a5d8:	00419540 	call	41954 <__unpack_d>
   4a5dc:	d8800017 	ldw	r2,0(sp)
   4a5e0:	00c00084 	movi	r3,2
   4a5e4:	10c01c26 	beq	r2,r3,4a658 <__fixdfsi+0x98>
   4a5e8:	00c00044 	movi	r3,1
   4a5ec:	18801a2e 	bgeu	r3,r2,4a658 <__fixdfsi+0x98>
   4a5f0:	00c00104 	movi	r3,4
   4a5f4:	10c01126 	beq	r2,r3,4a63c <__fixdfsi+0x7c>
   4a5f8:	d8800217 	ldw	r2,8(sp)
   4a5fc:	10001616 	blt	r2,zero,4a658 <__fixdfsi+0x98>
   4a600:	00c00784 	movi	r3,30
   4a604:	18800d16 	blt	r3,r2,4a63c <__fixdfsi+0x7c>
   4a608:	00c00f04 	movi	r3,60
   4a60c:	1885c83a 	sub	r2,r3,r2
   4a610:	10fff804 	addi	r3,r2,-32
   4a614:	d9400317 	ldw	r5,12(sp)
   4a618:	d9000417 	ldw	r4,16(sp)
   4a61c:	18001616 	blt	r3,zero,4a678 <__fixdfsi+0xb8>
   4a620:	20c4d83a 	srl	r2,r4,r3
   4a624:	d8c00117 	ldw	r3,4(sp)
   4a628:	18000126 	beq	r3,zero,4a630 <__fixdfsi+0x70>
   4a62c:	0085c83a 	sub	r2,zero,r2
   4a630:	dfc00717 	ldw	ra,28(sp)
   4a634:	dec00804 	addi	sp,sp,32
   4a638:	f800283a 	ret
   4a63c:	d8800117 	ldw	r2,4(sp)
   4a640:	1000091e 	bne	r2,zero,4a668 <__fixdfsi+0xa8>
   4a644:	00a00034 	movhi	r2,32768
   4a648:	10bfffc4 	addi	r2,r2,-1
   4a64c:	dfc00717 	ldw	ra,28(sp)
   4a650:	dec00804 	addi	sp,sp,32
   4a654:	f800283a 	ret
   4a658:	0005883a 	mov	r2,zero
   4a65c:	dfc00717 	ldw	ra,28(sp)
   4a660:	dec00804 	addi	sp,sp,32
   4a664:	f800283a 	ret
   4a668:	00a00034 	movhi	r2,32768
   4a66c:	dfc00717 	ldw	ra,28(sp)
   4a670:	dec00804 	addi	sp,sp,32
   4a674:	f800283a 	ret
   4a678:	2008907a 	slli	r4,r4,1
   4a67c:	018007c4 	movi	r6,31
   4a680:	308dc83a 	sub	r6,r6,r2
   4a684:	2188983a 	sll	r4,r4,r6
   4a688:	2884d83a 	srl	r2,r5,r2
   4a68c:	2084b03a 	or	r2,r4,r2
   4a690:	003fe406 	br	4a624 <__fixdfsi+0x64>

0004a694 <udivmodsi4>:
   4a694:	2005883a 	mov	r2,r4
   4a698:	2900182e 	bgeu	r5,r4,4a6fc <udivmodsi4+0x68>
   4a69c:	28001716 	blt	r5,zero,4a6fc <udivmodsi4+0x68>
   4a6a0:	01000804 	movi	r4,32
   4a6a4:	00c00044 	movi	r3,1
   4a6a8:	00000206 	br	4a6b4 <udivmodsi4+0x20>
   4a6ac:	20001126 	beq	r4,zero,4a6f4 <udivmodsi4+0x60>
   4a6b0:	28000516 	blt	r5,zero,4a6c8 <udivmodsi4+0x34>
   4a6b4:	294b883a 	add	r5,r5,r5
   4a6b8:	213fffc4 	addi	r4,r4,-1
   4a6bc:	18c7883a 	add	r3,r3,r3
   4a6c0:	28bffa36 	bltu	r5,r2,4a6ac <udivmodsi4+0x18>
   4a6c4:	18000b26 	beq	r3,zero,4a6f4 <udivmodsi4+0x60>
   4a6c8:	0009883a 	mov	r4,zero
   4a6cc:	11400236 	bltu	r2,r5,4a6d8 <udivmodsi4+0x44>
   4a6d0:	1145c83a 	sub	r2,r2,r5
   4a6d4:	20c8b03a 	or	r4,r4,r3
   4a6d8:	1806d07a 	srli	r3,r3,1
   4a6dc:	280ad07a 	srli	r5,r5,1
   4a6e0:	183ffa1e 	bne	r3,zero,4a6cc <udivmodsi4+0x38>
   4a6e4:	3000021e 	bne	r6,zero,4a6f0 <udivmodsi4+0x5c>
   4a6e8:	2005883a 	mov	r2,r4
   4a6ec:	f800283a 	ret
   4a6f0:	f800283a 	ret
   4a6f4:	0009883a 	mov	r4,zero
   4a6f8:	003ffa06 	br	4a6e4 <udivmodsi4+0x50>
   4a6fc:	00c00044 	movi	r3,1
   4a700:	0009883a 	mov	r4,zero
   4a704:	003ff106 	br	4a6cc <udivmodsi4+0x38>

0004a708 <__divsi3>:
   4a708:	defffe04 	addi	sp,sp,-8
   4a70c:	dfc00115 	stw	ra,4(sp)
   4a710:	dc000015 	stw	r16,0(sp)
   4a714:	20000a16 	blt	r4,zero,4a740 <__divsi3+0x38>
   4a718:	0021883a 	mov	r16,zero
   4a71c:	28000b16 	blt	r5,zero,4a74c <__divsi3+0x44>
   4a720:	000d883a 	mov	r6,zero
   4a724:	004a6940 	call	4a694 <udivmodsi4>
   4a728:	80000126 	beq	r16,zero,4a730 <__divsi3+0x28>
   4a72c:	0085c83a 	sub	r2,zero,r2
   4a730:	dfc00117 	ldw	ra,4(sp)
   4a734:	dc000017 	ldw	r16,0(sp)
   4a738:	dec00204 	addi	sp,sp,8
   4a73c:	f800283a 	ret
   4a740:	0109c83a 	sub	r4,zero,r4
   4a744:	04000044 	movi	r16,1
   4a748:	283ff50e 	bge	r5,zero,4a720 <__divsi3+0x18>
   4a74c:	014bc83a 	sub	r5,zero,r5
   4a750:	8400005c 	xori	r16,r16,1
   4a754:	003ff206 	br	4a720 <__divsi3+0x18>

0004a758 <__modsi3>:
   4a758:	deffff04 	addi	sp,sp,-4
   4a75c:	dfc00015 	stw	ra,0(sp)
   4a760:	20000516 	blt	r4,zero,4a778 <__modsi3+0x20>
   4a764:	28000c16 	blt	r5,zero,4a798 <__modsi3+0x40>
   4a768:	01800044 	movi	r6,1
   4a76c:	dfc00017 	ldw	ra,0(sp)
   4a770:	dec00104 	addi	sp,sp,4
   4a774:	004a6941 	jmpi	4a694 <udivmodsi4>
   4a778:	0109c83a 	sub	r4,zero,r4
   4a77c:	28000b16 	blt	r5,zero,4a7ac <__modsi3+0x54>
   4a780:	01800044 	movi	r6,1
   4a784:	004a6940 	call	4a694 <udivmodsi4>
   4a788:	0085c83a 	sub	r2,zero,r2
   4a78c:	dfc00017 	ldw	ra,0(sp)
   4a790:	dec00104 	addi	sp,sp,4
   4a794:	f800283a 	ret
   4a798:	014bc83a 	sub	r5,zero,r5
   4a79c:	01800044 	movi	r6,1
   4a7a0:	dfc00017 	ldw	ra,0(sp)
   4a7a4:	dec00104 	addi	sp,sp,4
   4a7a8:	004a6941 	jmpi	4a694 <udivmodsi4>
   4a7ac:	014bc83a 	sub	r5,zero,r5
   4a7b0:	003ff306 	br	4a780 <__modsi3+0x28>

0004a7b4 <__udivsi3>:
   4a7b4:	000d883a 	mov	r6,zero
   4a7b8:	004a6941 	jmpi	4a694 <udivmodsi4>

0004a7bc <__umodsi3>:
   4a7bc:	01800044 	movi	r6,1
   4a7c0:	004a6941 	jmpi	4a694 <udivmodsi4>

0004a7c4 <__fpcmp_parts_d>:
   4a7c4:	20c00017 	ldw	r3,0(r4)
   4a7c8:	00800044 	movi	r2,1
   4a7cc:	10c0142e 	bgeu	r2,r3,4a820 <__fpcmp_parts_d+0x5c>
   4a7d0:	29800017 	ldw	r6,0(r5)
   4a7d4:	1180122e 	bgeu	r2,r6,4a820 <__fpcmp_parts_d+0x5c>
   4a7d8:	01c00104 	movi	r7,4
   4a7dc:	19c02826 	beq	r3,r7,4a880 <__fpcmp_parts_d+0xbc>
   4a7e0:	31c00926 	beq	r6,r7,4a808 <__fpcmp_parts_d+0x44>
   4a7e4:	01c00084 	movi	r7,2
   4a7e8:	19c00626 	beq	r3,r7,4a804 <__fpcmp_parts_d+0x40>
   4a7ec:	31c00a26 	beq	r6,r7,4a818 <__fpcmp_parts_d+0x54>
   4a7f0:	20c00117 	ldw	r3,4(r4)
   4a7f4:	29800117 	ldw	r6,4(r5)
   4a7f8:	19800b26 	beq	r3,r6,4a828 <__fpcmp_parts_d+0x64>
   4a7fc:	1800041e 	bne	r3,zero,4a810 <__fpcmp_parts_d+0x4c>
   4a800:	f800283a 	ret
   4a804:	30c01a26 	beq	r6,r3,4a870 <__fpcmp_parts_d+0xac>
   4a808:	28800117 	ldw	r2,4(r5)
   4a80c:	1000041e 	bne	r2,zero,4a820 <__fpcmp_parts_d+0x5c>
   4a810:	00bfffc4 	movi	r2,-1
   4a814:	f800283a 	ret
   4a818:	20800117 	ldw	r2,4(r4)
   4a81c:	103ffc1e 	bne	r2,zero,4a810 <__fpcmp_parts_d+0x4c>
   4a820:	00800044 	movi	r2,1
   4a824:	f800283a 	ret
   4a828:	21c00217 	ldw	r7,8(r4)
   4a82c:	29800217 	ldw	r6,8(r5)
   4a830:	31c0020e 	bge	r6,r7,4a83c <__fpcmp_parts_d+0x78>
   4a834:	183ff61e 	bne	r3,zero,4a810 <__fpcmp_parts_d+0x4c>
   4a838:	f800283a 	ret
   4a83c:	39800a16 	blt	r7,r6,4a868 <__fpcmp_parts_d+0xa4>
   4a840:	20800417 	ldw	r2,16(r4)
   4a844:	29800417 	ldw	r6,16(r5)
   4a848:	21c00317 	ldw	r7,12(r4)
   4a84c:	29000317 	ldw	r4,12(r5)
   4a850:	30800936 	bltu	r6,r2,4a878 <__fpcmp_parts_d+0xb4>
   4a854:	1180011e 	bne	r2,r6,4a85c <__fpcmp_parts_d+0x98>
   4a858:	21c00736 	bltu	r4,r7,4a878 <__fpcmp_parts_d+0xb4>
   4a85c:	11800236 	bltu	r2,r6,4a868 <__fpcmp_parts_d+0xa4>
   4a860:	3080031e 	bne	r6,r2,4a870 <__fpcmp_parts_d+0xac>
   4a864:	3900022e 	bgeu	r7,r4,4a870 <__fpcmp_parts_d+0xac>
   4a868:	183fe926 	beq	r3,zero,4a810 <__fpcmp_parts_d+0x4c>
   4a86c:	003fec06 	br	4a820 <__fpcmp_parts_d+0x5c>
   4a870:	0005883a 	mov	r2,zero
   4a874:	f800283a 	ret
   4a878:	183fe926 	beq	r3,zero,4a820 <__fpcmp_parts_d+0x5c>
   4a87c:	003fe406 	br	4a810 <__fpcmp_parts_d+0x4c>
   4a880:	30ffe51e 	bne	r6,r3,4a818 <__fpcmp_parts_d+0x54>
   4a884:	28c00117 	ldw	r3,4(r5)
   4a888:	20800117 	ldw	r2,4(r4)
   4a88c:	1885c83a 	sub	r2,r3,r2
   4a890:	f800283a 	ret

0004a894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a894:	defffe04 	addi	sp,sp,-8
   4a898:	dfc00115 	stw	ra,4(sp)
   4a89c:	df000015 	stw	fp,0(sp)
   4a8a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a8a4:	00800174 	movhi	r2,5
   4a8a8:	10bd0804 	addi	r2,r2,-3040
   4a8ac:	10800017 	ldw	r2,0(r2)
   4a8b0:	10000526 	beq	r2,zero,4a8c8 <alt_get_errno+0x34>
   4a8b4:	00800174 	movhi	r2,5
   4a8b8:	10bd0804 	addi	r2,r2,-3040
   4a8bc:	10800017 	ldw	r2,0(r2)
   4a8c0:	103ee83a 	callr	r2
   4a8c4:	00000206 	br	4a8d0 <alt_get_errno+0x3c>
   4a8c8:	00800174 	movhi	r2,5
   4a8cc:	1083a904 	addi	r2,r2,3748
}
   4a8d0:	e037883a 	mov	sp,fp
   4a8d4:	dfc00117 	ldw	ra,4(sp)
   4a8d8:	df000017 	ldw	fp,0(sp)
   4a8dc:	dec00204 	addi	sp,sp,8
   4a8e0:	f800283a 	ret

0004a8e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4a8e4:	defffb04 	addi	sp,sp,-20
   4a8e8:	dfc00415 	stw	ra,16(sp)
   4a8ec:	df000315 	stw	fp,12(sp)
   4a8f0:	df000304 	addi	fp,sp,12
   4a8f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4a8f8:	e0bfff17 	ldw	r2,-4(fp)
   4a8fc:	10000716 	blt	r2,zero,4a91c <close+0x38>
   4a900:	e13fff17 	ldw	r4,-4(fp)
   4a904:	01400304 	movi	r5,12
   4a908:	0041a580 	call	41a58 <__mulsi3>
   4a90c:	00c00174 	movhi	r3,5
   4a910:	18f88604 	addi	r3,r3,-7656
   4a914:	10c5883a 	add	r2,r2,r3
   4a918:	00000106 	br	4a920 <close+0x3c>
   4a91c:	0005883a 	mov	r2,zero
   4a920:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4a924:	e0bffd17 	ldw	r2,-12(fp)
   4a928:	10001826 	beq	r2,zero,4a98c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4a92c:	e0bffd17 	ldw	r2,-12(fp)
   4a930:	10800017 	ldw	r2,0(r2)
   4a934:	10800417 	ldw	r2,16(r2)
   4a938:	10000626 	beq	r2,zero,4a954 <close+0x70>
   4a93c:	e0bffd17 	ldw	r2,-12(fp)
   4a940:	10800017 	ldw	r2,0(r2)
   4a944:	10800417 	ldw	r2,16(r2)
   4a948:	e13ffd17 	ldw	r4,-12(fp)
   4a94c:	103ee83a 	callr	r2
   4a950:	00000106 	br	4a958 <close+0x74>
   4a954:	0005883a 	mov	r2,zero
   4a958:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a95c:	e13fff17 	ldw	r4,-4(fp)
   4a960:	004b0180 	call	4b018 <alt_release_fd>
    if (rval < 0)
   4a964:	e0bffe17 	ldw	r2,-8(fp)
   4a968:	1000060e 	bge	r2,zero,4a984 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4a96c:	004a8940 	call	4a894 <alt_get_errno>
   4a970:	e0fffe17 	ldw	r3,-8(fp)
   4a974:	00c7c83a 	sub	r3,zero,r3
   4a978:	10c00015 	stw	r3,0(r2)
      return -1;
   4a97c:	00bfffc4 	movi	r2,-1
   4a980:	00000606 	br	4a99c <close+0xb8>
    }
    return 0;
   4a984:	0005883a 	mov	r2,zero
   4a988:	00000406 	br	4a99c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a98c:	004a8940 	call	4a894 <alt_get_errno>
   4a990:	00c01444 	movi	r3,81
   4a994:	10c00015 	stw	r3,0(r2)
    return -1;
   4a998:	00bfffc4 	movi	r2,-1
  }
}
   4a99c:	e037883a 	mov	sp,fp
   4a9a0:	dfc00117 	ldw	ra,4(sp)
   4a9a4:	df000017 	ldw	fp,0(sp)
   4a9a8:	dec00204 	addi	sp,sp,8
   4a9ac:	f800283a 	ret

0004a9b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a9b0:	defffc04 	addi	sp,sp,-16
   4a9b4:	df000315 	stw	fp,12(sp)
   4a9b8:	df000304 	addi	fp,sp,12
   4a9bc:	e13ffd15 	stw	r4,-12(fp)
   4a9c0:	e17ffe15 	stw	r5,-8(fp)
   4a9c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a9c8:	e0bfff17 	ldw	r2,-4(fp)
}
   4a9cc:	e037883a 	mov	sp,fp
   4a9d0:	df000017 	ldw	fp,0(sp)
   4a9d4:	dec00104 	addi	sp,sp,4
   4a9d8:	f800283a 	ret

0004a9dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4a9dc:	defffc04 	addi	sp,sp,-16
   4a9e0:	df000315 	stw	fp,12(sp)
   4a9e4:	df000304 	addi	fp,sp,12
   4a9e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4a9ec:	0001883a 	nop
   4a9f0:	e0bfff17 	ldw	r2,-4(fp)
   4a9f4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4a9f8:	e0bffd17 	ldw	r2,-12(fp)
   4a9fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4aa00:	e0bffe17 	ldw	r2,-8(fp)
   4aa04:	10000226 	beq	r2,zero,4aa10 <_exit+0x34>
    ALT_SIM_FAIL();
   4aa08:	002af070 	cmpltui	zero,zero,43969
   4aa0c:	00000106 	br	4aa14 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4aa10:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4aa14:	003fff06 	br	4aa14 <_exit+0x38>

0004aa18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aa18:	defffe04 	addi	sp,sp,-8
   4aa1c:	dfc00115 	stw	ra,4(sp)
   4aa20:	df000015 	stw	fp,0(sp)
   4aa24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4aa28:	00800174 	movhi	r2,5
   4aa2c:	10bd0804 	addi	r2,r2,-3040
   4aa30:	10800017 	ldw	r2,0(r2)
   4aa34:	10000526 	beq	r2,zero,4aa4c <alt_get_errno+0x34>
   4aa38:	00800174 	movhi	r2,5
   4aa3c:	10bd0804 	addi	r2,r2,-3040
   4aa40:	10800017 	ldw	r2,0(r2)
   4aa44:	103ee83a 	callr	r2
   4aa48:	00000206 	br	4aa54 <alt_get_errno+0x3c>
   4aa4c:	00800174 	movhi	r2,5
   4aa50:	1083a904 	addi	r2,r2,3748
}
   4aa54:	e037883a 	mov	sp,fp
   4aa58:	dfc00117 	ldw	ra,4(sp)
   4aa5c:	df000017 	ldw	fp,0(sp)
   4aa60:	dec00204 	addi	sp,sp,8
   4aa64:	f800283a 	ret

0004aa68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4aa68:	defffb04 	addi	sp,sp,-20
   4aa6c:	dfc00415 	stw	ra,16(sp)
   4aa70:	df000315 	stw	fp,12(sp)
   4aa74:	df000304 	addi	fp,sp,12
   4aa78:	e13ffe15 	stw	r4,-8(fp)
   4aa7c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4aa80:	e0bffe17 	ldw	r2,-8(fp)
   4aa84:	10000716 	blt	r2,zero,4aaa4 <fstat+0x3c>
   4aa88:	e13ffe17 	ldw	r4,-8(fp)
   4aa8c:	01400304 	movi	r5,12
   4aa90:	0041a580 	call	41a58 <__mulsi3>
   4aa94:	00c00174 	movhi	r3,5
   4aa98:	18f88604 	addi	r3,r3,-7656
   4aa9c:	10c5883a 	add	r2,r2,r3
   4aaa0:	00000106 	br	4aaa8 <fstat+0x40>
   4aaa4:	0005883a 	mov	r2,zero
   4aaa8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4aaac:	e0bffd17 	ldw	r2,-12(fp)
   4aab0:	10001026 	beq	r2,zero,4aaf4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4aab4:	e0bffd17 	ldw	r2,-12(fp)
   4aab8:	10800017 	ldw	r2,0(r2)
   4aabc:	10800817 	ldw	r2,32(r2)
   4aac0:	10000726 	beq	r2,zero,4aae0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4aac4:	e0bffd17 	ldw	r2,-12(fp)
   4aac8:	10800017 	ldw	r2,0(r2)
   4aacc:	10800817 	ldw	r2,32(r2)
   4aad0:	e13ffd17 	ldw	r4,-12(fp)
   4aad4:	e17fff17 	ldw	r5,-4(fp)
   4aad8:	103ee83a 	callr	r2
   4aadc:	00000906 	br	4ab04 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4aae0:	e0bfff17 	ldw	r2,-4(fp)
   4aae4:	00c80004 	movi	r3,8192
   4aae8:	10c00115 	stw	r3,4(r2)
      return 0;
   4aaec:	0005883a 	mov	r2,zero
   4aaf0:	00000406 	br	4ab04 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4aaf4:	004aa180 	call	4aa18 <alt_get_errno>
   4aaf8:	00c01444 	movi	r3,81
   4aafc:	10c00015 	stw	r3,0(r2)
    return -1;
   4ab00:	00bfffc4 	movi	r2,-1
  }
}
   4ab04:	e037883a 	mov	sp,fp
   4ab08:	dfc00117 	ldw	ra,4(sp)
   4ab0c:	df000017 	ldw	fp,0(sp)
   4ab10:	dec00204 	addi	sp,sp,8
   4ab14:	f800283a 	ret

0004ab18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ab18:	defffe04 	addi	sp,sp,-8
   4ab1c:	dfc00115 	stw	ra,4(sp)
   4ab20:	df000015 	stw	fp,0(sp)
   4ab24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ab28:	00800174 	movhi	r2,5
   4ab2c:	10bd0804 	addi	r2,r2,-3040
   4ab30:	10800017 	ldw	r2,0(r2)
   4ab34:	10000526 	beq	r2,zero,4ab4c <alt_get_errno+0x34>
   4ab38:	00800174 	movhi	r2,5
   4ab3c:	10bd0804 	addi	r2,r2,-3040
   4ab40:	10800017 	ldw	r2,0(r2)
   4ab44:	103ee83a 	callr	r2
   4ab48:	00000206 	br	4ab54 <alt_get_errno+0x3c>
   4ab4c:	00800174 	movhi	r2,5
   4ab50:	1083a904 	addi	r2,r2,3748
}
   4ab54:	e037883a 	mov	sp,fp
   4ab58:	dfc00117 	ldw	ra,4(sp)
   4ab5c:	df000017 	ldw	fp,0(sp)
   4ab60:	dec00204 	addi	sp,sp,8
   4ab64:	f800283a 	ret

0004ab68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4ab68:	deffed04 	addi	sp,sp,-76
   4ab6c:	dfc01215 	stw	ra,72(sp)
   4ab70:	df001115 	stw	fp,68(sp)
   4ab74:	df001104 	addi	fp,sp,68
   4ab78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ab7c:	e0bfff17 	ldw	r2,-4(fp)
   4ab80:	10000716 	blt	r2,zero,4aba0 <isatty+0x38>
   4ab84:	e13fff17 	ldw	r4,-4(fp)
   4ab88:	01400304 	movi	r5,12
   4ab8c:	0041a580 	call	41a58 <__mulsi3>
   4ab90:	00c00174 	movhi	r3,5
   4ab94:	18f88604 	addi	r3,r3,-7656
   4ab98:	10c5883a 	add	r2,r2,r3
   4ab9c:	00000106 	br	4aba4 <isatty+0x3c>
   4aba0:	0005883a 	mov	r2,zero
   4aba4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4aba8:	e0bfef17 	ldw	r2,-68(fp)
   4abac:	10000e26 	beq	r2,zero,4abe8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4abb0:	e0bfef17 	ldw	r2,-68(fp)
   4abb4:	10800017 	ldw	r2,0(r2)
   4abb8:	10800817 	ldw	r2,32(r2)
   4abbc:	1000021e 	bne	r2,zero,4abc8 <isatty+0x60>
    {
      return 1;
   4abc0:	00800044 	movi	r2,1
   4abc4:	00000c06 	br	4abf8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4abc8:	e0bff004 	addi	r2,fp,-64
   4abcc:	e13fff17 	ldw	r4,-4(fp)
   4abd0:	100b883a 	mov	r5,r2
   4abd4:	004aa680 	call	4aa68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4abd8:	e0bff117 	ldw	r2,-60(fp)
   4abdc:	10880020 	cmpeqi	r2,r2,8192
   4abe0:	10803fcc 	andi	r2,r2,255
   4abe4:	00000406 	br	4abf8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4abe8:	004ab180 	call	4ab18 <alt_get_errno>
   4abec:	00c01444 	movi	r3,81
   4abf0:	10c00015 	stw	r3,0(r2)
    return 0;
   4abf4:	0005883a 	mov	r2,zero
  }
}
   4abf8:	e037883a 	mov	sp,fp
   4abfc:	dfc00117 	ldw	ra,4(sp)
   4ac00:	df000017 	ldw	fp,0(sp)
   4ac04:	dec00204 	addi	sp,sp,8
   4ac08:	f800283a 	ret

0004ac0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4ac0c:	defffc04 	addi	sp,sp,-16
   4ac10:	df000315 	stw	fp,12(sp)
   4ac14:	df000304 	addi	fp,sp,12
   4ac18:	e13ffd15 	stw	r4,-12(fp)
   4ac1c:	e17ffe15 	stw	r5,-8(fp)
   4ac20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ac24:	e0fffe17 	ldw	r3,-8(fp)
   4ac28:	e0bffd17 	ldw	r2,-12(fp)
   4ac2c:	18800e26 	beq	r3,r2,4ac68 <alt_load_section+0x5c>
  {
    while( to != end )
   4ac30:	00000a06 	br	4ac5c <alt_load_section+0x50>
    {
      *to++ = *from++;
   4ac34:	e0bffd17 	ldw	r2,-12(fp)
   4ac38:	10c00017 	ldw	r3,0(r2)
   4ac3c:	e0bffe17 	ldw	r2,-8(fp)
   4ac40:	10c00015 	stw	r3,0(r2)
   4ac44:	e0bffe17 	ldw	r2,-8(fp)
   4ac48:	10800104 	addi	r2,r2,4
   4ac4c:	e0bffe15 	stw	r2,-8(fp)
   4ac50:	e0bffd17 	ldw	r2,-12(fp)
   4ac54:	10800104 	addi	r2,r2,4
   4ac58:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ac5c:	e0fffe17 	ldw	r3,-8(fp)
   4ac60:	e0bfff17 	ldw	r2,-4(fp)
   4ac64:	18bff31e 	bne	r3,r2,4ac34 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4ac68:	e037883a 	mov	sp,fp
   4ac6c:	df000017 	ldw	fp,0(sp)
   4ac70:	dec00104 	addi	sp,sp,4
   4ac74:	f800283a 	ret

0004ac78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ac78:	defffe04 	addi	sp,sp,-8
   4ac7c:	dfc00115 	stw	ra,4(sp)
   4ac80:	df000015 	stw	fp,0(sp)
   4ac84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ac88:	01000174 	movhi	r4,5
   4ac8c:	213d0d04 	addi	r4,r4,-3020
   4ac90:	01400174 	movhi	r5,5
   4ac94:	29767704 	addi	r5,r5,-9764
   4ac98:	01800174 	movhi	r6,5
   4ac9c:	31bd0d04 	addi	r6,r6,-3020
   4aca0:	004ac0c0 	call	4ac0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4aca4:	01000134 	movhi	r4,4
   4aca8:	21000804 	addi	r4,r4,32
   4acac:	01400134 	movhi	r5,4
   4acb0:	29400804 	addi	r5,r5,32
   4acb4:	01800134 	movhi	r6,4
   4acb8:	31806e04 	addi	r6,r6,440
   4acbc:	004ac0c0 	call	4ac0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4acc0:	01000174 	movhi	r4,5
   4acc4:	21342004 	addi	r4,r4,-12160
   4acc8:	01400174 	movhi	r5,5
   4accc:	29742004 	addi	r5,r5,-12160
   4acd0:	01800174 	movhi	r6,5
   4acd4:	31b67704 	addi	r6,r6,-9764
   4acd8:	004ac0c0 	call	4ac0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4acdc:	004c1540 	call	4c154 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4ace0:	004c3180 	call	4c318 <alt_icache_flush_all>
}
   4ace4:	e037883a 	mov	sp,fp
   4ace8:	dfc00117 	ldw	ra,4(sp)
   4acec:	df000017 	ldw	fp,0(sp)
   4acf0:	dec00204 	addi	sp,sp,8
   4acf4:	f800283a 	ret

0004acf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4acf8:	defffe04 	addi	sp,sp,-8
   4acfc:	dfc00115 	stw	ra,4(sp)
   4ad00:	df000015 	stw	fp,0(sp)
   4ad04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ad08:	00800174 	movhi	r2,5
   4ad0c:	10bd0804 	addi	r2,r2,-3040
   4ad10:	10800017 	ldw	r2,0(r2)
   4ad14:	10000526 	beq	r2,zero,4ad2c <alt_get_errno+0x34>
   4ad18:	00800174 	movhi	r2,5
   4ad1c:	10bd0804 	addi	r2,r2,-3040
   4ad20:	10800017 	ldw	r2,0(r2)
   4ad24:	103ee83a 	callr	r2
   4ad28:	00000206 	br	4ad34 <alt_get_errno+0x3c>
   4ad2c:	00800174 	movhi	r2,5
   4ad30:	1083a904 	addi	r2,r2,3748
}
   4ad34:	e037883a 	mov	sp,fp
   4ad38:	dfc00117 	ldw	ra,4(sp)
   4ad3c:	df000017 	ldw	fp,0(sp)
   4ad40:	dec00204 	addi	sp,sp,8
   4ad44:	f800283a 	ret

0004ad48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4ad48:	defff904 	addi	sp,sp,-28
   4ad4c:	dfc00615 	stw	ra,24(sp)
   4ad50:	df000515 	stw	fp,20(sp)
   4ad54:	df000504 	addi	fp,sp,20
   4ad58:	e13ffd15 	stw	r4,-12(fp)
   4ad5c:	e17ffe15 	stw	r5,-8(fp)
   4ad60:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4ad64:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ad68:	e0bffd17 	ldw	r2,-12(fp)
   4ad6c:	10000716 	blt	r2,zero,4ad8c <lseek+0x44>
   4ad70:	e13ffd17 	ldw	r4,-12(fp)
   4ad74:	01400304 	movi	r5,12
   4ad78:	0041a580 	call	41a58 <__mulsi3>
   4ad7c:	00c00174 	movhi	r3,5
   4ad80:	18f88604 	addi	r3,r3,-7656
   4ad84:	10c5883a 	add	r2,r2,r3
   4ad88:	00000106 	br	4ad90 <lseek+0x48>
   4ad8c:	0005883a 	mov	r2,zero
   4ad90:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4ad94:	e0bffc17 	ldw	r2,-16(fp)
   4ad98:	10001026 	beq	r2,zero,4addc <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4ad9c:	e0bffc17 	ldw	r2,-16(fp)
   4ada0:	10800017 	ldw	r2,0(r2)
   4ada4:	10800717 	ldw	r2,28(r2)
   4ada8:	10000926 	beq	r2,zero,4add0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4adac:	e0bffc17 	ldw	r2,-16(fp)
   4adb0:	10800017 	ldw	r2,0(r2)
   4adb4:	10800717 	ldw	r2,28(r2)
   4adb8:	e13ffc17 	ldw	r4,-16(fp)
   4adbc:	e17ffe17 	ldw	r5,-8(fp)
   4adc0:	e1bfff17 	ldw	r6,-4(fp)
   4adc4:	103ee83a 	callr	r2
   4adc8:	e0bffb15 	stw	r2,-20(fp)
   4adcc:	00000506 	br	4ade4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4add0:	00bfde84 	movi	r2,-134
   4add4:	e0bffb15 	stw	r2,-20(fp)
   4add8:	00000206 	br	4ade4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4addc:	00bfebc4 	movi	r2,-81
   4ade0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4ade4:	e0bffb17 	ldw	r2,-20(fp)
   4ade8:	1000060e 	bge	r2,zero,4ae04 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4adec:	004acf80 	call	4acf8 <alt_get_errno>
   4adf0:	e0fffb17 	ldw	r3,-20(fp)
   4adf4:	00c7c83a 	sub	r3,zero,r3
   4adf8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4adfc:	00bfffc4 	movi	r2,-1
   4ae00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4ae04:	e0bffb17 	ldw	r2,-20(fp)
}
   4ae08:	e037883a 	mov	sp,fp
   4ae0c:	dfc00117 	ldw	ra,4(sp)
   4ae10:	df000017 	ldw	fp,0(sp)
   4ae14:	dec00204 	addi	sp,sp,8
   4ae18:	f800283a 	ret

0004ae1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ae1c:	defffd04 	addi	sp,sp,-12
   4ae20:	dfc00215 	stw	ra,8(sp)
   4ae24:	df000115 	stw	fp,4(sp)
   4ae28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4ae2c:	0009883a 	mov	r4,zero
   4ae30:	004b2c00 	call	4b2c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4ae34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4ae38:	004b2f40 	call	4b2f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4ae3c:	01000174 	movhi	r4,5
   4ae40:	21366f04 	addi	r4,r4,-9796
   4ae44:	01400174 	movhi	r5,5
   4ae48:	29766f04 	addi	r5,r5,-9796
   4ae4c:	01800174 	movhi	r6,5
   4ae50:	31b66f04 	addi	r6,r6,-9796
   4ae54:	004c6f00 	call	4c6f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4ae58:	004c2600 	call	4c260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4ae5c:	01000174 	movhi	r4,5
   4ae60:	2130af04 	addi	r4,r4,-15684
   4ae64:	004cec00 	call	4cec0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4ae68:	d126ac17 	ldw	r4,-25936(gp)
   4ae6c:	d0e6ad17 	ldw	r3,-25932(gp)
   4ae70:	d0a6ae17 	ldw	r2,-25928(gp)
   4ae74:	180b883a 	mov	r5,r3
   4ae78:	100d883a 	mov	r6,r2
   4ae7c:	00405ec0 	call	405ec <main>
   4ae80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4ae84:	01000044 	movi	r4,1
   4ae88:	004a8e40 	call	4a8e4 <close>
  exit (result);
   4ae8c:	e13fff17 	ldw	r4,-4(fp)
   4ae90:	0041b080 	call	41b08 <exit>

0004ae94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4ae94:	defffe04 	addi	sp,sp,-8
   4ae98:	df000115 	stw	fp,4(sp)
   4ae9c:	df000104 	addi	fp,sp,4
   4aea0:	e13fff15 	stw	r4,-4(fp)
}
   4aea4:	e037883a 	mov	sp,fp
   4aea8:	df000017 	ldw	fp,0(sp)
   4aeac:	dec00104 	addi	sp,sp,4
   4aeb0:	f800283a 	ret

0004aeb4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4aeb4:	defffe04 	addi	sp,sp,-8
   4aeb8:	df000115 	stw	fp,4(sp)
   4aebc:	df000104 	addi	fp,sp,4
   4aec0:	e13fff15 	stw	r4,-4(fp)
}
   4aec4:	e037883a 	mov	sp,fp
   4aec8:	df000017 	ldw	fp,0(sp)
   4aecc:	dec00104 	addi	sp,sp,4
   4aed0:	f800283a 	ret

0004aed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aed4:	defffe04 	addi	sp,sp,-8
   4aed8:	dfc00115 	stw	ra,4(sp)
   4aedc:	df000015 	stw	fp,0(sp)
   4aee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4aee4:	00800174 	movhi	r2,5
   4aee8:	10bd0804 	addi	r2,r2,-3040
   4aeec:	10800017 	ldw	r2,0(r2)
   4aef0:	10000526 	beq	r2,zero,4af08 <alt_get_errno+0x34>
   4aef4:	00800174 	movhi	r2,5
   4aef8:	10bd0804 	addi	r2,r2,-3040
   4aefc:	10800017 	ldw	r2,0(r2)
   4af00:	103ee83a 	callr	r2
   4af04:	00000206 	br	4af10 <alt_get_errno+0x3c>
   4af08:	00800174 	movhi	r2,5
   4af0c:	1083a904 	addi	r2,r2,3748
}
   4af10:	e037883a 	mov	sp,fp
   4af14:	dfc00117 	ldw	ra,4(sp)
   4af18:	df000017 	ldw	fp,0(sp)
   4af1c:	dec00204 	addi	sp,sp,8
   4af20:	f800283a 	ret

0004af24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4af24:	defff904 	addi	sp,sp,-28
   4af28:	dfc00615 	stw	ra,24(sp)
   4af2c:	df000515 	stw	fp,20(sp)
   4af30:	df000504 	addi	fp,sp,20
   4af34:	e13ffd15 	stw	r4,-12(fp)
   4af38:	e17ffe15 	stw	r5,-8(fp)
   4af3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4af40:	e0bffd17 	ldw	r2,-12(fp)
   4af44:	10000716 	blt	r2,zero,4af64 <read+0x40>
   4af48:	e13ffd17 	ldw	r4,-12(fp)
   4af4c:	01400304 	movi	r5,12
   4af50:	0041a580 	call	41a58 <__mulsi3>
   4af54:	00c00174 	movhi	r3,5
   4af58:	18f88604 	addi	r3,r3,-7656
   4af5c:	10c5883a 	add	r2,r2,r3
   4af60:	00000106 	br	4af68 <read+0x44>
   4af64:	0005883a 	mov	r2,zero
   4af68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4af6c:	e0bffb17 	ldw	r2,-20(fp)
   4af70:	10002026 	beq	r2,zero,4aff4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4af74:	e0bffb17 	ldw	r2,-20(fp)
   4af78:	10800217 	ldw	r2,8(r2)
   4af7c:	108000cc 	andi	r2,r2,3
   4af80:	10800060 	cmpeqi	r2,r2,1
   4af84:	1000171e 	bne	r2,zero,4afe4 <read+0xc0>
        (fd->dev->read))
   4af88:	e0bffb17 	ldw	r2,-20(fp)
   4af8c:	10800017 	ldw	r2,0(r2)
   4af90:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4af94:	10001326 	beq	r2,zero,4afe4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4af98:	e0bffb17 	ldw	r2,-20(fp)
   4af9c:	10800017 	ldw	r2,0(r2)
   4afa0:	10c00517 	ldw	r3,20(r2)
   4afa4:	e0bfff17 	ldw	r2,-4(fp)
   4afa8:	e13ffb17 	ldw	r4,-20(fp)
   4afac:	e17ffe17 	ldw	r5,-8(fp)
   4afb0:	100d883a 	mov	r6,r2
   4afb4:	183ee83a 	callr	r3
   4afb8:	e0bffc15 	stw	r2,-16(fp)
   4afbc:	e0bffc17 	ldw	r2,-16(fp)
   4afc0:	1000060e 	bge	r2,zero,4afdc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4afc4:	004aed40 	call	4aed4 <alt_get_errno>
   4afc8:	e0fffc17 	ldw	r3,-16(fp)
   4afcc:	00c7c83a 	sub	r3,zero,r3
   4afd0:	10c00015 	stw	r3,0(r2)
          return -1;
   4afd4:	00bfffc4 	movi	r2,-1
   4afd8:	00000a06 	br	4b004 <read+0xe0>
        }
        return rval;
   4afdc:	e0bffc17 	ldw	r2,-16(fp)
   4afe0:	00000806 	br	4b004 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4afe4:	004aed40 	call	4aed4 <alt_get_errno>
   4afe8:	00c00344 	movi	r3,13
   4afec:	10c00015 	stw	r3,0(r2)
   4aff0:	00000306 	br	4b000 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4aff4:	004aed40 	call	4aed4 <alt_get_errno>
   4aff8:	00c01444 	movi	r3,81
   4affc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4b000:	00bfffc4 	movi	r2,-1
}
   4b004:	e037883a 	mov	sp,fp
   4b008:	dfc00117 	ldw	ra,4(sp)
   4b00c:	df000017 	ldw	fp,0(sp)
   4b010:	dec00204 	addi	sp,sp,8
   4b014:	f800283a 	ret

0004b018 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4b018:	defffc04 	addi	sp,sp,-16
   4b01c:	dfc00315 	stw	ra,12(sp)
   4b020:	df000215 	stw	fp,8(sp)
   4b024:	dc000115 	stw	r16,4(sp)
   4b028:	df000104 	addi	fp,sp,4
   4b02c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4b030:	e0bfff17 	ldw	r2,-4(fp)
   4b034:	108000d0 	cmplti	r2,r2,3
   4b038:	1000111e 	bne	r2,zero,4b080 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4b03c:	04000174 	movhi	r16,5
   4b040:	84388604 	addi	r16,r16,-7656
   4b044:	e0bfff17 	ldw	r2,-4(fp)
   4b048:	1009883a 	mov	r4,r2
   4b04c:	01400304 	movi	r5,12
   4b050:	0041a580 	call	41a58 <__mulsi3>
   4b054:	8085883a 	add	r2,r16,r2
   4b058:	10800204 	addi	r2,r2,8
   4b05c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4b060:	04000174 	movhi	r16,5
   4b064:	84388604 	addi	r16,r16,-7656
   4b068:	e0bfff17 	ldw	r2,-4(fp)
   4b06c:	1009883a 	mov	r4,r2
   4b070:	01400304 	movi	r5,12
   4b074:	0041a580 	call	41a58 <__mulsi3>
   4b078:	8085883a 	add	r2,r16,r2
   4b07c:	10000015 	stw	zero,0(r2)
  }
}
   4b080:	e037883a 	mov	sp,fp
   4b084:	dfc00217 	ldw	ra,8(sp)
   4b088:	df000117 	ldw	fp,4(sp)
   4b08c:	dc000017 	ldw	r16,0(sp)
   4b090:	dec00304 	addi	sp,sp,12
   4b094:	f800283a 	ret

0004b098 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4b098:	defff904 	addi	sp,sp,-28
   4b09c:	df000615 	stw	fp,24(sp)
   4b0a0:	df000604 	addi	fp,sp,24
   4b0a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b0a8:	0005303a 	rdctl	r2,status
   4b0ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b0b0:	e0fffc17 	ldw	r3,-16(fp)
   4b0b4:	00bfff84 	movi	r2,-2
   4b0b8:	1884703a 	and	r2,r3,r2
   4b0bc:	1001703a 	wrctl	status,r2
  
  return context;
   4b0c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4b0c4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4b0c8:	d0a00b17 	ldw	r2,-32724(gp)
   4b0cc:	10c000c4 	addi	r3,r2,3
   4b0d0:	00bfff04 	movi	r2,-4
   4b0d4:	1884703a 	and	r2,r3,r2
   4b0d8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4b0dc:	d0e00b17 	ldw	r3,-32724(gp)
   4b0e0:	e0bfff17 	ldw	r2,-4(fp)
   4b0e4:	1885883a 	add	r2,r3,r2
   4b0e8:	00c00234 	movhi	r3,8
   4b0ec:	18c00004 	addi	r3,r3,0
   4b0f0:	1880062e 	bgeu	r3,r2,4b10c <sbrk+0x74>
   4b0f4:	e0bffa17 	ldw	r2,-24(fp)
   4b0f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b0fc:	e0bffd17 	ldw	r2,-12(fp)
   4b100:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4b104:	00bfffc4 	movi	r2,-1
   4b108:	00000b06 	br	4b138 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4b10c:	d0a00b17 	ldw	r2,-32724(gp)
   4b110:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4b114:	d0e00b17 	ldw	r3,-32724(gp)
   4b118:	e0bfff17 	ldw	r2,-4(fp)
   4b11c:	1885883a 	add	r2,r3,r2
   4b120:	d0a00b15 	stw	r2,-32724(gp)
   4b124:	e0bffa17 	ldw	r2,-24(fp)
   4b128:	e0bffe15 	stw	r2,-8(fp)
   4b12c:	e0bffe17 	ldw	r2,-8(fp)
   4b130:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4b134:	e0bffb17 	ldw	r2,-20(fp)
} 
   4b138:	e037883a 	mov	sp,fp
   4b13c:	df000017 	ldw	fp,0(sp)
   4b140:	dec00104 	addi	sp,sp,4
   4b144:	f800283a 	ret

0004b148 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b148:	defffe04 	addi	sp,sp,-8
   4b14c:	dfc00115 	stw	ra,4(sp)
   4b150:	df000015 	stw	fp,0(sp)
   4b154:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b158:	00800174 	movhi	r2,5
   4b15c:	10bd0804 	addi	r2,r2,-3040
   4b160:	10800017 	ldw	r2,0(r2)
   4b164:	10000526 	beq	r2,zero,4b17c <alt_get_errno+0x34>
   4b168:	00800174 	movhi	r2,5
   4b16c:	10bd0804 	addi	r2,r2,-3040
   4b170:	10800017 	ldw	r2,0(r2)
   4b174:	103ee83a 	callr	r2
   4b178:	00000206 	br	4b184 <alt_get_errno+0x3c>
   4b17c:	00800174 	movhi	r2,5
   4b180:	1083a904 	addi	r2,r2,3748
}
   4b184:	e037883a 	mov	sp,fp
   4b188:	dfc00117 	ldw	ra,4(sp)
   4b18c:	df000017 	ldw	fp,0(sp)
   4b190:	dec00204 	addi	sp,sp,8
   4b194:	f800283a 	ret

0004b198 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4b198:	defff904 	addi	sp,sp,-28
   4b19c:	dfc00615 	stw	ra,24(sp)
   4b1a0:	df000515 	stw	fp,20(sp)
   4b1a4:	df000504 	addi	fp,sp,20
   4b1a8:	e13ffd15 	stw	r4,-12(fp)
   4b1ac:	e17ffe15 	stw	r5,-8(fp)
   4b1b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b1b4:	e0bffd17 	ldw	r2,-12(fp)
   4b1b8:	10000716 	blt	r2,zero,4b1d8 <write+0x40>
   4b1bc:	e13ffd17 	ldw	r4,-12(fp)
   4b1c0:	01400304 	movi	r5,12
   4b1c4:	0041a580 	call	41a58 <__mulsi3>
   4b1c8:	00c00174 	movhi	r3,5
   4b1cc:	18f88604 	addi	r3,r3,-7656
   4b1d0:	10c5883a 	add	r2,r2,r3
   4b1d4:	00000106 	br	4b1dc <write+0x44>
   4b1d8:	0005883a 	mov	r2,zero
   4b1dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4b1e0:	e0bffb17 	ldw	r2,-20(fp)
   4b1e4:	10001f26 	beq	r2,zero,4b264 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4b1e8:	e0bffb17 	ldw	r2,-20(fp)
   4b1ec:	10800217 	ldw	r2,8(r2)
   4b1f0:	108000cc 	andi	r2,r2,3
   4b1f4:	10001726 	beq	r2,zero,4b254 <write+0xbc>
   4b1f8:	e0bffb17 	ldw	r2,-20(fp)
   4b1fc:	10800017 	ldw	r2,0(r2)
   4b200:	10800617 	ldw	r2,24(r2)
   4b204:	10001326 	beq	r2,zero,4b254 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4b208:	e0bffb17 	ldw	r2,-20(fp)
   4b20c:	10800017 	ldw	r2,0(r2)
   4b210:	10c00617 	ldw	r3,24(r2)
   4b214:	e0bfff17 	ldw	r2,-4(fp)
   4b218:	e13ffb17 	ldw	r4,-20(fp)
   4b21c:	e17ffe17 	ldw	r5,-8(fp)
   4b220:	100d883a 	mov	r6,r2
   4b224:	183ee83a 	callr	r3
   4b228:	e0bffc15 	stw	r2,-16(fp)
   4b22c:	e0bffc17 	ldw	r2,-16(fp)
   4b230:	1000060e 	bge	r2,zero,4b24c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4b234:	004b1480 	call	4b148 <alt_get_errno>
   4b238:	e0fffc17 	ldw	r3,-16(fp)
   4b23c:	00c7c83a 	sub	r3,zero,r3
   4b240:	10c00015 	stw	r3,0(r2)
        return -1;
   4b244:	00bfffc4 	movi	r2,-1
   4b248:	00000a06 	br	4b274 <write+0xdc>
      }
      return rval;
   4b24c:	e0bffc17 	ldw	r2,-16(fp)
   4b250:	00000806 	br	4b274 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4b254:	004b1480 	call	4b148 <alt_get_errno>
   4b258:	00c00344 	movi	r3,13
   4b25c:	10c00015 	stw	r3,0(r2)
   4b260:	00000306 	br	4b270 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4b264:	004b1480 	call	4b148 <alt_get_errno>
   4b268:	00c01444 	movi	r3,81
   4b26c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4b270:	00bfffc4 	movi	r2,-1
}
   4b274:	e037883a 	mov	sp,fp
   4b278:	dfc00117 	ldw	ra,4(sp)
   4b27c:	df000017 	ldw	fp,0(sp)
   4b280:	dec00204 	addi	sp,sp,8
   4b284:	f800283a 	ret

0004b288 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4b288:	defffd04 	addi	sp,sp,-12
   4b28c:	dfc00215 	stw	ra,8(sp)
   4b290:	df000115 	stw	fp,4(sp)
   4b294:	df000104 	addi	fp,sp,4
   4b298:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4b29c:	e13fff17 	ldw	r4,-4(fp)
   4b2a0:	01400174 	movhi	r5,5
   4b2a4:	297d0504 	addi	r5,r5,-3052
   4b2a8:	004c1c00 	call	4c1c0 <alt_dev_llist_insert>
}
   4b2ac:	e037883a 	mov	sp,fp
   4b2b0:	dfc00117 	ldw	ra,4(sp)
   4b2b4:	df000017 	ldw	fp,0(sp)
   4b2b8:	dec00204 	addi	sp,sp,8
   4b2bc:	f800283a 	ret

0004b2c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4b2c0:	defffd04 	addi	sp,sp,-12
   4b2c4:	dfc00215 	stw	ra,8(sp)
   4b2c8:	df000115 	stw	fp,4(sp)
   4b2cc:	df000104 	addi	fp,sp,4
   4b2d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   4b2d4:	004cb9c0 	call	4cb9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4b2d8:	00800044 	movi	r2,1
   4b2dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4b2e0:	e037883a 	mov	sp,fp
   4b2e4:	dfc00117 	ldw	ra,4(sp)
   4b2e8:	df000017 	ldw	fp,0(sp)
   4b2ec:	dec00204 	addi	sp,sp,8
   4b2f0:	f800283a 	ret

0004b2f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4b2f4:	defffe04 	addi	sp,sp,-8
   4b2f8:	dfc00115 	stw	ra,4(sp)
   4b2fc:	df000015 	stw	fp,0(sp)
   4b300:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   4b304:	01000234 	movhi	r4,8
   4b308:	21040004 	addi	r4,r4,4096
   4b30c:	000b883a 	mov	r5,zero
   4b310:	01800044 	movi	r6,1
   4b314:	01c0fa04 	movi	r7,1000
   4b318:	004be4c0 	call	4be4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   4b31c:	00800174 	movhi	r2,5
   4b320:	1083ad04 	addi	r2,r2,3764
   4b324:	10000015 	stw	zero,0(r2)
   4b328:	00800174 	movhi	r2,5
   4b32c:	1083ae04 	addi	r2,r2,3768
   4b330:	00c0bef4 	movhi	r3,763
   4b334:	18fc2004 	addi	r3,r3,-3968
   4b338:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4b33c:	01000174 	movhi	r4,5
   4b340:	2138f004 	addi	r4,r4,-7232
   4b344:	000b883a 	mov	r5,zero
   4b348:	01800404 	movi	r6,16
   4b34c:	004b4d80 	call	4b4d8 <altera_avalon_jtag_uart_init>
   4b350:	01000174 	movhi	r4,5
   4b354:	2138e604 	addi	r4,r4,-7272
   4b358:	004b2880 	call	4b288 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   4b35c:	0001883a 	nop
}
   4b360:	e037883a 	mov	sp,fp
   4b364:	dfc00117 	ldw	ra,4(sp)
   4b368:	df000017 	ldw	fp,0(sp)
   4b36c:	dec00204 	addi	sp,sp,8
   4b370:	f800283a 	ret

0004b374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4b374:	defffa04 	addi	sp,sp,-24
   4b378:	dfc00515 	stw	ra,20(sp)
   4b37c:	df000415 	stw	fp,16(sp)
   4b380:	df000404 	addi	fp,sp,16
   4b384:	e13ffd15 	stw	r4,-12(fp)
   4b388:	e17ffe15 	stw	r5,-8(fp)
   4b38c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b390:	e0bffd17 	ldw	r2,-12(fp)
   4b394:	10800017 	ldw	r2,0(r2)
   4b398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4b39c:	e0bffc17 	ldw	r2,-16(fp)
   4b3a0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4b3a4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4b3a8:	10800217 	ldw	r2,8(r2)
   4b3ac:	1809883a 	mov	r4,r3
   4b3b0:	e17ffe17 	ldw	r5,-8(fp)
   4b3b4:	e1bfff17 	ldw	r6,-4(fp)
   4b3b8:	100f883a 	mov	r7,r2
   4b3bc:	004b99c0 	call	4b99c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4b3c0:	e037883a 	mov	sp,fp
   4b3c4:	dfc00117 	ldw	ra,4(sp)
   4b3c8:	df000017 	ldw	fp,0(sp)
   4b3cc:	dec00204 	addi	sp,sp,8
   4b3d0:	f800283a 	ret

0004b3d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4b3d4:	defffa04 	addi	sp,sp,-24
   4b3d8:	dfc00515 	stw	ra,20(sp)
   4b3dc:	df000415 	stw	fp,16(sp)
   4b3e0:	df000404 	addi	fp,sp,16
   4b3e4:	e13ffd15 	stw	r4,-12(fp)
   4b3e8:	e17ffe15 	stw	r5,-8(fp)
   4b3ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b3f0:	e0bffd17 	ldw	r2,-12(fp)
   4b3f4:	10800017 	ldw	r2,0(r2)
   4b3f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4b3fc:	e0bffc17 	ldw	r2,-16(fp)
   4b400:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4b404:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4b408:	10800217 	ldw	r2,8(r2)
   4b40c:	1809883a 	mov	r4,r3
   4b410:	e17ffe17 	ldw	r5,-8(fp)
   4b414:	e1bfff17 	ldw	r6,-4(fp)
   4b418:	100f883a 	mov	r7,r2
   4b41c:	004bbb40 	call	4bbb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4b420:	e037883a 	mov	sp,fp
   4b424:	dfc00117 	ldw	ra,4(sp)
   4b428:	df000017 	ldw	fp,0(sp)
   4b42c:	dec00204 	addi	sp,sp,8
   4b430:	f800283a 	ret

0004b434 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4b434:	defffc04 	addi	sp,sp,-16
   4b438:	dfc00315 	stw	ra,12(sp)
   4b43c:	df000215 	stw	fp,8(sp)
   4b440:	df000204 	addi	fp,sp,8
   4b444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b448:	e0bfff17 	ldw	r2,-4(fp)
   4b44c:	10800017 	ldw	r2,0(r2)
   4b450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4b454:	e0bffe17 	ldw	r2,-8(fp)
   4b458:	10c00a04 	addi	r3,r2,40
   4b45c:	e0bfff17 	ldw	r2,-4(fp)
   4b460:	10800217 	ldw	r2,8(r2)
   4b464:	1809883a 	mov	r4,r3
   4b468:	100b883a 	mov	r5,r2
   4b46c:	004b8400 	call	4b840 <altera_avalon_jtag_uart_close>
}
   4b470:	e037883a 	mov	sp,fp
   4b474:	dfc00117 	ldw	ra,4(sp)
   4b478:	df000017 	ldw	fp,0(sp)
   4b47c:	dec00204 	addi	sp,sp,8
   4b480:	f800283a 	ret

0004b484 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4b484:	defffa04 	addi	sp,sp,-24
   4b488:	dfc00515 	stw	ra,20(sp)
   4b48c:	df000415 	stw	fp,16(sp)
   4b490:	df000404 	addi	fp,sp,16
   4b494:	e13ffd15 	stw	r4,-12(fp)
   4b498:	e17ffe15 	stw	r5,-8(fp)
   4b49c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4b4a0:	e0bffd17 	ldw	r2,-12(fp)
   4b4a4:	10800017 	ldw	r2,0(r2)
   4b4a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4b4ac:	e0bffc17 	ldw	r2,-16(fp)
   4b4b0:	10800a04 	addi	r2,r2,40
   4b4b4:	1009883a 	mov	r4,r2
   4b4b8:	e17ffe17 	ldw	r5,-8(fp)
   4b4bc:	e1bfff17 	ldw	r6,-4(fp)
   4b4c0:	004b8a80 	call	4b8a8 <altera_avalon_jtag_uart_ioctl>
}
   4b4c4:	e037883a 	mov	sp,fp
   4b4c8:	dfc00117 	ldw	ra,4(sp)
   4b4cc:	df000017 	ldw	fp,0(sp)
   4b4d0:	dec00204 	addi	sp,sp,8
   4b4d4:	f800283a 	ret

0004b4d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4b4d8:	defffa04 	addi	sp,sp,-24
   4b4dc:	dfc00515 	stw	ra,20(sp)
   4b4e0:	df000415 	stw	fp,16(sp)
   4b4e4:	df000404 	addi	fp,sp,16
   4b4e8:	e13ffd15 	stw	r4,-12(fp)
   4b4ec:	e17ffe15 	stw	r5,-8(fp)
   4b4f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b4f4:	e0bffd17 	ldw	r2,-12(fp)
   4b4f8:	00c00044 	movi	r3,1
   4b4fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4b500:	e0bffd17 	ldw	r2,-12(fp)
   4b504:	10800017 	ldw	r2,0(r2)
   4b508:	10800104 	addi	r2,r2,4
   4b50c:	e0fffd17 	ldw	r3,-12(fp)
   4b510:	18c00817 	ldw	r3,32(r3)
   4b514:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4b518:	e0fffe17 	ldw	r3,-8(fp)
   4b51c:	e0bfff17 	ldw	r2,-4(fp)
   4b520:	d8000015 	stw	zero,0(sp)
   4b524:	1809883a 	mov	r4,r3
   4b528:	100b883a 	mov	r5,r2
   4b52c:	01800174 	movhi	r6,5
   4b530:	31ad6604 	addi	r6,r6,-19048
   4b534:	e1fffd17 	ldw	r7,-12(fp)
   4b538:	004c3480 	call	4c348 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4b53c:	e0bffd17 	ldw	r2,-12(fp)
   4b540:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4b544:	e0bffd17 	ldw	r2,-12(fp)
   4b548:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b54c:	00800174 	movhi	r2,5
   4b550:	1083b004 	addi	r2,r2,3776
   4b554:	10800017 	ldw	r2,0(r2)
   4b558:	1809883a 	mov	r4,r3
   4b55c:	100b883a 	mov	r5,r2
   4b560:	01800174 	movhi	r6,5
   4b564:	31ade704 	addi	r6,r6,-18532
   4b568:	e1fffd17 	ldw	r7,-12(fp)
   4b56c:	004c0140 	call	4c014 <alt_alarm_start>
   4b570:	1000040e 	bge	r2,zero,4b584 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4b574:	e0bffd17 	ldw	r2,-12(fp)
   4b578:	00e00034 	movhi	r3,32768
   4b57c:	18ffffc4 	addi	r3,r3,-1
   4b580:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4b584:	e037883a 	mov	sp,fp
   4b588:	dfc00117 	ldw	ra,4(sp)
   4b58c:	df000017 	ldw	fp,0(sp)
   4b590:	dec00204 	addi	sp,sp,8
   4b594:	f800283a 	ret

0004b598 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4b598:	defff804 	addi	sp,sp,-32
   4b59c:	df000715 	stw	fp,28(sp)
   4b5a0:	df000704 	addi	fp,sp,28
   4b5a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4b5a8:	e0bfff17 	ldw	r2,-4(fp)
   4b5ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4b5b0:	e0bffb17 	ldw	r2,-20(fp)
   4b5b4:	10800017 	ldw	r2,0(r2)
   4b5b8:	e0bffc15 	stw	r2,-16(fp)
   4b5bc:	00000106 	br	4b5c4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4b5c0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b5c4:	e0bffc17 	ldw	r2,-16(fp)
   4b5c8:	10800104 	addi	r2,r2,4
   4b5cc:	10800037 	ldwio	r2,0(r2)
   4b5d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4b5d4:	e0bffd17 	ldw	r2,-12(fp)
   4b5d8:	1080c00c 	andi	r2,r2,768
   4b5dc:	10006a26 	beq	r2,zero,4b788 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4b5e0:	e0bffd17 	ldw	r2,-12(fp)
   4b5e4:	1080400c 	andi	r2,r2,256
   4b5e8:	10003326 	beq	r2,zero,4b6b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4b5ec:	00800074 	movhi	r2,1
   4b5f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b5f4:	e0bffb17 	ldw	r2,-20(fp)
   4b5f8:	10800a17 	ldw	r2,40(r2)
   4b5fc:	10800044 	addi	r2,r2,1
   4b600:	1081ffcc 	andi	r2,r2,2047
   4b604:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4b608:	e0bffb17 	ldw	r2,-20(fp)
   4b60c:	10c00b17 	ldw	r3,44(r2)
   4b610:	e0bffe17 	ldw	r2,-8(fp)
   4b614:	18801426 	beq	r3,r2,4b668 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4b618:	e0bffc17 	ldw	r2,-16(fp)
   4b61c:	10800037 	ldwio	r2,0(r2)
   4b620:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4b624:	e0bff917 	ldw	r2,-28(fp)
   4b628:	10a0000c 	andi	r2,r2,32768
   4b62c:	10001026 	beq	r2,zero,4b670 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4b630:	e0bffb17 	ldw	r2,-20(fp)
   4b634:	10800a17 	ldw	r2,40(r2)
   4b638:	e0fff917 	ldw	r3,-28(fp)
   4b63c:	e13ffb17 	ldw	r4,-20(fp)
   4b640:	2085883a 	add	r2,r4,r2
   4b644:	10800e04 	addi	r2,r2,56
   4b648:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b64c:	e0bffb17 	ldw	r2,-20(fp)
   4b650:	10800a17 	ldw	r2,40(r2)
   4b654:	10800044 	addi	r2,r2,1
   4b658:	10c1ffcc 	andi	r3,r2,2047
   4b65c:	e0bffb17 	ldw	r2,-20(fp)
   4b660:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4b664:	003fe306 	br	4b5f4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4b668:	0001883a 	nop
   4b66c:	00000106 	br	4b674 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4b670:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4b674:	e0bff917 	ldw	r2,-28(fp)
   4b678:	10bfffec 	andhi	r2,r2,65535
   4b67c:	10000e26 	beq	r2,zero,4b6b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b680:	e0bffb17 	ldw	r2,-20(fp)
   4b684:	10c00817 	ldw	r3,32(r2)
   4b688:	00bfff84 	movi	r2,-2
   4b68c:	1886703a 	and	r3,r3,r2
   4b690:	e0bffb17 	ldw	r2,-20(fp)
   4b694:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4b698:	e0bffc17 	ldw	r2,-16(fp)
   4b69c:	10800104 	addi	r2,r2,4
   4b6a0:	e0fffb17 	ldw	r3,-20(fp)
   4b6a4:	18c00817 	ldw	r3,32(r3)
   4b6a8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b6ac:	e0bffc17 	ldw	r2,-16(fp)
   4b6b0:	10800104 	addi	r2,r2,4
   4b6b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4b6b8:	e0bffd17 	ldw	r2,-12(fp)
   4b6bc:	1080800c 	andi	r2,r2,512
   4b6c0:	103fbf26 	beq	r2,zero,4b5c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4b6c4:	e0bffd17 	ldw	r2,-12(fp)
   4b6c8:	1004d43a 	srli	r2,r2,16
   4b6cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b6d0:	00001406 	br	4b724 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4b6d4:	e0bffc17 	ldw	r2,-16(fp)
   4b6d8:	e0fffb17 	ldw	r3,-20(fp)
   4b6dc:	18c00d17 	ldw	r3,52(r3)
   4b6e0:	e13ffb17 	ldw	r4,-20(fp)
   4b6e4:	20c7883a 	add	r3,r4,r3
   4b6e8:	18c20e04 	addi	r3,r3,2104
   4b6ec:	18c00003 	ldbu	r3,0(r3)
   4b6f0:	18c03fcc 	andi	r3,r3,255
   4b6f4:	18c0201c 	xori	r3,r3,128
   4b6f8:	18ffe004 	addi	r3,r3,-128
   4b6fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b700:	e0bffb17 	ldw	r2,-20(fp)
   4b704:	10800d17 	ldw	r2,52(r2)
   4b708:	10800044 	addi	r2,r2,1
   4b70c:	10c1ffcc 	andi	r3,r2,2047
   4b710:	e0bffb17 	ldw	r2,-20(fp)
   4b714:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4b718:	e0bffa17 	ldw	r2,-24(fp)
   4b71c:	10bfffc4 	addi	r2,r2,-1
   4b720:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b724:	e0bffa17 	ldw	r2,-24(fp)
   4b728:	10000526 	beq	r2,zero,4b740 <altera_avalon_jtag_uart_irq+0x1a8>
   4b72c:	e0bffb17 	ldw	r2,-20(fp)
   4b730:	10c00d17 	ldw	r3,52(r2)
   4b734:	e0bffb17 	ldw	r2,-20(fp)
   4b738:	10800c17 	ldw	r2,48(r2)
   4b73c:	18bfe51e 	bne	r3,r2,4b6d4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4b740:	e0bffa17 	ldw	r2,-24(fp)
   4b744:	103f9e26 	beq	r2,zero,4b5c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b748:	e0bffb17 	ldw	r2,-20(fp)
   4b74c:	10c00817 	ldw	r3,32(r2)
   4b750:	00bfff44 	movi	r2,-3
   4b754:	1886703a 	and	r3,r3,r2
   4b758:	e0bffb17 	ldw	r2,-20(fp)
   4b75c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b760:	e0bffb17 	ldw	r2,-20(fp)
   4b764:	10800017 	ldw	r2,0(r2)
   4b768:	10800104 	addi	r2,r2,4
   4b76c:	e0fffb17 	ldw	r3,-20(fp)
   4b770:	18c00817 	ldw	r3,32(r3)
   4b774:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b778:	e0bffc17 	ldw	r2,-16(fp)
   4b77c:	10800104 	addi	r2,r2,4
   4b780:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4b784:	003f8e06 	br	4b5c0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4b788:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4b78c:	e037883a 	mov	sp,fp
   4b790:	df000017 	ldw	fp,0(sp)
   4b794:	dec00104 	addi	sp,sp,4
   4b798:	f800283a 	ret

0004b79c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4b79c:	defffc04 	addi	sp,sp,-16
   4b7a0:	df000315 	stw	fp,12(sp)
   4b7a4:	df000304 	addi	fp,sp,12
   4b7a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4b7ac:	e0bfff17 	ldw	r2,-4(fp)
   4b7b0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4b7b4:	e0bffd17 	ldw	r2,-12(fp)
   4b7b8:	10800017 	ldw	r2,0(r2)
   4b7bc:	10800104 	addi	r2,r2,4
   4b7c0:	10800037 	ldwio	r2,0(r2)
   4b7c4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4b7c8:	e0bffe17 	ldw	r2,-8(fp)
   4b7cc:	1081000c 	andi	r2,r2,1024
   4b7d0:	10000a26 	beq	r2,zero,4b7fc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4b7d4:	e0bffd17 	ldw	r2,-12(fp)
   4b7d8:	10800017 	ldw	r2,0(r2)
   4b7dc:	10800104 	addi	r2,r2,4
   4b7e0:	e0fffd17 	ldw	r3,-12(fp)
   4b7e4:	18c00817 	ldw	r3,32(r3)
   4b7e8:	18c10014 	ori	r3,r3,1024
   4b7ec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4b7f0:	e0bffd17 	ldw	r2,-12(fp)
   4b7f4:	10000915 	stw	zero,36(r2)
   4b7f8:	00000a06 	br	4b824 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4b7fc:	e0bffd17 	ldw	r2,-12(fp)
   4b800:	10800917 	ldw	r2,36(r2)
   4b804:	00e00034 	movhi	r3,32768
   4b808:	18ffff04 	addi	r3,r3,-4
   4b80c:	18800536 	bltu	r3,r2,4b824 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4b810:	e0bffd17 	ldw	r2,-12(fp)
   4b814:	10800917 	ldw	r2,36(r2)
   4b818:	10c00044 	addi	r3,r2,1
   4b81c:	e0bffd17 	ldw	r2,-12(fp)
   4b820:	10c00915 	stw	r3,36(r2)
   4b824:	00800174 	movhi	r2,5
   4b828:	1083b004 	addi	r2,r2,3776
   4b82c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4b830:	e037883a 	mov	sp,fp
   4b834:	df000017 	ldw	fp,0(sp)
   4b838:	dec00104 	addi	sp,sp,4
   4b83c:	f800283a 	ret

0004b840 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4b840:	defffd04 	addi	sp,sp,-12
   4b844:	df000215 	stw	fp,8(sp)
   4b848:	df000204 	addi	fp,sp,8
   4b84c:	e13ffe15 	stw	r4,-8(fp)
   4b850:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b854:	00000506 	br	4b86c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4b858:	e0bfff17 	ldw	r2,-4(fp)
   4b85c:	1090000c 	andi	r2,r2,16384
   4b860:	10000226 	beq	r2,zero,4b86c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4b864:	00bffd44 	movi	r2,-11
   4b868:	00000b06 	br	4b898 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b86c:	e0bffe17 	ldw	r2,-8(fp)
   4b870:	10c00d17 	ldw	r3,52(r2)
   4b874:	e0bffe17 	ldw	r2,-8(fp)
   4b878:	10800c17 	ldw	r2,48(r2)
   4b87c:	18800526 	beq	r3,r2,4b894 <altera_avalon_jtag_uart_close+0x54>
   4b880:	e0bffe17 	ldw	r2,-8(fp)
   4b884:	10c00917 	ldw	r3,36(r2)
   4b888:	e0bffe17 	ldw	r2,-8(fp)
   4b88c:	10800117 	ldw	r2,4(r2)
   4b890:	18bff136 	bltu	r3,r2,4b858 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4b894:	0005883a 	mov	r2,zero
}
   4b898:	e037883a 	mov	sp,fp
   4b89c:	df000017 	ldw	fp,0(sp)
   4b8a0:	dec00104 	addi	sp,sp,4
   4b8a4:	f800283a 	ret

0004b8a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4b8a8:	defffa04 	addi	sp,sp,-24
   4b8ac:	df000515 	stw	fp,20(sp)
   4b8b0:	df000504 	addi	fp,sp,20
   4b8b4:	e13ffd15 	stw	r4,-12(fp)
   4b8b8:	e17ffe15 	stw	r5,-8(fp)
   4b8bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4b8c0:	00bff9c4 	movi	r2,-25
   4b8c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4b8c8:	e0bffe17 	ldw	r2,-8(fp)
   4b8cc:	10da8060 	cmpeqi	r3,r2,27137
   4b8d0:	1800031e 	bne	r3,zero,4b8e0 <altera_avalon_jtag_uart_ioctl+0x38>
   4b8d4:	109a80a0 	cmpeqi	r2,r2,27138
   4b8d8:	1000181e 	bne	r2,zero,4b93c <altera_avalon_jtag_uart_ioctl+0x94>
   4b8dc:	00002606 	br	4b978 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b8e0:	e0bffd17 	ldw	r2,-12(fp)
   4b8e4:	10c00117 	ldw	r3,4(r2)
   4b8e8:	00a00034 	movhi	r2,32768
   4b8ec:	10bfffc4 	addi	r2,r2,-1
   4b8f0:	18802226 	beq	r3,r2,4b97c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4b8f4:	e0bfff17 	ldw	r2,-4(fp)
   4b8f8:	10800017 	ldw	r2,0(r2)
   4b8fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b900:	e0bffc17 	ldw	r2,-16(fp)
   4b904:	10800090 	cmplti	r2,r2,2
   4b908:	1000061e 	bne	r2,zero,4b924 <altera_avalon_jtag_uart_ioctl+0x7c>
   4b90c:	e0fffc17 	ldw	r3,-16(fp)
   4b910:	00a00034 	movhi	r2,32768
   4b914:	10bfffc4 	addi	r2,r2,-1
   4b918:	18800226 	beq	r3,r2,4b924 <altera_avalon_jtag_uart_ioctl+0x7c>
   4b91c:	e0bffc17 	ldw	r2,-16(fp)
   4b920:	00000206 	br	4b92c <altera_avalon_jtag_uart_ioctl+0x84>
   4b924:	00a00034 	movhi	r2,32768
   4b928:	10bfff84 	addi	r2,r2,-2
   4b92c:	e0fffd17 	ldw	r3,-12(fp)
   4b930:	18800115 	stw	r2,4(r3)
      rc = 0;
   4b934:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4b938:	00001006 	br	4b97c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b93c:	e0bffd17 	ldw	r2,-12(fp)
   4b940:	10c00117 	ldw	r3,4(r2)
   4b944:	00a00034 	movhi	r2,32768
   4b948:	10bfffc4 	addi	r2,r2,-1
   4b94c:	18800d26 	beq	r3,r2,4b984 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b950:	e0bffd17 	ldw	r2,-12(fp)
   4b954:	10c00917 	ldw	r3,36(r2)
   4b958:	e0bffd17 	ldw	r2,-12(fp)
   4b95c:	10800117 	ldw	r2,4(r2)
   4b960:	1885803a 	cmpltu	r2,r3,r2
   4b964:	10c03fcc 	andi	r3,r2,255
   4b968:	e0bfff17 	ldw	r2,-4(fp)
   4b96c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4b970:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4b974:	00000306 	br	4b984 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4b978:	00000306 	br	4b988 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4b97c:	0001883a 	nop
   4b980:	00000106 	br	4b988 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4b984:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4b988:	e0bffb17 	ldw	r2,-20(fp)
}
   4b98c:	e037883a 	mov	sp,fp
   4b990:	df000017 	ldw	fp,0(sp)
   4b994:	dec00104 	addi	sp,sp,4
   4b998:	f800283a 	ret

0004b99c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b99c:	defff304 	addi	sp,sp,-52
   4b9a0:	dfc00c15 	stw	ra,48(sp)
   4b9a4:	df000b15 	stw	fp,44(sp)
   4b9a8:	df000b04 	addi	fp,sp,44
   4b9ac:	e13ffc15 	stw	r4,-16(fp)
   4b9b0:	e17ffd15 	stw	r5,-12(fp)
   4b9b4:	e1bffe15 	stw	r6,-8(fp)
   4b9b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4b9bc:	e0bffd17 	ldw	r2,-12(fp)
   4b9c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b9c4:	00004706 	br	4bae4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b9c8:	e0bffc17 	ldw	r2,-16(fp)
   4b9cc:	10800a17 	ldw	r2,40(r2)
   4b9d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b9d4:	e0bffc17 	ldw	r2,-16(fp)
   4b9d8:	10800b17 	ldw	r2,44(r2)
   4b9dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4b9e0:	e0fff717 	ldw	r3,-36(fp)
   4b9e4:	e0bff817 	ldw	r2,-32(fp)
   4b9e8:	18800536 	bltu	r3,r2,4ba00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b9ec:	e0fff717 	ldw	r3,-36(fp)
   4b9f0:	e0bff817 	ldw	r2,-32(fp)
   4b9f4:	1885c83a 	sub	r2,r3,r2
   4b9f8:	e0bff615 	stw	r2,-40(fp)
   4b9fc:	00000406 	br	4ba10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4ba00:	00c20004 	movi	r3,2048
   4ba04:	e0bff817 	ldw	r2,-32(fp)
   4ba08:	1885c83a 	sub	r2,r3,r2
   4ba0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4ba10:	e0bff617 	ldw	r2,-40(fp)
   4ba14:	10001e26 	beq	r2,zero,4ba90 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4ba18:	e0fffe17 	ldw	r3,-8(fp)
   4ba1c:	e0bff617 	ldw	r2,-40(fp)
   4ba20:	1880022e 	bgeu	r3,r2,4ba2c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4ba24:	e0bffe17 	ldw	r2,-8(fp)
   4ba28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4ba2c:	e0bff817 	ldw	r2,-32(fp)
   4ba30:	10800e04 	addi	r2,r2,56
   4ba34:	e0fffc17 	ldw	r3,-16(fp)
   4ba38:	1885883a 	add	r2,r3,r2
   4ba3c:	e13ff517 	ldw	r4,-44(fp)
   4ba40:	100b883a 	mov	r5,r2
   4ba44:	e1bff617 	ldw	r6,-40(fp)
   4ba48:	00471600 	call	47160 <memcpy>
      ptr   += n;
   4ba4c:	e0fff517 	ldw	r3,-44(fp)
   4ba50:	e0bff617 	ldw	r2,-40(fp)
   4ba54:	1885883a 	add	r2,r3,r2
   4ba58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4ba5c:	e0fffe17 	ldw	r3,-8(fp)
   4ba60:	e0bff617 	ldw	r2,-40(fp)
   4ba64:	1885c83a 	sub	r2,r3,r2
   4ba68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ba6c:	e0fff817 	ldw	r3,-32(fp)
   4ba70:	e0bff617 	ldw	r2,-40(fp)
   4ba74:	1885883a 	add	r2,r3,r2
   4ba78:	10c1ffcc 	andi	r3,r2,2047
   4ba7c:	e0bffc17 	ldw	r2,-16(fp)
   4ba80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4ba84:	e0bffe17 	ldw	r2,-8(fp)
   4ba88:	00bfcf16 	blt	zero,r2,4b9c8 <altera_avalon_jtag_uart_read+0x2c>
   4ba8c:	00000106 	br	4ba94 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4ba90:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4ba94:	e0fff517 	ldw	r3,-44(fp)
   4ba98:	e0bffd17 	ldw	r2,-12(fp)
   4ba9c:	1880141e 	bne	r3,r2,4baf0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4baa0:	e0bfff17 	ldw	r2,-4(fp)
   4baa4:	1090000c 	andi	r2,r2,16384
   4baa8:	1000131e 	bne	r2,zero,4baf8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4baac:	0001883a 	nop
   4bab0:	e0bffc17 	ldw	r2,-16(fp)
   4bab4:	10c00a17 	ldw	r3,40(r2)
   4bab8:	e0bff717 	ldw	r2,-36(fp)
   4babc:	1880051e 	bne	r3,r2,4bad4 <altera_avalon_jtag_uart_read+0x138>
   4bac0:	e0bffc17 	ldw	r2,-16(fp)
   4bac4:	10c00917 	ldw	r3,36(r2)
   4bac8:	e0bffc17 	ldw	r2,-16(fp)
   4bacc:	10800117 	ldw	r2,4(r2)
   4bad0:	18bff736 	bltu	r3,r2,4bab0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4bad4:	e0bffc17 	ldw	r2,-16(fp)
   4bad8:	10c00a17 	ldw	r3,40(r2)
   4badc:	e0bff717 	ldw	r2,-36(fp)
   4bae0:	18800726 	beq	r3,r2,4bb00 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4bae4:	e0bffe17 	ldw	r2,-8(fp)
   4bae8:	00bfb716 	blt	zero,r2,4b9c8 <altera_avalon_jtag_uart_read+0x2c>
   4baec:	00000506 	br	4bb04 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4baf0:	0001883a 	nop
   4baf4:	00000306 	br	4bb04 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4baf8:	0001883a 	nop
   4bafc:	00000106 	br	4bb04 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4bb00:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4bb04:	e0fff517 	ldw	r3,-44(fp)
   4bb08:	e0bffd17 	ldw	r2,-12(fp)
   4bb0c:	18801726 	beq	r3,r2,4bb6c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bb10:	0005303a 	rdctl	r2,status
   4bb14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bb18:	e0fffa17 	ldw	r3,-24(fp)
   4bb1c:	00bfff84 	movi	r2,-2
   4bb20:	1884703a 	and	r2,r3,r2
   4bb24:	1001703a 	wrctl	status,r2
  
  return context;
   4bb28:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4bb2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4bb30:	e0bffc17 	ldw	r2,-16(fp)
   4bb34:	10800817 	ldw	r2,32(r2)
   4bb38:	10c00054 	ori	r3,r2,1
   4bb3c:	e0bffc17 	ldw	r2,-16(fp)
   4bb40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4bb44:	e0bffc17 	ldw	r2,-16(fp)
   4bb48:	10800017 	ldw	r2,0(r2)
   4bb4c:	10800104 	addi	r2,r2,4
   4bb50:	e0fffc17 	ldw	r3,-16(fp)
   4bb54:	18c00817 	ldw	r3,32(r3)
   4bb58:	10c00035 	stwio	r3,0(r2)
   4bb5c:	e0bff917 	ldw	r2,-28(fp)
   4bb60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bb64:	e0bffb17 	ldw	r2,-20(fp)
   4bb68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4bb6c:	e0fff517 	ldw	r3,-44(fp)
   4bb70:	e0bffd17 	ldw	r2,-12(fp)
   4bb74:	18800426 	beq	r3,r2,4bb88 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4bb78:	e0fff517 	ldw	r3,-44(fp)
   4bb7c:	e0bffd17 	ldw	r2,-12(fp)
   4bb80:	1885c83a 	sub	r2,r3,r2
   4bb84:	00000606 	br	4bba0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4bb88:	e0bfff17 	ldw	r2,-4(fp)
   4bb8c:	1090000c 	andi	r2,r2,16384
   4bb90:	10000226 	beq	r2,zero,4bb9c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4bb94:	00bffd44 	movi	r2,-11
   4bb98:	00000106 	br	4bba0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4bb9c:	00bffec4 	movi	r2,-5
}
   4bba0:	e037883a 	mov	sp,fp
   4bba4:	dfc00117 	ldw	ra,4(sp)
   4bba8:	df000017 	ldw	fp,0(sp)
   4bbac:	dec00204 	addi	sp,sp,8
   4bbb0:	f800283a 	ret

0004bbb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4bbb4:	defff304 	addi	sp,sp,-52
   4bbb8:	dfc00c15 	stw	ra,48(sp)
   4bbbc:	df000b15 	stw	fp,44(sp)
   4bbc0:	df000b04 	addi	fp,sp,44
   4bbc4:	e13ffc15 	stw	r4,-16(fp)
   4bbc8:	e17ffd15 	stw	r5,-12(fp)
   4bbcc:	e1bffe15 	stw	r6,-8(fp)
   4bbd0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4bbd4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4bbd8:	e0bffd17 	ldw	r2,-12(fp)
   4bbdc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4bbe0:	00003706 	br	4bcc0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4bbe4:	e0bffc17 	ldw	r2,-16(fp)
   4bbe8:	10800c17 	ldw	r2,48(r2)
   4bbec:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4bbf0:	e0bffc17 	ldw	r2,-16(fp)
   4bbf4:	10800d17 	ldw	r2,52(r2)
   4bbf8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4bbfc:	e0fff817 	ldw	r3,-32(fp)
   4bc00:	e0bff517 	ldw	r2,-44(fp)
   4bc04:	1880062e 	bgeu	r3,r2,4bc20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4bc08:	e0fff517 	ldw	r3,-44(fp)
   4bc0c:	e0bff817 	ldw	r2,-32(fp)
   4bc10:	1885c83a 	sub	r2,r3,r2
   4bc14:	10bfffc4 	addi	r2,r2,-1
   4bc18:	e0bff615 	stw	r2,-40(fp)
   4bc1c:	00000b06 	br	4bc4c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4bc20:	e0bff517 	ldw	r2,-44(fp)
   4bc24:	10000526 	beq	r2,zero,4bc3c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4bc28:	00c20004 	movi	r3,2048
   4bc2c:	e0bff817 	ldw	r2,-32(fp)
   4bc30:	1885c83a 	sub	r2,r3,r2
   4bc34:	e0bff615 	stw	r2,-40(fp)
   4bc38:	00000406 	br	4bc4c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4bc3c:	00c1ffc4 	movi	r3,2047
   4bc40:	e0bff817 	ldw	r2,-32(fp)
   4bc44:	1885c83a 	sub	r2,r3,r2
   4bc48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4bc4c:	e0bff617 	ldw	r2,-40(fp)
   4bc50:	10001e26 	beq	r2,zero,4bccc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4bc54:	e0fffe17 	ldw	r3,-8(fp)
   4bc58:	e0bff617 	ldw	r2,-40(fp)
   4bc5c:	1880022e 	bgeu	r3,r2,4bc68 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4bc60:	e0bffe17 	ldw	r2,-8(fp)
   4bc64:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4bc68:	e0bff817 	ldw	r2,-32(fp)
   4bc6c:	10820e04 	addi	r2,r2,2104
   4bc70:	e0fffc17 	ldw	r3,-16(fp)
   4bc74:	1885883a 	add	r2,r3,r2
   4bc78:	1009883a 	mov	r4,r2
   4bc7c:	e17ffd17 	ldw	r5,-12(fp)
   4bc80:	e1bff617 	ldw	r6,-40(fp)
   4bc84:	00471600 	call	47160 <memcpy>
      ptr   += n;
   4bc88:	e0fffd17 	ldw	r3,-12(fp)
   4bc8c:	e0bff617 	ldw	r2,-40(fp)
   4bc90:	1885883a 	add	r2,r3,r2
   4bc94:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4bc98:	e0fffe17 	ldw	r3,-8(fp)
   4bc9c:	e0bff617 	ldw	r2,-40(fp)
   4bca0:	1885c83a 	sub	r2,r3,r2
   4bca4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4bca8:	e0fff817 	ldw	r3,-32(fp)
   4bcac:	e0bff617 	ldw	r2,-40(fp)
   4bcb0:	1885883a 	add	r2,r3,r2
   4bcb4:	10c1ffcc 	andi	r3,r2,2047
   4bcb8:	e0bffc17 	ldw	r2,-16(fp)
   4bcbc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4bcc0:	e0bffe17 	ldw	r2,-8(fp)
   4bcc4:	00bfc716 	blt	zero,r2,4bbe4 <altera_avalon_jtag_uart_write+0x30>
   4bcc8:	00000106 	br	4bcd0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4bccc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bcd0:	0005303a 	rdctl	r2,status
   4bcd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bcd8:	e0fffa17 	ldw	r3,-24(fp)
   4bcdc:	00bfff84 	movi	r2,-2
   4bce0:	1884703a 	and	r2,r3,r2
   4bce4:	1001703a 	wrctl	status,r2
  
  return context;
   4bce8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4bcec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4bcf0:	e0bffc17 	ldw	r2,-16(fp)
   4bcf4:	10800817 	ldw	r2,32(r2)
   4bcf8:	10c00094 	ori	r3,r2,2
   4bcfc:	e0bffc17 	ldw	r2,-16(fp)
   4bd00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4bd04:	e0bffc17 	ldw	r2,-16(fp)
   4bd08:	10800017 	ldw	r2,0(r2)
   4bd0c:	10800104 	addi	r2,r2,4
   4bd10:	e0fffc17 	ldw	r3,-16(fp)
   4bd14:	18c00817 	ldw	r3,32(r3)
   4bd18:	10c00035 	stwio	r3,0(r2)
   4bd1c:	e0bff917 	ldw	r2,-28(fp)
   4bd20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd24:	e0bffb17 	ldw	r2,-20(fp)
   4bd28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4bd2c:	e0bffe17 	ldw	r2,-8(fp)
   4bd30:	0080110e 	bge	zero,r2,4bd78 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4bd34:	e0bfff17 	ldw	r2,-4(fp)
   4bd38:	1090000c 	andi	r2,r2,16384
   4bd3c:	1000111e 	bne	r2,zero,4bd84 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4bd40:	0001883a 	nop
   4bd44:	e0bffc17 	ldw	r2,-16(fp)
   4bd48:	10c00d17 	ldw	r3,52(r2)
   4bd4c:	e0bff517 	ldw	r2,-44(fp)
   4bd50:	1880051e 	bne	r3,r2,4bd68 <altera_avalon_jtag_uart_write+0x1b4>
   4bd54:	e0bffc17 	ldw	r2,-16(fp)
   4bd58:	10c00917 	ldw	r3,36(r2)
   4bd5c:	e0bffc17 	ldw	r2,-16(fp)
   4bd60:	10800117 	ldw	r2,4(r2)
   4bd64:	18bff736 	bltu	r3,r2,4bd44 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4bd68:	e0bffc17 	ldw	r2,-16(fp)
   4bd6c:	10c00d17 	ldw	r3,52(r2)
   4bd70:	e0bff517 	ldw	r2,-44(fp)
   4bd74:	18800526 	beq	r3,r2,4bd8c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4bd78:	e0bffe17 	ldw	r2,-8(fp)
   4bd7c:	00bfd016 	blt	zero,r2,4bcc0 <altera_avalon_jtag_uart_write+0x10c>
   4bd80:	00000306 	br	4bd90 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4bd84:	0001883a 	nop
   4bd88:	00000106 	br	4bd90 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4bd8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4bd90:	e0fffd17 	ldw	r3,-12(fp)
   4bd94:	e0bff717 	ldw	r2,-36(fp)
   4bd98:	18800426 	beq	r3,r2,4bdac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4bd9c:	e0fffd17 	ldw	r3,-12(fp)
   4bda0:	e0bff717 	ldw	r2,-36(fp)
   4bda4:	1885c83a 	sub	r2,r3,r2
   4bda8:	00000606 	br	4bdc4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4bdac:	e0bfff17 	ldw	r2,-4(fp)
   4bdb0:	1090000c 	andi	r2,r2,16384
   4bdb4:	10000226 	beq	r2,zero,4bdc0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4bdb8:	00bffd44 	movi	r2,-11
   4bdbc:	00000106 	br	4bdc4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4bdc0:	00bffec4 	movi	r2,-5
}
   4bdc4:	e037883a 	mov	sp,fp
   4bdc8:	dfc00117 	ldw	ra,4(sp)
   4bdcc:	df000017 	ldw	fp,0(sp)
   4bdd0:	dec00204 	addi	sp,sp,8
   4bdd4:	f800283a 	ret

0004bdd8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4bdd8:	defffa04 	addi	sp,sp,-24
   4bddc:	dfc00515 	stw	ra,20(sp)
   4bde0:	df000415 	stw	fp,16(sp)
   4bde4:	df000404 	addi	fp,sp,16
   4bde8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4bdec:	0007883a 	mov	r3,zero
   4bdf0:	e0bfff17 	ldw	r2,-4(fp)
   4bdf4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4bdf8:	e0bfff17 	ldw	r2,-4(fp)
   4bdfc:	10800104 	addi	r2,r2,4
   4be00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be04:	0005303a 	rdctl	r2,status
   4be08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be0c:	e0fffd17 	ldw	r3,-12(fp)
   4be10:	00bfff84 	movi	r2,-2
   4be14:	1884703a 	and	r2,r3,r2
   4be18:	1001703a 	wrctl	status,r2
  
  return context;
   4be1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4be20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4be24:	004ca980 	call	4ca98 <alt_tick>
   4be28:	e0bffc17 	ldw	r2,-16(fp)
   4be2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4be30:	e0bffe17 	ldw	r2,-8(fp)
   4be34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4be38:	e037883a 	mov	sp,fp
   4be3c:	dfc00117 	ldw	ra,4(sp)
   4be40:	df000017 	ldw	fp,0(sp)
   4be44:	dec00204 	addi	sp,sp,8
   4be48:	f800283a 	ret

0004be4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4be4c:	defff804 	addi	sp,sp,-32
   4be50:	dfc00715 	stw	ra,28(sp)
   4be54:	df000615 	stw	fp,24(sp)
   4be58:	df000604 	addi	fp,sp,24
   4be5c:	e13ffc15 	stw	r4,-16(fp)
   4be60:	e17ffd15 	stw	r5,-12(fp)
   4be64:	e1bffe15 	stw	r6,-8(fp)
   4be68:	e1ffff15 	stw	r7,-4(fp)
   4be6c:	e0bfff17 	ldw	r2,-4(fp)
   4be70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4be74:	00800174 	movhi	r2,5
   4be78:	1083b004 	addi	r2,r2,3776
   4be7c:	10800017 	ldw	r2,0(r2)
   4be80:	1000041e 	bne	r2,zero,4be94 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4be84:	00800174 	movhi	r2,5
   4be88:	1083b004 	addi	r2,r2,3776
   4be8c:	e0fffb17 	ldw	r3,-20(fp)
   4be90:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4be94:	e0bffc17 	ldw	r2,-16(fp)
   4be98:	10800104 	addi	r2,r2,4
   4be9c:	00c001c4 	movi	r3,7
   4bea0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4bea4:	d8000015 	stw	zero,0(sp)
   4bea8:	e13ffd17 	ldw	r4,-12(fp)
   4beac:	e17ffe17 	ldw	r5,-8(fp)
   4beb0:	01800174 	movhi	r6,5
   4beb4:	31af7604 	addi	r6,r6,-16936
   4beb8:	e1fffc17 	ldw	r7,-16(fp)
   4bebc:	004c3480 	call	4c348 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4bec0:	e037883a 	mov	sp,fp
   4bec4:	dfc00117 	ldw	ra,4(sp)
   4bec8:	df000017 	ldw	fp,0(sp)
   4becc:	dec00204 	addi	sp,sp,8
   4bed0:	f800283a 	ret

0004bed4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   4bed4:	defffe04 	addi	sp,sp,-8
   4bed8:	df000115 	stw	fp,4(sp)
   4bedc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   4bee0:	00800174 	movhi	r2,5
   4bee4:	1083ad04 	addi	r2,r2,3764
   4bee8:	10800017 	ldw	r2,0(r2)
   4beec:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   4bef0:	00800174 	movhi	r2,5
   4bef4:	1083ae04 	addi	r2,r2,3768
   4bef8:	10800017 	ldw	r2,0(r2)
   4befc:	1000021e 	bne	r2,zero,4bf08 <alt_timestamp_start+0x34>
  {
    return -1;
   4bf00:	00bfffc4 	movi	r2,-1
   4bf04:	00001106 	br	4bf4c <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   4bf08:	e0bfff17 	ldw	r2,-4(fp)
   4bf0c:	10800104 	addi	r2,r2,4
   4bf10:	00c00204 	movi	r3,8
   4bf14:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   4bf18:	e0bfff17 	ldw	r2,-4(fp)
   4bf1c:	10800204 	addi	r2,r2,8
   4bf20:	00ffffd4 	movui	r3,65535
   4bf24:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   4bf28:	e0bfff17 	ldw	r2,-4(fp)
   4bf2c:	10800304 	addi	r2,r2,12
   4bf30:	00ffffd4 	movui	r3,65535
   4bf34:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   4bf38:	e0bfff17 	ldw	r2,-4(fp)
   4bf3c:	10800104 	addi	r2,r2,4
   4bf40:	00c00104 	movi	r3,4
   4bf44:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   4bf48:	0005883a 	mov	r2,zero
}
   4bf4c:	e037883a 	mov	sp,fp
   4bf50:	df000017 	ldw	fp,0(sp)
   4bf54:	dec00104 	addi	sp,sp,4
   4bf58:	f800283a 	ret

0004bf5c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   4bf5c:	defffc04 	addi	sp,sp,-16
   4bf60:	df000315 	stw	fp,12(sp)
   4bf64:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   4bf68:	00800174 	movhi	r2,5
   4bf6c:	1083ad04 	addi	r2,r2,3764
   4bf70:	10800017 	ldw	r2,0(r2)
   4bf74:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   4bf78:	00800174 	movhi	r2,5
   4bf7c:	1083ae04 	addi	r2,r2,3768
   4bf80:	10800017 	ldw	r2,0(r2)
   4bf84:	1000021e 	bne	r2,zero,4bf90 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   4bf88:	00bfffc4 	movi	r2,-1
   4bf8c:	00001306 	br	4bfdc <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   4bf90:	e0bffd17 	ldw	r2,-12(fp)
   4bf94:	10800404 	addi	r2,r2,16
   4bf98:	0007883a 	mov	r3,zero
   4bf9c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   4bfa0:	e0bffd17 	ldw	r2,-12(fp)
   4bfa4:	10800404 	addi	r2,r2,16
   4bfa8:	10800037 	ldwio	r2,0(r2)
   4bfac:	10bfffcc 	andi	r2,r2,65535
   4bfb0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   4bfb4:	e0bffd17 	ldw	r2,-12(fp)
   4bfb8:	10800504 	addi	r2,r2,20
   4bfbc:	10800037 	ldwio	r2,0(r2)
   4bfc0:	10bfffcc 	andi	r2,r2,65535
   4bfc4:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   4bfc8:	e0bfff17 	ldw	r2,-4(fp)
   4bfcc:	1006943a 	slli	r3,r2,16
   4bfd0:	e0bffe17 	ldw	r2,-8(fp)
   4bfd4:	1884b03a 	or	r2,r3,r2
   4bfd8:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   4bfdc:	e037883a 	mov	sp,fp
   4bfe0:	df000017 	ldw	fp,0(sp)
   4bfe4:	dec00104 	addi	sp,sp,4
   4bfe8:	f800283a 	ret

0004bfec <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   4bfec:	deffff04 	addi	sp,sp,-4
   4bff0:	df000015 	stw	fp,0(sp)
   4bff4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   4bff8:	00800174 	movhi	r2,5
   4bffc:	1083ae04 	addi	r2,r2,3768
   4c000:	10800017 	ldw	r2,0(r2)
}
   4c004:	e037883a 	mov	sp,fp
   4c008:	df000017 	ldw	fp,0(sp)
   4c00c:	dec00104 	addi	sp,sp,4
   4c010:	f800283a 	ret

0004c014 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4c014:	defff504 	addi	sp,sp,-44
   4c018:	df000a15 	stw	fp,40(sp)
   4c01c:	df000a04 	addi	fp,sp,40
   4c020:	e13ffc15 	stw	r4,-16(fp)
   4c024:	e17ffd15 	stw	r5,-12(fp)
   4c028:	e1bffe15 	stw	r6,-8(fp)
   4c02c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4c030:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4c034:	00800174 	movhi	r2,5
   4c038:	1083b004 	addi	r2,r2,3776
   4c03c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4c040:	10003f26 	beq	r2,zero,4c140 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4c044:	e0bffc17 	ldw	r2,-16(fp)
   4c048:	10003b26 	beq	r2,zero,4c138 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4c04c:	e0bffc17 	ldw	r2,-16(fp)
   4c050:	e0fffe17 	ldw	r3,-8(fp)
   4c054:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4c058:	e0bffc17 	ldw	r2,-16(fp)
   4c05c:	e0ffff17 	ldw	r3,-4(fp)
   4c060:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c064:	0005303a 	rdctl	r2,status
   4c068:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c06c:	e0fff817 	ldw	r3,-32(fp)
   4c070:	00bfff84 	movi	r2,-2
   4c074:	1884703a 	and	r2,r3,r2
   4c078:	1001703a 	wrctl	status,r2
  
  return context;
   4c07c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4c080:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4c084:	00800174 	movhi	r2,5
   4c088:	1083b104 	addi	r2,r2,3780
   4c08c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4c090:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4c094:	e0fffd17 	ldw	r3,-12(fp)
   4c098:	e0bff617 	ldw	r2,-40(fp)
   4c09c:	1885883a 	add	r2,r3,r2
   4c0a0:	10c00044 	addi	r3,r2,1
   4c0a4:	e0bffc17 	ldw	r2,-16(fp)
   4c0a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4c0ac:	e0bffc17 	ldw	r2,-16(fp)
   4c0b0:	10c00217 	ldw	r3,8(r2)
   4c0b4:	e0bff617 	ldw	r2,-40(fp)
   4c0b8:	1880042e 	bgeu	r3,r2,4c0cc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4c0bc:	e0bffc17 	ldw	r2,-16(fp)
   4c0c0:	00c00044 	movi	r3,1
   4c0c4:	10c00405 	stb	r3,16(r2)
   4c0c8:	00000206 	br	4c0d4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4c0cc:	e0bffc17 	ldw	r2,-16(fp)
   4c0d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4c0d4:	e0bffc17 	ldw	r2,-16(fp)
   4c0d8:	00c00174 	movhi	r3,5
   4c0dc:	18fd0b04 	addi	r3,r3,-3028
   4c0e0:	e0fff915 	stw	r3,-28(fp)
   4c0e4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4c0e8:	e0bffa17 	ldw	r2,-24(fp)
   4c0ec:	e0fff917 	ldw	r3,-28(fp)
   4c0f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4c0f4:	e0bff917 	ldw	r2,-28(fp)
   4c0f8:	10c00017 	ldw	r3,0(r2)
   4c0fc:	e0bffa17 	ldw	r2,-24(fp)
   4c100:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c104:	e0bff917 	ldw	r2,-28(fp)
   4c108:	10800017 	ldw	r2,0(r2)
   4c10c:	e0fffa17 	ldw	r3,-24(fp)
   4c110:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4c114:	e0bff917 	ldw	r2,-28(fp)
   4c118:	e0fffa17 	ldw	r3,-24(fp)
   4c11c:	10c00015 	stw	r3,0(r2)
   4c120:	e0bff717 	ldw	r2,-36(fp)
   4c124:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c128:	e0bffb17 	ldw	r2,-20(fp)
   4c12c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4c130:	0005883a 	mov	r2,zero
   4c134:	00000306 	br	4c144 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4c138:	00bffa84 	movi	r2,-22
   4c13c:	00000106 	br	4c144 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4c140:	00bfde84 	movi	r2,-134
  }
}
   4c144:	e037883a 	mov	sp,fp
   4c148:	df000017 	ldw	fp,0(sp)
   4c14c:	dec00104 	addi	sp,sp,4
   4c150:	f800283a 	ret

0004c154 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4c154:	deffff04 	addi	sp,sp,-4
   4c158:	df000015 	stw	fp,0(sp)
   4c15c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4c160:	e037883a 	mov	sp,fp
   4c164:	df000017 	ldw	fp,0(sp)
   4c168:	dec00104 	addi	sp,sp,4
   4c16c:	f800283a 	ret

0004c170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c170:	defffe04 	addi	sp,sp,-8
   4c174:	dfc00115 	stw	ra,4(sp)
   4c178:	df000015 	stw	fp,0(sp)
   4c17c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c180:	00800174 	movhi	r2,5
   4c184:	10bd0804 	addi	r2,r2,-3040
   4c188:	10800017 	ldw	r2,0(r2)
   4c18c:	10000526 	beq	r2,zero,4c1a4 <alt_get_errno+0x34>
   4c190:	00800174 	movhi	r2,5
   4c194:	10bd0804 	addi	r2,r2,-3040
   4c198:	10800017 	ldw	r2,0(r2)
   4c19c:	103ee83a 	callr	r2
   4c1a0:	00000206 	br	4c1ac <alt_get_errno+0x3c>
   4c1a4:	00800174 	movhi	r2,5
   4c1a8:	1083a904 	addi	r2,r2,3748
}
   4c1ac:	e037883a 	mov	sp,fp
   4c1b0:	dfc00117 	ldw	ra,4(sp)
   4c1b4:	df000017 	ldw	fp,0(sp)
   4c1b8:	dec00204 	addi	sp,sp,8
   4c1bc:	f800283a 	ret

0004c1c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4c1c0:	defffa04 	addi	sp,sp,-24
   4c1c4:	dfc00515 	stw	ra,20(sp)
   4c1c8:	df000415 	stw	fp,16(sp)
   4c1cc:	df000404 	addi	fp,sp,16
   4c1d0:	e13ffe15 	stw	r4,-8(fp)
   4c1d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4c1d8:	e0bffe17 	ldw	r2,-8(fp)
   4c1dc:	10000326 	beq	r2,zero,4c1ec <alt_dev_llist_insert+0x2c>
   4c1e0:	e0bffe17 	ldw	r2,-8(fp)
   4c1e4:	10800217 	ldw	r2,8(r2)
   4c1e8:	1000051e 	bne	r2,zero,4c200 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4c1ec:	004c1700 	call	4c170 <alt_get_errno>
   4c1f0:	00c00584 	movi	r3,22
   4c1f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4c1f8:	00bffa84 	movi	r2,-22
   4c1fc:	00001306 	br	4c24c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4c200:	e0bffe17 	ldw	r2,-8(fp)
   4c204:	e0ffff17 	ldw	r3,-4(fp)
   4c208:	e0fffc15 	stw	r3,-16(fp)
   4c20c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4c210:	e0bffd17 	ldw	r2,-12(fp)
   4c214:	e0fffc17 	ldw	r3,-16(fp)
   4c218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4c21c:	e0bffc17 	ldw	r2,-16(fp)
   4c220:	10c00017 	ldw	r3,0(r2)
   4c224:	e0bffd17 	ldw	r2,-12(fp)
   4c228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c22c:	e0bffc17 	ldw	r2,-16(fp)
   4c230:	10800017 	ldw	r2,0(r2)
   4c234:	e0fffd17 	ldw	r3,-12(fp)
   4c238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4c23c:	e0bffc17 	ldw	r2,-16(fp)
   4c240:	e0fffd17 	ldw	r3,-12(fp)
   4c244:	10c00015 	stw	r3,0(r2)

  return 0;  
   4c248:	0005883a 	mov	r2,zero
}
   4c24c:	e037883a 	mov	sp,fp
   4c250:	dfc00117 	ldw	ra,4(sp)
   4c254:	df000017 	ldw	fp,0(sp)
   4c258:	dec00204 	addi	sp,sp,8
   4c25c:	f800283a 	ret

0004c260 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4c260:	defffd04 	addi	sp,sp,-12
   4c264:	dfc00215 	stw	ra,8(sp)
   4c268:	df000115 	stw	fp,4(sp)
   4c26c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c270:	00800174 	movhi	r2,5
   4c274:	10b41f04 	addi	r2,r2,-12164
   4c278:	e0bfff15 	stw	r2,-4(fp)
   4c27c:	00000606 	br	4c298 <_do_ctors+0x38>
        (*ctor) (); 
   4c280:	e0bfff17 	ldw	r2,-4(fp)
   4c284:	10800017 	ldw	r2,0(r2)
   4c288:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c28c:	e0bfff17 	ldw	r2,-4(fp)
   4c290:	10bfff04 	addi	r2,r2,-4
   4c294:	e0bfff15 	stw	r2,-4(fp)
   4c298:	e0ffff17 	ldw	r3,-4(fp)
   4c29c:	00800174 	movhi	r2,5
   4c2a0:	10b42004 	addi	r2,r2,-12160
   4c2a4:	18bff62e 	bgeu	r3,r2,4c280 <_do_ctors+0x20>
        (*ctor) (); 
}
   4c2a8:	e037883a 	mov	sp,fp
   4c2ac:	dfc00117 	ldw	ra,4(sp)
   4c2b0:	df000017 	ldw	fp,0(sp)
   4c2b4:	dec00204 	addi	sp,sp,8
   4c2b8:	f800283a 	ret

0004c2bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4c2bc:	defffd04 	addi	sp,sp,-12
   4c2c0:	dfc00215 	stw	ra,8(sp)
   4c2c4:	df000115 	stw	fp,4(sp)
   4c2c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c2cc:	00800174 	movhi	r2,5
   4c2d0:	10b41f04 	addi	r2,r2,-12164
   4c2d4:	e0bfff15 	stw	r2,-4(fp)
   4c2d8:	00000606 	br	4c2f4 <_do_dtors+0x38>
        (*dtor) (); 
   4c2dc:	e0bfff17 	ldw	r2,-4(fp)
   4c2e0:	10800017 	ldw	r2,0(r2)
   4c2e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c2e8:	e0bfff17 	ldw	r2,-4(fp)
   4c2ec:	10bfff04 	addi	r2,r2,-4
   4c2f0:	e0bfff15 	stw	r2,-4(fp)
   4c2f4:	e0ffff17 	ldw	r3,-4(fp)
   4c2f8:	00800174 	movhi	r2,5
   4c2fc:	10b42004 	addi	r2,r2,-12160
   4c300:	18bff62e 	bgeu	r3,r2,4c2dc <_do_dtors+0x20>
        (*dtor) (); 
}
   4c304:	e037883a 	mov	sp,fp
   4c308:	dfc00117 	ldw	ra,4(sp)
   4c30c:	df000017 	ldw	fp,0(sp)
   4c310:	dec00204 	addi	sp,sp,8
   4c314:	f800283a 	ret

0004c318 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4c318:	defffe04 	addi	sp,sp,-8
   4c31c:	dfc00115 	stw	ra,4(sp)
   4c320:	df000015 	stw	fp,0(sp)
   4c324:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4c328:	0009883a 	mov	r4,zero
   4c32c:	01440004 	movi	r5,4096
   4c330:	004ce340 	call	4ce34 <alt_icache_flush>
#endif
}
   4c334:	e037883a 	mov	sp,fp
   4c338:	dfc00117 	ldw	ra,4(sp)
   4c33c:	df000017 	ldw	fp,0(sp)
   4c340:	dec00204 	addi	sp,sp,8
   4c344:	f800283a 	ret

0004c348 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c348:	defff904 	addi	sp,sp,-28
   4c34c:	dfc00615 	stw	ra,24(sp)
   4c350:	df000515 	stw	fp,20(sp)
   4c354:	df000504 	addi	fp,sp,20
   4c358:	e13ffc15 	stw	r4,-16(fp)
   4c35c:	e17ffd15 	stw	r5,-12(fp)
   4c360:	e1bffe15 	stw	r6,-8(fp)
   4c364:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4c368:	e0800217 	ldw	r2,8(fp)
   4c36c:	d8800015 	stw	r2,0(sp)
   4c370:	e13ffc17 	ldw	r4,-16(fp)
   4c374:	e17ffd17 	ldw	r5,-12(fp)
   4c378:	e1bffe17 	ldw	r6,-8(fp)
   4c37c:	e1ffff17 	ldw	r7,-4(fp)
   4c380:	004c5200 	call	4c520 <alt_iic_isr_register>
}  
   4c384:	e037883a 	mov	sp,fp
   4c388:	dfc00117 	ldw	ra,4(sp)
   4c38c:	df000017 	ldw	fp,0(sp)
   4c390:	dec00204 	addi	sp,sp,8
   4c394:	f800283a 	ret

0004c398 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4c398:	defff904 	addi	sp,sp,-28
   4c39c:	df000615 	stw	fp,24(sp)
   4c3a0:	df000604 	addi	fp,sp,24
   4c3a4:	e13ffe15 	stw	r4,-8(fp)
   4c3a8:	e17fff15 	stw	r5,-4(fp)
   4c3ac:	e0bfff17 	ldw	r2,-4(fp)
   4c3b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c3b4:	0005303a 	rdctl	r2,status
   4c3b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c3bc:	e0fffb17 	ldw	r3,-20(fp)
   4c3c0:	00bfff84 	movi	r2,-2
   4c3c4:	1884703a 	and	r2,r3,r2
   4c3c8:	1001703a 	wrctl	status,r2
  
  return context;
   4c3cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c3d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4c3d4:	e0bffa17 	ldw	r2,-24(fp)
   4c3d8:	00c00044 	movi	r3,1
   4c3dc:	1884983a 	sll	r2,r3,r2
   4c3e0:	1007883a 	mov	r3,r2
   4c3e4:	00800174 	movhi	r2,5
   4c3e8:	1083af04 	addi	r2,r2,3772
   4c3ec:	10800017 	ldw	r2,0(r2)
   4c3f0:	1886b03a 	or	r3,r3,r2
   4c3f4:	00800174 	movhi	r2,5
   4c3f8:	1083af04 	addi	r2,r2,3772
   4c3fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c400:	00800174 	movhi	r2,5
   4c404:	1083af04 	addi	r2,r2,3772
   4c408:	10800017 	ldw	r2,0(r2)
   4c40c:	100170fa 	wrctl	ienable,r2
   4c410:	e0bffc17 	ldw	r2,-16(fp)
   4c414:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c418:	e0bffd17 	ldw	r2,-12(fp)
   4c41c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c420:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4c424:	e037883a 	mov	sp,fp
   4c428:	df000017 	ldw	fp,0(sp)
   4c42c:	dec00104 	addi	sp,sp,4
   4c430:	f800283a 	ret

0004c434 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4c434:	defff904 	addi	sp,sp,-28
   4c438:	df000615 	stw	fp,24(sp)
   4c43c:	df000604 	addi	fp,sp,24
   4c440:	e13ffe15 	stw	r4,-8(fp)
   4c444:	e17fff15 	stw	r5,-4(fp)
   4c448:	e0bfff17 	ldw	r2,-4(fp)
   4c44c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c450:	0005303a 	rdctl	r2,status
   4c454:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c458:	e0fffb17 	ldw	r3,-20(fp)
   4c45c:	00bfff84 	movi	r2,-2
   4c460:	1884703a 	and	r2,r3,r2
   4c464:	1001703a 	wrctl	status,r2
  
  return context;
   4c468:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c46c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4c470:	e0bffa17 	ldw	r2,-24(fp)
   4c474:	00c00044 	movi	r3,1
   4c478:	1884983a 	sll	r2,r3,r2
   4c47c:	0084303a 	nor	r2,zero,r2
   4c480:	1007883a 	mov	r3,r2
   4c484:	00800174 	movhi	r2,5
   4c488:	1083af04 	addi	r2,r2,3772
   4c48c:	10800017 	ldw	r2,0(r2)
   4c490:	1886703a 	and	r3,r3,r2
   4c494:	00800174 	movhi	r2,5
   4c498:	1083af04 	addi	r2,r2,3772
   4c49c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c4a0:	00800174 	movhi	r2,5
   4c4a4:	1083af04 	addi	r2,r2,3772
   4c4a8:	10800017 	ldw	r2,0(r2)
   4c4ac:	100170fa 	wrctl	ienable,r2
   4c4b0:	e0bffc17 	ldw	r2,-16(fp)
   4c4b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c4b8:	e0bffd17 	ldw	r2,-12(fp)
   4c4bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c4c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4c4c4:	e037883a 	mov	sp,fp
   4c4c8:	df000017 	ldw	fp,0(sp)
   4c4cc:	dec00104 	addi	sp,sp,4
   4c4d0:	f800283a 	ret

0004c4d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4c4d4:	defffc04 	addi	sp,sp,-16
   4c4d8:	df000315 	stw	fp,12(sp)
   4c4dc:	df000304 	addi	fp,sp,12
   4c4e0:	e13ffe15 	stw	r4,-8(fp)
   4c4e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4c4e8:	000530fa 	rdctl	r2,ienable
   4c4ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4c4f0:	e0bfff17 	ldw	r2,-4(fp)
   4c4f4:	00c00044 	movi	r3,1
   4c4f8:	1884983a 	sll	r2,r3,r2
   4c4fc:	1007883a 	mov	r3,r2
   4c500:	e0bffd17 	ldw	r2,-12(fp)
   4c504:	1884703a 	and	r2,r3,r2
   4c508:	1004c03a 	cmpne	r2,r2,zero
   4c50c:	10803fcc 	andi	r2,r2,255
}
   4c510:	e037883a 	mov	sp,fp
   4c514:	df000017 	ldw	fp,0(sp)
   4c518:	dec00104 	addi	sp,sp,4
   4c51c:	f800283a 	ret

0004c520 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c520:	defff504 	addi	sp,sp,-44
   4c524:	dfc00a15 	stw	ra,40(sp)
   4c528:	df000915 	stw	fp,36(sp)
   4c52c:	df000904 	addi	fp,sp,36
   4c530:	e13ffc15 	stw	r4,-16(fp)
   4c534:	e17ffd15 	stw	r5,-12(fp)
   4c538:	e1bffe15 	stw	r6,-8(fp)
   4c53c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4c540:	00bffa84 	movi	r2,-22
   4c544:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4c548:	e0bffd17 	ldw	r2,-12(fp)
   4c54c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4c550:	e0bff817 	ldw	r2,-32(fp)
   4c554:	10800808 	cmpgei	r2,r2,32
   4c558:	1000271e 	bne	r2,zero,4c5f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c55c:	0005303a 	rdctl	r2,status
   4c560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c564:	e0fffa17 	ldw	r3,-24(fp)
   4c568:	00bfff84 	movi	r2,-2
   4c56c:	1884703a 	and	r2,r3,r2
   4c570:	1001703a 	wrctl	status,r2
  
  return context;
   4c574:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4c578:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4c57c:	00c00174 	movhi	r3,5
   4c580:	18ccbc04 	addi	r3,r3,13040
   4c584:	e0bff817 	ldw	r2,-32(fp)
   4c588:	100490fa 	slli	r2,r2,3
   4c58c:	1885883a 	add	r2,r3,r2
   4c590:	e0fffe17 	ldw	r3,-8(fp)
   4c594:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4c598:	00c00174 	movhi	r3,5
   4c59c:	18ccbc04 	addi	r3,r3,13040
   4c5a0:	e0bff817 	ldw	r2,-32(fp)
   4c5a4:	100490fa 	slli	r2,r2,3
   4c5a8:	1885883a 	add	r2,r3,r2
   4c5ac:	10800104 	addi	r2,r2,4
   4c5b0:	e0ffff17 	ldw	r3,-4(fp)
   4c5b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4c5b8:	e0bffe17 	ldw	r2,-8(fp)
   4c5bc:	10000526 	beq	r2,zero,4c5d4 <alt_iic_isr_register+0xb4>
   4c5c0:	e0bff817 	ldw	r2,-32(fp)
   4c5c4:	e13ffc17 	ldw	r4,-16(fp)
   4c5c8:	100b883a 	mov	r5,r2
   4c5cc:	004c3980 	call	4c398 <alt_ic_irq_enable>
   4c5d0:	00000406 	br	4c5e4 <alt_iic_isr_register+0xc4>
   4c5d4:	e0bff817 	ldw	r2,-32(fp)
   4c5d8:	e13ffc17 	ldw	r4,-16(fp)
   4c5dc:	100b883a 	mov	r5,r2
   4c5e0:	004c4340 	call	4c434 <alt_ic_irq_disable>
   4c5e4:	e0bff715 	stw	r2,-36(fp)
   4c5e8:	e0bff917 	ldw	r2,-28(fp)
   4c5ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c5f0:	e0bffb17 	ldw	r2,-20(fp)
   4c5f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4c5f8:	e0bff717 	ldw	r2,-36(fp)
}
   4c5fc:	e037883a 	mov	sp,fp
   4c600:	dfc00117 	ldw	ra,4(sp)
   4c604:	df000017 	ldw	fp,0(sp)
   4c608:	dec00204 	addi	sp,sp,8
   4c60c:	f800283a 	ret

0004c610 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c610:	defff804 	addi	sp,sp,-32
   4c614:	dfc00715 	stw	ra,28(sp)
   4c618:	df000615 	stw	fp,24(sp)
   4c61c:	dc000515 	stw	r16,20(sp)
   4c620:	df000504 	addi	fp,sp,20
   4c624:	e13ffc15 	stw	r4,-16(fp)
   4c628:	e17ffd15 	stw	r5,-12(fp)
   4c62c:	e1bffe15 	stw	r6,-8(fp)
   4c630:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c634:	e13ffd17 	ldw	r4,-12(fp)
   4c638:	e17ffe17 	ldw	r5,-8(fp)
   4c63c:	e1bfff17 	ldw	r6,-4(fp)
   4c640:	004c8a80 	call	4c8a8 <open>
   4c644:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c648:	e0bffb17 	ldw	r2,-20(fp)
   4c64c:	10002216 	blt	r2,zero,4c6d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c650:	04000174 	movhi	r16,5
   4c654:	84388604 	addi	r16,r16,-7656
   4c658:	e0bffb17 	ldw	r2,-20(fp)
   4c65c:	1009883a 	mov	r4,r2
   4c660:	01400304 	movi	r5,12
   4c664:	0041a580 	call	41a58 <__mulsi3>
   4c668:	8085883a 	add	r2,r16,r2
   4c66c:	10c00017 	ldw	r3,0(r2)
   4c670:	e0bffc17 	ldw	r2,-16(fp)
   4c674:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c678:	04000174 	movhi	r16,5
   4c67c:	84388604 	addi	r16,r16,-7656
   4c680:	e0bffb17 	ldw	r2,-20(fp)
   4c684:	1009883a 	mov	r4,r2
   4c688:	01400304 	movi	r5,12
   4c68c:	0041a580 	call	41a58 <__mulsi3>
   4c690:	8085883a 	add	r2,r16,r2
   4c694:	10800104 	addi	r2,r2,4
   4c698:	10c00017 	ldw	r3,0(r2)
   4c69c:	e0bffc17 	ldw	r2,-16(fp)
   4c6a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c6a4:	04000174 	movhi	r16,5
   4c6a8:	84388604 	addi	r16,r16,-7656
   4c6ac:	e0bffb17 	ldw	r2,-20(fp)
   4c6b0:	1009883a 	mov	r4,r2
   4c6b4:	01400304 	movi	r5,12
   4c6b8:	0041a580 	call	41a58 <__mulsi3>
   4c6bc:	8085883a 	add	r2,r16,r2
   4c6c0:	10800204 	addi	r2,r2,8
   4c6c4:	10c00017 	ldw	r3,0(r2)
   4c6c8:	e0bffc17 	ldw	r2,-16(fp)
   4c6cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c6d0:	e13ffb17 	ldw	r4,-20(fp)
   4c6d4:	004b0180 	call	4b018 <alt_release_fd>
  }
} 
   4c6d8:	e037883a 	mov	sp,fp
   4c6dc:	dfc00217 	ldw	ra,8(sp)
   4c6e0:	df000117 	ldw	fp,4(sp)
   4c6e4:	dc000017 	ldw	r16,0(sp)
   4c6e8:	dec00304 	addi	sp,sp,12
   4c6ec:	f800283a 	ret

0004c6f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c6f0:	defffb04 	addi	sp,sp,-20
   4c6f4:	dfc00415 	stw	ra,16(sp)
   4c6f8:	df000315 	stw	fp,12(sp)
   4c6fc:	df000304 	addi	fp,sp,12
   4c700:	e13ffd15 	stw	r4,-12(fp)
   4c704:	e17ffe15 	stw	r5,-8(fp)
   4c708:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c70c:	01000174 	movhi	r4,5
   4c710:	21388904 	addi	r4,r4,-7644
   4c714:	e17ffd17 	ldw	r5,-12(fp)
   4c718:	01800044 	movi	r6,1
   4c71c:	01c07fc4 	movi	r7,511
   4c720:	004c6100 	call	4c610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c724:	01000174 	movhi	r4,5
   4c728:	21388604 	addi	r4,r4,-7656
   4c72c:	e17ffe17 	ldw	r5,-8(fp)
   4c730:	000d883a 	mov	r6,zero
   4c734:	01c07fc4 	movi	r7,511
   4c738:	004c6100 	call	4c610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c73c:	01000174 	movhi	r4,5
   4c740:	21388c04 	addi	r4,r4,-7632
   4c744:	e17fff17 	ldw	r5,-4(fp)
   4c748:	01800044 	movi	r6,1
   4c74c:	01c07fc4 	movi	r7,511
   4c750:	004c6100 	call	4c610 <alt_open_fd>
}  
   4c754:	e037883a 	mov	sp,fp
   4c758:	dfc00117 	ldw	ra,4(sp)
   4c75c:	df000017 	ldw	fp,0(sp)
   4c760:	dec00204 	addi	sp,sp,8
   4c764:	f800283a 	ret

0004c768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c768:	defffe04 	addi	sp,sp,-8
   4c76c:	dfc00115 	stw	ra,4(sp)
   4c770:	df000015 	stw	fp,0(sp)
   4c774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c778:	00800174 	movhi	r2,5
   4c77c:	10bd0804 	addi	r2,r2,-3040
   4c780:	10800017 	ldw	r2,0(r2)
   4c784:	10000526 	beq	r2,zero,4c79c <alt_get_errno+0x34>
   4c788:	00800174 	movhi	r2,5
   4c78c:	10bd0804 	addi	r2,r2,-3040
   4c790:	10800017 	ldw	r2,0(r2)
   4c794:	103ee83a 	callr	r2
   4c798:	00000206 	br	4c7a4 <alt_get_errno+0x3c>
   4c79c:	00800174 	movhi	r2,5
   4c7a0:	1083a904 	addi	r2,r2,3748
}
   4c7a4:	e037883a 	mov	sp,fp
   4c7a8:	dfc00117 	ldw	ra,4(sp)
   4c7ac:	df000017 	ldw	fp,0(sp)
   4c7b0:	dec00204 	addi	sp,sp,8
   4c7b4:	f800283a 	ret

0004c7b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c7b8:	defffb04 	addi	sp,sp,-20
   4c7bc:	dfc00415 	stw	ra,16(sp)
   4c7c0:	df000315 	stw	fp,12(sp)
   4c7c4:	dc000215 	stw	r16,8(sp)
   4c7c8:	df000204 	addi	fp,sp,8
   4c7cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c7d0:	e0bfff17 	ldw	r2,-4(fp)
   4c7d4:	10800217 	ldw	r2,8(r2)
   4c7d8:	10d00034 	orhi	r3,r2,16384
   4c7dc:	e0bfff17 	ldw	r2,-4(fp)
   4c7e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c7e4:	e03ffe15 	stw	zero,-8(fp)
   4c7e8:	00002206 	br	4c874 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c7ec:	04000174 	movhi	r16,5
   4c7f0:	84388604 	addi	r16,r16,-7656
   4c7f4:	e0bffe17 	ldw	r2,-8(fp)
   4c7f8:	1009883a 	mov	r4,r2
   4c7fc:	01400304 	movi	r5,12
   4c800:	0041a580 	call	41a58 <__mulsi3>
   4c804:	8085883a 	add	r2,r16,r2
   4c808:	10c00017 	ldw	r3,0(r2)
   4c80c:	e0bfff17 	ldw	r2,-4(fp)
   4c810:	10800017 	ldw	r2,0(r2)
   4c814:	1880141e 	bne	r3,r2,4c868 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c818:	04000174 	movhi	r16,5
   4c81c:	84388604 	addi	r16,r16,-7656
   4c820:	e0bffe17 	ldw	r2,-8(fp)
   4c824:	1009883a 	mov	r4,r2
   4c828:	01400304 	movi	r5,12
   4c82c:	0041a580 	call	41a58 <__mulsi3>
   4c830:	8085883a 	add	r2,r16,r2
   4c834:	10800204 	addi	r2,r2,8
   4c838:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c83c:	10000a0e 	bge	r2,zero,4c868 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4c840:	e13ffe17 	ldw	r4,-8(fp)
   4c844:	01400304 	movi	r5,12
   4c848:	0041a580 	call	41a58 <__mulsi3>
   4c84c:	00c00174 	movhi	r3,5
   4c850:	18f88604 	addi	r3,r3,-7656
   4c854:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4c858:	e0bfff17 	ldw	r2,-4(fp)
   4c85c:	18800226 	beq	r3,r2,4c868 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c860:	00bffcc4 	movi	r2,-13
   4c864:	00000a06 	br	4c890 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c868:	e0bffe17 	ldw	r2,-8(fp)
   4c86c:	10800044 	addi	r2,r2,1
   4c870:	e0bffe15 	stw	r2,-8(fp)
   4c874:	00800174 	movhi	r2,5
   4c878:	10bd0704 	addi	r2,r2,-3044
   4c87c:	10800017 	ldw	r2,0(r2)
   4c880:	1007883a 	mov	r3,r2
   4c884:	e0bffe17 	ldw	r2,-8(fp)
   4c888:	18bfd82e 	bgeu	r3,r2,4c7ec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c88c:	0005883a 	mov	r2,zero
}
   4c890:	e037883a 	mov	sp,fp
   4c894:	dfc00217 	ldw	ra,8(sp)
   4c898:	df000117 	ldw	fp,4(sp)
   4c89c:	dc000017 	ldw	r16,0(sp)
   4c8a0:	dec00304 	addi	sp,sp,12
   4c8a4:	f800283a 	ret

0004c8a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c8a8:	defff604 	addi	sp,sp,-40
   4c8ac:	dfc00915 	stw	ra,36(sp)
   4c8b0:	df000815 	stw	fp,32(sp)
   4c8b4:	df000804 	addi	fp,sp,32
   4c8b8:	e13ffd15 	stw	r4,-12(fp)
   4c8bc:	e17ffe15 	stw	r5,-8(fp)
   4c8c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c8c4:	00bfffc4 	movi	r2,-1
   4c8c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4c8cc:	00bffb44 	movi	r2,-19
   4c8d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4c8d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c8d8:	e13ffd17 	ldw	r4,-12(fp)
   4c8dc:	01400174 	movhi	r5,5
   4c8e0:	297d0504 	addi	r5,r5,-3052
   4c8e4:	004cbbc0 	call	4cbbc <alt_find_dev>
   4c8e8:	e0bff815 	stw	r2,-32(fp)
   4c8ec:	e0bff817 	ldw	r2,-32(fp)
   4c8f0:	1000051e 	bne	r2,zero,4c908 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c8f4:	e13ffd17 	ldw	r4,-12(fp)
   4c8f8:	004cc4c0 	call	4cc4c <alt_find_file>
   4c8fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4c900:	00800044 	movi	r2,1
   4c904:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c908:	e0bff817 	ldw	r2,-32(fp)
   4c90c:	10002a26 	beq	r2,zero,4c9b8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c910:	e13ff817 	ldw	r4,-32(fp)
   4c914:	004cd600 	call	4cd60 <alt_get_fd>
   4c918:	e0bff915 	stw	r2,-28(fp)
   4c91c:	e0bff917 	ldw	r2,-28(fp)
   4c920:	1000030e 	bge	r2,zero,4c930 <open+0x88>
    {
      status = index;
   4c924:	e0bff917 	ldw	r2,-28(fp)
   4c928:	e0bffa15 	stw	r2,-24(fp)
   4c92c:	00002406 	br	4c9c0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c930:	e13ff917 	ldw	r4,-28(fp)
   4c934:	01400304 	movi	r5,12
   4c938:	0041a580 	call	41a58 <__mulsi3>
   4c93c:	00c00174 	movhi	r3,5
   4c940:	18f88604 	addi	r3,r3,-7656
   4c944:	10c5883a 	add	r2,r2,r3
   4c948:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c94c:	e0fffe17 	ldw	r3,-8(fp)
   4c950:	00900034 	movhi	r2,16384
   4c954:	10bfffc4 	addi	r2,r2,-1
   4c958:	1886703a 	and	r3,r3,r2
   4c95c:	e0bffc17 	ldw	r2,-16(fp)
   4c960:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c964:	e0bffb17 	ldw	r2,-20(fp)
   4c968:	1000051e 	bne	r2,zero,4c980 <open+0xd8>
   4c96c:	e13ffc17 	ldw	r4,-16(fp)
   4c970:	004c7b80 	call	4c7b8 <alt_file_locked>
   4c974:	e0bffa15 	stw	r2,-24(fp)
   4c978:	e0bffa17 	ldw	r2,-24(fp)
   4c97c:	10001016 	blt	r2,zero,4c9c0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c980:	e0bff817 	ldw	r2,-32(fp)
   4c984:	10800317 	ldw	r2,12(r2)
   4c988:	10000826 	beq	r2,zero,4c9ac <open+0x104>
   4c98c:	e0bff817 	ldw	r2,-32(fp)
   4c990:	10800317 	ldw	r2,12(r2)
   4c994:	e13ffc17 	ldw	r4,-16(fp)
   4c998:	e17ffd17 	ldw	r5,-12(fp)
   4c99c:	e1bffe17 	ldw	r6,-8(fp)
   4c9a0:	e1ffff17 	ldw	r7,-4(fp)
   4c9a4:	103ee83a 	callr	r2
   4c9a8:	00000106 	br	4c9b0 <open+0x108>
   4c9ac:	0005883a 	mov	r2,zero
   4c9b0:	e0bffa15 	stw	r2,-24(fp)
   4c9b4:	00000206 	br	4c9c0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c9b8:	00bffb44 	movi	r2,-19
   4c9bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c9c0:	e0bffa17 	ldw	r2,-24(fp)
   4c9c4:	1000080e 	bge	r2,zero,4c9e8 <open+0x140>
  {
    alt_release_fd (index);  
   4c9c8:	e13ff917 	ldw	r4,-28(fp)
   4c9cc:	004b0180 	call	4b018 <alt_release_fd>
    ALT_ERRNO = -status;
   4c9d0:	004c7680 	call	4c768 <alt_get_errno>
   4c9d4:	e0fffa17 	ldw	r3,-24(fp)
   4c9d8:	00c7c83a 	sub	r3,zero,r3
   4c9dc:	10c00015 	stw	r3,0(r2)
    return -1;
   4c9e0:	00bfffc4 	movi	r2,-1
   4c9e4:	00000106 	br	4c9ec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4c9e8:	e0bff917 	ldw	r2,-28(fp)
}
   4c9ec:	e037883a 	mov	sp,fp
   4c9f0:	dfc00117 	ldw	ra,4(sp)
   4c9f4:	df000017 	ldw	fp,0(sp)
   4c9f8:	dec00204 	addi	sp,sp,8
   4c9fc:	f800283a 	ret

0004ca00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4ca00:	defffa04 	addi	sp,sp,-24
   4ca04:	df000515 	stw	fp,20(sp)
   4ca08:	df000504 	addi	fp,sp,20
   4ca0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ca10:	0005303a 	rdctl	r2,status
   4ca14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ca18:	e0fffc17 	ldw	r3,-16(fp)
   4ca1c:	00bfff84 	movi	r2,-2
   4ca20:	1884703a 	and	r2,r3,r2
   4ca24:	1001703a 	wrctl	status,r2
  
  return context;
   4ca28:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4ca2c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4ca30:	e0bfff17 	ldw	r2,-4(fp)
   4ca34:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4ca38:	e0bffd17 	ldw	r2,-12(fp)
   4ca3c:	10800017 	ldw	r2,0(r2)
   4ca40:	e0fffd17 	ldw	r3,-12(fp)
   4ca44:	18c00117 	ldw	r3,4(r3)
   4ca48:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4ca4c:	e0bffd17 	ldw	r2,-12(fp)
   4ca50:	10800117 	ldw	r2,4(r2)
   4ca54:	e0fffd17 	ldw	r3,-12(fp)
   4ca58:	18c00017 	ldw	r3,0(r3)
   4ca5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4ca60:	e0bffd17 	ldw	r2,-12(fp)
   4ca64:	e0fffd17 	ldw	r3,-12(fp)
   4ca68:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4ca6c:	e0bffd17 	ldw	r2,-12(fp)
   4ca70:	e0fffd17 	ldw	r3,-12(fp)
   4ca74:	10c00015 	stw	r3,0(r2)
   4ca78:	e0bffb17 	ldw	r2,-20(fp)
   4ca7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ca80:	e0bffe17 	ldw	r2,-8(fp)
   4ca84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4ca88:	e037883a 	mov	sp,fp
   4ca8c:	df000017 	ldw	fp,0(sp)
   4ca90:	dec00104 	addi	sp,sp,4
   4ca94:	f800283a 	ret

0004ca98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4ca98:	defffb04 	addi	sp,sp,-20
   4ca9c:	dfc00415 	stw	ra,16(sp)
   4caa0:	df000315 	stw	fp,12(sp)
   4caa4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4caa8:	d0a00d17 	ldw	r2,-32716(gp)
   4caac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4cab0:	d0a6b317 	ldw	r2,-25908(gp)
   4cab4:	10800044 	addi	r2,r2,1
   4cab8:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4cabc:	00002e06 	br	4cb78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4cac0:	e0bffd17 	ldw	r2,-12(fp)
   4cac4:	10800017 	ldw	r2,0(r2)
   4cac8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4cacc:	e0bffd17 	ldw	r2,-12(fp)
   4cad0:	10800403 	ldbu	r2,16(r2)
   4cad4:	10803fcc 	andi	r2,r2,255
   4cad8:	10000426 	beq	r2,zero,4caec <alt_tick+0x54>
   4cadc:	d0a6b317 	ldw	r2,-25908(gp)
   4cae0:	1000021e 	bne	r2,zero,4caec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4cae4:	e0bffd17 	ldw	r2,-12(fp)
   4cae8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4caec:	e0bffd17 	ldw	r2,-12(fp)
   4caf0:	10800217 	ldw	r2,8(r2)
   4caf4:	d0e6b317 	ldw	r3,-25908(gp)
   4caf8:	18801d36 	bltu	r3,r2,4cb70 <alt_tick+0xd8>
   4cafc:	e0bffd17 	ldw	r2,-12(fp)
   4cb00:	10800403 	ldbu	r2,16(r2)
   4cb04:	10803fcc 	andi	r2,r2,255
   4cb08:	1000191e 	bne	r2,zero,4cb70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4cb0c:	e0bffd17 	ldw	r2,-12(fp)
   4cb10:	10c00317 	ldw	r3,12(r2)
   4cb14:	e0bffd17 	ldw	r2,-12(fp)
   4cb18:	10800517 	ldw	r2,20(r2)
   4cb1c:	1009883a 	mov	r4,r2
   4cb20:	183ee83a 	callr	r3
   4cb24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4cb28:	e0bfff17 	ldw	r2,-4(fp)
   4cb2c:	1000031e 	bne	r2,zero,4cb3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4cb30:	e13ffd17 	ldw	r4,-12(fp)
   4cb34:	004ca000 	call	4ca00 <alt_alarm_stop>
   4cb38:	00000d06 	br	4cb70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4cb3c:	e0bffd17 	ldw	r2,-12(fp)
   4cb40:	10c00217 	ldw	r3,8(r2)
   4cb44:	e0bfff17 	ldw	r2,-4(fp)
   4cb48:	1887883a 	add	r3,r3,r2
   4cb4c:	e0bffd17 	ldw	r2,-12(fp)
   4cb50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4cb54:	e0bffd17 	ldw	r2,-12(fp)
   4cb58:	10c00217 	ldw	r3,8(r2)
   4cb5c:	d0a6b317 	ldw	r2,-25908(gp)
   4cb60:	1880032e 	bgeu	r3,r2,4cb70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4cb64:	e0bffd17 	ldw	r2,-12(fp)
   4cb68:	00c00044 	movi	r3,1
   4cb6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4cb70:	e0bffe17 	ldw	r2,-8(fp)
   4cb74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4cb78:	e0fffd17 	ldw	r3,-12(fp)
   4cb7c:	d0a00d04 	addi	r2,gp,-32716
   4cb80:	18bfcf1e 	bne	r3,r2,4cac0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4cb84:	0001883a 	nop
}
   4cb88:	e037883a 	mov	sp,fp
   4cb8c:	dfc00117 	ldw	ra,4(sp)
   4cb90:	df000017 	ldw	fp,0(sp)
   4cb94:	dec00204 	addi	sp,sp,8
   4cb98:	f800283a 	ret

0004cb9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4cb9c:	deffff04 	addi	sp,sp,-4
   4cba0:	df000015 	stw	fp,0(sp)
   4cba4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4cba8:	000170fa 	wrctl	ienable,zero
}
   4cbac:	e037883a 	mov	sp,fp
   4cbb0:	df000017 	ldw	fp,0(sp)
   4cbb4:	dec00104 	addi	sp,sp,4
   4cbb8:	f800283a 	ret

0004cbbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4cbbc:	defffa04 	addi	sp,sp,-24
   4cbc0:	dfc00515 	stw	ra,20(sp)
   4cbc4:	df000415 	stw	fp,16(sp)
   4cbc8:	df000404 	addi	fp,sp,16
   4cbcc:	e13ffe15 	stw	r4,-8(fp)
   4cbd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4cbd4:	e0bfff17 	ldw	r2,-4(fp)
   4cbd8:	10800017 	ldw	r2,0(r2)
   4cbdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4cbe0:	e13ffe17 	ldw	r4,-8(fp)
   4cbe4:	0041c400 	call	41c40 <strlen>
   4cbe8:	10800044 	addi	r2,r2,1
   4cbec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cbf0:	00000d06 	br	4cc28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4cbf4:	e0bffc17 	ldw	r2,-16(fp)
   4cbf8:	10c00217 	ldw	r3,8(r2)
   4cbfc:	e0bffd17 	ldw	r2,-12(fp)
   4cc00:	1809883a 	mov	r4,r3
   4cc04:	e17ffe17 	ldw	r5,-8(fp)
   4cc08:	100d883a 	mov	r6,r2
   4cc0c:	004ced40 	call	4ced4 <memcmp>
   4cc10:	1000021e 	bne	r2,zero,4cc1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4cc14:	e0bffc17 	ldw	r2,-16(fp)
   4cc18:	00000706 	br	4cc38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4cc1c:	e0bffc17 	ldw	r2,-16(fp)
   4cc20:	10800017 	ldw	r2,0(r2)
   4cc24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cc28:	e0fffc17 	ldw	r3,-16(fp)
   4cc2c:	e0bfff17 	ldw	r2,-4(fp)
   4cc30:	18bff01e 	bne	r3,r2,4cbf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4cc34:	0005883a 	mov	r2,zero
}
   4cc38:	e037883a 	mov	sp,fp
   4cc3c:	dfc00117 	ldw	ra,4(sp)
   4cc40:	df000017 	ldw	fp,0(sp)
   4cc44:	dec00204 	addi	sp,sp,8
   4cc48:	f800283a 	ret

0004cc4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4cc4c:	defffb04 	addi	sp,sp,-20
   4cc50:	dfc00415 	stw	ra,16(sp)
   4cc54:	df000315 	stw	fp,12(sp)
   4cc58:	df000304 	addi	fp,sp,12
   4cc5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4cc60:	00800174 	movhi	r2,5
   4cc64:	10bd0304 	addi	r2,r2,-3060
   4cc68:	10800017 	ldw	r2,0(r2)
   4cc6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4cc70:	00003106 	br	4cd38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4cc74:	e0bffd17 	ldw	r2,-12(fp)
   4cc78:	10800217 	ldw	r2,8(r2)
   4cc7c:	1009883a 	mov	r4,r2
   4cc80:	0041c400 	call	41c40 <strlen>
   4cc84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4cc88:	e0bffd17 	ldw	r2,-12(fp)
   4cc8c:	10c00217 	ldw	r3,8(r2)
   4cc90:	e0bffe17 	ldw	r2,-8(fp)
   4cc94:	10bfffc4 	addi	r2,r2,-1
   4cc98:	1885883a 	add	r2,r3,r2
   4cc9c:	10800003 	ldbu	r2,0(r2)
   4cca0:	10803fcc 	andi	r2,r2,255
   4cca4:	1080201c 	xori	r2,r2,128
   4cca8:	10bfe004 	addi	r2,r2,-128
   4ccac:	10800bd8 	cmpnei	r2,r2,47
   4ccb0:	1000031e 	bne	r2,zero,4ccc0 <alt_find_file+0x74>
    {
      len -= 1;
   4ccb4:	e0bffe17 	ldw	r2,-8(fp)
   4ccb8:	10bfffc4 	addi	r2,r2,-1
   4ccbc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ccc0:	e0bffe17 	ldw	r2,-8(fp)
   4ccc4:	e0ffff17 	ldw	r3,-4(fp)
   4ccc8:	1885883a 	add	r2,r3,r2
   4cccc:	10800003 	ldbu	r2,0(r2)
   4ccd0:	10803fcc 	andi	r2,r2,255
   4ccd4:	1080201c 	xori	r2,r2,128
   4ccd8:	10bfe004 	addi	r2,r2,-128
   4ccdc:	10800be0 	cmpeqi	r2,r2,47
   4cce0:	1000081e 	bne	r2,zero,4cd04 <alt_find_file+0xb8>
   4cce4:	e0bffe17 	ldw	r2,-8(fp)
   4cce8:	e0ffff17 	ldw	r3,-4(fp)
   4ccec:	1885883a 	add	r2,r3,r2
   4ccf0:	10800003 	ldbu	r2,0(r2)
   4ccf4:	10803fcc 	andi	r2,r2,255
   4ccf8:	1080201c 	xori	r2,r2,128
   4ccfc:	10bfe004 	addi	r2,r2,-128
   4cd00:	10000a1e 	bne	r2,zero,4cd2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4cd04:	e0bffd17 	ldw	r2,-12(fp)
   4cd08:	10c00217 	ldw	r3,8(r2)
   4cd0c:	e0bffe17 	ldw	r2,-8(fp)
   4cd10:	1809883a 	mov	r4,r3
   4cd14:	e17fff17 	ldw	r5,-4(fp)
   4cd18:	100d883a 	mov	r6,r2
   4cd1c:	004ced40 	call	4ced4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4cd20:	1000021e 	bne	r2,zero,4cd2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4cd24:	e0bffd17 	ldw	r2,-12(fp)
   4cd28:	00000806 	br	4cd4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4cd2c:	e0bffd17 	ldw	r2,-12(fp)
   4cd30:	10800017 	ldw	r2,0(r2)
   4cd34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4cd38:	e0fffd17 	ldw	r3,-12(fp)
   4cd3c:	00800174 	movhi	r2,5
   4cd40:	10bd0304 	addi	r2,r2,-3060
   4cd44:	18bfcb1e 	bne	r3,r2,4cc74 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4cd48:	0005883a 	mov	r2,zero
}
   4cd4c:	e037883a 	mov	sp,fp
   4cd50:	dfc00117 	ldw	ra,4(sp)
   4cd54:	df000017 	ldw	fp,0(sp)
   4cd58:	dec00204 	addi	sp,sp,8
   4cd5c:	f800283a 	ret

0004cd60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4cd60:	defffa04 	addi	sp,sp,-24
   4cd64:	dfc00515 	stw	ra,20(sp)
   4cd68:	df000415 	stw	fp,16(sp)
   4cd6c:	dc000315 	stw	r16,12(sp)
   4cd70:	df000304 	addi	fp,sp,12
   4cd74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4cd78:	00bffa04 	movi	r2,-24
   4cd7c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cd80:	e03ffd15 	stw	zero,-12(fp)
   4cd84:	00002106 	br	4ce0c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4cd88:	04000174 	movhi	r16,5
   4cd8c:	84388604 	addi	r16,r16,-7656
   4cd90:	e0bffd17 	ldw	r2,-12(fp)
   4cd94:	1009883a 	mov	r4,r2
   4cd98:	01400304 	movi	r5,12
   4cd9c:	0041a580 	call	41a58 <__mulsi3>
   4cda0:	8085883a 	add	r2,r16,r2
   4cda4:	10800017 	ldw	r2,0(r2)
   4cda8:	1000151e 	bne	r2,zero,4ce00 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4cdac:	04000174 	movhi	r16,5
   4cdb0:	84388604 	addi	r16,r16,-7656
   4cdb4:	e0bffd17 	ldw	r2,-12(fp)
   4cdb8:	1009883a 	mov	r4,r2
   4cdbc:	01400304 	movi	r5,12
   4cdc0:	0041a580 	call	41a58 <__mulsi3>
   4cdc4:	8085883a 	add	r2,r16,r2
   4cdc8:	e0ffff17 	ldw	r3,-4(fp)
   4cdcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4cdd0:	00800174 	movhi	r2,5
   4cdd4:	10bd0704 	addi	r2,r2,-3044
   4cdd8:	10c00017 	ldw	r3,0(r2)
   4cddc:	e0bffd17 	ldw	r2,-12(fp)
   4cde0:	1880040e 	bge	r3,r2,4cdf4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4cde4:	00800174 	movhi	r2,5
   4cde8:	10bd0704 	addi	r2,r2,-3044
   4cdec:	e0fffd17 	ldw	r3,-12(fp)
   4cdf0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4cdf4:	e0bffd17 	ldw	r2,-12(fp)
   4cdf8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4cdfc:	00000606 	br	4ce18 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ce00:	e0bffd17 	ldw	r2,-12(fp)
   4ce04:	10800044 	addi	r2,r2,1
   4ce08:	e0bffd15 	stw	r2,-12(fp)
   4ce0c:	e0bffd17 	ldw	r2,-12(fp)
   4ce10:	10800810 	cmplti	r2,r2,32
   4ce14:	103fdc1e 	bne	r2,zero,4cd88 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4ce18:	e0bffe17 	ldw	r2,-8(fp)
}
   4ce1c:	e037883a 	mov	sp,fp
   4ce20:	dfc00217 	ldw	ra,8(sp)
   4ce24:	df000117 	ldw	fp,4(sp)
   4ce28:	dc000017 	ldw	r16,0(sp)
   4ce2c:	dec00304 	addi	sp,sp,12
   4ce30:	f800283a 	ret

0004ce34 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4ce34:	defffb04 	addi	sp,sp,-20
   4ce38:	df000415 	stw	fp,16(sp)
   4ce3c:	df000404 	addi	fp,sp,16
   4ce40:	e13ffe15 	stw	r4,-8(fp)
   4ce44:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4ce48:	e0bfff17 	ldw	r2,-4(fp)
   4ce4c:	10840070 	cmpltui	r2,r2,4097
   4ce50:	1000021e 	bne	r2,zero,4ce5c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4ce54:	00840004 	movi	r2,4096
   4ce58:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4ce5c:	e0fffe17 	ldw	r3,-8(fp)
   4ce60:	e0bfff17 	ldw	r2,-4(fp)
   4ce64:	1885883a 	add	r2,r3,r2
   4ce68:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ce6c:	e0bffe17 	ldw	r2,-8(fp)
   4ce70:	e0bffc15 	stw	r2,-16(fp)
   4ce74:	00000506 	br	4ce8c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4ce78:	e0bffc17 	ldw	r2,-16(fp)
   4ce7c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ce80:	e0bffc17 	ldw	r2,-16(fp)
   4ce84:	10800804 	addi	r2,r2,32
   4ce88:	e0bffc15 	stw	r2,-16(fp)
   4ce8c:	e0fffc17 	ldw	r3,-16(fp)
   4ce90:	e0bffd17 	ldw	r2,-12(fp)
   4ce94:	18bff836 	bltu	r3,r2,4ce78 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4ce98:	e0bffe17 	ldw	r2,-8(fp)
   4ce9c:	108007cc 	andi	r2,r2,31
   4cea0:	10000226 	beq	r2,zero,4ceac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4cea4:	e0bffc17 	ldw	r2,-16(fp)
   4cea8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4ceac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4ceb0:	e037883a 	mov	sp,fp
   4ceb4:	df000017 	ldw	fp,0(sp)
   4ceb8:	dec00104 	addi	sp,sp,4
   4cebc:	f800283a 	ret

0004cec0 <atexit>:
   4cec0:	200b883a 	mov	r5,r4
   4cec4:	000d883a 	mov	r6,zero
   4cec8:	0009883a 	mov	r4,zero
   4cecc:	000f883a 	mov	r7,zero
   4ced0:	004cf501 	jmpi	4cf50 <__register_exitproc>

0004ced4 <memcmp>:
   4ced4:	01c000c4 	movi	r7,3
   4ced8:	3980192e 	bgeu	r7,r6,4cf40 <memcmp+0x6c>
   4cedc:	2904b03a 	or	r2,r5,r4
   4cee0:	11c4703a 	and	r2,r2,r7
   4cee4:	10000f26 	beq	r2,zero,4cf24 <memcmp+0x50>
   4cee8:	20c00003 	ldbu	r3,0(r4)
   4ceec:	28800003 	ldbu	r2,0(r5)
   4cef0:	1880151e 	bne	r3,r2,4cf48 <memcmp+0x74>
   4cef4:	31bfff84 	addi	r6,r6,-2
   4cef8:	01ffffc4 	movi	r7,-1
   4cefc:	00000406 	br	4cf10 <memcmp+0x3c>
   4cf00:	20c00003 	ldbu	r3,0(r4)
   4cf04:	28800003 	ldbu	r2,0(r5)
   4cf08:	31bfffc4 	addi	r6,r6,-1
   4cf0c:	18800e1e 	bne	r3,r2,4cf48 <memcmp+0x74>
   4cf10:	21000044 	addi	r4,r4,1
   4cf14:	29400044 	addi	r5,r5,1
   4cf18:	31fff91e 	bne	r6,r7,4cf00 <memcmp+0x2c>
   4cf1c:	0005883a 	mov	r2,zero
   4cf20:	f800283a 	ret
   4cf24:	20c00017 	ldw	r3,0(r4)
   4cf28:	28800017 	ldw	r2,0(r5)
   4cf2c:	1880041e 	bne	r3,r2,4cf40 <memcmp+0x6c>
   4cf30:	31bfff04 	addi	r6,r6,-4
   4cf34:	21000104 	addi	r4,r4,4
   4cf38:	29400104 	addi	r5,r5,4
   4cf3c:	39bff936 	bltu	r7,r6,4cf24 <memcmp+0x50>
   4cf40:	303fe91e 	bne	r6,zero,4cee8 <memcmp+0x14>
   4cf44:	003ff506 	br	4cf1c <memcmp+0x48>
   4cf48:	1885c83a 	sub	r2,r3,r2
   4cf4c:	f800283a 	ret

0004cf50 <__register_exitproc>:
   4cf50:	defffa04 	addi	sp,sp,-24
   4cf54:	00800174 	movhi	r2,5
   4cf58:	10bcfe04 	addi	r2,r2,-3080
   4cf5c:	dc000315 	stw	r16,12(sp)
   4cf60:	14000017 	ldw	r16,0(r2)
   4cf64:	dc400415 	stw	r17,16(sp)
   4cf68:	dfc00515 	stw	ra,20(sp)
   4cf6c:	80805217 	ldw	r2,328(r16)
   4cf70:	2023883a 	mov	r17,r4
   4cf74:	10003e26 	beq	r2,zero,4d070 <__register_exitproc+0x120>
   4cf78:	10c00117 	ldw	r3,4(r2)
   4cf7c:	020007c4 	movi	r8,31
   4cf80:	40c0180e 	bge	r8,r3,4cfe4 <__register_exitproc+0x94>
   4cf84:	00800034 	movhi	r2,0
   4cf88:	10800004 	addi	r2,r2,0
   4cf8c:	1000061e 	bne	r2,zero,4cfa8 <__register_exitproc+0x58>
   4cf90:	00bfffc4 	movi	r2,-1
   4cf94:	dfc00517 	ldw	ra,20(sp)
   4cf98:	dc400417 	ldw	r17,16(sp)
   4cf9c:	dc000317 	ldw	r16,12(sp)
   4cfa0:	dec00604 	addi	sp,sp,24
   4cfa4:	f800283a 	ret
   4cfa8:	01006404 	movi	r4,400
   4cfac:	d9400015 	stw	r5,0(sp)
   4cfb0:	d9800115 	stw	r6,4(sp)
   4cfb4:	d9c00215 	stw	r7,8(sp)
   4cfb8:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   4cfbc:	d9400017 	ldw	r5,0(sp)
   4cfc0:	d9800117 	ldw	r6,4(sp)
   4cfc4:	d9c00217 	ldw	r7,8(sp)
   4cfc8:	103ff126 	beq	r2,zero,4cf90 <__register_exitproc+0x40>
   4cfcc:	80c05217 	ldw	r3,328(r16)
   4cfd0:	10000115 	stw	zero,4(r2)
   4cfd4:	10c00015 	stw	r3,0(r2)
   4cfd8:	80805215 	stw	r2,328(r16)
   4cfdc:	10006215 	stw	zero,392(r2)
   4cfe0:	10006315 	stw	zero,396(r2)
   4cfe4:	10c00117 	ldw	r3,4(r2)
   4cfe8:	88000d1e 	bne	r17,zero,4d020 <__register_exitproc+0xd0>
   4cfec:	19000084 	addi	r4,r3,2
   4cff0:	2109883a 	add	r4,r4,r4
   4cff4:	18c00044 	addi	r3,r3,1
   4cff8:	2109883a 	add	r4,r4,r4
   4cffc:	1109883a 	add	r4,r2,r4
   4d000:	10c00115 	stw	r3,4(r2)
   4d004:	0005883a 	mov	r2,zero
   4d008:	21400015 	stw	r5,0(r4)
   4d00c:	dfc00517 	ldw	ra,20(sp)
   4d010:	dc400417 	ldw	r17,16(sp)
   4d014:	dc000317 	ldw	r16,12(sp)
   4d018:	dec00604 	addi	sp,sp,24
   4d01c:	f800283a 	ret
   4d020:	02400044 	movi	r9,1
   4d024:	12806217 	ldw	r10,392(r2)
   4d028:	48d2983a 	sll	r9,r9,r3
   4d02c:	19000804 	addi	r4,r3,32
   4d030:	18d1883a 	add	r8,r3,r3
   4d034:	2109883a 	add	r4,r4,r4
   4d038:	4211883a 	add	r8,r8,r8
   4d03c:	2109883a 	add	r4,r4,r4
   4d040:	1109883a 	add	r4,r2,r4
   4d044:	1211883a 	add	r8,r2,r8
   4d048:	5254b03a 	or	r10,r10,r9
   4d04c:	21c02215 	stw	r7,136(r4)
   4d050:	41802215 	stw	r6,136(r8)
   4d054:	12806215 	stw	r10,392(r2)
   4d058:	01000084 	movi	r4,2
   4d05c:	893fe31e 	bne	r17,r4,4cfec <__register_exitproc+0x9c>
   4d060:	11006317 	ldw	r4,396(r2)
   4d064:	2252b03a 	or	r9,r4,r9
   4d068:	12406315 	stw	r9,396(r2)
   4d06c:	003fdf06 	br	4cfec <__register_exitproc+0x9c>
   4d070:	00800174 	movhi	r2,5
   4d074:	108cfc04 	addi	r2,r2,13296
   4d078:	80805215 	stw	r2,328(r16)
   4d07c:	003fbe06 	br	4cf78 <__register_exitproc+0x28>
