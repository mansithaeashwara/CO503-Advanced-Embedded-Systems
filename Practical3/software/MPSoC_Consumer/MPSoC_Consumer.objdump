
MPSoC_Consumer.elf:     file format elf32-littlenios2
MPSoC_Consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000c3d8 memsz 0x0000c3d8 flags r-x
    LOAD off    0x0000e000 vaddr 0x00010000 paddr 0x0004c3f8 align 2**12
         filesz 0x00001e5c memsz 0x0000215c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c240  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000404  00010000  0004c3f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00010404  0004c7fc  0000e404  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011e5c  0004e254  0000fe5c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fe5c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d60  00000000  00000000  0000fe80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002295a  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008edd  00000000  00000000  0003353a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a0c1  00000000  00000000  0003c417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000185c  00000000  00000000  000464d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002ddf  00000000  00000000  00047d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010cea  00000000  00000000  0004ab13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005b800  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005b810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005f282  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005f285  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005f289  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005f28a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005f28b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005f28f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005f293  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005f297  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005f2a2  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005f2ad  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0005f2b8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000049  00000000  00000000  0005f2bd  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000629bc  00000000  00000000  0005f306  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010404 l    d  .rwdata	00000000 .rwdata
00011e5c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MPSoC_Consumer_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000406c4 l     F .text	00000034 __sprint_r
00010122 l     O .rodata	00000010 blanks.3515
00010132 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004270c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004417c l     F .text	00000008 __fp_lock
00044184 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010404 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010168 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000102b0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00048760 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000494a0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00049c34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00049d50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00049d7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00049e7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00049f70 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004a05c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004a238 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011e4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004a4ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004a5ec l     F .text	00000038 alt_dev_reg
00010dc0 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004a8dc l     F .text	00000204 altera_avalon_jtag_uart_irq
0004aae0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b11c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004b374 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004b800 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004b958 l     F .text	00000050 alt_get_errno
0004b9a8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00046c3c g     F .text	00000074 _mprec_log10
00046d2c g     F .text	00000084 __any_on
000479ac g     F .text	00000064 _isatty_r
00010198 g     O .rodata	00000028 __mprec_tinytens
0004a180 g     F .text	00000078 alt_main
00049bf0 g     F .text	00000044 __ashldi3
000405a0 g     F .text	00000084 _puts_r
00011e5c g     O .bss	00000004 writep
00011ecc g     O .bss	00000100 alt_irq
00047a10 g     F .text	0000006c _lseek_r
0004c7fc g       *ABS*	00000000 __flash_rwdata_start
00049000 g     F .text	0000005c __eqdf2
00040380 g     F .text	000000c8 FIFO_1_INIT
0001215c g       *ABS*	00000000 __alt_heap_start
00040564 g     F .text	0000003c printf
00047550 g     F .text	0000005c __sseek
00044220 g     F .text	0000010c __sinit
00044eb8 g     F .text	0000009c _setlocale_r
00044198 g     F .text	00000078 __sfmoreglue
0004a218 g     F .text	00000020 __malloc_unlock
00011e60 g     O .bss	00000004 readp
00045af8 g     F .text	0000018c memmove
00044210 g     F .text	00000010 _cleanup
00045d60 g     F .text	000000a8 _Balloc
000490b8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047944 g     F .text	00000068 _fstat_r
00011e88 g     O .bss	00000004 errno
00011e90 g     O .bss	00000004 alt_argv
00019e20 g       *ABS*	00000000 _gp
00010c40 g     O .rwdata	00000180 alt_fd_list
0004bdac g     F .text	00000090 alt_find_dev
000459b8 g     F .text	00000140 memcpy
0004418c g     F .text	0000000c _cleanup_r
000491dc g     F .text	000000d4 __floatsidf
0004b8e0 g     F .text	00000078 alt_io_redirect
00049180 g     F .text	0000005c __ltdf2
0004c3f8 g       *ABS*	00000000 __DTOR_END__
00040624 g     F .text	00000014 puts
00046b98 g     F .text	000000a4 __ratio
0004ace0 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040538 g     F .text	0000002c _printf_r
000495c0 g     F .text	00000008 __udivsi3
00049ecc g     F .text	000000a4 isatty
000101e8 g     O .rodata	000000c8 __mprec_tens
00044f54 g     F .text	0000000c __locale_charset
00011e84 g     O .bss	00000004 __malloc_top_pad
00011e28 g     O .rwdata	00000004 __mb_cur_max
00044f60 g     F .text	0000000c _localeconv_r
00046190 g     F .text	0000003c __i2b
00044874 g     F .text	000004e4 __sfvwrite_r
00047410 g     F .text	00000064 _sbrk_r
00040460 g     F .text	00000098 consumer
00011e64 g     O .bss	00000004 fullp
00047a7c g     F .text	0000006c _read_r
00010804 g     O .rwdata	0000000c __lc_ctype
00011e44 g     O .rwdata	00000004 alt_max_fd
000499d8 g     F .text	00000104 __unpack_d
000477f4 g     F .text	0000013c _fclose_r
0004414c g     F .text	00000030 fflush
00011e80 g     O .bss	00000004 __malloc_max_sbrked_mem
00048ab4 g     F .text	00000054 __adddf3
0004690c g     F .text	00000148 __b2d
00048138 g     F .text	00000628 __umoddi3
0004a0ac g     F .text	000000d4 lseek
00011e20 g     O .rwdata	00000004 _global_impure_ptr
00046db0 g     F .text	000005fc _realloc_r
0001215c g       *ABS*	00000000 __bss_end
0004b710 g     F .text	000000f0 alt_iic_isr_register
0004bc88 g     F .text	00000104 alt_tick
00047ae8 g     F .text	00000650 __udivdi3
000101c0 g     O .rodata	00000028 __mprec_bigtens
00045f74 g     F .text	00000104 __s2b
00049384 g     F .text	0000011c __floatunsidf
000466ac g     F .text	00000058 __mcmp
00044438 g     F .text	00000018 __fp_lock_all
0004b6c4 g     F .text	0000004c alt_ic_irq_enabled
0004bbf0 g     F .text	00000098 alt_alarm_stop
00011e98 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000cc alt_irq_handler
00010c18 g     O .rwdata	00000028 alt_dev_null
0004b358 g     F .text	0000001c alt_dcache_flush_all
00046078 g     F .text	00000068 __hi0bits
000492b0 g     F .text	000000d4 __fixdfsi
00011e5c g       *ABS*	00000000 __ram_rwdata_end
00011e3c g     O .rwdata	00000008 alt_dev_list
0004a4fc g     F .text	000000f0 write
00010404 g       *ABS*	00000000 __ram_rodata_end
00049dcc g     F .text	000000b0 fstat
00049bac g     F .text	00000044 __lshrdi3
00046424 g     F .text	0000012c __pow5mult
00011e78 g     O .bss	00000004 __nlocale_changed
000495c8 g     F .text	00000008 __umodsi3
0001215c g       *ABS*	00000000 end
0004a81c g     F .text	000000c0 altera_avalon_jtag_uart_init
0004c3f8 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0004b190 g     F .text	00000088 alt_avalon_timer_sc_init
00049708 g     F .text	000000ac __clzsi2
0004aef8 g     F .text	00000224 altera_avalon_jtag_uart_write
00044428 g     F .text	00000004 __sfp_lock_acquire
000458c0 g     F .text	000000f8 memchr
000406f8 g     F .text	00001e7c ___vfprintf_internal_r
000445a4 g     F .text	000002d0 _free_r
0004c21c g     F .text	000001a0 __call_exitprocs
00011e74 g     O .bss	00000004 __mlocale_changed
00011e2c g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00011e9c g     O .bss	00000004 _alt_tick_rate
00046550 g     F .text	0000015c __lshift
00011ea0 g     O .bss	00000004 _alt_nticks
0004a288 g     F .text	000000f4 read
0004a658 g     F .text	00000060 alt_sys_init
0004c0ec g     F .text	00000130 __register_exitproc
000461cc g     F .text	00000258 __multiply
0004ab84 g     F .text	00000068 altera_avalon_jtag_uart_close
000495d0 g     F .text	00000028 __mulsi3
00010404 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011ea4 g     O .bss	00000028 __malloc_current_mallinfo
00046a54 g     F .text	00000144 __d2b
0004a6b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004bf50 g     F .text	000000d4 alt_get_fd
00049adc g     F .text	000000d0 __fpcmp_parts_d
00047790 g     F .text	00000064 _close_r
0004c070 g     F .text	0000007c memcmp
0004a778 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001215c g       *ABS*	00000000 __alt_stack_base
0004a7c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042598 g     F .text	00000174 __swsetup_r
00048e4c g     F .text	000001b4 __divdf3
0004432c g     F .text	000000fc __sfp
00046cb0 g     F .text	0000007c __copybits
00010810 g     O .rwdata	00000408 __malloc_av_
00044434 g     F .text	00000004 __sinit_lock_release
00048b68 g     F .text	000002e4 __muldf3
00047474 g     F .text	00000054 __sread
0004be3c g     F .text	00000114 alt_find_file
0004b3c4 g     F .text	000000a0 alt_dev_llist_insert
0004a1f8 g     F .text	00000020 __malloc_lock
0004a3fc g     F .text	000000b0 sbrk
00043f64 g     F .text	000001e8 _fflush_r
000476c4 g     F .text	000000cc _calloc_r
00011e5c g       *ABS*	00000000 __bss_start
00045c84 g     F .text	000000dc memset
00040448 g     F .text	00000018 main
00011e94 g     O .bss	00000004 alt_envp
00011e7c g     O .bss	00000004 __malloc_max_total_mem
0004a718 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040000 g       *ABS*	00000000 __alt_mem_onchip_instr_mem_1
000475ac g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00047930 g     F .text	00000014 fclose
00011fcc g     O .bss	00000190 _atexit0
00042948 g     F .text	0000161c _dtoa_r
0004513c g     F .text	00000784 _malloc_r
00011e48 g     O .rwdata	00000004 alt_errno
00044d58 g     F .text	000000a8 _fwalk
00049514 g     F .text	00000050 __divsi3
000102bc g     O .rodata	00000014 __thenan_df
00044468 g     F .text	0000013c _malloc_trim_r
0004c3f8 g       *ABS*	00000000 __CTOR_END__
000475b4 g     F .text	000000a4 strcmp
0004c3f8 g       *ABS*	00000000 __flash_rodata_start
0004c3f8 g       *ABS*	00000000 __DTOR_LIST__
000404f8 g     F .text	00000040 delay
0004905c g     F .text	0000005c __nedf2
0004a624 g     F .text	00000034 alt_irq_init
0004a37c g     F .text	00000080 alt_release_fd
000102d0 g     O .rodata	00000100 __clz_tab
00011e70 g     O .bss	00000004 _PathLocale
0004c024 g     F .text	00000014 atexit
00047658 g     F .text	0000006c _write_r
00044f6c g     F .text	0000001c setlocale
00000000 g       *ABS*	00000000 __alt_mem_onchip_shared_memory
00011e24 g     O .rwdata	00000004 _impure_ptr
00011e8c g     O .bss	00000004 alt_argc
0004b4c0 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000468ac g     F .text	00000060 __ulp
000473ac g     F .text	00000038 __isinfd
00044450 g     F .text	00000018 __fp_unlock_all
00011e34 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044f88 g     F .text	0000000c localeconv
0004b538 g     F .text	00000050 alt_ic_isr_register
00011e5c g       *ABS*	00000000 _edata
0001215c g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004abec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004b624 g     F .text	000000a0 alt_ic_irq_disable
000474c8 g     F .text	00000088 __swrite
00011e30 g     O .rwdata	00000004 __malloc_trim_threshold
0004bd8c g     F .text	00000020 altera_nios2_qsys_irq_init
0004c038 g     F .text	00000038 exit
00044e00 g     F .text	000000b8 _fwalk_reent
00046704 g     F .text	000001a8 __mdiff
00049564 g     F .text	0000005c __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004442c g     F .text	00000004 __sfp_lock_release
0004c3bc g     F .text	0000003c _exit
000473e4 g     F .text	0000002c __isnand
0004b218 g     F .text	00000140 alt_alarm_start
000495f8 g     F .text	00000110 __muldi3
00044f94 g     F .text	000001a8 __smakebuf_r
00040638 g     F .text	0000008c strlen
0004ba98 g     F .text	00000158 open
0004911c g     F .text	00000064 __gedf2
000401f4 g     F .text	0000018c READ_FIFO_1
0004b51c g     F .text	0000001c alt_icache_flush_all
00011e50 g     O .rwdata	00000004 alt_priority_mask
00011e68 g     O .bss	00000004 emptyp
0004b588 g     F .text	0000009c alt_ic_irq_enable
00042574 g     F .text	00000024 __vfprintf_internal
00048b08 g     F .text	00000060 __subdf3
000460e0 g     F .text	000000b0 __lo0bits
00011e54 g     O .rwdata	00000008 alt_alarm_list
0004b464 g     F .text	0000005c _do_ctors
00011e6c g     O .bss	00000004 countp
00049c84 g     F .text	000000cc close
00049fdc g     F .text	00000080 alt_load
000497b4 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00044430 g     F .text	00000004 __sinit_lock_acquire
00045e30 g     F .text	00000144 __multadd
00045e08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00074 	movhi	r3,1
   40130:	18c7b304 	addi	r3,r3,7884
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000074 	movhi	r4,1
   40148:	2107b304 	addi	r4,r4,7884
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   401c4:	d6a78814 	ori	gp,gp,40480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   401cc:	10879714 	ori	r2,r2,7772

    movhi r3, %hi(__bss_end)
   401d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   401d4:	18c85714 	ori	r3,r3,8540

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	0049fdc0 	call	49fdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004a1800 	call	4a180 <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <READ_FIFO_1>:


#include "FIFO_1.h"

void READ_FIFO_1(int *buffer)
{
   401f4:	defffd04 	addi	sp,sp,-12
   401f8:	dfc00215 	stw	ra,8(sp)
   401fc:	df000115 	stw	fp,4(sp)
   40200:	df000104 	addi	fp,sp,4
   40204:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	printf("Reading....\n");
   40208:	01000074 	movhi	r4,1
   4020c:	21000004 	addi	r4,r4,0
   40210:	00406240 	call	40624 <puts>


	printf("Count: %i\n", IORD_32DIRECT(MEM_BASE, countp));
   40214:	d0a01317 	ldw	r2,-32692(gp)
   40218:	1007883a 	mov	r3,r2
   4021c:	008000b4 	movhi	r2,2
   40220:	1885883a 	add	r2,r3,r2
   40224:	10800037 	ldwio	r2,0(r2)
   40228:	01000074 	movhi	r4,1
   4022c:	21000304 	addi	r4,r4,12
   40230:	100b883a 	mov	r5,r2
   40234:	00405640 	call	40564 <printf>
	printf("Empty: %i\n", IORD_32DIRECT(MEM_BASE, emptyp));
   40238:	d0a01217 	ldw	r2,-32696(gp)
   4023c:	1007883a 	mov	r3,r2
   40240:	008000b4 	movhi	r2,2
   40244:	1885883a 	add	r2,r3,r2
   40248:	10800037 	ldwio	r2,0(r2)
   4024c:	01000074 	movhi	r4,1
   40250:	21000604 	addi	r4,r4,24
   40254:	100b883a 	mov	r5,r2
   40258:	00405640 	call	40564 <printf>
	printf("Full: %i\n", IORD_32DIRECT(MEM_BASE, fullp));
   4025c:	d0a01117 	ldw	r2,-32700(gp)
   40260:	1007883a 	mov	r3,r2
   40264:	008000b4 	movhi	r2,2
   40268:	1885883a 	add	r2,r3,r2
   4026c:	10800037 	ldwio	r2,0(r2)
   40270:	01000074 	movhi	r4,1
   40274:	21000904 	addi	r4,r4,36
   40278:	100b883a 	mov	r5,r2
   4027c:	00405640 	call	40564 <printf>

//	printf("Counterp: %i\n", countp);
//	printf("Emptyp: %i\n", emptyp);
//	printf("Fullp: %i\n\n", fullp);

	while(IORD_32DIRECT(MEM_BASE,emptyp) == 0x0001);
   40280:	0001883a 	nop
   40284:	d0a01217 	ldw	r2,-32696(gp)
   40288:	1007883a 	mov	r3,r2
   4028c:	008000b4 	movhi	r2,2
   40290:	1885883a 	add	r2,r3,r2
   40294:	10800037 	ldwio	r2,0(r2)
   40298:	10800060 	cmpeqi	r2,r2,1
   4029c:	103ff91e 	bne	r2,zero,40284 <READ_FIFO_1+0x90>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE, readp);
   402a0:	d0a01017 	ldw	r2,-32704(gp)
   402a4:	1007883a 	mov	r3,r2
   402a8:	008000b4 	movhi	r2,2
   402ac:	1885883a 	add	r2,r3,r2
   402b0:	10c00037 	ldwio	r3,0(r2)
   402b4:	e0bfff17 	ldw	r2,-4(fp)
   402b8:	10c00015 	stw	r3,0(r2)
	printf("Read Value: %d\n\n", *buffer);
   402bc:	e0bfff17 	ldw	r2,-4(fp)
   402c0:	10800017 	ldw	r2,0(r2)
   402c4:	01000074 	movhi	r4,1
   402c8:	21000c04 	addi	r4,r4,48
   402cc:	100b883a 	mov	r5,r2
   402d0:	00405640 	call	40564 <printf>

	// Update the read pointer
	// Wrap around the write pointer if it is at the last index
	// even if writep is at the end of the FIFO, the queue might not be full
	if (readp == STARTP + UNIT_SIZE * CAPACITY)
   402d4:	d0a01017 	ldw	r2,-32704(gp)
   402d8:	10801718 	cmpnei	r2,r2,92
   402dc:	1000031e 	bne	r2,zero,402ec <READ_FIFO_1+0xf8>
		readp = STARTP;
   402e0:	00800304 	movi	r2,12
   402e4:	d0a01015 	stw	r2,-32704(gp)
   402e8:	00000306 	br	402f8 <READ_FIFO_1+0x104>
	else readp += UNIT_SIZE;
   402ec:	d0a01017 	ldw	r2,-32704(gp)
   402f0:	10800104 	addi	r2,r2,4
   402f4:	d0a01015 	stw	r2,-32704(gp)


	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp)-1);
   402f8:	d0a01317 	ldw	r2,-32692(gp)
   402fc:	1007883a 	mov	r3,r2
   40300:	008000b4 	movhi	r2,2
   40304:	1885883a 	add	r2,r3,r2
   40308:	d0e01317 	ldw	r3,-32692(gp)
   4030c:	1809883a 	mov	r4,r3
   40310:	00c000b4 	movhi	r3,2
   40314:	20c7883a 	add	r3,r4,r3
   40318:	18c00037 	ldwio	r3,0(r3)
   4031c:	18ffffc4 	addi	r3,r3,-1
   40320:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0000);
   40324:	d0a01117 	ldw	r2,-32700(gp)
   40328:	1007883a 	mov	r3,r2
   4032c:	008000b4 	movhi	r2,2
   40330:	1885883a 	add	r2,r3,r2
   40334:	0007883a 	mov	r3,zero
   40338:	10c00035 	stwio	r3,0(r2)

	IOWR_32DIRECT(MEM_BASE, emptyp, (IORD_32DIRECT(MEM_BASE, countp) == 0));
   4033c:	d0a01217 	ldw	r2,-32696(gp)
   40340:	1007883a 	mov	r3,r2
   40344:	008000b4 	movhi	r2,2
   40348:	1885883a 	add	r2,r3,r2
   4034c:	d0e01317 	ldw	r3,-32692(gp)
   40350:	1809883a 	mov	r4,r3
   40354:	00c000b4 	movhi	r3,2
   40358:	20c7883a 	add	r3,r4,r3
   4035c:	18c00037 	ldwio	r3,0(r3)
   40360:	1807003a 	cmpeq	r3,r3,zero
   40364:	18c03fcc 	andi	r3,r3,255
   40368:	10c00035 	stwio	r3,0(r2)
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 enrty less than capacity
}
   4036c:	e037883a 	mov	sp,fp
   40370:	dfc00117 	ldw	ra,4(sp)
   40374:	df000017 	ldw	fp,0(sp)
   40378:	dec00204 	addi	sp,sp,8
   4037c:	f800283a 	ret

00040380 <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
   40380:	defffe04 	addi	sp,sp,-8
   40384:	dfc00115 	stw	ra,4(sp)
   40388:	df000015 	stw	fp,0(sp)
   4038c:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   40390:	00800304 	movi	r2,12
   40394:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   40398:	00800304 	movi	r2,12
   4039c:	d0a01015 	stw	r2,-32704(gp)
	fullp  = 0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   403a0:	d0201115 	stw	zero,-32700(gp)
	emptyp = fullp + UNIT_SIZE;
   403a4:	d0a01117 	ldw	r2,-32700(gp)
   403a8:	10800104 	addi	r2,r2,4
   403ac:	d0a01215 	stw	r2,-32696(gp)
	countp = emptyp + UNIT_SIZE;
   403b0:	d0a01217 	ldw	r2,-32696(gp)
   403b4:	10800104 	addi	r2,r2,4
   403b8:	d0a01315 	stw	r2,-32692(gp)

	printf("Initializing FIFO...(Inside FIFO_INIT_1 after setting pointers)\n");
   403bc:	01000074 	movhi	r4,1
   403c0:	21001104 	addi	r4,r4,68
   403c4:	00406240 	call	40624 <puts>
	printf("Count: %i\n", IORD_32DIRECT(MEM_BASE, countp));
   403c8:	d0a01317 	ldw	r2,-32692(gp)
   403cc:	1007883a 	mov	r3,r2
   403d0:	008000b4 	movhi	r2,2
   403d4:	1885883a 	add	r2,r3,r2
   403d8:	10800037 	ldwio	r2,0(r2)
   403dc:	01000074 	movhi	r4,1
   403e0:	21000304 	addi	r4,r4,12
   403e4:	100b883a 	mov	r5,r2
   403e8:	00405640 	call	40564 <printf>
	printf("Empty: %i\n", IORD_32DIRECT(MEM_BASE, emptyp));
   403ec:	d0a01217 	ldw	r2,-32696(gp)
   403f0:	1007883a 	mov	r3,r2
   403f4:	008000b4 	movhi	r2,2
   403f8:	1885883a 	add	r2,r3,r2
   403fc:	10800037 	ldwio	r2,0(r2)
   40400:	01000074 	movhi	r4,1
   40404:	21000604 	addi	r4,r4,24
   40408:	100b883a 	mov	r5,r2
   4040c:	00405640 	call	40564 <printf>
	printf("Full: %i\n\n", IORD_32DIRECT(MEM_BASE, fullp));
   40410:	d0a01117 	ldw	r2,-32700(gp)
   40414:	1007883a 	mov	r3,r2
   40418:	008000b4 	movhi	r2,2
   4041c:	1885883a 	add	r2,r3,r2
   40420:	10800037 	ldwio	r2,0(r2)
   40424:	01000074 	movhi	r4,1
   40428:	21002104 	addi	r4,r4,132
   4042c:	100b883a 	mov	r5,r2
   40430:	00405640 	call	40564 <printf>

	// Assigning values for the flags.
	//	IOWR_32DIRECT(MEM_BASE, fullp, 0x0000);
	//	IOWR_32DIRECT(MEM_BASE, emptyp, 0x0001); // The fifo is empty at the start
	//	IOWR_32DIRECT(MEM_BASE, countp, 0x0000); // The fifo is empty at the start
}
   40434:	e037883a 	mov	sp,fp
   40438:	dfc00117 	ldw	ra,4(sp)
   4043c:	df000017 	ldw	fp,0(sp)
   40440:	dec00204 	addi	sp,sp,8
   40444:	f800283a 	ret

00040448 <main>:
void delay(int n);
int consumer();


int main()
{
   40448:	defffe04 	addi	sp,sp,-8
   4044c:	dfc00115 	stw	ra,4(sp)
   40450:	df000015 	stw	fp,0(sp)
   40454:	d839883a 	mov	fp,sp
	consumer();
   40458:	00404600 	call	40460 <consumer>
	
	while(1) { }
   4045c:	003fff06 	br	4045c <main+0x14>

00040460 <consumer>:
	return 0;
}


int consumer()
{
   40460:	defffc04 	addi	sp,sp,-16
   40464:	dfc00315 	stw	ra,12(sp)
   40468:	df000215 	stw	fp,8(sp)
   4046c:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   40470:	01000074 	movhi	r4,1
   40474:	21002404 	addi	r4,r4,144
   40478:	00406240 	call	40624 <puts>


	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   4047c:	00403800 	call	40380 <FIFO_1_INIT>

	int j = 0;
   40480:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   40484:	00800144 	movi	r2,5
   40488:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   4048c:	00000e06 	br	404c8 <consumer+0x68>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   40490:	e0bfff04 	addi	r2,fp,-4
   40494:	1009883a 	mov	r4,r2
   40498:	00401f40 	call	401f4 <READ_FIFO_1>
		if(j==k)
   4049c:	e0ffff17 	ldw	r3,-4(fp)
   404a0:	e0bffe17 	ldw	r2,-8(fp)
   404a4:	1880051e 	bne	r3,r2,404bc <consumer+0x5c>
			printf("Consumer succefully received [%i]\n",j);
   404a8:	e0bfff17 	ldw	r2,-4(fp)
   404ac:	01000074 	movhi	r4,1
   404b0:	21002904 	addi	r4,r4,164
   404b4:	100b883a 	mov	r5,r2
   404b8:	00405640 	call	40564 <printf>

		k+=10;
   404bc:	e0bffe17 	ldw	r2,-8(fp)
   404c0:	10800284 	addi	r2,r2,10
   404c4:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   404c8:	e0bffe17 	ldw	r2,-8(fp)
   404cc:	10807d10 	cmplti	r2,r2,500
   404d0:	103fef1e 	bne	r2,zero,40490 <consumer+0x30>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   404d4:	01000074 	movhi	r4,1
   404d8:	21003204 	addi	r4,r4,200
   404dc:	00406240 	call	40624 <puts>
	return 0;
   404e0:	0005883a 	mov	r2,zero
}
   404e4:	e037883a 	mov	sp,fp
   404e8:	dfc00117 	ldw	ra,4(sp)
   404ec:	df000017 	ldw	fp,0(sp)
   404f0:	dec00204 	addi	sp,sp,8
   404f4:	f800283a 	ret

000404f8 <delay>:


void delay(int n)
{
   404f8:	defffd04 	addi	sp,sp,-12
   404fc:	df000215 	stw	fp,8(sp)
   40500:	df000204 	addi	fp,sp,8
   40504:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   40508:	e0bfff17 	ldw	r2,-4(fp)
   4050c:	e0bffe15 	stw	r2,-8(fp)
   40510:	00000306 	br	40520 <delay+0x28>
   40514:	e0bffe17 	ldw	r2,-8(fp)
   40518:	10bfffc4 	addi	r2,r2,-1
   4051c:	e0bffe15 	stw	r2,-8(fp)
   40520:	e0bffe17 	ldw	r2,-8(fp)
   40524:	00bffb16 	blt	zero,r2,40514 <delay+0x1c>
	{
		continue;
	}
}
   40528:	e037883a 	mov	sp,fp
   4052c:	df000017 	ldw	fp,0(sp)
   40530:	dec00104 	addi	sp,sp,4
   40534:	f800283a 	ret

00040538 <_printf_r>:
   40538:	defffd04 	addi	sp,sp,-12
   4053c:	dfc00015 	stw	ra,0(sp)
   40540:	d9800115 	stw	r6,4(sp)
   40544:	d9c00215 	stw	r7,8(sp)
   40548:	280d883a 	mov	r6,r5
   4054c:	21400217 	ldw	r5,8(r4)
   40550:	d9c00104 	addi	r7,sp,4
   40554:	00406f80 	call	406f8 <___vfprintf_internal_r>
   40558:	dfc00017 	ldw	ra,0(sp)
   4055c:	dec00304 	addi	sp,sp,12
   40560:	f800283a 	ret

00040564 <printf>:
   40564:	defffc04 	addi	sp,sp,-16
   40568:	dfc00015 	stw	ra,0(sp)
   4056c:	d9400115 	stw	r5,4(sp)
   40570:	d9800215 	stw	r6,8(sp)
   40574:	d9c00315 	stw	r7,12(sp)
   40578:	00800074 	movhi	r2,1
   4057c:	10878904 	addi	r2,r2,7716
   40580:	10800017 	ldw	r2,0(r2)
   40584:	200b883a 	mov	r5,r4
   40588:	d9800104 	addi	r6,sp,4
   4058c:	11000217 	ldw	r4,8(r2)
   40590:	00425740 	call	42574 <__vfprintf_internal>
   40594:	dfc00017 	ldw	ra,0(sp)
   40598:	dec00404 	addi	sp,sp,16
   4059c:	f800283a 	ret

000405a0 <_puts_r>:
   405a0:	defff604 	addi	sp,sp,-40
   405a4:	dc400815 	stw	r17,32(sp)
   405a8:	2023883a 	mov	r17,r4
   405ac:	2809883a 	mov	r4,r5
   405b0:	dc000715 	stw	r16,28(sp)
   405b4:	dfc00915 	stw	ra,36(sp)
   405b8:	2821883a 	mov	r16,r5
   405bc:	00406380 	call	40638 <strlen>
   405c0:	10c00044 	addi	r3,r2,1
   405c4:	d8800115 	stw	r2,4(sp)
   405c8:	89400217 	ldw	r5,8(r17)
   405cc:	00800074 	movhi	r2,1
   405d0:	10803704 	addi	r2,r2,220
   405d4:	d8800215 	stw	r2,8(sp)
   405d8:	00800044 	movi	r2,1
   405dc:	d8800315 	stw	r2,12(sp)
   405e0:	8809883a 	mov	r4,r17
   405e4:	00800084 	movi	r2,2
   405e8:	d9800404 	addi	r6,sp,16
   405ec:	dc000015 	stw	r16,0(sp)
   405f0:	d8c00615 	stw	r3,24(sp)
   405f4:	dec00415 	stw	sp,16(sp)
   405f8:	d8800515 	stw	r2,20(sp)
   405fc:	00448740 	call	44874 <__sfvwrite_r>
   40600:	1000061e 	bne	r2,zero,4061c <_puts_r+0x7c>
   40604:	00800284 	movi	r2,10
   40608:	dfc00917 	ldw	ra,36(sp)
   4060c:	dc400817 	ldw	r17,32(sp)
   40610:	dc000717 	ldw	r16,28(sp)
   40614:	dec00a04 	addi	sp,sp,40
   40618:	f800283a 	ret
   4061c:	00bfffc4 	movi	r2,-1
   40620:	003ff906 	br	40608 <_puts_r+0x68>

00040624 <puts>:
   40624:	00800074 	movhi	r2,1
   40628:	10878904 	addi	r2,r2,7716
   4062c:	200b883a 	mov	r5,r4
   40630:	11000017 	ldw	r4,0(r2)
   40634:	00405a01 	jmpi	405a0 <_puts_r>

00040638 <strlen>:
   40638:	208000cc 	andi	r2,r4,3
   4063c:	10001f1e 	bne	r2,zero,406bc <strlen+0x84>
   40640:	20800017 	ldw	r2,0(r4)
   40644:	01ffbff4 	movhi	r7,65279
   40648:	39ffbfc4 	addi	r7,r7,-257
   4064c:	01a02074 	movhi	r6,32897
   40650:	31a02004 	addi	r6,r6,-32640
   40654:	11c7883a 	add	r3,r2,r7
   40658:	0084303a 	nor	r2,zero,r2
   4065c:	1886703a 	and	r3,r3,r2
   40660:	1986703a 	and	r3,r3,r6
   40664:	2005883a 	mov	r2,r4
   40668:	1800101e 	bne	r3,zero,406ac <strlen+0x74>
   4066c:	10800104 	addi	r2,r2,4
   40670:	10c00017 	ldw	r3,0(r2)
   40674:	19cb883a 	add	r5,r3,r7
   40678:	00c6303a 	nor	r3,zero,r3
   4067c:	28c6703a 	and	r3,r5,r3
   40680:	1986703a 	and	r3,r3,r6
   40684:	1800091e 	bne	r3,zero,406ac <strlen+0x74>
   40688:	10800104 	addi	r2,r2,4
   4068c:	10c00017 	ldw	r3,0(r2)
   40690:	19cb883a 	add	r5,r3,r7
   40694:	00c6303a 	nor	r3,zero,r3
   40698:	28c6703a 	and	r3,r5,r3
   4069c:	1986703a 	and	r3,r3,r6
   406a0:	183ff226 	beq	r3,zero,4066c <strlen+0x34>
   406a4:	00000106 	br	406ac <strlen+0x74>
   406a8:	10800044 	addi	r2,r2,1
   406ac:	10c00007 	ldb	r3,0(r2)
   406b0:	183ffd1e 	bne	r3,zero,406a8 <strlen+0x70>
   406b4:	1105c83a 	sub	r2,r2,r4
   406b8:	f800283a 	ret
   406bc:	2005883a 	mov	r2,r4
   406c0:	003ffa06 	br	406ac <strlen+0x74>

000406c4 <__sprint_r>:
   406c4:	30800217 	ldw	r2,8(r6)
   406c8:	defffe04 	addi	sp,sp,-8
   406cc:	dc000015 	stw	r16,0(sp)
   406d0:	dfc00115 	stw	ra,4(sp)
   406d4:	3021883a 	mov	r16,r6
   406d8:	10000226 	beq	r2,zero,406e4 <__sprint_r+0x20>
   406dc:	00448740 	call	44874 <__sfvwrite_r>
   406e0:	80000215 	stw	zero,8(r16)
   406e4:	80000115 	stw	zero,4(r16)
   406e8:	dfc00117 	ldw	ra,4(sp)
   406ec:	dc000017 	ldw	r16,0(sp)
   406f0:	dec00204 	addi	sp,sp,8
   406f4:	f800283a 	ret

000406f8 <___vfprintf_internal_r>:
   406f8:	defeb904 	addi	sp,sp,-1308
   406fc:	dc013d15 	stw	r16,1268(sp)
   40700:	d9013015 	stw	r4,1216(sp)
   40704:	dfc14615 	stw	ra,1304(sp)
   40708:	df014515 	stw	fp,1300(sp)
   4070c:	ddc14415 	stw	r23,1296(sp)
   40710:	dd814315 	stw	r22,1292(sp)
   40714:	dd414215 	stw	r21,1288(sp)
   40718:	dd014115 	stw	r20,1284(sp)
   4071c:	dcc14015 	stw	r19,1280(sp)
   40720:	dc813f15 	stw	r18,1276(sp)
   40724:	dc413e15 	stw	r17,1272(sp)
   40728:	d9412915 	stw	r5,1188(sp)
   4072c:	3021883a 	mov	r16,r6
   40730:	d9c12d15 	stw	r7,1204(sp)
   40734:	0044f600 	call	44f60 <_localeconv_r>
   40738:	10800017 	ldw	r2,0(r2)
   4073c:	d9013017 	ldw	r4,1216(sp)
   40740:	d8013315 	stw	zero,1228(sp)
   40744:	d8813715 	stw	r2,1244(sp)
   40748:	d8013415 	stw	zero,1232(sp)
   4074c:	20000226 	beq	r4,zero,40758 <___vfprintf_internal_r+0x60>
   40750:	20800e17 	ldw	r2,56(r4)
   40754:	10014b26 	beq	r2,zero,40c84 <___vfprintf_internal_r+0x58c>
   40758:	d8c12917 	ldw	r3,1188(sp)
   4075c:	1880030b 	ldhu	r2,12(r3)
   40760:	10c0020c 	andi	r3,r2,8
   40764:	18ffffcc 	andi	r3,r3,65535
   40768:	18e0001c 	xori	r3,r3,32768
   4076c:	18e00004 	addi	r3,r3,-32768
   40770:	1800ed26 	beq	r3,zero,40b28 <___vfprintf_internal_r+0x430>
   40774:	d9012917 	ldw	r4,1188(sp)
   40778:	20c00417 	ldw	r3,16(r4)
   4077c:	1800ea26 	beq	r3,zero,40b28 <___vfprintf_internal_r+0x430>
   40780:	1100068c 	andi	r4,r2,26
   40784:	00c00284 	movi	r3,10
   40788:	20c0f026 	beq	r4,r3,40b4c <___vfprintf_internal_r+0x454>
   4078c:	d9010dc4 	addi	r4,sp,1079
   40790:	d8810e04 	addi	r2,sp,1080
   40794:	dc413017 	ldw	r17,1216(sp)
   40798:	d8c00404 	addi	r3,sp,16
   4079c:	d9012615 	stw	r4,1176(sp)
   407a0:	1109c83a 	sub	r4,r2,r4
   407a4:	d8812715 	stw	r2,1180(sp)
   407a8:	d8c11b15 	stw	r3,1132(sp)
   407ac:	d8011d15 	stw	zero,1140(sp)
   407b0:	d8011c15 	stw	zero,1136(sp)
   407b4:	802b883a 	mov	r21,r16
   407b8:	d8013215 	stw	zero,1224(sp)
   407bc:	d8013615 	stw	zero,1240(sp)
   407c0:	d8013515 	stw	zero,1236(sp)
   407c4:	d8012c15 	stw	zero,1200(sp)
   407c8:	1813883a 	mov	r9,r3
   407cc:	d9013915 	stw	r4,1252(sp)
   407d0:	a8800007 	ldb	r2,0(r21)
   407d4:	1002f326 	beq	r2,zero,413a4 <___vfprintf_internal_r+0xcac>
   407d8:	00c00944 	movi	r3,37
   407dc:	a825883a 	mov	r18,r21
   407e0:	10c0021e 	bne	r2,r3,407ec <___vfprintf_internal_r+0xf4>
   407e4:	00001406 	br	40838 <___vfprintf_internal_r+0x140>
   407e8:	10c00326 	beq	r2,r3,407f8 <___vfprintf_internal_r+0x100>
   407ec:	94800044 	addi	r18,r18,1
   407f0:	90800007 	ldb	r2,0(r18)
   407f4:	103ffc1e 	bne	r2,zero,407e8 <___vfprintf_internal_r+0xf0>
   407f8:	9561c83a 	sub	r16,r18,r21
   407fc:	80000e26 	beq	r16,zero,40838 <___vfprintf_internal_r+0x140>
   40800:	da011d17 	ldw	r8,1140(sp)
   40804:	d8c11c17 	ldw	r3,1136(sp)
   40808:	4d400015 	stw	r21,0(r9)
   4080c:	4c000115 	stw	r16,4(r9)
   40810:	4411883a 	add	r8,r8,r16
   40814:	18c00044 	addi	r3,r3,1
   40818:	da011d15 	stw	r8,1140(sp)
   4081c:	d8c11c15 	stw	r3,1136(sp)
   40820:	008001c4 	movi	r2,7
   40824:	10c11016 	blt	r2,r3,40c68 <___vfprintf_internal_r+0x570>
   40828:	4a400204 	addi	r9,r9,8
   4082c:	d8812c17 	ldw	r2,1200(sp)
   40830:	1405883a 	add	r2,r2,r16
   40834:	d8812c15 	stw	r2,1200(sp)
   40838:	90800007 	ldb	r2,0(r18)
   4083c:	1000ee26 	beq	r2,zero,40bf8 <___vfprintf_internal_r+0x500>
   40840:	95400044 	addi	r21,r18,1
   40844:	94800047 	ldb	r18,1(r18)
   40848:	073fffc4 	movi	fp,-1
   4084c:	e007883a 	mov	r3,fp
   40850:	d8012585 	stb	zero,1174(sp)
   40854:	d8012e15 	stw	zero,1208(sp)
   40858:	0021883a 	mov	r16,zero
   4085c:	05001604 	movi	r20,88
   40860:	04c00244 	movi	r19,9
   40864:	4839883a 	mov	fp,r9
   40868:	ad400044 	addi	r21,r21,1
   4086c:	90bff804 	addi	r2,r18,-32
   40870:	a080462e 	bgeu	r20,r2,4098c <___vfprintf_internal_r+0x294>
   40874:	e013883a 	mov	r9,fp
   40878:	9000df26 	beq	r18,zero,40bf8 <___vfprintf_internal_r+0x500>
   4087c:	00c00044 	movi	r3,1
   40880:	d8c12815 	stw	r3,1184(sp)
   40884:	dc810405 	stb	r18,1040(sp)
   40888:	d8012585 	stb	zero,1174(sp)
   4088c:	d8c12b15 	stw	r3,1196(sp)
   40890:	dcc10404 	addi	r19,sp,1040
   40894:	d8013115 	stw	zero,1220(sp)
   40898:	80c0008c 	andi	r3,r16,2
   4089c:	d8c12a15 	stw	r3,1192(sp)
   408a0:	18000326 	beq	r3,zero,408b0 <___vfprintf_internal_r+0x1b8>
   408a4:	d8c12817 	ldw	r3,1184(sp)
   408a8:	18c00084 	addi	r3,r3,2
   408ac:	d8c12815 	stw	r3,1184(sp)
   408b0:	80c0210c 	andi	r3,r16,132
   408b4:	d8c12f15 	stw	r3,1212(sp)
   408b8:	1802251e 	bne	r3,zero,41150 <___vfprintf_internal_r+0xa58>
   408bc:	d9012e17 	ldw	r4,1208(sp)
   408c0:	d8c12817 	ldw	r3,1184(sp)
   408c4:	20edc83a 	sub	r22,r4,r3
   408c8:	0582210e 	bge	zero,r22,41150 <___vfprintf_internal_r+0xa58>
   408cc:	02800404 	movi	r10,16
   408d0:	da011d17 	ldw	r8,1140(sp)
   408d4:	d8c11c17 	ldw	r3,1136(sp)
   408d8:	05c00074 	movhi	r23,1
   408dc:	bdc04884 	addi	r23,r23,290
   408e0:	5580200e 	bge	r10,r22,40964 <___vfprintf_internal_r+0x26c>
   408e4:	dc813815 	stw	r18,1248(sp)
   408e8:	5039883a 	mov	fp,r10
   408ec:	b825883a 	mov	r18,r23
   408f0:	050001c4 	movi	r20,7
   408f4:	b02f883a 	mov	r23,r22
   408f8:	802d883a 	mov	r22,r16
   408fc:	dc012917 	ldw	r16,1188(sp)
   40900:	00000306 	br	40910 <___vfprintf_internal_r+0x218>
   40904:	bdfffc04 	addi	r23,r23,-16
   40908:	4a400204 	addi	r9,r9,8
   4090c:	e5c0110e 	bge	fp,r23,40954 <___vfprintf_internal_r+0x25c>
   40910:	4c800015 	stw	r18,0(r9)
   40914:	4f000115 	stw	fp,4(r9)
   40918:	42000404 	addi	r8,r8,16
   4091c:	18c00044 	addi	r3,r3,1
   40920:	da011d15 	stw	r8,1140(sp)
   40924:	d8c11c15 	stw	r3,1136(sp)
   40928:	a0fff60e 	bge	r20,r3,40904 <___vfprintf_internal_r+0x20c>
   4092c:	8809883a 	mov	r4,r17
   40930:	800b883a 	mov	r5,r16
   40934:	d9811b04 	addi	r6,sp,1132
   40938:	00406c40 	call	406c4 <__sprint_r>
   4093c:	1000b41e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   40940:	bdfffc04 	addi	r23,r23,-16
   40944:	da011d17 	ldw	r8,1140(sp)
   40948:	d8c11c17 	ldw	r3,1136(sp)
   4094c:	da400404 	addi	r9,sp,16
   40950:	e5ffef16 	blt	fp,r23,40910 <___vfprintf_internal_r+0x218>
   40954:	b021883a 	mov	r16,r22
   40958:	b82d883a 	mov	r22,r23
   4095c:	902f883a 	mov	r23,r18
   40960:	dc813817 	ldw	r18,1248(sp)
   40964:	4dc00015 	stw	r23,0(r9)
   40968:	4d800115 	stw	r22,4(r9)
   4096c:	4591883a 	add	r8,r8,r22
   40970:	18c00044 	addi	r3,r3,1
   40974:	da011d15 	stw	r8,1140(sp)
   40978:	d8c11c15 	stw	r3,1136(sp)
   4097c:	008001c4 	movi	r2,7
   40980:	10c3fe16 	blt	r2,r3,4197c <___vfprintf_internal_r+0x1284>
   40984:	4a400204 	addi	r9,r9,8
   40988:	0001f306 	br	41158 <___vfprintf_internal_r+0xa60>
   4098c:	1085883a 	add	r2,r2,r2
   40990:	1085883a 	add	r2,r2,r2
   40994:	01000134 	movhi	r4,4
   40998:	21026a04 	addi	r4,r4,2472
   4099c:	1105883a 	add	r2,r2,r4
   409a0:	10800017 	ldw	r2,0(r2)
   409a4:	1000683a 	jmp	r2
   409a8:	00041084 	movi	zero,4162
   409ac:	00040874 	movhi	zero,4129
   409b0:	00040874 	movhi	zero,4129
   409b4:	0004109c 	xori	zero,zero,4162
   409b8:	00040874 	movhi	zero,4129
   409bc:	00040874 	movhi	zero,4129
   409c0:	00040874 	movhi	zero,4129
   409c4:	00040874 	movhi	zero,4129
   409c8:	00040874 	movhi	zero,4129
   409cc:	00040874 	movhi	zero,4129
   409d0:	00040f54 	movui	zero,4157
   409d4:	000410e8 	cmpgeui	zero,zero,4163
   409d8:	00040874 	movhi	zero,4129
   409dc:	00040b1c 	xori	zero,zero,4140
   409e0:	00040ebc 	xorhi	zero,zero,4154
   409e4:	00040874 	movhi	zero,4129
   409e8:	000410a8 	cmpgeui	zero,zero,4162
   409ec:	000410b4 	movhi	zero,4162
   409f0:	000410b4 	movhi	zero,4162
   409f4:	000410b4 	movhi	zero,4162
   409f8:	000410b4 	movhi	zero,4162
   409fc:	000410b4 	movhi	zero,4162
   40a00:	000410b4 	movhi	zero,4162
   40a04:	000410b4 	movhi	zero,4162
   40a08:	000410b4 	movhi	zero,4162
   40a0c:	000410b4 	movhi	zero,4162
   40a10:	00040874 	movhi	zero,4129
   40a14:	00040874 	movhi	zero,4129
   40a18:	00040874 	movhi	zero,4129
   40a1c:	00040874 	movhi	zero,4129
   40a20:	00040874 	movhi	zero,4129
   40a24:	00040874 	movhi	zero,4129
   40a28:	00040874 	movhi	zero,4129
   40a2c:	00040874 	movhi	zero,4129
   40a30:	00040874 	movhi	zero,4129
   40a34:	00040874 	movhi	zero,4129
   40a38:	00040c8c 	andi	zero,zero,4146
   40a3c:	00040d4c 	andi	zero,zero,4149
   40a40:	00040874 	movhi	zero,4129
   40a44:	00040d4c 	andi	zero,zero,4149
   40a48:	00040874 	movhi	zero,4129
   40a4c:	00040874 	movhi	zero,4129
   40a50:	00040874 	movhi	zero,4129
   40a54:	00040874 	movhi	zero,4129
   40a58:	00040de0 	cmpeqi	zero,zero,4151
   40a5c:	00040874 	movhi	zero,4129
   40a60:	00040874 	movhi	zero,4129
   40a64:	00040dec 	andhi	zero,zero,4151
   40a68:	00040874 	movhi	zero,4129
   40a6c:	00040874 	movhi	zero,4129
   40a70:	00040874 	movhi	zero,4129
   40a74:	00040874 	movhi	zero,4129
   40a78:	00040874 	movhi	zero,4129
   40a7c:	00040e24 	muli	zero,zero,4152
   40a80:	00040874 	movhi	zero,4129
   40a84:	00040874 	movhi	zero,4129
   40a88:	00040e60 	cmpeqi	zero,zero,4153
   40a8c:	00040874 	movhi	zero,4129
   40a90:	00040874 	movhi	zero,4129
   40a94:	00040874 	movhi	zero,4129
   40a98:	00040874 	movhi	zero,4129
   40a9c:	00040874 	movhi	zero,4129
   40aa0:	00040874 	movhi	zero,4129
   40aa4:	00040874 	movhi	zero,4129
   40aa8:	00040874 	movhi	zero,4129
   40aac:	00040874 	movhi	zero,4129
   40ab0:	00040874 	movhi	zero,4129
   40ab4:	000410f8 	rdprs	zero,zero,4163
   40ab8:	0004112c 	andhi	zero,zero,4164
   40abc:	00040d4c 	andi	zero,zero,4149
   40ac0:	00040d4c 	andi	zero,zero,4149
   40ac4:	00040d4c 	andi	zero,zero,4149
   40ac8:	00041078 	rdprs	zero,zero,4161
   40acc:	0004112c 	andhi	zero,zero,4164
   40ad0:	00040874 	movhi	zero,4129
   40ad4:	00040874 	movhi	zero,4129
   40ad8:	00040f04 	movi	zero,4156
   40adc:	00040874 	movhi	zero,4129
   40ae0:	00040f1c 	xori	zero,zero,4156
   40ae4:	00041138 	rdprs	zero,zero,4164
   40ae8:	00040f7c 	xorhi	zero,zero,4157
   40aec:	00040fcc 	andi	zero,zero,4159
   40af0:	00040874 	movhi	zero,4129
   40af4:	00040fd8 	cmpnei	zero,zero,4159
   40af8:	00040874 	movhi	zero,4129
   40afc:	00041144 	movi	zero,4165
   40b00:	00040874 	movhi	zero,4129
   40b04:	00040874 	movhi	zero,4129
   40b08:	0004103c 	xorhi	zero,zero,4160
   40b0c:	d9012e17 	ldw	r4,1208(sp)
   40b10:	d8812d15 	stw	r2,1204(sp)
   40b14:	0109c83a 	sub	r4,zero,r4
   40b18:	d9012e15 	stw	r4,1208(sp)
   40b1c:	84000114 	ori	r16,r16,4
   40b20:	ac800007 	ldb	r18,0(r21)
   40b24:	003f5006 	br	40868 <___vfprintf_internal_r+0x170>
   40b28:	d9013017 	ldw	r4,1216(sp)
   40b2c:	d9412917 	ldw	r5,1188(sp)
   40b30:	00425980 	call	42598 <__swsetup_r>
   40b34:	10003d1e 	bne	r2,zero,40c2c <___vfprintf_internal_r+0x534>
   40b38:	d8c12917 	ldw	r3,1188(sp)
   40b3c:	1880030b 	ldhu	r2,12(r3)
   40b40:	00c00284 	movi	r3,10
   40b44:	1100068c 	andi	r4,r2,26
   40b48:	20ff101e 	bne	r4,r3,4078c <___vfprintf_internal_r+0x94>
   40b4c:	d9012917 	ldw	r4,1188(sp)
   40b50:	20c0038b 	ldhu	r3,14(r4)
   40b54:	193fffcc 	andi	r4,r3,65535
   40b58:	2120001c 	xori	r4,r4,32768
   40b5c:	21200004 	addi	r4,r4,-32768
   40b60:	203f0a16 	blt	r4,zero,4078c <___vfprintf_internal_r+0x94>
   40b64:	d9012917 	ldw	r4,1188(sp)
   40b68:	d9c12d17 	ldw	r7,1204(sp)
   40b6c:	10bfff4c 	andi	r2,r2,65533
   40b70:	22800717 	ldw	r10,28(r4)
   40b74:	22400917 	ldw	r9,36(r4)
   40b78:	d9013017 	ldw	r4,1216(sp)
   40b7c:	02010004 	movi	r8,1024
   40b80:	d881070d 	sth	r2,1052(sp)
   40b84:	d9410404 	addi	r5,sp,1040
   40b88:	d8800404 	addi	r2,sp,16
   40b8c:	800d883a 	mov	r6,r16
   40b90:	d8c1078d 	sth	r3,1054(sp)
   40b94:	da810b15 	stw	r10,1068(sp)
   40b98:	da410d15 	stw	r9,1076(sp)
   40b9c:	d8810415 	stw	r2,1040(sp)
   40ba0:	d8810815 	stw	r2,1056(sp)
   40ba4:	da010615 	stw	r8,1048(sp)
   40ba8:	da010915 	stw	r8,1060(sp)
   40bac:	d8010a15 	stw	zero,1064(sp)
   40bb0:	00406f80 	call	406f8 <___vfprintf_internal_r>
   40bb4:	d8812c15 	stw	r2,1200(sp)
   40bb8:	10000416 	blt	r2,zero,40bcc <___vfprintf_internal_r+0x4d4>
   40bbc:	d9013017 	ldw	r4,1216(sp)
   40bc0:	d9410404 	addi	r5,sp,1040
   40bc4:	0043f640 	call	43f64 <_fflush_r>
   40bc8:	1006501e 	bne	r2,zero,4250c <___vfprintf_internal_r+0x1e14>
   40bcc:	d881070b 	ldhu	r2,1052(sp)
   40bd0:	1080100c 	andi	r2,r2,64
   40bd4:	10bfffcc 	andi	r2,r2,65535
   40bd8:	10a0001c 	xori	r2,r2,32768
   40bdc:	10a00004 	addi	r2,r2,-32768
   40be0:	10001426 	beq	r2,zero,40c34 <___vfprintf_internal_r+0x53c>
   40be4:	d8c12917 	ldw	r3,1188(sp)
   40be8:	1880030b 	ldhu	r2,12(r3)
   40bec:	10801014 	ori	r2,r2,64
   40bf0:	1880030d 	sth	r2,12(r3)
   40bf4:	00000f06 	br	40c34 <___vfprintf_internal_r+0x53c>
   40bf8:	d8811d17 	ldw	r2,1140(sp)
   40bfc:	10000426 	beq	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   40c00:	d9013017 	ldw	r4,1216(sp)
   40c04:	d9412917 	ldw	r5,1188(sp)
   40c08:	d9811b04 	addi	r6,sp,1132
   40c0c:	00406c40 	call	406c4 <__sprint_r>
   40c10:	d8c12917 	ldw	r3,1188(sp)
   40c14:	1880030b 	ldhu	r2,12(r3)
   40c18:	1080100c 	andi	r2,r2,64
   40c1c:	10bfffcc 	andi	r2,r2,65535
   40c20:	10a0001c 	xori	r2,r2,32768
   40c24:	10a00004 	addi	r2,r2,-32768
   40c28:	10000226 	beq	r2,zero,40c34 <___vfprintf_internal_r+0x53c>
   40c2c:	00bfffc4 	movi	r2,-1
   40c30:	d8812c15 	stw	r2,1200(sp)
   40c34:	d8812c17 	ldw	r2,1200(sp)
   40c38:	dfc14617 	ldw	ra,1304(sp)
   40c3c:	df014517 	ldw	fp,1300(sp)
   40c40:	ddc14417 	ldw	r23,1296(sp)
   40c44:	dd814317 	ldw	r22,1292(sp)
   40c48:	dd414217 	ldw	r21,1288(sp)
   40c4c:	dd014117 	ldw	r20,1284(sp)
   40c50:	dcc14017 	ldw	r19,1280(sp)
   40c54:	dc813f17 	ldw	r18,1276(sp)
   40c58:	dc413e17 	ldw	r17,1272(sp)
   40c5c:	dc013d17 	ldw	r16,1268(sp)
   40c60:	dec14704 	addi	sp,sp,1308
   40c64:	f800283a 	ret
   40c68:	d9412917 	ldw	r5,1188(sp)
   40c6c:	8809883a 	mov	r4,r17
   40c70:	d9811b04 	addi	r6,sp,1132
   40c74:	00406c40 	call	406c4 <__sprint_r>
   40c78:	103fe51e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   40c7c:	da400404 	addi	r9,sp,16
   40c80:	003eea06 	br	4082c <___vfprintf_internal_r+0x134>
   40c84:	00442200 	call	44220 <__sinit>
   40c88:	003eb306 	br	40758 <___vfprintf_internal_r+0x60>
   40c8c:	e013883a 	mov	r9,fp
   40c90:	84000414 	ori	r16,r16,16
   40c94:	1839883a 	mov	fp,r3
   40c98:	8080080c 	andi	r2,r16,32
   40c9c:	10034426 	beq	r2,zero,419b0 <___vfprintf_internal_r+0x12b8>
   40ca0:	d8c12d17 	ldw	r3,1204(sp)
   40ca4:	18800117 	ldw	r2,4(r3)
   40ca8:	1dc00017 	ldw	r23,0(r3)
   40cac:	18c00204 	addi	r3,r3,8
   40cb0:	d8c12d15 	stw	r3,1204(sp)
   40cb4:	102d883a 	mov	r22,r2
   40cb8:	1003020e 	bge	r2,zero,418c4 <___vfprintf_internal_r+0x11cc>
   40cbc:	05efc83a 	sub	r23,zero,r23
   40cc0:	b804c03a 	cmpne	r2,r23,zero
   40cc4:	05adc83a 	sub	r22,zero,r22
   40cc8:	b0adc83a 	sub	r22,r22,r2
   40ccc:	00800b44 	movi	r2,45
   40cd0:	d8812585 	stb	r2,1174(sp)
   40cd4:	00c00044 	movi	r3,1
   40cd8:	bd84b03a 	or	r2,r23,r22
   40cdc:	e0000216 	blt	fp,zero,40ce8 <___vfprintf_internal_r+0x5f0>
   40ce0:	013fdfc4 	movi	r4,-129
   40ce4:	8120703a 	and	r16,r16,r4
   40ce8:	1001cc1e 	bne	r2,zero,4141c <___vfprintf_internal_r+0xd24>
   40cec:	e001cb1e 	bne	fp,zero,4141c <___vfprintf_internal_r+0xd24>
   40cf0:	18c03fcc 	andi	r3,r3,255
   40cf4:	1802ca1e 	bne	r3,zero,41820 <___vfprintf_internal_r+0x1128>
   40cf8:	8080004c 	andi	r2,r16,1
   40cfc:	1002c826 	beq	r2,zero,41820 <___vfprintf_internal_r+0x1128>
   40d00:	d8c13917 	ldw	r3,1252(sp)
   40d04:	00800c04 	movi	r2,48
   40d08:	d8810dc5 	stb	r2,1079(sp)
   40d0c:	d8c12b15 	stw	r3,1196(sp)
   40d10:	dcc10dc4 	addi	r19,sp,1079
   40d14:	d8812b17 	ldw	r2,1196(sp)
   40d18:	d8812815 	stw	r2,1184(sp)
   40d1c:	1700010e 	bge	r2,fp,40d24 <___vfprintf_internal_r+0x62c>
   40d20:	df012815 	stw	fp,1184(sp)
   40d24:	d8812583 	ldbu	r2,1174(sp)
   40d28:	df013115 	stw	fp,1220(sp)
   40d2c:	10803fcc 	andi	r2,r2,255
   40d30:	1080201c 	xori	r2,r2,128
   40d34:	10bfe004 	addi	r2,r2,-128
   40d38:	103ed726 	beq	r2,zero,40898 <___vfprintf_internal_r+0x1a0>
   40d3c:	d8c12817 	ldw	r3,1184(sp)
   40d40:	18c00044 	addi	r3,r3,1
   40d44:	d8c12815 	stw	r3,1184(sp)
   40d48:	003ed306 	br	40898 <___vfprintf_internal_r+0x1a0>
   40d4c:	8080020c 	andi	r2,r16,8
   40d50:	e013883a 	mov	r9,fp
   40d54:	1839883a 	mov	fp,r3
   40d58:	1003a626 	beq	r2,zero,41bf4 <___vfprintf_internal_r+0x14fc>
   40d5c:	d9012d17 	ldw	r4,1204(sp)
   40d60:	25800017 	ldw	r22,0(r4)
   40d64:	25000117 	ldw	r20,4(r4)
   40d68:	21000204 	addi	r4,r4,8
   40d6c:	d9012d15 	stw	r4,1204(sp)
   40d70:	dd813315 	stw	r22,1228(sp)
   40d74:	dd013415 	stw	r20,1232(sp)
   40d78:	b009883a 	mov	r4,r22
   40d7c:	a00b883a 	mov	r5,r20
   40d80:	da413c15 	stw	r9,1264(sp)
   40d84:	00473ac0 	call	473ac <__isinfd>
   40d88:	da413c17 	ldw	r9,1264(sp)
   40d8c:	b009883a 	mov	r4,r22
   40d90:	a00b883a 	mov	r5,r20
   40d94:	10041d26 	beq	r2,zero,41e0c <___vfprintf_internal_r+0x1714>
   40d98:	000d883a 	mov	r6,zero
   40d9c:	000f883a 	mov	r7,zero
   40da0:	00491800 	call	49180 <__ltdf2>
   40da4:	da413c17 	ldw	r9,1264(sp)
   40da8:	1004da16 	blt	r2,zero,42114 <___vfprintf_internal_r+0x1a1c>
   40dac:	d8812583 	ldbu	r2,1174(sp)
   40db0:	00c011c4 	movi	r3,71
   40db4:	1c83d116 	blt	r3,r18,41cfc <___vfprintf_internal_r+0x1604>
   40db8:	04c00074 	movhi	r19,1
   40dbc:	9cc03804 	addi	r19,r19,224
   40dc0:	00c000c4 	movi	r3,3
   40dc4:	d8c12815 	stw	r3,1184(sp)
   40dc8:	00ffdfc4 	movi	r3,-129
   40dcc:	80e0703a 	and	r16,r16,r3
   40dd0:	d8c12817 	ldw	r3,1184(sp)
   40dd4:	d8013115 	stw	zero,1220(sp)
   40dd8:	d8c12b15 	stw	r3,1196(sp)
   40ddc:	003fd306 	br	40d2c <___vfprintf_internal_r+0x634>
   40de0:	84000214 	ori	r16,r16,8
   40de4:	ac800007 	ldb	r18,0(r21)
   40de8:	003e9f06 	br	40868 <___vfprintf_internal_r+0x170>
   40dec:	e013883a 	mov	r9,fp
   40df0:	84000414 	ori	r16,r16,16
   40df4:	1839883a 	mov	fp,r3
   40df8:	8080080c 	andi	r2,r16,32
   40dfc:	10031d26 	beq	r2,zero,41a74 <___vfprintf_internal_r+0x137c>
   40e00:	d8812d17 	ldw	r2,1204(sp)
   40e04:	0007883a 	mov	r3,zero
   40e08:	15c00017 	ldw	r23,0(r2)
   40e0c:	15800117 	ldw	r22,4(r2)
   40e10:	10800204 	addi	r2,r2,8
   40e14:	d8812d15 	stw	r2,1204(sp)
   40e18:	d8012585 	stb	zero,1174(sp)
   40e1c:	bd84b03a 	or	r2,r23,r22
   40e20:	003fae06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   40e24:	e013883a 	mov	r9,fp
   40e28:	84000414 	ori	r16,r16,16
   40e2c:	1839883a 	mov	fp,r3
   40e30:	8080080c 	andi	r2,r16,32
   40e34:	1002e726 	beq	r2,zero,419d4 <___vfprintf_internal_r+0x12dc>
   40e38:	d8c12d17 	ldw	r3,1204(sp)
   40e3c:	d9012d17 	ldw	r4,1204(sp)
   40e40:	1dc00017 	ldw	r23,0(r3)
   40e44:	1d800117 	ldw	r22,4(r3)
   40e48:	21000204 	addi	r4,r4,8
   40e4c:	00c00044 	movi	r3,1
   40e50:	d9012d15 	stw	r4,1204(sp)
   40e54:	bd84b03a 	or	r2,r23,r22
   40e58:	d8012585 	stb	zero,1174(sp)
   40e5c:	003f9f06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   40e60:	e013883a 	mov	r9,fp
   40e64:	1839883a 	mov	fp,r3
   40e68:	00c00074 	movhi	r3,1
   40e6c:	18c03c04 	addi	r3,r3,240
   40e70:	d8c13615 	stw	r3,1240(sp)
   40e74:	8080080c 	andi	r2,r16,32
   40e78:	10007726 	beq	r2,zero,41058 <___vfprintf_internal_r+0x960>
   40e7c:	d9012d17 	ldw	r4,1204(sp)
   40e80:	25c00017 	ldw	r23,0(r4)
   40e84:	25800117 	ldw	r22,4(r4)
   40e88:	21000204 	addi	r4,r4,8
   40e8c:	d9012d15 	stw	r4,1204(sp)
   40e90:	8080004c 	andi	r2,r16,1
   40e94:	1002c226 	beq	r2,zero,419a0 <___vfprintf_internal_r+0x12a8>
   40e98:	bd84b03a 	or	r2,r23,r22
   40e9c:	10035d26 	beq	r2,zero,41c14 <___vfprintf_internal_r+0x151c>
   40ea0:	00c00c04 	movi	r3,48
   40ea4:	d8c12505 	stb	r3,1172(sp)
   40ea8:	dc812545 	stb	r18,1173(sp)
   40eac:	84000094 	ori	r16,r16,2
   40eb0:	00c00084 	movi	r3,2
   40eb4:	d8012585 	stb	zero,1174(sp)
   40eb8:	003f8806 	br	40cdc <___vfprintf_internal_r+0x5e4>
   40ebc:	ac800007 	ldb	r18,0(r21)
   40ec0:	00c00a84 	movi	r3,42
   40ec4:	adc00044 	addi	r23,r21,1
   40ec8:	90c57526 	beq	r18,r3,424a0 <___vfprintf_internal_r+0x1da8>
   40ecc:	95bff404 	addi	r22,r18,-48
   40ed0:	0009883a 	mov	r4,zero
   40ed4:	9d84ff36 	bltu	r19,r22,422d4 <___vfprintf_internal_r+0x1bdc>
   40ed8:	01400284 	movi	r5,10
   40edc:	00495d00 	call	495d0 <__mulsi3>
   40ee0:	bc800007 	ldb	r18,0(r23)
   40ee4:	b089883a 	add	r4,r22,r2
   40ee8:	bdc00044 	addi	r23,r23,1
   40eec:	95bff404 	addi	r22,r18,-48
   40ef0:	9dbff92e 	bgeu	r19,r22,40ed8 <___vfprintf_internal_r+0x7e0>
   40ef4:	2007883a 	mov	r3,r4
   40ef8:	20044316 	blt	r4,zero,42008 <___vfprintf_internal_r+0x1910>
   40efc:	b82b883a 	mov	r21,r23
   40f00:	003e5a06 	br	4086c <___vfprintf_internal_r+0x174>
   40f04:	ac800007 	ldb	r18,0(r21)
   40f08:	01001b04 	movi	r4,108
   40f0c:	a805883a 	mov	r2,r21
   40f10:	91045526 	beq	r18,r4,42068 <___vfprintf_internal_r+0x1970>
   40f14:	84000414 	ori	r16,r16,16
   40f18:	003e5306 	br	40868 <___vfprintf_internal_r+0x170>
   40f1c:	8080080c 	andi	r2,r16,32
   40f20:	e013883a 	mov	r9,fp
   40f24:	10034026 	beq	r2,zero,41c28 <___vfprintf_internal_r+0x1530>
   40f28:	d9012d17 	ldw	r4,1204(sp)
   40f2c:	20800017 	ldw	r2,0(r4)
   40f30:	d9012c17 	ldw	r4,1200(sp)
   40f34:	2007d7fa 	srai	r3,r4,31
   40f38:	d9012d17 	ldw	r4,1204(sp)
   40f3c:	10c00115 	stw	r3,4(r2)
   40f40:	21000104 	addi	r4,r4,4
   40f44:	d9012d15 	stw	r4,1204(sp)
   40f48:	d9012c17 	ldw	r4,1200(sp)
   40f4c:	11000015 	stw	r4,0(r2)
   40f50:	003e1f06 	br	407d0 <___vfprintf_internal_r+0xd8>
   40f54:	d9012d17 	ldw	r4,1204(sp)
   40f58:	21000017 	ldw	r4,0(r4)
   40f5c:	d9012e15 	stw	r4,1208(sp)
   40f60:	d9012d17 	ldw	r4,1204(sp)
   40f64:	20800104 	addi	r2,r4,4
   40f68:	d9012e17 	ldw	r4,1208(sp)
   40f6c:	203ee716 	blt	r4,zero,40b0c <___vfprintf_internal_r+0x414>
   40f70:	d8812d15 	stw	r2,1204(sp)
   40f74:	ac800007 	ldb	r18,0(r21)
   40f78:	003e3b06 	br	40868 <___vfprintf_internal_r+0x170>
   40f7c:	e013883a 	mov	r9,fp
   40f80:	1839883a 	mov	fp,r3
   40f84:	d8c12d17 	ldw	r3,1204(sp)
   40f88:	00800c04 	movi	r2,48
   40f8c:	01000074 	movhi	r4,1
   40f90:	21004104 	addi	r4,r4,260
   40f94:	1dc00017 	ldw	r23,0(r3)
   40f98:	18c00104 	addi	r3,r3,4
   40f9c:	d8812505 	stb	r2,1172(sp)
   40fa0:	00801e04 	movi	r2,120
   40fa4:	d8812545 	stb	r2,1173(sp)
   40fa8:	d8c12d15 	stw	r3,1204(sp)
   40fac:	002d883a 	mov	r22,zero
   40fb0:	84000094 	ori	r16,r16,2
   40fb4:	d9013615 	stw	r4,1240(sp)
   40fb8:	00c00084 	movi	r3,2
   40fbc:	04801e04 	movi	r18,120
   40fc0:	b805883a 	mov	r2,r23
   40fc4:	d8012585 	stb	zero,1174(sp)
   40fc8:	003f4406 	br	40cdc <___vfprintf_internal_r+0x5e4>
   40fcc:	84000814 	ori	r16,r16,32
   40fd0:	ac800007 	ldb	r18,0(r21)
   40fd4:	003e2406 	br	40868 <___vfprintf_internal_r+0x170>
   40fd8:	d8812d17 	ldw	r2,1204(sp)
   40fdc:	d8012585 	stb	zero,1174(sp)
   40fe0:	e013883a 	mov	r9,fp
   40fe4:	14c00017 	ldw	r19,0(r2)
   40fe8:	1839883a 	mov	fp,r3
   40fec:	15c00104 	addi	r23,r2,4
   40ff0:	98045526 	beq	r19,zero,42148 <___vfprintf_internal_r+0x1a50>
   40ff4:	9809883a 	mov	r4,r19
   40ff8:	18043116 	blt	r3,zero,420c0 <___vfprintf_internal_r+0x19c8>
   40ffc:	000b883a 	mov	r5,zero
   41000:	180d883a 	mov	r6,r3
   41004:	da413c15 	stw	r9,1264(sp)
   41008:	00458c00 	call	458c0 <memchr>
   4100c:	da413c17 	ldw	r9,1264(sp)
   41010:	10047a26 	beq	r2,zero,421fc <___vfprintf_internal_r+0x1b04>
   41014:	14c5c83a 	sub	r2,r2,r19
   41018:	d8812b15 	stw	r2,1196(sp)
   4101c:	e083d40e 	bge	fp,r2,41f70 <___vfprintf_internal_r+0x1878>
   41020:	df012815 	stw	fp,1184(sp)
   41024:	e004e416 	blt	fp,zero,423b8 <___vfprintf_internal_r+0x1cc0>
   41028:	d8812583 	ldbu	r2,1174(sp)
   4102c:	df012b15 	stw	fp,1196(sp)
   41030:	ddc12d15 	stw	r23,1204(sp)
   41034:	d8013115 	stw	zero,1220(sp)
   41038:	003f3c06 	br	40d2c <___vfprintf_internal_r+0x634>
   4103c:	00800074 	movhi	r2,1
   41040:	10804104 	addi	r2,r2,260
   41044:	d8813615 	stw	r2,1240(sp)
   41048:	8080080c 	andi	r2,r16,32
   4104c:	e013883a 	mov	r9,fp
   41050:	1839883a 	mov	fp,r3
   41054:	103f891e 	bne	r2,zero,40e7c <___vfprintf_internal_r+0x784>
   41058:	8080040c 	andi	r2,r16,16
   4105c:	1002c326 	beq	r2,zero,41b6c <___vfprintf_internal_r+0x1474>
   41060:	d8812d17 	ldw	r2,1204(sp)
   41064:	002d883a 	mov	r22,zero
   41068:	15c00017 	ldw	r23,0(r2)
   4106c:	10800104 	addi	r2,r2,4
   41070:	d8812d15 	stw	r2,1204(sp)
   41074:	003f8606 	br	40e90 <___vfprintf_internal_r+0x798>
   41078:	84001014 	ori	r16,r16,64
   4107c:	ac800007 	ldb	r18,0(r21)
   41080:	003df906 	br	40868 <___vfprintf_internal_r+0x170>
   41084:	d8812587 	ldb	r2,1174(sp)
   41088:	1002e51e 	bne	r2,zero,41c20 <___vfprintf_internal_r+0x1528>
   4108c:	00800804 	movi	r2,32
   41090:	d8812585 	stb	r2,1174(sp)
   41094:	ac800007 	ldb	r18,0(r21)
   41098:	003df306 	br	40868 <___vfprintf_internal_r+0x170>
   4109c:	84000054 	ori	r16,r16,1
   410a0:	ac800007 	ldb	r18,0(r21)
   410a4:	003df006 	br	40868 <___vfprintf_internal_r+0x170>
   410a8:	84002014 	ori	r16,r16,128
   410ac:	ac800007 	ldb	r18,0(r21)
   410b0:	003ded06 	br	40868 <___vfprintf_internal_r+0x170>
   410b4:	0009883a 	mov	r4,zero
   410b8:	95bff404 	addi	r22,r18,-48
   410bc:	182f883a 	mov	r23,r3
   410c0:	01400284 	movi	r5,10
   410c4:	00495d00 	call	495d0 <__mulsi3>
   410c8:	ac800007 	ldb	r18,0(r21)
   410cc:	1589883a 	add	r4,r2,r22
   410d0:	ad400044 	addi	r21,r21,1
   410d4:	95bff404 	addi	r22,r18,-48
   410d8:	9dbff92e 	bgeu	r19,r22,410c0 <___vfprintf_internal_r+0x9c8>
   410dc:	b807883a 	mov	r3,r23
   410e0:	d9012e15 	stw	r4,1208(sp)
   410e4:	003de106 	br	4086c <___vfprintf_internal_r+0x174>
   410e8:	00800ac4 	movi	r2,43
   410ec:	d8812585 	stb	r2,1174(sp)
   410f0:	ac800007 	ldb	r18,0(r21)
   410f4:	003ddc06 	br	40868 <___vfprintf_internal_r+0x170>
   410f8:	d8c12d17 	ldw	r3,1204(sp)
   410fc:	d9012d17 	ldw	r4,1204(sp)
   41100:	e013883a 	mov	r9,fp
   41104:	18800017 	ldw	r2,0(r3)
   41108:	21000104 	addi	r4,r4,4
   4110c:	00c00044 	movi	r3,1
   41110:	d8c12815 	stw	r3,1184(sp)
   41114:	d8012585 	stb	zero,1174(sp)
   41118:	d8810405 	stb	r2,1040(sp)
   4111c:	d9012d15 	stw	r4,1204(sp)
   41120:	d8c12b15 	stw	r3,1196(sp)
   41124:	dcc10404 	addi	r19,sp,1040
   41128:	003dda06 	br	40894 <___vfprintf_internal_r+0x19c>
   4112c:	e013883a 	mov	r9,fp
   41130:	1839883a 	mov	fp,r3
   41134:	003ed806 	br	40c98 <___vfprintf_internal_r+0x5a0>
   41138:	e013883a 	mov	r9,fp
   4113c:	1839883a 	mov	fp,r3
   41140:	003f2d06 	br	40df8 <___vfprintf_internal_r+0x700>
   41144:	e013883a 	mov	r9,fp
   41148:	1839883a 	mov	fp,r3
   4114c:	003f3806 	br	40e30 <___vfprintf_internal_r+0x738>
   41150:	da011d17 	ldw	r8,1140(sp)
   41154:	d8c11c17 	ldw	r3,1136(sp)
   41158:	d8812587 	ldb	r2,1174(sp)
   4115c:	10000b26 	beq	r2,zero,4118c <___vfprintf_internal_r+0xa94>
   41160:	d8812584 	addi	r2,sp,1174
   41164:	48800015 	stw	r2,0(r9)
   41168:	00800044 	movi	r2,1
   4116c:	48800115 	stw	r2,4(r9)
   41170:	4091883a 	add	r8,r8,r2
   41174:	1887883a 	add	r3,r3,r2
   41178:	da011d15 	stw	r8,1140(sp)
   4117c:	d8c11c15 	stw	r3,1136(sp)
   41180:	008001c4 	movi	r2,7
   41184:	10c18e16 	blt	r2,r3,417c0 <___vfprintf_internal_r+0x10c8>
   41188:	4a400204 	addi	r9,r9,8
   4118c:	d9012a17 	ldw	r4,1192(sp)
   41190:	20000b26 	beq	r4,zero,411c0 <___vfprintf_internal_r+0xac8>
   41194:	d8812504 	addi	r2,sp,1172
   41198:	48800015 	stw	r2,0(r9)
   4119c:	00800084 	movi	r2,2
   411a0:	48800115 	stw	r2,4(r9)
   411a4:	4091883a 	add	r8,r8,r2
   411a8:	18c00044 	addi	r3,r3,1
   411ac:	da011d15 	stw	r8,1140(sp)
   411b0:	d8c11c15 	stw	r3,1136(sp)
   411b4:	008001c4 	movi	r2,7
   411b8:	10c17816 	blt	r2,r3,4179c <___vfprintf_internal_r+0x10a4>
   411bc:	4a400204 	addi	r9,r9,8
   411c0:	d9012f17 	ldw	r4,1212(sp)
   411c4:	00802004 	movi	r2,128
   411c8:	2080fc26 	beq	r4,r2,415bc <___vfprintf_internal_r+0xec4>
   411cc:	d8813117 	ldw	r2,1220(sp)
   411d0:	d9012b17 	ldw	r4,1196(sp)
   411d4:	112fc83a 	sub	r23,r2,r4
   411d8:	05c02a0e 	bge	zero,r23,41284 <___vfprintf_internal_r+0xb8c>
   411dc:	07000404 	movi	fp,16
   411e0:	05000074 	movhi	r20,1
   411e4:	a5004c84 	addi	r20,r20,306
   411e8:	e5c01d0e 	bge	fp,r23,41260 <___vfprintf_internal_r+0xb68>
   411ec:	dc812a15 	stw	r18,1192(sp)
   411f0:	058001c4 	movi	r22,7
   411f4:	a025883a 	mov	r18,r20
   411f8:	8029883a 	mov	r20,r16
   411fc:	dc012917 	ldw	r16,1188(sp)
   41200:	00000306 	br	41210 <___vfprintf_internal_r+0xb18>
   41204:	bdfffc04 	addi	r23,r23,-16
   41208:	4a400204 	addi	r9,r9,8
   4120c:	e5c0110e 	bge	fp,r23,41254 <___vfprintf_internal_r+0xb5c>
   41210:	4c800015 	stw	r18,0(r9)
   41214:	4f000115 	stw	fp,4(r9)
   41218:	42000404 	addi	r8,r8,16
   4121c:	18c00044 	addi	r3,r3,1
   41220:	da011d15 	stw	r8,1140(sp)
   41224:	d8c11c15 	stw	r3,1136(sp)
   41228:	b0fff60e 	bge	r22,r3,41204 <___vfprintf_internal_r+0xb0c>
   4122c:	8809883a 	mov	r4,r17
   41230:	800b883a 	mov	r5,r16
   41234:	d9811b04 	addi	r6,sp,1132
   41238:	00406c40 	call	406c4 <__sprint_r>
   4123c:	103e741e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41240:	bdfffc04 	addi	r23,r23,-16
   41244:	da011d17 	ldw	r8,1140(sp)
   41248:	d8c11c17 	ldw	r3,1136(sp)
   4124c:	da400404 	addi	r9,sp,16
   41250:	e5ffef16 	blt	fp,r23,41210 <___vfprintf_internal_r+0xb18>
   41254:	a021883a 	mov	r16,r20
   41258:	9029883a 	mov	r20,r18
   4125c:	dc812a17 	ldw	r18,1192(sp)
   41260:	4d000015 	stw	r20,0(r9)
   41264:	4dc00115 	stw	r23,4(r9)
   41268:	45d1883a 	add	r8,r8,r23
   4126c:	18c00044 	addi	r3,r3,1
   41270:	da011d15 	stw	r8,1140(sp)
   41274:	d8c11c15 	stw	r3,1136(sp)
   41278:	008001c4 	movi	r2,7
   4127c:	10c13e16 	blt	r2,r3,41778 <___vfprintf_internal_r+0x1080>
   41280:	4a400204 	addi	r9,r9,8
   41284:	8080400c 	andi	r2,r16,256
   41288:	1000831e 	bne	r2,zero,41498 <___vfprintf_internal_r+0xda0>
   4128c:	d8812b17 	ldw	r2,1196(sp)
   41290:	4cc00015 	stw	r19,0(r9)
   41294:	48800115 	stw	r2,4(r9)
   41298:	4091883a 	add	r8,r8,r2
   4129c:	18c00044 	addi	r3,r3,1
   412a0:	da011d15 	stw	r8,1140(sp)
   412a4:	d8c11c15 	stw	r3,1136(sp)
   412a8:	008001c4 	movi	r2,7
   412ac:	10c05316 	blt	r2,r3,413fc <___vfprintf_internal_r+0xd04>
   412b0:	4a400204 	addi	r9,r9,8
   412b4:	8400010c 	andi	r16,r16,4
   412b8:	80002e26 	beq	r16,zero,41374 <___vfprintf_internal_r+0xc7c>
   412bc:	d8812e17 	ldw	r2,1208(sp)
   412c0:	d8c12817 	ldw	r3,1184(sp)
   412c4:	10e1c83a 	sub	r16,r2,r3
   412c8:	04002a0e 	bge	zero,r16,41374 <___vfprintf_internal_r+0xc7c>
   412cc:	04800404 	movi	r18,16
   412d0:	d8c11c17 	ldw	r3,1136(sp)
   412d4:	05c00074 	movhi	r23,1
   412d8:	bdc04884 	addi	r23,r23,290
   412dc:	9400170e 	bge	r18,r16,4133c <___vfprintf_internal_r+0xc44>
   412e0:	04c001c4 	movi	r19,7
   412e4:	dd012917 	ldw	r20,1188(sp)
   412e8:	00000306 	br	412f8 <___vfprintf_internal_r+0xc00>
   412ec:	843ffc04 	addi	r16,r16,-16
   412f0:	4a400204 	addi	r9,r9,8
   412f4:	9400110e 	bge	r18,r16,4133c <___vfprintf_internal_r+0xc44>
   412f8:	4dc00015 	stw	r23,0(r9)
   412fc:	4c800115 	stw	r18,4(r9)
   41300:	42000404 	addi	r8,r8,16
   41304:	18c00044 	addi	r3,r3,1
   41308:	da011d15 	stw	r8,1140(sp)
   4130c:	d8c11c15 	stw	r3,1136(sp)
   41310:	98fff60e 	bge	r19,r3,412ec <___vfprintf_internal_r+0xbf4>
   41314:	8809883a 	mov	r4,r17
   41318:	a00b883a 	mov	r5,r20
   4131c:	d9811b04 	addi	r6,sp,1132
   41320:	00406c40 	call	406c4 <__sprint_r>
   41324:	103e3a1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41328:	843ffc04 	addi	r16,r16,-16
   4132c:	da011d17 	ldw	r8,1140(sp)
   41330:	d8c11c17 	ldw	r3,1136(sp)
   41334:	da400404 	addi	r9,sp,16
   41338:	943fef16 	blt	r18,r16,412f8 <___vfprintf_internal_r+0xc00>
   4133c:	4dc00015 	stw	r23,0(r9)
   41340:	4c000115 	stw	r16,4(r9)
   41344:	8211883a 	add	r8,r16,r8
   41348:	18c00044 	addi	r3,r3,1
   4134c:	da011d15 	stw	r8,1140(sp)
   41350:	d8c11c15 	stw	r3,1136(sp)
   41354:	008001c4 	movi	r2,7
   41358:	10c0060e 	bge	r2,r3,41374 <___vfprintf_internal_r+0xc7c>
   4135c:	d9412917 	ldw	r5,1188(sp)
   41360:	8809883a 	mov	r4,r17
   41364:	d9811b04 	addi	r6,sp,1132
   41368:	00406c40 	call	406c4 <__sprint_r>
   4136c:	103e281e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41370:	da011d17 	ldw	r8,1140(sp)
   41374:	dd012817 	ldw	r20,1184(sp)
   41378:	d9012e17 	ldw	r4,1208(sp)
   4137c:	a100010e 	bge	r20,r4,41384 <___vfprintf_internal_r+0xc8c>
   41380:	2029883a 	mov	r20,r4
   41384:	d8812c17 	ldw	r2,1200(sp)
   41388:	1505883a 	add	r2,r2,r20
   4138c:	d8812c15 	stw	r2,1200(sp)
   41390:	4000b91e 	bne	r8,zero,41678 <___vfprintf_internal_r+0xf80>
   41394:	d8011c15 	stw	zero,1136(sp)
   41398:	a8800007 	ldb	r2,0(r21)
   4139c:	da400404 	addi	r9,sp,16
   413a0:	103d0d1e 	bne	r2,zero,407d8 <___vfprintf_internal_r+0xe0>
   413a4:	a825883a 	mov	r18,r21
   413a8:	003d2306 	br	40838 <___vfprintf_internal_r+0x140>
   413ac:	d9412917 	ldw	r5,1188(sp)
   413b0:	8809883a 	mov	r4,r17
   413b4:	d9811b04 	addi	r6,sp,1132
   413b8:	00406c40 	call	406c4 <__sprint_r>
   413bc:	103e141e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   413c0:	da011d17 	ldw	r8,1140(sp)
   413c4:	da400404 	addi	r9,sp,16
   413c8:	8080004c 	andi	r2,r16,1
   413cc:	103fb926 	beq	r2,zero,412b4 <___vfprintf_internal_r+0xbbc>
   413d0:	d8c11c17 	ldw	r3,1136(sp)
   413d4:	d9013717 	ldw	r4,1244(sp)
   413d8:	00800044 	movi	r2,1
   413dc:	48800115 	stw	r2,4(r9)
   413e0:	49000015 	stw	r4,0(r9)
   413e4:	4091883a 	add	r8,r8,r2
   413e8:	1887883a 	add	r3,r3,r2
   413ec:	da011d15 	stw	r8,1140(sp)
   413f0:	d8c11c15 	stw	r3,1136(sp)
   413f4:	008001c4 	movi	r2,7
   413f8:	10ffad0e 	bge	r2,r3,412b0 <___vfprintf_internal_r+0xbb8>
   413fc:	d9412917 	ldw	r5,1188(sp)
   41400:	8809883a 	mov	r4,r17
   41404:	d9811b04 	addi	r6,sp,1132
   41408:	00406c40 	call	406c4 <__sprint_r>
   4140c:	103e001e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41410:	da400404 	addi	r9,sp,16
   41414:	da011d17 	ldw	r8,1140(sp)
   41418:	003fa606 	br	412b4 <___vfprintf_internal_r+0xbbc>
   4141c:	18803fcc 	andi	r2,r3,255
   41420:	00c00044 	movi	r3,1
   41424:	10c10126 	beq	r2,r3,4182c <___vfprintf_internal_r+0x1134>
   41428:	00c00084 	movi	r3,2
   4142c:	10c0ed26 	beq	r2,r3,417e4 <___vfprintf_internal_r+0x10ec>
   41430:	d8c10dc4 	addi	r3,sp,1079
   41434:	b808d0fa 	srli	r4,r23,3
   41438:	b00a977a 	slli	r5,r22,29
   4143c:	b02cd0fa 	srli	r22,r22,3
   41440:	bdc001cc 	andi	r23,r23,7
   41444:	b8800c04 	addi	r2,r23,48
   41448:	292eb03a 	or	r23,r5,r4
   4144c:	18800005 	stb	r2,0(r3)
   41450:	bd88b03a 	or	r4,r23,r22
   41454:	1827883a 	mov	r19,r3
   41458:	18ffffc4 	addi	r3,r3,-1
   4145c:	203ff51e 	bne	r4,zero,41434 <___vfprintf_internal_r+0xd3c>
   41460:	8100004c 	andi	r4,r16,1
   41464:	980b883a 	mov	r5,r19
   41468:	20000726 	beq	r4,zero,41488 <___vfprintf_internal_r+0xd90>
   4146c:	10803fcc 	andi	r2,r2,255
   41470:	1080201c 	xori	r2,r2,128
   41474:	10bfe004 	addi	r2,r2,-128
   41478:	01000c04 	movi	r4,48
   4147c:	11000226 	beq	r2,r4,41488 <___vfprintf_internal_r+0xd90>
   41480:	1827883a 	mov	r19,r3
   41484:	293fffc5 	stb	r4,-1(r5)
   41488:	d8812717 	ldw	r2,1180(sp)
   4148c:	14c5c83a 	sub	r2,r2,r19
   41490:	d8812b15 	stw	r2,1196(sp)
   41494:	003e1f06 	br	40d14 <___vfprintf_internal_r+0x61c>
   41498:	00801944 	movi	r2,101
   4149c:	14807c0e 	bge	r2,r18,41690 <___vfprintf_internal_r+0xf98>
   414a0:	d9013317 	ldw	r4,1228(sp)
   414a4:	d9413417 	ldw	r5,1232(sp)
   414a8:	000d883a 	mov	r6,zero
   414ac:	000f883a 	mov	r7,zero
   414b0:	d8c13b15 	stw	r3,1260(sp)
   414b4:	da013a15 	stw	r8,1256(sp)
   414b8:	da413c15 	stw	r9,1264(sp)
   414bc:	00490000 	call	49000 <__eqdf2>
   414c0:	d8c13b17 	ldw	r3,1260(sp)
   414c4:	da013a17 	ldw	r8,1256(sp)
   414c8:	da413c17 	ldw	r9,1264(sp)
   414cc:	1001001e 	bne	r2,zero,418d0 <___vfprintf_internal_r+0x11d8>
   414d0:	00800074 	movhi	r2,1
   414d4:	10804804 	addi	r2,r2,288
   414d8:	48800015 	stw	r2,0(r9)
   414dc:	00800044 	movi	r2,1
   414e0:	48800115 	stw	r2,4(r9)
   414e4:	4091883a 	add	r8,r8,r2
   414e8:	1887883a 	add	r3,r3,r2
   414ec:	da011d15 	stw	r8,1140(sp)
   414f0:	d8c11c15 	stw	r3,1136(sp)
   414f4:	008001c4 	movi	r2,7
   414f8:	10c20316 	blt	r2,r3,41d08 <___vfprintf_internal_r+0x1610>
   414fc:	4a400204 	addi	r9,r9,8
   41500:	d8812417 	ldw	r2,1168(sp)
   41504:	d8c13217 	ldw	r3,1224(sp)
   41508:	10c00216 	blt	r2,r3,41514 <___vfprintf_internal_r+0xe1c>
   4150c:	8080004c 	andi	r2,r16,1
   41510:	103f6826 	beq	r2,zero,412b4 <___vfprintf_internal_r+0xbbc>
   41514:	d8c11c17 	ldw	r3,1136(sp)
   41518:	d9013717 	ldw	r4,1244(sp)
   4151c:	00800044 	movi	r2,1
   41520:	48800115 	stw	r2,4(r9)
   41524:	49000015 	stw	r4,0(r9)
   41528:	4091883a 	add	r8,r8,r2
   4152c:	1887883a 	add	r3,r3,r2
   41530:	da011d15 	stw	r8,1140(sp)
   41534:	d8c11c15 	stw	r3,1136(sp)
   41538:	008001c4 	movi	r2,7
   4153c:	10c2ce16 	blt	r2,r3,42078 <___vfprintf_internal_r+0x1980>
   41540:	4a400204 	addi	r9,r9,8
   41544:	d8813217 	ldw	r2,1224(sp)
   41548:	14bfffc4 	addi	r18,r2,-1
   4154c:	04bf590e 	bge	zero,r18,412b4 <___vfprintf_internal_r+0xbbc>
   41550:	04c00404 	movi	r19,16
   41554:	d8c11c17 	ldw	r3,1136(sp)
   41558:	05000074 	movhi	r20,1
   4155c:	a5004c84 	addi	r20,r20,306
   41560:	9c818a0e 	bge	r19,r18,41b8c <___vfprintf_internal_r+0x1494>
   41564:	058001c4 	movi	r22,7
   41568:	ddc12917 	ldw	r23,1188(sp)
   4156c:	00000306 	br	4157c <___vfprintf_internal_r+0xe84>
   41570:	4a400204 	addi	r9,r9,8
   41574:	94bffc04 	addi	r18,r18,-16
   41578:	9c81840e 	bge	r19,r18,41b8c <___vfprintf_internal_r+0x1494>
   4157c:	4d000015 	stw	r20,0(r9)
   41580:	4cc00115 	stw	r19,4(r9)
   41584:	42000404 	addi	r8,r8,16
   41588:	18c00044 	addi	r3,r3,1
   4158c:	da011d15 	stw	r8,1140(sp)
   41590:	d8c11c15 	stw	r3,1136(sp)
   41594:	b0fff60e 	bge	r22,r3,41570 <___vfprintf_internal_r+0xe78>
   41598:	8809883a 	mov	r4,r17
   4159c:	b80b883a 	mov	r5,r23
   415a0:	d9811b04 	addi	r6,sp,1132
   415a4:	00406c40 	call	406c4 <__sprint_r>
   415a8:	103d991e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   415ac:	da011d17 	ldw	r8,1140(sp)
   415b0:	d8c11c17 	ldw	r3,1136(sp)
   415b4:	da400404 	addi	r9,sp,16
   415b8:	003fee06 	br	41574 <___vfprintf_internal_r+0xe7c>
   415bc:	d8812e17 	ldw	r2,1208(sp)
   415c0:	d9012817 	ldw	r4,1184(sp)
   415c4:	112fc83a 	sub	r23,r2,r4
   415c8:	05ff000e 	bge	zero,r23,411cc <___vfprintf_internal_r+0xad4>
   415cc:	07000404 	movi	fp,16
   415d0:	05000074 	movhi	r20,1
   415d4:	a5004c84 	addi	r20,r20,306
   415d8:	e5c01d0e 	bge	fp,r23,41650 <___vfprintf_internal_r+0xf58>
   415dc:	dc812a15 	stw	r18,1192(sp)
   415e0:	058001c4 	movi	r22,7
   415e4:	a025883a 	mov	r18,r20
   415e8:	8029883a 	mov	r20,r16
   415ec:	dc012917 	ldw	r16,1188(sp)
   415f0:	00000306 	br	41600 <___vfprintf_internal_r+0xf08>
   415f4:	bdfffc04 	addi	r23,r23,-16
   415f8:	4a400204 	addi	r9,r9,8
   415fc:	e5c0110e 	bge	fp,r23,41644 <___vfprintf_internal_r+0xf4c>
   41600:	4c800015 	stw	r18,0(r9)
   41604:	4f000115 	stw	fp,4(r9)
   41608:	42000404 	addi	r8,r8,16
   4160c:	18c00044 	addi	r3,r3,1
   41610:	da011d15 	stw	r8,1140(sp)
   41614:	d8c11c15 	stw	r3,1136(sp)
   41618:	b0fff60e 	bge	r22,r3,415f4 <___vfprintf_internal_r+0xefc>
   4161c:	8809883a 	mov	r4,r17
   41620:	800b883a 	mov	r5,r16
   41624:	d9811b04 	addi	r6,sp,1132
   41628:	00406c40 	call	406c4 <__sprint_r>
   4162c:	103d781e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41630:	bdfffc04 	addi	r23,r23,-16
   41634:	da011d17 	ldw	r8,1140(sp)
   41638:	d8c11c17 	ldw	r3,1136(sp)
   4163c:	da400404 	addi	r9,sp,16
   41640:	e5ffef16 	blt	fp,r23,41600 <___vfprintf_internal_r+0xf08>
   41644:	a021883a 	mov	r16,r20
   41648:	9029883a 	mov	r20,r18
   4164c:	dc812a17 	ldw	r18,1192(sp)
   41650:	4d000015 	stw	r20,0(r9)
   41654:	4dc00115 	stw	r23,4(r9)
   41658:	45d1883a 	add	r8,r8,r23
   4165c:	18c00044 	addi	r3,r3,1
   41660:	da011d15 	stw	r8,1140(sp)
   41664:	d8c11c15 	stw	r3,1136(sp)
   41668:	008001c4 	movi	r2,7
   4166c:	10c13616 	blt	r2,r3,41b48 <___vfprintf_internal_r+0x1450>
   41670:	4a400204 	addi	r9,r9,8
   41674:	003ed506 	br	411cc <___vfprintf_internal_r+0xad4>
   41678:	d9412917 	ldw	r5,1188(sp)
   4167c:	8809883a 	mov	r4,r17
   41680:	d9811b04 	addi	r6,sp,1132
   41684:	00406c40 	call	406c4 <__sprint_r>
   41688:	103f4226 	beq	r2,zero,41394 <___vfprintf_internal_r+0xc9c>
   4168c:	003d6006 	br	40c10 <___vfprintf_internal_r+0x518>
   41690:	d9013217 	ldw	r4,1224(sp)
   41694:	00800044 	movi	r2,1
   41698:	4cc00015 	stw	r19,0(r9)
   4169c:	1101000e 	bge	r2,r4,41aa0 <___vfprintf_internal_r+0x13a8>
   416a0:	00800044 	movi	r2,1
   416a4:	48800115 	stw	r2,4(r9)
   416a8:	4091883a 	add	r8,r8,r2
   416ac:	1887883a 	add	r3,r3,r2
   416b0:	da011d15 	stw	r8,1140(sp)
   416b4:	d8c11c15 	stw	r3,1136(sp)
   416b8:	008001c4 	movi	r2,7
   416bc:	10c10c16 	blt	r2,r3,41af0 <___vfprintf_internal_r+0x13f8>
   416c0:	4a400204 	addi	r9,r9,8
   416c4:	d8813717 	ldw	r2,1244(sp)
   416c8:	48800015 	stw	r2,0(r9)
   416cc:	00800044 	movi	r2,1
   416d0:	48800115 	stw	r2,4(r9)
   416d4:	4091883a 	add	r8,r8,r2
   416d8:	1887883a 	add	r3,r3,r2
   416dc:	da011d15 	stw	r8,1140(sp)
   416e0:	d8c11c15 	stw	r3,1136(sp)
   416e4:	008001c4 	movi	r2,7
   416e8:	10c10a16 	blt	r2,r3,41b14 <___vfprintf_internal_r+0x141c>
   416ec:	4c800204 	addi	r18,r9,8
   416f0:	d9013317 	ldw	r4,1228(sp)
   416f4:	d9413417 	ldw	r5,1232(sp)
   416f8:	000d883a 	mov	r6,zero
   416fc:	000f883a 	mov	r7,zero
   41700:	d8c13b15 	stw	r3,1260(sp)
   41704:	da013a15 	stw	r8,1256(sp)
   41708:	004905c0 	call	4905c <__nedf2>
   4170c:	d8c13b17 	ldw	r3,1260(sp)
   41710:	da013a17 	ldw	r8,1256(sp)
   41714:	1000ba26 	beq	r2,zero,41a00 <___vfprintf_internal_r+0x1308>
   41718:	d9013217 	ldw	r4,1224(sp)
   4171c:	9cc00044 	addi	r19,r19,1
   41720:	94c00015 	stw	r19,0(r18)
   41724:	20bfffc4 	addi	r2,r4,-1
   41728:	90800115 	stw	r2,4(r18)
   4172c:	4091883a 	add	r8,r8,r2
   41730:	18c00044 	addi	r3,r3,1
   41734:	da011d15 	stw	r8,1140(sp)
   41738:	d8c11c15 	stw	r3,1136(sp)
   4173c:	008001c4 	movi	r2,7
   41740:	10c0e216 	blt	r2,r3,41acc <___vfprintf_internal_r+0x13d4>
   41744:	94800204 	addi	r18,r18,8
   41748:	d9013517 	ldw	r4,1236(sp)
   4174c:	d8811fc4 	addi	r2,sp,1151
   41750:	90800015 	stw	r2,0(r18)
   41754:	91000115 	stw	r4,4(r18)
   41758:	4111883a 	add	r8,r8,r4
   4175c:	18c00044 	addi	r3,r3,1
   41760:	da011d15 	stw	r8,1140(sp)
   41764:	d8c11c15 	stw	r3,1136(sp)
   41768:	008001c4 	movi	r2,7
   4176c:	10ff2316 	blt	r2,r3,413fc <___vfprintf_internal_r+0xd04>
   41770:	92400204 	addi	r9,r18,8
   41774:	003ecf06 	br	412b4 <___vfprintf_internal_r+0xbbc>
   41778:	d9412917 	ldw	r5,1188(sp)
   4177c:	8809883a 	mov	r4,r17
   41780:	d9811b04 	addi	r6,sp,1132
   41784:	00406c40 	call	406c4 <__sprint_r>
   41788:	103d211e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   4178c:	da011d17 	ldw	r8,1140(sp)
   41790:	d8c11c17 	ldw	r3,1136(sp)
   41794:	da400404 	addi	r9,sp,16
   41798:	003eba06 	br	41284 <___vfprintf_internal_r+0xb8c>
   4179c:	d9412917 	ldw	r5,1188(sp)
   417a0:	8809883a 	mov	r4,r17
   417a4:	d9811b04 	addi	r6,sp,1132
   417a8:	00406c40 	call	406c4 <__sprint_r>
   417ac:	103d181e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   417b0:	da011d17 	ldw	r8,1140(sp)
   417b4:	d8c11c17 	ldw	r3,1136(sp)
   417b8:	da400404 	addi	r9,sp,16
   417bc:	003e8006 	br	411c0 <___vfprintf_internal_r+0xac8>
   417c0:	d9412917 	ldw	r5,1188(sp)
   417c4:	8809883a 	mov	r4,r17
   417c8:	d9811b04 	addi	r6,sp,1132
   417cc:	00406c40 	call	406c4 <__sprint_r>
   417d0:	103d0f1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   417d4:	da011d17 	ldw	r8,1140(sp)
   417d8:	d8c11c17 	ldw	r3,1136(sp)
   417dc:	da400404 	addi	r9,sp,16
   417e0:	003e6a06 	br	4118c <___vfprintf_internal_r+0xa94>
   417e4:	d9413617 	ldw	r5,1240(sp)
   417e8:	d8810dc4 	addi	r2,sp,1079
   417ec:	b8c003cc 	andi	r3,r23,15
   417f0:	b008973a 	slli	r4,r22,28
   417f4:	28c7883a 	add	r3,r5,r3
   417f8:	b82ed13a 	srli	r23,r23,4
   417fc:	18c00003 	ldbu	r3,0(r3)
   41800:	b02cd13a 	srli	r22,r22,4
   41804:	25eeb03a 	or	r23,r4,r23
   41808:	10c00005 	stb	r3,0(r2)
   4180c:	bd86b03a 	or	r3,r23,r22
   41810:	1027883a 	mov	r19,r2
   41814:	10bfffc4 	addi	r2,r2,-1
   41818:	183ff41e 	bne	r3,zero,417ec <___vfprintf_internal_r+0x10f4>
   4181c:	003f1a06 	br	41488 <___vfprintf_internal_r+0xd90>
   41820:	d8012b15 	stw	zero,1196(sp)
   41824:	dcc10e04 	addi	r19,sp,1080
   41828:	003d3a06 	br	40d14 <___vfprintf_internal_r+0x61c>
   4182c:	b0025426 	beq	r22,zero,42180 <___vfprintf_internal_r+0x1a88>
   41830:	b807883a 	mov	r3,r23
   41834:	d8810dc4 	addi	r2,sp,1079
   41838:	882f883a 	mov	r23,r17
   4183c:	04c00244 	movi	r19,9
   41840:	8023883a 	mov	r17,r16
   41844:	da412815 	stw	r9,1184(sp)
   41848:	1821883a 	mov	r16,r3
   4184c:	8009883a 	mov	r4,r16
   41850:	b00b883a 	mov	r5,r22
   41854:	01800284 	movi	r6,10
   41858:	000f883a 	mov	r7,zero
   4185c:	1029883a 	mov	r20,r2
   41860:	00481380 	call	48138 <__umoddi3>
   41864:	10800c04 	addi	r2,r2,48
   41868:	8009883a 	mov	r4,r16
   4186c:	b00b883a 	mov	r5,r22
   41870:	a0800005 	stb	r2,0(r20)
   41874:	01800284 	movi	r6,10
   41878:	000f883a 	mov	r7,zero
   4187c:	0047ae80 	call	47ae8 <__udivdi3>
   41880:	1021883a 	mov	r16,r2
   41884:	182d883a 	mov	r22,r3
   41888:	a0bfffc4 	addi	r2,r20,-1
   4188c:	183fef1e 	bne	r3,zero,4184c <___vfprintf_internal_r+0x1154>
   41890:	9c3fee36 	bltu	r19,r16,4184c <___vfprintf_internal_r+0x1154>
   41894:	da412817 	ldw	r9,1184(sp)
   41898:	8005883a 	mov	r2,r16
   4189c:	8821883a 	mov	r16,r17
   418a0:	b823883a 	mov	r17,r23
   418a4:	102f883a 	mov	r23,r2
   418a8:	d8812717 	ldw	r2,1180(sp)
   418ac:	a4ffffc4 	addi	r19,r20,-1
   418b0:	bdc00c04 	addi	r23,r23,48
   418b4:	14c5c83a 	sub	r2,r2,r19
   418b8:	a5ffffc5 	stb	r23,-1(r20)
   418bc:	d8812b15 	stw	r2,1196(sp)
   418c0:	003d1406 	br	40d14 <___vfprintf_internal_r+0x61c>
   418c4:	00c00044 	movi	r3,1
   418c8:	bd84b03a 	or	r2,r23,r22
   418cc:	003d0306 	br	40cdc <___vfprintf_internal_r+0x5e4>
   418d0:	dc812417 	ldw	r18,1168(sp)
   418d4:	0481140e 	bge	zero,r18,41d28 <___vfprintf_internal_r+0x1630>
   418d8:	d9013217 	ldw	r4,1224(sp)
   418dc:	4cc00015 	stw	r19,0(r9)
   418e0:	9100ec16 	blt	r18,r4,41c94 <___vfprintf_internal_r+0x159c>
   418e4:	49000115 	stw	r4,4(r9)
   418e8:	4111883a 	add	r8,r8,r4
   418ec:	18c00044 	addi	r3,r3,1
   418f0:	da011d15 	stw	r8,1140(sp)
   418f4:	d8c11c15 	stw	r3,1136(sp)
   418f8:	008001c4 	movi	r2,7
   418fc:	10c23616 	blt	r2,r3,421d8 <___vfprintf_internal_r+0x1ae0>
   41900:	4a400204 	addi	r9,r9,8
   41904:	d8813217 	ldw	r2,1224(sp)
   41908:	90a5c83a 	sub	r18,r18,r2
   4190c:	04beae0e 	bge	zero,r18,413c8 <___vfprintf_internal_r+0xcd0>
   41910:	04c00404 	movi	r19,16
   41914:	d8c11c17 	ldw	r3,1136(sp)
   41918:	05000074 	movhi	r20,1
   4191c:	a5004c84 	addi	r20,r20,306
   41920:	9c81dd0e 	bge	r19,r18,42098 <___vfprintf_internal_r+0x19a0>
   41924:	058001c4 	movi	r22,7
   41928:	ddc12917 	ldw	r23,1188(sp)
   4192c:	00000306 	br	4193c <___vfprintf_internal_r+0x1244>
   41930:	4a400204 	addi	r9,r9,8
   41934:	94bffc04 	addi	r18,r18,-16
   41938:	9c81d70e 	bge	r19,r18,42098 <___vfprintf_internal_r+0x19a0>
   4193c:	4d000015 	stw	r20,0(r9)
   41940:	4cc00115 	stw	r19,4(r9)
   41944:	42000404 	addi	r8,r8,16
   41948:	18c00044 	addi	r3,r3,1
   4194c:	da011d15 	stw	r8,1140(sp)
   41950:	d8c11c15 	stw	r3,1136(sp)
   41954:	b0fff60e 	bge	r22,r3,41930 <___vfprintf_internal_r+0x1238>
   41958:	8809883a 	mov	r4,r17
   4195c:	b80b883a 	mov	r5,r23
   41960:	d9811b04 	addi	r6,sp,1132
   41964:	00406c40 	call	406c4 <__sprint_r>
   41968:	103ca91e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   4196c:	da011d17 	ldw	r8,1140(sp)
   41970:	d8c11c17 	ldw	r3,1136(sp)
   41974:	da400404 	addi	r9,sp,16
   41978:	003fee06 	br	41934 <___vfprintf_internal_r+0x123c>
   4197c:	d9412917 	ldw	r5,1188(sp)
   41980:	8809883a 	mov	r4,r17
   41984:	d9811b04 	addi	r6,sp,1132
   41988:	00406c40 	call	406c4 <__sprint_r>
   4198c:	103ca01e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41990:	da011d17 	ldw	r8,1140(sp)
   41994:	d8c11c17 	ldw	r3,1136(sp)
   41998:	da400404 	addi	r9,sp,16
   4199c:	003dee06 	br	41158 <___vfprintf_internal_r+0xa60>
   419a0:	00c00084 	movi	r3,2
   419a4:	bd84b03a 	or	r2,r23,r22
   419a8:	d8012585 	stb	zero,1174(sp)
   419ac:	003ccb06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   419b0:	8080040c 	andi	r2,r16,16
   419b4:	1000ae26 	beq	r2,zero,41c70 <___vfprintf_internal_r+0x1578>
   419b8:	d9012d17 	ldw	r4,1204(sp)
   419bc:	25c00017 	ldw	r23,0(r4)
   419c0:	21000104 	addi	r4,r4,4
   419c4:	d9012d15 	stw	r4,1204(sp)
   419c8:	b82dd7fa 	srai	r22,r23,31
   419cc:	b005883a 	mov	r2,r22
   419d0:	003cb906 	br	40cb8 <___vfprintf_internal_r+0x5c0>
   419d4:	8080040c 	andi	r2,r16,16
   419d8:	10007026 	beq	r2,zero,41b9c <___vfprintf_internal_r+0x14a4>
   419dc:	d8812d17 	ldw	r2,1204(sp)
   419e0:	002d883a 	mov	r22,zero
   419e4:	00c00044 	movi	r3,1
   419e8:	15c00017 	ldw	r23,0(r2)
   419ec:	10800104 	addi	r2,r2,4
   419f0:	d8812d15 	stw	r2,1204(sp)
   419f4:	d8012585 	stb	zero,1174(sp)
   419f8:	b805883a 	mov	r2,r23
   419fc:	003cb706 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41a00:	d8813217 	ldw	r2,1224(sp)
   41a04:	14ffffc4 	addi	r19,r2,-1
   41a08:	04ff4f0e 	bge	zero,r19,41748 <___vfprintf_internal_r+0x1050>
   41a0c:	05800404 	movi	r22,16
   41a10:	05000074 	movhi	r20,1
   41a14:	a5004c84 	addi	r20,r20,306
   41a18:	b4c0470e 	bge	r22,r19,41b38 <___vfprintf_internal_r+0x1440>
   41a1c:	05c001c4 	movi	r23,7
   41a20:	df012917 	ldw	fp,1188(sp)
   41a24:	00000306 	br	41a34 <___vfprintf_internal_r+0x133c>
   41a28:	94800204 	addi	r18,r18,8
   41a2c:	9cfffc04 	addi	r19,r19,-16
   41a30:	b4c0410e 	bge	r22,r19,41b38 <___vfprintf_internal_r+0x1440>
   41a34:	95000015 	stw	r20,0(r18)
   41a38:	95800115 	stw	r22,4(r18)
   41a3c:	42000404 	addi	r8,r8,16
   41a40:	18c00044 	addi	r3,r3,1
   41a44:	da011d15 	stw	r8,1140(sp)
   41a48:	d8c11c15 	stw	r3,1136(sp)
   41a4c:	b8fff60e 	bge	r23,r3,41a28 <___vfprintf_internal_r+0x1330>
   41a50:	8809883a 	mov	r4,r17
   41a54:	e00b883a 	mov	r5,fp
   41a58:	d9811b04 	addi	r6,sp,1132
   41a5c:	00406c40 	call	406c4 <__sprint_r>
   41a60:	103c6b1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41a64:	da011d17 	ldw	r8,1140(sp)
   41a68:	d8c11c17 	ldw	r3,1136(sp)
   41a6c:	dc800404 	addi	r18,sp,16
   41a70:	003fee06 	br	41a2c <___vfprintf_internal_r+0x1334>
   41a74:	8080040c 	andi	r2,r16,16
   41a78:	10005326 	beq	r2,zero,41bc8 <___vfprintf_internal_r+0x14d0>
   41a7c:	d8c12d17 	ldw	r3,1204(sp)
   41a80:	002d883a 	mov	r22,zero
   41a84:	1dc00017 	ldw	r23,0(r3)
   41a88:	18c00104 	addi	r3,r3,4
   41a8c:	d8c12d15 	stw	r3,1204(sp)
   41a90:	b805883a 	mov	r2,r23
   41a94:	0007883a 	mov	r3,zero
   41a98:	d8012585 	stb	zero,1174(sp)
   41a9c:	003c8f06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41aa0:	8088703a 	and	r4,r16,r2
   41aa4:	203efe1e 	bne	r4,zero,416a0 <___vfprintf_internal_r+0xfa8>
   41aa8:	48800115 	stw	r2,4(r9)
   41aac:	42000044 	addi	r8,r8,1
   41ab0:	18c00044 	addi	r3,r3,1
   41ab4:	da011d15 	stw	r8,1140(sp)
   41ab8:	d8c11c15 	stw	r3,1136(sp)
   41abc:	008001c4 	movi	r2,7
   41ac0:	10c00216 	blt	r2,r3,41acc <___vfprintf_internal_r+0x13d4>
   41ac4:	4c800204 	addi	r18,r9,8
   41ac8:	003f1f06 	br	41748 <___vfprintf_internal_r+0x1050>
   41acc:	d9412917 	ldw	r5,1188(sp)
   41ad0:	8809883a 	mov	r4,r17
   41ad4:	d9811b04 	addi	r6,sp,1132
   41ad8:	00406c40 	call	406c4 <__sprint_r>
   41adc:	103c4c1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41ae0:	dc800404 	addi	r18,sp,16
   41ae4:	da011d17 	ldw	r8,1140(sp)
   41ae8:	d8c11c17 	ldw	r3,1136(sp)
   41aec:	003f1606 	br	41748 <___vfprintf_internal_r+0x1050>
   41af0:	d9412917 	ldw	r5,1188(sp)
   41af4:	8809883a 	mov	r4,r17
   41af8:	d9811b04 	addi	r6,sp,1132
   41afc:	00406c40 	call	406c4 <__sprint_r>
   41b00:	103c431e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41b04:	da011d17 	ldw	r8,1140(sp)
   41b08:	d8c11c17 	ldw	r3,1136(sp)
   41b0c:	da400404 	addi	r9,sp,16
   41b10:	003eec06 	br	416c4 <___vfprintf_internal_r+0xfcc>
   41b14:	d9412917 	ldw	r5,1188(sp)
   41b18:	8809883a 	mov	r4,r17
   41b1c:	d9811b04 	addi	r6,sp,1132
   41b20:	00406c40 	call	406c4 <__sprint_r>
   41b24:	103c3a1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41b28:	da011d17 	ldw	r8,1140(sp)
   41b2c:	d8c11c17 	ldw	r3,1136(sp)
   41b30:	dc800404 	addi	r18,sp,16
   41b34:	003eee06 	br	416f0 <___vfprintf_internal_r+0xff8>
   41b38:	95000015 	stw	r20,0(r18)
   41b3c:	94c00115 	stw	r19,4(r18)
   41b40:	44d1883a 	add	r8,r8,r19
   41b44:	003efa06 	br	41730 <___vfprintf_internal_r+0x1038>
   41b48:	d9412917 	ldw	r5,1188(sp)
   41b4c:	8809883a 	mov	r4,r17
   41b50:	d9811b04 	addi	r6,sp,1132
   41b54:	00406c40 	call	406c4 <__sprint_r>
   41b58:	103c2d1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41b5c:	da011d17 	ldw	r8,1140(sp)
   41b60:	d8c11c17 	ldw	r3,1136(sp)
   41b64:	da400404 	addi	r9,sp,16
   41b68:	003d9806 	br	411cc <___vfprintf_internal_r+0xad4>
   41b6c:	8080100c 	andi	r2,r16,64
   41b70:	10011626 	beq	r2,zero,41fcc <___vfprintf_internal_r+0x18d4>
   41b74:	d8c12d17 	ldw	r3,1204(sp)
   41b78:	002d883a 	mov	r22,zero
   41b7c:	1dc0000b 	ldhu	r23,0(r3)
   41b80:	18c00104 	addi	r3,r3,4
   41b84:	d8c12d15 	stw	r3,1204(sp)
   41b88:	003cc106 	br	40e90 <___vfprintf_internal_r+0x798>
   41b8c:	4d000015 	stw	r20,0(r9)
   41b90:	4c800115 	stw	r18,4(r9)
   41b94:	4491883a 	add	r8,r8,r18
   41b98:	003dc006 	br	4129c <___vfprintf_internal_r+0xba4>
   41b9c:	8080100c 	andi	r2,r16,64
   41ba0:	10010126 	beq	r2,zero,41fa8 <___vfprintf_internal_r+0x18b0>
   41ba4:	d8c12d17 	ldw	r3,1204(sp)
   41ba8:	002d883a 	mov	r22,zero
   41bac:	1dc0000b 	ldhu	r23,0(r3)
   41bb0:	18c00104 	addi	r3,r3,4
   41bb4:	d8c12d15 	stw	r3,1204(sp)
   41bb8:	b805883a 	mov	r2,r23
   41bbc:	00c00044 	movi	r3,1
   41bc0:	d8012585 	stb	zero,1174(sp)
   41bc4:	003c4506 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41bc8:	8080100c 	andi	r2,r16,64
   41bcc:	10010526 	beq	r2,zero,41fe4 <___vfprintf_internal_r+0x18ec>
   41bd0:	d9012d17 	ldw	r4,1204(sp)
   41bd4:	002d883a 	mov	r22,zero
   41bd8:	0007883a 	mov	r3,zero
   41bdc:	25c0000b 	ldhu	r23,0(r4)
   41be0:	21000104 	addi	r4,r4,4
   41be4:	d9012d15 	stw	r4,1204(sp)
   41be8:	b805883a 	mov	r2,r23
   41bec:	d8012585 	stb	zero,1174(sp)
   41bf0:	003c3a06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41bf4:	d8812d17 	ldw	r2,1204(sp)
   41bf8:	15800017 	ldw	r22,0(r2)
   41bfc:	15000117 	ldw	r20,4(r2)
   41c00:	10800204 	addi	r2,r2,8
   41c04:	d8812d15 	stw	r2,1204(sp)
   41c08:	dd813315 	stw	r22,1228(sp)
   41c0c:	dd013415 	stw	r20,1232(sp)
   41c10:	003c5906 	br	40d78 <___vfprintf_internal_r+0x680>
   41c14:	00c00084 	movi	r3,2
   41c18:	d8012585 	stb	zero,1174(sp)
   41c1c:	003c2f06 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41c20:	ac800007 	ldb	r18,0(r21)
   41c24:	003b1006 	br	40868 <___vfprintf_internal_r+0x170>
   41c28:	8080040c 	andi	r2,r16,16
   41c2c:	1000091e 	bne	r2,zero,41c54 <___vfprintf_internal_r+0x155c>
   41c30:	8400100c 	andi	r16,r16,64
   41c34:	80000726 	beq	r16,zero,41c54 <___vfprintf_internal_r+0x155c>
   41c38:	d8c12d17 	ldw	r3,1204(sp)
   41c3c:	d9012c17 	ldw	r4,1200(sp)
   41c40:	18800017 	ldw	r2,0(r3)
   41c44:	18c00104 	addi	r3,r3,4
   41c48:	d8c12d15 	stw	r3,1204(sp)
   41c4c:	1100000d 	sth	r4,0(r2)
   41c50:	003adf06 	br	407d0 <___vfprintf_internal_r+0xd8>
   41c54:	d8c12d17 	ldw	r3,1204(sp)
   41c58:	d9012c17 	ldw	r4,1200(sp)
   41c5c:	18800017 	ldw	r2,0(r3)
   41c60:	18c00104 	addi	r3,r3,4
   41c64:	d8c12d15 	stw	r3,1204(sp)
   41c68:	11000015 	stw	r4,0(r2)
   41c6c:	003ad806 	br	407d0 <___vfprintf_internal_r+0xd8>
   41c70:	8080100c 	andi	r2,r16,64
   41c74:	1000c526 	beq	r2,zero,41f8c <___vfprintf_internal_r+0x1894>
   41c78:	d8812d17 	ldw	r2,1204(sp)
   41c7c:	15c0000f 	ldh	r23,0(r2)
   41c80:	10800104 	addi	r2,r2,4
   41c84:	d8812d15 	stw	r2,1204(sp)
   41c88:	b82dd7fa 	srai	r22,r23,31
   41c8c:	b005883a 	mov	r2,r22
   41c90:	003c0906 	br	40cb8 <___vfprintf_internal_r+0x5c0>
   41c94:	4c800115 	stw	r18,4(r9)
   41c98:	9211883a 	add	r8,r18,r8
   41c9c:	18c00044 	addi	r3,r3,1
   41ca0:	da011d15 	stw	r8,1140(sp)
   41ca4:	d8c11c15 	stw	r3,1136(sp)
   41ca8:	008001c4 	movi	r2,7
   41cac:	10c14016 	blt	r2,r3,421b0 <___vfprintf_internal_r+0x1ab8>
   41cb0:	4a400204 	addi	r9,r9,8
   41cb4:	d8813717 	ldw	r2,1244(sp)
   41cb8:	9ca7883a 	add	r19,r19,r18
   41cbc:	48800015 	stw	r2,0(r9)
   41cc0:	00800044 	movi	r2,1
   41cc4:	48800115 	stw	r2,4(r9)
   41cc8:	4091883a 	add	r8,r8,r2
   41ccc:	1887883a 	add	r3,r3,r2
   41cd0:	da011d15 	stw	r8,1140(sp)
   41cd4:	d8c11c15 	stw	r3,1136(sp)
   41cd8:	008001c4 	movi	r2,7
   41cdc:	10c12c16 	blt	r2,r3,42190 <___vfprintf_internal_r+0x1a98>
   41ce0:	4a400204 	addi	r9,r9,8
   41ce4:	d9013217 	ldw	r4,1224(sp)
   41ce8:	da011d17 	ldw	r8,1140(sp)
   41cec:	d8c11c17 	ldw	r3,1136(sp)
   41cf0:	24a5c83a 	sub	r18,r4,r18
   41cf4:	4cc00015 	stw	r19,0(r9)
   41cf8:	003fa506 	br	41b90 <___vfprintf_internal_r+0x1498>
   41cfc:	04c00074 	movhi	r19,1
   41d00:	9cc03904 	addi	r19,r19,228
   41d04:	003c2e06 	br	40dc0 <___vfprintf_internal_r+0x6c8>
   41d08:	d9412917 	ldw	r5,1188(sp)
   41d0c:	8809883a 	mov	r4,r17
   41d10:	d9811b04 	addi	r6,sp,1132
   41d14:	00406c40 	call	406c4 <__sprint_r>
   41d18:	103bbd1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41d1c:	da011d17 	ldw	r8,1140(sp)
   41d20:	da400404 	addi	r9,sp,16
   41d24:	003df606 	br	41500 <___vfprintf_internal_r+0xe08>
   41d28:	00800074 	movhi	r2,1
   41d2c:	10804804 	addi	r2,r2,288
   41d30:	48800015 	stw	r2,0(r9)
   41d34:	00800044 	movi	r2,1
   41d38:	48800115 	stw	r2,4(r9)
   41d3c:	4091883a 	add	r8,r8,r2
   41d40:	1887883a 	add	r3,r3,r2
   41d44:	da011d15 	stw	r8,1140(sp)
   41d48:	d8c11c15 	stw	r3,1136(sp)
   41d4c:	008001c4 	movi	r2,7
   41d50:	10c0bc16 	blt	r2,r3,42044 <___vfprintf_internal_r+0x194c>
   41d54:	4a400204 	addi	r9,r9,8
   41d58:	9000041e 	bne	r18,zero,41d6c <___vfprintf_internal_r+0x1674>
   41d5c:	d8c13217 	ldw	r3,1224(sp)
   41d60:	1800021e 	bne	r3,zero,41d6c <___vfprintf_internal_r+0x1674>
   41d64:	8080004c 	andi	r2,r16,1
   41d68:	103d5226 	beq	r2,zero,412b4 <___vfprintf_internal_r+0xbbc>
   41d6c:	d8c11c17 	ldw	r3,1136(sp)
   41d70:	d9013717 	ldw	r4,1244(sp)
   41d74:	00800044 	movi	r2,1
   41d78:	48800115 	stw	r2,4(r9)
   41d7c:	49000015 	stw	r4,0(r9)
   41d80:	4091883a 	add	r8,r8,r2
   41d84:	1887883a 	add	r3,r3,r2
   41d88:	da011d15 	stw	r8,1140(sp)
   41d8c:	d8c11c15 	stw	r3,1136(sp)
   41d90:	008001c4 	movi	r2,7
   41d94:	10c14516 	blt	r2,r3,422ac <___vfprintf_internal_r+0x1bb4>
   41d98:	4a400204 	addi	r9,r9,8
   41d9c:	04a5c83a 	sub	r18,zero,r18
   41da0:	0480d70e 	bge	zero,r18,42100 <___vfprintf_internal_r+0x1a08>
   41da4:	05800404 	movi	r22,16
   41da8:	05000074 	movhi	r20,1
   41dac:	a5004c84 	addi	r20,r20,306
   41db0:	b480db0e 	bge	r22,r18,42120 <___vfprintf_internal_r+0x1a28>
   41db4:	05c001c4 	movi	r23,7
   41db8:	df012917 	ldw	fp,1188(sp)
   41dbc:	00000306 	br	41dcc <___vfprintf_internal_r+0x16d4>
   41dc0:	4a400204 	addi	r9,r9,8
   41dc4:	94bffc04 	addi	r18,r18,-16
   41dc8:	b480d50e 	bge	r22,r18,42120 <___vfprintf_internal_r+0x1a28>
   41dcc:	4d000015 	stw	r20,0(r9)
   41dd0:	4d800115 	stw	r22,4(r9)
   41dd4:	42000404 	addi	r8,r8,16
   41dd8:	18c00044 	addi	r3,r3,1
   41ddc:	da011d15 	stw	r8,1140(sp)
   41de0:	d8c11c15 	stw	r3,1136(sp)
   41de4:	b8fff60e 	bge	r23,r3,41dc0 <___vfprintf_internal_r+0x16c8>
   41de8:	8809883a 	mov	r4,r17
   41dec:	e00b883a 	mov	r5,fp
   41df0:	d9811b04 	addi	r6,sp,1132
   41df4:	00406c40 	call	406c4 <__sprint_r>
   41df8:	103b851e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   41dfc:	da011d17 	ldw	r8,1140(sp)
   41e00:	d8c11c17 	ldw	r3,1136(sp)
   41e04:	da400404 	addi	r9,sp,16
   41e08:	003fee06 	br	41dc4 <___vfprintf_internal_r+0x16cc>
   41e0c:	da413c15 	stw	r9,1264(sp)
   41e10:	00473e40 	call	473e4 <__isnand>
   41e14:	da413c17 	ldw	r9,1264(sp)
   41e18:	10007e1e 	bne	r2,zero,42014 <___vfprintf_internal_r+0x191c>
   41e1c:	00bfffc4 	movi	r2,-1
   41e20:	e0816a26 	beq	fp,r2,423cc <___vfprintf_internal_r+0x1cd4>
   41e24:	008019c4 	movi	r2,103
   41e28:	90816526 	beq	r18,r2,423c0 <___vfprintf_internal_r+0x1cc8>
   41e2c:	008011c4 	movi	r2,71
   41e30:	90816326 	beq	r18,r2,423c0 <___vfprintf_internal_r+0x1cc8>
   41e34:	80c04014 	ori	r3,r16,256
   41e38:	d8c12a15 	stw	r3,1192(sp)
   41e3c:	a0016516 	blt	r20,zero,423d4 <___vfprintf_internal_r+0x1cdc>
   41e40:	d8012f05 	stb	zero,1212(sp)
   41e44:	00801984 	movi	r2,102
   41e48:	9080f226 	beq	r18,r2,42214 <___vfprintf_internal_r+0x1b1c>
   41e4c:	00801184 	movi	r2,70
   41e50:	9080f026 	beq	r18,r2,42214 <___vfprintf_internal_r+0x1b1c>
   41e54:	00801944 	movi	r2,101
   41e58:	90818d26 	beq	r18,r2,42490 <___vfprintf_internal_r+0x1d98>
   41e5c:	00801144 	movi	r2,69
   41e60:	90818b26 	beq	r18,r2,42490 <___vfprintf_internal_r+0x1d98>
   41e64:	e02f883a 	mov	r23,fp
   41e68:	d8812404 	addi	r2,sp,1168
   41e6c:	d8800115 	stw	r2,4(sp)
   41e70:	d8812304 	addi	r2,sp,1164
   41e74:	d8800215 	stw	r2,8(sp)
   41e78:	d8812204 	addi	r2,sp,1160
   41e7c:	ddc00015 	stw	r23,0(sp)
   41e80:	d8800315 	stw	r2,12(sp)
   41e84:	8809883a 	mov	r4,r17
   41e88:	b00b883a 	mov	r5,r22
   41e8c:	a00d883a 	mov	r6,r20
   41e90:	01c00084 	movi	r7,2
   41e94:	da413c15 	stw	r9,1264(sp)
   41e98:	00429480 	call	42948 <_dtoa_r>
   41e9c:	1027883a 	mov	r19,r2
   41ea0:	008019c4 	movi	r2,103
   41ea4:	da413c17 	ldw	r9,1264(sp)
   41ea8:	9081951e 	bne	r18,r2,42500 <___vfprintf_internal_r+0x1e08>
   41eac:	8080004c 	andi	r2,r16,1
   41eb0:	10017926 	beq	r2,zero,42498 <___vfprintf_internal_r+0x1da0>
   41eb4:	00801184 	movi	r2,70
   41eb8:	9dc7883a 	add	r3,r19,r23
   41ebc:	9080e626 	beq	r18,r2,42258 <___vfprintf_internal_r+0x1b60>
   41ec0:	b009883a 	mov	r4,r22
   41ec4:	a00b883a 	mov	r5,r20
   41ec8:	000d883a 	mov	r6,zero
   41ecc:	000f883a 	mov	r7,zero
   41ed0:	d8c13b15 	stw	r3,1260(sp)
   41ed4:	da413c15 	stw	r9,1264(sp)
   41ed8:	00490000 	call	49000 <__eqdf2>
   41edc:	d8c13b17 	ldw	r3,1260(sp)
   41ee0:	da413c17 	ldw	r9,1264(sp)
   41ee4:	10000726 	beq	r2,zero,41f04 <___vfprintf_internal_r+0x180c>
   41ee8:	d8812217 	ldw	r2,1160(sp)
   41eec:	10c18a2e 	bgeu	r2,r3,42518 <___vfprintf_internal_r+0x1e20>
   41ef0:	01000c04 	movi	r4,48
   41ef4:	11000005 	stb	r4,0(r2)
   41ef8:	10800044 	addi	r2,r2,1
   41efc:	d8812215 	stw	r2,1160(sp)
   41f00:	10fffc1e 	bne	r2,r3,41ef4 <___vfprintf_internal_r+0x17fc>
   41f04:	1cc7c83a 	sub	r3,r3,r19
   41f08:	d8c13215 	stw	r3,1224(sp)
   41f0c:	008019c4 	movi	r2,103
   41f10:	9080fa26 	beq	r18,r2,422fc <___vfprintf_internal_r+0x1c04>
   41f14:	008011c4 	movi	r2,71
   41f18:	9080f826 	beq	r18,r2,422fc <___vfprintf_internal_r+0x1c04>
   41f1c:	00801984 	movi	r2,102
   41f20:	90818e1e 	bne	r18,r2,4255c <___vfprintf_internal_r+0x1e64>
   41f24:	d8812417 	ldw	r2,1168(sp)
   41f28:	d8812b15 	stw	r2,1196(sp)
   41f2c:	00817c0e 	bge	zero,r2,42520 <___vfprintf_internal_r+0x1e28>
   41f30:	e000021e 	bne	fp,zero,41f3c <___vfprintf_internal_r+0x1844>
   41f34:	8400004c 	andi	r16,r16,1
   41f38:	80000426 	beq	r16,zero,41f4c <___vfprintf_internal_r+0x1854>
   41f3c:	d8812b17 	ldw	r2,1196(sp)
   41f40:	e2000044 	addi	r8,fp,1
   41f44:	1205883a 	add	r2,r2,r8
   41f48:	d8812b15 	stw	r2,1196(sp)
   41f4c:	d8812815 	stw	r2,1184(sp)
   41f50:	10010b16 	blt	r2,zero,42380 <___vfprintf_internal_r+0x1c88>
   41f54:	ddc12f07 	ldb	r23,1212(sp)
   41f58:	b800e426 	beq	r23,zero,422ec <___vfprintf_internal_r+0x1bf4>
   41f5c:	00800b44 	movi	r2,45
   41f60:	d8812585 	stb	r2,1174(sp)
   41f64:	dc012a17 	ldw	r16,1192(sp)
   41f68:	d8013115 	stw	zero,1220(sp)
   41f6c:	003b7306 	br	40d3c <___vfprintf_internal_r+0x644>
   41f70:	d8812b17 	ldw	r2,1196(sp)
   41f74:	d8812815 	stw	r2,1184(sp)
   41f78:	10005716 	blt	r2,zero,420d8 <___vfprintf_internal_r+0x19e0>
   41f7c:	d8812583 	ldbu	r2,1174(sp)
   41f80:	ddc12d15 	stw	r23,1204(sp)
   41f84:	d8013115 	stw	zero,1220(sp)
   41f88:	003b6806 	br	40d2c <___vfprintf_internal_r+0x634>
   41f8c:	d8c12d17 	ldw	r3,1204(sp)
   41f90:	1dc00017 	ldw	r23,0(r3)
   41f94:	18c00104 	addi	r3,r3,4
   41f98:	d8c12d15 	stw	r3,1204(sp)
   41f9c:	b82dd7fa 	srai	r22,r23,31
   41fa0:	b005883a 	mov	r2,r22
   41fa4:	003b4406 	br	40cb8 <___vfprintf_internal_r+0x5c0>
   41fa8:	d9012d17 	ldw	r4,1204(sp)
   41fac:	002d883a 	mov	r22,zero
   41fb0:	00c00044 	movi	r3,1
   41fb4:	25c00017 	ldw	r23,0(r4)
   41fb8:	21000104 	addi	r4,r4,4
   41fbc:	d9012d15 	stw	r4,1204(sp)
   41fc0:	b805883a 	mov	r2,r23
   41fc4:	d8012585 	stb	zero,1174(sp)
   41fc8:	003b4406 	br	40cdc <___vfprintf_internal_r+0x5e4>
   41fcc:	d9012d17 	ldw	r4,1204(sp)
   41fd0:	002d883a 	mov	r22,zero
   41fd4:	25c00017 	ldw	r23,0(r4)
   41fd8:	21000104 	addi	r4,r4,4
   41fdc:	d9012d15 	stw	r4,1204(sp)
   41fe0:	003bab06 	br	40e90 <___vfprintf_internal_r+0x798>
   41fe4:	d8812d17 	ldw	r2,1204(sp)
   41fe8:	002d883a 	mov	r22,zero
   41fec:	0007883a 	mov	r3,zero
   41ff0:	15c00017 	ldw	r23,0(r2)
   41ff4:	10800104 	addi	r2,r2,4
   41ff8:	d8812d15 	stw	r2,1204(sp)
   41ffc:	d8012585 	stb	zero,1174(sp)
   42000:	b805883a 	mov	r2,r23
   42004:	003b3506 	br	40cdc <___vfprintf_internal_r+0x5e4>
   42008:	00ffffc4 	movi	r3,-1
   4200c:	b82b883a 	mov	r21,r23
   42010:	003a1606 	br	4086c <___vfprintf_internal_r+0x174>
   42014:	008011c4 	movi	r2,71
   42018:	1480b116 	blt	r2,r18,422e0 <___vfprintf_internal_r+0x1be8>
   4201c:	04c00074 	movhi	r19,1
   42020:	9cc03a04 	addi	r19,r19,232
   42024:	00c000c4 	movi	r3,3
   42028:	00bfdfc4 	movi	r2,-129
   4202c:	80a0703a 	and	r16,r16,r2
   42030:	d8c12815 	stw	r3,1184(sp)
   42034:	d8812583 	ldbu	r2,1174(sp)
   42038:	d8c12b15 	stw	r3,1196(sp)
   4203c:	d8013115 	stw	zero,1220(sp)
   42040:	003b3a06 	br	40d2c <___vfprintf_internal_r+0x634>
   42044:	d9412917 	ldw	r5,1188(sp)
   42048:	8809883a 	mov	r4,r17
   4204c:	d9811b04 	addi	r6,sp,1132
   42050:	00406c40 	call	406c4 <__sprint_r>
   42054:	103aee1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   42058:	dc812417 	ldw	r18,1168(sp)
   4205c:	da011d17 	ldw	r8,1140(sp)
   42060:	da400404 	addi	r9,sp,16
   42064:	003f3c06 	br	41d58 <___vfprintf_internal_r+0x1660>
   42068:	ad400044 	addi	r21,r21,1
   4206c:	84000814 	ori	r16,r16,32
   42070:	14800047 	ldb	r18,1(r2)
   42074:	0039fc06 	br	40868 <___vfprintf_internal_r+0x170>
   42078:	d9412917 	ldw	r5,1188(sp)
   4207c:	8809883a 	mov	r4,r17
   42080:	d9811b04 	addi	r6,sp,1132
   42084:	00406c40 	call	406c4 <__sprint_r>
   42088:	103ae11e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   4208c:	da011d17 	ldw	r8,1140(sp)
   42090:	da400404 	addi	r9,sp,16
   42094:	003d2b06 	br	41544 <___vfprintf_internal_r+0xe4c>
   42098:	4d000015 	stw	r20,0(r9)
   4209c:	4c800115 	stw	r18,4(r9)
   420a0:	4491883a 	add	r8,r8,r18
   420a4:	18c00044 	addi	r3,r3,1
   420a8:	da011d15 	stw	r8,1140(sp)
   420ac:	d8c11c15 	stw	r3,1136(sp)
   420b0:	008001c4 	movi	r2,7
   420b4:	10fcbd16 	blt	r2,r3,413ac <___vfprintf_internal_r+0xcb4>
   420b8:	4a400204 	addi	r9,r9,8
   420bc:	003cc206 	br	413c8 <___vfprintf_internal_r+0xcd0>
   420c0:	da413c15 	stw	r9,1264(sp)
   420c4:	00406380 	call	40638 <strlen>
   420c8:	d8812b15 	stw	r2,1196(sp)
   420cc:	d8812815 	stw	r2,1184(sp)
   420d0:	da413c17 	ldw	r9,1264(sp)
   420d4:	103fa90e 	bge	r2,zero,41f7c <___vfprintf_internal_r+0x1884>
   420d8:	d8012815 	stw	zero,1184(sp)
   420dc:	003fa706 	br	41f7c <___vfprintf_internal_r+0x1884>
   420e0:	d9412917 	ldw	r5,1188(sp)
   420e4:	8809883a 	mov	r4,r17
   420e8:	d9811b04 	addi	r6,sp,1132
   420ec:	00406c40 	call	406c4 <__sprint_r>
   420f0:	103ac71e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   420f4:	da011d17 	ldw	r8,1140(sp)
   420f8:	d8c11c17 	ldw	r3,1136(sp)
   420fc:	da400404 	addi	r9,sp,16
   42100:	d8813217 	ldw	r2,1224(sp)
   42104:	4cc00015 	stw	r19,0(r9)
   42108:	48800115 	stw	r2,4(r9)
   4210c:	4091883a 	add	r8,r8,r2
   42110:	003c6206 	br	4129c <___vfprintf_internal_r+0xba4>
   42114:	00800b44 	movi	r2,45
   42118:	d8812585 	stb	r2,1174(sp)
   4211c:	003b2406 	br	40db0 <___vfprintf_internal_r+0x6b8>
   42120:	4d000015 	stw	r20,0(r9)
   42124:	4c800115 	stw	r18,4(r9)
   42128:	4491883a 	add	r8,r8,r18
   4212c:	18c00044 	addi	r3,r3,1
   42130:	da011d15 	stw	r8,1140(sp)
   42134:	d8c11c15 	stw	r3,1136(sp)
   42138:	008001c4 	movi	r2,7
   4213c:	10ffe816 	blt	r2,r3,420e0 <___vfprintf_internal_r+0x19e8>
   42140:	4a400204 	addi	r9,r9,8
   42144:	003fee06 	br	42100 <___vfprintf_internal_r+0x1a08>
   42148:	d8c12b15 	stw	r3,1196(sp)
   4214c:	00800184 	movi	r2,6
   42150:	10c0062e 	bgeu	r2,r3,4216c <___vfprintf_internal_r+0x1a74>
   42154:	d8812b15 	stw	r2,1196(sp)
   42158:	d8812815 	stw	r2,1184(sp)
   4215c:	ddc12d15 	stw	r23,1204(sp)
   42160:	04c00074 	movhi	r19,1
   42164:	9cc04604 	addi	r19,r19,280
   42168:	0039ca06 	br	40894 <___vfprintf_internal_r+0x19c>
   4216c:	d8812b17 	ldw	r2,1196(sp)
   42170:	d8812815 	stw	r2,1184(sp)
   42174:	103ff90e 	bge	r2,zero,4215c <___vfprintf_internal_r+0x1a64>
   42178:	d8012815 	stw	zero,1184(sp)
   4217c:	003ff706 	br	4215c <___vfprintf_internal_r+0x1a64>
   42180:	00800244 	movi	r2,9
   42184:	15fdaa36 	bltu	r2,r23,41830 <___vfprintf_internal_r+0x1138>
   42188:	dd010e04 	addi	r20,sp,1080
   4218c:	003dc606 	br	418a8 <___vfprintf_internal_r+0x11b0>
   42190:	d9412917 	ldw	r5,1188(sp)
   42194:	8809883a 	mov	r4,r17
   42198:	d9811b04 	addi	r6,sp,1132
   4219c:	00406c40 	call	406c4 <__sprint_r>
   421a0:	103a9b1e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   421a4:	dc812417 	ldw	r18,1168(sp)
   421a8:	da400404 	addi	r9,sp,16
   421ac:	003ecd06 	br	41ce4 <___vfprintf_internal_r+0x15ec>
   421b0:	d9412917 	ldw	r5,1188(sp)
   421b4:	8809883a 	mov	r4,r17
   421b8:	d9811b04 	addi	r6,sp,1132
   421bc:	00406c40 	call	406c4 <__sprint_r>
   421c0:	103a931e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   421c4:	dc812417 	ldw	r18,1168(sp)
   421c8:	da011d17 	ldw	r8,1140(sp)
   421cc:	d8c11c17 	ldw	r3,1136(sp)
   421d0:	da400404 	addi	r9,sp,16
   421d4:	003eb706 	br	41cb4 <___vfprintf_internal_r+0x15bc>
   421d8:	d9412917 	ldw	r5,1188(sp)
   421dc:	8809883a 	mov	r4,r17
   421e0:	d9811b04 	addi	r6,sp,1132
   421e4:	00406c40 	call	406c4 <__sprint_r>
   421e8:	103a891e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   421ec:	dc812417 	ldw	r18,1168(sp)
   421f0:	da011d17 	ldw	r8,1140(sp)
   421f4:	da400404 	addi	r9,sp,16
   421f8:	003dc206 	br	41904 <___vfprintf_internal_r+0x120c>
   421fc:	df012815 	stw	fp,1184(sp)
   42200:	d8812583 	ldbu	r2,1174(sp)
   42204:	df012b15 	stw	fp,1196(sp)
   42208:	ddc12d15 	stw	r23,1204(sp)
   4220c:	d8013115 	stw	zero,1220(sp)
   42210:	003ac606 	br	40d2c <___vfprintf_internal_r+0x634>
   42214:	d8812404 	addi	r2,sp,1168
   42218:	d8800115 	stw	r2,4(sp)
   4221c:	d8812304 	addi	r2,sp,1164
   42220:	d8800215 	stw	r2,8(sp)
   42224:	d8812204 	addi	r2,sp,1160
   42228:	df000015 	stw	fp,0(sp)
   4222c:	d8800315 	stw	r2,12(sp)
   42230:	8809883a 	mov	r4,r17
   42234:	b00b883a 	mov	r5,r22
   42238:	a00d883a 	mov	r6,r20
   4223c:	01c000c4 	movi	r7,3
   42240:	da413c15 	stw	r9,1264(sp)
   42244:	00429480 	call	42948 <_dtoa_r>
   42248:	da413c17 	ldw	r9,1264(sp)
   4224c:	1027883a 	mov	r19,r2
   42250:	1707883a 	add	r3,r2,fp
   42254:	e02f883a 	mov	r23,fp
   42258:	99000007 	ldb	r4,0(r19)
   4225c:	00800c04 	movi	r2,48
   42260:	20800326 	beq	r4,r2,42270 <___vfprintf_internal_r+0x1b78>
   42264:	da812417 	ldw	r10,1168(sp)
   42268:	1a87883a 	add	r3,r3,r10
   4226c:	003f1406 	br	41ec0 <___vfprintf_internal_r+0x17c8>
   42270:	b009883a 	mov	r4,r22
   42274:	a00b883a 	mov	r5,r20
   42278:	000d883a 	mov	r6,zero
   4227c:	000f883a 	mov	r7,zero
   42280:	d8c13b15 	stw	r3,1260(sp)
   42284:	da413c15 	stw	r9,1264(sp)
   42288:	004905c0 	call	4905c <__nedf2>
   4228c:	d8c13b17 	ldw	r3,1260(sp)
   42290:	da413c17 	ldw	r9,1264(sp)
   42294:	103ff326 	beq	r2,zero,42264 <___vfprintf_internal_r+0x1b6c>
   42298:	00800044 	movi	r2,1
   4229c:	15d5c83a 	sub	r10,r2,r23
   422a0:	da812415 	stw	r10,1168(sp)
   422a4:	1a87883a 	add	r3,r3,r10
   422a8:	003f0506 	br	41ec0 <___vfprintf_internal_r+0x17c8>
   422ac:	d9412917 	ldw	r5,1188(sp)
   422b0:	8809883a 	mov	r4,r17
   422b4:	d9811b04 	addi	r6,sp,1132
   422b8:	00406c40 	call	406c4 <__sprint_r>
   422bc:	103a541e 	bne	r2,zero,40c10 <___vfprintf_internal_r+0x518>
   422c0:	dc812417 	ldw	r18,1168(sp)
   422c4:	da011d17 	ldw	r8,1140(sp)
   422c8:	d8c11c17 	ldw	r3,1136(sp)
   422cc:	da400404 	addi	r9,sp,16
   422d0:	003eb206 	br	41d9c <___vfprintf_internal_r+0x16a4>
   422d4:	b82b883a 	mov	r21,r23
   422d8:	0007883a 	mov	r3,zero
   422dc:	00396306 	br	4086c <___vfprintf_internal_r+0x174>
   422e0:	04c00074 	movhi	r19,1
   422e4:	9cc03b04 	addi	r19,r19,236
   422e8:	003f4e06 	br	42024 <___vfprintf_internal_r+0x192c>
   422ec:	d8812583 	ldbu	r2,1174(sp)
   422f0:	dc012a17 	ldw	r16,1192(sp)
   422f4:	d8013115 	stw	zero,1220(sp)
   422f8:	003a8c06 	br	40d2c <___vfprintf_internal_r+0x634>
   422fc:	d8812417 	ldw	r2,1168(sp)
   42300:	d8812b15 	stw	r2,1196(sp)
   42304:	1029883a 	mov	r20,r2
   42308:	00bfff44 	movi	r2,-3
   4230c:	a0800116 	blt	r20,r2,42314 <___vfprintf_internal_r+0x1c1c>
   42310:	e5001d0e 	bge	fp,r20,42388 <___vfprintf_internal_r+0x1c90>
   42314:	94bfff84 	addi	r18,r18,-2
   42318:	a53fffc4 	addi	r20,r20,-1
   4231c:	dd012415 	stw	r20,1168(sp)
   42320:	dc811fc5 	stb	r18,1151(sp)
   42324:	a0007216 	blt	r20,zero,424f0 <___vfprintf_internal_r+0x1df8>
   42328:	00800ac4 	movi	r2,43
   4232c:	d8812005 	stb	r2,1152(sp)
   42330:	00800244 	movi	r2,9
   42334:	15003516 	blt	r2,r20,4240c <___vfprintf_internal_r+0x1d14>
   42338:	00800c04 	movi	r2,48
   4233c:	a5000c04 	addi	r20,r20,48
   42340:	d8812045 	stb	r2,1153(sp)
   42344:	dd012085 	stb	r20,1154(sp)
   42348:	d8c120c4 	addi	r3,sp,1155
   4234c:	d8811fc4 	addi	r2,sp,1151
   42350:	1885c83a 	sub	r2,r3,r2
   42354:	d8c13217 	ldw	r3,1224(sp)
   42358:	d8813515 	stw	r2,1236(sp)
   4235c:	1885883a 	add	r2,r3,r2
   42360:	d8812b15 	stw	r2,1196(sp)
   42364:	00800044 	movi	r2,1
   42368:	10c0580e 	bge	r2,r3,424cc <___vfprintf_internal_r+0x1dd4>
   4236c:	d8812b17 	ldw	r2,1196(sp)
   42370:	10800044 	addi	r2,r2,1
   42374:	d8812b15 	stw	r2,1196(sp)
   42378:	d8812815 	stw	r2,1184(sp)
   4237c:	103ef50e 	bge	r2,zero,41f54 <___vfprintf_internal_r+0x185c>
   42380:	d8012815 	stw	zero,1184(sp)
   42384:	003ef306 	br	41f54 <___vfprintf_internal_r+0x185c>
   42388:	d8812b17 	ldw	r2,1196(sp)
   4238c:	d8c13217 	ldw	r3,1224(sp)
   42390:	10c01416 	blt	r2,r3,423e4 <___vfprintf_internal_r+0x1cec>
   42394:	8400004c 	andi	r16,r16,1
   42398:	80000326 	beq	r16,zero,423a8 <___vfprintf_internal_r+0x1cb0>
   4239c:	d8812b17 	ldw	r2,1196(sp)
   423a0:	10800044 	addi	r2,r2,1
   423a4:	d8812b15 	stw	r2,1196(sp)
   423a8:	d8812815 	stw	r2,1184(sp)
   423ac:	10001416 	blt	r2,zero,42400 <___vfprintf_internal_r+0x1d08>
   423b0:	048019c4 	movi	r18,103
   423b4:	003ee706 	br	41f54 <___vfprintf_internal_r+0x185c>
   423b8:	d8012815 	stw	zero,1184(sp)
   423bc:	003b1a06 	br	41028 <___vfprintf_internal_r+0x930>
   423c0:	e03e9c1e 	bne	fp,zero,41e34 <___vfprintf_internal_r+0x173c>
   423c4:	07000044 	movi	fp,1
   423c8:	003e9a06 	br	41e34 <___vfprintf_internal_r+0x173c>
   423cc:	07000184 	movi	fp,6
   423d0:	003e9806 	br	41e34 <___vfprintf_internal_r+0x173c>
   423d4:	00c00b44 	movi	r3,45
   423d8:	a520003c 	xorhi	r20,r20,32768
   423dc:	d8c12f05 	stb	r3,1212(sp)
   423e0:	003e9806 	br	41e44 <___vfprintf_internal_r+0x174c>
   423e4:	05003f0e 	bge	zero,r20,424e4 <___vfprintf_internal_r+0x1dec>
   423e8:	05000044 	movi	r20,1
   423ec:	d8c13217 	ldw	r3,1224(sp)
   423f0:	a0e9883a 	add	r20,r20,r3
   423f4:	dd012b15 	stw	r20,1196(sp)
   423f8:	dd012815 	stw	r20,1184(sp)
   423fc:	a03fec0e 	bge	r20,zero,423b0 <___vfprintf_internal_r+0x1cb8>
   42400:	d8012815 	stw	zero,1184(sp)
   42404:	048019c4 	movi	r18,103
   42408:	003ed206 	br	41f54 <___vfprintf_internal_r+0x185c>
   4240c:	d8c11f84 	addi	r3,sp,1150
   42410:	102f883a 	mov	r23,r2
   42414:	4839883a 	mov	fp,r9
   42418:	a009883a 	mov	r4,r20
   4241c:	01400284 	movi	r5,10
   42420:	182d883a 	mov	r22,r3
   42424:	00495640 	call	49564 <__modsi3>
   42428:	10800c04 	addi	r2,r2,48
   4242c:	a009883a 	mov	r4,r20
   42430:	b0800005 	stb	r2,0(r22)
   42434:	01400284 	movi	r5,10
   42438:	00495140 	call	49514 <__divsi3>
   4243c:	1029883a 	mov	r20,r2
   42440:	b0ffffc4 	addi	r3,r22,-1
   42444:	b8bff416 	blt	r23,r2,42418 <___vfprintf_internal_r+0x1d20>
   42448:	11400c04 	addi	r5,r2,48
   4244c:	b17fffc5 	stb	r5,-1(r22)
   42450:	d8811fc4 	addi	r2,sp,1151
   42454:	e013883a 	mov	r9,fp
   42458:	18803e2e 	bgeu	r3,r2,42554 <___vfprintf_internal_r+0x1e5c>
   4245c:	b007883a 	mov	r3,r22
   42460:	d9012044 	addi	r4,sp,1153
   42464:	00000206 	br	42470 <___vfprintf_internal_r+0x1d78>
   42468:	19400003 	ldbu	r5,0(r3)
   4246c:	18c00044 	addi	r3,r3,1
   42470:	21400005 	stb	r5,0(r4)
   42474:	21000044 	addi	r4,r4,1
   42478:	10fffb1e 	bne	r2,r3,42468 <___vfprintf_internal_r+0x1d70>
   4247c:	d8c12004 	addi	r3,sp,1152
   42480:	1d87c83a 	sub	r3,r3,r22
   42484:	d9012044 	addi	r4,sp,1153
   42488:	20c7883a 	add	r3,r4,r3
   4248c:	003fb006 	br	42350 <___vfprintf_internal_r+0x1c58>
   42490:	e5c00044 	addi	r23,fp,1
   42494:	003e7406 	br	41e68 <___vfprintf_internal_r+0x1770>
   42498:	d8c12217 	ldw	r3,1160(sp)
   4249c:	003e9906 	br	41f04 <___vfprintf_internal_r+0x180c>
   424a0:	d9012d17 	ldw	r4,1204(sp)
   424a4:	ac800043 	ldbu	r18,1(r21)
   424a8:	b82b883a 	mov	r21,r23
   424ac:	20c00017 	ldw	r3,0(r4)
   424b0:	20800104 	addi	r2,r4,4
   424b4:	d8812d15 	stw	r2,1204(sp)
   424b8:	18002116 	blt	r3,zero,42540 <___vfprintf_internal_r+0x1e48>
   424bc:	94803fcc 	andi	r18,r18,255
   424c0:	9480201c 	xori	r18,r18,128
   424c4:	94bfe004 	addi	r18,r18,-128
   424c8:	0038e706 	br	40868 <___vfprintf_internal_r+0x170>
   424cc:	80a0703a 	and	r16,r16,r2
   424d0:	803fa61e 	bne	r16,zero,4236c <___vfprintf_internal_r+0x1c74>
   424d4:	d8812b17 	ldw	r2,1196(sp)
   424d8:	d8812815 	stw	r2,1184(sp)
   424dc:	103e9d0e 	bge	r2,zero,41f54 <___vfprintf_internal_r+0x185c>
   424e0:	003fa706 	br	42380 <___vfprintf_internal_r+0x1c88>
   424e4:	00800084 	movi	r2,2
   424e8:	1529c83a 	sub	r20,r2,r20
   424ec:	003fbf06 	br	423ec <___vfprintf_internal_r+0x1cf4>
   424f0:	00800b44 	movi	r2,45
   424f4:	0529c83a 	sub	r20,zero,r20
   424f8:	d8812005 	stb	r2,1152(sp)
   424fc:	003f8c06 	br	42330 <___vfprintf_internal_r+0x1c38>
   42500:	008011c4 	movi	r2,71
   42504:	90be6926 	beq	r18,r2,41eac <___vfprintf_internal_r+0x17b4>
   42508:	003e6a06 	br	41eb4 <___vfprintf_internal_r+0x17bc>
   4250c:	00bfffc4 	movi	r2,-1
   42510:	d8812c15 	stw	r2,1200(sp)
   42514:	0039ad06 	br	40bcc <___vfprintf_internal_r+0x4d4>
   42518:	1007883a 	mov	r3,r2
   4251c:	003e7906 	br	41f04 <___vfprintf_internal_r+0x180c>
   42520:	e000021e 	bne	fp,zero,4252c <___vfprintf_internal_r+0x1e34>
   42524:	8400004c 	andi	r16,r16,1
   42528:	80000e26 	beq	r16,zero,42564 <___vfprintf_internal_r+0x1e6c>
   4252c:	e7000084 	addi	fp,fp,2
   42530:	df012b15 	stw	fp,1196(sp)
   42534:	df012815 	stw	fp,1184(sp)
   42538:	e03e860e 	bge	fp,zero,41f54 <___vfprintf_internal_r+0x185c>
   4253c:	003f9006 	br	42380 <___vfprintf_internal_r+0x1c88>
   42540:	94803fcc 	andi	r18,r18,255
   42544:	9480201c 	xori	r18,r18,128
   42548:	00ffffc4 	movi	r3,-1
   4254c:	94bfe004 	addi	r18,r18,-128
   42550:	0038c506 	br	40868 <___vfprintf_internal_r+0x170>
   42554:	d8c12044 	addi	r3,sp,1153
   42558:	003f7d06 	br	42350 <___vfprintf_internal_r+0x1c58>
   4255c:	dd012417 	ldw	r20,1168(sp)
   42560:	003f6d06 	br	42318 <___vfprintf_internal_r+0x1c20>
   42564:	00c00044 	movi	r3,1
   42568:	d8c12815 	stw	r3,1184(sp)
   4256c:	d8c12b15 	stw	r3,1196(sp)
   42570:	003e7806 	br	41f54 <___vfprintf_internal_r+0x185c>

00042574 <__vfprintf_internal>:
   42574:	00800074 	movhi	r2,1
   42578:	10878904 	addi	r2,r2,7716
   4257c:	2007883a 	mov	r3,r4
   42580:	11000017 	ldw	r4,0(r2)
   42584:	2805883a 	mov	r2,r5
   42588:	300f883a 	mov	r7,r6
   4258c:	180b883a 	mov	r5,r3
   42590:	100d883a 	mov	r6,r2
   42594:	00406f81 	jmpi	406f8 <___vfprintf_internal_r>

00042598 <__swsetup_r>:
   42598:	00800074 	movhi	r2,1
   4259c:	10878904 	addi	r2,r2,7716
   425a0:	10800017 	ldw	r2,0(r2)
   425a4:	defffd04 	addi	sp,sp,-12
   425a8:	dc400115 	stw	r17,4(sp)
   425ac:	dc000015 	stw	r16,0(sp)
   425b0:	dfc00215 	stw	ra,8(sp)
   425b4:	2023883a 	mov	r17,r4
   425b8:	2821883a 	mov	r16,r5
   425bc:	10000226 	beq	r2,zero,425c8 <__swsetup_r+0x30>
   425c0:	10c00e17 	ldw	r3,56(r2)
   425c4:	18003d26 	beq	r3,zero,426bc <__swsetup_r+0x124>
   425c8:	8080030b 	ldhu	r2,12(r16)
   425cc:	10c0020c 	andi	r3,r2,8
   425d0:	18ffffcc 	andi	r3,r3,65535
   425d4:	18e0001c 	xori	r3,r3,32768
   425d8:	18e00004 	addi	r3,r3,-32768
   425dc:	18001226 	beq	r3,zero,42628 <__swsetup_r+0x90>
   425e0:	80c00417 	ldw	r3,16(r16)
   425e4:	18001f26 	beq	r3,zero,42664 <__swsetup_r+0xcc>
   425e8:	1100004c 	andi	r4,r2,1
   425ec:	2000261e 	bne	r4,zero,42688 <__swsetup_r+0xf0>
   425f0:	1080008c 	andi	r2,r2,2
   425f4:	10bfffcc 	andi	r2,r2,65535
   425f8:	10a0001c 	xori	r2,r2,32768
   425fc:	10a00004 	addi	r2,r2,-32768
   42600:	1000311e 	bne	r2,zero,426c8 <__swsetup_r+0x130>
   42604:	80800517 	ldw	r2,20(r16)
   42608:	80800215 	stw	r2,8(r16)
   4260c:	18002326 	beq	r3,zero,4269c <__swsetup_r+0x104>
   42610:	0005883a 	mov	r2,zero
   42614:	dfc00217 	ldw	ra,8(sp)
   42618:	dc400117 	ldw	r17,4(sp)
   4261c:	dc000017 	ldw	r16,0(sp)
   42620:	dec00304 	addi	sp,sp,12
   42624:	f800283a 	ret
   42628:	10c0040c 	andi	r3,r2,16
   4262c:	18ffffcc 	andi	r3,r3,65535
   42630:	18e0001c 	xori	r3,r3,32768
   42634:	18e00004 	addi	r3,r3,-32768
   42638:	18001e26 	beq	r3,zero,426b4 <__swsetup_r+0x11c>
   4263c:	10c0010c 	andi	r3,r2,4
   42640:	18ffffcc 	andi	r3,r3,65535
   42644:	18e0001c 	xori	r3,r3,32768
   42648:	18e00004 	addi	r3,r3,-32768
   4264c:	1800211e 	bne	r3,zero,426d4 <__swsetup_r+0x13c>
   42650:	80c00417 	ldw	r3,16(r16)
   42654:	11400214 	ori	r5,r2,8
   42658:	8140030d 	sth	r5,12(r16)
   4265c:	2805883a 	mov	r2,r5
   42660:	183fe11e 	bne	r3,zero,425e8 <__swsetup_r+0x50>
   42664:	1140a00c 	andi	r5,r2,640
   42668:	01008004 	movi	r4,512
   4266c:	293fde26 	beq	r5,r4,425e8 <__swsetup_r+0x50>
   42670:	8809883a 	mov	r4,r17
   42674:	800b883a 	mov	r5,r16
   42678:	0044f940 	call	44f94 <__smakebuf_r>
   4267c:	8080030b 	ldhu	r2,12(r16)
   42680:	80c00417 	ldw	r3,16(r16)
   42684:	003fd806 	br	425e8 <__swsetup_r+0x50>
   42688:	80800517 	ldw	r2,20(r16)
   4268c:	80000215 	stw	zero,8(r16)
   42690:	0085c83a 	sub	r2,zero,r2
   42694:	80800615 	stw	r2,24(r16)
   42698:	183fdd1e 	bne	r3,zero,42610 <__swsetup_r+0x78>
   4269c:	8080030b 	ldhu	r2,12(r16)
   426a0:	1080200c 	andi	r2,r2,128
   426a4:	10bfffcc 	andi	r2,r2,65535
   426a8:	10a0001c 	xori	r2,r2,32768
   426ac:	10a00004 	addi	r2,r2,-32768
   426b0:	103fd826 	beq	r2,zero,42614 <__swsetup_r+0x7c>
   426b4:	00bfffc4 	movi	r2,-1
   426b8:	003fd606 	br	42614 <__swsetup_r+0x7c>
   426bc:	1009883a 	mov	r4,r2
   426c0:	00442200 	call	44220 <__sinit>
   426c4:	003fc006 	br	425c8 <__swsetup_r+0x30>
   426c8:	0005883a 	mov	r2,zero
   426cc:	80800215 	stw	r2,8(r16)
   426d0:	003fce06 	br	4260c <__swsetup_r+0x74>
   426d4:	81400c17 	ldw	r5,48(r16)
   426d8:	28000626 	beq	r5,zero,426f4 <__swsetup_r+0x15c>
   426dc:	80c01004 	addi	r3,r16,64
   426e0:	28c00326 	beq	r5,r3,426f0 <__swsetup_r+0x158>
   426e4:	8809883a 	mov	r4,r17
   426e8:	00445a40 	call	445a4 <_free_r>
   426ec:	8080030b 	ldhu	r2,12(r16)
   426f0:	80000c15 	stw	zero,48(r16)
   426f4:	80c00417 	ldw	r3,16(r16)
   426f8:	013ff6c4 	movi	r4,-37
   426fc:	2084703a 	and	r2,r4,r2
   42700:	80000115 	stw	zero,4(r16)
   42704:	80c00015 	stw	r3,0(r16)
   42708:	003fd206 	br	42654 <__swsetup_r+0xbc>

0004270c <quorem>:
   4270c:	defff204 	addi	sp,sp,-56
   42710:	dd000815 	stw	r20,32(sp)
   42714:	20800417 	ldw	r2,16(r4)
   42718:	2d000417 	ldw	r20,16(r5)
   4271c:	dcc00715 	stw	r19,28(sp)
   42720:	dfc00d15 	stw	ra,52(sp)
   42724:	df000c15 	stw	fp,48(sp)
   42728:	ddc00b15 	stw	r23,44(sp)
   4272c:	dd800a15 	stw	r22,40(sp)
   42730:	dd400915 	stw	r21,36(sp)
   42734:	dc800615 	stw	r18,24(sp)
   42738:	dc400515 	stw	r17,20(sp)
   4273c:	dc000415 	stw	r16,16(sp)
   42740:	d9400015 	stw	r5,0(sp)
   42744:	2027883a 	mov	r19,r4
   42748:	15007d16 	blt	r2,r20,42940 <quorem+0x234>
   4274c:	a0800104 	addi	r2,r20,4
   42750:	1085883a 	add	r2,r2,r2
   42754:	1085883a 	add	r2,r2,r2
   42758:	28ad883a 	add	r22,r5,r2
   4275c:	2085883a 	add	r2,r4,r2
   42760:	10800017 	ldw	r2,0(r2)
   42764:	b1400017 	ldw	r5,0(r22)
   42768:	a53fffc4 	addi	r20,r20,-1
   4276c:	1009883a 	mov	r4,r2
   42770:	29400044 	addi	r5,r5,1
   42774:	d8800115 	stw	r2,4(sp)
   42778:	00495c00 	call	495c0 <__udivsi3>
   4277c:	1025883a 	mov	r18,r2
   42780:	d8800017 	ldw	r2,0(sp)
   42784:	9f000504 	addi	fp,r19,20
   42788:	14000504 	addi	r16,r2,20
   4278c:	90003626 	beq	r18,zero,42868 <quorem+0x15c>
   42790:	802b883a 	mov	r21,r16
   42794:	e023883a 	mov	r17,fp
   42798:	0007883a 	mov	r3,zero
   4279c:	002f883a 	mov	r23,zero
   427a0:	a9800017 	ldw	r6,0(r21)
   427a4:	900b883a 	mov	r5,r18
   427a8:	d8c00315 	stw	r3,12(sp)
   427ac:	313fffcc 	andi	r4,r6,65535
   427b0:	d9800215 	stw	r6,8(sp)
   427b4:	00495d00 	call	495d0 <__mulsi3>
   427b8:	d9800217 	ldw	r6,8(sp)
   427bc:	d8c00317 	ldw	r3,12(sp)
   427c0:	900b883a 	mov	r5,r18
   427c4:	3008d43a 	srli	r4,r6,16
   427c8:	1887883a 	add	r3,r3,r2
   427cc:	d8c00315 	stw	r3,12(sp)
   427d0:	00495d00 	call	495d0 <__mulsi3>
   427d4:	89400017 	ldw	r5,0(r17)
   427d8:	d8c00317 	ldw	r3,12(sp)
   427dc:	ad400104 	addi	r21,r21,4
   427e0:	293fffcc 	andi	r4,r5,65535
   427e4:	1810d43a 	srli	r8,r3,16
   427e8:	25c9883a 	add	r4,r4,r23
   427ec:	18ffffcc 	andi	r3,r3,65535
   427f0:	20c9c83a 	sub	r4,r4,r3
   427f4:	280cd43a 	srli	r6,r5,16
   427f8:	4085883a 	add	r2,r8,r2
   427fc:	2007d43a 	srai	r3,r4,16
   42800:	117fffcc 	andi	r5,r2,65535
   42804:	314bc83a 	sub	r5,r6,r5
   42808:	28cb883a 	add	r5,r5,r3
   4280c:	8940008d 	sth	r5,2(r17)
   42810:	8900000d 	sth	r4,0(r17)
   42814:	1006d43a 	srli	r3,r2,16
   42818:	282fd43a 	srai	r23,r5,16
   4281c:	8c400104 	addi	r17,r17,4
   42820:	b57fdf2e 	bgeu	r22,r21,427a0 <quorem+0x94>
   42824:	d8c00117 	ldw	r3,4(sp)
   42828:	18000f1e 	bne	r3,zero,42868 <quorem+0x15c>
   4282c:	a0800144 	addi	r2,r20,5
   42830:	1085883a 	add	r2,r2,r2
   42834:	1085883a 	add	r2,r2,r2
   42838:	9887883a 	add	r3,r19,r2
   4283c:	18bfff04 	addi	r2,r3,-4
   42840:	e080082e 	bgeu	fp,r2,42864 <quorem+0x158>
   42844:	18ffff17 	ldw	r3,-4(r3)
   42848:	18000326 	beq	r3,zero,42858 <quorem+0x14c>
   4284c:	00000506 	br	42864 <quorem+0x158>
   42850:	10c00017 	ldw	r3,0(r2)
   42854:	1800031e 	bne	r3,zero,42864 <quorem+0x158>
   42858:	10bfff04 	addi	r2,r2,-4
   4285c:	a53fffc4 	addi	r20,r20,-1
   42860:	e0bffb36 	bltu	fp,r2,42850 <quorem+0x144>
   42864:	9d000415 	stw	r20,16(r19)
   42868:	d9400017 	ldw	r5,0(sp)
   4286c:	9809883a 	mov	r4,r19
   42870:	00466ac0 	call	466ac <__mcmp>
   42874:	10002516 	blt	r2,zero,4290c <quorem+0x200>
   42878:	94800044 	addi	r18,r18,1
   4287c:	e007883a 	mov	r3,fp
   42880:	000d883a 	mov	r6,zero
   42884:	18800017 	ldw	r2,0(r3)
   42888:	82000017 	ldw	r8,0(r16)
   4288c:	84000104 	addi	r16,r16,4
   42890:	11ffffcc 	andi	r7,r2,65535
   42894:	413fffcc 	andi	r4,r8,65535
   42898:	398d883a 	add	r6,r7,r6
   4289c:	310fc83a 	sub	r7,r6,r4
   428a0:	4010d43a 	srli	r8,r8,16
   428a4:	100cd43a 	srli	r6,r2,16
   428a8:	3809d43a 	srai	r4,r7,16
   428ac:	19c0000d 	sth	r7,0(r3)
   428b0:	320dc83a 	sub	r6,r6,r8
   428b4:	310d883a 	add	r6,r6,r4
   428b8:	1980008d 	sth	r6,2(r3)
   428bc:	300dd43a 	srai	r6,r6,16
   428c0:	18c00104 	addi	r3,r3,4
   428c4:	b43fef2e 	bgeu	r22,r16,42884 <quorem+0x178>
   428c8:	a0800144 	addi	r2,r20,5
   428cc:	1085883a 	add	r2,r2,r2
   428d0:	1085883a 	add	r2,r2,r2
   428d4:	9885883a 	add	r2,r19,r2
   428d8:	10c00017 	ldw	r3,0(r2)
   428dc:	18000b1e 	bne	r3,zero,4290c <quorem+0x200>
   428e0:	10ffff04 	addi	r3,r2,-4
   428e4:	e0c0082e 	bgeu	fp,r3,42908 <quorem+0x1fc>
   428e8:	10bfff17 	ldw	r2,-4(r2)
   428ec:	10000326 	beq	r2,zero,428fc <quorem+0x1f0>
   428f0:	00000506 	br	42908 <quorem+0x1fc>
   428f4:	18800017 	ldw	r2,0(r3)
   428f8:	1000031e 	bne	r2,zero,42908 <quorem+0x1fc>
   428fc:	18ffff04 	addi	r3,r3,-4
   42900:	a53fffc4 	addi	r20,r20,-1
   42904:	e0fffb36 	bltu	fp,r3,428f4 <quorem+0x1e8>
   42908:	9d000415 	stw	r20,16(r19)
   4290c:	9005883a 	mov	r2,r18
   42910:	dfc00d17 	ldw	ra,52(sp)
   42914:	df000c17 	ldw	fp,48(sp)
   42918:	ddc00b17 	ldw	r23,44(sp)
   4291c:	dd800a17 	ldw	r22,40(sp)
   42920:	dd400917 	ldw	r21,36(sp)
   42924:	dd000817 	ldw	r20,32(sp)
   42928:	dcc00717 	ldw	r19,28(sp)
   4292c:	dc800617 	ldw	r18,24(sp)
   42930:	dc400517 	ldw	r17,20(sp)
   42934:	dc000417 	ldw	r16,16(sp)
   42938:	dec00e04 	addi	sp,sp,56
   4293c:	f800283a 	ret
   42940:	0005883a 	mov	r2,zero
   42944:	003ff206 	br	42910 <quorem+0x204>

00042948 <_dtoa_r>:
   42948:	20801017 	ldw	r2,64(r4)
   4294c:	deffdf04 	addi	sp,sp,-132
   42950:	dcc01a15 	stw	r19,104(sp)
   42954:	dc801915 	stw	r18,100(sp)
   42958:	dc401815 	stw	r17,96(sp)
   4295c:	dc001715 	stw	r16,92(sp)
   42960:	dfc02015 	stw	ra,128(sp)
   42964:	df001f15 	stw	fp,124(sp)
   42968:	ddc01e15 	stw	r23,120(sp)
   4296c:	dd801d15 	stw	r22,116(sp)
   42970:	dd401c15 	stw	r21,112(sp)
   42974:	dd001b15 	stw	r20,108(sp)
   42978:	d9400315 	stw	r5,12(sp)
   4297c:	d9c00415 	stw	r7,16(sp)
   42980:	2021883a 	mov	r16,r4
   42984:	3025883a 	mov	r18,r6
   42988:	dcc02317 	ldw	r19,140(sp)
   4298c:	3023883a 	mov	r17,r6
   42990:	10000826 	beq	r2,zero,429b4 <_dtoa_r+0x6c>
   42994:	20c01117 	ldw	r3,68(r4)
   42998:	01800044 	movi	r6,1
   4299c:	100b883a 	mov	r5,r2
   429a0:	30cc983a 	sll	r6,r6,r3
   429a4:	10c00115 	stw	r3,4(r2)
   429a8:	11800215 	stw	r6,8(r2)
   429ac:	0045e080 	call	45e08 <_Bfree>
   429b0:	80001015 	stw	zero,64(r16)
   429b4:	90002f16 	blt	r18,zero,42a74 <_dtoa_r+0x12c>
   429b8:	98000015 	stw	zero,0(r19)
   429bc:	90dffc2c 	andhi	r3,r18,32752
   429c0:	009ffc34 	movhi	r2,32752
   429c4:	18801c26 	beq	r3,r2,42a38 <_dtoa_r+0xf0>
   429c8:	d9000317 	ldw	r4,12(sp)
   429cc:	880b883a 	mov	r5,r17
   429d0:	000d883a 	mov	r6,zero
   429d4:	000f883a 	mov	r7,zero
   429d8:	00490000 	call	49000 <__eqdf2>
   429dc:	10002c1e 	bne	r2,zero,42a90 <_dtoa_r+0x148>
   429e0:	d9002217 	ldw	r4,136(sp)
   429e4:	d9c02417 	ldw	r7,144(sp)
   429e8:	00800044 	movi	r2,1
   429ec:	20800015 	stw	r2,0(r4)
   429f0:	38019426 	beq	r7,zero,43044 <_dtoa_r+0x6fc>
   429f4:	00800074 	movhi	r2,1
   429f8:	10804844 	addi	r2,r2,289
   429fc:	38800015 	stw	r2,0(r7)
   42a00:	15ffffc4 	addi	r23,r2,-1
   42a04:	b805883a 	mov	r2,r23
   42a08:	dfc02017 	ldw	ra,128(sp)
   42a0c:	df001f17 	ldw	fp,124(sp)
   42a10:	ddc01e17 	ldw	r23,120(sp)
   42a14:	dd801d17 	ldw	r22,116(sp)
   42a18:	dd401c17 	ldw	r21,112(sp)
   42a1c:	dd001b17 	ldw	r20,108(sp)
   42a20:	dcc01a17 	ldw	r19,104(sp)
   42a24:	dc801917 	ldw	r18,100(sp)
   42a28:	dc401817 	ldw	r17,96(sp)
   42a2c:	dc001717 	ldw	r16,92(sp)
   42a30:	dec02104 	addi	sp,sp,132
   42a34:	f800283a 	ret
   42a38:	d8c02217 	ldw	r3,136(sp)
   42a3c:	d9000317 	ldw	r4,12(sp)
   42a40:	0089c3c4 	movi	r2,9999
   42a44:	18800015 	stw	r2,0(r3)
   42a48:	20016c26 	beq	r4,zero,42ffc <_dtoa_r+0x6b4>
   42a4c:	05c00074 	movhi	r23,1
   42a50:	bdc05404 	addi	r23,r23,336
   42a54:	d9c02417 	ldw	r7,144(sp)
   42a58:	383fea26 	beq	r7,zero,42a04 <_dtoa_r+0xbc>
   42a5c:	b88000c7 	ldb	r2,3(r23)
   42a60:	10016d1e 	bne	r2,zero,43018 <_dtoa_r+0x6d0>
   42a64:	b88000c4 	addi	r2,r23,3
   42a68:	d8c02417 	ldw	r3,144(sp)
   42a6c:	18800015 	stw	r2,0(r3)
   42a70:	003fe406 	br	42a04 <_dtoa_r+0xbc>
   42a74:	04600034 	movhi	r17,32768
   42a78:	8c7fffc4 	addi	r17,r17,-1
   42a7c:	9462703a 	and	r17,r18,r17
   42a80:	00800044 	movi	r2,1
   42a84:	98800015 	stw	r2,0(r19)
   42a88:	8825883a 	mov	r18,r17
   42a8c:	003fcb06 	br	429bc <_dtoa_r+0x74>
   42a90:	d9400317 	ldw	r5,12(sp)
   42a94:	9028d53a 	srli	r20,r18,20
   42a98:	d8800204 	addi	r2,sp,8
   42a9c:	d8800015 	stw	r2,0(sp)
   42aa0:	8009883a 	mov	r4,r16
   42aa4:	880d883a 	mov	r6,r17
   42aa8:	d9c00104 	addi	r7,sp,4
   42aac:	0046a540 	call	46a54 <__d2b>
   42ab0:	a501ffcc 	andi	r20,r20,2047
   42ab4:	1039883a 	mov	fp,r2
   42ab8:	a001591e 	bne	r20,zero,43020 <_dtoa_r+0x6d8>
   42abc:	dd400217 	ldw	r21,8(sp)
   42ac0:	dd000117 	ldw	r20,4(sp)
   42ac4:	00befbc4 	movi	r2,-1041
   42ac8:	ad29883a 	add	r20,r21,r20
   42acc:	a082d216 	blt	r20,r2,43618 <_dtoa_r+0xcd0>
   42ad0:	d8c00317 	ldw	r3,12(sp)
   42ad4:	013f0384 	movi	r4,-1010
   42ad8:	2509c83a 	sub	r4,r4,r20
   42adc:	a0810484 	addi	r2,r20,1042
   42ae0:	9124983a 	sll	r18,r18,r4
   42ae4:	1884d83a 	srl	r2,r3,r2
   42ae8:	9088b03a 	or	r4,r18,r2
   42aec:	00493840 	call	49384 <__floatunsidf>
   42af0:	1009883a 	mov	r4,r2
   42af4:	017f8434 	movhi	r5,65040
   42af8:	00800044 	movi	r2,1
   42afc:	194b883a 	add	r5,r3,r5
   42b00:	a53fffc4 	addi	r20,r20,-1
   42b04:	d8800f15 	stw	r2,60(sp)
   42b08:	000d883a 	mov	r6,zero
   42b0c:	01cffe34 	movhi	r7,16376
   42b10:	0048b080 	call	48b08 <__subdf3>
   42b14:	1009883a 	mov	r4,r2
   42b18:	180b883a 	mov	r5,r3
   42b1c:	0198dbf4 	movhi	r6,25455
   42b20:	3190d844 	addi	r6,r6,17249
   42b24:	01cff4f4 	movhi	r7,16339
   42b28:	39e1e9c4 	addi	r7,r7,-30809
   42b2c:	0048b680 	call	48b68 <__muldf3>
   42b30:	180b883a 	mov	r5,r3
   42b34:	01a2d874 	movhi	r6,35681
   42b38:	31b22cc4 	addi	r6,r6,-14157
   42b3c:	01cff1f4 	movhi	r7,16327
   42b40:	39e28a04 	addi	r7,r7,-30168
   42b44:	1009883a 	mov	r4,r2
   42b48:	0048ab40 	call	48ab4 <__adddf3>
   42b4c:	a009883a 	mov	r4,r20
   42b50:	1027883a 	mov	r19,r2
   42b54:	1825883a 	mov	r18,r3
   42b58:	00491dc0 	call	491dc <__floatsidf>
   42b5c:	1009883a 	mov	r4,r2
   42b60:	180b883a 	mov	r5,r3
   42b64:	019427f4 	movhi	r6,20639
   42b68:	319e7ec4 	addi	r6,r6,31227
   42b6c:	01cff4f4 	movhi	r7,16339
   42b70:	39d104c4 	addi	r7,r7,17427
   42b74:	0048b680 	call	48b68 <__muldf3>
   42b78:	9809883a 	mov	r4,r19
   42b7c:	900b883a 	mov	r5,r18
   42b80:	100d883a 	mov	r6,r2
   42b84:	180f883a 	mov	r7,r3
   42b88:	0048ab40 	call	48ab4 <__adddf3>
   42b8c:	1009883a 	mov	r4,r2
   42b90:	180b883a 	mov	r5,r3
   42b94:	1027883a 	mov	r19,r2
   42b98:	1825883a 	mov	r18,r3
   42b9c:	00492b00 	call	492b0 <__fixdfsi>
   42ba0:	9809883a 	mov	r4,r19
   42ba4:	900b883a 	mov	r5,r18
   42ba8:	000d883a 	mov	r6,zero
   42bac:	000f883a 	mov	r7,zero
   42bb0:	d8800615 	stw	r2,24(sp)
   42bb4:	00491800 	call	49180 <__ltdf2>
   42bb8:	10027e16 	blt	r2,zero,435b4 <_dtoa_r+0xc6c>
   42bbc:	d8c00617 	ldw	r3,24(sp)
   42bc0:	00800584 	movi	r2,22
   42bc4:	10c26c36 	bltu	r2,r3,43578 <_dtoa_r+0xc30>
   42bc8:	180490fa 	slli	r2,r3,3
   42bcc:	00c00074 	movhi	r3,1
   42bd0:	18c07a04 	addi	r3,r3,488
   42bd4:	d9800317 	ldw	r6,12(sp)
   42bd8:	1885883a 	add	r2,r3,r2
   42bdc:	11000017 	ldw	r4,0(r2)
   42be0:	11400117 	ldw	r5,4(r2)
   42be4:	880f883a 	mov	r7,r17
   42be8:	00490b80 	call	490b8 <__gtdf2>
   42bec:	00828f0e 	bge	zero,r2,4362c <_dtoa_r+0xce4>
   42bf0:	d8800617 	ldw	r2,24(sp)
   42bf4:	d8000d15 	stw	zero,52(sp)
   42bf8:	10bfffc4 	addi	r2,r2,-1
   42bfc:	d8800615 	stw	r2,24(sp)
   42c00:	ad29c83a 	sub	r20,r21,r20
   42c04:	a53fffc4 	addi	r20,r20,-1
   42c08:	a0026616 	blt	r20,zero,435a4 <_dtoa_r+0xc5c>
   42c0c:	dd000715 	stw	r20,28(sp)
   42c10:	d8000815 	stw	zero,32(sp)
   42c14:	d8800617 	ldw	r2,24(sp)
   42c18:	10025a16 	blt	r2,zero,43584 <_dtoa_r+0xc3c>
   42c1c:	d8c00717 	ldw	r3,28(sp)
   42c20:	d8800b15 	stw	r2,44(sp)
   42c24:	d8000a15 	stw	zero,40(sp)
   42c28:	1887883a 	add	r3,r3,r2
   42c2c:	d8c00715 	stw	r3,28(sp)
   42c30:	d9c00417 	ldw	r7,16(sp)
   42c34:	00800244 	movi	r2,9
   42c38:	11c10536 	bltu	r2,r7,43050 <_dtoa_r+0x708>
   42c3c:	00800144 	movi	r2,5
   42c40:	11c4c60e 	bge	r2,r7,43f5c <_dtoa_r+0x1614>
   42c44:	39ffff04 	addi	r7,r7,-4
   42c48:	d9c00415 	stw	r7,16(sp)
   42c4c:	0027883a 	mov	r19,zero
   42c50:	d9c00417 	ldw	r7,16(sp)
   42c54:	008000c4 	movi	r2,3
   42c58:	3883a226 	beq	r7,r2,43ae4 <_dtoa_r+0x119c>
   42c5c:	11c2bc16 	blt	r2,r7,43750 <_dtoa_r+0xe08>
   42c60:	00800084 	movi	r2,2
   42c64:	3880fb1e 	bne	r7,r2,43054 <_dtoa_r+0x70c>
   42c68:	d8000c15 	stw	zero,48(sp)
   42c6c:	d9002117 	ldw	r4,132(sp)
   42c70:	0103ae0e 	bge	zero,r4,43b2c <_dtoa_r+0x11e4>
   42c74:	2025883a 	mov	r18,r4
   42c78:	d9000e15 	stw	r4,56(sp)
   42c7c:	d9000915 	stw	r4,36(sp)
   42c80:	80001115 	stw	zero,68(r16)
   42c84:	008005c4 	movi	r2,23
   42c88:	1484b22e 	bgeu	r2,r18,43f54 <_dtoa_r+0x160c>
   42c8c:	00c00044 	movi	r3,1
   42c90:	00800104 	movi	r2,4
   42c94:	1085883a 	add	r2,r2,r2
   42c98:	11000504 	addi	r4,r2,20
   42c9c:	180b883a 	mov	r5,r3
   42ca0:	18c00044 	addi	r3,r3,1
   42ca4:	913ffb2e 	bgeu	r18,r4,42c94 <_dtoa_r+0x34c>
   42ca8:	81401115 	stw	r5,68(r16)
   42cac:	8009883a 	mov	r4,r16
   42cb0:	0045d600 	call	45d60 <_Balloc>
   42cb4:	102f883a 	mov	r23,r2
   42cb8:	80801015 	stw	r2,64(r16)
   42cbc:	00800384 	movi	r2,14
   42cc0:	1480f036 	bltu	r2,r18,43084 <_dtoa_r+0x73c>
   42cc4:	9800ef26 	beq	r19,zero,43084 <_dtoa_r+0x73c>
   42cc8:	d8800617 	ldw	r2,24(sp)
   42ccc:	00839c0e 	bge	zero,r2,43b40 <_dtoa_r+0x11f8>
   42cd0:	d8c00617 	ldw	r3,24(sp)
   42cd4:	108003cc 	andi	r2,r2,15
   42cd8:	100490fa 	slli	r2,r2,3
   42cdc:	182bd13a 	srai	r21,r3,4
   42ce0:	00c00074 	movhi	r3,1
   42ce4:	18c07a04 	addi	r3,r3,488
   42ce8:	1885883a 	add	r2,r3,r2
   42cec:	a8c0040c 	andi	r3,r21,16
   42cf0:	12800017 	ldw	r10,0(r2)
   42cf4:	15800117 	ldw	r22,4(r2)
   42cf8:	18038726 	beq	r3,zero,43b18 <_dtoa_r+0x11d0>
   42cfc:	00800074 	movhi	r2,1
   42d00:	10807004 	addi	r2,r2,448
   42d04:	11800817 	ldw	r6,32(r2)
   42d08:	11c00917 	ldw	r7,36(r2)
   42d0c:	d9000317 	ldw	r4,12(sp)
   42d10:	880b883a 	mov	r5,r17
   42d14:	da801515 	stw	r10,84(sp)
   42d18:	0048e4c0 	call	48e4c <__divdf3>
   42d1c:	da801517 	ldw	r10,84(sp)
   42d20:	d8801015 	stw	r2,64(sp)
   42d24:	1829883a 	mov	r20,r3
   42d28:	ad4003cc 	andi	r21,r21,15
   42d2c:	048000c4 	movi	r18,3
   42d30:	a8001126 	beq	r21,zero,42d78 <_dtoa_r+0x430>
   42d34:	04c00074 	movhi	r19,1
   42d38:	9cc07004 	addi	r19,r19,448
   42d3c:	5005883a 	mov	r2,r10
   42d40:	b007883a 	mov	r3,r22
   42d44:	a980004c 	andi	r6,r21,1
   42d48:	1009883a 	mov	r4,r2
   42d4c:	a82bd07a 	srai	r21,r21,1
   42d50:	180b883a 	mov	r5,r3
   42d54:	30000426 	beq	r6,zero,42d68 <_dtoa_r+0x420>
   42d58:	99800017 	ldw	r6,0(r19)
   42d5c:	99c00117 	ldw	r7,4(r19)
   42d60:	94800044 	addi	r18,r18,1
   42d64:	0048b680 	call	48b68 <__muldf3>
   42d68:	9cc00204 	addi	r19,r19,8
   42d6c:	a83ff51e 	bne	r21,zero,42d44 <_dtoa_r+0x3fc>
   42d70:	1015883a 	mov	r10,r2
   42d74:	182d883a 	mov	r22,r3
   42d78:	d9001017 	ldw	r4,64(sp)
   42d7c:	a00b883a 	mov	r5,r20
   42d80:	500d883a 	mov	r6,r10
   42d84:	b00f883a 	mov	r7,r22
   42d88:	0048e4c0 	call	48e4c <__divdf3>
   42d8c:	1027883a 	mov	r19,r2
   42d90:	1829883a 	mov	r20,r3
   42d94:	d8c00d17 	ldw	r3,52(sp)
   42d98:	18000626 	beq	r3,zero,42db4 <_dtoa_r+0x46c>
   42d9c:	9809883a 	mov	r4,r19
   42da0:	a00b883a 	mov	r5,r20
   42da4:	000d883a 	mov	r6,zero
   42da8:	01cffc34 	movhi	r7,16368
   42dac:	00491800 	call	49180 <__ltdf2>
   42db0:	10040e16 	blt	r2,zero,43dec <_dtoa_r+0x14a4>
   42db4:	9009883a 	mov	r4,r18
   42db8:	00491dc0 	call	491dc <__floatsidf>
   42dbc:	1009883a 	mov	r4,r2
   42dc0:	180b883a 	mov	r5,r3
   42dc4:	980d883a 	mov	r6,r19
   42dc8:	a00f883a 	mov	r7,r20
   42dcc:	0048b680 	call	48b68 <__muldf3>
   42dd0:	1009883a 	mov	r4,r2
   42dd4:	180b883a 	mov	r5,r3
   42dd8:	000d883a 	mov	r6,zero
   42ddc:	01d00734 	movhi	r7,16412
   42de0:	0048ab40 	call	48ab4 <__adddf3>
   42de4:	057f3034 	movhi	r21,64704
   42de8:	1d6b883a 	add	r21,r3,r21
   42dec:	d8c00917 	ldw	r3,36(sp)
   42df0:	1025883a 	mov	r18,r2
   42df4:	18031f26 	beq	r3,zero,43a74 <_dtoa_r+0x112c>
   42df8:	d8800617 	ldw	r2,24(sp)
   42dfc:	dac00917 	ldw	r11,36(sp)
   42e00:	d8801315 	stw	r2,76(sp)
   42e04:	d8c00c17 	ldw	r3,48(sp)
   42e08:	18039026 	beq	r3,zero,43c4c <_dtoa_r+0x1304>
   42e0c:	58bfffc4 	addi	r2,r11,-1
   42e10:	100490fa 	slli	r2,r2,3
   42e14:	00c00074 	movhi	r3,1
   42e18:	18c07a04 	addi	r3,r3,488
   42e1c:	0009883a 	mov	r4,zero
   42e20:	1885883a 	add	r2,r3,r2
   42e24:	11800017 	ldw	r6,0(r2)
   42e28:	11c00117 	ldw	r7,4(r2)
   42e2c:	014ff834 	movhi	r5,16352
   42e30:	dac01615 	stw	r11,88(sp)
   42e34:	0048e4c0 	call	48e4c <__divdf3>
   42e38:	900d883a 	mov	r6,r18
   42e3c:	a80f883a 	mov	r7,r21
   42e40:	1009883a 	mov	r4,r2
   42e44:	180b883a 	mov	r5,r3
   42e48:	0048b080 	call	48b08 <__subdf3>
   42e4c:	a00b883a 	mov	r5,r20
   42e50:	9809883a 	mov	r4,r19
   42e54:	182b883a 	mov	r21,r3
   42e58:	d8801015 	stw	r2,64(sp)
   42e5c:	00492b00 	call	492b0 <__fixdfsi>
   42e60:	1009883a 	mov	r4,r2
   42e64:	d8801515 	stw	r2,84(sp)
   42e68:	00491dc0 	call	491dc <__floatsidf>
   42e6c:	9809883a 	mov	r4,r19
   42e70:	a00b883a 	mov	r5,r20
   42e74:	100d883a 	mov	r6,r2
   42e78:	180f883a 	mov	r7,r3
   42e7c:	0048b080 	call	48b08 <__subdf3>
   42e80:	da401517 	ldw	r9,84(sp)
   42e84:	d9001017 	ldw	r4,64(sp)
   42e88:	a80b883a 	mov	r5,r21
   42e8c:	4d000c04 	addi	r20,r9,48
   42e90:	bd000005 	stb	r20,0(r23)
   42e94:	100d883a 	mov	r6,r2
   42e98:	180f883a 	mov	r7,r3
   42e9c:	bd800044 	addi	r22,r23,1
   42ea0:	1025883a 	mov	r18,r2
   42ea4:	1827883a 	mov	r19,r3
   42ea8:	00490b80 	call	490b8 <__gtdf2>
   42eac:	00842216 	blt	zero,r2,43f38 <_dtoa_r+0x15f0>
   42eb0:	0009883a 	mov	r4,zero
   42eb4:	014ffc34 	movhi	r5,16368
   42eb8:	900d883a 	mov	r6,r18
   42ebc:	980f883a 	mov	r7,r19
   42ec0:	0048b080 	call	48b08 <__subdf3>
   42ec4:	d9001017 	ldw	r4,64(sp)
   42ec8:	a80b883a 	mov	r5,r21
   42ecc:	100d883a 	mov	r6,r2
   42ed0:	180f883a 	mov	r7,r3
   42ed4:	00490b80 	call	490b8 <__gtdf2>
   42ed8:	dac01617 	ldw	r11,88(sp)
   42edc:	00841316 	blt	zero,r2,43f2c <_dtoa_r+0x15e4>
   42ee0:	00800044 	movi	r2,1
   42ee4:	12c0670e 	bge	r2,r11,43084 <_dtoa_r+0x73c>
   42ee8:	bad7883a 	add	r11,r23,r11
   42eec:	df001115 	stw	fp,68(sp)
   42ef0:	dc401215 	stw	r17,72(sp)
   42ef4:	5839883a 	mov	fp,r11
   42ef8:	dc401017 	ldw	r17,64(sp)
   42efc:	00000806 	br	42f20 <_dtoa_r+0x5d8>
   42f00:	0048b080 	call	48b08 <__subdf3>
   42f04:	1009883a 	mov	r4,r2
   42f08:	180b883a 	mov	r5,r3
   42f0c:	880d883a 	mov	r6,r17
   42f10:	a80f883a 	mov	r7,r21
   42f14:	00491800 	call	49180 <__ltdf2>
   42f18:	1003ee16 	blt	r2,zero,43ed4 <_dtoa_r+0x158c>
   42f1c:	b703f126 	beq	r22,fp,43ee4 <_dtoa_r+0x159c>
   42f20:	8809883a 	mov	r4,r17
   42f24:	a80b883a 	mov	r5,r21
   42f28:	000d883a 	mov	r6,zero
   42f2c:	01d00934 	movhi	r7,16420
   42f30:	0048b680 	call	48b68 <__muldf3>
   42f34:	000d883a 	mov	r6,zero
   42f38:	01d00934 	movhi	r7,16420
   42f3c:	9009883a 	mov	r4,r18
   42f40:	980b883a 	mov	r5,r19
   42f44:	1023883a 	mov	r17,r2
   42f48:	182b883a 	mov	r21,r3
   42f4c:	0048b680 	call	48b68 <__muldf3>
   42f50:	180b883a 	mov	r5,r3
   42f54:	1009883a 	mov	r4,r2
   42f58:	1825883a 	mov	r18,r3
   42f5c:	1027883a 	mov	r19,r2
   42f60:	00492b00 	call	492b0 <__fixdfsi>
   42f64:	1009883a 	mov	r4,r2
   42f68:	1029883a 	mov	r20,r2
   42f6c:	00491dc0 	call	491dc <__floatsidf>
   42f70:	9809883a 	mov	r4,r19
   42f74:	900b883a 	mov	r5,r18
   42f78:	100d883a 	mov	r6,r2
   42f7c:	180f883a 	mov	r7,r3
   42f80:	0048b080 	call	48b08 <__subdf3>
   42f84:	a5000c04 	addi	r20,r20,48
   42f88:	b5000005 	stb	r20,0(r22)
   42f8c:	1009883a 	mov	r4,r2
   42f90:	180b883a 	mov	r5,r3
   42f94:	880d883a 	mov	r6,r17
   42f98:	a80f883a 	mov	r7,r21
   42f9c:	1025883a 	mov	r18,r2
   42fa0:	1827883a 	mov	r19,r3
   42fa4:	00491800 	call	49180 <__ltdf2>
   42fa8:	b5800044 	addi	r22,r22,1
   42fac:	0009883a 	mov	r4,zero
   42fb0:	014ffc34 	movhi	r5,16368
   42fb4:	900d883a 	mov	r6,r18
   42fb8:	980f883a 	mov	r7,r19
   42fbc:	103fd00e 	bge	r2,zero,42f00 <_dtoa_r+0x5b8>
   42fc0:	d9001317 	ldw	r4,76(sp)
   42fc4:	df001117 	ldw	fp,68(sp)
   42fc8:	d9000615 	stw	r4,24(sp)
   42fcc:	8009883a 	mov	r4,r16
   42fd0:	e00b883a 	mov	r5,fp
   42fd4:	0045e080 	call	45e08 <_Bfree>
   42fd8:	d9c00617 	ldw	r7,24(sp)
   42fdc:	d8c02217 	ldw	r3,136(sp)
   42fe0:	d9002417 	ldw	r4,144(sp)
   42fe4:	b0000005 	stb	zero,0(r22)
   42fe8:	38800044 	addi	r2,r7,1
   42fec:	18800015 	stw	r2,0(r3)
   42ff0:	203e8426 	beq	r4,zero,42a04 <_dtoa_r+0xbc>
   42ff4:	25800015 	stw	r22,0(r4)
   42ff8:	003e8206 	br	42a04 <_dtoa_r+0xbc>
   42ffc:	00800434 	movhi	r2,16
   43000:	10bfffc4 	addi	r2,r2,-1
   43004:	90a4703a 	and	r18,r18,r2
   43008:	903e901e 	bne	r18,zero,42a4c <_dtoa_r+0x104>
   4300c:	05c00074 	movhi	r23,1
   43010:	bdc05104 	addi	r23,r23,324
   43014:	003e8f06 	br	42a54 <_dtoa_r+0x10c>
   43018:	b8800204 	addi	r2,r23,8
   4301c:	003e9206 	br	42a68 <_dtoa_r+0x120>
   43020:	01400434 	movhi	r5,16
   43024:	297fffc4 	addi	r5,r5,-1
   43028:	894a703a 	and	r5,r17,r5
   4302c:	d9000317 	ldw	r4,12(sp)
   43030:	294ffc34 	orhi	r5,r5,16368
   43034:	a53f0044 	addi	r20,r20,-1023
   43038:	dd400217 	ldw	r21,8(sp)
   4303c:	d8000f15 	stw	zero,60(sp)
   43040:	003eb106 	br	42b08 <_dtoa_r+0x1c0>
   43044:	05c00074 	movhi	r23,1
   43048:	bdc04804 	addi	r23,r23,288
   4304c:	003e6d06 	br	42a04 <_dtoa_r+0xbc>
   43050:	d8000415 	stw	zero,16(sp)
   43054:	80001115 	stw	zero,68(r16)
   43058:	8009883a 	mov	r4,r16
   4305c:	000b883a 	mov	r5,zero
   43060:	0045d600 	call	45d60 <_Balloc>
   43064:	01ffffc4 	movi	r7,-1
   43068:	102f883a 	mov	r23,r2
   4306c:	80801015 	stw	r2,64(r16)
   43070:	00800044 	movi	r2,1
   43074:	d9c00915 	stw	r7,36(sp)
   43078:	d8002115 	stw	zero,132(sp)
   4307c:	d9c00e15 	stw	r7,56(sp)
   43080:	d8800c15 	stw	r2,48(sp)
   43084:	d8800117 	ldw	r2,4(sp)
   43088:	10008b16 	blt	r2,zero,432b8 <_dtoa_r+0x970>
   4308c:	d9000617 	ldw	r4,24(sp)
   43090:	00c00384 	movi	r3,14
   43094:	19008816 	blt	r3,r4,432b8 <_dtoa_r+0x970>
   43098:	200490fa 	slli	r2,r4,3
   4309c:	d9c02117 	ldw	r7,132(sp)
   430a0:	00c00074 	movhi	r3,1
   430a4:	18c07a04 	addi	r3,r3,488
   430a8:	1885883a 	add	r2,r3,r2
   430ac:	14800017 	ldw	r18,0(r2)
   430b0:	14c00117 	ldw	r19,4(r2)
   430b4:	3801c916 	blt	r7,zero,437dc <_dtoa_r+0xe94>
   430b8:	d9000317 	ldw	r4,12(sp)
   430bc:	900d883a 	mov	r6,r18
   430c0:	980f883a 	mov	r7,r19
   430c4:	880b883a 	mov	r5,r17
   430c8:	0048e4c0 	call	48e4c <__divdf3>
   430cc:	180b883a 	mov	r5,r3
   430d0:	1009883a 	mov	r4,r2
   430d4:	00492b00 	call	492b0 <__fixdfsi>
   430d8:	1009883a 	mov	r4,r2
   430dc:	102b883a 	mov	r21,r2
   430e0:	00491dc0 	call	491dc <__floatsidf>
   430e4:	1009883a 	mov	r4,r2
   430e8:	180b883a 	mov	r5,r3
   430ec:	900d883a 	mov	r6,r18
   430f0:	980f883a 	mov	r7,r19
   430f4:	0048b680 	call	48b68 <__muldf3>
   430f8:	d9000317 	ldw	r4,12(sp)
   430fc:	880b883a 	mov	r5,r17
   43100:	100d883a 	mov	r6,r2
   43104:	180f883a 	mov	r7,r3
   43108:	0048b080 	call	48b08 <__subdf3>
   4310c:	d9c00917 	ldw	r7,36(sp)
   43110:	1009883a 	mov	r4,r2
   43114:	a8800c04 	addi	r2,r21,48
   43118:	b8800005 	stb	r2,0(r23)
   4311c:	01800044 	movi	r6,1
   43120:	180b883a 	mov	r5,r3
   43124:	2005883a 	mov	r2,r4
   43128:	bd800044 	addi	r22,r23,1
   4312c:	39803726 	beq	r7,r6,4320c <_dtoa_r+0x8c4>
   43130:	000d883a 	mov	r6,zero
   43134:	01d00934 	movhi	r7,16420
   43138:	0048b680 	call	48b68 <__muldf3>
   4313c:	1009883a 	mov	r4,r2
   43140:	180b883a 	mov	r5,r3
   43144:	000d883a 	mov	r6,zero
   43148:	000f883a 	mov	r7,zero
   4314c:	1029883a 	mov	r20,r2
   43150:	1823883a 	mov	r17,r3
   43154:	00490000 	call	49000 <__eqdf2>
   43158:	103f9c26 	beq	r2,zero,42fcc <_dtoa_r+0x684>
   4315c:	dd400917 	ldw	r21,36(sp)
   43160:	dc000415 	stw	r16,16(sp)
   43164:	00000906 	br	4318c <_dtoa_r+0x844>
   43168:	0048b680 	call	48b68 <__muldf3>
   4316c:	1009883a 	mov	r4,r2
   43170:	180b883a 	mov	r5,r3
   43174:	000d883a 	mov	r6,zero
   43178:	000f883a 	mov	r7,zero
   4317c:	1029883a 	mov	r20,r2
   43180:	1823883a 	mov	r17,r3
   43184:	00490000 	call	49000 <__eqdf2>
   43188:	10022926 	beq	r2,zero,43a30 <_dtoa_r+0x10e8>
   4318c:	900d883a 	mov	r6,r18
   43190:	980f883a 	mov	r7,r19
   43194:	a009883a 	mov	r4,r20
   43198:	880b883a 	mov	r5,r17
   4319c:	0048e4c0 	call	48e4c <__divdf3>
   431a0:	180b883a 	mov	r5,r3
   431a4:	1009883a 	mov	r4,r2
   431a8:	00492b00 	call	492b0 <__fixdfsi>
   431ac:	1009883a 	mov	r4,r2
   431b0:	1021883a 	mov	r16,r2
   431b4:	00491dc0 	call	491dc <__floatsidf>
   431b8:	1009883a 	mov	r4,r2
   431bc:	180b883a 	mov	r5,r3
   431c0:	900d883a 	mov	r6,r18
   431c4:	980f883a 	mov	r7,r19
   431c8:	0048b680 	call	48b68 <__muldf3>
   431cc:	a009883a 	mov	r4,r20
   431d0:	880b883a 	mov	r5,r17
   431d4:	100d883a 	mov	r6,r2
   431d8:	180f883a 	mov	r7,r3
   431dc:	0048b080 	call	48b08 <__subdf3>
   431e0:	82400c04 	addi	r9,r16,48
   431e4:	b2400005 	stb	r9,0(r22)
   431e8:	b5800044 	addi	r22,r22,1
   431ec:	b5d3c83a 	sub	r9,r22,r23
   431f0:	000d883a 	mov	r6,zero
   431f4:	01d00934 	movhi	r7,16420
   431f8:	1009883a 	mov	r4,r2
   431fc:	180b883a 	mov	r5,r3
   43200:	aa7fd91e 	bne	r21,r9,43168 <_dtoa_r+0x820>
   43204:	802b883a 	mov	r21,r16
   43208:	dc000417 	ldw	r16,16(sp)
   4320c:	1009883a 	mov	r4,r2
   43210:	180b883a 	mov	r5,r3
   43214:	100d883a 	mov	r6,r2
   43218:	180f883a 	mov	r7,r3
   4321c:	0048ab40 	call	48ab4 <__adddf3>
   43220:	9009883a 	mov	r4,r18
   43224:	980b883a 	mov	r5,r19
   43228:	100d883a 	mov	r6,r2
   4322c:	180f883a 	mov	r7,r3
   43230:	1023883a 	mov	r17,r2
   43234:	1829883a 	mov	r20,r3
   43238:	00491800 	call	49180 <__ltdf2>
   4323c:	10000816 	blt	r2,zero,43260 <_dtoa_r+0x918>
   43240:	9009883a 	mov	r4,r18
   43244:	980b883a 	mov	r5,r19
   43248:	880d883a 	mov	r6,r17
   4324c:	a00f883a 	mov	r7,r20
   43250:	00490000 	call	49000 <__eqdf2>
   43254:	103f5d1e 	bne	r2,zero,42fcc <_dtoa_r+0x684>
   43258:	ad40004c 	andi	r21,r21,1
   4325c:	a83f5b26 	beq	r21,zero,42fcc <_dtoa_r+0x684>
   43260:	b53fffc3 	ldbu	r20,-1(r22)
   43264:	b0ffff84 	addi	r3,r22,-2
   43268:	01400e44 	movi	r5,57
   4326c:	00000306 	br	4327c <_dtoa_r+0x934>
   43270:	1d000003 	ldbu	r20,0(r3)
   43274:	102d883a 	mov	r22,r2
   43278:	18ffffc4 	addi	r3,r3,-1
   4327c:	a1003fcc 	andi	r4,r20,255
   43280:	2100201c 	xori	r4,r4,128
   43284:	213fe004 	addi	r4,r4,-128
   43288:	b0bfffc4 	addi	r2,r22,-1
   4328c:	2142ca1e 	bne	r4,r5,43db8 <_dtoa_r+0x1470>
   43290:	b8bff71e 	bne	r23,r2,43270 <_dtoa_r+0x928>
   43294:	d8800617 	ldw	r2,24(sp)
   43298:	05000c44 	movi	r20,49
   4329c:	10800044 	addi	r2,r2,1
   432a0:	d8800615 	stw	r2,24(sp)
   432a4:	00800c04 	movi	r2,48
   432a8:	b8800005 	stb	r2,0(r23)
   432ac:	b805883a 	mov	r2,r23
   432b0:	15000005 	stb	r20,0(r2)
   432b4:	003f4506 	br	42fcc <_dtoa_r+0x684>
   432b8:	d9c00c17 	ldw	r7,48(sp)
   432bc:	3800c926 	beq	r7,zero,435e4 <_dtoa_r+0xc9c>
   432c0:	d9c00417 	ldw	r7,16(sp)
   432c4:	00c00044 	movi	r3,1
   432c8:	19c16c0e 	bge	r3,r7,4387c <_dtoa_r+0xf34>
   432cc:	d9000917 	ldw	r4,36(sp)
   432d0:	d9c00a17 	ldw	r7,40(sp)
   432d4:	24ffffc4 	addi	r19,r4,-1
   432d8:	3cc20716 	blt	r7,r19,43af8 <_dtoa_r+0x11b0>
   432dc:	3ce7c83a 	sub	r19,r7,r19
   432e0:	d9c00917 	ldw	r7,36(sp)
   432e4:	3802ae16 	blt	r7,zero,43da0 <_dtoa_r+0x1458>
   432e8:	dc800817 	ldw	r18,32(sp)
   432ec:	d8800917 	ldw	r2,36(sp)
   432f0:	d8c00817 	ldw	r3,32(sp)
   432f4:	d9c00717 	ldw	r7,28(sp)
   432f8:	8009883a 	mov	r4,r16
   432fc:	1887883a 	add	r3,r3,r2
   43300:	388f883a 	add	r7,r7,r2
   43304:	01400044 	movi	r5,1
   43308:	d8c00815 	stw	r3,32(sp)
   4330c:	d9c00715 	stw	r7,28(sp)
   43310:	00461900 	call	46190 <__i2b>
   43314:	102b883a 	mov	r21,r2
   43318:	90000a26 	beq	r18,zero,43344 <_dtoa_r+0x9fc>
   4331c:	d8800717 	ldw	r2,28(sp)
   43320:	0080080e 	bge	zero,r2,43344 <_dtoa_r+0x9fc>
   43324:	90812b16 	blt	r18,r2,437d4 <_dtoa_r+0xe8c>
   43328:	d8c00817 	ldw	r3,32(sp)
   4332c:	d9000717 	ldw	r4,28(sp)
   43330:	90a5c83a 	sub	r18,r18,r2
   43334:	1887c83a 	sub	r3,r3,r2
   43338:	2089c83a 	sub	r4,r4,r2
   4333c:	d8c00815 	stw	r3,32(sp)
   43340:	d9000715 	stw	r4,28(sp)
   43344:	d9c00a17 	ldw	r7,40(sp)
   43348:	01c0140e 	bge	zero,r7,4339c <_dtoa_r+0xa54>
   4334c:	d8800c17 	ldw	r2,48(sp)
   43350:	1001de26 	beq	r2,zero,43acc <_dtoa_r+0x1184>
   43354:	04c00e0e 	bge	zero,r19,43390 <_dtoa_r+0xa48>
   43358:	a80b883a 	mov	r5,r21
   4335c:	8009883a 	mov	r4,r16
   43360:	980d883a 	mov	r6,r19
   43364:	00464240 	call	46424 <__pow5mult>
   43368:	e00d883a 	mov	r6,fp
   4336c:	8009883a 	mov	r4,r16
   43370:	100b883a 	mov	r5,r2
   43374:	102b883a 	mov	r21,r2
   43378:	00461cc0 	call	461cc <__multiply>
   4337c:	1029883a 	mov	r20,r2
   43380:	e00b883a 	mov	r5,fp
   43384:	8009883a 	mov	r4,r16
   43388:	0045e080 	call	45e08 <_Bfree>
   4338c:	a039883a 	mov	fp,r20
   43390:	d8c00a17 	ldw	r3,40(sp)
   43394:	1ccdc83a 	sub	r6,r3,r19
   43398:	3001291e 	bne	r6,zero,43840 <_dtoa_r+0xef8>
   4339c:	8009883a 	mov	r4,r16
   433a0:	01400044 	movi	r5,1
   433a4:	00461900 	call	46190 <__i2b>
   433a8:	d9000b17 	ldw	r4,44(sp)
   433ac:	1029883a 	mov	r20,r2
   433b0:	0100050e 	bge	zero,r4,433c8 <_dtoa_r+0xa80>
   433b4:	d9800b17 	ldw	r6,44(sp)
   433b8:	8009883a 	mov	r4,r16
   433bc:	100b883a 	mov	r5,r2
   433c0:	00464240 	call	46424 <__pow5mult>
   433c4:	1029883a 	mov	r20,r2
   433c8:	d9c00417 	ldw	r7,16(sp)
   433cc:	00800044 	movi	r2,1
   433d0:	11c0f00e 	bge	r2,r7,43794 <_dtoa_r+0xe4c>
   433d4:	0023883a 	mov	r17,zero
   433d8:	d8800b17 	ldw	r2,44(sp)
   433dc:	1001741e 	bne	r2,zero,439b0 <_dtoa_r+0x1068>
   433e0:	00800044 	movi	r2,1
   433e4:	d8c00717 	ldw	r3,28(sp)
   433e8:	10c5883a 	add	r2,r2,r3
   433ec:	108007cc 	andi	r2,r2,31
   433f0:	10008026 	beq	r2,zero,435f4 <_dtoa_r+0xcac>
   433f4:	01000804 	movi	r4,32
   433f8:	2089c83a 	sub	r4,r4,r2
   433fc:	00c00104 	movi	r3,4
   43400:	1902d00e 	bge	r3,r4,43f44 <_dtoa_r+0x15fc>
   43404:	d9000817 	ldw	r4,32(sp)
   43408:	d9c00717 	ldw	r7,28(sp)
   4340c:	00c00704 	movi	r3,28
   43410:	1885c83a 	sub	r2,r3,r2
   43414:	2089883a 	add	r4,r4,r2
   43418:	388f883a 	add	r7,r7,r2
   4341c:	d9000815 	stw	r4,32(sp)
   43420:	90a5883a 	add	r18,r18,r2
   43424:	d9c00715 	stw	r7,28(sp)
   43428:	d9c00817 	ldw	r7,32(sp)
   4342c:	01c0050e 	bge	zero,r7,43444 <_dtoa_r+0xafc>
   43430:	e00b883a 	mov	r5,fp
   43434:	8009883a 	mov	r4,r16
   43438:	380d883a 	mov	r6,r7
   4343c:	00465500 	call	46550 <__lshift>
   43440:	1039883a 	mov	fp,r2
   43444:	d8800717 	ldw	r2,28(sp)
   43448:	0080050e 	bge	zero,r2,43460 <_dtoa_r+0xb18>
   4344c:	a00b883a 	mov	r5,r20
   43450:	8009883a 	mov	r4,r16
   43454:	100d883a 	mov	r6,r2
   43458:	00465500 	call	46550 <__lshift>
   4345c:	1029883a 	mov	r20,r2
   43460:	d8c00d17 	ldw	r3,52(sp)
   43464:	1801401e 	bne	r3,zero,43968 <_dtoa_r+0x1020>
   43468:	d8800917 	ldw	r2,36(sp)
   4346c:	00815a0e 	bge	zero,r2,439d8 <_dtoa_r+0x1090>
   43470:	d8c00c17 	ldw	r3,48(sp)
   43474:	18006f1e 	bne	r3,zero,43634 <_dtoa_r+0xcec>
   43478:	b823883a 	mov	r17,r23
   4347c:	dc800917 	ldw	r18,36(sp)
   43480:	00000206 	br	4348c <_dtoa_r+0xb44>
   43484:	0045e300 	call	45e30 <__multadd>
   43488:	1039883a 	mov	fp,r2
   4348c:	e009883a 	mov	r4,fp
   43490:	a00b883a 	mov	r5,r20
   43494:	004270c0 	call	4270c <quorem>
   43498:	10800c04 	addi	r2,r2,48
   4349c:	88800005 	stb	r2,0(r17)
   434a0:	8c400044 	addi	r17,r17,1
   434a4:	8dc7c83a 	sub	r3,r17,r23
   434a8:	8009883a 	mov	r4,r16
   434ac:	e00b883a 	mov	r5,fp
   434b0:	01800284 	movi	r6,10
   434b4:	000f883a 	mov	r7,zero
   434b8:	1cbff216 	blt	r3,r18,43484 <_dtoa_r+0xb3c>
   434bc:	dd800917 	ldw	r22,36(sp)
   434c0:	1007883a 	mov	r3,r2
   434c4:	05823a0e 	bge	zero,r22,43db0 <_dtoa_r+0x1468>
   434c8:	bdad883a 	add	r22,r23,r22
   434cc:	0023883a 	mov	r17,zero
   434d0:	e00b883a 	mov	r5,fp
   434d4:	01800044 	movi	r6,1
   434d8:	8009883a 	mov	r4,r16
   434dc:	d8c01515 	stw	r3,84(sp)
   434e0:	00465500 	call	46550 <__lshift>
   434e4:	1009883a 	mov	r4,r2
   434e8:	a00b883a 	mov	r5,r20
   434ec:	1039883a 	mov	fp,r2
   434f0:	00466ac0 	call	466ac <__mcmp>
   434f4:	d8c01517 	ldw	r3,84(sp)
   434f8:	0080d60e 	bge	zero,r2,43854 <_dtoa_r+0xf0c>
   434fc:	b13fffc3 	ldbu	r4,-1(r22)
   43500:	b0ffff84 	addi	r3,r22,-2
   43504:	01800e44 	movi	r6,57
   43508:	00000306 	br	43518 <_dtoa_r+0xbd0>
   4350c:	19000003 	ldbu	r4,0(r3)
   43510:	102d883a 	mov	r22,r2
   43514:	18ffffc4 	addi	r3,r3,-1
   43518:	21403fcc 	andi	r5,r4,255
   4351c:	2940201c 	xori	r5,r5,128
   43520:	297fe004 	addi	r5,r5,-128
   43524:	b0bfffc4 	addi	r2,r22,-1
   43528:	2981a71e 	bne	r5,r6,43bc8 <_dtoa_r+0x1280>
   4352c:	b8bff71e 	bne	r23,r2,4350c <_dtoa_r+0xbc4>
   43530:	d8800617 	ldw	r2,24(sp)
   43534:	10800044 	addi	r2,r2,1
   43538:	d8800615 	stw	r2,24(sp)
   4353c:	00800c44 	movi	r2,49
   43540:	b8800005 	stb	r2,0(r23)
   43544:	8009883a 	mov	r4,r16
   43548:	a00b883a 	mov	r5,r20
   4354c:	0045e080 	call	45e08 <_Bfree>
   43550:	a83e9e26 	beq	r21,zero,42fcc <_dtoa_r+0x684>
   43554:	88000426 	beq	r17,zero,43568 <_dtoa_r+0xc20>
   43558:	8d400326 	beq	r17,r21,43568 <_dtoa_r+0xc20>
   4355c:	8009883a 	mov	r4,r16
   43560:	880b883a 	mov	r5,r17
   43564:	0045e080 	call	45e08 <_Bfree>
   43568:	8009883a 	mov	r4,r16
   4356c:	a80b883a 	mov	r5,r21
   43570:	0045e080 	call	45e08 <_Bfree>
   43574:	003e9506 	br	42fcc <_dtoa_r+0x684>
   43578:	00c00044 	movi	r3,1
   4357c:	d8c00d15 	stw	r3,52(sp)
   43580:	003d9f06 	br	42c00 <_dtoa_r+0x2b8>
   43584:	d9000817 	ldw	r4,32(sp)
   43588:	d8800617 	ldw	r2,24(sp)
   4358c:	d8000b15 	stw	zero,44(sp)
   43590:	2089c83a 	sub	r4,r4,r2
   43594:	0087c83a 	sub	r3,zero,r2
   43598:	d9000815 	stw	r4,32(sp)
   4359c:	d8c00a15 	stw	r3,40(sp)
   435a0:	003da306 	br	42c30 <_dtoa_r+0x2e8>
   435a4:	0529c83a 	sub	r20,zero,r20
   435a8:	dd000815 	stw	r20,32(sp)
   435ac:	d8000715 	stw	zero,28(sp)
   435b0:	003d9806 	br	42c14 <_dtoa_r+0x2cc>
   435b4:	d9000617 	ldw	r4,24(sp)
   435b8:	00491dc0 	call	491dc <__floatsidf>
   435bc:	1009883a 	mov	r4,r2
   435c0:	180b883a 	mov	r5,r3
   435c4:	980d883a 	mov	r6,r19
   435c8:	900f883a 	mov	r7,r18
   435cc:	004905c0 	call	4905c <__nedf2>
   435d0:	103d7a26 	beq	r2,zero,42bbc <_dtoa_r+0x274>
   435d4:	d8800617 	ldw	r2,24(sp)
   435d8:	10bfffc4 	addi	r2,r2,-1
   435dc:	d8800615 	stw	r2,24(sp)
   435e0:	003d7606 	br	42bbc <_dtoa_r+0x274>
   435e4:	dcc00a17 	ldw	r19,40(sp)
   435e8:	dc800817 	ldw	r18,32(sp)
   435ec:	002b883a 	mov	r21,zero
   435f0:	003f4906 	br	43318 <_dtoa_r+0x9d0>
   435f4:	00800704 	movi	r2,28
   435f8:	d8c00817 	ldw	r3,32(sp)
   435fc:	d9000717 	ldw	r4,28(sp)
   43600:	90a5883a 	add	r18,r18,r2
   43604:	1887883a 	add	r3,r3,r2
   43608:	2089883a 	add	r4,r4,r2
   4360c:	d8c00815 	stw	r3,32(sp)
   43610:	d9000715 	stw	r4,28(sp)
   43614:	003f8406 	br	43428 <_dtoa_r+0xae0>
   43618:	d9c00317 	ldw	r7,12(sp)
   4361c:	013efb84 	movi	r4,-1042
   43620:	2509c83a 	sub	r4,r4,r20
   43624:	3908983a 	sll	r4,r7,r4
   43628:	003d3006 	br	42aec <_dtoa_r+0x1a4>
   4362c:	d8000d15 	stw	zero,52(sp)
   43630:	003d7306 	br	42c00 <_dtoa_r+0x2b8>
   43634:	0480050e 	bge	zero,r18,4364c <_dtoa_r+0xd04>
   43638:	a80b883a 	mov	r5,r21
   4363c:	8009883a 	mov	r4,r16
   43640:	900d883a 	mov	r6,r18
   43644:	00465500 	call	46550 <__lshift>
   43648:	102b883a 	mov	r21,r2
   4364c:	8801611e 	bne	r17,zero,43bd4 <_dtoa_r+0x128c>
   43650:	a827883a 	mov	r19,r21
   43654:	d8c00317 	ldw	r3,12(sp)
   43658:	d9000917 	ldw	r4,36(sp)
   4365c:	b8bfffc4 	addi	r2,r23,-1
   43660:	18c0004c 	andi	r3,r3,1
   43664:	1105883a 	add	r2,r2,r4
   43668:	b825883a 	mov	r18,r23
   4366c:	d8800515 	stw	r2,20(sp)
   43670:	a823883a 	mov	r17,r21
   43674:	d8c00315 	stw	r3,12(sp)
   43678:	ddc00715 	stw	r23,28(sp)
   4367c:	e009883a 	mov	r4,fp
   43680:	a00b883a 	mov	r5,r20
   43684:	004270c0 	call	4270c <quorem>
   43688:	e009883a 	mov	r4,fp
   4368c:	880b883a 	mov	r5,r17
   43690:	102d883a 	mov	r22,r2
   43694:	00466ac0 	call	466ac <__mcmp>
   43698:	980d883a 	mov	r6,r19
   4369c:	8009883a 	mov	r4,r16
   436a0:	a00b883a 	mov	r5,r20
   436a4:	102b883a 	mov	r21,r2
   436a8:	00467040 	call	46704 <__mdiff>
   436ac:	100d883a 	mov	r6,r2
   436b0:	10800317 	ldw	r2,12(r2)
   436b4:	b5c00c04 	addi	r23,r22,48
   436b8:	10008c26 	beq	r2,zero,438ec <_dtoa_r+0xfa4>
   436bc:	8009883a 	mov	r4,r16
   436c0:	300b883a 	mov	r5,r6
   436c4:	0045e080 	call	45e08 <_Bfree>
   436c8:	00800044 	movi	r2,1
   436cc:	a8007116 	blt	r21,zero,43894 <_dtoa_r+0xf4c>
   436d0:	a800041e 	bne	r21,zero,436e4 <_dtoa_r+0xd9c>
   436d4:	d9c00417 	ldw	r7,16(sp)
   436d8:	3800021e 	bne	r7,zero,436e4 <_dtoa_r+0xd9c>
   436dc:	d8c00317 	ldw	r3,12(sp)
   436e0:	18006c26 	beq	r3,zero,43894 <_dtoa_r+0xf4c>
   436e4:	00814c16 	blt	zero,r2,43c18 <_dtoa_r+0x12d0>
   436e8:	d8c00517 	ldw	r3,20(sp)
   436ec:	95400044 	addi	r21,r18,1
   436f0:	95c00005 	stb	r23,0(r18)
   436f4:	a82d883a 	mov	r22,r21
   436f8:	90c14d26 	beq	r18,r3,43c30 <_dtoa_r+0x12e8>
   436fc:	e00b883a 	mov	r5,fp
   43700:	8009883a 	mov	r4,r16
   43704:	01800284 	movi	r6,10
   43708:	000f883a 	mov	r7,zero
   4370c:	0045e300 	call	45e30 <__multadd>
   43710:	1039883a 	mov	fp,r2
   43714:	8cc08b26 	beq	r17,r19,43944 <_dtoa_r+0xffc>
   43718:	880b883a 	mov	r5,r17
   4371c:	01800284 	movi	r6,10
   43720:	000f883a 	mov	r7,zero
   43724:	8009883a 	mov	r4,r16
   43728:	0045e300 	call	45e30 <__multadd>
   4372c:	980b883a 	mov	r5,r19
   43730:	8009883a 	mov	r4,r16
   43734:	01800284 	movi	r6,10
   43738:	000f883a 	mov	r7,zero
   4373c:	1023883a 	mov	r17,r2
   43740:	0045e300 	call	45e30 <__multadd>
   43744:	1027883a 	mov	r19,r2
   43748:	a825883a 	mov	r18,r21
   4374c:	003fcb06 	br	4367c <_dtoa_r+0xd34>
   43750:	d9c00417 	ldw	r7,16(sp)
   43754:	00800104 	movi	r2,4
   43758:	3880e426 	beq	r7,r2,43aec <_dtoa_r+0x11a4>
   4375c:	00800144 	movi	r2,5
   43760:	38be3c1e 	bne	r7,r2,43054 <_dtoa_r+0x70c>
   43764:	00c00044 	movi	r3,1
   43768:	d8c00c15 	stw	r3,48(sp)
   4376c:	d9c02117 	ldw	r7,132(sp)
   43770:	d8800617 	ldw	r2,24(sp)
   43774:	388f883a 	add	r7,r7,r2
   43778:	3c800044 	addi	r18,r7,1
   4377c:	d9c00e15 	stw	r7,56(sp)
   43780:	dc800915 	stw	r18,36(sp)
   43784:	04bd3e16 	blt	zero,r18,42c80 <_dtoa_r+0x338>
   43788:	80001115 	stw	zero,68(r16)
   4378c:	000b883a 	mov	r5,zero
   43790:	003d4606 	br	42cac <_dtoa_r+0x364>
   43794:	d8c00317 	ldw	r3,12(sp)
   43798:	183f0e1e 	bne	r3,zero,433d4 <_dtoa_r+0xa8c>
   4379c:	00c00434 	movhi	r3,16
   437a0:	18ffffc4 	addi	r3,r3,-1
   437a4:	88c6703a 	and	r3,r17,r3
   437a8:	183f0a1e 	bne	r3,zero,433d4 <_dtoa_r+0xa8c>
   437ac:	8c5ffc2c 	andhi	r17,r17,32752
   437b0:	883f0826 	beq	r17,zero,433d4 <_dtoa_r+0xa8c>
   437b4:	d9000817 	ldw	r4,32(sp)
   437b8:	d9c00717 	ldw	r7,28(sp)
   437bc:	1023883a 	mov	r17,r2
   437c0:	2089883a 	add	r4,r4,r2
   437c4:	388f883a 	add	r7,r7,r2
   437c8:	d9000815 	stw	r4,32(sp)
   437cc:	d9c00715 	stw	r7,28(sp)
   437d0:	003f0106 	br	433d8 <_dtoa_r+0xa90>
   437d4:	9005883a 	mov	r2,r18
   437d8:	003ed306 	br	43328 <_dtoa_r+0x9e0>
   437dc:	d8800917 	ldw	r2,36(sp)
   437e0:	00be3516 	blt	zero,r2,430b8 <_dtoa_r+0x770>
   437e4:	1000b61e 	bne	r2,zero,43ac0 <_dtoa_r+0x1178>
   437e8:	9009883a 	mov	r4,r18
   437ec:	980b883a 	mov	r5,r19
   437f0:	000d883a 	mov	r6,zero
   437f4:	01d00534 	movhi	r7,16404
   437f8:	0048b680 	call	48b68 <__muldf3>
   437fc:	d9800317 	ldw	r6,12(sp)
   43800:	1009883a 	mov	r4,r2
   43804:	180b883a 	mov	r5,r3
   43808:	880f883a 	mov	r7,r17
   4380c:	004911c0 	call	4911c <__gedf2>
   43810:	0029883a 	mov	r20,zero
   43814:	002b883a 	mov	r21,zero
   43818:	10007e16 	blt	r2,zero,43a14 <_dtoa_r+0x10cc>
   4381c:	d8802117 	ldw	r2,132(sp)
   43820:	b82d883a 	mov	r22,r23
   43824:	0084303a 	nor	r2,zero,r2
   43828:	d8800615 	stw	r2,24(sp)
   4382c:	8009883a 	mov	r4,r16
   43830:	a00b883a 	mov	r5,r20
   43834:	0045e080 	call	45e08 <_Bfree>
   43838:	a83f4b1e 	bne	r21,zero,43568 <_dtoa_r+0xc20>
   4383c:	003de306 	br	42fcc <_dtoa_r+0x684>
   43840:	e00b883a 	mov	r5,fp
   43844:	8009883a 	mov	r4,r16
   43848:	00464240 	call	46424 <__pow5mult>
   4384c:	1039883a 	mov	fp,r2
   43850:	003ed206 	br	4339c <_dtoa_r+0xa54>
   43854:	1000021e 	bne	r2,zero,43860 <_dtoa_r+0xf18>
   43858:	18c0004c 	andi	r3,r3,1
   4385c:	183f271e 	bne	r3,zero,434fc <_dtoa_r+0xbb4>
   43860:	01000c04 	movi	r4,48
   43864:	00000106 	br	4386c <_dtoa_r+0xf24>
   43868:	102d883a 	mov	r22,r2
   4386c:	b0bfffc4 	addi	r2,r22,-1
   43870:	10c00007 	ldb	r3,0(r2)
   43874:	193ffc26 	beq	r3,r4,43868 <_dtoa_r+0xf20>
   43878:	003f3206 	br	43544 <_dtoa_r+0xbfc>
   4387c:	d8c00f17 	ldw	r3,60(sp)
   43880:	18015026 	beq	r3,zero,43dc4 <_dtoa_r+0x147c>
   43884:	10810cc4 	addi	r2,r2,1075
   43888:	dcc00a17 	ldw	r19,40(sp)
   4388c:	dc800817 	ldw	r18,32(sp)
   43890:	003e9706 	br	432f0 <_dtoa_r+0x9a8>
   43894:	b807883a 	mov	r3,r23
   43898:	182b883a 	mov	r21,r3
   4389c:	ddc00717 	ldw	r23,28(sp)
   438a0:	00800e0e 	bge	zero,r2,438dc <_dtoa_r+0xf94>
   438a4:	e00b883a 	mov	r5,fp
   438a8:	01800044 	movi	r6,1
   438ac:	8009883a 	mov	r4,r16
   438b0:	d8c01515 	stw	r3,84(sp)
   438b4:	00465500 	call	46550 <__lshift>
   438b8:	1009883a 	mov	r4,r2
   438bc:	a00b883a 	mov	r5,r20
   438c0:	1039883a 	mov	fp,r2
   438c4:	00466ac0 	call	466ac <__mcmp>
   438c8:	d8c01517 	ldw	r3,84(sp)
   438cc:	0081880e 	bge	zero,r2,43ef0 <_dtoa_r+0x15a8>
   438d0:	00800e44 	movi	r2,57
   438d4:	b0c00c44 	addi	r3,r22,49
   438d8:	a8816326 	beq	r21,r2,43e68 <_dtoa_r+0x1520>
   438dc:	90c00005 	stb	r3,0(r18)
   438e0:	95800044 	addi	r22,r18,1
   438e4:	982b883a 	mov	r21,r19
   438e8:	003f1606 	br	43544 <_dtoa_r+0xbfc>
   438ec:	300b883a 	mov	r5,r6
   438f0:	e009883a 	mov	r4,fp
   438f4:	d9801515 	stw	r6,84(sp)
   438f8:	00466ac0 	call	466ac <__mcmp>
   438fc:	d9801517 	ldw	r6,84(sp)
   43900:	8009883a 	mov	r4,r16
   43904:	d8801515 	stw	r2,84(sp)
   43908:	300b883a 	mov	r5,r6
   4390c:	0045e080 	call	45e08 <_Bfree>
   43910:	d8801517 	ldw	r2,84(sp)
   43914:	103f6d1e 	bne	r2,zero,436cc <_dtoa_r+0xd84>
   43918:	d9c00417 	ldw	r7,16(sp)
   4391c:	383f6b1e 	bne	r7,zero,436cc <_dtoa_r+0xd84>
   43920:	d8c00317 	ldw	r3,12(sp)
   43924:	183f691e 	bne	r3,zero,436cc <_dtoa_r+0xd84>
   43928:	b807883a 	mov	r3,r23
   4392c:	00800e44 	movi	r2,57
   43930:	ddc00717 	ldw	r23,28(sp)
   43934:	18814c26 	beq	r3,r2,43e68 <_dtoa_r+0x1520>
   43938:	057fe80e 	bge	zero,r21,438dc <_dtoa_r+0xf94>
   4393c:	b0c00c44 	addi	r3,r22,49
   43940:	003fe606 	br	438dc <_dtoa_r+0xf94>
   43944:	880b883a 	mov	r5,r17
   43948:	8009883a 	mov	r4,r16
   4394c:	01800284 	movi	r6,10
   43950:	000f883a 	mov	r7,zero
   43954:	0045e300 	call	45e30 <__multadd>
   43958:	1023883a 	mov	r17,r2
   4395c:	1027883a 	mov	r19,r2
   43960:	a825883a 	mov	r18,r21
   43964:	003f4506 	br	4367c <_dtoa_r+0xd34>
   43968:	e009883a 	mov	r4,fp
   4396c:	a00b883a 	mov	r5,r20
   43970:	00466ac0 	call	466ac <__mcmp>
   43974:	103ebc0e 	bge	r2,zero,43468 <_dtoa_r+0xb20>
   43978:	e00b883a 	mov	r5,fp
   4397c:	8009883a 	mov	r4,r16
   43980:	01800284 	movi	r6,10
   43984:	000f883a 	mov	r7,zero
   43988:	0045e300 	call	45e30 <__multadd>
   4398c:	1039883a 	mov	fp,r2
   43990:	d8800617 	ldw	r2,24(sp)
   43994:	d8c00c17 	ldw	r3,48(sp)
   43998:	10bfffc4 	addi	r2,r2,-1
   4399c:	d8800615 	stw	r2,24(sp)
   439a0:	1801571e 	bne	r3,zero,43f00 <_dtoa_r+0x15b8>
   439a4:	d9c00e17 	ldw	r7,56(sp)
   439a8:	d9c00915 	stw	r7,36(sp)
   439ac:	003eae06 	br	43468 <_dtoa_r+0xb20>
   439b0:	a0800417 	ldw	r2,16(r20)
   439b4:	10800104 	addi	r2,r2,4
   439b8:	1085883a 	add	r2,r2,r2
   439bc:	1085883a 	add	r2,r2,r2
   439c0:	a085883a 	add	r2,r20,r2
   439c4:	11000017 	ldw	r4,0(r2)
   439c8:	00460780 	call	46078 <__hi0bits>
   439cc:	00c00804 	movi	r3,32
   439d0:	1885c83a 	sub	r2,r3,r2
   439d4:	003e8306 	br	433e4 <_dtoa_r+0xa9c>
   439d8:	d9c00417 	ldw	r7,16(sp)
   439dc:	00800084 	movi	r2,2
   439e0:	11fea30e 	bge	r2,r7,43470 <_dtoa_r+0xb28>
   439e4:	d8800917 	ldw	r2,36(sp)
   439e8:	103f8c1e 	bne	r2,zero,4381c <_dtoa_r+0xed4>
   439ec:	a00b883a 	mov	r5,r20
   439f0:	8009883a 	mov	r4,r16
   439f4:	01800144 	movi	r6,5
   439f8:	000f883a 	mov	r7,zero
   439fc:	0045e300 	call	45e30 <__multadd>
   43a00:	e009883a 	mov	r4,fp
   43a04:	100b883a 	mov	r5,r2
   43a08:	1029883a 	mov	r20,r2
   43a0c:	00466ac0 	call	466ac <__mcmp>
   43a10:	00bf820e 	bge	zero,r2,4381c <_dtoa_r+0xed4>
   43a14:	00800c44 	movi	r2,49
   43a18:	b8800005 	stb	r2,0(r23)
   43a1c:	d8800617 	ldw	r2,24(sp)
   43a20:	bd800044 	addi	r22,r23,1
   43a24:	10800044 	addi	r2,r2,1
   43a28:	d8800615 	stw	r2,24(sp)
   43a2c:	003f7f06 	br	4382c <_dtoa_r+0xee4>
   43a30:	dc000417 	ldw	r16,16(sp)
   43a34:	003d6506 	br	42fcc <_dtoa_r+0x684>
   43a38:	9009883a 	mov	r4,r18
   43a3c:	00491dc0 	call	491dc <__floatsidf>
   43a40:	1009883a 	mov	r4,r2
   43a44:	180b883a 	mov	r5,r3
   43a48:	980d883a 	mov	r6,r19
   43a4c:	a00f883a 	mov	r7,r20
   43a50:	0048b680 	call	48b68 <__muldf3>
   43a54:	1009883a 	mov	r4,r2
   43a58:	180b883a 	mov	r5,r3
   43a5c:	000d883a 	mov	r6,zero
   43a60:	01d00734 	movhi	r7,16412
   43a64:	0048ab40 	call	48ab4 <__adddf3>
   43a68:	057f3034 	movhi	r21,64704
   43a6c:	1025883a 	mov	r18,r2
   43a70:	1d6b883a 	add	r21,r3,r21
   43a74:	9809883a 	mov	r4,r19
   43a78:	a00b883a 	mov	r5,r20
   43a7c:	000d883a 	mov	r6,zero
   43a80:	01d00534 	movhi	r7,16404
   43a84:	0048b080 	call	48b08 <__subdf3>
   43a88:	1009883a 	mov	r4,r2
   43a8c:	180b883a 	mov	r5,r3
   43a90:	900d883a 	mov	r6,r18
   43a94:	a80f883a 	mov	r7,r21
   43a98:	1027883a 	mov	r19,r2
   43a9c:	1829883a 	mov	r20,r3
   43aa0:	00490b80 	call	490b8 <__gtdf2>
   43aa4:	00806616 	blt	zero,r2,43c40 <_dtoa_r+0x12f8>
   43aa8:	a9e0003c 	xorhi	r7,r21,32768
   43aac:	9809883a 	mov	r4,r19
   43ab0:	a00b883a 	mov	r5,r20
   43ab4:	900d883a 	mov	r6,r18
   43ab8:	00491800 	call	49180 <__ltdf2>
   43abc:	103d710e 	bge	r2,zero,43084 <_dtoa_r+0x73c>
   43ac0:	0029883a 	mov	r20,zero
   43ac4:	002b883a 	mov	r21,zero
   43ac8:	003f5406 	br	4381c <_dtoa_r+0xed4>
   43acc:	d9800a17 	ldw	r6,40(sp)
   43ad0:	e00b883a 	mov	r5,fp
   43ad4:	8009883a 	mov	r4,r16
   43ad8:	00464240 	call	46424 <__pow5mult>
   43adc:	1039883a 	mov	fp,r2
   43ae0:	003e2e06 	br	4339c <_dtoa_r+0xa54>
   43ae4:	d8000c15 	stw	zero,48(sp)
   43ae8:	003f2006 	br	4376c <_dtoa_r+0xe24>
   43aec:	00800044 	movi	r2,1
   43af0:	d8800c15 	stw	r2,48(sp)
   43af4:	003c5d06 	br	42c6c <_dtoa_r+0x324>
   43af8:	d8c00a17 	ldw	r3,40(sp)
   43afc:	d9000b17 	ldw	r4,44(sp)
   43b00:	dcc00a15 	stw	r19,40(sp)
   43b04:	98c5c83a 	sub	r2,r19,r3
   43b08:	2089883a 	add	r4,r4,r2
   43b0c:	d9000b15 	stw	r4,44(sp)
   43b10:	0027883a 	mov	r19,zero
   43b14:	003df206 	br	432e0 <_dtoa_r+0x998>
   43b18:	d9000317 	ldw	r4,12(sp)
   43b1c:	8829883a 	mov	r20,r17
   43b20:	04800084 	movi	r18,2
   43b24:	d9001015 	stw	r4,64(sp)
   43b28:	003c8106 	br	42d30 <_dtoa_r+0x3e8>
   43b2c:	04800044 	movi	r18,1
   43b30:	dc800e15 	stw	r18,56(sp)
   43b34:	dc800915 	stw	r18,36(sp)
   43b38:	dc802115 	stw	r18,132(sp)
   43b3c:	003f1206 	br	43788 <_dtoa_r+0xe40>
   43b40:	d8800617 	ldw	r2,24(sp)
   43b44:	00abc83a 	sub	r21,zero,r2
   43b48:	a800a426 	beq	r21,zero,43ddc <_dtoa_r+0x1494>
   43b4c:	a88003cc 	andi	r2,r21,15
   43b50:	100490fa 	slli	r2,r2,3
   43b54:	00c00074 	movhi	r3,1
   43b58:	18c07a04 	addi	r3,r3,488
   43b5c:	d9000317 	ldw	r4,12(sp)
   43b60:	1885883a 	add	r2,r3,r2
   43b64:	11800017 	ldw	r6,0(r2)
   43b68:	11c00117 	ldw	r7,4(r2)
   43b6c:	a82bd13a 	srai	r21,r21,4
   43b70:	880b883a 	mov	r5,r17
   43b74:	0048b680 	call	48b68 <__muldf3>
   43b78:	1027883a 	mov	r19,r2
   43b7c:	1829883a 	mov	r20,r3
   43b80:	a800e826 	beq	r21,zero,43f24 <_dtoa_r+0x15dc>
   43b84:	05800074 	movhi	r22,1
   43b88:	b5807004 	addi	r22,r22,448
   43b8c:	04800084 	movi	r18,2
   43b90:	a980004c 	andi	r6,r21,1
   43b94:	1009883a 	mov	r4,r2
   43b98:	a82bd07a 	srai	r21,r21,1
   43b9c:	180b883a 	mov	r5,r3
   43ba0:	30000426 	beq	r6,zero,43bb4 <_dtoa_r+0x126c>
   43ba4:	b1800017 	ldw	r6,0(r22)
   43ba8:	b1c00117 	ldw	r7,4(r22)
   43bac:	94800044 	addi	r18,r18,1
   43bb0:	0048b680 	call	48b68 <__muldf3>
   43bb4:	b5800204 	addi	r22,r22,8
   43bb8:	a83ff51e 	bne	r21,zero,43b90 <_dtoa_r+0x1248>
   43bbc:	1027883a 	mov	r19,r2
   43bc0:	1829883a 	mov	r20,r3
   43bc4:	003c7306 	br	42d94 <_dtoa_r+0x44c>
   43bc8:	21000044 	addi	r4,r4,1
   43bcc:	11000005 	stb	r4,0(r2)
   43bd0:	003e5c06 	br	43544 <_dtoa_r+0xbfc>
   43bd4:	a9400117 	ldw	r5,4(r21)
   43bd8:	8009883a 	mov	r4,r16
   43bdc:	0045d600 	call	45d60 <_Balloc>
   43be0:	a9800417 	ldw	r6,16(r21)
   43be4:	11000304 	addi	r4,r2,12
   43be8:	a9400304 	addi	r5,r21,12
   43bec:	31800084 	addi	r6,r6,2
   43bf0:	318d883a 	add	r6,r6,r6
   43bf4:	318d883a 	add	r6,r6,r6
   43bf8:	1023883a 	mov	r17,r2
   43bfc:	00459b80 	call	459b8 <memcpy>
   43c00:	8009883a 	mov	r4,r16
   43c04:	880b883a 	mov	r5,r17
   43c08:	01800044 	movi	r6,1
   43c0c:	00465500 	call	46550 <__lshift>
   43c10:	1027883a 	mov	r19,r2
   43c14:	003e8f06 	br	43654 <_dtoa_r+0xd0c>
   43c18:	b807883a 	mov	r3,r23
   43c1c:	00800e44 	movi	r2,57
   43c20:	ddc00717 	ldw	r23,28(sp)
   43c24:	18809026 	beq	r3,r2,43e68 <_dtoa_r+0x1520>
   43c28:	18c00044 	addi	r3,r3,1
   43c2c:	003f2b06 	br	438dc <_dtoa_r+0xf94>
   43c30:	b807883a 	mov	r3,r23
   43c34:	982b883a 	mov	r21,r19
   43c38:	ddc00717 	ldw	r23,28(sp)
   43c3c:	003e2406 	br	434d0 <_dtoa_r+0xb88>
   43c40:	0029883a 	mov	r20,zero
   43c44:	002b883a 	mov	r21,zero
   43c48:	003f7206 	br	43a14 <_dtoa_r+0x10cc>
   43c4c:	593fffc4 	addi	r4,r11,-1
   43c50:	200490fa 	slli	r2,r4,3
   43c54:	00c00074 	movhi	r3,1
   43c58:	18c07a04 	addi	r3,r3,488
   43c5c:	d9001015 	stw	r4,64(sp)
   43c60:	1885883a 	add	r2,r3,r2
   43c64:	11000017 	ldw	r4,0(r2)
   43c68:	11400117 	ldw	r5,4(r2)
   43c6c:	900d883a 	mov	r6,r18
   43c70:	a80f883a 	mov	r7,r21
   43c74:	dac01615 	stw	r11,88(sp)
   43c78:	0048b680 	call	48b68 <__muldf3>
   43c7c:	a00b883a 	mov	r5,r20
   43c80:	9809883a 	mov	r4,r19
   43c84:	d8c01215 	stw	r3,72(sp)
   43c88:	d8801115 	stw	r2,68(sp)
   43c8c:	00492b00 	call	492b0 <__fixdfsi>
   43c90:	1009883a 	mov	r4,r2
   43c94:	1025883a 	mov	r18,r2
   43c98:	00491dc0 	call	491dc <__floatsidf>
   43c9c:	9809883a 	mov	r4,r19
   43ca0:	a00b883a 	mov	r5,r20
   43ca4:	100d883a 	mov	r6,r2
   43ca8:	180f883a 	mov	r7,r3
   43cac:	94800c04 	addi	r18,r18,48
   43cb0:	0048b080 	call	48b08 <__subdf3>
   43cb4:	bc800005 	stb	r18,0(r23)
   43cb8:	dac01617 	ldw	r11,88(sp)
   43cbc:	102b883a 	mov	r21,r2
   43cc0:	00800044 	movi	r2,1
   43cc4:	bd800044 	addi	r22,r23,1
   43cc8:	1815883a 	mov	r10,r3
   43ccc:	58802226 	beq	r11,r2,43d58 <_dtoa_r+0x1410>
   43cd0:	bad7883a 	add	r11,r23,r11
   43cd4:	dc001415 	stw	r16,80(sp)
   43cd8:	a805883a 	mov	r2,r21
   43cdc:	b027883a 	mov	r19,r22
   43ce0:	5821883a 	mov	r16,r11
   43ce4:	882b883a 	mov	r21,r17
   43ce8:	000d883a 	mov	r6,zero
   43cec:	01d00934 	movhi	r7,16420
   43cf0:	1009883a 	mov	r4,r2
   43cf4:	180b883a 	mov	r5,r3
   43cf8:	0048b680 	call	48b68 <__muldf3>
   43cfc:	180b883a 	mov	r5,r3
   43d00:	1009883a 	mov	r4,r2
   43d04:	1829883a 	mov	r20,r3
   43d08:	1023883a 	mov	r17,r2
   43d0c:	00492b00 	call	492b0 <__fixdfsi>
   43d10:	1009883a 	mov	r4,r2
   43d14:	1025883a 	mov	r18,r2
   43d18:	00491dc0 	call	491dc <__floatsidf>
   43d1c:	8809883a 	mov	r4,r17
   43d20:	a00b883a 	mov	r5,r20
   43d24:	100d883a 	mov	r6,r2
   43d28:	180f883a 	mov	r7,r3
   43d2c:	94800c04 	addi	r18,r18,48
   43d30:	0048b080 	call	48b08 <__subdf3>
   43d34:	9cc00044 	addi	r19,r19,1
   43d38:	9cbfffc5 	stb	r18,-1(r19)
   43d3c:	9c3fea1e 	bne	r19,r16,43ce8 <_dtoa_r+0x13a0>
   43d40:	1815883a 	mov	r10,r3
   43d44:	d8c01017 	ldw	r3,64(sp)
   43d48:	dc001417 	ldw	r16,80(sp)
   43d4c:	a823883a 	mov	r17,r21
   43d50:	b0ed883a 	add	r22,r22,r3
   43d54:	102b883a 	mov	r21,r2
   43d58:	d9001117 	ldw	r4,68(sp)
   43d5c:	d9401217 	ldw	r5,72(sp)
   43d60:	000d883a 	mov	r6,zero
   43d64:	01cff834 	movhi	r7,16352
   43d68:	da801515 	stw	r10,84(sp)
   43d6c:	0048ab40 	call	48ab4 <__adddf3>
   43d70:	da801517 	ldw	r10,84(sp)
   43d74:	1009883a 	mov	r4,r2
   43d78:	180b883a 	mov	r5,r3
   43d7c:	500f883a 	mov	r7,r10
   43d80:	a80d883a 	mov	r6,r21
   43d84:	00491800 	call	49180 <__ltdf2>
   43d88:	da801517 	ldw	r10,84(sp)
   43d8c:	10003b0e 	bge	r2,zero,43e7c <_dtoa_r+0x1534>
   43d90:	d9c01317 	ldw	r7,76(sp)
   43d94:	b53fffc3 	ldbu	r20,-1(r22)
   43d98:	d9c00615 	stw	r7,24(sp)
   43d9c:	003d3106 	br	43264 <_dtoa_r+0x91c>
   43da0:	d8800817 	ldw	r2,32(sp)
   43da4:	11e5c83a 	sub	r18,r2,r7
   43da8:	0005883a 	mov	r2,zero
   43dac:	003d5006 	br	432f0 <_dtoa_r+0x9a8>
   43db0:	05800044 	movi	r22,1
   43db4:	003dc406 	br	434c8 <_dtoa_r+0xb80>
   43db8:	a5000044 	addi	r20,r20,1
   43dbc:	15000005 	stb	r20,0(r2)
   43dc0:	003c8206 	br	42fcc <_dtoa_r+0x684>
   43dc4:	d8800217 	ldw	r2,8(sp)
   43dc8:	00c00d84 	movi	r3,54
   43dcc:	dcc00a17 	ldw	r19,40(sp)
   43dd0:	1885c83a 	sub	r2,r3,r2
   43dd4:	dc800817 	ldw	r18,32(sp)
   43dd8:	003d4506 	br	432f0 <_dtoa_r+0x9a8>
   43ddc:	dcc00317 	ldw	r19,12(sp)
   43de0:	8829883a 	mov	r20,r17
   43de4:	04800084 	movi	r18,2
   43de8:	003bea06 	br	42d94 <_dtoa_r+0x44c>
   43dec:	d9000917 	ldw	r4,36(sp)
   43df0:	203f1126 	beq	r4,zero,43a38 <_dtoa_r+0x10f0>
   43df4:	d9c00e17 	ldw	r7,56(sp)
   43df8:	01fca20e 	bge	zero,r7,43084 <_dtoa_r+0x73c>
   43dfc:	a00b883a 	mov	r5,r20
   43e00:	9809883a 	mov	r4,r19
   43e04:	000d883a 	mov	r6,zero
   43e08:	01d00934 	movhi	r7,16420
   43e0c:	0048b680 	call	48b68 <__muldf3>
   43e10:	91000044 	addi	r4,r18,1
   43e14:	1027883a 	mov	r19,r2
   43e18:	1829883a 	mov	r20,r3
   43e1c:	00491dc0 	call	491dc <__floatsidf>
   43e20:	9809883a 	mov	r4,r19
   43e24:	a00b883a 	mov	r5,r20
   43e28:	100d883a 	mov	r6,r2
   43e2c:	180f883a 	mov	r7,r3
   43e30:	0048b680 	call	48b68 <__muldf3>
   43e34:	1009883a 	mov	r4,r2
   43e38:	180b883a 	mov	r5,r3
   43e3c:	000d883a 	mov	r6,zero
   43e40:	01d00734 	movhi	r7,16412
   43e44:	0048ab40 	call	48ab4 <__adddf3>
   43e48:	1025883a 	mov	r18,r2
   43e4c:	d8800617 	ldw	r2,24(sp)
   43e50:	057f3034 	movhi	r21,64704
   43e54:	1d6b883a 	add	r21,r3,r21
   43e58:	10bfffc4 	addi	r2,r2,-1
   43e5c:	d8801315 	stw	r2,76(sp)
   43e60:	dac00e17 	ldw	r11,56(sp)
   43e64:	003be706 	br	42e04 <_dtoa_r+0x4bc>
   43e68:	01000e44 	movi	r4,57
   43e6c:	91000005 	stb	r4,0(r18)
   43e70:	95800044 	addi	r22,r18,1
   43e74:	982b883a 	mov	r21,r19
   43e78:	003da106 	br	43500 <_dtoa_r+0xbb8>
   43e7c:	d9801117 	ldw	r6,68(sp)
   43e80:	d9c01217 	ldw	r7,72(sp)
   43e84:	0009883a 	mov	r4,zero
   43e88:	014ff834 	movhi	r5,16352
   43e8c:	da801515 	stw	r10,84(sp)
   43e90:	0048b080 	call	48b08 <__subdf3>
   43e94:	da801517 	ldw	r10,84(sp)
   43e98:	1009883a 	mov	r4,r2
   43e9c:	180b883a 	mov	r5,r3
   43ea0:	a80d883a 	mov	r6,r21
   43ea4:	500f883a 	mov	r7,r10
   43ea8:	00490b80 	call	490b8 <__gtdf2>
   43eac:	00bc750e 	bge	zero,r2,43084 <_dtoa_r+0x73c>
   43eb0:	01000c04 	movi	r4,48
   43eb4:	00000106 	br	43ebc <_dtoa_r+0x1574>
   43eb8:	102d883a 	mov	r22,r2
   43ebc:	b0bfffc4 	addi	r2,r22,-1
   43ec0:	10c00007 	ldb	r3,0(r2)
   43ec4:	193ffc26 	beq	r3,r4,43eb8 <_dtoa_r+0x1570>
   43ec8:	d8801317 	ldw	r2,76(sp)
   43ecc:	d8800615 	stw	r2,24(sp)
   43ed0:	003c3e06 	br	42fcc <_dtoa_r+0x684>
   43ed4:	d9001317 	ldw	r4,76(sp)
   43ed8:	df001117 	ldw	fp,68(sp)
   43edc:	d9000615 	stw	r4,24(sp)
   43ee0:	003ce006 	br	43264 <_dtoa_r+0x91c>
   43ee4:	df001117 	ldw	fp,68(sp)
   43ee8:	dc401217 	ldw	r17,72(sp)
   43eec:	003c6506 	br	43084 <_dtoa_r+0x73c>
   43ef0:	103e7a1e 	bne	r2,zero,438dc <_dtoa_r+0xf94>
   43ef4:	1880004c 	andi	r2,r3,1
   43ef8:	103e7826 	beq	r2,zero,438dc <_dtoa_r+0xf94>
   43efc:	003e7406 	br	438d0 <_dtoa_r+0xf88>
   43f00:	8009883a 	mov	r4,r16
   43f04:	a80b883a 	mov	r5,r21
   43f08:	01800284 	movi	r6,10
   43f0c:	000f883a 	mov	r7,zero
   43f10:	0045e300 	call	45e30 <__multadd>
   43f14:	d9000e17 	ldw	r4,56(sp)
   43f18:	102b883a 	mov	r21,r2
   43f1c:	d9000915 	stw	r4,36(sp)
   43f20:	003d5106 	br	43468 <_dtoa_r+0xb20>
   43f24:	04800084 	movi	r18,2
   43f28:	003b9a06 	br	42d94 <_dtoa_r+0x44c>
   43f2c:	d8c01317 	ldw	r3,76(sp)
   43f30:	d8c00615 	stw	r3,24(sp)
   43f34:	003ccb06 	br	43264 <_dtoa_r+0x91c>
   43f38:	d8c01317 	ldw	r3,76(sp)
   43f3c:	d8c00615 	stw	r3,24(sp)
   43f40:	003c2206 	br	42fcc <_dtoa_r+0x684>
   43f44:	20fd3826 	beq	r4,r3,43428 <_dtoa_r+0xae0>
   43f48:	00c00f04 	movi	r3,60
   43f4c:	1885c83a 	sub	r2,r3,r2
   43f50:	003da906 	br	435f8 <_dtoa_r+0xcb0>
   43f54:	000b883a 	mov	r5,zero
   43f58:	003b5406 	br	42cac <_dtoa_r+0x364>
   43f5c:	04c00044 	movi	r19,1
   43f60:	003b3b06 	br	42c50 <_dtoa_r+0x308>

00043f64 <_fflush_r>:
   43f64:	defffb04 	addi	sp,sp,-20
   43f68:	dcc00315 	stw	r19,12(sp)
   43f6c:	dc400115 	stw	r17,4(sp)
   43f70:	dfc00415 	stw	ra,16(sp)
   43f74:	dc800215 	stw	r18,8(sp)
   43f78:	dc000015 	stw	r16,0(sp)
   43f7c:	2027883a 	mov	r19,r4
   43f80:	2823883a 	mov	r17,r5
   43f84:	20000226 	beq	r4,zero,43f90 <_fflush_r+0x2c>
   43f88:	20800e17 	ldw	r2,56(r4)
   43f8c:	10005726 	beq	r2,zero,440ec <_fflush_r+0x188>
   43f90:	8880030b 	ldhu	r2,12(r17)
   43f94:	10c0020c 	andi	r3,r2,8
   43f98:	18ffffcc 	andi	r3,r3,65535
   43f9c:	18e0001c 	xori	r3,r3,32768
   43fa0:	18e00004 	addi	r3,r3,-32768
   43fa4:	1800311e 	bne	r3,zero,4406c <_fflush_r+0x108>
   43fa8:	89000117 	ldw	r4,4(r17)
   43fac:	10c20014 	ori	r3,r2,2048
   43fb0:	88c0030d 	sth	r3,12(r17)
   43fb4:	180b883a 	mov	r5,r3
   43fb8:	0100520e 	bge	zero,r4,44104 <_fflush_r+0x1a0>
   43fbc:	88c00a17 	ldw	r3,40(r17)
   43fc0:	18002226 	beq	r3,zero,4404c <_fflush_r+0xe8>
   43fc4:	1084000c 	andi	r2,r2,4096
   43fc8:	10bfffcc 	andi	r2,r2,65535
   43fcc:	10a0001c 	xori	r2,r2,32768
   43fd0:	10a00004 	addi	r2,r2,-32768
   43fd4:	10004e26 	beq	r2,zero,44110 <_fflush_r+0x1ac>
   43fd8:	8c001417 	ldw	r16,80(r17)
   43fdc:	2940010c 	andi	r5,r5,4
   43fe0:	297fffcc 	andi	r5,r5,65535
   43fe4:	2960001c 	xori	r5,r5,32768
   43fe8:	29600004 	addi	r5,r5,-32768
   43fec:	28000626 	beq	r5,zero,44008 <_fflush_r+0xa4>
   43ff0:	89000117 	ldw	r4,4(r17)
   43ff4:	88800c17 	ldw	r2,48(r17)
   43ff8:	8121c83a 	sub	r16,r16,r4
   43ffc:	10000226 	beq	r2,zero,44008 <_fflush_r+0xa4>
   44000:	88800f17 	ldw	r2,60(r17)
   44004:	80a1c83a 	sub	r16,r16,r2
   44008:	89400717 	ldw	r5,28(r17)
   4400c:	9809883a 	mov	r4,r19
   44010:	800d883a 	mov	r6,r16
   44014:	000f883a 	mov	r7,zero
   44018:	183ee83a 	callr	r3
   4401c:	8080281e 	bne	r16,r2,440c0 <_fflush_r+0x15c>
   44020:	8880030b 	ldhu	r2,12(r17)
   44024:	88c00417 	ldw	r3,16(r17)
   44028:	88000115 	stw	zero,4(r17)
   4402c:	113dffcc 	andi	r4,r2,63487
   44030:	1084000c 	andi	r2,r2,4096
   44034:	10bfffcc 	andi	r2,r2,65535
   44038:	10a0001c 	xori	r2,r2,32768
   4403c:	8900030d 	sth	r4,12(r17)
   44040:	88c00015 	stw	r3,0(r17)
   44044:	10a00004 	addi	r2,r2,-32768
   44048:	10002c1e 	bne	r2,zero,440fc <_fflush_r+0x198>
   4404c:	0005883a 	mov	r2,zero
   44050:	dfc00417 	ldw	ra,16(sp)
   44054:	dcc00317 	ldw	r19,12(sp)
   44058:	dc800217 	ldw	r18,8(sp)
   4405c:	dc400117 	ldw	r17,4(sp)
   44060:	dc000017 	ldw	r16,0(sp)
   44064:	dec00504 	addi	sp,sp,20
   44068:	f800283a 	ret
   4406c:	8c800417 	ldw	r18,16(r17)
   44070:	903ff626 	beq	r18,zero,4404c <_fflush_r+0xe8>
   44074:	8c000017 	ldw	r16,0(r17)
   44078:	108000cc 	andi	r2,r2,3
   4407c:	8c800015 	stw	r18,0(r17)
   44080:	84a1c83a 	sub	r16,r16,r18
   44084:	10001b1e 	bne	r2,zero,440f4 <_fflush_r+0x190>
   44088:	88800517 	ldw	r2,20(r17)
   4408c:	88800215 	stw	r2,8(r17)
   44090:	04000316 	blt	zero,r16,440a0 <_fflush_r+0x13c>
   44094:	003fed06 	br	4404c <_fflush_r+0xe8>
   44098:	90a5883a 	add	r18,r18,r2
   4409c:	043feb0e 	bge	zero,r16,4404c <_fflush_r+0xe8>
   440a0:	88800917 	ldw	r2,36(r17)
   440a4:	89400717 	ldw	r5,28(r17)
   440a8:	800f883a 	mov	r7,r16
   440ac:	900d883a 	mov	r6,r18
   440b0:	9809883a 	mov	r4,r19
   440b4:	103ee83a 	callr	r2
   440b8:	80a1c83a 	sub	r16,r16,r2
   440bc:	00bff616 	blt	zero,r2,44098 <_fflush_r+0x134>
   440c0:	88c0030b 	ldhu	r3,12(r17)
   440c4:	00bfffc4 	movi	r2,-1
   440c8:	18c01014 	ori	r3,r3,64
   440cc:	88c0030d 	sth	r3,12(r17)
   440d0:	dfc00417 	ldw	ra,16(sp)
   440d4:	dcc00317 	ldw	r19,12(sp)
   440d8:	dc800217 	ldw	r18,8(sp)
   440dc:	dc400117 	ldw	r17,4(sp)
   440e0:	dc000017 	ldw	r16,0(sp)
   440e4:	dec00504 	addi	sp,sp,20
   440e8:	f800283a 	ret
   440ec:	00442200 	call	44220 <__sinit>
   440f0:	003fa706 	br	43f90 <_fflush_r+0x2c>
   440f4:	0005883a 	mov	r2,zero
   440f8:	003fe406 	br	4408c <_fflush_r+0x128>
   440fc:	8c001415 	stw	r16,80(r17)
   44100:	003fd206 	br	4404c <_fflush_r+0xe8>
   44104:	88c00f17 	ldw	r3,60(r17)
   44108:	00ffac16 	blt	zero,r3,43fbc <_fflush_r+0x58>
   4410c:	003fcf06 	br	4404c <_fflush_r+0xe8>
   44110:	89400717 	ldw	r5,28(r17)
   44114:	9809883a 	mov	r4,r19
   44118:	000d883a 	mov	r6,zero
   4411c:	01c00044 	movi	r7,1
   44120:	183ee83a 	callr	r3
   44124:	1021883a 	mov	r16,r2
   44128:	00bfffc4 	movi	r2,-1
   4412c:	80800326 	beq	r16,r2,4413c <_fflush_r+0x1d8>
   44130:	8940030b 	ldhu	r5,12(r17)
   44134:	88c00a17 	ldw	r3,40(r17)
   44138:	003fa806 	br	43fdc <_fflush_r+0x78>
   4413c:	98c00017 	ldw	r3,0(r19)
   44140:	00800744 	movi	r2,29
   44144:	18bfde1e 	bne	r3,r2,440c0 <_fflush_r+0x15c>
   44148:	003fc006 	br	4404c <_fflush_r+0xe8>

0004414c <fflush>:
   4414c:	200b883a 	mov	r5,r4
   44150:	20000426 	beq	r4,zero,44164 <fflush+0x18>
   44154:	00800074 	movhi	r2,1
   44158:	10878904 	addi	r2,r2,7716
   4415c:	11000017 	ldw	r4,0(r2)
   44160:	0043f641 	jmpi	43f64 <_fflush_r>
   44164:	00800074 	movhi	r2,1
   44168:	10878804 	addi	r2,r2,7712
   4416c:	11000017 	ldw	r4,0(r2)
   44170:	01400134 	movhi	r5,4
   44174:	294fd904 	addi	r5,r5,16228
   44178:	0044e001 	jmpi	44e00 <_fwalk_reent>

0004417c <__fp_lock>:
   4417c:	0005883a 	mov	r2,zero
   44180:	f800283a 	ret

00044184 <__fp_unlock>:
   44184:	0005883a 	mov	r2,zero
   44188:	f800283a 	ret

0004418c <_cleanup_r>:
   4418c:	01400134 	movhi	r5,4
   44190:	295e4c04 	addi	r5,r5,31024
   44194:	0044d581 	jmpi	44d58 <_fwalk>

00044198 <__sfmoreglue>:
   44198:	defffc04 	addi	sp,sp,-16
   4419c:	dc800215 	stw	r18,8(sp)
   441a0:	2825883a 	mov	r18,r5
   441a4:	dc000015 	stw	r16,0(sp)
   441a8:	01401704 	movi	r5,92
   441ac:	2021883a 	mov	r16,r4
   441b0:	9009883a 	mov	r4,r18
   441b4:	dfc00315 	stw	ra,12(sp)
   441b8:	dc400115 	stw	r17,4(sp)
   441bc:	00495d00 	call	495d0 <__mulsi3>
   441c0:	8009883a 	mov	r4,r16
   441c4:	11400304 	addi	r5,r2,12
   441c8:	1023883a 	mov	r17,r2
   441cc:	004513c0 	call	4513c <_malloc_r>
   441d0:	1021883a 	mov	r16,r2
   441d4:	10000726 	beq	r2,zero,441f4 <__sfmoreglue+0x5c>
   441d8:	11000304 	addi	r4,r2,12
   441dc:	10000015 	stw	zero,0(r2)
   441e0:	14800115 	stw	r18,4(r2)
   441e4:	11000215 	stw	r4,8(r2)
   441e8:	000b883a 	mov	r5,zero
   441ec:	880d883a 	mov	r6,r17
   441f0:	0045c840 	call	45c84 <memset>
   441f4:	8005883a 	mov	r2,r16
   441f8:	dfc00317 	ldw	ra,12(sp)
   441fc:	dc800217 	ldw	r18,8(sp)
   44200:	dc400117 	ldw	r17,4(sp)
   44204:	dc000017 	ldw	r16,0(sp)
   44208:	dec00404 	addi	sp,sp,16
   4420c:	f800283a 	ret

00044210 <_cleanup>:
   44210:	00800074 	movhi	r2,1
   44214:	10878804 	addi	r2,r2,7712
   44218:	11000017 	ldw	r4,0(r2)
   4421c:	004418c1 	jmpi	4418c <_cleanup_r>

00044220 <__sinit>:
   44220:	20800e17 	ldw	r2,56(r4)
   44224:	1000401e 	bne	r2,zero,44328 <__sinit+0x108>
   44228:	21400117 	ldw	r5,4(r4)
   4422c:	01800134 	movhi	r6,4
   44230:	31906304 	addi	r6,r6,16780
   44234:	20c00217 	ldw	r3,8(r4)
   44238:	21800f15 	stw	r6,60(r4)
   4423c:	2080bb04 	addi	r2,r4,748
   44240:	02400044 	movi	r9,1
   44244:	018000c4 	movi	r6,3
   44248:	2180b915 	stw	r6,740(r4)
   4424c:	2080ba15 	stw	r2,744(r4)
   44250:	22400e15 	stw	r9,56(r4)
   44254:	20800317 	ldw	r2,12(r4)
   44258:	2000b815 	stw	zero,736(r4)
   4425c:	02000134 	movhi	r8,4
   44260:	421d1d04 	addi	r8,r8,29812
   44264:	01c00134 	movhi	r7,4
   44268:	39dd3204 	addi	r7,r7,29896
   4426c:	01800134 	movhi	r6,4
   44270:	319d5404 	addi	r6,r6,30032
   44274:	01000134 	movhi	r4,4
   44278:	211d6b04 	addi	r4,r4,30124
   4427c:	02800104 	movi	r10,4
   44280:	28000015 	stw	zero,0(r5)
   44284:	28000115 	stw	zero,4(r5)
   44288:	28000215 	stw	zero,8(r5)
   4428c:	2a80030d 	sth	r10,12(r5)
   44290:	2800038d 	sth	zero,14(r5)
   44294:	28000415 	stw	zero,16(r5)
   44298:	28000515 	stw	zero,20(r5)
   4429c:	28000615 	stw	zero,24(r5)
   442a0:	29400715 	stw	r5,28(r5)
   442a4:	2a000815 	stw	r8,32(r5)
   442a8:	29c00915 	stw	r7,36(r5)
   442ac:	29800a15 	stw	r6,40(r5)
   442b0:	29000b15 	stw	r4,44(r5)
   442b4:	01400284 	movi	r5,10
   442b8:	18000015 	stw	zero,0(r3)
   442bc:	18000115 	stw	zero,4(r3)
   442c0:	18000215 	stw	zero,8(r3)
   442c4:	1940030d 	sth	r5,12(r3)
   442c8:	1a40038d 	sth	r9,14(r3)
   442cc:	18000415 	stw	zero,16(r3)
   442d0:	18000515 	stw	zero,20(r3)
   442d4:	18000615 	stw	zero,24(r3)
   442d8:	18c00715 	stw	r3,28(r3)
   442dc:	1a000815 	stw	r8,32(r3)
   442e0:	19c00915 	stw	r7,36(r3)
   442e4:	19800a15 	stw	r6,40(r3)
   442e8:	19000b15 	stw	r4,44(r3)
   442ec:	00c00484 	movi	r3,18
   442f0:	10c0030d 	sth	r3,12(r2)
   442f4:	00c00084 	movi	r3,2
   442f8:	10000015 	stw	zero,0(r2)
   442fc:	10000115 	stw	zero,4(r2)
   44300:	10000215 	stw	zero,8(r2)
   44304:	10c0038d 	sth	r3,14(r2)
   44308:	10000415 	stw	zero,16(r2)
   4430c:	10000515 	stw	zero,20(r2)
   44310:	10000615 	stw	zero,24(r2)
   44314:	10800715 	stw	r2,28(r2)
   44318:	12000815 	stw	r8,32(r2)
   4431c:	11c00915 	stw	r7,36(r2)
   44320:	11800a15 	stw	r6,40(r2)
   44324:	11000b15 	stw	r4,44(r2)
   44328:	f800283a 	ret

0004432c <__sfp>:
   4432c:	defffc04 	addi	sp,sp,-16
   44330:	00800074 	movhi	r2,1
   44334:	10878804 	addi	r2,r2,7712
   44338:	dc400115 	stw	r17,4(sp)
   4433c:	14400017 	ldw	r17,0(r2)
   44340:	dc800215 	stw	r18,8(sp)
   44344:	dfc00315 	stw	ra,12(sp)
   44348:	88800e17 	ldw	r2,56(r17)
   4434c:	dc000015 	stw	r16,0(sp)
   44350:	2025883a 	mov	r18,r4
   44354:	10002826 	beq	r2,zero,443f8 <__sfp+0xcc>
   44358:	8c40b804 	addi	r17,r17,736
   4435c:	043fffc4 	movi	r16,-1
   44360:	89400117 	ldw	r5,4(r17)
   44364:	88800217 	ldw	r2,8(r17)
   44368:	297fffc4 	addi	r5,r5,-1
   4436c:	28000a16 	blt	r5,zero,44398 <__sfp+0x6c>
   44370:	10c0030f 	ldh	r3,12(r2)
   44374:	18000c26 	beq	r3,zero,443a8 <__sfp+0x7c>
   44378:	10c01a04 	addi	r3,r2,104
   4437c:	00000206 	br	44388 <__sfp+0x5c>
   44380:	19bfe90f 	ldh	r6,-92(r3)
   44384:	30000826 	beq	r6,zero,443a8 <__sfp+0x7c>
   44388:	297fffc4 	addi	r5,r5,-1
   4438c:	18bffd04 	addi	r2,r3,-12
   44390:	18c01704 	addi	r3,r3,92
   44394:	2c3ffa1e 	bne	r5,r16,44380 <__sfp+0x54>
   44398:	88800017 	ldw	r2,0(r17)
   4439c:	10001926 	beq	r2,zero,44404 <__sfp+0xd8>
   443a0:	1023883a 	mov	r17,r2
   443a4:	003fee06 	br	44360 <__sfp+0x34>
   443a8:	00ffffc4 	movi	r3,-1
   443ac:	10c0038d 	sth	r3,14(r2)
   443b0:	00c00044 	movi	r3,1
   443b4:	10c0030d 	sth	r3,12(r2)
   443b8:	10000015 	stw	zero,0(r2)
   443bc:	10000215 	stw	zero,8(r2)
   443c0:	10000115 	stw	zero,4(r2)
   443c4:	10000415 	stw	zero,16(r2)
   443c8:	10000515 	stw	zero,20(r2)
   443cc:	10000615 	stw	zero,24(r2)
   443d0:	10000c15 	stw	zero,48(r2)
   443d4:	10000d15 	stw	zero,52(r2)
   443d8:	10001115 	stw	zero,68(r2)
   443dc:	10001215 	stw	zero,72(r2)
   443e0:	dfc00317 	ldw	ra,12(sp)
   443e4:	dc800217 	ldw	r18,8(sp)
   443e8:	dc400117 	ldw	r17,4(sp)
   443ec:	dc000017 	ldw	r16,0(sp)
   443f0:	dec00404 	addi	sp,sp,16
   443f4:	f800283a 	ret
   443f8:	8809883a 	mov	r4,r17
   443fc:	00442200 	call	44220 <__sinit>
   44400:	003fd506 	br	44358 <__sfp+0x2c>
   44404:	9009883a 	mov	r4,r18
   44408:	01400104 	movi	r5,4
   4440c:	00441980 	call	44198 <__sfmoreglue>
   44410:	88800015 	stw	r2,0(r17)
   44414:	103fe21e 	bne	r2,zero,443a0 <__sfp+0x74>
   44418:	00800304 	movi	r2,12
   4441c:	90800015 	stw	r2,0(r18)
   44420:	0005883a 	mov	r2,zero
   44424:	003fee06 	br	443e0 <__sfp+0xb4>

00044428 <__sfp_lock_acquire>:
   44428:	f800283a 	ret

0004442c <__sfp_lock_release>:
   4442c:	f800283a 	ret

00044430 <__sinit_lock_acquire>:
   44430:	f800283a 	ret

00044434 <__sinit_lock_release>:
   44434:	f800283a 	ret

00044438 <__fp_lock_all>:
   44438:	00800074 	movhi	r2,1
   4443c:	10878904 	addi	r2,r2,7716
   44440:	11000017 	ldw	r4,0(r2)
   44444:	01400134 	movhi	r5,4
   44448:	29505f04 	addi	r5,r5,16764
   4444c:	0044d581 	jmpi	44d58 <_fwalk>

00044450 <__fp_unlock_all>:
   44450:	00800074 	movhi	r2,1
   44454:	10878904 	addi	r2,r2,7716
   44458:	11000017 	ldw	r4,0(r2)
   4445c:	01400134 	movhi	r5,4
   44460:	29506104 	addi	r5,r5,16772
   44464:	0044d581 	jmpi	44d58 <_fwalk>

00044468 <_malloc_trim_r>:
   44468:	defffb04 	addi	sp,sp,-20
   4446c:	dcc00315 	stw	r19,12(sp)
   44470:	dc800215 	stw	r18,8(sp)
   44474:	dc400115 	stw	r17,4(sp)
   44478:	dc000015 	stw	r16,0(sp)
   4447c:	2827883a 	mov	r19,r5
   44480:	dfc00415 	stw	ra,16(sp)
   44484:	04400074 	movhi	r17,1
   44488:	8c420404 	addi	r17,r17,2064
   4448c:	2021883a 	mov	r16,r4
   44490:	004a1f80 	call	4a1f8 <__malloc_lock>
   44494:	88800217 	ldw	r2,8(r17)
   44498:	14800117 	ldw	r18,4(r2)
   4449c:	00bfff04 	movi	r2,-4
   444a0:	90a4703a 	and	r18,r18,r2
   444a4:	9083fbc4 	addi	r2,r18,4079
   444a8:	14e7c83a 	sub	r19,r2,r19
   444ac:	9826d33a 	srli	r19,r19,12
   444b0:	0083ffc4 	movi	r2,4095
   444b4:	9cffffc4 	addi	r19,r19,-1
   444b8:	9826933a 	slli	r19,r19,12
   444bc:	14c0060e 	bge	r2,r19,444d8 <_malloc_trim_r+0x70>
   444c0:	8009883a 	mov	r4,r16
   444c4:	000b883a 	mov	r5,zero
   444c8:	00474100 	call	47410 <_sbrk_r>
   444cc:	88c00217 	ldw	r3,8(r17)
   444d0:	1c87883a 	add	r3,r3,r18
   444d4:	10c00a26 	beq	r2,r3,44500 <_malloc_trim_r+0x98>
   444d8:	8009883a 	mov	r4,r16
   444dc:	004a2180 	call	4a218 <__malloc_unlock>
   444e0:	0005883a 	mov	r2,zero
   444e4:	dfc00417 	ldw	ra,16(sp)
   444e8:	dcc00317 	ldw	r19,12(sp)
   444ec:	dc800217 	ldw	r18,8(sp)
   444f0:	dc400117 	ldw	r17,4(sp)
   444f4:	dc000017 	ldw	r16,0(sp)
   444f8:	dec00504 	addi	sp,sp,20
   444fc:	f800283a 	ret
   44500:	8009883a 	mov	r4,r16
   44504:	04cbc83a 	sub	r5,zero,r19
   44508:	00474100 	call	47410 <_sbrk_r>
   4450c:	00ffffc4 	movi	r3,-1
   44510:	10c01326 	beq	r2,r3,44560 <_malloc_trim_r+0xf8>
   44514:	00800074 	movhi	r2,1
   44518:	1087a904 	addi	r2,r2,7844
   4451c:	11000017 	ldw	r4,0(r2)
   44520:	88c00217 	ldw	r3,8(r17)
   44524:	94e5c83a 	sub	r18,r18,r19
   44528:	94800054 	ori	r18,r18,1
   4452c:	24e7c83a 	sub	r19,r4,r19
   44530:	1c800115 	stw	r18,4(r3)
   44534:	8009883a 	mov	r4,r16
   44538:	14c00015 	stw	r19,0(r2)
   4453c:	004a2180 	call	4a218 <__malloc_unlock>
   44540:	00800044 	movi	r2,1
   44544:	dfc00417 	ldw	ra,16(sp)
   44548:	dcc00317 	ldw	r19,12(sp)
   4454c:	dc800217 	ldw	r18,8(sp)
   44550:	dc400117 	ldw	r17,4(sp)
   44554:	dc000017 	ldw	r16,0(sp)
   44558:	dec00504 	addi	sp,sp,20
   4455c:	f800283a 	ret
   44560:	8009883a 	mov	r4,r16
   44564:	000b883a 	mov	r5,zero
   44568:	00474100 	call	47410 <_sbrk_r>
   4456c:	88c00217 	ldw	r3,8(r17)
   44570:	014003c4 	movi	r5,15
   44574:	10c9c83a 	sub	r4,r2,r3
   44578:	293fd70e 	bge	r5,r4,444d8 <_malloc_trim_r+0x70>
   4457c:	01400074 	movhi	r5,1
   44580:	29478b04 	addi	r5,r5,7724
   44584:	29400017 	ldw	r5,0(r5)
   44588:	21000054 	ori	r4,r4,1
   4458c:	19000115 	stw	r4,4(r3)
   44590:	1145c83a 	sub	r2,r2,r5
   44594:	01400074 	movhi	r5,1
   44598:	2947a904 	addi	r5,r5,7844
   4459c:	28800015 	stw	r2,0(r5)
   445a0:	003fcd06 	br	444d8 <_malloc_trim_r+0x70>

000445a4 <_free_r>:
   445a4:	defffd04 	addi	sp,sp,-12
   445a8:	dc400115 	stw	r17,4(sp)
   445ac:	dc000015 	stw	r16,0(sp)
   445b0:	dfc00215 	stw	ra,8(sp)
   445b4:	2821883a 	mov	r16,r5
   445b8:	2023883a 	mov	r17,r4
   445bc:	28004b26 	beq	r5,zero,446ec <_free_r+0x148>
   445c0:	004a1f80 	call	4a1f8 <__malloc_lock>
   445c4:	823fff17 	ldw	r8,-4(r16)
   445c8:	00bfff84 	movi	r2,-2
   445cc:	81bffe04 	addi	r6,r16,-8
   445d0:	4084703a 	and	r2,r8,r2
   445d4:	3087883a 	add	r3,r6,r2
   445d8:	01400074 	movhi	r5,1
   445dc:	29420404 	addi	r5,r5,2064
   445e0:	1a400117 	ldw	r9,4(r3)
   445e4:	29000217 	ldw	r4,8(r5)
   445e8:	01ffff04 	movi	r7,-4
   445ec:	49ce703a 	and	r7,r9,r7
   445f0:	20c06526 	beq	r4,r3,44788 <_free_r+0x1e4>
   445f4:	19c00115 	stw	r7,4(r3)
   445f8:	4200004c 	andi	r8,r8,1
   445fc:	40003026 	beq	r8,zero,446c0 <_free_r+0x11c>
   44600:	0009883a 	mov	r4,zero
   44604:	19d1883a 	add	r8,r3,r7
   44608:	42000117 	ldw	r8,4(r8)
   4460c:	4200004c 	andi	r8,r8,1
   44610:	4000061e 	bne	r8,zero,4462c <_free_r+0x88>
   44614:	11c5883a 	add	r2,r2,r7
   44618:	19c00217 	ldw	r7,8(r3)
   4461c:	20004e26 	beq	r4,zero,44758 <_free_r+0x1b4>
   44620:	18c00317 	ldw	r3,12(r3)
   44624:	38c00315 	stw	r3,12(r7)
   44628:	19c00215 	stw	r7,8(r3)
   4462c:	11c00054 	ori	r7,r2,1
   44630:	3087883a 	add	r3,r6,r2
   44634:	31c00115 	stw	r7,4(r6)
   44638:	18800015 	stw	r2,0(r3)
   4463c:	20001a1e 	bne	r4,zero,446a8 <_free_r+0x104>
   44640:	00c07fc4 	movi	r3,511
   44644:	18802e2e 	bgeu	r3,r2,44700 <_free_r+0x15c>
   44648:	1006d27a 	srli	r3,r2,9
   4464c:	01000104 	movi	r4,4
   44650:	20c06636 	bltu	r4,r3,447ec <_free_r+0x248>
   44654:	1008d1ba 	srli	r4,r2,6
   44658:	21000e04 	addi	r4,r4,56
   4465c:	210f883a 	add	r7,r4,r4
   44660:	39cf883a 	add	r7,r7,r7
   44664:	39cf883a 	add	r7,r7,r7
   44668:	29cf883a 	add	r7,r5,r7
   4466c:	38c00217 	ldw	r3,8(r7)
   44670:	01400074 	movhi	r5,1
   44674:	29420404 	addi	r5,r5,2064
   44678:	19c06126 	beq	r3,r7,44800 <_free_r+0x25c>
   4467c:	013fff04 	movi	r4,-4
   44680:	19400117 	ldw	r5,4(r3)
   44684:	290a703a 	and	r5,r5,r4
   44688:	1140022e 	bgeu	r2,r5,44694 <_free_r+0xf0>
   4468c:	18c00217 	ldw	r3,8(r3)
   44690:	38fffb1e 	bne	r7,r3,44680 <_free_r+0xdc>
   44694:	18800317 	ldw	r2,12(r3)
   44698:	30800315 	stw	r2,12(r6)
   4469c:	30c00215 	stw	r3,8(r6)
   446a0:	11800215 	stw	r6,8(r2)
   446a4:	19800315 	stw	r6,12(r3)
   446a8:	8809883a 	mov	r4,r17
   446ac:	dfc00217 	ldw	ra,8(sp)
   446b0:	dc400117 	ldw	r17,4(sp)
   446b4:	dc000017 	ldw	r16,0(sp)
   446b8:	dec00304 	addi	sp,sp,12
   446bc:	004a2181 	jmpi	4a218 <__malloc_unlock>
   446c0:	813ffe17 	ldw	r4,-8(r16)
   446c4:	2a400204 	addi	r9,r5,8
   446c8:	310dc83a 	sub	r6,r6,r4
   446cc:	32000217 	ldw	r8,8(r6)
   446d0:	1105883a 	add	r2,r2,r4
   446d4:	42404326 	beq	r8,r9,447e4 <_free_r+0x240>
   446d8:	32400317 	ldw	r9,12(r6)
   446dc:	0009883a 	mov	r4,zero
   446e0:	42400315 	stw	r9,12(r8)
   446e4:	4a000215 	stw	r8,8(r9)
   446e8:	003fc606 	br	44604 <_free_r+0x60>
   446ec:	dfc00217 	ldw	ra,8(sp)
   446f0:	dc400117 	ldw	r17,4(sp)
   446f4:	dc000017 	ldw	r16,0(sp)
   446f8:	dec00304 	addi	sp,sp,12
   446fc:	f800283a 	ret
   44700:	1004d0fa 	srli	r2,r2,3
   44704:	02000044 	movi	r8,1
   44708:	29c00117 	ldw	r7,4(r5)
   4470c:	1087883a 	add	r3,r2,r2
   44710:	18c7883a 	add	r3,r3,r3
   44714:	1005d0ba 	srai	r2,r2,2
   44718:	18c7883a 	add	r3,r3,r3
   4471c:	28c7883a 	add	r3,r5,r3
   44720:	19000217 	ldw	r4,8(r3)
   44724:	4084983a 	sll	r2,r8,r2
   44728:	30c00315 	stw	r3,12(r6)
   4472c:	31000215 	stw	r4,8(r6)
   44730:	11c4b03a 	or	r2,r2,r7
   44734:	21800315 	stw	r6,12(r4)
   44738:	8809883a 	mov	r4,r17
   4473c:	28800115 	stw	r2,4(r5)
   44740:	19800215 	stw	r6,8(r3)
   44744:	dfc00217 	ldw	ra,8(sp)
   44748:	dc400117 	ldw	r17,4(sp)
   4474c:	dc000017 	ldw	r16,0(sp)
   44750:	dec00304 	addi	sp,sp,12
   44754:	004a2181 	jmpi	4a218 <__malloc_unlock>
   44758:	02000074 	movhi	r8,1
   4475c:	42020604 	addi	r8,r8,2072
   44760:	3a3faf1e 	bne	r7,r8,44620 <_free_r+0x7c>
   44764:	29800515 	stw	r6,20(r5)
   44768:	29800415 	stw	r6,16(r5)
   4476c:	11000054 	ori	r4,r2,1
   44770:	3087883a 	add	r3,r6,r2
   44774:	31c00315 	stw	r7,12(r6)
   44778:	31c00215 	stw	r7,8(r6)
   4477c:	31000115 	stw	r4,4(r6)
   44780:	18800015 	stw	r2,0(r3)
   44784:	003fc806 	br	446a8 <_free_r+0x104>
   44788:	4200004c 	andi	r8,r8,1
   4478c:	3885883a 	add	r2,r7,r2
   44790:	4000071e 	bne	r8,zero,447b0 <_free_r+0x20c>
   44794:	81fffe17 	ldw	r7,-8(r16)
   44798:	31cdc83a 	sub	r6,r6,r7
   4479c:	30c00317 	ldw	r3,12(r6)
   447a0:	31000217 	ldw	r4,8(r6)
   447a4:	11c5883a 	add	r2,r2,r7
   447a8:	20c00315 	stw	r3,12(r4)
   447ac:	19000215 	stw	r4,8(r3)
   447b0:	00c00074 	movhi	r3,1
   447b4:	18c78c04 	addi	r3,r3,7728
   447b8:	18c00017 	ldw	r3,0(r3)
   447bc:	11000054 	ori	r4,r2,1
   447c0:	31000115 	stw	r4,4(r6)
   447c4:	29800215 	stw	r6,8(r5)
   447c8:	10ffb736 	bltu	r2,r3,446a8 <_free_r+0x104>
   447cc:	00800074 	movhi	r2,1
   447d0:	1087a104 	addi	r2,r2,7812
   447d4:	11400017 	ldw	r5,0(r2)
   447d8:	8809883a 	mov	r4,r17
   447dc:	00444680 	call	44468 <_malloc_trim_r>
   447e0:	003fb106 	br	446a8 <_free_r+0x104>
   447e4:	01000044 	movi	r4,1
   447e8:	003f8606 	br	44604 <_free_r+0x60>
   447ec:	01000504 	movi	r4,20
   447f0:	20c00b36 	bltu	r4,r3,44820 <_free_r+0x27c>
   447f4:	190016c4 	addi	r4,r3,91
   447f8:	210f883a 	add	r7,r4,r4
   447fc:	003f9806 	br	44660 <_free_r+0xbc>
   44800:	2009d0ba 	srai	r4,r4,2
   44804:	00800044 	movi	r2,1
   44808:	29c00117 	ldw	r7,4(r5)
   4480c:	1108983a 	sll	r4,r2,r4
   44810:	1805883a 	mov	r2,r3
   44814:	21c8b03a 	or	r4,r4,r7
   44818:	29000115 	stw	r4,4(r5)
   4481c:	003f9e06 	br	44698 <_free_r+0xf4>
   44820:	01001504 	movi	r4,84
   44824:	20c00436 	bltu	r4,r3,44838 <_free_r+0x294>
   44828:	1008d33a 	srli	r4,r2,12
   4482c:	21001b84 	addi	r4,r4,110
   44830:	210f883a 	add	r7,r4,r4
   44834:	003f8a06 	br	44660 <_free_r+0xbc>
   44838:	01005504 	movi	r4,340
   4483c:	20c00436 	bltu	r4,r3,44850 <_free_r+0x2ac>
   44840:	1008d3fa 	srli	r4,r2,15
   44844:	21001dc4 	addi	r4,r4,119
   44848:	210f883a 	add	r7,r4,r4
   4484c:	003f8406 	br	44660 <_free_r+0xbc>
   44850:	01015504 	movi	r4,1364
   44854:	20c00436 	bltu	r4,r3,44868 <_free_r+0x2c4>
   44858:	1008d4ba 	srli	r4,r2,18
   4485c:	21001f04 	addi	r4,r4,124
   44860:	210f883a 	add	r7,r4,r4
   44864:	003f7e06 	br	44660 <_free_r+0xbc>
   44868:	01c03f04 	movi	r7,252
   4486c:	01001f84 	movi	r4,126
   44870:	003f7b06 	br	44660 <_free_r+0xbc>

00044874 <__sfvwrite_r>:
   44874:	30800217 	ldw	r2,8(r6)
   44878:	defff504 	addi	sp,sp,-44
   4487c:	dd400615 	stw	r21,24(sp)
   44880:	dd000515 	stw	r20,20(sp)
   44884:	dc000115 	stw	r16,4(sp)
   44888:	dfc00a15 	stw	ra,40(sp)
   4488c:	df000915 	stw	fp,36(sp)
   44890:	ddc00815 	stw	r23,32(sp)
   44894:	dd800715 	stw	r22,28(sp)
   44898:	dcc00415 	stw	r19,16(sp)
   4489c:	dc800315 	stw	r18,12(sp)
   448a0:	dc400215 	stw	r17,8(sp)
   448a4:	3029883a 	mov	r20,r6
   448a8:	202b883a 	mov	r21,r4
   448ac:	2821883a 	mov	r16,r5
   448b0:	10002126 	beq	r2,zero,44938 <__sfvwrite_r+0xc4>
   448b4:	2880030b 	ldhu	r2,12(r5)
   448b8:	10c0020c 	andi	r3,r2,8
   448bc:	18ffffcc 	andi	r3,r3,65535
   448c0:	18e0001c 	xori	r3,r3,32768
   448c4:	18e00004 	addi	r3,r3,-32768
   448c8:	18002826 	beq	r3,zero,4496c <__sfvwrite_r+0xf8>
   448cc:	28c00417 	ldw	r3,16(r5)
   448d0:	18002626 	beq	r3,zero,4496c <__sfvwrite_r+0xf8>
   448d4:	10c0008c 	andi	r3,r2,2
   448d8:	18ffffcc 	andi	r3,r3,65535
   448dc:	18e0001c 	xori	r3,r3,32768
   448e0:	18e00004 	addi	r3,r3,-32768
   448e4:	a4400017 	ldw	r17,0(r20)
   448e8:	18002b26 	beq	r3,zero,44998 <__sfvwrite_r+0x124>
   448ec:	0027883a 	mov	r19,zero
   448f0:	0025883a 	mov	r18,zero
   448f4:	05810004 	movi	r22,1024
   448f8:	980d883a 	mov	r6,r19
   448fc:	a809883a 	mov	r4,r21
   44900:	90004f26 	beq	r18,zero,44a40 <__sfvwrite_r+0x1cc>
   44904:	900f883a 	mov	r7,r18
   44908:	81400717 	ldw	r5,28(r16)
   4490c:	b480012e 	bgeu	r22,r18,44914 <__sfvwrite_r+0xa0>
   44910:	01c10004 	movi	r7,1024
   44914:	80800917 	ldw	r2,36(r16)
   44918:	103ee83a 	callr	r2
   4491c:	0080540e 	bge	zero,r2,44a70 <__sfvwrite_r+0x1fc>
   44920:	a0c00217 	ldw	r3,8(r20)
   44924:	98a7883a 	add	r19,r19,r2
   44928:	90a5c83a 	sub	r18,r18,r2
   4492c:	1885c83a 	sub	r2,r3,r2
   44930:	a0800215 	stw	r2,8(r20)
   44934:	103ff01e 	bne	r2,zero,448f8 <__sfvwrite_r+0x84>
   44938:	0005883a 	mov	r2,zero
   4493c:	dfc00a17 	ldw	ra,40(sp)
   44940:	df000917 	ldw	fp,36(sp)
   44944:	ddc00817 	ldw	r23,32(sp)
   44948:	dd800717 	ldw	r22,28(sp)
   4494c:	dd400617 	ldw	r21,24(sp)
   44950:	dd000517 	ldw	r20,20(sp)
   44954:	dcc00417 	ldw	r19,16(sp)
   44958:	dc800317 	ldw	r18,12(sp)
   4495c:	dc400217 	ldw	r17,8(sp)
   44960:	dc000117 	ldw	r16,4(sp)
   44964:	dec00b04 	addi	sp,sp,44
   44968:	f800283a 	ret
   4496c:	a809883a 	mov	r4,r21
   44970:	800b883a 	mov	r5,r16
   44974:	00425980 	call	42598 <__swsetup_r>
   44978:	1000f01e 	bne	r2,zero,44d3c <__sfvwrite_r+0x4c8>
   4497c:	8080030b 	ldhu	r2,12(r16)
   44980:	a4400017 	ldw	r17,0(r20)
   44984:	10c0008c 	andi	r3,r2,2
   44988:	18ffffcc 	andi	r3,r3,65535
   4498c:	18e0001c 	xori	r3,r3,32768
   44990:	18e00004 	addi	r3,r3,-32768
   44994:	183fd51e 	bne	r3,zero,448ec <__sfvwrite_r+0x78>
   44998:	10c0004c 	andi	r3,r2,1
   4499c:	002d883a 	mov	r22,zero
   449a0:	1800381e 	bne	r3,zero,44a84 <__sfvwrite_r+0x210>
   449a4:	0025883a 	mov	r18,zero
   449a8:	90002126 	beq	r18,zero,44a30 <__sfvwrite_r+0x1bc>
   449ac:	10c0800c 	andi	r3,r2,512
   449b0:	18ffffcc 	andi	r3,r3,65535
   449b4:	18e0001c 	xori	r3,r3,32768
   449b8:	18e00004 	addi	r3,r3,-32768
   449bc:	84c00217 	ldw	r19,8(r16)
   449c0:	18006b26 	beq	r3,zero,44b70 <__sfvwrite_r+0x2fc>
   449c4:	980f883a 	mov	r7,r19
   449c8:	94c08636 	bltu	r18,r19,44be4 <__sfvwrite_r+0x370>
   449cc:	10c1200c 	andi	r3,r2,1152
   449d0:	18009f1e 	bne	r3,zero,44c50 <__sfvwrite_r+0x3dc>
   449d4:	81000017 	ldw	r4,0(r16)
   449d8:	982f883a 	mov	r23,r19
   449dc:	9039883a 	mov	fp,r18
   449e0:	9027883a 	mov	r19,r18
   449e4:	380d883a 	mov	r6,r7
   449e8:	b00b883a 	mov	r5,r22
   449ec:	d9c00015 	stw	r7,0(sp)
   449f0:	0045af80 	call	45af8 <memmove>
   449f4:	d9c00017 	ldw	r7,0(sp)
   449f8:	81000217 	ldw	r4,8(r16)
   449fc:	80800017 	ldw	r2,0(r16)
   44a00:	25efc83a 	sub	r23,r4,r23
   44a04:	11cf883a 	add	r7,r2,r7
   44a08:	85c00215 	stw	r23,8(r16)
   44a0c:	81c00015 	stw	r7,0(r16)
   44a10:	a0800217 	ldw	r2,8(r20)
   44a14:	b72d883a 	add	r22,r22,fp
   44a18:	9725c83a 	sub	r18,r18,fp
   44a1c:	14e7c83a 	sub	r19,r2,r19
   44a20:	a4c00215 	stw	r19,8(r20)
   44a24:	983fc426 	beq	r19,zero,44938 <__sfvwrite_r+0xc4>
   44a28:	8080030b 	ldhu	r2,12(r16)
   44a2c:	903fdf1e 	bne	r18,zero,449ac <__sfvwrite_r+0x138>
   44a30:	8d800017 	ldw	r22,0(r17)
   44a34:	8c800117 	ldw	r18,4(r17)
   44a38:	8c400204 	addi	r17,r17,8
   44a3c:	003fda06 	br	449a8 <__sfvwrite_r+0x134>
   44a40:	8cc00017 	ldw	r19,0(r17)
   44a44:	8c800117 	ldw	r18,4(r17)
   44a48:	8c400204 	addi	r17,r17,8
   44a4c:	003faa06 	br	448f8 <__sfvwrite_r+0x84>
   44a50:	0046db00 	call	46db0 <_realloc_r>
   44a54:	102f883a 	mov	r23,r2
   44a58:	10009f1e 	bne	r2,zero,44cd8 <__sfvwrite_r+0x464>
   44a5c:	81400417 	ldw	r5,16(r16)
   44a60:	a809883a 	mov	r4,r21
   44a64:	00445a40 	call	445a4 <_free_r>
   44a68:	00800304 	movi	r2,12
   44a6c:	a8800015 	stw	r2,0(r21)
   44a70:	80c0030b 	ldhu	r3,12(r16)
   44a74:	00bfffc4 	movi	r2,-1
   44a78:	18c01014 	ori	r3,r3,64
   44a7c:	80c0030d 	sth	r3,12(r16)
   44a80:	003fae06 	br	4493c <__sfvwrite_r+0xc8>
   44a84:	0007883a 	mov	r3,zero
   44a88:	0039883a 	mov	fp,zero
   44a8c:	0025883a 	mov	r18,zero
   44a90:	90001e26 	beq	r18,zero,44b0c <__sfvwrite_r+0x298>
   44a94:	18006526 	beq	r3,zero,44c2c <__sfvwrite_r+0x3b8>
   44a98:	b02f883a 	mov	r23,r22
   44a9c:	9580012e 	bgeu	r18,r22,44aa4 <__sfvwrite_r+0x230>
   44aa0:	902f883a 	mov	r23,r18
   44aa4:	81000017 	ldw	r4,0(r16)
   44aa8:	80800417 	ldw	r2,16(r16)
   44aac:	84c00217 	ldw	r19,8(r16)
   44ab0:	81c00517 	ldw	r7,20(r16)
   44ab4:	1100022e 	bgeu	r2,r4,44ac0 <__sfvwrite_r+0x24c>
   44ab8:	99e7883a 	add	r19,r19,r7
   44abc:	9dc01816 	blt	r19,r23,44b20 <__sfvwrite_r+0x2ac>
   44ac0:	b9c03b16 	blt	r23,r7,44bb0 <__sfvwrite_r+0x33c>
   44ac4:	80800917 	ldw	r2,36(r16)
   44ac8:	81400717 	ldw	r5,28(r16)
   44acc:	a809883a 	mov	r4,r21
   44ad0:	d8c00015 	stw	r3,0(sp)
   44ad4:	e00d883a 	mov	r6,fp
   44ad8:	103ee83a 	callr	r2
   44adc:	1027883a 	mov	r19,r2
   44ae0:	d8c00017 	ldw	r3,0(sp)
   44ae4:	00bfe20e 	bge	zero,r2,44a70 <__sfvwrite_r+0x1fc>
   44ae8:	b4edc83a 	sub	r22,r22,r19
   44aec:	b0001a26 	beq	r22,zero,44b58 <__sfvwrite_r+0x2e4>
   44af0:	a0800217 	ldw	r2,8(r20)
   44af4:	e4f9883a 	add	fp,fp,r19
   44af8:	94e5c83a 	sub	r18,r18,r19
   44afc:	14e7c83a 	sub	r19,r2,r19
   44b00:	a4c00215 	stw	r19,8(r20)
   44b04:	983f8c26 	beq	r19,zero,44938 <__sfvwrite_r+0xc4>
   44b08:	903fe21e 	bne	r18,zero,44a94 <__sfvwrite_r+0x220>
   44b0c:	8f000017 	ldw	fp,0(r17)
   44b10:	8c800117 	ldw	r18,4(r17)
   44b14:	0007883a 	mov	r3,zero
   44b18:	8c400204 	addi	r17,r17,8
   44b1c:	003fdc06 	br	44a90 <__sfvwrite_r+0x21c>
   44b20:	e00b883a 	mov	r5,fp
   44b24:	980d883a 	mov	r6,r19
   44b28:	d8c00015 	stw	r3,0(sp)
   44b2c:	0045af80 	call	45af8 <memmove>
   44b30:	80800017 	ldw	r2,0(r16)
   44b34:	a809883a 	mov	r4,r21
   44b38:	800b883a 	mov	r5,r16
   44b3c:	14c5883a 	add	r2,r2,r19
   44b40:	80800015 	stw	r2,0(r16)
   44b44:	0043f640 	call	43f64 <_fflush_r>
   44b48:	d8c00017 	ldw	r3,0(sp)
   44b4c:	103fc81e 	bne	r2,zero,44a70 <__sfvwrite_r+0x1fc>
   44b50:	b4edc83a 	sub	r22,r22,r19
   44b54:	b03fe61e 	bne	r22,zero,44af0 <__sfvwrite_r+0x27c>
   44b58:	a809883a 	mov	r4,r21
   44b5c:	800b883a 	mov	r5,r16
   44b60:	0043f640 	call	43f64 <_fflush_r>
   44b64:	103fc21e 	bne	r2,zero,44a70 <__sfvwrite_r+0x1fc>
   44b68:	0007883a 	mov	r3,zero
   44b6c:	003fe006 	br	44af0 <__sfvwrite_r+0x27c>
   44b70:	81000017 	ldw	r4,0(r16)
   44b74:	80800417 	ldw	r2,16(r16)
   44b78:	1100022e 	bgeu	r2,r4,44b84 <__sfvwrite_r+0x310>
   44b7c:	9839883a 	mov	fp,r19
   44b80:	9c806036 	bltu	r19,r18,44d04 <__sfvwrite_r+0x490>
   44b84:	81c00517 	ldw	r7,20(r16)
   44b88:	91c01c36 	bltu	r18,r7,44bfc <__sfvwrite_r+0x388>
   44b8c:	80800917 	ldw	r2,36(r16)
   44b90:	81400717 	ldw	r5,28(r16)
   44b94:	a809883a 	mov	r4,r21
   44b98:	b00d883a 	mov	r6,r22
   44b9c:	103ee83a 	callr	r2
   44ba0:	1027883a 	mov	r19,r2
   44ba4:	00bfb20e 	bge	zero,r2,44a70 <__sfvwrite_r+0x1fc>
   44ba8:	1039883a 	mov	fp,r2
   44bac:	003f9806 	br	44a10 <__sfvwrite_r+0x19c>
   44bb0:	b80d883a 	mov	r6,r23
   44bb4:	e00b883a 	mov	r5,fp
   44bb8:	d8c00015 	stw	r3,0(sp)
   44bbc:	0045af80 	call	45af8 <memmove>
   44bc0:	80800217 	ldw	r2,8(r16)
   44bc4:	81000017 	ldw	r4,0(r16)
   44bc8:	b827883a 	mov	r19,r23
   44bcc:	15c5c83a 	sub	r2,r2,r23
   44bd0:	25ef883a 	add	r23,r4,r23
   44bd4:	80800215 	stw	r2,8(r16)
   44bd8:	85c00015 	stw	r23,0(r16)
   44bdc:	d8c00017 	ldw	r3,0(sp)
   44be0:	003fc106 	br	44ae8 <__sfvwrite_r+0x274>
   44be4:	81000017 	ldw	r4,0(r16)
   44be8:	902f883a 	mov	r23,r18
   44bec:	9039883a 	mov	fp,r18
   44bf0:	9027883a 	mov	r19,r18
   44bf4:	900f883a 	mov	r7,r18
   44bf8:	003f7a06 	br	449e4 <__sfvwrite_r+0x170>
   44bfc:	b00b883a 	mov	r5,r22
   44c00:	900d883a 	mov	r6,r18
   44c04:	0045af80 	call	45af8 <memmove>
   44c08:	80c00217 	ldw	r3,8(r16)
   44c0c:	80800017 	ldw	r2,0(r16)
   44c10:	9027883a 	mov	r19,r18
   44c14:	1c87c83a 	sub	r3,r3,r18
   44c18:	1485883a 	add	r2,r2,r18
   44c1c:	80c00215 	stw	r3,8(r16)
   44c20:	80800015 	stw	r2,0(r16)
   44c24:	9039883a 	mov	fp,r18
   44c28:	003f7906 	br	44a10 <__sfvwrite_r+0x19c>
   44c2c:	e009883a 	mov	r4,fp
   44c30:	01400284 	movi	r5,10
   44c34:	900d883a 	mov	r6,r18
   44c38:	00458c00 	call	458c0 <memchr>
   44c3c:	10003c26 	beq	r2,zero,44d30 <__sfvwrite_r+0x4bc>
   44c40:	15800044 	addi	r22,r2,1
   44c44:	b72dc83a 	sub	r22,r22,fp
   44c48:	00c00044 	movi	r3,1
   44c4c:	003f9206 	br	44a98 <__sfvwrite_r+0x224>
   44c50:	81000517 	ldw	r4,20(r16)
   44c54:	81400417 	ldw	r5,16(r16)
   44c58:	80c00017 	ldw	r3,0(r16)
   44c5c:	210d883a 	add	r6,r4,r4
   44c60:	3109883a 	add	r4,r6,r4
   44c64:	2026d7fa 	srli	r19,r4,31
   44c68:	1979c83a 	sub	fp,r3,r5
   44c6c:	e1800044 	addi	r6,fp,1
   44c70:	9909883a 	add	r4,r19,r4
   44c74:	2027d07a 	srai	r19,r4,1
   44c78:	3489883a 	add	r4,r6,r18
   44c7c:	980d883a 	mov	r6,r19
   44c80:	9900022e 	bgeu	r19,r4,44c8c <__sfvwrite_r+0x418>
   44c84:	2027883a 	mov	r19,r4
   44c88:	200d883a 	mov	r6,r4
   44c8c:	1081000c 	andi	r2,r2,1024
   44c90:	10bfffcc 	andi	r2,r2,65535
   44c94:	10a0001c 	xori	r2,r2,32768
   44c98:	10a00004 	addi	r2,r2,-32768
   44c9c:	a809883a 	mov	r4,r21
   44ca0:	103f6b26 	beq	r2,zero,44a50 <__sfvwrite_r+0x1dc>
   44ca4:	300b883a 	mov	r5,r6
   44ca8:	004513c0 	call	4513c <_malloc_r>
   44cac:	102f883a 	mov	r23,r2
   44cb0:	103f6d26 	beq	r2,zero,44a68 <__sfvwrite_r+0x1f4>
   44cb4:	81400417 	ldw	r5,16(r16)
   44cb8:	1009883a 	mov	r4,r2
   44cbc:	e00d883a 	mov	r6,fp
   44cc0:	00459b80 	call	459b8 <memcpy>
   44cc4:	8080030b 	ldhu	r2,12(r16)
   44cc8:	00fedfc4 	movi	r3,-1153
   44ccc:	10c4703a 	and	r2,r2,r3
   44cd0:	10802014 	ori	r2,r2,128
   44cd4:	8080030d 	sth	r2,12(r16)
   44cd8:	bf09883a 	add	r4,r23,fp
   44cdc:	9f07c83a 	sub	r3,r19,fp
   44ce0:	85c00415 	stw	r23,16(r16)
   44ce4:	84c00515 	stw	r19,20(r16)
   44ce8:	81000015 	stw	r4,0(r16)
   44cec:	902f883a 	mov	r23,r18
   44cf0:	80c00215 	stw	r3,8(r16)
   44cf4:	9039883a 	mov	fp,r18
   44cf8:	9027883a 	mov	r19,r18
   44cfc:	900f883a 	mov	r7,r18
   44d00:	003f3806 	br	449e4 <__sfvwrite_r+0x170>
   44d04:	b00b883a 	mov	r5,r22
   44d08:	980d883a 	mov	r6,r19
   44d0c:	0045af80 	call	45af8 <memmove>
   44d10:	80800017 	ldw	r2,0(r16)
   44d14:	a809883a 	mov	r4,r21
   44d18:	800b883a 	mov	r5,r16
   44d1c:	14c5883a 	add	r2,r2,r19
   44d20:	80800015 	stw	r2,0(r16)
   44d24:	0043f640 	call	43f64 <_fflush_r>
   44d28:	103f3926 	beq	r2,zero,44a10 <__sfvwrite_r+0x19c>
   44d2c:	003f5006 	br	44a70 <__sfvwrite_r+0x1fc>
   44d30:	95800044 	addi	r22,r18,1
   44d34:	00c00044 	movi	r3,1
   44d38:	003f5706 	br	44a98 <__sfvwrite_r+0x224>
   44d3c:	80c0030b 	ldhu	r3,12(r16)
   44d40:	00bfffc4 	movi	r2,-1
   44d44:	18c01014 	ori	r3,r3,64
   44d48:	80c0030d 	sth	r3,12(r16)
   44d4c:	00c00244 	movi	r3,9
   44d50:	a8c00015 	stw	r3,0(r21)
   44d54:	003ef906 	br	4493c <__sfvwrite_r+0xc8>

00044d58 <_fwalk>:
   44d58:	defff904 	addi	sp,sp,-28
   44d5c:	dcc00315 	stw	r19,12(sp)
   44d60:	24c0b804 	addi	r19,r4,736
   44d64:	dd400515 	stw	r21,20(sp)
   44d68:	dd000415 	stw	r20,16(sp)
   44d6c:	dfc00615 	stw	ra,24(sp)
   44d70:	dc800215 	stw	r18,8(sp)
   44d74:	dc400115 	stw	r17,4(sp)
   44d78:	dc000015 	stw	r16,0(sp)
   44d7c:	282b883a 	mov	r21,r5
   44d80:	0029883a 	mov	r20,zero
   44d84:	00444280 	call	44428 <__sfp_lock_acquire>
   44d88:	98001226 	beq	r19,zero,44dd4 <_fwalk+0x7c>
   44d8c:	04bfffc4 	movi	r18,-1
   44d90:	9c400117 	ldw	r17,4(r19)
   44d94:	9c000217 	ldw	r16,8(r19)
   44d98:	8c7fffc4 	addi	r17,r17,-1
   44d9c:	88000b16 	blt	r17,zero,44dcc <_fwalk+0x74>
   44da0:	84000304 	addi	r16,r16,12
   44da4:	80c0000f 	ldh	r3,0(r16)
   44da8:	8c7fffc4 	addi	r17,r17,-1
   44dac:	813ffd04 	addi	r4,r16,-12
   44db0:	18000426 	beq	r3,zero,44dc4 <_fwalk+0x6c>
   44db4:	80c0008f 	ldh	r3,2(r16)
   44db8:	1c800226 	beq	r3,r18,44dc4 <_fwalk+0x6c>
   44dbc:	a83ee83a 	callr	r21
   44dc0:	a0a8b03a 	or	r20,r20,r2
   44dc4:	84001704 	addi	r16,r16,92
   44dc8:	8cbff61e 	bne	r17,r18,44da4 <_fwalk+0x4c>
   44dcc:	9cc00017 	ldw	r19,0(r19)
   44dd0:	983fef1e 	bne	r19,zero,44d90 <_fwalk+0x38>
   44dd4:	004442c0 	call	4442c <__sfp_lock_release>
   44dd8:	a005883a 	mov	r2,r20
   44ddc:	dfc00617 	ldw	ra,24(sp)
   44de0:	dd400517 	ldw	r21,20(sp)
   44de4:	dd000417 	ldw	r20,16(sp)
   44de8:	dcc00317 	ldw	r19,12(sp)
   44dec:	dc800217 	ldw	r18,8(sp)
   44df0:	dc400117 	ldw	r17,4(sp)
   44df4:	dc000017 	ldw	r16,0(sp)
   44df8:	dec00704 	addi	sp,sp,28
   44dfc:	f800283a 	ret

00044e00 <_fwalk_reent>:
   44e00:	defff804 	addi	sp,sp,-32
   44e04:	dcc00315 	stw	r19,12(sp)
   44e08:	24c0b804 	addi	r19,r4,736
   44e0c:	dd800615 	stw	r22,24(sp)
   44e10:	dd400515 	stw	r21,20(sp)
   44e14:	dd000415 	stw	r20,16(sp)
   44e18:	dfc00715 	stw	ra,28(sp)
   44e1c:	dc800215 	stw	r18,8(sp)
   44e20:	dc400115 	stw	r17,4(sp)
   44e24:	dc000015 	stw	r16,0(sp)
   44e28:	2029883a 	mov	r20,r4
   44e2c:	282b883a 	mov	r21,r5
   44e30:	002d883a 	mov	r22,zero
   44e34:	00444280 	call	44428 <__sfp_lock_acquire>
   44e38:	98001326 	beq	r19,zero,44e88 <_fwalk_reent+0x88>
   44e3c:	04bfffc4 	movi	r18,-1
   44e40:	9c400117 	ldw	r17,4(r19)
   44e44:	9c000217 	ldw	r16,8(r19)
   44e48:	8c7fffc4 	addi	r17,r17,-1
   44e4c:	88000c16 	blt	r17,zero,44e80 <_fwalk_reent+0x80>
   44e50:	84000304 	addi	r16,r16,12
   44e54:	80c0000f 	ldh	r3,0(r16)
   44e58:	8c7fffc4 	addi	r17,r17,-1
   44e5c:	817ffd04 	addi	r5,r16,-12
   44e60:	18000526 	beq	r3,zero,44e78 <_fwalk_reent+0x78>
   44e64:	80c0008f 	ldh	r3,2(r16)
   44e68:	a009883a 	mov	r4,r20
   44e6c:	1c800226 	beq	r3,r18,44e78 <_fwalk_reent+0x78>
   44e70:	a83ee83a 	callr	r21
   44e74:	b0acb03a 	or	r22,r22,r2
   44e78:	84001704 	addi	r16,r16,92
   44e7c:	8cbff51e 	bne	r17,r18,44e54 <_fwalk_reent+0x54>
   44e80:	9cc00017 	ldw	r19,0(r19)
   44e84:	983fee1e 	bne	r19,zero,44e40 <_fwalk_reent+0x40>
   44e88:	004442c0 	call	4442c <__sfp_lock_release>
   44e8c:	b005883a 	mov	r2,r22
   44e90:	dfc00717 	ldw	ra,28(sp)
   44e94:	dd800617 	ldw	r22,24(sp)
   44e98:	dd400517 	ldw	r21,20(sp)
   44e9c:	dd000417 	ldw	r20,16(sp)
   44ea0:	dcc00317 	ldw	r19,12(sp)
   44ea4:	dc800217 	ldw	r18,8(sp)
   44ea8:	dc400117 	ldw	r17,4(sp)
   44eac:	dc000017 	ldw	r16,0(sp)
   44eb0:	dec00804 	addi	sp,sp,32
   44eb4:	f800283a 	ret

00044eb8 <_setlocale_r>:
   44eb8:	defffc04 	addi	sp,sp,-16
   44ebc:	dc800215 	stw	r18,8(sp)
   44ec0:	dc400115 	stw	r17,4(sp)
   44ec4:	dc000015 	stw	r16,0(sp)
   44ec8:	dfc00315 	stw	ra,12(sp)
   44ecc:	3021883a 	mov	r16,r6
   44ed0:	2023883a 	mov	r17,r4
   44ed4:	2825883a 	mov	r18,r5
   44ed8:	30001626 	beq	r6,zero,44f34 <_setlocale_r+0x7c>
   44edc:	3009883a 	mov	r4,r6
   44ee0:	01400074 	movhi	r5,1
   44ee4:	29405504 	addi	r5,r5,340
   44ee8:	00475b40 	call	475b4 <strcmp>
   44eec:	10000a1e 	bne	r2,zero,44f18 <_setlocale_r+0x60>
   44ef0:	8c800c15 	stw	r18,48(r17)
   44ef4:	8c000d15 	stw	r16,52(r17)
   44ef8:	00800074 	movhi	r2,1
   44efc:	10805504 	addi	r2,r2,340
   44f00:	dfc00317 	ldw	ra,12(sp)
   44f04:	dc800217 	ldw	r18,8(sp)
   44f08:	dc400117 	ldw	r17,4(sp)
   44f0c:	dc000017 	ldw	r16,0(sp)
   44f10:	dec00404 	addi	sp,sp,16
   44f14:	f800283a 	ret
   44f18:	8009883a 	mov	r4,r16
   44f1c:	01400074 	movhi	r5,1
   44f20:	29404004 	addi	r5,r5,256
   44f24:	00475b40 	call	475b4 <strcmp>
   44f28:	103ff126 	beq	r2,zero,44ef0 <_setlocale_r+0x38>
   44f2c:	0005883a 	mov	r2,zero
   44f30:	003ff306 	br	44f00 <_setlocale_r+0x48>
   44f34:	00800074 	movhi	r2,1
   44f38:	10805504 	addi	r2,r2,340
   44f3c:	dfc00317 	ldw	ra,12(sp)
   44f40:	dc800217 	ldw	r18,8(sp)
   44f44:	dc400117 	ldw	r17,4(sp)
   44f48:	dc000017 	ldw	r16,0(sp)
   44f4c:	dec00404 	addi	sp,sp,16
   44f50:	f800283a 	ret

00044f54 <__locale_charset>:
   44f54:	00800074 	movhi	r2,1
   44f58:	10805604 	addi	r2,r2,344
   44f5c:	f800283a 	ret

00044f60 <_localeconv_r>:
   44f60:	00800074 	movhi	r2,1
   44f64:	10805a04 	addi	r2,r2,360
   44f68:	f800283a 	ret

00044f6c <setlocale>:
   44f6c:	00c00074 	movhi	r3,1
   44f70:	18c78904 	addi	r3,r3,7716
   44f74:	2005883a 	mov	r2,r4
   44f78:	19000017 	ldw	r4,0(r3)
   44f7c:	280d883a 	mov	r6,r5
   44f80:	100b883a 	mov	r5,r2
   44f84:	0044eb81 	jmpi	44eb8 <_setlocale_r>

00044f88 <localeconv>:
   44f88:	00800074 	movhi	r2,1
   44f8c:	10805a04 	addi	r2,r2,360
   44f90:	f800283a 	ret

00044f94 <__smakebuf_r>:
   44f94:	2880030b 	ldhu	r2,12(r5)
   44f98:	deffed04 	addi	sp,sp,-76
   44f9c:	dc401015 	stw	r17,64(sp)
   44fa0:	10c0008c 	andi	r3,r2,2
   44fa4:	18ffffcc 	andi	r3,r3,65535
   44fa8:	18e0001c 	xori	r3,r3,32768
   44fac:	dc000f15 	stw	r16,60(sp)
   44fb0:	dfc01215 	stw	ra,72(sp)
   44fb4:	dc801115 	stw	r18,68(sp)
   44fb8:	18e00004 	addi	r3,r3,-32768
   44fbc:	2821883a 	mov	r16,r5
   44fc0:	2023883a 	mov	r17,r4
   44fc4:	1800381e 	bne	r3,zero,450a8 <__smakebuf_r+0x114>
   44fc8:	2940038f 	ldh	r5,14(r5)
   44fcc:	28002d16 	blt	r5,zero,45084 <__smakebuf_r+0xf0>
   44fd0:	d80d883a 	mov	r6,sp
   44fd4:	00479440 	call	47944 <_fstat_r>
   44fd8:	10002916 	blt	r2,zero,45080 <__smakebuf_r+0xec>
   44fdc:	d8800117 	ldw	r2,4(sp)
   44fe0:	00e00014 	movui	r3,32768
   44fe4:	10bc000c 	andi	r2,r2,61440
   44fe8:	10c03c26 	beq	r2,r3,450dc <__smakebuf_r+0x148>
   44fec:	80c0030b 	ldhu	r3,12(r16)
   44ff0:	18c20014 	ori	r3,r3,2048
   44ff4:	80c0030d 	sth	r3,12(r16)
   44ff8:	00c80004 	movi	r3,8192
   44ffc:	10c00c1e 	bne	r2,r3,45030 <__smakebuf_r+0x9c>
   45000:	8140038f 	ldh	r5,14(r16)
   45004:	8809883a 	mov	r4,r17
   45008:	00479ac0 	call	479ac <_isatty_r>
   4500c:	10000826 	beq	r2,zero,45030 <__smakebuf_r+0x9c>
   45010:	80c0030b 	ldhu	r3,12(r16)
   45014:	808010c4 	addi	r2,r16,67
   45018:	80800015 	stw	r2,0(r16)
   4501c:	18c00054 	ori	r3,r3,1
   45020:	80800415 	stw	r2,16(r16)
   45024:	00800044 	movi	r2,1
   45028:	80c0030d 	sth	r3,12(r16)
   4502c:	80800515 	stw	r2,20(r16)
   45030:	04810004 	movi	r18,1024
   45034:	8809883a 	mov	r4,r17
   45038:	900b883a 	mov	r5,r18
   4503c:	004513c0 	call	4513c <_malloc_r>
   45040:	10003026 	beq	r2,zero,45104 <__smakebuf_r+0x170>
   45044:	80c0030b 	ldhu	r3,12(r16)
   45048:	01000134 	movhi	r4,4
   4504c:	21106304 	addi	r4,r4,16780
   45050:	89000f15 	stw	r4,60(r17)
   45054:	18c02014 	ori	r3,r3,128
   45058:	80c0030d 	sth	r3,12(r16)
   4505c:	80800015 	stw	r2,0(r16)
   45060:	80800415 	stw	r2,16(r16)
   45064:	84800515 	stw	r18,20(r16)
   45068:	dfc01217 	ldw	ra,72(sp)
   4506c:	dc801117 	ldw	r18,68(sp)
   45070:	dc401017 	ldw	r17,64(sp)
   45074:	dc000f17 	ldw	r16,60(sp)
   45078:	dec01304 	addi	sp,sp,76
   4507c:	f800283a 	ret
   45080:	8080030b 	ldhu	r2,12(r16)
   45084:	10c0200c 	andi	r3,r2,128
   45088:	18ffffcc 	andi	r3,r3,65535
   4508c:	18e0001c 	xori	r3,r3,32768
   45090:	18e00004 	addi	r3,r3,-32768
   45094:	18000f1e 	bne	r3,zero,450d4 <__smakebuf_r+0x140>
   45098:	04810004 	movi	r18,1024
   4509c:	10820014 	ori	r2,r2,2048
   450a0:	8080030d 	sth	r2,12(r16)
   450a4:	003fe306 	br	45034 <__smakebuf_r+0xa0>
   450a8:	288010c4 	addi	r2,r5,67
   450ac:	28800015 	stw	r2,0(r5)
   450b0:	28800415 	stw	r2,16(r5)
   450b4:	00800044 	movi	r2,1
   450b8:	28800515 	stw	r2,20(r5)
   450bc:	dfc01217 	ldw	ra,72(sp)
   450c0:	dc801117 	ldw	r18,68(sp)
   450c4:	dc401017 	ldw	r17,64(sp)
   450c8:	dc000f17 	ldw	r16,60(sp)
   450cc:	dec01304 	addi	sp,sp,76
   450d0:	f800283a 	ret
   450d4:	04801004 	movi	r18,64
   450d8:	003ff006 	br	4509c <__smakebuf_r+0x108>
   450dc:	81000a17 	ldw	r4,40(r16)
   450e0:	00c00134 	movhi	r3,4
   450e4:	18dd5404 	addi	r3,r3,30032
   450e8:	20ffc01e 	bne	r4,r3,44fec <__smakebuf_r+0x58>
   450ec:	8080030b 	ldhu	r2,12(r16)
   450f0:	00c10004 	movi	r3,1024
   450f4:	80c01315 	stw	r3,76(r16)
   450f8:	10c4b03a 	or	r2,r2,r3
   450fc:	8080030d 	sth	r2,12(r16)
   45100:	003fcb06 	br	45030 <__smakebuf_r+0x9c>
   45104:	8080030b 	ldhu	r2,12(r16)
   45108:	10c0800c 	andi	r3,r2,512
   4510c:	18ffffcc 	andi	r3,r3,65535
   45110:	18e0001c 	xori	r3,r3,32768
   45114:	18e00004 	addi	r3,r3,-32768
   45118:	183fd31e 	bne	r3,zero,45068 <__smakebuf_r+0xd4>
   4511c:	10800094 	ori	r2,r2,2
   45120:	80c010c4 	addi	r3,r16,67
   45124:	8080030d 	sth	r2,12(r16)
   45128:	00800044 	movi	r2,1
   4512c:	80c00015 	stw	r3,0(r16)
   45130:	80c00415 	stw	r3,16(r16)
   45134:	80800515 	stw	r2,20(r16)
   45138:	003fcb06 	br	45068 <__smakebuf_r+0xd4>

0004513c <_malloc_r>:
   4513c:	defff604 	addi	sp,sp,-40
   45140:	dc800215 	stw	r18,8(sp)
   45144:	dfc00915 	stw	ra,36(sp)
   45148:	df000815 	stw	fp,32(sp)
   4514c:	ddc00715 	stw	r23,28(sp)
   45150:	dd800615 	stw	r22,24(sp)
   45154:	dd400515 	stw	r21,20(sp)
   45158:	dd000415 	stw	r20,16(sp)
   4515c:	dcc00315 	stw	r19,12(sp)
   45160:	dc400115 	stw	r17,4(sp)
   45164:	dc000015 	stw	r16,0(sp)
   45168:	288002c4 	addi	r2,r5,11
   4516c:	00c00584 	movi	r3,22
   45170:	2025883a 	mov	r18,r4
   45174:	18802b2e 	bgeu	r3,r2,45224 <_malloc_r+0xe8>
   45178:	047ffe04 	movi	r17,-8
   4517c:	1462703a 	and	r17,r2,r17
   45180:	88002a16 	blt	r17,zero,4522c <_malloc_r+0xf0>
   45184:	89402936 	bltu	r17,r5,4522c <_malloc_r+0xf0>
   45188:	9009883a 	mov	r4,r18
   4518c:	004a1f80 	call	4a1f8 <__malloc_lock>
   45190:	00807dc4 	movi	r2,503
   45194:	14402936 	bltu	r2,r17,4523c <_malloc_r+0x100>
   45198:	8808d0fa 	srli	r4,r17,3
   4519c:	04c00074 	movhi	r19,1
   451a0:	9cc20404 	addi	r19,r19,2064
   451a4:	2105883a 	add	r2,r4,r4
   451a8:	1085883a 	add	r2,r2,r2
   451ac:	1085883a 	add	r2,r2,r2
   451b0:	9885883a 	add	r2,r19,r2
   451b4:	14000317 	ldw	r16,12(r2)
   451b8:	80815526 	beq	r16,r2,45710 <_malloc_r+0x5d4>
   451bc:	81000117 	ldw	r4,4(r16)
   451c0:	00bfff04 	movi	r2,-4
   451c4:	80c00317 	ldw	r3,12(r16)
   451c8:	2084703a 	and	r2,r4,r2
   451cc:	8085883a 	add	r2,r16,r2
   451d0:	11800117 	ldw	r6,4(r2)
   451d4:	81400217 	ldw	r5,8(r16)
   451d8:	9009883a 	mov	r4,r18
   451dc:	31800054 	ori	r6,r6,1
   451e0:	11800115 	stw	r6,4(r2)
   451e4:	28c00315 	stw	r3,12(r5)
   451e8:	19400215 	stw	r5,8(r3)
   451ec:	004a2180 	call	4a218 <__malloc_unlock>
   451f0:	80800204 	addi	r2,r16,8
   451f4:	dfc00917 	ldw	ra,36(sp)
   451f8:	df000817 	ldw	fp,32(sp)
   451fc:	ddc00717 	ldw	r23,28(sp)
   45200:	dd800617 	ldw	r22,24(sp)
   45204:	dd400517 	ldw	r21,20(sp)
   45208:	dd000417 	ldw	r20,16(sp)
   4520c:	dcc00317 	ldw	r19,12(sp)
   45210:	dc800217 	ldw	r18,8(sp)
   45214:	dc400117 	ldw	r17,4(sp)
   45218:	dc000017 	ldw	r16,0(sp)
   4521c:	dec00a04 	addi	sp,sp,40
   45220:	f800283a 	ret
   45224:	04400404 	movi	r17,16
   45228:	897fd72e 	bgeu	r17,r5,45188 <_malloc_r+0x4c>
   4522c:	00800304 	movi	r2,12
   45230:	90800015 	stw	r2,0(r18)
   45234:	0005883a 	mov	r2,zero
   45238:	003fee06 	br	451f4 <_malloc_r+0xb8>
   4523c:	8808d27a 	srli	r4,r17,9
   45240:	20007126 	beq	r4,zero,45408 <_malloc_r+0x2cc>
   45244:	00800104 	movi	r2,4
   45248:	1100eb36 	bltu	r2,r4,455f8 <_malloc_r+0x4bc>
   4524c:	8808d1ba 	srli	r4,r17,6
   45250:	21000e04 	addi	r4,r4,56
   45254:	210b883a 	add	r5,r4,r4
   45258:	294b883a 	add	r5,r5,r5
   4525c:	294b883a 	add	r5,r5,r5
   45260:	04c00074 	movhi	r19,1
   45264:	9cc20404 	addi	r19,r19,2064
   45268:	994b883a 	add	r5,r19,r5
   4526c:	2c000317 	ldw	r16,12(r5)
   45270:	2c000e26 	beq	r5,r16,452ac <_malloc_r+0x170>
   45274:	80c00117 	ldw	r3,4(r16)
   45278:	01ffff04 	movi	r7,-4
   4527c:	018003c4 	movi	r6,15
   45280:	19c6703a 	and	r3,r3,r7
   45284:	1c45c83a 	sub	r2,r3,r17
   45288:	30800716 	blt	r6,r2,452a8 <_malloc_r+0x16c>
   4528c:	1000610e 	bge	r2,zero,45414 <_malloc_r+0x2d8>
   45290:	84000317 	ldw	r16,12(r16)
   45294:	2c000526 	beq	r5,r16,452ac <_malloc_r+0x170>
   45298:	80c00117 	ldw	r3,4(r16)
   4529c:	19c6703a 	and	r3,r3,r7
   452a0:	1c45c83a 	sub	r2,r3,r17
   452a4:	30bff90e 	bge	r6,r2,4528c <_malloc_r+0x150>
   452a8:	213fffc4 	addi	r4,r4,-1
   452ac:	21000044 	addi	r4,r4,1
   452b0:	9c000417 	ldw	r16,16(r19)
   452b4:	00c00074 	movhi	r3,1
   452b8:	18c20404 	addi	r3,r3,2064
   452bc:	1a400204 	addi	r9,r3,8
   452c0:	8240ff26 	beq	r16,r9,456c0 <_malloc_r+0x584>
   452c4:	81400117 	ldw	r5,4(r16)
   452c8:	00bfff04 	movi	r2,-4
   452cc:	018003c4 	movi	r6,15
   452d0:	2884703a 	and	r2,r5,r2
   452d4:	144bc83a 	sub	r5,r2,r17
   452d8:	3140ea16 	blt	r6,r5,45684 <_malloc_r+0x548>
   452dc:	1a400515 	stw	r9,20(r3)
   452e0:	1a400415 	stw	r9,16(r3)
   452e4:	2800570e 	bge	r5,zero,45444 <_malloc_r+0x308>
   452e8:	01407fc4 	movi	r5,511
   452ec:	2880ca36 	bltu	r5,r2,45618 <_malloc_r+0x4dc>
   452f0:	1004d0fa 	srli	r2,r2,3
   452f4:	02000044 	movi	r8,1
   452f8:	19c00117 	ldw	r7,4(r3)
   452fc:	108b883a 	add	r5,r2,r2
   45300:	294b883a 	add	r5,r5,r5
   45304:	1005d0ba 	srai	r2,r2,2
   45308:	294b883a 	add	r5,r5,r5
   4530c:	28cb883a 	add	r5,r5,r3
   45310:	29800217 	ldw	r6,8(r5)
   45314:	4084983a 	sll	r2,r8,r2
   45318:	81400315 	stw	r5,12(r16)
   4531c:	81800215 	stw	r6,8(r16)
   45320:	11c4b03a 	or	r2,r2,r7
   45324:	18800115 	stw	r2,4(r3)
   45328:	2c000215 	stw	r16,8(r5)
   4532c:	34000315 	stw	r16,12(r6)
   45330:	200bd0ba 	srai	r5,r4,2
   45334:	00c00044 	movi	r3,1
   45338:	194a983a 	sll	r5,r3,r5
   4533c:	11404936 	bltu	r2,r5,45464 <_malloc_r+0x328>
   45340:	1146703a 	and	r3,r2,r5
   45344:	18000a1e 	bne	r3,zero,45370 <_malloc_r+0x234>
   45348:	00ffff04 	movi	r3,-4
   4534c:	294b883a 	add	r5,r5,r5
   45350:	20c8703a 	and	r4,r4,r3
   45354:	1146703a 	and	r3,r2,r5
   45358:	21000104 	addi	r4,r4,4
   4535c:	1800041e 	bne	r3,zero,45370 <_malloc_r+0x234>
   45360:	294b883a 	add	r5,r5,r5
   45364:	1146703a 	and	r3,r2,r5
   45368:	21000104 	addi	r4,r4,4
   4536c:	183ffc26 	beq	r3,zero,45360 <_malloc_r+0x224>
   45370:	023fff04 	movi	r8,-4
   45374:	01c003c4 	movi	r7,15
   45378:	2105883a 	add	r2,r4,r4
   4537c:	1085883a 	add	r2,r2,r2
   45380:	1085883a 	add	r2,r2,r2
   45384:	9899883a 	add	r12,r19,r2
   45388:	62800304 	addi	r10,r12,12
   4538c:	2017883a 	mov	r11,r4
   45390:	54000017 	ldw	r16,0(r10)
   45394:	51bffd04 	addi	r6,r10,-12
   45398:	8180041e 	bne	r16,r6,453ac <_malloc_r+0x270>
   4539c:	0000ca06 	br	456c8 <_malloc_r+0x58c>
   453a0:	10001c0e 	bge	r2,zero,45414 <_malloc_r+0x2d8>
   453a4:	84000317 	ldw	r16,12(r16)
   453a8:	8180c726 	beq	r16,r6,456c8 <_malloc_r+0x58c>
   453ac:	80c00117 	ldw	r3,4(r16)
   453b0:	1a06703a 	and	r3,r3,r8
   453b4:	1c45c83a 	sub	r2,r3,r17
   453b8:	38bff90e 	bge	r7,r2,453a0 <_malloc_r+0x264>
   453bc:	81000317 	ldw	r4,12(r16)
   453c0:	81400217 	ldw	r5,8(r16)
   453c4:	8447883a 	add	r3,r16,r17
   453c8:	8c400054 	ori	r17,r17,1
   453cc:	29000315 	stw	r4,12(r5)
   453d0:	21400215 	stw	r5,8(r4)
   453d4:	84400115 	stw	r17,4(r16)
   453d8:	1889883a 	add	r4,r3,r2
   453dc:	11400054 	ori	r5,r2,1
   453e0:	98c00515 	stw	r3,20(r19)
   453e4:	98c00415 	stw	r3,16(r19)
   453e8:	20800015 	stw	r2,0(r4)
   453ec:	1a400315 	stw	r9,12(r3)
   453f0:	1a400215 	stw	r9,8(r3)
   453f4:	19400115 	stw	r5,4(r3)
   453f8:	9009883a 	mov	r4,r18
   453fc:	004a2180 	call	4a218 <__malloc_unlock>
   45400:	80800204 	addi	r2,r16,8
   45404:	003f7b06 	br	451f4 <_malloc_r+0xb8>
   45408:	8808d0fa 	srli	r4,r17,3
   4540c:	210b883a 	add	r5,r4,r4
   45410:	003f9106 	br	45258 <_malloc_r+0x11c>
   45414:	80c7883a 	add	r3,r16,r3
   45418:	19400117 	ldw	r5,4(r3)
   4541c:	80800317 	ldw	r2,12(r16)
   45420:	81000217 	ldw	r4,8(r16)
   45424:	29400054 	ori	r5,r5,1
   45428:	19400115 	stw	r5,4(r3)
   4542c:	20800315 	stw	r2,12(r4)
   45430:	11000215 	stw	r4,8(r2)
   45434:	9009883a 	mov	r4,r18
   45438:	004a2180 	call	4a218 <__malloc_unlock>
   4543c:	80800204 	addi	r2,r16,8
   45440:	003f6c06 	br	451f4 <_malloc_r+0xb8>
   45444:	8085883a 	add	r2,r16,r2
   45448:	10c00117 	ldw	r3,4(r2)
   4544c:	9009883a 	mov	r4,r18
   45450:	18c00054 	ori	r3,r3,1
   45454:	10c00115 	stw	r3,4(r2)
   45458:	004a2180 	call	4a218 <__malloc_unlock>
   4545c:	80800204 	addi	r2,r16,8
   45460:	003f6406 	br	451f4 <_malloc_r+0xb8>
   45464:	9c000217 	ldw	r16,8(r19)
   45468:	00bfff04 	movi	r2,-4
   4546c:	85400117 	ldw	r21,4(r16)
   45470:	a8aa703a 	and	r21,r21,r2
   45474:	ac400336 	bltu	r21,r17,45484 <_malloc_r+0x348>
   45478:	ac45c83a 	sub	r2,r21,r17
   4547c:	00c003c4 	movi	r3,15
   45480:	18805316 	blt	r3,r2,455d0 <_malloc_r+0x494>
   45484:	d5e01917 	ldw	r23,-32668(gp)
   45488:	d0e00317 	ldw	r3,-32756(gp)
   4548c:	00bfffc4 	movi	r2,-1
   45490:	8579883a 	add	fp,r16,r21
   45494:	8def883a 	add	r23,r17,r23
   45498:	1880d226 	beq	r3,r2,457e4 <_malloc_r+0x6a8>
   4549c:	bdc403c4 	addi	r23,r23,4111
   454a0:	00bc0004 	movi	r2,-4096
   454a4:	b8ae703a 	and	r23,r23,r2
   454a8:	9009883a 	mov	r4,r18
   454ac:	b80b883a 	mov	r5,r23
   454b0:	00474100 	call	47410 <_sbrk_r>
   454b4:	1029883a 	mov	r20,r2
   454b8:	00bfffc4 	movi	r2,-1
   454bc:	a080d126 	beq	r20,r2,45804 <_malloc_r+0x6c8>
   454c0:	a7009f36 	bltu	r20,fp,45740 <_malloc_r+0x604>
   454c4:	05800074 	movhi	r22,1
   454c8:	b587a904 	addi	r22,r22,7844
   454cc:	b0800017 	ldw	r2,0(r22)
   454d0:	b885883a 	add	r2,r23,r2
   454d4:	b0800015 	stw	r2,0(r22)
   454d8:	e500cf26 	beq	fp,r20,45818 <_malloc_r+0x6dc>
   454dc:	d1200317 	ldw	r4,-32756(gp)
   454e0:	00ffffc4 	movi	r3,-1
   454e4:	20c0e026 	beq	r4,r3,45868 <_malloc_r+0x72c>
   454e8:	a739c83a 	sub	fp,r20,fp
   454ec:	1705883a 	add	r2,r2,fp
   454f0:	b0800015 	stw	r2,0(r22)
   454f4:	a08001cc 	andi	r2,r20,7
   454f8:	1000a526 	beq	r2,zero,45790 <_malloc_r+0x654>
   454fc:	a0a9c83a 	sub	r20,r20,r2
   45500:	00c40204 	movi	r3,4104
   45504:	a5000204 	addi	r20,r20,8
   45508:	1885c83a 	sub	r2,r3,r2
   4550c:	a5c7883a 	add	r3,r20,r23
   45510:	18c3ffcc 	andi	r3,r3,4095
   45514:	10efc83a 	sub	r23,r2,r3
   45518:	9009883a 	mov	r4,r18
   4551c:	b80b883a 	mov	r5,r23
   45520:	00474100 	call	47410 <_sbrk_r>
   45524:	00ffffc4 	movi	r3,-1
   45528:	10c0cc26 	beq	r2,r3,4585c <_malloc_r+0x720>
   4552c:	1505c83a 	sub	r2,r2,r20
   45530:	b887883a 	add	r3,r23,r2
   45534:	18c00054 	ori	r3,r3,1
   45538:	b0800017 	ldw	r2,0(r22)
   4553c:	9d000215 	stw	r20,8(r19)
   45540:	a0c00115 	stw	r3,4(r20)
   45544:	b885883a 	add	r2,r23,r2
   45548:	b0800015 	stw	r2,0(r22)
   4554c:	84c00e26 	beq	r16,r19,45588 <_malloc_r+0x44c>
   45550:	00c003c4 	movi	r3,15
   45554:	1d40902e 	bgeu	r3,r21,45798 <_malloc_r+0x65c>
   45558:	ad7ffd04 	addi	r21,r21,-12
   4555c:	013ffe04 	movi	r4,-8
   45560:	a908703a 	and	r4,r21,r4
   45564:	810b883a 	add	r5,r16,r4
   45568:	01800144 	movi	r6,5
   4556c:	29800115 	stw	r6,4(r5)
   45570:	29800215 	stw	r6,8(r5)
   45574:	81400117 	ldw	r5,4(r16)
   45578:	2940004c 	andi	r5,r5,1
   4557c:	214ab03a 	or	r5,r4,r5
   45580:	81400115 	stw	r5,4(r16)
   45584:	1900ae36 	bltu	r3,r4,45840 <_malloc_r+0x704>
   45588:	d0e01817 	ldw	r3,-32672(gp)
   4558c:	1880012e 	bgeu	r3,r2,45594 <_malloc_r+0x458>
   45590:	d0a01815 	stw	r2,-32672(gp)
   45594:	d0e01717 	ldw	r3,-32676(gp)
   45598:	9c000217 	ldw	r16,8(r19)
   4559c:	1880012e 	bgeu	r3,r2,455a4 <_malloc_r+0x468>
   455a0:	d0a01715 	stw	r2,-32676(gp)
   455a4:	80c00117 	ldw	r3,4(r16)
   455a8:	00bfff04 	movi	r2,-4
   455ac:	1886703a 	and	r3,r3,r2
   455b0:	1c45c83a 	sub	r2,r3,r17
   455b4:	1c400236 	bltu	r3,r17,455c0 <_malloc_r+0x484>
   455b8:	00c003c4 	movi	r3,15
   455bc:	18800416 	blt	r3,r2,455d0 <_malloc_r+0x494>
   455c0:	9009883a 	mov	r4,r18
   455c4:	004a2180 	call	4a218 <__malloc_unlock>
   455c8:	0005883a 	mov	r2,zero
   455cc:	003f0906 	br	451f4 <_malloc_r+0xb8>
   455d0:	88c00054 	ori	r3,r17,1
   455d4:	10800054 	ori	r2,r2,1
   455d8:	80c00115 	stw	r3,4(r16)
   455dc:	8463883a 	add	r17,r16,r17
   455e0:	88800115 	stw	r2,4(r17)
   455e4:	9009883a 	mov	r4,r18
   455e8:	9c400215 	stw	r17,8(r19)
   455ec:	004a2180 	call	4a218 <__malloc_unlock>
   455f0:	80800204 	addi	r2,r16,8
   455f4:	003eff06 	br	451f4 <_malloc_r+0xb8>
   455f8:	00800504 	movi	r2,20
   455fc:	1100492e 	bgeu	r2,r4,45724 <_malloc_r+0x5e8>
   45600:	00801504 	movi	r2,84
   45604:	11005c36 	bltu	r2,r4,45778 <_malloc_r+0x63c>
   45608:	8808d33a 	srli	r4,r17,12
   4560c:	21001b84 	addi	r4,r4,110
   45610:	210b883a 	add	r5,r4,r4
   45614:	003f1006 	br	45258 <_malloc_r+0x11c>
   45618:	1006d27a 	srli	r3,r2,9
   4561c:	01400104 	movi	r5,4
   45620:	28c0432e 	bgeu	r5,r3,45730 <_malloc_r+0x5f4>
   45624:	01400504 	movi	r5,20
   45628:	28c07036 	bltu	r5,r3,457ec <_malloc_r+0x6b0>
   4562c:	194016c4 	addi	r5,r3,91
   45630:	294d883a 	add	r6,r5,r5
   45634:	318d883a 	add	r6,r6,r6
   45638:	318d883a 	add	r6,r6,r6
   4563c:	998d883a 	add	r6,r19,r6
   45640:	30c00217 	ldw	r3,8(r6)
   45644:	01c00074 	movhi	r7,1
   45648:	39c20404 	addi	r7,r7,2064
   4564c:	19805726 	beq	r3,r6,457ac <_malloc_r+0x670>
   45650:	01ffff04 	movi	r7,-4
   45654:	19400117 	ldw	r5,4(r3)
   45658:	29ca703a 	and	r5,r5,r7
   4565c:	1140022e 	bgeu	r2,r5,45668 <_malloc_r+0x52c>
   45660:	18c00217 	ldw	r3,8(r3)
   45664:	30fffb1e 	bne	r6,r3,45654 <_malloc_r+0x518>
   45668:	19400317 	ldw	r5,12(r3)
   4566c:	98800117 	ldw	r2,4(r19)
   45670:	81400315 	stw	r5,12(r16)
   45674:	80c00215 	stw	r3,8(r16)
   45678:	2c000215 	stw	r16,8(r5)
   4567c:	1c000315 	stw	r16,12(r3)
   45680:	003f2b06 	br	45330 <_malloc_r+0x1f4>
   45684:	8445883a 	add	r2,r16,r17
   45688:	8c400054 	ori	r17,r17,1
   4568c:	18800515 	stw	r2,20(r3)
   45690:	18800415 	stw	r2,16(r3)
   45694:	29000054 	ori	r4,r5,1
   45698:	1147883a 	add	r3,r2,r5
   4569c:	84400115 	stw	r17,4(r16)
   456a0:	11000115 	stw	r4,4(r2)
   456a4:	12400315 	stw	r9,12(r2)
   456a8:	12400215 	stw	r9,8(r2)
   456ac:	19400015 	stw	r5,0(r3)
   456b0:	9009883a 	mov	r4,r18
   456b4:	004a2180 	call	4a218 <__malloc_unlock>
   456b8:	80800204 	addi	r2,r16,8
   456bc:	003ecd06 	br	451f4 <_malloc_r+0xb8>
   456c0:	18800117 	ldw	r2,4(r3)
   456c4:	003f1a06 	br	45330 <_malloc_r+0x1f4>
   456c8:	5ac00044 	addi	r11,r11,1
   456cc:	588000cc 	andi	r2,r11,3
   456d0:	52800204 	addi	r10,r10,8
   456d4:	103f2e1e 	bne	r2,zero,45390 <_malloc_r+0x254>
   456d8:	20c000cc 	andi	r3,r4,3
   456dc:	60bffe04 	addi	r2,r12,-8
   456e0:	18006f26 	beq	r3,zero,458a0 <_malloc_r+0x764>
   456e4:	63000017 	ldw	r12,0(r12)
   456e8:	213fffc4 	addi	r4,r4,-1
   456ec:	60bffa26 	beq	r12,r2,456d8 <_malloc_r+0x59c>
   456f0:	98800117 	ldw	r2,4(r19)
   456f4:	294b883a 	add	r5,r5,r5
   456f8:	117f5a36 	bltu	r2,r5,45464 <_malloc_r+0x328>
   456fc:	283f5926 	beq	r5,zero,45464 <_malloc_r+0x328>
   45700:	1146703a 	and	r3,r2,r5
   45704:	18001626 	beq	r3,zero,45760 <_malloc_r+0x624>
   45708:	5809883a 	mov	r4,r11
   4570c:	003f1a06 	br	45378 <_malloc_r+0x23c>
   45710:	80800204 	addi	r2,r16,8
   45714:	84000517 	ldw	r16,20(r16)
   45718:	143ea81e 	bne	r2,r16,451bc <_malloc_r+0x80>
   4571c:	21000084 	addi	r4,r4,2
   45720:	003ee306 	br	452b0 <_malloc_r+0x174>
   45724:	210016c4 	addi	r4,r4,91
   45728:	210b883a 	add	r5,r4,r4
   4572c:	003eca06 	br	45258 <_malloc_r+0x11c>
   45730:	100ad1ba 	srli	r5,r2,6
   45734:	29400e04 	addi	r5,r5,56
   45738:	294d883a 	add	r6,r5,r5
   4573c:	003fbd06 	br	45634 <_malloc_r+0x4f8>
   45740:	84ff6026 	beq	r16,r19,454c4 <_malloc_r+0x388>
   45744:	00800074 	movhi	r2,1
   45748:	10820404 	addi	r2,r2,2064
   4574c:	14000217 	ldw	r16,8(r2)
   45750:	00bfff04 	movi	r2,-4
   45754:	80c00117 	ldw	r3,4(r16)
   45758:	1886703a 	and	r3,r3,r2
   4575c:	003f9406 	br	455b0 <_malloc_r+0x474>
   45760:	294b883a 	add	r5,r5,r5
   45764:	1146703a 	and	r3,r2,r5
   45768:	5ac00104 	addi	r11,r11,4
   4576c:	183ffc26 	beq	r3,zero,45760 <_malloc_r+0x624>
   45770:	5809883a 	mov	r4,r11
   45774:	003f0006 	br	45378 <_malloc_r+0x23c>
   45778:	00805504 	movi	r2,340
   4577c:	11001336 	bltu	r2,r4,457cc <_malloc_r+0x690>
   45780:	8808d3fa 	srli	r4,r17,15
   45784:	21001dc4 	addi	r4,r4,119
   45788:	210b883a 	add	r5,r4,r4
   4578c:	003eb206 	br	45258 <_malloc_r+0x11c>
   45790:	00840004 	movi	r2,4096
   45794:	003f5d06 	br	4550c <_malloc_r+0x3d0>
   45798:	00800044 	movi	r2,1
   4579c:	a0800115 	stw	r2,4(r20)
   457a0:	a021883a 	mov	r16,r20
   457a4:	0007883a 	mov	r3,zero
   457a8:	003f8106 	br	455b0 <_malloc_r+0x474>
   457ac:	280bd0ba 	srai	r5,r5,2
   457b0:	01800044 	movi	r6,1
   457b4:	38800117 	ldw	r2,4(r7)
   457b8:	314c983a 	sll	r6,r6,r5
   457bc:	180b883a 	mov	r5,r3
   457c0:	3084b03a 	or	r2,r6,r2
   457c4:	38800115 	stw	r2,4(r7)
   457c8:	003fa906 	br	45670 <_malloc_r+0x534>
   457cc:	00815504 	movi	r2,1364
   457d0:	11001836 	bltu	r2,r4,45834 <_malloc_r+0x6f8>
   457d4:	8808d4ba 	srli	r4,r17,18
   457d8:	21001f04 	addi	r4,r4,124
   457dc:	210b883a 	add	r5,r4,r4
   457e0:	003e9d06 	br	45258 <_malloc_r+0x11c>
   457e4:	bdc00404 	addi	r23,r23,16
   457e8:	003f2f06 	br	454a8 <_malloc_r+0x36c>
   457ec:	01401504 	movi	r5,84
   457f0:	28c01f36 	bltu	r5,r3,45870 <_malloc_r+0x734>
   457f4:	100ad33a 	srli	r5,r2,12
   457f8:	29401b84 	addi	r5,r5,110
   457fc:	294d883a 	add	r6,r5,r5
   45800:	003f8c06 	br	45634 <_malloc_r+0x4f8>
   45804:	9c000217 	ldw	r16,8(r19)
   45808:	00bfff04 	movi	r2,-4
   4580c:	80c00117 	ldw	r3,4(r16)
   45810:	1886703a 	and	r3,r3,r2
   45814:	003f6606 	br	455b0 <_malloc_r+0x474>
   45818:	e0c3ffcc 	andi	r3,fp,4095
   4581c:	183f2f1e 	bne	r3,zero,454dc <_malloc_r+0x3a0>
   45820:	98c00217 	ldw	r3,8(r19)
   45824:	bd49883a 	add	r4,r23,r21
   45828:	21000054 	ori	r4,r4,1
   4582c:	19000115 	stw	r4,4(r3)
   45830:	003f5506 	br	45588 <_malloc_r+0x44c>
   45834:	01403f04 	movi	r5,252
   45838:	01001f84 	movi	r4,126
   4583c:	003e8606 	br	45258 <_malloc_r+0x11c>
   45840:	9009883a 	mov	r4,r18
   45844:	81400204 	addi	r5,r16,8
   45848:	00445a40 	call	445a4 <_free_r>
   4584c:	00800074 	movhi	r2,1
   45850:	1087a904 	addi	r2,r2,7844
   45854:	10800017 	ldw	r2,0(r2)
   45858:	003f4b06 	br	45588 <_malloc_r+0x44c>
   4585c:	00c00044 	movi	r3,1
   45860:	002f883a 	mov	r23,zero
   45864:	003f3406 	br	45538 <_malloc_r+0x3fc>
   45868:	d5200315 	stw	r20,-32756(gp)
   4586c:	003f2106 	br	454f4 <_malloc_r+0x3b8>
   45870:	01405504 	movi	r5,340
   45874:	28c00436 	bltu	r5,r3,45888 <_malloc_r+0x74c>
   45878:	100ad3fa 	srli	r5,r2,15
   4587c:	29401dc4 	addi	r5,r5,119
   45880:	294d883a 	add	r6,r5,r5
   45884:	003f6b06 	br	45634 <_malloc_r+0x4f8>
   45888:	01415504 	movi	r5,1364
   4588c:	28c00936 	bltu	r5,r3,458b4 <_malloc_r+0x778>
   45890:	100ad4ba 	srli	r5,r2,18
   45894:	29401f04 	addi	r5,r5,124
   45898:	294d883a 	add	r6,r5,r5
   4589c:	003f6506 	br	45634 <_malloc_r+0x4f8>
   458a0:	98800117 	ldw	r2,4(r19)
   458a4:	0146303a 	nor	r3,zero,r5
   458a8:	1884703a 	and	r2,r3,r2
   458ac:	98800115 	stw	r2,4(r19)
   458b0:	003f9006 	br	456f4 <_malloc_r+0x5b8>
   458b4:	01803f04 	movi	r6,252
   458b8:	01401f84 	movi	r5,126
   458bc:	003f5d06 	br	45634 <_malloc_r+0x4f8>

000458c0 <memchr>:
   458c0:	008000c4 	movi	r2,3
   458c4:	29403fcc 	andi	r5,r5,255
   458c8:	1180282e 	bgeu	r2,r6,4596c <memchr+0xac>
   458cc:	2086703a 	and	r3,r4,r2
   458d0:	1800351e 	bne	r3,zero,459a8 <memchr+0xe8>
   458d4:	2816923a 	slli	r11,r5,8
   458d8:	2093883a 	add	r9,r4,r2
   458dc:	22000084 	addi	r8,r4,2
   458e0:	5957883a 	add	r11,r11,r5
   458e4:	5816923a 	slli	r11,r11,8
   458e8:	20c00044 	addi	r3,r4,1
   458ec:	037fbff4 	movhi	r13,65279
   458f0:	6b7fbfc4 	addi	r13,r13,-257
   458f4:	5957883a 	add	r11,r11,r5
   458f8:	5816923a 	slli	r11,r11,8
   458fc:	03202074 	movhi	r12,32897
   45900:	63202004 	addi	r12,r12,-32640
   45904:	101d883a 	mov	r14,r2
   45908:	5957883a 	add	r11,r11,r5
   4590c:	21c00017 	ldw	r7,0(r4)
   45910:	31bfff04 	addi	r6,r6,-4
   45914:	1805883a 	mov	r2,r3
   45918:	3acef03a 	xor	r7,r7,r11
   4591c:	3b55883a 	add	r10,r7,r13
   45920:	01ce303a 	nor	r7,zero,r7
   45924:	51ce703a 	and	r7,r10,r7
   45928:	3b0e703a 	and	r7,r7,r12
   4592c:	38000a26 	beq	r7,zero,45958 <memchr+0x98>
   45930:	21c00003 	ldbu	r7,0(r4)
   45934:	39401e26 	beq	r7,r5,459b0 <memchr+0xf0>
   45938:	19c00003 	ldbu	r7,0(r3)
   4593c:	39401926 	beq	r7,r5,459a4 <memchr+0xe4>
   45940:	41c00003 	ldbu	r7,0(r8)
   45944:	4005883a 	mov	r2,r8
   45948:	39401626 	beq	r7,r5,459a4 <memchr+0xe4>
   4594c:	49c00003 	ldbu	r7,0(r9)
   45950:	4805883a 	mov	r2,r9
   45954:	39401326 	beq	r7,r5,459a4 <memchr+0xe4>
   45958:	21000104 	addi	r4,r4,4
   4595c:	4a400104 	addi	r9,r9,4
   45960:	42000104 	addi	r8,r8,4
   45964:	18c00104 	addi	r3,r3,4
   45968:	71bfe836 	bltu	r14,r6,4590c <memchr+0x4c>
   4596c:	2005883a 	mov	r2,r4
   45970:	30000a26 	beq	r6,zero,4599c <memchr+0xdc>
   45974:	10c00003 	ldbu	r3,0(r2)
   45978:	19400a26 	beq	r3,r5,459a4 <memchr+0xe4>
   4597c:	10c00044 	addi	r3,r2,1
   45980:	118d883a 	add	r6,r2,r6
   45984:	00000306 	br	45994 <memchr+0xd4>
   45988:	11000003 	ldbu	r4,0(r2)
   4598c:	18c00044 	addi	r3,r3,1
   45990:	21400426 	beq	r4,r5,459a4 <memchr+0xe4>
   45994:	1805883a 	mov	r2,r3
   45998:	19bffb1e 	bne	r3,r6,45988 <memchr+0xc8>
   4599c:	0005883a 	mov	r2,zero
   459a0:	f800283a 	ret
   459a4:	f800283a 	ret
   459a8:	2005883a 	mov	r2,r4
   459ac:	003ff106 	br	45974 <memchr+0xb4>
   459b0:	2005883a 	mov	r2,r4
   459b4:	f800283a 	ret

000459b8 <memcpy>:
   459b8:	defffb04 	addi	sp,sp,-20
   459bc:	dc000015 	stw	r16,0(sp)
   459c0:	dfc00415 	stw	ra,16(sp)
   459c4:	dcc00315 	stw	r19,12(sp)
   459c8:	dc800215 	stw	r18,8(sp)
   459cc:	dc400115 	stw	r17,4(sp)
   459d0:	00c003c4 	movi	r3,15
   459d4:	2021883a 	mov	r16,r4
   459d8:	3005883a 	mov	r2,r6
   459dc:	1980032e 	bgeu	r3,r6,459ec <memcpy+0x34>
   459e0:	2906b03a 	or	r3,r5,r4
   459e4:	18c000cc 	andi	r3,r3,3
   459e8:	18001026 	beq	r3,zero,45a2c <memcpy+0x74>
   459ec:	8007883a 	mov	r3,r16
   459f0:	288f883a 	add	r7,r5,r2
   459f4:	10000526 	beq	r2,zero,45a0c <memcpy+0x54>
   459f8:	29800003 	ldbu	r6,0(r5)
   459fc:	18c00044 	addi	r3,r3,1
   45a00:	29400044 	addi	r5,r5,1
   45a04:	19bfffc5 	stb	r6,-1(r3)
   45a08:	29fffb1e 	bne	r5,r7,459f8 <memcpy+0x40>
   45a0c:	8005883a 	mov	r2,r16
   45a10:	dfc00417 	ldw	ra,16(sp)
   45a14:	dcc00317 	ldw	r19,12(sp)
   45a18:	dc800217 	ldw	r18,8(sp)
   45a1c:	dc400117 	ldw	r17,4(sp)
   45a20:	dc000017 	ldw	r16,0(sp)
   45a24:	dec00504 	addi	sp,sp,20
   45a28:	f800283a 	ret
   45a2c:	32bffc04 	addi	r10,r6,-16
   45a30:	5014d13a 	srli	r10,r10,4
   45a34:	20800404 	addi	r2,r4,16
   45a38:	2007883a 	mov	r3,r4
   45a3c:	5008913a 	slli	r4,r10,4
   45a40:	280f883a 	mov	r7,r5
   45a44:	1105883a 	add	r2,r2,r4
   45a48:	3a000017 	ldw	r8,0(r7)
   45a4c:	18c00404 	addi	r3,r3,16
   45a50:	39c00404 	addi	r7,r7,16
   45a54:	1a3ffc15 	stw	r8,-16(r3)
   45a58:	3a3ffd17 	ldw	r8,-12(r7)
   45a5c:	1a3ffd15 	stw	r8,-12(r3)
   45a60:	3a3ffe17 	ldw	r8,-8(r7)
   45a64:	1a3ffe15 	stw	r8,-8(r3)
   45a68:	3a3fff17 	ldw	r8,-4(r7)
   45a6c:	1a3fff15 	stw	r8,-4(r3)
   45a70:	18bff51e 	bne	r3,r2,45a48 <memcpy+0x90>
   45a74:	52800044 	addi	r10,r10,1
   45a78:	5014913a 	slli	r10,r10,4
   45a7c:	308003cc 	andi	r2,r6,15
   45a80:	010000c4 	movi	r4,3
   45a84:	8287883a 	add	r3,r16,r10
   45a88:	2a95883a 	add	r10,r5,r10
   45a8c:	2080182e 	bgeu	r4,r2,45af0 <memcpy+0x138>
   45a90:	147fff04 	addi	r17,r2,-4
   45a94:	8808d0ba 	srli	r4,r17,2
   45a98:	1a400104 	addi	r9,r3,4
   45a9c:	180d883a 	mov	r6,r3
   45aa0:	2105883a 	add	r2,r4,r4
   45aa4:	1085883a 	add	r2,r2,r2
   45aa8:	4893883a 	add	r9,r9,r2
   45aac:	500f883a 	mov	r7,r10
   45ab0:	3a000017 	ldw	r8,0(r7)
   45ab4:	31800104 	addi	r6,r6,4
   45ab8:	39c00104 	addi	r7,r7,4
   45abc:	323fff15 	stw	r8,-4(r6)
   45ac0:	327ffb1e 	bne	r6,r9,45ab0 <memcpy+0xf8>
   45ac4:	20800044 	addi	r2,r4,1
   45ac8:	1085883a 	add	r2,r2,r2
   45acc:	1085883a 	add	r2,r2,r2
   45ad0:	017fff04 	movi	r5,-4
   45ad4:	18a5883a 	add	r18,r3,r2
   45ad8:	50a7883a 	add	r19,r10,r2
   45adc:	00495d00 	call	495d0 <__mulsi3>
   45ae0:	1445883a 	add	r2,r2,r17
   45ae4:	980b883a 	mov	r5,r19
   45ae8:	9007883a 	mov	r3,r18
   45aec:	003fc006 	br	459f0 <memcpy+0x38>
   45af0:	500b883a 	mov	r5,r10
   45af4:	003fbe06 	br	459f0 <memcpy+0x38>

00045af8 <memmove>:
   45af8:	defffb04 	addi	sp,sp,-20
   45afc:	dc000015 	stw	r16,0(sp)
   45b00:	dfc00415 	stw	ra,16(sp)
   45b04:	dcc00315 	stw	r19,12(sp)
   45b08:	dc800215 	stw	r18,8(sp)
   45b0c:	dc400115 	stw	r17,4(sp)
   45b10:	2021883a 	mov	r16,r4
   45b14:	300f883a 	mov	r7,r6
   45b18:	2900122e 	bgeu	r5,r4,45b64 <memmove+0x6c>
   45b1c:	2987883a 	add	r3,r5,r6
   45b20:	20c0102e 	bgeu	r4,r3,45b64 <memmove+0x6c>
   45b24:	218b883a 	add	r5,r4,r6
   45b28:	1989c83a 	sub	r4,r3,r6
   45b2c:	30000526 	beq	r6,zero,45b44 <memmove+0x4c>
   45b30:	18ffffc4 	addi	r3,r3,-1
   45b34:	18800003 	ldbu	r2,0(r3)
   45b38:	297fffc4 	addi	r5,r5,-1
   45b3c:	28800005 	stb	r2,0(r5)
   45b40:	193ffb1e 	bne	r3,r4,45b30 <memmove+0x38>
   45b44:	8005883a 	mov	r2,r16
   45b48:	dfc00417 	ldw	ra,16(sp)
   45b4c:	dcc00317 	ldw	r19,12(sp)
   45b50:	dc800217 	ldw	r18,8(sp)
   45b54:	dc400117 	ldw	r17,4(sp)
   45b58:	dc000017 	ldw	r16,0(sp)
   45b5c:	dec00504 	addi	sp,sp,20
   45b60:	f800283a 	ret
   45b64:	008003c4 	movi	r2,15
   45b68:	1180422e 	bgeu	r2,r6,45c74 <memmove+0x17c>
   45b6c:	2c04b03a 	or	r2,r5,r16
   45b70:	108000cc 	andi	r2,r2,3
   45b74:	10003f1e 	bne	r2,zero,45c74 <memmove+0x17c>
   45b78:	32bffc04 	addi	r10,r6,-16
   45b7c:	5014d13a 	srli	r10,r10,4
   45b80:	81000404 	addi	r4,r16,16
   45b84:	8007883a 	mov	r3,r16
   45b88:	5004913a 	slli	r2,r10,4
   45b8c:	280f883a 	mov	r7,r5
   45b90:	2089883a 	add	r4,r4,r2
   45b94:	38800017 	ldw	r2,0(r7)
   45b98:	18c00404 	addi	r3,r3,16
   45b9c:	39c00404 	addi	r7,r7,16
   45ba0:	18bffc15 	stw	r2,-16(r3)
   45ba4:	38bffd17 	ldw	r2,-12(r7)
   45ba8:	18bffd15 	stw	r2,-12(r3)
   45bac:	38bffe17 	ldw	r2,-8(r7)
   45bb0:	18bffe15 	stw	r2,-8(r3)
   45bb4:	38bfff17 	ldw	r2,-4(r7)
   45bb8:	18bfff15 	stw	r2,-4(r3)
   45bbc:	193ff51e 	bne	r3,r4,45b94 <memmove+0x9c>
   45bc0:	52800044 	addi	r10,r10,1
   45bc4:	5014913a 	slli	r10,r10,4
   45bc8:	31c003cc 	andi	r7,r6,15
   45bcc:	008000c4 	movi	r2,3
   45bd0:	8287883a 	add	r3,r16,r10
   45bd4:	2a95883a 	add	r10,r5,r10
   45bd8:	11c0282e 	bgeu	r2,r7,45c7c <memmove+0x184>
   45bdc:	3c7fff04 	addi	r17,r7,-4
   45be0:	8808d0ba 	srli	r4,r17,2
   45be4:	1a400104 	addi	r9,r3,4
   45be8:	180d883a 	mov	r6,r3
   45bec:	2105883a 	add	r2,r4,r4
   45bf0:	1085883a 	add	r2,r2,r2
   45bf4:	4893883a 	add	r9,r9,r2
   45bf8:	5005883a 	mov	r2,r10
   45bfc:	12000017 	ldw	r8,0(r2)
   45c00:	31800104 	addi	r6,r6,4
   45c04:	10800104 	addi	r2,r2,4
   45c08:	323fff15 	stw	r8,-4(r6)
   45c0c:	327ffb1e 	bne	r6,r9,45bfc <memmove+0x104>
   45c10:	20800044 	addi	r2,r4,1
   45c14:	1085883a 	add	r2,r2,r2
   45c18:	1085883a 	add	r2,r2,r2
   45c1c:	017fff04 	movi	r5,-4
   45c20:	18a5883a 	add	r18,r3,r2
   45c24:	50a7883a 	add	r19,r10,r2
   45c28:	00495d00 	call	495d0 <__mulsi3>
   45c2c:	144f883a 	add	r7,r2,r17
   45c30:	980b883a 	mov	r5,r19
   45c34:	9007883a 	mov	r3,r18
   45c38:	383fc226 	beq	r7,zero,45b44 <memmove+0x4c>
   45c3c:	19cf883a 	add	r7,r3,r7
   45c40:	29800003 	ldbu	r6,0(r5)
   45c44:	18c00044 	addi	r3,r3,1
   45c48:	29400044 	addi	r5,r5,1
   45c4c:	19bfffc5 	stb	r6,-1(r3)
   45c50:	19fffb1e 	bne	r3,r7,45c40 <memmove+0x148>
   45c54:	8005883a 	mov	r2,r16
   45c58:	dfc00417 	ldw	ra,16(sp)
   45c5c:	dcc00317 	ldw	r19,12(sp)
   45c60:	dc800217 	ldw	r18,8(sp)
   45c64:	dc400117 	ldw	r17,4(sp)
   45c68:	dc000017 	ldw	r16,0(sp)
   45c6c:	dec00504 	addi	sp,sp,20
   45c70:	f800283a 	ret
   45c74:	8007883a 	mov	r3,r16
   45c78:	003fef06 	br	45c38 <memmove+0x140>
   45c7c:	500b883a 	mov	r5,r10
   45c80:	003fed06 	br	45c38 <memmove+0x140>

00045c84 <memset>:
   45c84:	00c000c4 	movi	r3,3
   45c88:	2005883a 	mov	r2,r4
   45c8c:	29403fcc 	andi	r5,r5,255
   45c90:	19802d2e 	bgeu	r3,r6,45d48 <memset+0xc4>
   45c94:	20c6703a 	and	r3,r4,r3
   45c98:	18002e1e 	bne	r3,zero,45d54 <memset+0xd0>
   45c9c:	2806923a 	slli	r3,r5,8
   45ca0:	010003c4 	movi	r4,15
   45ca4:	3011883a 	mov	r8,r6
   45ca8:	1946b03a 	or	r3,r3,r5
   45cac:	180e943a 	slli	r7,r3,16
   45cb0:	38ceb03a 	or	r7,r7,r3
   45cb4:	1007883a 	mov	r3,r2
   45cb8:	21800f2e 	bgeu	r4,r6,45cf8 <memset+0x74>
   45cbc:	19c00015 	stw	r7,0(r3)
   45cc0:	19c00115 	stw	r7,4(r3)
   45cc4:	19c00215 	stw	r7,8(r3)
   45cc8:	19c00315 	stw	r7,12(r3)
   45ccc:	423ffc04 	addi	r8,r8,-16
   45cd0:	18c00404 	addi	r3,r3,16
   45cd4:	223ff936 	bltu	r4,r8,45cbc <memset+0x38>
   45cd8:	30fffc04 	addi	r3,r6,-16
   45cdc:	1806d13a 	srli	r3,r3,4
   45ce0:	318003cc 	andi	r6,r6,15
   45ce4:	010000c4 	movi	r4,3
   45ce8:	18c00044 	addi	r3,r3,1
   45cec:	1806913a 	slli	r3,r3,4
   45cf0:	10c7883a 	add	r3,r2,r3
   45cf4:	21800e2e 	bgeu	r4,r6,45d30 <memset+0xac>
   45cf8:	1813883a 	mov	r9,r3
   45cfc:	3011883a 	mov	r8,r6
   45d00:	010000c4 	movi	r4,3
   45d04:	49c00015 	stw	r7,0(r9)
   45d08:	423fff04 	addi	r8,r8,-4
   45d0c:	4a400104 	addi	r9,r9,4
   45d10:	223ffc36 	bltu	r4,r8,45d04 <memset+0x80>
   45d14:	313fff04 	addi	r4,r6,-4
   45d18:	2008d0ba 	srli	r4,r4,2
   45d1c:	318000cc 	andi	r6,r6,3
   45d20:	21000044 	addi	r4,r4,1
   45d24:	2109883a 	add	r4,r4,r4
   45d28:	2109883a 	add	r4,r4,r4
   45d2c:	1907883a 	add	r3,r3,r4
   45d30:	30000a26 	beq	r6,zero,45d5c <memset+0xd8>
   45d34:	198d883a 	add	r6,r3,r6
   45d38:	19400005 	stb	r5,0(r3)
   45d3c:	18c00044 	addi	r3,r3,1
   45d40:	19bffd1e 	bne	r3,r6,45d38 <memset+0xb4>
   45d44:	f800283a 	ret
   45d48:	2007883a 	mov	r3,r4
   45d4c:	303ff91e 	bne	r6,zero,45d34 <memset+0xb0>
   45d50:	00000206 	br	45d5c <memset+0xd8>
   45d54:	2007883a 	mov	r3,r4
   45d58:	003ff606 	br	45d34 <memset+0xb0>
   45d5c:	f800283a 	ret

00045d60 <_Balloc>:
   45d60:	20801317 	ldw	r2,76(r4)
   45d64:	defffc04 	addi	sp,sp,-16
   45d68:	dc400115 	stw	r17,4(sp)
   45d6c:	dc000015 	stw	r16,0(sp)
   45d70:	dfc00315 	stw	ra,12(sp)
   45d74:	dc800215 	stw	r18,8(sp)
   45d78:	2023883a 	mov	r17,r4
   45d7c:	2821883a 	mov	r16,r5
   45d80:	10000f26 	beq	r2,zero,45dc0 <_Balloc+0x60>
   45d84:	8407883a 	add	r3,r16,r16
   45d88:	18c7883a 	add	r3,r3,r3
   45d8c:	10c7883a 	add	r3,r2,r3
   45d90:	18800017 	ldw	r2,0(r3)
   45d94:	10001126 	beq	r2,zero,45ddc <_Balloc+0x7c>
   45d98:	11000017 	ldw	r4,0(r2)
   45d9c:	19000015 	stw	r4,0(r3)
   45da0:	10000415 	stw	zero,16(r2)
   45da4:	10000315 	stw	zero,12(r2)
   45da8:	dfc00317 	ldw	ra,12(sp)
   45dac:	dc800217 	ldw	r18,8(sp)
   45db0:	dc400117 	ldw	r17,4(sp)
   45db4:	dc000017 	ldw	r16,0(sp)
   45db8:	dec00404 	addi	sp,sp,16
   45dbc:	f800283a 	ret
   45dc0:	01400104 	movi	r5,4
   45dc4:	01800404 	movi	r6,16
   45dc8:	00476c40 	call	476c4 <_calloc_r>
   45dcc:	88801315 	stw	r2,76(r17)
   45dd0:	103fec1e 	bne	r2,zero,45d84 <_Balloc+0x24>
   45dd4:	0005883a 	mov	r2,zero
   45dd8:	003ff306 	br	45da8 <_Balloc+0x48>
   45ddc:	01400044 	movi	r5,1
   45de0:	2c24983a 	sll	r18,r5,r16
   45de4:	8809883a 	mov	r4,r17
   45de8:	91800144 	addi	r6,r18,5
   45dec:	318d883a 	add	r6,r6,r6
   45df0:	318d883a 	add	r6,r6,r6
   45df4:	00476c40 	call	476c4 <_calloc_r>
   45df8:	103ff626 	beq	r2,zero,45dd4 <_Balloc+0x74>
   45dfc:	14000115 	stw	r16,4(r2)
   45e00:	14800215 	stw	r18,8(r2)
   45e04:	003fe606 	br	45da0 <_Balloc+0x40>

00045e08 <_Bfree>:
   45e08:	28000826 	beq	r5,zero,45e2c <_Bfree+0x24>
   45e0c:	28c00117 	ldw	r3,4(r5)
   45e10:	20801317 	ldw	r2,76(r4)
   45e14:	18c7883a 	add	r3,r3,r3
   45e18:	18c7883a 	add	r3,r3,r3
   45e1c:	10c5883a 	add	r2,r2,r3
   45e20:	10c00017 	ldw	r3,0(r2)
   45e24:	28c00015 	stw	r3,0(r5)
   45e28:	11400015 	stw	r5,0(r2)
   45e2c:	f800283a 	ret

00045e30 <__multadd>:
   45e30:	defff604 	addi	sp,sp,-40
   45e34:	dd400515 	stw	r21,20(sp)
   45e38:	2d400417 	ldw	r21,16(r5)
   45e3c:	df000815 	stw	fp,32(sp)
   45e40:	ddc00715 	stw	r23,28(sp)
   45e44:	dd800615 	stw	r22,24(sp)
   45e48:	dd000415 	stw	r20,16(sp)
   45e4c:	dc400115 	stw	r17,4(sp)
   45e50:	dc000015 	stw	r16,0(sp)
   45e54:	dfc00915 	stw	ra,36(sp)
   45e58:	dcc00315 	stw	r19,12(sp)
   45e5c:	dc800215 	stw	r18,8(sp)
   45e60:	282d883a 	mov	r22,r5
   45e64:	202f883a 	mov	r23,r4
   45e68:	3029883a 	mov	r20,r6
   45e6c:	3839883a 	mov	fp,r7
   45e70:	2c000504 	addi	r16,r5,20
   45e74:	0023883a 	mov	r17,zero
   45e78:	84c00017 	ldw	r19,0(r16)
   45e7c:	a00b883a 	mov	r5,r20
   45e80:	8c400044 	addi	r17,r17,1
   45e84:	993fffcc 	andi	r4,r19,65535
   45e88:	00495d00 	call	495d0 <__mulsi3>
   45e8c:	1725883a 	add	r18,r2,fp
   45e90:	9808d43a 	srli	r4,r19,16
   45e94:	9026d43a 	srli	r19,r18,16
   45e98:	a00b883a 	mov	r5,r20
   45e9c:	00495d00 	call	495d0 <__mulsi3>
   45ea0:	988f883a 	add	r7,r19,r2
   45ea4:	3804943a 	slli	r2,r7,16
   45ea8:	94bfffcc 	andi	r18,r18,65535
   45eac:	3838d43a 	srli	fp,r7,16
   45eb0:	14a5883a 	add	r18,r2,r18
   45eb4:	84800015 	stw	r18,0(r16)
   45eb8:	84000104 	addi	r16,r16,4
   45ebc:	8d7fee16 	blt	r17,r21,45e78 <__multadd+0x48>
   45ec0:	e0000926 	beq	fp,zero,45ee8 <__multadd+0xb8>
   45ec4:	b0800217 	ldw	r2,8(r22)
   45ec8:	a880140e 	bge	r21,r2,45f1c <__multadd+0xec>
   45ecc:	a8800144 	addi	r2,r21,5
   45ed0:	1085883a 	add	r2,r2,r2
   45ed4:	1085883a 	add	r2,r2,r2
   45ed8:	b085883a 	add	r2,r22,r2
   45edc:	ad400044 	addi	r21,r21,1
   45ee0:	17000015 	stw	fp,0(r2)
   45ee4:	b5400415 	stw	r21,16(r22)
   45ee8:	b005883a 	mov	r2,r22
   45eec:	dfc00917 	ldw	ra,36(sp)
   45ef0:	df000817 	ldw	fp,32(sp)
   45ef4:	ddc00717 	ldw	r23,28(sp)
   45ef8:	dd800617 	ldw	r22,24(sp)
   45efc:	dd400517 	ldw	r21,20(sp)
   45f00:	dd000417 	ldw	r20,16(sp)
   45f04:	dcc00317 	ldw	r19,12(sp)
   45f08:	dc800217 	ldw	r18,8(sp)
   45f0c:	dc400117 	ldw	r17,4(sp)
   45f10:	dc000017 	ldw	r16,0(sp)
   45f14:	dec00a04 	addi	sp,sp,40
   45f18:	f800283a 	ret
   45f1c:	b1400117 	ldw	r5,4(r22)
   45f20:	b809883a 	mov	r4,r23
   45f24:	29400044 	addi	r5,r5,1
   45f28:	0045d600 	call	45d60 <_Balloc>
   45f2c:	b1800417 	ldw	r6,16(r22)
   45f30:	b1400304 	addi	r5,r22,12
   45f34:	11000304 	addi	r4,r2,12
   45f38:	31800084 	addi	r6,r6,2
   45f3c:	318d883a 	add	r6,r6,r6
   45f40:	318d883a 	add	r6,r6,r6
   45f44:	1021883a 	mov	r16,r2
   45f48:	00459b80 	call	459b8 <memcpy>
   45f4c:	b0c00117 	ldw	r3,4(r22)
   45f50:	b8801317 	ldw	r2,76(r23)
   45f54:	18c7883a 	add	r3,r3,r3
   45f58:	18c7883a 	add	r3,r3,r3
   45f5c:	10c5883a 	add	r2,r2,r3
   45f60:	10c00017 	ldw	r3,0(r2)
   45f64:	b0c00015 	stw	r3,0(r22)
   45f68:	15800015 	stw	r22,0(r2)
   45f6c:	802d883a 	mov	r22,r16
   45f70:	003fd606 	br	45ecc <__multadd+0x9c>

00045f74 <__s2b>:
   45f74:	defff904 	addi	sp,sp,-28
   45f78:	dd000415 	stw	r20,16(sp)
   45f7c:	dc400115 	stw	r17,4(sp)
   45f80:	2829883a 	mov	r20,r5
   45f84:	2023883a 	mov	r17,r4
   45f88:	01400244 	movi	r5,9
   45f8c:	39000204 	addi	r4,r7,8
   45f90:	dcc00315 	stw	r19,12(sp)
   45f94:	dc800215 	stw	r18,8(sp)
   45f98:	dfc00615 	stw	ra,24(sp)
   45f9c:	dd400515 	stw	r21,20(sp)
   45fa0:	dc000015 	stw	r16,0(sp)
   45fa4:	3825883a 	mov	r18,r7
   45fa8:	3027883a 	mov	r19,r6
   45fac:	00495140 	call	49514 <__divsi3>
   45fb0:	00c00044 	movi	r3,1
   45fb4:	000b883a 	mov	r5,zero
   45fb8:	1880030e 	bge	r3,r2,45fc8 <__s2b+0x54>
   45fbc:	18c7883a 	add	r3,r3,r3
   45fc0:	29400044 	addi	r5,r5,1
   45fc4:	18bffd16 	blt	r3,r2,45fbc <__s2b+0x48>
   45fc8:	8809883a 	mov	r4,r17
   45fcc:	0045d600 	call	45d60 <_Balloc>
   45fd0:	d8c00717 	ldw	r3,28(sp)
   45fd4:	10c00515 	stw	r3,20(r2)
   45fd8:	00c00044 	movi	r3,1
   45fdc:	10c00415 	stw	r3,16(r2)
   45fe0:	00c00244 	movi	r3,9
   45fe4:	1cc0210e 	bge	r3,r19,4606c <__s2b+0xf8>
   45fe8:	a0eb883a 	add	r21,r20,r3
   45fec:	a821883a 	mov	r16,r21
   45ff0:	a4e9883a 	add	r20,r20,r19
   45ff4:	81c00007 	ldb	r7,0(r16)
   45ff8:	8809883a 	mov	r4,r17
   45ffc:	84000044 	addi	r16,r16,1
   46000:	100b883a 	mov	r5,r2
   46004:	01800284 	movi	r6,10
   46008:	39fff404 	addi	r7,r7,-48
   4600c:	0045e300 	call	45e30 <__multadd>
   46010:	853ff81e 	bne	r16,r20,45ff4 <__s2b+0x80>
   46014:	ace1883a 	add	r16,r21,r19
   46018:	843ffe04 	addi	r16,r16,-8
   4601c:	9c800a0e 	bge	r19,r18,46048 <__s2b+0xd4>
   46020:	94e5c83a 	sub	r18,r18,r19
   46024:	84a5883a 	add	r18,r16,r18
   46028:	81c00007 	ldb	r7,0(r16)
   4602c:	8809883a 	mov	r4,r17
   46030:	84000044 	addi	r16,r16,1
   46034:	100b883a 	mov	r5,r2
   46038:	01800284 	movi	r6,10
   4603c:	39fff404 	addi	r7,r7,-48
   46040:	0045e300 	call	45e30 <__multadd>
   46044:	84bff81e 	bne	r16,r18,46028 <__s2b+0xb4>
   46048:	dfc00617 	ldw	ra,24(sp)
   4604c:	dd400517 	ldw	r21,20(sp)
   46050:	dd000417 	ldw	r20,16(sp)
   46054:	dcc00317 	ldw	r19,12(sp)
   46058:	dc800217 	ldw	r18,8(sp)
   4605c:	dc400117 	ldw	r17,4(sp)
   46060:	dc000017 	ldw	r16,0(sp)
   46064:	dec00704 	addi	sp,sp,28
   46068:	f800283a 	ret
   4606c:	a4000284 	addi	r16,r20,10
   46070:	1827883a 	mov	r19,r3
   46074:	003fe906 	br	4601c <__s2b+0xa8>

00046078 <__hi0bits>:
   46078:	20bfffec 	andhi	r2,r4,65535
   4607c:	1000141e 	bne	r2,zero,460d0 <__hi0bits+0x58>
   46080:	2008943a 	slli	r4,r4,16
   46084:	00800404 	movi	r2,16
   46088:	20ffc02c 	andhi	r3,r4,65280
   4608c:	1800021e 	bne	r3,zero,46098 <__hi0bits+0x20>
   46090:	2008923a 	slli	r4,r4,8
   46094:	10800204 	addi	r2,r2,8
   46098:	20fc002c 	andhi	r3,r4,61440
   4609c:	1800021e 	bne	r3,zero,460a8 <__hi0bits+0x30>
   460a0:	2008913a 	slli	r4,r4,4
   460a4:	10800104 	addi	r2,r2,4
   460a8:	20f0002c 	andhi	r3,r4,49152
   460ac:	1800031e 	bne	r3,zero,460bc <__hi0bits+0x44>
   460b0:	2109883a 	add	r4,r4,r4
   460b4:	10800084 	addi	r2,r2,2
   460b8:	2109883a 	add	r4,r4,r4
   460bc:	20000316 	blt	r4,zero,460cc <__hi0bits+0x54>
   460c0:	2110002c 	andhi	r4,r4,16384
   460c4:	2000041e 	bne	r4,zero,460d8 <__hi0bits+0x60>
   460c8:	00800804 	movi	r2,32
   460cc:	f800283a 	ret
   460d0:	0005883a 	mov	r2,zero
   460d4:	003fec06 	br	46088 <__hi0bits+0x10>
   460d8:	10800044 	addi	r2,r2,1
   460dc:	f800283a 	ret

000460e0 <__lo0bits>:
   460e0:	20c00017 	ldw	r3,0(r4)
   460e4:	188001cc 	andi	r2,r3,7
   460e8:	10000826 	beq	r2,zero,4610c <__lo0bits+0x2c>
   460ec:	1880004c 	andi	r2,r3,1
   460f0:	1000211e 	bne	r2,zero,46178 <__lo0bits+0x98>
   460f4:	1880008c 	andi	r2,r3,2
   460f8:	1000211e 	bne	r2,zero,46180 <__lo0bits+0xa0>
   460fc:	1806d0ba 	srli	r3,r3,2
   46100:	00800084 	movi	r2,2
   46104:	20c00015 	stw	r3,0(r4)
   46108:	f800283a 	ret
   4610c:	18bfffcc 	andi	r2,r3,65535
   46110:	10001326 	beq	r2,zero,46160 <__lo0bits+0x80>
   46114:	0005883a 	mov	r2,zero
   46118:	19403fcc 	andi	r5,r3,255
   4611c:	2800021e 	bne	r5,zero,46128 <__lo0bits+0x48>
   46120:	1806d23a 	srli	r3,r3,8
   46124:	10800204 	addi	r2,r2,8
   46128:	194003cc 	andi	r5,r3,15
   4612c:	2800021e 	bne	r5,zero,46138 <__lo0bits+0x58>
   46130:	1806d13a 	srli	r3,r3,4
   46134:	10800104 	addi	r2,r2,4
   46138:	194000cc 	andi	r5,r3,3
   4613c:	2800021e 	bne	r5,zero,46148 <__lo0bits+0x68>
   46140:	1806d0ba 	srli	r3,r3,2
   46144:	10800084 	addi	r2,r2,2
   46148:	1940004c 	andi	r5,r3,1
   4614c:	2800081e 	bne	r5,zero,46170 <__lo0bits+0x90>
   46150:	1806d07a 	srli	r3,r3,1
   46154:	1800051e 	bne	r3,zero,4616c <__lo0bits+0x8c>
   46158:	00800804 	movi	r2,32
   4615c:	f800283a 	ret
   46160:	1806d43a 	srli	r3,r3,16
   46164:	00800404 	movi	r2,16
   46168:	003feb06 	br	46118 <__lo0bits+0x38>
   4616c:	10800044 	addi	r2,r2,1
   46170:	20c00015 	stw	r3,0(r4)
   46174:	f800283a 	ret
   46178:	0005883a 	mov	r2,zero
   4617c:	f800283a 	ret
   46180:	1806d07a 	srli	r3,r3,1
   46184:	00800044 	movi	r2,1
   46188:	20c00015 	stw	r3,0(r4)
   4618c:	f800283a 	ret

00046190 <__i2b>:
   46190:	defffd04 	addi	sp,sp,-12
   46194:	dc000015 	stw	r16,0(sp)
   46198:	04000044 	movi	r16,1
   4619c:	dc400115 	stw	r17,4(sp)
   461a0:	2823883a 	mov	r17,r5
   461a4:	800b883a 	mov	r5,r16
   461a8:	dfc00215 	stw	ra,8(sp)
   461ac:	0045d600 	call	45d60 <_Balloc>
   461b0:	14400515 	stw	r17,20(r2)
   461b4:	14000415 	stw	r16,16(r2)
   461b8:	dfc00217 	ldw	ra,8(sp)
   461bc:	dc400117 	ldw	r17,4(sp)
   461c0:	dc000017 	ldw	r16,0(sp)
   461c4:	dec00304 	addi	sp,sp,12
   461c8:	f800283a 	ret

000461cc <__multiply>:
   461cc:	defff004 	addi	sp,sp,-64
   461d0:	dc800815 	stw	r18,32(sp)
   461d4:	dc400715 	stw	r17,28(sp)
   461d8:	34800417 	ldw	r18,16(r6)
   461dc:	2c400417 	ldw	r17,16(r5)
   461e0:	ddc00d15 	stw	r23,52(sp)
   461e4:	dc000615 	stw	r16,24(sp)
   461e8:	dfc00f15 	stw	ra,60(sp)
   461ec:	df000e15 	stw	fp,56(sp)
   461f0:	dd800c15 	stw	r22,48(sp)
   461f4:	dd400b15 	stw	r21,44(sp)
   461f8:	dd000a15 	stw	r20,40(sp)
   461fc:	dcc00915 	stw	r19,36(sp)
   46200:	2821883a 	mov	r16,r5
   46204:	302f883a 	mov	r23,r6
   46208:	8c80050e 	bge	r17,r18,46220 <__multiply+0x54>
   4620c:	8807883a 	mov	r3,r17
   46210:	3021883a 	mov	r16,r6
   46214:	9023883a 	mov	r17,r18
   46218:	282f883a 	mov	r23,r5
   4621c:	1825883a 	mov	r18,r3
   46220:	80800217 	ldw	r2,8(r16)
   46224:	8c87883a 	add	r3,r17,r18
   46228:	d8c00115 	stw	r3,4(sp)
   4622c:	81400117 	ldw	r5,4(r16)
   46230:	10c0010e 	bge	r2,r3,46238 <__multiply+0x6c>
   46234:	29400044 	addi	r5,r5,1
   46238:	0045d600 	call	45d60 <_Balloc>
   4623c:	d8c00117 	ldw	r3,4(sp)
   46240:	d8800515 	stw	r2,20(sp)
   46244:	14c00504 	addi	r19,r2,20
   46248:	1d400144 	addi	r21,r3,5
   4624c:	ad6b883a 	add	r21,r21,r21
   46250:	ad6b883a 	add	r21,r21,r21
   46254:	156b883a 	add	r21,r2,r21
   46258:	dd400215 	stw	r21,8(sp)
   4625c:	9805883a 	mov	r2,r19
   46260:	9d40042e 	bgeu	r19,r21,46274 <__multiply+0xa8>
   46264:	d8c00217 	ldw	r3,8(sp)
   46268:	10000015 	stw	zero,0(r2)
   4626c:	10800104 	addi	r2,r2,4
   46270:	10fffc36 	bltu	r2,r3,46264 <__multiply+0x98>
   46274:	94800144 	addi	r18,r18,5
   46278:	94a5883a 	add	r18,r18,r18
   4627c:	94ad883a 	add	r22,r18,r18
   46280:	8c400144 	addi	r17,r17,5
   46284:	8c63883a 	add	r17,r17,r17
   46288:	bdad883a 	add	r22,r23,r22
   4628c:	80c00504 	addi	r3,r16,20
   46290:	8c63883a 	add	r17,r17,r17
   46294:	bc800504 	addi	r18,r23,20
   46298:	dd800315 	stw	r22,12(sp)
   4629c:	d8c00415 	stw	r3,16(sp)
   462a0:	dcc00015 	stw	r19,0(sp)
   462a4:	8463883a 	add	r17,r16,r17
   462a8:	9580412e 	bgeu	r18,r22,463b0 <__multiply+0x1e4>
   462ac:	90800017 	ldw	r2,0(r18)
   462b0:	173fffcc 	andi	fp,r2,65535
   462b4:	e0001a26 	beq	fp,zero,46320 <__multiply+0x154>
   462b8:	dd000017 	ldw	r20,0(sp)
   462bc:	dd800417 	ldw	r22,16(sp)
   462c0:	002b883a 	mov	r21,zero
   462c4:	b4c00017 	ldw	r19,0(r22)
   462c8:	a4000017 	ldw	r16,0(r20)
   462cc:	e00b883a 	mov	r5,fp
   462d0:	993fffcc 	andi	r4,r19,65535
   462d4:	00495d00 	call	495d0 <__mulsi3>
   462d8:	9808d43a 	srli	r4,r19,16
   462dc:	817fffcc 	andi	r5,r16,65535
   462e0:	1145883a 	add	r2,r2,r5
   462e4:	e00b883a 	mov	r5,fp
   462e8:	1567883a 	add	r19,r2,r21
   462ec:	8020d43a 	srli	r16,r16,16
   462f0:	00495d00 	call	495d0 <__mulsi3>
   462f4:	9808d43a 	srli	r4,r19,16
   462f8:	1405883a 	add	r2,r2,r16
   462fc:	a4c0000d 	sth	r19,0(r20)
   46300:	110f883a 	add	r7,r2,r4
   46304:	a1c0008d 	sth	r7,2(r20)
   46308:	b5800104 	addi	r22,r22,4
   4630c:	382ad43a 	srli	r21,r7,16
   46310:	a5000104 	addi	r20,r20,4
   46314:	b47feb36 	bltu	r22,r17,462c4 <__multiply+0xf8>
   46318:	a5400015 	stw	r21,0(r20)
   4631c:	90800017 	ldw	r2,0(r18)
   46320:	1038d43a 	srli	fp,r2,16
   46324:	e0001c26 	beq	fp,zero,46398 <__multiply+0x1cc>
   46328:	d8c00017 	ldw	r3,0(sp)
   4632c:	dd000417 	ldw	r20,16(sp)
   46330:	002b883a 	mov	r21,zero
   46334:	1d800017 	ldw	r22,0(r3)
   46338:	182f883a 	mov	r23,r3
   4633c:	b021883a 	mov	r16,r22
   46340:	a4c00017 	ldw	r19,0(r20)
   46344:	8020d43a 	srli	r16,r16,16
   46348:	e00b883a 	mov	r5,fp
   4634c:	993fffcc 	andi	r4,r19,65535
   46350:	00495d00 	call	495d0 <__mulsi3>
   46354:	1405883a 	add	r2,r2,r16
   46358:	9808d43a 	srli	r4,r19,16
   4635c:	156b883a 	add	r21,r2,r21
   46360:	bdc00104 	addi	r23,r23,4
   46364:	bdbfff0d 	sth	r22,-4(r23)
   46368:	bd7fff8d 	sth	r21,-2(r23)
   4636c:	bc000017 	ldw	r16,0(r23)
   46370:	e00b883a 	mov	r5,fp
   46374:	00495d00 	call	495d0 <__mulsi3>
   46378:	a80ed43a 	srli	r7,r21,16
   4637c:	813fffcc 	andi	r4,r16,65535
   46380:	2085883a 	add	r2,r4,r2
   46384:	11ed883a 	add	r22,r2,r7
   46388:	a5000104 	addi	r20,r20,4
   4638c:	b02ad43a 	srli	r21,r22,16
   46390:	a47feb36 	bltu	r20,r17,46340 <__multiply+0x174>
   46394:	bd800015 	stw	r22,0(r23)
   46398:	d8c00017 	ldw	r3,0(sp)
   4639c:	94800104 	addi	r18,r18,4
   463a0:	18c00104 	addi	r3,r3,4
   463a4:	d8c00015 	stw	r3,0(sp)
   463a8:	d8c00317 	ldw	r3,12(sp)
   463ac:	90ffbf36 	bltu	r18,r3,462ac <__multiply+0xe0>
   463b0:	d8c00117 	ldw	r3,4(sp)
   463b4:	00c00c0e 	bge	zero,r3,463e8 <__multiply+0x21c>
   463b8:	d8c00217 	ldw	r3,8(sp)
   463bc:	18bfff17 	ldw	r2,-4(r3)
   463c0:	1d7fff04 	addi	r21,r3,-4
   463c4:	10000326 	beq	r2,zero,463d4 <__multiply+0x208>
   463c8:	00000706 	br	463e8 <__multiply+0x21c>
   463cc:	a8800017 	ldw	r2,0(r21)
   463d0:	1000051e 	bne	r2,zero,463e8 <__multiply+0x21c>
   463d4:	d8c00117 	ldw	r3,4(sp)
   463d8:	ad7fff04 	addi	r21,r21,-4
   463dc:	18ffffc4 	addi	r3,r3,-1
   463e0:	d8c00115 	stw	r3,4(sp)
   463e4:	183ff91e 	bne	r3,zero,463cc <__multiply+0x200>
   463e8:	d8800517 	ldw	r2,20(sp)
   463ec:	d8c00117 	ldw	r3,4(sp)
   463f0:	10c00415 	stw	r3,16(r2)
   463f4:	dfc00f17 	ldw	ra,60(sp)
   463f8:	df000e17 	ldw	fp,56(sp)
   463fc:	ddc00d17 	ldw	r23,52(sp)
   46400:	dd800c17 	ldw	r22,48(sp)
   46404:	dd400b17 	ldw	r21,44(sp)
   46408:	dd000a17 	ldw	r20,40(sp)
   4640c:	dcc00917 	ldw	r19,36(sp)
   46410:	dc800817 	ldw	r18,32(sp)
   46414:	dc400717 	ldw	r17,28(sp)
   46418:	dc000617 	ldw	r16,24(sp)
   4641c:	dec01004 	addi	sp,sp,64
   46420:	f800283a 	ret

00046424 <__pow5mult>:
   46424:	defffb04 	addi	sp,sp,-20
   46428:	dcc00315 	stw	r19,12(sp)
   4642c:	dc800215 	stw	r18,8(sp)
   46430:	dc000015 	stw	r16,0(sp)
   46434:	dfc00415 	stw	ra,16(sp)
   46438:	dc400115 	stw	r17,4(sp)
   4643c:	308000cc 	andi	r2,r6,3
   46440:	3021883a 	mov	r16,r6
   46444:	2027883a 	mov	r19,r4
   46448:	2825883a 	mov	r18,r5
   4644c:	10002e1e 	bne	r2,zero,46508 <__pow5mult+0xe4>
   46450:	8021d0ba 	srai	r16,r16,2
   46454:	80001a26 	beq	r16,zero,464c0 <__pow5mult+0x9c>
   46458:	9c401217 	ldw	r17,72(r19)
   4645c:	8800061e 	bne	r17,zero,46478 <__pow5mult+0x54>
   46460:	00003406 	br	46534 <__pow5mult+0x110>
   46464:	8021d07a 	srai	r16,r16,1
   46468:	80001526 	beq	r16,zero,464c0 <__pow5mult+0x9c>
   4646c:	88c00017 	ldw	r3,0(r17)
   46470:	18001b26 	beq	r3,zero,464e0 <__pow5mult+0xbc>
   46474:	1823883a 	mov	r17,r3
   46478:	80c0004c 	andi	r3,r16,1
   4647c:	183ff926 	beq	r3,zero,46464 <__pow5mult+0x40>
   46480:	900b883a 	mov	r5,r18
   46484:	880d883a 	mov	r6,r17
   46488:	9809883a 	mov	r4,r19
   4648c:	00461cc0 	call	461cc <__multiply>
   46490:	90001b26 	beq	r18,zero,46500 <__pow5mult+0xdc>
   46494:	91000117 	ldw	r4,4(r18)
   46498:	98c01317 	ldw	r3,76(r19)
   4649c:	8021d07a 	srai	r16,r16,1
   464a0:	2109883a 	add	r4,r4,r4
   464a4:	2109883a 	add	r4,r4,r4
   464a8:	1907883a 	add	r3,r3,r4
   464ac:	19000017 	ldw	r4,0(r3)
   464b0:	91000015 	stw	r4,0(r18)
   464b4:	1c800015 	stw	r18,0(r3)
   464b8:	1025883a 	mov	r18,r2
   464bc:	803feb1e 	bne	r16,zero,4646c <__pow5mult+0x48>
   464c0:	9005883a 	mov	r2,r18
   464c4:	dfc00417 	ldw	ra,16(sp)
   464c8:	dcc00317 	ldw	r19,12(sp)
   464cc:	dc800217 	ldw	r18,8(sp)
   464d0:	dc400117 	ldw	r17,4(sp)
   464d4:	dc000017 	ldw	r16,0(sp)
   464d8:	dec00504 	addi	sp,sp,20
   464dc:	f800283a 	ret
   464e0:	880b883a 	mov	r5,r17
   464e4:	880d883a 	mov	r6,r17
   464e8:	9809883a 	mov	r4,r19
   464ec:	00461cc0 	call	461cc <__multiply>
   464f0:	88800015 	stw	r2,0(r17)
   464f4:	10000015 	stw	zero,0(r2)
   464f8:	1023883a 	mov	r17,r2
   464fc:	003fde06 	br	46478 <__pow5mult+0x54>
   46500:	1025883a 	mov	r18,r2
   46504:	003fd706 	br	46464 <__pow5mult+0x40>
   46508:	10bfffc4 	addi	r2,r2,-1
   4650c:	1085883a 	add	r2,r2,r2
   46510:	00c00074 	movhi	r3,1
   46514:	18c0ac04 	addi	r3,r3,688
   46518:	1085883a 	add	r2,r2,r2
   4651c:	1885883a 	add	r2,r3,r2
   46520:	11800017 	ldw	r6,0(r2)
   46524:	000f883a 	mov	r7,zero
   46528:	0045e300 	call	45e30 <__multadd>
   4652c:	1025883a 	mov	r18,r2
   46530:	003fc706 	br	46450 <__pow5mult+0x2c>
   46534:	9809883a 	mov	r4,r19
   46538:	01409c44 	movi	r5,625
   4653c:	00461900 	call	46190 <__i2b>
   46540:	98801215 	stw	r2,72(r19)
   46544:	1023883a 	mov	r17,r2
   46548:	10000015 	stw	zero,0(r2)
   4654c:	003fca06 	br	46478 <__pow5mult+0x54>

00046550 <__lshift>:
   46550:	defff904 	addi	sp,sp,-28
   46554:	dd400515 	stw	r21,20(sp)
   46558:	dc400115 	stw	r17,4(sp)
   4655c:	2d400417 	ldw	r21,16(r5)
   46560:	3023d17a 	srai	r17,r6,5
   46564:	28800217 	ldw	r2,8(r5)
   46568:	dd000415 	stw	r20,16(sp)
   4656c:	8d6b883a 	add	r21,r17,r21
   46570:	dcc00315 	stw	r19,12(sp)
   46574:	dc800215 	stw	r18,8(sp)
   46578:	dc000015 	stw	r16,0(sp)
   4657c:	dfc00615 	stw	ra,24(sp)
   46580:	ac000044 	addi	r16,r21,1
   46584:	2825883a 	mov	r18,r5
   46588:	3029883a 	mov	r20,r6
   4658c:	2027883a 	mov	r19,r4
   46590:	29400117 	ldw	r5,4(r5)
   46594:	1400030e 	bge	r2,r16,465a4 <__lshift+0x54>
   46598:	1085883a 	add	r2,r2,r2
   4659c:	29400044 	addi	r5,r5,1
   465a0:	143ffd16 	blt	r2,r16,46598 <__lshift+0x48>
   465a4:	9809883a 	mov	r4,r19
   465a8:	0045d600 	call	45d60 <_Balloc>
   465ac:	10c00504 	addi	r3,r2,20
   465b0:	0440090e 	bge	zero,r17,465d8 <__lshift+0x88>
   465b4:	000f883a 	mov	r7,zero
   465b8:	18000015 	stw	zero,0(r3)
   465bc:	39c00044 	addi	r7,r7,1
   465c0:	18c00104 	addi	r3,r3,4
   465c4:	3c7ffc1e 	bne	r7,r17,465b8 <__lshift+0x68>
   465c8:	38c00144 	addi	r3,r7,5
   465cc:	18c7883a 	add	r3,r3,r3
   465d0:	18c7883a 	add	r3,r3,r3
   465d4:	10c7883a 	add	r3,r2,r3
   465d8:	92000417 	ldw	r8,16(r18)
   465dc:	a18007cc 	andi	r6,r20,31
   465e0:	91c00504 	addi	r7,r18,20
   465e4:	42000144 	addi	r8,r8,5
   465e8:	4211883a 	add	r8,r8,r8
   465ec:	4211883a 	add	r8,r8,r8
   465f0:	9211883a 	add	r8,r18,r8
   465f4:	30002226 	beq	r6,zero,46680 <__lshift+0x130>
   465f8:	02800804 	movi	r10,32
   465fc:	5195c83a 	sub	r10,r10,r6
   46600:	000b883a 	mov	r5,zero
   46604:	3a400017 	ldw	r9,0(r7)
   46608:	18c00104 	addi	r3,r3,4
   4660c:	39c00104 	addi	r7,r7,4
   46610:	4992983a 	sll	r9,r9,r6
   46614:	2a4ab03a 	or	r5,r5,r9
   46618:	197fff15 	stw	r5,-4(r3)
   4661c:	397fff17 	ldw	r5,-4(r7)
   46620:	2a8ad83a 	srl	r5,r5,r10
   46624:	3a3ff736 	bltu	r7,r8,46604 <__lshift+0xb4>
   46628:	19400015 	stw	r5,0(r3)
   4662c:	28000126 	beq	r5,zero,46634 <__lshift+0xe4>
   46630:	ac000084 	addi	r16,r21,2
   46634:	91000117 	ldw	r4,4(r18)
   46638:	98c01317 	ldw	r3,76(r19)
   4663c:	843fffc4 	addi	r16,r16,-1
   46640:	2109883a 	add	r4,r4,r4
   46644:	2109883a 	add	r4,r4,r4
   46648:	1907883a 	add	r3,r3,r4
   4664c:	19000017 	ldw	r4,0(r3)
   46650:	14000415 	stw	r16,16(r2)
   46654:	91000015 	stw	r4,0(r18)
   46658:	1c800015 	stw	r18,0(r3)
   4665c:	dfc00617 	ldw	ra,24(sp)
   46660:	dd400517 	ldw	r21,20(sp)
   46664:	dd000417 	ldw	r20,16(sp)
   46668:	dcc00317 	ldw	r19,12(sp)
   4666c:	dc800217 	ldw	r18,8(sp)
   46670:	dc400117 	ldw	r17,4(sp)
   46674:	dc000017 	ldw	r16,0(sp)
   46678:	dec00704 	addi	sp,sp,28
   4667c:	f800283a 	ret
   46680:	39400017 	ldw	r5,0(r7)
   46684:	18c00104 	addi	r3,r3,4
   46688:	39c00104 	addi	r7,r7,4
   4668c:	197fff15 	stw	r5,-4(r3)
   46690:	3a3fe82e 	bgeu	r7,r8,46634 <__lshift+0xe4>
   46694:	39400017 	ldw	r5,0(r7)
   46698:	18c00104 	addi	r3,r3,4
   4669c:	39c00104 	addi	r7,r7,4
   466a0:	197fff15 	stw	r5,-4(r3)
   466a4:	3a3ff636 	bltu	r7,r8,46680 <__lshift+0x130>
   466a8:	003fe206 	br	46634 <__lshift+0xe4>

000466ac <__mcmp>:
   466ac:	20800417 	ldw	r2,16(r4)
   466b0:	28c00417 	ldw	r3,16(r5)
   466b4:	10c5c83a 	sub	r2,r2,r3
   466b8:	10000f1e 	bne	r2,zero,466f8 <__mcmp+0x4c>
   466bc:	18c00144 	addi	r3,r3,5
   466c0:	18c7883a 	add	r3,r3,r3
   466c4:	18c7883a 	add	r3,r3,r3
   466c8:	21c00504 	addi	r7,r4,20
   466cc:	28cb883a 	add	r5,r5,r3
   466d0:	20c9883a 	add	r4,r4,r3
   466d4:	213fff04 	addi	r4,r4,-4
   466d8:	297fff04 	addi	r5,r5,-4
   466dc:	21800017 	ldw	r6,0(r4)
   466e0:	28c00017 	ldw	r3,0(r5)
   466e4:	30c0021e 	bne	r6,r3,466f0 <__mcmp+0x44>
   466e8:	393ffa36 	bltu	r7,r4,466d4 <__mcmp+0x28>
   466ec:	f800283a 	ret
   466f0:	30c00236 	bltu	r6,r3,466fc <__mcmp+0x50>
   466f4:	00800044 	movi	r2,1
   466f8:	f800283a 	ret
   466fc:	00bfffc4 	movi	r2,-1
   46700:	f800283a 	ret

00046704 <__mdiff>:
   46704:	defffb04 	addi	sp,sp,-20
   46708:	dc000015 	stw	r16,0(sp)
   4670c:	2821883a 	mov	r16,r5
   46710:	dc800215 	stw	r18,8(sp)
   46714:	300b883a 	mov	r5,r6
   46718:	2025883a 	mov	r18,r4
   4671c:	8009883a 	mov	r4,r16
   46720:	dc400115 	stw	r17,4(sp)
   46724:	dfc00415 	stw	ra,16(sp)
   46728:	dcc00315 	stw	r19,12(sp)
   4672c:	3023883a 	mov	r17,r6
   46730:	00466ac0 	call	466ac <__mcmp>
   46734:	10005026 	beq	r2,zero,46878 <__mdiff+0x174>
   46738:	10004a16 	blt	r2,zero,46864 <__mdiff+0x160>
   4673c:	0027883a 	mov	r19,zero
   46740:	81400117 	ldw	r5,4(r16)
   46744:	9009883a 	mov	r4,r18
   46748:	0045d600 	call	45d60 <_Balloc>
   4674c:	82400417 	ldw	r9,16(r16)
   46750:	89800417 	ldw	r6,16(r17)
   46754:	14c00315 	stw	r19,12(r2)
   46758:	4b800144 	addi	r14,r9,5
   4675c:	31800144 	addi	r6,r6,5
   46760:	739d883a 	add	r14,r14,r14
   46764:	318d883a 	add	r6,r6,r6
   46768:	739d883a 	add	r14,r14,r14
   4676c:	318d883a 	add	r6,r6,r6
   46770:	81c00504 	addi	r7,r16,20
   46774:	839d883a 	add	r14,r16,r14
   46778:	8a000504 	addi	r8,r17,20
   4677c:	898d883a 	add	r6,r17,r6
   46780:	10c00504 	addi	r3,r2,20
   46784:	0009883a 	mov	r4,zero
   46788:	3b000017 	ldw	r12,0(r7)
   4678c:	42c00017 	ldw	r11,0(r8)
   46790:	42000104 	addi	r8,r8,4
   46794:	62bfffcc 	andi	r10,r12,65535
   46798:	5b7fffcc 	andi	r13,r11,65535
   4679c:	5109883a 	add	r4,r10,r4
   467a0:	2355c83a 	sub	r10,r4,r13
   467a4:	5816d43a 	srli	r11,r11,16
   467a8:	6008d43a 	srli	r4,r12,16
   467ac:	501bd43a 	srai	r13,r10,16
   467b0:	1a80000d 	sth	r10,0(r3)
   467b4:	22c9c83a 	sub	r4,r4,r11
   467b8:	2349883a 	add	r4,r4,r13
   467bc:	1900008d 	sth	r4,2(r3)
   467c0:	39c00104 	addi	r7,r7,4
   467c4:	2009d43a 	srai	r4,r4,16
   467c8:	18c00104 	addi	r3,r3,4
   467cc:	41bfee36 	bltu	r8,r6,46788 <__mdiff+0x84>
   467d0:	180b883a 	mov	r5,r3
   467d4:	3815883a 	mov	r10,r7
   467d8:	3b80132e 	bgeu	r7,r14,46828 <__mdiff+0x124>
   467dc:	3a000017 	ldw	r8,0(r7)
   467e0:	18c00104 	addi	r3,r3,4
   467e4:	39c00104 	addi	r7,r7,4
   467e8:	41bfffcc 	andi	r6,r8,65535
   467ec:	310d883a 	add	r6,r6,r4
   467f0:	3009d43a 	srai	r4,r6,16
   467f4:	4010d43a 	srli	r8,r8,16
   467f8:	19bfff0d 	sth	r6,-4(r3)
   467fc:	2209883a 	add	r4,r4,r8
   46800:	193fff8d 	sth	r4,-2(r3)
   46804:	2009d43a 	srai	r4,r4,16
   46808:	3bbff436 	bltu	r7,r14,467dc <__mdiff+0xd8>
   4680c:	0286303a 	nor	r3,zero,r10
   46810:	1b87883a 	add	r3,r3,r14
   46814:	1806d0ba 	srli	r3,r3,2
   46818:	18c00044 	addi	r3,r3,1
   4681c:	18c7883a 	add	r3,r3,r3
   46820:	18c7883a 	add	r3,r3,r3
   46824:	28c7883a 	add	r3,r5,r3
   46828:	193fff17 	ldw	r4,-4(r3)
   4682c:	18ffff04 	addi	r3,r3,-4
   46830:	2000041e 	bne	r4,zero,46844 <__mdiff+0x140>
   46834:	18ffff04 	addi	r3,r3,-4
   46838:	19000017 	ldw	r4,0(r3)
   4683c:	4a7fffc4 	addi	r9,r9,-1
   46840:	203ffc26 	beq	r4,zero,46834 <__mdiff+0x130>
   46844:	12400415 	stw	r9,16(r2)
   46848:	dfc00417 	ldw	ra,16(sp)
   4684c:	dcc00317 	ldw	r19,12(sp)
   46850:	dc800217 	ldw	r18,8(sp)
   46854:	dc400117 	ldw	r17,4(sp)
   46858:	dc000017 	ldw	r16,0(sp)
   4685c:	dec00504 	addi	sp,sp,20
   46860:	f800283a 	ret
   46864:	8005883a 	mov	r2,r16
   46868:	04c00044 	movi	r19,1
   4686c:	8821883a 	mov	r16,r17
   46870:	1023883a 	mov	r17,r2
   46874:	003fb206 	br	46740 <__mdiff+0x3c>
   46878:	9009883a 	mov	r4,r18
   4687c:	000b883a 	mov	r5,zero
   46880:	0045d600 	call	45d60 <_Balloc>
   46884:	00c00044 	movi	r3,1
   46888:	10c00415 	stw	r3,16(r2)
   4688c:	10000515 	stw	zero,20(r2)
   46890:	dfc00417 	ldw	ra,16(sp)
   46894:	dcc00317 	ldw	r19,12(sp)
   46898:	dc800217 	ldw	r18,8(sp)
   4689c:	dc400117 	ldw	r17,4(sp)
   468a0:	dc000017 	ldw	r16,0(sp)
   468a4:	dec00504 	addi	sp,sp,20
   468a8:	f800283a 	ret

000468ac <__ulp>:
   468ac:	295ffc2c 	andhi	r5,r5,32752
   468b0:	00bf3034 	movhi	r2,64704
   468b4:	2887883a 	add	r3,r5,r2
   468b8:	00c0020e 	bge	zero,r3,468c4 <__ulp+0x18>
   468bc:	0005883a 	mov	r2,zero
   468c0:	f800283a 	ret
   468c4:	00c7c83a 	sub	r3,zero,r3
   468c8:	1805d53a 	srai	r2,r3,20
   468cc:	00c004c4 	movi	r3,19
   468d0:	18800a0e 	bge	r3,r2,468fc <__ulp+0x50>
   468d4:	01000c84 	movi	r4,50
   468d8:	0007883a 	mov	r3,zero
   468dc:	20800516 	blt	r4,r2,468f4 <__ulp+0x48>
   468e0:	01000cc4 	movi	r4,51
   468e4:	2085c83a 	sub	r2,r4,r2
   468e8:	01000044 	movi	r4,1
   468ec:	2084983a 	sll	r2,r4,r2
   468f0:	f800283a 	ret
   468f4:	00800044 	movi	r2,1
   468f8:	f800283a 	ret
   468fc:	00c00234 	movhi	r3,8
   46900:	1887d83a 	sra	r3,r3,r2
   46904:	0005883a 	mov	r2,zero
   46908:	f800283a 	ret

0004690c <__b2d>:
   4690c:	defffa04 	addi	sp,sp,-24
   46910:	dc000015 	stw	r16,0(sp)
   46914:	24000417 	ldw	r16,16(r4)
   46918:	dc400115 	stw	r17,4(sp)
   4691c:	dcc00315 	stw	r19,12(sp)
   46920:	84000144 	addi	r16,r16,5
   46924:	8421883a 	add	r16,r16,r16
   46928:	8421883a 	add	r16,r16,r16
   4692c:	2421883a 	add	r16,r4,r16
   46930:	847fff17 	ldw	r17,-4(r16)
   46934:	24c00504 	addi	r19,r4,20
   46938:	dd000415 	stw	r20,16(sp)
   4693c:	8809883a 	mov	r4,r17
   46940:	dc800215 	stw	r18,8(sp)
   46944:	2829883a 	mov	r20,r5
   46948:	dfc00515 	stw	ra,20(sp)
   4694c:	00460780 	call	46078 <__hi0bits>
   46950:	00c00804 	movi	r3,32
   46954:	1887c83a 	sub	r3,r3,r2
   46958:	a0c00015 	stw	r3,0(r20)
   4695c:	00c00284 	movi	r3,10
   46960:	84bfff04 	addi	r18,r16,-4
   46964:	18801216 	blt	r3,r2,469b0 <__b2d+0xa4>
   46968:	010002c4 	movi	r4,11
   4696c:	2089c83a 	sub	r4,r4,r2
   46970:	8906d83a 	srl	r3,r17,r4
   46974:	18cffc34 	orhi	r3,r3,16368
   46978:	9c80322e 	bgeu	r19,r18,46a44 <__b2d+0x138>
   4697c:	817ffe17 	ldw	r5,-8(r16)
   46980:	2908d83a 	srl	r4,r5,r4
   46984:	10800544 	addi	r2,r2,21
   46988:	88a2983a 	sll	r17,r17,r2
   4698c:	2444b03a 	or	r2,r4,r17
   46990:	dfc00517 	ldw	ra,20(sp)
   46994:	dd000417 	ldw	r20,16(sp)
   46998:	dcc00317 	ldw	r19,12(sp)
   4699c:	dc800217 	ldw	r18,8(sp)
   469a0:	dc400117 	ldw	r17,4(sp)
   469a4:	dc000017 	ldw	r16,0(sp)
   469a8:	dec00604 	addi	sp,sp,24
   469ac:	f800283a 	ret
   469b0:	9c801636 	bltu	r19,r18,46a0c <__b2d+0x100>
   469b4:	113ffd44 	addi	r4,r2,-11
   469b8:	000b883a 	mov	r5,zero
   469bc:	20001726 	beq	r4,zero,46a1c <__b2d+0x110>
   469c0:	00c00ac4 	movi	r3,43
   469c4:	1885c83a 	sub	r2,r3,r2
   469c8:	8906983a 	sll	r3,r17,r4
   469cc:	288cd83a 	srl	r6,r5,r2
   469d0:	18cffc34 	orhi	r3,r3,16368
   469d4:	1986b03a 	or	r3,r3,r6
   469d8:	9c801c2e 	bgeu	r19,r18,46a4c <__b2d+0x140>
   469dc:	91bfff17 	ldw	r6,-4(r18)
   469e0:	3084d83a 	srl	r2,r6,r2
   469e4:	2908983a 	sll	r4,r5,r4
   469e8:	1104b03a 	or	r2,r2,r4
   469ec:	dfc00517 	ldw	ra,20(sp)
   469f0:	dd000417 	ldw	r20,16(sp)
   469f4:	dcc00317 	ldw	r19,12(sp)
   469f8:	dc800217 	ldw	r18,8(sp)
   469fc:	dc400117 	ldw	r17,4(sp)
   46a00:	dc000017 	ldw	r16,0(sp)
   46a04:	dec00604 	addi	sp,sp,24
   46a08:	f800283a 	ret
   46a0c:	113ffd44 	addi	r4,r2,-11
   46a10:	84bffe04 	addi	r18,r16,-8
   46a14:	817ffe17 	ldw	r5,-8(r16)
   46a18:	203fe91e 	bne	r4,zero,469c0 <__b2d+0xb4>
   46a1c:	88cffc34 	orhi	r3,r17,16368
   46a20:	2805883a 	mov	r2,r5
   46a24:	dfc00517 	ldw	ra,20(sp)
   46a28:	dd000417 	ldw	r20,16(sp)
   46a2c:	dcc00317 	ldw	r19,12(sp)
   46a30:	dc800217 	ldw	r18,8(sp)
   46a34:	dc400117 	ldw	r17,4(sp)
   46a38:	dc000017 	ldw	r16,0(sp)
   46a3c:	dec00604 	addi	sp,sp,24
   46a40:	f800283a 	ret
   46a44:	0009883a 	mov	r4,zero
   46a48:	003fce06 	br	46984 <__b2d+0x78>
   46a4c:	0005883a 	mov	r2,zero
   46a50:	003fe406 	br	469e4 <__b2d+0xd8>

00046a54 <__d2b>:
   46a54:	defff804 	addi	sp,sp,-32
   46a58:	dc400315 	stw	r17,12(sp)
   46a5c:	3023883a 	mov	r17,r6
   46a60:	dc800415 	stw	r18,16(sp)
   46a64:	8824907a 	slli	r18,r17,1
   46a68:	dcc00515 	stw	r19,20(sp)
   46a6c:	2827883a 	mov	r19,r5
   46a70:	9024d57a 	srli	r18,r18,21
   46a74:	01400044 	movi	r5,1
   46a78:	dd000615 	stw	r20,24(sp)
   46a7c:	dc000215 	stw	r16,8(sp)
   46a80:	dfc00715 	stw	ra,28(sp)
   46a84:	3829883a 	mov	r20,r7
   46a88:	0045d600 	call	45d60 <_Balloc>
   46a8c:	1021883a 	mov	r16,r2
   46a90:	00800434 	movhi	r2,16
   46a94:	10bfffc4 	addi	r2,r2,-1
   46a98:	88a2703a 	and	r17,r17,r2
   46a9c:	90000126 	beq	r18,zero,46aa4 <__d2b+0x50>
   46aa0:	8c400434 	orhi	r17,r17,16
   46aa4:	dc400015 	stw	r17,0(sp)
   46aa8:	98002226 	beq	r19,zero,46b34 <__d2b+0xe0>
   46aac:	d9000104 	addi	r4,sp,4
   46ab0:	dcc00115 	stw	r19,4(sp)
   46ab4:	00460e00 	call	460e0 <__lo0bits>
   46ab8:	d8c00017 	ldw	r3,0(sp)
   46abc:	10002d1e 	bne	r2,zero,46b74 <__d2b+0x120>
   46ac0:	d9000117 	ldw	r4,4(sp)
   46ac4:	81000515 	stw	r4,20(r16)
   46ac8:	1823003a 	cmpeq	r17,r3,zero
   46acc:	01000084 	movi	r4,2
   46ad0:	2463c83a 	sub	r17,r4,r17
   46ad4:	80c00615 	stw	r3,24(r16)
   46ad8:	84400415 	stw	r17,16(r16)
   46adc:	90001d1e 	bne	r18,zero,46b54 <__d2b+0x100>
   46ae0:	88c00104 	addi	r3,r17,4
   46ae4:	18c7883a 	add	r3,r3,r3
   46ae8:	18c7883a 	add	r3,r3,r3
   46aec:	80c7883a 	add	r3,r16,r3
   46af0:	19000017 	ldw	r4,0(r3)
   46af4:	10bef384 	addi	r2,r2,-1074
   46af8:	a0800015 	stw	r2,0(r20)
   46afc:	00460780 	call	46078 <__hi0bits>
   46b00:	8822917a 	slli	r17,r17,5
   46b04:	d8c00817 	ldw	r3,32(sp)
   46b08:	8885c83a 	sub	r2,r17,r2
   46b0c:	18800015 	stw	r2,0(r3)
   46b10:	8005883a 	mov	r2,r16
   46b14:	dfc00717 	ldw	ra,28(sp)
   46b18:	dd000617 	ldw	r20,24(sp)
   46b1c:	dcc00517 	ldw	r19,20(sp)
   46b20:	dc800417 	ldw	r18,16(sp)
   46b24:	dc400317 	ldw	r17,12(sp)
   46b28:	dc000217 	ldw	r16,8(sp)
   46b2c:	dec00804 	addi	sp,sp,32
   46b30:	f800283a 	ret
   46b34:	d809883a 	mov	r4,sp
   46b38:	00460e00 	call	460e0 <__lo0bits>
   46b3c:	d8c00017 	ldw	r3,0(sp)
   46b40:	04400044 	movi	r17,1
   46b44:	84400415 	stw	r17,16(r16)
   46b48:	80c00515 	stw	r3,20(r16)
   46b4c:	10800804 	addi	r2,r2,32
   46b50:	903fe326 	beq	r18,zero,46ae0 <__d2b+0x8c>
   46b54:	00c00d44 	movi	r3,53
   46b58:	94bef344 	addi	r18,r18,-1075
   46b5c:	90a5883a 	add	r18,r18,r2
   46b60:	1885c83a 	sub	r2,r3,r2
   46b64:	d8c00817 	ldw	r3,32(sp)
   46b68:	a4800015 	stw	r18,0(r20)
   46b6c:	18800015 	stw	r2,0(r3)
   46b70:	003fe706 	br	46b10 <__d2b+0xbc>
   46b74:	01000804 	movi	r4,32
   46b78:	2089c83a 	sub	r4,r4,r2
   46b7c:	1908983a 	sll	r4,r3,r4
   46b80:	d9400117 	ldw	r5,4(sp)
   46b84:	1886d83a 	srl	r3,r3,r2
   46b88:	2148b03a 	or	r4,r4,r5
   46b8c:	81000515 	stw	r4,20(r16)
   46b90:	d8c00015 	stw	r3,0(sp)
   46b94:	003fcc06 	br	46ac8 <__d2b+0x74>

00046b98 <__ratio>:
   46b98:	defff904 	addi	sp,sp,-28
   46b9c:	dc400315 	stw	r17,12(sp)
   46ba0:	2823883a 	mov	r17,r5
   46ba4:	d9400104 	addi	r5,sp,4
   46ba8:	dfc00615 	stw	ra,24(sp)
   46bac:	dcc00515 	stw	r19,20(sp)
   46bb0:	dc800415 	stw	r18,16(sp)
   46bb4:	2027883a 	mov	r19,r4
   46bb8:	dc000215 	stw	r16,8(sp)
   46bbc:	004690c0 	call	4690c <__b2d>
   46bc0:	8809883a 	mov	r4,r17
   46bc4:	d80b883a 	mov	r5,sp
   46bc8:	1025883a 	mov	r18,r2
   46bcc:	1821883a 	mov	r16,r3
   46bd0:	004690c0 	call	4690c <__b2d>
   46bd4:	99400417 	ldw	r5,16(r19)
   46bd8:	89000417 	ldw	r4,16(r17)
   46bdc:	d9800117 	ldw	r6,4(sp)
   46be0:	2909c83a 	sub	r4,r5,r4
   46be4:	d9400017 	ldw	r5,0(sp)
   46be8:	2008917a 	slli	r4,r4,5
   46bec:	314bc83a 	sub	r5,r6,r5
   46bf0:	290b883a 	add	r5,r5,r4
   46bf4:	01400e0e 	bge	zero,r5,46c30 <__ratio+0x98>
   46bf8:	280a953a 	slli	r5,r5,20
   46bfc:	2c21883a 	add	r16,r5,r16
   46c00:	9009883a 	mov	r4,r18
   46c04:	800b883a 	mov	r5,r16
   46c08:	100d883a 	mov	r6,r2
   46c0c:	180f883a 	mov	r7,r3
   46c10:	0048e4c0 	call	48e4c <__divdf3>
   46c14:	dfc00617 	ldw	ra,24(sp)
   46c18:	dcc00517 	ldw	r19,20(sp)
   46c1c:	dc800417 	ldw	r18,16(sp)
   46c20:	dc400317 	ldw	r17,12(sp)
   46c24:	dc000217 	ldw	r16,8(sp)
   46c28:	dec00704 	addi	sp,sp,28
   46c2c:	f800283a 	ret
   46c30:	280a953a 	slli	r5,r5,20
   46c34:	1947c83a 	sub	r3,r3,r5
   46c38:	003ff106 	br	46c00 <__ratio+0x68>

00046c3c <_mprec_log10>:
   46c3c:	defffe04 	addi	sp,sp,-8
   46c40:	dc000015 	stw	r16,0(sp)
   46c44:	dfc00115 	stw	ra,4(sp)
   46c48:	008005c4 	movi	r2,23
   46c4c:	2021883a 	mov	r16,r4
   46c50:	11000d0e 	bge	r2,r4,46c88 <_mprec_log10+0x4c>
   46c54:	0005883a 	mov	r2,zero
   46c58:	00cffc34 	movhi	r3,16368
   46c5c:	843fffc4 	addi	r16,r16,-1
   46c60:	1009883a 	mov	r4,r2
   46c64:	180b883a 	mov	r5,r3
   46c68:	000d883a 	mov	r6,zero
   46c6c:	01d00934 	movhi	r7,16420
   46c70:	0048b680 	call	48b68 <__muldf3>
   46c74:	803ff91e 	bne	r16,zero,46c5c <_mprec_log10+0x20>
   46c78:	dfc00117 	ldw	ra,4(sp)
   46c7c:	dc000017 	ldw	r16,0(sp)
   46c80:	dec00204 	addi	sp,sp,8
   46c84:	f800283a 	ret
   46c88:	202090fa 	slli	r16,r4,3
   46c8c:	00800074 	movhi	r2,1
   46c90:	10807a04 	addi	r2,r2,488
   46c94:	1421883a 	add	r16,r2,r16
   46c98:	80800017 	ldw	r2,0(r16)
   46c9c:	80c00117 	ldw	r3,4(r16)
   46ca0:	dfc00117 	ldw	ra,4(sp)
   46ca4:	dc000017 	ldw	r16,0(sp)
   46ca8:	dec00204 	addi	sp,sp,8
   46cac:	f800283a 	ret

00046cb0 <__copybits>:
   46cb0:	297fffc4 	addi	r5,r5,-1
   46cb4:	31c00417 	ldw	r7,16(r6)
   46cb8:	2811d17a 	srai	r8,r5,5
   46cbc:	30800504 	addi	r2,r6,20
   46cc0:	39c00144 	addi	r7,r7,5
   46cc4:	42000044 	addi	r8,r8,1
   46cc8:	39cf883a 	add	r7,r7,r7
   46ccc:	4211883a 	add	r8,r8,r8
   46cd0:	39cf883a 	add	r7,r7,r7
   46cd4:	4211883a 	add	r8,r8,r8
   46cd8:	31cf883a 	add	r7,r6,r7
   46cdc:	2211883a 	add	r8,r4,r8
   46ce0:	11c00d2e 	bgeu	r2,r7,46d18 <__copybits+0x68>
   46ce4:	2007883a 	mov	r3,r4
   46ce8:	11400017 	ldw	r5,0(r2)
   46cec:	18c00104 	addi	r3,r3,4
   46cf0:	10800104 	addi	r2,r2,4
   46cf4:	197fff15 	stw	r5,-4(r3)
   46cf8:	11fffb36 	bltu	r2,r7,46ce8 <__copybits+0x38>
   46cfc:	3985c83a 	sub	r2,r7,r6
   46d00:	10bffac4 	addi	r2,r2,-21
   46d04:	1004d0ba 	srli	r2,r2,2
   46d08:	10800044 	addi	r2,r2,1
   46d0c:	1085883a 	add	r2,r2,r2
   46d10:	1085883a 	add	r2,r2,r2
   46d14:	2089883a 	add	r4,r4,r2
   46d18:	2200032e 	bgeu	r4,r8,46d28 <__copybits+0x78>
   46d1c:	20000015 	stw	zero,0(r4)
   46d20:	21000104 	addi	r4,r4,4
   46d24:	223ffd36 	bltu	r4,r8,46d1c <__copybits+0x6c>
   46d28:	f800283a 	ret

00046d2c <__any_on>:
   46d2c:	21800417 	ldw	r6,16(r4)
   46d30:	2805d17a 	srai	r2,r5,5
   46d34:	20c00504 	addi	r3,r4,20
   46d38:	30800f0e 	bge	r6,r2,46d78 <__any_on+0x4c>
   46d3c:	3005883a 	mov	r2,r6
   46d40:	10800144 	addi	r2,r2,5
   46d44:	1085883a 	add	r2,r2,r2
   46d48:	1085883a 	add	r2,r2,r2
   46d4c:	2089883a 	add	r4,r4,r2
   46d50:	1900152e 	bgeu	r3,r4,46da8 <__any_on+0x7c>
   46d54:	20bfff17 	ldw	r2,-4(r4)
   46d58:	213fff04 	addi	r4,r4,-4
   46d5c:	1000041e 	bne	r2,zero,46d70 <__any_on+0x44>
   46d60:	1900112e 	bgeu	r3,r4,46da8 <__any_on+0x7c>
   46d64:	213fff04 	addi	r4,r4,-4
   46d68:	20800017 	ldw	r2,0(r4)
   46d6c:	103ffc26 	beq	r2,zero,46d60 <__any_on+0x34>
   46d70:	00800044 	movi	r2,1
   46d74:	f800283a 	ret
   46d78:	11bff10e 	bge	r2,r6,46d40 <__any_on+0x14>
   46d7c:	294007cc 	andi	r5,r5,31
   46d80:	283fef26 	beq	r5,zero,46d40 <__any_on+0x14>
   46d84:	11800144 	addi	r6,r2,5
   46d88:	318d883a 	add	r6,r6,r6
   46d8c:	318d883a 	add	r6,r6,r6
   46d90:	218d883a 	add	r6,r4,r6
   46d94:	31800017 	ldw	r6,0(r6)
   46d98:	314ed83a 	srl	r7,r6,r5
   46d9c:	394a983a 	sll	r5,r7,r5
   46da0:	29bff31e 	bne	r5,r6,46d70 <__any_on+0x44>
   46da4:	003fe606 	br	46d40 <__any_on+0x14>
   46da8:	0005883a 	mov	r2,zero
   46dac:	f800283a 	ret

00046db0 <_realloc_r>:
   46db0:	defff504 	addi	sp,sp,-44
   46db4:	dd400615 	stw	r21,24(sp)
   46db8:	dc800315 	stw	r18,12(sp)
   46dbc:	dc000115 	stw	r16,4(sp)
   46dc0:	dfc00a15 	stw	ra,40(sp)
   46dc4:	df000915 	stw	fp,36(sp)
   46dc8:	ddc00815 	stw	r23,32(sp)
   46dcc:	dd800715 	stw	r22,28(sp)
   46dd0:	dd000515 	stw	r20,20(sp)
   46dd4:	dcc00415 	stw	r19,16(sp)
   46dd8:	dc400215 	stw	r17,8(sp)
   46ddc:	2821883a 	mov	r16,r5
   46de0:	202b883a 	mov	r21,r4
   46de4:	3025883a 	mov	r18,r6
   46de8:	28009626 	beq	r5,zero,47044 <_realloc_r+0x294>
   46dec:	004a1f80 	call	4a1f8 <__malloc_lock>
   46df0:	80bfff17 	ldw	r2,-4(r16)
   46df4:	04ffff04 	movi	r19,-4
   46df8:	90c002c4 	addi	r3,r18,11
   46dfc:	01000584 	movi	r4,22
   46e00:	85bffe04 	addi	r22,r16,-8
   46e04:	14e6703a 	and	r19,r2,r19
   46e08:	20c0372e 	bgeu	r4,r3,46ee8 <_realloc_r+0x138>
   46e0c:	047ffe04 	movi	r17,-8
   46e10:	1c62703a 	and	r17,r3,r17
   46e14:	8807883a 	mov	r3,r17
   46e18:	88005a16 	blt	r17,zero,46f84 <_realloc_r+0x1d4>
   46e1c:	8c805936 	bltu	r17,r18,46f84 <_realloc_r+0x1d4>
   46e20:	98c0340e 	bge	r19,r3,46ef4 <_realloc_r+0x144>
   46e24:	07000074 	movhi	fp,1
   46e28:	e7020404 	addi	fp,fp,2064
   46e2c:	e1400217 	ldw	r5,8(fp)
   46e30:	b4c9883a 	add	r4,r22,r19
   46e34:	29009026 	beq	r5,r4,47078 <_realloc_r+0x2c8>
   46e38:	21800117 	ldw	r6,4(r4)
   46e3c:	01ffff84 	movi	r7,-2
   46e40:	31ce703a 	and	r7,r6,r7
   46e44:	21cf883a 	add	r7,r4,r7
   46e48:	39c00117 	ldw	r7,4(r7)
   46e4c:	39c0004c 	andi	r7,r7,1
   46e50:	38004326 	beq	r7,zero,46f60 <_realloc_r+0x1b0>
   46e54:	000d883a 	mov	r6,zero
   46e58:	0009883a 	mov	r4,zero
   46e5c:	1080004c 	andi	r2,r2,1
   46e60:	10005a1e 	bne	r2,zero,46fcc <_realloc_r+0x21c>
   46e64:	85fffe17 	ldw	r23,-8(r16)
   46e68:	00bfff04 	movi	r2,-4
   46e6c:	b5efc83a 	sub	r23,r22,r23
   46e70:	b9c00117 	ldw	r7,4(r23)
   46e74:	388e703a 	and	r7,r7,r2
   46e78:	3ccf883a 	add	r7,r7,r19
   46e7c:	20005226 	beq	r4,zero,46fc8 <_realloc_r+0x218>
   46e80:	31e9883a 	add	r20,r6,r7
   46e84:	2140c726 	beq	r4,r5,471a4 <_realloc_r+0x3f4>
   46e88:	a0c04f16 	blt	r20,r3,46fc8 <_realloc_r+0x218>
   46e8c:	20800317 	ldw	r2,12(r4)
   46e90:	20c00217 	ldw	r3,8(r4)
   46e94:	99bfff04 	addi	r6,r19,-4
   46e98:	01000904 	movi	r4,36
   46e9c:	18800315 	stw	r2,12(r3)
   46ea0:	10c00215 	stw	r3,8(r2)
   46ea4:	b8c00217 	ldw	r3,8(r23)
   46ea8:	b8800317 	ldw	r2,12(r23)
   46eac:	bc800204 	addi	r18,r23,8
   46eb0:	18800315 	stw	r2,12(r3)
   46eb4:	10c00215 	stw	r3,8(r2)
   46eb8:	2180ed36 	bltu	r4,r6,47270 <_realloc_r+0x4c0>
   46ebc:	008004c4 	movi	r2,19
   46ec0:	11809b2e 	bgeu	r2,r6,47130 <_realloc_r+0x380>
   46ec4:	80800017 	ldw	r2,0(r16)
   46ec8:	b8800215 	stw	r2,8(r23)
   46ecc:	80800117 	ldw	r2,4(r16)
   46ed0:	b8800315 	stw	r2,12(r23)
   46ed4:	008006c4 	movi	r2,27
   46ed8:	1180f936 	bltu	r2,r6,472c0 <_realloc_r+0x510>
   46edc:	b8800404 	addi	r2,r23,16
   46ee0:	80c00204 	addi	r3,r16,8
   46ee4:	00009406 	br	47138 <_realloc_r+0x388>
   46ee8:	00c00404 	movi	r3,16
   46eec:	1823883a 	mov	r17,r3
   46ef0:	003fca06 	br	46e1c <_realloc_r+0x6c>
   46ef4:	9829883a 	mov	r20,r19
   46ef8:	a447c83a 	sub	r3,r20,r17
   46efc:	010003c4 	movi	r4,15
   46f00:	1080004c 	andi	r2,r2,1
   46f04:	20c02336 	bltu	r4,r3,46f94 <_realloc_r+0x1e4>
   46f08:	1504b03a 	or	r2,r2,r20
   46f0c:	b0800115 	stw	r2,4(r22)
   46f10:	b52d883a 	add	r22,r22,r20
   46f14:	b0800117 	ldw	r2,4(r22)
   46f18:	10800054 	ori	r2,r2,1
   46f1c:	b0800115 	stw	r2,4(r22)
   46f20:	a809883a 	mov	r4,r21
   46f24:	004a2180 	call	4a218 <__malloc_unlock>
   46f28:	8025883a 	mov	r18,r16
   46f2c:	9005883a 	mov	r2,r18
   46f30:	dfc00a17 	ldw	ra,40(sp)
   46f34:	df000917 	ldw	fp,36(sp)
   46f38:	ddc00817 	ldw	r23,32(sp)
   46f3c:	dd800717 	ldw	r22,28(sp)
   46f40:	dd400617 	ldw	r21,24(sp)
   46f44:	dd000517 	ldw	r20,20(sp)
   46f48:	dcc00417 	ldw	r19,16(sp)
   46f4c:	dc800317 	ldw	r18,12(sp)
   46f50:	dc400217 	ldw	r17,8(sp)
   46f54:	dc000117 	ldw	r16,4(sp)
   46f58:	dec00b04 	addi	sp,sp,44
   46f5c:	f800283a 	ret
   46f60:	01ffff04 	movi	r7,-4
   46f64:	31cc703a 	and	r6,r6,r7
   46f68:	34e9883a 	add	r20,r6,r19
   46f6c:	a0ffbb16 	blt	r20,r3,46e5c <_realloc_r+0xac>
   46f70:	20c00317 	ldw	r3,12(r4)
   46f74:	21000217 	ldw	r4,8(r4)
   46f78:	20c00315 	stw	r3,12(r4)
   46f7c:	19000215 	stw	r4,8(r3)
   46f80:	003fdd06 	br	46ef8 <_realloc_r+0x148>
   46f84:	00800304 	movi	r2,12
   46f88:	a8800015 	stw	r2,0(r21)
   46f8c:	0025883a 	mov	r18,zero
   46f90:	003fe606 	br	46f2c <_realloc_r+0x17c>
   46f94:	1444b03a 	or	r2,r2,r17
   46f98:	b0800115 	stw	r2,4(r22)
   46f9c:	b44b883a 	add	r5,r22,r17
   46fa0:	18800054 	ori	r2,r3,1
   46fa4:	28800115 	stw	r2,4(r5)
   46fa8:	28c7883a 	add	r3,r5,r3
   46fac:	18800117 	ldw	r2,4(r3)
   46fb0:	a809883a 	mov	r4,r21
   46fb4:	29400204 	addi	r5,r5,8
   46fb8:	10800054 	ori	r2,r2,1
   46fbc:	18800115 	stw	r2,4(r3)
   46fc0:	00445a40 	call	445a4 <_free_r>
   46fc4:	003fd606 	br	46f20 <_realloc_r+0x170>
   46fc8:	38c0330e 	bge	r7,r3,47098 <_realloc_r+0x2e8>
   46fcc:	900b883a 	mov	r5,r18
   46fd0:	a809883a 	mov	r4,r21
   46fd4:	004513c0 	call	4513c <_malloc_r>
   46fd8:	1025883a 	mov	r18,r2
   46fdc:	10001626 	beq	r2,zero,47038 <_realloc_r+0x288>
   46fe0:	80bfff17 	ldw	r2,-4(r16)
   46fe4:	00ffff84 	movi	r3,-2
   46fe8:	913ffe04 	addi	r4,r18,-8
   46fec:	10c6703a 	and	r3,r2,r3
   46ff0:	b0c7883a 	add	r3,r22,r3
   46ff4:	20c09926 	beq	r4,r3,4725c <_realloc_r+0x4ac>
   46ff8:	99bfff04 	addi	r6,r19,-4
   46ffc:	00800904 	movi	r2,36
   47000:	11806436 	bltu	r2,r6,47194 <_realloc_r+0x3e4>
   47004:	00c004c4 	movi	r3,19
   47008:	19804036 	bltu	r3,r6,4710c <_realloc_r+0x35c>
   4700c:	9005883a 	mov	r2,r18
   47010:	8007883a 	mov	r3,r16
   47014:	19000017 	ldw	r4,0(r3)
   47018:	11000015 	stw	r4,0(r2)
   4701c:	19000117 	ldw	r4,4(r3)
   47020:	11000115 	stw	r4,4(r2)
   47024:	18c00217 	ldw	r3,8(r3)
   47028:	10c00215 	stw	r3,8(r2)
   4702c:	a809883a 	mov	r4,r21
   47030:	800b883a 	mov	r5,r16
   47034:	00445a40 	call	445a4 <_free_r>
   47038:	a809883a 	mov	r4,r21
   4703c:	004a2180 	call	4a218 <__malloc_unlock>
   47040:	003fba06 	br	46f2c <_realloc_r+0x17c>
   47044:	300b883a 	mov	r5,r6
   47048:	dfc00a17 	ldw	ra,40(sp)
   4704c:	df000917 	ldw	fp,36(sp)
   47050:	ddc00817 	ldw	r23,32(sp)
   47054:	dd800717 	ldw	r22,28(sp)
   47058:	dd400617 	ldw	r21,24(sp)
   4705c:	dd000517 	ldw	r20,20(sp)
   47060:	dcc00417 	ldw	r19,16(sp)
   47064:	dc800317 	ldw	r18,12(sp)
   47068:	dc400217 	ldw	r17,8(sp)
   4706c:	dc000117 	ldw	r16,4(sp)
   47070:	dec00b04 	addi	sp,sp,44
   47074:	004513c1 	jmpi	4513c <_malloc_r>
   47078:	29800117 	ldw	r6,4(r5)
   4707c:	013fff04 	movi	r4,-4
   47080:	89c00404 	addi	r7,r17,16
   47084:	310c703a 	and	r6,r6,r4
   47088:	34c9883a 	add	r4,r6,r19
   4708c:	21c0340e 	bge	r4,r7,47160 <_realloc_r+0x3b0>
   47090:	2809883a 	mov	r4,r5
   47094:	003f7106 	br	46e5c <_realloc_r+0xac>
   47098:	b8800317 	ldw	r2,12(r23)
   4709c:	b8c00217 	ldw	r3,8(r23)
   470a0:	99bfff04 	addi	r6,r19,-4
   470a4:	01000904 	movi	r4,36
   470a8:	18800315 	stw	r2,12(r3)
   470ac:	10c00215 	stw	r3,8(r2)
   470b0:	bc800204 	addi	r18,r23,8
   470b4:	21807836 	bltu	r4,r6,47298 <_realloc_r+0x4e8>
   470b8:	008004c4 	movi	r2,19
   470bc:	1180732e 	bgeu	r2,r6,4728c <_realloc_r+0x4dc>
   470c0:	80800017 	ldw	r2,0(r16)
   470c4:	b8800215 	stw	r2,8(r23)
   470c8:	80800117 	ldw	r2,4(r16)
   470cc:	b8800315 	stw	r2,12(r23)
   470d0:	008006c4 	movi	r2,27
   470d4:	11808936 	bltu	r2,r6,472fc <_realloc_r+0x54c>
   470d8:	b8800404 	addi	r2,r23,16
   470dc:	80c00204 	addi	r3,r16,8
   470e0:	19000017 	ldw	r4,0(r3)
   470e4:	9021883a 	mov	r16,r18
   470e8:	3829883a 	mov	r20,r7
   470ec:	11000015 	stw	r4,0(r2)
   470f0:	19000117 	ldw	r4,4(r3)
   470f4:	b82d883a 	mov	r22,r23
   470f8:	11000115 	stw	r4,4(r2)
   470fc:	18c00217 	ldw	r3,8(r3)
   47100:	10c00215 	stw	r3,8(r2)
   47104:	b8800117 	ldw	r2,4(r23)
   47108:	003f7b06 	br	46ef8 <_realloc_r+0x148>
   4710c:	80c00017 	ldw	r3,0(r16)
   47110:	90c00015 	stw	r3,0(r18)
   47114:	80c00117 	ldw	r3,4(r16)
   47118:	90c00115 	stw	r3,4(r18)
   4711c:	00c006c4 	movi	r3,27
   47120:	19804636 	bltu	r3,r6,4723c <_realloc_r+0x48c>
   47124:	90800204 	addi	r2,r18,8
   47128:	80c00204 	addi	r3,r16,8
   4712c:	003fb906 	br	47014 <_realloc_r+0x264>
   47130:	9005883a 	mov	r2,r18
   47134:	8007883a 	mov	r3,r16
   47138:	19000017 	ldw	r4,0(r3)
   4713c:	9021883a 	mov	r16,r18
   47140:	b82d883a 	mov	r22,r23
   47144:	11000015 	stw	r4,0(r2)
   47148:	19000117 	ldw	r4,4(r3)
   4714c:	11000115 	stw	r4,4(r2)
   47150:	18c00217 	ldw	r3,8(r3)
   47154:	10c00215 	stw	r3,8(r2)
   47158:	b8800117 	ldw	r2,4(r23)
   4715c:	003f6606 	br	46ef8 <_realloc_r+0x148>
   47160:	2445c83a 	sub	r2,r4,r17
   47164:	b46d883a 	add	r22,r22,r17
   47168:	10800054 	ori	r2,r2,1
   4716c:	b0800115 	stw	r2,4(r22)
   47170:	80bfff17 	ldw	r2,-4(r16)
   47174:	a809883a 	mov	r4,r21
   47178:	e5800215 	stw	r22,8(fp)
   4717c:	1080004c 	andi	r2,r2,1
   47180:	88a2b03a 	or	r17,r17,r2
   47184:	847fff15 	stw	r17,-4(r16)
   47188:	004a2180 	call	4a218 <__malloc_unlock>
   4718c:	8025883a 	mov	r18,r16
   47190:	003f6606 	br	46f2c <_realloc_r+0x17c>
   47194:	9009883a 	mov	r4,r18
   47198:	800b883a 	mov	r5,r16
   4719c:	0045af80 	call	45af8 <memmove>
   471a0:	003fa206 	br	4702c <_realloc_r+0x27c>
   471a4:	88800404 	addi	r2,r17,16
   471a8:	a0bf8716 	blt	r20,r2,46fc8 <_realloc_r+0x218>
   471ac:	b8800317 	ldw	r2,12(r23)
   471b0:	b8c00217 	ldw	r3,8(r23)
   471b4:	99bfff04 	addi	r6,r19,-4
   471b8:	01000904 	movi	r4,36
   471bc:	18800315 	stw	r2,12(r3)
   471c0:	10c00215 	stw	r3,8(r2)
   471c4:	bc800204 	addi	r18,r23,8
   471c8:	21806536 	bltu	r4,r6,47360 <_realloc_r+0x5b0>
   471cc:	008004c4 	movi	r2,19
   471d0:	1180592e 	bgeu	r2,r6,47338 <_realloc_r+0x588>
   471d4:	80800017 	ldw	r2,0(r16)
   471d8:	b8800215 	stw	r2,8(r23)
   471dc:	80800117 	ldw	r2,4(r16)
   471e0:	b8800315 	stw	r2,12(r23)
   471e4:	008006c4 	movi	r2,27
   471e8:	11806136 	bltu	r2,r6,47370 <_realloc_r+0x5c0>
   471ec:	b8800404 	addi	r2,r23,16
   471f0:	80c00204 	addi	r3,r16,8
   471f4:	19000017 	ldw	r4,0(r3)
   471f8:	11000015 	stw	r4,0(r2)
   471fc:	19000117 	ldw	r4,4(r3)
   47200:	11000115 	stw	r4,4(r2)
   47204:	18c00217 	ldw	r3,8(r3)
   47208:	10c00215 	stw	r3,8(r2)
   4720c:	a447c83a 	sub	r3,r20,r17
   47210:	bc45883a 	add	r2,r23,r17
   47214:	18c00054 	ori	r3,r3,1
   47218:	10c00115 	stw	r3,4(r2)
   4721c:	b8c00117 	ldw	r3,4(r23)
   47220:	e0800215 	stw	r2,8(fp)
   47224:	a809883a 	mov	r4,r21
   47228:	1880004c 	andi	r2,r3,1
   4722c:	88a2b03a 	or	r17,r17,r2
   47230:	bc400115 	stw	r17,4(r23)
   47234:	004a2180 	call	4a218 <__malloc_unlock>
   47238:	003f3c06 	br	46f2c <_realloc_r+0x17c>
   4723c:	80c00217 	ldw	r3,8(r16)
   47240:	90c00215 	stw	r3,8(r18)
   47244:	80c00317 	ldw	r3,12(r16)
   47248:	90c00315 	stw	r3,12(r18)
   4724c:	30802426 	beq	r6,r2,472e0 <_realloc_r+0x530>
   47250:	90800404 	addi	r2,r18,16
   47254:	80c00404 	addi	r3,r16,16
   47258:	003f6e06 	br	47014 <_realloc_r+0x264>
   4725c:	953fff17 	ldw	r20,-4(r18)
   47260:	00ffff04 	movi	r3,-4
   47264:	a0e8703a 	and	r20,r20,r3
   47268:	a4e9883a 	add	r20,r20,r19
   4726c:	003f2206 	br	46ef8 <_realloc_r+0x148>
   47270:	800b883a 	mov	r5,r16
   47274:	9009883a 	mov	r4,r18
   47278:	0045af80 	call	45af8 <memmove>
   4727c:	9021883a 	mov	r16,r18
   47280:	b8800117 	ldw	r2,4(r23)
   47284:	b82d883a 	mov	r22,r23
   47288:	003f1b06 	br	46ef8 <_realloc_r+0x148>
   4728c:	9005883a 	mov	r2,r18
   47290:	8007883a 	mov	r3,r16
   47294:	003f9206 	br	470e0 <_realloc_r+0x330>
   47298:	800b883a 	mov	r5,r16
   4729c:	9009883a 	mov	r4,r18
   472a0:	d9c00015 	stw	r7,0(sp)
   472a4:	0045af80 	call	45af8 <memmove>
   472a8:	d9c00017 	ldw	r7,0(sp)
   472ac:	9021883a 	mov	r16,r18
   472b0:	b8800117 	ldw	r2,4(r23)
   472b4:	3829883a 	mov	r20,r7
   472b8:	b82d883a 	mov	r22,r23
   472bc:	003f0e06 	br	46ef8 <_realloc_r+0x148>
   472c0:	80800217 	ldw	r2,8(r16)
   472c4:	b8800415 	stw	r2,16(r23)
   472c8:	80800317 	ldw	r2,12(r16)
   472cc:	b8800515 	stw	r2,20(r23)
   472d0:	31001226 	beq	r6,r4,4731c <_realloc_r+0x56c>
   472d4:	b8800604 	addi	r2,r23,24
   472d8:	80c00404 	addi	r3,r16,16
   472dc:	003f9606 	br	47138 <_realloc_r+0x388>
   472e0:	81000417 	ldw	r4,16(r16)
   472e4:	90800604 	addi	r2,r18,24
   472e8:	80c00604 	addi	r3,r16,24
   472ec:	91000415 	stw	r4,16(r18)
   472f0:	81000517 	ldw	r4,20(r16)
   472f4:	91000515 	stw	r4,20(r18)
   472f8:	003f4606 	br	47014 <_realloc_r+0x264>
   472fc:	80800217 	ldw	r2,8(r16)
   47300:	b8800415 	stw	r2,16(r23)
   47304:	80800317 	ldw	r2,12(r16)
   47308:	b8800515 	stw	r2,20(r23)
   4730c:	31000d26 	beq	r6,r4,47344 <_realloc_r+0x594>
   47310:	b8800604 	addi	r2,r23,24
   47314:	80c00404 	addi	r3,r16,16
   47318:	003f7106 	br	470e0 <_realloc_r+0x330>
   4731c:	81000417 	ldw	r4,16(r16)
   47320:	b8800804 	addi	r2,r23,32
   47324:	80c00604 	addi	r3,r16,24
   47328:	b9000615 	stw	r4,24(r23)
   4732c:	81000517 	ldw	r4,20(r16)
   47330:	b9000715 	stw	r4,28(r23)
   47334:	003f8006 	br	47138 <_realloc_r+0x388>
   47338:	9005883a 	mov	r2,r18
   4733c:	8007883a 	mov	r3,r16
   47340:	003fac06 	br	471f4 <_realloc_r+0x444>
   47344:	81000417 	ldw	r4,16(r16)
   47348:	b8800804 	addi	r2,r23,32
   4734c:	80c00604 	addi	r3,r16,24
   47350:	b9000615 	stw	r4,24(r23)
   47354:	81000517 	ldw	r4,20(r16)
   47358:	b9000715 	stw	r4,28(r23)
   4735c:	003f6006 	br	470e0 <_realloc_r+0x330>
   47360:	9009883a 	mov	r4,r18
   47364:	800b883a 	mov	r5,r16
   47368:	0045af80 	call	45af8 <memmove>
   4736c:	003fa706 	br	4720c <_realloc_r+0x45c>
   47370:	80800217 	ldw	r2,8(r16)
   47374:	b8800415 	stw	r2,16(r23)
   47378:	80800317 	ldw	r2,12(r16)
   4737c:	b8800515 	stw	r2,20(r23)
   47380:	31000326 	beq	r6,r4,47390 <_realloc_r+0x5e0>
   47384:	b8800604 	addi	r2,r23,24
   47388:	80c00404 	addi	r3,r16,16
   4738c:	003f9906 	br	471f4 <_realloc_r+0x444>
   47390:	81000417 	ldw	r4,16(r16)
   47394:	b8800804 	addi	r2,r23,32
   47398:	80c00604 	addi	r3,r16,24
   4739c:	b9000615 	stw	r4,24(r23)
   473a0:	81000517 	ldw	r4,20(r16)
   473a4:	b9000715 	stw	r4,28(r23)
   473a8:	003f9206 	br	471f4 <_realloc_r+0x444>

000473ac <__isinfd>:
   473ac:	0105c83a 	sub	r2,zero,r4
   473b0:	1108b03a 	or	r4,r2,r4
   473b4:	2004d7fa 	srli	r2,r4,31
   473b8:	00e00034 	movhi	r3,32768
   473bc:	18ffffc4 	addi	r3,r3,-1
   473c0:	28ca703a 	and	r5,r5,r3
   473c4:	1144b03a 	or	r2,r2,r5
   473c8:	00dffc34 	movhi	r3,32752
   473cc:	1885c83a 	sub	r2,r3,r2
   473d0:	0087c83a 	sub	r3,zero,r2
   473d4:	1884b03a 	or	r2,r3,r2
   473d8:	1005d7fa 	srai	r2,r2,31
   473dc:	10800044 	addi	r2,r2,1
   473e0:	f800283a 	ret

000473e4 <__isnand>:
   473e4:	0105c83a 	sub	r2,zero,r4
   473e8:	1108b03a 	or	r4,r2,r4
   473ec:	2004d7fa 	srli	r2,r4,31
   473f0:	00e00034 	movhi	r3,32768
   473f4:	18ffffc4 	addi	r3,r3,-1
   473f8:	28ca703a 	and	r5,r5,r3
   473fc:	1144b03a 	or	r2,r2,r5
   47400:	00dffc34 	movhi	r3,32752
   47404:	1885c83a 	sub	r2,r3,r2
   47408:	1004d7fa 	srli	r2,r2,31
   4740c:	f800283a 	ret

00047410 <_sbrk_r>:
   47410:	defffd04 	addi	sp,sp,-12
   47414:	dc400115 	stw	r17,4(sp)
   47418:	dc000015 	stw	r16,0(sp)
   4741c:	2023883a 	mov	r17,r4
   47420:	04000074 	movhi	r16,1
   47424:	8407a204 	addi	r16,r16,7816
   47428:	2809883a 	mov	r4,r5
   4742c:	dfc00215 	stw	ra,8(sp)
   47430:	80000015 	stw	zero,0(r16)
   47434:	004a3fc0 	call	4a3fc <sbrk>
   47438:	00ffffc4 	movi	r3,-1
   4743c:	10c00526 	beq	r2,r3,47454 <_sbrk_r+0x44>
   47440:	dfc00217 	ldw	ra,8(sp)
   47444:	dc400117 	ldw	r17,4(sp)
   47448:	dc000017 	ldw	r16,0(sp)
   4744c:	dec00304 	addi	sp,sp,12
   47450:	f800283a 	ret
   47454:	80c00017 	ldw	r3,0(r16)
   47458:	183ff926 	beq	r3,zero,47440 <_sbrk_r+0x30>
   4745c:	88c00015 	stw	r3,0(r17)
   47460:	dfc00217 	ldw	ra,8(sp)
   47464:	dc400117 	ldw	r17,4(sp)
   47468:	dc000017 	ldw	r16,0(sp)
   4746c:	dec00304 	addi	sp,sp,12
   47470:	f800283a 	ret

00047474 <__sread>:
   47474:	defffe04 	addi	sp,sp,-8
   47478:	dc000015 	stw	r16,0(sp)
   4747c:	2821883a 	mov	r16,r5
   47480:	2940038f 	ldh	r5,14(r5)
   47484:	dfc00115 	stw	ra,4(sp)
   47488:	0047a7c0 	call	47a7c <_read_r>
   4748c:	10000716 	blt	r2,zero,474ac <__sread+0x38>
   47490:	80c01417 	ldw	r3,80(r16)
   47494:	1887883a 	add	r3,r3,r2
   47498:	80c01415 	stw	r3,80(r16)
   4749c:	dfc00117 	ldw	ra,4(sp)
   474a0:	dc000017 	ldw	r16,0(sp)
   474a4:	dec00204 	addi	sp,sp,8
   474a8:	f800283a 	ret
   474ac:	80c0030b 	ldhu	r3,12(r16)
   474b0:	18fbffcc 	andi	r3,r3,61439
   474b4:	80c0030d 	sth	r3,12(r16)
   474b8:	dfc00117 	ldw	ra,4(sp)
   474bc:	dc000017 	ldw	r16,0(sp)
   474c0:	dec00204 	addi	sp,sp,8
   474c4:	f800283a 	ret

000474c8 <__swrite>:
   474c8:	2880030b 	ldhu	r2,12(r5)
   474cc:	defffb04 	addi	sp,sp,-20
   474d0:	dcc00315 	stw	r19,12(sp)
   474d4:	10c0400c 	andi	r3,r2,256
   474d8:	18ffffcc 	andi	r3,r3,65535
   474dc:	18e0001c 	xori	r3,r3,32768
   474e0:	dc800215 	stw	r18,8(sp)
   474e4:	dc400115 	stw	r17,4(sp)
   474e8:	dc000015 	stw	r16,0(sp)
   474ec:	dfc00415 	stw	ra,16(sp)
   474f0:	18e00004 	addi	r3,r3,-32768
   474f4:	2821883a 	mov	r16,r5
   474f8:	2027883a 	mov	r19,r4
   474fc:	3025883a 	mov	r18,r6
   47500:	3823883a 	mov	r17,r7
   47504:	18000526 	beq	r3,zero,4751c <__swrite+0x54>
   47508:	2940038f 	ldh	r5,14(r5)
   4750c:	000d883a 	mov	r6,zero
   47510:	01c00084 	movi	r7,2
   47514:	0047a100 	call	47a10 <_lseek_r>
   47518:	8080030b 	ldhu	r2,12(r16)
   4751c:	8140038f 	ldh	r5,14(r16)
   47520:	10bbffcc 	andi	r2,r2,61439
   47524:	9809883a 	mov	r4,r19
   47528:	900d883a 	mov	r6,r18
   4752c:	880f883a 	mov	r7,r17
   47530:	8080030d 	sth	r2,12(r16)
   47534:	dfc00417 	ldw	ra,16(sp)
   47538:	dcc00317 	ldw	r19,12(sp)
   4753c:	dc800217 	ldw	r18,8(sp)
   47540:	dc400117 	ldw	r17,4(sp)
   47544:	dc000017 	ldw	r16,0(sp)
   47548:	dec00504 	addi	sp,sp,20
   4754c:	00476581 	jmpi	47658 <_write_r>

00047550 <__sseek>:
   47550:	defffe04 	addi	sp,sp,-8
   47554:	dc000015 	stw	r16,0(sp)
   47558:	2821883a 	mov	r16,r5
   4755c:	2940038f 	ldh	r5,14(r5)
   47560:	dfc00115 	stw	ra,4(sp)
   47564:	0047a100 	call	47a10 <_lseek_r>
   47568:	00ffffc4 	movi	r3,-1
   4756c:	10c00826 	beq	r2,r3,47590 <__sseek+0x40>
   47570:	80c0030b 	ldhu	r3,12(r16)
   47574:	80801415 	stw	r2,80(r16)
   47578:	18c40014 	ori	r3,r3,4096
   4757c:	80c0030d 	sth	r3,12(r16)
   47580:	dfc00117 	ldw	ra,4(sp)
   47584:	dc000017 	ldw	r16,0(sp)
   47588:	dec00204 	addi	sp,sp,8
   4758c:	f800283a 	ret
   47590:	80c0030b 	ldhu	r3,12(r16)
   47594:	18fbffcc 	andi	r3,r3,61439
   47598:	80c0030d 	sth	r3,12(r16)
   4759c:	dfc00117 	ldw	ra,4(sp)
   475a0:	dc000017 	ldw	r16,0(sp)
   475a4:	dec00204 	addi	sp,sp,8
   475a8:	f800283a 	ret

000475ac <__sclose>:
   475ac:	2940038f 	ldh	r5,14(r5)
   475b0:	00477901 	jmpi	47790 <_close_r>

000475b4 <strcmp>:
   475b4:	2904b03a 	or	r2,r5,r4
   475b8:	108000cc 	andi	r2,r2,3
   475bc:	1000171e 	bne	r2,zero,4761c <strcmp+0x68>
   475c0:	20800017 	ldw	r2,0(r4)
   475c4:	28c00017 	ldw	r3,0(r5)
   475c8:	10c0141e 	bne	r2,r3,4761c <strcmp+0x68>
   475cc:	027fbff4 	movhi	r9,65279
   475d0:	4a7fbfc4 	addi	r9,r9,-257
   475d4:	1247883a 	add	r3,r2,r9
   475d8:	0084303a 	nor	r2,zero,r2
   475dc:	1884703a 	and	r2,r3,r2
   475e0:	02202074 	movhi	r8,32897
   475e4:	42202004 	addi	r8,r8,-32640
   475e8:	1204703a 	and	r2,r2,r8
   475ec:	10000226 	beq	r2,zero,475f8 <strcmp+0x44>
   475f0:	00001706 	br	47650 <strcmp+0x9c>
   475f4:	3000161e 	bne	r6,zero,47650 <strcmp+0x9c>
   475f8:	21000104 	addi	r4,r4,4
   475fc:	20800017 	ldw	r2,0(r4)
   47600:	29400104 	addi	r5,r5,4
   47604:	28c00017 	ldw	r3,0(r5)
   47608:	124f883a 	add	r7,r2,r9
   4760c:	008c303a 	nor	r6,zero,r2
   47610:	398c703a 	and	r6,r7,r6
   47614:	320c703a 	and	r6,r6,r8
   47618:	10fff626 	beq	r2,r3,475f4 <strcmp+0x40>
   4761c:	20800007 	ldb	r2,0(r4)
   47620:	1000051e 	bne	r2,zero,47638 <strcmp+0x84>
   47624:	00000606 	br	47640 <strcmp+0x8c>
   47628:	21000044 	addi	r4,r4,1
   4762c:	20800007 	ldb	r2,0(r4)
   47630:	29400044 	addi	r5,r5,1
   47634:	10000226 	beq	r2,zero,47640 <strcmp+0x8c>
   47638:	28c00007 	ldb	r3,0(r5)
   4763c:	10fffa26 	beq	r2,r3,47628 <strcmp+0x74>
   47640:	20c00003 	ldbu	r3,0(r4)
   47644:	28800003 	ldbu	r2,0(r5)
   47648:	1885c83a 	sub	r2,r3,r2
   4764c:	f800283a 	ret
   47650:	0005883a 	mov	r2,zero
   47654:	f800283a 	ret

00047658 <_write_r>:
   47658:	defffd04 	addi	sp,sp,-12
   4765c:	dc400115 	stw	r17,4(sp)
   47660:	dc000015 	stw	r16,0(sp)
   47664:	2023883a 	mov	r17,r4
   47668:	04000074 	movhi	r16,1
   4766c:	8407a204 	addi	r16,r16,7816
   47670:	2809883a 	mov	r4,r5
   47674:	300b883a 	mov	r5,r6
   47678:	380d883a 	mov	r6,r7
   4767c:	dfc00215 	stw	ra,8(sp)
   47680:	80000015 	stw	zero,0(r16)
   47684:	004a4fc0 	call	4a4fc <write>
   47688:	00ffffc4 	movi	r3,-1
   4768c:	10c00526 	beq	r2,r3,476a4 <_write_r+0x4c>
   47690:	dfc00217 	ldw	ra,8(sp)
   47694:	dc400117 	ldw	r17,4(sp)
   47698:	dc000017 	ldw	r16,0(sp)
   4769c:	dec00304 	addi	sp,sp,12
   476a0:	f800283a 	ret
   476a4:	80c00017 	ldw	r3,0(r16)
   476a8:	183ff926 	beq	r3,zero,47690 <_write_r+0x38>
   476ac:	88c00015 	stw	r3,0(r17)
   476b0:	dfc00217 	ldw	ra,8(sp)
   476b4:	dc400117 	ldw	r17,4(sp)
   476b8:	dc000017 	ldw	r16,0(sp)
   476bc:	dec00304 	addi	sp,sp,12
   476c0:	f800283a 	ret

000476c4 <_calloc_r>:
   476c4:	defffe04 	addi	sp,sp,-8
   476c8:	dc000015 	stw	r16,0(sp)
   476cc:	2021883a 	mov	r16,r4
   476d0:	3009883a 	mov	r4,r6
   476d4:	dfc00115 	stw	ra,4(sp)
   476d8:	00495d00 	call	495d0 <__mulsi3>
   476dc:	8009883a 	mov	r4,r16
   476e0:	100b883a 	mov	r5,r2
   476e4:	004513c0 	call	4513c <_malloc_r>
   476e8:	1021883a 	mov	r16,r2
   476ec:	10000c26 	beq	r2,zero,47720 <_calloc_r+0x5c>
   476f0:	11bfff17 	ldw	r6,-4(r2)
   476f4:	00ffff04 	movi	r3,-4
   476f8:	00800904 	movi	r2,36
   476fc:	30cc703a 	and	r6,r6,r3
   47700:	30cd883a 	add	r6,r6,r3
   47704:	11801436 	bltu	r2,r6,47758 <_calloc_r+0x94>
   47708:	00c004c4 	movi	r3,19
   4770c:	19800936 	bltu	r3,r6,47734 <_calloc_r+0x70>
   47710:	8005883a 	mov	r2,r16
   47714:	10000015 	stw	zero,0(r2)
   47718:	10000115 	stw	zero,4(r2)
   4771c:	10000215 	stw	zero,8(r2)
   47720:	8005883a 	mov	r2,r16
   47724:	dfc00117 	ldw	ra,4(sp)
   47728:	dc000017 	ldw	r16,0(sp)
   4772c:	dec00204 	addi	sp,sp,8
   47730:	f800283a 	ret
   47734:	80000015 	stw	zero,0(r16)
   47738:	80000115 	stw	zero,4(r16)
   4773c:	00c006c4 	movi	r3,27
   47740:	19800d2e 	bgeu	r3,r6,47778 <_calloc_r+0xb4>
   47744:	80000215 	stw	zero,8(r16)
   47748:	80000315 	stw	zero,12(r16)
   4774c:	30800c26 	beq	r6,r2,47780 <_calloc_r+0xbc>
   47750:	80800404 	addi	r2,r16,16
   47754:	003fef06 	br	47714 <_calloc_r+0x50>
   47758:	8009883a 	mov	r4,r16
   4775c:	000b883a 	mov	r5,zero
   47760:	0045c840 	call	45c84 <memset>
   47764:	8005883a 	mov	r2,r16
   47768:	dfc00117 	ldw	ra,4(sp)
   4776c:	dc000017 	ldw	r16,0(sp)
   47770:	dec00204 	addi	sp,sp,8
   47774:	f800283a 	ret
   47778:	80800204 	addi	r2,r16,8
   4777c:	003fe506 	br	47714 <_calloc_r+0x50>
   47780:	80000415 	stw	zero,16(r16)
   47784:	80000515 	stw	zero,20(r16)
   47788:	80800604 	addi	r2,r16,24
   4778c:	003fe106 	br	47714 <_calloc_r+0x50>

00047790 <_close_r>:
   47790:	defffd04 	addi	sp,sp,-12
   47794:	dc400115 	stw	r17,4(sp)
   47798:	dc000015 	stw	r16,0(sp)
   4779c:	2023883a 	mov	r17,r4
   477a0:	04000074 	movhi	r16,1
   477a4:	8407a204 	addi	r16,r16,7816
   477a8:	2809883a 	mov	r4,r5
   477ac:	dfc00215 	stw	ra,8(sp)
   477b0:	80000015 	stw	zero,0(r16)
   477b4:	0049c840 	call	49c84 <close>
   477b8:	00ffffc4 	movi	r3,-1
   477bc:	10c00526 	beq	r2,r3,477d4 <_close_r+0x44>
   477c0:	dfc00217 	ldw	ra,8(sp)
   477c4:	dc400117 	ldw	r17,4(sp)
   477c8:	dc000017 	ldw	r16,0(sp)
   477cc:	dec00304 	addi	sp,sp,12
   477d0:	f800283a 	ret
   477d4:	80c00017 	ldw	r3,0(r16)
   477d8:	183ff926 	beq	r3,zero,477c0 <_close_r+0x30>
   477dc:	88c00015 	stw	r3,0(r17)
   477e0:	dfc00217 	ldw	ra,8(sp)
   477e4:	dc400117 	ldw	r17,4(sp)
   477e8:	dc000017 	ldw	r16,0(sp)
   477ec:	dec00304 	addi	sp,sp,12
   477f0:	f800283a 	ret

000477f4 <_fclose_r>:
   477f4:	defffc04 	addi	sp,sp,-16
   477f8:	dc400115 	stw	r17,4(sp)
   477fc:	dc000015 	stw	r16,0(sp)
   47800:	dfc00315 	stw	ra,12(sp)
   47804:	dc800215 	stw	r18,8(sp)
   47808:	2821883a 	mov	r16,r5
   4780c:	2023883a 	mov	r17,r4
   47810:	28003426 	beq	r5,zero,478e4 <_fclose_r+0xf0>
   47814:	00444280 	call	44428 <__sfp_lock_acquire>
   47818:	88000226 	beq	r17,zero,47824 <_fclose_r+0x30>
   4781c:	88800e17 	ldw	r2,56(r17)
   47820:	10003826 	beq	r2,zero,47904 <_fclose_r+0x110>
   47824:	8080030f 	ldh	r2,12(r16)
   47828:	10002526 	beq	r2,zero,478c0 <_fclose_r+0xcc>
   4782c:	8809883a 	mov	r4,r17
   47830:	800b883a 	mov	r5,r16
   47834:	0043f640 	call	43f64 <_fflush_r>
   47838:	1025883a 	mov	r18,r2
   4783c:	80800b17 	ldw	r2,44(r16)
   47840:	10000426 	beq	r2,zero,47854 <_fclose_r+0x60>
   47844:	81400717 	ldw	r5,28(r16)
   47848:	8809883a 	mov	r4,r17
   4784c:	103ee83a 	callr	r2
   47850:	10003516 	blt	r2,zero,47928 <_fclose_r+0x134>
   47854:	8080030b 	ldhu	r2,12(r16)
   47858:	1080200c 	andi	r2,r2,128
   4785c:	10bfffcc 	andi	r2,r2,65535
   47860:	10a0001c 	xori	r2,r2,32768
   47864:	10a00004 	addi	r2,r2,-32768
   47868:	10002b1e 	bne	r2,zero,47918 <_fclose_r+0x124>
   4786c:	81400c17 	ldw	r5,48(r16)
   47870:	28000526 	beq	r5,zero,47888 <_fclose_r+0x94>
   47874:	80801004 	addi	r2,r16,64
   47878:	28800226 	beq	r5,r2,47884 <_fclose_r+0x90>
   4787c:	8809883a 	mov	r4,r17
   47880:	00445a40 	call	445a4 <_free_r>
   47884:	80000c15 	stw	zero,48(r16)
   47888:	81401117 	ldw	r5,68(r16)
   4788c:	28000326 	beq	r5,zero,4789c <_fclose_r+0xa8>
   47890:	8809883a 	mov	r4,r17
   47894:	00445a40 	call	445a4 <_free_r>
   47898:	80001115 	stw	zero,68(r16)
   4789c:	8000030d 	sth	zero,12(r16)
   478a0:	004442c0 	call	4442c <__sfp_lock_release>
   478a4:	9005883a 	mov	r2,r18
   478a8:	dfc00317 	ldw	ra,12(sp)
   478ac:	dc800217 	ldw	r18,8(sp)
   478b0:	dc400117 	ldw	r17,4(sp)
   478b4:	dc000017 	ldw	r16,0(sp)
   478b8:	dec00404 	addi	sp,sp,16
   478bc:	f800283a 	ret
   478c0:	004442c0 	call	4442c <__sfp_lock_release>
   478c4:	0025883a 	mov	r18,zero
   478c8:	9005883a 	mov	r2,r18
   478cc:	dfc00317 	ldw	ra,12(sp)
   478d0:	dc800217 	ldw	r18,8(sp)
   478d4:	dc400117 	ldw	r17,4(sp)
   478d8:	dc000017 	ldw	r16,0(sp)
   478dc:	dec00404 	addi	sp,sp,16
   478e0:	f800283a 	ret
   478e4:	0025883a 	mov	r18,zero
   478e8:	9005883a 	mov	r2,r18
   478ec:	dfc00317 	ldw	ra,12(sp)
   478f0:	dc800217 	ldw	r18,8(sp)
   478f4:	dc400117 	ldw	r17,4(sp)
   478f8:	dc000017 	ldw	r16,0(sp)
   478fc:	dec00404 	addi	sp,sp,16
   47900:	f800283a 	ret
   47904:	8809883a 	mov	r4,r17
   47908:	00442200 	call	44220 <__sinit>
   4790c:	8080030f 	ldh	r2,12(r16)
   47910:	103fc61e 	bne	r2,zero,4782c <_fclose_r+0x38>
   47914:	003fea06 	br	478c0 <_fclose_r+0xcc>
   47918:	81400417 	ldw	r5,16(r16)
   4791c:	8809883a 	mov	r4,r17
   47920:	00445a40 	call	445a4 <_free_r>
   47924:	003fd106 	br	4786c <_fclose_r+0x78>
   47928:	04bfffc4 	movi	r18,-1
   4792c:	003fc906 	br	47854 <_fclose_r+0x60>

00047930 <fclose>:
   47930:	00800074 	movhi	r2,1
   47934:	10878904 	addi	r2,r2,7716
   47938:	200b883a 	mov	r5,r4
   4793c:	11000017 	ldw	r4,0(r2)
   47940:	00477f41 	jmpi	477f4 <_fclose_r>

00047944 <_fstat_r>:
   47944:	defffd04 	addi	sp,sp,-12
   47948:	dc400115 	stw	r17,4(sp)
   4794c:	dc000015 	stw	r16,0(sp)
   47950:	2023883a 	mov	r17,r4
   47954:	04000074 	movhi	r16,1
   47958:	8407a204 	addi	r16,r16,7816
   4795c:	2809883a 	mov	r4,r5
   47960:	300b883a 	mov	r5,r6
   47964:	dfc00215 	stw	ra,8(sp)
   47968:	80000015 	stw	zero,0(r16)
   4796c:	0049dcc0 	call	49dcc <fstat>
   47970:	00ffffc4 	movi	r3,-1
   47974:	10c00526 	beq	r2,r3,4798c <_fstat_r+0x48>
   47978:	dfc00217 	ldw	ra,8(sp)
   4797c:	dc400117 	ldw	r17,4(sp)
   47980:	dc000017 	ldw	r16,0(sp)
   47984:	dec00304 	addi	sp,sp,12
   47988:	f800283a 	ret
   4798c:	80c00017 	ldw	r3,0(r16)
   47990:	183ff926 	beq	r3,zero,47978 <_fstat_r+0x34>
   47994:	88c00015 	stw	r3,0(r17)
   47998:	dfc00217 	ldw	ra,8(sp)
   4799c:	dc400117 	ldw	r17,4(sp)
   479a0:	dc000017 	ldw	r16,0(sp)
   479a4:	dec00304 	addi	sp,sp,12
   479a8:	f800283a 	ret

000479ac <_isatty_r>:
   479ac:	defffd04 	addi	sp,sp,-12
   479b0:	dc400115 	stw	r17,4(sp)
   479b4:	dc000015 	stw	r16,0(sp)
   479b8:	2023883a 	mov	r17,r4
   479bc:	04000074 	movhi	r16,1
   479c0:	8407a204 	addi	r16,r16,7816
   479c4:	2809883a 	mov	r4,r5
   479c8:	dfc00215 	stw	ra,8(sp)
   479cc:	80000015 	stw	zero,0(r16)
   479d0:	0049ecc0 	call	49ecc <isatty>
   479d4:	00ffffc4 	movi	r3,-1
   479d8:	10c00526 	beq	r2,r3,479f0 <_isatty_r+0x44>
   479dc:	dfc00217 	ldw	ra,8(sp)
   479e0:	dc400117 	ldw	r17,4(sp)
   479e4:	dc000017 	ldw	r16,0(sp)
   479e8:	dec00304 	addi	sp,sp,12
   479ec:	f800283a 	ret
   479f0:	80c00017 	ldw	r3,0(r16)
   479f4:	183ff926 	beq	r3,zero,479dc <_isatty_r+0x30>
   479f8:	88c00015 	stw	r3,0(r17)
   479fc:	dfc00217 	ldw	ra,8(sp)
   47a00:	dc400117 	ldw	r17,4(sp)
   47a04:	dc000017 	ldw	r16,0(sp)
   47a08:	dec00304 	addi	sp,sp,12
   47a0c:	f800283a 	ret

00047a10 <_lseek_r>:
   47a10:	defffd04 	addi	sp,sp,-12
   47a14:	dc400115 	stw	r17,4(sp)
   47a18:	dc000015 	stw	r16,0(sp)
   47a1c:	2023883a 	mov	r17,r4
   47a20:	04000074 	movhi	r16,1
   47a24:	8407a204 	addi	r16,r16,7816
   47a28:	2809883a 	mov	r4,r5
   47a2c:	300b883a 	mov	r5,r6
   47a30:	380d883a 	mov	r6,r7
   47a34:	dfc00215 	stw	ra,8(sp)
   47a38:	80000015 	stw	zero,0(r16)
   47a3c:	004a0ac0 	call	4a0ac <lseek>
   47a40:	00ffffc4 	movi	r3,-1
   47a44:	10c00526 	beq	r2,r3,47a5c <_lseek_r+0x4c>
   47a48:	dfc00217 	ldw	ra,8(sp)
   47a4c:	dc400117 	ldw	r17,4(sp)
   47a50:	dc000017 	ldw	r16,0(sp)
   47a54:	dec00304 	addi	sp,sp,12
   47a58:	f800283a 	ret
   47a5c:	80c00017 	ldw	r3,0(r16)
   47a60:	183ff926 	beq	r3,zero,47a48 <_lseek_r+0x38>
   47a64:	88c00015 	stw	r3,0(r17)
   47a68:	dfc00217 	ldw	ra,8(sp)
   47a6c:	dc400117 	ldw	r17,4(sp)
   47a70:	dc000017 	ldw	r16,0(sp)
   47a74:	dec00304 	addi	sp,sp,12
   47a78:	f800283a 	ret

00047a7c <_read_r>:
   47a7c:	defffd04 	addi	sp,sp,-12
   47a80:	dc400115 	stw	r17,4(sp)
   47a84:	dc000015 	stw	r16,0(sp)
   47a88:	2023883a 	mov	r17,r4
   47a8c:	04000074 	movhi	r16,1
   47a90:	8407a204 	addi	r16,r16,7816
   47a94:	2809883a 	mov	r4,r5
   47a98:	300b883a 	mov	r5,r6
   47a9c:	380d883a 	mov	r6,r7
   47aa0:	dfc00215 	stw	ra,8(sp)
   47aa4:	80000015 	stw	zero,0(r16)
   47aa8:	004a2880 	call	4a288 <read>
   47aac:	00ffffc4 	movi	r3,-1
   47ab0:	10c00526 	beq	r2,r3,47ac8 <_read_r+0x4c>
   47ab4:	dfc00217 	ldw	ra,8(sp)
   47ab8:	dc400117 	ldw	r17,4(sp)
   47abc:	dc000017 	ldw	r16,0(sp)
   47ac0:	dec00304 	addi	sp,sp,12
   47ac4:	f800283a 	ret
   47ac8:	80c00017 	ldw	r3,0(r16)
   47acc:	183ff926 	beq	r3,zero,47ab4 <_read_r+0x38>
   47ad0:	88c00015 	stw	r3,0(r17)
   47ad4:	dfc00217 	ldw	ra,8(sp)
   47ad8:	dc400117 	ldw	r17,4(sp)
   47adc:	dc000017 	ldw	r16,0(sp)
   47ae0:	dec00304 	addi	sp,sp,12
   47ae4:	f800283a 	ret

00047ae8 <__udivdi3>:
   47ae8:	defff504 	addi	sp,sp,-44
   47aec:	dd000515 	stw	r20,20(sp)
   47af0:	dcc00415 	stw	r19,16(sp)
   47af4:	dc800315 	stw	r18,12(sp)
   47af8:	dc400215 	stw	r17,8(sp)
   47afc:	dc000115 	stw	r16,4(sp)
   47b00:	dfc00a15 	stw	ra,40(sp)
   47b04:	df000915 	stw	fp,36(sp)
   47b08:	ddc00815 	stw	r23,32(sp)
   47b0c:	dd800715 	stw	r22,28(sp)
   47b10:	dd400615 	stw	r21,24(sp)
   47b14:	2025883a 	mov	r18,r4
   47b18:	2823883a 	mov	r17,r5
   47b1c:	3021883a 	mov	r16,r6
   47b20:	2027883a 	mov	r19,r4
   47b24:	2829883a 	mov	r20,r5
   47b28:	3800451e 	bne	r7,zero,47c40 <__udivdi3+0x158>
   47b2c:	2980652e 	bgeu	r5,r6,47cc4 <__udivdi3+0x1dc>
   47b30:	00bfffd4 	movui	r2,65535
   47b34:	1180b436 	bltu	r2,r6,47e08 <__udivdi3+0x320>
   47b38:	00803fc4 	movi	r2,255
   47b3c:	11816636 	bltu	r2,r6,480d8 <__udivdi3+0x5f0>
   47b40:	0005883a 	mov	r2,zero
   47b44:	0007883a 	mov	r3,zero
   47b48:	3084d83a 	srl	r2,r6,r2
   47b4c:	01000074 	movhi	r4,1
   47b50:	2100b404 	addi	r4,r4,720
   47b54:	2085883a 	add	r2,r4,r2
   47b58:	10800003 	ldbu	r2,0(r2)
   47b5c:	10c7883a 	add	r3,r2,r3
   47b60:	00800804 	movi	r2,32
   47b64:	10c5c83a 	sub	r2,r2,r3
   47b68:	10000526 	beq	r2,zero,47b80 <__udivdi3+0x98>
   47b6c:	88a2983a 	sll	r17,r17,r2
   47b70:	90c6d83a 	srl	r3,r18,r3
   47b74:	30a0983a 	sll	r16,r6,r2
   47b78:	90a6983a 	sll	r19,r18,r2
   47b7c:	88e8b03a 	or	r20,r17,r3
   47b80:	8022d43a 	srli	r17,r16,16
   47b84:	a009883a 	mov	r4,r20
   47b88:	857fffcc 	andi	r21,r16,65535
   47b8c:	880b883a 	mov	r5,r17
   47b90:	00495c80 	call	495c8 <__umodsi3>
   47b94:	a009883a 	mov	r4,r20
   47b98:	880b883a 	mov	r5,r17
   47b9c:	102d883a 	mov	r22,r2
   47ba0:	00495c00 	call	495c0 <__udivsi3>
   47ba4:	1009883a 	mov	r4,r2
   47ba8:	a80b883a 	mov	r5,r21
   47bac:	1025883a 	mov	r18,r2
   47bb0:	00495d00 	call	495d0 <__mulsi3>
   47bb4:	1009883a 	mov	r4,r2
   47bb8:	b006943a 	slli	r3,r22,16
   47bbc:	9804d43a 	srli	r2,r19,16
   47bc0:	1886b03a 	or	r3,r3,r2
   47bc4:	1900052e 	bgeu	r3,r4,47bdc <__udivdi3+0xf4>
   47bc8:	1c07883a 	add	r3,r3,r16
   47bcc:	90bfffc4 	addi	r2,r18,-1
   47bd0:	1c000136 	bltu	r3,r16,47bd8 <__udivdi3+0xf0>
   47bd4:	19015536 	bltu	r3,r4,4812c <__udivdi3+0x644>
   47bd8:	1025883a 	mov	r18,r2
   47bdc:	1929c83a 	sub	r20,r3,r4
   47be0:	880b883a 	mov	r5,r17
   47be4:	a009883a 	mov	r4,r20
   47be8:	00495c80 	call	495c8 <__umodsi3>
   47bec:	102d883a 	mov	r22,r2
   47bf0:	880b883a 	mov	r5,r17
   47bf4:	a009883a 	mov	r4,r20
   47bf8:	b02c943a 	slli	r22,r22,16
   47bfc:	00495c00 	call	495c0 <__udivsi3>
   47c00:	1009883a 	mov	r4,r2
   47c04:	a80b883a 	mov	r5,r21
   47c08:	9cffffcc 	andi	r19,r19,65535
   47c0c:	1023883a 	mov	r17,r2
   47c10:	b4e6b03a 	or	r19,r22,r19
   47c14:	00495d00 	call	495d0 <__mulsi3>
   47c18:	9880052e 	bgeu	r19,r2,47c30 <__udivdi3+0x148>
   47c1c:	9c27883a 	add	r19,r19,r16
   47c20:	88ffffc4 	addi	r3,r17,-1
   47c24:	9c011436 	bltu	r19,r16,48078 <__udivdi3+0x590>
   47c28:	9881132e 	bgeu	r19,r2,48078 <__udivdi3+0x590>
   47c2c:	8c7fff84 	addi	r17,r17,-2
   47c30:	9004943a 	slli	r2,r18,16
   47c34:	0007883a 	mov	r3,zero
   47c38:	8884b03a 	or	r2,r17,r2
   47c3c:	00001506 	br	47c94 <__udivdi3+0x1ac>
   47c40:	29c06a36 	bltu	r5,r7,47dec <__udivdi3+0x304>
   47c44:	00bfffd4 	movui	r2,65535
   47c48:	11c06a2e 	bgeu	r2,r7,47df4 <__udivdi3+0x30c>
   47c4c:	00804034 	movhi	r2,256
   47c50:	10bfffc4 	addi	r2,r2,-1
   47c54:	11c11436 	bltu	r2,r7,480a8 <__udivdi3+0x5c0>
   47c58:	00c00404 	movi	r3,16
   47c5c:	180b883a 	mov	r5,r3
   47c60:	38c6d83a 	srl	r3,r7,r3
   47c64:	01000074 	movhi	r4,1
   47c68:	2100b404 	addi	r4,r4,720
   47c6c:	04000804 	movi	r16,32
   47c70:	20c7883a 	add	r3,r4,r3
   47c74:	18800003 	ldbu	r2,0(r3)
   47c78:	1145883a 	add	r2,r2,r5
   47c7c:	80a1c83a 	sub	r16,r16,r2
   47c80:	80006e1e 	bne	r16,zero,47e3c <__udivdi3+0x354>
   47c84:	0007883a 	mov	r3,zero
   47c88:	3c406a36 	bltu	r7,r17,47e34 <__udivdi3+0x34c>
   47c8c:	9180692e 	bgeu	r18,r6,47e34 <__udivdi3+0x34c>
   47c90:	0005883a 	mov	r2,zero
   47c94:	dfc00a17 	ldw	ra,40(sp)
   47c98:	df000917 	ldw	fp,36(sp)
   47c9c:	ddc00817 	ldw	r23,32(sp)
   47ca0:	dd800717 	ldw	r22,28(sp)
   47ca4:	dd400617 	ldw	r21,24(sp)
   47ca8:	dd000517 	ldw	r20,20(sp)
   47cac:	dcc00417 	ldw	r19,16(sp)
   47cb0:	dc800317 	ldw	r18,12(sp)
   47cb4:	dc400217 	ldw	r17,8(sp)
   47cb8:	dc000117 	ldw	r16,4(sp)
   47cbc:	dec00b04 	addi	sp,sp,44
   47cc0:	f800283a 	ret
   47cc4:	3000041e 	bne	r6,zero,47cd8 <__udivdi3+0x1f0>
   47cc8:	01000044 	movi	r4,1
   47ccc:	000b883a 	mov	r5,zero
   47cd0:	00495c00 	call	495c0 <__udivsi3>
   47cd4:	1021883a 	mov	r16,r2
   47cd8:	00bfffd4 	movui	r2,65535
   47cdc:	1400502e 	bgeu	r2,r16,47e20 <__udivdi3+0x338>
   47ce0:	00804034 	movhi	r2,256
   47ce4:	10bfffc4 	addi	r2,r2,-1
   47ce8:	1400f536 	bltu	r2,r16,480c0 <__udivdi3+0x5d8>
   47cec:	00800404 	movi	r2,16
   47cf0:	1007883a 	mov	r3,r2
   47cf4:	8084d83a 	srl	r2,r16,r2
   47cf8:	01000074 	movhi	r4,1
   47cfc:	2100b404 	addi	r4,r4,720
   47d00:	2085883a 	add	r2,r4,r2
   47d04:	10800003 	ldbu	r2,0(r2)
   47d08:	10c7883a 	add	r3,r2,r3
   47d0c:	00800804 	movi	r2,32
   47d10:	10c5c83a 	sub	r2,r2,r3
   47d14:	1000a01e 	bne	r2,zero,47f98 <__udivdi3+0x4b0>
   47d18:	8028d43a 	srli	r20,r16,16
   47d1c:	8c23c83a 	sub	r17,r17,r16
   47d20:	857fffcc 	andi	r21,r16,65535
   47d24:	00c00044 	movi	r3,1
   47d28:	8809883a 	mov	r4,r17
   47d2c:	a00b883a 	mov	r5,r20
   47d30:	d8c00015 	stw	r3,0(sp)
   47d34:	00495c80 	call	495c8 <__umodsi3>
   47d38:	8809883a 	mov	r4,r17
   47d3c:	a00b883a 	mov	r5,r20
   47d40:	102d883a 	mov	r22,r2
   47d44:	00495c00 	call	495c0 <__udivsi3>
   47d48:	1009883a 	mov	r4,r2
   47d4c:	a80b883a 	mov	r5,r21
   47d50:	1025883a 	mov	r18,r2
   47d54:	00495d00 	call	495d0 <__mulsi3>
   47d58:	1009883a 	mov	r4,r2
   47d5c:	b00c943a 	slli	r6,r22,16
   47d60:	9804d43a 	srli	r2,r19,16
   47d64:	d8c00017 	ldw	r3,0(sp)
   47d68:	308cb03a 	or	r6,r6,r2
   47d6c:	3100052e 	bgeu	r6,r4,47d84 <__udivdi3+0x29c>
   47d70:	340d883a 	add	r6,r6,r16
   47d74:	90bfffc4 	addi	r2,r18,-1
   47d78:	34000136 	bltu	r6,r16,47d80 <__udivdi3+0x298>
   47d7c:	3100e836 	bltu	r6,r4,48120 <__udivdi3+0x638>
   47d80:	1025883a 	mov	r18,r2
   47d84:	3123c83a 	sub	r17,r6,r4
   47d88:	8809883a 	mov	r4,r17
   47d8c:	a00b883a 	mov	r5,r20
   47d90:	d8c00015 	stw	r3,0(sp)
   47d94:	00495c80 	call	495c8 <__umodsi3>
   47d98:	102d883a 	mov	r22,r2
   47d9c:	8809883a 	mov	r4,r17
   47da0:	a00b883a 	mov	r5,r20
   47da4:	b02c943a 	slli	r22,r22,16
   47da8:	00495c00 	call	495c0 <__udivsi3>
   47dac:	1009883a 	mov	r4,r2
   47db0:	a80b883a 	mov	r5,r21
   47db4:	9cffffcc 	andi	r19,r19,65535
   47db8:	1023883a 	mov	r17,r2
   47dbc:	b4e6b03a 	or	r19,r22,r19
   47dc0:	00495d00 	call	495d0 <__mulsi3>
   47dc4:	d8c00017 	ldw	r3,0(sp)
   47dc8:	9880052e 	bgeu	r19,r2,47de0 <__udivdi3+0x2f8>
   47dcc:	9c27883a 	add	r19,r19,r16
   47dd0:	893fffc4 	addi	r4,r17,-1
   47dd4:	9c00aa36 	bltu	r19,r16,48080 <__udivdi3+0x598>
   47dd8:	9880a92e 	bgeu	r19,r2,48080 <__udivdi3+0x598>
   47ddc:	8c7fff84 	addi	r17,r17,-2
   47de0:	9004943a 	slli	r2,r18,16
   47de4:	8884b03a 	or	r2,r17,r2
   47de8:	003faa06 	br	47c94 <__udivdi3+0x1ac>
   47dec:	0007883a 	mov	r3,zero
   47df0:	003fa706 	br	47c90 <__udivdi3+0x1a8>
   47df4:	00803fc4 	movi	r2,255
   47df8:	11c0ae36 	bltu	r2,r7,480b4 <__udivdi3+0x5cc>
   47dfc:	0007883a 	mov	r3,zero
   47e00:	000b883a 	mov	r5,zero
   47e04:	003f9606 	br	47c60 <__udivdi3+0x178>
   47e08:	00804034 	movhi	r2,256
   47e0c:	10bfffc4 	addi	r2,r2,-1
   47e10:	1180ae36 	bltu	r2,r6,480cc <__udivdi3+0x5e4>
   47e14:	00800404 	movi	r2,16
   47e18:	1007883a 	mov	r3,r2
   47e1c:	003f4a06 	br	47b48 <__udivdi3+0x60>
   47e20:	00803fc4 	movi	r2,255
   47e24:	1400af36 	bltu	r2,r16,480e4 <__udivdi3+0x5fc>
   47e28:	0005883a 	mov	r2,zero
   47e2c:	0007883a 	mov	r3,zero
   47e30:	003fb006 	br	47cf4 <__udivdi3+0x20c>
   47e34:	00800044 	movi	r2,1
   47e38:	003f9606 	br	47c94 <__udivdi3+0x1ac>
   47e3c:	3c0e983a 	sll	r7,r7,r16
   47e40:	3086d83a 	srl	r3,r6,r2
   47e44:	88aed83a 	srl	r23,r17,r2
   47e48:	9084d83a 	srl	r2,r18,r2
   47e4c:	38e6b03a 	or	r19,r7,r3
   47e50:	9828d43a 	srli	r20,r19,16
   47e54:	8c22983a 	sll	r17,r17,r16
   47e58:	b809883a 	mov	r4,r23
   47e5c:	a00b883a 	mov	r5,r20
   47e60:	342a983a 	sll	r21,r6,r16
   47e64:	88a2b03a 	or	r17,r17,r2
   47e68:	00495c80 	call	495c8 <__umodsi3>
   47e6c:	b809883a 	mov	r4,r23
   47e70:	a00b883a 	mov	r5,r20
   47e74:	1039883a 	mov	fp,r2
   47e78:	9dbfffcc 	andi	r22,r19,65535
   47e7c:	00495c00 	call	495c0 <__udivsi3>
   47e80:	1009883a 	mov	r4,r2
   47e84:	b00b883a 	mov	r5,r22
   47e88:	102f883a 	mov	r23,r2
   47e8c:	00495d00 	call	495d0 <__mulsi3>
   47e90:	1009883a 	mov	r4,r2
   47e94:	e00e943a 	slli	r7,fp,16
   47e98:	8804d43a 	srli	r2,r17,16
   47e9c:	388eb03a 	or	r7,r7,r2
   47ea0:	3900042e 	bgeu	r7,r4,47eb4 <__udivdi3+0x3cc>
   47ea4:	3ccf883a 	add	r7,r7,r19
   47ea8:	b8bfffc4 	addi	r2,r23,-1
   47eac:	3cc0942e 	bgeu	r7,r19,48100 <__udivdi3+0x618>
   47eb0:	102f883a 	mov	r23,r2
   47eb4:	3939c83a 	sub	fp,r7,r4
   47eb8:	a00b883a 	mov	r5,r20
   47ebc:	e009883a 	mov	r4,fp
   47ec0:	00495c80 	call	495c8 <__umodsi3>
   47ec4:	a00b883a 	mov	r5,r20
   47ec8:	e009883a 	mov	r4,fp
   47ecc:	d8800015 	stw	r2,0(sp)
   47ed0:	00495c00 	call	495c0 <__udivsi3>
   47ed4:	1009883a 	mov	r4,r2
   47ed8:	b00b883a 	mov	r5,r22
   47edc:	1029883a 	mov	r20,r2
   47ee0:	00495d00 	call	495d0 <__mulsi3>
   47ee4:	d8c00017 	ldw	r3,0(sp)
   47ee8:	8c7fffcc 	andi	r17,r17,65535
   47eec:	1806943a 	slli	r3,r3,16
   47ef0:	1c46b03a 	or	r3,r3,r17
   47ef4:	1880042e 	bgeu	r3,r2,47f08 <__udivdi3+0x420>
   47ef8:	1cc7883a 	add	r3,r3,r19
   47efc:	a13fffc4 	addi	r4,r20,-1
   47f00:	1cc07b2e 	bgeu	r3,r19,480f0 <__udivdi3+0x608>
   47f04:	2029883a 	mov	r20,r4
   47f08:	b82e943a 	slli	r23,r23,16
   47f0c:	a822d43a 	srli	r17,r21,16
   47f10:	ad7fffcc 	andi	r21,r21,65535
   47f14:	a5e8b03a 	or	r20,r20,r23
   47f18:	a5bfffcc 	andi	r22,r20,65535
   47f1c:	b009883a 	mov	r4,r22
   47f20:	a80b883a 	mov	r5,r21
   47f24:	18afc83a 	sub	r23,r3,r2
   47f28:	a026d43a 	srli	r19,r20,16
   47f2c:	00495d00 	call	495d0 <__mulsi3>
   47f30:	b009883a 	mov	r4,r22
   47f34:	880b883a 	mov	r5,r17
   47f38:	1039883a 	mov	fp,r2
   47f3c:	00495d00 	call	495d0 <__mulsi3>
   47f40:	a80b883a 	mov	r5,r21
   47f44:	9809883a 	mov	r4,r19
   47f48:	102d883a 	mov	r22,r2
   47f4c:	00495d00 	call	495d0 <__mulsi3>
   47f50:	9809883a 	mov	r4,r19
   47f54:	880b883a 	mov	r5,r17
   47f58:	102b883a 	mov	r21,r2
   47f5c:	00495d00 	call	495d0 <__mulsi3>
   47f60:	100b883a 	mov	r5,r2
   47f64:	e004d43a 	srli	r2,fp,16
   47f68:	ad89883a 	add	r4,r21,r22
   47f6c:	2089883a 	add	r4,r4,r2
   47f70:	2540022e 	bgeu	r4,r21,47f7c <__udivdi3+0x494>
   47f74:	00800074 	movhi	r2,1
   47f78:	288b883a 	add	r5,r5,r2
   47f7c:	2004d43a 	srli	r2,r4,16
   47f80:	288b883a 	add	r5,r5,r2
   47f84:	b9404536 	bltu	r23,r5,4809c <__udivdi3+0x5b4>
   47f88:	b9403f26 	beq	r23,r5,48088 <__udivdi3+0x5a0>
   47f8c:	a005883a 	mov	r2,r20
   47f90:	0007883a 	mov	r3,zero
   47f94:	003f3f06 	br	47c94 <__udivdi3+0x1ac>
   47f98:	80a0983a 	sll	r16,r16,r2
   47f9c:	88eed83a 	srl	r23,r17,r3
   47fa0:	90c6d83a 	srl	r3,r18,r3
   47fa4:	8028d43a 	srli	r20,r16,16
   47fa8:	88a2983a 	sll	r17,r17,r2
   47fac:	b809883a 	mov	r4,r23
   47fb0:	a00b883a 	mov	r5,r20
   47fb4:	88ecb03a 	or	r22,r17,r3
   47fb8:	90a6983a 	sll	r19,r18,r2
   47fbc:	00495c80 	call	495c8 <__umodsi3>
   47fc0:	b809883a 	mov	r4,r23
   47fc4:	a00b883a 	mov	r5,r20
   47fc8:	1023883a 	mov	r17,r2
   47fcc:	857fffcc 	andi	r21,r16,65535
   47fd0:	00495c00 	call	495c0 <__udivsi3>
   47fd4:	1009883a 	mov	r4,r2
   47fd8:	a80b883a 	mov	r5,r21
   47fdc:	102f883a 	mov	r23,r2
   47fe0:	00495d00 	call	495d0 <__mulsi3>
   47fe4:	1009883a 	mov	r4,r2
   47fe8:	880a943a 	slli	r5,r17,16
   47fec:	b004d43a 	srli	r2,r22,16
   47ff0:	288ab03a 	or	r5,r5,r2
   47ff4:	2900062e 	bgeu	r5,r4,48010 <__udivdi3+0x528>
   47ff8:	2c0b883a 	add	r5,r5,r16
   47ffc:	b8bfffc4 	addi	r2,r23,-1
   48000:	2c004536 	bltu	r5,r16,48118 <__udivdi3+0x630>
   48004:	2900442e 	bgeu	r5,r4,48118 <__udivdi3+0x630>
   48008:	bdffff84 	addi	r23,r23,-2
   4800c:	2c0b883a 	add	r5,r5,r16
   48010:	2925c83a 	sub	r18,r5,r4
   48014:	9009883a 	mov	r4,r18
   48018:	a00b883a 	mov	r5,r20
   4801c:	00495c80 	call	495c8 <__umodsi3>
   48020:	1023883a 	mov	r17,r2
   48024:	9009883a 	mov	r4,r18
   48028:	a00b883a 	mov	r5,r20
   4802c:	8822943a 	slli	r17,r17,16
   48030:	00495c00 	call	495c0 <__udivsi3>
   48034:	1009883a 	mov	r4,r2
   48038:	a80b883a 	mov	r5,r21
   4803c:	b5bfffcc 	andi	r22,r22,65535
   48040:	1025883a 	mov	r18,r2
   48044:	8da2b03a 	or	r17,r17,r22
   48048:	00495d00 	call	495d0 <__mulsi3>
   4804c:	8880062e 	bgeu	r17,r2,48068 <__udivdi3+0x580>
   48050:	8c23883a 	add	r17,r17,r16
   48054:	90ffffc4 	addi	r3,r18,-1
   48058:	8c002d36 	bltu	r17,r16,48110 <__udivdi3+0x628>
   4805c:	88802c2e 	bgeu	r17,r2,48110 <__udivdi3+0x628>
   48060:	94bfff84 	addi	r18,r18,-2
   48064:	8c23883a 	add	r17,r17,r16
   48068:	b806943a 	slli	r3,r23,16
   4806c:	88a3c83a 	sub	r17,r17,r2
   48070:	90c6b03a 	or	r3,r18,r3
   48074:	003f2c06 	br	47d28 <__udivdi3+0x240>
   48078:	1823883a 	mov	r17,r3
   4807c:	003eec06 	br	47c30 <__udivdi3+0x148>
   48080:	2023883a 	mov	r17,r4
   48084:	003f5606 	br	47de0 <__udivdi3+0x2f8>
   48088:	2008943a 	slli	r4,r4,16
   4808c:	9420983a 	sll	r16,r18,r16
   48090:	e73fffcc 	andi	fp,fp,65535
   48094:	2709883a 	add	r4,r4,fp
   48098:	813fbc2e 	bgeu	r16,r4,47f8c <__udivdi3+0x4a4>
   4809c:	a0bfffc4 	addi	r2,r20,-1
   480a0:	0007883a 	mov	r3,zero
   480a4:	003efb06 	br	47c94 <__udivdi3+0x1ac>
   480a8:	00c00604 	movi	r3,24
   480ac:	180b883a 	mov	r5,r3
   480b0:	003eeb06 	br	47c60 <__udivdi3+0x178>
   480b4:	00c00204 	movi	r3,8
   480b8:	180b883a 	mov	r5,r3
   480bc:	003ee806 	br	47c60 <__udivdi3+0x178>
   480c0:	00800604 	movi	r2,24
   480c4:	1007883a 	mov	r3,r2
   480c8:	003f0a06 	br	47cf4 <__udivdi3+0x20c>
   480cc:	00800604 	movi	r2,24
   480d0:	1007883a 	mov	r3,r2
   480d4:	003e9c06 	br	47b48 <__udivdi3+0x60>
   480d8:	00800204 	movi	r2,8
   480dc:	1007883a 	mov	r3,r2
   480e0:	003e9906 	br	47b48 <__udivdi3+0x60>
   480e4:	00800204 	movi	r2,8
   480e8:	1007883a 	mov	r3,r2
   480ec:	003f0106 	br	47cf4 <__udivdi3+0x20c>
   480f0:	18bf842e 	bgeu	r3,r2,47f04 <__udivdi3+0x41c>
   480f4:	a53fff84 	addi	r20,r20,-2
   480f8:	1cc7883a 	add	r3,r3,r19
   480fc:	003f8206 	br	47f08 <__udivdi3+0x420>
   48100:	393f6b2e 	bgeu	r7,r4,47eb0 <__udivdi3+0x3c8>
   48104:	bdffff84 	addi	r23,r23,-2
   48108:	3ccf883a 	add	r7,r7,r19
   4810c:	003f6906 	br	47eb4 <__udivdi3+0x3cc>
   48110:	1825883a 	mov	r18,r3
   48114:	003fd406 	br	48068 <__udivdi3+0x580>
   48118:	102f883a 	mov	r23,r2
   4811c:	003fbc06 	br	48010 <__udivdi3+0x528>
   48120:	94bfff84 	addi	r18,r18,-2
   48124:	340d883a 	add	r6,r6,r16
   48128:	003f1606 	br	47d84 <__udivdi3+0x29c>
   4812c:	94bfff84 	addi	r18,r18,-2
   48130:	1c07883a 	add	r3,r3,r16
   48134:	003ea906 	br	47bdc <__udivdi3+0xf4>

00048138 <__umoddi3>:
   48138:	defff304 	addi	sp,sp,-52
   4813c:	dd000715 	stw	r20,28(sp)
   48140:	dcc00615 	stw	r19,24(sp)
   48144:	dc800515 	stw	r18,20(sp)
   48148:	dc400415 	stw	r17,16(sp)
   4814c:	dc000315 	stw	r16,12(sp)
   48150:	dfc00c15 	stw	ra,48(sp)
   48154:	df000b15 	stw	fp,44(sp)
   48158:	ddc00a15 	stw	r23,40(sp)
   4815c:	dd800915 	stw	r22,36(sp)
   48160:	dd400815 	stw	r21,32(sp)
   48164:	2025883a 	mov	r18,r4
   48168:	2823883a 	mov	r17,r5
   4816c:	3021883a 	mov	r16,r6
   48170:	2027883a 	mov	r19,r4
   48174:	2829883a 	mov	r20,r5
   48178:	38003a1e 	bne	r7,zero,48264 <__umoddi3+0x12c>
   4817c:	2980522e 	bgeu	r5,r6,482c8 <__umoddi3+0x190>
   48180:	00bfffd4 	movui	r2,65535
   48184:	1180a436 	bltu	r2,r6,48418 <__umoddi3+0x2e0>
   48188:	00803fc4 	movi	r2,255
   4818c:	11816036 	bltu	r2,r6,48710 <__umoddi3+0x5d8>
   48190:	0005883a 	mov	r2,zero
   48194:	0009883a 	mov	r4,zero
   48198:	3084d83a 	srl	r2,r6,r2
   4819c:	00c00074 	movhi	r3,1
   481a0:	18c0b404 	addi	r3,r3,720
   481a4:	05400804 	movi	r21,32
   481a8:	1885883a 	add	r2,r3,r2
   481ac:	10800003 	ldbu	r2,0(r2)
   481b0:	1109883a 	add	r4,r2,r4
   481b4:	a92bc83a 	sub	r21,r21,r4
   481b8:	a8010e26 	beq	r21,zero,485f4 <__umoddi3+0x4bc>
   481bc:	8d62983a 	sll	r17,r17,r21
   481c0:	9108d83a 	srl	r4,r18,r4
   481c4:	3560983a 	sll	r16,r6,r21
   481c8:	9566983a 	sll	r19,r18,r21
   481cc:	8928b03a 	or	r20,r17,r4
   481d0:	8022d43a 	srli	r17,r16,16
   481d4:	a009883a 	mov	r4,r20
   481d8:	84bfffcc 	andi	r18,r16,65535
   481dc:	880b883a 	mov	r5,r17
   481e0:	00495c80 	call	495c8 <__umodsi3>
   481e4:	a009883a 	mov	r4,r20
   481e8:	880b883a 	mov	r5,r17
   481ec:	102d883a 	mov	r22,r2
   481f0:	00495c00 	call	495c0 <__udivsi3>
   481f4:	1009883a 	mov	r4,r2
   481f8:	900b883a 	mov	r5,r18
   481fc:	00495d00 	call	495d0 <__mulsi3>
   48200:	1009883a 	mov	r4,r2
   48204:	b006943a 	slli	r3,r22,16
   48208:	9804d43a 	srli	r2,r19,16
   4820c:	1886b03a 	or	r3,r3,r2
   48210:	1900042e 	bgeu	r3,r4,48224 <__umoddi3+0xec>
   48214:	1c07883a 	add	r3,r3,r16
   48218:	1c000236 	bltu	r3,r16,48224 <__umoddi3+0xec>
   4821c:	1900012e 	bgeu	r3,r4,48224 <__umoddi3+0xec>
   48220:	1c07883a 	add	r3,r3,r16
   48224:	1929c83a 	sub	r20,r3,r4
   48228:	a009883a 	mov	r4,r20
   4822c:	880b883a 	mov	r5,r17
   48230:	00495c80 	call	495c8 <__umodsi3>
   48234:	102d883a 	mov	r22,r2
   48238:	a009883a 	mov	r4,r20
   4823c:	880b883a 	mov	r5,r17
   48240:	b02c943a 	slli	r22,r22,16
   48244:	00495c00 	call	495c0 <__udivsi3>
   48248:	1009883a 	mov	r4,r2
   4824c:	900b883a 	mov	r5,r18
   48250:	9cffffcc 	andi	r19,r19,65535
   48254:	00495d00 	call	495d0 <__mulsi3>
   48258:	b4e6b03a 	or	r19,r22,r19
   4825c:	9880572e 	bgeu	r19,r2,483bc <__umoddi3+0x284>
   48260:	00005206 	br	483ac <__umoddi3+0x274>
   48264:	29c05936 	bltu	r5,r7,483cc <__umoddi3+0x294>
   48268:	00bfffd4 	movui	r2,65535
   4826c:	11c0652e 	bgeu	r2,r7,48404 <__umoddi3+0x2cc>
   48270:	00804034 	movhi	r2,256
   48274:	10bfffc4 	addi	r2,r2,-1
   48278:	11c11936 	bltu	r2,r7,486e0 <__umoddi3+0x5a8>
   4827c:	00c00404 	movi	r3,16
   48280:	1827883a 	mov	r19,r3
   48284:	38c6d83a 	srl	r3,r7,r3
   48288:	01000074 	movhi	r4,1
   4828c:	2100b404 	addi	r4,r4,720
   48290:	04000804 	movi	r16,32
   48294:	20c7883a 	add	r3,r4,r3
   48298:	18800003 	ldbu	r2,0(r3)
   4829c:	14e7883a 	add	r19,r2,r19
   482a0:	84e1c83a 	sub	r16,r16,r19
   482a4:	8000671e 	bne	r16,zero,48444 <__umoddi3+0x30c>
   482a8:	3c400136 	bltu	r7,r17,482b0 <__umoddi3+0x178>
   482ac:	91812536 	bltu	r18,r6,48744 <__umoddi3+0x60c>
   482b0:	9185c83a 	sub	r2,r18,r6
   482b4:	89e3c83a 	sub	r17,r17,r7
   482b8:	90a5803a 	cmpltu	r18,r18,r2
   482bc:	8ca9c83a 	sub	r20,r17,r18
   482c0:	a007883a 	mov	r3,r20
   482c4:	00004306 	br	483d4 <__umoddi3+0x29c>
   482c8:	3000041e 	bne	r6,zero,482dc <__umoddi3+0x1a4>
   482cc:	01000044 	movi	r4,1
   482d0:	000b883a 	mov	r5,zero
   482d4:	00495c00 	call	495c0 <__udivsi3>
   482d8:	1021883a 	mov	r16,r2
   482dc:	00bfffd4 	movui	r2,65535
   482e0:	1400532e 	bgeu	r2,r16,48430 <__umoddi3+0x2f8>
   482e4:	00804034 	movhi	r2,256
   482e8:	10bfffc4 	addi	r2,r2,-1
   482ec:	14010536 	bltu	r2,r16,48704 <__umoddi3+0x5cc>
   482f0:	00800404 	movi	r2,16
   482f4:	1007883a 	mov	r3,r2
   482f8:	8084d83a 	srl	r2,r16,r2
   482fc:	01000074 	movhi	r4,1
   48300:	2100b404 	addi	r4,r4,720
   48304:	05400804 	movi	r21,32
   48308:	2085883a 	add	r2,r4,r2
   4830c:	10800003 	ldbu	r2,0(r2)
   48310:	10c7883a 	add	r3,r2,r3
   48314:	a8ebc83a 	sub	r21,r21,r3
   48318:	a800b81e 	bne	r21,zero,485fc <__umoddi3+0x4c4>
   4831c:	8028d43a 	srli	r20,r16,16
   48320:	8c23c83a 	sub	r17,r17,r16
   48324:	85bfffcc 	andi	r22,r16,65535
   48328:	8809883a 	mov	r4,r17
   4832c:	a00b883a 	mov	r5,r20
   48330:	00495c80 	call	495c8 <__umodsi3>
   48334:	8809883a 	mov	r4,r17
   48338:	a00b883a 	mov	r5,r20
   4833c:	1025883a 	mov	r18,r2
   48340:	00495c00 	call	495c0 <__udivsi3>
   48344:	1009883a 	mov	r4,r2
   48348:	b00b883a 	mov	r5,r22
   4834c:	00495d00 	call	495d0 <__mulsi3>
   48350:	1009883a 	mov	r4,r2
   48354:	9006943a 	slli	r3,r18,16
   48358:	9804d43a 	srli	r2,r19,16
   4835c:	1886b03a 	or	r3,r3,r2
   48360:	1900032e 	bgeu	r3,r4,48370 <__umoddi3+0x238>
   48364:	1c07883a 	add	r3,r3,r16
   48368:	1c000136 	bltu	r3,r16,48370 <__umoddi3+0x238>
   4836c:	1900f336 	bltu	r3,r4,4873c <__umoddi3+0x604>
   48370:	1923c83a 	sub	r17,r3,r4
   48374:	8809883a 	mov	r4,r17
   48378:	a00b883a 	mov	r5,r20
   4837c:	00495c80 	call	495c8 <__umodsi3>
   48380:	102f883a 	mov	r23,r2
   48384:	8809883a 	mov	r4,r17
   48388:	a00b883a 	mov	r5,r20
   4838c:	b82e943a 	slli	r23,r23,16
   48390:	00495c00 	call	495c0 <__udivsi3>
   48394:	1009883a 	mov	r4,r2
   48398:	b00b883a 	mov	r5,r22
   4839c:	9cffffcc 	andi	r19,r19,65535
   483a0:	00495d00 	call	495d0 <__mulsi3>
   483a4:	bce6b03a 	or	r19,r23,r19
   483a8:	9880042e 	bgeu	r19,r2,483bc <__umoddi3+0x284>
   483ac:	9c27883a 	add	r19,r19,r16
   483b0:	9c000236 	bltu	r19,r16,483bc <__umoddi3+0x284>
   483b4:	9880012e 	bgeu	r19,r2,483bc <__umoddi3+0x284>
   483b8:	9c27883a 	add	r19,r19,r16
   483bc:	9885c83a 	sub	r2,r19,r2
   483c0:	1544d83a 	srl	r2,r2,r21
   483c4:	0007883a 	mov	r3,zero
   483c8:	00000206 	br	483d4 <__umoddi3+0x29c>
   483cc:	2005883a 	mov	r2,r4
   483d0:	2807883a 	mov	r3,r5
   483d4:	dfc00c17 	ldw	ra,48(sp)
   483d8:	df000b17 	ldw	fp,44(sp)
   483dc:	ddc00a17 	ldw	r23,40(sp)
   483e0:	dd800917 	ldw	r22,36(sp)
   483e4:	dd400817 	ldw	r21,32(sp)
   483e8:	dd000717 	ldw	r20,28(sp)
   483ec:	dcc00617 	ldw	r19,24(sp)
   483f0:	dc800517 	ldw	r18,20(sp)
   483f4:	dc400417 	ldw	r17,16(sp)
   483f8:	dc000317 	ldw	r16,12(sp)
   483fc:	dec00d04 	addi	sp,sp,52
   48400:	f800283a 	ret
   48404:	00803fc4 	movi	r2,255
   48408:	11c0b236 	bltu	r2,r7,486d4 <__umoddi3+0x59c>
   4840c:	0007883a 	mov	r3,zero
   48410:	0027883a 	mov	r19,zero
   48414:	003f9b06 	br	48284 <__umoddi3+0x14c>
   48418:	00804034 	movhi	r2,256
   4841c:	10bfffc4 	addi	r2,r2,-1
   48420:	1180b236 	bltu	r2,r6,486ec <__umoddi3+0x5b4>
   48424:	00800404 	movi	r2,16
   48428:	1009883a 	mov	r4,r2
   4842c:	003f5a06 	br	48198 <__umoddi3+0x60>
   48430:	00803fc4 	movi	r2,255
   48434:	1400b036 	bltu	r2,r16,486f8 <__umoddi3+0x5c0>
   48438:	0005883a 	mov	r2,zero
   4843c:	0007883a 	mov	r3,zero
   48440:	003fad06 	br	482f8 <__umoddi3+0x1c0>
   48444:	34c4d83a 	srl	r2,r6,r19
   48448:	3c0e983a 	sll	r7,r7,r16
   4844c:	8cf8d83a 	srl	fp,r17,r19
   48450:	8c22983a 	sll	r17,r17,r16
   48454:	38a8b03a 	or	r20,r7,r2
   48458:	a02ad43a 	srli	r21,r20,16
   4845c:	94c4d83a 	srl	r2,r18,r19
   48460:	e009883a 	mov	r4,fp
   48464:	a80b883a 	mov	r5,r21
   48468:	342c983a 	sll	r22,r6,r16
   4846c:	88a2b03a 	or	r17,r17,r2
   48470:	00495c80 	call	495c8 <__umodsi3>
   48474:	e009883a 	mov	r4,fp
   48478:	a80b883a 	mov	r5,r21
   4847c:	a5ffffcc 	andi	r23,r20,65535
   48480:	d8800215 	stw	r2,8(sp)
   48484:	00495c00 	call	495c0 <__udivsi3>
   48488:	1009883a 	mov	r4,r2
   4848c:	b80b883a 	mov	r5,r23
   48490:	1039883a 	mov	fp,r2
   48494:	00495d00 	call	495d0 <__mulsi3>
   48498:	d8c00217 	ldw	r3,8(sp)
   4849c:	1009883a 	mov	r4,r2
   484a0:	8804d43a 	srli	r2,r17,16
   484a4:	1806943a 	slli	r3,r3,16
   484a8:	9424983a 	sll	r18,r18,r16
   484ac:	1886b03a 	or	r3,r3,r2
   484b0:	1900042e 	bgeu	r3,r4,484c4 <__umoddi3+0x38c>
   484b4:	1d07883a 	add	r3,r3,r20
   484b8:	e0bfffc4 	addi	r2,fp,-1
   484bc:	1d009b2e 	bgeu	r3,r20,4872c <__umoddi3+0x5f4>
   484c0:	1039883a 	mov	fp,r2
   484c4:	1907c83a 	sub	r3,r3,r4
   484c8:	1809883a 	mov	r4,r3
   484cc:	a80b883a 	mov	r5,r21
   484d0:	d8c00215 	stw	r3,8(sp)
   484d4:	00495c80 	call	495c8 <__umodsi3>
   484d8:	d8c00217 	ldw	r3,8(sp)
   484dc:	a80b883a 	mov	r5,r21
   484e0:	d8800015 	stw	r2,0(sp)
   484e4:	1809883a 	mov	r4,r3
   484e8:	00495c00 	call	495c0 <__udivsi3>
   484ec:	1009883a 	mov	r4,r2
   484f0:	b80b883a 	mov	r5,r23
   484f4:	102b883a 	mov	r21,r2
   484f8:	00495d00 	call	495d0 <__mulsi3>
   484fc:	d9c00017 	ldw	r7,0(sp)
   48500:	8c7fffcc 	andi	r17,r17,65535
   48504:	380e943a 	slli	r7,r7,16
   48508:	3c4eb03a 	or	r7,r7,r17
   4850c:	3880042e 	bgeu	r7,r2,48520 <__umoddi3+0x3e8>
   48510:	3d0f883a 	add	r7,r7,r20
   48514:	a8ffffc4 	addi	r3,r21,-1
   48518:	3d00802e 	bgeu	r7,r20,4871c <__umoddi3+0x5e4>
   4851c:	182b883a 	mov	r21,r3
   48520:	e038943a 	slli	fp,fp,16
   48524:	b010d43a 	srli	r8,r22,16
   48528:	b1bfffcc 	andi	r6,r22,65535
   4852c:	af2ab03a 	or	r21,r21,fp
   48530:	a82ed43a 	srli	r23,r21,16
   48534:	ad7fffcc 	andi	r21,r21,65535
   48538:	300b883a 	mov	r5,r6
   4853c:	a809883a 	mov	r4,r21
   48540:	38a3c83a 	sub	r17,r7,r2
   48544:	d9800115 	stw	r6,4(sp)
   48548:	da000015 	stw	r8,0(sp)
   4854c:	00495d00 	call	495d0 <__mulsi3>
   48550:	da000017 	ldw	r8,0(sp)
   48554:	a809883a 	mov	r4,r21
   48558:	1039883a 	mov	fp,r2
   4855c:	400b883a 	mov	r5,r8
   48560:	da000215 	stw	r8,8(sp)
   48564:	00495d00 	call	495d0 <__mulsi3>
   48568:	d9800117 	ldw	r6,4(sp)
   4856c:	b809883a 	mov	r4,r23
   48570:	d8800015 	stw	r2,0(sp)
   48574:	300b883a 	mov	r5,r6
   48578:	00495d00 	call	495d0 <__mulsi3>
   4857c:	d8c00217 	ldw	r3,8(sp)
   48580:	b809883a 	mov	r4,r23
   48584:	102b883a 	mov	r21,r2
   48588:	180b883a 	mov	r5,r3
   4858c:	00495d00 	call	495d0 <__mulsi3>
   48590:	d9c00017 	ldw	r7,0(sp)
   48594:	1007883a 	mov	r3,r2
   48598:	e004d43a 	srli	r2,fp,16
   4859c:	a9c9883a 	add	r4,r21,r7
   485a0:	2089883a 	add	r4,r4,r2
   485a4:	2540022e 	bgeu	r4,r21,485b0 <__umoddi3+0x478>
   485a8:	00800074 	movhi	r2,1
   485ac:	1887883a 	add	r3,r3,r2
   485b0:	2004d43a 	srli	r2,r4,16
   485b4:	2008943a 	slli	r4,r4,16
   485b8:	e73fffcc 	andi	fp,fp,65535
   485bc:	1887883a 	add	r3,r3,r2
   485c0:	2709883a 	add	r4,r4,fp
   485c4:	88c03d36 	bltu	r17,r3,486bc <__umoddi3+0x584>
   485c8:	88c06126 	beq	r17,r3,48750 <__umoddi3+0x618>
   485cc:	88c7c83a 	sub	r3,r17,r3
   485d0:	202d883a 	mov	r22,r4
   485d4:	95adc83a 	sub	r22,r18,r22
   485d8:	95a5803a 	cmpltu	r18,r18,r22
   485dc:	1c87c83a 	sub	r3,r3,r18
   485e0:	1cc4983a 	sll	r2,r3,r19
   485e4:	b42cd83a 	srl	r22,r22,r16
   485e8:	1c06d83a 	srl	r3,r3,r16
   485ec:	1584b03a 	or	r2,r2,r22
   485f0:	003f7806 	br	483d4 <__umoddi3+0x29c>
   485f4:	002b883a 	mov	r21,zero
   485f8:	003ef506 	br	481d0 <__umoddi3+0x98>
   485fc:	8560983a 	sll	r16,r16,r21
   48600:	88e6d83a 	srl	r19,r17,r3
   48604:	90c6d83a 	srl	r3,r18,r3
   48608:	8028d43a 	srli	r20,r16,16
   4860c:	8d62983a 	sll	r17,r17,r21
   48610:	9809883a 	mov	r4,r19
   48614:	a00b883a 	mov	r5,r20
   48618:	88eeb03a 	or	r23,r17,r3
   4861c:	00495c80 	call	495c8 <__umodsi3>
   48620:	9809883a 	mov	r4,r19
   48624:	a00b883a 	mov	r5,r20
   48628:	1023883a 	mov	r17,r2
   4862c:	85bfffcc 	andi	r22,r16,65535
   48630:	00495c00 	call	495c0 <__udivsi3>
   48634:	1009883a 	mov	r4,r2
   48638:	b00b883a 	mov	r5,r22
   4863c:	00495d00 	call	495d0 <__mulsi3>
   48640:	1007883a 	mov	r3,r2
   48644:	8808943a 	slli	r4,r17,16
   48648:	b804d43a 	srli	r2,r23,16
   4864c:	9566983a 	sll	r19,r18,r21
   48650:	2088b03a 	or	r4,r4,r2
   48654:	20c0042e 	bgeu	r4,r3,48668 <__umoddi3+0x530>
   48658:	2409883a 	add	r4,r4,r16
   4865c:	24000236 	bltu	r4,r16,48668 <__umoddi3+0x530>
   48660:	20c0012e 	bgeu	r4,r3,48668 <__umoddi3+0x530>
   48664:	2409883a 	add	r4,r4,r16
   48668:	20e5c83a 	sub	r18,r4,r3
   4866c:	9009883a 	mov	r4,r18
   48670:	a00b883a 	mov	r5,r20
   48674:	00495c80 	call	495c8 <__umodsi3>
   48678:	1023883a 	mov	r17,r2
   4867c:	9009883a 	mov	r4,r18
   48680:	a00b883a 	mov	r5,r20
   48684:	8822943a 	slli	r17,r17,16
   48688:	00495c00 	call	495c0 <__udivsi3>
   4868c:	1009883a 	mov	r4,r2
   48690:	b00b883a 	mov	r5,r22
   48694:	bdffffcc 	andi	r23,r23,65535
   48698:	00495d00 	call	495d0 <__mulsi3>
   4869c:	8de2b03a 	or	r17,r17,r23
   486a0:	8880042e 	bgeu	r17,r2,486b4 <__umoddi3+0x57c>
   486a4:	8c23883a 	add	r17,r17,r16
   486a8:	8c000236 	bltu	r17,r16,486b4 <__umoddi3+0x57c>
   486ac:	8880012e 	bgeu	r17,r2,486b4 <__umoddi3+0x57c>
   486b0:	8c23883a 	add	r17,r17,r16
   486b4:	88a3c83a 	sub	r17,r17,r2
   486b8:	003f1b06 	br	48328 <__umoddi3+0x1f0>
   486bc:	25adc83a 	sub	r22,r4,r22
   486c0:	1d07c83a 	sub	r3,r3,r20
   486c4:	2589803a 	cmpltu	r4,r4,r22
   486c8:	1907c83a 	sub	r3,r3,r4
   486cc:	88c7c83a 	sub	r3,r17,r3
   486d0:	003fc006 	br	485d4 <__umoddi3+0x49c>
   486d4:	00c00204 	movi	r3,8
   486d8:	1827883a 	mov	r19,r3
   486dc:	003ee906 	br	48284 <__umoddi3+0x14c>
   486e0:	00c00604 	movi	r3,24
   486e4:	1827883a 	mov	r19,r3
   486e8:	003ee606 	br	48284 <__umoddi3+0x14c>
   486ec:	00800604 	movi	r2,24
   486f0:	1009883a 	mov	r4,r2
   486f4:	003ea806 	br	48198 <__umoddi3+0x60>
   486f8:	00800204 	movi	r2,8
   486fc:	1007883a 	mov	r3,r2
   48700:	003efd06 	br	482f8 <__umoddi3+0x1c0>
   48704:	00800604 	movi	r2,24
   48708:	1007883a 	mov	r3,r2
   4870c:	003efa06 	br	482f8 <__umoddi3+0x1c0>
   48710:	00800204 	movi	r2,8
   48714:	1009883a 	mov	r4,r2
   48718:	003e9f06 	br	48198 <__umoddi3+0x60>
   4871c:	38bf7f2e 	bgeu	r7,r2,4851c <__umoddi3+0x3e4>
   48720:	ad7fff84 	addi	r21,r21,-2
   48724:	3d0f883a 	add	r7,r7,r20
   48728:	003f7d06 	br	48520 <__umoddi3+0x3e8>
   4872c:	193f642e 	bgeu	r3,r4,484c0 <__umoddi3+0x388>
   48730:	e73fff84 	addi	fp,fp,-2
   48734:	1d07883a 	add	r3,r3,r20
   48738:	003f6206 	br	484c4 <__umoddi3+0x38c>
   4873c:	1c07883a 	add	r3,r3,r16
   48740:	003f0b06 	br	48370 <__umoddi3+0x238>
   48744:	9005883a 	mov	r2,r18
   48748:	a007883a 	mov	r3,r20
   4874c:	003f2106 	br	483d4 <__umoddi3+0x29c>
   48750:	913fda36 	bltu	r18,r4,486bc <__umoddi3+0x584>
   48754:	202d883a 	mov	r22,r4
   48758:	0007883a 	mov	r3,zero
   4875c:	003f9d06 	br	485d4 <__umoddi3+0x49c>

00048760 <_fpadd_parts>:
   48760:	2005883a 	mov	r2,r4
   48764:	21000017 	ldw	r4,0(r4)
   48768:	01c00044 	movi	r7,1
   4876c:	3900622e 	bgeu	r7,r4,488f8 <_fpadd_parts+0x198>
   48770:	28c00017 	ldw	r3,0(r5)
   48774:	38c05f2e 	bgeu	r7,r3,488f4 <_fpadd_parts+0x194>
   48778:	01c00104 	movi	r7,4
   4877c:	21c0c626 	beq	r4,r7,48a98 <_fpadd_parts+0x338>
   48780:	19c05c26 	beq	r3,r7,488f4 <_fpadd_parts+0x194>
   48784:	01c00084 	movi	r7,2
   48788:	19c06b26 	beq	r3,r7,48938 <_fpadd_parts+0x1d8>
   4878c:	21c05926 	beq	r4,r7,488f4 <_fpadd_parts+0x194>
   48790:	11c00217 	ldw	r7,8(r2)
   48794:	2ac00217 	ldw	r11,8(r5)
   48798:	13000317 	ldw	r12,12(r2)
   4879c:	13400417 	ldw	r13,16(r2)
   487a0:	3ac9c83a 	sub	r4,r7,r11
   487a4:	2a000317 	ldw	r8,12(r5)
   487a8:	2a400417 	ldw	r9,16(r5)
   487ac:	2015883a 	mov	r10,r4
   487b0:	20007516 	blt	r4,zero,48988 <_fpadd_parts+0x228>
   487b4:	00c00fc4 	movi	r3,63
   487b8:	1a805016 	blt	r3,r10,488fc <_fpadd_parts+0x19c>
   487bc:	0100870e 	bge	zero,r4,489dc <_fpadd_parts+0x27c>
   487c0:	50fff804 	addi	r3,r10,-32
   487c4:	18009916 	blt	r3,zero,48a2c <_fpadd_parts+0x2cc>
   487c8:	48d6d83a 	srl	r11,r9,r3
   487cc:	001d883a 	mov	r14,zero
   487d0:	18009e16 	blt	r3,zero,48a4c <_fpadd_parts+0x2ec>
   487d4:	01000044 	movi	r4,1
   487d8:	20c6983a 	sll	r3,r4,r3
   487dc:	0015883a 	mov	r10,zero
   487e0:	513fffc4 	addi	r4,r10,-1
   487e4:	2295403a 	cmpgeu	r10,r4,r10
   487e8:	1a87c83a 	sub	r3,r3,r10
   487ec:	1a52703a 	and	r9,r3,r9
   487f0:	2210703a 	and	r8,r4,r8
   487f4:	4250b03a 	or	r8,r8,r9
   487f8:	4010c03a 	cmpne	r8,r8,zero
   487fc:	42d0b03a 	or	r8,r8,r11
   48800:	7013883a 	mov	r9,r14
   48804:	11000117 	ldw	r4,4(r2)
   48808:	28800117 	ldw	r2,4(r5)
   4880c:	20804126 	beq	r4,r2,48914 <_fpadd_parts+0x1b4>
   48810:	20006326 	beq	r4,zero,489a0 <_fpadd_parts+0x240>
   48814:	4305c83a 	sub	r2,r8,r12
   48818:	4091803a 	cmpltu	r8,r8,r2
   4881c:	4b47c83a 	sub	r3,r9,r13
   48820:	1a07c83a 	sub	r3,r3,r8
   48824:	18006316 	blt	r3,zero,489b4 <_fpadd_parts+0x254>
   48828:	30000115 	stw	zero,4(r6)
   4882c:	31c00215 	stw	r7,8(r6)
   48830:	30800315 	stw	r2,12(r6)
   48834:	30c00415 	stw	r3,16(r6)
   48838:	11ffffc4 	addi	r7,r2,-1
   4883c:	388b403a 	cmpgeu	r5,r7,r2
   48840:	194bc83a 	sub	r5,r3,r5
   48844:	01040034 	movhi	r4,4096
   48848:	213fffc4 	addi	r4,r4,-1
   4884c:	21401736 	bltu	r4,r5,488ac <_fpadd_parts+0x14c>
   48850:	29008226 	beq	r5,r4,48a5c <_fpadd_parts+0x2fc>
   48854:	31400217 	ldw	r5,8(r6)
   48858:	02840034 	movhi	r10,4096
   4885c:	52bfffc4 	addi	r10,r10,-1
   48860:	033fff84 	movi	r12,-2
   48864:	297fffc4 	addi	r5,r5,-1
   48868:	00000106 	br	48870 <_fpadd_parts+0x110>
   4886c:	3a804a26 	beq	r7,r10,48998 <_fpadd_parts+0x238>
   48870:	1089883a 	add	r4,r2,r2
   48874:	2091803a 	cmpltu	r8,r4,r2
   48878:	18c7883a 	add	r3,r3,r3
   4887c:	227fffc4 	addi	r9,r4,-1
   48880:	40d1883a 	add	r8,r8,r3
   48884:	490f403a 	cmpgeu	r7,r9,r4
   48888:	41cfc83a 	sub	r7,r8,r7
   4888c:	2817883a 	mov	r11,r5
   48890:	2005883a 	mov	r2,r4
   48894:	4007883a 	mov	r3,r8
   48898:	297fffc4 	addi	r5,r5,-1
   4889c:	51fff32e 	bgeu	r10,r7,4886c <_fpadd_parts+0x10c>
   488a0:	31000315 	stw	r4,12(r6)
   488a4:	32000415 	stw	r8,16(r6)
   488a8:	32c00215 	stw	r11,8(r6)
   488ac:	010000c4 	movi	r4,3
   488b0:	31000015 	stw	r4,0(r6)
   488b4:	01080034 	movhi	r4,8192
   488b8:	213fffc4 	addi	r4,r4,-1
   488bc:	20c00b2e 	bgeu	r4,r3,488ec <_fpadd_parts+0x18c>
   488c0:	180e97fa 	slli	r7,r3,31
   488c4:	1008d07a 	srli	r4,r2,1
   488c8:	31400217 	ldw	r5,8(r6)
   488cc:	1806d07a 	srli	r3,r3,1
   488d0:	1080004c 	andi	r2,r2,1
   488d4:	3908b03a 	or	r4,r7,r4
   488d8:	1108b03a 	or	r4,r2,r4
   488dc:	29400044 	addi	r5,r5,1
   488e0:	31000315 	stw	r4,12(r6)
   488e4:	30c00415 	stw	r3,16(r6)
   488e8:	31400215 	stw	r5,8(r6)
   488ec:	3005883a 	mov	r2,r6
   488f0:	f800283a 	ret
   488f4:	2805883a 	mov	r2,r5
   488f8:	f800283a 	ret
   488fc:	59c01e0e 	bge	r11,r7,48978 <_fpadd_parts+0x218>
   48900:	11000117 	ldw	r4,4(r2)
   48904:	28800117 	ldw	r2,4(r5)
   48908:	0011883a 	mov	r8,zero
   4890c:	0013883a 	mov	r9,zero
   48910:	20bfbf1e 	bne	r4,r2,48810 <_fpadd_parts+0xb0>
   48914:	4305883a 	add	r2,r8,r12
   48918:	1207803a 	cmpltu	r3,r2,r8
   4891c:	4b53883a 	add	r9,r9,r13
   48920:	1a47883a 	add	r3,r3,r9
   48924:	31000115 	stw	r4,4(r6)
   48928:	31c00215 	stw	r7,8(r6)
   4892c:	30800315 	stw	r2,12(r6)
   48930:	30c00415 	stw	r3,16(r6)
   48934:	003fdd06 	br	488ac <_fpadd_parts+0x14c>
   48938:	20ffef1e 	bne	r4,r3,488f8 <_fpadd_parts+0x198>
   4893c:	31000015 	stw	r4,0(r6)
   48940:	10c00117 	ldw	r3,4(r2)
   48944:	30c00115 	stw	r3,4(r6)
   48948:	10c00217 	ldw	r3,8(r2)
   4894c:	11000117 	ldw	r4,4(r2)
   48950:	29400117 	ldw	r5,4(r5)
   48954:	30c00215 	stw	r3,8(r6)
   48958:	10c00317 	ldw	r3,12(r2)
   4895c:	2908703a 	and	r4,r5,r4
   48960:	30c00315 	stw	r3,12(r6)
   48964:	10c00417 	ldw	r3,16(r2)
   48968:	31000115 	stw	r4,4(r6)
   4896c:	3005883a 	mov	r2,r6
   48970:	30c00415 	stw	r3,16(r6)
   48974:	f800283a 	ret
   48978:	580f883a 	mov	r7,r11
   4897c:	0019883a 	mov	r12,zero
   48980:	001b883a 	mov	r13,zero
   48984:	003f9f06 	br	48804 <_fpadd_parts+0xa4>
   48988:	0115c83a 	sub	r10,zero,r4
   4898c:	00c00fc4 	movi	r3,63
   48990:	1abfda16 	blt	r3,r10,488fc <_fpadd_parts+0x19c>
   48994:	003f8906 	br	487bc <_fpadd_parts+0x5c>
   48998:	627fb52e 	bgeu	r12,r9,48870 <_fpadd_parts+0x110>
   4899c:	003fc006 	br	488a0 <_fpadd_parts+0x140>
   489a0:	6205c83a 	sub	r2,r12,r8
   489a4:	6099803a 	cmpltu	r12,r12,r2
   489a8:	6a47c83a 	sub	r3,r13,r9
   489ac:	1b07c83a 	sub	r3,r3,r12
   489b0:	183f9d0e 	bge	r3,zero,48828 <_fpadd_parts+0xc8>
   489b4:	0085c83a 	sub	r2,zero,r2
   489b8:	1008c03a 	cmpne	r4,r2,zero
   489bc:	00c7c83a 	sub	r3,zero,r3
   489c0:	1907c83a 	sub	r3,r3,r4
   489c4:	01000044 	movi	r4,1
   489c8:	31000115 	stw	r4,4(r6)
   489cc:	31c00215 	stw	r7,8(r6)
   489d0:	30800315 	stw	r2,12(r6)
   489d4:	30c00415 	stw	r3,16(r6)
   489d8:	003f9706 	br	48838 <_fpadd_parts+0xd8>
   489dc:	203f8926 	beq	r4,zero,48804 <_fpadd_parts+0xa4>
   489e0:	50fff804 	addi	r3,r10,-32
   489e4:	3a8f883a 	add	r7,r7,r10
   489e8:	18002316 	blt	r3,zero,48a78 <_fpadd_parts+0x318>
   489ec:	68d6d83a 	srl	r11,r13,r3
   489f0:	001d883a 	mov	r14,zero
   489f4:	18001c16 	blt	r3,zero,48a68 <_fpadd_parts+0x308>
   489f8:	01000044 	movi	r4,1
   489fc:	20c6983a 	sll	r3,r4,r3
   48a00:	0015883a 	mov	r10,zero
   48a04:	513fffc4 	addi	r4,r10,-1
   48a08:	2295403a 	cmpgeu	r10,r4,r10
   48a0c:	1a87c83a 	sub	r3,r3,r10
   48a10:	1b5a703a 	and	r13,r3,r13
   48a14:	2318703a 	and	r12,r4,r12
   48a18:	6358b03a 	or	r12,r12,r13
   48a1c:	6018c03a 	cmpne	r12,r12,zero
   48a20:	62d8b03a 	or	r12,r12,r11
   48a24:	701b883a 	mov	r13,r14
   48a28:	003f7606 	br	48804 <_fpadd_parts+0xa4>
   48a2c:	4808907a 	slli	r4,r9,1
   48a30:	02c007c4 	movi	r11,31
   48a34:	5a97c83a 	sub	r11,r11,r10
   48a38:	22c8983a 	sll	r4,r4,r11
   48a3c:	4296d83a 	srl	r11,r8,r10
   48a40:	4a9cd83a 	srl	r14,r9,r10
   48a44:	22d6b03a 	or	r11,r4,r11
   48a48:	003f6106 	br	487d0 <_fpadd_parts+0x70>
   48a4c:	00c00044 	movi	r3,1
   48a50:	1a94983a 	sll	r10,r3,r10
   48a54:	0007883a 	mov	r3,zero
   48a58:	003f6106 	br	487e0 <_fpadd_parts+0x80>
   48a5c:	013fff84 	movi	r4,-2
   48a60:	21ff7c2e 	bgeu	r4,r7,48854 <_fpadd_parts+0xf4>
   48a64:	003f9106 	br	488ac <_fpadd_parts+0x14c>
   48a68:	00c00044 	movi	r3,1
   48a6c:	1a94983a 	sll	r10,r3,r10
   48a70:	0007883a 	mov	r3,zero
   48a74:	003fe306 	br	48a04 <_fpadd_parts+0x2a4>
   48a78:	6816907a 	slli	r11,r13,1
   48a7c:	010007c4 	movi	r4,31
   48a80:	2289c83a 	sub	r4,r4,r10
   48a84:	5908983a 	sll	r4,r11,r4
   48a88:	6296d83a 	srl	r11,r12,r10
   48a8c:	6a9cd83a 	srl	r14,r13,r10
   48a90:	22d6b03a 	or	r11,r4,r11
   48a94:	003fd706 	br	489f4 <_fpadd_parts+0x294>
   48a98:	193f971e 	bne	r3,r4,488f8 <_fpadd_parts+0x198>
   48a9c:	11000117 	ldw	r4,4(r2)
   48aa0:	28c00117 	ldw	r3,4(r5)
   48aa4:	20ff9426 	beq	r4,r3,488f8 <_fpadd_parts+0x198>
   48aa8:	00800074 	movhi	r2,1
   48aac:	1080af04 	addi	r2,r2,700
   48ab0:	f800283a 	ret

00048ab4 <__adddf3>:
   48ab4:	deffec04 	addi	sp,sp,-80
   48ab8:	d9001115 	stw	r4,68(sp)
   48abc:	d9401215 	stw	r5,72(sp)
   48ac0:	d9001104 	addi	r4,sp,68
   48ac4:	d9400a04 	addi	r5,sp,40
   48ac8:	dfc01315 	stw	ra,76(sp)
   48acc:	d9c01015 	stw	r7,64(sp)
   48ad0:	d9800f15 	stw	r6,60(sp)
   48ad4:	00499d80 	call	499d8 <__unpack_d>
   48ad8:	d9000f04 	addi	r4,sp,60
   48adc:	d9400504 	addi	r5,sp,20
   48ae0:	00499d80 	call	499d8 <__unpack_d>
   48ae4:	d9000a04 	addi	r4,sp,40
   48ae8:	d9400504 	addi	r5,sp,20
   48aec:	d80d883a 	mov	r6,sp
   48af0:	00487600 	call	48760 <_fpadd_parts>
   48af4:	1009883a 	mov	r4,r2
   48af8:	00497b40 	call	497b4 <__pack_d>
   48afc:	dfc01317 	ldw	ra,76(sp)
   48b00:	dec01404 	addi	sp,sp,80
   48b04:	f800283a 	ret

00048b08 <__subdf3>:
   48b08:	deffec04 	addi	sp,sp,-80
   48b0c:	d9001115 	stw	r4,68(sp)
   48b10:	d9401215 	stw	r5,72(sp)
   48b14:	d9001104 	addi	r4,sp,68
   48b18:	d9400a04 	addi	r5,sp,40
   48b1c:	dfc01315 	stw	ra,76(sp)
   48b20:	d9c01015 	stw	r7,64(sp)
   48b24:	d9800f15 	stw	r6,60(sp)
   48b28:	00499d80 	call	499d8 <__unpack_d>
   48b2c:	d9000f04 	addi	r4,sp,60
   48b30:	d9400504 	addi	r5,sp,20
   48b34:	00499d80 	call	499d8 <__unpack_d>
   48b38:	d8800617 	ldw	r2,24(sp)
   48b3c:	d9000a04 	addi	r4,sp,40
   48b40:	d9400504 	addi	r5,sp,20
   48b44:	d80d883a 	mov	r6,sp
   48b48:	1080005c 	xori	r2,r2,1
   48b4c:	d8800615 	stw	r2,24(sp)
   48b50:	00487600 	call	48760 <_fpadd_parts>
   48b54:	1009883a 	mov	r4,r2
   48b58:	00497b40 	call	497b4 <__pack_d>
   48b5c:	dfc01317 	ldw	ra,76(sp)
   48b60:	dec01404 	addi	sp,sp,80
   48b64:	f800283a 	ret

00048b68 <__muldf3>:
   48b68:	deffe404 	addi	sp,sp,-112
   48b6c:	d9001115 	stw	r4,68(sp)
   48b70:	d9401215 	stw	r5,72(sp)
   48b74:	d9001104 	addi	r4,sp,68
   48b78:	d9400a04 	addi	r5,sp,40
   48b7c:	dfc01b15 	stw	ra,108(sp)
   48b80:	d9800f15 	stw	r6,60(sp)
   48b84:	d9c01015 	stw	r7,64(sp)
   48b88:	ddc01a15 	stw	r23,104(sp)
   48b8c:	dd801915 	stw	r22,100(sp)
   48b90:	dd401815 	stw	r21,96(sp)
   48b94:	dd001715 	stw	r20,92(sp)
   48b98:	dcc01615 	stw	r19,88(sp)
   48b9c:	dc801515 	stw	r18,84(sp)
   48ba0:	dc401415 	stw	r17,80(sp)
   48ba4:	dc001315 	stw	r16,76(sp)
   48ba8:	00499d80 	call	499d8 <__unpack_d>
   48bac:	d9000f04 	addi	r4,sp,60
   48bb0:	d9400504 	addi	r5,sp,20
   48bb4:	00499d80 	call	499d8 <__unpack_d>
   48bb8:	d8c00a17 	ldw	r3,40(sp)
   48bbc:	00800044 	movi	r2,1
   48bc0:	10c01136 	bltu	r2,r3,48c08 <__muldf3+0xa0>
   48bc4:	d8c00b17 	ldw	r3,44(sp)
   48bc8:	d8800617 	ldw	r2,24(sp)
   48bcc:	d9000a04 	addi	r4,sp,40
   48bd0:	1884c03a 	cmpne	r2,r3,r2
   48bd4:	d8800b15 	stw	r2,44(sp)
   48bd8:	00497b40 	call	497b4 <__pack_d>
   48bdc:	dfc01b17 	ldw	ra,108(sp)
   48be0:	ddc01a17 	ldw	r23,104(sp)
   48be4:	dd801917 	ldw	r22,100(sp)
   48be8:	dd401817 	ldw	r21,96(sp)
   48bec:	dd001717 	ldw	r20,92(sp)
   48bf0:	dcc01617 	ldw	r19,88(sp)
   48bf4:	dc801517 	ldw	r18,84(sp)
   48bf8:	dc401417 	ldw	r17,80(sp)
   48bfc:	dc001317 	ldw	r16,76(sp)
   48c00:	dec01c04 	addi	sp,sp,112
   48c04:	f800283a 	ret
   48c08:	d9000517 	ldw	r4,20(sp)
   48c0c:	11000636 	bltu	r2,r4,48c28 <__muldf3+0xc0>
   48c10:	d8800617 	ldw	r2,24(sp)
   48c14:	d8c00b17 	ldw	r3,44(sp)
   48c18:	d9000504 	addi	r4,sp,20
   48c1c:	1884c03a 	cmpne	r2,r3,r2
   48c20:	d8800615 	stw	r2,24(sp)
   48c24:	003fec06 	br	48bd8 <__muldf3+0x70>
   48c28:	00800104 	movi	r2,4
   48c2c:	1880051e 	bne	r3,r2,48c44 <__muldf3+0xdc>
   48c30:	00800084 	movi	r2,2
   48c34:	20bfe31e 	bne	r4,r2,48bc4 <__muldf3+0x5c>
   48c38:	01000074 	movhi	r4,1
   48c3c:	2100af04 	addi	r4,r4,700
   48c40:	003fe506 	br	48bd8 <__muldf3+0x70>
   48c44:	2080031e 	bne	r4,r2,48c54 <__muldf3+0xec>
   48c48:	00800084 	movi	r2,2
   48c4c:	18bffa26 	beq	r3,r2,48c38 <__muldf3+0xd0>
   48c50:	003fef06 	br	48c10 <__muldf3+0xa8>
   48c54:	00800084 	movi	r2,2
   48c58:	18bfda26 	beq	r3,r2,48bc4 <__muldf3+0x5c>
   48c5c:	20bfec26 	beq	r4,r2,48c10 <__muldf3+0xa8>
   48c60:	dc000d17 	ldw	r16,52(sp)
   48c64:	dd000817 	ldw	r20,32(sp)
   48c68:	dc800917 	ldw	r18,36(sp)
   48c6c:	8009883a 	mov	r4,r16
   48c70:	000b883a 	mov	r5,zero
   48c74:	a00d883a 	mov	r6,r20
   48c78:	000f883a 	mov	r7,zero
   48c7c:	00495f80 	call	495f8 <__muldi3>
   48c80:	dc400e17 	ldw	r17,56(sp)
   48c84:	9009883a 	mov	r4,r18
   48c88:	800d883a 	mov	r6,r16
   48c8c:	000b883a 	mov	r5,zero
   48c90:	000f883a 	mov	r7,zero
   48c94:	102f883a 	mov	r23,r2
   48c98:	1827883a 	mov	r19,r3
   48c9c:	00495f80 	call	495f8 <__muldi3>
   48ca0:	900d883a 	mov	r6,r18
   48ca4:	8809883a 	mov	r4,r17
   48ca8:	000b883a 	mov	r5,zero
   48cac:	000f883a 	mov	r7,zero
   48cb0:	102b883a 	mov	r21,r2
   48cb4:	1821883a 	mov	r16,r3
   48cb8:	00495f80 	call	495f8 <__muldi3>
   48cbc:	8809883a 	mov	r4,r17
   48cc0:	000b883a 	mov	r5,zero
   48cc4:	a00d883a 	mov	r6,r20
   48cc8:	000f883a 	mov	r7,zero
   48ccc:	102d883a 	mov	r22,r2
   48cd0:	1825883a 	mov	r18,r3
   48cd4:	00495f80 	call	495f8 <__muldi3>
   48cd8:	154b883a 	add	r5,r2,r21
   48cdc:	2889803a 	cmpltu	r4,r5,r2
   48ce0:	1c07883a 	add	r3,r3,r16
   48ce4:	20c9883a 	add	r4,r4,r3
   48ce8:	24004b36 	bltu	r4,r16,48e18 <__muldf3+0x2b0>
   48cec:	8100011e 	bne	r16,r4,48cf4 <__muldf3+0x18c>
   48cf0:	2d404936 	bltu	r5,r21,48e18 <__muldf3+0x2b0>
   48cf4:	0011883a 	mov	r8,zero
   48cf8:	0007883a 	mov	r3,zero
   48cfc:	2ccb883a 	add	r5,r5,r19
   48d00:	b80d883a 	mov	r6,r23
   48d04:	2cc0012e 	bgeu	r5,r19,48d0c <__muldf3+0x1a4>
   48d08:	02000044 	movi	r8,1
   48d0c:	258f883a 	add	r7,r4,r22
   48d10:	3909803a 	cmpltu	r4,r7,r4
   48d14:	da400c17 	ldw	r9,48(sp)
   48d18:	2489883a 	add	r4,r4,r18
   48d1c:	d8800717 	ldw	r2,28(sp)
   48d20:	20c9883a 	add	r4,r4,r3
   48d24:	da800b17 	ldw	r10,44(sp)
   48d28:	d8c00617 	ldw	r3,24(sp)
   48d2c:	3a11883a 	add	r8,r7,r8
   48d30:	4885883a 	add	r2,r9,r2
   48d34:	50c6c03a 	cmpne	r3,r10,r3
   48d38:	41cf803a 	cmpltu	r7,r8,r7
   48d3c:	12400104 	addi	r9,r2,4
   48d40:	d8c00115 	stw	r3,4(sp)
   48d44:	3909883a 	add	r4,r7,r4
   48d48:	da400215 	stw	r9,8(sp)
   48d4c:	03480034 	movhi	r13,8192
   48d50:	6b7fffc4 	addi	r13,r13,-1
   48d54:	4007883a 	mov	r3,r8
   48d58:	6900102e 	bgeu	r13,r4,48d9c <__muldf3+0x234>
   48d5c:	10800144 	addi	r2,r2,5
   48d60:	180ed07a 	srli	r7,r3,1
   48d64:	18c0004c 	andi	r3,r3,1
   48d68:	201097fa 	slli	r8,r4,31
   48d6c:	281697fa 	slli	r11,r5,31
   48d70:	2008d07a 	srli	r4,r4,1
   48d74:	3014d07a 	srli	r10,r6,1
   48d78:	2812d07a 	srli	r9,r5,1
   48d7c:	1019883a 	mov	r12,r2
   48d80:	18000226 	beq	r3,zero,48d8c <__muldf3+0x224>
   48d84:	5a8cb03a 	or	r6,r11,r10
   48d88:	49600034 	orhi	r5,r9,32768
   48d8c:	41c6b03a 	or	r3,r8,r7
   48d90:	10800044 	addi	r2,r2,1
   48d94:	693ff236 	bltu	r13,r4,48d60 <__muldf3+0x1f8>
   48d98:	db000215 	stw	r12,8(sp)
   48d9c:	03440034 	movhi	r13,4096
   48da0:	6b7fffc4 	addi	r13,r13,-1
   48da4:	69001336 	bltu	r13,r4,48df4 <__muldf3+0x28c>
   48da8:	d8800217 	ldw	r2,8(sp)
   48dac:	10bfffc4 	addi	r2,r2,-1
   48db0:	18d3883a 	add	r9,r3,r3
   48db4:	48c7803a 	cmpltu	r3,r9,r3
   48db8:	2109883a 	add	r4,r4,r4
   48dbc:	190f883a 	add	r7,r3,r4
   48dc0:	3191883a 	add	r8,r6,r6
   48dc4:	4197803a 	cmpltu	r11,r8,r6
   48dc8:	2955883a 	add	r10,r5,r5
   48dcc:	1019883a 	mov	r12,r2
   48dd0:	4807883a 	mov	r3,r9
   48dd4:	3809883a 	mov	r4,r7
   48dd8:	2800010e 	bge	r5,zero,48de0 <__muldf3+0x278>
   48ddc:	48c00054 	ori	r3,r9,1
   48de0:	400d883a 	mov	r6,r8
   48de4:	5a8b883a 	add	r5,r11,r10
   48de8:	10bfffc4 	addi	r2,r2,-1
   48dec:	69fff02e 	bgeu	r13,r7,48db0 <__muldf3+0x248>
   48df0:	db000215 	stw	r12,8(sp)
   48df4:	18803fcc 	andi	r2,r3,255
   48df8:	01c02004 	movi	r7,128
   48dfc:	11c00926 	beq	r2,r7,48e24 <__muldf3+0x2bc>
   48e00:	008000c4 	movi	r2,3
   48e04:	d9000415 	stw	r4,16(sp)
   48e08:	d8c00315 	stw	r3,12(sp)
   48e0c:	d8800015 	stw	r2,0(sp)
   48e10:	d809883a 	mov	r4,sp
   48e14:	003f7006 	br	48bd8 <__muldf3+0x70>
   48e18:	0011883a 	mov	r8,zero
   48e1c:	00c00044 	movi	r3,1
   48e20:	003fb606 	br	48cfc <__muldf3+0x194>
   48e24:	19c0400c 	andi	r7,r3,256
   48e28:	383ff51e 	bne	r7,zero,48e00 <__muldf3+0x298>
   48e2c:	314ab03a 	or	r5,r6,r5
   48e30:	283ff326 	beq	r5,zero,48e00 <__muldf3+0x298>
   48e34:	1885883a 	add	r2,r3,r2
   48e38:	10cb803a 	cmpltu	r5,r2,r3
   48e3c:	00ffc004 	movi	r3,-256
   48e40:	10c6703a 	and	r3,r2,r3
   48e44:	2909883a 	add	r4,r5,r4
   48e48:	003fed06 	br	48e00 <__muldf3+0x298>

00048e4c <__divdf3>:
   48e4c:	defff104 	addi	sp,sp,-60
   48e50:	d9000c15 	stw	r4,48(sp)
   48e54:	d9400d15 	stw	r5,52(sp)
   48e58:	d9000c04 	addi	r4,sp,48
   48e5c:	d9400504 	addi	r5,sp,20
   48e60:	dfc00e15 	stw	ra,56(sp)
   48e64:	d9800a15 	stw	r6,40(sp)
   48e68:	d9c00b15 	stw	r7,44(sp)
   48e6c:	00499d80 	call	499d8 <__unpack_d>
   48e70:	d9000a04 	addi	r4,sp,40
   48e74:	d80b883a 	mov	r5,sp
   48e78:	00499d80 	call	499d8 <__unpack_d>
   48e7c:	d8c00517 	ldw	r3,20(sp)
   48e80:	00800044 	movi	r2,1
   48e84:	10c00536 	bltu	r2,r3,48e9c <__divdf3+0x50>
   48e88:	d9000504 	addi	r4,sp,20
   48e8c:	00497b40 	call	497b4 <__pack_d>
   48e90:	dfc00e17 	ldw	ra,56(sp)
   48e94:	dec00f04 	addi	sp,sp,60
   48e98:	f800283a 	ret
   48e9c:	d9000017 	ldw	r4,0(sp)
   48ea0:	11000536 	bltu	r2,r4,48eb8 <__divdf3+0x6c>
   48ea4:	d809883a 	mov	r4,sp
   48ea8:	00497b40 	call	497b4 <__pack_d>
   48eac:	dfc00e17 	ldw	ra,56(sp)
   48eb0:	dec00f04 	addi	sp,sp,60
   48eb4:	f800283a 	ret
   48eb8:	d9800617 	ldw	r6,24(sp)
   48ebc:	d9400117 	ldw	r5,4(sp)
   48ec0:	00800104 	movi	r2,4
   48ec4:	314af03a 	xor	r5,r6,r5
   48ec8:	d9400615 	stw	r5,24(sp)
   48ecc:	18800226 	beq	r3,r2,48ed8 <__divdf3+0x8c>
   48ed0:	01400084 	movi	r5,2
   48ed4:	1940041e 	bne	r3,r5,48ee8 <__divdf3+0x9c>
   48ed8:	193feb1e 	bne	r3,r4,48e88 <__divdf3+0x3c>
   48edc:	01000074 	movhi	r4,1
   48ee0:	2100af04 	addi	r4,r4,700
   48ee4:	003fe906 	br	48e8c <__divdf3+0x40>
   48ee8:	20803326 	beq	r4,r2,48fb8 <__divdf3+0x16c>
   48eec:	21403726 	beq	r4,r5,48fcc <__divdf3+0x180>
   48ef0:	d8800217 	ldw	r2,8(sp)
   48ef4:	d9000717 	ldw	r4,28(sp)
   48ef8:	d8c00917 	ldw	r3,36(sp)
   48efc:	da000417 	ldw	r8,16(sp)
   48f00:	2089c83a 	sub	r4,r4,r2
   48f04:	d9000715 	stw	r4,28(sp)
   48f08:	d8800817 	ldw	r2,32(sp)
   48f0c:	dbc00317 	ldw	r15,12(sp)
   48f10:	1a000236 	bltu	r3,r8,48f1c <__divdf3+0xd0>
   48f14:	40c0081e 	bne	r8,r3,48f38 <__divdf3+0xec>
   48f18:	13c0072e 	bgeu	r2,r15,48f38 <__divdf3+0xec>
   48f1c:	108b883a 	add	r5,r2,r2
   48f20:	288d803a 	cmpltu	r6,r5,r2
   48f24:	18c7883a 	add	r3,r3,r3
   48f28:	213fffc4 	addi	r4,r4,-1
   48f2c:	2805883a 	mov	r2,r5
   48f30:	30c7883a 	add	r3,r6,r3
   48f34:	d9000715 	stw	r4,28(sp)
   48f38:	01400f44 	movi	r5,61
   48f3c:	000f883a 	mov	r7,zero
   48f40:	01040034 	movhi	r4,4096
   48f44:	0019883a 	mov	r12,zero
   48f48:	001b883a 	mov	r13,zero
   48f4c:	201697fa 	slli	r11,r4,31
   48f50:	3814d07a 	srli	r10,r7,1
   48f54:	297fffc4 	addi	r5,r5,-1
   48f58:	1a000936 	bltu	r3,r8,48f80 <__divdf3+0x134>
   48f5c:	13cdc83a 	sub	r6,r2,r15
   48f60:	1193803a 	cmpltu	r9,r2,r6
   48f64:	1a1dc83a 	sub	r14,r3,r8
   48f68:	40c0011e 	bne	r8,r3,48f70 <__divdf3+0x124>
   48f6c:	13c00436 	bltu	r2,r15,48f80 <__divdf3+0x134>
   48f70:	3005883a 	mov	r2,r6
   48f74:	7247c83a 	sub	r3,r14,r9
   48f78:	61d8b03a 	or	r12,r12,r7
   48f7c:	691ab03a 	or	r13,r13,r4
   48f80:	108d883a 	add	r6,r2,r2
   48f84:	3093803a 	cmpltu	r9,r6,r2
   48f88:	18c7883a 	add	r3,r3,r3
   48f8c:	5a8eb03a 	or	r7,r11,r10
   48f90:	2008d07a 	srli	r4,r4,1
   48f94:	3005883a 	mov	r2,r6
   48f98:	48c7883a 	add	r3,r9,r3
   48f9c:	283feb1e 	bne	r5,zero,48f4c <__divdf3+0x100>
   48fa0:	61003fcc 	andi	r4,r12,255
   48fa4:	01402004 	movi	r5,128
   48fa8:	21400b26 	beq	r4,r5,48fd8 <__divdf3+0x18c>
   48fac:	db000815 	stw	r12,32(sp)
   48fb0:	db400915 	stw	r13,36(sp)
   48fb4:	003fb406 	br	48e88 <__divdf3+0x3c>
   48fb8:	d8000815 	stw	zero,32(sp)
   48fbc:	d8000915 	stw	zero,36(sp)
   48fc0:	d8000715 	stw	zero,28(sp)
   48fc4:	d9000504 	addi	r4,sp,20
   48fc8:	003fb006 	br	48e8c <__divdf3+0x40>
   48fcc:	d8800515 	stw	r2,20(sp)
   48fd0:	d9000504 	addi	r4,sp,20
   48fd4:	003fad06 	br	48e8c <__divdf3+0x40>
   48fd8:	6140400c 	andi	r5,r12,256
   48fdc:	283ff31e 	bne	r5,zero,48fac <__divdf3+0x160>
   48fe0:	30c4b03a 	or	r2,r6,r3
   48fe4:	103ff126 	beq	r2,zero,48fac <__divdf3+0x160>
   48fe8:	6109883a 	add	r4,r12,r4
   48fec:	2305803a 	cmpltu	r2,r4,r12
   48ff0:	033fc004 	movi	r12,-256
   48ff4:	2318703a 	and	r12,r4,r12
   48ff8:	135b883a 	add	r13,r2,r13
   48ffc:	003feb06 	br	48fac <__divdf3+0x160>

00049000 <__eqdf2>:
   49000:	defff104 	addi	sp,sp,-60
   49004:	d9000c15 	stw	r4,48(sp)
   49008:	d9400d15 	stw	r5,52(sp)
   4900c:	d9000c04 	addi	r4,sp,48
   49010:	d9400504 	addi	r5,sp,20
   49014:	dfc00e15 	stw	ra,56(sp)
   49018:	d9800a15 	stw	r6,40(sp)
   4901c:	d9c00b15 	stw	r7,44(sp)
   49020:	00499d80 	call	499d8 <__unpack_d>
   49024:	d9000a04 	addi	r4,sp,40
   49028:	d80b883a 	mov	r5,sp
   4902c:	00499d80 	call	499d8 <__unpack_d>
   49030:	d8c00517 	ldw	r3,20(sp)
   49034:	00800044 	movi	r2,1
   49038:	10c0052e 	bgeu	r2,r3,49050 <__eqdf2+0x50>
   4903c:	d8c00017 	ldw	r3,0(sp)
   49040:	10c0032e 	bgeu	r2,r3,49050 <__eqdf2+0x50>
   49044:	d9000504 	addi	r4,sp,20
   49048:	d80b883a 	mov	r5,sp
   4904c:	0049adc0 	call	49adc <__fpcmp_parts_d>
   49050:	dfc00e17 	ldw	ra,56(sp)
   49054:	dec00f04 	addi	sp,sp,60
   49058:	f800283a 	ret

0004905c <__nedf2>:
   4905c:	defff104 	addi	sp,sp,-60
   49060:	d9000c15 	stw	r4,48(sp)
   49064:	d9400d15 	stw	r5,52(sp)
   49068:	d9000c04 	addi	r4,sp,48
   4906c:	d9400504 	addi	r5,sp,20
   49070:	dfc00e15 	stw	ra,56(sp)
   49074:	d9800a15 	stw	r6,40(sp)
   49078:	d9c00b15 	stw	r7,44(sp)
   4907c:	00499d80 	call	499d8 <__unpack_d>
   49080:	d9000a04 	addi	r4,sp,40
   49084:	d80b883a 	mov	r5,sp
   49088:	00499d80 	call	499d8 <__unpack_d>
   4908c:	d8c00517 	ldw	r3,20(sp)
   49090:	00800044 	movi	r2,1
   49094:	10c0052e 	bgeu	r2,r3,490ac <__nedf2+0x50>
   49098:	d8c00017 	ldw	r3,0(sp)
   4909c:	10c0032e 	bgeu	r2,r3,490ac <__nedf2+0x50>
   490a0:	d9000504 	addi	r4,sp,20
   490a4:	d80b883a 	mov	r5,sp
   490a8:	0049adc0 	call	49adc <__fpcmp_parts_d>
   490ac:	dfc00e17 	ldw	ra,56(sp)
   490b0:	dec00f04 	addi	sp,sp,60
   490b4:	f800283a 	ret

000490b8 <__gtdf2>:
   490b8:	defff104 	addi	sp,sp,-60
   490bc:	d9000c15 	stw	r4,48(sp)
   490c0:	d9400d15 	stw	r5,52(sp)
   490c4:	d9000c04 	addi	r4,sp,48
   490c8:	d9400504 	addi	r5,sp,20
   490cc:	dfc00e15 	stw	ra,56(sp)
   490d0:	d9800a15 	stw	r6,40(sp)
   490d4:	d9c00b15 	stw	r7,44(sp)
   490d8:	00499d80 	call	499d8 <__unpack_d>
   490dc:	d9000a04 	addi	r4,sp,40
   490e0:	d80b883a 	mov	r5,sp
   490e4:	00499d80 	call	499d8 <__unpack_d>
   490e8:	d8c00517 	ldw	r3,20(sp)
   490ec:	00800044 	movi	r2,1
   490f0:	10c0082e 	bgeu	r2,r3,49114 <__gtdf2+0x5c>
   490f4:	d8c00017 	ldw	r3,0(sp)
   490f8:	10c0062e 	bgeu	r2,r3,49114 <__gtdf2+0x5c>
   490fc:	d9000504 	addi	r4,sp,20
   49100:	d80b883a 	mov	r5,sp
   49104:	0049adc0 	call	49adc <__fpcmp_parts_d>
   49108:	dfc00e17 	ldw	ra,56(sp)
   4910c:	dec00f04 	addi	sp,sp,60
   49110:	f800283a 	ret
   49114:	00bfffc4 	movi	r2,-1
   49118:	003ffb06 	br	49108 <__gtdf2+0x50>

0004911c <__gedf2>:
   4911c:	defff104 	addi	sp,sp,-60
   49120:	d9000c15 	stw	r4,48(sp)
   49124:	d9400d15 	stw	r5,52(sp)
   49128:	d9000c04 	addi	r4,sp,48
   4912c:	d9400504 	addi	r5,sp,20
   49130:	dfc00e15 	stw	ra,56(sp)
   49134:	d9800a15 	stw	r6,40(sp)
   49138:	d9c00b15 	stw	r7,44(sp)
   4913c:	00499d80 	call	499d8 <__unpack_d>
   49140:	d9000a04 	addi	r4,sp,40
   49144:	d80b883a 	mov	r5,sp
   49148:	00499d80 	call	499d8 <__unpack_d>
   4914c:	d8c00517 	ldw	r3,20(sp)
   49150:	00800044 	movi	r2,1
   49154:	10c0082e 	bgeu	r2,r3,49178 <__gedf2+0x5c>
   49158:	d8c00017 	ldw	r3,0(sp)
   4915c:	10c0062e 	bgeu	r2,r3,49178 <__gedf2+0x5c>
   49160:	d9000504 	addi	r4,sp,20
   49164:	d80b883a 	mov	r5,sp
   49168:	0049adc0 	call	49adc <__fpcmp_parts_d>
   4916c:	dfc00e17 	ldw	ra,56(sp)
   49170:	dec00f04 	addi	sp,sp,60
   49174:	f800283a 	ret
   49178:	00bfffc4 	movi	r2,-1
   4917c:	003ffb06 	br	4916c <__gedf2+0x50>

00049180 <__ltdf2>:
   49180:	defff104 	addi	sp,sp,-60
   49184:	d9000c15 	stw	r4,48(sp)
   49188:	d9400d15 	stw	r5,52(sp)
   4918c:	d9000c04 	addi	r4,sp,48
   49190:	d9400504 	addi	r5,sp,20
   49194:	dfc00e15 	stw	ra,56(sp)
   49198:	d9800a15 	stw	r6,40(sp)
   4919c:	d9c00b15 	stw	r7,44(sp)
   491a0:	00499d80 	call	499d8 <__unpack_d>
   491a4:	d9000a04 	addi	r4,sp,40
   491a8:	d80b883a 	mov	r5,sp
   491ac:	00499d80 	call	499d8 <__unpack_d>
   491b0:	d8c00517 	ldw	r3,20(sp)
   491b4:	00800044 	movi	r2,1
   491b8:	10c0052e 	bgeu	r2,r3,491d0 <__ltdf2+0x50>
   491bc:	d8c00017 	ldw	r3,0(sp)
   491c0:	10c0032e 	bgeu	r2,r3,491d0 <__ltdf2+0x50>
   491c4:	d9000504 	addi	r4,sp,20
   491c8:	d80b883a 	mov	r5,sp
   491cc:	0049adc0 	call	49adc <__fpcmp_parts_d>
   491d0:	dfc00e17 	ldw	ra,56(sp)
   491d4:	dec00f04 	addi	sp,sp,60
   491d8:	f800283a 	ret

000491dc <__floatsidf>:
   491dc:	2004d7fa 	srli	r2,r4,31
   491e0:	defff904 	addi	sp,sp,-28
   491e4:	00c000c4 	movi	r3,3
   491e8:	dfc00615 	stw	ra,24(sp)
   491ec:	dc000515 	stw	r16,20(sp)
   491f0:	d8c00015 	stw	r3,0(sp)
   491f4:	d8800115 	stw	r2,4(sp)
   491f8:	2000081e 	bne	r4,zero,4921c <__floatsidf+0x40>
   491fc:	00800084 	movi	r2,2
   49200:	d8800015 	stw	r2,0(sp)
   49204:	d809883a 	mov	r4,sp
   49208:	00497b40 	call	497b4 <__pack_d>
   4920c:	dfc00617 	ldw	ra,24(sp)
   49210:	dc000517 	ldw	r16,20(sp)
   49214:	dec00704 	addi	sp,sp,28
   49218:	f800283a 	ret
   4921c:	00c00f04 	movi	r3,60
   49220:	d8c00215 	stw	r3,8(sp)
   49224:	10000f1e 	bne	r2,zero,49264 <__floatsidf+0x88>
   49228:	2021883a 	mov	r16,r4
   4922c:	8009883a 	mov	r4,r16
   49230:	00497080 	call	49708 <__clzsi2>
   49234:	11000744 	addi	r4,r2,29
   49238:	0100110e 	bge	zero,r4,49280 <__floatsidf+0xa4>
   4923c:	10ffff44 	addi	r3,r2,-3
   49240:	18001216 	blt	r3,zero,4928c <__floatsidf+0xb0>
   49244:	80c6983a 	sll	r3,r16,r3
   49248:	0009883a 	mov	r4,zero
   4924c:	014007c4 	movi	r5,31
   49250:	2885c83a 	sub	r2,r5,r2
   49254:	d9000315 	stw	r4,12(sp)
   49258:	d8c00415 	stw	r3,16(sp)
   4925c:	d8800215 	stw	r2,8(sp)
   49260:	003fe806 	br	49204 <__floatsidf+0x28>
   49264:	00a00034 	movhi	r2,32768
   49268:	20800e26 	beq	r4,r2,492a4 <__floatsidf+0xc8>
   4926c:	0121c83a 	sub	r16,zero,r4
   49270:	8009883a 	mov	r4,r16
   49274:	00497080 	call	49708 <__clzsi2>
   49278:	11000744 	addi	r4,r2,29
   4927c:	013fef16 	blt	zero,r4,4923c <__floatsidf+0x60>
   49280:	dc000315 	stw	r16,12(sp)
   49284:	d8000415 	stw	zero,16(sp)
   49288:	003fde06 	br	49204 <__floatsidf+0x28>
   4928c:	800ad07a 	srli	r5,r16,1
   49290:	00c007c4 	movi	r3,31
   49294:	1907c83a 	sub	r3,r3,r4
   49298:	28c6d83a 	srl	r3,r5,r3
   4929c:	8108983a 	sll	r4,r16,r4
   492a0:	003fea06 	br	4924c <__floatsidf+0x70>
   492a4:	0005883a 	mov	r2,zero
   492a8:	00f07834 	movhi	r3,49632
   492ac:	003fd706 	br	4920c <__floatsidf+0x30>

000492b0 <__fixdfsi>:
   492b0:	defff804 	addi	sp,sp,-32
   492b4:	d9000515 	stw	r4,20(sp)
   492b8:	d9400615 	stw	r5,24(sp)
   492bc:	d9000504 	addi	r4,sp,20
   492c0:	d80b883a 	mov	r5,sp
   492c4:	dfc00715 	stw	ra,28(sp)
   492c8:	00499d80 	call	499d8 <__unpack_d>
   492cc:	d8800017 	ldw	r2,0(sp)
   492d0:	00c00084 	movi	r3,2
   492d4:	10c01c26 	beq	r2,r3,49348 <__fixdfsi+0x98>
   492d8:	00c00044 	movi	r3,1
   492dc:	18801a2e 	bgeu	r3,r2,49348 <__fixdfsi+0x98>
   492e0:	00c00104 	movi	r3,4
   492e4:	10c01126 	beq	r2,r3,4932c <__fixdfsi+0x7c>
   492e8:	d8800217 	ldw	r2,8(sp)
   492ec:	10001616 	blt	r2,zero,49348 <__fixdfsi+0x98>
   492f0:	00c00784 	movi	r3,30
   492f4:	18800d16 	blt	r3,r2,4932c <__fixdfsi+0x7c>
   492f8:	00c00f04 	movi	r3,60
   492fc:	1885c83a 	sub	r2,r3,r2
   49300:	10fff804 	addi	r3,r2,-32
   49304:	d9400317 	ldw	r5,12(sp)
   49308:	d9000417 	ldw	r4,16(sp)
   4930c:	18001616 	blt	r3,zero,49368 <__fixdfsi+0xb8>
   49310:	20c4d83a 	srl	r2,r4,r3
   49314:	d8c00117 	ldw	r3,4(sp)
   49318:	18000126 	beq	r3,zero,49320 <__fixdfsi+0x70>
   4931c:	0085c83a 	sub	r2,zero,r2
   49320:	dfc00717 	ldw	ra,28(sp)
   49324:	dec00804 	addi	sp,sp,32
   49328:	f800283a 	ret
   4932c:	d8800117 	ldw	r2,4(sp)
   49330:	1000091e 	bne	r2,zero,49358 <__fixdfsi+0xa8>
   49334:	00a00034 	movhi	r2,32768
   49338:	10bfffc4 	addi	r2,r2,-1
   4933c:	dfc00717 	ldw	ra,28(sp)
   49340:	dec00804 	addi	sp,sp,32
   49344:	f800283a 	ret
   49348:	0005883a 	mov	r2,zero
   4934c:	dfc00717 	ldw	ra,28(sp)
   49350:	dec00804 	addi	sp,sp,32
   49354:	f800283a 	ret
   49358:	00a00034 	movhi	r2,32768
   4935c:	dfc00717 	ldw	ra,28(sp)
   49360:	dec00804 	addi	sp,sp,32
   49364:	f800283a 	ret
   49368:	2008907a 	slli	r4,r4,1
   4936c:	018007c4 	movi	r6,31
   49370:	308dc83a 	sub	r6,r6,r2
   49374:	2188983a 	sll	r4,r4,r6
   49378:	2884d83a 	srl	r2,r5,r2
   4937c:	2084b03a 	or	r2,r4,r2
   49380:	003fe406 	br	49314 <__fixdfsi+0x64>

00049384 <__floatunsidf>:
   49384:	defff904 	addi	sp,sp,-28
   49388:	dc000515 	stw	r16,20(sp)
   4938c:	dfc00615 	stw	ra,24(sp)
   49390:	d8000115 	stw	zero,4(sp)
   49394:	2021883a 	mov	r16,r4
   49398:	20001726 	beq	r4,zero,493f8 <__floatunsidf+0x74>
   4939c:	008000c4 	movi	r2,3
   493a0:	d8800015 	stw	r2,0(sp)
   493a4:	00800f04 	movi	r2,60
   493a8:	d8800215 	stw	r2,8(sp)
   493ac:	00497080 	call	49708 <__clzsi2>
   493b0:	10c00744 	addi	r3,r2,29
   493b4:	18001816 	blt	r3,zero,49418 <__floatunsidf+0x94>
   493b8:	18002d26 	beq	r3,zero,49470 <__floatunsidf+0xec>
   493bc:	113fff44 	addi	r4,r2,-3
   493c0:	20002e16 	blt	r4,zero,4947c <__floatunsidf+0xf8>
   493c4:	8108983a 	sll	r4,r16,r4
   493c8:	0021883a 	mov	r16,zero
   493cc:	014007c4 	movi	r5,31
   493d0:	2885c83a 	sub	r2,r5,r2
   493d4:	dc000315 	stw	r16,12(sp)
   493d8:	d9000415 	stw	r4,16(sp)
   493dc:	d8800215 	stw	r2,8(sp)
   493e0:	d809883a 	mov	r4,sp
   493e4:	00497b40 	call	497b4 <__pack_d>
   493e8:	dfc00617 	ldw	ra,24(sp)
   493ec:	dc000517 	ldw	r16,20(sp)
   493f0:	dec00704 	addi	sp,sp,28
   493f4:	f800283a 	ret
   493f8:	00800084 	movi	r2,2
   493fc:	d809883a 	mov	r4,sp
   49400:	d8800015 	stw	r2,0(sp)
   49404:	00497b40 	call	497b4 <__pack_d>
   49408:	dfc00617 	ldw	ra,24(sp)
   4940c:	dc000517 	ldw	r16,20(sp)
   49410:	dec00704 	addi	sp,sp,28
   49414:	f800283a 	ret
   49418:	00c7c83a 	sub	r3,zero,r3
   4941c:	193ff804 	addi	r4,r3,-32
   49420:	20001c16 	blt	r4,zero,49494 <__floatunsidf+0x110>
   49424:	000b883a 	mov	r5,zero
   49428:	2009d7fa 	srai	r4,r4,31
   4942c:	80c6d83a 	srl	r3,r16,r3
   49430:	297fffc4 	addi	r5,r5,-1
   49434:	2c20703a 	and	r16,r5,r16
   49438:	8020c03a 	cmpne	r16,r16,zero
   4943c:	1906703a 	and	r3,r3,r4
   49440:	010007c4 	movi	r4,31
   49444:	80c6b03a 	or	r3,r16,r3
   49448:	2085c83a 	sub	r2,r4,r2
   4944c:	d809883a 	mov	r4,sp
   49450:	d8c00315 	stw	r3,12(sp)
   49454:	d8000415 	stw	zero,16(sp)
   49458:	d8800215 	stw	r2,8(sp)
   4945c:	00497b40 	call	497b4 <__pack_d>
   49460:	dfc00617 	ldw	ra,24(sp)
   49464:	dc000517 	ldw	r16,20(sp)
   49468:	dec00704 	addi	sp,sp,28
   4946c:	f800283a 	ret
   49470:	dc000315 	stw	r16,12(sp)
   49474:	d8000415 	stw	zero,16(sp)
   49478:	003fd906 	br	493e0 <__floatunsidf+0x5c>
   4947c:	800ad07a 	srli	r5,r16,1
   49480:	010007c4 	movi	r4,31
   49484:	20c9c83a 	sub	r4,r4,r3
   49488:	2908d83a 	srl	r4,r5,r4
   4948c:	80e0983a 	sll	r16,r16,r3
   49490:	003fce06 	br	493cc <__floatunsidf+0x48>
   49494:	01400044 	movi	r5,1
   49498:	28ca983a 	sll	r5,r5,r3
   4949c:	003fe206 	br	49428 <__floatunsidf+0xa4>

000494a0 <udivmodsi4>:
   494a0:	2005883a 	mov	r2,r4
   494a4:	2900182e 	bgeu	r5,r4,49508 <udivmodsi4+0x68>
   494a8:	28001716 	blt	r5,zero,49508 <udivmodsi4+0x68>
   494ac:	01000804 	movi	r4,32
   494b0:	00c00044 	movi	r3,1
   494b4:	00000206 	br	494c0 <udivmodsi4+0x20>
   494b8:	20001126 	beq	r4,zero,49500 <udivmodsi4+0x60>
   494bc:	28000516 	blt	r5,zero,494d4 <udivmodsi4+0x34>
   494c0:	294b883a 	add	r5,r5,r5
   494c4:	213fffc4 	addi	r4,r4,-1
   494c8:	18c7883a 	add	r3,r3,r3
   494cc:	28bffa36 	bltu	r5,r2,494b8 <udivmodsi4+0x18>
   494d0:	18000b26 	beq	r3,zero,49500 <udivmodsi4+0x60>
   494d4:	0009883a 	mov	r4,zero
   494d8:	11400236 	bltu	r2,r5,494e4 <udivmodsi4+0x44>
   494dc:	1145c83a 	sub	r2,r2,r5
   494e0:	20c8b03a 	or	r4,r4,r3
   494e4:	1806d07a 	srli	r3,r3,1
   494e8:	280ad07a 	srli	r5,r5,1
   494ec:	183ffa1e 	bne	r3,zero,494d8 <udivmodsi4+0x38>
   494f0:	3000021e 	bne	r6,zero,494fc <udivmodsi4+0x5c>
   494f4:	2005883a 	mov	r2,r4
   494f8:	f800283a 	ret
   494fc:	f800283a 	ret
   49500:	0009883a 	mov	r4,zero
   49504:	003ffa06 	br	494f0 <udivmodsi4+0x50>
   49508:	00c00044 	movi	r3,1
   4950c:	0009883a 	mov	r4,zero
   49510:	003ff106 	br	494d8 <udivmodsi4+0x38>

00049514 <__divsi3>:
   49514:	defffe04 	addi	sp,sp,-8
   49518:	dfc00115 	stw	ra,4(sp)
   4951c:	dc000015 	stw	r16,0(sp)
   49520:	20000a16 	blt	r4,zero,4954c <__divsi3+0x38>
   49524:	0021883a 	mov	r16,zero
   49528:	28000b16 	blt	r5,zero,49558 <__divsi3+0x44>
   4952c:	000d883a 	mov	r6,zero
   49530:	00494a00 	call	494a0 <udivmodsi4>
   49534:	80000126 	beq	r16,zero,4953c <__divsi3+0x28>
   49538:	0085c83a 	sub	r2,zero,r2
   4953c:	dfc00117 	ldw	ra,4(sp)
   49540:	dc000017 	ldw	r16,0(sp)
   49544:	dec00204 	addi	sp,sp,8
   49548:	f800283a 	ret
   4954c:	0109c83a 	sub	r4,zero,r4
   49550:	04000044 	movi	r16,1
   49554:	283ff50e 	bge	r5,zero,4952c <__divsi3+0x18>
   49558:	014bc83a 	sub	r5,zero,r5
   4955c:	8400005c 	xori	r16,r16,1
   49560:	003ff206 	br	4952c <__divsi3+0x18>

00049564 <__modsi3>:
   49564:	deffff04 	addi	sp,sp,-4
   49568:	dfc00015 	stw	ra,0(sp)
   4956c:	20000516 	blt	r4,zero,49584 <__modsi3+0x20>
   49570:	28000c16 	blt	r5,zero,495a4 <__modsi3+0x40>
   49574:	01800044 	movi	r6,1
   49578:	dfc00017 	ldw	ra,0(sp)
   4957c:	dec00104 	addi	sp,sp,4
   49580:	00494a01 	jmpi	494a0 <udivmodsi4>
   49584:	0109c83a 	sub	r4,zero,r4
   49588:	28000b16 	blt	r5,zero,495b8 <__modsi3+0x54>
   4958c:	01800044 	movi	r6,1
   49590:	00494a00 	call	494a0 <udivmodsi4>
   49594:	0085c83a 	sub	r2,zero,r2
   49598:	dfc00017 	ldw	ra,0(sp)
   4959c:	dec00104 	addi	sp,sp,4
   495a0:	f800283a 	ret
   495a4:	014bc83a 	sub	r5,zero,r5
   495a8:	01800044 	movi	r6,1
   495ac:	dfc00017 	ldw	ra,0(sp)
   495b0:	dec00104 	addi	sp,sp,4
   495b4:	00494a01 	jmpi	494a0 <udivmodsi4>
   495b8:	014bc83a 	sub	r5,zero,r5
   495bc:	003ff306 	br	4958c <__modsi3+0x28>

000495c0 <__udivsi3>:
   495c0:	000d883a 	mov	r6,zero
   495c4:	00494a01 	jmpi	494a0 <udivmodsi4>

000495c8 <__umodsi3>:
   495c8:	01800044 	movi	r6,1
   495cc:	00494a01 	jmpi	494a0 <udivmodsi4>

000495d0 <__mulsi3>:
   495d0:	0005883a 	mov	r2,zero
   495d4:	20000726 	beq	r4,zero,495f4 <__mulsi3+0x24>
   495d8:	20c0004c 	andi	r3,r4,1
   495dc:	2008d07a 	srli	r4,r4,1
   495e0:	18000126 	beq	r3,zero,495e8 <__mulsi3+0x18>
   495e4:	1145883a 	add	r2,r2,r5
   495e8:	294b883a 	add	r5,r5,r5
   495ec:	203ffa1e 	bne	r4,zero,495d8 <__mulsi3+0x8>
   495f0:	f800283a 	ret
   495f4:	f800283a 	ret

000495f8 <__muldi3>:
   495f8:	defff604 	addi	sp,sp,-40
   495fc:	dd400515 	stw	r21,20(sp)
   49600:	dd000415 	stw	r20,16(sp)
   49604:	257fffcc 	andi	r21,r4,65535
   49608:	353fffcc 	andi	r20,r6,65535
   4960c:	dcc00315 	stw	r19,12(sp)
   49610:	3026d43a 	srli	r19,r6,16
   49614:	dd800615 	stw	r22,24(sp)
   49618:	dc800215 	stw	r18,8(sp)
   4961c:	dc400115 	stw	r17,4(sp)
   49620:	2024d43a 	srli	r18,r4,16
   49624:	2023883a 	mov	r17,r4
   49628:	282d883a 	mov	r22,r5
   4962c:	a009883a 	mov	r4,r20
   49630:	a80b883a 	mov	r5,r21
   49634:	dfc00915 	stw	ra,36(sp)
   49638:	df000815 	stw	fp,32(sp)
   4963c:	ddc00715 	stw	r23,28(sp)
   49640:	3839883a 	mov	fp,r7
   49644:	dc000015 	stw	r16,0(sp)
   49648:	3021883a 	mov	r16,r6
   4964c:	00495d00 	call	495d0 <__mulsi3>
   49650:	a80b883a 	mov	r5,r21
   49654:	9809883a 	mov	r4,r19
   49658:	102f883a 	mov	r23,r2
   4965c:	00495d00 	call	495d0 <__mulsi3>
   49660:	a009883a 	mov	r4,r20
   49664:	900b883a 	mov	r5,r18
   49668:	102b883a 	mov	r21,r2
   4966c:	00495d00 	call	495d0 <__mulsi3>
   49670:	9809883a 	mov	r4,r19
   49674:	900b883a 	mov	r5,r18
   49678:	1029883a 	mov	r20,r2
   4967c:	00495d00 	call	495d0 <__mulsi3>
   49680:	1007883a 	mov	r3,r2
   49684:	b804d43a 	srli	r2,r23,16
   49688:	a549883a 	add	r4,r20,r21
   4968c:	2089883a 	add	r4,r4,r2
   49690:	2500022e 	bgeu	r4,r20,4969c <__muldi3+0xa4>
   49694:	00800074 	movhi	r2,1
   49698:	1887883a 	add	r3,r3,r2
   4969c:	200cd43a 	srli	r6,r4,16
   496a0:	2004943a 	slli	r2,r4,16
   496a4:	e00b883a 	mov	r5,fp
   496a8:	8809883a 	mov	r4,r17
   496ac:	bdffffcc 	andi	r23,r23,65535
   496b0:	19a3883a 	add	r17,r3,r6
   496b4:	15ef883a 	add	r23,r2,r23
   496b8:	00495d00 	call	495d0 <__mulsi3>
   496bc:	8009883a 	mov	r4,r16
   496c0:	b00b883a 	mov	r5,r22
   496c4:	1025883a 	mov	r18,r2
   496c8:	00495d00 	call	495d0 <__mulsi3>
   496cc:	9085883a 	add	r2,r18,r2
   496d0:	1447883a 	add	r3,r2,r17
   496d4:	b805883a 	mov	r2,r23
   496d8:	dfc00917 	ldw	ra,36(sp)
   496dc:	df000817 	ldw	fp,32(sp)
   496e0:	ddc00717 	ldw	r23,28(sp)
   496e4:	dd800617 	ldw	r22,24(sp)
   496e8:	dd400517 	ldw	r21,20(sp)
   496ec:	dd000417 	ldw	r20,16(sp)
   496f0:	dcc00317 	ldw	r19,12(sp)
   496f4:	dc800217 	ldw	r18,8(sp)
   496f8:	dc400117 	ldw	r17,4(sp)
   496fc:	dc000017 	ldw	r16,0(sp)
   49700:	dec00a04 	addi	sp,sp,40
   49704:	f800283a 	ret

00049708 <__clzsi2>:
   49708:	00bfffd4 	movui	r2,65535
   4970c:	11000b36 	bltu	r2,r4,4973c <__clzsi2+0x34>
   49710:	00803fc4 	movi	r2,255
   49714:	11001e2e 	bgeu	r2,r4,49790 <__clzsi2+0x88>
   49718:	00c00204 	movi	r3,8
   4971c:	20c8d83a 	srl	r4,r4,r3
   49720:	00c00074 	movhi	r3,1
   49724:	18c0b404 	addi	r3,r3,720
   49728:	00800604 	movi	r2,24
   4972c:	1909883a 	add	r4,r3,r4
   49730:	20c00003 	ldbu	r3,0(r4)
   49734:	10c5c83a 	sub	r2,r2,r3
   49738:	f800283a 	ret
   4973c:	00804034 	movhi	r2,256
   49740:	10bfffc4 	addi	r2,r2,-1
   49744:	11000936 	bltu	r2,r4,4976c <__clzsi2+0x64>
   49748:	00800404 	movi	r2,16
   4974c:	1007883a 	mov	r3,r2
   49750:	20c8d83a 	srl	r4,r4,r3
   49754:	00c00074 	movhi	r3,1
   49758:	18c0b404 	addi	r3,r3,720
   4975c:	1909883a 	add	r4,r3,r4
   49760:	20c00003 	ldbu	r3,0(r4)
   49764:	10c5c83a 	sub	r2,r2,r3
   49768:	f800283a 	ret
   4976c:	00c00604 	movi	r3,24
   49770:	20c8d83a 	srl	r4,r4,r3
   49774:	00c00074 	movhi	r3,1
   49778:	18c0b404 	addi	r3,r3,720
   4977c:	00800204 	movi	r2,8
   49780:	1909883a 	add	r4,r3,r4
   49784:	20c00003 	ldbu	r3,0(r4)
   49788:	10c5c83a 	sub	r2,r2,r3
   4978c:	f800283a 	ret
   49790:	0007883a 	mov	r3,zero
   49794:	20c8d83a 	srl	r4,r4,r3
   49798:	00c00074 	movhi	r3,1
   4979c:	18c0b404 	addi	r3,r3,720
   497a0:	00800804 	movi	r2,32
   497a4:	1909883a 	add	r4,r3,r4
   497a8:	20c00003 	ldbu	r3,0(r4)
   497ac:	10c5c83a 	sub	r2,r2,r3
   497b0:	f800283a 	ret

000497b4 <__pack_d>:
   497b4:	20800017 	ldw	r2,0(r4)
   497b8:	defff804 	addi	sp,sp,-32
   497bc:	dcc00315 	stw	r19,12(sp)
   497c0:	dc800215 	stw	r18,8(sp)
   497c4:	dfc00715 	stw	ra,28(sp)
   497c8:	dd800615 	stw	r22,24(sp)
   497cc:	dd400515 	stw	r21,20(sp)
   497d0:	dd000415 	stw	r20,16(sp)
   497d4:	dc400115 	stw	r17,4(sp)
   497d8:	dc000015 	stw	r16,0(sp)
   497dc:	04800044 	movi	r18,1
   497e0:	24400317 	ldw	r17,12(r4)
   497e4:	24000417 	ldw	r16,16(r4)
   497e8:	24c00117 	ldw	r19,4(r4)
   497ec:	9080422e 	bgeu	r18,r2,498f8 <__pack_d+0x144>
   497f0:	00c00104 	movi	r3,4
   497f4:	10c03c26 	beq	r2,r3,498e8 <__pack_d+0x134>
   497f8:	00c00084 	movi	r3,2
   497fc:	10c01926 	beq	r2,r3,49864 <__pack_d+0xb0>
   49800:	8c04b03a 	or	r2,r17,r16
   49804:	10001726 	beq	r2,zero,49864 <__pack_d+0xb0>
   49808:	21000217 	ldw	r4,8(r4)
   4980c:	00bf0084 	movi	r2,-1022
   49810:	20804016 	blt	r4,r2,49914 <__pack_d+0x160>
   49814:	0080ffc4 	movi	r2,1023
   49818:	11003316 	blt	r2,r4,498e8 <__pack_d+0x134>
   4981c:	88803fcc 	andi	r2,r17,255
   49820:	00c02004 	movi	r3,128
   49824:	10c02926 	beq	r2,r3,498cc <__pack_d+0x118>
   49828:	88801fc4 	addi	r2,r17,127
   4982c:	1463803a 	cmpltu	r17,r2,r17
   49830:	8c21883a 	add	r16,r17,r16
   49834:	1023883a 	mov	r17,r2
   49838:	00880034 	movhi	r2,8192
   4983c:	10bfffc4 	addi	r2,r2,-1
   49840:	14001c36 	bltu	r2,r16,498b4 <__pack_d+0x100>
   49844:	2100ffc4 	addi	r4,r4,1023
   49848:	8006963a 	slli	r3,r16,24
   4984c:	8804d23a 	srli	r2,r17,8
   49850:	8020913a 	slli	r16,r16,4
   49854:	2101ffcc 	andi	r4,r4,2047
   49858:	1884b03a 	or	r2,r3,r2
   4985c:	8020d33a 	srli	r16,r16,12
   49860:	00000306 	br	49870 <__pack_d+0xbc>
   49864:	0009883a 	mov	r4,zero
   49868:	0005883a 	mov	r2,zero
   4986c:	0021883a 	mov	r16,zero
   49870:	2008953a 	slli	r4,r4,20
   49874:	982697fa 	slli	r19,r19,31
   49878:	00c00434 	movhi	r3,16
   4987c:	18ffffc4 	addi	r3,r3,-1
   49880:	80e0703a 	and	r16,r16,r3
   49884:	8106b03a 	or	r3,r16,r4
   49888:	1cc6b03a 	or	r3,r3,r19
   4988c:	dfc00717 	ldw	ra,28(sp)
   49890:	dd800617 	ldw	r22,24(sp)
   49894:	dd400517 	ldw	r21,20(sp)
   49898:	dd000417 	ldw	r20,16(sp)
   4989c:	dcc00317 	ldw	r19,12(sp)
   498a0:	dc800217 	ldw	r18,8(sp)
   498a4:	dc400117 	ldw	r17,4(sp)
   498a8:	dc000017 	ldw	r16,0(sp)
   498ac:	dec00804 	addi	sp,sp,32
   498b0:	f800283a 	ret
   498b4:	800697fa 	slli	r3,r16,31
   498b8:	8804d07a 	srli	r2,r17,1
   498bc:	21010004 	addi	r4,r4,1024
   498c0:	8020d07a 	srli	r16,r16,1
   498c4:	18a2b03a 	or	r17,r3,r2
   498c8:	003fdf06 	br	49848 <__pack_d+0x94>
   498cc:	88c0400c 	andi	r3,r17,256
   498d0:	183fd926 	beq	r3,zero,49838 <__pack_d+0x84>
   498d4:	8885883a 	add	r2,r17,r2
   498d8:	1463803a 	cmpltu	r17,r2,r17
   498dc:	8c21883a 	add	r16,r17,r16
   498e0:	1023883a 	mov	r17,r2
   498e4:	003fd406 	br	49838 <__pack_d+0x84>
   498e8:	0101ffc4 	movi	r4,2047
   498ec:	0005883a 	mov	r2,zero
   498f0:	0021883a 	mov	r16,zero
   498f4:	003fde06 	br	49870 <__pack_d+0xbc>
   498f8:	84000234 	orhi	r16,r16,8
   498fc:	00c00434 	movhi	r3,16
   49900:	18ffffc4 	addi	r3,r3,-1
   49904:	8805883a 	mov	r2,r17
   49908:	80e0703a 	and	r16,r16,r3
   4990c:	0101ffc4 	movi	r4,2047
   49910:	003fd706 	br	49870 <__pack_d+0xbc>
   49914:	1129c83a 	sub	r20,r2,r4
   49918:	00800e04 	movi	r2,56
   4991c:	15002716 	blt	r2,r20,499bc <__pack_d+0x208>
   49920:	800b883a 	mov	r5,r16
   49924:	a00d883a 	mov	r6,r20
   49928:	8809883a 	mov	r4,r17
   4992c:	0049bac0 	call	49bac <__lshrdi3>
   49930:	9009883a 	mov	r4,r18
   49934:	000b883a 	mov	r5,zero
   49938:	a00d883a 	mov	r6,r20
   4993c:	102d883a 	mov	r22,r2
   49940:	182b883a 	mov	r21,r3
   49944:	0049bf00 	call	49bf0 <__ashldi3>
   49948:	1009003a 	cmpeq	r4,r2,zero
   4994c:	1907c83a 	sub	r3,r3,r4
   49950:	10bfffc4 	addi	r2,r2,-1
   49954:	1c20703a 	and	r16,r3,r16
   49958:	1444703a 	and	r2,r2,r17
   4995c:	1404b03a 	or	r2,r2,r16
   49960:	1004c03a 	cmpne	r2,r2,zero
   49964:	1584b03a 	or	r2,r2,r22
   49968:	11003fcc 	andi	r4,r2,255
   4996c:	01402004 	movi	r5,128
   49970:	a807883a 	mov	r3,r21
   49974:	2140131e 	bne	r4,r5,499c4 <__pack_d+0x210>
   49978:	1140400c 	andi	r5,r2,256
   4997c:	28000426 	beq	r5,zero,49990 <__pack_d+0x1dc>
   49980:	1109883a 	add	r4,r2,r4
   49984:	2085803a 	cmpltu	r2,r4,r2
   49988:	1547883a 	add	r3,r2,r21
   4998c:	2005883a 	mov	r2,r4
   49990:	1808963a 	slli	r4,r3,24
   49994:	1004d23a 	srli	r2,r2,8
   49998:	1820913a 	slli	r16,r3,4
   4999c:	01440034 	movhi	r5,4096
   499a0:	297fffc4 	addi	r5,r5,-1
   499a4:	2084b03a 	or	r2,r4,r2
   499a8:	8020d33a 	srli	r16,r16,12
   499ac:	01000044 	movi	r4,1
   499b0:	28ffaf36 	bltu	r5,r3,49870 <__pack_d+0xbc>
   499b4:	0009883a 	mov	r4,zero
   499b8:	003fad06 	br	49870 <__pack_d+0xbc>
   499bc:	0005883a 	mov	r2,zero
   499c0:	0007883a 	mov	r3,zero
   499c4:	11001fc4 	addi	r4,r2,127
   499c8:	2085803a 	cmpltu	r2,r4,r2
   499cc:	10c7883a 	add	r3,r2,r3
   499d0:	2005883a 	mov	r2,r4
   499d4:	003fee06 	br	49990 <__pack_d+0x1dc>

000499d8 <__unpack_d>:
   499d8:	21800117 	ldw	r6,4(r4)
   499dc:	20c00017 	ldw	r3,0(r4)
   499e0:	3004d7fa 	srli	r2,r6,31
   499e4:	3008d53a 	srli	r4,r6,20
   499e8:	28800115 	stw	r2,4(r5)
   499ec:	2101ffcc 	andi	r4,r4,2047
   499f0:	00800434 	movhi	r2,16
   499f4:	10bfffc4 	addi	r2,r2,-1
   499f8:	3084703a 	and	r2,r6,r2
   499fc:	20001a1e 	bne	r4,zero,49a68 <__unpack_d+0x90>
   49a00:	1888b03a 	or	r4,r3,r2
   49a04:	20002626 	beq	r4,zero,49aa0 <__unpack_d+0xc8>
   49a08:	1808d63a 	srli	r4,r3,24
   49a0c:	1004923a 	slli	r2,r2,8
   49a10:	01bf0084 	movi	r6,-1022
   49a14:	29800215 	stw	r6,8(r5)
   49a18:	2084b03a 	or	r2,r4,r2
   49a1c:	010000c4 	movi	r4,3
   49a20:	29000015 	stw	r4,0(r5)
   49a24:	02040034 	movhi	r8,4096
   49a28:	423fffc4 	addi	r8,r8,-1
   49a2c:	1806923a 	slli	r3,r3,8
   49a30:	40801836 	bltu	r8,r2,49a94 <__unpack_d+0xbc>
   49a34:	013f0044 	movi	r4,-1023
   49a38:	18cd883a 	add	r6,r3,r3
   49a3c:	30c7803a 	cmpltu	r3,r6,r3
   49a40:	1085883a 	add	r2,r2,r2
   49a44:	1885883a 	add	r2,r3,r2
   49a48:	200f883a 	mov	r7,r4
   49a4c:	3007883a 	mov	r3,r6
   49a50:	213fffc4 	addi	r4,r4,-1
   49a54:	40bff82e 	bgeu	r8,r2,49a38 <__unpack_d+0x60>
   49a58:	29c00215 	stw	r7,8(r5)
   49a5c:	28c00315 	stw	r3,12(r5)
   49a60:	28800415 	stw	r2,16(r5)
   49a64:	f800283a 	ret
   49a68:	01c1ffc4 	movi	r7,2047
   49a6c:	21c00f26 	beq	r4,r7,49aac <__unpack_d+0xd4>
   49a70:	180cd63a 	srli	r6,r3,24
   49a74:	1004923a 	slli	r2,r2,8
   49a78:	213f0044 	addi	r4,r4,-1023
   49a7c:	1806923a 	slli	r3,r3,8
   49a80:	3084b03a 	or	r2,r6,r2
   49a84:	29000215 	stw	r4,8(r5)
   49a88:	010000c4 	movi	r4,3
   49a8c:	10840034 	orhi	r2,r2,4096
   49a90:	29000015 	stw	r4,0(r5)
   49a94:	28c00315 	stw	r3,12(r5)
   49a98:	28800415 	stw	r2,16(r5)
   49a9c:	f800283a 	ret
   49aa0:	00800084 	movi	r2,2
   49aa4:	28800015 	stw	r2,0(r5)
   49aa8:	f800283a 	ret
   49aac:	1888b03a 	or	r4,r3,r2
   49ab0:	20000526 	beq	r4,zero,49ac8 <__unpack_d+0xf0>
   49ab4:	3180022c 	andhi	r6,r6,8
   49ab8:	30000626 	beq	r6,zero,49ad4 <__unpack_d+0xfc>
   49abc:	01000044 	movi	r4,1
   49ac0:	29000015 	stw	r4,0(r5)
   49ac4:	003ff306 	br	49a94 <__unpack_d+0xbc>
   49ac8:	00800104 	movi	r2,4
   49acc:	28800015 	stw	r2,0(r5)
   49ad0:	f800283a 	ret
   49ad4:	28000015 	stw	zero,0(r5)
   49ad8:	003fee06 	br	49a94 <__unpack_d+0xbc>

00049adc <__fpcmp_parts_d>:
   49adc:	20c00017 	ldw	r3,0(r4)
   49ae0:	00800044 	movi	r2,1
   49ae4:	10c0142e 	bgeu	r2,r3,49b38 <__fpcmp_parts_d+0x5c>
   49ae8:	29800017 	ldw	r6,0(r5)
   49aec:	1180122e 	bgeu	r2,r6,49b38 <__fpcmp_parts_d+0x5c>
   49af0:	01c00104 	movi	r7,4
   49af4:	19c02826 	beq	r3,r7,49b98 <__fpcmp_parts_d+0xbc>
   49af8:	31c00926 	beq	r6,r7,49b20 <__fpcmp_parts_d+0x44>
   49afc:	01c00084 	movi	r7,2
   49b00:	19c00626 	beq	r3,r7,49b1c <__fpcmp_parts_d+0x40>
   49b04:	31c00a26 	beq	r6,r7,49b30 <__fpcmp_parts_d+0x54>
   49b08:	20c00117 	ldw	r3,4(r4)
   49b0c:	29800117 	ldw	r6,4(r5)
   49b10:	19800b26 	beq	r3,r6,49b40 <__fpcmp_parts_d+0x64>
   49b14:	1800041e 	bne	r3,zero,49b28 <__fpcmp_parts_d+0x4c>
   49b18:	f800283a 	ret
   49b1c:	30c01a26 	beq	r6,r3,49b88 <__fpcmp_parts_d+0xac>
   49b20:	28800117 	ldw	r2,4(r5)
   49b24:	1000041e 	bne	r2,zero,49b38 <__fpcmp_parts_d+0x5c>
   49b28:	00bfffc4 	movi	r2,-1
   49b2c:	f800283a 	ret
   49b30:	20800117 	ldw	r2,4(r4)
   49b34:	103ffc1e 	bne	r2,zero,49b28 <__fpcmp_parts_d+0x4c>
   49b38:	00800044 	movi	r2,1
   49b3c:	f800283a 	ret
   49b40:	21c00217 	ldw	r7,8(r4)
   49b44:	29800217 	ldw	r6,8(r5)
   49b48:	31c0020e 	bge	r6,r7,49b54 <__fpcmp_parts_d+0x78>
   49b4c:	183ff61e 	bne	r3,zero,49b28 <__fpcmp_parts_d+0x4c>
   49b50:	f800283a 	ret
   49b54:	39800a16 	blt	r7,r6,49b80 <__fpcmp_parts_d+0xa4>
   49b58:	20800417 	ldw	r2,16(r4)
   49b5c:	29800417 	ldw	r6,16(r5)
   49b60:	21c00317 	ldw	r7,12(r4)
   49b64:	29000317 	ldw	r4,12(r5)
   49b68:	30800936 	bltu	r6,r2,49b90 <__fpcmp_parts_d+0xb4>
   49b6c:	1180011e 	bne	r2,r6,49b74 <__fpcmp_parts_d+0x98>
   49b70:	21c00736 	bltu	r4,r7,49b90 <__fpcmp_parts_d+0xb4>
   49b74:	11800236 	bltu	r2,r6,49b80 <__fpcmp_parts_d+0xa4>
   49b78:	3080031e 	bne	r6,r2,49b88 <__fpcmp_parts_d+0xac>
   49b7c:	3900022e 	bgeu	r7,r4,49b88 <__fpcmp_parts_d+0xac>
   49b80:	183fe926 	beq	r3,zero,49b28 <__fpcmp_parts_d+0x4c>
   49b84:	003fec06 	br	49b38 <__fpcmp_parts_d+0x5c>
   49b88:	0005883a 	mov	r2,zero
   49b8c:	f800283a 	ret
   49b90:	183fe926 	beq	r3,zero,49b38 <__fpcmp_parts_d+0x5c>
   49b94:	003fe406 	br	49b28 <__fpcmp_parts_d+0x4c>
   49b98:	30ffe51e 	bne	r6,r3,49b30 <__fpcmp_parts_d+0x54>
   49b9c:	28c00117 	ldw	r3,4(r5)
   49ba0:	20800117 	ldw	r2,4(r4)
   49ba4:	1885c83a 	sub	r2,r3,r2
   49ba8:	f800283a 	ret

00049bac <__lshrdi3>:
   49bac:	2005883a 	mov	r2,r4
   49bb0:	2807883a 	mov	r3,r5
   49bb4:	30000826 	beq	r6,zero,49bd8 <__lshrdi3+0x2c>
   49bb8:	01000804 	movi	r4,32
   49bbc:	2189c83a 	sub	r4,r4,r6
   49bc0:	0100060e 	bge	zero,r4,49bdc <__lshrdi3+0x30>
   49bc4:	1184d83a 	srl	r2,r2,r6
   49bc8:	2908983a 	sll	r4,r5,r4
   49bcc:	298cd83a 	srl	r6,r5,r6
   49bd0:	2084b03a 	or	r2,r4,r2
   49bd4:	3007883a 	mov	r3,r6
   49bd8:	f800283a 	ret
   49bdc:	0105c83a 	sub	r2,zero,r4
   49be0:	000d883a 	mov	r6,zero
   49be4:	2884d83a 	srl	r2,r5,r2
   49be8:	3007883a 	mov	r3,r6
   49bec:	003ffa06 	br	49bd8 <__lshrdi3+0x2c>

00049bf0 <__ashldi3>:
   49bf0:	2005883a 	mov	r2,r4
   49bf4:	2807883a 	mov	r3,r5
   49bf8:	30000826 	beq	r6,zero,49c1c <__ashldi3+0x2c>
   49bfc:	01000804 	movi	r4,32
   49c00:	2189c83a 	sub	r4,r4,r6
   49c04:	0100060e 	bge	zero,r4,49c20 <__ashldi3+0x30>
   49c08:	1108d83a 	srl	r4,r2,r4
   49c0c:	2986983a 	sll	r3,r5,r6
   49c10:	118c983a 	sll	r6,r2,r6
   49c14:	20c6b03a 	or	r3,r4,r3
   49c18:	3005883a 	mov	r2,r6
   49c1c:	f800283a 	ret
   49c20:	0107c83a 	sub	r3,zero,r4
   49c24:	000d883a 	mov	r6,zero
   49c28:	10c6983a 	sll	r3,r2,r3
   49c2c:	3005883a 	mov	r2,r6
   49c30:	003ffa06 	br	49c1c <__ashldi3+0x2c>

00049c34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49c34:	defffe04 	addi	sp,sp,-8
   49c38:	dfc00115 	stw	ra,4(sp)
   49c3c:	df000015 	stw	fp,0(sp)
   49c40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49c44:	00800074 	movhi	r2,1
   49c48:	10879204 	addi	r2,r2,7752
   49c4c:	10800017 	ldw	r2,0(r2)
   49c50:	10000526 	beq	r2,zero,49c68 <alt_get_errno+0x34>
   49c54:	00800074 	movhi	r2,1
   49c58:	10879204 	addi	r2,r2,7752
   49c5c:	10800017 	ldw	r2,0(r2)
   49c60:	103ee83a 	callr	r2
   49c64:	00000206 	br	49c70 <alt_get_errno+0x3c>
   49c68:	00800074 	movhi	r2,1
   49c6c:	1087a204 	addi	r2,r2,7816
}
   49c70:	e037883a 	mov	sp,fp
   49c74:	dfc00117 	ldw	ra,4(sp)
   49c78:	df000017 	ldw	fp,0(sp)
   49c7c:	dec00204 	addi	sp,sp,8
   49c80:	f800283a 	ret

00049c84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49c84:	defffb04 	addi	sp,sp,-20
   49c88:	dfc00415 	stw	ra,16(sp)
   49c8c:	df000315 	stw	fp,12(sp)
   49c90:	df000304 	addi	fp,sp,12
   49c94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   49c98:	e0bfff17 	ldw	r2,-4(fp)
   49c9c:	10000716 	blt	r2,zero,49cbc <close+0x38>
   49ca0:	e13fff17 	ldw	r4,-4(fp)
   49ca4:	01400304 	movi	r5,12
   49ca8:	00495d00 	call	495d0 <__mulsi3>
   49cac:	00c00074 	movhi	r3,1
   49cb0:	18c31004 	addi	r3,r3,3136
   49cb4:	10c5883a 	add	r2,r2,r3
   49cb8:	00000106 	br	49cc0 <close+0x3c>
   49cbc:	0005883a 	mov	r2,zero
   49cc0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   49cc4:	e0bffd17 	ldw	r2,-12(fp)
   49cc8:	10001826 	beq	r2,zero,49d2c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   49ccc:	e0bffd17 	ldw	r2,-12(fp)
   49cd0:	10800017 	ldw	r2,0(r2)
   49cd4:	10800417 	ldw	r2,16(r2)
   49cd8:	10000626 	beq	r2,zero,49cf4 <close+0x70>
   49cdc:	e0bffd17 	ldw	r2,-12(fp)
   49ce0:	10800017 	ldw	r2,0(r2)
   49ce4:	10800417 	ldw	r2,16(r2)
   49ce8:	e13ffd17 	ldw	r4,-12(fp)
   49cec:	103ee83a 	callr	r2
   49cf0:	00000106 	br	49cf8 <close+0x74>
   49cf4:	0005883a 	mov	r2,zero
   49cf8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   49cfc:	e13fff17 	ldw	r4,-4(fp)
   49d00:	004a37c0 	call	4a37c <alt_release_fd>
    if (rval < 0)
   49d04:	e0bffe17 	ldw	r2,-8(fp)
   49d08:	1000060e 	bge	r2,zero,49d24 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   49d0c:	0049c340 	call	49c34 <alt_get_errno>
   49d10:	e0fffe17 	ldw	r3,-8(fp)
   49d14:	00c7c83a 	sub	r3,zero,r3
   49d18:	10c00015 	stw	r3,0(r2)
      return -1;
   49d1c:	00bfffc4 	movi	r2,-1
   49d20:	00000606 	br	49d3c <close+0xb8>
    }
    return 0;
   49d24:	0005883a 	mov	r2,zero
   49d28:	00000406 	br	49d3c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49d2c:	0049c340 	call	49c34 <alt_get_errno>
   49d30:	00c01444 	movi	r3,81
   49d34:	10c00015 	stw	r3,0(r2)
    return -1;
   49d38:	00bfffc4 	movi	r2,-1
  }
}
   49d3c:	e037883a 	mov	sp,fp
   49d40:	dfc00117 	ldw	ra,4(sp)
   49d44:	df000017 	ldw	fp,0(sp)
   49d48:	dec00204 	addi	sp,sp,8
   49d4c:	f800283a 	ret

00049d50 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   49d50:	defffc04 	addi	sp,sp,-16
   49d54:	df000315 	stw	fp,12(sp)
   49d58:	df000304 	addi	fp,sp,12
   49d5c:	e13ffd15 	stw	r4,-12(fp)
   49d60:	e17ffe15 	stw	r5,-8(fp)
   49d64:	e1bfff15 	stw	r6,-4(fp)
  return len;
   49d68:	e0bfff17 	ldw	r2,-4(fp)
}
   49d6c:	e037883a 	mov	sp,fp
   49d70:	df000017 	ldw	fp,0(sp)
   49d74:	dec00104 	addi	sp,sp,4
   49d78:	f800283a 	ret

00049d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49d7c:	defffe04 	addi	sp,sp,-8
   49d80:	dfc00115 	stw	ra,4(sp)
   49d84:	df000015 	stw	fp,0(sp)
   49d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49d8c:	00800074 	movhi	r2,1
   49d90:	10879204 	addi	r2,r2,7752
   49d94:	10800017 	ldw	r2,0(r2)
   49d98:	10000526 	beq	r2,zero,49db0 <alt_get_errno+0x34>
   49d9c:	00800074 	movhi	r2,1
   49da0:	10879204 	addi	r2,r2,7752
   49da4:	10800017 	ldw	r2,0(r2)
   49da8:	103ee83a 	callr	r2
   49dac:	00000206 	br	49db8 <alt_get_errno+0x3c>
   49db0:	00800074 	movhi	r2,1
   49db4:	1087a204 	addi	r2,r2,7816
}
   49db8:	e037883a 	mov	sp,fp
   49dbc:	dfc00117 	ldw	ra,4(sp)
   49dc0:	df000017 	ldw	fp,0(sp)
   49dc4:	dec00204 	addi	sp,sp,8
   49dc8:	f800283a 	ret

00049dcc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   49dcc:	defffb04 	addi	sp,sp,-20
   49dd0:	dfc00415 	stw	ra,16(sp)
   49dd4:	df000315 	stw	fp,12(sp)
   49dd8:	df000304 	addi	fp,sp,12
   49ddc:	e13ffe15 	stw	r4,-8(fp)
   49de0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49de4:	e0bffe17 	ldw	r2,-8(fp)
   49de8:	10000716 	blt	r2,zero,49e08 <fstat+0x3c>
   49dec:	e13ffe17 	ldw	r4,-8(fp)
   49df0:	01400304 	movi	r5,12
   49df4:	00495d00 	call	495d0 <__mulsi3>
   49df8:	00c00074 	movhi	r3,1
   49dfc:	18c31004 	addi	r3,r3,3136
   49e00:	10c5883a 	add	r2,r2,r3
   49e04:	00000106 	br	49e0c <fstat+0x40>
   49e08:	0005883a 	mov	r2,zero
   49e0c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   49e10:	e0bffd17 	ldw	r2,-12(fp)
   49e14:	10001026 	beq	r2,zero,49e58 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   49e18:	e0bffd17 	ldw	r2,-12(fp)
   49e1c:	10800017 	ldw	r2,0(r2)
   49e20:	10800817 	ldw	r2,32(r2)
   49e24:	10000726 	beq	r2,zero,49e44 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   49e28:	e0bffd17 	ldw	r2,-12(fp)
   49e2c:	10800017 	ldw	r2,0(r2)
   49e30:	10800817 	ldw	r2,32(r2)
   49e34:	e13ffd17 	ldw	r4,-12(fp)
   49e38:	e17fff17 	ldw	r5,-4(fp)
   49e3c:	103ee83a 	callr	r2
   49e40:	00000906 	br	49e68 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   49e44:	e0bfff17 	ldw	r2,-4(fp)
   49e48:	00c80004 	movi	r3,8192
   49e4c:	10c00115 	stw	r3,4(r2)
      return 0;
   49e50:	0005883a 	mov	r2,zero
   49e54:	00000406 	br	49e68 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49e58:	0049d7c0 	call	49d7c <alt_get_errno>
   49e5c:	00c01444 	movi	r3,81
   49e60:	10c00015 	stw	r3,0(r2)
    return -1;
   49e64:	00bfffc4 	movi	r2,-1
  }
}
   49e68:	e037883a 	mov	sp,fp
   49e6c:	dfc00117 	ldw	ra,4(sp)
   49e70:	df000017 	ldw	fp,0(sp)
   49e74:	dec00204 	addi	sp,sp,8
   49e78:	f800283a 	ret

00049e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49e7c:	defffe04 	addi	sp,sp,-8
   49e80:	dfc00115 	stw	ra,4(sp)
   49e84:	df000015 	stw	fp,0(sp)
   49e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49e8c:	00800074 	movhi	r2,1
   49e90:	10879204 	addi	r2,r2,7752
   49e94:	10800017 	ldw	r2,0(r2)
   49e98:	10000526 	beq	r2,zero,49eb0 <alt_get_errno+0x34>
   49e9c:	00800074 	movhi	r2,1
   49ea0:	10879204 	addi	r2,r2,7752
   49ea4:	10800017 	ldw	r2,0(r2)
   49ea8:	103ee83a 	callr	r2
   49eac:	00000206 	br	49eb8 <alt_get_errno+0x3c>
   49eb0:	00800074 	movhi	r2,1
   49eb4:	1087a204 	addi	r2,r2,7816
}
   49eb8:	e037883a 	mov	sp,fp
   49ebc:	dfc00117 	ldw	ra,4(sp)
   49ec0:	df000017 	ldw	fp,0(sp)
   49ec4:	dec00204 	addi	sp,sp,8
   49ec8:	f800283a 	ret

00049ecc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   49ecc:	deffed04 	addi	sp,sp,-76
   49ed0:	dfc01215 	stw	ra,72(sp)
   49ed4:	df001115 	stw	fp,68(sp)
   49ed8:	df001104 	addi	fp,sp,68
   49edc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49ee0:	e0bfff17 	ldw	r2,-4(fp)
   49ee4:	10000716 	blt	r2,zero,49f04 <isatty+0x38>
   49ee8:	e13fff17 	ldw	r4,-4(fp)
   49eec:	01400304 	movi	r5,12
   49ef0:	00495d00 	call	495d0 <__mulsi3>
   49ef4:	00c00074 	movhi	r3,1
   49ef8:	18c31004 	addi	r3,r3,3136
   49efc:	10c5883a 	add	r2,r2,r3
   49f00:	00000106 	br	49f08 <isatty+0x3c>
   49f04:	0005883a 	mov	r2,zero
   49f08:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   49f0c:	e0bfef17 	ldw	r2,-68(fp)
   49f10:	10000e26 	beq	r2,zero,49f4c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   49f14:	e0bfef17 	ldw	r2,-68(fp)
   49f18:	10800017 	ldw	r2,0(r2)
   49f1c:	10800817 	ldw	r2,32(r2)
   49f20:	1000021e 	bne	r2,zero,49f2c <isatty+0x60>
    {
      return 1;
   49f24:	00800044 	movi	r2,1
   49f28:	00000c06 	br	49f5c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   49f2c:	e0bff004 	addi	r2,fp,-64
   49f30:	e13fff17 	ldw	r4,-4(fp)
   49f34:	100b883a 	mov	r5,r2
   49f38:	0049dcc0 	call	49dcc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   49f3c:	e0bff117 	ldw	r2,-60(fp)
   49f40:	10880020 	cmpeqi	r2,r2,8192
   49f44:	10803fcc 	andi	r2,r2,255
   49f48:	00000406 	br	49f5c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49f4c:	0049e7c0 	call	49e7c <alt_get_errno>
   49f50:	00c01444 	movi	r3,81
   49f54:	10c00015 	stw	r3,0(r2)
    return 0;
   49f58:	0005883a 	mov	r2,zero
  }
}
   49f5c:	e037883a 	mov	sp,fp
   49f60:	dfc00117 	ldw	ra,4(sp)
   49f64:	df000017 	ldw	fp,0(sp)
   49f68:	dec00204 	addi	sp,sp,8
   49f6c:	f800283a 	ret

00049f70 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   49f70:	defffc04 	addi	sp,sp,-16
   49f74:	df000315 	stw	fp,12(sp)
   49f78:	df000304 	addi	fp,sp,12
   49f7c:	e13ffd15 	stw	r4,-12(fp)
   49f80:	e17ffe15 	stw	r5,-8(fp)
   49f84:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   49f88:	e0fffe17 	ldw	r3,-8(fp)
   49f8c:	e0bffd17 	ldw	r2,-12(fp)
   49f90:	18800e26 	beq	r3,r2,49fcc <alt_load_section+0x5c>
  {
    while( to != end )
   49f94:	00000a06 	br	49fc0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   49f98:	e0bffd17 	ldw	r2,-12(fp)
   49f9c:	10c00017 	ldw	r3,0(r2)
   49fa0:	e0bffe17 	ldw	r2,-8(fp)
   49fa4:	10c00015 	stw	r3,0(r2)
   49fa8:	e0bffe17 	ldw	r2,-8(fp)
   49fac:	10800104 	addi	r2,r2,4
   49fb0:	e0bffe15 	stw	r2,-8(fp)
   49fb4:	e0bffd17 	ldw	r2,-12(fp)
   49fb8:	10800104 	addi	r2,r2,4
   49fbc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   49fc0:	e0fffe17 	ldw	r3,-8(fp)
   49fc4:	e0bfff17 	ldw	r2,-4(fp)
   49fc8:	18bff31e 	bne	r3,r2,49f98 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   49fcc:	e037883a 	mov	sp,fp
   49fd0:	df000017 	ldw	fp,0(sp)
   49fd4:	dec00104 	addi	sp,sp,4
   49fd8:	f800283a 	ret

00049fdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   49fdc:	defffe04 	addi	sp,sp,-8
   49fe0:	dfc00115 	stw	ra,4(sp)
   49fe4:	df000015 	stw	fp,0(sp)
   49fe8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   49fec:	01000174 	movhi	r4,5
   49ff0:	2131ff04 	addi	r4,r4,-14340
   49ff4:	01400074 	movhi	r5,1
   49ff8:	29410104 	addi	r5,r5,1028
   49ffc:	01800074 	movhi	r6,1
   4a000:	31879704 	addi	r6,r6,7772
   4a004:	0049f700 	call	49f70 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4a008:	01000134 	movhi	r4,4
   4a00c:	21000804 	addi	r4,r4,32
   4a010:	01400134 	movhi	r5,4
   4a014:	29400804 	addi	r5,r5,32
   4a018:	01800134 	movhi	r6,4
   4a01c:	31806e04 	addi	r6,r6,440
   4a020:	0049f700 	call	49f70 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4a024:	01000174 	movhi	r4,5
   4a028:	2130fe04 	addi	r4,r4,-15368
   4a02c:	01400074 	movhi	r5,1
   4a030:	29400004 	addi	r5,r5,0
   4a034:	01800074 	movhi	r6,1
   4a038:	31810104 	addi	r6,r6,1028
   4a03c:	0049f700 	call	49f70 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4a040:	004b3580 	call	4b358 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4a044:	004b51c0 	call	4b51c <alt_icache_flush_all>
}
   4a048:	e037883a 	mov	sp,fp
   4a04c:	dfc00117 	ldw	ra,4(sp)
   4a050:	df000017 	ldw	fp,0(sp)
   4a054:	dec00204 	addi	sp,sp,8
   4a058:	f800283a 	ret

0004a05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a05c:	defffe04 	addi	sp,sp,-8
   4a060:	dfc00115 	stw	ra,4(sp)
   4a064:	df000015 	stw	fp,0(sp)
   4a068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a06c:	00800074 	movhi	r2,1
   4a070:	10879204 	addi	r2,r2,7752
   4a074:	10800017 	ldw	r2,0(r2)
   4a078:	10000526 	beq	r2,zero,4a090 <alt_get_errno+0x34>
   4a07c:	00800074 	movhi	r2,1
   4a080:	10879204 	addi	r2,r2,7752
   4a084:	10800017 	ldw	r2,0(r2)
   4a088:	103ee83a 	callr	r2
   4a08c:	00000206 	br	4a098 <alt_get_errno+0x3c>
   4a090:	00800074 	movhi	r2,1
   4a094:	1087a204 	addi	r2,r2,7816
}
   4a098:	e037883a 	mov	sp,fp
   4a09c:	dfc00117 	ldw	ra,4(sp)
   4a0a0:	df000017 	ldw	fp,0(sp)
   4a0a4:	dec00204 	addi	sp,sp,8
   4a0a8:	f800283a 	ret

0004a0ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4a0ac:	defff904 	addi	sp,sp,-28
   4a0b0:	dfc00615 	stw	ra,24(sp)
   4a0b4:	df000515 	stw	fp,20(sp)
   4a0b8:	df000504 	addi	fp,sp,20
   4a0bc:	e13ffd15 	stw	r4,-12(fp)
   4a0c0:	e17ffe15 	stw	r5,-8(fp)
   4a0c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4a0c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a0cc:	e0bffd17 	ldw	r2,-12(fp)
   4a0d0:	10000716 	blt	r2,zero,4a0f0 <lseek+0x44>
   4a0d4:	e13ffd17 	ldw	r4,-12(fp)
   4a0d8:	01400304 	movi	r5,12
   4a0dc:	00495d00 	call	495d0 <__mulsi3>
   4a0e0:	00c00074 	movhi	r3,1
   4a0e4:	18c31004 	addi	r3,r3,3136
   4a0e8:	10c5883a 	add	r2,r2,r3
   4a0ec:	00000106 	br	4a0f4 <lseek+0x48>
   4a0f0:	0005883a 	mov	r2,zero
   4a0f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4a0f8:	e0bffc17 	ldw	r2,-16(fp)
   4a0fc:	10001026 	beq	r2,zero,4a140 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4a100:	e0bffc17 	ldw	r2,-16(fp)
   4a104:	10800017 	ldw	r2,0(r2)
   4a108:	10800717 	ldw	r2,28(r2)
   4a10c:	10000926 	beq	r2,zero,4a134 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4a110:	e0bffc17 	ldw	r2,-16(fp)
   4a114:	10800017 	ldw	r2,0(r2)
   4a118:	10800717 	ldw	r2,28(r2)
   4a11c:	e13ffc17 	ldw	r4,-16(fp)
   4a120:	e17ffe17 	ldw	r5,-8(fp)
   4a124:	e1bfff17 	ldw	r6,-4(fp)
   4a128:	103ee83a 	callr	r2
   4a12c:	e0bffb15 	stw	r2,-20(fp)
   4a130:	00000506 	br	4a148 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4a134:	00bfde84 	movi	r2,-134
   4a138:	e0bffb15 	stw	r2,-20(fp)
   4a13c:	00000206 	br	4a148 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4a140:	00bfebc4 	movi	r2,-81
   4a144:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4a148:	e0bffb17 	ldw	r2,-20(fp)
   4a14c:	1000060e 	bge	r2,zero,4a168 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4a150:	004a05c0 	call	4a05c <alt_get_errno>
   4a154:	e0fffb17 	ldw	r3,-20(fp)
   4a158:	00c7c83a 	sub	r3,zero,r3
   4a15c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4a160:	00bfffc4 	movi	r2,-1
   4a164:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4a168:	e0bffb17 	ldw	r2,-20(fp)
}
   4a16c:	e037883a 	mov	sp,fp
   4a170:	dfc00117 	ldw	ra,4(sp)
   4a174:	df000017 	ldw	fp,0(sp)
   4a178:	dec00204 	addi	sp,sp,8
   4a17c:	f800283a 	ret

0004a180 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4a180:	defffd04 	addi	sp,sp,-12
   4a184:	dfc00215 	stw	ra,8(sp)
   4a188:	df000115 	stw	fp,4(sp)
   4a18c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4a190:	0009883a 	mov	r4,zero
   4a194:	004a6240 	call	4a624 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4a198:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4a19c:	004a6580 	call	4a658 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4a1a0:	01000074 	movhi	r4,1
   4a1a4:	2100f704 	addi	r4,r4,988
   4a1a8:	01400074 	movhi	r5,1
   4a1ac:	2940f704 	addi	r5,r5,988
   4a1b0:	01800074 	movhi	r6,1
   4a1b4:	3180f704 	addi	r6,r6,988
   4a1b8:	004b8e00 	call	4b8e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4a1bc:	004b4640 	call	4b464 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4a1c0:	01000174 	movhi	r4,5
   4a1c4:	212d3004 	addi	r4,r4,-19264
   4a1c8:	004c0240 	call	4c024 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4a1cc:	d1201b17 	ldw	r4,-32660(gp)
   4a1d0:	d0e01c17 	ldw	r3,-32656(gp)
   4a1d4:	d0a01d17 	ldw	r2,-32652(gp)
   4a1d8:	180b883a 	mov	r5,r3
   4a1dc:	100d883a 	mov	r6,r2
   4a1e0:	00404480 	call	40448 <main>
   4a1e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4a1e8:	01000044 	movi	r4,1
   4a1ec:	0049c840 	call	49c84 <close>
  exit (result);
   4a1f0:	e13fff17 	ldw	r4,-4(fp)
   4a1f4:	004c0380 	call	4c038 <exit>

0004a1f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4a1f8:	defffe04 	addi	sp,sp,-8
   4a1fc:	df000115 	stw	fp,4(sp)
   4a200:	df000104 	addi	fp,sp,4
   4a204:	e13fff15 	stw	r4,-4(fp)
}
   4a208:	e037883a 	mov	sp,fp
   4a20c:	df000017 	ldw	fp,0(sp)
   4a210:	dec00104 	addi	sp,sp,4
   4a214:	f800283a 	ret

0004a218 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4a218:	defffe04 	addi	sp,sp,-8
   4a21c:	df000115 	stw	fp,4(sp)
   4a220:	df000104 	addi	fp,sp,4
   4a224:	e13fff15 	stw	r4,-4(fp)
}
   4a228:	e037883a 	mov	sp,fp
   4a22c:	df000017 	ldw	fp,0(sp)
   4a230:	dec00104 	addi	sp,sp,4
   4a234:	f800283a 	ret

0004a238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a238:	defffe04 	addi	sp,sp,-8
   4a23c:	dfc00115 	stw	ra,4(sp)
   4a240:	df000015 	stw	fp,0(sp)
   4a244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a248:	00800074 	movhi	r2,1
   4a24c:	10879204 	addi	r2,r2,7752
   4a250:	10800017 	ldw	r2,0(r2)
   4a254:	10000526 	beq	r2,zero,4a26c <alt_get_errno+0x34>
   4a258:	00800074 	movhi	r2,1
   4a25c:	10879204 	addi	r2,r2,7752
   4a260:	10800017 	ldw	r2,0(r2)
   4a264:	103ee83a 	callr	r2
   4a268:	00000206 	br	4a274 <alt_get_errno+0x3c>
   4a26c:	00800074 	movhi	r2,1
   4a270:	1087a204 	addi	r2,r2,7816
}
   4a274:	e037883a 	mov	sp,fp
   4a278:	dfc00117 	ldw	ra,4(sp)
   4a27c:	df000017 	ldw	fp,0(sp)
   4a280:	dec00204 	addi	sp,sp,8
   4a284:	f800283a 	ret

0004a288 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4a288:	defff904 	addi	sp,sp,-28
   4a28c:	dfc00615 	stw	ra,24(sp)
   4a290:	df000515 	stw	fp,20(sp)
   4a294:	df000504 	addi	fp,sp,20
   4a298:	e13ffd15 	stw	r4,-12(fp)
   4a29c:	e17ffe15 	stw	r5,-8(fp)
   4a2a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a2a4:	e0bffd17 	ldw	r2,-12(fp)
   4a2a8:	10000716 	blt	r2,zero,4a2c8 <read+0x40>
   4a2ac:	e13ffd17 	ldw	r4,-12(fp)
   4a2b0:	01400304 	movi	r5,12
   4a2b4:	00495d00 	call	495d0 <__mulsi3>
   4a2b8:	00c00074 	movhi	r3,1
   4a2bc:	18c31004 	addi	r3,r3,3136
   4a2c0:	10c5883a 	add	r2,r2,r3
   4a2c4:	00000106 	br	4a2cc <read+0x44>
   4a2c8:	0005883a 	mov	r2,zero
   4a2cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a2d0:	e0bffb17 	ldw	r2,-20(fp)
   4a2d4:	10002026 	beq	r2,zero,4a358 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a2d8:	e0bffb17 	ldw	r2,-20(fp)
   4a2dc:	10800217 	ldw	r2,8(r2)
   4a2e0:	108000cc 	andi	r2,r2,3
   4a2e4:	10800060 	cmpeqi	r2,r2,1
   4a2e8:	1000171e 	bne	r2,zero,4a348 <read+0xc0>
        (fd->dev->read))
   4a2ec:	e0bffb17 	ldw	r2,-20(fp)
   4a2f0:	10800017 	ldw	r2,0(r2)
   4a2f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a2f8:	10001326 	beq	r2,zero,4a348 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4a2fc:	e0bffb17 	ldw	r2,-20(fp)
   4a300:	10800017 	ldw	r2,0(r2)
   4a304:	10c00517 	ldw	r3,20(r2)
   4a308:	e0bfff17 	ldw	r2,-4(fp)
   4a30c:	e13ffb17 	ldw	r4,-20(fp)
   4a310:	e17ffe17 	ldw	r5,-8(fp)
   4a314:	100d883a 	mov	r6,r2
   4a318:	183ee83a 	callr	r3
   4a31c:	e0bffc15 	stw	r2,-16(fp)
   4a320:	e0bffc17 	ldw	r2,-16(fp)
   4a324:	1000060e 	bge	r2,zero,4a340 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4a328:	004a2380 	call	4a238 <alt_get_errno>
   4a32c:	e0fffc17 	ldw	r3,-16(fp)
   4a330:	00c7c83a 	sub	r3,zero,r3
   4a334:	10c00015 	stw	r3,0(r2)
          return -1;
   4a338:	00bfffc4 	movi	r2,-1
   4a33c:	00000a06 	br	4a368 <read+0xe0>
        }
        return rval;
   4a340:	e0bffc17 	ldw	r2,-16(fp)
   4a344:	00000806 	br	4a368 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4a348:	004a2380 	call	4a238 <alt_get_errno>
   4a34c:	00c00344 	movi	r3,13
   4a350:	10c00015 	stw	r3,0(r2)
   4a354:	00000306 	br	4a364 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4a358:	004a2380 	call	4a238 <alt_get_errno>
   4a35c:	00c01444 	movi	r3,81
   4a360:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4a364:	00bfffc4 	movi	r2,-1
}
   4a368:	e037883a 	mov	sp,fp
   4a36c:	dfc00117 	ldw	ra,4(sp)
   4a370:	df000017 	ldw	fp,0(sp)
   4a374:	dec00204 	addi	sp,sp,8
   4a378:	f800283a 	ret

0004a37c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4a37c:	defffc04 	addi	sp,sp,-16
   4a380:	dfc00315 	stw	ra,12(sp)
   4a384:	df000215 	stw	fp,8(sp)
   4a388:	dc000115 	stw	r16,4(sp)
   4a38c:	df000104 	addi	fp,sp,4
   4a390:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4a394:	e0bfff17 	ldw	r2,-4(fp)
   4a398:	108000d0 	cmplti	r2,r2,3
   4a39c:	1000111e 	bne	r2,zero,4a3e4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4a3a0:	04000074 	movhi	r16,1
   4a3a4:	84031004 	addi	r16,r16,3136
   4a3a8:	e0bfff17 	ldw	r2,-4(fp)
   4a3ac:	1009883a 	mov	r4,r2
   4a3b0:	01400304 	movi	r5,12
   4a3b4:	00495d00 	call	495d0 <__mulsi3>
   4a3b8:	8085883a 	add	r2,r16,r2
   4a3bc:	10800204 	addi	r2,r2,8
   4a3c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4a3c4:	04000074 	movhi	r16,1
   4a3c8:	84031004 	addi	r16,r16,3136
   4a3cc:	e0bfff17 	ldw	r2,-4(fp)
   4a3d0:	1009883a 	mov	r4,r2
   4a3d4:	01400304 	movi	r5,12
   4a3d8:	00495d00 	call	495d0 <__mulsi3>
   4a3dc:	8085883a 	add	r2,r16,r2
   4a3e0:	10000015 	stw	zero,0(r2)
  }
}
   4a3e4:	e037883a 	mov	sp,fp
   4a3e8:	dfc00217 	ldw	ra,8(sp)
   4a3ec:	df000117 	ldw	fp,4(sp)
   4a3f0:	dc000017 	ldw	r16,0(sp)
   4a3f4:	dec00304 	addi	sp,sp,12
   4a3f8:	f800283a 	ret

0004a3fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4a3fc:	defff904 	addi	sp,sp,-28
   4a400:	df000615 	stw	fp,24(sp)
   4a404:	df000604 	addi	fp,sp,24
   4a408:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a40c:	0005303a 	rdctl	r2,status
   4a410:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a414:	e0fffc17 	ldw	r3,-16(fp)
   4a418:	00bfff84 	movi	r2,-2
   4a41c:	1884703a 	and	r2,r3,r2
   4a420:	1001703a 	wrctl	status,r2
  
  return context;
   4a424:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4a428:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4a42c:	d0a00b17 	ldw	r2,-32724(gp)
   4a430:	10c000c4 	addi	r3,r2,3
   4a434:	00bfff04 	movi	r2,-4
   4a438:	1884703a 	and	r2,r3,r2
   4a43c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4a440:	d0e00b17 	ldw	r3,-32724(gp)
   4a444:	e0bfff17 	ldw	r2,-4(fp)
   4a448:	1885883a 	add	r2,r3,r2
   4a44c:	00c000b4 	movhi	r3,2
   4a450:	18c00004 	addi	r3,r3,0
   4a454:	1880062e 	bgeu	r3,r2,4a470 <sbrk+0x74>
   4a458:	e0bffa17 	ldw	r2,-24(fp)
   4a45c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a460:	e0bffd17 	ldw	r2,-12(fp)
   4a464:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4a468:	00bfffc4 	movi	r2,-1
   4a46c:	00000b06 	br	4a49c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4a470:	d0a00b17 	ldw	r2,-32724(gp)
   4a474:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4a478:	d0e00b17 	ldw	r3,-32724(gp)
   4a47c:	e0bfff17 	ldw	r2,-4(fp)
   4a480:	1885883a 	add	r2,r3,r2
   4a484:	d0a00b15 	stw	r2,-32724(gp)
   4a488:	e0bffa17 	ldw	r2,-24(fp)
   4a48c:	e0bffe15 	stw	r2,-8(fp)
   4a490:	e0bffe17 	ldw	r2,-8(fp)
   4a494:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a498:	e0bffb17 	ldw	r2,-20(fp)
} 
   4a49c:	e037883a 	mov	sp,fp
   4a4a0:	df000017 	ldw	fp,0(sp)
   4a4a4:	dec00104 	addi	sp,sp,4
   4a4a8:	f800283a 	ret

0004a4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a4ac:	defffe04 	addi	sp,sp,-8
   4a4b0:	dfc00115 	stw	ra,4(sp)
   4a4b4:	df000015 	stw	fp,0(sp)
   4a4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a4bc:	00800074 	movhi	r2,1
   4a4c0:	10879204 	addi	r2,r2,7752
   4a4c4:	10800017 	ldw	r2,0(r2)
   4a4c8:	10000526 	beq	r2,zero,4a4e0 <alt_get_errno+0x34>
   4a4cc:	00800074 	movhi	r2,1
   4a4d0:	10879204 	addi	r2,r2,7752
   4a4d4:	10800017 	ldw	r2,0(r2)
   4a4d8:	103ee83a 	callr	r2
   4a4dc:	00000206 	br	4a4e8 <alt_get_errno+0x3c>
   4a4e0:	00800074 	movhi	r2,1
   4a4e4:	1087a204 	addi	r2,r2,7816
}
   4a4e8:	e037883a 	mov	sp,fp
   4a4ec:	dfc00117 	ldw	ra,4(sp)
   4a4f0:	df000017 	ldw	fp,0(sp)
   4a4f4:	dec00204 	addi	sp,sp,8
   4a4f8:	f800283a 	ret

0004a4fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a4fc:	defff904 	addi	sp,sp,-28
   4a500:	dfc00615 	stw	ra,24(sp)
   4a504:	df000515 	stw	fp,20(sp)
   4a508:	df000504 	addi	fp,sp,20
   4a50c:	e13ffd15 	stw	r4,-12(fp)
   4a510:	e17ffe15 	stw	r5,-8(fp)
   4a514:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a518:	e0bffd17 	ldw	r2,-12(fp)
   4a51c:	10000716 	blt	r2,zero,4a53c <write+0x40>
   4a520:	e13ffd17 	ldw	r4,-12(fp)
   4a524:	01400304 	movi	r5,12
   4a528:	00495d00 	call	495d0 <__mulsi3>
   4a52c:	00c00074 	movhi	r3,1
   4a530:	18c31004 	addi	r3,r3,3136
   4a534:	10c5883a 	add	r2,r2,r3
   4a538:	00000106 	br	4a540 <write+0x44>
   4a53c:	0005883a 	mov	r2,zero
   4a540:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a544:	e0bffb17 	ldw	r2,-20(fp)
   4a548:	10001f26 	beq	r2,zero,4a5c8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a54c:	e0bffb17 	ldw	r2,-20(fp)
   4a550:	10800217 	ldw	r2,8(r2)
   4a554:	108000cc 	andi	r2,r2,3
   4a558:	10001726 	beq	r2,zero,4a5b8 <write+0xbc>
   4a55c:	e0bffb17 	ldw	r2,-20(fp)
   4a560:	10800017 	ldw	r2,0(r2)
   4a564:	10800617 	ldw	r2,24(r2)
   4a568:	10001326 	beq	r2,zero,4a5b8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a56c:	e0bffb17 	ldw	r2,-20(fp)
   4a570:	10800017 	ldw	r2,0(r2)
   4a574:	10c00617 	ldw	r3,24(r2)
   4a578:	e0bfff17 	ldw	r2,-4(fp)
   4a57c:	e13ffb17 	ldw	r4,-20(fp)
   4a580:	e17ffe17 	ldw	r5,-8(fp)
   4a584:	100d883a 	mov	r6,r2
   4a588:	183ee83a 	callr	r3
   4a58c:	e0bffc15 	stw	r2,-16(fp)
   4a590:	e0bffc17 	ldw	r2,-16(fp)
   4a594:	1000060e 	bge	r2,zero,4a5b0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4a598:	004a4ac0 	call	4a4ac <alt_get_errno>
   4a59c:	e0fffc17 	ldw	r3,-16(fp)
   4a5a0:	00c7c83a 	sub	r3,zero,r3
   4a5a4:	10c00015 	stw	r3,0(r2)
        return -1;
   4a5a8:	00bfffc4 	movi	r2,-1
   4a5ac:	00000a06 	br	4a5d8 <write+0xdc>
      }
      return rval;
   4a5b0:	e0bffc17 	ldw	r2,-16(fp)
   4a5b4:	00000806 	br	4a5d8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4a5b8:	004a4ac0 	call	4a4ac <alt_get_errno>
   4a5bc:	00c00344 	movi	r3,13
   4a5c0:	10c00015 	stw	r3,0(r2)
   4a5c4:	00000306 	br	4a5d4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4a5c8:	004a4ac0 	call	4a4ac <alt_get_errno>
   4a5cc:	00c01444 	movi	r3,81
   4a5d0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4a5d4:	00bfffc4 	movi	r2,-1
}
   4a5d8:	e037883a 	mov	sp,fp
   4a5dc:	dfc00117 	ldw	ra,4(sp)
   4a5e0:	df000017 	ldw	fp,0(sp)
   4a5e4:	dec00204 	addi	sp,sp,8
   4a5e8:	f800283a 	ret

0004a5ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4a5ec:	defffd04 	addi	sp,sp,-12
   4a5f0:	dfc00215 	stw	ra,8(sp)
   4a5f4:	df000115 	stw	fp,4(sp)
   4a5f8:	df000104 	addi	fp,sp,4
   4a5fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4a600:	e13fff17 	ldw	r4,-4(fp)
   4a604:	01400074 	movhi	r5,1
   4a608:	29478f04 	addi	r5,r5,7740
   4a60c:	004b3c40 	call	4b3c4 <alt_dev_llist_insert>
}
   4a610:	e037883a 	mov	sp,fp
   4a614:	dfc00117 	ldw	ra,4(sp)
   4a618:	df000017 	ldw	fp,0(sp)
   4a61c:	dec00204 	addi	sp,sp,8
   4a620:	f800283a 	ret

0004a624 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4a624:	defffd04 	addi	sp,sp,-12
   4a628:	dfc00215 	stw	ra,8(sp)
   4a62c:	df000115 	stw	fp,4(sp)
   4a630:	df000104 	addi	fp,sp,4
   4a634:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   4a638:	004bd8c0 	call	4bd8c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4a63c:	00800044 	movi	r2,1
   4a640:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4a644:	e037883a 	mov	sp,fp
   4a648:	dfc00117 	ldw	ra,4(sp)
   4a64c:	df000017 	ldw	fp,0(sp)
   4a650:	dec00204 	addi	sp,sp,8
   4a654:	f800283a 	ret

0004a658 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4a658:	defffe04 	addi	sp,sp,-8
   4a65c:	dfc00115 	stw	ra,4(sp)
   4a660:	df000015 	stw	fp,0(sp)
   4a664:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   4a668:	01000174 	movhi	r4,5
   4a66c:	21040804 	addi	r4,r4,4128
   4a670:	000b883a 	mov	r5,zero
   4a674:	000d883a 	mov	r6,zero
   4a678:	01c0fa04 	movi	r7,1000
   4a67c:	004b1900 	call	4b190 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   4a680:	01000074 	movhi	r4,1
   4a684:	21037a04 	addi	r4,r4,3560
   4a688:	000b883a 	mov	r5,zero
   4a68c:	01800404 	movi	r6,16
   4a690:	004a81c0 	call	4a81c <altera_avalon_jtag_uart_init>
   4a694:	01000074 	movhi	r4,1
   4a698:	21037004 	addi	r4,r4,3520
   4a69c:	004a5ec0 	call	4a5ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
   4a6a0:	0001883a 	nop
}
   4a6a4:	e037883a 	mov	sp,fp
   4a6a8:	dfc00117 	ldw	ra,4(sp)
   4a6ac:	df000017 	ldw	fp,0(sp)
   4a6b0:	dec00204 	addi	sp,sp,8
   4a6b4:	f800283a 	ret

0004a6b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4a6b8:	defffa04 	addi	sp,sp,-24
   4a6bc:	dfc00515 	stw	ra,20(sp)
   4a6c0:	df000415 	stw	fp,16(sp)
   4a6c4:	df000404 	addi	fp,sp,16
   4a6c8:	e13ffd15 	stw	r4,-12(fp)
   4a6cc:	e17ffe15 	stw	r5,-8(fp)
   4a6d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a6d4:	e0bffd17 	ldw	r2,-12(fp)
   4a6d8:	10800017 	ldw	r2,0(r2)
   4a6dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4a6e0:	e0bffc17 	ldw	r2,-16(fp)
   4a6e4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4a6e8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4a6ec:	10800217 	ldw	r2,8(r2)
   4a6f0:	1809883a 	mov	r4,r3
   4a6f4:	e17ffe17 	ldw	r5,-8(fp)
   4a6f8:	e1bfff17 	ldw	r6,-4(fp)
   4a6fc:	100f883a 	mov	r7,r2
   4a700:	004ace00 	call	4ace0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4a704:	e037883a 	mov	sp,fp
   4a708:	dfc00117 	ldw	ra,4(sp)
   4a70c:	df000017 	ldw	fp,0(sp)
   4a710:	dec00204 	addi	sp,sp,8
   4a714:	f800283a 	ret

0004a718 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4a718:	defffa04 	addi	sp,sp,-24
   4a71c:	dfc00515 	stw	ra,20(sp)
   4a720:	df000415 	stw	fp,16(sp)
   4a724:	df000404 	addi	fp,sp,16
   4a728:	e13ffd15 	stw	r4,-12(fp)
   4a72c:	e17ffe15 	stw	r5,-8(fp)
   4a730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a734:	e0bffd17 	ldw	r2,-12(fp)
   4a738:	10800017 	ldw	r2,0(r2)
   4a73c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4a740:	e0bffc17 	ldw	r2,-16(fp)
   4a744:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4a748:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4a74c:	10800217 	ldw	r2,8(r2)
   4a750:	1809883a 	mov	r4,r3
   4a754:	e17ffe17 	ldw	r5,-8(fp)
   4a758:	e1bfff17 	ldw	r6,-4(fp)
   4a75c:	100f883a 	mov	r7,r2
   4a760:	004aef80 	call	4aef8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4a764:	e037883a 	mov	sp,fp
   4a768:	dfc00117 	ldw	ra,4(sp)
   4a76c:	df000017 	ldw	fp,0(sp)
   4a770:	dec00204 	addi	sp,sp,8
   4a774:	f800283a 	ret

0004a778 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4a778:	defffc04 	addi	sp,sp,-16
   4a77c:	dfc00315 	stw	ra,12(sp)
   4a780:	df000215 	stw	fp,8(sp)
   4a784:	df000204 	addi	fp,sp,8
   4a788:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a78c:	e0bfff17 	ldw	r2,-4(fp)
   4a790:	10800017 	ldw	r2,0(r2)
   4a794:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4a798:	e0bffe17 	ldw	r2,-8(fp)
   4a79c:	10c00a04 	addi	r3,r2,40
   4a7a0:	e0bfff17 	ldw	r2,-4(fp)
   4a7a4:	10800217 	ldw	r2,8(r2)
   4a7a8:	1809883a 	mov	r4,r3
   4a7ac:	100b883a 	mov	r5,r2
   4a7b0:	004ab840 	call	4ab84 <altera_avalon_jtag_uart_close>
}
   4a7b4:	e037883a 	mov	sp,fp
   4a7b8:	dfc00117 	ldw	ra,4(sp)
   4a7bc:	df000017 	ldw	fp,0(sp)
   4a7c0:	dec00204 	addi	sp,sp,8
   4a7c4:	f800283a 	ret

0004a7c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4a7c8:	defffa04 	addi	sp,sp,-24
   4a7cc:	dfc00515 	stw	ra,20(sp)
   4a7d0:	df000415 	stw	fp,16(sp)
   4a7d4:	df000404 	addi	fp,sp,16
   4a7d8:	e13ffd15 	stw	r4,-12(fp)
   4a7dc:	e17ffe15 	stw	r5,-8(fp)
   4a7e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4a7e4:	e0bffd17 	ldw	r2,-12(fp)
   4a7e8:	10800017 	ldw	r2,0(r2)
   4a7ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4a7f0:	e0bffc17 	ldw	r2,-16(fp)
   4a7f4:	10800a04 	addi	r2,r2,40
   4a7f8:	1009883a 	mov	r4,r2
   4a7fc:	e17ffe17 	ldw	r5,-8(fp)
   4a800:	e1bfff17 	ldw	r6,-4(fp)
   4a804:	004abec0 	call	4abec <altera_avalon_jtag_uart_ioctl>
}
   4a808:	e037883a 	mov	sp,fp
   4a80c:	dfc00117 	ldw	ra,4(sp)
   4a810:	df000017 	ldw	fp,0(sp)
   4a814:	dec00204 	addi	sp,sp,8
   4a818:	f800283a 	ret

0004a81c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4a81c:	defffa04 	addi	sp,sp,-24
   4a820:	dfc00515 	stw	ra,20(sp)
   4a824:	df000415 	stw	fp,16(sp)
   4a828:	df000404 	addi	fp,sp,16
   4a82c:	e13ffd15 	stw	r4,-12(fp)
   4a830:	e17ffe15 	stw	r5,-8(fp)
   4a834:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4a838:	e0bffd17 	ldw	r2,-12(fp)
   4a83c:	00c00044 	movi	r3,1
   4a840:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4a844:	e0bffd17 	ldw	r2,-12(fp)
   4a848:	10800017 	ldw	r2,0(r2)
   4a84c:	10800104 	addi	r2,r2,4
   4a850:	e0fffd17 	ldw	r3,-12(fp)
   4a854:	18c00817 	ldw	r3,32(r3)
   4a858:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4a85c:	e0fffe17 	ldw	r3,-8(fp)
   4a860:	e0bfff17 	ldw	r2,-4(fp)
   4a864:	d8000015 	stw	zero,0(sp)
   4a868:	1809883a 	mov	r4,r3
   4a86c:	100b883a 	mov	r5,r2
   4a870:	01800174 	movhi	r6,5
   4a874:	31aa3704 	addi	r6,r6,-22308
   4a878:	e1fffd17 	ldw	r7,-12(fp)
   4a87c:	004b5380 	call	4b538 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4a880:	e0bffd17 	ldw	r2,-12(fp)
   4a884:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4a888:	e0bffd17 	ldw	r2,-12(fp)
   4a88c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4a890:	00800074 	movhi	r2,1
   4a894:	1087a704 	addi	r2,r2,7836
   4a898:	10800017 	ldw	r2,0(r2)
   4a89c:	1809883a 	mov	r4,r3
   4a8a0:	100b883a 	mov	r5,r2
   4a8a4:	01800174 	movhi	r6,5
   4a8a8:	31aab804 	addi	r6,r6,-21792
   4a8ac:	e1fffd17 	ldw	r7,-12(fp)
   4a8b0:	004b2180 	call	4b218 <alt_alarm_start>
   4a8b4:	1000040e 	bge	r2,zero,4a8c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4a8b8:	e0bffd17 	ldw	r2,-12(fp)
   4a8bc:	00e00034 	movhi	r3,32768
   4a8c0:	18ffffc4 	addi	r3,r3,-1
   4a8c4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4a8c8:	e037883a 	mov	sp,fp
   4a8cc:	dfc00117 	ldw	ra,4(sp)
   4a8d0:	df000017 	ldw	fp,0(sp)
   4a8d4:	dec00204 	addi	sp,sp,8
   4a8d8:	f800283a 	ret

0004a8dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4a8dc:	defff804 	addi	sp,sp,-32
   4a8e0:	df000715 	stw	fp,28(sp)
   4a8e4:	df000704 	addi	fp,sp,28
   4a8e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4a8ec:	e0bfff17 	ldw	r2,-4(fp)
   4a8f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4a8f4:	e0bffb17 	ldw	r2,-20(fp)
   4a8f8:	10800017 	ldw	r2,0(r2)
   4a8fc:	e0bffc15 	stw	r2,-16(fp)
   4a900:	00000106 	br	4a908 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4a904:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4a908:	e0bffc17 	ldw	r2,-16(fp)
   4a90c:	10800104 	addi	r2,r2,4
   4a910:	10800037 	ldwio	r2,0(r2)
   4a914:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4a918:	e0bffd17 	ldw	r2,-12(fp)
   4a91c:	1080c00c 	andi	r2,r2,768
   4a920:	10006a26 	beq	r2,zero,4aacc <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4a924:	e0bffd17 	ldw	r2,-12(fp)
   4a928:	1080400c 	andi	r2,r2,256
   4a92c:	10003326 	beq	r2,zero,4a9fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4a930:	00800074 	movhi	r2,1
   4a934:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4a938:	e0bffb17 	ldw	r2,-20(fp)
   4a93c:	10800a17 	ldw	r2,40(r2)
   4a940:	10800044 	addi	r2,r2,1
   4a944:	1081ffcc 	andi	r2,r2,2047
   4a948:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4a94c:	e0bffb17 	ldw	r2,-20(fp)
   4a950:	10c00b17 	ldw	r3,44(r2)
   4a954:	e0bffe17 	ldw	r2,-8(fp)
   4a958:	18801426 	beq	r3,r2,4a9ac <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4a95c:	e0bffc17 	ldw	r2,-16(fp)
   4a960:	10800037 	ldwio	r2,0(r2)
   4a964:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4a968:	e0bff917 	ldw	r2,-28(fp)
   4a96c:	10a0000c 	andi	r2,r2,32768
   4a970:	10001026 	beq	r2,zero,4a9b4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4a974:	e0bffb17 	ldw	r2,-20(fp)
   4a978:	10800a17 	ldw	r2,40(r2)
   4a97c:	e0fff917 	ldw	r3,-28(fp)
   4a980:	e13ffb17 	ldw	r4,-20(fp)
   4a984:	2085883a 	add	r2,r4,r2
   4a988:	10800e04 	addi	r2,r2,56
   4a98c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4a990:	e0bffb17 	ldw	r2,-20(fp)
   4a994:	10800a17 	ldw	r2,40(r2)
   4a998:	10800044 	addi	r2,r2,1
   4a99c:	10c1ffcc 	andi	r3,r2,2047
   4a9a0:	e0bffb17 	ldw	r2,-20(fp)
   4a9a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4a9a8:	003fe306 	br	4a938 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4a9ac:	0001883a 	nop
   4a9b0:	00000106 	br	4a9b8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4a9b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4a9b8:	e0bff917 	ldw	r2,-28(fp)
   4a9bc:	10bfffec 	andhi	r2,r2,65535
   4a9c0:	10000e26 	beq	r2,zero,4a9fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4a9c4:	e0bffb17 	ldw	r2,-20(fp)
   4a9c8:	10c00817 	ldw	r3,32(r2)
   4a9cc:	00bfff84 	movi	r2,-2
   4a9d0:	1886703a 	and	r3,r3,r2
   4a9d4:	e0bffb17 	ldw	r2,-20(fp)
   4a9d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4a9dc:	e0bffc17 	ldw	r2,-16(fp)
   4a9e0:	10800104 	addi	r2,r2,4
   4a9e4:	e0fffb17 	ldw	r3,-20(fp)
   4a9e8:	18c00817 	ldw	r3,32(r3)
   4a9ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4a9f0:	e0bffc17 	ldw	r2,-16(fp)
   4a9f4:	10800104 	addi	r2,r2,4
   4a9f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4a9fc:	e0bffd17 	ldw	r2,-12(fp)
   4aa00:	1080800c 	andi	r2,r2,512
   4aa04:	103fbf26 	beq	r2,zero,4a904 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4aa08:	e0bffd17 	ldw	r2,-12(fp)
   4aa0c:	1004d43a 	srli	r2,r2,16
   4aa10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4aa14:	00001406 	br	4aa68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4aa18:	e0bffc17 	ldw	r2,-16(fp)
   4aa1c:	e0fffb17 	ldw	r3,-20(fp)
   4aa20:	18c00d17 	ldw	r3,52(r3)
   4aa24:	e13ffb17 	ldw	r4,-20(fp)
   4aa28:	20c7883a 	add	r3,r4,r3
   4aa2c:	18c20e04 	addi	r3,r3,2104
   4aa30:	18c00003 	ldbu	r3,0(r3)
   4aa34:	18c03fcc 	andi	r3,r3,255
   4aa38:	18c0201c 	xori	r3,r3,128
   4aa3c:	18ffe004 	addi	r3,r3,-128
   4aa40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aa44:	e0bffb17 	ldw	r2,-20(fp)
   4aa48:	10800d17 	ldw	r2,52(r2)
   4aa4c:	10800044 	addi	r2,r2,1
   4aa50:	10c1ffcc 	andi	r3,r2,2047
   4aa54:	e0bffb17 	ldw	r2,-20(fp)
   4aa58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4aa5c:	e0bffa17 	ldw	r2,-24(fp)
   4aa60:	10bfffc4 	addi	r2,r2,-1
   4aa64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4aa68:	e0bffa17 	ldw	r2,-24(fp)
   4aa6c:	10000526 	beq	r2,zero,4aa84 <altera_avalon_jtag_uart_irq+0x1a8>
   4aa70:	e0bffb17 	ldw	r2,-20(fp)
   4aa74:	10c00d17 	ldw	r3,52(r2)
   4aa78:	e0bffb17 	ldw	r2,-20(fp)
   4aa7c:	10800c17 	ldw	r2,48(r2)
   4aa80:	18bfe51e 	bne	r3,r2,4aa18 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4aa84:	e0bffa17 	ldw	r2,-24(fp)
   4aa88:	103f9e26 	beq	r2,zero,4a904 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4aa8c:	e0bffb17 	ldw	r2,-20(fp)
   4aa90:	10c00817 	ldw	r3,32(r2)
   4aa94:	00bfff44 	movi	r2,-3
   4aa98:	1886703a 	and	r3,r3,r2
   4aa9c:	e0bffb17 	ldw	r2,-20(fp)
   4aaa0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4aaa4:	e0bffb17 	ldw	r2,-20(fp)
   4aaa8:	10800017 	ldw	r2,0(r2)
   4aaac:	10800104 	addi	r2,r2,4
   4aab0:	e0fffb17 	ldw	r3,-20(fp)
   4aab4:	18c00817 	ldw	r3,32(r3)
   4aab8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aabc:	e0bffc17 	ldw	r2,-16(fp)
   4aac0:	10800104 	addi	r2,r2,4
   4aac4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4aac8:	003f8e06 	br	4a904 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4aacc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4aad0:	e037883a 	mov	sp,fp
   4aad4:	df000017 	ldw	fp,0(sp)
   4aad8:	dec00104 	addi	sp,sp,4
   4aadc:	f800283a 	ret

0004aae0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4aae0:	defffc04 	addi	sp,sp,-16
   4aae4:	df000315 	stw	fp,12(sp)
   4aae8:	df000304 	addi	fp,sp,12
   4aaec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4aaf0:	e0bfff17 	ldw	r2,-4(fp)
   4aaf4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4aaf8:	e0bffd17 	ldw	r2,-12(fp)
   4aafc:	10800017 	ldw	r2,0(r2)
   4ab00:	10800104 	addi	r2,r2,4
   4ab04:	10800037 	ldwio	r2,0(r2)
   4ab08:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4ab0c:	e0bffe17 	ldw	r2,-8(fp)
   4ab10:	1081000c 	andi	r2,r2,1024
   4ab14:	10000a26 	beq	r2,zero,4ab40 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4ab18:	e0bffd17 	ldw	r2,-12(fp)
   4ab1c:	10800017 	ldw	r2,0(r2)
   4ab20:	10800104 	addi	r2,r2,4
   4ab24:	e0fffd17 	ldw	r3,-12(fp)
   4ab28:	18c00817 	ldw	r3,32(r3)
   4ab2c:	18c10014 	ori	r3,r3,1024
   4ab30:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4ab34:	e0bffd17 	ldw	r2,-12(fp)
   4ab38:	10000915 	stw	zero,36(r2)
   4ab3c:	00000a06 	br	4ab68 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ab40:	e0bffd17 	ldw	r2,-12(fp)
   4ab44:	10800917 	ldw	r2,36(r2)
   4ab48:	00e00034 	movhi	r3,32768
   4ab4c:	18ffff04 	addi	r3,r3,-4
   4ab50:	18800536 	bltu	r3,r2,4ab68 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4ab54:	e0bffd17 	ldw	r2,-12(fp)
   4ab58:	10800917 	ldw	r2,36(r2)
   4ab5c:	10c00044 	addi	r3,r2,1
   4ab60:	e0bffd17 	ldw	r2,-12(fp)
   4ab64:	10c00915 	stw	r3,36(r2)
   4ab68:	00800074 	movhi	r2,1
   4ab6c:	1087a704 	addi	r2,r2,7836
   4ab70:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4ab74:	e037883a 	mov	sp,fp
   4ab78:	df000017 	ldw	fp,0(sp)
   4ab7c:	dec00104 	addi	sp,sp,4
   4ab80:	f800283a 	ret

0004ab84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ab84:	defffd04 	addi	sp,sp,-12
   4ab88:	df000215 	stw	fp,8(sp)
   4ab8c:	df000204 	addi	fp,sp,8
   4ab90:	e13ffe15 	stw	r4,-8(fp)
   4ab94:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ab98:	00000506 	br	4abb0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4ab9c:	e0bfff17 	ldw	r2,-4(fp)
   4aba0:	1090000c 	andi	r2,r2,16384
   4aba4:	10000226 	beq	r2,zero,4abb0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4aba8:	00bffd44 	movi	r2,-11
   4abac:	00000b06 	br	4abdc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4abb0:	e0bffe17 	ldw	r2,-8(fp)
   4abb4:	10c00d17 	ldw	r3,52(r2)
   4abb8:	e0bffe17 	ldw	r2,-8(fp)
   4abbc:	10800c17 	ldw	r2,48(r2)
   4abc0:	18800526 	beq	r3,r2,4abd8 <altera_avalon_jtag_uart_close+0x54>
   4abc4:	e0bffe17 	ldw	r2,-8(fp)
   4abc8:	10c00917 	ldw	r3,36(r2)
   4abcc:	e0bffe17 	ldw	r2,-8(fp)
   4abd0:	10800117 	ldw	r2,4(r2)
   4abd4:	18bff136 	bltu	r3,r2,4ab9c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4abd8:	0005883a 	mov	r2,zero
}
   4abdc:	e037883a 	mov	sp,fp
   4abe0:	df000017 	ldw	fp,0(sp)
   4abe4:	dec00104 	addi	sp,sp,4
   4abe8:	f800283a 	ret

0004abec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4abec:	defffa04 	addi	sp,sp,-24
   4abf0:	df000515 	stw	fp,20(sp)
   4abf4:	df000504 	addi	fp,sp,20
   4abf8:	e13ffd15 	stw	r4,-12(fp)
   4abfc:	e17ffe15 	stw	r5,-8(fp)
   4ac00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4ac04:	00bff9c4 	movi	r2,-25
   4ac08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4ac0c:	e0bffe17 	ldw	r2,-8(fp)
   4ac10:	10da8060 	cmpeqi	r3,r2,27137
   4ac14:	1800031e 	bne	r3,zero,4ac24 <altera_avalon_jtag_uart_ioctl+0x38>
   4ac18:	109a80a0 	cmpeqi	r2,r2,27138
   4ac1c:	1000181e 	bne	r2,zero,4ac80 <altera_avalon_jtag_uart_ioctl+0x94>
   4ac20:	00002606 	br	4acbc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4ac24:	e0bffd17 	ldw	r2,-12(fp)
   4ac28:	10c00117 	ldw	r3,4(r2)
   4ac2c:	00a00034 	movhi	r2,32768
   4ac30:	10bfffc4 	addi	r2,r2,-1
   4ac34:	18802226 	beq	r3,r2,4acc0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4ac38:	e0bfff17 	ldw	r2,-4(fp)
   4ac3c:	10800017 	ldw	r2,0(r2)
   4ac40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4ac44:	e0bffc17 	ldw	r2,-16(fp)
   4ac48:	10800090 	cmplti	r2,r2,2
   4ac4c:	1000061e 	bne	r2,zero,4ac68 <altera_avalon_jtag_uart_ioctl+0x7c>
   4ac50:	e0fffc17 	ldw	r3,-16(fp)
   4ac54:	00a00034 	movhi	r2,32768
   4ac58:	10bfffc4 	addi	r2,r2,-1
   4ac5c:	18800226 	beq	r3,r2,4ac68 <altera_avalon_jtag_uart_ioctl+0x7c>
   4ac60:	e0bffc17 	ldw	r2,-16(fp)
   4ac64:	00000206 	br	4ac70 <altera_avalon_jtag_uart_ioctl+0x84>
   4ac68:	00a00034 	movhi	r2,32768
   4ac6c:	10bfff84 	addi	r2,r2,-2
   4ac70:	e0fffd17 	ldw	r3,-12(fp)
   4ac74:	18800115 	stw	r2,4(r3)
      rc = 0;
   4ac78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4ac7c:	00001006 	br	4acc0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4ac80:	e0bffd17 	ldw	r2,-12(fp)
   4ac84:	10c00117 	ldw	r3,4(r2)
   4ac88:	00a00034 	movhi	r2,32768
   4ac8c:	10bfffc4 	addi	r2,r2,-1
   4ac90:	18800d26 	beq	r3,r2,4acc8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4ac94:	e0bffd17 	ldw	r2,-12(fp)
   4ac98:	10c00917 	ldw	r3,36(r2)
   4ac9c:	e0bffd17 	ldw	r2,-12(fp)
   4aca0:	10800117 	ldw	r2,4(r2)
   4aca4:	1885803a 	cmpltu	r2,r3,r2
   4aca8:	10c03fcc 	andi	r3,r2,255
   4acac:	e0bfff17 	ldw	r2,-4(fp)
   4acb0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4acb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4acb8:	00000306 	br	4acc8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4acbc:	00000306 	br	4accc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4acc0:	0001883a 	nop
   4acc4:	00000106 	br	4accc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4acc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4accc:	e0bffb17 	ldw	r2,-20(fp)
}
   4acd0:	e037883a 	mov	sp,fp
   4acd4:	df000017 	ldw	fp,0(sp)
   4acd8:	dec00104 	addi	sp,sp,4
   4acdc:	f800283a 	ret

0004ace0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4ace0:	defff304 	addi	sp,sp,-52
   4ace4:	dfc00c15 	stw	ra,48(sp)
   4ace8:	df000b15 	stw	fp,44(sp)
   4acec:	df000b04 	addi	fp,sp,44
   4acf0:	e13ffc15 	stw	r4,-16(fp)
   4acf4:	e17ffd15 	stw	r5,-12(fp)
   4acf8:	e1bffe15 	stw	r6,-8(fp)
   4acfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4ad00:	e0bffd17 	ldw	r2,-12(fp)
   4ad04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4ad08:	00004706 	br	4ae28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4ad0c:	e0bffc17 	ldw	r2,-16(fp)
   4ad10:	10800a17 	ldw	r2,40(r2)
   4ad14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4ad18:	e0bffc17 	ldw	r2,-16(fp)
   4ad1c:	10800b17 	ldw	r2,44(r2)
   4ad20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4ad24:	e0fff717 	ldw	r3,-36(fp)
   4ad28:	e0bff817 	ldw	r2,-32(fp)
   4ad2c:	18800536 	bltu	r3,r2,4ad44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4ad30:	e0fff717 	ldw	r3,-36(fp)
   4ad34:	e0bff817 	ldw	r2,-32(fp)
   4ad38:	1885c83a 	sub	r2,r3,r2
   4ad3c:	e0bff615 	stw	r2,-40(fp)
   4ad40:	00000406 	br	4ad54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4ad44:	00c20004 	movi	r3,2048
   4ad48:	e0bff817 	ldw	r2,-32(fp)
   4ad4c:	1885c83a 	sub	r2,r3,r2
   4ad50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4ad54:	e0bff617 	ldw	r2,-40(fp)
   4ad58:	10001e26 	beq	r2,zero,4add4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4ad5c:	e0fffe17 	ldw	r3,-8(fp)
   4ad60:	e0bff617 	ldw	r2,-40(fp)
   4ad64:	1880022e 	bgeu	r3,r2,4ad70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4ad68:	e0bffe17 	ldw	r2,-8(fp)
   4ad6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4ad70:	e0bff817 	ldw	r2,-32(fp)
   4ad74:	10800e04 	addi	r2,r2,56
   4ad78:	e0fffc17 	ldw	r3,-16(fp)
   4ad7c:	1885883a 	add	r2,r3,r2
   4ad80:	e13ff517 	ldw	r4,-44(fp)
   4ad84:	100b883a 	mov	r5,r2
   4ad88:	e1bff617 	ldw	r6,-40(fp)
   4ad8c:	00459b80 	call	459b8 <memcpy>
      ptr   += n;
   4ad90:	e0fff517 	ldw	r3,-44(fp)
   4ad94:	e0bff617 	ldw	r2,-40(fp)
   4ad98:	1885883a 	add	r2,r3,r2
   4ad9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4ada0:	e0fffe17 	ldw	r3,-8(fp)
   4ada4:	e0bff617 	ldw	r2,-40(fp)
   4ada8:	1885c83a 	sub	r2,r3,r2
   4adac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4adb0:	e0fff817 	ldw	r3,-32(fp)
   4adb4:	e0bff617 	ldw	r2,-40(fp)
   4adb8:	1885883a 	add	r2,r3,r2
   4adbc:	10c1ffcc 	andi	r3,r2,2047
   4adc0:	e0bffc17 	ldw	r2,-16(fp)
   4adc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4adc8:	e0bffe17 	ldw	r2,-8(fp)
   4adcc:	00bfcf16 	blt	zero,r2,4ad0c <altera_avalon_jtag_uart_read+0x2c>
   4add0:	00000106 	br	4add8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4add4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4add8:	e0fff517 	ldw	r3,-44(fp)
   4addc:	e0bffd17 	ldw	r2,-12(fp)
   4ade0:	1880141e 	bne	r3,r2,4ae34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4ade4:	e0bfff17 	ldw	r2,-4(fp)
   4ade8:	1090000c 	andi	r2,r2,16384
   4adec:	1000131e 	bne	r2,zero,4ae3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4adf0:	0001883a 	nop
   4adf4:	e0bffc17 	ldw	r2,-16(fp)
   4adf8:	10c00a17 	ldw	r3,40(r2)
   4adfc:	e0bff717 	ldw	r2,-36(fp)
   4ae00:	1880051e 	bne	r3,r2,4ae18 <altera_avalon_jtag_uart_read+0x138>
   4ae04:	e0bffc17 	ldw	r2,-16(fp)
   4ae08:	10c00917 	ldw	r3,36(r2)
   4ae0c:	e0bffc17 	ldw	r2,-16(fp)
   4ae10:	10800117 	ldw	r2,4(r2)
   4ae14:	18bff736 	bltu	r3,r2,4adf4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4ae18:	e0bffc17 	ldw	r2,-16(fp)
   4ae1c:	10c00a17 	ldw	r3,40(r2)
   4ae20:	e0bff717 	ldw	r2,-36(fp)
   4ae24:	18800726 	beq	r3,r2,4ae44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4ae28:	e0bffe17 	ldw	r2,-8(fp)
   4ae2c:	00bfb716 	blt	zero,r2,4ad0c <altera_avalon_jtag_uart_read+0x2c>
   4ae30:	00000506 	br	4ae48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4ae34:	0001883a 	nop
   4ae38:	00000306 	br	4ae48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4ae3c:	0001883a 	nop
   4ae40:	00000106 	br	4ae48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4ae44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4ae48:	e0fff517 	ldw	r3,-44(fp)
   4ae4c:	e0bffd17 	ldw	r2,-12(fp)
   4ae50:	18801726 	beq	r3,r2,4aeb0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ae54:	0005303a 	rdctl	r2,status
   4ae58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ae5c:	e0fffa17 	ldw	r3,-24(fp)
   4ae60:	00bfff84 	movi	r2,-2
   4ae64:	1884703a 	and	r2,r3,r2
   4ae68:	1001703a 	wrctl	status,r2
  
  return context;
   4ae6c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4ae70:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ae74:	e0bffc17 	ldw	r2,-16(fp)
   4ae78:	10800817 	ldw	r2,32(r2)
   4ae7c:	10c00054 	ori	r3,r2,1
   4ae80:	e0bffc17 	ldw	r2,-16(fp)
   4ae84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ae88:	e0bffc17 	ldw	r2,-16(fp)
   4ae8c:	10800017 	ldw	r2,0(r2)
   4ae90:	10800104 	addi	r2,r2,4
   4ae94:	e0fffc17 	ldw	r3,-16(fp)
   4ae98:	18c00817 	ldw	r3,32(r3)
   4ae9c:	10c00035 	stwio	r3,0(r2)
   4aea0:	e0bff917 	ldw	r2,-28(fp)
   4aea4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4aea8:	e0bffb17 	ldw	r2,-20(fp)
   4aeac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4aeb0:	e0fff517 	ldw	r3,-44(fp)
   4aeb4:	e0bffd17 	ldw	r2,-12(fp)
   4aeb8:	18800426 	beq	r3,r2,4aecc <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4aebc:	e0fff517 	ldw	r3,-44(fp)
   4aec0:	e0bffd17 	ldw	r2,-12(fp)
   4aec4:	1885c83a 	sub	r2,r3,r2
   4aec8:	00000606 	br	4aee4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4aecc:	e0bfff17 	ldw	r2,-4(fp)
   4aed0:	1090000c 	andi	r2,r2,16384
   4aed4:	10000226 	beq	r2,zero,4aee0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4aed8:	00bffd44 	movi	r2,-11
   4aedc:	00000106 	br	4aee4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4aee0:	00bffec4 	movi	r2,-5
}
   4aee4:	e037883a 	mov	sp,fp
   4aee8:	dfc00117 	ldw	ra,4(sp)
   4aeec:	df000017 	ldw	fp,0(sp)
   4aef0:	dec00204 	addi	sp,sp,8
   4aef4:	f800283a 	ret

0004aef8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4aef8:	defff304 	addi	sp,sp,-52
   4aefc:	dfc00c15 	stw	ra,48(sp)
   4af00:	df000b15 	stw	fp,44(sp)
   4af04:	df000b04 	addi	fp,sp,44
   4af08:	e13ffc15 	stw	r4,-16(fp)
   4af0c:	e17ffd15 	stw	r5,-12(fp)
   4af10:	e1bffe15 	stw	r6,-8(fp)
   4af14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4af18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4af1c:	e0bffd17 	ldw	r2,-12(fp)
   4af20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4af24:	00003706 	br	4b004 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4af28:	e0bffc17 	ldw	r2,-16(fp)
   4af2c:	10800c17 	ldw	r2,48(r2)
   4af30:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4af34:	e0bffc17 	ldw	r2,-16(fp)
   4af38:	10800d17 	ldw	r2,52(r2)
   4af3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4af40:	e0fff817 	ldw	r3,-32(fp)
   4af44:	e0bff517 	ldw	r2,-44(fp)
   4af48:	1880062e 	bgeu	r3,r2,4af64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4af4c:	e0fff517 	ldw	r3,-44(fp)
   4af50:	e0bff817 	ldw	r2,-32(fp)
   4af54:	1885c83a 	sub	r2,r3,r2
   4af58:	10bfffc4 	addi	r2,r2,-1
   4af5c:	e0bff615 	stw	r2,-40(fp)
   4af60:	00000b06 	br	4af90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4af64:	e0bff517 	ldw	r2,-44(fp)
   4af68:	10000526 	beq	r2,zero,4af80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4af6c:	00c20004 	movi	r3,2048
   4af70:	e0bff817 	ldw	r2,-32(fp)
   4af74:	1885c83a 	sub	r2,r3,r2
   4af78:	e0bff615 	stw	r2,-40(fp)
   4af7c:	00000406 	br	4af90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4af80:	00c1ffc4 	movi	r3,2047
   4af84:	e0bff817 	ldw	r2,-32(fp)
   4af88:	1885c83a 	sub	r2,r3,r2
   4af8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4af90:	e0bff617 	ldw	r2,-40(fp)
   4af94:	10001e26 	beq	r2,zero,4b010 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4af98:	e0fffe17 	ldw	r3,-8(fp)
   4af9c:	e0bff617 	ldw	r2,-40(fp)
   4afa0:	1880022e 	bgeu	r3,r2,4afac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4afa4:	e0bffe17 	ldw	r2,-8(fp)
   4afa8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4afac:	e0bff817 	ldw	r2,-32(fp)
   4afb0:	10820e04 	addi	r2,r2,2104
   4afb4:	e0fffc17 	ldw	r3,-16(fp)
   4afb8:	1885883a 	add	r2,r3,r2
   4afbc:	1009883a 	mov	r4,r2
   4afc0:	e17ffd17 	ldw	r5,-12(fp)
   4afc4:	e1bff617 	ldw	r6,-40(fp)
   4afc8:	00459b80 	call	459b8 <memcpy>
      ptr   += n;
   4afcc:	e0fffd17 	ldw	r3,-12(fp)
   4afd0:	e0bff617 	ldw	r2,-40(fp)
   4afd4:	1885883a 	add	r2,r3,r2
   4afd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4afdc:	e0fffe17 	ldw	r3,-8(fp)
   4afe0:	e0bff617 	ldw	r2,-40(fp)
   4afe4:	1885c83a 	sub	r2,r3,r2
   4afe8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4afec:	e0fff817 	ldw	r3,-32(fp)
   4aff0:	e0bff617 	ldw	r2,-40(fp)
   4aff4:	1885883a 	add	r2,r3,r2
   4aff8:	10c1ffcc 	andi	r3,r2,2047
   4affc:	e0bffc17 	ldw	r2,-16(fp)
   4b000:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b004:	e0bffe17 	ldw	r2,-8(fp)
   4b008:	00bfc716 	blt	zero,r2,4af28 <altera_avalon_jtag_uart_write+0x30>
   4b00c:	00000106 	br	4b014 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4b010:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b014:	0005303a 	rdctl	r2,status
   4b018:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b01c:	e0fffa17 	ldw	r3,-24(fp)
   4b020:	00bfff84 	movi	r2,-2
   4b024:	1884703a 	and	r2,r3,r2
   4b028:	1001703a 	wrctl	status,r2
  
  return context;
   4b02c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b030:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b034:	e0bffc17 	ldw	r2,-16(fp)
   4b038:	10800817 	ldw	r2,32(r2)
   4b03c:	10c00094 	ori	r3,r2,2
   4b040:	e0bffc17 	ldw	r2,-16(fp)
   4b044:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b048:	e0bffc17 	ldw	r2,-16(fp)
   4b04c:	10800017 	ldw	r2,0(r2)
   4b050:	10800104 	addi	r2,r2,4
   4b054:	e0fffc17 	ldw	r3,-16(fp)
   4b058:	18c00817 	ldw	r3,32(r3)
   4b05c:	10c00035 	stwio	r3,0(r2)
   4b060:	e0bff917 	ldw	r2,-28(fp)
   4b064:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b068:	e0bffb17 	ldw	r2,-20(fp)
   4b06c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b070:	e0bffe17 	ldw	r2,-8(fp)
   4b074:	0080110e 	bge	zero,r2,4b0bc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4b078:	e0bfff17 	ldw	r2,-4(fp)
   4b07c:	1090000c 	andi	r2,r2,16384
   4b080:	1000111e 	bne	r2,zero,4b0c8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b084:	0001883a 	nop
   4b088:	e0bffc17 	ldw	r2,-16(fp)
   4b08c:	10c00d17 	ldw	r3,52(r2)
   4b090:	e0bff517 	ldw	r2,-44(fp)
   4b094:	1880051e 	bne	r3,r2,4b0ac <altera_avalon_jtag_uart_write+0x1b4>
   4b098:	e0bffc17 	ldw	r2,-16(fp)
   4b09c:	10c00917 	ldw	r3,36(r2)
   4b0a0:	e0bffc17 	ldw	r2,-16(fp)
   4b0a4:	10800117 	ldw	r2,4(r2)
   4b0a8:	18bff736 	bltu	r3,r2,4b088 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b0ac:	e0bffc17 	ldw	r2,-16(fp)
   4b0b0:	10c00d17 	ldw	r3,52(r2)
   4b0b4:	e0bff517 	ldw	r2,-44(fp)
   4b0b8:	18800526 	beq	r3,r2,4b0d0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4b0bc:	e0bffe17 	ldw	r2,-8(fp)
   4b0c0:	00bfd016 	blt	zero,r2,4b004 <altera_avalon_jtag_uart_write+0x10c>
   4b0c4:	00000306 	br	4b0d4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4b0c8:	0001883a 	nop
   4b0cc:	00000106 	br	4b0d4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4b0d0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b0d4:	e0fffd17 	ldw	r3,-12(fp)
   4b0d8:	e0bff717 	ldw	r2,-36(fp)
   4b0dc:	18800426 	beq	r3,r2,4b0f0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4b0e0:	e0fffd17 	ldw	r3,-12(fp)
   4b0e4:	e0bff717 	ldw	r2,-36(fp)
   4b0e8:	1885c83a 	sub	r2,r3,r2
   4b0ec:	00000606 	br	4b108 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4b0f0:	e0bfff17 	ldw	r2,-4(fp)
   4b0f4:	1090000c 	andi	r2,r2,16384
   4b0f8:	10000226 	beq	r2,zero,4b104 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4b0fc:	00bffd44 	movi	r2,-11
   4b100:	00000106 	br	4b108 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4b104:	00bffec4 	movi	r2,-5
}
   4b108:	e037883a 	mov	sp,fp
   4b10c:	dfc00117 	ldw	ra,4(sp)
   4b110:	df000017 	ldw	fp,0(sp)
   4b114:	dec00204 	addi	sp,sp,8
   4b118:	f800283a 	ret

0004b11c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b11c:	defffa04 	addi	sp,sp,-24
   4b120:	dfc00515 	stw	ra,20(sp)
   4b124:	df000415 	stw	fp,16(sp)
   4b128:	df000404 	addi	fp,sp,16
   4b12c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b130:	0007883a 	mov	r3,zero
   4b134:	e0bfff17 	ldw	r2,-4(fp)
   4b138:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b13c:	e0bfff17 	ldw	r2,-4(fp)
   4b140:	10800104 	addi	r2,r2,4
   4b144:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b148:	0005303a 	rdctl	r2,status
   4b14c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b150:	e0fffd17 	ldw	r3,-12(fp)
   4b154:	00bfff84 	movi	r2,-2
   4b158:	1884703a 	and	r2,r3,r2
   4b15c:	1001703a 	wrctl	status,r2
  
  return context;
   4b160:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b164:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4b168:	004bc880 	call	4bc88 <alt_tick>
   4b16c:	e0bffc17 	ldw	r2,-16(fp)
   4b170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b174:	e0bffe17 	ldw	r2,-8(fp)
   4b178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b17c:	e037883a 	mov	sp,fp
   4b180:	dfc00117 	ldw	ra,4(sp)
   4b184:	df000017 	ldw	fp,0(sp)
   4b188:	dec00204 	addi	sp,sp,8
   4b18c:	f800283a 	ret

0004b190 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b190:	defff804 	addi	sp,sp,-32
   4b194:	dfc00715 	stw	ra,28(sp)
   4b198:	df000615 	stw	fp,24(sp)
   4b19c:	df000604 	addi	fp,sp,24
   4b1a0:	e13ffc15 	stw	r4,-16(fp)
   4b1a4:	e17ffd15 	stw	r5,-12(fp)
   4b1a8:	e1bffe15 	stw	r6,-8(fp)
   4b1ac:	e1ffff15 	stw	r7,-4(fp)
   4b1b0:	e0bfff17 	ldw	r2,-4(fp)
   4b1b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b1b8:	00800074 	movhi	r2,1
   4b1bc:	1087a704 	addi	r2,r2,7836
   4b1c0:	10800017 	ldw	r2,0(r2)
   4b1c4:	1000041e 	bne	r2,zero,4b1d8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4b1c8:	00800074 	movhi	r2,1
   4b1cc:	1087a704 	addi	r2,r2,7836
   4b1d0:	e0fffb17 	ldw	r3,-20(fp)
   4b1d4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b1d8:	e0bffc17 	ldw	r2,-16(fp)
   4b1dc:	10800104 	addi	r2,r2,4
   4b1e0:	00c001c4 	movi	r3,7
   4b1e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b1e8:	d8000015 	stw	zero,0(sp)
   4b1ec:	e13ffd17 	ldw	r4,-12(fp)
   4b1f0:	e17ffe17 	ldw	r5,-8(fp)
   4b1f4:	01800174 	movhi	r6,5
   4b1f8:	31ac4704 	addi	r6,r6,-20196
   4b1fc:	e1fffc17 	ldw	r7,-16(fp)
   4b200:	004b5380 	call	4b538 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b204:	e037883a 	mov	sp,fp
   4b208:	dfc00117 	ldw	ra,4(sp)
   4b20c:	df000017 	ldw	fp,0(sp)
   4b210:	dec00204 	addi	sp,sp,8
   4b214:	f800283a 	ret

0004b218 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b218:	defff504 	addi	sp,sp,-44
   4b21c:	df000a15 	stw	fp,40(sp)
   4b220:	df000a04 	addi	fp,sp,40
   4b224:	e13ffc15 	stw	r4,-16(fp)
   4b228:	e17ffd15 	stw	r5,-12(fp)
   4b22c:	e1bffe15 	stw	r6,-8(fp)
   4b230:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b234:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b238:	00800074 	movhi	r2,1
   4b23c:	1087a704 	addi	r2,r2,7836
   4b240:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b244:	10003f26 	beq	r2,zero,4b344 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4b248:	e0bffc17 	ldw	r2,-16(fp)
   4b24c:	10003b26 	beq	r2,zero,4b33c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4b250:	e0bffc17 	ldw	r2,-16(fp)
   4b254:	e0fffe17 	ldw	r3,-8(fp)
   4b258:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4b25c:	e0bffc17 	ldw	r2,-16(fp)
   4b260:	e0ffff17 	ldw	r3,-4(fp)
   4b264:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b268:	0005303a 	rdctl	r2,status
   4b26c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b270:	e0fff817 	ldw	r3,-32(fp)
   4b274:	00bfff84 	movi	r2,-2
   4b278:	1884703a 	and	r2,r3,r2
   4b27c:	1001703a 	wrctl	status,r2
  
  return context;
   4b280:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b284:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b288:	00800074 	movhi	r2,1
   4b28c:	1087a804 	addi	r2,r2,7840
   4b290:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b294:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b298:	e0fffd17 	ldw	r3,-12(fp)
   4b29c:	e0bff617 	ldw	r2,-40(fp)
   4b2a0:	1885883a 	add	r2,r3,r2
   4b2a4:	10c00044 	addi	r3,r2,1
   4b2a8:	e0bffc17 	ldw	r2,-16(fp)
   4b2ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b2b0:	e0bffc17 	ldw	r2,-16(fp)
   4b2b4:	10c00217 	ldw	r3,8(r2)
   4b2b8:	e0bff617 	ldw	r2,-40(fp)
   4b2bc:	1880042e 	bgeu	r3,r2,4b2d0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4b2c0:	e0bffc17 	ldw	r2,-16(fp)
   4b2c4:	00c00044 	movi	r3,1
   4b2c8:	10c00405 	stb	r3,16(r2)
   4b2cc:	00000206 	br	4b2d8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4b2d0:	e0bffc17 	ldw	r2,-16(fp)
   4b2d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4b2d8:	e0bffc17 	ldw	r2,-16(fp)
   4b2dc:	00c00074 	movhi	r3,1
   4b2e0:	18c79504 	addi	r3,r3,7764
   4b2e4:	e0fff915 	stw	r3,-28(fp)
   4b2e8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b2ec:	e0bffa17 	ldw	r2,-24(fp)
   4b2f0:	e0fff917 	ldw	r3,-28(fp)
   4b2f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4b2f8:	e0bff917 	ldw	r2,-28(fp)
   4b2fc:	10c00017 	ldw	r3,0(r2)
   4b300:	e0bffa17 	ldw	r2,-24(fp)
   4b304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b308:	e0bff917 	ldw	r2,-28(fp)
   4b30c:	10800017 	ldw	r2,0(r2)
   4b310:	e0fffa17 	ldw	r3,-24(fp)
   4b314:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4b318:	e0bff917 	ldw	r2,-28(fp)
   4b31c:	e0fffa17 	ldw	r3,-24(fp)
   4b320:	10c00015 	stw	r3,0(r2)
   4b324:	e0bff717 	ldw	r2,-36(fp)
   4b328:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b32c:	e0bffb17 	ldw	r2,-20(fp)
   4b330:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4b334:	0005883a 	mov	r2,zero
   4b338:	00000306 	br	4b348 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4b33c:	00bffa84 	movi	r2,-22
   4b340:	00000106 	br	4b348 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4b344:	00bfde84 	movi	r2,-134
  }
}
   4b348:	e037883a 	mov	sp,fp
   4b34c:	df000017 	ldw	fp,0(sp)
   4b350:	dec00104 	addi	sp,sp,4
   4b354:	f800283a 	ret

0004b358 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4b358:	deffff04 	addi	sp,sp,-4
   4b35c:	df000015 	stw	fp,0(sp)
   4b360:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4b364:	e037883a 	mov	sp,fp
   4b368:	df000017 	ldw	fp,0(sp)
   4b36c:	dec00104 	addi	sp,sp,4
   4b370:	f800283a 	ret

0004b374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b374:	defffe04 	addi	sp,sp,-8
   4b378:	dfc00115 	stw	ra,4(sp)
   4b37c:	df000015 	stw	fp,0(sp)
   4b380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b384:	00800074 	movhi	r2,1
   4b388:	10879204 	addi	r2,r2,7752
   4b38c:	10800017 	ldw	r2,0(r2)
   4b390:	10000526 	beq	r2,zero,4b3a8 <alt_get_errno+0x34>
   4b394:	00800074 	movhi	r2,1
   4b398:	10879204 	addi	r2,r2,7752
   4b39c:	10800017 	ldw	r2,0(r2)
   4b3a0:	103ee83a 	callr	r2
   4b3a4:	00000206 	br	4b3b0 <alt_get_errno+0x3c>
   4b3a8:	00800074 	movhi	r2,1
   4b3ac:	1087a204 	addi	r2,r2,7816
}
   4b3b0:	e037883a 	mov	sp,fp
   4b3b4:	dfc00117 	ldw	ra,4(sp)
   4b3b8:	df000017 	ldw	fp,0(sp)
   4b3bc:	dec00204 	addi	sp,sp,8
   4b3c0:	f800283a 	ret

0004b3c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4b3c4:	defffa04 	addi	sp,sp,-24
   4b3c8:	dfc00515 	stw	ra,20(sp)
   4b3cc:	df000415 	stw	fp,16(sp)
   4b3d0:	df000404 	addi	fp,sp,16
   4b3d4:	e13ffe15 	stw	r4,-8(fp)
   4b3d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4b3dc:	e0bffe17 	ldw	r2,-8(fp)
   4b3e0:	10000326 	beq	r2,zero,4b3f0 <alt_dev_llist_insert+0x2c>
   4b3e4:	e0bffe17 	ldw	r2,-8(fp)
   4b3e8:	10800217 	ldw	r2,8(r2)
   4b3ec:	1000051e 	bne	r2,zero,4b404 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4b3f0:	004b3740 	call	4b374 <alt_get_errno>
   4b3f4:	00c00584 	movi	r3,22
   4b3f8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4b3fc:	00bffa84 	movi	r2,-22
   4b400:	00001306 	br	4b450 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4b404:	e0bffe17 	ldw	r2,-8(fp)
   4b408:	e0ffff17 	ldw	r3,-4(fp)
   4b40c:	e0fffc15 	stw	r3,-16(fp)
   4b410:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b414:	e0bffd17 	ldw	r2,-12(fp)
   4b418:	e0fffc17 	ldw	r3,-16(fp)
   4b41c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4b420:	e0bffc17 	ldw	r2,-16(fp)
   4b424:	10c00017 	ldw	r3,0(r2)
   4b428:	e0bffd17 	ldw	r2,-12(fp)
   4b42c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b430:	e0bffc17 	ldw	r2,-16(fp)
   4b434:	10800017 	ldw	r2,0(r2)
   4b438:	e0fffd17 	ldw	r3,-12(fp)
   4b43c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4b440:	e0bffc17 	ldw	r2,-16(fp)
   4b444:	e0fffd17 	ldw	r3,-12(fp)
   4b448:	10c00015 	stw	r3,0(r2)

  return 0;  
   4b44c:	0005883a 	mov	r2,zero
}
   4b450:	e037883a 	mov	sp,fp
   4b454:	dfc00117 	ldw	ra,4(sp)
   4b458:	df000017 	ldw	fp,0(sp)
   4b45c:	dec00204 	addi	sp,sp,8
   4b460:	f800283a 	ret

0004b464 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4b464:	defffd04 	addi	sp,sp,-12
   4b468:	dfc00215 	stw	ra,8(sp)
   4b46c:	df000115 	stw	fp,4(sp)
   4b470:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b474:	00800174 	movhi	r2,5
   4b478:	10b0fd04 	addi	r2,r2,-15372
   4b47c:	e0bfff15 	stw	r2,-4(fp)
   4b480:	00000606 	br	4b49c <_do_ctors+0x38>
        (*ctor) (); 
   4b484:	e0bfff17 	ldw	r2,-4(fp)
   4b488:	10800017 	ldw	r2,0(r2)
   4b48c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b490:	e0bfff17 	ldw	r2,-4(fp)
   4b494:	10bfff04 	addi	r2,r2,-4
   4b498:	e0bfff15 	stw	r2,-4(fp)
   4b49c:	e0ffff17 	ldw	r3,-4(fp)
   4b4a0:	00800174 	movhi	r2,5
   4b4a4:	10b0fe04 	addi	r2,r2,-15368
   4b4a8:	18bff62e 	bgeu	r3,r2,4b484 <_do_ctors+0x20>
        (*ctor) (); 
}
   4b4ac:	e037883a 	mov	sp,fp
   4b4b0:	dfc00117 	ldw	ra,4(sp)
   4b4b4:	df000017 	ldw	fp,0(sp)
   4b4b8:	dec00204 	addi	sp,sp,8
   4b4bc:	f800283a 	ret

0004b4c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4b4c0:	defffd04 	addi	sp,sp,-12
   4b4c4:	dfc00215 	stw	ra,8(sp)
   4b4c8:	df000115 	stw	fp,4(sp)
   4b4cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b4d0:	00800174 	movhi	r2,5
   4b4d4:	10b0fd04 	addi	r2,r2,-15372
   4b4d8:	e0bfff15 	stw	r2,-4(fp)
   4b4dc:	00000606 	br	4b4f8 <_do_dtors+0x38>
        (*dtor) (); 
   4b4e0:	e0bfff17 	ldw	r2,-4(fp)
   4b4e4:	10800017 	ldw	r2,0(r2)
   4b4e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b4ec:	e0bfff17 	ldw	r2,-4(fp)
   4b4f0:	10bfff04 	addi	r2,r2,-4
   4b4f4:	e0bfff15 	stw	r2,-4(fp)
   4b4f8:	e0ffff17 	ldw	r3,-4(fp)
   4b4fc:	00800174 	movhi	r2,5
   4b500:	10b0fe04 	addi	r2,r2,-15368
   4b504:	18bff62e 	bgeu	r3,r2,4b4e0 <_do_dtors+0x20>
        (*dtor) (); 
}
   4b508:	e037883a 	mov	sp,fp
   4b50c:	dfc00117 	ldw	ra,4(sp)
   4b510:	df000017 	ldw	fp,0(sp)
   4b514:	dec00204 	addi	sp,sp,8
   4b518:	f800283a 	ret

0004b51c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4b51c:	deffff04 	addi	sp,sp,-4
   4b520:	df000015 	stw	fp,0(sp)
   4b524:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4b528:	e037883a 	mov	sp,fp
   4b52c:	df000017 	ldw	fp,0(sp)
   4b530:	dec00104 	addi	sp,sp,4
   4b534:	f800283a 	ret

0004b538 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b538:	defff904 	addi	sp,sp,-28
   4b53c:	dfc00615 	stw	ra,24(sp)
   4b540:	df000515 	stw	fp,20(sp)
   4b544:	df000504 	addi	fp,sp,20
   4b548:	e13ffc15 	stw	r4,-16(fp)
   4b54c:	e17ffd15 	stw	r5,-12(fp)
   4b550:	e1bffe15 	stw	r6,-8(fp)
   4b554:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4b558:	e0800217 	ldw	r2,8(fp)
   4b55c:	d8800015 	stw	r2,0(sp)
   4b560:	e13ffc17 	ldw	r4,-16(fp)
   4b564:	e17ffd17 	ldw	r5,-12(fp)
   4b568:	e1bffe17 	ldw	r6,-8(fp)
   4b56c:	e1ffff17 	ldw	r7,-4(fp)
   4b570:	004b7100 	call	4b710 <alt_iic_isr_register>
}  
   4b574:	e037883a 	mov	sp,fp
   4b578:	dfc00117 	ldw	ra,4(sp)
   4b57c:	df000017 	ldw	fp,0(sp)
   4b580:	dec00204 	addi	sp,sp,8
   4b584:	f800283a 	ret

0004b588 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4b588:	defff904 	addi	sp,sp,-28
   4b58c:	df000615 	stw	fp,24(sp)
   4b590:	df000604 	addi	fp,sp,24
   4b594:	e13ffe15 	stw	r4,-8(fp)
   4b598:	e17fff15 	stw	r5,-4(fp)
   4b59c:	e0bfff17 	ldw	r2,-4(fp)
   4b5a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b5a4:	0005303a 	rdctl	r2,status
   4b5a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b5ac:	e0fffb17 	ldw	r3,-20(fp)
   4b5b0:	00bfff84 	movi	r2,-2
   4b5b4:	1884703a 	and	r2,r3,r2
   4b5b8:	1001703a 	wrctl	status,r2
  
  return context;
   4b5bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b5c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4b5c4:	e0bffa17 	ldw	r2,-24(fp)
   4b5c8:	00c00044 	movi	r3,1
   4b5cc:	1884983a 	sll	r2,r3,r2
   4b5d0:	1007883a 	mov	r3,r2
   4b5d4:	00800074 	movhi	r2,1
   4b5d8:	1087a604 	addi	r2,r2,7832
   4b5dc:	10800017 	ldw	r2,0(r2)
   4b5e0:	1886b03a 	or	r3,r3,r2
   4b5e4:	00800074 	movhi	r2,1
   4b5e8:	1087a604 	addi	r2,r2,7832
   4b5ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b5f0:	00800074 	movhi	r2,1
   4b5f4:	1087a604 	addi	r2,r2,7832
   4b5f8:	10800017 	ldw	r2,0(r2)
   4b5fc:	100170fa 	wrctl	ienable,r2
   4b600:	e0bffc17 	ldw	r2,-16(fp)
   4b604:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b608:	e0bffd17 	ldw	r2,-12(fp)
   4b60c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b610:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4b614:	e037883a 	mov	sp,fp
   4b618:	df000017 	ldw	fp,0(sp)
   4b61c:	dec00104 	addi	sp,sp,4
   4b620:	f800283a 	ret

0004b624 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4b624:	defff904 	addi	sp,sp,-28
   4b628:	df000615 	stw	fp,24(sp)
   4b62c:	df000604 	addi	fp,sp,24
   4b630:	e13ffe15 	stw	r4,-8(fp)
   4b634:	e17fff15 	stw	r5,-4(fp)
   4b638:	e0bfff17 	ldw	r2,-4(fp)
   4b63c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b640:	0005303a 	rdctl	r2,status
   4b644:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b648:	e0fffb17 	ldw	r3,-20(fp)
   4b64c:	00bfff84 	movi	r2,-2
   4b650:	1884703a 	and	r2,r3,r2
   4b654:	1001703a 	wrctl	status,r2
  
  return context;
   4b658:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b65c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4b660:	e0bffa17 	ldw	r2,-24(fp)
   4b664:	00c00044 	movi	r3,1
   4b668:	1884983a 	sll	r2,r3,r2
   4b66c:	0084303a 	nor	r2,zero,r2
   4b670:	1007883a 	mov	r3,r2
   4b674:	00800074 	movhi	r2,1
   4b678:	1087a604 	addi	r2,r2,7832
   4b67c:	10800017 	ldw	r2,0(r2)
   4b680:	1886703a 	and	r3,r3,r2
   4b684:	00800074 	movhi	r2,1
   4b688:	1087a604 	addi	r2,r2,7832
   4b68c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b690:	00800074 	movhi	r2,1
   4b694:	1087a604 	addi	r2,r2,7832
   4b698:	10800017 	ldw	r2,0(r2)
   4b69c:	100170fa 	wrctl	ienable,r2
   4b6a0:	e0bffc17 	ldw	r2,-16(fp)
   4b6a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b6a8:	e0bffd17 	ldw	r2,-12(fp)
   4b6ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b6b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4b6b4:	e037883a 	mov	sp,fp
   4b6b8:	df000017 	ldw	fp,0(sp)
   4b6bc:	dec00104 	addi	sp,sp,4
   4b6c0:	f800283a 	ret

0004b6c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4b6c4:	defffc04 	addi	sp,sp,-16
   4b6c8:	df000315 	stw	fp,12(sp)
   4b6cc:	df000304 	addi	fp,sp,12
   4b6d0:	e13ffe15 	stw	r4,-8(fp)
   4b6d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4b6d8:	000530fa 	rdctl	r2,ienable
   4b6dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4b6e0:	e0bfff17 	ldw	r2,-4(fp)
   4b6e4:	00c00044 	movi	r3,1
   4b6e8:	1884983a 	sll	r2,r3,r2
   4b6ec:	1007883a 	mov	r3,r2
   4b6f0:	e0bffd17 	ldw	r2,-12(fp)
   4b6f4:	1884703a 	and	r2,r3,r2
   4b6f8:	1004c03a 	cmpne	r2,r2,zero
   4b6fc:	10803fcc 	andi	r2,r2,255
}
   4b700:	e037883a 	mov	sp,fp
   4b704:	df000017 	ldw	fp,0(sp)
   4b708:	dec00104 	addi	sp,sp,4
   4b70c:	f800283a 	ret

0004b710 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b710:	defff504 	addi	sp,sp,-44
   4b714:	dfc00a15 	stw	ra,40(sp)
   4b718:	df000915 	stw	fp,36(sp)
   4b71c:	df000904 	addi	fp,sp,36
   4b720:	e13ffc15 	stw	r4,-16(fp)
   4b724:	e17ffd15 	stw	r5,-12(fp)
   4b728:	e1bffe15 	stw	r6,-8(fp)
   4b72c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4b730:	00bffa84 	movi	r2,-22
   4b734:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4b738:	e0bffd17 	ldw	r2,-12(fp)
   4b73c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4b740:	e0bff817 	ldw	r2,-32(fp)
   4b744:	10800808 	cmpgei	r2,r2,32
   4b748:	1000271e 	bne	r2,zero,4b7e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b74c:	0005303a 	rdctl	r2,status
   4b750:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b754:	e0fffa17 	ldw	r3,-24(fp)
   4b758:	00bfff84 	movi	r2,-2
   4b75c:	1884703a 	and	r2,r3,r2
   4b760:	1001703a 	wrctl	status,r2
  
  return context;
   4b764:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4b768:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4b76c:	00c00074 	movhi	r3,1
   4b770:	18c7b304 	addi	r3,r3,7884
   4b774:	e0bff817 	ldw	r2,-32(fp)
   4b778:	100490fa 	slli	r2,r2,3
   4b77c:	1885883a 	add	r2,r3,r2
   4b780:	e0fffe17 	ldw	r3,-8(fp)
   4b784:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4b788:	00c00074 	movhi	r3,1
   4b78c:	18c7b304 	addi	r3,r3,7884
   4b790:	e0bff817 	ldw	r2,-32(fp)
   4b794:	100490fa 	slli	r2,r2,3
   4b798:	1885883a 	add	r2,r3,r2
   4b79c:	10800104 	addi	r2,r2,4
   4b7a0:	e0ffff17 	ldw	r3,-4(fp)
   4b7a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4b7a8:	e0bffe17 	ldw	r2,-8(fp)
   4b7ac:	10000526 	beq	r2,zero,4b7c4 <alt_iic_isr_register+0xb4>
   4b7b0:	e0bff817 	ldw	r2,-32(fp)
   4b7b4:	e13ffc17 	ldw	r4,-16(fp)
   4b7b8:	100b883a 	mov	r5,r2
   4b7bc:	004b5880 	call	4b588 <alt_ic_irq_enable>
   4b7c0:	00000406 	br	4b7d4 <alt_iic_isr_register+0xc4>
   4b7c4:	e0bff817 	ldw	r2,-32(fp)
   4b7c8:	e13ffc17 	ldw	r4,-16(fp)
   4b7cc:	100b883a 	mov	r5,r2
   4b7d0:	004b6240 	call	4b624 <alt_ic_irq_disable>
   4b7d4:	e0bff715 	stw	r2,-36(fp)
   4b7d8:	e0bff917 	ldw	r2,-28(fp)
   4b7dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b7e0:	e0bffb17 	ldw	r2,-20(fp)
   4b7e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4b7e8:	e0bff717 	ldw	r2,-36(fp)
}
   4b7ec:	e037883a 	mov	sp,fp
   4b7f0:	dfc00117 	ldw	ra,4(sp)
   4b7f4:	df000017 	ldw	fp,0(sp)
   4b7f8:	dec00204 	addi	sp,sp,8
   4b7fc:	f800283a 	ret

0004b800 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4b800:	defff804 	addi	sp,sp,-32
   4b804:	dfc00715 	stw	ra,28(sp)
   4b808:	df000615 	stw	fp,24(sp)
   4b80c:	dc000515 	stw	r16,20(sp)
   4b810:	df000504 	addi	fp,sp,20
   4b814:	e13ffc15 	stw	r4,-16(fp)
   4b818:	e17ffd15 	stw	r5,-12(fp)
   4b81c:	e1bffe15 	stw	r6,-8(fp)
   4b820:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4b824:	e13ffd17 	ldw	r4,-12(fp)
   4b828:	e17ffe17 	ldw	r5,-8(fp)
   4b82c:	e1bfff17 	ldw	r6,-4(fp)
   4b830:	004ba980 	call	4ba98 <open>
   4b834:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4b838:	e0bffb17 	ldw	r2,-20(fp)
   4b83c:	10002216 	blt	r2,zero,4b8c8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4b840:	04000074 	movhi	r16,1
   4b844:	84031004 	addi	r16,r16,3136
   4b848:	e0bffb17 	ldw	r2,-20(fp)
   4b84c:	1009883a 	mov	r4,r2
   4b850:	01400304 	movi	r5,12
   4b854:	00495d00 	call	495d0 <__mulsi3>
   4b858:	8085883a 	add	r2,r16,r2
   4b85c:	10c00017 	ldw	r3,0(r2)
   4b860:	e0bffc17 	ldw	r2,-16(fp)
   4b864:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4b868:	04000074 	movhi	r16,1
   4b86c:	84031004 	addi	r16,r16,3136
   4b870:	e0bffb17 	ldw	r2,-20(fp)
   4b874:	1009883a 	mov	r4,r2
   4b878:	01400304 	movi	r5,12
   4b87c:	00495d00 	call	495d0 <__mulsi3>
   4b880:	8085883a 	add	r2,r16,r2
   4b884:	10800104 	addi	r2,r2,4
   4b888:	10c00017 	ldw	r3,0(r2)
   4b88c:	e0bffc17 	ldw	r2,-16(fp)
   4b890:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4b894:	04000074 	movhi	r16,1
   4b898:	84031004 	addi	r16,r16,3136
   4b89c:	e0bffb17 	ldw	r2,-20(fp)
   4b8a0:	1009883a 	mov	r4,r2
   4b8a4:	01400304 	movi	r5,12
   4b8a8:	00495d00 	call	495d0 <__mulsi3>
   4b8ac:	8085883a 	add	r2,r16,r2
   4b8b0:	10800204 	addi	r2,r2,8
   4b8b4:	10c00017 	ldw	r3,0(r2)
   4b8b8:	e0bffc17 	ldw	r2,-16(fp)
   4b8bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4b8c0:	e13ffb17 	ldw	r4,-20(fp)
   4b8c4:	004a37c0 	call	4a37c <alt_release_fd>
  }
} 
   4b8c8:	e037883a 	mov	sp,fp
   4b8cc:	dfc00217 	ldw	ra,8(sp)
   4b8d0:	df000117 	ldw	fp,4(sp)
   4b8d4:	dc000017 	ldw	r16,0(sp)
   4b8d8:	dec00304 	addi	sp,sp,12
   4b8dc:	f800283a 	ret

0004b8e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4b8e0:	defffb04 	addi	sp,sp,-20
   4b8e4:	dfc00415 	stw	ra,16(sp)
   4b8e8:	df000315 	stw	fp,12(sp)
   4b8ec:	df000304 	addi	fp,sp,12
   4b8f0:	e13ffd15 	stw	r4,-12(fp)
   4b8f4:	e17ffe15 	stw	r5,-8(fp)
   4b8f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4b8fc:	01000074 	movhi	r4,1
   4b900:	21031304 	addi	r4,r4,3148
   4b904:	e17ffd17 	ldw	r5,-12(fp)
   4b908:	01800044 	movi	r6,1
   4b90c:	01c07fc4 	movi	r7,511
   4b910:	004b8000 	call	4b800 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4b914:	01000074 	movhi	r4,1
   4b918:	21031004 	addi	r4,r4,3136
   4b91c:	e17ffe17 	ldw	r5,-8(fp)
   4b920:	000d883a 	mov	r6,zero
   4b924:	01c07fc4 	movi	r7,511
   4b928:	004b8000 	call	4b800 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4b92c:	01000074 	movhi	r4,1
   4b930:	21031604 	addi	r4,r4,3160
   4b934:	e17fff17 	ldw	r5,-4(fp)
   4b938:	01800044 	movi	r6,1
   4b93c:	01c07fc4 	movi	r7,511
   4b940:	004b8000 	call	4b800 <alt_open_fd>
}  
   4b944:	e037883a 	mov	sp,fp
   4b948:	dfc00117 	ldw	ra,4(sp)
   4b94c:	df000017 	ldw	fp,0(sp)
   4b950:	dec00204 	addi	sp,sp,8
   4b954:	f800283a 	ret

0004b958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b958:	defffe04 	addi	sp,sp,-8
   4b95c:	dfc00115 	stw	ra,4(sp)
   4b960:	df000015 	stw	fp,0(sp)
   4b964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b968:	00800074 	movhi	r2,1
   4b96c:	10879204 	addi	r2,r2,7752
   4b970:	10800017 	ldw	r2,0(r2)
   4b974:	10000526 	beq	r2,zero,4b98c <alt_get_errno+0x34>
   4b978:	00800074 	movhi	r2,1
   4b97c:	10879204 	addi	r2,r2,7752
   4b980:	10800017 	ldw	r2,0(r2)
   4b984:	103ee83a 	callr	r2
   4b988:	00000206 	br	4b994 <alt_get_errno+0x3c>
   4b98c:	00800074 	movhi	r2,1
   4b990:	1087a204 	addi	r2,r2,7816
}
   4b994:	e037883a 	mov	sp,fp
   4b998:	dfc00117 	ldw	ra,4(sp)
   4b99c:	df000017 	ldw	fp,0(sp)
   4b9a0:	dec00204 	addi	sp,sp,8
   4b9a4:	f800283a 	ret

0004b9a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4b9a8:	defffb04 	addi	sp,sp,-20
   4b9ac:	dfc00415 	stw	ra,16(sp)
   4b9b0:	df000315 	stw	fp,12(sp)
   4b9b4:	dc000215 	stw	r16,8(sp)
   4b9b8:	df000204 	addi	fp,sp,8
   4b9bc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4b9c0:	e0bfff17 	ldw	r2,-4(fp)
   4b9c4:	10800217 	ldw	r2,8(r2)
   4b9c8:	10d00034 	orhi	r3,r2,16384
   4b9cc:	e0bfff17 	ldw	r2,-4(fp)
   4b9d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b9d4:	e03ffe15 	stw	zero,-8(fp)
   4b9d8:	00002206 	br	4ba64 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b9dc:	04000074 	movhi	r16,1
   4b9e0:	84031004 	addi	r16,r16,3136
   4b9e4:	e0bffe17 	ldw	r2,-8(fp)
   4b9e8:	1009883a 	mov	r4,r2
   4b9ec:	01400304 	movi	r5,12
   4b9f0:	00495d00 	call	495d0 <__mulsi3>
   4b9f4:	8085883a 	add	r2,r16,r2
   4b9f8:	10c00017 	ldw	r3,0(r2)
   4b9fc:	e0bfff17 	ldw	r2,-4(fp)
   4ba00:	10800017 	ldw	r2,0(r2)
   4ba04:	1880141e 	bne	r3,r2,4ba58 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4ba08:	04000074 	movhi	r16,1
   4ba0c:	84031004 	addi	r16,r16,3136
   4ba10:	e0bffe17 	ldw	r2,-8(fp)
   4ba14:	1009883a 	mov	r4,r2
   4ba18:	01400304 	movi	r5,12
   4ba1c:	00495d00 	call	495d0 <__mulsi3>
   4ba20:	8085883a 	add	r2,r16,r2
   4ba24:	10800204 	addi	r2,r2,8
   4ba28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ba2c:	10000a0e 	bge	r2,zero,4ba58 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4ba30:	e13ffe17 	ldw	r4,-8(fp)
   4ba34:	01400304 	movi	r5,12
   4ba38:	00495d00 	call	495d0 <__mulsi3>
   4ba3c:	00c00074 	movhi	r3,1
   4ba40:	18c31004 	addi	r3,r3,3136
   4ba44:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4ba48:	e0bfff17 	ldw	r2,-4(fp)
   4ba4c:	18800226 	beq	r3,r2,4ba58 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4ba50:	00bffcc4 	movi	r2,-13
   4ba54:	00000a06 	br	4ba80 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ba58:	e0bffe17 	ldw	r2,-8(fp)
   4ba5c:	10800044 	addi	r2,r2,1
   4ba60:	e0bffe15 	stw	r2,-8(fp)
   4ba64:	00800074 	movhi	r2,1
   4ba68:	10879104 	addi	r2,r2,7748
   4ba6c:	10800017 	ldw	r2,0(r2)
   4ba70:	1007883a 	mov	r3,r2
   4ba74:	e0bffe17 	ldw	r2,-8(fp)
   4ba78:	18bfd82e 	bgeu	r3,r2,4b9dc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4ba7c:	0005883a 	mov	r2,zero
}
   4ba80:	e037883a 	mov	sp,fp
   4ba84:	dfc00217 	ldw	ra,8(sp)
   4ba88:	df000117 	ldw	fp,4(sp)
   4ba8c:	dc000017 	ldw	r16,0(sp)
   4ba90:	dec00304 	addi	sp,sp,12
   4ba94:	f800283a 	ret

0004ba98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4ba98:	defff604 	addi	sp,sp,-40
   4ba9c:	dfc00915 	stw	ra,36(sp)
   4baa0:	df000815 	stw	fp,32(sp)
   4baa4:	df000804 	addi	fp,sp,32
   4baa8:	e13ffd15 	stw	r4,-12(fp)
   4baac:	e17ffe15 	stw	r5,-8(fp)
   4bab0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4bab4:	00bfffc4 	movi	r2,-1
   4bab8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4babc:	00bffb44 	movi	r2,-19
   4bac0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4bac4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4bac8:	e13ffd17 	ldw	r4,-12(fp)
   4bacc:	01400074 	movhi	r5,1
   4bad0:	29478f04 	addi	r5,r5,7740
   4bad4:	004bdac0 	call	4bdac <alt_find_dev>
   4bad8:	e0bff815 	stw	r2,-32(fp)
   4badc:	e0bff817 	ldw	r2,-32(fp)
   4bae0:	1000051e 	bne	r2,zero,4baf8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4bae4:	e13ffd17 	ldw	r4,-12(fp)
   4bae8:	004be3c0 	call	4be3c <alt_find_file>
   4baec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4baf0:	00800044 	movi	r2,1
   4baf4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4baf8:	e0bff817 	ldw	r2,-32(fp)
   4bafc:	10002a26 	beq	r2,zero,4bba8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4bb00:	e13ff817 	ldw	r4,-32(fp)
   4bb04:	004bf500 	call	4bf50 <alt_get_fd>
   4bb08:	e0bff915 	stw	r2,-28(fp)
   4bb0c:	e0bff917 	ldw	r2,-28(fp)
   4bb10:	1000030e 	bge	r2,zero,4bb20 <open+0x88>
    {
      status = index;
   4bb14:	e0bff917 	ldw	r2,-28(fp)
   4bb18:	e0bffa15 	stw	r2,-24(fp)
   4bb1c:	00002406 	br	4bbb0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4bb20:	e13ff917 	ldw	r4,-28(fp)
   4bb24:	01400304 	movi	r5,12
   4bb28:	00495d00 	call	495d0 <__mulsi3>
   4bb2c:	00c00074 	movhi	r3,1
   4bb30:	18c31004 	addi	r3,r3,3136
   4bb34:	10c5883a 	add	r2,r2,r3
   4bb38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4bb3c:	e0fffe17 	ldw	r3,-8(fp)
   4bb40:	00900034 	movhi	r2,16384
   4bb44:	10bfffc4 	addi	r2,r2,-1
   4bb48:	1886703a 	and	r3,r3,r2
   4bb4c:	e0bffc17 	ldw	r2,-16(fp)
   4bb50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4bb54:	e0bffb17 	ldw	r2,-20(fp)
   4bb58:	1000051e 	bne	r2,zero,4bb70 <open+0xd8>
   4bb5c:	e13ffc17 	ldw	r4,-16(fp)
   4bb60:	004b9a80 	call	4b9a8 <alt_file_locked>
   4bb64:	e0bffa15 	stw	r2,-24(fp)
   4bb68:	e0bffa17 	ldw	r2,-24(fp)
   4bb6c:	10001016 	blt	r2,zero,4bbb0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4bb70:	e0bff817 	ldw	r2,-32(fp)
   4bb74:	10800317 	ldw	r2,12(r2)
   4bb78:	10000826 	beq	r2,zero,4bb9c <open+0x104>
   4bb7c:	e0bff817 	ldw	r2,-32(fp)
   4bb80:	10800317 	ldw	r2,12(r2)
   4bb84:	e13ffc17 	ldw	r4,-16(fp)
   4bb88:	e17ffd17 	ldw	r5,-12(fp)
   4bb8c:	e1bffe17 	ldw	r6,-8(fp)
   4bb90:	e1ffff17 	ldw	r7,-4(fp)
   4bb94:	103ee83a 	callr	r2
   4bb98:	00000106 	br	4bba0 <open+0x108>
   4bb9c:	0005883a 	mov	r2,zero
   4bba0:	e0bffa15 	stw	r2,-24(fp)
   4bba4:	00000206 	br	4bbb0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4bba8:	00bffb44 	movi	r2,-19
   4bbac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4bbb0:	e0bffa17 	ldw	r2,-24(fp)
   4bbb4:	1000080e 	bge	r2,zero,4bbd8 <open+0x140>
  {
    alt_release_fd (index);  
   4bbb8:	e13ff917 	ldw	r4,-28(fp)
   4bbbc:	004a37c0 	call	4a37c <alt_release_fd>
    ALT_ERRNO = -status;
   4bbc0:	004b9580 	call	4b958 <alt_get_errno>
   4bbc4:	e0fffa17 	ldw	r3,-24(fp)
   4bbc8:	00c7c83a 	sub	r3,zero,r3
   4bbcc:	10c00015 	stw	r3,0(r2)
    return -1;
   4bbd0:	00bfffc4 	movi	r2,-1
   4bbd4:	00000106 	br	4bbdc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4bbd8:	e0bff917 	ldw	r2,-28(fp)
}
   4bbdc:	e037883a 	mov	sp,fp
   4bbe0:	dfc00117 	ldw	ra,4(sp)
   4bbe4:	df000017 	ldw	fp,0(sp)
   4bbe8:	dec00204 	addi	sp,sp,8
   4bbec:	f800283a 	ret

0004bbf0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4bbf0:	defffa04 	addi	sp,sp,-24
   4bbf4:	df000515 	stw	fp,20(sp)
   4bbf8:	df000504 	addi	fp,sp,20
   4bbfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bc00:	0005303a 	rdctl	r2,status
   4bc04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bc08:	e0fffc17 	ldw	r3,-16(fp)
   4bc0c:	00bfff84 	movi	r2,-2
   4bc10:	1884703a 	and	r2,r3,r2
   4bc14:	1001703a 	wrctl	status,r2
  
  return context;
   4bc18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4bc1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4bc20:	e0bfff17 	ldw	r2,-4(fp)
   4bc24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4bc28:	e0bffd17 	ldw	r2,-12(fp)
   4bc2c:	10800017 	ldw	r2,0(r2)
   4bc30:	e0fffd17 	ldw	r3,-12(fp)
   4bc34:	18c00117 	ldw	r3,4(r3)
   4bc38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4bc3c:	e0bffd17 	ldw	r2,-12(fp)
   4bc40:	10800117 	ldw	r2,4(r2)
   4bc44:	e0fffd17 	ldw	r3,-12(fp)
   4bc48:	18c00017 	ldw	r3,0(r3)
   4bc4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4bc50:	e0bffd17 	ldw	r2,-12(fp)
   4bc54:	e0fffd17 	ldw	r3,-12(fp)
   4bc58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4bc5c:	e0bffd17 	ldw	r2,-12(fp)
   4bc60:	e0fffd17 	ldw	r3,-12(fp)
   4bc64:	10c00015 	stw	r3,0(r2)
   4bc68:	e0bffb17 	ldw	r2,-20(fp)
   4bc6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bc70:	e0bffe17 	ldw	r2,-8(fp)
   4bc74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4bc78:	e037883a 	mov	sp,fp
   4bc7c:	df000017 	ldw	fp,0(sp)
   4bc80:	dec00104 	addi	sp,sp,4
   4bc84:	f800283a 	ret

0004bc88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4bc88:	defffb04 	addi	sp,sp,-20
   4bc8c:	dfc00415 	stw	ra,16(sp)
   4bc90:	df000315 	stw	fp,12(sp)
   4bc94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4bc98:	d0a00d17 	ldw	r2,-32716(gp)
   4bc9c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4bca0:	d0a02017 	ldw	r2,-32640(gp)
   4bca4:	10800044 	addi	r2,r2,1
   4bca8:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bcac:	00002e06 	br	4bd68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4bcb0:	e0bffd17 	ldw	r2,-12(fp)
   4bcb4:	10800017 	ldw	r2,0(r2)
   4bcb8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4bcbc:	e0bffd17 	ldw	r2,-12(fp)
   4bcc0:	10800403 	ldbu	r2,16(r2)
   4bcc4:	10803fcc 	andi	r2,r2,255
   4bcc8:	10000426 	beq	r2,zero,4bcdc <alt_tick+0x54>
   4bccc:	d0a02017 	ldw	r2,-32640(gp)
   4bcd0:	1000021e 	bne	r2,zero,4bcdc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4bcd4:	e0bffd17 	ldw	r2,-12(fp)
   4bcd8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4bcdc:	e0bffd17 	ldw	r2,-12(fp)
   4bce0:	10800217 	ldw	r2,8(r2)
   4bce4:	d0e02017 	ldw	r3,-32640(gp)
   4bce8:	18801d36 	bltu	r3,r2,4bd60 <alt_tick+0xd8>
   4bcec:	e0bffd17 	ldw	r2,-12(fp)
   4bcf0:	10800403 	ldbu	r2,16(r2)
   4bcf4:	10803fcc 	andi	r2,r2,255
   4bcf8:	1000191e 	bne	r2,zero,4bd60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4bcfc:	e0bffd17 	ldw	r2,-12(fp)
   4bd00:	10c00317 	ldw	r3,12(r2)
   4bd04:	e0bffd17 	ldw	r2,-12(fp)
   4bd08:	10800517 	ldw	r2,20(r2)
   4bd0c:	1009883a 	mov	r4,r2
   4bd10:	183ee83a 	callr	r3
   4bd14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4bd18:	e0bfff17 	ldw	r2,-4(fp)
   4bd1c:	1000031e 	bne	r2,zero,4bd2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4bd20:	e13ffd17 	ldw	r4,-12(fp)
   4bd24:	004bbf00 	call	4bbf0 <alt_alarm_stop>
   4bd28:	00000d06 	br	4bd60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4bd2c:	e0bffd17 	ldw	r2,-12(fp)
   4bd30:	10c00217 	ldw	r3,8(r2)
   4bd34:	e0bfff17 	ldw	r2,-4(fp)
   4bd38:	1887883a 	add	r3,r3,r2
   4bd3c:	e0bffd17 	ldw	r2,-12(fp)
   4bd40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4bd44:	e0bffd17 	ldw	r2,-12(fp)
   4bd48:	10c00217 	ldw	r3,8(r2)
   4bd4c:	d0a02017 	ldw	r2,-32640(gp)
   4bd50:	1880032e 	bgeu	r3,r2,4bd60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4bd54:	e0bffd17 	ldw	r2,-12(fp)
   4bd58:	00c00044 	movi	r3,1
   4bd5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4bd60:	e0bffe17 	ldw	r2,-8(fp)
   4bd64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bd68:	e0fffd17 	ldw	r3,-12(fp)
   4bd6c:	d0a00d04 	addi	r2,gp,-32716
   4bd70:	18bfcf1e 	bne	r3,r2,4bcb0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4bd74:	0001883a 	nop
}
   4bd78:	e037883a 	mov	sp,fp
   4bd7c:	dfc00117 	ldw	ra,4(sp)
   4bd80:	df000017 	ldw	fp,0(sp)
   4bd84:	dec00204 	addi	sp,sp,8
   4bd88:	f800283a 	ret

0004bd8c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4bd8c:	deffff04 	addi	sp,sp,-4
   4bd90:	df000015 	stw	fp,0(sp)
   4bd94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4bd98:	000170fa 	wrctl	ienable,zero
}
   4bd9c:	e037883a 	mov	sp,fp
   4bda0:	df000017 	ldw	fp,0(sp)
   4bda4:	dec00104 	addi	sp,sp,4
   4bda8:	f800283a 	ret

0004bdac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4bdac:	defffa04 	addi	sp,sp,-24
   4bdb0:	dfc00515 	stw	ra,20(sp)
   4bdb4:	df000415 	stw	fp,16(sp)
   4bdb8:	df000404 	addi	fp,sp,16
   4bdbc:	e13ffe15 	stw	r4,-8(fp)
   4bdc0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4bdc4:	e0bfff17 	ldw	r2,-4(fp)
   4bdc8:	10800017 	ldw	r2,0(r2)
   4bdcc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4bdd0:	e13ffe17 	ldw	r4,-8(fp)
   4bdd4:	00406380 	call	40638 <strlen>
   4bdd8:	10800044 	addi	r2,r2,1
   4bddc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4bde0:	00000d06 	br	4be18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4bde4:	e0bffc17 	ldw	r2,-16(fp)
   4bde8:	10c00217 	ldw	r3,8(r2)
   4bdec:	e0bffd17 	ldw	r2,-12(fp)
   4bdf0:	1809883a 	mov	r4,r3
   4bdf4:	e17ffe17 	ldw	r5,-8(fp)
   4bdf8:	100d883a 	mov	r6,r2
   4bdfc:	004c0700 	call	4c070 <memcmp>
   4be00:	1000021e 	bne	r2,zero,4be0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4be04:	e0bffc17 	ldw	r2,-16(fp)
   4be08:	00000706 	br	4be28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4be0c:	e0bffc17 	ldw	r2,-16(fp)
   4be10:	10800017 	ldw	r2,0(r2)
   4be14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4be18:	e0fffc17 	ldw	r3,-16(fp)
   4be1c:	e0bfff17 	ldw	r2,-4(fp)
   4be20:	18bff01e 	bne	r3,r2,4bde4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4be24:	0005883a 	mov	r2,zero
}
   4be28:	e037883a 	mov	sp,fp
   4be2c:	dfc00117 	ldw	ra,4(sp)
   4be30:	df000017 	ldw	fp,0(sp)
   4be34:	dec00204 	addi	sp,sp,8
   4be38:	f800283a 	ret

0004be3c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4be3c:	defffb04 	addi	sp,sp,-20
   4be40:	dfc00415 	stw	ra,16(sp)
   4be44:	df000315 	stw	fp,12(sp)
   4be48:	df000304 	addi	fp,sp,12
   4be4c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4be50:	00800074 	movhi	r2,1
   4be54:	10878d04 	addi	r2,r2,7732
   4be58:	10800017 	ldw	r2,0(r2)
   4be5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4be60:	00003106 	br	4bf28 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4be64:	e0bffd17 	ldw	r2,-12(fp)
   4be68:	10800217 	ldw	r2,8(r2)
   4be6c:	1009883a 	mov	r4,r2
   4be70:	00406380 	call	40638 <strlen>
   4be74:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4be78:	e0bffd17 	ldw	r2,-12(fp)
   4be7c:	10c00217 	ldw	r3,8(r2)
   4be80:	e0bffe17 	ldw	r2,-8(fp)
   4be84:	10bfffc4 	addi	r2,r2,-1
   4be88:	1885883a 	add	r2,r3,r2
   4be8c:	10800003 	ldbu	r2,0(r2)
   4be90:	10803fcc 	andi	r2,r2,255
   4be94:	1080201c 	xori	r2,r2,128
   4be98:	10bfe004 	addi	r2,r2,-128
   4be9c:	10800bd8 	cmpnei	r2,r2,47
   4bea0:	1000031e 	bne	r2,zero,4beb0 <alt_find_file+0x74>
    {
      len -= 1;
   4bea4:	e0bffe17 	ldw	r2,-8(fp)
   4bea8:	10bfffc4 	addi	r2,r2,-1
   4beac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4beb0:	e0bffe17 	ldw	r2,-8(fp)
   4beb4:	e0ffff17 	ldw	r3,-4(fp)
   4beb8:	1885883a 	add	r2,r3,r2
   4bebc:	10800003 	ldbu	r2,0(r2)
   4bec0:	10803fcc 	andi	r2,r2,255
   4bec4:	1080201c 	xori	r2,r2,128
   4bec8:	10bfe004 	addi	r2,r2,-128
   4becc:	10800be0 	cmpeqi	r2,r2,47
   4bed0:	1000081e 	bne	r2,zero,4bef4 <alt_find_file+0xb8>
   4bed4:	e0bffe17 	ldw	r2,-8(fp)
   4bed8:	e0ffff17 	ldw	r3,-4(fp)
   4bedc:	1885883a 	add	r2,r3,r2
   4bee0:	10800003 	ldbu	r2,0(r2)
   4bee4:	10803fcc 	andi	r2,r2,255
   4bee8:	1080201c 	xori	r2,r2,128
   4beec:	10bfe004 	addi	r2,r2,-128
   4bef0:	10000a1e 	bne	r2,zero,4bf1c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4bef4:	e0bffd17 	ldw	r2,-12(fp)
   4bef8:	10c00217 	ldw	r3,8(r2)
   4befc:	e0bffe17 	ldw	r2,-8(fp)
   4bf00:	1809883a 	mov	r4,r3
   4bf04:	e17fff17 	ldw	r5,-4(fp)
   4bf08:	100d883a 	mov	r6,r2
   4bf0c:	004c0700 	call	4c070 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4bf10:	1000021e 	bne	r2,zero,4bf1c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4bf14:	e0bffd17 	ldw	r2,-12(fp)
   4bf18:	00000806 	br	4bf3c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4bf1c:	e0bffd17 	ldw	r2,-12(fp)
   4bf20:	10800017 	ldw	r2,0(r2)
   4bf24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4bf28:	e0fffd17 	ldw	r3,-12(fp)
   4bf2c:	00800074 	movhi	r2,1
   4bf30:	10878d04 	addi	r2,r2,7732
   4bf34:	18bfcb1e 	bne	r3,r2,4be64 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4bf38:	0005883a 	mov	r2,zero
}
   4bf3c:	e037883a 	mov	sp,fp
   4bf40:	dfc00117 	ldw	ra,4(sp)
   4bf44:	df000017 	ldw	fp,0(sp)
   4bf48:	dec00204 	addi	sp,sp,8
   4bf4c:	f800283a 	ret

0004bf50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4bf50:	defffa04 	addi	sp,sp,-24
   4bf54:	dfc00515 	stw	ra,20(sp)
   4bf58:	df000415 	stw	fp,16(sp)
   4bf5c:	dc000315 	stw	r16,12(sp)
   4bf60:	df000304 	addi	fp,sp,12
   4bf64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4bf68:	00bffa04 	movi	r2,-24
   4bf6c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4bf70:	e03ffd15 	stw	zero,-12(fp)
   4bf74:	00002106 	br	4bffc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4bf78:	04000074 	movhi	r16,1
   4bf7c:	84031004 	addi	r16,r16,3136
   4bf80:	e0bffd17 	ldw	r2,-12(fp)
   4bf84:	1009883a 	mov	r4,r2
   4bf88:	01400304 	movi	r5,12
   4bf8c:	00495d00 	call	495d0 <__mulsi3>
   4bf90:	8085883a 	add	r2,r16,r2
   4bf94:	10800017 	ldw	r2,0(r2)
   4bf98:	1000151e 	bne	r2,zero,4bff0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4bf9c:	04000074 	movhi	r16,1
   4bfa0:	84031004 	addi	r16,r16,3136
   4bfa4:	e0bffd17 	ldw	r2,-12(fp)
   4bfa8:	1009883a 	mov	r4,r2
   4bfac:	01400304 	movi	r5,12
   4bfb0:	00495d00 	call	495d0 <__mulsi3>
   4bfb4:	8085883a 	add	r2,r16,r2
   4bfb8:	e0ffff17 	ldw	r3,-4(fp)
   4bfbc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4bfc0:	00800074 	movhi	r2,1
   4bfc4:	10879104 	addi	r2,r2,7748
   4bfc8:	10c00017 	ldw	r3,0(r2)
   4bfcc:	e0bffd17 	ldw	r2,-12(fp)
   4bfd0:	1880040e 	bge	r3,r2,4bfe4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4bfd4:	00800074 	movhi	r2,1
   4bfd8:	10879104 	addi	r2,r2,7748
   4bfdc:	e0fffd17 	ldw	r3,-12(fp)
   4bfe0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4bfe4:	e0bffd17 	ldw	r2,-12(fp)
   4bfe8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4bfec:	00000606 	br	4c008 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4bff0:	e0bffd17 	ldw	r2,-12(fp)
   4bff4:	10800044 	addi	r2,r2,1
   4bff8:	e0bffd15 	stw	r2,-12(fp)
   4bffc:	e0bffd17 	ldw	r2,-12(fp)
   4c000:	10800810 	cmplti	r2,r2,32
   4c004:	103fdc1e 	bne	r2,zero,4bf78 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c008:	e0bffe17 	ldw	r2,-8(fp)
}
   4c00c:	e037883a 	mov	sp,fp
   4c010:	dfc00217 	ldw	ra,8(sp)
   4c014:	df000117 	ldw	fp,4(sp)
   4c018:	dc000017 	ldw	r16,0(sp)
   4c01c:	dec00304 	addi	sp,sp,12
   4c020:	f800283a 	ret

0004c024 <atexit>:
   4c024:	200b883a 	mov	r5,r4
   4c028:	000d883a 	mov	r6,zero
   4c02c:	0009883a 	mov	r4,zero
   4c030:	000f883a 	mov	r7,zero
   4c034:	004c0ec1 	jmpi	4c0ec <__register_exitproc>

0004c038 <exit>:
   4c038:	defffe04 	addi	sp,sp,-8
   4c03c:	000b883a 	mov	r5,zero
   4c040:	dc000015 	stw	r16,0(sp)
   4c044:	dfc00115 	stw	ra,4(sp)
   4c048:	2021883a 	mov	r16,r4
   4c04c:	004c21c0 	call	4c21c <__call_exitprocs>
   4c050:	00800074 	movhi	r2,1
   4c054:	10878804 	addi	r2,r2,7712
   4c058:	11000017 	ldw	r4,0(r2)
   4c05c:	20800f17 	ldw	r2,60(r4)
   4c060:	10000126 	beq	r2,zero,4c068 <exit+0x30>
   4c064:	103ee83a 	callr	r2
   4c068:	8009883a 	mov	r4,r16
   4c06c:	004c3bc0 	call	4c3bc <_exit>

0004c070 <memcmp>:
   4c070:	01c000c4 	movi	r7,3
   4c074:	3980192e 	bgeu	r7,r6,4c0dc <memcmp+0x6c>
   4c078:	2904b03a 	or	r2,r5,r4
   4c07c:	11c4703a 	and	r2,r2,r7
   4c080:	10000f26 	beq	r2,zero,4c0c0 <memcmp+0x50>
   4c084:	20c00003 	ldbu	r3,0(r4)
   4c088:	28800003 	ldbu	r2,0(r5)
   4c08c:	1880151e 	bne	r3,r2,4c0e4 <memcmp+0x74>
   4c090:	31bfff84 	addi	r6,r6,-2
   4c094:	01ffffc4 	movi	r7,-1
   4c098:	00000406 	br	4c0ac <memcmp+0x3c>
   4c09c:	20c00003 	ldbu	r3,0(r4)
   4c0a0:	28800003 	ldbu	r2,0(r5)
   4c0a4:	31bfffc4 	addi	r6,r6,-1
   4c0a8:	18800e1e 	bne	r3,r2,4c0e4 <memcmp+0x74>
   4c0ac:	21000044 	addi	r4,r4,1
   4c0b0:	29400044 	addi	r5,r5,1
   4c0b4:	31fff91e 	bne	r6,r7,4c09c <memcmp+0x2c>
   4c0b8:	0005883a 	mov	r2,zero
   4c0bc:	f800283a 	ret
   4c0c0:	20c00017 	ldw	r3,0(r4)
   4c0c4:	28800017 	ldw	r2,0(r5)
   4c0c8:	1880041e 	bne	r3,r2,4c0dc <memcmp+0x6c>
   4c0cc:	31bfff04 	addi	r6,r6,-4
   4c0d0:	21000104 	addi	r4,r4,4
   4c0d4:	29400104 	addi	r5,r5,4
   4c0d8:	39bff936 	bltu	r7,r6,4c0c0 <memcmp+0x50>
   4c0dc:	303fe91e 	bne	r6,zero,4c084 <memcmp+0x14>
   4c0e0:	003ff506 	br	4c0b8 <memcmp+0x48>
   4c0e4:	1885c83a 	sub	r2,r3,r2
   4c0e8:	f800283a 	ret

0004c0ec <__register_exitproc>:
   4c0ec:	defffa04 	addi	sp,sp,-24
   4c0f0:	00800074 	movhi	r2,1
   4c0f4:	10878804 	addi	r2,r2,7712
   4c0f8:	dc000315 	stw	r16,12(sp)
   4c0fc:	14000017 	ldw	r16,0(r2)
   4c100:	dc400415 	stw	r17,16(sp)
   4c104:	dfc00515 	stw	ra,20(sp)
   4c108:	80805217 	ldw	r2,328(r16)
   4c10c:	2023883a 	mov	r17,r4
   4c110:	10003e26 	beq	r2,zero,4c20c <__register_exitproc+0x120>
   4c114:	10c00117 	ldw	r3,4(r2)
   4c118:	020007c4 	movi	r8,31
   4c11c:	40c0180e 	bge	r8,r3,4c180 <__register_exitproc+0x94>
   4c120:	00800034 	movhi	r2,0
   4c124:	10800004 	addi	r2,r2,0
   4c128:	1000061e 	bne	r2,zero,4c144 <__register_exitproc+0x58>
   4c12c:	00bfffc4 	movi	r2,-1
   4c130:	dfc00517 	ldw	ra,20(sp)
   4c134:	dc400417 	ldw	r17,16(sp)
   4c138:	dc000317 	ldw	r16,12(sp)
   4c13c:	dec00604 	addi	sp,sp,24
   4c140:	f800283a 	ret
   4c144:	01006404 	movi	r4,400
   4c148:	d9400015 	stw	r5,0(sp)
   4c14c:	d9800115 	stw	r6,4(sp)
   4c150:	d9c00215 	stw	r7,8(sp)
   4c154:	00000000 	call	0 <__alt_mem_onchip_shared_memory>
   4c158:	d9400017 	ldw	r5,0(sp)
   4c15c:	d9800117 	ldw	r6,4(sp)
   4c160:	d9c00217 	ldw	r7,8(sp)
   4c164:	103ff126 	beq	r2,zero,4c12c <__register_exitproc+0x40>
   4c168:	80c05217 	ldw	r3,328(r16)
   4c16c:	10000115 	stw	zero,4(r2)
   4c170:	10c00015 	stw	r3,0(r2)
   4c174:	80805215 	stw	r2,328(r16)
   4c178:	10006215 	stw	zero,392(r2)
   4c17c:	10006315 	stw	zero,396(r2)
   4c180:	10c00117 	ldw	r3,4(r2)
   4c184:	88000d1e 	bne	r17,zero,4c1bc <__register_exitproc+0xd0>
   4c188:	19000084 	addi	r4,r3,2
   4c18c:	2109883a 	add	r4,r4,r4
   4c190:	18c00044 	addi	r3,r3,1
   4c194:	2109883a 	add	r4,r4,r4
   4c198:	1109883a 	add	r4,r2,r4
   4c19c:	10c00115 	stw	r3,4(r2)
   4c1a0:	0005883a 	mov	r2,zero
   4c1a4:	21400015 	stw	r5,0(r4)
   4c1a8:	dfc00517 	ldw	ra,20(sp)
   4c1ac:	dc400417 	ldw	r17,16(sp)
   4c1b0:	dc000317 	ldw	r16,12(sp)
   4c1b4:	dec00604 	addi	sp,sp,24
   4c1b8:	f800283a 	ret
   4c1bc:	02400044 	movi	r9,1
   4c1c0:	12806217 	ldw	r10,392(r2)
   4c1c4:	48d2983a 	sll	r9,r9,r3
   4c1c8:	19000804 	addi	r4,r3,32
   4c1cc:	18d1883a 	add	r8,r3,r3
   4c1d0:	2109883a 	add	r4,r4,r4
   4c1d4:	4211883a 	add	r8,r8,r8
   4c1d8:	2109883a 	add	r4,r4,r4
   4c1dc:	1109883a 	add	r4,r2,r4
   4c1e0:	1211883a 	add	r8,r2,r8
   4c1e4:	5254b03a 	or	r10,r10,r9
   4c1e8:	21c02215 	stw	r7,136(r4)
   4c1ec:	41802215 	stw	r6,136(r8)
   4c1f0:	12806215 	stw	r10,392(r2)
   4c1f4:	01000084 	movi	r4,2
   4c1f8:	893fe31e 	bne	r17,r4,4c188 <__register_exitproc+0x9c>
   4c1fc:	11006317 	ldw	r4,396(r2)
   4c200:	2252b03a 	or	r9,r4,r9
   4c204:	12406315 	stw	r9,396(r2)
   4c208:	003fdf06 	br	4c188 <__register_exitproc+0x9c>
   4c20c:	00800074 	movhi	r2,1
   4c210:	1087f304 	addi	r2,r2,8140
   4c214:	80805215 	stw	r2,328(r16)
   4c218:	003fbe06 	br	4c114 <__register_exitproc+0x28>

0004c21c <__call_exitprocs>:
   4c21c:	00800074 	movhi	r2,1
   4c220:	10878804 	addi	r2,r2,7712
   4c224:	10800017 	ldw	r2,0(r2)
   4c228:	defff304 	addi	sp,sp,-52
   4c22c:	df000b15 	stw	fp,44(sp)
   4c230:	d8800015 	stw	r2,0(sp)
   4c234:	10805204 	addi	r2,r2,328
   4c238:	dd400815 	stw	r21,32(sp)
   4c23c:	dfc00c15 	stw	ra,48(sp)
   4c240:	ddc00a15 	stw	r23,40(sp)
   4c244:	dd800915 	stw	r22,36(sp)
   4c248:	dd000715 	stw	r20,28(sp)
   4c24c:	dcc00615 	stw	r19,24(sp)
   4c250:	dc800515 	stw	r18,20(sp)
   4c254:	dc400415 	stw	r17,16(sp)
   4c258:	dc000315 	stw	r16,12(sp)
   4c25c:	d9000115 	stw	r4,4(sp)
   4c260:	2839883a 	mov	fp,r5
   4c264:	d8800215 	stw	r2,8(sp)
   4c268:	057fffc4 	movi	r21,-1
   4c26c:	d8800017 	ldw	r2,0(sp)
   4c270:	ddc00217 	ldw	r23,8(sp)
   4c274:	14805217 	ldw	r18,328(r2)
   4c278:	90001726 	beq	r18,zero,4c2d8 <__call_exitprocs+0xbc>
   4c27c:	94400117 	ldw	r17,4(r18)
   4c280:	8c3fffc4 	addi	r16,r17,-1
   4c284:	80001116 	blt	r16,zero,4c2cc <__call_exitprocs+0xb0>
   4c288:	8c400044 	addi	r17,r17,1
   4c28c:	8427883a 	add	r19,r16,r16
   4c290:	8c63883a 	add	r17,r17,r17
   4c294:	95802204 	addi	r22,r18,136
   4c298:	9ce7883a 	add	r19,r19,r19
   4c29c:	8c63883a 	add	r17,r17,r17
   4c2a0:	b4e7883a 	add	r19,r22,r19
   4c2a4:	9463883a 	add	r17,r18,r17
   4c2a8:	e0001726 	beq	fp,zero,4c308 <__call_exitprocs+0xec>
   4c2ac:	8c87c83a 	sub	r3,r17,r18
   4c2b0:	b0c7883a 	add	r3,r22,r3
   4c2b4:	18c01e17 	ldw	r3,120(r3)
   4c2b8:	1f001326 	beq	r3,fp,4c308 <__call_exitprocs+0xec>
   4c2bc:	843fffc4 	addi	r16,r16,-1
   4c2c0:	9cffff04 	addi	r19,r19,-4
   4c2c4:	8c7fff04 	addi	r17,r17,-4
   4c2c8:	857ff71e 	bne	r16,r21,4c2a8 <__call_exitprocs+0x8c>
   4c2cc:	00800034 	movhi	r2,0
   4c2d0:	10800004 	addi	r2,r2,0
   4c2d4:	10002a1e 	bne	r2,zero,4c380 <__call_exitprocs+0x164>
   4c2d8:	dfc00c17 	ldw	ra,48(sp)
   4c2dc:	df000b17 	ldw	fp,44(sp)
   4c2e0:	ddc00a17 	ldw	r23,40(sp)
   4c2e4:	dd800917 	ldw	r22,36(sp)
   4c2e8:	dd400817 	ldw	r21,32(sp)
   4c2ec:	dd000717 	ldw	r20,28(sp)
   4c2f0:	dcc00617 	ldw	r19,24(sp)
   4c2f4:	dc800517 	ldw	r18,20(sp)
   4c2f8:	dc400417 	ldw	r17,16(sp)
   4c2fc:	dc000317 	ldw	r16,12(sp)
   4c300:	dec00d04 	addi	sp,sp,52
   4c304:	f800283a 	ret
   4c308:	91000117 	ldw	r4,4(r18)
   4c30c:	88c00017 	ldw	r3,0(r17)
   4c310:	213fffc4 	addi	r4,r4,-1
   4c314:	24001526 	beq	r4,r16,4c36c <__call_exitprocs+0x150>
   4c318:	88000015 	stw	zero,0(r17)
   4c31c:	183fe726 	beq	r3,zero,4c2bc <__call_exitprocs+0xa0>
   4c320:	00800044 	movi	r2,1
   4c324:	1408983a 	sll	r4,r2,r16
   4c328:	91406217 	ldw	r5,392(r18)
   4c32c:	95000117 	ldw	r20,4(r18)
   4c330:	214a703a 	and	r5,r4,r5
   4c334:	28000b26 	beq	r5,zero,4c364 <__call_exitprocs+0x148>
   4c338:	91406317 	ldw	r5,396(r18)
   4c33c:	2148703a 	and	r4,r4,r5
   4c340:	20000c1e 	bne	r4,zero,4c374 <__call_exitprocs+0x158>
   4c344:	99400017 	ldw	r5,0(r19)
   4c348:	d9000117 	ldw	r4,4(sp)
   4c34c:	183ee83a 	callr	r3
   4c350:	90c00117 	ldw	r3,4(r18)
   4c354:	1d3fc51e 	bne	r3,r20,4c26c <__call_exitprocs+0x50>
   4c358:	b8c00017 	ldw	r3,0(r23)
   4c35c:	1cbfd726 	beq	r3,r18,4c2bc <__call_exitprocs+0xa0>
   4c360:	003fc206 	br	4c26c <__call_exitprocs+0x50>
   4c364:	183ee83a 	callr	r3
   4c368:	003ff906 	br	4c350 <__call_exitprocs+0x134>
   4c36c:	94000115 	stw	r16,4(r18)
   4c370:	003fea06 	br	4c31c <__call_exitprocs+0x100>
   4c374:	99000017 	ldw	r4,0(r19)
   4c378:	183ee83a 	callr	r3
   4c37c:	003ff406 	br	4c350 <__call_exitprocs+0x134>
   4c380:	90c00117 	ldw	r3,4(r18)
   4c384:	1800071e 	bne	r3,zero,4c3a4 <__call_exitprocs+0x188>
   4c388:	90c00017 	ldw	r3,0(r18)
   4c38c:	18000926 	beq	r3,zero,4c3b4 <__call_exitprocs+0x198>
   4c390:	9009883a 	mov	r4,r18
   4c394:	b8c00015 	stw	r3,0(r23)
   4c398:	00000000 	call	0 <__alt_mem_onchip_shared_memory>
   4c39c:	bc800017 	ldw	r18,0(r23)
   4c3a0:	003fb506 	br	4c278 <__call_exitprocs+0x5c>
   4c3a4:	90c00017 	ldw	r3,0(r18)
   4c3a8:	902f883a 	mov	r23,r18
   4c3ac:	1825883a 	mov	r18,r3
   4c3b0:	003fb106 	br	4c278 <__call_exitprocs+0x5c>
   4c3b4:	0007883a 	mov	r3,zero
   4c3b8:	003ffb06 	br	4c3a8 <__call_exitprocs+0x18c>

0004c3bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4c3bc:	defffc04 	addi	sp,sp,-16
   4c3c0:	df000315 	stw	fp,12(sp)
   4c3c4:	df000304 	addi	fp,sp,12
   4c3c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4c3cc:	0001883a 	nop
   4c3d0:	e0bfff17 	ldw	r2,-4(fp)
   4c3d4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4c3d8:	e0bffd17 	ldw	r2,-12(fp)
   4c3dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4c3e0:	e0bffe17 	ldw	r2,-8(fp)
   4c3e4:	10000226 	beq	r2,zero,4c3f0 <_exit+0x34>
    ALT_SIM_FAIL();
   4c3e8:	002af070 	cmpltui	zero,zero,43969
   4c3ec:	00000106 	br	4c3f4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4c3f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4c3f4:	003fff06 	br	4c3f4 <_exit+0x38>
