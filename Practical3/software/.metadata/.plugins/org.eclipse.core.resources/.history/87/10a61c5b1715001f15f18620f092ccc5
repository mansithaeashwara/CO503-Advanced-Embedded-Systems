/*
 * 	FIFO queue for shared memory communication between niosII processors
 *
 *  	DATE		: 18-08-2016
 *      AUTHOR	: Isuru Nawinne
*
*	Structure of the FIFO:
*	___________________________________________________________________________
*	| 	full	| 	empty	| 	count		|	|	|	|	|	|	|	|	|
*	| 	?	| 	?		| 	?		|	|	|	|	|	|	|	|	|
*	___________________________________________________________________________
*/


#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
	/*
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==1);
	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE, writep, *buffer);
	// Update the write pointer
	writep+=UNIT_SIZE;
	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp)+1);
	// Update the "full?" and "empty?" flags accordingly
	if(IORD_32DIRECT(MEM_BASE,countp) == CAPACITY){
		IOWR_32DIRECT(MEM_BASE, fullp, 0x1);
	}
	// Reset the empty flag if FIFO now has 1 enrty
	else if(IORD_32DIRECT(MEM_BASE,countp)>0){
		IOWR_32DIRECT(MEM_BASE, emptyp, 0x0);
	}
	*/

	while (IORD_32DIRECT(MEM_BASE, fullp) == 1)
	{
		// wait
	}
	IOWR_32DIRECT(MEM_BASE, writep, *buffer);
	writep+=UNIT_SIZE;
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE, countp)+1);
	if(CAPACITY == IORD_32DIRECT(MEM_BASE, countp))
	{
		IOWR_32DIRECT(MEM_BASE, fullp, 1);
	}
	else{
		IOWR_32DIRECT(MEM_BASE, fullp, 0);
	}
	if(IORD_32DIRECT(MEM_BASE, countp) == 0x00)
	{
		IOWR_32DIRECT(MEM_BASE, emptyp, 1);
	}else{
		IOWR_32DIRECT(MEM_BASE, emptyp, 0);
	}
}


void READ_FIFO_1(int *buffer)
{
/*
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==1);
	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
	// Update the read pointer
	readp+=UNIT_SIZE;
	printf("%d \n", readp);
	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp)+1);
	// Update the "full?" and "empty?" flags accordingly
	if(IORD_32DIRECT(MEM_BASE,countp)==0){
		IOWR_32DIRECT(MEM_BASE, emptyp, 0x1);
	}
	// Reset the empty flag if FIFO now has 1 enrty
	else if(IORD_32DIRECT(MEM_BASE,countp)<CAPACITY){
		IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
	}
*/

	while(IORD_32DIRECT(MEM_BASE, emptyp) == 1)
	{
		// wait
	}

	*buffer = IORD_32DIRECT(MEM_BASE, readp);
	readp+=UNIT_SIZE;
	//printf("%d \n", readp);
	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
	//printf("countp = %d",countp);

	/*
	if(CAPACITY == IORD_32DIRECT(MEM_BASE, countp))
	{
		IOWR_32DIRECT(MEM_BASE, fullp, 1);
	}
	else{
		IOWR_32DIRECT(MEM_BASE, fullp, 0);
	}
	if(IORD_32DIRECT(MEM_BASE, countp) == 0x00)
	{
		IOWR_32DIRECT(MEM_BASE, emptyp, 1);
	}else{
		IOWR_32DIRECT(MEM_BASE, emptyp, 0);
	}
	*/

	/*
	if(writep==readp && IORD_32DIRECT(MEM_BASE,writep)!=NULL){
			IOWR_32DIRECT(MEM_BASE,fullp,0x1);
	}else{
			IORD_32DIRECT(MEM_BASE,fullp);
	}

	if(writep==readp && IORD_32DIRECT(MEM_BASE,readp)==NULL){
			IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
	}else{
			IORD_32DIRECT(MEM_BASE,emptyp);
	}
	*/
	if(IORD_32DIRECT(MEM_BASE,countp) == 0){
		IOWR_32DIRECT(MEM_BASE, emptyp, 0x1);
	}
	// Reset the FULLP flag if FIFO now has count SMALLER THAN CAPACITY
	else if(IORD_32DIRECT(MEM_BASE,countp)<CAPACITY){
		IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
	}
	//printf("%d  ",readp);
	//if read pointer hit the end off the queue
	if(readp == STARTP + CAPACITY*UNIT_SIZE)
		readp = STARTP;


}



//Initialization
void FIFO_1_INIT()
{
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
	readp  = STARTP;
	fullp   = MEM_BASE; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
	emptyp   = fullp + UNIT_SIZE;
	countp  = emptyp + UNIT_SIZE;

	// Assigning values for the flags.
	//IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
	//IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
	//IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
}
